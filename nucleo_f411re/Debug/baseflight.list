
baseflight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025ea0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003cd8  08026038  08026038  00036038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029d10  08029d10  000400fc  2**0
                  CONTENTS
  4 .ARM          00000008  08029d10  08029d10  00039d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029d18  08029d18  000400fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029d18  08029d18  00039d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029d1c  08029d1c  00039d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08029d20  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fa8  20000100  08029e1c  00040100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200020a8  08029e1c  000420a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b0b2  00000000  00000000  0004012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ad37  00000000  00000000  0008b1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027b0  00000000  00000000  00095f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002400  00000000  00000000  000986c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c0a  00000000  00000000  0009aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003964e  00000000  00000000  000bc6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa133  00000000  00000000  000f5d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019fe53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad60  00000000  00000000  0019fea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08026020 	.word	0x08026020

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08026020 	.word	0x08026020

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__gedf2>:
 8000998:	f04f 3cff 	mov.w	ip, #4294967295
 800099c:	e006      	b.n	80009ac <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__ledf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	e002      	b.n	80009ac <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__cmpdf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009bc:	bf18      	it	ne
 80009be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c2:	d01b      	beq.n	80009fc <__cmpdf2+0x54>
 80009c4:	b001      	add	sp, #4
 80009c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ca:	bf0c      	ite	eq
 80009cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d0:	ea91 0f03 	teqne	r1, r3
 80009d4:	bf02      	ittt	eq
 80009d6:	ea90 0f02 	teqeq	r0, r2
 80009da:	2000      	moveq	r0, #0
 80009dc:	4770      	bxeq	lr
 80009de:	f110 0f00 	cmn.w	r0, #0
 80009e2:	ea91 0f03 	teq	r1, r3
 80009e6:	bf58      	it	pl
 80009e8:	4299      	cmppl	r1, r3
 80009ea:	bf08      	it	eq
 80009ec:	4290      	cmpeq	r0, r2
 80009ee:	bf2c      	ite	cs
 80009f0:	17d8      	asrcs	r0, r3, #31
 80009f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f6:	f040 0001 	orr.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__cmpdf2+0x64>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d107      	bne.n	8000a1c <__cmpdf2+0x74>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d1d6      	bne.n	80009c4 <__cmpdf2+0x1c>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d0d3      	beq.n	80009c4 <__cmpdf2+0x1c>
 8000a1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdrcmple>:
 8000a24:	4684      	mov	ip, r0
 8000a26:	4610      	mov	r0, r2
 8000a28:	4662      	mov	r2, ip
 8000a2a:	468c      	mov	ip, r1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4663      	mov	r3, ip
 8000a30:	e000      	b.n	8000a34 <__aeabi_cdcmpeq>
 8000a32:	bf00      	nop

08000a34 <__aeabi_cdcmpeq>:
 8000a34:	b501      	push	{r0, lr}
 8000a36:	f7ff ffb7 	bl	80009a8 <__cmpdf2>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	bf48      	it	mi
 8000a3e:	f110 0f00 	cmnmi.w	r0, #0
 8000a42:	bd01      	pop	{r0, pc}

08000a44 <__aeabi_dcmpeq>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff fff4 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2001      	moveq	r0, #1
 8000a50:	2000      	movne	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmplt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffea 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmple>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffe0 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpge>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffce 	bl	8000a24 <__aeabi_cdrcmple>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpgt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffc4 	bl	8000a24 <__aeabi_cdrcmple>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_frsub>:
 8000bd8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	e002      	b.n	8000be4 <__addsf3>
 8000bde:	bf00      	nop

08000be0 <__aeabi_fsub>:
 8000be0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000be4 <__addsf3>:
 8000be4:	0042      	lsls	r2, r0, #1
 8000be6:	bf1f      	itttt	ne
 8000be8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bec:	ea92 0f03 	teqne	r2, r3
 8000bf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf8:	d06a      	beq.n	8000cd0 <__addsf3+0xec>
 8000bfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c02:	bfc1      	itttt	gt
 8000c04:	18d2      	addgt	r2, r2, r3
 8000c06:	4041      	eorgt	r1, r0
 8000c08:	4048      	eorgt	r0, r1
 8000c0a:	4041      	eorgt	r1, r0
 8000c0c:	bfb8      	it	lt
 8000c0e:	425b      	neglt	r3, r3
 8000c10:	2b19      	cmp	r3, #25
 8000c12:	bf88      	it	hi
 8000c14:	4770      	bxhi	lr
 8000c16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4249      	negne	r1, r1
 8000c36:	ea92 0f03 	teq	r2, r3
 8000c3a:	d03f      	beq.n	8000cbc <__addsf3+0xd8>
 8000c3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c40:	fa41 fc03 	asr.w	ip, r1, r3
 8000c44:	eb10 000c 	adds.w	r0, r0, ip
 8000c48:	f1c3 0320 	rsb	r3, r3, #32
 8000c4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__addsf3+0x78>
 8000c56:	4249      	negs	r1, r1
 8000c58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c60:	d313      	bcc.n	8000c8a <__addsf3+0xa6>
 8000c62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c66:	d306      	bcc.n	8000c76 <__addsf3+0x92>
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c6e:	f102 0201 	add.w	r2, r2, #1
 8000c72:	2afe      	cmp	r2, #254	; 0xfe
 8000c74:	d251      	bcs.n	8000d1a <__addsf3+0x136>
 8000c76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7e:	bf08      	it	eq
 8000c80:	f020 0001 	biceq.w	r0, r0, #1
 8000c84:	ea40 0003 	orr.w	r0, r0, r3
 8000c88:	4770      	bx	lr
 8000c8a:	0049      	lsls	r1, r1, #1
 8000c8c:	eb40 0000 	adc.w	r0, r0, r0
 8000c90:	3a01      	subs	r2, #1
 8000c92:	bf28      	it	cs
 8000c94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c98:	d2ed      	bcs.n	8000c76 <__addsf3+0x92>
 8000c9a:	fab0 fc80 	clz	ip, r0
 8000c9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ca2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ca6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000caa:	bfaa      	itet	ge
 8000cac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb0:	4252      	neglt	r2, r2
 8000cb2:	4318      	orrge	r0, r3
 8000cb4:	bfbc      	itt	lt
 8000cb6:	40d0      	lsrlt	r0, r2
 8000cb8:	4318      	orrlt	r0, r3
 8000cba:	4770      	bx	lr
 8000cbc:	f092 0f00 	teq	r2, #0
 8000cc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cc4:	bf06      	itte	eq
 8000cc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cca:	3201      	addeq	r2, #1
 8000ccc:	3b01      	subne	r3, #1
 8000cce:	e7b5      	b.n	8000c3c <__addsf3+0x58>
 8000cd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd8:	bf18      	it	ne
 8000cda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cde:	d021      	beq.n	8000d24 <__addsf3+0x140>
 8000ce0:	ea92 0f03 	teq	r2, r3
 8000ce4:	d004      	beq.n	8000cf0 <__addsf3+0x10c>
 8000ce6:	f092 0f00 	teq	r2, #0
 8000cea:	bf08      	it	eq
 8000cec:	4608      	moveq	r0, r1
 8000cee:	4770      	bx	lr
 8000cf0:	ea90 0f01 	teq	r0, r1
 8000cf4:	bf1c      	itt	ne
 8000cf6:	2000      	movne	r0, #0
 8000cf8:	4770      	bxne	lr
 8000cfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cfe:	d104      	bne.n	8000d0a <__addsf3+0x126>
 8000d00:	0040      	lsls	r0, r0, #1
 8000d02:	bf28      	it	cs
 8000d04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d08:	4770      	bx	lr
 8000d0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d0e:	bf3c      	itt	cc
 8000d10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bxcc	lr
 8000d16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d22:	4770      	bx	lr
 8000d24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d28:	bf16      	itet	ne
 8000d2a:	4608      	movne	r0, r1
 8000d2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d30:	4601      	movne	r1, r0
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	bf06      	itte	eq
 8000d36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d3a:	ea90 0f01 	teqeq	r0, r1
 8000d3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_ui2f>:
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e004      	b.n	8000d54 <__aeabi_i2f+0x8>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_i2f>:
 8000d4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d50:	bf48      	it	mi
 8000d52:	4240      	negmi	r0, r0
 8000d54:	ea5f 0c00 	movs.w	ip, r0
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d60:	4601      	mov	r1, r0
 8000d62:	f04f 0000 	mov.w	r0, #0
 8000d66:	e01c      	b.n	8000da2 <__aeabi_l2f+0x2a>

08000d68 <__aeabi_ul2f>:
 8000d68:	ea50 0201 	orrs.w	r2, r0, r1
 8000d6c:	bf08      	it	eq
 8000d6e:	4770      	bxeq	lr
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e00a      	b.n	8000d8c <__aeabi_l2f+0x14>
 8000d76:	bf00      	nop

08000d78 <__aeabi_l2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d84:	d502      	bpl.n	8000d8c <__aeabi_l2f+0x14>
 8000d86:	4240      	negs	r0, r0
 8000d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d8c:	ea5f 0c01 	movs.w	ip, r1
 8000d90:	bf02      	ittt	eq
 8000d92:	4684      	moveq	ip, r0
 8000d94:	4601      	moveq	r1, r0
 8000d96:	2000      	moveq	r0, #0
 8000d98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d9c:	bf08      	it	eq
 8000d9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000da2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000da6:	fabc f28c 	clz	r2, ip
 8000daa:	3a08      	subs	r2, #8
 8000dac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db0:	db10      	blt.n	8000dd4 <__aeabi_l2f+0x5c>
 8000db2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db6:	4463      	add	r3, ip
 8000db8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dbc:	f1c2 0220 	rsb	r2, r2, #32
 8000dc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc8:	eb43 0002 	adc.w	r0, r3, r2
 8000dcc:	bf08      	it	eq
 8000dce:	f020 0001 	biceq.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	f102 0220 	add.w	r2, r2, #32
 8000dd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000de4:	fa21 f202 	lsr.w	r2, r1, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ldivmod>:
 8000df4:	b97b      	cbnz	r3, 8000e16 <__aeabi_ldivmod+0x22>
 8000df6:	b972      	cbnz	r2, 8000e16 <__aeabi_ldivmod+0x22>
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	bfbe      	ittt	lt
 8000dfc:	2000      	movlt	r0, #0
 8000dfe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000e02:	e006      	blt.n	8000e12 <__aeabi_ldivmod+0x1e>
 8000e04:	bf08      	it	eq
 8000e06:	2800      	cmpeq	r0, #0
 8000e08:	bf1c      	itt	ne
 8000e0a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e0e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e12:	f000 b9bf 	b.w	8001194 <__aeabi_idiv0>
 8000e16:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e1a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	db09      	blt.n	8000e36 <__aeabi_ldivmod+0x42>
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db1a      	blt.n	8000e5c <__aeabi_ldivmod+0x68>
 8000e26:	f000 f84d 	bl	8000ec4 <__udivmoddi4>
 8000e2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e32:	b004      	add	sp, #16
 8000e34:	4770      	bx	lr
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db1b      	blt.n	8000e78 <__aeabi_ldivmod+0x84>
 8000e40:	f000 f840 	bl	8000ec4 <__udivmoddi4>
 8000e44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e4c:	b004      	add	sp, #16
 8000e4e:	4240      	negs	r0, r0
 8000e50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e54:	4252      	negs	r2, r2
 8000e56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e5a:	4770      	bx	lr
 8000e5c:	4252      	negs	r2, r2
 8000e5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e62:	f000 f82f 	bl	8000ec4 <__udivmoddi4>
 8000e66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e6e:	b004      	add	sp, #16
 8000e70:	4240      	negs	r0, r0
 8000e72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e76:	4770      	bx	lr
 8000e78:	4252      	negs	r2, r2
 8000e7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e7e:	f000 f821 	bl	8000ec4 <__udivmoddi4>
 8000e82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e8a:	b004      	add	sp, #16
 8000e8c:	4252      	negs	r2, r2
 8000e8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_uldivmod>:
 8000e94:	b953      	cbnz	r3, 8000eac <__aeabi_uldivmod+0x18>
 8000e96:	b94a      	cbnz	r2, 8000eac <__aeabi_uldivmod+0x18>
 8000e98:	2900      	cmp	r1, #0
 8000e9a:	bf08      	it	eq
 8000e9c:	2800      	cmpeq	r0, #0
 8000e9e:	bf1c      	itt	ne
 8000ea0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ea4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ea8:	f000 b974 	b.w	8001194 <__aeabi_idiv0>
 8000eac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eb4:	f000 f806 	bl	8000ec4 <__udivmoddi4>
 8000eb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ec0:	b004      	add	sp, #16
 8000ec2:	4770      	bx	lr

08000ec4 <__udivmoddi4>:
 8000ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec8:	9d08      	ldr	r5, [sp, #32]
 8000eca:	4604      	mov	r4, r0
 8000ecc:	468e      	mov	lr, r1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d14d      	bne.n	8000f6e <__udivmoddi4+0xaa>
 8000ed2:	428a      	cmp	r2, r1
 8000ed4:	4694      	mov	ip, r2
 8000ed6:	d969      	bls.n	8000fac <__udivmoddi4+0xe8>
 8000ed8:	fab2 f282 	clz	r2, r2
 8000edc:	b152      	cbz	r2, 8000ef4 <__udivmoddi4+0x30>
 8000ede:	fa01 f302 	lsl.w	r3, r1, r2
 8000ee2:	f1c2 0120 	rsb	r1, r2, #32
 8000ee6:	fa20 f101 	lsr.w	r1, r0, r1
 8000eea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eee:	ea41 0e03 	orr.w	lr, r1, r3
 8000ef2:	4094      	lsls	r4, r2
 8000ef4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef8:	0c21      	lsrs	r1, r4, #16
 8000efa:	fbbe f6f8 	udiv	r6, lr, r8
 8000efe:	fa1f f78c 	uxth.w	r7, ip
 8000f02:	fb08 e316 	mls	r3, r8, r6, lr
 8000f06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f0a:	fb06 f107 	mul.w	r1, r6, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d90a      	bls.n	8000f28 <__udivmoddi4+0x64>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f1a:	f080 811f 	bcs.w	800115c <__udivmoddi4+0x298>
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	f240 811c 	bls.w	800115c <__udivmoddi4+0x298>
 8000f24:	3e02      	subs	r6, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1a5b      	subs	r3, r3, r1
 8000f2a:	b2a4      	uxth	r4, r4
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f38:	fb00 f707 	mul.w	r7, r0, r7
 8000f3c:	42a7      	cmp	r7, r4
 8000f3e:	d90a      	bls.n	8000f56 <__udivmoddi4+0x92>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	f080 810a 	bcs.w	8001160 <__udivmoddi4+0x29c>
 8000f4c:	42a7      	cmp	r7, r4
 8000f4e:	f240 8107 	bls.w	8001160 <__udivmoddi4+0x29c>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f5a:	1be4      	subs	r4, r4, r7
 8000f5c:	2600      	movs	r6, #0
 8000f5e:	b11d      	cbz	r5, 8000f68 <__udivmoddi4+0xa4>
 8000f60:	40d4      	lsrs	r4, r2
 8000f62:	2300      	movs	r3, #0
 8000f64:	e9c5 4300 	strd	r4, r3, [r5]
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d909      	bls.n	8000f86 <__udivmoddi4+0xc2>
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	f000 80ef 	beq.w	8001156 <__udivmoddi4+0x292>
 8000f78:	2600      	movs	r6, #0
 8000f7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000f7e:	4630      	mov	r0, r6
 8000f80:	4631      	mov	r1, r6
 8000f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f86:	fab3 f683 	clz	r6, r3
 8000f8a:	2e00      	cmp	r6, #0
 8000f8c:	d14a      	bne.n	8001024 <__udivmoddi4+0x160>
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d302      	bcc.n	8000f98 <__udivmoddi4+0xd4>
 8000f92:	4282      	cmp	r2, r0
 8000f94:	f200 80f9 	bhi.w	800118a <__udivmoddi4+0x2c6>
 8000f98:	1a84      	subs	r4, r0, r2
 8000f9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	469e      	mov	lr, r3
 8000fa2:	2d00      	cmp	r5, #0
 8000fa4:	d0e0      	beq.n	8000f68 <__udivmoddi4+0xa4>
 8000fa6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000faa:	e7dd      	b.n	8000f68 <__udivmoddi4+0xa4>
 8000fac:	b902      	cbnz	r2, 8000fb0 <__udivmoddi4+0xec>
 8000fae:	deff      	udf	#255	; 0xff
 8000fb0:	fab2 f282 	clz	r2, r2
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	f040 8092 	bne.w	80010de <__udivmoddi4+0x21a>
 8000fba:	eba1 010c 	sub.w	r1, r1, ip
 8000fbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc2:	fa1f fe8c 	uxth.w	lr, ip
 8000fc6:	2601      	movs	r6, #1
 8000fc8:	0c20      	lsrs	r0, r4, #16
 8000fca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fce:	fb07 1113 	mls	r1, r7, r3, r1
 8000fd2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fd6:	fb0e f003 	mul.w	r0, lr, r3
 8000fda:	4288      	cmp	r0, r1
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x12c>
 8000fde:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fe6:	d202      	bcs.n	8000fee <__udivmoddi4+0x12a>
 8000fe8:	4288      	cmp	r0, r1
 8000fea:	f200 80cb 	bhi.w	8001184 <__udivmoddi4+0x2c0>
 8000fee:	4643      	mov	r3, r8
 8000ff0:	1a09      	subs	r1, r1, r0
 8000ff2:	b2a4      	uxth	r4, r4
 8000ff4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ff8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ffc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001000:	fb0e fe00 	mul.w	lr, lr, r0
 8001004:	45a6      	cmp	lr, r4
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x156>
 8001008:	eb1c 0404 	adds.w	r4, ip, r4
 800100c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001010:	d202      	bcs.n	8001018 <__udivmoddi4+0x154>
 8001012:	45a6      	cmp	lr, r4
 8001014:	f200 80bb 	bhi.w	800118e <__udivmoddi4+0x2ca>
 8001018:	4608      	mov	r0, r1
 800101a:	eba4 040e 	sub.w	r4, r4, lr
 800101e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001022:	e79c      	b.n	8000f5e <__udivmoddi4+0x9a>
 8001024:	f1c6 0720 	rsb	r7, r6, #32
 8001028:	40b3      	lsls	r3, r6
 800102a:	fa22 fc07 	lsr.w	ip, r2, r7
 800102e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001032:	fa20 f407 	lsr.w	r4, r0, r7
 8001036:	fa01 f306 	lsl.w	r3, r1, r6
 800103a:	431c      	orrs	r4, r3
 800103c:	40f9      	lsrs	r1, r7
 800103e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001042:	fa00 f306 	lsl.w	r3, r0, r6
 8001046:	fbb1 f8f9 	udiv	r8, r1, r9
 800104a:	0c20      	lsrs	r0, r4, #16
 800104c:	fa1f fe8c 	uxth.w	lr, ip
 8001050:	fb09 1118 	mls	r1, r9, r8, r1
 8001054:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001058:	fb08 f00e 	mul.w	r0, r8, lr
 800105c:	4288      	cmp	r0, r1
 800105e:	fa02 f206 	lsl.w	r2, r2, r6
 8001062:	d90b      	bls.n	800107c <__udivmoddi4+0x1b8>
 8001064:	eb1c 0101 	adds.w	r1, ip, r1
 8001068:	f108 3aff 	add.w	sl, r8, #4294967295
 800106c:	f080 8088 	bcs.w	8001180 <__udivmoddi4+0x2bc>
 8001070:	4288      	cmp	r0, r1
 8001072:	f240 8085 	bls.w	8001180 <__udivmoddi4+0x2bc>
 8001076:	f1a8 0802 	sub.w	r8, r8, #2
 800107a:	4461      	add	r1, ip
 800107c:	1a09      	subs	r1, r1, r0
 800107e:	b2a4      	uxth	r4, r4
 8001080:	fbb1 f0f9 	udiv	r0, r1, r9
 8001084:	fb09 1110 	mls	r1, r9, r0, r1
 8001088:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800108c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001090:	458e      	cmp	lr, r1
 8001092:	d908      	bls.n	80010a6 <__udivmoddi4+0x1e2>
 8001094:	eb1c 0101 	adds.w	r1, ip, r1
 8001098:	f100 34ff 	add.w	r4, r0, #4294967295
 800109c:	d26c      	bcs.n	8001178 <__udivmoddi4+0x2b4>
 800109e:	458e      	cmp	lr, r1
 80010a0:	d96a      	bls.n	8001178 <__udivmoddi4+0x2b4>
 80010a2:	3802      	subs	r0, #2
 80010a4:	4461      	add	r1, ip
 80010a6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010aa:	fba0 9402 	umull	r9, r4, r0, r2
 80010ae:	eba1 010e 	sub.w	r1, r1, lr
 80010b2:	42a1      	cmp	r1, r4
 80010b4:	46c8      	mov	r8, r9
 80010b6:	46a6      	mov	lr, r4
 80010b8:	d356      	bcc.n	8001168 <__udivmoddi4+0x2a4>
 80010ba:	d053      	beq.n	8001164 <__udivmoddi4+0x2a0>
 80010bc:	b15d      	cbz	r5, 80010d6 <__udivmoddi4+0x212>
 80010be:	ebb3 0208 	subs.w	r2, r3, r8
 80010c2:	eb61 010e 	sbc.w	r1, r1, lr
 80010c6:	fa01 f707 	lsl.w	r7, r1, r7
 80010ca:	fa22 f306 	lsr.w	r3, r2, r6
 80010ce:	40f1      	lsrs	r1, r6
 80010d0:	431f      	orrs	r7, r3
 80010d2:	e9c5 7100 	strd	r7, r1, [r5]
 80010d6:	2600      	movs	r6, #0
 80010d8:	4631      	mov	r1, r6
 80010da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010de:	f1c2 0320 	rsb	r3, r2, #32
 80010e2:	40d8      	lsrs	r0, r3
 80010e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80010e8:	fa21 f303 	lsr.w	r3, r1, r3
 80010ec:	4091      	lsls	r1, r2
 80010ee:	4301      	orrs	r1, r0
 80010f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f4:	fa1f fe8c 	uxth.w	lr, ip
 80010f8:	fbb3 f0f7 	udiv	r0, r3, r7
 80010fc:	fb07 3610 	mls	r6, r7, r0, r3
 8001100:	0c0b      	lsrs	r3, r1, #16
 8001102:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001106:	fb00 f60e 	mul.w	r6, r0, lr
 800110a:	429e      	cmp	r6, r3
 800110c:	fa04 f402 	lsl.w	r4, r4, r2
 8001110:	d908      	bls.n	8001124 <__udivmoddi4+0x260>
 8001112:	eb1c 0303 	adds.w	r3, ip, r3
 8001116:	f100 38ff 	add.w	r8, r0, #4294967295
 800111a:	d22f      	bcs.n	800117c <__udivmoddi4+0x2b8>
 800111c:	429e      	cmp	r6, r3
 800111e:	d92d      	bls.n	800117c <__udivmoddi4+0x2b8>
 8001120:	3802      	subs	r0, #2
 8001122:	4463      	add	r3, ip
 8001124:	1b9b      	subs	r3, r3, r6
 8001126:	b289      	uxth	r1, r1
 8001128:	fbb3 f6f7 	udiv	r6, r3, r7
 800112c:	fb07 3316 	mls	r3, r7, r6, r3
 8001130:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001134:	fb06 f30e 	mul.w	r3, r6, lr
 8001138:	428b      	cmp	r3, r1
 800113a:	d908      	bls.n	800114e <__udivmoddi4+0x28a>
 800113c:	eb1c 0101 	adds.w	r1, ip, r1
 8001140:	f106 38ff 	add.w	r8, r6, #4294967295
 8001144:	d216      	bcs.n	8001174 <__udivmoddi4+0x2b0>
 8001146:	428b      	cmp	r3, r1
 8001148:	d914      	bls.n	8001174 <__udivmoddi4+0x2b0>
 800114a:	3e02      	subs	r6, #2
 800114c:	4461      	add	r1, ip
 800114e:	1ac9      	subs	r1, r1, r3
 8001150:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001154:	e738      	b.n	8000fc8 <__udivmoddi4+0x104>
 8001156:	462e      	mov	r6, r5
 8001158:	4628      	mov	r0, r5
 800115a:	e705      	b.n	8000f68 <__udivmoddi4+0xa4>
 800115c:	4606      	mov	r6, r0
 800115e:	e6e3      	b.n	8000f28 <__udivmoddi4+0x64>
 8001160:	4618      	mov	r0, r3
 8001162:	e6f8      	b.n	8000f56 <__udivmoddi4+0x92>
 8001164:	454b      	cmp	r3, r9
 8001166:	d2a9      	bcs.n	80010bc <__udivmoddi4+0x1f8>
 8001168:	ebb9 0802 	subs.w	r8, r9, r2
 800116c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001170:	3801      	subs	r0, #1
 8001172:	e7a3      	b.n	80010bc <__udivmoddi4+0x1f8>
 8001174:	4646      	mov	r6, r8
 8001176:	e7ea      	b.n	800114e <__udivmoddi4+0x28a>
 8001178:	4620      	mov	r0, r4
 800117a:	e794      	b.n	80010a6 <__udivmoddi4+0x1e2>
 800117c:	4640      	mov	r0, r8
 800117e:	e7d1      	b.n	8001124 <__udivmoddi4+0x260>
 8001180:	46d0      	mov	r8, sl
 8001182:	e77b      	b.n	800107c <__udivmoddi4+0x1b8>
 8001184:	3b02      	subs	r3, #2
 8001186:	4461      	add	r1, ip
 8001188:	e732      	b.n	8000ff0 <__udivmoddi4+0x12c>
 800118a:	4630      	mov	r0, r6
 800118c:	e709      	b.n	8000fa2 <__udivmoddi4+0xde>
 800118e:	4464      	add	r4, ip
 8001190:	3802      	subs	r0, #2
 8001192:	e742      	b.n	800101a <__udivmoddi4+0x156>

08001194 <__aeabi_idiv0>:
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <adcInit>:

static uint32_t adcValues[ADC_CHANNEL_MAX];


void adcInit(drv_adc_config_t *init)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    extern ADC_HandleTypeDef hadc1;

    // Start ADC
    HAL_ADC_Start_DMA(&hadc1, adcValues, ADC_CHANNEL_MAX);
 80011a0:	2204      	movs	r2, #4
 80011a2:	4904      	ldr	r1, [pc, #16]	; (80011b4 <adcInit+0x1c>)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <adcInit+0x20>)
 80011a6:	f01a fec3 	bl	801bf30 <HAL_ADC_Start_DMA>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000011c 	.word	0x2000011c
 80011b8:	200003dc 	.word	0x200003dc

080011bc <actGetAdcChannel>:

uint16_t actGetAdcChannel(uint8_t channel)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
    return adcValues[channel];
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <actGetAdcChannel+0x20>)
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	b29b      	uxth	r3, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	2000011c 	.word	0x2000011c

080011e0 <actGetBatteryVoltage>:

float actGetBatteryVoltage()
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	return (adcValues[ADC_BATTERY] * 3.3f) / 4095;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <actGetBatteryVoltage+0x30>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001214 <actGetBatteryVoltage+0x34>
 80011f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001218 <actGetBatteryVoltage+0x38>
 80011fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001200:	eef0 7a66 	vmov.f32	s15, s13
}
 8001204:	eeb0 0a67 	vmov.f32	s0, s15
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	2000011c 	.word	0x2000011c
 8001214:	40533333 	.word	0x40533333
 8001218:	457ff000 	.word	0x457ff000

0800121c <actGetBatteryCurrent>:

uint32_t actGetBatteryCurrent()
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	return 5000 * adcValues[ADC_EXTERNAL_CURRENT] / 4095;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <actGetBatteryCurrent+0x28>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f241 3288 	movw	r2, #5000	; 0x1388
 8001228:	fb03 f202 	mul.w	r2, r3, r2
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <actGetBatteryCurrent+0x2c>)
 800122e:	fba3 1302 	umull	r1, r3, r3, r2
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	0852      	lsrs	r2, r2, #1
 8001236:	4413      	add	r3, r2
 8001238:	0adb      	lsrs	r3, r3, #11
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	2000011c 	.word	0x2000011c
 8001248:	00100101 	.word	0x00100101

0800124c <gy86Detect>:
// sync this with AccelSensors enum from board.h
static const char* hw_Names[] = { "MPU9250", "AK8963", "BMP280" };


bool gy86Detect(sensorSet_t *p_sensor_set, void* p_param)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
#endif

    (void)p_param;

    // Set acc_1G. Modified once by mpu6050CheckRevision for old (hopefully nonexistent outside of clones) parts
    acc_1G = 512 * 8;
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <gy86Detect+0xf8>)
 8001258:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800125c:	801a      	strh	r2, [r3, #0]

    // 16.4 dps/lsb scalefactor for all Invensense devices
    p_sensor_set->gyro.scale = (4.0f / 16.4f) * (M_PI / 180.0f) * 0.000001f;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a39      	ldr	r2, [pc, #228]	; (8001348 <gy86Detect+0xfc>)
 8001262:	615a      	str	r2, [r3, #20]

    memset(&config, 0, sizeof(PifGy86Config));
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2214      	movs	r2, #20
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f022 f80d 	bl	802328c <memset>

    config.disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8001272:	2301      	movs	r3, #1
 8001274:	733b      	strb	r3, [r7, #12]

    config.mpu60x0_clksel = MPU60X0_CLKSEL_PLL_ZGYRO;
 8001276:	2303      	movs	r3, #3
 8001278:	73bb      	strb	r3, [r7, #14]
    // default lpf is 42Hz, 255 is special case of nolpf
    if (p_sensor_set->gyro.lpf == 255)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	8a1b      	ldrh	r3, [r3, #16]
 800127e:	2bff      	cmp	r3, #255	; 0xff
 8001280:	d102      	bne.n	8001288 <gy86Detect+0x3c>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A260HZ_G256HZ;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e024      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 188)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	8a1b      	ldrh	r3, [r3, #16]
 800128c:	2bbb      	cmp	r3, #187	; 0xbb
 800128e:	d902      	bls.n	8001296 <gy86Detect+0x4a>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A184HZ_G188HZ;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e01d      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 98)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	8a1b      	ldrh	r3, [r3, #16]
 800129a:	2b61      	cmp	r3, #97	; 0x61
 800129c:	d902      	bls.n	80012a4 <gy86Detect+0x58>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A94HZ_G98HZ;
 800129e:	2302      	movs	r3, #2
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e016      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 42)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	8a1b      	ldrh	r3, [r3, #16]
 80012a8:	2b29      	cmp	r3, #41	; 0x29
 80012aa:	d902      	bls.n	80012b2 <gy86Detect+0x66>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A44HZ_G42HZ;
 80012ac:	2303      	movs	r3, #3
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e00f      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 20)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	8a1b      	ldrh	r3, [r3, #16]
 80012b6:	2b13      	cmp	r3, #19
 80012b8:	d902      	bls.n	80012c0 <gy86Detect+0x74>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A21HZ_G20HZ;
 80012ba:	2304      	movs	r3, #4
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e008      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 10)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	8a1b      	ldrh	r3, [r3, #16]
 80012c4:	2b09      	cmp	r3, #9
 80012c6:	d902      	bls.n	80012ce <gy86Detect+0x82>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A10HZ_G10HZ;
 80012c8:	2305      	movs	r3, #5
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	e001      	b.n	80012d2 <gy86Detect+0x86>
    else
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A5HZ_G5HZ;
 80012ce:	2306      	movs	r3, #6
 80012d0:	73fb      	strb	r3, [r7, #15]
    config.mpu60x0_fs_sel = MPU60X0_FS_SEL_2000DPS;
 80012d2:	2303      	movs	r3, #3
 80012d4:	743b      	strb	r3, [r7, #16]
    config.mpu60x0_afs_sel = MPU60X0_AFS_SEL_8G;
 80012d6:	2302      	movs	r3, #2
 80012d8:	737b      	strb	r3, [r7, #13]
    config.mpu60x0_i2c_mst_clk = MPU60X0_I2C_MST_CLK_400KHZ;
 80012da:	230d      	movs	r3, #13
 80012dc:	747b      	strb	r3, [r7, #17]

    config.hmc5883_gain = HMC5883_GAIN_1_3GA;
 80012de:	2301      	movs	r3, #1
 80012e0:	74fb      	strb	r3, [r7, #19]
    config.hmc5883_samples = HMC5883_SAMPLES_8;
 80012e2:	2303      	movs	r3, #3
 80012e4:	757b      	strb	r3, [r7, #21]
    config.hmc5883_data_rate = HMC5883_DATARATE_75HZ;
 80012e6:	2306      	movs	r3, #6
 80012e8:	74bb      	strb	r3, [r7, #18]
    config.hmc5883_mode = HMC5883_MODE_CONTINOUS;
 80012ea:	2300      	movs	r3, #0
 80012ec:	753b      	strb	r3, [r7, #20]

#ifdef BARO
    config.ms5611_osr = MS5611_OSR_4096;
 80012ee:	2308      	movs	r3, #8
 80012f0:	75bb      	strb	r3, [r7, #22]
    config.ms5611_read_period = 25;												// 25ms
 80012f2:	2319      	movs	r3, #25
 80012f4:	833b      	strh	r3, [r7, #24]
    config.ms5611_evt_read = evtBaroRead;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <gy86Detect+0x100>)
 80012f8:	61fb      	str	r3, [r7, #28]
#endif

    // initialize the device
    if (!mpu6050Init(&p_sensor_set->acc, &p_sensor_set->gyro, &p_sensor_set->mag, &config)) return false;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f103 0018 	add.w	r0, r3, #24
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	f000 f822 	bl	8001354 <mpu6050Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <gy86Detect+0xce>
 8001316:	2300      	movs	r3, #0
 8001318:	e010      	b.n	800133c <gy86Detect+0xf0>

    p_sensor_set->gyro.hardware = hw_Names[0];
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <gy86Detect+0x104>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
    p_sensor_set->acc.hardware = hw_Names[0];
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <gy86Detect+0x104>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
    p_sensor_set->mag.hardware = hw_Names[1];
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <gy86Detect+0x104>)
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	649a      	str	r2, [r3, #72]	; 0x48
    p_sensor_set->baro.hardware = hw_Names[2];
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <gy86Detect+0x104>)
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	631a      	str	r2, [r3, #48]	; 0x30

    return true;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000005a 	.word	0x2000005a
 8001348:	31924418 	.word	0x31924418
 800134c:	0800ebd5 	.word	0x0800ebd5
 8001350:	20000000 	.word	0x20000000

08001354 <mpu6050Init>:

static BOOL mpu6050Init(sensor_t *acc, sensor_t *gyro, sensor_t *mag, PifGy86Config* p_config)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af02      	add	r7, sp, #8
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
    if (!pifGy86_Init(&s_gy86, PIF_ID_AUTO, &g_i2c_port, &imu_sensor, p_config)) return FALSE;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <mpu6050Init+0x64>)
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <mpu6050Init+0x68>)
 800136a:	2100      	movs	r1, #0
 800136c:	4814      	ldr	r0, [pc, #80]	; (80013c0 <mpu6050Init+0x6c>)
 800136e:	f017 fce1 	bl	8018d34 <pifGy86_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <mpu6050Init+0x28>
 8001378:	2300      	movs	r3, #0
 800137a:	e018      	b.n	80013ae <mpu6050Init+0x5a>
    s_gy86._mpu6050.gyro_scale = 4;
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <mpu6050Init+0x6c>)
 800137e:	2204      	movs	r2, #4
 8001380:	711a      	strb	r2, [r3, #4]
    s_gy86._mpu6050.temp_scale = 100;
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <mpu6050Init+0x6c>)
 8001384:	2264      	movs	r2, #100	; 0x64
 8001386:	719a      	strb	r2, [r3, #6]

    acc->init = mpuAccInit;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <mpu6050Init+0x70>)
 800138c:	605a      	str	r2, [r3, #4]
    acc->read = mpuAccRead;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <mpu6050Init+0x74>)
 8001392:	609a      	str	r2, [r3, #8]
    gyro->init = mpuGyroInit;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <mpu6050Init+0x78>)
 8001398:	605a      	str	r2, [r3, #4]
    gyro->read = mpuGyroRead;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <mpu6050Init+0x7c>)
 800139e:	609a      	str	r2, [r3, #8]
    mag->init = hmc5883lInit;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <mpu6050Init+0x80>)
 80013a4:	605a      	str	r2, [r3, #4]
    mag->read = hmc5883lRead;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <mpu6050Init+0x84>)
 80013aa:	609a      	str	r2, [r3, #8]
    return TRUE;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20001a28 	.word	0x20001a28
 80013bc:	200017d0 	.word	0x200017d0
 80013c0:	2000012c 	.word	0x2000012c
 80013c4:	080013dd 	.word	0x080013dd
 80013c8:	08001401 	.word	0x08001401
 80013cc:	08001449 	.word	0x08001449
 80013d0:	0800146d 	.word	0x0800146d
 80013d4:	080014b5 	.word	0x080014b5
 80013d8:	08001805 	.word	0x08001805

080013dc <mpuAccInit>:

static BOOL mpuAccInit(PifImuSensorAlign align)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
    pifImuSensor_SetAccelAlign(&imu_sensor, align);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	4619      	mov	r1, r3
 80013ea:	4804      	ldr	r0, [pc, #16]	; (80013fc <mpuAccInit+0x20>)
 80013ec:	f018 fd37 	bl	8019e5e <pifImuSensor_SetAccelAlign>
    return TRUE;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20001a28 	.word	0x20001a28

08001400 <mpuAccRead>:

static BOOL mpuAccRead(int16_t *accData)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	int16_t data[3];

    if (!pifImuSensor_ReadAccel(&imu_sensor, data)) return FALSE;
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4619      	mov	r1, r3
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <mpuAccRead+0x44>)
 8001410:	f018 fd38 	bl	8019e84 <pifImuSensor_ReadAccel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <mpuAccRead+0x1e>
 800141a:	2300      	movs	r3, #0
 800141c:	e00e      	b.n	800143c <mpuAccRead+0x3c>
    accData[0] = data[0];
 800141e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	801a      	strh	r2, [r3, #0]
    accData[1] = data[1];
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3302      	adds	r3, #2
 800142a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800142e:	801a      	strh	r2, [r3, #0]
    accData[2] = data[2];
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3304      	adds	r3, #4
 8001434:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001438:	801a      	strh	r2, [r3, #0]
    return TRUE;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20001a28 	.word	0x20001a28

08001448 <mpuGyroInit>:

static BOOL mpuGyroInit(PifImuSensorAlign align)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
    pifImuSensor_SetGyroAlign(&imu_sensor, align);
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	4619      	mov	r1, r3
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <mpuGyroInit+0x20>)
 8001458:	f018 fcc8 	bl	8019dec <pifImuSensor_SetGyroAlign>
    return TRUE;
 800145c:	2301      	movs	r3, #1
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20001a28 	.word	0x20001a28

0800146c <mpuGyroRead>:

static BOOL mpuGyroRead(int16_t *gyroData)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	int16_t data[3];

	if (!pifImuSensor_ReadGyro(&imu_sensor, data)) return FALSE;
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <mpuGyroRead+0x44>)
 800147c:	f018 fcc8 	bl	8019e10 <pifImuSensor_ReadGyro>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <mpuGyroRead+0x1e>
 8001486:	2300      	movs	r3, #0
 8001488:	e00e      	b.n	80014a8 <mpuGyroRead+0x3c>
	gyroData[0] = data[0];
 800148a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	801a      	strh	r2, [r3, #0]
	gyroData[1] = data[1];
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3302      	adds	r3, #2
 8001496:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800149a:	801a      	strh	r2, [r3, #0]
	gyroData[2] = data[2];
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3304      	adds	r3, #4
 80014a0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014a4:	801a      	strh	r2, [r3, #0]
	return TRUE;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20001a28 	.word	0x20001a28

080014b4 <hmc5883lInit>:

static BOOL hmc5883lInit(PifImuSensorAlign align)
{
 80014b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014b8:	b08e      	sub	sp, #56	; 0x38
 80014ba:	af04      	add	r7, sp, #16
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]
    int16_t magADC[3];
    int i;
    int32_t xyz_total[3] = { 0, 0, 0 }; // 32 bit totals so they won't overflow.
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
    bool bret = true;           // Error indicator
 80014cc:	2301      	movs	r3, #1
 80014ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PifHmc5883ConfigA config_a;

    pifImuSensor_SetMagAlign(&imu_sensor, align);
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	4619      	mov	r1, r3
 80014d6:	48a6      	ldr	r0, [pc, #664]	; (8001770 <hmc5883lInit+0x2bc>)
 80014d8:	f018 fcfc 	bl	8019ed4 <pifImuSensor_SetMagAlign>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, FALSE)) return FALSE;
 80014dc:	4ba5      	ldr	r3, [pc, #660]	; (8001774 <hmc5883lInit+0x2c0>)
 80014de:	68d8      	ldr	r0, [r3, #12]
 80014e0:	2300      	movs	r3, #0
 80014e2:	f240 5201 	movw	r2, #1281	; 0x501
 80014e6:	216a      	movs	r1, #106	; 0x6a
 80014e8:	f011 fc3c 	bl	8012d64 <pifI2cDevice_WriteRegBit8>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <hmc5883lInit+0x42>
 80014f2:	2300      	movs	r3, #0
 80014f4:	e17d      	b.n	80017f2 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, TRUE)) return FALSE;
 80014f6:	4b9f      	ldr	r3, [pc, #636]	; (8001774 <hmc5883lInit+0x2c0>)
 80014f8:	68d8      	ldr	r0, [r3, #12]
 80014fa:	2301      	movs	r3, #1
 80014fc:	f240 1201 	movw	r2, #257	; 0x101
 8001500:	2137      	movs	r1, #55	; 0x37
 8001502:	f011 fc2f 	bl	8012d64 <pifI2cDevice_WriteRegBit8>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <hmc5883lInit+0x5c>
 800150c:	2300      	movs	r3, #0
 800150e:	e170      	b.n	80017f2 <hmc5883lInit+0x33e>

    config_a.byte = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	733b      	strb	r3, [r7, #12]
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_POS_BIAS;
 8001514:	7b3b      	ldrb	r3, [r7, #12]
 8001516:	2201      	movs	r2, #1
 8001518:	f362 0301 	bfi	r3, r2, #0, #2
 800151c:	733b      	strb	r3, [r7, #12]
    config_a.bit.data_rate = HMC5883_DATARATE_15HZ;
 800151e:	7b3b      	ldrb	r3, [r7, #12]
 8001520:	2204      	movs	r2, #4
 8001522:	f362 0384 	bfi	r3, r2, #2, #3
 8001526:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to pos bias
 8001528:	4b92      	ldr	r3, [pc, #584]	; (8001774 <hmc5883lInit+0x2c0>)
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	7b3a      	ldrb	r2, [r7, #12]
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f011 fc01 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <hmc5883lInit+0x8c>
 800153c:	2300      	movs	r3, #0
 800153e:	e158      	b.n	80017f2 <hmc5883lInit+0x33e>
    // Note that the  very first measurement after a gain change maintains the same gain as the previous setting.
    // The new gain setting is effective from the second measurement and on.
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_2_5GA)) return FALSE; // Set the Gain to 2.5Ga (7:5->011)
 8001540:	2103      	movs	r1, #3
 8001542:	488d      	ldr	r0, [pc, #564]	; (8001778 <hmc5883lInit+0x2c4>)
 8001544:	f018 f8fc 	bl	8019740 <pifHmc5883_SetGain>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <hmc5883lInit+0x9e>
 800154e:	2300      	movs	r3, #0
 8001550:	e14f      	b.n	80017f2 <hmc5883lInit+0x33e>
    pifTaskManager_YieldMs(100);
 8001552:	2064      	movs	r0, #100	; 0x64
 8001554:	f013 fba8 	bl	8014ca8 <pifTaskManager_YieldMs>
    pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	4886      	ldr	r0, [pc, #536]	; (8001778 <hmc5883lInit+0x2c4>)
 8001560:	f018 f90d 	bl	801977e <pifHmc5883_ReadMag>

    for (i = 0; i < 10; i++) {  // Collect 10 samples
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
 8001568:	e03d      	b.n	80015e6 <hmc5883lInit+0x132>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 800156a:	4b82      	ldr	r3, [pc, #520]	; (8001774 <hmc5883lInit+0x2c0>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	2201      	movs	r2, #1
 8001570:	2102      	movs	r1, #2
 8001572:	4618      	mov	r0, r3
 8001574:	f011 fbe0 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <hmc5883lInit+0xce>
 800157e:	2300      	movs	r3, #0
 8001580:	e137      	b.n	80017f2 <hmc5883lInit+0x33e>
        pifTaskManager_YieldMs(50);
 8001582:	2032      	movs	r0, #50	; 0x32
 8001584:	f013 fb90 	bl	8014ca8 <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);       // Get the raw values in case the scales have already been changed.
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	487a      	ldr	r0, [pc, #488]	; (8001778 <hmc5883lInit+0x2c4>)
 8001590:	f018 f8f5 	bl	801977e <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged rather than taking the max.
        xyz_total[X] += magADC[X];
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800159a:	4413      	add	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        xyz_total[Y] += magADC[Y];
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80015a4:	4413      	add	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]
        xyz_total[Z] += magADC[Z];
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015ae:	4413      	add	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 80015b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015ba:	4293      	cmp	r3, r2
 80015bc:	bfa8      	it	ge
 80015be:	4613      	movge	r3, r2
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015c6:	4293      	cmp	r3, r2
 80015c8:	bfa8      	it	ge
 80015ca:	4613      	movge	r3, r2
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80015d2:	dc03      	bgt.n	80015dc <hmc5883lInit+0x128>
            bret = false;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 80015da:	e007      	b.n	80015ec <hmc5883lInit+0x138>
        }
        actLed1Toggle();
 80015dc:	f000 fd7e 	bl	80020dc <actLed1Toggle>
    for (i = 0; i < 10; i++) {  // Collect 10 samples
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	3301      	adds	r3, #1
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	ddbe      	ble.n	800156a <hmc5883lInit+0xb6>
    }

    // Apply the negative bias. (Same gain)
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NEG_BIAS;
 80015ec:	7b3b      	ldrb	r3, [r7, #12]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f362 0301 	bfi	r3, r2, #0, #2
 80015f4:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to negative bias.
 80015f6:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <hmc5883lInit+0x2c0>)
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	7b3a      	ldrb	r2, [r7, #12]
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f011 fb9a 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <hmc5883lInit+0x15a>
 800160a:	2300      	movs	r3, #0
 800160c:	e0f1      	b.n	80017f2 <hmc5883lInit+0x33e>
    for (i = 0; i < 10; i++) {
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	e03d      	b.n	8001690 <hmc5883lInit+0x1dc>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 8001614:	4b57      	ldr	r3, [pc, #348]	; (8001774 <hmc5883lInit+0x2c0>)
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	2201      	movs	r2, #1
 800161a:	2102      	movs	r1, #2
 800161c:	4618      	mov	r0, r3
 800161e:	f011 fb8b 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <hmc5883lInit+0x178>
 8001628:	2300      	movs	r3, #0
 800162a:	e0e2      	b.n	80017f2 <hmc5883lInit+0x33e>
        pifTaskManager_YieldMs(50);
 800162c:	2032      	movs	r0, #50	; 0x32
 800162e:	f013 fb3b 	bl	8014ca8 <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);               // Get the raw values in case the scales have already been changed.
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	484f      	ldr	r0, [pc, #316]	; (8001778 <hmc5883lInit+0x2c4>)
 800163a:	f018 f8a0 	bl	801977e <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged.
        xyz_total[X] -= magADC[X];
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        xyz_total[Y] -= magADC[Y];
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	617b      	str	r3, [r7, #20]
        xyz_total[Z] -= magADC[Z];
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001658:	1a9b      	subs	r3, r3, r2
 800165a:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 800165c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001660:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001664:	4293      	cmp	r3, r2
 8001666:	bfa8      	it	ge
 8001668:	4613      	movge	r3, r2
 800166a:	b21a      	sxth	r2, r3
 800166c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001670:	4293      	cmp	r3, r2
 8001672:	bfa8      	it	ge
 8001674:	4613      	movge	r3, r2
 8001676:	b21b      	sxth	r3, r3
 8001678:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800167c:	dc03      	bgt.n	8001686 <hmc5883lInit+0x1d2>
            bret = false;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 8001684:	e007      	b.n	8001696 <hmc5883lInit+0x1e2>
        }
        actLed1Toggle();
 8001686:	f000 fd29 	bl	80020dc <actLed1Toggle>
    for (i = 0; i < 10; i++) {
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	3301      	adds	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	2b09      	cmp	r3, #9
 8001694:	ddbe      	ble.n	8001614 <hmc5883lInit+0x160>
    }

    s_gy86._hmc5883.scale[X] = fabsf(660.0f * HMC58X3_X_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[X]);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	ee07 3a90 	vmov	s15, r3
 800169c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a0:	eddf 6a36 	vldr	s13, [pc, #216]	; 800177c <hmc5883lInit+0x2c8>
 80016a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a8:	eef0 7ae7 	vabs.f32	s15, s15
 80016ac:	4b31      	ldr	r3, [pc, #196]	; (8001774 <hmc5883lInit+0x2c0>)
 80016ae:	edc3 7a05 	vstr	s15, [r3, #20]
    s_gy86._hmc5883.scale[Y] = fabsf(660.0f * HMC58X3_Y_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Y]);
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	ee07 3a90 	vmov	s15, r3
 80016b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016bc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800177c <hmc5883lInit+0x2c8>
 80016c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c4:	eef0 7ae7 	vabs.f32	s15, s15
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <hmc5883lInit+0x2c0>)
 80016ca:	edc3 7a06 	vstr	s15, [r3, #24]
    s_gy86._hmc5883.scale[Z] = fabsf(660.0f * HMC58X3_Z_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Z]);
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001780 <hmc5883lInit+0x2cc>
 80016dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e0:	eef0 7ae7 	vabs.f32	s15, s15
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <hmc5883lInit+0x2c0>)
 80016e6:	edc3 7a07 	vstr	s15, [r3, #28]

    // leave test mode
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 80016ea:	7b3b      	ldrb	r3, [r7, #12]
 80016ec:	f36f 0301 	bfc	r3, #0, #2
 80016f0:	733b      	strb	r3, [r7, #12]
    config_a.bit.samples = HMC5883_SAMPLES_8;
 80016f2:	7b3b      	ldrb	r3, [r7, #12]
 80016f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016f8:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;		// Configuration Register A  -- 0 11 100 00  num samples: 8 ; output rate: 15Hz ; normal measurement mode
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <hmc5883lInit+0x2c0>)
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	7b3a      	ldrb	r2, [r7, #12]
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f011 fb18 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <hmc5883lInit+0x25e>
 800170e:	2300      	movs	r3, #0
 8001710:	e06f      	b.n	80017f2 <hmc5883lInit+0x33e>
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_1_3GA)) return FALSE;                               		// Configuration Register B  -- 001 00000    configuration gain 1.3Ga
 8001712:	2101      	movs	r1, #1
 8001714:	4818      	ldr	r0, [pc, #96]	; (8001778 <hmc5883lInit+0x2c4>)
 8001716:	f018 f813 	bl	8019740 <pifHmc5883_SetGain>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <hmc5883lInit+0x270>
 8001720:	2300      	movs	r3, #0
 8001722:	e066      	b.n	80017f2 <hmc5883lInit+0x33e>
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_CONTINOUS)) return FALSE;	// Mode register             -- 000000 00    continuous Conversion Mode
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <hmc5883lInit+0x2c0>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	2200      	movs	r2, #0
 800172a:	2102      	movs	r1, #2
 800172c:	4618      	mov	r0, r3
 800172e:	f011 fb03 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <hmc5883lInit+0x288>
 8001738:	2300      	movs	r3, #0
 800173a:	e05a      	b.n	80017f2 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) return FALSE;
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <hmc5883lInit+0x2c0>)
 800173e:	68d8      	ldr	r0, [r3, #12]
 8001740:	2300      	movs	r3, #0
 8001742:	f240 1201 	movw	r2, #257	; 0x101
 8001746:	2137      	movs	r1, #55	; 0x37
 8001748:	f011 fb0c 	bl	8012d64 <pifI2cDevice_WriteRegBit8>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <hmc5883lInit+0x2a2>
 8001752:	2300      	movs	r3, #0
 8001754:	e04d      	b.n	80017f2 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) return FALSE;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <hmc5883lInit+0x2c0>)
 8001758:	68d8      	ldr	r0, [r3, #12]
 800175a:	2301      	movs	r3, #1
 800175c:	f240 5201 	movw	r2, #1281	; 0x501
 8001760:	216a      	movs	r1, #106	; 0x6a
 8001762:	f011 faff 	bl	8012d64 <pifI2cDevice_WriteRegBit8>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10b      	bne.n	8001784 <hmc5883lInit+0x2d0>
 800176c:	2300      	movs	r3, #0
 800176e:	e040      	b.n	80017f2 <hmc5883lInit+0x33e>
 8001770:	20001a28 	.word	0x20001a28
 8001774:	2000012c 	.word	0x2000012c
 8001778:	20000140 	.word	0x20000140
 800177c:	466f4000 	.word	0x466f4000
 8001780:	465ec001 	.word	0x465ec001

    if (!bret) {                // Something went wrong so get a best guess
 8001784:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001788:	f083 0301 	eor.w	r3, r3, #1
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00b      	beq.n	80017aa <hmc5883lInit+0x2f6>
    	s_gy86._hmc5883.scale[X] = 1.0f;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <hmc5883lInit+0x348>)
 8001794:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001798:	615a      	str	r2, [r3, #20]
    	s_gy86._hmc5883.scale[Y] = 1.0f;
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <hmc5883lInit+0x348>)
 800179c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017a0:	619a      	str	r2, [r3, #24]
    	s_gy86._hmc5883.scale[Z] = 1.0f;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <hmc5883lInit+0x348>)
 80017a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017a8:	61da      	str	r2, [r3, #28]
    }

    s_gy86._ms5611._p_task->pause = FALSE;
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <hmc5883lInit+0x348>)
 80017ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]

    pifLog_Printf(LT_INFO, "Mag scale: %f %f %f", (double)s_gy86._hmc5883.scale[X], (double)s_gy86._hmc5883.scale[Y], (double)s_gy86._hmc5883.scale[Z]);
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <hmc5883lInit+0x348>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fe84 	bl	80004c4 <__aeabi_f2d>
 80017bc:	4680      	mov	r8, r0
 80017be:	4689      	mov	r9, r1
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <hmc5883lInit+0x348>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe7d 	bl	80004c4 <__aeabi_f2d>
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <hmc5883lInit+0x348>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fe76 	bl	80004c4 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017e0:	e9cd 4500 	strd	r4, r5, [sp]
 80017e4:	4642      	mov	r2, r8
 80017e6:	464b      	mov	r3, r9
 80017e8:	4905      	ldr	r1, [pc, #20]	; (8001800 <hmc5883lInit+0x34c>)
 80017ea:	2002      	movs	r0, #2
 80017ec:	f012 f828 	bl	8013840 <pifLog_Printf>
    return TRUE;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017fc:	2000012c 	.word	0x2000012c
 8001800:	08026050 	.word	0x08026050

08001804 <hmc5883lRead>:

static BOOL hmc5883lRead(int16_t *magData)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	int16_t data[3];

	// During calibration, magGain is 1.0, so the read returns normal non-calibrated values.
    // After calibration is done, magGain is set to calculated gain values.
	if (!pifImuSensor_ReadMag(&imu_sensor, data)) return FALSE;
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	4619      	mov	r1, r3
 8001812:	480d      	ldr	r0, [pc, #52]	; (8001848 <hmc5883lRead+0x44>)
 8001814:	f018 fb71 	bl	8019efa <pifImuSensor_ReadMag>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <hmc5883lRead+0x1e>
 800181e:	2300      	movs	r3, #0
 8001820:	e00e      	b.n	8001840 <hmc5883lRead+0x3c>
	magData[0] = data[0];
 8001822:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	801a      	strh	r2, [r3, #0]
	magData[1] = data[1];
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3302      	adds	r3, #2
 800182e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001832:	801a      	strh	r2, [r3, #0]
	magData[2] = data[2];
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3304      	adds	r3, #4
 8001838:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800183c:	801a      	strh	r2, [r3, #0]
	return TRUE;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20001a28 	.word	0x20001a28

0800184c <_actHcSr04Trigger>:

static sonarDistanceFuncPtr funcSonarDistance;


static void _actHcSr04Trigger(SWITCH state)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SONAR_TRIGGER_GPIO_Port, SONAR_TRIGGER_Pin, state);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	461a      	mov	r2, r3
 800185a:	2101      	movs	r1, #1
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <_actHcSr04Trigger+0x24>)
 800185e:	f01b feed 	bl	801d63c <HAL_GPIO_WritePin>
    s_echo_state = 0;
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <_actHcSr04Trigger+0x28>)
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40020800 	.word	0x40020800
 8001874:	200001b0 	.word	0x200001b0

08001878 <hcsr04Echo>:

void hcsr04Echo()
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	s_echo_state ^= 1;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <hcsr04Echo+0x24>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <hcsr04Echo+0x24>)
 8001888:	701a      	strb	r2, [r3, #0]
	pifHcSr04_sigReceiveEcho(&s_hcsr04, s_echo_state);
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <hcsr04Echo+0x24>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4619      	mov	r1, r3
 8001890:	4803      	ldr	r0, [pc, #12]	; (80018a0 <hcsr04Echo+0x28>)
 8001892:	f017 fdf5 	bl	8019480 <pifHcSr04_sigReceiveEcho>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200001b0 	.word	0x200001b0
 80018a0:	2000018c 	.word	0x2000018c

080018a4 <_evtHcSr04Distance>:

static void _evtHcSr04Distance(int32_t distance)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
    float temp = (*funcSonarDistance)(distance);
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <_evtHcSr04Distance+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
 80018b4:	ed87 0a03 	vstr	s0, [r7, #12]
    static float pretemp = 0;

    if (temp != pretemp) {
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <_evtHcSr04Distance+0x44>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	ed97 7a03 	vldr	s14, [r7, #12]
 80018c2:	eeb4 7a67 	vcmp.f32	s14, s15
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	d007      	beq.n	80018dc <_evtHcSr04Distance+0x38>
        pifHcSr04_SetTemperature(&s_hcsr04, temp);
 80018cc:	ed97 0a03 	vldr	s0, [r7, #12]
 80018d0:	4806      	ldr	r0, [pc, #24]	; (80018ec <_evtHcSr04Distance+0x48>)
 80018d2:	f017 fd91 	bl	80193f8 <pifHcSr04_SetTemperature>
#ifdef __PIF_DEBUG__
        pifLog_Printf(LT_INFO, "Temp=%f", temp);
#endif
        pretemp = temp;
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <_evtHcSr04Distance+0x44>)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6013      	str	r3, [r2, #0]
    }
}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200001b4 	.word	0x200001b4
 80018e8:	200001b8 	.word	0x200001b8
 80018ec:	2000018c 	.word	0x2000018c

080018f0 <hcsr04Init>:

BOOL hcsr04Init(uint16_t period, sonarDistanceFuncPtr func)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	80fb      	strh	r3, [r7, #6]
	if (!pifHcSr04_Init(&s_hcsr04, PIF_ID_AUTO)) return FALSE;
 80018fc:	2100      	movs	r1, #0
 80018fe:	4810      	ldr	r0, [pc, #64]	; (8001940 <hcsr04Init+0x50>)
 8001900:	f017 fcf4 	bl	80192ec <pifHcSr04_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <hcsr04Init+0x1e>
 800190a:	2300      	movs	r3, #0
 800190c:	e013      	b.n	8001936 <hcsr04Init+0x46>
	s_hcsr04.act_trigger = _actHcSr04Trigger;
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <hcsr04Init+0x50>)
 8001910:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <hcsr04Init+0x54>)
 8001912:	601a      	str	r2, [r3, #0]
	s_hcsr04.evt_distance = _evtHcSr04Distance;
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <hcsr04Init+0x50>)
 8001916:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <hcsr04Init+0x58>)
 8001918:	605a      	str	r2, [r3, #4]
	if (!pifHcSr04_StartTrigger(&s_hcsr04, period)) return FALSE;
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	4619      	mov	r1, r3
 800191e:	4808      	ldr	r0, [pc, #32]	; (8001940 <hcsr04Init+0x50>)
 8001920:	f017 fd46 	bl	80193b0 <pifHcSr04_StartTrigger>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <hcsr04Init+0x3e>
 800192a:	2300      	movs	r3, #0
 800192c:	e003      	b.n	8001936 <hcsr04Init+0x46>

	funcSonarDistance = func;
 800192e:	4a07      	ldr	r2, [pc, #28]	; (800194c <hcsr04Init+0x5c>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	6013      	str	r3, [r2, #0]
    return TRUE;
 8001934:	2301      	movs	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000018c 	.word	0x2000018c
 8001944:	0800184d 	.word	0x0800184d
 8001948:	080018a5 	.word	0x080018a5
 800194c:	200001b4 	.word	0x200001b4

08001950 <actI2cRead>:
#endif

#ifdef USE_I2C_DMA

PifI2cReturn actI2cRead(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af02      	add	r7, sp, #8
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4603      	mov	r3, r0
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	4613      	mov	r3, r2
 8001960:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 8001962:	7bbb      	ldrb	r3, [r7, #14]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d019      	beq.n	800199c <actI2cRead+0x4c>
		return (HAL_I2C_Mem_Read_DMA(&hi2c1, (addr << 1) | 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	b21b      	sxth	r3, r3
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	b21b      	sxth	r3, r3
 8001974:	b299      	uxth	r1, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	b29a      	uxth	r2, r3
 800197a:	7bbb      	ldrb	r3, [r7, #14]
 800197c:	b298      	uxth	r0, r3
 800197e:	8b3b      	ldrh	r3, [r7, #24]
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	4603      	mov	r3, r0
 8001988:	480f      	ldr	r0, [pc, #60]	; (80019c8 <actI2cRead+0x78>)
 800198a:	f01c fb91 	bl	801e0b0 <HAL_I2C_Mem_Read_DMA>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <actI2cRead+0x48>
 8001994:	2300      	movs	r3, #0
 8001996:	e013      	b.n	80019c0 <actI2cRead+0x70>
 8001998:	2302      	movs	r3, #2
 800199a:	e011      	b.n	80019c0 <actI2cRead+0x70>
	}
	else {
		return (HAL_I2C_Master_Receive_DMA(&hi2c1, (addr << 1) | 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	b299      	uxth	r1, r3
 80019aa:	8b3b      	ldrh	r3, [r7, #24]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4806      	ldr	r0, [pc, #24]	; (80019c8 <actI2cRead+0x78>)
 80019b0:	f01c f8ea 	bl	801db88 <HAL_I2C_Master_Receive_DMA>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <actI2cRead+0x6e>
 80019ba:	2300      	movs	r3, #0
 80019bc:	e000      	b.n	80019c0 <actI2cRead+0x70>
 80019be:	2302      	movs	r3, #2
	}
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000484 	.word	0x20000484

080019cc <actI2cWrite>:

PifI2cReturn actI2cWrite(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4603      	mov	r3, r0
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	4613      	mov	r3, r2
 80019dc:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d016      	beq.n	8001a12 <actI2cWrite+0x46>
		return (HAL_I2C_Mem_Write_DMA(&hi2c1, addr << 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	b299      	uxth	r1, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	7bbb      	ldrb	r3, [r7, #14]
 80019f2:	b298      	uxth	r0, r3
 80019f4:	8b3b      	ldrh	r3, [r7, #24]
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	4603      	mov	r3, r0
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <actI2cWrite+0x6c>)
 8001a00:	f01c f9f2 	bl	801dde8 <HAL_I2C_Mem_Write_DMA>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <actI2cWrite+0x42>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e010      	b.n	8001a30 <actI2cWrite+0x64>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e00e      	b.n	8001a30 <actI2cWrite+0x64>
	}
	else {
		return (HAL_I2C_Master_Transmit_DMA(&hi2c1, addr << 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	b299      	uxth	r1, r3
 8001a1a:	8b3b      	ldrh	r3, [r7, #24]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4806      	ldr	r0, [pc, #24]	; (8001a38 <actI2cWrite+0x6c>)
 8001a20:	f01b ff82 	bl	801d928 <HAL_I2C_Master_Transmit_DMA>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <actI2cWrite+0x62>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e000      	b.n	8001a30 <actI2cWrite+0x64>
 8001a2e:	2302      	movs	r3, #2
	}
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000484 	.word	0x20000484

08001a3c <HAL_I2C_MemRxCpltCallback>:
#endif

#if defined(USE_I2C_INTERRUPT) || defined(USE_I2C_DMA)

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d103      	bne.n	8001a56 <HAL_I2C_MemRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001a52:	f011 f9e9 	bl	8012e28 <pifI2cPort_sigEndTransfer>
	}
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40005400 	.word	0x40005400
 8001a64:	200017d0 	.word	0x200017d0

08001a68 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d103      	bne.n	8001a82 <HAL_I2C_MasterRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8001a7e:	f011 f9d3 	bl	8012e28 <pifI2cPort_sigEndTransfer>
	}
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40005400 	.word	0x40005400
 8001a90:	200017d0 	.word	0x200017d0

08001a94 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <HAL_I2C_MemTxCpltCallback+0x24>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d103      	bne.n	8001aae <HAL_I2C_MemTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <HAL_I2C_MemTxCpltCallback+0x28>)
 8001aaa:	f011 f9bd 	bl	8012e28 <pifI2cPort_sigEndTransfer>
	}
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40005400 	.word	0x40005400
 8001abc:	200017d0 	.word	0x200017d0

08001ac0 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d103      	bne.n	8001ada <HAL_I2C_MasterTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8001ad6:	f011 f9a7 	bl	8012e28 <pifI2cPort_sigEndTransfer>
	}
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40005400 	.word	0x40005400
 8001ae8:	200017d0 	.word	0x200017d0

08001aec <failsafeCheck>:

#define PWM_TIMER_MHZ 1
#define PWM_TIMER_8_MHZ 8

static void failsafeCheck(uint8_t channel, uint16_t pulse)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	460a      	mov	r2, r1
 8001af6:	71fb      	strb	r3, [r7, #7]
 8001af8:	4613      	mov	r3, r2
 8001afa:	80bb      	strh	r3, [r7, #4]
    static uint8_t goodPulses;

    if (channel < 4 && pulse > failsafeThreshold)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d811      	bhi.n	8001b26 <failsafeCheck+0x3a>
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <failsafeCheck+0x78>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	88ba      	ldrh	r2, [r7, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d90c      	bls.n	8001b26 <failsafeCheck+0x3a>
        goodPulses |= (1 << channel);       // if signal is valid - mark channel as OK
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	b25a      	sxtb	r2, r3
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <failsafeCheck+0x7c>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b25b      	sxtb	r3, r3
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <failsafeCheck+0x7c>)
 8001b24:	701a      	strb	r2, [r3, #0]
    if (goodPulses == 0x0F) {               // If first four chanells have good pulses, clear FailSafe counter
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <failsafeCheck+0x7c>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b0f      	cmp	r3, #15
 8001b2c:	d114      	bne.n	8001b58 <failsafeCheck+0x6c>
        goodPulses = 0;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <failsafeCheck+0x7c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
        if (failsafeCnt > 20)
 8001b34:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <failsafeCheck+0x80>)
 8001b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3a:	2b14      	cmp	r3, #20
 8001b3c:	dd09      	ble.n	8001b52 <failsafeCheck+0x66>
            failsafeCnt -= 20;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <failsafeCheck+0x80>)
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3b14      	subs	r3, #20
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <failsafeCheck+0x80>)
 8001b4e:	801a      	strh	r2, [r3, #0]
        else
            failsafeCnt = 0;
    }
}
 8001b50:	e002      	b.n	8001b58 <failsafeCheck+0x6c>
            failsafeCnt = 0;
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <failsafeCheck+0x80>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	801a      	strh	r2, [r3, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	2000000c 	.word	0x2000000c
 8001b68:	200002c1 	.word	0x200002c1
 8001b6c:	2000165a 	.word	0x2000165a

08001b70 <pwmReadRc>:

void pwmReadRc()
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
	uint16_t value = pifRcPpm_sigTick(&s_rc.ppm, (*pif_act_timer1us)());
 8001b76:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <pwmReadRc+0x3c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4798      	blx	r3
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480b      	ldr	r0, [pc, #44]	; (8001bb0 <pwmReadRc+0x40>)
 8001b82:	f016 fade 	bl	8018142 <pifRcPpm_sigTick>
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
    if (value) {
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <pwmReadRc+0x32>
        failsafeCheck(s_rc.ppm._channel, value);
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <pwmReadRc+0x40>)
 8001b92:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	88fa      	ldrh	r2, [r7, #6]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ffa5 	bl	8001aec <failsafeCheck>
    }
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20001f14 	.word	0x20001f14
 8001bb0:	200001bc 	.word	0x200001bc

08001bb4 <_evtRcReceive>:

static void _evtRcReceive(PifRc* p_owner, uint16_t* p_channel, PifIssuerP p_issuer)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
    PifTask* p_task = (PifTask*)p_issuer;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	613b      	str	r3, [r7, #16]
    int i;

	for (i = 0; i < p_owner->_channel_count; i++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e00b      	b.n	8001be2 <_evtRcReceive+0x2e>
		captures[i] = p_channel[i];
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	8819      	ldrh	r1, [r3, #0]
 8001bd4:	4a0c      	ldr	r2, [pc, #48]	; (8001c08 <_evtRcReceive+0x54>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < p_owner->_channel_count; i++) {
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3301      	adds	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	789b      	ldrb	r3, [r3, #2]
 8001be6:	461a      	mov	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	4293      	cmp	r3, r2
 8001bec:	dbed      	blt.n	8001bca <_evtRcReceive+0x16>
	}
    if (!p_task->_running) p_task->immediate = TRUE;
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	79db      	ldrb	r3, [r3, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <_evtRcReceive+0x48>
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	705a      	strb	r2, [r3, #1]
}
 8001bfc:	bf00      	nop
 8001bfe:	371c      	adds	r7, #28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	20000248 	.word	0x20000248

08001c0c <pwmWriteStandard>:

static void pwmWriteStandard(uint8_t index, uint16_t value)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	460a      	mov	r2, r1
 8001c16:	71fb      	strb	r3, [r7, #7]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	80bb      	strh	r3, [r7, #4]
	switch (motors[index]->port) {
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	4a1e      	ldr	r2, [pc, #120]	; (8001c98 <pwmWriteStandard+0x8c>)
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	78db      	ldrb	r3, [r3, #3]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d830      	bhi.n	8001c8c <pwmWriteStandard+0x80>
 8001c2a:	a201      	add	r2, pc, #4	; (adr r2, 8001c30 <pwmWriteStandard+0x24>)
 8001c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c30:	08001c65 	.word	0x08001c65
 8001c34:	08001c8d 	.word	0x08001c8d
 8001c38:	08001c8d 	.word	0x08001c8d
 8001c3c:	08001c8d 	.word	0x08001c8d
 8001c40:	08001c6f 	.word	0x08001c6f
 8001c44:	08001c8d 	.word	0x08001c8d
 8001c48:	08001c8d 	.word	0x08001c8d
 8001c4c:	08001c8d 	.word	0x08001c8d
 8001c50:	08001c79 	.word	0x08001c79
 8001c54:	08001c8d 	.word	0x08001c8d
 8001c58:	08001c8d 	.word	0x08001c8d
 8001c5c:	08001c8d 	.word	0x08001c8d
 8001c60:	08001c83 	.word	0x08001c83
	case TIM_CHANNEL_1:	htim3.Instance->CCR1 = value; break;
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <pwmWriteStandard+0x90>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	88ba      	ldrh	r2, [r7, #4]
 8001c6a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c6c:	e00e      	b.n	8001c8c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_2:	htim3.Instance->CCR2 = value; break;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <pwmWriteStandard+0x90>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	88ba      	ldrh	r2, [r7, #4]
 8001c74:	639a      	str	r2, [r3, #56]	; 0x38
 8001c76:	e009      	b.n	8001c8c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_3:	htim3.Instance->CCR3 = value; break;
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <pwmWriteStandard+0x90>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	88ba      	ldrh	r2, [r7, #4]
 8001c7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c80:	e004      	b.n	8001c8c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_4:	htim3.Instance->CCR4 = value; break;
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <pwmWriteStandard+0x90>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	88ba      	ldrh	r2, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
 8001c8a:	bf00      	nop
	}
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	20000268 	.word	0x20000268
 8001c9c:	200005e0 	.word	0x200005e0

08001ca0 <pwmInit>:

bool pwmInit(drv_pwm_config_t *init)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    const hardwareMaps_t *setup;
    uint16_t period;
    pwmPortData_t *p;

    // to avoid importing cfg/mcfg
    failsafeThreshold = init->failsafeThreshold;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	8a5a      	ldrh	r2, [r3, #18]
 8001cb0:	4b8c      	ldr	r3, [pc, #560]	; (8001ee4 <pwmInit+0x244>)
 8001cb2:	801a      	strh	r2, [r3, #0]
    // pwm filtering on input
    pwmFilter = init->pwmFilter;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	79da      	ldrb	r2, [r3, #7]
 8001cb8:	4b8b      	ldr	r3, [pc, #556]	; (8001ee8 <pwmInit+0x248>)
 8001cba:	701a      	strb	r2, [r3, #0]

    syncPWM = init->syncPWM;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7d1a      	ldrb	r2, [r3, #20]
 8001cc0:	4b8a      	ldr	r3, [pc, #552]	; (8001eec <pwmInit+0x24c>)
 8001cc2:	701a      	strb	r2, [r3, #0]

    // this is pretty hacky shit, but it will do for now. array of 4 config maps, [ multiPWM multiPPM airPWM airPPM ]
    if (init->airplane)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	799b      	ldrb	r3, [r3, #6]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <pwmInit+0x30>
        i = 2; // switch to air hardware config
 8001ccc:	2302      	movs	r3, #2
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
    if (init->usePPM)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	785b      	ldrb	r3, [r3, #1]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <pwmInit+0x3e>
        i++; // next index is for PPM
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	3301      	adds	r3, #1
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24

    setup = hardwareMaps[i];
 8001cde:	4a84      	ldr	r2, [pc, #528]	; (8001ef0 <pwmInit+0x250>)
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce6:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < MAX_PORTS; i++) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
 8001cec:	e0ae      	b.n	8001e4c <pwmInit+0x1ac>
        uint8_t pwm = setup[i].pwm;
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4413      	add	r3, r2
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	75fb      	strb	r3, [r7, #23]
        uint8_t type = setup[i].type;
 8001cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4413      	add	r3, r2
 8001d0a:	785b      	ldrb	r3, [r3, #1]
 8001d0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (pwm == 0xFF) // terminator
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	2bff      	cmp	r3, #255	; 0xff
 8001d14:	f000 809f 	beq.w	8001e56 <pwmInit+0x1b6>
            break;

        // hacks to allow current functionality
        if ((type & (TYPE_IP | TYPE_IW)) && !init->enableInput)
 8001d18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d009      	beq.n	8001d38 <pwmInit+0x98>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	f083 0301 	eor.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <pwmInit+0x98>
        	type = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (type & TYPE_IP) {
 8001d38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d008      	beq.n	8001d56 <pwmInit+0xb6>
            p = &pwmPorts[pwm];
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4a6a      	ldr	r2, [pc, #424]	; (8001ef4 <pwmInit+0x254>)
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
            numInputs = 8;
 8001d4e:	4b6a      	ldr	r3, [pc, #424]	; (8001ef8 <pwmInit+0x258>)
 8001d50:	2208      	movs	r2, #8
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	e077      	b.n	8001e46 <pwmInit+0x1a6>
        } else if (type & TYPE_IW) {
 8001d56:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d171      	bne.n	8001e46 <pwmInit+0x1a6>
				attachInterrupt(setup[i].port, _isrPulseWidth8, CHANGE);
				break;
			}
			numInputs++;
*/
        } else if (type & TYPE_M) {
 8001d62:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d04e      	beq.n	8001e0c <pwmInit+0x16c>
            uint32_t hz, mhz;

            if (init->motorPwmRate > 500 || init->fastPWM)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	895b      	ldrh	r3, [r3, #10]
 8001d72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d76:	d803      	bhi.n	8001d80 <pwmInit+0xe0>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7d5b      	ldrb	r3, [r3, #21]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <pwmInit+0xe6>
                mhz = PWM_TIMER_8_MHZ;
 8001d80:	2308      	movs	r3, #8
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	e001      	b.n	8001d8a <pwmInit+0xea>
            else
                mhz = PWM_TIMER_MHZ;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]

            hz = mhz * 1000000;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	4a5b      	ldr	r2, [pc, #364]	; (8001efc <pwmInit+0x25c>)
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	613b      	str	r3, [r7, #16]

            if (init->fastPWM)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7d5b      	ldrb	r3, [r3, #21]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <pwmInit+0x10a>
                period = hz / 4000;
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4a58      	ldr	r2, [pc, #352]	; (8001f00 <pwmInit+0x260>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	847b      	strh	r3, [r7, #34]	; 0x22
 8001da8:	e006      	b.n	8001db8 <pwmInit+0x118>
            else
                period = hz / init->motorPwmRate;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	895b      	ldrh	r3, [r3, #10]
 8001dae:	461a      	mov	r2, r3
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001db6:	847b      	strh	r3, [r7, #34]	; 0x22

            pwmPorts[pwm].period = period;
 8001db8:	7dfb      	ldrb	r3, [r7, #23]
 8001dba:	494e      	ldr	r1, [pc, #312]	; (8001ef4 <pwmInit+0x254>)
 8001dbc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001dbe:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
            pwmPorts[pwm].port = setup[i].port;
 8001dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	441a      	add	r2, r3
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	7891      	ldrb	r1, [r2, #2]
 8001dd2:	4a48      	ldr	r2, [pc, #288]	; (8001ef4 <pwmInit+0x254>)
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	460a      	mov	r2, r1
 8001dda:	70da      	strb	r2, [r3, #3]
            HAL_TIM_PWM_Start(&htim3, pwmPorts[pwm].port);
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	4a45      	ldr	r2, [pc, #276]	; (8001ef4 <pwmInit+0x254>)
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	78db      	ldrb	r3, [r3, #3]
 8001de6:	4619      	mov	r1, r3
 8001de8:	4846      	ldr	r0, [pc, #280]	; (8001f04 <pwmInit+0x264>)
 8001dea:	f01f f8bf 	bl	8020f6c <HAL_TIM_PWM_Start>
            motors[numMotors++] = &pwmPorts[pwm];
 8001dee:	7dfa      	ldrb	r2, [r7, #23]
 8001df0:	4b45      	ldr	r3, [pc, #276]	; (8001f08 <pwmInit+0x268>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	1c59      	adds	r1, r3, #1
 8001df6:	b2c8      	uxtb	r0, r1
 8001df8:	4943      	ldr	r1, [pc, #268]	; (8001f08 <pwmInit+0x268>)
 8001dfa:	7008      	strb	r0, [r1, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	0093      	lsls	r3, r2, #2
 8001e00:	4a3c      	ldr	r2, [pc, #240]	; (8001ef4 <pwmInit+0x254>)
 8001e02:	4413      	add	r3, r2
 8001e04:	4a41      	ldr	r2, [pc, #260]	; (8001f0c <pwmInit+0x26c>)
 8001e06:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001e0a:	e01c      	b.n	8001e46 <pwmInit+0x1a6>
        } else if (type & TYPE_S) {
 8001e0c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	da18      	bge.n	8001e46 <pwmInit+0x1a6>
        	pwmPorts[pwm].period = 1000000 / init->servoPwmRate;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	899b      	ldrh	r3, [r3, #12]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b38      	ldr	r3, [pc, #224]	; (8001efc <pwmInit+0x25c>)
 8001e1c:	fb93 f2f2 	sdiv	r2, r3, r2
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	b291      	uxth	r1, r2
 8001e24:	4a33      	ldr	r2, [pc, #204]	; (8001ef4 <pwmInit+0x254>)
 8001e26:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
            servos[numServos++] = &pwmPorts[pwm];
 8001e2a:	7dfa      	ldrb	r2, [r7, #23]
 8001e2c:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <pwmInit+0x270>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	1c59      	adds	r1, r3, #1
 8001e32:	b2c8      	uxtb	r0, r1
 8001e34:	4936      	ldr	r1, [pc, #216]	; (8001f10 <pwmInit+0x270>)
 8001e36:	7008      	strb	r0, [r1, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	0093      	lsls	r3, r2, #2
 8001e3c:	4a2d      	ldr	r2, [pc, #180]	; (8001ef4 <pwmInit+0x254>)
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a34      	ldr	r2, [pc, #208]	; (8001f14 <pwmInit+0x274>)
 8001e42:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (i = 0; i < MAX_PORTS; i++) {
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	3301      	adds	r3, #1
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	2b0d      	cmp	r3, #13
 8001e50:	f77f af4d 	ble.w	8001cee <pwmInit+0x4e>
 8001e54:	e000      	b.n	8001e58 <pwmInit+0x1b8>
            break;
 8001e56:	bf00      	nop
        }
    }

    if (init->enableInput) {
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d035      	beq.n	8001ecc <pwmInit+0x22c>
		if (init->usePPM) {
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d019      	beq.n	8001e9c <pwmInit+0x1fc>
			if (pifRcPpm_Init(&s_rc.ppm, PIF_ID_AUTO, numInputs, 2700)) {
 8001e68:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <pwmInit+0x258>)
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	f640 238c 	movw	r3, #2700	; 0xa8c
 8001e70:	2100      	movs	r1, #0
 8001e72:	4829      	ldr	r0, [pc, #164]	; (8001f18 <pwmInit+0x278>)
 8001e74:	f016 f8f2 	bl	801805c <pifRcPpm_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d026      	beq.n	8001ecc <pwmInit+0x22c>
				pifRcPpm_SetValidRange(&s_rc.ppm, PULSE_MIN, PULSE_MAX);
 8001e7e:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001e82:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001e86:	4824      	ldr	r0, [pc, #144]	; (8001f18 <pwmInit+0x278>)
 8001e88:	f016 f93a 	bl	8018100 <pifRcPpm_SetValidRange>
				pifRc_AttachEvtReceive(&s_rc.ppm.parent, _evtRcReceive, g_task_compute_rc);
 8001e8c:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <pwmInit+0x27c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4923      	ldr	r1, [pc, #140]	; (8001f20 <pwmInit+0x280>)
 8001e94:	4820      	ldr	r0, [pc, #128]	; (8001f18 <pwmInit+0x278>)
 8001e96:	f015 fda5 	bl	80179e4 <pifRc_AttachEvtReceive>
 8001e9a:	e017      	b.n	8001ecc <pwmInit+0x22c>
			}
		}
		else {
			if (pifRcPwm_Init(&s_rc.pwm, PIF_ID_AUTO, numInputs)) {
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <pwmInit+0x258>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	481c      	ldr	r0, [pc, #112]	; (8001f18 <pwmInit+0x278>)
 8001ea6:	f016 f999 	bl	80181dc <pifRcPwm_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00d      	beq.n	8001ecc <pwmInit+0x22c>
				pifRcPwm_SetValidRange(&s_rc.pwm, PULSE_MIN, PULSE_MAX);
 8001eb0:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001eb4:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001eb8:	4817      	ldr	r0, [pc, #92]	; (8001f18 <pwmInit+0x278>)
 8001eba:	f016 fa09 	bl	80182d0 <pifRcPwm_SetValidRange>
				pifRc_AttachEvtReceive(&s_rc.pwm.parent, _evtRcReceive, g_task_compute_rc);
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <pwmInit+0x27c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4916      	ldr	r1, [pc, #88]	; (8001f20 <pwmInit+0x280>)
 8001ec6:	4814      	ldr	r0, [pc, #80]	; (8001f18 <pwmInit+0x278>)
 8001ec8:	f015 fd8c 	bl	80179e4 <pifRc_AttachEvtReceive>
			}
		}
    }

    // determine motor writer function
    pwmWritePtr = pwmWriteStandard;
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <pwmInit+0x284>)
 8001ece:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <pwmInit+0x288>)
 8001ed0:	601a      	str	r2, [r3, #0]

    // set return values in init struct
    init->numServos = numServos;
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <pwmInit+0x270>)
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	759a      	strb	r2, [r3, #22]

    return false;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3728      	adds	r7, #40	; 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000000c 	.word	0x2000000c
 8001ee8:	200002bf 	.word	0x200002bf
 8001eec:	200002c0 	.word	0x200002c0
 8001ef0:	08027f0c 	.word	0x08027f0c
 8001ef4:	20000210 	.word	0x20000210
 8001ef8:	200002be 	.word	0x200002be
 8001efc:	000f4240 	.word	0x000f4240
 8001f00:	10624dd3 	.word	0x10624dd3
 8001f04:	200005e0 	.word	0x200005e0
 8001f08:	200002bc 	.word	0x200002bc
 8001f0c:	20000268 	.word	0x20000268
 8001f10:	200002bd 	.word	0x200002bd
 8001f14:	20000298 	.word	0x20000298
 8001f18:	200001bc 	.word	0x200001bc
 8001f1c:	20001828 	.word	0x20001828
 8001f20:	08001bb5 	.word	0x08001bb5
 8001f24:	200002b8 	.word	0x200002b8
 8001f28:	08001c0d 	.word	0x08001c0d

08001f2c <actPwmWriteMotor>:

void actPwmWriteMotor(uint8_t index, uint16_t value)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	460a      	mov	r2, r1
 8001f36:	71fb      	strb	r3, [r7, #7]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	80bb      	strh	r3, [r7, #4]
    if (index < numMotors)
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <actPwmWriteMotor+0x30>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	79fa      	ldrb	r2, [r7, #7]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d205      	bcs.n	8001f52 <actPwmWriteMotor+0x26>
        pwmWritePtr(index, value);
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <actPwmWriteMotor+0x34>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	88b9      	ldrh	r1, [r7, #4]
 8001f4c:	79fa      	ldrb	r2, [r7, #7]
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4798      	blx	r3
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200002bc 	.word	0x200002bc
 8001f60:	200002b8 	.word	0x200002b8

08001f64 <actPwmWriteServo>:

void actPwmWriteServo(uint8_t index, uint16_t value)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	71fb      	strb	r3, [r7, #7]
 8001f70:	4613      	mov	r3, r2
 8001f72:	80bb      	strh	r3, [r7, #4]
//    if (index < numServos)
//    	analogWrite(servos[index]->port, value);
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <actPwmRead>:

uint16_t actPwmRead(uint8_t channel)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
    return captures[channel];
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <actPwmRead+0x20>)
 8001f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000248 	.word	0x20000248

08001fa4 <systemInit>:
	PifStorageVar s_storage;
#endif


void systemInit(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
#ifdef BUZZER
    actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001fa8:	2100      	movs	r1, #0
 8001faa:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001fae:	f000 f8ab 	bl	8002108 <actBuzzerAction>
#endif
    actLed0State(OFF);
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f000 f850 	bl	8002058 <actLed0State>
    actLed1State(OFF);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f000 f879 	bl	80020b0 <actLed1State>
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <failureMode>:

void failureMode(uint8_t mode)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71fb      	strb	r3, [r7, #7]
#ifdef __PIF_DEBUG__
    pifLog_SendAndExit();
#endif
    actLed1State(OFF);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f000 f86f 	bl	80020b0 <actLed1State>
    actLed0State(ON);
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f000 f840 	bl	8002058 <actLed0State>
    while (1) {
        actLed1Toggle();
 8001fd8:	f000 f880 	bl	80020dc <actLed1Toggle>
        actLed0Toggle();
 8001fdc:	f000 f852 	bl	8002084 <actLed0Toggle>
        pif_Delay1ms(475 * mode - 2);
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	0052      	lsls	r2, r2, #1
 8001fe8:	441a      	add	r2, r3
 8001fea:	0152      	lsls	r2, r2, #5
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	0091      	lsls	r1, r2, #2
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b02      	subs	r3, #2
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f00f fcc4 	bl	801198c <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 8002004:	2101      	movs	r1, #1
 8002006:	f44f 7098 	mov.w	r0, #304	; 0x130
 800200a:	f000 f87d 	bl	8002108 <actBuzzerAction>
        pif_Delay1ms(25);
 800200e:	2019      	movs	r0, #25
 8002010:	f00f fcbc 	bl	801198c <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 8002014:	2100      	movs	r1, #0
 8002016:	f44f 7098 	mov.w	r0, #304	; 0x130
 800201a:	f000 f875 	bl	8002108 <actBuzzerAction>
        actLed1Toggle();
 800201e:	e7db      	b.n	8001fd8 <failureMode+0x16>

08002020 <systemReset>:
    }
}

void systemReset(bool toBootloader)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
	pifLog_Printf(LT_INFO, "System Rebooting %d...", toBootloader);
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	461a      	mov	r2, r3
 800202e:	4907      	ldr	r1, [pc, #28]	; (800204c <systemReset+0x2c>)
 8002030:	2002      	movs	r0, #2
 8002032:	f011 fc05 	bl	8013840 <pifLog_Printf>
	pif_Delay1ms(2000);
 8002036:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800203a:	f00f fca7 	bl	801198c <pif_Delay1ms>
//	__DSB;
	SCB->AIRCR = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk);//software reset
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <systemReset+0x30>)
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <systemReset+0x34>)
 8002042:	60da      	str	r2, [r3, #12]
	//RSTC->RSTC_CR = RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
	//NVIC_SystemReset();
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	08026064 	.word	0x08026064
 8002050:	e000ed00 	.word	0xe000ed00
 8002054:	05fa0004 	.word	0x05fa0004

08002058 <actLed0State>:

static BOOL len0_state = OFF;

void actLed0State(BOOL state)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
#ifdef LED0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, state);
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	461a      	mov	r2, r3
 8002066:	2110      	movs	r1, #16
 8002068:	4804      	ldr	r0, [pc, #16]	; (800207c <actLed0State+0x24>)
 800206a:	f01b fae7 	bl	801d63c <HAL_GPIO_WritePin>
    len0_state = state;
 800206e:	4a04      	ldr	r2, [pc, #16]	; (8002080 <actLed0State+0x28>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40020800 	.word	0x40020800
 8002080:	2000030c 	.word	0x2000030c

08002084 <actLed0Toggle>:

void actLed0Toggle()
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
#ifdef LED0
	len0_state ^= 1;
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <actLed0Toggle+0x24>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	f083 0301 	eor.w	r3, r3, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <actLed0Toggle+0x24>)
 8002094:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, len0_state);
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <actLed0Toggle+0x24>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	2110      	movs	r1, #16
 800209e:	4803      	ldr	r0, [pc, #12]	; (80020ac <actLed0Toggle+0x28>)
 80020a0:	f01b facc 	bl	801d63c <HAL_GPIO_WritePin>
#endif
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	2000030c 	.word	0x2000030c
 80020ac:	40020800 	.word	0x40020800

080020b0 <actLed1State>:

static BOOL len1_state = OFF;

void actLed1State(BOOL state)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
#ifdef LED1
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	461a      	mov	r2, r3
 80020be:	2104      	movs	r1, #4
 80020c0:	4804      	ldr	r0, [pc, #16]	; (80020d4 <actLed1State+0x24>)
 80020c2:	f01b fabb 	bl	801d63c <HAL_GPIO_WritePin>
    len1_state = state;
 80020c6:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <actLed1State+0x28>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40020400 	.word	0x40020400
 80020d8:	2000030d 	.word	0x2000030d

080020dc <actLed1Toggle>:

void actLed1Toggle()
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
#ifdef LED1
	len1_state ^= 1;
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <actLed1Toggle+0x24>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	f083 0301 	eor.w	r3, r3, #1
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <actLed1Toggle+0x24>)
 80020ec:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, len1_state);
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <actLed1Toggle+0x24>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	2104      	movs	r1, #4
 80020f6:	4803      	ldr	r0, [pc, #12]	; (8002104 <actLed1Toggle+0x28>)
 80020f8:	f01b faa0 	bl	801d63c <HAL_GPIO_WritePin>
#endif
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	2000030d 	.word	0x2000030d
 8002104:	40020400 	.word	0x40020400

08002108 <actBuzzerAction>:

void actBuzzerAction(PifId id, BOOL action)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	460a      	mov	r2, r1
 8002112:	80fb      	strh	r3, [r7, #6]
 8002114:	4613      	mov	r3, r2
 8002116:	717b      	strb	r3, [r7, #5]
	(void)id;

#ifdef BUZZER
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, action);
 8002118:	797b      	ldrb	r3, [r7, #5]
 800211a:	461a      	mov	r2, r3
 800211c:	2120      	movs	r1, #32
 800211e:	4803      	ldr	r0, [pc, #12]	; (800212c <actBuzzerAction+0x24>)
 8002120:	f01b fa8c 	bl	801d63c <HAL_GPIO_WritePin>
#else
    (void)action;
#endif
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40020800 	.word	0x40020800

08002130 <actInvState>:

void actInvState(BOOL state)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
#ifdef INVERTER
	HAL_GPIO_WritePin(INVERTER_GPIO_Port, INVERTER_Pin, state);
#else
    (void)state;
#endif
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d005      	beq.n	8002162 <HAL_GPIO_EXTI_Callback+0x1c>
 8002156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800215a:	d105      	bne.n	8002168 <HAL_GPIO_EXTI_Callback+0x22>
    case RC_PPM_Pin:
    	pwmReadRc();
 800215c:	f7ff fd08 	bl	8001b70 <pwmReadRc>
		break;
 8002160:	e002      	b.n	8002168 <HAL_GPIO_EXTI_Callback+0x22>

    case SONAR_ECHO_Pin:
    	hcsr04Echo();
 8002162:	f7ff fb89 	bl	8001878 <hcsr04Echo>
    	break;
 8002166:	bf00      	nop
    }
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <storageInit>:
}

#endif

PifStorage* storageInit()
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af02      	add	r7, sp, #8
	if (!pifStorageFix_Init(&s_storage, PIF_ID_AUTO)) return NULL;
	if (!pifStorageFix_AttachActStorage(&s_storage, actStorageRead, actStorageWrite)) goto fail;
	if (!pifStorageFix_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME)) goto fail;
#endif
#ifdef STORAGE_EEPROM
	if (!pifStorageVar_Init(&s_storage, PIF_ID_AUTO)) return NULL;
 8002176:	2100      	movs	r1, #0
 8002178:	4822      	ldr	r0, [pc, #136]	; (8002204 <storageInit+0x94>)
 800217a:	f019 f963 	bl	801b444 <pifStorageVar_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <storageInit+0x18>
 8002184:	2300      	movs	r3, #0
 8002186:	e039      	b.n	80021fc <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 8002188:	230a      	movs	r3, #10
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2302      	movs	r3, #2
 800218e:	2250      	movs	r2, #80	; 0x50
 8002190:	491d      	ldr	r1, [pc, #116]	; (8002208 <storageInit+0x98>)
 8002192:	481c      	ldr	r0, [pc, #112]	; (8002204 <storageInit+0x94>)
 8002194:	f019 fa9e 	bl	801b6d4 <pifStorageVar_AttachI2c>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d027      	beq.n	80021ee <storageInit+0x7e>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 800219e:	2308      	movs	r3, #8
 80021a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021a4:	2140      	movs	r1, #64	; 0x40
 80021a6:	4817      	ldr	r0, [pc, #92]	; (8002204 <storageInit+0x94>)
 80021a8:	f019 f9c2 	bl	801b530 <pifStorageVar_SetMedia>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d01f      	beq.n	80021f2 <storageInit+0x82>
	if (!pifStorageVar_IsFormat(&s_storage.parent)) {
 80021b2:	4814      	ldr	r0, [pc, #80]	; (8002204 <storageInit+0x94>)
 80021b4:	f019 faa7 	bl	801b706 <pifStorageVar_IsFormat>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d115      	bne.n	80021ea <storageInit+0x7a>
		pifLog_Printf(LT_INFO, "Storage Init : EC=%d", pif_error);
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <storageInit+0x9c>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	4912      	ldr	r1, [pc, #72]	; (8002210 <storageInit+0xa0>)
 80021c6:	2002      	movs	r0, #2
 80021c8:	f011 fb3a 	bl	8013840 <pifLog_Printf>
		if (!pifStorage_Format(&s_storage.parent)) {
 80021cc:	480d      	ldr	r0, [pc, #52]	; (8002204 <storageInit+0x94>)
 80021ce:	f019 f856 	bl	801b27e <pifStorage_Format>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d104      	bne.n	80021e2 <storageInit+0x72>
			pifLog_Printf(LT_INFO, "Storage format failed");
 80021d8:	490e      	ldr	r1, [pc, #56]	; (8002214 <storageInit+0xa4>)
 80021da:	2002      	movs	r0, #2
 80021dc:	f011 fb30 	bl	8013840 <pifLog_Printf>
			goto fail;
 80021e0:	e008      	b.n	80021f4 <storageInit+0x84>
		}
		else {
			pifLog_Printf(LT_INFO, "Storage format");
 80021e2:	490d      	ldr	r1, [pc, #52]	; (8002218 <storageInit+0xa8>)
 80021e4:	2002      	movs	r0, #2
 80021e6:	f011 fb2b 	bl	8013840 <pifLog_Printf>
		}
	}
#endif
	return &s_storage.parent;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <storageInit+0x94>)
 80021ec:	e006      	b.n	80021fc <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 80021ee:	bf00      	nop
 80021f0:	e000      	b.n	80021f4 <storageInit+0x84>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 80021f2:	bf00      	nop
fail:
#ifdef STORAGE_FLASH
	pifStorageFix_Clear(&s_storage);
#endif
#ifdef STORAGE_EEPROM
	pifStorageVar_Clear(&s_storage);
 80021f4:	4803      	ldr	r0, [pc, #12]	; (8002204 <storageInit+0x94>)
 80021f6:	f019 f971 	bl	801b4dc <pifStorageVar_Clear>
#endif
	return NULL;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200002c4 	.word	0x200002c4
 8002208:	200017d0 	.word	0x200017d0
 800220c:	20001ef0 	.word	0x20001ef0
 8002210:	0802607c 	.word	0x0802607c
 8002214:	08026094 	.word	0x08026094
 8002218:	080260ac 	.word	0x080260ac

0800221c <actUartSetBaudRate>:
#endif
static uartPort_t uartPort[3];


static BOOL actUartSetBaudRate(PifComm* p_comm, uint32_t baudrate)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	8a1b      	ldrh	r3, [r3, #16]
 800222a:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800222e:	4613      	mov	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	4413      	add	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4a11      	ldr	r2, [pc, #68]	; (800227c <actUartSetBaudRate+0x60>)
 8002238:	4413      	add	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]

	if (p_uart->p_huart->Init.BaudRate == baudrate) return TRUE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d101      	bne.n	800224c <actUartSetBaudRate+0x30>
 8002248:	2301      	movs	r3, #1
 800224a:	e013      	b.n	8002274 <actUartSetBaudRate+0x58>

	HAL_UART_DeInit(p_uart->p_huart);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	4618      	mov	r0, r3
 8002252:	f01f feb4 	bl	8021fbe <HAL_UART_DeInit>
	p_uart->p_huart->Init.BaudRate = baudrate;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(p_uart->p_huart) != HAL_OK) {
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	4618      	mov	r0, r3
 8002264:	f01f fe5e 	bl	8021f24 <HAL_UART_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <actUartSetBaudRate+0x56>
		return FALSE;
 800226e:	2300      	movs	r3, #0
 8002270:	e000      	b.n	8002274 <actUartSetBaudRate+0x58>
	}
	return TRUE;
 8002272:	2301      	movs	r3, #1
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000310 	.word	0x20000310

08002280 <actUartStartTransfer>:

static BOOL actUartStartTransfer(PifComm* p_comm)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	8a1b      	ldrh	r3, [r3, #16]
 800228c:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8002290:	4613      	mov	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <actUartStartTransfer+0x64>)
 800229a:	4413      	add	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

	p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2208      	movs	r2, #8
 80022a2:	879a      	strh	r2, [r3, #60]	; 0x3c
	state = pifComm_StartGetTxData(p_comm, &p_data, &p_uart->tx_frame_size);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80022aa:	f107 030c 	add.w	r3, r7, #12
 80022ae:	4619      	mov	r1, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f010 fa22 	bl	80126fa <pifComm_StartGetTxData>
 80022b6:	4603      	mov	r3, r0
 80022b8:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d009      	beq.n	80022d8 <actUartStartTransfer+0x58>
		HAL_UART_Transmit_IT(p_uart->p_huart, p_data, p_uart->tx_frame_size);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022c8:	68f9      	ldr	r1, [r7, #12]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80022ce:	461a      	mov	r2, r3
 80022d0:	f01f fea4 	bl	802201c <HAL_UART_Transmit_IT>
		return TRUE;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <actUartStartTransfer+0x5a>
	}
	return FALSE;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000310 	.word	0x20000310

080022e8 <serialUSART>:

static BOOL serialUSART(uartPort_t* s, uint32_t baudRate, PifId pif_id)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
	s->init = TRUE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (!pifComm_Init(&s->port.comm, pif_id)) return FALSE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3304      	adds	r3, #4
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f010 f8e2 	bl	80124d0 <pifComm_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <serialUSART+0x2e>
 8002312:	2300      	movs	r3, #0
 8002314:	e02b      	b.n	800236e <serialUSART+0x86>
	if (!pifComm_AttachTask(&s->port.comm, TM_PERIOD_MS, 1, TRUE)) return FALSE;	// 1ms
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1d18      	adds	r0, r3, #4
 800231a:	2301      	movs	r3, #1
 800231c:	2201      	movs	r2, #1
 800231e:	2102      	movs	r1, #2
 8002320:	f010 fa80 	bl	8012824 <pifComm_AttachTask>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <serialUSART+0x46>
 800232a:	2300      	movs	r3, #0
 800232c:	e01f      	b.n	800236e <serialUSART+0x86>
	if (!pifComm_AllocRxBuffer(&s->port.comm, 64, s->rx_threshold)) return FALSE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1d18      	adds	r0, r3, #4
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002338:	461a      	mov	r2, r3
 800233a:	2140      	movs	r1, #64	; 0x40
 800233c:	f010 f918 	bl	8012570 <pifComm_AllocRxBuffer>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <serialUSART+0x62>
 8002346:	2300      	movs	r3, #0
 8002348:	e011      	b.n	800236e <serialUSART+0x86>
	if (!pifComm_AllocTxBuffer(&s->port.comm, 64)) return FALSE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3304      	adds	r3, #4
 800234e:	2140      	movs	r1, #64	; 0x40
 8002350:	4618      	mov	r0, r3
 8002352:	f010 f951 	bl	80125f8 <pifComm_AllocTxBuffer>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <serialUSART+0x78>
 800235c:	2300      	movs	r3, #0
 800235e:	e006      	b.n	800236e <serialUSART+0x86>
	s->port.comm.act_set_baudrate = actUartSetBaudRate;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4a05      	ldr	r2, [pc, #20]	; (8002378 <serialUSART+0x90>)
 8002364:	605a      	str	r2, [r3, #4]
	s->port.comm.act_start_transfer = actUartStartTransfer;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4a04      	ldr	r2, [pc, #16]	; (800237c <serialUSART+0x94>)
 800236a:	611a      	str	r2, [r3, #16]
	return TRUE;
 800236c:	2301      	movs	r3, #1
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	0800221d 	.word	0x0800221d
 800237c:	08002281 	.word	0x08002281

08002380 <uartOpen>:
}

#endif

serialPort_t *uartOpen(int port, uint32_t baudRate, portMode_t mode)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	4613      	mov	r3, r2
 800238c:	71fb      	strb	r3, [r7, #7]
    uartPort_t *s = NULL;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]

    if (port == UART_PORT_1) {
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d109      	bne.n	80023ac <uartOpen+0x2c>
        s = &uartPort[0];
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <uartOpen+0xb0>)
 800239a:	617b      	str	r3, [r7, #20]
        s->p_huart = &huart1;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	4a25      	ldr	r2, [pc, #148]	; (8002434 <uartOpen+0xb4>)
 80023a0:	639a      	str	r2, [r3, #56]	; 0x38
        s->rx_threshold = 25;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2219      	movs	r2, #25
 80023a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023aa:	e01b      	b.n	80023e4 <uartOpen+0x64>
    }
#ifndef __PIF_DEBUG__
    else if (port == UART_PORT_2) {
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d109      	bne.n	80023c6 <uartOpen+0x46>
        s = &uartPort[1];
 80023b2:	4b21      	ldr	r3, [pc, #132]	; (8002438 <uartOpen+0xb8>)
 80023b4:	617b      	str	r3, [r7, #20]
        s->p_huart = &huart2;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <uartOpen+0xbc>)
 80023ba:	639a      	str	r2, [r3, #56]	; 0x38
        s->rx_threshold = 10;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	220a      	movs	r2, #10
 80023c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c4:	e00e      	b.n	80023e4 <uartOpen+0x64>
    }
#endif
    else if (port == UART_PORT_3) {
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d109      	bne.n	80023e0 <uartOpen+0x60>
        s = &uartPort[2];
 80023cc:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <uartOpen+0xc0>)
 80023ce:	617b      	str	r3, [r7, #20]
        s->p_huart = &huart6;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <uartOpen+0xc4>)
 80023d4:	639a      	str	r2, [r3, #56]	; 0x38
        s->rx_threshold = 25;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2219      	movs	r2, #25
 80023da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023de:	e001      	b.n	80023e4 <uartOpen+0x64>
    }
    else return NULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e021      	b.n	8002428 <uartOpen+0xa8>

    if (!serialUSART(s, baudRate, PIF_ID_UART(port - 1))) return FALSE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	33ff      	adds	r3, #255	; 0xff
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	6978      	ldr	r0, [r7, #20]
 80023f2:	f7ff ff79 	bl	80022e8 <serialUSART>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <uartOpen+0x80>
 80023fc:	2300      	movs	r3, #0
 80023fe:	e013      	b.n	8002428 <uartOpen+0xa8>

    // callback for IRQ-based RX ONLY
    if (!serialSetBaudRate(&s->port, baudRate)) {
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	4618      	mov	r0, r3
 8002406:	f000 f8bf 	bl	8002588 <serialSetBaudRate>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d106      	bne.n	800241e <uartOpen+0x9e>
    	pifComm_Clear(&s->port.comm);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3304      	adds	r3, #4
 8002414:	4618      	mov	r0, r3
 8002416:	f010 f885 	bl	8012524 <pifComm_Clear>
    	return FALSE;
 800241a:	2300      	movs	r3, #0
 800241c:	e004      	b.n	8002428 <uartOpen+0xa8>
    }

	s->init = FALSE;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return (serialPort_t *)s;
 8002426:	697b      	ldr	r3, [r7, #20]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000310 	.word	0x20000310
 8002434:	20000628 	.word	0x20000628
 8002438:	20000354 	.word	0x20000354
 800243c:	2000066c 	.word	0x2000066c
 8002440:	20000398 	.word	0x20000398
 8002444:	200006b0 	.word	0x200006b0

08002448 <HAL_UART_TxCpltCallback>:

// Handlers

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <HAL_UART_TxCpltCallback+0xa0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d102      	bne.n	8002460 <HAL_UART_TxCpltCallback+0x18>
		p_uart = &uartPort[0];
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_UART_TxCpltCallback+0xa4>)
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	e00e      	b.n	800247e <HAL_UART_TxCpltCallback+0x36>
	}
	else if (huart->Instance == USART2) {
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a22      	ldr	r2, [pc, #136]	; (80024f0 <HAL_UART_TxCpltCallback+0xa8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d102      	bne.n	8002470 <HAL_UART_TxCpltCallback+0x28>
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
			}
		}
		return;
#else
		p_uart = &uartPort[1];
 800246a:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <HAL_UART_TxCpltCallback+0xac>)
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e006      	b.n	800247e <HAL_UART_TxCpltCallback+0x36>
#endif
	}
	else if (huart->Instance == USART6) {
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a20      	ldr	r2, [pc, #128]	; (80024f8 <HAL_UART_TxCpltCallback+0xb0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d132      	bne.n	80024e0 <HAL_UART_TxCpltCallback+0x98>
		p_uart = &uartPort[2];
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_UART_TxCpltCallback+0xb4>)
 800247c:	617b      	str	r3, [r7, #20]
	}
	else return;

	state = pifComm_EndGetTxData(&p_uart->port.comm, p_uart->tx_frame_size);
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	1d1a      	adds	r2, r3, #4
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f010 f96e 	bl	801276a <pifComm_EndGetTxData>
 800248e:	4603      	mov	r3, r0
 8002490:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_UART_TxCpltCallback+0x60>
		pifComm_FinishTransfer(&p_uart->port.comm);
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	3304      	adds	r3, #4
 80024a0:	4618      	mov	r0, r3
 80024a2:	f010 f97b 	bl	801279c <pifComm_FinishTransfer>
 80024a6:	e01c      	b.n	80024e2 <HAL_UART_TxCpltCallback+0x9a>
	}
	else {
		p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2208      	movs	r2, #8
 80024ac:	879a      	strh	r2, [r3, #60]	; 0x3c
		state = pifComm_StartGetTxData(&p_uart->port.comm, &p_data, &p_uart->tx_frame_size);
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	1d18      	adds	r0, r3, #4
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	4619      	mov	r1, r3
 80024be:	f010 f91c 	bl	80126fa <pifComm_StartGetTxData>
 80024c2:	4603      	mov	r3, r0
 80024c4:	74fb      	strb	r3, [r7, #19]
		if (state & 1) {
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_UART_TxCpltCallback+0x9a>
			HAL_UART_Transmit_IT(huart, p_data, p_uart->tx_frame_size);
 80024d0:	68f9      	ldr	r1, [r7, #12]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80024d6:	461a      	mov	r2, r3
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f01f fd9f 	bl	802201c <HAL_UART_Transmit_IT>
 80024de:	e000      	b.n	80024e2 <HAL_UART_TxCpltCallback+0x9a>
	else return;
 80024e0:	bf00      	nop
		}
	}
}
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40011000 	.word	0x40011000
 80024ec:	20000310 	.word	0x20000310
 80024f0:	40004400 	.word	0x40004400
 80024f4:	20000354 	.word	0x20000354
 80024f8:	40011400 	.word	0x40011400
 80024fc:	20000398 	.word	0x20000398

08002500 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a18      	ldr	r2, [pc, #96]	; (8002570 <HAL_UART_RxCpltCallback+0x70>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d102      	bne.n	8002518 <HAL_UART_RxCpltCallback+0x18>
		p_uart = &uartPort[0];
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <HAL_UART_RxCpltCallback+0x74>)
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	e00e      	b.n	8002536 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART2) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a16      	ldr	r2, [pc, #88]	; (8002578 <HAL_UART_RxCpltCallback+0x78>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d102      	bne.n	8002528 <HAL_UART_RxCpltCallback+0x28>
		p_uart = &uartPort[1];
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_UART_RxCpltCallback+0x7c>)
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e006      	b.n	8002536 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART6) {
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a14      	ldr	r2, [pc, #80]	; (8002580 <HAL_UART_RxCpltCallback+0x80>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d117      	bne.n	8002562 <HAL_UART_RxCpltCallback+0x62>
		p_uart = &uartPort[2];
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_UART_RxCpltCallback+0x84>)
 8002534:	60fb      	str	r3, [r7, #12]
	}
	else return;

	if (p_uart->init) return;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800253c:	2b00      	cmp	r3, #0
 800253e:	d112      	bne.n	8002566 <HAL_UART_RxCpltCallback+0x66>

	pifComm_PutRxByte(&p_uart->port.comm, p_uart->rx_frame);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1d1a      	adds	r2, r3, #4
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800254a:	4619      	mov	r1, r3
 800254c:	4610      	mov	r0, r2
 800254e:	f010 f8a8 	bl	80126a2 <pifComm_PutRxByte>
	HAL_UART_Receive_IT(huart, &p_uart->rx_frame, 1);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	333e      	adds	r3, #62	; 0x3e
 8002556:	2201      	movs	r2, #1
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f01f fda3 	bl	80220a6 <HAL_UART_Receive_IT>
 8002560:	e002      	b.n	8002568 <HAL_UART_RxCpltCallback+0x68>
	else return;
 8002562:	bf00      	nop
 8002564:	e000      	b.n	8002568 <HAL_UART_RxCpltCallback+0x68>
	if (p_uart->init) return;
 8002566:	bf00      	nop
}
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40011000 	.word	0x40011000
 8002574:	20000310 	.word	0x20000310
 8002578:	40004400 	.word	0x40004400
 800257c:	20000354 	.word	0x20000354
 8002580:	40011400 	.word	0x40011400
 8002584:	20000398 	.word	0x20000398

08002588 <serialSetBaudRate>:

BOOL serialSetBaudRate(serialPort_t* instance, uint32_t baudRate)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
   	return (*instance->comm.act_set_baudrate)(&instance->comm, baudRate);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	3204      	adds	r2, #4
 800259a:	6839      	ldr	r1, [r7, #0]
 800259c:	4610      	mov	r0, r2
 800259e:	4798      	blx	r3
 80025a0:	4603      	mov	r3, r0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <serialStartReceiveFunc>:

BOOL serialStartReceiveFunc(PifComm* p_comm)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	8a1b      	ldrh	r3, [r3, #16]
 80025b8:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <serialStartReceiveFunc+0x44>)
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

	if (HAL_UART_Receive_IT(p_uart->p_huart, &p_uart->rx_frame, 1) != HAL_OK) return FALSE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	333e      	adds	r3, #62	; 0x3e
 80025d2:	2201      	movs	r2, #1
 80025d4:	4619      	mov	r1, r3
 80025d6:	f01f fd66 	bl	80220a6 <HAL_UART_Receive_IT>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <serialStartReceiveFunc+0x38>
 80025e0:	2300      	movs	r3, #0
 80025e2:	e000      	b.n	80025e6 <serialStartReceiveFunc+0x3a>
	return TRUE;
 80025e4:	2301      	movs	r3, #1
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000310 	.word	0x20000310

080025f4 <serialStopReceiveFunc>:

BOOL serialStopReceiveFunc(PifComm* p_comm)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	8a1b      	ldrh	r3, [r3, #16]
 8002600:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4a06      	ldr	r2, [pc, #24]	; (8002628 <serialStopReceiveFunc+0x34>)
 800260e:	4413      	add	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]

	HAL_UART_Abort_IT(p_uart->p_huart);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	4618      	mov	r0, r3
 8002618:	f01f fd76 	bl	8022108 <HAL_UART_Abort_IT>
	return TRUE;
 800261c:	2301      	movs	r3, #1
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000310 	.word	0x20000310

0800262c <micros>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t micros()
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT;
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <micros+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	20000598 	.word	0x20000598

08002644 <featureDefault>:

static void featureDefault(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
    featureSet(FEATURE_VBAT);
 8002648:	2002      	movs	r0, #2
 800264a:	f004 fc37 	bl	8006ebc <featureSet>
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af02      	add	r7, sp, #8
#else
	#define FAIL { goto fail; }
#endif
    drv_pwm_config_t pwm_params;
    drv_adc_config_t adc_params;
    bool sensorsOK = false;
 800265a:	2300      	movs	r3, #0
 800265c:	77bb      	strb	r3, [r7, #30]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800265e:	f019 fbb1 	bl	801bdc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002662:	f000 faeb 	bl	8002c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002666:	f000 fda3 	bl	80031b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800266a:	f000 fd63 	bl	8003134 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800266e:	f000 fd0d 	bl	800308c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002672:	f000 fbc9 	bl	8002e08 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002676:	f000 fc41 	bl	8002efc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800267a:	f000 fcdd 	bl	8003038 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800267e:	f000 fd2f 	bl	80030e0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8002682:	f000 fb45 	bl	8002d10 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002686:	f000 fbed 	bl	8002e64 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800268a:	2100      	movs	r1, #0
 800268c:	48bb      	ldr	r0, [pc, #748]	; (800297c <main+0x328>)
 800268e:	f01e fd1d 	bl	80210cc <HAL_TIM_IC_Start_IT>

    pif_Init(micros);
 8002692:	48bb      	ldr	r0, [pc, #748]	; (8002980 <main+0x32c>)
 8002694:	f00f f8b0 	bl	80117f8 <pif_Init>

    if (!pifTaskManager_Init(20)) FAIL;
 8002698:	2014      	movs	r0, #20
 800269a:	f012 f8a3 	bl	80147e4 <pifTaskManager_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8286 	beq.w	8002bb2 <main+0x55e>
    pif_act_task_signal = actTaskSignal;

    logOpen();
#endif

    if (!pifTimerManager_Init(&g_timer_1ms, PIF_ID_AUTO, 1000, 3)) FAIL;		        // 1000us
 80026a6:	2303      	movs	r3, #3
 80026a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026ac:	2100      	movs	r1, #0
 80026ae:	48b5      	ldr	r0, [pc, #724]	; (8002984 <main+0x330>)
 80026b0:	f012 fb4a 	bl	8014d48 <pifTimerManager_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 827d 	beq.w	8002bb6 <main+0x562>

#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Start Baseflight: %d\n", sizeof(master_t));
#endif

    if (!buzzerInit()) FAIL;
 80026bc:	f001 fbde 	bl	8003e7c <buzzerInit>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f083 0301 	eor.w	r3, r3, #1
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f040 8276 	bne.w	8002bba <main+0x566>

    // make sure (at compile time) that config struct doesn't overflow allocated flash pages
    ct_assert(sizeof(mcfg) < STORAGE_VOLUME);

    g_featureDefault = featureDefault;
 80026ce:	4bae      	ldr	r3, [pc, #696]	; (8002988 <main+0x334>)
 80026d0:	4aae      	ldr	r2, [pc, #696]	; (800298c <main+0x338>)
 80026d2:	601a      	str	r2, [r3, #0]

    if (!pifI2cPort_Init(&g_i2c_port, PIF_ID_AUTO, 5, EEPROM_PAGE_SIZE)) FAIL;
 80026d4:	2340      	movs	r3, #64	; 0x40
 80026d6:	2205      	movs	r2, #5
 80026d8:	2100      	movs	r1, #0
 80026da:	48ad      	ldr	r0, [pc, #692]	; (8002990 <main+0x33c>)
 80026dc:	f010 f8c2 	bl	8012864 <pifI2cPort_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 826b 	beq.w	8002bbe <main+0x56a>
    g_i2c_port.act_read = actI2cRead;
 80026e8:	4ba9      	ldr	r3, [pc, #676]	; (8002990 <main+0x33c>)
 80026ea:	4aaa      	ldr	r2, [pc, #680]	; (8002994 <main+0x340>)
 80026ec:	605a      	str	r2, [r3, #4]
    g_i2c_port.act_write = actI2cWrite;
 80026ee:	4ba8      	ldr	r3, [pc, #672]	; (8002990 <main+0x33c>)
 80026f0:	4aa9      	ldr	r2, [pc, #676]	; (8002998 <main+0x344>)
 80026f2:	609a      	str	r2, [r3, #8]

    if (!initEEPROM()) FAIL;
 80026f4:	f003 fe2e 	bl	8006354 <initEEPROM>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f083 0301 	eor.w	r3, r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	f040 825e 	bne.w	8002bc2 <main+0x56e>
    if (!checkFirstTime(false)) FAIL;
 8002706:	2000      	movs	r0, #0
 8002708:	f004 f862 	bl	80067d0 <checkFirstTime>
 800270c:	4603      	mov	r3, r0
 800270e:	f083 0301 	eor.w	r3, r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 8256 	bne.w	8002bc6 <main+0x572>
    readEEPROM();
 800271a:	f003 fec3 	bl	80064a4 <readEEPROM>

    systemInit();
 800271e:	f7ff fc41 	bl	8001fa4 <systemInit>

    // sleep for 100ms
    pif_Delay1ms(100);
 8002722:	2064      	movs	r0, #100	; 0x64
 8002724:	f00f f932 	bl	801198c <pif_Delay1ms>

    activateConfig();
 8002728:	f003 ff06 	bl	8006538 <activateConfig>

    // configure rssi ADC
    if (mcfg.rssi_adc_channel > 0 && (mcfg.rssi_adc_channel == 1 || mcfg.rssi_adc_channel == 9 || mcfg.rssi_adc_channel == 5) && mcfg.rssi_adc_channel != mcfg.power_adc_channel)
 800272c:	4b9b      	ldr	r3, [pc, #620]	; (800299c <main+0x348>)
 800272e:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d01b      	beq.n	800276e <main+0x11a>
 8002736:	4b99      	ldr	r3, [pc, #612]	; (800299c <main+0x348>)
 8002738:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800273c:	2b01      	cmp	r3, #1
 800273e:	d009      	beq.n	8002754 <main+0x100>
 8002740:	4b96      	ldr	r3, [pc, #600]	; (800299c <main+0x348>)
 8002742:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002746:	2b09      	cmp	r3, #9
 8002748:	d004      	beq.n	8002754 <main+0x100>
 800274a:	4b94      	ldr	r3, [pc, #592]	; (800299c <main+0x348>)
 800274c:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002750:	2b05      	cmp	r3, #5
 8002752:	d10c      	bne.n	800276e <main+0x11a>
 8002754:	4b91      	ldr	r3, [pc, #580]	; (800299c <main+0x348>)
 8002756:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
 800275a:	4b90      	ldr	r3, [pc, #576]	; (800299c <main+0x348>)
 800275c:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8002760:	429a      	cmp	r2, r3
 8002762:	d004      	beq.n	800276e <main+0x11a>
        adc_params.rssiAdcChannel = mcfg.rssi_adc_channel;
 8002764:	4b8d      	ldr	r3, [pc, #564]	; (800299c <main+0x348>)
 8002766:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800276a:	707b      	strb	r3, [r7, #1]
 800276c:	e005      	b.n	800277a <main+0x126>
    else {
        adc_params.rssiAdcChannel = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	707b      	strb	r3, [r7, #1]
        mcfg.rssi_adc_channel = 0;
 8002772:	4b8a      	ldr	r3, [pc, #552]	; (800299c <main+0x348>)
 8002774:	2200      	movs	r2, #0
 8002776:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
    }

    adcInit(&adc_params);
 800277a:	463b      	mov	r3, r7
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fd0b 	bl	8001198 <adcInit>
    // Check battery type/voltage
    if (feature(FEATURE_VBAT))
 8002782:	2002      	movs	r0, #2
 8002784:	f004 fb84 	bl	8006e90 <feature>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <main+0x13e>
        batteryInit();
 800278e:	f00b ffc5 	bl	800e71c <batteryInit>
    initBoardAlignment();
 8002792:	f001 fa19 	bl	8003bc8 <initBoardAlignment>

    // drop out any sensors that don't seem to work, init all the others. halt if gyro is dead.
    sensorsOK = sensorsAutodetect(gyro_detect, acc_detect, baro_detect, mag_detect);
 8002796:	4b82      	ldr	r3, [pc, #520]	; (80029a0 <main+0x34c>)
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <main+0x350>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b82      	ldr	r3, [pc, #520]	; (80029a8 <main+0x354>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4882      	ldr	r0, [pc, #520]	; (80029ac <main+0x358>)
 80027a4:	f00b fe5e 	bl	800e464 <sensorsAutodetect>
 80027a8:	4603      	mov	r3, r0
 80027aa:	77bb      	strb	r3, [r7, #30]
#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Sensor: %lxh(%d)", sensorsMask(), sensorsOK);
#endif

    // if gyro was not detected due to whatever reason, we give up now.
    if (!sensorsOK)
 80027ac:	7fbb      	ldrb	r3, [r7, #30]
 80027ae:	f083 0301 	eor.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <main+0x16a>
        failureMode(3);
 80027b8:	2003      	movs	r0, #3
 80027ba:	f7ff fc02 	bl	8001fc2 <failureMode>

    actLed1State(ON);
 80027be:	2001      	movs	r0, #1
 80027c0:	f7ff fc76 	bl	80020b0 <actLed1State>
    actLed0State(OFF);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7ff fc47 	bl	8002058 <actLed0State>
    for (i = 0; i < 10; i++) {
 80027ca:	2300      	movs	r3, #0
 80027cc:	77fb      	strb	r3, [r7, #31]
 80027ce:	e016      	b.n	80027fe <main+0x1aa>
        actLed1Toggle();
 80027d0:	f7ff fc84 	bl	80020dc <actLed1Toggle>
        actLed0Toggle();
 80027d4:	f7ff fc56 	bl	8002084 <actLed0Toggle>
        pifTaskManager_YieldMs(25);
 80027d8:	2019      	movs	r0, #25
 80027da:	f012 fa65 	bl	8014ca8 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 80027de:	2101      	movs	r1, #1
 80027e0:	f44f 7098 	mov.w	r0, #304	; 0x130
 80027e4:	f7ff fc90 	bl	8002108 <actBuzzerAction>
        pifTaskManager_YieldMs(25);
 80027e8:	2019      	movs	r0, #25
 80027ea:	f012 fa5d 	bl	8014ca8 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 80027ee:	2100      	movs	r1, #0
 80027f0:	f44f 7098 	mov.w	r0, #304	; 0x130
 80027f4:	f7ff fc88 	bl	8002108 <actBuzzerAction>
    for (i = 0; i < 10; i++) {
 80027f8:	7ffb      	ldrb	r3, [r7, #31]
 80027fa:	3301      	adds	r3, #1
 80027fc:	77fb      	strb	r3, [r7, #31]
 80027fe:	7ffb      	ldrb	r3, [r7, #31]
 8002800:	2b09      	cmp	r3, #9
 8002802:	d9e5      	bls.n	80027d0 <main+0x17c>
    }
    actLed0State(OFF);
 8002804:	2000      	movs	r0, #0
 8002806:	f7ff fc27 	bl	8002058 <actLed0State>
    actLed1State(OFF);
 800280a:	2000      	movs	r0, #0
 800280c:	f7ff fc50 	bl	80020b0 <actLed1State>

    imuInit(); // Mag is initialized inside imuInit
 8002810:	f006 ffea 	bl	80097e8 <imuInit>
    mixerInit(); // this will set core.useServo var depending on mixer type
 8002814:	f008 fac4 	bl	800ada0 <mixerInit>

#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Serial: %lu", mcfg.serial_baudrate);
#endif
    serialInit(UART_PORT_1, mcfg.serial_baudrate, UART_PORT_NONE);
 8002818:	4b60      	ldr	r3, [pc, #384]	; (800299c <main+0x348>)
 800281a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800281e:	2200      	movs	r2, #0
 8002820:	4619      	mov	r1, r3
 8002822:	2001      	movs	r0, #1
 8002824:	f00c fede 	bl	800f5e4 <serialInit>

    g_task_compute_rc = pifTaskManager_Add(TM_NEED, 0, taskComputeRc, NULL, FALSE);
 8002828:	2300      	movs	r3, #0
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2300      	movs	r3, #0
 800282e:	4a60      	ldr	r2, [pc, #384]	; (80029b0 <main+0x35c>)
 8002830:	2100      	movs	r1, #0
 8002832:	2006      	movs	r0, #6
 8002834:	f011 fffc 	bl	8014830 <pifTaskManager_Add>
 8002838:	4603      	mov	r3, r0
 800283a:	4a5e      	ldr	r2, [pc, #376]	; (80029b4 <main+0x360>)
 800283c:	6013      	str	r3, [r2, #0]
    if (!g_task_compute_rc) FAIL;
 800283e:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <main+0x360>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 81c1 	beq.w	8002bca <main+0x576>

    // when using airplane/wing mixer, servo/motor outputs are remapped
    if (mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 8002848:	4b54      	ldr	r3, [pc, #336]	; (800299c <main+0x348>)
 800284a:	795b      	ldrb	r3, [r3, #5]
 800284c:	2b0e      	cmp	r3, #14
 800284e:	d007      	beq.n	8002860 <main+0x20c>
 8002850:	4b52      	ldr	r3, [pc, #328]	; (800299c <main+0x348>)
 8002852:	795b      	ldrb	r3, [r3, #5]
 8002854:	2b08      	cmp	r3, #8
 8002856:	d003      	beq.n	8002860 <main+0x20c>
 8002858:	4b50      	ldr	r3, [pc, #320]	; (800299c <main+0x348>)
 800285a:	795b      	ldrb	r3, [r3, #5]
 800285c:	2b18      	cmp	r3, #24
 800285e:	d102      	bne.n	8002866 <main+0x212>
        pwm_params.airplane = true;
 8002860:	2301      	movs	r3, #1
 8002862:	72bb      	strb	r3, [r7, #10]
 8002864:	e001      	b.n	800286a <main+0x216>
    else
        pwm_params.airplane = false;
 8002866:	2300      	movs	r3, #0
 8002868:	72bb      	strb	r3, [r7, #10]
    pwm_params.useUART = feature(FEATURE_GPS) || feature(FEATURE_SERIALRX); // spektrum/sbus support uses UART too
 800286a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800286e:	f004 fb0f 	bl	8006e90 <feature>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <main+0x230>
 8002878:	2008      	movs	r0, #8
 800287a:	f004 fb09 	bl	8006e90 <feature>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <main+0x234>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <main+0x236>
 8002888:	2300      	movs	r3, #0
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	b2db      	uxtb	r3, r3
 8002890:	71bb      	strb	r3, [r7, #6]
    pwm_params.useSoftSerial = false;
 8002892:	2300      	movs	r3, #0
 8002894:	71fb      	strb	r3, [r7, #7]
    pwm_params.usePPM = feature(FEATURE_PPM);
 8002896:	2001      	movs	r0, #1
 8002898:	f004 fafa 	bl	8006e90 <feature>
 800289c:	4603      	mov	r3, r0
 800289e:	717b      	strb	r3, [r7, #5]
    pwm_params.enableInput = !feature(FEATURE_SERIALRX); // disable inputs if using spektrum
 80028a0:	2008      	movs	r0, #8
 80028a2:	f004 faf5 	bl	8006e90 <feature>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf14      	ite	ne
 80028ac:	2301      	movne	r3, #1
 80028ae:	2300      	moveq	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f083 0301 	eor.w	r3, r3, #1
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	713b      	strb	r3, [r7, #4]
    pwm_params.useServos = core.useServo;
 80028c0:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <main+0x364>)
 80028c2:	7d5b      	ldrb	r3, [r3, #21]
 80028c4:	723b      	strb	r3, [r7, #8]
    pwm_params.extraServos = cfg.gimbal_flags & GIMBAL_FORWARDAUX;
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <main+0x368>)
 80028c8:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	727b      	strb	r3, [r7, #9]
    pwm_params.motorPwmRate = mcfg.motor_pwm_rate;
 80028dc:	4b2f      	ldr	r3, [pc, #188]	; (800299c <main+0x348>)
 80028de:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 80028e2:	81fb      	strh	r3, [r7, #14]
    pwm_params.servoPwmRate = mcfg.servo_pwm_rate;
 80028e4:	4b2d      	ldr	r3, [pc, #180]	; (800299c <main+0x348>)
 80028e6:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 80028ea:	823b      	strh	r3, [r7, #16]
    pwm_params.pwmFilter = mcfg.pwm_filter;
 80028ec:	4b2b      	ldr	r3, [pc, #172]	; (800299c <main+0x348>)
 80028ee:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 80028f2:	72fb      	strb	r3, [r7, #11]
    pwm_params.idlePulse = PULSE_1MS; // standard PWM for brushless ESC (default, overridden below)
 80028f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f8:	827b      	strh	r3, [r7, #18]
    if (feature(FEATURE_3D))
 80028fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028fe:	f004 fac7 	bl	8006e90 <feature>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <main+0x2bc>
        pwm_params.idlePulse = mcfg.neutral3d;
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <main+0x348>)
 800290a:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800290e:	827b      	strh	r3, [r7, #18]
    if (pwm_params.motorPwmRate > 500)
 8002910:	89fb      	ldrh	r3, [r7, #14]
 8002912:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002916:	d901      	bls.n	800291c <main+0x2c8>
        pwm_params.idlePulse = 0; // brushed motors
 8002918:	2300      	movs	r3, #0
 800291a:	827b      	strh	r3, [r7, #18]
    pwm_params.syncPWM = feature(FEATURE_SYNCPWM);
 800291c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002920:	f004 fab6 	bl	8006e90 <feature>
 8002924:	4603      	mov	r3, r0
 8002926:	763b      	strb	r3, [r7, #24]
    pwm_params.fastPWM = feature(FEATURE_FASTPWM);
 8002928:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800292c:	f004 fab0 	bl	8006e90 <feature>
 8002930:	4603      	mov	r3, r0
 8002932:	767b      	strb	r3, [r7, #25]
    pwm_params.servoCenterPulse = mcfg.midrc;
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <main+0x348>)
 8002936:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800293a:	82bb      	strh	r3, [r7, #20]
    pwm_params.failsafeThreshold = cfg.failsafe_detect_threshold;
 800293c:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <main+0x368>)
 800293e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8002942:	82fb      	strh	r3, [r7, #22]
    switch (mcfg.power_adc_channel) {
 8002944:	4b15      	ldr	r3, [pc, #84]	; (800299c <main+0x348>)
 8002946:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800294a:	2b01      	cmp	r3, #1
 800294c:	d002      	beq.n	8002954 <main+0x300>
 800294e:	2b09      	cmp	r3, #9
 8002950:	d003      	beq.n	800295a <main+0x306>
 8002952:	e005      	b.n	8002960 <main+0x30c>
        case 1:
            pwm_params.adcChannel = PWM2;
 8002954:	2301      	movs	r3, #1
 8002956:	733b      	strb	r3, [r7, #12]
            break;
 8002958:	e005      	b.n	8002966 <main+0x312>
        case 9:
            pwm_params.adcChannel = PWM8;
 800295a:	2307      	movs	r3, #7
 800295c:	733b      	strb	r3, [r7, #12]
            break;
 800295e:	e002      	b.n	8002966 <main+0x312>
        default:
            pwm_params.adcChannel = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	733b      	strb	r3, [r7, #12]
            break;
 8002964:	bf00      	nop
    }

    pwmInit(&pwm_params);
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff f999 	bl	8001ca0 <pwmInit>
    core.numServos = pwm_params.numServos;
 800296e:	7eba      	ldrb	r2, [r7, #26]
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <main+0x364>)
 8002972:	759a      	strb	r2, [r3, #22]

    // configure PWM/CPPM read function and max number of channels. spektrum or sbus below will override both of these, if enabled
    for (i = 0; i < RC_CHANS; i++)
 8002974:	2300      	movs	r3, #0
 8002976:	77fb      	strb	r3, [r7, #31]
 8002978:	e02b      	b.n	80029d2 <main+0x37e>
 800297a:	bf00      	nop
 800297c:	20000598 	.word	0x20000598
 8002980:	0800262d 	.word	0x0800262d
 8002984:	20001800 	.word	0x20001800
 8002988:	20001610 	.word	0x20001610
 800298c:	08002645 	.word	0x08002645
 8002990:	200017d0 	.word	0x200017d0
 8002994:	08001951 	.word	0x08001951
 8002998:	080019cd 	.word	0x080019cd
 800299c:	200007ac 	.word	0x200007ac
 80029a0:	2000070c 	.word	0x2000070c
 80029a4:	20000710 	.word	0x20000710
 80029a8:	20000714 	.word	0x20000714
 80029ac:	20000010 	.word	0x20000010
 80029b0:	0800d081 	.word	0x0800d081
 80029b4:	20001828 	.word	0x20001828
 80029b8:	200006f4 	.word	0x200006f4
 80029bc:	20000d18 	.word	0x20000d18
        rcData[i] = 1502;
 80029c0:	7ffb      	ldrb	r3, [r7, #31]
 80029c2:	4a8b      	ldr	r2, [pc, #556]	; (8002bf0 <main+0x59c>)
 80029c4:	f240 51de 	movw	r1, #1502	; 0x5de
 80029c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < RC_CHANS; i++)
 80029cc:	7ffb      	ldrb	r3, [r7, #31]
 80029ce:	3301      	adds	r3, #1
 80029d0:	77fb      	strb	r3, [r7, #31]
 80029d2:	7ffb      	ldrb	r3, [r7, #31]
 80029d4:	2b11      	cmp	r3, #17
 80029d6:	d9f3      	bls.n	80029c0 <main+0x36c>
    rcReadRawFunc = pwmReadRawRC;
 80029d8:	4b86      	ldr	r3, [pc, #536]	; (8002bf4 <main+0x5a0>)
 80029da:	4a87      	ldr	r2, [pc, #540]	; (8002bf8 <main+0x5a4>)
 80029dc:	601a      	str	r2, [r3, #0]

    if (feature(FEATURE_SERIALRX)) {
 80029de:	2008      	movs	r0, #8
 80029e0:	f004 fa56 	bl	8006e90 <feature>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d02f      	beq.n	8002a4a <main+0x3f6>
        switch (mcfg.serialrx_type) {
 80029ea:	4b84      	ldr	r3, [pc, #528]	; (8002bfc <main+0x5a8>)
 80029ec:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d82b      	bhi.n	8002a4c <main+0x3f8>
 80029f4:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <main+0x3a8>)
 80029f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fa:	bf00      	nop
 80029fc:	08002a15 	.word	0x08002a15
 8002a00:	08002a15 	.word	0x08002a15
 8002a04:	08002a1f 	.word	0x08002a1f
 8002a08:	08002a2f 	.word	0x08002a2f
 8002a0c:	08002a39 	.word	0x08002a39
 8002a10:	08002a41 	.word	0x08002a41
            case SERIALRX_SPEKTRUM1024:
            case SERIALRX_SPEKTRUM2048:
                spektrumInit(UART_PORT_2, &rcReadRawFunc);
 8002a14:	4977      	ldr	r1, [pc, #476]	; (8002bf4 <main+0x5a0>)
 8002a16:	2002      	movs	r0, #2
 8002a18:	f00e fde6 	bl	80115e8 <spektrumInit>
                break;
 8002a1c:	e016      	b.n	8002a4c <main+0x3f8>
            case SERIALRX_SBUS:
                // Configure hardware inverter on PB2. If not available, this has no effect.
                actInvState(ON);
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f7ff fb86 	bl	8002130 <actInvState>
                sbusInit(UART_PORT_2, &rcReadRawFunc);
 8002a24:	4973      	ldr	r1, [pc, #460]	; (8002bf4 <main+0x5a0>)
 8002a26:	2002      	movs	r0, #2
 8002a28:	f00b fcc0 	bl	800e3ac <sbusInit>
                break;
 8002a2c:	e00e      	b.n	8002a4c <main+0x3f8>
            case SERIALRX_SUMD:
                sumdInit(UART_PORT_2, &rcReadRawFunc);
 8002a2e:	4971      	ldr	r1, [pc, #452]	; (8002bf4 <main+0x5a0>)
 8002a30:	2002      	movs	r0, #2
 8002a32:	f00e fe9b 	bl	801176c <sumdInit>
                break;
 8002a36:	e009      	b.n	8002a4c <main+0x3f8>
            case SERIALRX_MSP:
                mspInit(&rcReadRawFunc);
 8002a38:	486e      	ldr	r0, [pc, #440]	; (8002bf4 <main+0x5a0>)
 8002a3a:	f00b fc4f 	bl	800e2dc <mspInit>
                break;
 8002a3e:	e005      	b.n	8002a4c <main+0x3f8>
            case SERIALRX_IBUS:
                ibusInit(UART_PORT_2, &rcReadRawFunc);
 8002a40:	496c      	ldr	r1, [pc, #432]	; (8002bf4 <main+0x5a0>)
 8002a42:	2002      	movs	r0, #2
 8002a44:	f006 fe76 	bl	8009734 <ibusInit>
                break;
 8002a48:	e000      	b.n	8002a4c <main+0x3f8>
        }
    }
 8002a4a:	bf00      	nop

    // Optional GPS - available in both PPM, PWM and serialRX input mode, in PWM input, reduces number of available channels by 2.
    // gpsInit will return if FEATURE_GPS is not enabled.
    if (feature(FEATURE_GPS)) {
 8002a4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a50:	f004 fa1e 	bl	8006e90 <feature>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <main+0x416>
        gpsInit(UART_PORT_3, mcfg.gps_baudrate);
 8002a5a:	4b68      	ldr	r3, [pc, #416]	; (8002bfc <main+0x5a8>)
 8002a5c:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	4619      	mov	r1, r3
 8002a64:	2003      	movs	r0, #3
 8002a66:	f005 f96f 	bl	8007d48 <gpsInit>
    }

#ifdef SONAR
    // sonar stuff only works with PPM
    if (feature(FEATURE_SONAR)) {
 8002a6a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a6e:	f004 fa0f 	bl	8006e90 <feature>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <main+0x42c>
//      Sonar_init(hcsr04Init, SF_NONE);
//      Sonar_init(hcsr04Init, SF_AVERAGE);
        Sonar_init(hcsr04Init, SF_NOISE_CANCEL);
 8002a78:	2102      	movs	r1, #2
 8002a7a:	4861      	ldr	r0, [pc, #388]	; (8002c00 <main+0x5ac>)
 8002a7c:	f00c fbf4 	bl	800f268 <Sonar_init>
    }
#endif

    core.numAuxChannels = constrain((mcfg.rc_channel_count - 4), 4, 8);
 8002a80:	4b5e      	ldr	r3, [pc, #376]	; (8002bfc <main+0x5a8>)
 8002a82:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8002a86:	3b04      	subs	r3, #4
 8002a88:	2208      	movs	r2, #8
 8002a8a:	2104      	movs	r1, #4
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 f87f 	bl	8003b90 <constrain>
 8002a92:	4603      	mov	r3, r0
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4b5b      	ldr	r3, [pc, #364]	; (8002c04 <main+0x5b0>)
 8002a98:	751a      	strb	r2, [r3, #20]
#ifdef TELEMETRY
    if (feature(FEATURE_TELEMETRY))
        initTelemetry();
#endif

    if (mcfg.mixerConfiguration == MULTITYPE_GIMBAL)
 8002a9a:	4b58      	ldr	r3, [pc, #352]	; (8002bfc <main+0x5a8>)
 8002a9c:	795b      	ldrb	r3, [r3, #5]
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d103      	bne.n	8002aaa <main+0x456>
        calibratingA = CALIBRATING_ACC_CYCLES;
 8002aa2:	4b59      	ldr	r3, [pc, #356]	; (8002c08 <main+0x5b4>)
 8002aa4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002aa8:	801a      	strh	r2, [r3, #0]
    calibratingG = CALIBRATING_GYRO_CYCLES;
 8002aaa:	4b58      	ldr	r3, [pc, #352]	; (8002c0c <main+0x5b8>)
 8002aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ab0:	801a      	strh	r2, [r3, #0]
    calibratingB = CALIBRATING_BARO_CYCLES;             // 10 seconds init_delay + 200 * 25 ms = 15 seconds before ground pressure settles
 8002ab2:	4b57      	ldr	r3, [pc, #348]	; (8002c10 <main+0x5bc>)
 8002ab4:	22c8      	movs	r2, #200	; 0xc8
 8002ab6:	801a      	strh	r2, [r3, #0]
    f.SMALL_ANGLE = 1;
 8002ab8:	4b56      	ldr	r3, [pc, #344]	; (8002c14 <main+0x5c0>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	735a      	strb	r2, [r3, #13]

    if (!pifTaskManager_Add(TM_PERIOD_MS, 1, taskLoop, NULL, TRUE)) FAIL;         								// 1ms
 8002abe:	2301      	movs	r3, #1
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	4a54      	ldr	r2, [pc, #336]	; (8002c18 <main+0x5c4>)
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	2002      	movs	r0, #2
 8002aca:	f011 feb1 	bl	8014830 <pifTaskManager_Add>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d07c      	beq.n	8002bce <main+0x57a>

    if (mcfg.looptime) {
 8002ad4:	4b49      	ldr	r3, [pc, #292]	; (8002bfc <main+0x5a8>)
 8002ad6:	899b      	ldrh	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00c      	beq.n	8002af6 <main+0x4a2>
    	g_task_compute_imu = pifTaskManager_Add(TM_PERIOD_US, mcfg.looptime, taskComputeImu, NULL, TRUE);
 8002adc:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <main+0x5a8>)
 8002ade:	8999      	ldrh	r1, [r3, #12]
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	4a4d      	ldr	r2, [pc, #308]	; (8002c1c <main+0x5c8>)
 8002ae8:	2003      	movs	r0, #3
 8002aea:	f011 fea1 	bl	8014830 <pifTaskManager_Add>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4a4b      	ldr	r2, [pc, #300]	; (8002c20 <main+0x5cc>)
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	e00a      	b.n	8002b0c <main+0x4b8>
    }
    else {
    	g_task_compute_imu = pifTaskManager_Add(TM_ALWAYS, 0, taskComputeImu, NULL, TRUE);
 8002af6:	2301      	movs	r3, #1
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	2300      	movs	r3, #0
 8002afc:	4a47      	ldr	r2, [pc, #284]	; (8002c1c <main+0x5c8>)
 8002afe:	2100      	movs	r1, #0
 8002b00:	2001      	movs	r0, #1
 8002b02:	f011 fe95 	bl	8014830 <pifTaskManager_Add>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4a45      	ldr	r2, [pc, #276]	; (8002c20 <main+0x5cc>)
 8002b0a:	6013      	str	r3, [r2, #0]
    }
    if (!g_task_compute_imu) FAIL;
 8002b0c:	4b44      	ldr	r3, [pc, #272]	; (8002c20 <main+0x5cc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d05e      	beq.n	8002bd2 <main+0x57e>
    g_task_compute_imu->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002b14:	4b42      	ldr	r3, [pc, #264]	; (8002c20 <main+0x5cc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	709a      	strb	r2, [r3, #2]

#ifdef MAG
    if (sensors(SENSOR_MAG)) {
 8002b1c:	2008      	movs	r0, #8
 8002b1e:	f004 f96f 	bl	8006e00 <sensors>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d012      	beq.n	8002b4e <main+0x4fa>
        sensor_set.mag.p_m_task = pifTaskManager_Add(TM_PERIOD_MS, 100, taskMagGetAdc, NULL, TRUE);             // 100ms
 8002b28:	2301      	movs	r3, #1
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	4a3d      	ldr	r2, [pc, #244]	; (8002c24 <main+0x5d0>)
 8002b30:	2164      	movs	r1, #100	; 0x64
 8002b32:	2002      	movs	r0, #2
 8002b34:	f011 fe7c 	bl	8014830 <pifTaskManager_Add>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a3b      	ldr	r2, [pc, #236]	; (8002c28 <main+0x5d4>)
 8002b3c:	6553      	str	r3, [r2, #84]	; 0x54
        if (!sensor_set.mag.p_m_task) FAIL;
 8002b3e:	4b3a      	ldr	r3, [pc, #232]	; (8002c28 <main+0x5d4>)
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d047      	beq.n	8002bd6 <main+0x582>
        sensor_set.mag.p_m_task->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002b46:	4b38      	ldr	r3, [pc, #224]	; (8002c28 <main+0x5d4>)
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	709a      	strb	r2, [r3, #2]
    }
#endif

#ifdef BARO
    if (sensors(SENSOR_BARO)) {
 8002b4e:	2004      	movs	r0, #4
 8002b50:	f004 f956 	bl	8006e00 <sensors>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00e      	beq.n	8002b78 <main+0x524>
        sensor_set.baro.p_b_task = pifTaskManager_Add(TM_NEED, 0, taskGetEstimatedAltitude, NULL, FALSE);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	4a32      	ldr	r2, [pc, #200]	; (8002c2c <main+0x5d8>)
 8002b62:	2100      	movs	r1, #0
 8002b64:	2006      	movs	r0, #6
 8002b66:	f011 fe63 	bl	8014830 <pifTaskManager_Add>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4a2e      	ldr	r2, [pc, #184]	; (8002c28 <main+0x5d4>)
 8002b6e:	63d3      	str	r3, [r2, #60]	; 0x3c
        if (!sensor_set.baro.p_b_task) FAIL;
 8002b70:	4b2d      	ldr	r3, [pc, #180]	; (8002c28 <main+0x5d4>)
 8002b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d030      	beq.n	8002bda <main+0x586>
    }
#endif

#ifdef GPS
    g_task_gps = pifTaskManager_Add(TM_NEED, 0, taskGpsNewData, NULL, FALSE);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	4a2c      	ldr	r2, [pc, #176]	; (8002c30 <main+0x5dc>)
 8002b80:	2100      	movs	r1, #0
 8002b82:	2006      	movs	r0, #6
 8002b84:	f011 fe54 	bl	8014830 <pifTaskManager_Add>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4a2a      	ldr	r2, [pc, #168]	; (8002c34 <main+0x5e0>)
 8002b8c:	6013      	str	r3, [r2, #0]
    if (!g_task_gps) FAIL;
 8002b8e:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <main+0x5e0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d023      	beq.n	8002bde <main+0x58a>
#endif

    if (!pifTaskManager_Add(TM_PERIOD_MS, 50, taskLedState, NULL, TRUE)) FAIL;									// 50ms
 8002b96:	2301      	movs	r3, #1
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	4a26      	ldr	r2, [pc, #152]	; (8002c38 <main+0x5e4>)
 8002b9e:	2132      	movs	r1, #50	; 0x32
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f011 fe45 	bl	8014830 <pifTaskManager_Add>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01a      	beq.n	8002be2 <main+0x58e>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pifTaskManager_Loop();
 8002bac:	f011 fee6 	bl	801497c <pifTaskManager_Loop>
 8002bb0:	e7fc      	b.n	8002bac <main+0x558>
    if (!pifTaskManager_Init(20)) FAIL;
 8002bb2:	bf00      	nop
 8002bb4:	e016      	b.n	8002be4 <main+0x590>
    if (!pifTimerManager_Init(&g_timer_1ms, PIF_ID_AUTO, 1000, 3)) FAIL;		        // 1000us
 8002bb6:	bf00      	nop
 8002bb8:	e014      	b.n	8002be4 <main+0x590>
    if (!buzzerInit()) FAIL;
 8002bba:	bf00      	nop
 8002bbc:	e012      	b.n	8002be4 <main+0x590>
    if (!pifI2cPort_Init(&g_i2c_port, PIF_ID_AUTO, 5, EEPROM_PAGE_SIZE)) FAIL;
 8002bbe:	bf00      	nop
 8002bc0:	e010      	b.n	8002be4 <main+0x590>
    if (!initEEPROM()) FAIL;
 8002bc2:	bf00      	nop
 8002bc4:	e00e      	b.n	8002be4 <main+0x590>
    if (!checkFirstTime(false)) FAIL;
 8002bc6:	bf00      	nop
 8002bc8:	e00c      	b.n	8002be4 <main+0x590>
    if (!g_task_compute_rc) FAIL;
 8002bca:	bf00      	nop
 8002bcc:	e00a      	b.n	8002be4 <main+0x590>
    if (!pifTaskManager_Add(TM_PERIOD_MS, 1, taskLoop, NULL, TRUE)) FAIL;         								// 1ms
 8002bce:	bf00      	nop
 8002bd0:	e008      	b.n	8002be4 <main+0x590>
    if (!g_task_compute_imu) FAIL;
 8002bd2:	bf00      	nop
 8002bd4:	e006      	b.n	8002be4 <main+0x590>
        if (!sensor_set.mag.p_m_task) FAIL;
 8002bd6:	bf00      	nop
 8002bd8:	e004      	b.n	8002be4 <main+0x590>
        if (!sensor_set.baro.p_b_task) FAIL;
 8002bda:	bf00      	nop
 8002bdc:	e002      	b.n	8002be4 <main+0x590>
    if (!g_task_gps) FAIL;
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <main+0x590>
    if (!pifTaskManager_Add(TM_PERIOD_MS, 50, taskLedState, NULL, TRUE)) FAIL;									// 50ms
 8002be2:	bf00      	nop
fail:
#ifdef __PIF_DEBUG__
	pifLog_Printf(LT_ERROR, "Error=%Xh Line=%u", pif_error, line);
	pifLog_SendAndExit();
#endif
  return -1;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
  /* USER CODE END 3 */
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20001660 	.word	0x20001660
 8002bf4:	200016b8 	.word	0x200016b8
 8002bf8:	0800c859 	.word	0x0800c859
 8002bfc:	200007ac 	.word	0x200007ac
 8002c00:	080018f1 	.word	0x080018f1
 8002c04:	200006f4 	.word	0x200006f4
 8002c08:	200019b4 	.word	0x200019b4
 8002c0c:	200019b8 	.word	0x200019b8
 8002c10:	200019b6 	.word	0x200019b6
 8002c14:	20001628 	.word	0x20001628
 8002c18:	0800dc51 	.word	0x0800dc51
 8002c1c:	0800dcb9 	.word	0x0800dcb9
 8002c20:	20001824 	.word	0x20001824
 8002c24:	0800efdd 	.word	0x0800efdd
 8002c28:	200019c8 	.word	0x200019c8
 8002c2c:	0800a621 	.word	0x0800a621
 8002c30:	0800869d 	.word	0x0800869d
 8002c34:	2000182c 	.word	0x2000182c
 8002c38:	0800c5a1 	.word	0x0800c5a1

08002c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b094      	sub	sp, #80	; 0x50
 8002c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c42:	f107 0320 	add.w	r3, r7, #32
 8002c46:	2230      	movs	r2, #48	; 0x30
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f020 fb1e 	bl	802328c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c50:	f107 030c 	add.w	r3, r7, #12
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <SystemClock_Config+0xcc>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <SystemClock_Config+0xcc>)
 8002c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <SystemClock_Config+0xcc>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <SystemClock_Config+0xd0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <SystemClock_Config+0xd0>)
 8002c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <SystemClock_Config+0xd0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 13;
 8002ca0:	230d      	movs	r3, #13
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002cac:	2310      	movs	r3, #16
 8002cae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002cb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002cb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002cba:	2304      	movs	r3, #4
 8002cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cbe:	f107 0320 	add.w	r3, r7, #32
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f01d fc12 	bl	80204ec <HAL_RCC_OscConfig>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002cce:	f000 fb31 	bl	8003334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cd2:	230f      	movs	r3, #15
 8002cd4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	2102      	movs	r1, #2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f01d fe74 	bl	80209dc <HAL_RCC_ClockConfig>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002cfa:	f000 fb1b 	bl	8003334 <Error_Handler>
  }
}
 8002cfe:	bf00      	nop
 8002d00:	3750      	adds	r7, #80	; 0x50
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40007000 	.word	0x40007000

08002d10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d16:	463b      	mov	r3, r7
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d22:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002d24:	4a36      	ldr	r2, [pc, #216]	; (8002e00 <MX_ADC1_Init+0xf0>)
 8002d26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d28:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002d2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d30:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002d36:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d42:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d4a:	4b2c      	ldr	r3, [pc, #176]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d50:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002d52:	4a2c      	ldr	r2, [pc, #176]	; (8002e04 <MX_ADC1_Init+0xf4>)
 8002d54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d56:	4b29      	ldr	r3, [pc, #164]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002d5c:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002d5e:	2204      	movs	r2, #4
 8002d60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002d62:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d6a:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d70:	4822      	ldr	r0, [pc, #136]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002d72:	f019 f899 	bl	801bea8 <HAL_ADC_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002d7c:	f000 fada 	bl	8003334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002d80:	2306      	movs	r3, #6
 8002d82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d84:	2301      	movs	r3, #1
 8002d86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d8c:	463b      	mov	r3, r7
 8002d8e:	4619      	mov	r1, r3
 8002d90:	481a      	ldr	r0, [pc, #104]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002d92:	f019 f9db 	bl	801c14c <HAL_ADC_ConfigChannel>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002d9c:	f000 faca 	bl	8003334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002da0:	2309      	movs	r3, #9
 8002da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002da4:	2302      	movs	r3, #2
 8002da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002da8:	463b      	mov	r3, r7
 8002daa:	4619      	mov	r1, r3
 8002dac:	4813      	ldr	r0, [pc, #76]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002dae:	f019 f9cd 	bl	801c14c <HAL_ADC_ConfigChannel>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002db8:	f000 fabc 	bl	8003334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002dbc:	2307      	movs	r3, #7
 8002dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dc4:	463b      	mov	r3, r7
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	480c      	ldr	r0, [pc, #48]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002dca:	f019 f9bf 	bl	801c14c <HAL_ADC_ConfigChannel>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002dd4:	f000 faae 	bl	8003334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002dd8:	230c      	movs	r3, #12
 8002dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002ddc:	2304      	movs	r3, #4
 8002dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002de0:	463b      	mov	r3, r7
 8002de2:	4619      	mov	r1, r3
 8002de4:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_ADC1_Init+0xec>)
 8002de6:	f019 f9b1 	bl	801c14c <HAL_ADC_ConfigChannel>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002df0:	f000 faa0 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	200003dc 	.word	0x200003dc
 8002e00:	40012000 	.word	0x40012000
 8002e04:	0f000001 	.word	0x0f000001

08002e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e0c:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <MX_I2C1_Init+0x50>)
 8002e0e:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <MX_I2C1_Init+0x54>)
 8002e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <MX_I2C1_Init+0x50>)
 8002e14:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <MX_I2C1_Init+0x58>)
 8002e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <MX_I2C1_Init+0x50>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <MX_I2C1_Init+0x50>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <MX_I2C1_Init+0x50>)
 8002e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <MX_I2C1_Init+0x50>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <MX_I2C1_Init+0x50>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e38:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <MX_I2C1_Init+0x50>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <MX_I2C1_Init+0x50>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e44:	4804      	ldr	r0, [pc, #16]	; (8002e58 <MX_I2C1_Init+0x50>)
 8002e46:	f01a fc2b 	bl	801d6a0 <HAL_I2C_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e50:	f000 fa70 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000484 	.word	0x20000484
 8002e5c:	40005400 	.word	0x40005400
 8002e60:	00061a80 	.word	0x00061a80

08002e64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e6a:	f107 0308 	add.w	r3, r7, #8
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e78:	463b      	mov	r3, r7
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e80:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <MX_TIM2_Init+0x94>)
 8002e82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <MX_TIM2_Init+0x94>)
 8002e8a:	2253      	movs	r2, #83	; 0x53
 8002e8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <MX_TIM2_Init+0x94>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002e94:	4b18      	ldr	r3, [pc, #96]	; (8002ef8 <MX_TIM2_Init+0x94>)
 8002e96:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e9c:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <MX_TIM2_Init+0x94>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <MX_TIM2_Init+0x94>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ea8:	4813      	ldr	r0, [pc, #76]	; (8002ef8 <MX_TIM2_Init+0x94>)
 8002eaa:	f01d ffb7 	bl	8020e1c <HAL_TIM_Base_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002eb4:	f000 fa3e 	bl	8003334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ebe:	f107 0308 	add.w	r3, r7, #8
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	480c      	ldr	r0, [pc, #48]	; (8002ef8 <MX_TIM2_Init+0x94>)
 8002ec6:	f01e fbe5 	bl	8021694 <HAL_TIM_ConfigClockSource>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002ed0:	f000 fa30 	bl	8003334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002edc:	463b      	mov	r3, r7
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4805      	ldr	r0, [pc, #20]	; (8002ef8 <MX_TIM2_Init+0x94>)
 8002ee2:	f01e ff9d 	bl	8021e20 <HAL_TIMEx_MasterConfigSynchronization>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002eec:	f000 fa22 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ef0:	bf00      	nop
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000598 	.word	0x20000598

08002efc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08e      	sub	sp, #56	; 0x38
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f10:	f107 0320 	add.w	r3, r7, #32
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]
 8002f28:	615a      	str	r2, [r3, #20]
 8002f2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f2c:	4b40      	ldr	r3, [pc, #256]	; (8003030 <MX_TIM3_Init+0x134>)
 8002f2e:	4a41      	ldr	r2, [pc, #260]	; (8003034 <MX_TIM3_Init+0x138>)
 8002f30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002f32:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <MX_TIM3_Init+0x134>)
 8002f34:	2253      	movs	r2, #83	; 0x53
 8002f36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f38:	4b3d      	ldr	r3, [pc, #244]	; (8003030 <MX_TIM3_Init+0x134>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 8002f3e:	4b3c      	ldr	r3, [pc, #240]	; (8003030 <MX_TIM3_Init+0x134>)
 8002f40:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002f44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f46:	4b3a      	ldr	r3, [pc, #232]	; (8003030 <MX_TIM3_Init+0x134>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f4c:	4b38      	ldr	r3, [pc, #224]	; (8003030 <MX_TIM3_Init+0x134>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f52:	4837      	ldr	r0, [pc, #220]	; (8003030 <MX_TIM3_Init+0x134>)
 8002f54:	f01d ff62 	bl	8020e1c <HAL_TIM_Base_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002f5e:	f000 f9e9 	bl	8003334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4830      	ldr	r0, [pc, #192]	; (8003030 <MX_TIM3_Init+0x134>)
 8002f70:	f01e fb90 	bl	8021694 <HAL_TIM_ConfigClockSource>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002f7a:	f000 f9db 	bl	8003334 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f7e:	482c      	ldr	r0, [pc, #176]	; (8003030 <MX_TIM3_Init+0x134>)
 8002f80:	f01d ff9b 	bl	8020eba <HAL_TIM_PWM_Init>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002f8a:	f000 f9d3 	bl	8003334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f96:	f107 0320 	add.w	r3, r7, #32
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4824      	ldr	r0, [pc, #144]	; (8003030 <MX_TIM3_Init+0x134>)
 8002f9e:	f01e ff3f 	bl	8021e20 <HAL_TIMEx_MasterConfigSynchronization>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002fa8:	f000 f9c4 	bl	8003334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fac:	2360      	movs	r3, #96	; 0x60
 8002fae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	481a      	ldr	r0, [pc, #104]	; (8003030 <MX_TIM3_Init+0x134>)
 8002fc6:	f01e faa3 	bl	8021510 <HAL_TIM_PWM_ConfigChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002fd0:	f000 f9b0 	bl	8003334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4815      	ldr	r0, [pc, #84]	; (8003030 <MX_TIM3_Init+0x134>)
 8002fdc:	f01e fa98 	bl	8021510 <HAL_TIM_PWM_ConfigChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002fe6:	f000 f9a5 	bl	8003334 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	480e      	ldr	r0, [pc, #56]	; (8003030 <MX_TIM3_Init+0x134>)
 8002ff6:	f01e fa8b 	bl	8021510 <HAL_TIM_PWM_ConfigChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8003000:	f000 f998 	bl	8003334 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 8003004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003008:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	220c      	movs	r2, #12
 800300e:	4619      	mov	r1, r3
 8003010:	4807      	ldr	r0, [pc, #28]	; (8003030 <MX_TIM3_Init+0x134>)
 8003012:	f01e fa7d 	bl	8021510 <HAL_TIM_PWM_ConfigChannel>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 800301c:	f000 f98a 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003020:	4803      	ldr	r0, [pc, #12]	; (8003030 <MX_TIM3_Init+0x134>)
 8003022:	f000 fb5d 	bl	80036e0 <HAL_TIM_MspPostInit>

}
 8003026:	bf00      	nop
 8003028:	3738      	adds	r7, #56	; 0x38
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	200005e0 	.word	0x200005e0
 8003034:	40000400 	.word	0x40000400

08003038 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <MX_USART1_UART_Init+0x4c>)
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <MX_USART1_UART_Init+0x50>)
 8003040:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <MX_USART1_UART_Init+0x4c>)
 8003044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003048:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <MX_USART1_UART_Init+0x4c>)
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <MX_USART1_UART_Init+0x4c>)
 8003052:	2200      	movs	r2, #0
 8003054:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <MX_USART1_UART_Init+0x4c>)
 8003058:	2200      	movs	r2, #0
 800305a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <MX_USART1_UART_Init+0x4c>)
 800305e:	220c      	movs	r2, #12
 8003060:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <MX_USART1_UART_Init+0x4c>)
 8003064:	2200      	movs	r2, #0
 8003066:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <MX_USART1_UART_Init+0x4c>)
 800306a:	2200      	movs	r2, #0
 800306c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800306e:	4805      	ldr	r0, [pc, #20]	; (8003084 <MX_USART1_UART_Init+0x4c>)
 8003070:	f01e ff58 	bl	8021f24 <HAL_UART_Init>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800307a:	f000 f95b 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000628 	.word	0x20000628
 8003088:	40011000 	.word	0x40011000

0800308c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 8003092:	4a12      	ldr	r2, [pc, #72]	; (80030dc <MX_USART2_UART_Init+0x50>)
 8003094:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 8003098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800309c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800309e:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030b2:	220c      	movs	r2, #12
 80030b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030be:	2200      	movs	r2, #0
 80030c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030c2:	4805      	ldr	r0, [pc, #20]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030c4:	f01e ff2e 	bl	8021f24 <HAL_UART_Init>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030ce:	f000 f931 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	2000066c 	.word	0x2000066c
 80030dc:	40004400 	.word	0x40004400

080030e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <MX_USART6_UART_Init+0x4c>)
 80030e6:	4a12      	ldr	r2, [pc, #72]	; (8003130 <MX_USART6_UART_Init+0x50>)
 80030e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <MX_USART6_UART_Init+0x4c>)
 80030ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80030f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80030f2:	4b0e      	ldr	r3, [pc, #56]	; (800312c <MX_USART6_UART_Init+0x4c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <MX_USART6_UART_Init+0x4c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80030fe:	4b0b      	ldr	r3, [pc, #44]	; (800312c <MX_USART6_UART_Init+0x4c>)
 8003100:	2200      	movs	r2, #0
 8003102:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <MX_USART6_UART_Init+0x4c>)
 8003106:	220c      	movs	r2, #12
 8003108:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800310a:	4b08      	ldr	r3, [pc, #32]	; (800312c <MX_USART6_UART_Init+0x4c>)
 800310c:	2200      	movs	r2, #0
 800310e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <MX_USART6_UART_Init+0x4c>)
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003116:	4805      	ldr	r0, [pc, #20]	; (800312c <MX_USART6_UART_Init+0x4c>)
 8003118:	f01e ff04 	bl	8021f24 <HAL_UART_Init>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003122:	f000 f907 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	200006b0 	.word	0x200006b0
 8003130:	40011400 	.word	0x40011400

08003134 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <MX_DMA_Init+0x78>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <MX_DMA_Init+0x78>)
 8003144:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <MX_DMA_Init+0x78>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003152:	607b      	str	r3, [r7, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	4b14      	ldr	r3, [pc, #80]	; (80031ac <MX_DMA_Init+0x78>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	4a13      	ldr	r2, [pc, #76]	; (80031ac <MX_DMA_Init+0x78>)
 8003160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003164:	6313      	str	r3, [r2, #48]	; 0x30
 8003166:	4b11      	ldr	r3, [pc, #68]	; (80031ac <MX_DMA_Init+0x78>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2100      	movs	r1, #0
 8003176:	200b      	movs	r0, #11
 8003178:	f019 fb97 	bl	801c8aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800317c:	200b      	movs	r0, #11
 800317e:	f019 fbb0 	bl	801c8e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	2100      	movs	r1, #0
 8003186:	200c      	movs	r0, #12
 8003188:	f019 fb8f 	bl	801c8aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800318c:	200c      	movs	r0, #12
 800318e:	f019 fba8 	bl	801c8e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2100      	movs	r1, #0
 8003196:	2038      	movs	r0, #56	; 0x38
 8003198:	f019 fb87 	bl	801c8aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800319c:	2038      	movs	r0, #56	; 0x38
 800319e:	f019 fba0 	bl	801c8e2 <HAL_NVIC_EnableIRQ>

}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800

080031b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	; 0x28
 80031b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b6:	f107 0314 	add.w	r3, r7, #20
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	4b56      	ldr	r3, [pc, #344]	; (8003324 <MX_GPIO_Init+0x174>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a55      	ldr	r2, [pc, #340]	; (8003324 <MX_GPIO_Init+0x174>)
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
 80031d6:	4b53      	ldr	r3, [pc, #332]	; (8003324 <MX_GPIO_Init+0x174>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	4b4f      	ldr	r3, [pc, #316]	; (8003324 <MX_GPIO_Init+0x174>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4a4e      	ldr	r2, [pc, #312]	; (8003324 <MX_GPIO_Init+0x174>)
 80031ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f0:	6313      	str	r3, [r2, #48]	; 0x30
 80031f2:	4b4c      	ldr	r3, [pc, #304]	; (8003324 <MX_GPIO_Init+0x174>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	4b48      	ldr	r3, [pc, #288]	; (8003324 <MX_GPIO_Init+0x174>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a47      	ldr	r2, [pc, #284]	; (8003324 <MX_GPIO_Init+0x174>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b45      	ldr	r3, [pc, #276]	; (8003324 <MX_GPIO_Init+0x174>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	4b41      	ldr	r3, [pc, #260]	; (8003324 <MX_GPIO_Init+0x174>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a40      	ldr	r2, [pc, #256]	; (8003324 <MX_GPIO_Init+0x174>)
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4b3e      	ldr	r3, [pc, #248]	; (8003324 <MX_GPIO_Init+0x174>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	607b      	str	r3, [r7, #4]
 8003234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8003236:	2200      	movs	r2, #0
 8003238:	2131      	movs	r1, #49	; 0x31
 800323a:	483b      	ldr	r0, [pc, #236]	; (8003328 <MX_GPIO_Init+0x178>)
 800323c:	f01a f9fe 	bl	801d63c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003240:	2200      	movs	r2, #0
 8003242:	2120      	movs	r1, #32
 8003244:	4839      	ldr	r0, [pc, #228]	; (800332c <MX_GPIO_Init+0x17c>)
 8003246:	f01a f9f9 	bl	801d63c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800324a:	2200      	movs	r2, #0
 800324c:	2104      	movs	r1, #4
 800324e:	4838      	ldr	r0, [pc, #224]	; (8003330 <MX_GPIO_Init+0x180>)
 8003250:	f01a f9f4 	bl	801d63c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800325a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800325e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	4619      	mov	r1, r3
 800326a:	482f      	ldr	r0, [pc, #188]	; (8003328 <MX_GPIO_Init+0x178>)
 800326c:	f019 ff7e 	bl	801d16c <HAL_GPIO_Init>

  /*Configure GPIO pins : SONAR_TRIGGER_Pin LD1_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin;
 8003270:	2331      	movs	r3, #49	; 0x31
 8003272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003274:	2301      	movs	r3, #1
 8003276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327c:	2300      	movs	r3, #0
 800327e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003280:	f107 0314 	add.w	r3, r7, #20
 8003284:	4619      	mov	r1, r3
 8003286:	4828      	ldr	r0, [pc, #160]	; (8003328 <MX_GPIO_Init+0x178>)
 8003288:	f019 ff70 	bl	801d16c <HAL_GPIO_Init>

  /*Configure GPIO pin : SONAR_ECHO_Pin */
  GPIO_InitStruct.Pin = SONAR_ECHO_Pin;
 800328c:	2302      	movs	r3, #2
 800328e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003290:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SONAR_ECHO_GPIO_Port, &GPIO_InitStruct);
 800329a:	f107 0314 	add.w	r3, r7, #20
 800329e:	4619      	mov	r1, r3
 80032a0:	4821      	ldr	r0, [pc, #132]	; (8003328 <MX_GPIO_Init+0x178>)
 80032a2:	f019 ff63 	bl	801d16c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80032a6:	2320      	movs	r3, #32
 80032a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032aa:	2301      	movs	r3, #1
 80032ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	2300      	movs	r3, #0
 80032b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80032b6:	f107 0314 	add.w	r3, r7, #20
 80032ba:	4619      	mov	r1, r3
 80032bc:	481b      	ldr	r0, [pc, #108]	; (800332c <MX_GPIO_Init+0x17c>)
 80032be:	f019 ff55 	bl	801d16c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80032c2:	2304      	movs	r3, #4
 80032c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c6:	2301      	movs	r3, #1
 80032c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ce:	2300      	movs	r3, #0
 80032d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	4619      	mov	r1, r3
 80032d8:	4815      	ldr	r0, [pc, #84]	; (8003330 <MX_GPIO_Init+0x180>)
 80032da:	f019 ff47 	bl	801d16c <HAL_GPIO_Init>

  /*Configure GPIO pin : RC_PPM_Pin */
  GPIO_InitStruct.Pin = RC_PPM_Pin;
 80032de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80032e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC_PPM_GPIO_Port, &GPIO_InitStruct);
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	4619      	mov	r1, r3
 80032f4:	480c      	ldr	r0, [pc, #48]	; (8003328 <MX_GPIO_Init+0x178>)
 80032f6:	f019 ff39 	bl	801d16c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	2100      	movs	r1, #0
 80032fe:	2007      	movs	r0, #7
 8003300:	f019 fad3 	bl	801c8aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003304:	2007      	movs	r0, #7
 8003306:	f019 faec 	bl	801c8e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800330a:	2200      	movs	r2, #0
 800330c:	2100      	movs	r1, #0
 800330e:	2028      	movs	r0, #40	; 0x28
 8003310:	f019 facb 	bl	801c8aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003314:	2028      	movs	r0, #40	; 0x28
 8003316:	f019 fae4 	bl	801c8e2 <HAL_NVIC_EnableIRQ>

}
 800331a:	bf00      	nop
 800331c:	3728      	adds	r7, #40	; 0x28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800
 8003328:	40020800 	.word	0x40020800
 800332c:	40020000 	.word	0x40020000
 8003330:	40020400 	.word	0x40020400

08003334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003338:	b672      	cpsid	i
}
 800333a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800333c:	e7fe      	b.n	800333c <Error_Handler+0x8>
	...

08003340 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_MspInit+0x4c>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	4a0f      	ldr	r2, [pc, #60]	; (800338c <HAL_MspInit+0x4c>)
 8003350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003354:	6453      	str	r3, [r2, #68]	; 0x44
 8003356:	4b0d      	ldr	r3, [pc, #52]	; (800338c <HAL_MspInit+0x4c>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335e:	607b      	str	r3, [r7, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_MspInit+0x4c>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a08      	ldr	r2, [pc, #32]	; (800338c <HAL_MspInit+0x4c>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_MspInit+0x4c>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800337e:	2007      	movs	r0, #7
 8003380:	f019 fa88 	bl	801c894 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800

08003390 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08c      	sub	sp, #48	; 0x30
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003398:	f107 031c 	add.w	r3, r7, #28
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a49      	ldr	r2, [pc, #292]	; (80034d4 <HAL_ADC_MspInit+0x144>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	f040 808c 	bne.w	80034cc <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <HAL_ADC_MspInit+0x148>)
 80033ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033bc:	4a46      	ldr	r2, [pc, #280]	; (80034d8 <HAL_ADC_MspInit+0x148>)
 80033be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c2:	6453      	str	r3, [r2, #68]	; 0x44
 80033c4:	4b44      	ldr	r3, [pc, #272]	; (80034d8 <HAL_ADC_MspInit+0x148>)
 80033c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	4b40      	ldr	r3, [pc, #256]	; (80034d8 <HAL_ADC_MspInit+0x148>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	4a3f      	ldr	r2, [pc, #252]	; (80034d8 <HAL_ADC_MspInit+0x148>)
 80033da:	f043 0304 	orr.w	r3, r3, #4
 80033de:	6313      	str	r3, [r2, #48]	; 0x30
 80033e0:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <HAL_ADC_MspInit+0x148>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	4b39      	ldr	r3, [pc, #228]	; (80034d8 <HAL_ADC_MspInit+0x148>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	4a38      	ldr	r2, [pc, #224]	; (80034d8 <HAL_ADC_MspInit+0x148>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6313      	str	r3, [r2, #48]	; 0x30
 80033fc:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <HAL_ADC_MspInit+0x148>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	4b32      	ldr	r3, [pc, #200]	; (80034d8 <HAL_ADC_MspInit+0x148>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4a31      	ldr	r2, [pc, #196]	; (80034d8 <HAL_ADC_MspInit+0x148>)
 8003412:	f043 0302 	orr.w	r3, r3, #2
 8003416:	6313      	str	r3, [r2, #48]	; 0x30
 8003418:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <HAL_ADC_MspInit+0x148>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RSSI_Pin;
 8003424:	2304      	movs	r3, #4
 8003426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003428:	2303      	movs	r3, #3
 800342a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 8003430:	f107 031c 	add.w	r3, r7, #28
 8003434:	4619      	mov	r1, r3
 8003436:	4829      	ldr	r0, [pc, #164]	; (80034dc <HAL_ADC_MspInit+0x14c>)
 8003438:	f019 fe98 	bl	801d16c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_IN_Pin|CURRENT_IN_Pin;
 800343c:	23c0      	movs	r3, #192	; 0xc0
 800343e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003440:	2303      	movs	r3, #3
 8003442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003448:	f107 031c 	add.w	r3, r7, #28
 800344c:	4619      	mov	r1, r3
 800344e:	4824      	ldr	r0, [pc, #144]	; (80034e0 <HAL_ADC_MspInit+0x150>)
 8003450:	f019 fe8c 	bl	801d16c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXTERNAL_PAD_Pin;
 8003454:	2302      	movs	r3, #2
 8003456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003458:	2303      	movs	r3, #3
 800345a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXTERNAL_PAD_GPIO_Port, &GPIO_InitStruct);
 8003460:	f107 031c 	add.w	r3, r7, #28
 8003464:	4619      	mov	r1, r3
 8003466:	481f      	ldr	r0, [pc, #124]	; (80034e4 <HAL_ADC_MspInit+0x154>)
 8003468:	f019 fe80 	bl	801d16c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800346c:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <HAL_ADC_MspInit+0x158>)
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <HAL_ADC_MspInit+0x15c>)
 8003470:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_ADC_MspInit+0x158>)
 8003474:	2200      	movs	r2, #0
 8003476:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003478:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <HAL_ADC_MspInit+0x158>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800347e:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <HAL_ADC_MspInit+0x158>)
 8003480:	2200      	movs	r2, #0
 8003482:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003484:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <HAL_ADC_MspInit+0x158>)
 8003486:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800348a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800348c:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <HAL_ADC_MspInit+0x158>)
 800348e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003492:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <HAL_ADC_MspInit+0x158>)
 8003496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800349a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800349c:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_ADC_MspInit+0x158>)
 800349e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_ADC_MspInit+0x158>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <HAL_ADC_MspInit+0x158>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80034b0:	480d      	ldr	r0, [pc, #52]	; (80034e8 <HAL_ADC_MspInit+0x158>)
 80034b2:	f019 fa3f 	bl	801c934 <HAL_DMA_Init>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80034bc:	f7ff ff3a 	bl	8003334 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <HAL_ADC_MspInit+0x158>)
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38
 80034c6:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <HAL_ADC_MspInit+0x158>)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034cc:	bf00      	nop
 80034ce:	3730      	adds	r7, #48	; 0x30
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40012000 	.word	0x40012000
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40020800 	.word	0x40020800
 80034e0:	40020000 	.word	0x40020000
 80034e4:	40020400 	.word	0x40020400
 80034e8:	20000424 	.word	0x20000424
 80034ec:	40026410 	.word	0x40026410

080034f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a4f      	ldr	r2, [pc, #316]	; (800364c <HAL_I2C_MspInit+0x15c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	f040 8097 	bne.w	8003642 <HAL_I2C_MspInit+0x152>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003514:	2300      	movs	r3, #0
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	4b4d      	ldr	r3, [pc, #308]	; (8003650 <HAL_I2C_MspInit+0x160>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	4a4c      	ldr	r2, [pc, #304]	; (8003650 <HAL_I2C_MspInit+0x160>)
 800351e:	f043 0302 	orr.w	r3, r3, #2
 8003522:	6313      	str	r3, [r2, #48]	; 0x30
 8003524:	4b4a      	ldr	r3, [pc, #296]	; (8003650 <HAL_I2C_MspInit+0x160>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003530:	23c0      	movs	r3, #192	; 0xc0
 8003532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003534:	2312      	movs	r3, #18
 8003536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353c:	2303      	movs	r3, #3
 800353e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003540:	2304      	movs	r3, #4
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003544:	f107 0314 	add.w	r3, r7, #20
 8003548:	4619      	mov	r1, r3
 800354a:	4842      	ldr	r0, [pc, #264]	; (8003654 <HAL_I2C_MspInit+0x164>)
 800354c:	f019 fe0e 	bl	801d16c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	4b3e      	ldr	r3, [pc, #248]	; (8003650 <HAL_I2C_MspInit+0x160>)
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	4a3d      	ldr	r2, [pc, #244]	; (8003650 <HAL_I2C_MspInit+0x160>)
 800355a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800355e:	6413      	str	r3, [r2, #64]	; 0x40
 8003560:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <HAL_I2C_MspInit+0x160>)
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800356c:	4b3a      	ldr	r3, [pc, #232]	; (8003658 <HAL_I2C_MspInit+0x168>)
 800356e:	4a3b      	ldr	r2, [pc, #236]	; (800365c <HAL_I2C_MspInit+0x16c>)
 8003570:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003572:	4b39      	ldr	r3, [pc, #228]	; (8003658 <HAL_I2C_MspInit+0x168>)
 8003574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003578:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <HAL_I2C_MspInit+0x168>)
 800357c:	2200      	movs	r2, #0
 800357e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003580:	4b35      	ldr	r3, [pc, #212]	; (8003658 <HAL_I2C_MspInit+0x168>)
 8003582:	2200      	movs	r2, #0
 8003584:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003586:	4b34      	ldr	r3, [pc, #208]	; (8003658 <HAL_I2C_MspInit+0x168>)
 8003588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800358c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800358e:	4b32      	ldr	r3, [pc, #200]	; (8003658 <HAL_I2C_MspInit+0x168>)
 8003590:	2200      	movs	r2, #0
 8003592:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003594:	4b30      	ldr	r3, [pc, #192]	; (8003658 <HAL_I2C_MspInit+0x168>)
 8003596:	2200      	movs	r2, #0
 8003598:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800359a:	4b2f      	ldr	r3, [pc, #188]	; (8003658 <HAL_I2C_MspInit+0x168>)
 800359c:	2200      	movs	r2, #0
 800359e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035a0:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <HAL_I2C_MspInit+0x168>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035a6:	4b2c      	ldr	r3, [pc, #176]	; (8003658 <HAL_I2C_MspInit+0x168>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80035ac:	482a      	ldr	r0, [pc, #168]	; (8003658 <HAL_I2C_MspInit+0x168>)
 80035ae:	f019 f9c1 	bl	801c934 <HAL_DMA_Init>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80035b8:	f7ff febc 	bl	8003334 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a26      	ldr	r2, [pc, #152]	; (8003658 <HAL_I2C_MspInit+0x168>)
 80035c0:	639a      	str	r2, [r3, #56]	; 0x38
 80035c2:	4a25      	ldr	r2, [pc, #148]	; (8003658 <HAL_I2C_MspInit+0x168>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80035c8:	4b25      	ldr	r3, [pc, #148]	; (8003660 <HAL_I2C_MspInit+0x170>)
 80035ca:	4a26      	ldr	r2, [pc, #152]	; (8003664 <HAL_I2C_MspInit+0x174>)
 80035cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80035ce:	4b24      	ldr	r3, [pc, #144]	; (8003660 <HAL_I2C_MspInit+0x170>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035d4:	4b22      	ldr	r3, [pc, #136]	; (8003660 <HAL_I2C_MspInit+0x170>)
 80035d6:	2240      	movs	r2, #64	; 0x40
 80035d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035da:	4b21      	ldr	r3, [pc, #132]	; (8003660 <HAL_I2C_MspInit+0x170>)
 80035dc:	2200      	movs	r2, #0
 80035de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035e0:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <HAL_I2C_MspInit+0x170>)
 80035e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035e6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035e8:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <HAL_I2C_MspInit+0x170>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035ee:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <HAL_I2C_MspInit+0x170>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_I2C_MspInit+0x170>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035fa:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_I2C_MspInit+0x170>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003600:	4b17      	ldr	r3, [pc, #92]	; (8003660 <HAL_I2C_MspInit+0x170>)
 8003602:	2200      	movs	r2, #0
 8003604:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003606:	4816      	ldr	r0, [pc, #88]	; (8003660 <HAL_I2C_MspInit+0x170>)
 8003608:	f019 f994 	bl	801c934 <HAL_DMA_Init>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8003612:	f7ff fe8f 	bl	8003334 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a11      	ldr	r2, [pc, #68]	; (8003660 <HAL_I2C_MspInit+0x170>)
 800361a:	635a      	str	r2, [r3, #52]	; 0x34
 800361c:	4a10      	ldr	r2, [pc, #64]	; (8003660 <HAL_I2C_MspInit+0x170>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003622:	2200      	movs	r2, #0
 8003624:	2100      	movs	r1, #0
 8003626:	201f      	movs	r0, #31
 8003628:	f019 f93f 	bl	801c8aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800362c:	201f      	movs	r0, #31
 800362e:	f019 f958 	bl	801c8e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	2100      	movs	r1, #0
 8003636:	2020      	movs	r0, #32
 8003638:	f019 f937 	bl	801c8aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800363c:	2020      	movs	r0, #32
 800363e:	f019 f950 	bl	801c8e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003642:	bf00      	nop
 8003644:	3728      	adds	r7, #40	; 0x28
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40005400 	.word	0x40005400
 8003650:	40023800 	.word	0x40023800
 8003654:	40020400 	.word	0x40020400
 8003658:	200004d8 	.word	0x200004d8
 800365c:	40026010 	.word	0x40026010
 8003660:	20000538 	.word	0x20000538
 8003664:	40026028 	.word	0x40026028

08003668 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003678:	d10e      	bne.n	8003698 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <HAL_TIM_Base_MspInit+0x70>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	4a15      	ldr	r2, [pc, #84]	; (80036d8 <HAL_TIM_Base_MspInit+0x70>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6413      	str	r3, [r2, #64]	; 0x40
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <HAL_TIM_Base_MspInit+0x70>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003696:	e01a      	b.n	80036ce <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0f      	ldr	r2, [pc, #60]	; (80036dc <HAL_TIM_Base_MspInit+0x74>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d115      	bne.n	80036ce <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <HAL_TIM_Base_MspInit+0x70>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a0b      	ldr	r2, [pc, #44]	; (80036d8 <HAL_TIM_Base_MspInit+0x70>)
 80036ac:	f043 0302 	orr.w	r3, r3, #2
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
 80036b2:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_TIM_Base_MspInit+0x70>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80036be:	2200      	movs	r2, #0
 80036c0:	2100      	movs	r1, #0
 80036c2:	201d      	movs	r0, #29
 80036c4:	f019 f8f1 	bl	801c8aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036c8:	201d      	movs	r0, #29
 80036ca:	f019 f90a 	bl	801c8e2 <HAL_NVIC_EnableIRQ>
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40000400 	.word	0x40000400

080036e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e8:	f107 0314 	add.w	r3, r7, #20
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a21      	ldr	r2, [pc, #132]	; (8003784 <HAL_TIM_MspPostInit+0xa4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d13c      	bne.n	800377c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_TIM_MspPostInit+0xa8>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <HAL_TIM_MspPostInit+0xa8>)
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HAL_TIM_MspPostInit+0xa8>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	4b19      	ldr	r3, [pc, #100]	; (8003788 <HAL_TIM_MspPostInit+0xa8>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	4a18      	ldr	r2, [pc, #96]	; (8003788 <HAL_TIM_MspPostInit+0xa8>)
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	6313      	str	r3, [r2, #48]	; 0x30
 800372e:	4b16      	ldr	r3, [pc, #88]	; (8003788 <HAL_TIM_MspPostInit+0xa8>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800373a:	2301      	movs	r3, #1
 800373c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373e:	2302      	movs	r3, #2
 8003740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003746:	2300      	movs	r3, #0
 8003748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800374a:	2302      	movs	r3, #2
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374e:	f107 0314 	add.w	r3, r7, #20
 8003752:	4619      	mov	r1, r3
 8003754:	480d      	ldr	r0, [pc, #52]	; (800378c <HAL_TIM_MspPostInit+0xac>)
 8003756:	f019 fd09 	bl	801d16c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800375a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800375e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003760:	2302      	movs	r3, #2
 8003762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003768:	2300      	movs	r3, #0
 800376a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800376c:	2302      	movs	r3, #2
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	4619      	mov	r1, r3
 8003776:	4806      	ldr	r0, [pc, #24]	; (8003790 <HAL_TIM_MspPostInit+0xb0>)
 8003778:	f019 fcf8 	bl	801d16c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800377c:	bf00      	nop
 800377e:	3728      	adds	r7, #40	; 0x28
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40000400 	.word	0x40000400
 8003788:	40023800 	.word	0x40023800
 800378c:	40020400 	.word	0x40020400
 8003790:	40020800 	.word	0x40020800

08003794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08e      	sub	sp, #56	; 0x38
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800379c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	60da      	str	r2, [r3, #12]
 80037aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a58      	ldr	r2, [pc, #352]	; (8003914 <HAL_UART_MspInit+0x180>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d135      	bne.n	8003822 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	623b      	str	r3, [r7, #32]
 80037ba:	4b57      	ldr	r3, [pc, #348]	; (8003918 <HAL_UART_MspInit+0x184>)
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	4a56      	ldr	r2, [pc, #344]	; (8003918 <HAL_UART_MspInit+0x184>)
 80037c0:	f043 0310 	orr.w	r3, r3, #16
 80037c4:	6453      	str	r3, [r2, #68]	; 0x44
 80037c6:	4b54      	ldr	r3, [pc, #336]	; (8003918 <HAL_UART_MspInit+0x184>)
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	623b      	str	r3, [r7, #32]
 80037d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	4b50      	ldr	r3, [pc, #320]	; (8003918 <HAL_UART_MspInit+0x184>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	4a4f      	ldr	r2, [pc, #316]	; (8003918 <HAL_UART_MspInit+0x184>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6313      	str	r3, [r2, #48]	; 0x30
 80037e2:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <HAL_UART_MspInit+0x184>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	61fb      	str	r3, [r7, #28]
 80037ec:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f4:	2302      	movs	r3, #2
 80037f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fc:	2303      	movs	r3, #3
 80037fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003800:	2307      	movs	r3, #7
 8003802:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003808:	4619      	mov	r1, r3
 800380a:	4844      	ldr	r0, [pc, #272]	; (800391c <HAL_UART_MspInit+0x188>)
 800380c:	f019 fcae 	bl	801d16c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003810:	2200      	movs	r2, #0
 8003812:	2100      	movs	r1, #0
 8003814:	2025      	movs	r0, #37	; 0x25
 8003816:	f019 f848 	bl	801c8aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800381a:	2025      	movs	r0, #37	; 0x25
 800381c:	f019 f861 	bl	801c8e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003820:	e073      	b.n	800390a <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a3e      	ldr	r2, [pc, #248]	; (8003920 <HAL_UART_MspInit+0x18c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d134      	bne.n	8003896 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	4b39      	ldr	r3, [pc, #228]	; (8003918 <HAL_UART_MspInit+0x184>)
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	4a38      	ldr	r2, [pc, #224]	; (8003918 <HAL_UART_MspInit+0x184>)
 8003836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383a:	6413      	str	r3, [r2, #64]	; 0x40
 800383c:	4b36      	ldr	r3, [pc, #216]	; (8003918 <HAL_UART_MspInit+0x184>)
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	4b32      	ldr	r3, [pc, #200]	; (8003918 <HAL_UART_MspInit+0x184>)
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	4a31      	ldr	r2, [pc, #196]	; (8003918 <HAL_UART_MspInit+0x184>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6313      	str	r3, [r2, #48]	; 0x30
 8003858:	4b2f      	ldr	r3, [pc, #188]	; (8003918 <HAL_UART_MspInit+0x184>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003864:	230c      	movs	r3, #12
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003868:	2302      	movs	r3, #2
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003870:	2303      	movs	r3, #3
 8003872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003874:	2307      	movs	r3, #7
 8003876:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800387c:	4619      	mov	r1, r3
 800387e:	4827      	ldr	r0, [pc, #156]	; (800391c <HAL_UART_MspInit+0x188>)
 8003880:	f019 fc74 	bl	801d16c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003884:	2200      	movs	r2, #0
 8003886:	2100      	movs	r1, #0
 8003888:	2026      	movs	r0, #38	; 0x26
 800388a:	f019 f80e 	bl	801c8aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800388e:	2026      	movs	r0, #38	; 0x26
 8003890:	f019 f827 	bl	801c8e2 <HAL_NVIC_EnableIRQ>
}
 8003894:	e039      	b.n	800390a <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a22      	ldr	r2, [pc, #136]	; (8003924 <HAL_UART_MspInit+0x190>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d134      	bne.n	800390a <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 80038a0:	2300      	movs	r3, #0
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <HAL_UART_MspInit+0x184>)
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <HAL_UART_MspInit+0x184>)
 80038aa:	f043 0320 	orr.w	r3, r3, #32
 80038ae:	6453      	str	r3, [r2, #68]	; 0x44
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_UART_MspInit+0x184>)
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <HAL_UART_MspInit+0x184>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	4a14      	ldr	r2, [pc, #80]	; (8003918 <HAL_UART_MspInit+0x184>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6313      	str	r3, [r2, #48]	; 0x30
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <HAL_UART_MspInit+0x184>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80038d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038de:	2302      	movs	r3, #2
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e6:	2303      	movs	r3, #3
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80038ea:	2308      	movs	r3, #8
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f2:	4619      	mov	r1, r3
 80038f4:	4809      	ldr	r0, [pc, #36]	; (800391c <HAL_UART_MspInit+0x188>)
 80038f6:	f019 fc39 	bl	801d16c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80038fa:	2200      	movs	r2, #0
 80038fc:	2100      	movs	r1, #0
 80038fe:	2047      	movs	r0, #71	; 0x47
 8003900:	f018 ffd3 	bl	801c8aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003904:	2047      	movs	r0, #71	; 0x47
 8003906:	f018 ffec 	bl	801c8e2 <HAL_NVIC_EnableIRQ>
}
 800390a:	bf00      	nop
 800390c:	3738      	adds	r7, #56	; 0x38
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40011000 	.word	0x40011000
 8003918:	40023800 	.word	0x40023800
 800391c:	40020000 	.word	0x40020000
 8003920:	40004400 	.word	0x40004400
 8003924:	40011400 	.word	0x40011400

08003928 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <HAL_UART_MspDeInit+0x84>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d10e      	bne.n	8003958 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800393a:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_UART_MspDeInit+0x88>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	4a1c      	ldr	r2, [pc, #112]	; (80039b0 <HAL_UART_MspDeInit+0x88>)
 8003940:	f023 0310 	bic.w	r3, r3, #16
 8003944:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003946:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800394a:	481a      	ldr	r0, [pc, #104]	; (80039b4 <HAL_UART_MspDeInit+0x8c>)
 800394c:	f019 fd92 	bl	801d474 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003950:	2025      	movs	r0, #37	; 0x25
 8003952:	f018 ffd4 	bl	801c8fe <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8003956:	e025      	b.n	80039a4 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <HAL_UART_MspDeInit+0x90>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d10d      	bne.n	800397e <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003962:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <HAL_UART_MspDeInit+0x88>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a12      	ldr	r2, [pc, #72]	; (80039b0 <HAL_UART_MspDeInit+0x88>)
 8003968:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 800396e:	210c      	movs	r1, #12
 8003970:	4810      	ldr	r0, [pc, #64]	; (80039b4 <HAL_UART_MspDeInit+0x8c>)
 8003972:	f019 fd7f 	bl	801d474 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003976:	2026      	movs	r0, #38	; 0x26
 8003978:	f018 ffc1 	bl	801c8fe <HAL_NVIC_DisableIRQ>
}
 800397c:	e012      	b.n	80039a4 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART6)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a0e      	ldr	r2, [pc, #56]	; (80039bc <HAL_UART_MspDeInit+0x94>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d10d      	bne.n	80039a4 <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART6_CLK_DISABLE();
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_UART_MspDeInit+0x88>)
 800398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398c:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <HAL_UART_MspDeInit+0x88>)
 800398e:	f023 0320 	bic.w	r3, r3, #32
 8003992:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8003994:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003998:	4806      	ldr	r0, [pc, #24]	; (80039b4 <HAL_UART_MspDeInit+0x8c>)
 800399a:	f019 fd6b 	bl	801d474 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 800399e:	2047      	movs	r0, #71	; 0x47
 80039a0:	f018 ffad 	bl	801c8fe <HAL_NVIC_DisableIRQ>
}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40011000 	.word	0x40011000
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40020000 	.word	0x40020000
 80039b8:	40004400 	.word	0x40004400
 80039bc:	40011400 	.word	0x40011400

080039c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039c4:	e7fe      	b.n	80039c4 <NMI_Handler+0x4>

080039c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ca:	e7fe      	b.n	80039ca <HardFault_Handler+0x4>

080039cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039d0:	e7fe      	b.n	80039d0 <MemManage_Handler+0x4>

080039d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039d2:	b480      	push	{r7}
 80039d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039d6:	e7fe      	b.n	80039d6 <BusFault_Handler+0x4>

080039d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039dc:	e7fe      	b.n	80039dc <UsageFault_Handler+0x4>

080039de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  pif_sigTimer1ms();
 8003a0c:	f00d ff0c 	bl	8011828 <pif_sigTimer1ms>
  pifTimerManager_sigTick(&g_timer_1ms);
 8003a10:	4803      	ldr	r0, [pc, #12]	; (8003a20 <SysTick_Handler+0x18>)
 8003a12:	f011 fa94 	bl	8014f3e <pifTimerManager_sigTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a16:	f018 fa27 	bl	801be68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20001800 	.word	0x20001800

08003a24 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SONAR_ECHO_Pin);
 8003a28:	2002      	movs	r0, #2
 8003a2a:	f019 fe21 	bl	801d670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003a38:	4802      	ldr	r0, [pc, #8]	; (8003a44 <DMA1_Stream0_IRQHandler+0x10>)
 8003a3a:	f019 f913 	bl	801cc64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	200004d8 	.word	0x200004d8

08003a48 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003a4c:	4802      	ldr	r0, [pc, #8]	; (8003a58 <DMA1_Stream1_IRQHandler+0x10>)
 8003a4e:	f019 f909 	bl	801cc64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000538 	.word	0x20000538

08003a5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a60:	4802      	ldr	r0, [pc, #8]	; (8003a6c <TIM3_IRQHandler+0x10>)
 8003a62:	f01d fc4d 	bl	8021300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200005e0 	.word	0x200005e0

08003a70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003a74:	4802      	ldr	r0, [pc, #8]	; (8003a80 <I2C1_EV_IRQHandler+0x10>)
 8003a76:	f01a fcaf 	bl	801e3d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000484 	.word	0x20000484

08003a84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003a88:	4802      	ldr	r0, [pc, #8]	; (8003a94 <I2C1_ER_IRQHandler+0x10>)
 8003a8a:	f01a fe16 	bl	801e6ba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000484 	.word	0x20000484

08003a98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a9c:	4802      	ldr	r0, [pc, #8]	; (8003aa8 <USART1_IRQHandler+0x10>)
 8003a9e:	f01e fc47 	bl	8022330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000628 	.word	0x20000628

08003aac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ab0:	4802      	ldr	r0, [pc, #8]	; (8003abc <USART2_IRQHandler+0x10>)
 8003ab2:	f01e fc3d 	bl	8022330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	2000066c 	.word	0x2000066c

08003ac0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RC_PPM_Pin);
 8003ac4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ac8:	f019 fdd2 	bl	801d670 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003acc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ad0:	f019 fdce 	bl	801d670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ad4:	bf00      	nop
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <DMA2_Stream0_IRQHandler+0x10>)
 8003ade:	f019 f8c1 	bl	801cc64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000424 	.word	0x20000424

08003aec <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003af0:	4802      	ldr	r0, [pc, #8]	; (8003afc <USART6_IRQHandler+0x10>)
 8003af2:	f01e fc1d 	bl	8022330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	200006b0 	.word	0x200006b0

08003b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <_sbrk+0x5c>)
 8003b0a:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <_sbrk+0x60>)
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b14:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <_sbrk+0x64>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <_sbrk+0x64>)
 8003b1e:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <_sbrk+0x68>)
 8003b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <_sbrk+0x64>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d207      	bcs.n	8003b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b30:	f01f fb64 	bl	80231fc <__errno>
 8003b34:	4603      	mov	r3, r0
 8003b36:	220c      	movs	r2, #12
 8003b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3e:	e009      	b.n	8003b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <_sbrk+0x64>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b46:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <_sbrk+0x64>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	4a05      	ldr	r2, [pc, #20]	; (8003b64 <_sbrk+0x64>)
 8003b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b52:	68fb      	ldr	r3, [r7, #12]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20020000 	.word	0x20020000
 8003b60:	00000400 	.word	0x00000400
 8003b64:	20000718 	.word	0x20000718
 8003b68:	200020a8 	.word	0x200020a8

08003b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <SystemInit+0x20>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	4a05      	ldr	r2, [pc, #20]	; (8003b8c <SystemInit+0x20>)
 8003b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <constrain>:

static bool standardBoardAlignment = true;     // board orientation correction
static float boardRotation[3][3];              // matrix

int constrain(int amt, int low, int high)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	da01      	bge.n	8003ba8 <constrain+0x18>
        return low;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	e006      	b.n	8003bb6 <constrain+0x26>
    else if (amt > high)
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	dd01      	ble.n	8003bb4 <constrain+0x24>
        return high;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	e000      	b.n	8003bb6 <constrain+0x26>
    else
        return amt;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	0000      	movs	r0, r0
 8003bc4:	0000      	movs	r0, r0
	...

08003bc8 <initBoardAlignment>:

void initBoardAlignment(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08e      	sub	sp, #56	; 0x38
 8003bcc:	af00      	add	r7, sp, #0
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!mcfg.board_align_roll && !mcfg.board_align_pitch && !mcfg.board_align_yaw)
 8003bce:	4b8a      	ldr	r3, [pc, #552]	; (8003df8 <initBoardAlignment+0x230>)
 8003bd0:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <initBoardAlignment+0x26>
 8003bd8:	4b87      	ldr	r3, [pc, #540]	; (8003df8 <initBoardAlignment+0x230>)
 8003bda:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d105      	bne.n	8003bee <initBoardAlignment+0x26>
 8003be2:	4b85      	ldr	r3, [pc, #532]	; (8003df8 <initBoardAlignment+0x230>)
 8003be4:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80fd 	beq.w	8003de8 <initBoardAlignment+0x220>
        return;

    standardBoardAlignment = false;
 8003bee:	4b83      	ldr	r3, [pc, #524]	; (8003dfc <initBoardAlignment+0x234>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]

    // deg2rad
    roll = mcfg.board_align_roll * M_PI / 180.0f;
 8003bf4:	4b80      	ldr	r3, [pc, #512]	; (8003df8 <initBoardAlignment+0x230>)
 8003bf6:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fc fc50 	bl	80004a0 <__aeabi_i2d>
 8003c00:	a37b      	add	r3, pc, #492	; (adr r3, 8003df0 <initBoardAlignment+0x228>)
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	f7fc fcb5 	bl	8000574 <__aeabi_dmul>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4610      	mov	r0, r2
 8003c10:	4619      	mov	r1, r3
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	4b7a      	ldr	r3, [pc, #488]	; (8003e00 <initBoardAlignment+0x238>)
 8003c18:	f7fc fdd6 	bl	80007c8 <__aeabi_ddiv>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	f7fc ff88 	bl	8000b38 <__aeabi_d2f>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
    pitch = mcfg.board_align_pitch * M_PI / 180.0f;
 8003c2c:	4b72      	ldr	r3, [pc, #456]	; (8003df8 <initBoardAlignment+0x230>)
 8003c2e:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fc fc34 	bl	80004a0 <__aeabi_i2d>
 8003c38:	a36d      	add	r3, pc, #436	; (adr r3, 8003df0 <initBoardAlignment+0x228>)
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	f7fc fc99 	bl	8000574 <__aeabi_dmul>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	4b6c      	ldr	r3, [pc, #432]	; (8003e00 <initBoardAlignment+0x238>)
 8003c50:	f7fc fdba 	bl	80007c8 <__aeabi_ddiv>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	f7fc ff6c 	bl	8000b38 <__aeabi_d2f>
 8003c60:	4603      	mov	r3, r0
 8003c62:	633b      	str	r3, [r7, #48]	; 0x30
    yaw = mcfg.board_align_yaw * M_PI / 180.0f;
 8003c64:	4b64      	ldr	r3, [pc, #400]	; (8003df8 <initBoardAlignment+0x230>)
 8003c66:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fc fc18 	bl	80004a0 <__aeabi_i2d>
 8003c70:	a35f      	add	r3, pc, #380	; (adr r3, 8003df0 <initBoardAlignment+0x228>)
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f7fc fc7d 	bl	8000574 <__aeabi_dmul>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	4b5e      	ldr	r3, [pc, #376]	; (8003e00 <initBoardAlignment+0x238>)
 8003c88:	f7fc fd9e 	bl	80007c8 <__aeabi_ddiv>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4610      	mov	r0, r2
 8003c92:	4619      	mov	r1, r3
 8003c94:	f7fc ff50 	bl	8000b38 <__aeabi_d2f>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

    cosx = cosf(roll);
 8003c9c:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003ca0:	f01f fdd2 	bl	8023848 <cosf>
 8003ca4:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinx = sinf(roll);
 8003ca8:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003cac:	f01f fe50 	bl	8023950 <sinf>
 8003cb0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    cosy = cosf(pitch);
 8003cb4:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003cb8:	f01f fdc6 	bl	8023848 <cosf>
 8003cbc:	ed87 0a08 	vstr	s0, [r7, #32]
    siny = sinf(pitch);
 8003cc0:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003cc4:	f01f fe44 	bl	8023950 <sinf>
 8003cc8:	ed87 0a07 	vstr	s0, [r7, #28]
    cosz = cosf(yaw);
 8003ccc:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003cd0:	f01f fdba 	bl	8023848 <cosf>
 8003cd4:	ed87 0a06 	vstr	s0, [r7, #24]
    sinz = sinf(yaw);
 8003cd8:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003cdc:	f01f fe38 	bl	8023950 <sinf>
 8003ce0:	ed87 0a05 	vstr	s0, [r7, #20]

    coszcosx = cosz * cosx;
 8003ce4:	ed97 7a06 	vldr	s14, [r7, #24]
 8003ce8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf0:	edc7 7a04 	vstr	s15, [r7, #16]
    coszcosy = cosz * cosy;
 8003cf4:	ed97 7a06 	vldr	s14, [r7, #24]
 8003cf8:	edd7 7a08 	vldr	s15, [r7, #32]
 8003cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d00:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzcosx = sinz * cosx;
 8003d04:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d10:	edc7 7a02 	vstr	s15, [r7, #8]
    coszsinx = sinx * cosz;
 8003d14:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d18:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d20:	edc7 7a01 	vstr	s15, [r7, #4]
    sinzsinx = sinx * sinz;
 8003d24:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d28:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d30:	edc7 7a00 	vstr	s15, [r7]

    // define rotation matrix
    boardRotation[0][0] = coszcosy;
 8003d34:	4a33      	ldr	r2, [pc, #204]	; (8003e04 <initBoardAlignment+0x23c>)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6013      	str	r3, [r2, #0]
    boardRotation[0][1] = -cosy * sinz;
 8003d3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d3e:	eeb1 7a67 	vneg.f32	s14, s15
 8003d42:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4a:	4b2e      	ldr	r3, [pc, #184]	; (8003e04 <initBoardAlignment+0x23c>)
 8003d4c:	edc3 7a01 	vstr	s15, [r3, #4]
    boardRotation[0][2] = siny;
 8003d50:	4a2c      	ldr	r2, [pc, #176]	; (8003e04 <initBoardAlignment+0x23c>)
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	6093      	str	r3, [r2, #8]

    boardRotation[1][0] = sinzcosx + (coszsinx * siny);
 8003d56:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d62:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d6a:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <initBoardAlignment+0x23c>)
 8003d6c:	edc3 7a03 	vstr	s15, [r3, #12]
    boardRotation[1][1] = coszcosx - (sinzsinx * siny);
 8003d70:	ed97 7a00 	vldr	s14, [r7]
 8003d74:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d84:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <initBoardAlignment+0x23c>)
 8003d86:	edc3 7a04 	vstr	s15, [r3, #16]
    boardRotation[1][2] = -sinx * cosy;
 8003d8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d8e:	eeb1 7a67 	vneg.f32	s14, s15
 8003d92:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9a:	4b1a      	ldr	r3, [pc, #104]	; (8003e04 <initBoardAlignment+0x23c>)
 8003d9c:	edc3 7a05 	vstr	s15, [r3, #20]

    boardRotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8003da0:	ed97 7a04 	vldr	s14, [r7, #16]
 8003da4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dac:	ed97 7a00 	vldr	s14, [r7]
 8003db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003db4:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <initBoardAlignment+0x23c>)
 8003db6:	edc3 7a06 	vstr	s15, [r3, #24]
    boardRotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8003dba:	ed97 7a02 	vldr	s14, [r7, #8]
 8003dbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <initBoardAlignment+0x23c>)
 8003dd0:	edc3 7a07 	vstr	s15, [r3, #28]
    boardRotation[2][2] = cosy * cosx;
 8003dd4:	ed97 7a08 	vldr	s14, [r7, #32]
 8003dd8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de0:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <initBoardAlignment+0x23c>)
 8003de2:	edc3 7a08 	vstr	s15, [r3, #32]
 8003de6:	e000      	b.n	8003dea <initBoardAlignment+0x222>
        return;
 8003de8:	bf00      	nop
}
 8003dea:	3738      	adds	r7, #56	; 0x38
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	54442d18 	.word	0x54442d18
 8003df4:	400921fb 	.word	0x400921fb
 8003df8:	200007ac 	.word	0x200007ac
 8003dfc:	20000024 	.word	0x20000024
 8003e00:	40668000 	.word	0x40668000
 8003e04:	2000071c 	.word	0x2000071c

08003e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e0c:	480d      	ldr	r0, [pc, #52]	; (8003e44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e0e:	490e      	ldr	r1, [pc, #56]	; (8003e48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e10:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e14:	e002      	b.n	8003e1c <LoopCopyDataInit>

08003e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e1a:	3304      	adds	r3, #4

08003e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e20:	d3f9      	bcc.n	8003e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e22:	4a0b      	ldr	r2, [pc, #44]	; (8003e50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e24:	4c0b      	ldr	r4, [pc, #44]	; (8003e54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e28:	e001      	b.n	8003e2e <LoopFillZerobss>

08003e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e2c:	3204      	adds	r2, #4

08003e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e30:	d3fb      	bcc.n	8003e2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e32:	f7ff fe9b 	bl	8003b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e36:	f01f f9e7 	bl	8023208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e3a:	f7fe fc0b 	bl	8002654 <main>
  bx  lr    
 8003e3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e48:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8003e4c:	08029d20 	.word	0x08029d20
  ldr r2, =_sbss
 8003e50:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8003e54:	200020a8 	.word	0x200020a8

08003e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e58:	e7fe      	b.n	8003e58 <ADC_IRQHandler>
	...

08003e5c <_evtBuzzerFinish>:
static uint8_t readyBeepDone = 0;

PifBuzzer s_buzzer;

static void _evtBuzzerFinish(PifId id)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	80fb      	strh	r3, [r7, #6]
	(void)id;

    buzzerMode = BUZZER_STOPPED;
 8003e66:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <_evtBuzzerFinish+0x1c>)
 8003e68:	220d      	movs	r2, #13
 8003e6a:	701a      	strb	r2, [r3, #0]
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	20000025 	.word	0x20000025

08003e7c <buzzerInit>:

bool buzzerInit()
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
    if (!pifBuzzer_Init(&s_buzzer, PIF_ID_BUZZER, actBuzzerAction)) return false;
 8003e80:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <buzzerInit+0x28>)
 8003e82:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003e86:	4808      	ldr	r0, [pc, #32]	; (8003ea8 <buzzerInit+0x2c>)
 8003e88:	f017 f860 	bl	801af4c <pifBuzzer_Init>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <buzzerInit+0x1a>
 8003e92:	2300      	movs	r3, #0
 8003e94:	e003      	b.n	8003e9e <buzzerInit+0x22>
    s_buzzer.evt_finish = _evtBuzzerFinish;
 8003e96:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <buzzerInit+0x2c>)
 8003e98:	4a04      	ldr	r2, [pc, #16]	; (8003eac <buzzerInit+0x30>)
 8003e9a:	601a      	str	r2, [r3, #0]
    return true;
 8003e9c:	2301      	movs	r3, #1
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	08002109 	.word	0x08002109
 8003ea8:	20000758 	.word	0x20000758
 8003eac:	08003e5d 	.word	0x08003e5d

08003eb0 <buzzer>:

/* Buzzer -function is used to activate/deactive buzzer.
 * Parameter defines the used sequence.
 */
void buzzer(uint8_t mode)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	71fb      	strb	r3, [r7, #7]
#ifdef GPS
    uint8_t i = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73fb      	strb	r3, [r7, #15]
#endif

    // Just return if same or higher priority sound is active.
    if (buzzerMode <= mode)
 8003ebe:	4b62      	ldr	r3, [pc, #392]	; (8004048 <buzzer+0x198>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	79fa      	ldrb	r2, [r7, #7]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	f080 80b7 	bcs.w	8004038 <buzzer+0x188>
        return;

    switch (mode) {
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	2b0c      	cmp	r3, #12
 8003ece:	f200 80b5 	bhi.w	800403c <buzzer+0x18c>
 8003ed2:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <buzzer+0x28>)
 8003ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed8:	08003f0d 	.word	0x08003f0d
 8003edc:	08003f8b 	.word	0x08003f8b
 8003ee0:	08003f7b 	.word	0x08003f7b
 8003ee4:	08003f6b 	.word	0x08003f6b
 8003ee8:	08003f9b 	.word	0x08003f9b
 8003eec:	08003f3b 	.word	0x08003f3b
 8003ef0:	08003f3b 	.word	0x08003f3b
 8003ef4:	08003fab 	.word	0x08003fab
 8003ef8:	08003fbb 	.word	0x08003fbb
 8003efc:	08003f9b 	.word	0x08003f9b
 8003f00:	08003f4b 	.word	0x08003f4b
 8003f04:	08003f5b 	.word	0x08003f5b
 8003f08:	08003f1b 	.word	0x08003f1b
        case BUZZER_STOP:
            buzzerMode = BUZZER_STOPPED;
 8003f0c:	4b4e      	ldr	r3, [pc, #312]	; (8004048 <buzzer+0x198>)
 8003f0e:	220d      	movs	r2, #13
 8003f10:	701a      	strb	r2, [r3, #0]
            pifBuzzer_Stop(&s_buzzer);
 8003f12:	484e      	ldr	r0, [pc, #312]	; (800404c <buzzer+0x19c>)
 8003f14:	f017 f880 	bl	801b018 <pifBuzzer_Stop>
            break;
 8003f18:	e093      	b.n	8004042 <buzzer+0x192>
        case BUZZER_READY_BEEP:
            if (readyBeepDone)
 8003f1a:	4b4d      	ldr	r3, [pc, #308]	; (8004050 <buzzer+0x1a0>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f040 808e 	bne.w	8004040 <buzzer+0x190>
                return;
            pifBuzzer_Start(&s_buzzer, buzz_readyBeep);
 8003f24:	494b      	ldr	r1, [pc, #300]	; (8004054 <buzzer+0x1a4>)
 8003f26:	4849      	ldr	r0, [pc, #292]	; (800404c <buzzer+0x19c>)
 8003f28:	f017 f854 	bl	801afd4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003f2c:	4a46      	ldr	r2, [pc, #280]	; (8004048 <buzzer+0x198>)
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	7013      	strb	r3, [r2, #0]
            readyBeepDone = 1;
 8003f32:	4b47      	ldr	r3, [pc, #284]	; (8004050 <buzzer+0x1a0>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	701a      	strb	r2, [r3, #0]
            break;
 8003f38:	e083      	b.n	8004042 <buzzer+0x192>
        case BUZZER_ARMING:
        case BUZZER_DISARMING:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeepFast);
 8003f3a:	4947      	ldr	r1, [pc, #284]	; (8004058 <buzzer+0x1a8>)
 8003f3c:	4843      	ldr	r0, [pc, #268]	; (800404c <buzzer+0x19c>)
 8003f3e:	f017 f849 	bl	801afd4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003f42:	4a41      	ldr	r2, [pc, #260]	; (8004048 <buzzer+0x198>)
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	7013      	strb	r3, [r2, #0]
            break;
 8003f48:	e07b      	b.n	8004042 <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION:
            pifBuzzer_Start(&s_buzzer, buzz_2shortBeeps);
 8003f4a:	4944      	ldr	r1, [pc, #272]	; (800405c <buzzer+0x1ac>)
 8003f4c:	483f      	ldr	r0, [pc, #252]	; (800404c <buzzer+0x19c>)
 8003f4e:	f017 f841 	bl	801afd4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003f52:	4a3d      	ldr	r2, [pc, #244]	; (8004048 <buzzer+0x198>)
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	7013      	strb	r3, [r2, #0]
            break;
 8003f58:	e073      	b.n	8004042 <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION_FAIL:
            pifBuzzer_Start(&s_buzzer, buzz_3shortBeeps);
 8003f5a:	4941      	ldr	r1, [pc, #260]	; (8004060 <buzzer+0x1b0>)
 8003f5c:	483b      	ldr	r0, [pc, #236]	; (800404c <buzzer+0x19c>)
 8003f5e:	f017 f839 	bl	801afd4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003f62:	4a39      	ldr	r2, [pc, #228]	; (8004048 <buzzer+0x198>)
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	7013      	strb	r3, [r2, #0]
            break;
 8003f68:	e06b      	b.n	8004042 <buzzer+0x192>
        case BUZZER_TX_LOST_ARMED:
            pifBuzzer_Start(&s_buzzer, buzz_sos);
 8003f6a:	493e      	ldr	r1, [pc, #248]	; (8004064 <buzzer+0x1b4>)
 8003f6c:	4837      	ldr	r0, [pc, #220]	; (800404c <buzzer+0x19c>)
 8003f6e:	f017 f831 	bl	801afd4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003f72:	4a35      	ldr	r2, [pc, #212]	; (8004048 <buzzer+0x198>)
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	7013      	strb	r3, [r2, #0]
            break;
 8003f78:	e063      	b.n	8004042 <buzzer+0x192>
        case BUZZER_BAT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_longBeep);
 8003f7a:	493b      	ldr	r1, [pc, #236]	; (8004068 <buzzer+0x1b8>)
 8003f7c:	4833      	ldr	r0, [pc, #204]	; (800404c <buzzer+0x19c>)
 8003f7e:	f017 f829 	bl	801afd4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003f82:	4a31      	ldr	r2, [pc, #196]	; (8004048 <buzzer+0x198>)
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	7013      	strb	r3, [r2, #0]
            break;
 8003f88:	e05b      	b.n	8004042 <buzzer+0x192>
        case BUZZER_BAT_CRIT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_BatteryBeep);
 8003f8a:	4938      	ldr	r1, [pc, #224]	; (800406c <buzzer+0x1bc>)
 8003f8c:	482f      	ldr	r0, [pc, #188]	; (800404c <buzzer+0x19c>)
 8003f8e:	f017 f821 	bl	801afd4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003f92:	4a2d      	ldr	r2, [pc, #180]	; (8004048 <buzzer+0x198>)
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	7013      	strb	r3, [r2, #0]
            break;
 8003f98:	e053      	b.n	8004042 <buzzer+0x192>
        case BUZZER_ARMED:
        case BUZZER_TX_LOST:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeep);
 8003f9a:	4935      	ldr	r1, [pc, #212]	; (8004070 <buzzer+0x1c0>)
 8003f9c:	482b      	ldr	r0, [pc, #172]	; (800404c <buzzer+0x19c>)
 8003f9e:	f017 f819 	bl	801afd4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003fa2:	4a29      	ldr	r2, [pc, #164]	; (8004048 <buzzer+0x198>)
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	7013      	strb	r3, [r2, #0]
            break;
 8003fa8:	e04b      	b.n	8004042 <buzzer+0x192>
        case BUZZER_ARMING_GPS_FIX:
            pifBuzzer_Start(&s_buzzer, buzz_armed);
 8003faa:	4932      	ldr	r1, [pc, #200]	; (8004074 <buzzer+0x1c4>)
 8003fac:	4827      	ldr	r0, [pc, #156]	; (800404c <buzzer+0x19c>)
 8003fae:	f017 f811 	bl	801afd4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003fb2:	4a25      	ldr	r2, [pc, #148]	; (8004048 <buzzer+0x198>)
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	7013      	strb	r3, [r2, #0]
            break;
 8003fb8:	e043      	b.n	8004042 <buzzer+0x192>
        case BUZZER_TX_SET:
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5) {
 8003fba:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003fbe:	f002 ff67 	bl	8006e90 <feature>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d02f      	beq.n	8004028 <buzzer+0x178>
 8003fc8:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <buzzer+0x1c8>)
 8003fca:	7adb      	ldrb	r3, [r3, #11]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d02b      	beq.n	8004028 <buzzer+0x178>
 8003fd0:	4b2a      	ldr	r3, [pc, #168]	; (800407c <buzzer+0x1cc>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d927      	bls.n	8004028 <buzzer+0x178>
                do {
                    buzz_countSats[i] = 5;
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	4a29      	ldr	r2, [pc, #164]	; (8004080 <buzzer+0x1d0>)
 8003fdc:	2105      	movs	r1, #5
 8003fde:	54d1      	strb	r1, [r2, r3]
                    buzz_countSats[i + 1] = 15;
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	4a26      	ldr	r2, [pc, #152]	; (8004080 <buzzer+0x1d0>)
 8003fe6:	210f      	movs	r1, #15
 8003fe8:	54d1      	strb	r1, [r2, r3]
                    i += 2;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	3302      	adds	r3, #2
 8003fee:	73fb      	strb	r3, [r7, #15]
                } while (i < 20 && GPS_numSat > i / 2);
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b13      	cmp	r3, #19
 8003ff4:	d806      	bhi.n	8004004 <buzzer+0x154>
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	085b      	lsrs	r3, r3, #1
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	; (800407c <buzzer+0x1cc>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d3e9      	bcc.n	8003fd8 <buzzer+0x128>
                buzz_countSats[i + 1] = 100;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	3301      	adds	r3, #1
 8004008:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <buzzer+0x1d0>)
 800400a:	2164      	movs	r1, #100	; 0x64
 800400c:	54d1      	strb	r1, [r2, r3]
                buzz_countSats[i + 2] = 0xF0;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	3302      	adds	r3, #2
 8004012:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <buzzer+0x1d0>)
 8004014:	21f0      	movs	r1, #240	; 0xf0
 8004016:	54d1      	strb	r1, [r2, r3]
                pifBuzzer_Start(&s_buzzer, buzz_countSats);
 8004018:	4919      	ldr	r1, [pc, #100]	; (8004080 <buzzer+0x1d0>)
 800401a:	480c      	ldr	r0, [pc, #48]	; (800404c <buzzer+0x19c>)
 800401c:	f016 ffda 	bl	801afd4 <pifBuzzer_Start>
                buzzerMode = mode;
 8004020:	4a09      	ldr	r2, [pc, #36]	; (8004048 <buzzer+0x198>)
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	7013      	strb	r3, [r2, #0]
                break;
 8004026:	e00c      	b.n	8004042 <buzzer+0x192>
            }
#endif
            pifBuzzer_Start(&s_buzzer, buzz_shortBeep);
 8004028:	4916      	ldr	r1, [pc, #88]	; (8004084 <buzzer+0x1d4>)
 800402a:	4808      	ldr	r0, [pc, #32]	; (800404c <buzzer+0x19c>)
 800402c:	f016 ffd2 	bl	801afd4 <pifBuzzer_Start>
            buzzerMode = mode;
 8004030:	4a05      	ldr	r2, [pc, #20]	; (8004048 <buzzer+0x198>)
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	7013      	strb	r3, [r2, #0]
            break;
 8004036:	e004      	b.n	8004042 <buzzer+0x192>
        return;
 8004038:	bf00      	nop
 800403a:	e002      	b.n	8004042 <buzzer+0x192>

        default:
            return;
 800403c:	bf00      	nop
 800403e:	e000      	b.n	8004042 <buzzer+0x192>
                return;
 8004040:	bf00      	nop
    }
}
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000025 	.word	0x20000025
 800404c:	20000758 	.word	0x20000758
 8004050:	20000756 	.word	0x20000756
 8004054:	08027f78 	.word	0x08027f78
 8004058:	08027f4c 	.word	0x08027f4c
 800405c:	08027f88 	.word	0x08027f88
 8004060:	08027f90 	.word	0x08027f90
 8004064:	08027f58 	.word	0x08027f58
 8004068:	08027f54 	.word	0x08027f54
 800406c:	08027f48 	.word	0x08027f48
 8004070:	08027f50 	.word	0x08027f50
 8004074:	08027f6c 	.word	0x08027f6c
 8004078:	20001628 	.word	0x20001628
 800407c:	2000170c 	.word	0x2000170c
 8004080:	20000740 	.word	0x20000740
 8004084:	08027f44 	.word	0x08027f44

08004088 <buzzerUpdate>:

/* buzzerUpdate -function is used in loop. It will update buzzer state
 * when the time is correct.
 */
void buzzerUpdate(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
    // If beeper option from AUX switch has been selected
    if (rcOptions[BOXBEEPERON]) {
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <buzzerUpdate+0x20>)
 800408e:	7b5b      	ldrb	r3, [r3, #13]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d006      	beq.n	80040a2 <buzzerUpdate+0x1a>
        if (buzzerMode > BUZZER_TX_SET)
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <buzzerUpdate+0x24>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b08      	cmp	r3, #8
 800409a:	d902      	bls.n	80040a2 <buzzerUpdate+0x1a>
            buzzer(BUZZER_TX_SET);
 800409c:	2008      	movs	r0, #8
 800409e:	f7ff ff07 	bl	8003eb0 <buzzer>
    }
}
 80040a2:	bf00      	nop
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200016c8 	.word	0x200016c8
 80040ac:	20000025 	.word	0x20000025

080040b0 <i2a>:
**           range errors on the radix default it to base10
** Code from http://groups.google.com/group/comp.lang.c/msg/66552ef8b04fe1ab?pli=1
*/

static char *i2a(unsigned i, char *a, unsigned r)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
    if (i / r > 0)
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d309      	bcc.n	80040d8 <i2a+0x28>
        a = i2a(i / r, a, r);
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff ffed 	bl	80040b0 <i2a>
 80040d6:	60b8      	str	r0, [r7, #8]
    *a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i % r];
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	fb01 f202 	mul.w	r2, r1, r2
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	4a04      	ldr	r2, [pc, #16]	; (80040fc <i2a+0x4c>)
 80040ea:	5cd2      	ldrb	r2, [r2, r3]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	701a      	strb	r2, [r3, #0]
    return a + 1;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	3301      	adds	r3, #1
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	08026d48 	.word	0x08026d48

08004100 <itoa>:

char *itoa(int i, char *a, int r)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
    if ((r < 2) || (r > 36))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b01      	cmp	r3, #1
 8004110:	dd02      	ble.n	8004118 <itoa+0x18>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b24      	cmp	r3, #36	; 0x24
 8004116:	dd01      	ble.n	800411c <itoa+0x1c>
        r = 10;
 8004118:	230a      	movs	r3, #10
 800411a:	607b      	str	r3, [r7, #4]
    if (i < 0) {
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	da0e      	bge.n	8004140 <itoa+0x40>
        *a = '-';
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	222d      	movs	r2, #45	; 0x2d
 8004126:	701a      	strb	r2, [r3, #0]
        *i2a(-(unsigned)i, a + 1, r) = 0;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4258      	negs	r0, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	3301      	adds	r3, #1
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4619      	mov	r1, r3
 8004134:	f7ff ffbc 	bl	80040b0 <i2a>
 8004138:	4603      	mov	r3, r0
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	e008      	b.n	8004152 <itoa+0x52>
    } else
        *i2a(i, a, r) = 0;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff ffb2 	bl	80040b0 <i2a>
 800414c:	4603      	mov	r3, r0
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
    return a;
 8004152:	68bb      	ldr	r3, [r7, #8]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <_atof>:
// 09-May-2009 Tom Van Baak (tvb) www.LeapSecond.com
//
#define white_space(c) ((c) == ' ' || (c) == '\t')
#define valid_digit(c) ((c) >= '0' && (c) <= '9')
static float _atof(const char *p)
{
 800415c:	b480      	push	{r7}
 800415e:	b089      	sub	sp, #36	; 0x24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
    int frac = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
    float sign, value, scale;

    // Skip leading white space, if any.
    while (white_space(*p)) {
 8004168:	e002      	b.n	8004170 <_atof+0x14>
        p += 1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3301      	adds	r3, #1
 800416e:	607b      	str	r3, [r7, #4]
    while (white_space(*p)) {
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b20      	cmp	r3, #32
 8004176:	d0f8      	beq.n	800416a <_atof+0xe>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b09      	cmp	r3, #9
 800417e:	d0f4      	beq.n	800416a <_atof+0xe>
    }

    // Get sign, if any.
    sign = 1.0f;
 8004180:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004184:	61bb      	str	r3, [r7, #24]
    if (*p == '-') {
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b2d      	cmp	r3, #45	; 0x2d
 800418c:	d105      	bne.n	800419a <_atof+0x3e>
        sign = -1.0f;
 800418e:	4b6a      	ldr	r3, [pc, #424]	; (8004338 <_atof+0x1dc>)
 8004190:	61bb      	str	r3, [r7, #24]
        p += 1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3301      	adds	r3, #1
 8004196:	607b      	str	r3, [r7, #4]
 8004198:	e006      	b.n	80041a8 <_atof+0x4c>

    } else if (*p == '+') {
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b2b      	cmp	r3, #43	; 0x2b
 80041a0:	d102      	bne.n	80041a8 <_atof+0x4c>
        p += 1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3301      	adds	r3, #1
 80041a6:	607b      	str	r3, [r7, #4]
    }

    // Get digits before decimal point or exponent, if any.
    value = 0.0f;
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
    while (valid_digit(*p)) {
 80041ae:	e013      	b.n	80041d8 <_atof+0x7c>
        value = value * 10.0f + (*p - '0');
 80041b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80041b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	3b30      	subs	r3, #48	; 0x30
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ce:	edc7 7a05 	vstr	s15, [r7, #20]
        p += 1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3301      	adds	r3, #1
 80041d6:	607b      	str	r3, [r7, #4]
    while (valid_digit(*p)) {
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b2f      	cmp	r3, #47	; 0x2f
 80041de:	d903      	bls.n	80041e8 <_atof+0x8c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b39      	cmp	r3, #57	; 0x39
 80041e6:	d9e3      	bls.n	80041b0 <_atof+0x54>
    }

    // Get digits after decimal point, if any.
    if (*p == '.') {
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b2e      	cmp	r3, #46	; 0x2e
 80041ee:	d129      	bne.n	8004244 <_atof+0xe8>
        float pow10 = 10.0f;
 80041f0:	4b52      	ldr	r3, [pc, #328]	; (800433c <_atof+0x1e0>)
 80041f2:	60fb      	str	r3, [r7, #12]
        p += 1;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3301      	adds	r3, #1
 80041f8:	607b      	str	r3, [r7, #4]

        while (valid_digit(*p)) {
 80041fa:	e01b      	b.n	8004234 <_atof+0xd8>
            value += (*p - '0') / pow10;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	3b30      	subs	r3, #48	; 0x30
 8004202:	ee07 3a90 	vmov	s15, r3
 8004206:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800420a:	ed97 7a03 	vldr	s14, [r7, #12]
 800420e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004212:	ed97 7a05 	vldr	s14, [r7, #20]
 8004216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800421a:	edc7 7a05 	vstr	s15, [r7, #20]
            pow10 *= 10.0f;
 800421e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004222:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800422a:	edc7 7a03 	vstr	s15, [r7, #12]
            p += 1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3301      	adds	r3, #1
 8004232:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b2f      	cmp	r3, #47	; 0x2f
 800423a:	d903      	bls.n	8004244 <_atof+0xe8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b39      	cmp	r3, #57	; 0x39
 8004242:	d9db      	bls.n	80041fc <_atof+0xa0>
        }
    }

    // Handle exponent, if any.
    scale = 1.0f;
 8004244:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004248:	613b      	str	r3, [r7, #16]
    if ((*p == 'e') || (*p == 'E')) {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b65      	cmp	r3, #101	; 0x65
 8004250:	d003      	beq.n	800425a <_atof+0xfe>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b45      	cmp	r3, #69	; 0x45
 8004258:	d153      	bne.n	8004302 <_atof+0x1a6>
        unsigned int expon;
        p += 1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3301      	adds	r3, #1
 800425e:	607b      	str	r3, [r7, #4]

        // Get sign of exponent, if any.
        frac = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	61fb      	str	r3, [r7, #28]
        if (*p == '-') {
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b2d      	cmp	r3, #45	; 0x2d
 800426a:	d105      	bne.n	8004278 <_atof+0x11c>
            frac = 1;
 800426c:	2301      	movs	r3, #1
 800426e:	61fb      	str	r3, [r7, #28]
            p += 1;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3301      	adds	r3, #1
 8004274:	607b      	str	r3, [r7, #4]
 8004276:	e006      	b.n	8004286 <_atof+0x12a>

        } else if (*p == '+') {
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b2b      	cmp	r3, #43	; 0x2b
 800427e:	d102      	bne.n	8004286 <_atof+0x12a>
            p += 1;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3301      	adds	r3, #1
 8004284:	607b      	str	r3, [r7, #4]
        }

        // Get digits of exponent, if any.
        expon = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	60bb      	str	r3, [r7, #8]
        while (valid_digit(*p)) {
 800428a:	e00d      	b.n	80042a8 <_atof+0x14c>
            expon = expon * 10 + (*p - '0');
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	461a      	mov	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	4413      	add	r3, r2
 800429e:	3b30      	subs	r3, #48	; 0x30
 80042a0:	60bb      	str	r3, [r7, #8]
            p += 1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3301      	adds	r3, #1
 80042a6:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b2f      	cmp	r3, #47	; 0x2f
 80042ae:	d903      	bls.n	80042b8 <_atof+0x15c>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b39      	cmp	r3, #57	; 0x39
 80042b6:	d9e9      	bls.n	800428c <_atof+0x130>
        }
        if (expon > 308)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80042be:	d90e      	bls.n	80042de <_atof+0x182>
            expon = 308;
 80042c0:	f44f 739a 	mov.w	r3, #308	; 0x134
 80042c4:	60bb      	str	r3, [r7, #8]

        // Calculate scaling factor.
        // while (expon >= 50) { scale *= 1E50f; expon -= 50; }
        while (expon >=  8) {
 80042c6:	e00a      	b.n	80042de <_atof+0x182>
            scale *= 1E8f;
 80042c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80042cc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004340 <_atof+0x1e4>
 80042d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042d4:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  8;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	3b08      	subs	r3, #8
 80042dc:	60bb      	str	r3, [r7, #8]
        while (expon >=  8) {
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b07      	cmp	r3, #7
 80042e2:	d8f1      	bhi.n	80042c8 <_atof+0x16c>
        }
        while (expon >   0) {
 80042e4:	e00a      	b.n	80042fc <_atof+0x1a0>
            scale *= 10.0f;
 80042e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80042ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042f2:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  1;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	60bb      	str	r3, [r7, #8]
        while (expon >   0) {
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f1      	bne.n	80042e6 <_atof+0x18a>
        }
    }

    // Return signed and scaled floating point result.
    return sign * (frac ? (value / scale) : (value * scale));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d006      	beq.n	8004316 <_atof+0x1ba>
 8004308:	edd7 6a05 	vldr	s13, [r7, #20]
 800430c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004314:	e005      	b.n	8004322 <_atof+0x1c6>
 8004316:	ed97 7a05 	vldr	s14, [r7, #20]
 800431a:	edd7 7a04 	vldr	s15, [r7, #16]
 800431e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004322:	ed97 7a06 	vldr	s14, [r7, #24]
 8004326:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800432a:	eeb0 0a67 	vmov.f32	s0, s15
 800432e:	3724      	adds	r7, #36	; 0x24
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	bf800000 	.word	0xbf800000
 800433c:	41200000 	.word	0x41200000
 8004340:	4cbebc20 	.word	0x4cbebc20

08004344 <ftoa>:

///////////////////////////////////////////////////////////////////////////////
// FTOA
///////////////////////////////////////////////////////////////////////////////
static char *ftoa(float x, char *floatString)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08c      	sub	sp, #48	; 0x30
 8004348:	af00      	add	r7, sp, #0
 800434a:	ed87 0a01 	vstr	s0, [r7, #4]
 800434e:	6038      	str	r0, [r7, #0]
    int32_t value;
    char intString1[12];
    char intString2[12] = { 0, };
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	f107 0310 	add.w	r3, r7, #16
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	605a      	str	r2, [r3, #4]
    char *decimalPoint = ".";
 800435e:	4b54      	ldr	r3, [pc, #336]	; (80044b0 <ftoa+0x16c>)
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t dpLocation;

    if (x > 0)                  // Rounding for x.xxx display format
 8004362:	edd7 7a01 	vldr	s15, [r7, #4]
 8004366:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800436a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436e:	dd08      	ble.n	8004382 <ftoa+0x3e>
        x += 0.0005f;
 8004370:	edd7 7a01 	vldr	s15, [r7, #4]
 8004374:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80044b4 <ftoa+0x170>
 8004378:	ee77 7a87 	vadd.f32	s15, s15, s14
 800437c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004380:	e007      	b.n	8004392 <ftoa+0x4e>
    else
        x -= 0.0005f;
 8004382:	edd7 7a01 	vldr	s15, [r7, #4]
 8004386:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80044b4 <ftoa+0x170>
 800438a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800438e:	edc7 7a01 	vstr	s15, [r7, #4]

    value = (int32_t)(x * 1000.0f);    // Convert float * 1000 to an integer
 8004392:	edd7 7a01 	vldr	s15, [r7, #4]
 8004396:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80044b8 <ftoa+0x174>
 800439a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800439e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043a2:	ee17 3a90 	vmov	r3, s15
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28

    itoa(abs(value), intString1, 10);   // Create string from abs of integer value
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bfb8      	it	lt
 80043ae:	425b      	neglt	r3, r3
 80043b0:	f107 0118 	add.w	r1, r7, #24
 80043b4:	220a      	movs	r2, #10
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fea2 	bl	8004100 <itoa>

    if (value >= 0)
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	2b00      	cmp	r3, #0
 80043c0:	db02      	blt.n	80043c8 <ftoa+0x84>
        intString2[0] = ' ';    // Positive number, add a pad space
 80043c2:	2320      	movs	r3, #32
 80043c4:	733b      	strb	r3, [r7, #12]
 80043c6:	e001      	b.n	80043cc <ftoa+0x88>
    else
        intString2[0] = '-';    // Negative number, add a negative sign
 80043c8:	232d      	movs	r3, #45	; 0x2d
 80043ca:	733b      	strb	r3, [r7, #12]

    if (strlen(intString1) == 1) {
 80043cc:	f107 0318 	add.w	r3, r7, #24
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fb ff0b 	bl	80001ec <strlen>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d10e      	bne.n	80043fa <ftoa+0xb6>
        intString2[1] = '0';
 80043dc:	2330      	movs	r3, #48	; 0x30
 80043de:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 80043e0:	2330      	movs	r3, #48	; 0x30
 80043e2:	73bb      	strb	r3, [r7, #14]
        intString2[3] = '0';
 80043e4:	2330      	movs	r3, #48	; 0x30
 80043e6:	73fb      	strb	r3, [r7, #15]
        strcat(intString2, intString1);
 80043e8:	f107 0218 	add.w	r2, r7, #24
 80043ec:	f107 030c 	add.w	r3, r7, #12
 80043f0:	4611      	mov	r1, r2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f01f f872 	bl	80234dc <strcat>
 80043f8:	e02f      	b.n	800445a <ftoa+0x116>
    } else if (strlen(intString1) == 2) {
 80043fa:	f107 0318 	add.w	r3, r7, #24
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fb fef4 	bl	80001ec <strlen>
 8004404:	4603      	mov	r3, r0
 8004406:	2b02      	cmp	r3, #2
 8004408:	d10c      	bne.n	8004424 <ftoa+0xe0>
        intString2[1] = '0';
 800440a:	2330      	movs	r3, #48	; 0x30
 800440c:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 800440e:	2330      	movs	r3, #48	; 0x30
 8004410:	73bb      	strb	r3, [r7, #14]
        strcat(intString2, intString1);
 8004412:	f107 0218 	add.w	r2, r7, #24
 8004416:	f107 030c 	add.w	r3, r7, #12
 800441a:	4611      	mov	r1, r2
 800441c:	4618      	mov	r0, r3
 800441e:	f01f f85d 	bl	80234dc <strcat>
 8004422:	e01a      	b.n	800445a <ftoa+0x116>
    } else if (strlen(intString1) == 3) {
 8004424:	f107 0318 	add.w	r3, r7, #24
 8004428:	4618      	mov	r0, r3
 800442a:	f7fb fedf 	bl	80001ec <strlen>
 800442e:	4603      	mov	r3, r0
 8004430:	2b03      	cmp	r3, #3
 8004432:	d10a      	bne.n	800444a <ftoa+0x106>
        intString2[1] = '0';
 8004434:	2330      	movs	r3, #48	; 0x30
 8004436:	737b      	strb	r3, [r7, #13]
        strcat(intString2, intString1);
 8004438:	f107 0218 	add.w	r2, r7, #24
 800443c:	f107 030c 	add.w	r3, r7, #12
 8004440:	4611      	mov	r1, r2
 8004442:	4618      	mov	r0, r3
 8004444:	f01f f84a 	bl	80234dc <strcat>
 8004448:	e007      	b.n	800445a <ftoa+0x116>
    } else {
        strcat(intString2, intString1);
 800444a:	f107 0218 	add.w	r2, r7, #24
 800444e:	f107 030c 	add.w	r3, r7, #12
 8004452:	4611      	mov	r1, r2
 8004454:	4618      	mov	r0, r3
 8004456:	f01f f841 	bl	80234dc <strcat>
    }

    dpLocation = strlen(intString2) - 3;
 800445a:	f107 030c 	add.w	r3, r7, #12
 800445e:	4618      	mov	r0, r3
 8004460:	f7fb fec4 	bl	80001ec <strlen>
 8004464:	4603      	mov	r3, r0
 8004466:	b2db      	uxtb	r3, r3
 8004468:	3b03      	subs	r3, #3
 800446a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    strncpy(floatString, intString2, dpLocation);
 800446e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004472:	f107 030c 	add.w	r3, r7, #12
 8004476:	4619      	mov	r1, r3
 8004478:	6838      	ldr	r0, [r7, #0]
 800447a:	f01f f875 	bl	8023568 <strncpy>
    floatString[dpLocation] = '\0';
 800447e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	4413      	add	r3, r2
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
    strcat(floatString, decimalPoint);
 800448a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800448c:	6838      	ldr	r0, [r7, #0]
 800448e:	f01f f825 	bl	80234dc <strcat>
    strcat(floatString, intString2 + dpLocation);
 8004492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004496:	f107 020c 	add.w	r2, r7, #12
 800449a:	4413      	add	r3, r2
 800449c:	4619      	mov	r1, r3
 800449e:	6838      	ldr	r0, [r7, #0]
 80044a0:	f01f f81c 	bl	80234dc <strcat>

    return floatString;
 80044a4:	683b      	ldr	r3, [r7, #0]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3730      	adds	r7, #48	; 0x30
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	08026d70 	.word	0x08026d70
 80044b4:	3a03126f 	.word	0x3a03126f
 80044b8:	447a0000 	.word	0x447a0000

080044bc <cliAux>:

static int cliAux(int argc, char *argv[])
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
    int i, val = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]

    if (argc == 1) {
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d114      	bne.n	80044fa <cliAux+0x3e>
        // print out aux channel settings
        for (i = 0; i < CHECKBOXITEMS; i++)
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	e00d      	b.n	80044f2 <cliAux+0x36>
            pifLog_Printf(LT_NONE, "aux %u %u\r\n", i, cfg.activate[i]);
 80044d6:	4a1e      	ldr	r2, [pc, #120]	; (8004550 <cliAux+0x94>)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3312      	adds	r3, #18
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	491b      	ldr	r1, [pc, #108]	; (8004554 <cliAux+0x98>)
 80044e6:	2000      	movs	r0, #0
 80044e8:	f00f f9aa 	bl	8013840 <pifLog_Printf>
        for (i = 0; i < CHECKBOXITEMS; i++)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3301      	adds	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b18      	cmp	r3, #24
 80044f6:	ddee      	ble.n	80044d6 <cliAux+0x1a>
 80044f8:	e024      	b.n	8004544 <cliAux+0x88>
    } else if (argc > 2) {
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	dd1e      	ble.n	800453e <cliAux+0x82>
        i = atoi(argv[1]);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	3304      	adds	r3, #4
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f01e fe6c 	bl	80231e4 <atoi>
 800450c:	60f8      	str	r0, [r7, #12]
        if (i < CHECKBOXITEMS) {
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b18      	cmp	r3, #24
 8004512:	dc0e      	bgt.n	8004532 <cliAux+0x76>
            val = atoi(argv[2]);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	3308      	adds	r3, #8
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f01e fe62 	bl	80231e4 <atoi>
 8004520:	60b8      	str	r0, [r7, #8]
            cfg.activate[i] = val;
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	490a      	ldr	r1, [pc, #40]	; (8004550 <cliAux+0x94>)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3312      	adds	r3, #18
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	e008      	b.n	8004544 <cliAux+0x88>
        } else {
            pifLog_Printf(LT_NONE, "Invalid Feature index: must be < %u\r\n", CHECKBOXITEMS);
 8004532:	2219      	movs	r2, #25
 8004534:	4908      	ldr	r1, [pc, #32]	; (8004558 <cliAux+0x9c>)
 8004536:	2000      	movs	r0, #0
 8004538:	f00f f982 	bl	8013840 <pifLog_Printf>
 800453c:	e002      	b.n	8004544 <cliAux+0x88>
        }
    } else {
    	return PIF_LOG_CMD_TOO_FEW_ARGS;
 800453e:	f06f 0302 	mvn.w	r3, #2
 8004542:	e000      	b.n	8004546 <cliAux+0x8a>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000d18 	.word	0x20000d18
 8004554:	08026d74 	.word	0x08026d74
 8004558:	08026d80 	.word	0x08026d80

0800455c <cliCMix>:

static int cliCMix(int argc, char *argv[])
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08c      	sub	sp, #48	; 0x30
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
    int i, check = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	62bb      	str	r3, [r7, #40]	; 0x28
    int num_motors = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
    char buf[16];
    float mixsum[3];

    if (argc == 1) {
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b01      	cmp	r3, #1
 8004572:	f040 80d8 	bne.w	8004726 <cliCMix+0x1ca>
        pifLog_Print(LT_NONE, "Custom mixer: \r\nMotor\tThr\tRoll\tPitch\tYaw\r\n");
 8004576:	499a      	ldr	r1, [pc, #616]	; (80047e0 <cliCMix+0x284>)
 8004578:	2000      	movs	r0, #0
 800457a:	f00f f8d3 	bl	8013724 <pifLog_Print>
        for (i = 0; i < MAX_MOTORS; i++) {
 800457e:	2300      	movs	r3, #0
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004582:	e069      	b.n	8004658 <cliCMix+0xfc>
            if (mcfg.customMixer[i].throttle == 0.0f)
 8004584:	4a97      	ldr	r2, [pc, #604]	; (80047e4 <cliCMix+0x288>)
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	3301      	adds	r3, #1
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	4413      	add	r3, r2
 800458e:	edd3 7a00 	vldr	s15, [r3]
 8004592:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459a:	d061      	beq.n	8004660 <cliCMix+0x104>
                break;
            num_motors++;
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	3301      	adds	r3, #1
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 80045a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a4:	3301      	adds	r3, #1
 80045a6:	461a      	mov	r2, r3
 80045a8:	498f      	ldr	r1, [pc, #572]	; (80047e8 <cliCMix+0x28c>)
 80045aa:	2000      	movs	r0, #0
 80045ac:	f00f f948 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].throttle, buf));
 80045b0:	4a8c      	ldr	r2, [pc, #560]	; (80047e4 <cliCMix+0x288>)
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	3301      	adds	r3, #1
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	4413      	add	r3, r2
 80045ba:	edd3 7a00 	vldr	s15, [r3]
 80045be:	f107 0314 	add.w	r3, r7, #20
 80045c2:	4618      	mov	r0, r3
 80045c4:	eeb0 0a67 	vmov.f32	s0, s15
 80045c8:	f7ff febc 	bl	8004344 <ftoa>
 80045cc:	4603      	mov	r3, r0
 80045ce:	461a      	mov	r2, r3
 80045d0:	4986      	ldr	r1, [pc, #536]	; (80047ec <cliCMix+0x290>)
 80045d2:	2000      	movs	r0, #0
 80045d4:	f00f f934 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].roll, buf));
 80045d8:	4a82      	ldr	r2, [pc, #520]	; (80047e4 <cliCMix+0x288>)
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	3301      	adds	r3, #1
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	4413      	add	r3, r2
 80045e2:	3304      	adds	r3, #4
 80045e4:	edd3 7a00 	vldr	s15, [r3]
 80045e8:	f107 0314 	add.w	r3, r7, #20
 80045ec:	4618      	mov	r0, r3
 80045ee:	eeb0 0a67 	vmov.f32	s0, s15
 80045f2:	f7ff fea7 	bl	8004344 <ftoa>
 80045f6:	4603      	mov	r3, r0
 80045f8:	461a      	mov	r2, r3
 80045fa:	497c      	ldr	r1, [pc, #496]	; (80047ec <cliCMix+0x290>)
 80045fc:	2000      	movs	r0, #0
 80045fe:	f00f f91f 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].pitch, buf));
 8004602:	4a78      	ldr	r2, [pc, #480]	; (80047e4 <cliCMix+0x288>)
 8004604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	4413      	add	r3, r2
 800460a:	3318      	adds	r3, #24
 800460c:	edd3 7a00 	vldr	s15, [r3]
 8004610:	f107 0314 	add.w	r3, r7, #20
 8004614:	4618      	mov	r0, r3
 8004616:	eeb0 0a67 	vmov.f32	s0, s15
 800461a:	f7ff fe93 	bl	8004344 <ftoa>
 800461e:	4603      	mov	r3, r0
 8004620:	461a      	mov	r2, r3
 8004622:	4972      	ldr	r1, [pc, #456]	; (80047ec <cliCMix+0x290>)
 8004624:	2000      	movs	r0, #0
 8004626:	f00f f90b 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(mcfg.customMixer[i].yaw, buf));
 800462a:	4a6e      	ldr	r2, [pc, #440]	; (80047e4 <cliCMix+0x288>)
 800462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	4413      	add	r3, r2
 8004632:	331c      	adds	r3, #28
 8004634:	edd3 7a00 	vldr	s15, [r3]
 8004638:	f107 0314 	add.w	r3, r7, #20
 800463c:	4618      	mov	r0, r3
 800463e:	eeb0 0a67 	vmov.f32	s0, s15
 8004642:	f7ff fe7f 	bl	8004344 <ftoa>
 8004646:	4603      	mov	r3, r0
 8004648:	461a      	mov	r2, r3
 800464a:	4969      	ldr	r1, [pc, #420]	; (80047f0 <cliCMix+0x294>)
 800464c:	2000      	movs	r0, #0
 800464e:	f00f f8f7 	bl	8013840 <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	3301      	adds	r3, #1
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465a:	2b0b      	cmp	r3, #11
 800465c:	dd92      	ble.n	8004584 <cliCMix+0x28>
 800465e:	e000      	b.n	8004662 <cliCMix+0x106>
                break;
 8004660:	bf00      	nop
        }
        mixsum[0] = mixsum[1] = mixsum[2] = 0.0f;
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < num_motors; i++) {
 8004670:	2300      	movs	r3, #0
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004674:	e02a      	b.n	80046cc <cliCMix+0x170>
            mixsum[0] += mcfg.customMixer[i].roll;
 8004676:	ed97 7a02 	vldr	s14, [r7, #8]
 800467a:	4a5a      	ldr	r2, [pc, #360]	; (80047e4 <cliCMix+0x288>)
 800467c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467e:	3301      	adds	r3, #1
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	4413      	add	r3, r2
 8004684:	3304      	adds	r3, #4
 8004686:	edd3 7a00 	vldr	s15, [r3]
 800468a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800468e:	edc7 7a02 	vstr	s15, [r7, #8]
            mixsum[1] += mcfg.customMixer[i].pitch;
 8004692:	ed97 7a03 	vldr	s14, [r7, #12]
 8004696:	4a53      	ldr	r2, [pc, #332]	; (80047e4 <cliCMix+0x288>)
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	4413      	add	r3, r2
 800469e:	3318      	adds	r3, #24
 80046a0:	edd3 7a00 	vldr	s15, [r3]
 80046a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a8:	edc7 7a03 	vstr	s15, [r7, #12]
            mixsum[2] += mcfg.customMixer[i].yaw;
 80046ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80046b0:	4a4c      	ldr	r2, [pc, #304]	; (80047e4 <cliCMix+0x288>)
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	4413      	add	r3, r2
 80046b8:	331c      	adds	r3, #28
 80046ba:	edd3 7a00 	vldr	s15, [r3]
 80046be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046c2:	edc7 7a04 	vstr	s15, [r7, #16]
        for (i = 0; i < num_motors; i++) {
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	3301      	adds	r3, #1
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	429a      	cmp	r2, r3
 80046d2:	dbd0      	blt.n	8004676 <cliCMix+0x11a>
        }
        pifLog_Print(LT_NONE, "Sanity check:\t");
 80046d4:	4947      	ldr	r1, [pc, #284]	; (80047f4 <cliCMix+0x298>)
 80046d6:	2000      	movs	r0, #0
 80046d8:	f00f f824 	bl	8013724 <pifLog_Print>
        for (i = 0; i < 3; i++)
 80046dc:	2300      	movs	r3, #0
 80046de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e0:	e019      	b.n	8004716 <cliCMix+0x1ba>
            pifLog_Print(LT_NONE, fabsf(mixsum[i]) > 0.01f ? "NG\t" : "OK\t");
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	3330      	adds	r3, #48	; 0x30
 80046e8:	443b      	add	r3, r7
 80046ea:	3b28      	subs	r3, #40	; 0x28
 80046ec:	edd3 7a00 	vldr	s15, [r3]
 80046f0:	eef0 7ae7 	vabs.f32	s15, s15
 80046f4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80047f8 <cliCMix+0x29c>
 80046f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004700:	dd01      	ble.n	8004706 <cliCMix+0x1aa>
 8004702:	4b3e      	ldr	r3, [pc, #248]	; (80047fc <cliCMix+0x2a0>)
 8004704:	e000      	b.n	8004708 <cliCMix+0x1ac>
 8004706:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <cliCMix+0x2a4>)
 8004708:	4619      	mov	r1, r3
 800470a:	2000      	movs	r0, #0
 800470c:	f00f f80a 	bl	8013724 <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004712:	3301      	adds	r3, #1
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	2b02      	cmp	r3, #2
 800471a:	dde2      	ble.n	80046e2 <cliCMix+0x186>
        pifLog_Print(LT_NONE, "\r\n");
 800471c:	4939      	ldr	r1, [pc, #228]	; (8004804 <cliCMix+0x2a8>)
 800471e:	2000      	movs	r0, #0
 8004720:	f00f f800 	bl	8013724 <pifLog_Print>
 8004724:	e0ee      	b.n	8004904 <cliCMix+0x3a8>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	3304      	adds	r3, #4
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4936      	ldr	r1, [pc, #216]	; (8004808 <cliCMix+0x2ac>)
 800472e:	4618      	mov	r0, r3
 8004730:	f01e feba 	bl	80234a8 <strcasecmp>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d111      	bne.n	800475e <cliCMix+0x202>
        // erase custom mixer
        for (i = 0; i < MAX_MOTORS; i++)
 800473a:	2300      	movs	r3, #0
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800473e:	e00a      	b.n	8004756 <cliCMix+0x1fa>
            mcfg.customMixer[i].throttle = 0.0f;
 8004740:	4a28      	ldr	r2, [pc, #160]	; (80047e4 <cliCMix+0x288>)
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	3301      	adds	r3, #1
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	4413      	add	r3, r2
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++)
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	3301      	adds	r3, #1
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	2b0b      	cmp	r3, #11
 800475a:	ddf1      	ble.n	8004740 <cliCMix+0x1e4>
 800475c:	e0d2      	b.n	8004904 <cliCMix+0x3a8>
    } else if (strcasecmp(argv[1], "load") == 0) {
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	3304      	adds	r3, #4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4929      	ldr	r1, [pc, #164]	; (800480c <cliCMix+0x2b0>)
 8004766:	4618      	mov	r0, r3
 8004768:	f01e fe9e 	bl	80234a8 <strcasecmp>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d154      	bne.n	800481c <cliCMix+0x2c0>
        if (argc > 2) {
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b02      	cmp	r3, #2
 8004776:	dd2f      	ble.n	80047d8 <cliCMix+0x27c>
            for (i = 0; ; i++) {
 8004778:	2300      	movs	r3, #0
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 800477c:	4a24      	ldr	r2, [pc, #144]	; (8004810 <cliCMix+0x2b4>)
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d104      	bne.n	8004792 <cliCMix+0x236>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8004788:	4922      	ldr	r1, [pc, #136]	; (8004814 <cliCMix+0x2b8>)
 800478a:	2000      	movs	r0, #0
 800478c:	f00e ffca 	bl	8013724 <pifLog_Print>
                    break;
 8004790:	e0b8      	b.n	8004904 <cliCMix+0x3a8>
                }
                if (strcasecmp(argv[2], mixerNames[i]) == 0) {
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	3308      	adds	r3, #8
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	491d      	ldr	r1, [pc, #116]	; (8004810 <cliCMix+0x2b4>)
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047a0:	4619      	mov	r1, r3
 80047a2:	4610      	mov	r0, r2
 80047a4:	f01e fe80 	bl	80234a8 <strcasecmp>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d110      	bne.n	80047d0 <cliCMix+0x274>
                    mixerLoadMix(i);
 80047ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047b0:	f006 fcc4 	bl	800b13c <mixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 80047b4:	4a16      	ldr	r2, [pc, #88]	; (8004810 <cliCMix+0x2b4>)
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047bc:	461a      	mov	r2, r3
 80047be:	4916      	ldr	r1, [pc, #88]	; (8004818 <cliCMix+0x2bc>)
 80047c0:	2000      	movs	r0, #0
 80047c2:	f00f f83d 	bl	8013840 <pifLog_Printf>
                    cliCMix(1, NULL);
 80047c6:	2100      	movs	r1, #0
 80047c8:	2001      	movs	r0, #1
 80047ca:	f7ff fec7 	bl	800455c <cliCMix>
                    break;
 80047ce:	e099      	b.n	8004904 <cliCMix+0x3a8>
            for (i = 0; ; i++) {
 80047d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d2:	3301      	adds	r3, #1
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 80047d6:	e7d1      	b.n	800477c <cliCMix+0x220>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 80047d8:	f06f 0302 	mvn.w	r3, #2
 80047dc:	e093      	b.n	8004906 <cliCMix+0x3aa>
 80047de:	bf00      	nop
 80047e0:	08026da8 	.word	0x08026da8
 80047e4:	200007ac 	.word	0x200007ac
 80047e8:	08026dd4 	.word	0x08026dd4
 80047ec:	08026ddc 	.word	0x08026ddc
 80047f0:	08026de0 	.word	0x08026de0
 80047f4:	08026de8 	.word	0x08026de8
 80047f8:	3c23d70a 	.word	0x3c23d70a
 80047fc:	08026df8 	.word	0x08026df8
 8004800:	08026dfc 	.word	0x08026dfc
 8004804:	08026e00 	.word	0x08026e00
 8004808:	08026e04 	.word	0x08026e04
 800480c:	08026e0c 	.word	0x08026e0c
 8004810:	08027f98 	.word	0x08027f98
 8004814:	08026e14 	.word	0x08026e14
 8004818:	08026e2c 	.word	0x08026e2c
        }
    } else {
        i = atoi(argv[1]); // get motor number
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	3304      	adds	r3, #4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f01e fcde 	bl	80231e4 <atoi>
 8004828:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (--i < MAX_MOTORS) {
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	3b01      	subs	r3, #1
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004832:	2b0b      	cmp	r3, #11
 8004834:	dc61      	bgt.n	80048fa <cliCMix+0x39e>
            if (argc > 2) {
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b02      	cmp	r3, #2
 800483a:	dd11      	ble.n	8004860 <cliCMix+0x304>
                mcfg.customMixer[i].throttle = _atof(argv[2]);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	3308      	adds	r3, #8
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fc8a 	bl	800415c <_atof>
 8004848:	eef0 7a40 	vmov.f32	s15, s0
 800484c:	4a30      	ldr	r2, [pc, #192]	; (8004910 <cliCMix+0x3b4>)
 800484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004850:	3301      	adds	r3, #1
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	4413      	add	r3, r2
 8004856:	edc3 7a00 	vstr	s15, [r3]
                check++;
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	3301      	adds	r3, #1
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 3) {
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b03      	cmp	r3, #3
 8004864:	dd12      	ble.n	800488c <cliCMix+0x330>
                mcfg.customMixer[i].roll = _atof(argv[3]);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff fc75 	bl	800415c <_atof>
 8004872:	eef0 7a40 	vmov.f32	s15, s0
 8004876:	4a26      	ldr	r2, [pc, #152]	; (8004910 <cliCMix+0x3b4>)
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	3301      	adds	r3, #1
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	4413      	add	r3, r2
 8004880:	3304      	adds	r3, #4
 8004882:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	3301      	adds	r3, #1
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 4) {
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b04      	cmp	r3, #4
 8004890:	dd11      	ble.n	80048b6 <cliCMix+0x35a>
                mcfg.customMixer[i].pitch = _atof(argv[4]);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	3310      	adds	r3, #16
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff fc5f 	bl	800415c <_atof>
 800489e:	eef0 7a40 	vmov.f32	s15, s0
 80048a2:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <cliCMix+0x3b4>)
 80048a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	4413      	add	r3, r2
 80048aa:	3318      	adds	r3, #24
 80048ac:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	3301      	adds	r3, #1
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 5) {
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b05      	cmp	r3, #5
 80048ba:	dd11      	ble.n	80048e0 <cliCMix+0x384>
                mcfg.customMixer[i].yaw = _atof(argv[5]);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	3314      	adds	r3, #20
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fc4a 	bl	800415c <_atof>
 80048c8:	eef0 7a40 	vmov.f32	s15, s0
 80048cc:	4a10      	ldr	r2, [pc, #64]	; (8004910 <cliCMix+0x3b4>)
 80048ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	4413      	add	r3, r2
 80048d4:	331c      	adds	r3, #28
 80048d6:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	3301      	adds	r3, #1
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (check != 4) {
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d004      	beq.n	80048f0 <cliCMix+0x394>
                pifLog_Print(LT_NONE, "Wrong number of arguments, needs idx thr roll pitch yaw\r\n");
 80048e6:	490b      	ldr	r1, [pc, #44]	; (8004914 <cliCMix+0x3b8>)
 80048e8:	2000      	movs	r0, #0
 80048ea:	f00e ff1b 	bl	8013724 <pifLog_Print>
 80048ee:	e009      	b.n	8004904 <cliCMix+0x3a8>
            } else {
                cliCMix(1, NULL);
 80048f0:	2100      	movs	r1, #0
 80048f2:	2001      	movs	r0, #1
 80048f4:	f7ff fe32 	bl	800455c <cliCMix>
 80048f8:	e004      	b.n	8004904 <cliCMix+0x3a8>
            }
        } else {
            pifLog_Printf(LT_NONE, "Motor number must be between 1 and %d\r\n", MAX_MOTORS);
 80048fa:	220c      	movs	r2, #12
 80048fc:	4906      	ldr	r1, [pc, #24]	; (8004918 <cliCMix+0x3bc>)
 80048fe:	2000      	movs	r0, #0
 8004900:	f00e ff9e 	bl	8013840 <pifLog_Printf>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3730      	adds	r7, #48	; 0x30
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200007ac 	.word	0x200007ac
 8004914:	08026e40 	.word	0x08026e40
 8004918:	08026e7c 	.word	0x08026e7c

0800491c <cliServo>:

static int cliServo(int argc, char *argv[])
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08c      	sub	sp, #48	; 0x30
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 8004926:	4aa2      	ldr	r2, [pc, #648]	; (8004bb0 <cliServo+0x294>)
 8004928:	f107 0320 	add.w	r3, r7, #32
 800492c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004930:	e883 0003 	stmia.w	r3, {r0, r1}

    if (argc == 1) {
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d15c      	bne.n	80049f4 <cliServo+0xd8>
        pifLog_Print(LT_NONE, "servo servo_number\tmin\tmiddle\tmax\trate\r\n");
 800493a:	499e      	ldr	r1, [pc, #632]	; (8004bb4 <cliServo+0x298>)
 800493c:	2000      	movs	r0, #0
 800493e:	f00e fef1 	bl	8013724 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004942:	2300      	movs	r3, #0
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004946:	e049      	b.n	80049dc <cliServo+0xc0>
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	3301      	adds	r3, #1
 800494c:	461a      	mov	r2, r3
 800494e:	499a      	ldr	r1, [pc, #616]	; (8004bb8 <cliServo+0x29c>)
 8004950:	2000      	movs	r0, #0
 8004952:	f00e ff75 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].min);
 8004956:	4999      	ldr	r1, [pc, #612]	; (8004bbc <cliServo+0x2a0>)
 8004958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800495a:	4613      	mov	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	440b      	add	r3, r1
 8004964:	33b8      	adds	r3, #184	; 0xb8
 8004966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800496a:	461a      	mov	r2, r3
 800496c:	4994      	ldr	r1, [pc, #592]	; (8004bc0 <cliServo+0x2a4>)
 800496e:	2000      	movs	r0, #0
 8004970:	f00e ff66 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].middle);
 8004974:	4991      	ldr	r1, [pc, #580]	; (8004bbc <cliServo+0x2a0>)
 8004976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	440b      	add	r3, r1
 8004982:	33bc      	adds	r3, #188	; 0xbc
 8004984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004988:	461a      	mov	r2, r3
 800498a:	498d      	ldr	r1, [pc, #564]	; (8004bc0 <cliServo+0x2a4>)
 800498c:	2000      	movs	r0, #0
 800498e:	f00e ff57 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].max);
 8004992:	498a      	ldr	r1, [pc, #552]	; (8004bbc <cliServo+0x2a0>)
 8004994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	440b      	add	r3, r1
 80049a0:	33ba      	adds	r3, #186	; 0xba
 80049a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049a6:	461a      	mov	r2, r3
 80049a8:	4985      	ldr	r1, [pc, #532]	; (8004bc0 <cliServo+0x2a4>)
 80049aa:	2000      	movs	r0, #0
 80049ac:	f00e ff48 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].rate);
 80049b0:	4982      	ldr	r1, [pc, #520]	; (8004bbc <cliServo+0x2a0>)
 80049b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	440b      	add	r3, r1
 80049be:	33be      	adds	r3, #190	; 0xbe
 80049c0:	f993 3000 	ldrsb.w	r3, [r3]
 80049c4:	461a      	mov	r2, r3
 80049c6:	497e      	ldr	r1, [pc, #504]	; (8004bc0 <cliServo+0x2a4>)
 80049c8:	2000      	movs	r0, #0
 80049ca:	f00e ff39 	bl	8013840 <pifLog_Printf>
            pifLog_Print(LT_NONE, "\r\n");
 80049ce:	497d      	ldr	r1, [pc, #500]	; (8004bc4 <cliServo+0x2a8>)
 80049d0:	2000      	movs	r0, #0
 80049d2:	f00e fea7 	bl	8013724 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	3301      	adds	r3, #1
 80049da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	2b07      	cmp	r3, #7
 80049e0:	ddb2      	ble.n	8004948 <cliServo+0x2c>
        }
        pifLog_Print(LT_NONE, "\r\n");
 80049e2:	4978      	ldr	r1, [pc, #480]	; (8004bc4 <cliServo+0x2a8>)
 80049e4:	2000      	movs	r0, #0
 80049e6:	f00e fe9d 	bl	8013724 <pifLog_Print>
        pifLog_Print(LT_NONE, "Reset servos: servo reset\r\n");
 80049ea:	4977      	ldr	r1, [pc, #476]	; (8004bc8 <cliServo+0x2ac>)
 80049ec:	2000      	movs	r0, #0
 80049ee:	f00e fe99 	bl	8013724 <pifLog_Print>
 80049f2:	e0d7      	b.n	8004ba4 <cliServo+0x288>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	3304      	adds	r3, #4
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4974      	ldr	r1, [pc, #464]	; (8004bcc <cliServo+0x2b0>)
 80049fc:	4618      	mov	r0, r3
 80049fe:	f01e fd53 	bl	80234a8 <strcasecmp>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d13a      	bne.n	8004a7e <cliServo+0x162>
        // erase servo config
        for (i = 0; i < MAX_SERVOS; i++) {
 8004a08:	2300      	movs	r3, #0
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a0c:	e033      	b.n	8004a76 <cliServo+0x15a>
            cfg.servoConf[i].min = 1020;
 8004a0e:	496b      	ldr	r1, [pc, #428]	; (8004bbc <cliServo+0x2a0>)
 8004a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	440b      	add	r3, r1
 8004a1c:	33b8      	adds	r3, #184	; 0xb8
 8004a1e:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8004a22:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = 2000;
 8004a24:	4965      	ldr	r1, [pc, #404]	; (8004bbc <cliServo+0x2a0>)
 8004a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	440b      	add	r3, r1
 8004a32:	33ba      	adds	r3, #186	; 0xba
 8004a34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a38:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = 1500;
 8004a3a:	4960      	ldr	r1, [pc, #384]	; (8004bbc <cliServo+0x2a0>)
 8004a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	440b      	add	r3, r1
 8004a48:	33bc      	adds	r3, #188	; 0xbc
 8004a4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004a4e:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = servoRates[i];
 8004a50:	f107 0220 	add.w	r2, r7, #32
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	4413      	add	r3, r2
 8004a58:	f993 0000 	ldrsb.w	r0, [r3]
 8004a5c:	4957      	ldr	r1, [pc, #348]	; (8004bbc <cliServo+0x2a0>)
 8004a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	440b      	add	r3, r1
 8004a6a:	33be      	adds	r3, #190	; 0xbe
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	3301      	adds	r3, #1
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a78:	2b07      	cmp	r3, #7
 8004a7a:	ddc8      	ble.n	8004a0e <cliServo+0xf2>
 8004a7c:	e092      	b.n	8004ba4 <cliServo+0x288>
        }
    } else {
        enum {SERVO = 0, MIN, MIDDLE, MAX, RATE, ARGS_COUNT};
        int args[ARGS_COUNT], check = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28

        while (check + 1 < argc && check < ARGS_COUNT) {
 8004a82:	e012      	b.n	8004aaa <cliServo+0x18e>
            args[check] = atoi(argv[check + 1]);
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	3301      	adds	r3, #1
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f01e fba7 	bl	80231e4 <atoi>
 8004a96:	4602      	mov	r2, r0
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	3330      	adds	r3, #48	; 0x30
 8004a9e:	443b      	add	r3, r7
 8004aa0:	f843 2c24 	str.w	r2, [r3, #-36]
            check++;
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	62bb      	str	r3, [r7, #40]	; 0x28
        while (check + 1 < argc && check < ARGS_COUNT) {
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	3301      	adds	r3, #1
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	dd02      	ble.n	8004aba <cliServo+0x19e>
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	dde4      	ble.n	8004a84 <cliServo+0x168>
        }

        if (check != ARGS_COUNT) {
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	2b05      	cmp	r3, #5
 8004abe:	d005      	beq.n	8004acc <cliServo+0x1b0>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs servo_number min middle max rate\r\n");
 8004ac0:	4943      	ldr	r1, [pc, #268]	; (8004bd0 <cliServo+0x2b4>)
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f00e fe2e 	bl	8013724 <pifLog_Print>
        	return PIF_LOG_CMD_NO_ERROR;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e06c      	b.n	8004ba6 <cliServo+0x28a>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	dd60      	ble.n	8004b94 <cliServo+0x278>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	dc5d      	bgt.n	8004b94 <cliServo+0x278>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004ad8:	693b      	ldr	r3, [r7, #16]
        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004ada:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004ade:	db59      	blt.n	8004b94 <cliServo+0x278>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f640 0234 	movw	r2, #2100	; 0x834
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	dc54      	bgt.n	8004b94 <cliServo+0x278>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004aea:	69bb      	ldr	r3, [r7, #24]
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004aec:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004af0:	db50      	blt.n	8004b94 <cliServo+0x278>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f640 0234 	movw	r2, #2100	; 0x834
 8004af8:	4293      	cmp	r3, r2
 8004afa:	dc4b      	bgt.n	8004b94 <cliServo+0x278>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004afc:	697b      	ldr	r3, [r7, #20]
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004afe:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004b02:	db47      	blt.n	8004b94 <cliServo+0x278>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f640 0234 	movw	r2, #2100	; 0x834
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	dc42      	bgt.n	8004b94 <cliServo+0x278>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004b0e:	69fb      	ldr	r3, [r7, #28]
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004b10:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004b14:	db3e      	blt.n	8004b94 <cliServo+0x278>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	2b64      	cmp	r3, #100	; 0x64
 8004b1a:	dc3b      	bgt.n	8004b94 <cliServo+0x278>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	697b      	ldr	r3, [r7, #20]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004b20:	429a      	cmp	r2, r3
 8004b22:	dc37      	bgt.n	8004b94 <cliServo+0x278>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	dc33      	bgt.n	8004b94 <cliServo+0x278>
            args[SERVO]--;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]
            cfg.servoConf[args[SERVO]].min = args[MIN];
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	b218      	sxth	r0, r3
 8004b38:	4920      	ldr	r1, [pc, #128]	; (8004bbc <cliServo+0x2a0>)
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	440b      	add	r3, r1
 8004b44:	33b8      	adds	r3, #184	; 0xb8
 8004b46:	4602      	mov	r2, r0
 8004b48:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].max = args[MAX];
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	b218      	sxth	r0, r3
 8004b50:	491a      	ldr	r1, [pc, #104]	; (8004bbc <cliServo+0x2a0>)
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	440b      	add	r3, r1
 8004b5c:	33ba      	adds	r3, #186	; 0xba
 8004b5e:	4602      	mov	r2, r0
 8004b60:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].middle = args[MIDDLE];
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	b218      	sxth	r0, r3
 8004b68:	4914      	ldr	r1, [pc, #80]	; (8004bbc <cliServo+0x2a0>)
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	440b      	add	r3, r1
 8004b74:	33bc      	adds	r3, #188	; 0xbc
 8004b76:	4602      	mov	r2, r0
 8004b78:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].rate = args[RATE];
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	b258      	sxtb	r0, r3
 8004b80:	490e      	ldr	r1, [pc, #56]	; (8004bbc <cliServo+0x2a0>)
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	440b      	add	r3, r1
 8004b8c:	33be      	adds	r3, #190	; 0xbe
 8004b8e:	4602      	mov	r2, r0
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e003      	b.n	8004b9c <cliServo+0x280>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments, range for min, max and middle [900,2100], min <= middle <= max, range for rate [-100,100]\r\n");
 8004b94:	490f      	ldr	r1, [pc, #60]	; (8004bd4 <cliServo+0x2b8>)
 8004b96:	2000      	movs	r0, #0
 8004b98:	f00e fdc4 	bl	8013724 <pifLog_Print>
        cliServo(1, NULL);
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	f7ff febc 	bl	800491c <cliServo>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3730      	adds	r7, #48	; 0x30
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	08026fb8 	.word	0x08026fb8
 8004bb4:	08026ea4 	.word	0x08026ea4
 8004bb8:	08026dd4 	.word	0x08026dd4
 8004bbc:	20000d18 	.word	0x20000d18
 8004bc0:	08026ed0 	.word	0x08026ed0
 8004bc4:	08026e00 	.word	0x08026e00
 8004bc8:	08026ed4 	.word	0x08026ed4
 8004bcc:	08026e04 	.word	0x08026e04
 8004bd0:	08026ef0 	.word	0x08026ef0
 8004bd4:	08026f3c 	.word	0x08026f3c

08004bd8 <cliServoMix>:

static int cliServoMix(int argc, char *argv[])
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b090      	sub	sp, #64	; 0x40
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
    int i;
    int args[8], check = 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	63bb      	str	r3, [r7, #56]	; 0x38

    if (argc == 1) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	f040 808a 	bne.w	8004d02 <cliServoMix+0x12a>
        pifLog_Print(LT_NONE, "Custom servo mixer: \r\nchange mixer: smix rule\ttarget_channel\tinput_channel\trate\tspeed\t\tmin\tmax\tbox\r\n");
 8004bee:	49ab      	ldr	r1, [pc, #684]	; (8004e9c <cliServoMix+0x2c4>)
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	f00e fd97 	bl	8013724 <pifLog_Print>
        pifLog_Print(LT_NONE, "reset mixer: smix reset\r\nload mixer: smix load\r\nchange direction of channel: smix direction\r\n");
 8004bf6:	49aa      	ldr	r1, [pc, #680]	; (8004ea0 <cliServoMix+0x2c8>)
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f00e fd93 	bl	8013724 <pifLog_Print>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004bfe:	2300      	movs	r3, #0
 8004c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c02:	e074      	b.n	8004cee <cliServoMix+0x116>
            if (mcfg.customServoMixer[i].rate == 0)
 8004c04:	49a7      	ldr	r1, [pc, #668]	; (8004ea4 <cliServoMix+0x2cc>)
 8004c06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	440b      	add	r3, r1
 8004c10:	33d2      	adds	r3, #210	; 0xd2
 8004c12:	f993 3000 	ldrsb.w	r3, [r3]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d06d      	beq.n	8004cf6 <cliServoMix+0x11e>
                break;
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	461a      	mov	r2, r3
 8004c20:	49a1      	ldr	r1, [pc, #644]	; (8004ea8 <cliServoMix+0x2d0>)
 8004c22:	2000      	movs	r0, #0
 8004c24:	f00e fe0c 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].targetChannel + 1);
 8004c28:	499e      	ldr	r1, [pc, #632]	; (8004ea4 <cliServoMix+0x2cc>)
 8004c2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	440b      	add	r3, r1
 8004c34:	33d0      	adds	r3, #208	; 0xd0
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	499b      	ldr	r1, [pc, #620]	; (8004eac <cliServoMix+0x2d4>)
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f00e fdfe 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].fromChannel + 1);
 8004c44:	4997      	ldr	r1, [pc, #604]	; (8004ea4 <cliServoMix+0x2cc>)
 8004c46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c48:	4613      	mov	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	1a9b      	subs	r3, r3, r2
 8004c4e:	440b      	add	r3, r1
 8004c50:	33d1      	adds	r3, #209	; 0xd1
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	3301      	adds	r3, #1
 8004c56:	461a      	mov	r2, r3
 8004c58:	4994      	ldr	r1, [pc, #592]	; (8004eac <cliServoMix+0x2d4>)
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	f00e fdf0 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].rate);
 8004c60:	4990      	ldr	r1, [pc, #576]	; (8004ea4 <cliServoMix+0x2cc>)
 8004c62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c64:	4613      	mov	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	33d2      	adds	r3, #210	; 0xd2
 8004c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8004c72:	461a      	mov	r2, r3
 8004c74:	498d      	ldr	r1, [pc, #564]	; (8004eac <cliServoMix+0x2d4>)
 8004c76:	2000      	movs	r0, #0
 8004c78:	f00e fde2 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].speed);
 8004c7c:	4989      	ldr	r1, [pc, #548]	; (8004ea4 <cliServoMix+0x2cc>)
 8004c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c80:	4613      	mov	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	440b      	add	r3, r1
 8004c88:	33d3      	adds	r3, #211	; 0xd3
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4987      	ldr	r1, [pc, #540]	; (8004eac <cliServoMix+0x2d4>)
 8004c90:	2000      	movs	r0, #0
 8004c92:	f00e fdd5 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].min);
 8004c96:	4983      	ldr	r1, [pc, #524]	; (8004ea4 <cliServoMix+0x2cc>)
 8004c98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	33d4      	adds	r3, #212	; 0xd4
 8004ca4:	f993 3000 	ldrsb.w	r3, [r3]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4980      	ldr	r1, [pc, #512]	; (8004eac <cliServoMix+0x2d4>)
 8004cac:	2000      	movs	r0, #0
 8004cae:	f00e fdc7 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].max);
 8004cb2:	497c      	ldr	r1, [pc, #496]	; (8004ea4 <cliServoMix+0x2cc>)
 8004cb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	33d5      	adds	r3, #213	; 0xd5
 8004cc0:	f993 3000 	ldrsb.w	r3, [r3]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4979      	ldr	r1, [pc, #484]	; (8004eac <cliServoMix+0x2d4>)
 8004cc8:	2000      	movs	r0, #0
 8004cca:	f00e fdb9 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 8004cce:	4975      	ldr	r1, [pc, #468]	; (8004ea4 <cliServoMix+0x2cc>)
 8004cd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	440b      	add	r3, r1
 8004cda:	33d6      	adds	r3, #214	; 0xd6
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4973      	ldr	r1, [pc, #460]	; (8004eb0 <cliServoMix+0x2d8>)
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	f00e fdac 	bl	8013840 <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cea:	3301      	adds	r3, #1
 8004cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf0:	2b0f      	cmp	r3, #15
 8004cf2:	dd87      	ble.n	8004c04 <cliServoMix+0x2c>
 8004cf4:	e000      	b.n	8004cf8 <cliServoMix+0x120>
                break;
 8004cf6:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004cf8:	496e      	ldr	r1, [pc, #440]	; (8004eb4 <cliServoMix+0x2dc>)
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	f00e fd12 	bl	8013724 <pifLog_Print>
 8004d00:	e23b      	b.n	800517a <cliServoMix+0x5a2>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	3304      	adds	r3, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	496b      	ldr	r1, [pc, #428]	; (8004eb8 <cliServoMix+0x2e0>)
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f01e fbcc 	bl	80234a8 <strcasecmp>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d118      	bne.n	8004d48 <cliServoMix+0x170>
        // erase custom mixer
        memset(mcfg.customServoMixer, 0, sizeof(mcfg.customServoMixer));
 8004d16:	2270      	movs	r2, #112	; 0x70
 8004d18:	2100      	movs	r1, #0
 8004d1a:	4868      	ldr	r0, [pc, #416]	; (8004ebc <cliServoMix+0x2e4>)
 8004d1c:	f01e fab6 	bl	802328c <memset>
        for (i = 0; i < MAX_SERVOS; i++)
 8004d20:	2300      	movs	r3, #0
 8004d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d24:	e00c      	b.n	8004d40 <cliServoMix+0x168>
            cfg.servoConf[i].direction = 0;
 8004d26:	4966      	ldr	r1, [pc, #408]	; (8004ec0 <cliServoMix+0x2e8>)
 8004d28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	440b      	add	r3, r1
 8004d34:	33c0      	adds	r3, #192	; 0xc0
 8004d36:	2200      	movs	r2, #0
 8004d38:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++)
 8004d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d42:	2b07      	cmp	r3, #7
 8004d44:	ddef      	ble.n	8004d26 <cliServoMix+0x14e>
 8004d46:	e218      	b.n	800517a <cliServoMix+0x5a2>
    } else if (strcasecmp(argv[1], "load") == 0) {
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	495d      	ldr	r1, [pc, #372]	; (8004ec4 <cliServoMix+0x2ec>)
 8004d50:	4618      	mov	r0, r3
 8004d52:	f01e fba9 	bl	80234a8 <strcasecmp>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d135      	bne.n	8004dc8 <cliServoMix+0x1f0>
        if (argc > 2) {
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	dd2f      	ble.n	8004dc2 <cliServoMix+0x1ea>
            for (i = 0; ; i++) {
 8004d62:	2300      	movs	r3, #0
 8004d64:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004d66:	4a58      	ldr	r2, [pc, #352]	; (8004ec8 <cliServoMix+0x2f0>)
 8004d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d104      	bne.n	8004d7c <cliServoMix+0x1a4>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8004d72:	4956      	ldr	r1, [pc, #344]	; (8004ecc <cliServoMix+0x2f4>)
 8004d74:	2000      	movs	r0, #0
 8004d76:	f00e fcd5 	bl	8013724 <pifLog_Print>
                    break;
 8004d7a:	e1fe      	b.n	800517a <cliServoMix+0x5a2>
                }
                if (strcasecmp(argv[2], mixerNames[i]) == 0) {
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	3308      	adds	r3, #8
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4951      	ldr	r1, [pc, #324]	; (8004ec8 <cliServoMix+0x2f0>)
 8004d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	f01e fb8b 	bl	80234a8 <strcasecmp>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d110      	bne.n	8004dba <cliServoMix+0x1e2>
                    servoMixerLoadMix(i);
 8004d98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004d9a:	f006 f957 	bl	800b04c <servoMixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 8004d9e:	4a4a      	ldr	r2, [pc, #296]	; (8004ec8 <cliServoMix+0x2f0>)
 8004da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da6:	461a      	mov	r2, r3
 8004da8:	4949      	ldr	r1, [pc, #292]	; (8004ed0 <cliServoMix+0x2f8>)
 8004daa:	2000      	movs	r0, #0
 8004dac:	f00e fd48 	bl	8013840 <pifLog_Printf>
                    cliServoMix(1, NULL);
 8004db0:	2100      	movs	r1, #0
 8004db2:	2001      	movs	r0, #1
 8004db4:	f7ff ff10 	bl	8004bd8 <cliServoMix>
                    break;
 8004db8:	e1df      	b.n	800517a <cliServoMix+0x5a2>
            for (i = 0; ; i++) {
 8004dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004dc0:	e7d1      	b.n	8004d66 <cliServoMix+0x18e>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004dc2:	f06f 0302 	mvn.w	r3, #2
 8004dc6:	e1d9      	b.n	800517c <cliServoMix+0x5a4>
        }
    } else if (strcasecmp(argv[1], "direction") == 0) {
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4941      	ldr	r1, [pc, #260]	; (8004ed4 <cliServoMix+0x2fc>)
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f01e fb69 	bl	80234a8 <strcasecmp>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f040 8128 	bne.w	800502e <cliServoMix+0x456>
        enum {SERVO = 0, INPUT_, DIRECTION, ARGS_COUNT};
        int servoIndex, channel;
        char* smix_dir[2] = { "smix", "direction" };
 8004dde:	4a3e      	ldr	r2, [pc, #248]	; (8004ed8 <cliServoMix+0x300>)
 8004de0:	f107 0308 	add.w	r3, r7, #8
 8004de4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004de8:	e883 0003 	stmia.w	r3, {r0, r1}

        if (argc == 2) {
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	f040 8095 	bne.w	8004f1e <cliServoMix+0x346>
            pifLog_Print(LT_NONE, "change the direction a servo reacts to a input channel: \r\nservo input -1|1\r\n");
 8004df4:	4939      	ldr	r1, [pc, #228]	; (8004edc <cliServoMix+0x304>)
 8004df6:	2000      	movs	r0, #0
 8004df8:	f00e fc94 	bl	8013724 <pifLog_Print>
            pifLog_Print(LT_NONE, "s");
 8004dfc:	4938      	ldr	r1, [pc, #224]	; (8004ee0 <cliServoMix+0x308>)
 8004dfe:	2000      	movs	r0, #0
 8004e00:	f00e fc90 	bl	8013724 <pifLog_Print>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004e04:	2300      	movs	r3, #0
 8004e06:	633b      	str	r3, [r7, #48]	; 0x30
 8004e08:	e009      	b.n	8004e1e <cliServoMix+0x246>
                pifLog_Printf(LT_NONE, "\ti%d", channel + 1);
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	461a      	mov	r2, r3
 8004e10:	4934      	ldr	r1, [pc, #208]	; (8004ee4 <cliServoMix+0x30c>)
 8004e12:	2000      	movs	r0, #0
 8004e14:	f00e fd14 	bl	8013840 <pifLog_Printf>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	2b0b      	cmp	r3, #11
 8004e22:	ddf2      	ble.n	8004e0a <cliServoMix+0x232>
            pifLog_Print(LT_NONE, "\r\n");
 8004e24:	4923      	ldr	r1, [pc, #140]	; (8004eb4 <cliServoMix+0x2dc>)
 8004e26:	2000      	movs	r0, #0
 8004e28:	f00e fc7c 	bl	8013724 <pifLog_Print>

            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e30:	e02f      	b.n	8004e92 <cliServoMix+0x2ba>
                pifLog_Printf(LT_NONE, "%d", servoIndex + 1);
 8004e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e34:	3301      	adds	r3, #1
 8004e36:	461a      	mov	r2, r3
 8004e38:	492b      	ldr	r1, [pc, #172]	; (8004ee8 <cliServoMix+0x310>)
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f00e fd00 	bl	8013840 <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004e40:	2300      	movs	r3, #0
 8004e42:	633b      	str	r3, [r7, #48]	; 0x30
 8004e44:	e01b      	b.n	8004e7e <cliServoMix+0x2a6>
                    pifLog_Printf(LT_NONE, "\t%s  ", (cfg.servoConf[servoIndex].direction & (1 << channel)) ? "r" : "n");
 8004e46:	491e      	ldr	r1, [pc, #120]	; (8004ec0 <cliServoMix+0x2e8>)
 8004e48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	440b      	add	r3, r1
 8004e54:	33c0      	adds	r3, #192	; 0xc0
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5c:	fa42 f303 	asr.w	r3, r2, r3
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <cliServoMix+0x294>
 8004e68:	4b20      	ldr	r3, [pc, #128]	; (8004eec <cliServoMix+0x314>)
 8004e6a:	e000      	b.n	8004e6e <cliServoMix+0x296>
 8004e6c:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <cliServoMix+0x318>)
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4920      	ldr	r1, [pc, #128]	; (8004ef4 <cliServoMix+0x31c>)
 8004e72:	2000      	movs	r0, #0
 8004e74:	f00e fce4 	bl	8013840 <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	2b0b      	cmp	r3, #11
 8004e82:	dde0      	ble.n	8004e46 <cliServoMix+0x26e>
                pifLog_Print(LT_NONE, "\r\n");
 8004e84:	490b      	ldr	r1, [pc, #44]	; (8004eb4 <cliServoMix+0x2dc>)
 8004e86:	2000      	movs	r0, #0
 8004e88:	f00e fc4c 	bl	8013724 <pifLog_Print>
            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8e:	3301      	adds	r3, #1
 8004e90:	637b      	str	r3, [r7, #52]	; 0x34
 8004e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e94:	2b07      	cmp	r3, #7
 8004e96:	ddcc      	ble.n	8004e32 <cliServoMix+0x25a>
            }
            return PIF_LOG_CMD_NO_ERROR;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e16f      	b.n	800517c <cliServoMix+0x5a4>
 8004e9c:	08026fc0 	.word	0x08026fc0
 8004ea0:	08027028 	.word	0x08027028
 8004ea4:	200007ac 	.word	0x200007ac
 8004ea8:	08026dd4 	.word	0x08026dd4
 8004eac:	08026ed0 	.word	0x08026ed0
 8004eb0:	08027088 	.word	0x08027088
 8004eb4:	08026e00 	.word	0x08026e00
 8004eb8:	08026e04 	.word	0x08026e04
 8004ebc:	2000087c 	.word	0x2000087c
 8004ec0:	20000d18 	.word	0x20000d18
 8004ec4:	08026e0c 	.word	0x08026e0c
 8004ec8:	08027f98 	.word	0x08027f98
 8004ecc:	08026e14 	.word	0x08026e14
 8004ed0:	08026e2c 	.word	0x08026e2c
 8004ed4:	080260c4 	.word	0x080260c4
 8004ed8:	080271c4 	.word	0x080271c4
 8004edc:	08027090 	.word	0x08027090
 8004ee0:	080270e0 	.word	0x080270e0
 8004ee4:	080270e4 	.word	0x080270e4
 8004ee8:	080270ec 	.word	0x080270ec
 8004eec:	080270f0 	.word	0x080270f0
 8004ef0:	080270f4 	.word	0x080270f4
 8004ef4:	080270f8 	.word	0x080270f8
        }

        while (check + 1 < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check + 1]);
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	3301      	adds	r3, #1
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	4413      	add	r3, r2
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f01e f96d 	bl	80231e4 <atoi>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	3340      	adds	r3, #64	; 0x40
 8004f12:	443b      	add	r3, r7
 8004f14:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check + 1 < argc && check < ARGS_COUNT) {
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	3301      	adds	r3, #1
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	dd02      	ble.n	8004f2e <cliServoMix+0x356>
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	dde4      	ble.n	8004ef8 <cliServoMix+0x320>
        }

        if (check != ARGS_COUNT) {
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d005      	beq.n	8004f40 <cliServoMix+0x368>
            pifLog_Print(LT_NONE, "Wrong number of arguments, needs servo input direction\r\n");
 8004f34:	4993      	ldr	r1, [pc, #588]	; (8005184 <cliServoMix+0x5ac>)
 8004f36:	2000      	movs	r0, #0
 8004f38:	f00e fbf4 	bl	8013724 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e11d      	b.n	800517c <cliServoMix+0x5a4>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS && args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS && (args[DIRECTION] == -1 || args[DIRECTION] == 1)) {
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	dd55      	ble.n	8004ff2 <cliServoMix+0x41a>
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	dc52      	bgt.n	8004ff2 <cliServoMix+0x41a>
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	dd4f      	ble.n	8004ff2 <cliServoMix+0x41a>
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b0c      	cmp	r3, #12
 8004f56:	dc4c      	bgt.n	8004ff2 <cliServoMix+0x41a>
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	d002      	beq.n	8004f66 <cliServoMix+0x38e>
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d145      	bne.n	8004ff2 <cliServoMix+0x41a>
            args[SERVO] -= 1;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	613b      	str	r3, [r7, #16]
            args[INPUT_] -= 1;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	617b      	str	r3, [r7, #20]
            if (args[DIRECTION] == -1)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f78:	d11c      	bne.n	8004fb4 <cliServoMix+0x3dc>
                cfg.servoConf[args[SERVO]].direction |= 1 << args[INPUT_];
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4982      	ldr	r1, [pc, #520]	; (8005188 <cliServoMix+0x5b0>)
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	440b      	add	r3, r1
 8004f88:	33c0      	adds	r3, #192	; 0xc0
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	b21a      	sxth	r2, r3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2101      	movs	r1, #1
 8004f92:	fa01 f303 	lsl.w	r3, r1, r3
 8004f96:	b21b      	sxth	r3, r3
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	b21b      	sxth	r3, r3
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	b298      	uxth	r0, r3
 8004fa0:	4979      	ldr	r1, [pc, #484]	; (8005188 <cliServoMix+0x5b0>)
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	440b      	add	r3, r1
 8004fac:	33c0      	adds	r3, #192	; 0xc0
 8004fae:	4602      	mov	r2, r0
 8004fb0:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 8004fb2:	e022      	b.n	8004ffa <cliServoMix+0x422>
            else
                cfg.servoConf[args[SERVO]].direction &= ~(1 << args[INPUT_]);
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4974      	ldr	r1, [pc, #464]	; (8005188 <cliServoMix+0x5b0>)
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	440b      	add	r3, r1
 8004fc2:	33c0      	adds	r3, #192	; 0xc0
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b21a      	sxth	r2, r3
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2101      	movs	r1, #1
 8004fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd0:	b21b      	sxth	r3, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	b21b      	sxth	r3, r3
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	b21b      	sxth	r3, r3
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	b298      	uxth	r0, r3
 8004fde:	496a      	ldr	r1, [pc, #424]	; (8005188 <cliServoMix+0x5b0>)
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	440b      	add	r3, r1
 8004fea:	33c0      	adds	r3, #192	; 0xc0
 8004fec:	4602      	mov	r2, r0
 8004fee:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 8004ff0:	e003      	b.n	8004ffa <cliServoMix+0x422>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 8004ff2:	4966      	ldr	r1, [pc, #408]	; (800518c <cliServoMix+0x5b4>)
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	f00e fb95 	bl	8013724 <pifLog_Print>

        cliServoMix(2, smix_dir);
 8004ffa:	f107 0308 	add.w	r3, r7, #8
 8004ffe:	4619      	mov	r1, r3
 8005000:	2002      	movs	r0, #2
 8005002:	f7ff fde9 	bl	8004bd8 <cliServoMix>
 8005006:	e0b8      	b.n	800517a <cliServoMix+0x5a2>
    } else {
        enum {RULE = 0, TARGET, INPUT_, RATE, SPEED, MIN, MAX, BOX, ARGS_COUNT};
        while (check + 1 < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check + 1]);
 8005008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500a:	3301      	adds	r3, #1
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	4413      	add	r3, r2
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	f01e f8e5 	bl	80231e4 <atoi>
 800501a:	4602      	mov	r2, r0
 800501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	3340      	adds	r3, #64	; 0x40
 8005022:	443b      	add	r3, r7
 8005024:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8005028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502a:	3301      	adds	r3, #1
 800502c:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check + 1 < argc && check < ARGS_COUNT) {
 800502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005030:	3301      	adds	r3, #1
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	429a      	cmp	r2, r3
 8005036:	dd02      	ble.n	800503e <cliServoMix+0x466>
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	2b07      	cmp	r3, #7
 800503c:	dde4      	ble.n	8005008 <cliServoMix+0x430>
        }

        if (check != ARGS_COUNT) {
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	2b08      	cmp	r3, #8
 8005042:	d005      	beq.n	8005050 <cliServoMix+0x478>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs rule target_channel input_channel rate speed min max box\r\n");
 8005044:	4952      	ldr	r1, [pc, #328]	; (8005190 <cliServoMix+0x5b8>)
 8005046:	2000      	movs	r0, #0
 8005048:	f00e fb6c 	bl	8013724 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 800504c:	2300      	movs	r3, #0
 800504e:	e095      	b.n	800517c <cliServoMix+0x5a4>
        }

        i = args[RULE] - 1;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	3b01      	subs	r3, #1
 8005054:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (i >= 0 && i < MAX_SERVO_RULES &&
 8005056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005058:	2b00      	cmp	r3, #0
 800505a:	f2c0 808a 	blt.w	8005172 <cliServoMix+0x59a>
 800505e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005060:	2b0f      	cmp	r3, #15
 8005062:	f300 8086 	bgt.w	8005172 <cliServoMix+0x59a>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 8005066:	697b      	ldr	r3, [r7, #20]
        if (i >= 0 && i < MAX_SERVO_RULES &&
 8005068:	2b00      	cmp	r3, #0
 800506a:	f340 8082 	ble.w	8005172 <cliServoMix+0x59a>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b08      	cmp	r3, #8
 8005072:	dc7e      	bgt.n	8005172 <cliServoMix+0x59a>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 8005074:	69bb      	ldr	r3, [r7, #24]
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 8005076:	2b00      	cmp	r3, #0
 8005078:	dd7b      	ble.n	8005172 <cliServoMix+0x59a>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b0c      	cmp	r3, #12
 800507e:	dc78      	bgt.n	8005172 <cliServoMix+0x59a>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8005080:	69fb      	ldr	r3, [r7, #28]
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 8005082:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8005086:	db74      	blt.n	8005172 <cliServoMix+0x59a>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2b64      	cmp	r3, #100	; 0x64
 800508c:	dc71      	bgt.n	8005172 <cliServoMix+0x59a>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 800508e:	6a3b      	ldr	r3, [r7, #32]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8005090:	2b00      	cmp	r3, #0
 8005092:	db6e      	blt.n	8005172 <cliServoMix+0x59a>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	2bff      	cmp	r3, #255	; 0xff
 8005098:	dc6b      	bgt.n	8005172 <cliServoMix+0x59a>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 800509c:	2b00      	cmp	r3, #0
 800509e:	db68      	blt.n	8005172 <cliServoMix+0x59a>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	2b64      	cmp	r3, #100	; 0x64
 80050a4:	dc65      	bgt.n	8005172 <cliServoMix+0x59a>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	db62      	blt.n	8005172 <cliServoMix+0x59a>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	2b64      	cmp	r3, #100	; 0x64
 80050b0:	dc5f      	bgt.n	8005172 <cliServoMix+0x59a>
 80050b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	429a      	cmp	r2, r3
 80050b8:	da5b      	bge.n	8005172 <cliServoMix+0x59a>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 80050bc:	2b00      	cmp	r3, #0
 80050be:	db58      	blt.n	8005172 <cliServoMix+0x59a>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	dc55      	bgt.n	8005172 <cliServoMix+0x59a>
            mcfg.customServoMixer[i].targetChannel = args[TARGET] - 1;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b2d8      	uxtb	r0, r3
 80050ce:	4931      	ldr	r1, [pc, #196]	; (8005194 <cliServoMix+0x5bc>)
 80050d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050d2:	4613      	mov	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	440b      	add	r3, r1
 80050da:	33d0      	adds	r3, #208	; 0xd0
 80050dc:	4602      	mov	r2, r0
 80050de:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = args[INPUT_] - 1;
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b2d8      	uxtb	r0, r3
 80050e8:	492a      	ldr	r1, [pc, #168]	; (8005194 <cliServoMix+0x5bc>)
 80050ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050ec:	4613      	mov	r3, r2
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	440b      	add	r3, r1
 80050f4:	33d1      	adds	r3, #209	; 0xd1
 80050f6:	4602      	mov	r2, r0
 80050f8:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = args[RATE];
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	b258      	sxtb	r0, r3
 80050fe:	4925      	ldr	r1, [pc, #148]	; (8005194 <cliServoMix+0x5bc>)
 8005100:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	440b      	add	r3, r1
 800510a:	33d2      	adds	r3, #210	; 0xd2
 800510c:	4602      	mov	r2, r0
 800510e:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = args[SPEED];
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	b2d8      	uxtb	r0, r3
 8005114:	491f      	ldr	r1, [pc, #124]	; (8005194 <cliServoMix+0x5bc>)
 8005116:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005118:	4613      	mov	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	1a9b      	subs	r3, r3, r2
 800511e:	440b      	add	r3, r1
 8005120:	33d3      	adds	r3, #211	; 0xd3
 8005122:	4602      	mov	r2, r0
 8005124:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = args[MIN];
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	b258      	sxtb	r0, r3
 800512a:	491a      	ldr	r1, [pc, #104]	; (8005194 <cliServoMix+0x5bc>)
 800512c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800512e:	4613      	mov	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	1a9b      	subs	r3, r3, r2
 8005134:	440b      	add	r3, r1
 8005136:	33d4      	adds	r3, #212	; 0xd4
 8005138:	4602      	mov	r2, r0
 800513a:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = args[MAX];
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	b258      	sxtb	r0, r3
 8005140:	4914      	ldr	r1, [pc, #80]	; (8005194 <cliServoMix+0x5bc>)
 8005142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	440b      	add	r3, r1
 800514c:	33d5      	adds	r3, #213	; 0xd5
 800514e:	4602      	mov	r2, r0
 8005150:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = args[BOX];
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	b2d8      	uxtb	r0, r3
 8005156:	490f      	ldr	r1, [pc, #60]	; (8005194 <cliServoMix+0x5bc>)
 8005158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	440b      	add	r3, r1
 8005162:	33d6      	adds	r3, #214	; 0xd6
 8005164:	4602      	mov	r2, r0
 8005166:	701a      	strb	r2, [r3, #0]
            cliServoMix(1, NULL);
 8005168:	2100      	movs	r1, #0
 800516a:	2001      	movs	r0, #1
 800516c:	f7ff fd34 	bl	8004bd8 <cliServoMix>
 8005170:	e003      	b.n	800517a <cliServoMix+0x5a2>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 8005172:	4906      	ldr	r1, [pc, #24]	; (800518c <cliServoMix+0x5b4>)
 8005174:	2000      	movs	r0, #0
 8005176:	f00e fad5 	bl	8013724 <pifLog_Print>
    }
	return PIF_LOG_CMD_NO_ERROR;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3740      	adds	r7, #64	; 0x40
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	08027100 	.word	0x08027100
 8005188:	20000d18 	.word	0x20000d18
 800518c:	0802713c 	.word	0x0802713c
 8005190:	08027160 	.word	0x08027160
 8005194:	200007ac 	.word	0x200007ac

08005198 <cliDefaults>:

static int cliDefaults(int argc, char *argv[])
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Resetting to defaults...\r\n");
 80051a2:	490b      	ldr	r1, [pc, #44]	; (80051d0 <cliDefaults+0x38>)
 80051a4:	2000      	movs	r0, #0
 80051a6:	f00e fabd 	bl	8013724 <pifLog_Print>
    checkFirstTime(true);
 80051aa:	2001      	movs	r0, #1
 80051ac:	f001 fb10 	bl	80067d0 <checkFirstTime>
    pifLog_Print(LT_NONE, "Rebooting...");
 80051b0:	4908      	ldr	r1, [pc, #32]	; (80051d4 <cliDefaults+0x3c>)
 80051b2:	2000      	movs	r0, #0
 80051b4:	f00e fab6 	bl	8013724 <pifLog_Print>
    pif_Delay1ms(10);
 80051b8:	200a      	movs	r0, #10
 80051ba:	f00c fbe7 	bl	801198c <pif_Delay1ms>
    systemReset(false);
 80051be:	2000      	movs	r0, #0
 80051c0:	f7fc ff2e 	bl	8002020 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	080271cc 	.word	0x080271cc
 80051d4:	080271e8 	.word	0x080271e8

080051d8 <cliDump>:

static int cliDump(int argc, char *argv[])
{
 80051d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051da:	b093      	sub	sp, #76	; 0x4c
 80051dc:	af04      	add	r7, sp, #16
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
    char buf[16];
    float thr, roll, pitch, yaw;
    uint32_t mask;
    const clivalue_t *setval;

    cliVersion(1, NULL);
 80051e2:	2100      	movs	r1, #0
 80051e4:	2001      	movs	r0, #1
 80051e6:	f001 f86d 	bl	80062c4 <cliVersion>
    pifLog_Print(LT_NONE, "Current Config: Copy everything below here...\r\n");
 80051ea:	49bc      	ldr	r1, [pc, #752]	; (80054dc <cliDump+0x304>)
 80051ec:	2000      	movs	r0, #0
 80051ee:	f00e fa99 	bl	8013724 <pifLog_Print>

    // print out aux switches
    cliAux(1, NULL);
 80051f2:	2100      	movs	r1, #0
 80051f4:	2001      	movs	r0, #1
 80051f6:	f7ff f961 	bl	80044bc <cliAux>

    // print out current motor mix
    pifLog_Printf(LT_NONE, "mixer %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 80051fa:	4bb9      	ldr	r3, [pc, #740]	; (80054e0 <cliDump+0x308>)
 80051fc:	795b      	ldrb	r3, [r3, #5]
 80051fe:	3b01      	subs	r3, #1
 8005200:	4ab8      	ldr	r2, [pc, #736]	; (80054e4 <cliDump+0x30c>)
 8005202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005206:	461a      	mov	r2, r3
 8005208:	49b7      	ldr	r1, [pc, #732]	; (80054e8 <cliDump+0x310>)
 800520a:	2000      	movs	r0, #0
 800520c:	f00e fb18 	bl	8013840 <pifLog_Printf>

    // print custom mix if exists
    if (mcfg.customMixer[0].throttle != 0.0f) {
 8005210:	4bb3      	ldr	r3, [pc, #716]	; (80054e0 <cliDump+0x308>)
 8005212:	edd3 7a04 	vldr	s15, [r3, #16]
 8005216:	eef5 7a40 	vcmp.f32	s15, #0.0
 800521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521e:	f000 80a4 	beq.w	800536a <cliDump+0x192>
        for (i = 0; i < MAX_MOTORS; i++) {
 8005222:	2300      	movs	r3, #0
 8005224:	637b      	str	r3, [r7, #52]	; 0x34
 8005226:	e093      	b.n	8005350 <cliDump+0x178>
            if (mcfg.customMixer[i].throttle == 0.0f)
 8005228:	4aad      	ldr	r2, [pc, #692]	; (80054e0 <cliDump+0x308>)
 800522a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522c:	3301      	adds	r3, #1
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	4413      	add	r3, r2
 8005232:	edd3 7a00 	vldr	s15, [r3]
 8005236:	eef5 7a40 	vcmp.f32	s15, #0.0
 800523a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523e:	f000 808c 	beq.w	800535a <cliDump+0x182>
                break;
            thr = mcfg.customMixer[i].throttle;
 8005242:	4aa7      	ldr	r2, [pc, #668]	; (80054e0 <cliDump+0x308>)
 8005244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005246:	3301      	adds	r3, #1
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	4413      	add	r3, r2
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	62fb      	str	r3, [r7, #44]	; 0x2c
            roll = mcfg.customMixer[i].roll;
 8005250:	4aa3      	ldr	r2, [pc, #652]	; (80054e0 <cliDump+0x308>)
 8005252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005254:	3301      	adds	r3, #1
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	4413      	add	r3, r2
 800525a:	3304      	adds	r3, #4
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
            pitch = mcfg.customMixer[i].pitch;
 8005260:	4a9f      	ldr	r2, [pc, #636]	; (80054e0 <cliDump+0x308>)
 8005262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	4413      	add	r3, r2
 8005268:	3318      	adds	r3, #24
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
            yaw = mcfg.customMixer[i].yaw;
 800526e:	4a9c      	ldr	r2, [pc, #624]	; (80054e0 <cliDump+0x308>)
 8005270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	4413      	add	r3, r2
 8005276:	331c      	adds	r3, #28
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	623b      	str	r3, [r7, #32]
            pifLog_Printf(LT_NONE, "cmix %d", i + 1);
 800527c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527e:	3301      	adds	r3, #1
 8005280:	461a      	mov	r2, r3
 8005282:	499a      	ldr	r1, [pc, #616]	; (80054ec <cliDump+0x314>)
 8005284:	2000      	movs	r0, #0
 8005286:	f00e fadb 	bl	8013840 <pifLog_Printf>
            if (thr < 0)
 800528a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800528e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005296:	d503      	bpl.n	80052a0 <cliDump+0xc8>
                pifLog_Print(LT_NONE, " ");
 8005298:	4995      	ldr	r1, [pc, #596]	; (80054f0 <cliDump+0x318>)
 800529a:	2000      	movs	r0, #0
 800529c:	f00e fa42 	bl	8013724 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(thr, buf));
 80052a0:	f107 0308 	add.w	r3, r7, #8
 80052a4:	4618      	mov	r0, r3
 80052a6:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80052aa:	f7ff f84b 	bl	8004344 <ftoa>
 80052ae:	4603      	mov	r3, r0
 80052b0:	461a      	mov	r2, r3
 80052b2:	4990      	ldr	r1, [pc, #576]	; (80054f4 <cliDump+0x31c>)
 80052b4:	2000      	movs	r0, #0
 80052b6:	f00e fac3 	bl	8013840 <pifLog_Printf>
            if (roll < 0)
 80052ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80052be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c6:	d503      	bpl.n	80052d0 <cliDump+0xf8>
                pifLog_Print(LT_NONE, " ");
 80052c8:	4989      	ldr	r1, [pc, #548]	; (80054f0 <cliDump+0x318>)
 80052ca:	2000      	movs	r0, #0
 80052cc:	f00e fa2a 	bl	8013724 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(roll, buf));
 80052d0:	f107 0308 	add.w	r3, r7, #8
 80052d4:	4618      	mov	r0, r3
 80052d6:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80052da:	f7ff f833 	bl	8004344 <ftoa>
 80052de:	4603      	mov	r3, r0
 80052e0:	461a      	mov	r2, r3
 80052e2:	4984      	ldr	r1, [pc, #528]	; (80054f4 <cliDump+0x31c>)
 80052e4:	2000      	movs	r0, #0
 80052e6:	f00e faab 	bl	8013840 <pifLog_Printf>
            if (pitch < 0)
 80052ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80052ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f6:	d503      	bpl.n	8005300 <cliDump+0x128>
                pifLog_Print(LT_NONE, " ");
 80052f8:	497d      	ldr	r1, [pc, #500]	; (80054f0 <cliDump+0x318>)
 80052fa:	2000      	movs	r0, #0
 80052fc:	f00e fa12 	bl	8013724 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(pitch, buf));
 8005300:	f107 0308 	add.w	r3, r7, #8
 8005304:	4618      	mov	r0, r3
 8005306:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800530a:	f7ff f81b 	bl	8004344 <ftoa>
 800530e:	4603      	mov	r3, r0
 8005310:	461a      	mov	r2, r3
 8005312:	4978      	ldr	r1, [pc, #480]	; (80054f4 <cliDump+0x31c>)
 8005314:	2000      	movs	r0, #0
 8005316:	f00e fa93 	bl	8013840 <pifLog_Printf>
            if (yaw < 0)
 800531a:	edd7 7a08 	vldr	s15, [r7, #32]
 800531e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005326:	d503      	bpl.n	8005330 <cliDump+0x158>
                pifLog_Print(LT_NONE, " ");
 8005328:	4971      	ldr	r1, [pc, #452]	; (80054f0 <cliDump+0x318>)
 800532a:	2000      	movs	r0, #0
 800532c:	f00e f9fa 	bl	8013724 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(yaw, buf));
 8005330:	f107 0308 	add.w	r3, r7, #8
 8005334:	4618      	mov	r0, r3
 8005336:	ed97 0a08 	vldr	s0, [r7, #32]
 800533a:	f7ff f803 	bl	8004344 <ftoa>
 800533e:	4603      	mov	r3, r0
 8005340:	461a      	mov	r2, r3
 8005342:	496d      	ldr	r1, [pc, #436]	; (80054f8 <cliDump+0x320>)
 8005344:	2000      	movs	r0, #0
 8005346:	f00e fa7b 	bl	8013840 <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 800534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534c:	3301      	adds	r3, #1
 800534e:	637b      	str	r3, [r7, #52]	; 0x34
 8005350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005352:	2b0b      	cmp	r3, #11
 8005354:	f67f af68 	bls.w	8005228 <cliDump+0x50>
 8005358:	e000      	b.n	800535c <cliDump+0x184>
                break;
 800535a:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "cmix %d 0 0 0 0\r\n", i + 1);
 800535c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535e:	3301      	adds	r3, #1
 8005360:	461a      	mov	r2, r3
 8005362:	4966      	ldr	r1, [pc, #408]	; (80054fc <cliDump+0x324>)
 8005364:	2000      	movs	r0, #0
 8005366:	f00e fa6b 	bl	8013840 <pifLog_Printf>
    }

    // print custom servo mixer if exists
    if (mcfg.customServoMixer[0].rate != 0) {
 800536a:	4b5d      	ldr	r3, [pc, #372]	; (80054e0 <cliDump+0x308>)
 800536c:	f993 30d2 	ldrsb.w	r3, [r3, #210]	; 0xd2
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8084 	beq.w	800547e <cliDump+0x2a6>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8005376:	2300      	movs	r3, #0
 8005378:	637b      	str	r3, [r7, #52]	; 0x34
 800537a:	e074      	b.n	8005466 <cliDump+0x28e>
            if (mcfg.customServoMixer[i].rate == 0)
 800537c:	4958      	ldr	r1, [pc, #352]	; (80054e0 <cliDump+0x308>)
 800537e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005380:	4613      	mov	r3, r2
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	440b      	add	r3, r1
 8005388:	33d2      	adds	r3, #210	; 0xd2
 800538a:	f993 3000 	ldrsb.w	r3, [r3]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d06d      	beq.n	800546e <cliDump+0x296>
                break;
            pifLog_Printf(LT_NONE, "smix %d ", i + 1);
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005394:	3301      	adds	r3, #1
 8005396:	461a      	mov	r2, r3
 8005398:	4959      	ldr	r1, [pc, #356]	; (8005500 <cliDump+0x328>)
 800539a:	2000      	movs	r0, #0
 800539c:	f00e fa50 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].targetChannel + 1);
 80053a0:	494f      	ldr	r1, [pc, #316]	; (80054e0 <cliDump+0x308>)
 80053a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053a4:	4613      	mov	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	440b      	add	r3, r1
 80053ac:	33d0      	adds	r3, #208	; 0xd0
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	3301      	adds	r3, #1
 80053b2:	461a      	mov	r2, r3
 80053b4:	4953      	ldr	r1, [pc, #332]	; (8005504 <cliDump+0x32c>)
 80053b6:	2000      	movs	r0, #0
 80053b8:	f00e fa42 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].fromChannel + 1);
 80053bc:	4948      	ldr	r1, [pc, #288]	; (80054e0 <cliDump+0x308>)
 80053be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053c0:	4613      	mov	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	440b      	add	r3, r1
 80053c8:	33d1      	adds	r3, #209	; 0xd1
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	3301      	adds	r3, #1
 80053ce:	461a      	mov	r2, r3
 80053d0:	494c      	ldr	r1, [pc, #304]	; (8005504 <cliDump+0x32c>)
 80053d2:	2000      	movs	r0, #0
 80053d4:	f00e fa34 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].rate);
 80053d8:	4941      	ldr	r1, [pc, #260]	; (80054e0 <cliDump+0x308>)
 80053da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053dc:	4613      	mov	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	440b      	add	r3, r1
 80053e4:	33d2      	adds	r3, #210	; 0xd2
 80053e6:	f993 3000 	ldrsb.w	r3, [r3]
 80053ea:	461a      	mov	r2, r3
 80053ec:	4945      	ldr	r1, [pc, #276]	; (8005504 <cliDump+0x32c>)
 80053ee:	2000      	movs	r0, #0
 80053f0:	f00e fa26 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].speed);
 80053f4:	493a      	ldr	r1, [pc, #232]	; (80054e0 <cliDump+0x308>)
 80053f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053f8:	4613      	mov	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	1a9b      	subs	r3, r3, r2
 80053fe:	440b      	add	r3, r1
 8005400:	33d3      	adds	r3, #211	; 0xd3
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	493f      	ldr	r1, [pc, #252]	; (8005504 <cliDump+0x32c>)
 8005408:	2000      	movs	r0, #0
 800540a:	f00e fa19 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].min);
 800540e:	4934      	ldr	r1, [pc, #208]	; (80054e0 <cliDump+0x308>)
 8005410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005412:	4613      	mov	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	440b      	add	r3, r1
 800541a:	33d4      	adds	r3, #212	; 0xd4
 800541c:	f993 3000 	ldrsb.w	r3, [r3]
 8005420:	461a      	mov	r2, r3
 8005422:	4938      	ldr	r1, [pc, #224]	; (8005504 <cliDump+0x32c>)
 8005424:	2000      	movs	r0, #0
 8005426:	f00e fa0b 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].max);
 800542a:	492d      	ldr	r1, [pc, #180]	; (80054e0 <cliDump+0x308>)
 800542c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800542e:	4613      	mov	r3, r2
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	440b      	add	r3, r1
 8005436:	33d5      	adds	r3, #213	; 0xd5
 8005438:	f993 3000 	ldrsb.w	r3, [r3]
 800543c:	461a      	mov	r2, r3
 800543e:	4931      	ldr	r1, [pc, #196]	; (8005504 <cliDump+0x32c>)
 8005440:	2000      	movs	r0, #0
 8005442:	f00e f9fd 	bl	8013840 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 8005446:	4926      	ldr	r1, [pc, #152]	; (80054e0 <cliDump+0x308>)
 8005448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800544a:	4613      	mov	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	440b      	add	r3, r1
 8005452:	33d6      	adds	r3, #214	; 0xd6
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	492b      	ldr	r1, [pc, #172]	; (8005508 <cliDump+0x330>)
 800545a:	2000      	movs	r0, #0
 800545c:	f00e f9f0 	bl	8013840 <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005462:	3301      	adds	r3, #1
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
 8005466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005468:	2b0f      	cmp	r3, #15
 800546a:	d987      	bls.n	800537c <cliDump+0x1a4>
 800546c:	e000      	b.n	8005470 <cliDump+0x298>
                break;
 800546e:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "smix %d 0 0 0 0\r\n", i + 1);
 8005470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005472:	3301      	adds	r3, #1
 8005474:	461a      	mov	r2, r3
 8005476:	4925      	ldr	r1, [pc, #148]	; (800550c <cliDump+0x334>)
 8005478:	2000      	movs	r0, #0
 800547a:	f00e f9e1 	bl	8013840 <pifLog_Printf>
    }

    // print servo directions
    for (i = 0; i < MAX_SERVOS; i++)
 800547e:	2300      	movs	r3, #0
 8005480:	637b      	str	r3, [r7, #52]	; 0x34
 8005482:	e024      	b.n	80054ce <cliDump+0x2f6>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 8005484:	2300      	movs	r3, #0
 8005486:	633b      	str	r3, [r7, #48]	; 0x30
 8005488:	e01b      	b.n	80054c2 <cliDump+0x2ea>
            if (cfg.servoConf[i].direction & (1 << channel))
 800548a:	4921      	ldr	r1, [pc, #132]	; (8005510 <cliDump+0x338>)
 800548c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	440b      	add	r3, r1
 8005498:	33c0      	adds	r3, #192	; 0xc0
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	fa42 f303 	asr.w	r3, r2, r3
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d007      	beq.n	80054bc <cliDump+0x2e4>
                pifLog_Printf(LT_NONE, "smix direction %d %d -1\r\n", i + 1 , channel + 1);
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	3301      	adds	r3, #1
 80054b4:	4917      	ldr	r1, [pc, #92]	; (8005514 <cliDump+0x33c>)
 80054b6:	2000      	movs	r0, #0
 80054b8:	f00e f9c2 	bl	8013840 <pifLog_Printf>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 80054bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054be:	3301      	adds	r3, #1
 80054c0:	633b      	str	r3, [r7, #48]	; 0x30
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	2b0b      	cmp	r3, #11
 80054c6:	d9e0      	bls.n	800548a <cliDump+0x2b2>
    for (i = 0; i < MAX_SERVOS; i++)
 80054c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ca:	3301      	adds	r3, #1
 80054cc:	637b      	str	r3, [r7, #52]	; 0x34
 80054ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d0:	2b07      	cmp	r3, #7
 80054d2:	d9d7      	bls.n	8005484 <cliDump+0x2ac>

    // print servo config
    for (i = 0; i < MAX_SERVOS; i++)
 80054d4:	2300      	movs	r3, #0
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
 80054d8:	e057      	b.n	800558a <cliDump+0x3b2>
 80054da:	bf00      	nop
 80054dc:	080271f8 	.word	0x080271f8
 80054e0:	200007ac 	.word	0x200007ac
 80054e4:	08027f98 	.word	0x08027f98
 80054e8:	08027228 	.word	0x08027228
 80054ec:	08027234 	.word	0x08027234
 80054f0:	0802723c 	.word	0x0802723c
 80054f4:	08027240 	.word	0x08027240
 80054f8:	08026de0 	.word	0x08026de0
 80054fc:	08027244 	.word	0x08027244
 8005500:	08027258 	.word	0x08027258
 8005504:	08027264 	.word	0x08027264
 8005508:	08027088 	.word	0x08027088
 800550c:	08027268 	.word	0x08027268
 8005510:	20000d18 	.word	0x20000d18
 8005514:	0802727c 	.word	0x0802727c
        pifLog_Printf(LT_NONE, "servo %d %d %d %d %d\r\n", i + 1, cfg.servoConf[i].min, cfg.servoConf[i].middle, cfg.servoConf[i].max, cfg.servoConf[i].rate);
 8005518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551a:	1c59      	adds	r1, r3, #1
 800551c:	4863      	ldr	r0, [pc, #396]	; (80056ac <cliDump+0x4d4>)
 800551e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	4403      	add	r3, r0
 800552a:	33b8      	adds	r3, #184	; 0xb8
 800552c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005530:	461e      	mov	r6, r3
 8005532:	485e      	ldr	r0, [pc, #376]	; (80056ac <cliDump+0x4d4>)
 8005534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	4403      	add	r3, r0
 8005540:	33bc      	adds	r3, #188	; 0xbc
 8005542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005546:	461c      	mov	r4, r3
 8005548:	4858      	ldr	r0, [pc, #352]	; (80056ac <cliDump+0x4d4>)
 800554a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	4403      	add	r3, r0
 8005556:	33ba      	adds	r3, #186	; 0xba
 8005558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800555c:	461d      	mov	r5, r3
 800555e:	4853      	ldr	r0, [pc, #332]	; (80056ac <cliDump+0x4d4>)
 8005560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	4403      	add	r3, r0
 800556c:	33be      	adds	r3, #190	; 0xbe
 800556e:	f993 3000 	ldrsb.w	r3, [r3]
 8005572:	9302      	str	r3, [sp, #8]
 8005574:	9501      	str	r5, [sp, #4]
 8005576:	9400      	str	r4, [sp, #0]
 8005578:	4633      	mov	r3, r6
 800557a:	460a      	mov	r2, r1
 800557c:	494c      	ldr	r1, [pc, #304]	; (80056b0 <cliDump+0x4d8>)
 800557e:	2000      	movs	r0, #0
 8005580:	f00e f95e 	bl	8013840 <pifLog_Printf>
    for (i = 0; i < MAX_SERVOS; i++)
 8005584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005586:	3301      	adds	r3, #1
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
 800558a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558c:	2b07      	cmp	r3, #7
 800558e:	d9c3      	bls.n	8005518 <cliDump+0x340>

    // print enabled features
    mask = featureMask();
 8005590:	f001 fcc6 	bl	8006f20 <featureMask>
 8005594:	61f8      	str	r0, [r7, #28]
    for (i = 0; ; i++) { // disable all feature first
 8005596:	2300      	movs	r3, #0
 8005598:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 800559a:	4a46      	ldr	r2, [pc, #280]	; (80056b4 <cliDump+0x4dc>)
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00c      	beq.n	80055c0 <cliDump+0x3e8>
            break;
        pifLog_Printf(LT_NONE, "feature -%s\r\n", featureNames[i]);
 80055a6:	4a43      	ldr	r2, [pc, #268]	; (80056b4 <cliDump+0x4dc>)
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ae:	461a      	mov	r2, r3
 80055b0:	4941      	ldr	r1, [pc, #260]	; (80056b8 <cliDump+0x4e0>)
 80055b2:	2000      	movs	r0, #0
 80055b4:	f00e f944 	bl	8013840 <pifLog_Printf>
    for (i = 0; ; i++) { // disable all feature first
 80055b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ba:	3301      	adds	r3, #1
 80055bc:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80055be:	e7ec      	b.n	800559a <cliDump+0x3c2>
            break;
 80055c0:	bf00      	nop
    }
    for (i = 0; ; i++) {  // reenable what we want.
 80055c2:	2300      	movs	r3, #0
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80055c6:	4a3b      	ldr	r2, [pc, #236]	; (80056b4 <cliDump+0x4dc>)
 80055c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d015      	beq.n	80055fe <cliDump+0x426>
            break;
        if (mask & (1 << i))
 80055d2:	2201      	movs	r2, #1
 80055d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	461a      	mov	r2, r3
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4013      	ands	r3, r2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <cliDump+0x41e>
            pifLog_Printf(LT_NONE, "feature %s\r\n", featureNames[i]);
 80055e4:	4a33      	ldr	r2, [pc, #204]	; (80056b4 <cliDump+0x4dc>)
 80055e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ec:	461a      	mov	r2, r3
 80055ee:	4933      	ldr	r1, [pc, #204]	; (80056bc <cliDump+0x4e4>)
 80055f0:	2000      	movs	r0, #0
 80055f2:	f00e f925 	bl	8013840 <pifLog_Printf>
    for (i = 0; ; i++) {  // reenable what we want.
 80055f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f8:	3301      	adds	r3, #1
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80055fc:	e7e3      	b.n	80055c6 <cliDump+0x3ee>
            break;
 80055fe:	bf00      	nop
    }

    // print RC MAPPING
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005600:	2300      	movs	r3, #0
 8005602:	637b      	str	r3, [r7, #52]	; 0x34
 8005604:	e012      	b.n	800562c <cliDump+0x454>
        buf[mcfg.rcmap[i]] = rcChannelLetters[i];
 8005606:	4a2e      	ldr	r2, [pc, #184]	; (80056c0 <cliDump+0x4e8>)
 8005608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560a:	4413      	add	r3, r2
 800560c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	4619      	mov	r1, r3
 8005614:	4a2b      	ldr	r2, [pc, #172]	; (80056c4 <cliDump+0x4ec>)
 8005616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005618:	4413      	add	r3, r2
 800561a:	781a      	ldrb	r2, [r3, #0]
 800561c:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8005620:	443b      	add	r3, r7
 8005622:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005628:	3301      	adds	r3, #1
 800562a:	637b      	str	r3, [r7, #52]	; 0x34
 800562c:	4b24      	ldr	r3, [pc, #144]	; (80056c0 <cliDump+0x4e8>)
 800562e:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005632:	461a      	mov	r2, r3
 8005634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005636:	4293      	cmp	r3, r2
 8005638:	d3e5      	bcc.n	8005606 <cliDump+0x42e>
    buf[i] = '\0';
 800563a:	f107 0208 	add.w	r2, r7, #8
 800563e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005640:	4413      	add	r3, r2
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "map %s\r\n", buf);
 8005646:	f107 0308 	add.w	r3, r7, #8
 800564a:	461a      	mov	r2, r3
 800564c:	491e      	ldr	r1, [pc, #120]	; (80056c8 <cliDump+0x4f0>)
 800564e:	2000      	movs	r0, #0
 8005650:	f00e f8f6 	bl	8013840 <pifLog_Printf>

    // print settings
    for (i = 0; i < VALUE_COUNT; i++) {
 8005654:	2300      	movs	r3, #0
 8005656:	637b      	str	r3, [r7, #52]	; 0x34
 8005658:	e01f      	b.n	800569a <cliDump+0x4c2>
        setval = &valueTable[i];
 800565a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4a19      	ldr	r2, [pc, #100]	; (80056cc <cliDump+0x4f4>)
 8005666:	4413      	add	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]
        pifLog_Printf(LT_NONE, "set %s = ", valueTable[i].name);
 800566a:	4918      	ldr	r1, [pc, #96]	; (80056cc <cliDump+0x4f4>)
 800566c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	4914      	ldr	r1, [pc, #80]	; (80056d0 <cliDump+0x4f8>)
 800567e:	2000      	movs	r0, #0
 8005680:	f00e f8de 	bl	8013840 <pifLog_Printf>
        cliPrintVar(setval, 0);
 8005684:	2100      	movs	r1, #0
 8005686:	69b8      	ldr	r0, [r7, #24]
 8005688:	f000 fb58 	bl	8005d3c <cliPrintVar>
        pifLog_Print(LT_NONE, "\r\n");
 800568c:	4911      	ldr	r1, [pc, #68]	; (80056d4 <cliDump+0x4fc>)
 800568e:	2000      	movs	r0, #0
 8005690:	f00e f848 	bl	8013724 <pifLog_Print>
    for (i = 0; i < VALUE_COUNT; i++) {
 8005694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005696:	3301      	adds	r3, #1
 8005698:	637b      	str	r3, [r7, #52]	; 0x34
 800569a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569c:	2b8e      	cmp	r3, #142	; 0x8e
 800569e:	d9dc      	bls.n	800565a <cliDump+0x482>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	373c      	adds	r7, #60	; 0x3c
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000d18 	.word	0x20000d18
 80056b0:	08027298 	.word	0x08027298
 80056b4:	08027ffc 	.word	0x08027ffc
 80056b8:	080272b0 	.word	0x080272b0
 80056bc:	080272c0 	.word	0x080272c0
 80056c0:	200007ac 	.word	0x200007ac
 80056c4:	08028c6c 	.word	0x08028c6c
 80056c8:	080272d0 	.word	0x080272d0
 80056cc:	08028140 	.word	0x08028140
 80056d0:	080272dc 	.word	0x080272dc
 80056d4:	08026e00 	.word	0x08026e00

080056d8 <cliExit>:

static int cliExit(int argc, char *argv[])
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
    pifLog_Print(LT_NONE, "\r\nLeaving CLI mode...\r\n");
 80056e2:	490c      	ldr	r1, [pc, #48]	; (8005714 <cliExit+0x3c>)
 80056e4:	2000      	movs	r0, #0
 80056e6:	f00e f81d 	bl	8013724 <pifLog_Print>
    *cliBuffer = '\0';
 80056ea:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <cliExit+0x40>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]
    bufferIndex = 0;
 80056f0:	4b0a      	ldr	r3, [pc, #40]	; (800571c <cliExit+0x44>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
    cliMode = 0;
 80056f6:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <cliExit+0x48>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	701a      	strb	r2, [r3, #0]
    // incase some idiot leaves a motor running during motortest, clear it here
    mixerResetMotors();
 80056fc:	f005 fc7c 	bl	800aff8 <mixerResetMotors>
    // save and reboot... I think this makes the most sense
    cliSave(argc, argv);
 8005700:	6839      	ldr	r1, [r7, #0]
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fafa 	bl	8005cfc <cliSave>
	return PIF_LOG_CMD_NO_ERROR;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	080272e8 	.word	0x080272e8
 8005718:	20000778 	.word	0x20000778
 800571c:	200007a8 	.word	0x200007a8
 8005720:	20000774 	.word	0x20000774

08005724 <cliFeature>:

static int cliFeature(int argc, char *argv[])
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t mask;

    mask = featureMask();
 800572e:	f001 fbf7 	bl	8006f20 <featureMask>
 8005732:	60f8      	str	r0, [r7, #12]

    if (argc == 1) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d127      	bne.n	800578a <cliFeature+0x66>
        pifLog_Print(LT_NONE, "Enabled features: ");
 800573a:	4952      	ldr	r1, [pc, #328]	; (8005884 <cliFeature+0x160>)
 800573c:	2000      	movs	r0, #0
 800573e:	f00d fff1 	bl	8013724 <pifLog_Print>
        for (i = 0; ; i++) {
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 8005746:	4a50      	ldr	r2, [pc, #320]	; (8005888 <cliFeature+0x164>)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d015      	beq.n	800577e <cliFeature+0x5a>
                break;
            if (mask & (1 << i))
 8005752:	2201      	movs	r2, #1
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	461a      	mov	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4013      	ands	r3, r2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <cliFeature+0x52>
                pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 8005764:	4a48      	ldr	r2, [pc, #288]	; (8005888 <cliFeature+0x164>)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800576c:	461a      	mov	r2, r3
 800576e:	4947      	ldr	r1, [pc, #284]	; (800588c <cliFeature+0x168>)
 8005770:	2000      	movs	r0, #0
 8005772:	f00e f865 	bl	8013840 <pifLog_Printf>
        for (i = 0; ; i++) {
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	3301      	adds	r3, #1
 800577a:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 800577c:	e7e3      	b.n	8005746 <cliFeature+0x22>
                break;
 800577e:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005780:	4943      	ldr	r1, [pc, #268]	; (8005890 <cliFeature+0x16c>)
 8005782:	2000      	movs	r0, #0
 8005784:	f00d ffce 	bl	8013724 <pifLog_Print>
 8005788:	e076      	b.n	8005878 <cliFeature+0x154>
    } else if (strcasecmp(argv[1], "list") == 0) {
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	3304      	adds	r3, #4
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4940      	ldr	r1, [pc, #256]	; (8005894 <cliFeature+0x170>)
 8005792:	4618      	mov	r0, r3
 8005794:	f01d fe88 	bl	80234a8 <strcasecmp>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d11e      	bne.n	80057dc <cliFeature+0xb8>
        pifLog_Print(LT_NONE, "Available features: ");
 800579e:	493e      	ldr	r1, [pc, #248]	; (8005898 <cliFeature+0x174>)
 80057a0:	2000      	movs	r0, #0
 80057a2:	f00d ffbf 	bl	8013724 <pifLog_Print>
        for (i = 0; ; i++) {
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80057aa:	4a37      	ldr	r2, [pc, #220]	; (8005888 <cliFeature+0x164>)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00c      	beq.n	80057d0 <cliFeature+0xac>
                break;
            pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 80057b6:	4a34      	ldr	r2, [pc, #208]	; (8005888 <cliFeature+0x164>)
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057be:	461a      	mov	r2, r3
 80057c0:	4932      	ldr	r1, [pc, #200]	; (800588c <cliFeature+0x168>)
 80057c2:	2000      	movs	r0, #0
 80057c4:	f00e f83c 	bl	8013840 <pifLog_Printf>
        for (i = 0; ; i++) {
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	3301      	adds	r3, #1
 80057cc:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80057ce:	e7ec      	b.n	80057aa <cliFeature+0x86>
                break;
 80057d0:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 80057d2:	492f      	ldr	r1, [pc, #188]	; (8005890 <cliFeature+0x16c>)
 80057d4:	2000      	movs	r0, #0
 80057d6:	f00d ffa5 	bl	8013724 <pifLog_Print>
 80057da:	e04d      	b.n	8005878 <cliFeature+0x154>
    } else {
        bool remove = false;
 80057dc:	2300      	movs	r3, #0
 80057de:	74fb      	strb	r3, [r7, #19]
        if (argv[1][0] == '-') {
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	3304      	adds	r3, #4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b2d      	cmp	r3, #45	; 0x2d
 80057ea:	d101      	bne.n	80057f0 <cliFeature+0xcc>
            // remove feature
            remove = true;
 80057ec:	2301      	movs	r3, #1
 80057ee:	74fb      	strb	r3, [r7, #19]
        }

        for (i = 0; ; i++) {
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 80057f4:	4a24      	ldr	r2, [pc, #144]	; (8005888 <cliFeature+0x164>)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d104      	bne.n	800580a <cliFeature+0xe6>
                pifLog_Print(LT_NONE, "Invalid feature name...\r\n");
 8005800:	4926      	ldr	r1, [pc, #152]	; (800589c <cliFeature+0x178>)
 8005802:	2000      	movs	r0, #0
 8005804:	f00d ff8e 	bl	8013724 <pifLog_Print>
                break;
 8005808:	e036      	b.n	8005878 <cliFeature+0x154>
            }
            if (strcasecmp(argv[1] + 1, featureNames[i]) == 0) {
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	3304      	adds	r3, #4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	491d      	ldr	r1, [pc, #116]	; (8005888 <cliFeature+0x164>)
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800581a:	4619      	mov	r1, r3
 800581c:	4610      	mov	r0, r2
 800581e:	f01d fe43 	bl	80234a8 <strcasecmp>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d123      	bne.n	8005870 <cliFeature+0x14c>
                if (remove) {
 8005828:	7cfb      	ldrb	r3, [r7, #19]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <cliFeature+0x122>
                    featureClear(1 << i);
 800582e:	2201      	movs	r2, #1
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	4618      	mov	r0, r3
 8005838:	f001 fb52 	bl	8006ee0 <featureClear>
                    pifLog_Print(LT_NONE, "Disabled ");
 800583c:	4918      	ldr	r1, [pc, #96]	; (80058a0 <cliFeature+0x17c>)
 800583e:	2000      	movs	r0, #0
 8005840:	f00d ff70 	bl	8013724 <pifLog_Print>
 8005844:	e00a      	b.n	800585c <cliFeature+0x138>
                } else {
                    featureSet(1 << i);
 8005846:	2201      	movs	r2, #1
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	fa02 f303 	lsl.w	r3, r2, r3
 800584e:	4618      	mov	r0, r3
 8005850:	f001 fb34 	bl	8006ebc <featureSet>
                    pifLog_Print(LT_NONE, "Enabled ");
 8005854:	4913      	ldr	r1, [pc, #76]	; (80058a4 <cliFeature+0x180>)
 8005856:	2000      	movs	r0, #0
 8005858:	f00d ff64 	bl	8013724 <pifLog_Print>
                }
                pifLog_Printf(LT_NONE, "%s\r\n", featureNames[i]);
 800585c:	4a0a      	ldr	r2, [pc, #40]	; (8005888 <cliFeature+0x164>)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005864:	461a      	mov	r2, r3
 8005866:	4910      	ldr	r1, [pc, #64]	; (80058a8 <cliFeature+0x184>)
 8005868:	2000      	movs	r0, #0
 800586a:	f00d ffe9 	bl	8013840 <pifLog_Printf>
                break;
 800586e:	e003      	b.n	8005878 <cliFeature+0x154>
        for (i = 0; ; i++) {
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	3301      	adds	r3, #1
 8005874:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 8005876:	e7bd      	b.n	80057f4 <cliFeature+0xd0>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	08027300 	.word	0x08027300
 8005888:	08027ffc 	.word	0x08027ffc
 800588c:	08027314 	.word	0x08027314
 8005890:	08026e00 	.word	0x08026e00
 8005894:	08027318 	.word	0x08027318
 8005898:	08027320 	.word	0x08027320
 800589c:	08027338 	.word	0x08027338
 80058a0:	08027354 	.word	0x08027354
 80058a4:	08027360 	.word	0x08027360
 80058a8:	08026de0 	.word	0x08026de0

080058ac <cliGpsPassthrough>:

#ifdef GPS
static int cliGpsPassthrough(int argc, char *argv[])
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;

    switch (gpsSetPassthrough()) {
 80058b6:	f003 fa35 	bl	8008d24 <gpsSetPassthrough>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <cliGpsPassthrough+0x1a>
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d005      	beq.n	80058d0 <cliGpsPassthrough+0x24>
 80058c4:	e009      	b.n	80058da <cliGpsPassthrough+0x2e>
    case 0:
        pifLog_Print(LT_NONE, "Disabling GPS passthrough...\r\n");
 80058c6:	490a      	ldr	r1, [pc, #40]	; (80058f0 <cliGpsPassthrough+0x44>)
 80058c8:	2000      	movs	r0, #0
 80058ca:	f00d ff2b 	bl	8013724 <pifLog_Print>
        break;
 80058ce:	e009      	b.n	80058e4 <cliGpsPassthrough+0x38>

    case 1:
        pifLog_Print(LT_NONE, "Enabling GPS passthrough...\r\n");
 80058d0:	4908      	ldr	r1, [pc, #32]	; (80058f4 <cliGpsPassthrough+0x48>)
 80058d2:	2000      	movs	r0, #0
 80058d4:	f00d ff26 	bl	8013724 <pifLog_Print>
        break;
 80058d8:	e004      	b.n	80058e4 <cliGpsPassthrough+0x38>

    default:
        pifLog_Print(LT_NONE, "Error: Enable and plug in GPS first\r\n");
 80058da:	4907      	ldr	r1, [pc, #28]	; (80058f8 <cliGpsPassthrough+0x4c>)
 80058dc:	2000      	movs	r0, #0
 80058de:	f00d ff21 	bl	8013724 <pifLog_Print>
        break;
 80058e2:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	0802736c 	.word	0x0802736c
 80058f4:	0802738c 	.word	0x0802738c
 80058f8:	080273ac 	.word	0x080273ac

080058fc <cliMap>:
#endif

static int cliMap(int argc, char *argv[])
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
    uint32_t len;
    uint32_t i;
    char out[9];

    if (argc < 2) return PIF_LOG_CMD_TOO_FEW_ARGS;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b01      	cmp	r3, #1
 800590a:	dc02      	bgt.n	8005912 <cliMap+0x16>
 800590c:	f06f 0302 	mvn.w	r3, #2
 8005910:	e09d      	b.n	8005a4e <cliMap+0x152>

    len = strlen(argv[1]);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	3304      	adds	r3, #4
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7fa fc67 	bl	80001ec <strlen>
 800591e:	61b8      	str	r0, [r7, #24]

    if (len == mcfg.rc_channel_count) {
 8005920:	4b4d      	ldr	r3, [pc, #308]	; (8005a58 <cliMap+0x15c>)
 8005922:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005926:	461a      	mov	r2, r3
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	4293      	cmp	r3, r2
 800592c:	d160      	bne.n	80059f0 <cliMap+0xf4>
        // uppercase it
        for (i = 0; i < mcfg.rc_channel_count; i++)
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	e01d      	b.n	8005970 <cliMap+0x74>
            argv[1][i] = toupper((unsigned char)argv[1][i]);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	3304      	adds	r3, #4
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	75fb      	strb	r3, [r7, #23]
 8005942:	7dfb      	ldrb	r3, [r7, #23]
 8005944:	3301      	adds	r3, #1
 8005946:	4a45      	ldr	r2, [pc, #276]	; (8005a5c <cliMap+0x160>)
 8005948:	4413      	add	r3, r2
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d102      	bne.n	800595a <cliMap+0x5e>
 8005954:	7dfb      	ldrb	r3, [r7, #23]
 8005956:	3b20      	subs	r3, #32
 8005958:	e000      	b.n	800595c <cliMap+0x60>
 800595a:	7dfb      	ldrb	r3, [r7, #23]
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	3204      	adds	r2, #4
 8005960:	6811      	ldr	r1, [r2, #0]
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	440a      	add	r2, r1
 8005966:	b2db      	uxtb	r3, r3
 8005968:	7013      	strb	r3, [r2, #0]
        for (i = 0; i < mcfg.rc_channel_count; i++)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3301      	adds	r3, #1
 800596e:	61fb      	str	r3, [r7, #28]
 8005970:	4b39      	ldr	r3, [pc, #228]	; (8005a58 <cliMap+0x15c>)
 8005972:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005976:	461a      	mov	r2, r3
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	4293      	cmp	r3, r2
 800597c:	d3da      	bcc.n	8005934 <cliMap+0x38>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	e028      	b.n	80059d6 <cliMap+0xda>
            if (strchr(rcChannelLetters, argv[1][i]) && !strchr(argv[1] + i + 1, argv[1][i]))
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	3304      	adds	r3, #4
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	4619      	mov	r1, r3
 8005992:	4833      	ldr	r0, [pc, #204]	; (8005a60 <cliMap+0x164>)
 8005994:	f01d fdb1 	bl	80234fa <strchr>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d015      	beq.n	80059ca <cliMap+0xce>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	3304      	adds	r3, #4
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	3301      	adds	r3, #1
 80059a8:	18d0      	adds	r0, r2, r3
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	3304      	adds	r3, #4
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	4413      	add	r3, r2
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	4619      	mov	r1, r3
 80059b8:	f01d fd9f 	bl	80234fa <strchr>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d103      	bne.n	80059ca <cliMap+0xce>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	3301      	adds	r3, #1
 80059c6:	61fb      	str	r3, [r7, #28]
 80059c8:	e005      	b.n	80059d6 <cliMap+0xda>
                continue;
            pifLog_Print(LT_NONE, "Must be any order of AETR1234\r\n");
 80059ca:	4926      	ldr	r1, [pc, #152]	; (8005a64 <cliMap+0x168>)
 80059cc:	2000      	movs	r0, #0
 80059ce:	f00d fea9 	bl	8013724 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e03b      	b.n	8005a4e <cliMap+0x152>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 80059d6:	4b20      	ldr	r3, [pc, #128]	; (8005a58 <cliMap+0x15c>)
 80059d8:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 80059dc:	461a      	mov	r2, r3
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d3cf      	bcc.n	8005984 <cliMap+0x88>
        }
        parseRcChannels(argv[1]);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	3304      	adds	r3, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fcc4 	bl	8006378 <parseRcChannels>
    }
    pifLog_Print(LT_NONE, "Current assignment: ");
 80059f0:	491d      	ldr	r1, [pc, #116]	; (8005a68 <cliMap+0x16c>)
 80059f2:	2000      	movs	r0, #0
 80059f4:	f00d fe96 	bl	8013724 <pifLog_Print>
    for (i = 0; i < mcfg.rc_channel_count; i++)
 80059f8:	2300      	movs	r3, #0
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	e012      	b.n	8005a24 <cliMap+0x128>
        out[mcfg.rcmap[i]] = rcChannelLetters[i];
 80059fe:	4a16      	ldr	r2, [pc, #88]	; (8005a58 <cliMap+0x15c>)
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4a14      	ldr	r2, [pc, #80]	; (8005a60 <cliMap+0x164>)
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	781a      	ldrb	r2, [r3, #0]
 8005a14:	f101 0320 	add.w	r3, r1, #32
 8005a18:	443b      	add	r3, r7
 8005a1a:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	3301      	adds	r3, #1
 8005a22:	61fb      	str	r3, [r7, #28]
 8005a24:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <cliMap+0x15c>)
 8005a26:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d3e5      	bcc.n	80059fe <cliMap+0x102>
    out[i] = '\0';
 8005a32:	f107 020c 	add.w	r2, r7, #12
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	4413      	add	r3, r2
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "%s\r\n", out);
 8005a3e:	f107 030c 	add.w	r3, r7, #12
 8005a42:	461a      	mov	r2, r3
 8005a44:	4909      	ldr	r1, [pc, #36]	; (8005a6c <cliMap+0x170>)
 8005a46:	2000      	movs	r0, #0
 8005a48:	f00d fefa 	bl	8013840 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3720      	adds	r7, #32
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	200007ac 	.word	0x200007ac
 8005a5c:	08029608 	.word	0x08029608
 8005a60:	08028c6c 	.word	0x08028c6c
 8005a64:	080273d4 	.word	0x080273d4
 8005a68:	080273f4 	.word	0x080273f4
 8005a6c:	08026de0 	.word	0x08026de0

08005a70 <cliMixer>:

static int cliMixer(int argc, char *argv[])
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 1) {
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d10c      	bne.n	8005a9a <cliMixer+0x2a>
        pifLog_Printf(LT_NONE, "Current mixer: %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005a80:	4b47      	ldr	r3, [pc, #284]	; (8005ba0 <cliMixer+0x130>)
 8005a82:	795b      	ldrb	r3, [r3, #5]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	4a47      	ldr	r2, [pc, #284]	; (8005ba4 <cliMixer+0x134>)
 8005a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4946      	ldr	r1, [pc, #280]	; (8005ba8 <cliMixer+0x138>)
 8005a90:	2000      	movs	r0, #0
 8005a92:	f00d fed5 	bl	8013840 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e07d      	b.n	8005b96 <cliMixer+0x126>
    } else if (strcasecmp(argv[1], "list") == 0) {
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4942      	ldr	r1, [pc, #264]	; (8005bac <cliMixer+0x13c>)
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f01d fd00 	bl	80234a8 <strcasecmp>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11f      	bne.n	8005aee <cliMixer+0x7e>
        pifLog_Print(LT_NONE, "Available mixers: ");
 8005aae:	4940      	ldr	r1, [pc, #256]	; (8005bb0 <cliMixer+0x140>)
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	f00d fe37 	bl	8013724 <pifLog_Print>
        for (i = 0; ; i++) {
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005aba:	4a3a      	ldr	r2, [pc, #232]	; (8005ba4 <cliMixer+0x134>)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00c      	beq.n	8005ae0 <cliMixer+0x70>
                break;
            pifLog_Printf(LT_NONE, "%s ", mixerNames[i]);
 8005ac6:	4a37      	ldr	r2, [pc, #220]	; (8005ba4 <cliMixer+0x134>)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	4938      	ldr	r1, [pc, #224]	; (8005bb4 <cliMixer+0x144>)
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f00d feb4 	bl	8013840 <pifLog_Printf>
        for (i = 0; ; i++) {
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3301      	adds	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005ade:	e7ec      	b.n	8005aba <cliMixer+0x4a>
                break;
 8005ae0:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005ae2:	4935      	ldr	r1, [pc, #212]	; (8005bb8 <cliMixer+0x148>)
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f00d fe1d 	bl	8013724 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e053      	b.n	8005b96 <cliMixer+0x126>
    }

    for (i = 0; ; i++) {
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005af2:	4a2c      	ldr	r2, [pc, #176]	; (8005ba4 <cliMixer+0x134>)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d105      	bne.n	8005b0a <cliMixer+0x9a>
            pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8005afe:	492f      	ldr	r1, [pc, #188]	; (8005bbc <cliMixer+0x14c>)
 8005b00:	2000      	movs	r0, #0
 8005b02:	f00d fe0f 	bl	8013724 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e045      	b.n	8005b96 <cliMixer+0x126>
        }
        if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	4924      	ldr	r1, [pc, #144]	; (8005ba4 <cliMixer+0x134>)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	f01d fcc4 	bl	80234a8 <strcasecmp>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d131      	bne.n	8005b8a <cliMixer+0x11a>
            mcfg.mixerConfiguration = i + 1;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ba0 <cliMixer+0x130>)
 8005b30:	715a      	strb	r2, [r3, #5]
            pifLog_Printf(LT_NONE, "Mixer set to %s\r\n", mixerNames[i]);
 8005b32:	4a1c      	ldr	r2, [pc, #112]	; (8005ba4 <cliMixer+0x134>)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	4920      	ldr	r1, [pc, #128]	; (8005bc0 <cliMixer+0x150>)
 8005b3e:	2000      	movs	r0, #0
 8005b40:	f00d fe7e 	bl	8013840 <pifLog_Printf>

            // Presets for planes. Not functional with current reset
            // Really Ugly Hack
            if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE) {
 8005b44:	4b16      	ldr	r3, [pc, #88]	; (8005ba0 <cliMixer+0x130>)
 8005b46:	795b      	ldrb	r3, [r3, #5]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d003      	beq.n	8005b54 <cliMixer+0xe4>
 8005b4c:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <cliMixer+0x130>)
 8005b4e:	795b      	ldrb	r3, [r3, #5]
 8005b50:	2b0e      	cmp	r3, #14
 8005b52:	d11e      	bne.n	8005b92 <cliMixer+0x122>
                cfg.dynThrPID = 90;
 8005b54:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <cliMixer+0x154>)
 8005b56:	225a      	movs	r2, #90	; 0x5a
 8005b58:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                cfg.rcExpo8 = 0;
 8005b5c:	4b19      	ldr	r3, [pc, #100]	; (8005bc4 <cliMixer+0x154>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2020 	strb.w	r2, [r3, #32]
                cfg.P8[PIDALT] = 30;
 8005b64:	4b17      	ldr	r3, [pc, #92]	; (8005bc4 <cliMixer+0x154>)
 8005b66:	221e      	movs	r2, #30
 8005b68:	711a      	strb	r2, [r3, #4]
                cfg.I8[PIDALT] = 20;
 8005b6a:	4b16      	ldr	r3, [pc, #88]	; (8005bc4 <cliMixer+0x154>)
 8005b6c:	2214      	movs	r2, #20
 8005b6e:	739a      	strb	r2, [r3, #14]
                cfg.D8[PIDALT] = 45;
 8005b70:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <cliMixer+0x154>)
 8005b72:	222d      	movs	r2, #45	; 0x2d
 8005b74:	761a      	strb	r2, [r3, #24]
                cfg.P8[PIDNAVR] = 30;
 8005b76:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <cliMixer+0x154>)
 8005b78:	221e      	movs	r2, #30
 8005b7a:	71da      	strb	r2, [r3, #7]
                cfg.I8[PIDNAVR] = 20;
 8005b7c:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <cliMixer+0x154>)
 8005b7e:	2214      	movs	r2, #20
 8005b80:	745a      	strb	r2, [r3, #17]
                cfg.D8[PIDNAVR] = 45;
 8005b82:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <cliMixer+0x154>)
 8005b84:	222d      	movs	r2, #45	; 0x2d
 8005b86:	76da      	strb	r2, [r3, #27]
            }
            break;
 8005b88:	e003      	b.n	8005b92 <cliMixer+0x122>
    for (i = 0; ; i++) {
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005b90:	e7af      	b.n	8005af2 <cliMixer+0x82>
            break;
 8005b92:	bf00      	nop
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	200007ac 	.word	0x200007ac
 8005ba4:	08027f98 	.word	0x08027f98
 8005ba8:	0802740c 	.word	0x0802740c
 8005bac:	08027318 	.word	0x08027318
 8005bb0:	08027420 	.word	0x08027420
 8005bb4:	08027314 	.word	0x08027314
 8005bb8:	08026e00 	.word	0x08026e00
 8005bbc:	08026e14 	.word	0x08026e14
 8005bc0:	08027434 	.word	0x08027434
 8005bc4:	20000d18 	.word	0x20000d18

08005bc8 <cliMotor>:

static int cliMotor(int argc, char *argv[])
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
    int motor_index = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
    int motor_value = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60bb      	str	r3, [r7, #8]

    if (argc == 1) {
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d105      	bne.n	8005bec <cliMotor+0x24>
        pifLog_Print(LT_NONE, "Usage:\r\nmotor index [value] - show [or set] motor value\r\n");
 8005be0:	4926      	ldr	r1, [pc, #152]	; (8005c7c <cliMotor+0xb4>)
 8005be2:	2000      	movs	r0, #0
 8005be4:	f00d fd9e 	bl	8013724 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005be8:	2300      	movs	r3, #0
 8005bea:	e043      	b.n	8005c74 <cliMotor+0xac>
    }

    if (argc < 3) {
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	dc0a      	bgt.n	8005c08 <cliMotor+0x40>
        pifLog_Printf(LT_NONE, "Motor %d is set at %d\r\n", motor_index, motor_disarmed[motor_index]);
 8005bf2:	4a23      	ldr	r2, [pc, #140]	; (8005c80 <cliMotor+0xb8>)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4921      	ldr	r1, [pc, #132]	; (8005c84 <cliMotor+0xbc>)
 8005bfe:	2000      	movs	r0, #0
 8005c00:	f00d fe1e 	bl	8013840 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005c04:	2300      	movs	r3, #0
 8005c06:	e035      	b.n	8005c74 <cliMotor+0xac>
    }

    motor_index = atoi(argv[1]);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f01d fae8 	bl	80231e4 <atoi>
 8005c14:	60f8      	str	r0, [r7, #12]
    motor_value = atoi(argv[2]);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	3308      	adds	r3, #8
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f01d fae1 	bl	80231e4 <atoi>
 8005c22:	60b8      	str	r0, [r7, #8]

    if (motor_index < 0 || motor_index >= MAX_MOTORS) {
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	db02      	blt.n	8005c30 <cliMotor+0x68>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b0b      	cmp	r3, #11
 8005c2e:	dd06      	ble.n	8005c3e <cliMotor+0x76>
        pifLog_Printf(LT_NONE, "No such motor, use a number [0, %d]\r\n", MAX_MOTORS);
 8005c30:	220c      	movs	r2, #12
 8005c32:	4915      	ldr	r1, [pc, #84]	; (8005c88 <cliMotor+0xc0>)
 8005c34:	2000      	movs	r0, #0
 8005c36:	f00d fe03 	bl	8013840 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e01a      	b.n	8005c74 <cliMotor+0xac>
    }

    if (motor_value < 1000 || motor_value > 2000) {
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c44:	db03      	blt.n	8005c4e <cliMotor+0x86>
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c4c:	dd05      	ble.n	8005c5a <cliMotor+0x92>
        pifLog_Print(LT_NONE, "Invalid motor value, 1000..2000\r\n");
 8005c4e:	490f      	ldr	r1, [pc, #60]	; (8005c8c <cliMotor+0xc4>)
 8005c50:	2000      	movs	r0, #0
 8005c52:	f00d fd67 	bl	8013724 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005c56:	2300      	movs	r3, #0
 8005c58:	e00c      	b.n	8005c74 <cliMotor+0xac>
    }

    pifLog_Printf(LT_NONE, "Setting motor %d to %d\r\n", motor_index, motor_value);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	490c      	ldr	r1, [pc, #48]	; (8005c90 <cliMotor+0xc8>)
 8005c60:	2000      	movs	r0, #0
 8005c62:	f00d fded 	bl	8013840 <pifLog_Printf>
    motor_disarmed[motor_index] = motor_value;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	b219      	sxth	r1, r3
 8005c6a:	4a05      	ldr	r2, [pc, #20]	; (8005c80 <cliMotor+0xb8>)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	return PIF_LOG_CMD_NO_ERROR;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	08027448 	.word	0x08027448
 8005c80:	200014a8 	.word	0x200014a8
 8005c84:	08027484 	.word	0x08027484
 8005c88:	0802749c 	.word	0x0802749c
 8005c8c:	080274c4 	.word	0x080274c4
 8005c90:	080274e8 	.word	0x080274e8

08005c94 <cliProfile>:

static int cliProfile(int argc, char *argv[])
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 1) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d108      	bne.n	8005cb6 <cliProfile+0x22>
        pifLog_Printf(LT_NONE, "Current profile: %d\r\n", mcfg.current_profile);
 8005ca4:	4b13      	ldr	r3, [pc, #76]	; (8005cf4 <cliProfile+0x60>)
 8005ca6:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8005caa:	461a      	mov	r2, r3
 8005cac:	4912      	ldr	r1, [pc, #72]	; (8005cf8 <cliProfile+0x64>)
 8005cae:	2000      	movs	r0, #0
 8005cb0:	f00d fdc6 	bl	8013840 <pifLog_Printf>
 8005cb4:	e019      	b.n	8005cea <cliProfile+0x56>
    } else {
        i = atoi(argv[1]);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f01d fa91 	bl	80231e4 <atoi>
 8005cc2:	60f8      	str	r0, [r7, #12]
        if (i >= 0 && i <= 2) {
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	db0f      	blt.n	8005cea <cliProfile+0x56>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	dc0c      	bgt.n	8005cea <cliProfile+0x56>
            mcfg.current_profile = i;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <cliProfile+0x60>)
 8005cd6:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            writeEEPROM(0, false);
 8005cda:	2100      	movs	r1, #0
 8005cdc:	2000      	movs	r0, #0
 8005cde:	f000 fcf5 	bl	80066cc <writeEEPROM>
            cliProfile(1, NULL);
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	2001      	movs	r0, #1
 8005ce6:	f7ff ffd5 	bl	8005c94 <cliProfile>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	200007ac 	.word	0x200007ac
 8005cf8:	08027504 	.word	0x08027504

08005cfc <cliSave>:

static int cliSave(int argc, char *argv[])
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Saving...");
 8005d06:	490b      	ldr	r1, [pc, #44]	; (8005d34 <cliSave+0x38>)
 8005d08:	2000      	movs	r0, #0
 8005d0a:	f00d fd0b 	bl	8013724 <pifLog_Print>
    writeEEPROM(0, true);
 8005d0e:	2101      	movs	r1, #1
 8005d10:	2000      	movs	r0, #0
 8005d12:	f000 fcdb 	bl	80066cc <writeEEPROM>
    pifLog_Print(LT_NONE, "\r\nRebooting...");
 8005d16:	4908      	ldr	r1, [pc, #32]	; (8005d38 <cliSave+0x3c>)
 8005d18:	2000      	movs	r0, #0
 8005d1a:	f00d fd03 	bl	8013724 <pifLog_Print>
    pif_Delay1ms(10);
 8005d1e:	200a      	movs	r0, #10
 8005d20:	f00b fe34 	bl	801198c <pif_Delay1ms>
    systemReset(false);
 8005d24:	2000      	movs	r0, #0
 8005d26:	f7fc f97b 	bl	8002020 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	0802751c 	.word	0x0802751c
 8005d38:	08027528 	.word	0x08027528

08005d3c <cliPrintVar>:

static void cliPrintVar(const clivalue_t *var, uint32_t full)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
    int32_t value = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
    char buf[8];

    switch (var->type) {
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	791b      	ldrb	r3, [r3, #4]
 8005d4e:	2b05      	cmp	r3, #5
 8005d50:	d864      	bhi.n	8005e1c <cliPrintVar+0xe0>
 8005d52:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <cliPrintVar+0x1c>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005d71 	.word	0x08005d71
 8005d5c:	08005d7b 	.word	0x08005d7b
 8005d60:	08005d87 	.word	0x08005d87
 8005d64:	08005d91 	.word	0x08005d91
 8005d68:	08005d9d 	.word	0x08005d9d
 8005d6c:	08005da7 	.word	0x08005da7
        case VAR_UINT8:
            value = *(uint8_t *)var->ptr;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	617b      	str	r3, [r7, #20]
            break;
 8005d78:	e050      	b.n	8005e1c <cliPrintVar+0xe0>

        case VAR_INT8:
            value = *(int8_t *)var->ptr;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f993 3000 	ldrsb.w	r3, [r3]
 8005d82:	617b      	str	r3, [r7, #20]
            break;
 8005d84:	e04a      	b.n	8005e1c <cliPrintVar+0xe0>

        case VAR_UINT16:
            value = *(uint16_t *)var->ptr;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	617b      	str	r3, [r7, #20]
            break;
 8005d8e:	e045      	b.n	8005e1c <cliPrintVar+0xe0>

        case VAR_INT16:
            value = *(int16_t *)var->ptr;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d98:	617b      	str	r3, [r7, #20]
            break;
 8005d9a:	e03f      	b.n	8005e1c <cliPrintVar+0xe0>

        case VAR_UINT32:
            value = *(uint32_t *)var->ptr;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	617b      	str	r3, [r7, #20]
            break;
 8005da4:	e03a      	b.n	8005e1c <cliPrintVar+0xe0>

        case VAR_FLOAT:
            pifLog_Printf(LT_NONE, "%s", ftoa(*(float *)var->ptr, buf));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	edd3 7a00 	vldr	s15, [r3]
 8005dae:	f107 030c 	add.w	r3, r7, #12
 8005db2:	4618      	mov	r0, r3
 8005db4:	eeb0 0a67 	vmov.f32	s0, s15
 8005db8:	f7fe fac4 	bl	8004344 <ftoa>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	4921      	ldr	r1, [pc, #132]	; (8005e48 <cliPrintVar+0x10c>)
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	f00d fd3c 	bl	8013840 <pifLog_Printf>
            if (full) {
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d037      	beq.n	8005e3e <cliPrintVar+0x102>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->min, buf));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dda:	f107 030c 	add.w	r3, r7, #12
 8005dde:	4618      	mov	r0, r3
 8005de0:	eeb0 0a67 	vmov.f32	s0, s15
 8005de4:	f7fe faae 	bl	8004344 <ftoa>
 8005de8:	4603      	mov	r3, r0
 8005dea:	461a      	mov	r2, r3
 8005dec:	4917      	ldr	r1, [pc, #92]	; (8005e4c <cliPrintVar+0x110>)
 8005dee:	2000      	movs	r0, #0
 8005df0:	f00d fd26 	bl	8013840 <pifLog_Printf>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->max, buf));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e00:	f107 030c 	add.w	r3, r7, #12
 8005e04:	4618      	mov	r0, r3
 8005e06:	eeb0 0a67 	vmov.f32	s0, s15
 8005e0a:	f7fe fa9b 	bl	8004344 <ftoa>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	461a      	mov	r2, r3
 8005e12:	490e      	ldr	r1, [pc, #56]	; (8005e4c <cliPrintVar+0x110>)
 8005e14:	2000      	movs	r0, #0
 8005e16:	f00d fd13 	bl	8013840 <pifLog_Printf>
 8005e1a:	e011      	b.n	8005e40 <cliPrintVar+0x104>
            }
            return; // return from case for float only
    }
    pifLog_Printf(LT_NONE, "%d", value);
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	490c      	ldr	r1, [pc, #48]	; (8005e50 <cliPrintVar+0x114>)
 8005e20:	2000      	movs	r0, #0
 8005e22:	f00d fd0d 	bl	8013840 <pifLog_Printf>
    if (full)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d009      	beq.n	8005e40 <cliPrintVar+0x104>
        pifLog_Printf(LT_NONE, " %d %d", var->min, var->max);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	4907      	ldr	r1, [pc, #28]	; (8005e54 <cliPrintVar+0x118>)
 8005e36:	2000      	movs	r0, #0
 8005e38:	f00d fd02 	bl	8013840 <pifLog_Printf>
 8005e3c:	e000      	b.n	8005e40 <cliPrintVar+0x104>
            return; // return from case for float only
 8005e3e:	bf00      	nop
}
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	08027240 	.word	0x08027240
 8005e4c:	08027538 	.word	0x08027538
 8005e50:	080270ec 	.word	0x080270ec
 8005e54:	0802753c 	.word	0x0802753c

08005e58 <cliSetVar>:

static void cliSetVar(const clivalue_t *var, const int_float_value_t value)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
    switch (var->type) {
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	791b      	ldrb	r3, [r3, #4]
 8005e66:	2b05      	cmp	r3, #5
 8005e68:	d824      	bhi.n	8005eb4 <cliSetVar+0x5c>
 8005e6a:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <cliSetVar+0x18>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005e89 	.word	0x08005e89
 8005e74:	08005e89 	.word	0x08005e89
 8005e78:	08005e95 	.word	0x08005e95
 8005e7c:	08005e95 	.word	0x08005e95
 8005e80:	08005ea1 	.word	0x08005ea1
 8005e84:	08005eab 	.word	0x08005eab
        case VAR_UINT8:
        case VAR_INT8:
            *(char *)var->ptr = (char)value.int_value;
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]
            break;
 8005e92:	e00f      	b.n	8005eb4 <cliSetVar+0x5c>

        case VAR_UINT16:
        case VAR_INT16:
            *(short *)var->ptr = (short)value.int_value;
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	b212      	sxth	r2, r2
 8005e9c:	801a      	strh	r2, [r3, #0]
            break;
 8005e9e:	e009      	b.n	8005eb4 <cliSetVar+0x5c>

        case VAR_UINT32:
            *(int *)var->ptr = (int)value.int_value;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	601a      	str	r2, [r3, #0]
            break;
 8005ea8:	e004      	b.n	8005eb4 <cliSetVar+0x5c>

        case VAR_FLOAT:
            *(float *)var->ptr = (float)value.float_value;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	601a      	str	r2, [r3, #0]
            break;
 8005eb2:	bf00      	nop
    }
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <cliSet>:

static int cliSet(int argc, char *argv[])
{
 8005ec0:	b5b0      	push	{r4, r5, r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
    uint32_t i;
    const clivalue_t *val;
    char *eqptr = NULL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61bb      	str	r3, [r7, #24]
    int32_t value = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]
    float valuef = 0;
 8005ed2:	f04f 0300 	mov.w	r3, #0
 8005ed6:	613b      	str	r3, [r7, #16]

    if (argc == 1 || (argc == 2 && argv[1][0] == '*')) {
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d008      	beq.n	8005ef0 <cliSet+0x30>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d137      	bne.n	8005f54 <cliSet+0x94>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b2a      	cmp	r3, #42	; 0x2a
 8005eee:	d131      	bne.n	8005f54 <cliSet+0x94>
        pifLog_Print(LT_NONE, "Current settings: \r\n");
 8005ef0:	4988      	ldr	r1, [pc, #544]	; (8006114 <cliSet+0x254>)
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	f00d fc16 	bl	8013724 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61fb      	str	r3, [r7, #28]
 8005efc:	e026      	b.n	8005f4c <cliSet+0x8c>
            val = &valueTable[i];
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	4613      	mov	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4a83      	ldr	r2, [pc, #524]	; (8006118 <cliSet+0x258>)
 8005f0a:	4413      	add	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
            pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 8005f0e:	4982      	ldr	r1, [pc, #520]	; (8006118 <cliSet+0x258>)
 8005f10:	69fa      	ldr	r2, [r7, #28]
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	497e      	ldr	r1, [pc, #504]	; (800611c <cliSet+0x25c>)
 8005f22:	2000      	movs	r0, #0
 8005f24:	f00d fc8c 	bl	8013840 <pifLog_Printf>
            cliPrintVar(val, strlen(argv[1])); // when len is 1 (when * is passed as argument), it will print min/max values as well, for gui
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fa f95c 	bl	80001ec <strlen>
 8005f34:	4603      	mov	r3, r0
 8005f36:	4619      	mov	r1, r3
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7ff feff 	bl	8005d3c <cliPrintVar>
            pifLog_Print(LT_NONE, "\r\n");
 8005f3e:	4978      	ldr	r1, [pc, #480]	; (8006120 <cliSet+0x260>)
 8005f40:	2000      	movs	r0, #0
 8005f42:	f00d fbef 	bl	8013724 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	2b8e      	cmp	r3, #142	; 0x8e
 8005f50:	d9d5      	bls.n	8005efe <cliSet+0x3e>
    if (argc == 1 || (argc == 2 && argv[1][0] == '*')) {
 8005f52:	e0da      	b.n	800610a <cliSet+0x24a>
        }
    } else if ((eqptr = strstr(argv[1], "=")) != NULL) {
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	3304      	adds	r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	213d      	movs	r1, #61	; 0x3d
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f01d facc 	bl	80234fa <strchr>
 8005f62:	61b8      	str	r0, [r7, #24]
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 8097 	beq.w	800609a <cliSet+0x1da>
        // has equal, set var
        eqptr++;
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	61bb      	str	r3, [r7, #24]
        value = atoi(eqptr);
 8005f72:	69b8      	ldr	r0, [r7, #24]
 8005f74:	f01d f936 	bl	80231e4 <atoi>
 8005f78:	6178      	str	r0, [r7, #20]
        valuef = _atof(eqptr);
 8005f7a:	69b8      	ldr	r0, [r7, #24]
 8005f7c:	f7fe f8ee 	bl	800415c <_atof>
 8005f80:	ed87 0a04 	vstr	s0, [r7, #16]
        for (i = 0; i < VALUE_COUNT; i++) {
 8005f84:	2300      	movs	r3, #0
 8005f86:	61fb      	str	r3, [r7, #28]
 8005f88:	e07d      	b.n	8006086 <cliSet+0x1c6>
            val = &valueTable[i];
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4a60      	ldr	r2, [pc, #384]	; (8006118 <cliSet+0x258>)
 8005f96:	4413      	add	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
            if (strncasecmp(argv[1], valueTable[i].name, strlen(valueTable[i].name)) == 0) {
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	681c      	ldr	r4, [r3, #0]
 8005fa0:	495d      	ldr	r1, [pc, #372]	; (8006118 <cliSet+0x258>)
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	440b      	add	r3, r1
 8005fae:	681d      	ldr	r5, [r3, #0]
 8005fb0:	4959      	ldr	r1, [pc, #356]	; (8006118 <cliSet+0x258>)
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	440b      	add	r3, r1
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fa f913 	bl	80001ec <strlen>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4629      	mov	r1, r5
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f01d faa9 	bl	8023524 <strncasecmp>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d153      	bne.n	8006080 <cliSet+0x1c0>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 8005fd8:	494f      	ldr	r1, [pc, #316]	; (8006118 <cliSet+0x258>)
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	440b      	add	r3, r1
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ff2:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ffe:	db39      	blt.n	8006074 <cliSet+0x1b4>
 8006000:	4945      	ldr	r1, [pc, #276]	; (8006118 <cliSet+0x258>)
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	440b      	add	r3, r1
 800600e:	3310      	adds	r3, #16
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800601a:	ed97 7a04 	vldr	s14, [r7, #16]
 800601e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006026:	d825      	bhi.n	8006074 <cliSet+0x1b4>
                    int_float_value_t tmp;
                    if (valueTable[i].type == VAR_FLOAT)
 8006028:	493b      	ldr	r1, [pc, #236]	; (8006118 <cliSet+0x258>)
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	3304      	adds	r3, #4
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b05      	cmp	r3, #5
 800603c:	d102      	bne.n	8006044 <cliSet+0x184>
                        tmp.float_value = valuef;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	60bb      	str	r3, [r7, #8]
 8006042:	e001      	b.n	8006048 <cliSet+0x188>
                    else
                        tmp.int_value = value;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	60bb      	str	r3, [r7, #8]
                    cliSetVar(val, tmp);
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff ff04 	bl	8005e58 <cliSetVar>
                    pifLog_Printf(LT_NONE, "%s set to ", valueTable[i].name);
 8006050:	4931      	ldr	r1, [pc, #196]	; (8006118 <cliSet+0x258>)
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	4930      	ldr	r1, [pc, #192]	; (8006124 <cliSet+0x264>)
 8006064:	2000      	movs	r0, #0
 8006066:	f00d fbeb 	bl	8013840 <pifLog_Printf>
                    cliPrintVar(val, 0);
 800606a:	2100      	movs	r1, #0
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff fe65 	bl	8005d3c <cliPrintVar>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 8006072:	e003      	b.n	800607c <cliSet+0x1bc>
                } else {
                    pifLog_Print(LT_NONE, "ERR: Value assignment out of range\r\n");
 8006074:	492c      	ldr	r1, [pc, #176]	; (8006128 <cliSet+0x268>)
 8006076:	2000      	movs	r0, #0
 8006078:	f00d fb54 	bl	8013724 <pifLog_Print>
                }
                return PIF_LOG_CMD_NO_ERROR;
 800607c:	2300      	movs	r3, #0
 800607e:	e045      	b.n	800610c <cliSet+0x24c>
        for (i = 0; i < VALUE_COUNT; i++) {
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	3301      	adds	r3, #1
 8006084:	61fb      	str	r3, [r7, #28]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	2b8e      	cmp	r3, #142	; 0x8e
 800608a:	f67f af7e 	bls.w	8005f8a <cliSet+0xca>
            }
        }
        pifLog_Print(LT_NONE, "ERR: Unknown variable name\r\n");
 800608e:	4927      	ldr	r1, [pc, #156]	; (800612c <cliSet+0x26c>)
 8006090:	2000      	movs	r0, #0
 8006092:	f00d fb47 	bl	8013724 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8006096:	2300      	movs	r3, #0
 8006098:	e038      	b.n	800610c <cliSet+0x24c>
    } else {
        // no equals, check for matching variables.
        for (i = 0; i < VALUE_COUNT; i++) {
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	e031      	b.n	8006104 <cliSet+0x244>
            if (strstr(valueTable[i].name, argv[1])) {
 80060a0:	491d      	ldr	r1, [pc, #116]	; (8006118 <cliSet+0x258>)
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	3304      	adds	r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f01d fa68 	bl	802358e <strstr>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01c      	beq.n	80060fe <cliSet+0x23e>
                val = &valueTable[i];
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	4613      	mov	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4a12      	ldr	r2, [pc, #72]	; (8006118 <cliSet+0x258>)
 80060d0:	4413      	add	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
                pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 80060d4:	4910      	ldr	r1, [pc, #64]	; (8006118 <cliSet+0x258>)
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	440b      	add	r3, r1
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	490d      	ldr	r1, [pc, #52]	; (800611c <cliSet+0x25c>)
 80060e8:	2000      	movs	r0, #0
 80060ea:	f00d fba9 	bl	8013840 <pifLog_Printf>
                cliPrintVar(val, 0);
 80060ee:	2100      	movs	r1, #0
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f7ff fe23 	bl	8005d3c <cliPrintVar>
                pifLog_Print(LT_NONE, "\r\n");
 80060f6:	490a      	ldr	r1, [pc, #40]	; (8006120 <cliSet+0x260>)
 80060f8:	2000      	movs	r0, #0
 80060fa:	f00d fb13 	bl	8013724 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	3301      	adds	r3, #1
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	2b8e      	cmp	r3, #142	; 0x8e
 8006108:	d9ca      	bls.n	80060a0 <cliSet+0x1e0>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3720      	adds	r7, #32
 8006110:	46bd      	mov	sp, r7
 8006112:	bdb0      	pop	{r4, r5, r7, pc}
 8006114:	08027544 	.word	0x08027544
 8006118:	08028140 	.word	0x08028140
 800611c:	0802755c 	.word	0x0802755c
 8006120:	08026e00 	.word	0x08026e00
 8006124:	08027564 	.word	0x08027564
 8006128:	08027570 	.word	0x08027570
 800612c:	08027598 	.word	0x08027598

08006130 <cliStatus>:

static int cliStatus(int argc, char *argv[])
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af02      	add	r7, sp, #8
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    uint8_t i;
    uint32_t mask;

    pifLog_Printf(LT_NONE, "System Uptime: %ld seconds, Voltage: %d * 0.1V (%dS battery)\r\n",
 800613a:	4b4c      	ldr	r3, [pc, #304]	; (800626c <cliStatus+0x13c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a4c      	ldr	r2, [pc, #304]	; (8006270 <cliStatus+0x140>)
 8006140:	fba2 2303 	umull	r2, r3, r2, r3
 8006144:	099a      	lsrs	r2, r3, #6
 8006146:	4b4b      	ldr	r3, [pc, #300]	; (8006274 <cliStatus+0x144>)
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	4619      	mov	r1, r3
 800614c:	4b4a      	ldr	r3, [pc, #296]	; (8006278 <cliStatus+0x148>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	460b      	mov	r3, r1
 8006154:	4949      	ldr	r1, [pc, #292]	; (800627c <cliStatus+0x14c>)
 8006156:	2000      	movs	r0, #0
 8006158:	f00d fb72 	bl	8013840 <pifLog_Printf>
           pif_cumulative_timer1ms / 1000, vbat, batteryCellCount);
    mask = sensorsMask();
 800615c:	f000 fe8c 	bl	8006e78 <sensorsMask>
 8006160:	60b8      	str	r0, [r7, #8]

    pifLog_Printf(LT_NONE, "Hardware: %s @ %ldMHz, detected sensors: ", g_board_name, (g_core_clock / 1000000));
 8006162:	4b47      	ldr	r3, [pc, #284]	; (8006280 <cliStatus+0x150>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a47      	ldr	r2, [pc, #284]	; (8006284 <cliStatus+0x154>)
 8006168:	fba2 2303 	umull	r2, r3, r2, r3
 800616c:	0c9b      	lsrs	r3, r3, #18
 800616e:	4a46      	ldr	r2, [pc, #280]	; (8006288 <cliStatus+0x158>)
 8006170:	4946      	ldr	r1, [pc, #280]	; (800628c <cliStatus+0x15c>)
 8006172:	2000      	movs	r0, #0
 8006174:	f00d fb64 	bl	8013840 <pifLog_Printf>
    for (i = 0; ; i++) {
 8006178:	2300      	movs	r3, #0
 800617a:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	4a44      	ldr	r2, [pc, #272]	; (8006290 <cliStatus+0x160>)
 8006180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d015      	beq.n	80061b4 <cliStatus+0x84>
            break;
        if (mask & (1 << i))
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	2201      	movs	r2, #1
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	461a      	mov	r2, r3
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	4013      	ands	r3, r2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d008      	beq.n	80061ac <cliStatus+0x7c>
            pifLog_Printf(LT_NONE, "%s ", sensorNames[i]);
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	4a3c      	ldr	r2, [pc, #240]	; (8006290 <cliStatus+0x160>)
 800619e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a2:	461a      	mov	r2, r3
 80061a4:	493b      	ldr	r1, [pc, #236]	; (8006294 <cliStatus+0x164>)
 80061a6:	2000      	movs	r0, #0
 80061a8:	f00d fb4a 	bl	8013840 <pifLog_Printf>
    for (i = 0; ; i++) {
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	3301      	adds	r3, #1
 80061b0:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 80061b2:	e7e3      	b.n	800617c <cliStatus+0x4c>
            break;
 80061b4:	bf00      	nop
    }
    pifLog_Print(LT_NONE, "\r\n");
 80061b6:	4938      	ldr	r1, [pc, #224]	; (8006298 <cliStatus+0x168>)
 80061b8:	2000      	movs	r0, #0
 80061ba:	f00d fab3 	bl	8013724 <pifLog_Print>
    if (sensors(SENSOR_GYRO))
 80061be:	2001      	movs	r0, #1
 80061c0:	f000 fe1e 	bl	8006e00 <sensors>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d006      	beq.n	80061d8 <cliStatus+0xa8>
        pifLog_Printf(LT_NONE, "GYRO_HW: %s ", sensor_set.gyro.hardware);
 80061ca:	4b34      	ldr	r3, [pc, #208]	; (800629c <cliStatus+0x16c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	4933      	ldr	r1, [pc, #204]	; (80062a0 <cliStatus+0x170>)
 80061d2:	2000      	movs	r0, #0
 80061d4:	f00d fb34 	bl	8013840 <pifLog_Printf>
    if (sensors(SENSOR_ACC))
 80061d8:	2002      	movs	r0, #2
 80061da:	f000 fe11 	bl	8006e00 <sensors>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d006      	beq.n	80061f2 <cliStatus+0xc2>
        pifLog_Printf(LT_NONE, "ACC_HW: %s ", sensor_set.acc.hardware);
 80061e4:	4b2d      	ldr	r3, [pc, #180]	; (800629c <cliStatus+0x16c>)
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	461a      	mov	r2, r3
 80061ea:	492e      	ldr	r1, [pc, #184]	; (80062a4 <cliStatus+0x174>)
 80061ec:	2000      	movs	r0, #0
 80061ee:	f00d fb27 	bl	8013840 <pifLog_Printf>
    if (sensors(SENSOR_MAG))
 80061f2:	2008      	movs	r0, #8
 80061f4:	f000 fe04 	bl	8006e00 <sensors>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d006      	beq.n	800620c <cliStatus+0xdc>
        pifLog_Printf(LT_NONE, ", MAG_HW: %s ", sensor_set.mag.hardware);
 80061fe:	4b27      	ldr	r3, [pc, #156]	; (800629c <cliStatus+0x16c>)
 8006200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006202:	461a      	mov	r2, r3
 8006204:	4928      	ldr	r1, [pc, #160]	; (80062a8 <cliStatus+0x178>)
 8006206:	2000      	movs	r0, #0
 8006208:	f00d fb1a 	bl	8013840 <pifLog_Printf>
    if (sensors(SENSOR_BARO))
 800620c:	2004      	movs	r0, #4
 800620e:	f000 fdf7 	bl	8006e00 <sensors>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d006      	beq.n	8006226 <cliStatus+0xf6>
        pifLog_Printf(LT_NONE, ", BARO_HW: %s ", sensor_set.baro.hardware);
 8006218:	4b20      	ldr	r3, [pc, #128]	; (800629c <cliStatus+0x16c>)
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	461a      	mov	r2, r3
 800621e:	4923      	ldr	r1, [pc, #140]	; (80062ac <cliStatus+0x17c>)
 8006220:	2000      	movs	r0, #0
 8006222:	f00d fb0d 	bl	8013840 <pifLog_Printf>
    pifLog_Print(LT_NONE, "\r\n");
 8006226:	491c      	ldr	r1, [pc, #112]	; (8006298 <cliStatus+0x168>)
 8006228:	2000      	movs	r0, #0
 800622a:	f00d fa7b 	bl	8013724 <pifLog_Print>

    pifLog_Printf(LT_NONE, "Cycle Time: %d, I2C Errors: %d, config size: %d\r\n", cycleTime, g_i2c_port.error_count, sizeof(master_t));
 800622e:	4b20      	ldr	r3, [pc, #128]	; (80062b0 <cliStatus+0x180>)
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	4b1f      	ldr	r3, [pc, #124]	; (80062b4 <cliStatus+0x184>)
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	4619      	mov	r1, r3
 800623a:	f240 536c 	movw	r3, #1388	; 0x56c
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	460b      	mov	r3, r1
 8006242:	491d      	ldr	r1, [pc, #116]	; (80062b8 <cliStatus+0x188>)
 8006244:	2000      	movs	r0, #0
 8006246:	f00d fafb 	bl	8013840 <pifLog_Printf>

   	pifLog_Printf(LT_NONE, "PIF Timer 1ms count=%d\n", pifTimerManager_Count(&g_timer_1ms));
 800624a:	481c      	ldr	r0, [pc, #112]	; (80062bc <cliStatus+0x18c>)
 800624c:	f00e fe13 	bl	8014e76 <pifTimerManager_Count>
 8006250:	4603      	mov	r3, r0
 8006252:	461a      	mov	r2, r3
 8006254:	491a      	ldr	r1, [pc, #104]	; (80062c0 <cliStatus+0x190>)
 8006256:	2000      	movs	r0, #0
 8006258:	f00d faf2 	bl	8013840 <pifLog_Printf>

    cliStatusCallback();
 800625c:	f000 f872 	bl	8006344 <cliStatusCallback>

	return PIF_LOG_CMD_NO_ERROR;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20001f08 	.word	0x20001f08
 8006270:	10624dd3 	.word	0x10624dd3
 8006274:	2000164c 	.word	0x2000164c
 8006278:	20000054 	.word	0x20000054
 800627c:	080275b8 	.word	0x080275b8
 8006280:	20001618 	.word	0x20001618
 8006284:	431bde83 	.word	0x431bde83
 8006288:	08027f1c 	.word	0x08027f1c
 800628c:	080275f8 	.word	0x080275f8
 8006290:	08028048 	.word	0x08028048
 8006294:	08027314 	.word	0x08027314
 8006298:	08026e00 	.word	0x08026e00
 800629c:	200019c8 	.word	0x200019c8
 80062a0:	08027624 	.word	0x08027624
 80062a4:	08027634 	.word	0x08027634
 80062a8:	08027640 	.word	0x08027640
 80062ac:	08027650 	.word	0x08027650
 80062b0:	20001648 	.word	0x20001648
 80062b4:	200017d0 	.word	0x200017d0
 80062b8:	08027660 	.word	0x08027660
 80062bc:	20001800 	.word	0x20001800
 80062c0:	08027694 	.word	0x08027694

080062c4 <cliVersion>:

static int cliVersion(int argc, char *argv[])
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Printf(LT_NONE, "Afro32 CLI version 2.3 " __DATE__ " / " __TIME__);
 80062ce:	4904      	ldr	r1, [pc, #16]	; (80062e0 <cliVersion+0x1c>)
 80062d0:	2000      	movs	r0, #0
 80062d2:	f00d fab5 	bl	8013840 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	080276ac 	.word	0x080276ac

080062e4 <cliInit>:

BOOL cliInit(PifComm* p_comm)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
    if (!cliMode) {
 80062ec:	4b11      	ldr	r3, [pc, #68]	; (8006334 <cliInit+0x50>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d119      	bne.n	8006328 <cliInit+0x44>
        cliMode = 1;
 80062f4:	4b0f      	ldr	r3, [pc, #60]	; (8006334 <cliInit+0x50>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	701a      	strb	r2, [r3, #0]

#ifndef __PIF_NO_LOG__
        pifLog_DetachComm();
 80062fa:	f00d fb55 	bl	80139a8 <pifLog_DetachComm>
#else
        pifLog_Init();
#endif
        if (!pifLog_AttachComm(p_comm)) return FALSE;
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f00d fb2c 	bl	801395c <pifLog_AttachComm>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <cliInit+0x2a>
 800630a:	2300      	movs	r3, #0
 800630c:	e00d      	b.n	800632a <cliInit+0x46>
        if (!pifLog_UseCommand(c_psCmdTable, "\r\n# ")) return FALSE;
 800630e:	490a      	ldr	r1, [pc, #40]	; (8006338 <cliInit+0x54>)
 8006310:	480a      	ldr	r0, [pc, #40]	; (800633c <cliInit+0x58>)
 8006312:	f00d f9cd 	bl	80136b0 <pifLog_UseCommand>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <cliInit+0x3c>
 800631c:	2300      	movs	r3, #0
 800631e:	e004      	b.n	800632a <cliInit+0x46>
        pifLog_Print(LT_NONE, "\r\nEntering CLI Mode, type 'exit' to return, or 'help'\r\n");
 8006320:	4907      	ldr	r1, [pc, #28]	; (8006340 <cliInit+0x5c>)
 8006322:	2000      	movs	r0, #0
 8006324:	f00d f9fe 	bl	8013724 <pifLog_Print>
    }
    return TRUE;
 8006328:	2301      	movs	r3, #1
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000774 	.word	0x20000774
 8006338:	080276dc 	.word	0x080276dc
 800633c:	08028068 	.word	0x08028068
 8006340:	080276e4 	.word	0x080276e4

08006344 <cliStatusCallback>:

__attribute__ ((weak)) void cliStatusCallback()
{
 8006344:	b480      	push	{r7}
 8006346:	af00      	add	r7, sp, #0

}
 8006348:	bf00      	nop
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
	...

08006354 <initEEPROM>:
static void resetConf(void);

static PifStorage* p_storage;

bool initEEPROM(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
	p_storage = storageInit();
 8006358:	f7fb ff0a 	bl	8002170 <storageInit>
 800635c:	4603      	mov	r3, r0
 800635e:	4a05      	ldr	r2, [pc, #20]	; (8006374 <initEEPROM+0x20>)
 8006360:	6013      	str	r3, [r2, #0]
	return p_storage != NULL;
 8006362:	4b04      	ldr	r3, [pc, #16]	; (8006374 <initEEPROM+0x20>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf14      	ite	ne
 800636a:	2301      	movne	r3, #1
 800636c:	2300      	moveq	r3, #0
 800636e:	b2db      	uxtb	r3, r3
}
 8006370:	4618      	mov	r0, r3
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20000e54 	.word	0x20000e54

08006378 <parseRcChannels>:

void parseRcChannels(const char *input)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
    const char *c, *s;

    for (c = input; *c; c++) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	e018      	b.n	80063b8 <parseRcChannels+0x40>
        s = strchr(rcChannelLetters, *c);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	4619      	mov	r1, r3
 800638c:	480f      	ldr	r0, [pc, #60]	; (80063cc <parseRcChannels+0x54>)
 800638e:	f01d f8b4 	bl	80234fa <strchr>
 8006392:	60b8      	str	r0, [r7, #8]
        if (s)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00b      	beq.n	80063b2 <parseRcChannels+0x3a>
            mcfg.rcmap[s - rcChannelLetters] = c - input;
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	1ad1      	subs	r1, r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4a0a      	ldr	r2, [pc, #40]	; (80063cc <parseRcChannels+0x54>)
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	b2c9      	uxtb	r1, r1
 80063a8:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <parseRcChannels+0x58>)
 80063aa:	4413      	add	r3, r2
 80063ac:	460a      	mov	r2, r1
 80063ae:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
    for (c = input; *c; c++) {
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3301      	adds	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e2      	bne.n	8006386 <parseRcChannels+0xe>
    }
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	08028c6c 	.word	0x08028c6c
 80063d0:	200007ac 	.word	0x200007ac

080063d4 <validEEPROM>:

static uint8_t validEEPROM(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
    master_t *temp = NULL;
 80063da:	2300      	movs	r3, #0
 80063dc:	607b      	str	r3, [r7, #4]
    const uint8_t *p;
    uint8_t chk = 0;
 80063de:	2300      	movs	r3, #0
 80063e0:	72fb      	strb	r3, [r7, #11]
	PifStorageDataInfoP p_data_info;

    temp = malloc(sizeof(master_t));
 80063e2:	f240 506c 	movw	r0, #1388	; 0x56c
 80063e6:	f01c ff33 	bl	8023250 <malloc>
 80063ea:	4603      	mov	r3, r0
 80063ec:	607b      	str	r3, [r7, #4]
    if (!temp) return 0;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <validEEPROM+0x24>
 80063f4:	2300      	movs	r3, #0
 80063f6:	e04e      	b.n	8006496 <validEEPROM+0xc2>

    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 80063f8:	4b29      	ldr	r3, [pc, #164]	; (80064a0 <validEEPROM+0xcc>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	214c      	movs	r1, #76	; 0x4c
 80063fe:	4618      	mov	r0, r3
 8006400:	f014 ff5d 	bl	801b2be <pifStorage_Open>
 8006404:	6038      	str	r0, [r7, #0]
    if (!p_data_info) goto fail;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d037      	beq.n	800647c <validEEPROM+0xa8>

    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 800640c:	4b24      	ldr	r3, [pc, #144]	; (80064a0 <validEEPROM+0xcc>)
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	f240 536c 	movw	r3, #1388	; 0x56c
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	6879      	ldr	r1, [r7, #4]
 8006418:	f014 ff62 	bl	801b2e0 <pifStorage_Read>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d02e      	beq.n	8006480 <validEEPROM+0xac>

    // check version number
    if (EEPROM_CONF_VERSION != temp->version)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	224c      	movs	r2, #76	; 0x4c
 8006428:	4293      	cmp	r3, r2
 800642a:	d12b      	bne.n	8006484 <validEEPROM+0xb0>
        goto fail;

    // check size and magic numbers
    if (temp->size != sizeof(master_t) || temp->magic_be != 0xBE || temp->magic_ef != 0xEF)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	885b      	ldrh	r3, [r3, #2]
 8006430:	f240 526c 	movw	r2, #1388	; 0x56c
 8006434:	4293      	cmp	r3, r2
 8006436:	d127      	bne.n	8006488 <validEEPROM+0xb4>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	791b      	ldrb	r3, [r3, #4]
 800643c:	2bbe      	cmp	r3, #190	; 0xbe
 800643e:	d123      	bne.n	8006488 <validEEPROM+0xb4>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 356a 	ldrb.w	r3, [r3, #1386]	; 0x56a
 8006446:	2bef      	cmp	r3, #239	; 0xef
 8006448:	d11e      	bne.n	8006488 <validEEPROM+0xb4>
        goto fail;

    // verify integrity of temporary copy
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	e007      	b.n	8006460 <validEEPROM+0x8c>
        chk ^= *p;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	781a      	ldrb	r2, [r3, #0]
 8006454:	7afb      	ldrb	r3, [r7, #11]
 8006456:	4053      	eors	r3, r2
 8006458:	72fb      	strb	r3, [r7, #11]
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3301      	adds	r3, #1
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	429a      	cmp	r2, r3
 800646a:	d3f1      	bcc.n	8006450 <validEEPROM+0x7c>

    // checksum failed
    if (chk != 0)
 800646c:	7afb      	ldrb	r3, [r7, #11]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10c      	bne.n	800648c <validEEPROM+0xb8>
        goto fail;

    free(temp);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f01c fef4 	bl	8023260 <free>

    // looks good, let's roll!
    return 1;
 8006478:	2301      	movs	r3, #1
 800647a:	e00c      	b.n	8006496 <validEEPROM+0xc2>
    if (!p_data_info) goto fail;
 800647c:	bf00      	nop
 800647e:	e006      	b.n	800648e <validEEPROM+0xba>
    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 8006480:	bf00      	nop
 8006482:	e004      	b.n	800648e <validEEPROM+0xba>
        goto fail;
 8006484:	bf00      	nop
 8006486:	e002      	b.n	800648e <validEEPROM+0xba>
        goto fail;
 8006488:	bf00      	nop
 800648a:	e000      	b.n	800648e <validEEPROM+0xba>
        goto fail;
 800648c:	bf00      	nop

fail:
    free(temp);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f01c fee6 	bl	8023260 <free>
    return 0;    
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000e54 	.word	0x20000e54

080064a4 <readEEPROM>:

void readEEPROM(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
	PifStorageDataInfoP p_data_info;

    // Sanity check
    if (!validEEPROM()) goto fail;
 80064aa:	f7ff ff93 	bl	80063d4 <validEEPROM>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d030      	beq.n	8006516 <readEEPROM+0x72>

    // Read flash
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 80064b4:	4b1d      	ldr	r3, [pc, #116]	; (800652c <readEEPROM+0x88>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	214c      	movs	r1, #76	; 0x4c
 80064ba:	4618      	mov	r0, r3
 80064bc:	f014 feff 	bl	801b2be <pifStorage_Open>
 80064c0:	6078      	str	r0, [r7, #4]
    if (!p_data_info) goto fail;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d028      	beq.n	800651a <readEEPROM+0x76>

    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 80064c8:	4b18      	ldr	r3, [pc, #96]	; (800652c <readEEPROM+0x88>)
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	f240 536c 	movw	r3, #1388	; 0x56c
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4917      	ldr	r1, [pc, #92]	; (8006530 <readEEPROM+0x8c>)
 80064d4:	f014 ff04 	bl	801b2e0 <pifStorage_Read>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d01f      	beq.n	800651e <readEEPROM+0x7a>

    // Copy current profile
    if (mcfg.current_profile > 2) // sanity check
 80064de:	4b14      	ldr	r3, [pc, #80]	; (8006530 <readEEPROM+0x8c>)
 80064e0:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d903      	bls.n	80064f0 <readEEPROM+0x4c>
        mcfg.current_profile = 0;
 80064e8:	4b11      	ldr	r3, [pc, #68]	; (8006530 <readEEPROM+0x8c>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    memcpy(&cfg, &mcfg.profile[mcfg.current_profile], sizeof(config_t));
 80064f0:	4b0f      	ldr	r3, [pc, #60]	; (8006530 <readEEPROM+0x8c>)
 80064f2:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 80064f6:	461a      	mov	r2, r3
 80064f8:	f44f 739c 	mov.w	r3, #312	; 0x138
 80064fc:	fb02 f303 	mul.w	r3, r2, r3
 8006500:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006504:	4a0a      	ldr	r2, [pc, #40]	; (8006530 <readEEPROM+0x8c>)
 8006506:	4413      	add	r3, r2
 8006508:	f44f 729c 	mov.w	r2, #312	; 0x138
 800650c:	4619      	mov	r1, r3
 800650e:	4809      	ldr	r0, [pc, #36]	; (8006534 <readEEPROM+0x90>)
 8006510:	f01c feae 	bl	8023270 <memcpy>
    return;
 8006514:	e007      	b.n	8006526 <readEEPROM+0x82>
    if (!validEEPROM()) goto fail;
 8006516:	bf00      	nop
 8006518:	e002      	b.n	8006520 <readEEPROM+0x7c>
    if (!p_data_info) goto fail;
 800651a:	bf00      	nop
 800651c:	e000      	b.n	8006520 <readEEPROM+0x7c>
    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 800651e:	bf00      	nop

fail:    
    failureMode(10);
 8006520:	200a      	movs	r0, #10
 8006522:	f7fb fd4e 	bl	8001fc2 <failureMode>
}
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20000e54 	.word	0x20000e54
 8006530:	200007ac 	.word	0x200007ac
 8006534:	20000d18 	.word	0x20000d18

08006538 <activateConfig>:

void activateConfig(void)
{
 8006538:	b5b0      	push	{r4, r5, r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 800653e:	2300      	movs	r3, #0
 8006540:	71fb      	strb	r3, [r7, #7]
 8006542:	e021      	b.n	8006588 <activateConfig+0x50>
        lookupPitchRollRC[i] = (2500 + cfg.rcExpo8 * (i * i - 25)) * i * (int32_t)cfg.rcRate8 / 2500;
 8006544:	4b56      	ldr	r3, [pc, #344]	; (80066a0 <activateConfig+0x168>)
 8006546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800654a:	4619      	mov	r1, r3
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	79fa      	ldrb	r2, [r7, #7]
 8006550:	fb02 f303 	mul.w	r3, r2, r3
 8006554:	3b19      	subs	r3, #25
 8006556:	fb01 f303 	mul.w	r3, r1, r3
 800655a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800655e:	79fa      	ldrb	r2, [r7, #7]
 8006560:	fb02 f303 	mul.w	r3, r2, r3
 8006564:	4a4e      	ldr	r2, [pc, #312]	; (80066a0 <activateConfig+0x168>)
 8006566:	7fd2      	ldrb	r2, [r2, #31]
 8006568:	fb02 f303 	mul.w	r3, r2, r3
 800656c:	4a4d      	ldr	r2, [pc, #308]	; (80066a4 <activateConfig+0x16c>)
 800656e:	fb82 1203 	smull	r1, r2, r2, r3
 8006572:	1292      	asrs	r2, r2, #10
 8006574:	17db      	asrs	r3, r3, #31
 8006576:	1ad2      	subs	r2, r2, r3
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	b211      	sxth	r1, r2
 800657c:	4a4a      	ldr	r2, [pc, #296]	; (80066a8 <activateConfig+0x170>)
 800657e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	3301      	adds	r3, #1
 8006586:	71fb      	strb	r3, [r7, #7]
 8006588:	79fb      	ldrb	r3, [r7, #7]
 800658a:	2b06      	cmp	r3, #6
 800658c:	d9da      	bls.n	8006544 <activateConfig+0xc>

    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 800658e:	2300      	movs	r3, #0
 8006590:	71fb      	strb	r3, [r7, #7]
 8006592:	e076      	b.n	8006682 <activateConfig+0x14a>
        int16_t tmp = 10 * i - cfg.thrMid8;
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	b29b      	uxth	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	0092      	lsls	r2, r2, #2
 800659c:	4413      	add	r3, r2
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	4b3f      	ldr	r3, [pc, #252]	; (80066a0 <activateConfig+0x168>)
 80065a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	80bb      	strh	r3, [r7, #4]
        uint8_t y = 1;
 80065b0:	2301      	movs	r3, #1
 80065b2:	71bb      	strb	r3, [r7, #6]
        if (tmp > 0)
 80065b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	dd05      	ble.n	80065c8 <activateConfig+0x90>
            y = 100 - cfg.thrMid8;
 80065bc:	4b38      	ldr	r3, [pc, #224]	; (80066a0 <activateConfig+0x168>)
 80065be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065c2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80065c6:	71bb      	strb	r3, [r7, #6]
        if (tmp < 0)
 80065c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	da03      	bge.n	80065d8 <activateConfig+0xa0>
            y = cfg.thrMid8;
 80065d0:	4b33      	ldr	r3, [pc, #204]	; (80066a0 <activateConfig+0x168>)
 80065d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065d6:	71bb      	strb	r3, [r7, #6]
        lookupThrottleRC[i] = 10 * cfg.thrMid8 + tmp * (100 - cfg.thrExpo8 + (int32_t)cfg.thrExpo8 * (tmp * tmp) / (y * y)) / 10;
 80065d8:	4b31      	ldr	r3, [pc, #196]	; (80066a0 <activateConfig+0x168>)
 80065da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065de:	b29b      	uxth	r3, r3
 80065e0:	461a      	mov	r2, r3
 80065e2:	0092      	lsls	r2, r2, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80065ee:	492c      	ldr	r1, [pc, #176]	; (80066a0 <activateConfig+0x168>)
 80065f0:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80065f4:	f1c1 0064 	rsb	r0, r1, #100	; 0x64
 80065f8:	4929      	ldr	r1, [pc, #164]	; (80066a0 <activateConfig+0x168>)
 80065fa:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80065fe:	460d      	mov	r5, r1
 8006600:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006604:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006608:	fb04 f101 	mul.w	r1, r4, r1
 800660c:	fb01 f405 	mul.w	r4, r1, r5
 8006610:	79b9      	ldrb	r1, [r7, #6]
 8006612:	79bd      	ldrb	r5, [r7, #6]
 8006614:	fb05 f101 	mul.w	r1, r5, r1
 8006618:	fb94 f1f1 	sdiv	r1, r4, r1
 800661c:	4401      	add	r1, r0
 800661e:	fb01 f303 	mul.w	r3, r1, r3
 8006622:	4922      	ldr	r1, [pc, #136]	; (80066ac <activateConfig+0x174>)
 8006624:	fb81 0103 	smull	r0, r1, r1, r3
 8006628:	1089      	asrs	r1, r1, #2
 800662a:	17db      	asrs	r3, r3, #31
 800662c:	1acb      	subs	r3, r1, r3
 800662e:	b29b      	uxth	r3, r3
 8006630:	4413      	add	r3, r2
 8006632:	b29a      	uxth	r2, r3
 8006634:	79fb      	ldrb	r3, [r7, #7]
 8006636:	b211      	sxth	r1, r2
 8006638:	4a1d      	ldr	r2, [pc, #116]	; (80066b0 <activateConfig+0x178>)
 800663a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        lookupThrottleRC[i] = mcfg.minthrottle + (int32_t)(mcfg.maxthrottle - mcfg.minthrottle) * lookupThrottleRC[i] / 1000; // [MINTHROTTLE;MAXTHROTTLE]
 800663e:	4b1d      	ldr	r3, [pc, #116]	; (80066b4 <activateConfig+0x17c>)
 8006640:	f8b3 2140 	ldrh.w	r2, [r3, #320]	; 0x140
 8006644:	4b1b      	ldr	r3, [pc, #108]	; (80066b4 <activateConfig+0x17c>)
 8006646:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800664a:	4619      	mov	r1, r3
 800664c:	4b19      	ldr	r3, [pc, #100]	; (80066b4 <activateConfig+0x17c>)
 800664e:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8006652:	1acb      	subs	r3, r1, r3
 8006654:	79f9      	ldrb	r1, [r7, #7]
 8006656:	4816      	ldr	r0, [pc, #88]	; (80066b0 <activateConfig+0x178>)
 8006658:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800665c:	fb01 f303 	mul.w	r3, r1, r3
 8006660:	4915      	ldr	r1, [pc, #84]	; (80066b8 <activateConfig+0x180>)
 8006662:	fb81 0103 	smull	r0, r1, r1, r3
 8006666:	1189      	asrs	r1, r1, #6
 8006668:	17db      	asrs	r3, r3, #31
 800666a:	1acb      	subs	r3, r1, r3
 800666c:	b29b      	uxth	r3, r3
 800666e:	4413      	add	r3, r2
 8006670:	b29a      	uxth	r2, r3
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	b211      	sxth	r1, r2
 8006676:	4a0e      	ldr	r2, [pc, #56]	; (80066b0 <activateConfig+0x178>)
 8006678:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	3301      	adds	r3, #1
 8006680:	71fb      	strb	r3, [r7, #7]
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	2b0b      	cmp	r3, #11
 8006686:	d985      	bls.n	8006594 <activateConfig+0x5c>
    }

    setPIDController(cfg.pidController);
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <activateConfig+0x168>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	4618      	mov	r0, r3
 800668e:	f006 fcdb 	bl	800d048 <setPIDController>
#ifdef GPS
    gpsSetPIDs();
 8006692:	f002 fa7f 	bl	8008b94 <gpsSetPIDs>
#endif
}
 8006696:	bf00      	nop
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bdb0      	pop	{r4, r5, r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000d18 	.word	0x20000d18
 80066a4:	68db8bad 	.word	0x68db8bad
 80066a8:	2000168c 	.word	0x2000168c
 80066ac:	66666667 	.word	0x66666667
 80066b0:	2000169c 	.word	0x2000169c
 80066b4:	200007ac 	.word	0x200007ac
 80066b8:	10624dd3 	.word	0x10624dd3

080066bc <loadAndActivateConfig>:

void loadAndActivateConfig(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
    readEEPROM();
 80066c0:	f7ff fef0 	bl	80064a4 <readEEPROM>
    activateConfig();
 80066c4:	f7ff ff38 	bl	8006538 <activateConfig>
}
 80066c8:	bf00      	nop
 80066ca:	bd80      	pop	{r7, pc}

080066cc <writeEEPROM>:

void writeEEPROM(uint8_t b, uint8_t updateProfile)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	460a      	mov	r2, r1
 80066d6:	71fb      	strb	r3, [r7, #7]
 80066d8:	4613      	mov	r3, r2
 80066da:	71bb      	strb	r3, [r7, #6]
    bool status = false;
 80066dc:	2300      	movs	r3, #0
 80066de:	75fb      	strb	r3, [r7, #23]
    uint8_t chk = 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	75bb      	strb	r3, [r7, #22]
    const uint8_t *p;
	PifStorageDataInfoP p_data_info;

    // prepare checksum/version constants
    mcfg.version = EEPROM_CONF_VERSION;
 80066e4:	224c      	movs	r2, #76	; 0x4c
 80066e6:	4b36      	ldr	r3, [pc, #216]	; (80067c0 <writeEEPROM+0xf4>)
 80066e8:	701a      	strb	r2, [r3, #0]
    mcfg.size = sizeof(master_t);
 80066ea:	4b35      	ldr	r3, [pc, #212]	; (80067c0 <writeEEPROM+0xf4>)
 80066ec:	f240 526c 	movw	r2, #1388	; 0x56c
 80066f0:	805a      	strh	r2, [r3, #2]
    mcfg.magic_be = 0xBE;
 80066f2:	4b33      	ldr	r3, [pc, #204]	; (80067c0 <writeEEPROM+0xf4>)
 80066f4:	22be      	movs	r2, #190	; 0xbe
 80066f6:	711a      	strb	r2, [r3, #4]
    mcfg.magic_ef = 0xEF;
 80066f8:	4b31      	ldr	r3, [pc, #196]	; (80067c0 <writeEEPROM+0xf4>)
 80066fa:	22ef      	movs	r2, #239	; 0xef
 80066fc:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
    mcfg.chk = 0;
 8006700:	4b2f      	ldr	r3, [pc, #188]	; (80067c0 <writeEEPROM+0xf4>)
 8006702:	2200      	movs	r2, #0
 8006704:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b

    // when updateProfile = true, we copy contents of cfg to global configuration. when false, only profile number is updated, and then that profile is loaded on readEEPROM()
    if (updateProfile) {
 8006708:	79bb      	ldrb	r3, [r7, #6]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d011      	beq.n	8006732 <writeEEPROM+0x66>
        // copy current in-memory profile to stored configuration
        memcpy(&mcfg.profile[mcfg.current_profile], &cfg, sizeof(config_t));
 800670e:	4b2c      	ldr	r3, [pc, #176]	; (80067c0 <writeEEPROM+0xf4>)
 8006710:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8006714:	461a      	mov	r2, r3
 8006716:	f44f 739c 	mov.w	r3, #312	; 0x138
 800671a:	fb02 f303 	mul.w	r3, r2, r3
 800671e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006722:	4a27      	ldr	r2, [pc, #156]	; (80067c0 <writeEEPROM+0xf4>)
 8006724:	4413      	add	r3, r2
 8006726:	f44f 729c 	mov.w	r2, #312	; 0x138
 800672a:	4926      	ldr	r1, [pc, #152]	; (80067c4 <writeEEPROM+0xf8>)
 800672c:	4618      	mov	r0, r3
 800672e:	f01c fd9f 	bl	8023270 <memcpy>
    }

    // recalculate checksum before writing
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 8006732:	4b23      	ldr	r3, [pc, #140]	; (80067c0 <writeEEPROM+0xf4>)
 8006734:	613b      	str	r3, [r7, #16]
 8006736:	e007      	b.n	8006748 <writeEEPROM+0x7c>
        chk ^= *p;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	781a      	ldrb	r2, [r3, #0]
 800673c:	7dbb      	ldrb	r3, [r7, #22]
 800673e:	4053      	eors	r3, r2
 8006740:	75bb      	strb	r3, [r7, #22]
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	3301      	adds	r3, #1
 8006746:	613b      	str	r3, [r7, #16]
 8006748:	4a1f      	ldr	r2, [pc, #124]	; (80067c8 <writeEEPROM+0xfc>)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	4293      	cmp	r3, r2
 800674e:	d3f3      	bcc.n	8006738 <writeEEPROM+0x6c>
    mcfg.chk = chk;
 8006750:	4a1b      	ldr	r2, [pc, #108]	; (80067c0 <writeEEPROM+0xf4>)
 8006752:	7dbb      	ldrb	r3, [r7, #22]
 8006754:	f882 356b 	strb.w	r3, [r2, #1387]	; 0x56b

    // write it
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 8006758:	4b1c      	ldr	r3, [pc, #112]	; (80067cc <writeEEPROM+0x100>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	214c      	movs	r1, #76	; 0x4c
 800675e:	4618      	mov	r0, r3
 8006760:	f014 fdad 	bl	801b2be <pifStorage_Open>
 8006764:	60f8      	str	r0, [r7, #12]
    if (p_data_info) {
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00c      	beq.n	8006786 <writeEEPROM+0xba>
        if (pifStorage_Write(p_storage, p_data_info, (uint8_t*)&mcfg, sizeof(master_t))) status = true;
 800676c:	4b17      	ldr	r3, [pc, #92]	; (80067cc <writeEEPROM+0x100>)
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	f240 536c 	movw	r3, #1388	; 0x56c
 8006774:	4a12      	ldr	r2, [pc, #72]	; (80067c0 <writeEEPROM+0xf4>)
 8006776:	68f9      	ldr	r1, [r7, #12]
 8006778:	f014 fdc5 	bl	801b306 <pifStorage_Write>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <writeEEPROM+0xba>
 8006782:	2301      	movs	r3, #1
 8006784:	75fb      	strb	r3, [r7, #23]
    }

    // Flash write failed - just die now
    if (!status || !validEEPROM()) {
 8006786:	7dfb      	ldrb	r3, [r7, #23]
 8006788:	f083 0301 	eor.w	r3, r3, #1
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d104      	bne.n	800679c <writeEEPROM+0xd0>
 8006792:	f7ff fe1f 	bl	80063d4 <validEEPROM>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d102      	bne.n	80067a2 <writeEEPROM+0xd6>
        failureMode(10);
 800679c:	200a      	movs	r0, #10
 800679e:	f7fb fc10 	bl	8001fc2 <failureMode>
    }

    // re-read written data
    loadAndActivateConfig();
 80067a2:	f7ff ff8b 	bl	80066bc <loadAndActivateConfig>
    if (b)
 80067a6:	79fb      	ldrb	r3, [r7, #7]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <writeEEPROM+0xea>
        blinkLED(15, 20, 1);
 80067ac:	2201      	movs	r2, #1
 80067ae:	2114      	movs	r1, #20
 80067b0:	200f      	movs	r0, #15
 80067b2:	f005 fc17 	bl	800bfe4 <blinkLED>
}
 80067b6:	bf00      	nop
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	200007ac 	.word	0x200007ac
 80067c4:	20000d18 	.word	0x20000d18
 80067c8:	20000d18 	.word	0x20000d18
 80067cc:	20000e54 	.word	0x20000e54

080067d0 <checkFirstTime>:

bool checkFirstTime(bool reset)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	71fb      	strb	r3, [r7, #7]
    bool alloc = true;
 80067da:	2301      	movs	r3, #1
 80067dc:	73fb      	strb	r3, [r7, #15]

	if (!pifStorage_IsFormat(p_storage)) {
 80067de:	4b24      	ldr	r3, [pc, #144]	; (8006870 <checkFirstTime+0xa0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f014 fd3e 	bl	801b264 <pifStorage_IsFormat>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10c      	bne.n	8006808 <checkFirstTime+0x38>
		if (!pifStorage_Format(p_storage)) return false;
 80067ee:	4b20      	ldr	r3, [pc, #128]	; (8006870 <checkFirstTime+0xa0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f014 fd43 	bl	801b27e <pifStorage_Format>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <checkFirstTime+0x32>
 80067fe:	2300      	movs	r3, #0
 8006800:	e032      	b.n	8006868 <checkFirstTime+0x98>
        alloc = false;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
 8006806:	e00b      	b.n	8006820 <checkFirstTime+0x50>
	}
    else {
        alloc = pifStorage_Open(p_storage, STORAGE_ID) != NULL;
 8006808:	4b19      	ldr	r3, [pc, #100]	; (8006870 <checkFirstTime+0xa0>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	214c      	movs	r1, #76	; 0x4c
 800680e:	4618      	mov	r0, r3
 8006810:	f014 fd55 	bl	801b2be <pifStorage_Open>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	bf14      	ite	ne
 800681a:	2301      	movne	r3, #1
 800681c:	2300      	moveq	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]
    }
    if (!alloc) {
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	f083 0301 	eor.w	r3, r3, #1
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00e      	beq.n	800684a <checkFirstTime+0x7a>
		if (!pifStorage_Create(p_storage, STORAGE_ID, sizeof(master_t))) return false;
 800682c:	4b10      	ldr	r3, [pc, #64]	; (8006870 <checkFirstTime+0xa0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f240 526c 	movw	r2, #1388	; 0x56c
 8006834:	214c      	movs	r1, #76	; 0x4c
 8006836:	4618      	mov	r0, r3
 8006838:	f014 fd2e 	bl	801b298 <pifStorage_Create>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <checkFirstTime+0x76>
 8006842:	2300      	movs	r3, #0
 8006844:	e010      	b.n	8006868 <checkFirstTime+0x98>
        reset = true;
 8006846:	2301      	movs	r3, #1
 8006848:	71fb      	strb	r3, [r7, #7]
    }
    // check the EEPROM integrity before resetting values
    if (!validEEPROM() || reset) {
 800684a:	f7ff fdc3 	bl	80063d4 <validEEPROM>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <checkFirstTime+0x8a>
 8006854:	79fb      	ldrb	r3, [r7, #7]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d005      	beq.n	8006866 <checkFirstTime+0x96>
        resetConf();
 800685a:	f000 f80b 	bl	8006874 <resetConf>
        // no need to memcpy profile again, we just did it in resetConf() above
        writeEEPROM(0, false);
 800685e:	2100      	movs	r1, #0
 8006860:	2000      	movs	r0, #0
 8006862:	f7ff ff33 	bl	80066cc <writeEEPROM>
    }
    return true;
 8006866:	2301      	movs	r3, #1
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20000e54 	.word	0x20000e54

08006874 <resetConf>:

// Default settings
static void resetConf(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 800687a:	4ac7      	ldr	r2, [pc, #796]	; (8006b98 <resetConf+0x324>)
 800687c:	1d3b      	adds	r3, r7, #4
 800687e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006882:	e883 0003 	stmia.w	r3, {r0, r1}

    // Clear all configuration
    memset(&mcfg, 0, sizeof(master_t));
 8006886:	f240 526c 	movw	r2, #1388	; 0x56c
 800688a:	2100      	movs	r1, #0
 800688c:	48c3      	ldr	r0, [pc, #780]	; (8006b9c <resetConf+0x328>)
 800688e:	f01c fcfd 	bl	802328c <memset>
    memset(&cfg, 0, sizeof(config_t));
 8006892:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006896:	2100      	movs	r1, #0
 8006898:	48c1      	ldr	r0, [pc, #772]	; (8006ba0 <resetConf+0x32c>)
 800689a:	f01c fcf7 	bl	802328c <memset>

    mcfg.version = EEPROM_CONF_VERSION;
 800689e:	224c      	movs	r2, #76	; 0x4c
 80068a0:	4bbe      	ldr	r3, [pc, #760]	; (8006b9c <resetConf+0x328>)
 80068a2:	701a      	strb	r2, [r3, #0]
    mcfg.mixerConfiguration = MULTITYPE_QUADX;
 80068a4:	4bbd      	ldr	r3, [pc, #756]	; (8006b9c <resetConf+0x328>)
 80068a6:	2203      	movs	r2, #3
 80068a8:	715a      	strb	r2, [r3, #5]
    featureClearAll();
 80068aa:	f000 fb2d 	bl	8006f08 <featureClearAll>
    if (g_featureDefault) (*g_featureDefault)();
 80068ae:	4bbd      	ldr	r3, [pc, #756]	; (8006ba4 <resetConf+0x330>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <resetConf+0x48>
 80068b6:	4bbb      	ldr	r3, [pc, #748]	; (8006ba4 <resetConf+0x330>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4798      	blx	r3

    // global settings
    mcfg.current_profile = 0;       // default profile
 80068bc:	4bb7      	ldr	r3, [pc, #732]	; (8006b9c <resetConf+0x328>)
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    mcfg.gyro_cmpf_factor = 600;    // default MWC
 80068c4:	4bb5      	ldr	r3, [pc, #724]	; (8006b9c <resetConf+0x328>)
 80068c6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80068ca:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
    mcfg.gyro_cmpfm_factor = 250;   // default MWC
 80068ce:	4bb3      	ldr	r3, [pc, #716]	; (8006b9c <resetConf+0x328>)
 80068d0:	22fa      	movs	r2, #250	; 0xfa
 80068d2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
    mcfg.gyro_lpf = 42;             // supported by all gyro drivers now. In case of ST gyro, will default to 32Hz instead
 80068d6:	4bb1      	ldr	r3, [pc, #708]	; (8006b9c <resetConf+0x328>)
 80068d8:	222a      	movs	r2, #42	; 0x2a
 80068da:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    mcfg.accZero[0] = 0;
 80068de:	4baf      	ldr	r3, [pc, #700]	; (8006b9c <resetConf+0x328>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
    mcfg.accZero[1] = 0;
 80068e6:	4bad      	ldr	r3, [pc, #692]	; (8006b9c <resetConf+0x328>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
    mcfg.accZero[2] = 0;
 80068ee:	4bab      	ldr	r3, [pc, #684]	; (8006b9c <resetConf+0x328>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
    mcfg.gyro_align = IMUS_ALIGN_DEFAULT;
 80068f6:	4ba9      	ldr	r3, [pc, #676]	; (8006b9c <resetConf+0x328>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
    mcfg.acc_align = IMUS_ALIGN_DEFAULT;
 80068fe:	4ba7      	ldr	r3, [pc, #668]	; (8006b9c <resetConf+0x328>)
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
    mcfg.mag_align = IMUS_ALIGN_DEFAULT;
 8006906:	4ba5      	ldr	r3, [pc, #660]	; (8006b9c <resetConf+0x328>)
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
    mcfg.board_align_roll = 0;
 800690e:	4ba3      	ldr	r3, [pc, #652]	; (8006b9c <resetConf+0x328>)
 8006910:	2200      	movs	r2, #0
 8006912:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
    mcfg.board_align_pitch = 0;
 8006916:	4ba1      	ldr	r3, [pc, #644]	; (8006b9c <resetConf+0x328>)
 8006918:	2200      	movs	r2, #0
 800691a:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
    mcfg.board_align_yaw = 0;
 800691e:	4b9f      	ldr	r3, [pc, #636]	; (8006b9c <resetConf+0x328>)
 8006920:	2200      	movs	r2, #0
 8006922:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
    mcfg.acc_hardware = 0;               // default/autodetect
 8006926:	4b9d      	ldr	r3, [pc, #628]	; (8006b9c <resetConf+0x328>)
 8006928:	2200      	movs	r2, #0
 800692a:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
    mcfg.mag_hardware = 0;
 800692e:	4b9b      	ldr	r3, [pc, #620]	; (8006b9c <resetConf+0x328>)
 8006930:	2200      	movs	r2, #0
 8006932:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
    mcfg.max_angle_inclination = 500;    // 50 degrees
 8006936:	4b99      	ldr	r3, [pc, #612]	; (8006b9c <resetConf+0x328>)
 8006938:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800693c:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
    mcfg.yaw_control_direction = 1;
 8006940:	4b96      	ldr	r3, [pc, #600]	; (8006b9c <resetConf+0x328>)
 8006942:	2201      	movs	r2, #1
 8006944:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    mcfg.moron_threshold = 32;
 8006948:	4b94      	ldr	r3, [pc, #592]	; (8006b9c <resetConf+0x328>)
 800694a:	2220      	movs	r2, #32
 800694c:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
    mcfg.currentscale = 400; // for Allegro ACS758LCB-100U (40mV/A)
 8006950:	4b92      	ldr	r3, [pc, #584]	; (8006b9c <resetConf+0x328>)
 8006952:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006956:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
    mcfg.vbatscale = 110;
 800695a:	4b90      	ldr	r3, [pc, #576]	; (8006b9c <resetConf+0x328>)
 800695c:	226e      	movs	r2, #110	; 0x6e
 800695e:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
    mcfg.vbatmaxcellvoltage = 43;
 8006962:	4b8e      	ldr	r3, [pc, #568]	; (8006b9c <resetConf+0x328>)
 8006964:	222b      	movs	r2, #43	; 0x2b
 8006966:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
    mcfg.vbatmincellvoltage = 33;
 800696a:	4b8c      	ldr	r3, [pc, #560]	; (8006b9c <resetConf+0x328>)
 800696c:	2221      	movs	r2, #33	; 0x21
 800696e:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
    mcfg.vbatwarningcellvoltage = 35;
 8006972:	4b8a      	ldr	r3, [pc, #552]	; (8006b9c <resetConf+0x328>)
 8006974:	2223      	movs	r2, #35	; 0x23
 8006976:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    mcfg.power_adc_channel = 0;
 800697a:	4b88      	ldr	r3, [pc, #544]	; (8006b9c <resetConf+0x328>)
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
    mcfg.serialrx_type = 0;
 8006982:	4b86      	ldr	r3, [pc, #536]	; (8006b9c <resetConf+0x328>)
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    mcfg.spektrum_sat_bind = 0;
 800698a:	4b84      	ldr	r3, [pc, #528]	; (8006b9c <resetConf+0x328>)
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    mcfg.telemetry_provider = TELEMETRY_PROVIDER_FRSKY;
 8006992:	4b82      	ldr	r3, [pc, #520]	; (8006b9c <resetConf+0x328>)
 8006994:	2200      	movs	r2, #0
 8006996:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
    mcfg.telemetry_port = TELEMETRY_PORT_UART;
 800699a:	4b80      	ldr	r3, [pc, #512]	; (8006b9c <resetConf+0x328>)
 800699c:	2200      	movs	r2, #0
 800699e:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
    mcfg.telemetry_switch = 0;
 80069a2:	4b7e      	ldr	r3, [pc, #504]	; (8006b9c <resetConf+0x328>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
    mcfg.midrc = 1500;
 80069aa:	4b7c      	ldr	r3, [pc, #496]	; (8006b9c <resetConf+0x328>)
 80069ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80069b0:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
    mcfg.mincheck = 1100;
 80069b4:	4b79      	ldr	r3, [pc, #484]	; (8006b9c <resetConf+0x328>)
 80069b6:	f240 424c 	movw	r2, #1100	; 0x44c
 80069ba:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
    mcfg.maxcheck = 1900;
 80069be:	4b77      	ldr	r3, [pc, #476]	; (8006b9c <resetConf+0x328>)
 80069c0:	f240 726c 	movw	r2, #1900	; 0x76c
 80069c4:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
    mcfg.retarded_arm = 0;       // disable arm/disarm on roll left/right
 80069c8:	4b74      	ldr	r3, [pc, #464]	; (8006b9c <resetConf+0x328>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
    mcfg.disarm_kill_switch = 1; // AUX disarm independently of throttle value
 80069d0:	4b72      	ldr	r3, [pc, #456]	; (8006b9c <resetConf+0x328>)
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
    mcfg.fw_althold_dir = 1;
 80069d8:	4b70      	ldr	r3, [pc, #448]	; (8006b9c <resetConf+0x328>)
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
    // Motor/ESC/Servo
    mcfg.minthrottle = 1150;
 80069e0:	4b6e      	ldr	r3, [pc, #440]	; (8006b9c <resetConf+0x328>)
 80069e2:	f240 427e 	movw	r2, #1150	; 0x47e
 80069e6:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    mcfg.maxthrottle = 1850;
 80069ea:	4b6c      	ldr	r3, [pc, #432]	; (8006b9c <resetConf+0x328>)
 80069ec:	f240 723a 	movw	r2, #1850	; 0x73a
 80069f0:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    mcfg.mincommand = 1000;
 80069f4:	4b69      	ldr	r3, [pc, #420]	; (8006b9c <resetConf+0x328>)
 80069f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069fa:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    mcfg.deadband3d_low = 1406;
 80069fe:	4b67      	ldr	r3, [pc, #412]	; (8006b9c <resetConf+0x328>)
 8006a00:	f240 527e 	movw	r2, #1406	; 0x57e
 8006a04:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
    mcfg.deadband3d_high = 1514;
 8006a08:	4b64      	ldr	r3, [pc, #400]	; (8006b9c <resetConf+0x328>)
 8006a0a:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8006a0e:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
    mcfg.neutral3d = 1460;
 8006a12:	4b62      	ldr	r3, [pc, #392]	; (8006b9c <resetConf+0x328>)
 8006a14:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006a18:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
    mcfg.deadband3d_throttle = 50;
 8006a1c:	4b5f      	ldr	r3, [pc, #380]	; (8006b9c <resetConf+0x328>)
 8006a1e:	2232      	movs	r2, #50	; 0x32
 8006a20:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
    mcfg.motor_pwm_rate = MOTOR_PWM_RATE;
 8006a24:	4b5d      	ldr	r3, [pc, #372]	; (8006b9c <resetConf+0x328>)
 8006a26:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006a2a:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
    mcfg.servo_pwm_rate = 50;
 8006a2e:	4b5b      	ldr	r3, [pc, #364]	; (8006b9c <resetConf+0x328>)
 8006a30:	2232      	movs	r2, #50	; 0x32
 8006a32:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    // safety features
    mcfg.auto_disarm_board = 5; // auto disarm after 5 sec if motors not started or disarmed
 8006a36:	4b59      	ldr	r3, [pc, #356]	; (8006b9c <resetConf+0x328>)
 8006a38:	2205      	movs	r2, #5
 8006a3a:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
    // gps/nav stuff
    mcfg.gps_type = GPS_NMEA;
 8006a3e:	4b57      	ldr	r3, [pc, #348]	; (8006b9c <resetConf+0x328>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
    mcfg.gps_baudrate = GPS_BAUD_115200;
 8006a46:	4b55      	ldr	r3, [pc, #340]	; (8006b9c <resetConf+0x328>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
    // serial (USART1) baudrate
    mcfg.serial_baudrate = 115200;
 8006a4e:	4b53      	ldr	r3, [pc, #332]	; (8006b9c <resetConf+0x328>)
 8006a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006a54:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    mcfg.softserial_baudrate = 9600;
 8006a58:	4b50      	ldr	r3, [pc, #320]	; (8006b9c <resetConf+0x328>)
 8006a5a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006a5e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    mcfg.softserial_1_inverted = 0;
 8006a62:	4b4e      	ldr	r3, [pc, #312]	; (8006b9c <resetConf+0x328>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
    mcfg.softserial_2_inverted = 0;
 8006a6a:	4b4c      	ldr	r3, [pc, #304]	; (8006b9c <resetConf+0x328>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
    mcfg.looptime = 3500;
 8006a72:	4b4a      	ldr	r3, [pc, #296]	; (8006b9c <resetConf+0x328>)
 8006a74:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006a78:	819a      	strh	r2, [r3, #12]
    mcfg.emf_avoidance = 0;
 8006a7a:	4b48      	ldr	r3, [pc, #288]	; (8006b9c <resetConf+0x328>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	739a      	strb	r2, [r3, #14]
    mcfg.rssi_aux_channel = 0;
 8006a80:	4b46      	ldr	r3, [pc, #280]	; (8006b9c <resetConf+0x328>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    mcfg.rssi_aux_max = 1000;
 8006a88:	4b44      	ldr	r3, [pc, #272]	; (8006b9c <resetConf+0x328>)
 8006a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a8e:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
    mcfg.rssi_adc_max = 4095;
 8006a92:	4b42      	ldr	r3, [pc, #264]	; (8006b9c <resetConf+0x328>)
 8006a94:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006a98:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
    mcfg.rc_channel_count = 8;
 8006a9c:	4b3f      	ldr	r3, [pc, #252]	; (8006b9c <resetConf+0x328>)
 8006a9e:	2208      	movs	r2, #8
 8006aa0:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa

    cfg.pidController = 0;
 8006aa4:	4b3e      	ldr	r3, [pc, #248]	; (8006ba0 <resetConf+0x32c>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	701a      	strb	r2, [r3, #0]
    cfg.P8[ROLL] = 40;
 8006aaa:	4b3d      	ldr	r3, [pc, #244]	; (8006ba0 <resetConf+0x32c>)
 8006aac:	2228      	movs	r2, #40	; 0x28
 8006aae:	705a      	strb	r2, [r3, #1]
    cfg.I8[ROLL] = 30;
 8006ab0:	4b3b      	ldr	r3, [pc, #236]	; (8006ba0 <resetConf+0x32c>)
 8006ab2:	221e      	movs	r2, #30
 8006ab4:	72da      	strb	r2, [r3, #11]
    cfg.D8[ROLL] = 23;
 8006ab6:	4b3a      	ldr	r3, [pc, #232]	; (8006ba0 <resetConf+0x32c>)
 8006ab8:	2217      	movs	r2, #23
 8006aba:	755a      	strb	r2, [r3, #21]
    cfg.P8[PITCH] = 40;
 8006abc:	4b38      	ldr	r3, [pc, #224]	; (8006ba0 <resetConf+0x32c>)
 8006abe:	2228      	movs	r2, #40	; 0x28
 8006ac0:	709a      	strb	r2, [r3, #2]
    cfg.I8[PITCH] = 30;
 8006ac2:	4b37      	ldr	r3, [pc, #220]	; (8006ba0 <resetConf+0x32c>)
 8006ac4:	221e      	movs	r2, #30
 8006ac6:	731a      	strb	r2, [r3, #12]
    cfg.D8[PITCH] = 23;
 8006ac8:	4b35      	ldr	r3, [pc, #212]	; (8006ba0 <resetConf+0x32c>)
 8006aca:	2217      	movs	r2, #23
 8006acc:	759a      	strb	r2, [r3, #22]
    cfg.P8[YAW] = 85;
 8006ace:	4b34      	ldr	r3, [pc, #208]	; (8006ba0 <resetConf+0x32c>)
 8006ad0:	2255      	movs	r2, #85	; 0x55
 8006ad2:	70da      	strb	r2, [r3, #3]
    cfg.I8[YAW] = 45;
 8006ad4:	4b32      	ldr	r3, [pc, #200]	; (8006ba0 <resetConf+0x32c>)
 8006ad6:	222d      	movs	r2, #45	; 0x2d
 8006ad8:	735a      	strb	r2, [r3, #13]
    cfg.D8[YAW] = 0;
 8006ada:	4b31      	ldr	r3, [pc, #196]	; (8006ba0 <resetConf+0x32c>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	75da      	strb	r2, [r3, #23]
    cfg.P8[PIDALT] = 50;
 8006ae0:	4b2f      	ldr	r3, [pc, #188]	; (8006ba0 <resetConf+0x32c>)
 8006ae2:	2232      	movs	r2, #50	; 0x32
 8006ae4:	711a      	strb	r2, [r3, #4]
    cfg.I8[PIDALT] = 0;
 8006ae6:	4b2e      	ldr	r3, [pc, #184]	; (8006ba0 <resetConf+0x32c>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	739a      	strb	r2, [r3, #14]
    cfg.D8[PIDALT] = 0;
 8006aec:	4b2c      	ldr	r3, [pc, #176]	; (8006ba0 <resetConf+0x32c>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	761a      	strb	r2, [r3, #24]
    cfg.P8[PIDPOS] = 11; // POSHOLD_P * 100;
 8006af2:	4b2b      	ldr	r3, [pc, #172]	; (8006ba0 <resetConf+0x32c>)
 8006af4:	220b      	movs	r2, #11
 8006af6:	715a      	strb	r2, [r3, #5]
    cfg.I8[PIDPOS] = 0; // POSHOLD_I * 100;
 8006af8:	4b29      	ldr	r3, [pc, #164]	; (8006ba0 <resetConf+0x32c>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	73da      	strb	r2, [r3, #15]
    cfg.D8[PIDPOS] = 0;
 8006afe:	4b28      	ldr	r3, [pc, #160]	; (8006ba0 <resetConf+0x32c>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	765a      	strb	r2, [r3, #25]
    cfg.P8[PIDPOSR] = 20; // POSHOLD_RATE_P * 10;
 8006b04:	4b26      	ldr	r3, [pc, #152]	; (8006ba0 <resetConf+0x32c>)
 8006b06:	2214      	movs	r2, #20
 8006b08:	719a      	strb	r2, [r3, #6]
    cfg.I8[PIDPOSR] = 8; // POSHOLD_RATE_I * 100;
 8006b0a:	4b25      	ldr	r3, [pc, #148]	; (8006ba0 <resetConf+0x32c>)
 8006b0c:	2208      	movs	r2, #8
 8006b0e:	741a      	strb	r2, [r3, #16]
    cfg.D8[PIDPOSR] = 45; // POSHOLD_RATE_D * 1000;
 8006b10:	4b23      	ldr	r3, [pc, #140]	; (8006ba0 <resetConf+0x32c>)
 8006b12:	222d      	movs	r2, #45	; 0x2d
 8006b14:	769a      	strb	r2, [r3, #26]
    cfg.P8[PIDNAVR] = 14; // NAV_P * 10;
 8006b16:	4b22      	ldr	r3, [pc, #136]	; (8006ba0 <resetConf+0x32c>)
 8006b18:	220e      	movs	r2, #14
 8006b1a:	71da      	strb	r2, [r3, #7]
    cfg.I8[PIDNAVR] = 20; // NAV_I * 100;
 8006b1c:	4b20      	ldr	r3, [pc, #128]	; (8006ba0 <resetConf+0x32c>)
 8006b1e:	2214      	movs	r2, #20
 8006b20:	745a      	strb	r2, [r3, #17]
    cfg.D8[PIDNAVR] = 80; // NAV_D * 1000;
 8006b22:	4b1f      	ldr	r3, [pc, #124]	; (8006ba0 <resetConf+0x32c>)
 8006b24:	2250      	movs	r2, #80	; 0x50
 8006b26:	76da      	strb	r2, [r3, #27]
    cfg.P8[PIDLEVEL] = 90;
 8006b28:	4b1d      	ldr	r3, [pc, #116]	; (8006ba0 <resetConf+0x32c>)
 8006b2a:	225a      	movs	r2, #90	; 0x5a
 8006b2c:	721a      	strb	r2, [r3, #8]
    cfg.I8[PIDLEVEL] = 10;
 8006b2e:	4b1c      	ldr	r3, [pc, #112]	; (8006ba0 <resetConf+0x32c>)
 8006b30:	220a      	movs	r2, #10
 8006b32:	749a      	strb	r2, [r3, #18]
    cfg.D8[PIDLEVEL] = 100;
 8006b34:	4b1a      	ldr	r3, [pc, #104]	; (8006ba0 <resetConf+0x32c>)
 8006b36:	2264      	movs	r2, #100	; 0x64
 8006b38:	771a      	strb	r2, [r3, #28]
    cfg.P8[PIDMAG] = 40;
 8006b3a:	4b19      	ldr	r3, [pc, #100]	; (8006ba0 <resetConf+0x32c>)
 8006b3c:	2228      	movs	r2, #40	; 0x28
 8006b3e:	725a      	strb	r2, [r3, #9]
    cfg.P8[PIDVEL] = 120;
 8006b40:	4b17      	ldr	r3, [pc, #92]	; (8006ba0 <resetConf+0x32c>)
 8006b42:	2278      	movs	r2, #120	; 0x78
 8006b44:	729a      	strb	r2, [r3, #10]
    cfg.I8[PIDVEL] = 45;
 8006b46:	4b16      	ldr	r3, [pc, #88]	; (8006ba0 <resetConf+0x32c>)
 8006b48:	222d      	movs	r2, #45	; 0x2d
 8006b4a:	751a      	strb	r2, [r3, #20]
    cfg.D8[PIDVEL] = 1;
 8006b4c:	4b14      	ldr	r3, [pc, #80]	; (8006ba0 <resetConf+0x32c>)
 8006b4e:	2201      	movs	r2, #1
 8006b50:	779a      	strb	r2, [r3, #30]
    cfg.rcRate8 = 90;
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <resetConf+0x32c>)
 8006b54:	225a      	movs	r2, #90	; 0x5a
 8006b56:	77da      	strb	r2, [r3, #31]
    cfg.rcExpo8 = 65;
 8006b58:	4b11      	ldr	r3, [pc, #68]	; (8006ba0 <resetConf+0x32c>)
 8006b5a:	2241      	movs	r2, #65	; 0x41
 8006b5c:	f883 2020 	strb.w	r2, [r3, #32]
    cfg.yawRate = 0;
 8006b60:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <resetConf+0x32c>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    cfg.dynThrPID = 0;
 8006b68:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <resetConf+0x32c>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    cfg.tpa_breakpoint = 1500;
 8006b70:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <resetConf+0x32c>)
 8006b72:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006b76:	851a      	strh	r2, [r3, #40]	; 0x28
    cfg.thrMid8 = 50;
 8006b78:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <resetConf+0x32c>)
 8006b7a:	2232      	movs	r2, #50	; 0x32
 8006b7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    cfg.thrExpo8 = 0;
 8006b80:	4b07      	ldr	r3, [pc, #28]	; (8006ba0 <resetConf+0x32c>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    // for (i = 0; i < CHECKBOXITEMS; i++)
    //     cfg.activate[i] = 0;
    cfg.angleTrim[0] = 0;
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <resetConf+0x32c>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    cfg.angleTrim[1] = 0;
 8006b8e:	4b04      	ldr	r3, [pc, #16]	; (8006ba0 <resetConf+0x32c>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006b94:	e008      	b.n	8006ba8 <resetConf+0x334>
 8006b96:	bf00      	nop
 8006b98:	08027730 	.word	0x08027730
 8006b9c:	200007ac 	.word	0x200007ac
 8006ba0:	20000d18 	.word	0x20000d18
 8006ba4:	20001610 	.word	0x20001610
    cfg.locked_in = 0;
 8006ba8:	4b8e      	ldr	r3, [pc, #568]	; (8006de4 <resetConf+0x570>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    cfg.mag_declination = 0;    // For example, -6deg 37min, = -637 Japan, format is [sign]dddmm (degreesminutes) default is zero.
 8006bb0:	4b8c      	ldr	r3, [pc, #560]	; (8006de4 <resetConf+0x570>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    cfg.acc_lpf_factor = 4;
 8006bb6:	4b8b      	ldr	r3, [pc, #556]	; (8006de4 <resetConf+0x570>)
 8006bb8:	2204      	movs	r2, #4
 8006bba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    cfg.accz_deadband = 40;
 8006bbe:	4b89      	ldr	r3, [pc, #548]	; (8006de4 <resetConf+0x570>)
 8006bc0:	2228      	movs	r2, #40	; 0x28
 8006bc2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    cfg.accxy_deadband = 40;
 8006bc6:	4b87      	ldr	r3, [pc, #540]	; (8006de4 <resetConf+0x570>)
 8006bc8:	2228      	movs	r2, #40	; 0x28
 8006bca:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    cfg.baro_tab_size = 21;
 8006bce:	4b85      	ldr	r3, [pc, #532]	; (8006de4 <resetConf+0x570>)
 8006bd0:	2215      	movs	r2, #21
 8006bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    cfg.baro_noise_lpf = 0.6f;
 8006bd6:	4b83      	ldr	r3, [pc, #524]	; (8006de4 <resetConf+0x570>)
 8006bd8:	4a83      	ldr	r2, [pc, #524]	; (8006de8 <resetConf+0x574>)
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38
    cfg.baro_cf_vel = 0.985f;
 8006bdc:	4b81      	ldr	r3, [pc, #516]	; (8006de4 <resetConf+0x570>)
 8006bde:	4a83      	ldr	r2, [pc, #524]	; (8006dec <resetConf+0x578>)
 8006be0:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg.baro_cf_alt = 0.965f;
 8006be2:	4b80      	ldr	r3, [pc, #512]	; (8006de4 <resetConf+0x570>)
 8006be4:	4a82      	ldr	r2, [pc, #520]	; (8006df0 <resetConf+0x57c>)
 8006be6:	641a      	str	r2, [r3, #64]	; 0x40
    cfg.accz_lpf_cutoff = 5.0f;
 8006be8:	4b7e      	ldr	r3, [pc, #504]	; (8006de4 <resetConf+0x570>)
 8006bea:	4a82      	ldr	r2, [pc, #520]	; (8006df4 <resetConf+0x580>)
 8006bec:	645a      	str	r2, [r3, #68]	; 0x44
    cfg.acc_unarmedcal = 1;
 8006bee:	4b7d      	ldr	r3, [pc, #500]	; (8006de4 <resetConf+0x570>)
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    cfg.small_angle = 25;
 8006bf6:	4b7b      	ldr	r3, [pc, #492]	; (8006de4 <resetConf+0x570>)
 8006bf8:	2219      	movs	r2, #25
 8006bfa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    // Radio
    parseRcChannels( "AETR123456789LMNOP" );    //18 channels max
 8006bfe:	487e      	ldr	r0, [pc, #504]	; (8006df8 <resetConf+0x584>)
 8006c00:	f7ff fbba 	bl	8006378 <parseRcChannels>
    cfg.deadband = 0;
 8006c04:	4b77      	ldr	r3, [pc, #476]	; (8006de4 <resetConf+0x570>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    cfg.yawdeadband = 0;
 8006c0c:	4b75      	ldr	r3, [pc, #468]	; (8006de4 <resetConf+0x570>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    cfg.alt_hold_throttle_neutral = 40;
 8006c14:	4b73      	ldr	r3, [pc, #460]	; (8006de4 <resetConf+0x570>)
 8006c16:	2228      	movs	r2, #40	; 0x28
 8006c18:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    cfg.alt_hold_fast_change = 1;
 8006c1c:	4b71      	ldr	r3, [pc, #452]	; (8006de4 <resetConf+0x570>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    cfg.throttle_correction_value = 0;      // could 10 with althold or 40 for fpv
 8006c24:	4b6f      	ldr	r3, [pc, #444]	; (8006de4 <resetConf+0x570>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    cfg.throttle_correction_angle = 800;    // could be 80.0 deg with atlhold or 45.0 for fpv
 8006c2c:	4b6d      	ldr	r3, [pc, #436]	; (8006de4 <resetConf+0x570>)
 8006c2e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006c32:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

    // Failsafe Variables
    cfg.failsafe_delay = 10;                // 1sec
 8006c36:	4b6b      	ldr	r3, [pc, #428]	; (8006de4 <resetConf+0x570>)
 8006c38:	220a      	movs	r2, #10
 8006c3a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    cfg.failsafe_off_delay = 200;           // 20sec
 8006c3e:	4b69      	ldr	r3, [pc, #420]	; (8006de4 <resetConf+0x570>)
 8006c40:	22c8      	movs	r2, #200	; 0xc8
 8006c42:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    cfg.failsafe_throttle = 1200;           // decent default which should always be below hover throttle for people.
 8006c46:	4b67      	ldr	r3, [pc, #412]	; (8006de4 <resetConf+0x570>)
 8006c48:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006c4c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    cfg.failsafe_detect_threshold = 985;    // any of first 4 channels below this value will trigger failsafe
 8006c50:	4b64      	ldr	r3, [pc, #400]	; (8006de4 <resetConf+0x570>)
 8006c52:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006c56:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    // servos
    for (i = 0; i < 8; i++) {
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	e032      	b.n	8006cc6 <resetConf+0x452>
        cfg.servoConf[i].min = 1020;
 8006c60:	4960      	ldr	r1, [pc, #384]	; (8006de4 <resetConf+0x570>)
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	440b      	add	r3, r1
 8006c6e:	33b8      	adds	r3, #184	; 0xb8
 8006c70:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8006c74:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].max = 2000;
 8006c76:	495b      	ldr	r1, [pc, #364]	; (8006de4 <resetConf+0x570>)
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	440b      	add	r3, r1
 8006c84:	33ba      	adds	r3, #186	; 0xba
 8006c86:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006c8a:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].middle = 1500;
 8006c8c:	4955      	ldr	r1, [pc, #340]	; (8006de4 <resetConf+0x570>)
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	440b      	add	r3, r1
 8006c9a:	33bc      	adds	r3, #188	; 0xbc
 8006c9c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006ca0:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].rate = servoRates[i];
 8006ca2:	1d3a      	adds	r2, r7, #4
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f993 0000 	ldrsb.w	r0, [r3]
 8006cac:	494d      	ldr	r1, [pc, #308]	; (8006de4 <resetConf+0x570>)
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	440b      	add	r3, r1
 8006cba:	33be      	adds	r3, #190	; 0xbe
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++) {
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b07      	cmp	r3, #7
 8006cca:	ddc9      	ble.n	8006c60 <resetConf+0x3ec>
    }

    cfg.yaw_direction = 1;
 8006ccc:	4b45      	ldr	r3, [pc, #276]	; (8006de4 <resetConf+0x570>)
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    cfg.tri_unarmed_servo = 1;
 8006cd4:	4b43      	ldr	r3, [pc, #268]	; (8006de4 <resetConf+0x570>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f

    // gimbal
    cfg.gimbal_flags = GIMBAL_NORMAL;
 8006cdc:	4b41      	ldr	r3, [pc, #260]	; (8006de4 <resetConf+0x570>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // gps/nav stuff
    cfg.gps_wp_radius = 200;
 8006ce4:	4b3f      	ldr	r3, [pc, #252]	; (8006de4 <resetConf+0x570>)
 8006ce6:	22c8      	movs	r2, #200	; 0xc8
 8006ce8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
    cfg.gps_lpf = 20;
 8006cec:	4b3d      	ldr	r3, [pc, #244]	; (8006de4 <resetConf+0x570>)
 8006cee:	2214      	movs	r2, #20
 8006cf0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    cfg.nav_slew_rate = 30;
 8006cf4:	4b3b      	ldr	r3, [pc, #236]	; (8006de4 <resetConf+0x570>)
 8006cf6:	221e      	movs	r2, #30
 8006cf8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    cfg.nav_controls_heading = 1;
 8006cfc:	4b39      	ldr	r3, [pc, #228]	; (8006de4 <resetConf+0x570>)
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    cfg.nav_speed_min = 100;
 8006d04:	4b37      	ldr	r3, [pc, #220]	; (8006de4 <resetConf+0x570>)
 8006d06:	2264      	movs	r2, #100	; 0x64
 8006d08:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
    cfg.nav_speed_max = 300;
 8006d0c:	4b35      	ldr	r3, [pc, #212]	; (8006de4 <resetConf+0x570>)
 8006d0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006d12:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
    cfg.ap_mode = 40;
 8006d16:	4b33      	ldr	r3, [pc, #204]	; (8006de4 <resetConf+0x570>)
 8006d18:	2228      	movs	r2, #40	; 0x28
 8006d1a:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
    // fw stuff
    cfg.fw_gps_maxcorr = 20;
 8006d1e:	4b31      	ldr	r3, [pc, #196]	; (8006de4 <resetConf+0x570>)
 8006d20:	2214      	movs	r2, #20
 8006d22:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    cfg.fw_gps_rudder = 15;
 8006d26:	4b2f      	ldr	r3, [pc, #188]	; (8006de4 <resetConf+0x570>)
 8006d28:	220f      	movs	r2, #15
 8006d2a:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    cfg.fw_gps_maxclimb = 15;
 8006d2e:	4b2d      	ldr	r3, [pc, #180]	; (8006de4 <resetConf+0x570>)
 8006d30:	220f      	movs	r2, #15
 8006d32:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    cfg.fw_gps_maxdive = 15;
 8006d36:	4b2b      	ldr	r3, [pc, #172]	; (8006de4 <resetConf+0x570>)
 8006d38:	220f      	movs	r2, #15
 8006d3a:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
    cfg.fw_climb_throttle = 1900;
 8006d3e:	4b29      	ldr	r3, [pc, #164]	; (8006de4 <resetConf+0x570>)
 8006d40:	f240 726c 	movw	r2, #1900	; 0x76c
 8006d44:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
    cfg.fw_cruise_throttle = 1500;
 8006d48:	4b26      	ldr	r3, [pc, #152]	; (8006de4 <resetConf+0x570>)
 8006d4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006d4e:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
    cfg.fw_idle_throttle = 1300;
 8006d52:	4b24      	ldr	r3, [pc, #144]	; (8006de4 <resetConf+0x570>)
 8006d54:	f240 5214 	movw	r2, #1300	; 0x514
 8006d58:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
    cfg.fw_scaler_throttle = 8;
 8006d5c:	4b21      	ldr	r3, [pc, #132]	; (8006de4 <resetConf+0x570>)
 8006d5e:	2208      	movs	r2, #8
 8006d60:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
    cfg.fw_roll_comp = 100;
 8006d64:	4b1f      	ldr	r3, [pc, #124]	; (8006de4 <resetConf+0x570>)
 8006d66:	2264      	movs	r2, #100	; 0x64
 8006d68:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    cfg.fw_cruise_distance = 500;
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	; (8006de4 <resetConf+0x570>)
 8006d6e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006d72:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
    cfg.fw_rth_alt = 50;
 8006d76:	4b1b      	ldr	r3, [pc, #108]	; (8006de4 <resetConf+0x570>)
 8006d78:	2232      	movs	r2, #50	; 0x32
 8006d7a:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    // control stuff
    mcfg.reboot_character = 'R';
 8006d7e:	4b1f      	ldr	r3, [pc, #124]	; (8006dfc <resetConf+0x588>)
 8006d80:	2252      	movs	r2, #82	; 0x52
 8006d82:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569

    // custom mixer. clear by defaults.
    for (i = 0; i < MAX_MOTORS; i++)
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	e00a      	b.n	8006da2 <resetConf+0x52e>
        mcfg.customMixer[i].throttle = 0.0f;
 8006d8c:	4a1b      	ldr	r2, [pc, #108]	; (8006dfc <resetConf+0x588>)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3301      	adds	r3, #1
 8006d92:	011b      	lsls	r3, r3, #4
 8006d94:	4413      	add	r3, r2
 8006d96:	f04f 0200 	mov.w	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b0b      	cmp	r3, #11
 8006da6:	ddf1      	ble.n	8006d8c <resetConf+0x518>

    // copy default config into all 3 profiles
    for (i = 0; i < 3; i++)
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	e011      	b.n	8006dd2 <resetConf+0x55e>
        memcpy(&mcfg.profile[i], &cfg, sizeof(config_t));
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006db4:	fb02 f303 	mul.w	r3, r2, r3
 8006db8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006dbc:	4a0f      	ldr	r2, [pc, #60]	; (8006dfc <resetConf+0x588>)
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006dc4:	4907      	ldr	r1, [pc, #28]	; (8006de4 <resetConf+0x570>)
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f01c fa52 	bl	8023270 <memcpy>
    for (i = 0; i < 3; i++)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	ddea      	ble.n	8006dae <resetConf+0x53a>
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20000d18 	.word	0x20000d18
 8006de8:	3f19999a 	.word	0x3f19999a
 8006dec:	3f7c28f6 	.word	0x3f7c28f6
 8006df0:	3f770a3d 	.word	0x3f770a3d
 8006df4:	40a00000 	.word	0x40a00000
 8006df8:	0802771c 	.word	0x0802771c
 8006dfc:	200007ac 	.word	0x200007ac

08006e00 <sensors>:

bool sensors(uint32_t mask)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
    return (enabledSensors & mask) != 0;
 8006e08:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <sensors+0x28>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4013      	ands	r3, r2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	bf14      	ite	ne
 8006e14:	2301      	movne	r3, #1
 8006e16:	2300      	moveq	r3, #0
 8006e18:	b2db      	uxtb	r3, r3
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	20000e50 	.word	0x20000e50

08006e2c <sensorsSet>:

void sensorsSet(uint32_t mask)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
    enabledSensors |= mask;
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <sensorsSet+0x20>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	4a03      	ldr	r2, [pc, #12]	; (8006e4c <sensorsSet+0x20>)
 8006e3e:	6013      	str	r3, [r2, #0]
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	20000e50 	.word	0x20000e50

08006e50 <sensorsClear>:

void sensorsClear(uint32_t mask)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
    enabledSensors &= ~(mask);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	43da      	mvns	r2, r3
 8006e5c:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <sensorsClear+0x24>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4013      	ands	r3, r2
 8006e62:	4a04      	ldr	r2, [pc, #16]	; (8006e74 <sensorsClear+0x24>)
 8006e64:	6013      	str	r3, [r2, #0]
}
 8006e66:	bf00      	nop
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	20000e50 	.word	0x20000e50

08006e78 <sensorsMask>:

uint32_t sensorsMask(void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
    return enabledSensors;
 8006e7c:	4b03      	ldr	r3, [pc, #12]	; (8006e8c <sensorsMask+0x14>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20000e50 	.word	0x20000e50

08006e90 <feature>:

bool feature(uint32_t mask)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
    return (mcfg.enabledFeatures & mask) != 0;
 8006e98:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <feature+0x28>)
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	bf14      	ite	ne
 8006ea4:	2301      	movne	r3, #1
 8006ea6:	2300      	moveq	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	200007ac 	.word	0x200007ac

08006ebc <featureSet>:

void featureSet(uint32_t mask)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures |= mask;
 8006ec4:	4b05      	ldr	r3, [pc, #20]	; (8006edc <featureSet+0x20>)
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	4a03      	ldr	r2, [pc, #12]	; (8006edc <featureSet+0x20>)
 8006ece:	6093      	str	r3, [r2, #8]
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	200007ac 	.word	0x200007ac

08006ee0 <featureClear>:

void featureClear(uint32_t mask)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures &= ~(mask);
 8006ee8:	4b06      	ldr	r3, [pc, #24]	; (8006f04 <featureClear+0x24>)
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	43db      	mvns	r3, r3
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	4a04      	ldr	r2, [pc, #16]	; (8006f04 <featureClear+0x24>)
 8006ef4:	6093      	str	r3, [r2, #8]
}
 8006ef6:	bf00      	nop
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	200007ac 	.word	0x200007ac

08006f08 <featureClearAll>:

void featureClearAll()
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
    mcfg.enabledFeatures = 0;
 8006f0c:	4b03      	ldr	r3, [pc, #12]	; (8006f1c <featureClearAll+0x14>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	609a      	str	r2, [r3, #8]
}
 8006f12:	bf00      	nop
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	200007ac 	.word	0x200007ac

08006f20 <featureMask>:

uint32_t featureMask(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0
    return mcfg.enabledFeatures;
 8006f24:	4b03      	ldr	r3, [pc, #12]	; (8006f34 <featureMask+0x14>)
 8006f26:	689b      	ldr	r3, [r3, #8]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	200007ac 	.word	0x200007ac

08006f38 <fw_nav_reset>:
static int16_t speedBoost;
static int16_t altHist[GPS_UPD_HZ + 1];     // shift register
static int16_t navDif[GPS_UPD_HZ + 1];      // shift register

void fw_nav_reset(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
    uint8_t i;

    navErrorI = 0;
 8006f3e:	4b15      	ldr	r3, [pc, #84]	; (8006f94 <fw_nav_reset+0x5c>)
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
    altErrorI = 0;
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <fw_nav_reset+0x60>)
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
    lastAltDiff = 0;
 8006f4e:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <fw_nav_reset+0x64>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	801a      	strh	r2, [r3, #0]
    lastnavDiff = 0;
 8006f54:	4b12      	ldr	r3, [pc, #72]	; (8006fa0 <fw_nav_reset+0x68>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	801a      	strh	r2, [r3, #0]
    speedBoost = 0;
 8006f5a:	4b12      	ldr	r3, [pc, #72]	; (8006fa4 <fw_nav_reset+0x6c>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	801a      	strh	r2, [r3, #0]

    for (i = 0; i < GPS_UPD_HZ; i++) {
 8006f60:	2300      	movs	r3, #0
 8006f62:	71fb      	strb	r3, [r7, #7]
 8006f64:	e00c      	b.n	8006f80 <fw_nav_reset+0x48>
        altHist[i] = 0;
 8006f66:	79fb      	ldrb	r3, [r7, #7]
 8006f68:	4a0f      	ldr	r2, [pc, #60]	; (8006fa8 <fw_nav_reset+0x70>)
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navDif[i] = 0;
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	4a0e      	ldr	r2, [pc, #56]	; (8006fac <fw_nav_reset+0x74>)
 8006f74:	2100      	movs	r1, #0
 8006f76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < GPS_UPD_HZ; i++) {
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	71fb      	strb	r3, [r7, #7]
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d9ef      	bls.n	8006f66 <fw_nav_reset+0x2e>
    }
}
 8006f86:	bf00      	nop
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	20000e58 	.word	0x20000e58
 8006f98:	20000e5c 	.word	0x20000e5c
 8006f9c:	20000e60 	.word	0x20000e60
 8006fa0:	20000e62 	.word	0x20000e62
 8006fa4:	20000e64 	.word	0x20000e64
 8006fa8:	20000e68 	.word	0x20000e68
 8006fac:	20000e74 	.word	0x20000e74

08006fb0 <fw_FlyTo>:

void fw_FlyTo(void) // PatrikE CruiseMode version
{
 8006fb0:	b5b0      	push	{r4, r5, r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
    float wp_lat_diff, wp_lon_diff, scaler;
    int32_t holdHeading = GPS_ground_course / 10;
 8006fb6:	4b48      	ldr	r3, [pc, #288]	; (80070d8 <fw_FlyTo+0x128>)
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	4a48      	ldr	r2, [pc, #288]	; (80070dc <fw_FlyTo+0x12c>)
 8006fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc0:	08db      	lsrs	r3, r3, #3
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	60fb      	str	r3, [r7, #12]
    if (holdHeading > 180)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2bb4      	cmp	r3, #180	; 0xb4
 8006fca:	dd03      	ble.n	8006fd4 <fw_FlyTo+0x24>
        holdHeading -= 360;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006fd2:	60fb      	str	r3, [r7, #12]
    scaler = (GEO_SKALEFACT / GPS_scaleLonDown) * cfg.fw_cruise_distance;
 8006fd4:	4b42      	ldr	r3, [pc, #264]	; (80070e0 <fw_FlyTo+0x130>)
 8006fd6:	edd3 7a00 	vldr	s15, [r3]
 8006fda:	eddf 6a42 	vldr	s13, [pc, #264]	; 80070e4 <fw_FlyTo+0x134>
 8006fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fe2:	4b41      	ldr	r3, [pc, #260]	; (80070e8 <fw_FlyTo+0x138>)
 8006fe4:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 8006fe8:	ee07 3a90 	vmov	s15, r3
 8006fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff4:	edc7 7a02 	vstr	s15, [r7, #8]
    wp_lat_diff = cos(holdHeading * 0.0174532925f);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007002:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80070ec <fw_FlyTo+0x13c>
 8007006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800700a:	ee17 0a90 	vmov	r0, s15
 800700e:	f7f9 fa59 	bl	80004c4 <__aeabi_f2d>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	ec43 2b10 	vmov	d0, r2, r3
 800701a:	f01c fb69 	bl	80236f0 <cos>
 800701e:	ec53 2b10 	vmov	r2, r3, d0
 8007022:	4610      	mov	r0, r2
 8007024:	4619      	mov	r1, r3
 8007026:	f7f9 fd87 	bl	8000b38 <__aeabi_d2f>
 800702a:	4603      	mov	r3, r0
 800702c:	607b      	str	r3, [r7, #4]
    wp_lon_diff = sin(holdHeading * 0.0174532925f) * GPS_scaleLonDown;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007038:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80070ec <fw_FlyTo+0x13c>
 800703c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007040:	ee17 0a90 	vmov	r0, s15
 8007044:	f7f9 fa3e 	bl	80004c4 <__aeabi_f2d>
 8007048:	4602      	mov	r2, r0
 800704a:	460b      	mov	r3, r1
 800704c:	ec43 2b10 	vmov	d0, r2, r3
 8007050:	f01c fba2 	bl	8023798 <sin>
 8007054:	ec55 4b10 	vmov	r4, r5, d0
 8007058:	4b21      	ldr	r3, [pc, #132]	; (80070e0 <fw_FlyTo+0x130>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4618      	mov	r0, r3
 800705e:	f7f9 fa31 	bl	80004c4 <__aeabi_f2d>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4620      	mov	r0, r4
 8007068:	4629      	mov	r1, r5
 800706a:	f7f9 fa83 	bl	8000574 <__aeabi_dmul>
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	4610      	mov	r0, r2
 8007074:	4619      	mov	r1, r3
 8007076:	f7f9 fd5f 	bl	8000b38 <__aeabi_d2f>
 800707a:	4603      	mov	r3, r0
 800707c:	603b      	str	r3, [r7, #0]
    GPS_WP[LAT] += wp_lat_diff * scaler;
 800707e:	4b1c      	ldr	r3, [pc, #112]	; (80070f0 <fw_FlyTo+0x140>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800708a:	edd7 6a01 	vldr	s13, [r7, #4]
 800708e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800709a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800709e:	ee17 2a90 	vmov	r2, s15
 80070a2:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <fw_FlyTo+0x140>)
 80070a4:	601a      	str	r2, [r3, #0]
    GPS_WP[LON] += wp_lon_diff * scaler;
 80070a6:	4b12      	ldr	r3, [pc, #72]	; (80070f0 <fw_FlyTo+0x140>)
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070b2:	edd7 6a00 	vldr	s13, [r7]
 80070b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80070ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070c6:	ee17 2a90 	vmov	r2, s15
 80070ca:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <fw_FlyTo+0x140>)
 80070cc:	605a      	str	r2, [r3, #4]
}
 80070ce:	bf00      	nop
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bdb0      	pop	{r4, r5, r7, pc}
 80070d6:	bf00      	nop
 80070d8:	2000171e 	.word	0x2000171e
 80070dc:	cccccccd 	.word	0xcccccccd
 80070e0:	20000028 	.word	0x20000028
 80070e4:	42b3a9fc 	.word	0x42b3a9fc
 80070e8:	20000d18 	.word	0x20000d18
 80070ec:	3c8efa35 	.word	0x3c8efa35
 80070f0:	20001274 	.word	0x20001274

080070f4 <fw_nav>:

void fw_nav(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08a      	sub	sp, #40	; 0x28
 80070f8:	af00      	add	r7, sp, #0
    int16_t GPS_Heading = GPS_ground_course;    // Store current bearing
 80070fa:	4b56      	ldr	r3, [pc, #344]	; (8007254 <fw_nav+0x160>)
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	843b      	strh	r3, [r7, #32]
    int16_t Current_Heading;                    // Store current bearing
    int16_t altDiff = 0;
 8007100:	2300      	movs	r3, #0
 8007102:	83fb      	strh	r3, [r7, #30]
    uint8_t RTH_Alt = cfg.fw_rth_alt;           // Min Altitude to keep during RTH. (Max 200m)
 8007104:	4b54      	ldr	r3, [pc, #336]	; (8007258 <fw_nav+0x164>)
 8007106:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800710a:	777b      	strb	r3, [r7, #29]
    int16_t delta[2] = { 0, 0 };                // D-Term
 800710c:	2300      	movs	r3, #0
 800710e:	80bb      	strh	r3, [r7, #4]
 8007110:	2300      	movs	r3, #0
 8007112:	80fb      	strh	r3, [r7, #6]
    static int16_t NAV_deltaSum, ALT_deltaSum, GPS_FwTarget, GPS_AltErr, NAV_Thro;
    int16_t TX_Thro = rcData[THROTTLE];         // Read and store Throttle pos.
 8007114:	4b51      	ldr	r3, [pc, #324]	; (800725c <fw_nav+0x168>)
 8007116:	88db      	ldrh	r3, [r3, #6]
 8007118:	837b      	strh	r3, [r7, #26]
    // Nav timer
    static uint32_t gpsTimer = 0;
    static uint16_t gpsFreq = 1000 / GPS_UPD_HZ;    // 5HZ 200ms DT

    // Calculated Altitude over home in meters
    int16_t currAlt = GPS_altitude - GPS_home[ALT];         // GPS
 800711a:	4b51      	ldr	r3, [pc, #324]	; (8007260 <fw_nav+0x16c>)
 800711c:	881a      	ldrh	r2, [r3, #0]
 800711e:	4b51      	ldr	r3, [pc, #324]	; (8007264 <fw_nav+0x170>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	b29b      	uxth	r3, r3
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	b29b      	uxth	r3, r3
 8007128:	833b      	strh	r3, [r7, #24]
    int16_t navTargetAlt = GPS_hold[ALT] - GPS_home[ALT];   // Diff from homeAlt.
 800712a:	4b4f      	ldr	r3, [pc, #316]	; (8007268 <fw_nav+0x174>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	b29a      	uxth	r2, r3
 8007130:	4b4c      	ldr	r3, [pc, #304]	; (8007264 <fw_nav+0x170>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	b29b      	uxth	r3, r3
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	b29b      	uxth	r3, r3
 800713a:	82fb      	strh	r3, [r7, #22]

    // Handles ReSetting RTH alt if rth is enabled to low!
    if (f.CLIMBOUT_FW && currAlt < RTH_Alt)
 800713c:	4b4b      	ldr	r3, [pc, #300]	; (800726c <fw_nav+0x178>)
 800713e:	7cdb      	ldrb	r3, [r3, #19]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00a      	beq.n	800715a <fw_nav+0x66>
 8007144:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007148:	7f7b      	ldrb	r3, [r7, #29]
 800714a:	429a      	cmp	r2, r3
 800714c:	da05      	bge.n	800715a <fw_nav+0x66>
        GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;
 800714e:	4b45      	ldr	r3, [pc, #276]	; (8007264 <fw_nav+0x170>)
 8007150:	689a      	ldr	r2, [r3, #8]
 8007152:	7f7b      	ldrb	r3, [r7, #29]
 8007154:	4413      	add	r3, r2
 8007156:	4a44      	ldr	r2, [pc, #272]	; (8007268 <fw_nav+0x174>)
 8007158:	6093      	str	r3, [r2, #8]

    // Wrap GPS_Heading 1800
    GPS_Heading = wrap_18000(GPS_Heading * 10) / 10;
 800715a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800715e:	4613      	mov	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	4618      	mov	r0, r3
 8007168:	f002 fa54 	bl	8009614 <wrap_18000>
 800716c:	4603      	mov	r3, r0
 800716e:	4a40      	ldr	r2, [pc, #256]	; (8007270 <fw_nav+0x17c>)
 8007170:	fb82 1203 	smull	r1, r2, r2, r3
 8007174:	1092      	asrs	r2, r2, #2
 8007176:	17db      	asrs	r3, r3, #31
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	843b      	strh	r3, [r7, #32]

    // Only use MAG if Mag and GPS_Heading aligns
    if (sensors(SENSOR_MAG)) {
 800717c:	2008      	movs	r0, #8
 800717e:	f7ff fe3f 	bl	8006e00 <sensors>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d024      	beq.n	80071d2 <fw_nav+0xde>
        if (abs(heading - (GPS_Heading / 10)) > 10 && GPS_speed > 200)
 8007188:	4b3a      	ldr	r3, [pc, #232]	; (8007274 <fw_nav+0x180>)
 800718a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800718e:	4619      	mov	r1, r3
 8007190:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007194:	4a36      	ldr	r2, [pc, #216]	; (8007270 <fw_nav+0x17c>)
 8007196:	fb82 0203 	smull	r0, r2, r2, r3
 800719a:	1092      	asrs	r2, r2, #2
 800719c:	17db      	asrs	r3, r3, #31
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	b21b      	sxth	r3, r3
 80071a2:	1acb      	subs	r3, r1, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	bfb8      	it	lt
 80071a8:	425b      	neglt	r3, r3
 80071aa:	2b0a      	cmp	r3, #10
 80071ac:	dd0d      	ble.n	80071ca <fw_nav+0xd6>
 80071ae:	4b32      	ldr	r3, [pc, #200]	; (8007278 <fw_nav+0x184>)
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	2bc8      	cmp	r3, #200	; 0xc8
 80071b4:	d909      	bls.n	80071ca <fw_nav+0xd6>
            Current_Heading = GPS_Heading / 10;
 80071b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80071ba:	4a2d      	ldr	r2, [pc, #180]	; (8007270 <fw_nav+0x17c>)
 80071bc:	fb82 1203 	smull	r1, r2, r2, r3
 80071c0:	1092      	asrs	r2, r2, #2
 80071c2:	17db      	asrs	r3, r3, #31
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80071c8:	e00c      	b.n	80071e4 <fw_nav+0xf0>
        else
            Current_Heading = heading;
 80071ca:	4b2a      	ldr	r3, [pc, #168]	; (8007274 <fw_nav+0x180>)
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80071d0:	e008      	b.n	80071e4 <fw_nav+0xf0>
    } else
        Current_Heading = GPS_Heading / 10;
 80071d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80071d6:	4a26      	ldr	r2, [pc, #152]	; (8007270 <fw_nav+0x17c>)
 80071d8:	fb82 1203 	smull	r1, r2, r2, r3
 80071dc:	1092      	asrs	r2, r2, #2
 80071de:	17db      	asrs	r3, r3, #31
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	84fb      	strh	r3, [r7, #38]	; 0x26

    // Calculate Navigation errors
    GPS_FwTarget = nav_bearing / 100;
 80071e4:	4b25      	ldr	r3, [pc, #148]	; (800727c <fw_nav+0x188>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a25      	ldr	r2, [pc, #148]	; (8007280 <fw_nav+0x18c>)
 80071ea:	fb82 1203 	smull	r1, r2, r2, r3
 80071ee:	1152      	asrs	r2, r2, #5
 80071f0:	17db      	asrs	r3, r3, #31
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	b21a      	sxth	r2, r3
 80071f6:	4b23      	ldr	r3, [pc, #140]	; (8007284 <fw_nav+0x190>)
 80071f8:	801a      	strh	r2, [r3, #0]
    navDiff = GPS_FwTarget - Current_Heading;   // Navigation Error
 80071fa:	4b22      	ldr	r3, [pc, #136]	; (8007284 <fw_nav+0x190>)
 80071fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007200:	b29a      	uxth	r2, r3
 8007202:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	b29b      	uxth	r3, r3
 8007208:	84bb      	strh	r3, [r7, #36]	; 0x24
    GPS_AltErr = currAlt - navTargetAlt;        // Altitude error Negative means you're to low
 800720a:	8b3a      	ldrh	r2, [r7, #24]
 800720c:	8afb      	ldrh	r3, [r7, #22]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	b29b      	uxth	r3, r3
 8007212:	b21a      	sxth	r2, r3
 8007214:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <fw_nav+0x194>)
 8007216:	801a      	strh	r2, [r3, #0]

    // Start of NavTimer
    if (pif_cumulative_timer1ms - gpsTimer >= gpsFreq) {
 8007218:	4b1c      	ldr	r3, [pc, #112]	; (800728c <fw_nav+0x198>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	4b1c      	ldr	r3, [pc, #112]	; (8007290 <fw_nav+0x19c>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	4a1c      	ldr	r2, [pc, #112]	; (8007294 <fw_nav+0x1a0>)
 8007224:	8812      	ldrh	r2, [r2, #0]
 8007226:	4293      	cmp	r3, r2
 8007228:	f0c0 83e9 	bcc.w	80079fe <fw_nav+0x90a>
        gpsTimer = pif_cumulative_timer1ms;
 800722c:	4b17      	ldr	r3, [pc, #92]	; (800728c <fw_nav+0x198>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a17      	ldr	r2, [pc, #92]	; (8007290 <fw_nav+0x19c>)
 8007232:	6013      	str	r3, [r2, #0]

        // Throttle control
        // Deadpan for throttle at correct Alt.
        if (abs(GPS_AltErr) < 1) // Just cruise along in deadpan.
 8007234:	4b14      	ldr	r3, [pc, #80]	; (8007288 <fw_nav+0x194>)
 8007236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800723a:	2b00      	cmp	r3, #0
 800723c:	bfb8      	it	lt
 800723e:	425b      	neglt	r3, r3
 8007240:	b29b      	uxth	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d12a      	bne.n	800729c <fw_nav+0x1a8>
            NAV_Thro = cfg.fw_cruise_throttle;
 8007246:	4b04      	ldr	r3, [pc, #16]	; (8007258 <fw_nav+0x164>)
 8007248:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 800724c:	b21a      	sxth	r2, r3
 800724e:	4b12      	ldr	r3, [pc, #72]	; (8007298 <fw_nav+0x1a4>)
 8007250:	801a      	strh	r2, [r3, #0]
 8007252:	e03f      	b.n	80072d4 <fw_nav+0x1e0>
 8007254:	2000171e 	.word	0x2000171e
 8007258:	20000d18 	.word	0x20000d18
 800725c:	20001660 	.word	0x20001660
 8007260:	20001712 	.word	0x20001712
 8007264:	200016f4 	.word	0x200016f4
 8007268:	20001700 	.word	0x20001700
 800726c:	20001628 	.word	0x20001628
 8007270:	66666667 	.word	0x66666667
 8007274:	200019ba 	.word	0x200019ba
 8007278:	20001714 	.word	0x20001714
 800727c:	200012dc 	.word	0x200012dc
 8007280:	51eb851f 	.word	0x51eb851f
 8007284:	20000e80 	.word	0x20000e80
 8007288:	20000e82 	.word	0x20000e82
 800728c:	20001f08 	.word	0x20001f08
 8007290:	20000e84 	.word	0x20000e84
 8007294:	20000026 	.word	0x20000026
 8007298:	20000e88 	.word	0x20000e88
        else
            // Add AltitudeError  and scale up with a factor to throttle
            NAV_Thro = constrain(cfg.fw_cruise_throttle - (GPS_AltErr * cfg.fw_scaler_throttle), cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 800729c:	4b99      	ldr	r3, [pc, #612]	; (8007504 <fw_nav+0x410>)
 800729e:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80072a2:	461a      	mov	r2, r3
 80072a4:	4b98      	ldr	r3, [pc, #608]	; (8007508 <fw_nav+0x414>)
 80072a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072aa:	4619      	mov	r1, r3
 80072ac:	4b95      	ldr	r3, [pc, #596]	; (8007504 <fw_nav+0x410>)
 80072ae:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80072b2:	fb01 f303 	mul.w	r3, r1, r3
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	4a92      	ldr	r2, [pc, #584]	; (8007504 <fw_nav+0x410>)
 80072ba:	f8b2 212e 	ldrh.w	r2, [r2, #302]	; 0x12e
 80072be:	4611      	mov	r1, r2
 80072c0:	4a90      	ldr	r2, [pc, #576]	; (8007504 <fw_nav+0x410>)
 80072c2:	f8b2 212a 	ldrh.w	r2, [r2, #298]	; 0x12a
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fc fc62 	bl	8003b90 <constrain>
 80072cc:	4603      	mov	r3, r0
 80072ce:	b21a      	sxth	r2, r3
 80072d0:	4b8e      	ldr	r3, [pc, #568]	; (800750c <fw_nav+0x418>)
 80072d2:	801a      	strh	r2, [r3, #0]

        // Reset Climbout Flag when Alt have been reached
        if (f.CLIMBOUT_FW && GPS_AltErr >= 0)
 80072d4:	4b8e      	ldr	r3, [pc, #568]	; (8007510 <fw_nav+0x41c>)
 80072d6:	7cdb      	ldrb	r3, [r3, #19]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d007      	beq.n	80072ec <fw_nav+0x1f8>
 80072dc:	4b8a      	ldr	r3, [pc, #552]	; (8007508 <fw_nav+0x414>)
 80072de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	db02      	blt.n	80072ec <fw_nav+0x1f8>
            f.CLIMBOUT_FW = 0;
 80072e6:	4b8a      	ldr	r3, [pc, #552]	; (8007510 <fw_nav+0x41c>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	74da      	strb	r2, [r3, #19]

        // Climb out before RTH
        if (f.GPS_HOME_MODE) {
 80072ec:	4b88      	ldr	r3, [pc, #544]	; (8007510 <fw_nav+0x41c>)
 80072ee:	79db      	ldrb	r3, [r3, #7]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d02c      	beq.n	800734e <fw_nav+0x25a>
            if (f.CLIMBOUT_FW) {
 80072f4:	4b86      	ldr	r3, [pc, #536]	; (8007510 <fw_nav+0x41c>)
 80072f6:	7cdb      	ldrb	r3, [r3, #19]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d019      	beq.n	8007330 <fw_nav+0x23c>
                GPS_AltErr = -(cfg.fw_gps_maxclimb * 10);  // Max climbAngle
 80072fc:	4b81      	ldr	r3, [pc, #516]	; (8007504 <fw_nav+0x410>)
 80072fe:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8007302:	b29b      	uxth	r3, r3
 8007304:	461a      	mov	r2, r3
 8007306:	0352      	lsls	r2, r2, #13
 8007308:	1ad2      	subs	r2, r2, r3
 800730a:	0092      	lsls	r2, r2, #2
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	b29b      	uxth	r3, r3
 8007312:	b21a      	sxth	r2, r3
 8007314:	4b7c      	ldr	r3, [pc, #496]	; (8007508 <fw_nav+0x414>)
 8007316:	801a      	strh	r2, [r3, #0]
                NAV_Thro = cfg.fw_climb_throttle;          // Max Allowed Throttle
 8007318:	4b7a      	ldr	r3, [pc, #488]	; (8007504 <fw_nav+0x410>)
 800731a:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 800731e:	b21a      	sxth	r2, r3
 8007320:	4b7a      	ldr	r3, [pc, #488]	; (800750c <fw_nav+0x418>)
 8007322:	801a      	strh	r2, [r3, #0]
                if (currAlt < SAFE_NAV_ALT)
 8007324:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007328:	2b18      	cmp	r3, #24
 800732a:	dc01      	bgt.n	8007330 <fw_nav+0x23c>
                    navDiff = 0;                        // Force climb with Level Wings below safe Alt
 800732c:	2300      	movs	r3, #0
 800732e:	84bb      	strh	r3, [r7, #36]	; 0x24
            }

            if ((GPS_distanceToHome < SAFE_DECSCEND_ZONE) && currAlt > RTH_Alt)
 8007330:	4b78      	ldr	r3, [pc, #480]	; (8007514 <fw_nav+0x420>)
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	2b31      	cmp	r3, #49	; 0x31
 8007336:	d80a      	bhi.n	800734e <fw_nav+0x25a>
 8007338:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800733c:	7f7b      	ldrb	r3, [r7, #29]
 800733e:	429a      	cmp	r2, r3
 8007340:	dd05      	ble.n	800734e <fw_nav+0x25a>
                GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;    // Start descend to correct RTH Alt.
 8007342:	4b75      	ldr	r3, [pc, #468]	; (8007518 <fw_nav+0x424>)
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	7f7b      	ldrb	r3, [r7, #29]
 8007348:	4413      	add	r3, r2
 800734a:	4a74      	ldr	r2, [pc, #464]	; (800751c <fw_nav+0x428>)
 800734c:	6093      	str	r3, [r2, #8]
        }

        // Always DISARM when Home is within 10 meters if FC is in failsafe.
        if (f.FW_FAILSAFE_RTH_ENABLE && (GPS_distanceToHome < 10)) {
 800734e:	4b70      	ldr	r3, [pc, #448]	; (8007510 <fw_nav+0x41c>)
 8007350:	7c9b      	ldrb	r3, [r3, #18]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00e      	beq.n	8007374 <fw_nav+0x280>
 8007356:	4b6f      	ldr	r3, [pc, #444]	; (8007514 <fw_nav+0x420>)
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	2b09      	cmp	r3, #9
 800735c:	d80a      	bhi.n	8007374 <fw_nav+0x280>
            f.ARMED = 0;
 800735e:	4b6c      	ldr	r3, [pc, #432]	; (8007510 <fw_nav+0x41c>)
 8007360:	2200      	movs	r2, #0
 8007362:	705a      	strb	r2, [r3, #1]
            f.CLIMBOUT_FW = 0;                  // Abort Climbout
 8007364:	4b6a      	ldr	r3, [pc, #424]	; (8007510 <fw_nav+0x41c>)
 8007366:	2200      	movs	r2, #0
 8007368:	74da      	strb	r2, [r3, #19]
            GPS_hold[ALT] = GPS_home[ALT] + 5;  // Come down
 800736a:	4b6b      	ldr	r3, [pc, #428]	; (8007518 <fw_nav+0x424>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	3305      	adds	r3, #5
 8007370:	4a6a      	ldr	r2, [pc, #424]	; (800751c <fw_nav+0x428>)
 8007372:	6093      	str	r3, [r2, #8]
        }

        // Filtering of navDiff around home to stop nervous servos
        if (GPS_distanceToHome < 10)
 8007374:	4b67      	ldr	r3, [pc, #412]	; (8007514 <fw_nav+0x420>)
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	2b09      	cmp	r3, #9
 800737a:	d80e      	bhi.n	800739a <fw_nav+0x2a6>
            navDiff *= 0.1f;
 800737c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007380:	ee07 3a90 	vmov	s15, r3
 8007384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007388:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007520 <fw_nav+0x42c>
 800738c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007394:	ee17 3a90 	vmov	r3, s15
 8007398:	84bb      	strh	r3, [r7, #36]	; 0x24

        // Wrap Heading 180
        navDiff = wrap_18000(navDiff * 100) / 100;
 800739a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800739e:	2264      	movs	r2, #100	; 0x64
 80073a0:	fb02 f303 	mul.w	r3, r2, r3
 80073a4:	4618      	mov	r0, r3
 80073a6:	f002 f935 	bl	8009614 <wrap_18000>
 80073aa:	4603      	mov	r3, r0
 80073ac:	4a5d      	ldr	r2, [pc, #372]	; (8007524 <fw_nav+0x430>)
 80073ae:	fb82 1203 	smull	r1, r2, r2, r3
 80073b2:	1152      	asrs	r2, r2, #5
 80073b4:	17db      	asrs	r3, r3, #31
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (abs(navDiff) > 170)
 80073ba:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80073be:	2b00      	cmp	r3, #0
 80073c0:	bfb8      	it	lt
 80073c2:	425b      	neglt	r3, r3
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2baa      	cmp	r3, #170	; 0xaa
 80073c8:	d901      	bls.n	80073ce <fw_nav+0x2da>
            navDiff = 175;      // Forced turn.
 80073ca:	23af      	movs	r3, #175	; 0xaf
 80073cc:	84bb      	strh	r3, [r7, #36]	; 0x24

        // PID for Navigating planes.
        navDT = (float) (pif_cumulative_timer1ms - nav_loopT) / 1000;
 80073ce:	4b56      	ldr	r3, [pc, #344]	; (8007528 <fw_nav+0x434>)
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4b56      	ldr	r3, [pc, #344]	; (800752c <fw_nav+0x438>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	ee07 3a90 	vmov	s15, r3
 80073dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073e0:	eddf 6a53 	vldr	s13, [pc, #332]	; 8007530 <fw_nav+0x43c>
 80073e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073e8:	edc7 7a04 	vstr	s15, [r7, #16]
        nav_loopT = pif_cumulative_timer1ms;
 80073ec:	4b4e      	ldr	r3, [pc, #312]	; (8007528 <fw_nav+0x434>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a4e      	ldr	r2, [pc, #312]	; (800752c <fw_nav+0x438>)
 80073f2:	6013      	str	r3, [r2, #0]

        // Altitude PID
        if (abs(GPS_AltErr) <= 3)
 80073f4:	4b44      	ldr	r3, [pc, #272]	; (8007508 <fw_nav+0x414>)
 80073f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bfb8      	it	lt
 80073fe:	425b      	neglt	r3, r3
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b03      	cmp	r3, #3
 8007404:	d809      	bhi.n	800741a <fw_nav+0x326>
            altErrorI *= navDT; // Remove I-Term in deadspan
 8007406:	4b4b      	ldr	r3, [pc, #300]	; (8007534 <fw_nav+0x440>)
 8007408:	ed93 7a00 	vldr	s14, [r3]
 800740c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007414:	4b47      	ldr	r3, [pc, #284]	; (8007534 <fw_nav+0x440>)
 8007416:	edc3 7a00 	vstr	s15, [r3]

        GPS_AltErr *= 10;
 800741a:	4b3b      	ldr	r3, [pc, #236]	; (8007508 <fw_nav+0x414>)
 800741c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007420:	b29b      	uxth	r3, r3
 8007422:	461a      	mov	r2, r3
 8007424:	0092      	lsls	r2, r2, #2
 8007426:	4413      	add	r3, r2
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	b29b      	uxth	r3, r3
 800742c:	b21a      	sxth	r2, r3
 800742e:	4b36      	ldr	r3, [pc, #216]	; (8007508 <fw_nav+0x414>)
 8007430:	801a      	strh	r2, [r3, #0]
        altErrorI += (GPS_AltErr * altPID_PARAM.kI) * navDT;    // Acumulate I from PIDPOSR
 8007432:	4b35      	ldr	r3, [pc, #212]	; (8007508 <fw_nav+0x414>)
 8007434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007438:	ee07 3a90 	vmov	s15, r3
 800743c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007440:	4b3d      	ldr	r3, [pc, #244]	; (8007538 <fw_nav+0x444>)
 8007442:	edd3 7a01 	vldr	s15, [r3, #4]
 8007446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800744a:	edd7 7a04 	vldr	s15, [r7, #16]
 800744e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007452:	4b38      	ldr	r3, [pc, #224]	; (8007534 <fw_nav+0x440>)
 8007454:	edd3 7a00 	vldr	s15, [r3]
 8007458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800745c:	4b35      	ldr	r3, [pc, #212]	; (8007534 <fw_nav+0x440>)
 800745e:	edc3 7a00 	vstr	s15, [r3]
        altErrorI = constrain(altErrorI, -500, 500);            // limits I term influence
 8007462:	4b34      	ldr	r3, [pc, #208]	; (8007534 <fw_nav+0x440>)
 8007464:	edd3 7a00 	vldr	s15, [r3]
 8007468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800746c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007470:	4932      	ldr	r1, [pc, #200]	; (800753c <fw_nav+0x448>)
 8007472:	ee17 0a90 	vmov	r0, s15
 8007476:	f7fc fb8b 	bl	8003b90 <constrain>
 800747a:	ee07 0a90 	vmov	s15, r0
 800747e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007482:	4b2c      	ldr	r3, [pc, #176]	; (8007534 <fw_nav+0x440>)
 8007484:	edc3 7a00 	vstr	s15, [r3]

        delta[0] = (GPS_AltErr - lastAltDiff);
 8007488:	4b1f      	ldr	r3, [pc, #124]	; (8007508 <fw_nav+0x414>)
 800748a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800748e:	b29a      	uxth	r2, r3
 8007490:	4b2b      	ldr	r3, [pc, #172]	; (8007540 <fw_nav+0x44c>)
 8007492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007496:	b29b      	uxth	r3, r3
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	b29b      	uxth	r3, r3
 800749c:	b21b      	sxth	r3, r3
 800749e:	80bb      	strh	r3, [r7, #4]
        lastAltDiff = GPS_AltErr;
 80074a0:	4b19      	ldr	r3, [pc, #100]	; (8007508 <fw_nav+0x414>)
 80074a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80074a6:	4b26      	ldr	r3, [pc, #152]	; (8007540 <fw_nav+0x44c>)
 80074a8:	801a      	strh	r2, [r3, #0]
        if (abs(delta[0]) > 100)
 80074aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bfb8      	it	lt
 80074b2:	425b      	neglt	r3, r3
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b64      	cmp	r3, #100	; 0x64
 80074b8:	d901      	bls.n	80074be <fw_nav+0x3ca>
            delta[0] = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	80bb      	strh	r3, [r7, #4]

        for (i = 0; i < GPS_UPD_HZ; i++)
 80074be:	2300      	movs	r3, #0
 80074c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c4:	e00f      	b.n	80074e6 <fw_nav+0x3f2>
            altHist[i] = altHist[i + 1];
 80074c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074d0:	491c      	ldr	r1, [pc, #112]	; (8007544 <fw_nav+0x450>)
 80074d2:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80074d6:	4a1b      	ldr	r2, [pc, #108]	; (8007544 <fw_nav+0x450>)
 80074d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80074dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074e0:	3301      	adds	r3, #1
 80074e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d9eb      	bls.n	80074c6 <fw_nav+0x3d2>

        altHist[GPS_UPD_HZ - 1] = delta[0];
 80074ee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80074f2:	4b14      	ldr	r3, [pc, #80]	; (8007544 <fw_nav+0x450>)
 80074f4:	811a      	strh	r2, [r3, #8]

        // Store 1 sec history for D-term in shift register
        ALT_deltaSum = 0;       // Sum History
 80074f6:	4b14      	ldr	r3, [pc, #80]	; (8007548 <fw_nav+0x454>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80074fc:	2300      	movs	r3, #0
 80074fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007502:	e037      	b.n	8007574 <fw_nav+0x480>
 8007504:	20000d18 	.word	0x20000d18
 8007508:	20000e82 	.word	0x20000e82
 800750c:	20000e88 	.word	0x20000e88
 8007510:	20001628 	.word	0x20001628
 8007514:	2000170e 	.word	0x2000170e
 8007518:	200016f4 	.word	0x200016f4
 800751c:	20001700 	.word	0x20001700
 8007520:	3dcccccd 	.word	0x3dcccccd
 8007524:	51eb851f 	.word	0x51eb851f
 8007528:	20001f08 	.word	0x20001f08
 800752c:	20000e8c 	.word	0x20000e8c
 8007530:	447a0000 	.word	0x447a0000
 8007534:	20000e5c 	.word	0x20000e5c
 8007538:	200011d8 	.word	0x200011d8
 800753c:	fffffe0c 	.word	0xfffffe0c
 8007540:	20000e60 	.word	0x20000e60
 8007544:	20000e68 	.word	0x20000e68
 8007548:	20000e90 	.word	0x20000e90
            ALT_deltaSum += altHist[i];
 800754c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007550:	4a64      	ldr	r2, [pc, #400]	; (80076e4 <fw_nav+0x5f0>)
 8007552:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8007556:	b29a      	uxth	r2, r3
 8007558:	4b63      	ldr	r3, [pc, #396]	; (80076e8 <fw_nav+0x5f4>)
 800755a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800755e:	b29b      	uxth	r3, r3
 8007560:	4413      	add	r3, r2
 8007562:	b29b      	uxth	r3, r3
 8007564:	b21a      	sxth	r2, r3
 8007566:	4b60      	ldr	r3, [pc, #384]	; (80076e8 <fw_nav+0x5f4>)
 8007568:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 800756a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800756e:	3301      	adds	r3, #1
 8007570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007578:	2b04      	cmp	r3, #4
 800757a:	d9e7      	bls.n	800754c <fw_nav+0x458>

        ALT_deltaSum = (ALT_deltaSum * altPID_PARAM.kD) / navDT;
 800757c:	4b5a      	ldr	r3, [pc, #360]	; (80076e8 <fw_nav+0x5f4>)
 800757e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800758a:	4b58      	ldr	r3, [pc, #352]	; (80076ec <fw_nav+0x5f8>)
 800758c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007590:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007594:	ed97 7a04 	vldr	s14, [r7, #16]
 8007598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800759c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075a0:	ee17 3a90 	vmov	r3, s15
 80075a4:	b21a      	sxth	r2, r3
 80075a6:	4b50      	ldr	r3, [pc, #320]	; (80076e8 <fw_nav+0x5f4>)
 80075a8:	801a      	strh	r2, [r3, #0]
        altDiff = GPS_AltErr * altPID_PARAM.kP; // Add P in Elevator compensation.
 80075aa:	4b51      	ldr	r3, [pc, #324]	; (80076f0 <fw_nav+0x5fc>)
 80075ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075b0:	ee07 3a90 	vmov	s15, r3
 80075b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075b8:	4b4c      	ldr	r3, [pc, #304]	; (80076ec <fw_nav+0x5f8>)
 80075ba:	edd3 7a00 	vldr	s15, [r3]
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075c6:	ee17 3a90 	vmov	r3, s15
 80075ca:	83fb      	strh	r3, [r7, #30]
        altDiff += (altErrorI); // Add I
 80075cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80075d0:	ee07 3a90 	vmov	s15, r3
 80075d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075d8:	4b46      	ldr	r3, [pc, #280]	; (80076f4 <fw_nav+0x600>)
 80075da:	edd3 7a00 	vldr	s15, [r3]
 80075de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075e6:	ee17 3a90 	vmov	r3, s15
 80075ea:	83fb      	strh	r3, [r7, #30]

        // Start of NavPID
        if (abs(navDiff) <= 3)
 80075ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	bfb8      	it	lt
 80075f4:	425b      	neglt	r3, r3
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d809      	bhi.n	8007610 <fw_nav+0x51c>
            navErrorI *= navDT; // Remove I-Term in deadspan
 80075fc:	4b3e      	ldr	r3, [pc, #248]	; (80076f8 <fw_nav+0x604>)
 80075fe:	ed93 7a00 	vldr	s14, [r3]
 8007602:	edd7 7a04 	vldr	s15, [r7, #16]
 8007606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760a:	4b3b      	ldr	r3, [pc, #236]	; (80076f8 <fw_nav+0x604>)
 800760c:	edc3 7a00 	vstr	s15, [r3]

        navDiff *= 10;
 8007610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007612:	461a      	mov	r2, r3
 8007614:	0092      	lsls	r2, r2, #2
 8007616:	4413      	add	r3, r2
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	b29b      	uxth	r3, r3
 800761c:	84bb      	strh	r3, [r7, #36]	; 0x24

        navErrorI += (navDiff * navPID_PARAM.kI) * navDT;
 800761e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800762a:	4b34      	ldr	r3, [pc, #208]	; (80076fc <fw_nav+0x608>)
 800762c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007634:	edd7 7a04 	vldr	s15, [r7, #16]
 8007638:	ee27 7a27 	vmul.f32	s14, s14, s15
 800763c:	4b2e      	ldr	r3, [pc, #184]	; (80076f8 <fw_nav+0x604>)
 800763e:	edd3 7a00 	vldr	s15, [r3]
 8007642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007646:	4b2c      	ldr	r3, [pc, #176]	; (80076f8 <fw_nav+0x604>)
 8007648:	edc3 7a00 	vstr	s15, [r3]
        navErrorI = constrain(navErrorI, -500, 500);
 800764c:	4b2a      	ldr	r3, [pc, #168]	; (80076f8 <fw_nav+0x604>)
 800764e:	edd3 7a00 	vldr	s15, [r3]
 8007652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007656:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800765a:	4929      	ldr	r1, [pc, #164]	; (8007700 <fw_nav+0x60c>)
 800765c:	ee17 0a90 	vmov	r0, s15
 8007660:	f7fc fa96 	bl	8003b90 <constrain>
 8007664:	ee07 0a90 	vmov	s15, r0
 8007668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800766c:	4b22      	ldr	r3, [pc, #136]	; (80076f8 <fw_nav+0x604>)
 800766e:	edc3 7a00 	vstr	s15, [r3]

        delta[1] = (navDiff - lastnavDiff);
 8007672:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007674:	4b23      	ldr	r3, [pc, #140]	; (8007704 <fw_nav+0x610>)
 8007676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800767a:	b29b      	uxth	r3, r3
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	b29b      	uxth	r3, r3
 8007680:	b21b      	sxth	r3, r3
 8007682:	80fb      	strh	r3, [r7, #6]
        lastnavDiff = navDiff;
 8007684:	4a1f      	ldr	r2, [pc, #124]	; (8007704 <fw_nav+0x610>)
 8007686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007688:	8013      	strh	r3, [r2, #0]

        if (abs(delta[1]) > 100)
 800768a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800768e:	2b00      	cmp	r3, #0
 8007690:	bfb8      	it	lt
 8007692:	425b      	neglt	r3, r3
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b64      	cmp	r3, #100	; 0x64
 8007698:	d901      	bls.n	800769e <fw_nav+0x5aa>
            delta[1] = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	80fb      	strh	r3, [r7, #6]

        // Store 1 sec history for D-term in shift register
        for (i = 0; i < GPS_UPD_HZ; i++)
 800769e:	2300      	movs	r3, #0
 80076a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076a4:	e00f      	b.n	80076c6 <fw_nav+0x5d2>
            navDif[i] = navDif[i + 1];
 80076a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076b0:	4915      	ldr	r1, [pc, #84]	; (8007708 <fw_nav+0x614>)
 80076b2:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80076b6:	4a14      	ldr	r2, [pc, #80]	; (8007708 <fw_nav+0x614>)
 80076b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80076bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c0:	3301      	adds	r3, #1
 80076c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d9eb      	bls.n	80076a6 <fw_nav+0x5b2>

        navDif[GPS_UPD_HZ - 1] = delta[1];
 80076ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80076d2:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <fw_nav+0x614>)
 80076d4:	811a      	strh	r2, [r3, #8]

        NAV_deltaSum = 0;       // Sum History
 80076d6:	4b0d      	ldr	r3, [pc, #52]	; (800770c <fw_nav+0x618>)
 80076d8:	2200      	movs	r2, #0
 80076da:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80076dc:	2300      	movs	r3, #0
 80076de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076e2:	e029      	b.n	8007738 <fw_nav+0x644>
 80076e4:	20000e68 	.word	0x20000e68
 80076e8:	20000e90 	.word	0x20000e90
 80076ec:	200011d8 	.word	0x200011d8
 80076f0:	20000e82 	.word	0x20000e82
 80076f4:	20000e5c 	.word	0x20000e5c
 80076f8:	20000e58 	.word	0x20000e58
 80076fc:	200011c8 	.word	0x200011c8
 8007700:	fffffe0c 	.word	0xfffffe0c
 8007704:	20000e62 	.word	0x20000e62
 8007708:	20000e74 	.word	0x20000e74
 800770c:	20000e92 	.word	0x20000e92
            NAV_deltaSum += navDif[i];
 8007710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007714:	4abc      	ldr	r2, [pc, #752]	; (8007a08 <fw_nav+0x914>)
 8007716:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800771a:	b29a      	uxth	r2, r3
 800771c:	4bbb      	ldr	r3, [pc, #748]	; (8007a0c <fw_nav+0x918>)
 800771e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007722:	b29b      	uxth	r3, r3
 8007724:	4413      	add	r3, r2
 8007726:	b29b      	uxth	r3, r3
 8007728:	b21a      	sxth	r2, r3
 800772a:	4bb8      	ldr	r3, [pc, #736]	; (8007a0c <fw_nav+0x918>)
 800772c:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 800772e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007732:	3301      	adds	r3, #1
 8007734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007738:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800773c:	2b04      	cmp	r3, #4
 800773e:	d9e7      	bls.n	8007710 <fw_nav+0x61c>

        NAV_deltaSum = (NAV_deltaSum * navPID_PARAM.kD) / navDT;    // Add D
 8007740:	4bb2      	ldr	r3, [pc, #712]	; (8007a0c <fw_nav+0x918>)
 8007742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800774e:	4bb0      	ldr	r3, [pc, #704]	; (8007a10 <fw_nav+0x91c>)
 8007750:	edd3 7a02 	vldr	s15, [r3, #8]
 8007754:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007758:	ed97 7a04 	vldr	s14, [r7, #16]
 800775c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007764:	ee17 3a90 	vmov	r3, s15
 8007768:	b21a      	sxth	r2, r3
 800776a:	4ba8      	ldr	r3, [pc, #672]	; (8007a0c <fw_nav+0x918>)
 800776c:	801a      	strh	r2, [r3, #0]

        navDiff *= navPID_PARAM.kP;                                 // Add P
 800776e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007772:	ee07 3a90 	vmov	s15, r3
 8007776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800777a:	4ba5      	ldr	r3, [pc, #660]	; (8007a10 <fw_nav+0x91c>)
 800777c:	edd3 7a00 	vldr	s15, [r3]
 8007780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007788:	ee17 3a90 	vmov	r3, s15
 800778c:	84bb      	strh	r3, [r7, #36]	; 0x24
        navDiff += navErrorI;                                       // Add I
 800778e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800779a:	4b9e      	ldr	r3, [pc, #632]	; (8007a14 <fw_nav+0x920>)
 800779c:	edd3 7a00 	vldr	s15, [r3]
 80077a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077a8:	ee17 3a90 	vmov	r3, s15
 80077ac:	84bb      	strh	r3, [r7, #36]	; 0x24
        // End of NavPID

        // Limit outputs
        GPS_angle[PITCH] = constrain(altDiff / 10, -cfg.fw_gps_maxclimb * 10, cfg.fw_gps_maxdive * 10) + ALT_deltaSum;
 80077ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80077b2:	4a99      	ldr	r2, [pc, #612]	; (8007a18 <fw_nav+0x924>)
 80077b4:	fb82 1203 	smull	r1, r2, r2, r3
 80077b8:	1092      	asrs	r2, r2, #2
 80077ba:	17db      	asrs	r3, r3, #31
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	b21b      	sxth	r3, r3
 80077c0:	4618      	mov	r0, r3
 80077c2:	4b96      	ldr	r3, [pc, #600]	; (8007a1c <fw_nav+0x928>)
 80077c4:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80077c8:	461a      	mov	r2, r3
 80077ca:	f06f 0309 	mvn.w	r3, #9
 80077ce:	fb03 f102 	mul.w	r1, r3, r2
 80077d2:	4b92      	ldr	r3, [pc, #584]	; (8007a1c <fw_nav+0x928>)
 80077d4:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 80077d8:	461a      	mov	r2, r3
 80077da:	4613      	mov	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	461a      	mov	r2, r3
 80077e4:	f7fc f9d4 	bl	8003b90 <constrain>
 80077e8:	4603      	mov	r3, r0
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	4b8c      	ldr	r3, [pc, #560]	; (8007a20 <fw_nav+0x92c>)
 80077ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	4413      	add	r3, r2
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	b21a      	sxth	r2, r3
 80077fa:	4b8a      	ldr	r3, [pc, #552]	; (8007a24 <fw_nav+0x930>)
 80077fc:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = constrain(navDiff / 10, -cfg.fw_gps_maxcorr * 10, cfg.fw_gps_maxcorr * 10) + NAV_deltaSum;
 80077fe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007802:	4a85      	ldr	r2, [pc, #532]	; (8007a18 <fw_nav+0x924>)
 8007804:	fb82 1203 	smull	r1, r2, r2, r3
 8007808:	1092      	asrs	r2, r2, #2
 800780a:	17db      	asrs	r3, r3, #31
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	b21b      	sxth	r3, r3
 8007810:	4618      	mov	r0, r3
 8007812:	4b82      	ldr	r3, [pc, #520]	; (8007a1c <fw_nav+0x928>)
 8007814:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8007818:	461a      	mov	r2, r3
 800781a:	f06f 0309 	mvn.w	r3, #9
 800781e:	fb03 f102 	mul.w	r1, r3, r2
 8007822:	4b7e      	ldr	r3, [pc, #504]	; (8007a1c <fw_nav+0x928>)
 8007824:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8007828:	461a      	mov	r2, r3
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	461a      	mov	r2, r3
 8007834:	f7fc f9ac 	bl	8003b90 <constrain>
 8007838:	4603      	mov	r3, r0
 800783a:	b29a      	uxth	r2, r3
 800783c:	4b73      	ldr	r3, [pc, #460]	; (8007a0c <fw_nav+0x918>)
 800783e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007842:	b29b      	uxth	r3, r3
 8007844:	4413      	add	r3, r2
 8007846:	b29b      	uxth	r3, r3
 8007848:	b21a      	sxth	r2, r3
 800784a:	4b76      	ldr	r3, [pc, #472]	; (8007a24 <fw_nav+0x930>)
 800784c:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = constrain(navDiff / 10, -cfg.fw_gps_rudder * 10, cfg.fw_gps_rudder * 10) + NAV_deltaSum;
 800784e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007852:	4a71      	ldr	r2, [pc, #452]	; (8007a18 <fw_nav+0x924>)
 8007854:	fb82 1203 	smull	r1, r2, r2, r3
 8007858:	1092      	asrs	r2, r2, #2
 800785a:	17db      	asrs	r3, r3, #31
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	b21b      	sxth	r3, r3
 8007860:	4618      	mov	r0, r3
 8007862:	4b6e      	ldr	r3, [pc, #440]	; (8007a1c <fw_nav+0x928>)
 8007864:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8007868:	461a      	mov	r2, r3
 800786a:	f06f 0309 	mvn.w	r3, #9
 800786e:	fb03 f102 	mul.w	r1, r3, r2
 8007872:	4b6a      	ldr	r3, [pc, #424]	; (8007a1c <fw_nav+0x928>)
 8007874:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8007878:	461a      	mov	r2, r3
 800787a:	4613      	mov	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	005b      	lsls	r3, r3, #1
 8007882:	461a      	mov	r2, r3
 8007884:	f7fc f984 	bl	8003b90 <constrain>
 8007888:	4603      	mov	r3, r0
 800788a:	b29a      	uxth	r2, r3
 800788c:	4b5f      	ldr	r3, [pc, #380]	; (8007a0c <fw_nav+0x918>)
 800788e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007892:	b29b      	uxth	r3, r3
 8007894:	4413      	add	r3, r2
 8007896:	b29b      	uxth	r3, r3
 8007898:	b21a      	sxth	r2, r3
 800789a:	4b62      	ldr	r3, [pc, #392]	; (8007a24 <fw_nav+0x930>)
 800789c:	809a      	strh	r2, [r3, #4]

        // Elevator compensation depending on behaviour.
        // Prevent stall with Disarmed motor
        if (f.MOTORS_STOPPED)
 800789e:	4b62      	ldr	r3, [pc, #392]	; (8007a28 <fw_nav+0x934>)
 80078a0:	7c5b      	ldrb	r3, [r3, #17]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d016      	beq.n	80078d4 <fw_nav+0x7e0>
            GPS_angle[PITCH] = constrain(GPS_angle[PITCH], -cfg.fw_glide_angle, cfg.fw_gps_maxdive * 10);
 80078a6:	4b5f      	ldr	r3, [pc, #380]	; (8007a24 <fw_nav+0x930>)
 80078a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80078ac:	4618      	mov	r0, r3
 80078ae:	4b5b      	ldr	r3, [pc, #364]	; (8007a1c <fw_nav+0x928>)
 80078b0:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80078b4:	4259      	negs	r1, r3
 80078b6:	4b59      	ldr	r3, [pc, #356]	; (8007a1c <fw_nav+0x928>)
 80078b8:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 80078bc:	461a      	mov	r2, r3
 80078be:	4613      	mov	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	461a      	mov	r2, r3
 80078c8:	f7fc f962 	bl	8003b90 <constrain>
 80078cc:	4603      	mov	r3, r0
 80078ce:	b21a      	sxth	r2, r3
 80078d0:	4b54      	ldr	r3, [pc, #336]	; (8007a24 <fw_nav+0x930>)
 80078d2:	805a      	strh	r2, [r3, #2]

        // Add elevator compared with rollAngle
        if (!f.CLIMBOUT_FW)
 80078d4:	4b54      	ldr	r3, [pc, #336]	; (8007a28 <fw_nav+0x934>)
 80078d6:	7cdb      	ldrb	r3, [r3, #19]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d11b      	bne.n	8007914 <fw_nav+0x820>
            GPS_angle[PITCH] -= (abs(angle[ROLL]) * (cfg.fw_roll_comp / 100));
 80078dc:	4b51      	ldr	r3, [pc, #324]	; (8007a24 <fw_nav+0x930>)
 80078de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	4b51      	ldr	r3, [pc, #324]	; (8007a2c <fw_nav+0x938>)
 80078e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bfb8      	it	lt
 80078ee:	425b      	neglt	r3, r3
 80078f0:	b299      	uxth	r1, r3
 80078f2:	4b4a      	ldr	r3, [pc, #296]	; (8007a1c <fw_nav+0x928>)
 80078f4:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80078f8:	484d      	ldr	r0, [pc, #308]	; (8007a30 <fw_nav+0x93c>)
 80078fa:	fba0 0303 	umull	r0, r3, r0, r3
 80078fe:	095b      	lsrs	r3, r3, #5
 8007900:	b2db      	uxtb	r3, r3
 8007902:	b29b      	uxth	r3, r3
 8007904:	fb11 f303 	smulbb	r3, r1, r3
 8007908:	b29b      	uxth	r3, r3
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	b29b      	uxth	r3, r3
 800790e:	b21a      	sxth	r2, r3
 8007910:	4b44      	ldr	r3, [pc, #272]	; (8007a24 <fw_nav+0x930>)
 8007912:	805a      	strh	r2, [r3, #2]

        // Throttle compensation depending on behaviour.
        // Compensate throttle with pitch Angle
        NAV_Thro -= constrain(angle[PITCH] * PITCH_COMP, 0, 450);
 8007914:	4b45      	ldr	r3, [pc, #276]	; (8007a2c <fw_nav+0x938>)
 8007916:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800791a:	ee07 3a90 	vmov	s15, r3
 800791e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007922:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800792a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800792e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8007932:	2100      	movs	r1, #0
 8007934:	ee17 0a90 	vmov	r0, s15
 8007938:	f7fc f92a 	bl	8003b90 <constrain>
 800793c:	4601      	mov	r1, r0
 800793e:	4b3d      	ldr	r3, [pc, #244]	; (8007a34 <fw_nav+0x940>)
 8007940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007944:	b29a      	uxth	r2, r3
 8007946:	b28b      	uxth	r3, r1
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	b29b      	uxth	r3, r3
 800794c:	b21a      	sxth	r2, r3
 800794e:	4b39      	ldr	r3, [pc, #228]	; (8007a34 <fw_nav+0x940>)
 8007950:	801a      	strh	r2, [r3, #0]

        // Force the Plane move forward in headwind with speedBoost
        groundSpeed = GPS_speed;
 8007952:	4b39      	ldr	r3, [pc, #228]	; (8007a38 <fw_nav+0x944>)
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	81fb      	strh	r3, [r7, #14]
        spDiff = (GPS_MINSPEED - groundSpeed) * I_TERM;
 8007958:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800795c:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8007960:	ee07 3a90 	vmov	s15, r3
 8007964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007968:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007a3c <fw_nav+0x948>
 800796c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007974:	ee17 3a90 	vmov	r3, s15
 8007978:	60bb      	str	r3, [r7, #8]

        if (GPS_speed < GPS_MINSPEED - 50 || GPS_speed > GPS_MINSPEED + 50)
 800797a:	4b2f      	ldr	r3, [pc, #188]	; (8007a38 <fw_nav+0x944>)
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8007982:	d305      	bcc.n	8007990 <fw_nav+0x89c>
 8007984:	4b2c      	ldr	r3, [pc, #176]	; (8007a38 <fw_nav+0x944>)
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	f240 2226 	movw	r2, #550	; 0x226
 800798c:	4293      	cmp	r3, r2
 800798e:	d90a      	bls.n	80079a6 <fw_nav+0x8b2>
            speedBoost += spDiff;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	b29a      	uxth	r2, r3
 8007994:	4b2a      	ldr	r3, [pc, #168]	; (8007a40 <fw_nav+0x94c>)
 8007996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800799a:	b29b      	uxth	r3, r3
 800799c:	4413      	add	r3, r2
 800799e:	b29b      	uxth	r3, r3
 80079a0:	b21a      	sxth	r2, r3
 80079a2:	4b27      	ldr	r3, [pc, #156]	; (8007a40 <fw_nav+0x94c>)
 80079a4:	801a      	strh	r2, [r3, #0]

        speedBoost = constrain(speedBoost, 0, 500);
 80079a6:	4b26      	ldr	r3, [pc, #152]	; (8007a40 <fw_nav+0x94c>)
 80079a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80079b0:	2100      	movs	r1, #0
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fc f8ec 	bl	8003b90 <constrain>
 80079b8:	4603      	mov	r3, r0
 80079ba:	b21a      	sxth	r2, r3
 80079bc:	4b20      	ldr	r3, [pc, #128]	; (8007a40 <fw_nav+0x94c>)
 80079be:	801a      	strh	r2, [r3, #0]
        NAV_Thro += speedBoost;
 80079c0:	4b1c      	ldr	r3, [pc, #112]	; (8007a34 <fw_nav+0x940>)
 80079c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	4b1d      	ldr	r3, [pc, #116]	; (8007a40 <fw_nav+0x94c>)
 80079ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	4413      	add	r3, r2
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	b21a      	sxth	r2, r3
 80079d6:	4b17      	ldr	r3, [pc, #92]	; (8007a34 <fw_nav+0x940>)
 80079d8:	801a      	strh	r2, [r3, #0]

        // constrain throttle to Max climb.
        NAV_Thro = constrain(NAV_Thro, cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 80079da:	4b16      	ldr	r3, [pc, #88]	; (8007a34 <fw_nav+0x940>)
 80079dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079e0:	4618      	mov	r0, r3
 80079e2:	4b0e      	ldr	r3, [pc, #56]	; (8007a1c <fw_nav+0x928>)
 80079e4:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80079e8:	4619      	mov	r1, r3
 80079ea:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <fw_nav+0x928>)
 80079ec:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 80079f0:	461a      	mov	r2, r3
 80079f2:	f7fc f8cd 	bl	8003b90 <constrain>
 80079f6:	4603      	mov	r3, r0
 80079f8:	b21a      	sxth	r2, r3
 80079fa:	4b0e      	ldr	r3, [pc, #56]	; (8007a34 <fw_nav+0x940>)
 80079fc:	801a      	strh	r2, [r3, #0]
    }
    // End of NavTimer

    // PassThru for throttle In AcroMode
    if ((!f.ANGLE_MODE && !f.HORIZON_MODE) || (f.PASSTHRU_MODE && !f.FW_FAILSAFE_RTH_ENABLE)) {
 80079fe:	4b0a      	ldr	r3, [pc, #40]	; (8007a28 <fw_nav+0x934>)
 8007a00:	78db      	ldrb	r3, [r3, #3]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d122      	bne.n	8007a4c <fw_nav+0x958>
 8007a06:	e01d      	b.n	8007a44 <fw_nav+0x950>
 8007a08:	20000e74 	.word	0x20000e74
 8007a0c:	20000e92 	.word	0x20000e92
 8007a10:	200011c8 	.word	0x200011c8
 8007a14:	20000e58 	.word	0x20000e58
 8007a18:	66666667 	.word	0x66666667
 8007a1c:	20000d18 	.word	0x20000d18
 8007a20:	20000e90 	.word	0x20000e90
 8007a24:	20001718 	.word	0x20001718
 8007a28:	20001628 	.word	0x20001628
 8007a2c:	20001430 	.word	0x20001430
 8007a30:	51eb851f 	.word	0x51eb851f
 8007a34:	20000e88 	.word	0x20000e88
 8007a38:	20001714 	.word	0x20001714
 8007a3c:	3dcccccd 	.word	0x3dcccccd
 8007a40:	20000e64 	.word	0x20000e64
 8007a44:	4b16      	ldr	r3, [pc, #88]	; (8007aa0 <fw_nav+0x9ac>)
 8007a46:	791b      	ldrb	r3, [r3, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d007      	beq.n	8007a5c <fw_nav+0x968>
 8007a4c:	4b14      	ldr	r3, [pc, #80]	; (8007aa0 <fw_nav+0x9ac>)
 8007a4e:	7a9b      	ldrb	r3, [r3, #10]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00f      	beq.n	8007a74 <fw_nav+0x980>
 8007a54:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <fw_nav+0x9ac>)
 8007a56:	7c9b      	ldrb	r3, [r3, #18]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10b      	bne.n	8007a74 <fw_nav+0x980>
        NAV_Thro = TX_Thro;
 8007a5c:	4a11      	ldr	r2, [pc, #68]	; (8007aa4 <fw_nav+0x9b0>)
 8007a5e:	8b7b      	ldrh	r3, [r7, #26]
 8007a60:	8013      	strh	r3, [r2, #0]
        GPS_angle[PITCH] = 0;
 8007a62:	4b11      	ldr	r3, [pc, #68]	; (8007aa8 <fw_nav+0x9b4>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = 0;
 8007a68:	4b0f      	ldr	r3, [pc, #60]	; (8007aa8 <fw_nav+0x9b4>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = 0;
 8007a6e:	4b0e      	ldr	r3, [pc, #56]	; (8007aa8 <fw_nav+0x9b4>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	809a      	strh	r2, [r3, #4]
    }
    rcCommand[THROTTLE] = NAV_Thro;
 8007a74:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <fw_nav+0x9b0>)
 8007a76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007a7a:	4b0c      	ldr	r3, [pc, #48]	; (8007aac <fw_nav+0x9b8>)
 8007a7c:	80da      	strh	r2, [r3, #6]
    rcCommand[YAW] += GPS_angle[YAW];
 8007a7e:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <fw_nav+0x9b8>)
 8007a80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	4b08      	ldr	r3, [pc, #32]	; (8007aa8 <fw_nav+0x9b4>)
 8007a88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	4413      	add	r3, r2
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	b21a      	sxth	r2, r3
 8007a94:	4b05      	ldr	r3, [pc, #20]	; (8007aac <fw_nav+0x9b8>)
 8007a96:	809a      	strh	r2, [r3, #4]
}
 8007a98:	bf00      	nop
 8007a9a:	3728      	adds	r7, #40	; 0x28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20001628 	.word	0x20001628
 8007aa4:	20000e88 	.word	0x20000e88
 8007aa8:	20001718 	.word	0x20001718
 8007aac:	20001684 	.word	0x20001684

08007ab0 <gpsSetState>:
static PifGpsNmea gps_nmea;
static PifGpsUblox gps_ublox;


static void gpsSetState(uint8_t state)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	71fb      	strb	r3, [r7, #7]
    gpsData.state = state;
 8007aba:	4a0b      	ldr	r2, [pc, #44]	; (8007ae8 <gpsSetState+0x38>)
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	7013      	strb	r3, [r2, #0]
    gpsData.state_position = 0;
 8007ac0:	4b09      	ldr	r3, [pc, #36]	; (8007ae8 <gpsSetState+0x38>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	611a      	str	r2, [r3, #16]
    gpsData.state_ts = pif_cumulative_timer1ms;
 8007ac6:	4b09      	ldr	r3, [pc, #36]	; (8007aec <gpsSetState+0x3c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a07      	ldr	r2, [pc, #28]	; (8007ae8 <gpsSetState+0x38>)
 8007acc:	6153      	str	r3, [r2, #20]
    gpsData.step = 0;
 8007ace:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <gpsSetState+0x38>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	60da      	str	r2, [r3, #12]
    gpsData.receive = FALSE;
 8007ad4:	4b04      	ldr	r3, [pc, #16]	; (8007ae8 <gpsSetState+0x38>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	761a      	strb	r2, [r3, #24]
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	20000e94 	.word	0x20000e94
 8007aec:	20001f08 	.word	0x20001f08

08007af0 <_evtGpsUbloxCfgResult>:

static void _evtGpsUbloxCfgResult(PifGpsUblox* p_owner, BOOL result)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
	(void)p_owner;

	gpsData.cfg_result = result ? GUCR_ACK : GUCR_NAK;
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <_evtGpsUbloxCfgResult+0x16>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e000      	b.n	8007b08 <_evtGpsUbloxCfgResult+0x18>
 8007b06:	2302      	movs	r3, #2
 8007b08:	4a03      	ldr	r2, [pc, #12]	; (8007b18 <_evtGpsUbloxCfgResult+0x28>)
 8007b0a:	61d3      	str	r3, [r2, #28]
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	20000e94 	.word	0x20000e94
 8007b1c:	00000000 	.word	0x00000000

08007b20 <_evtGpsReceive>:

static void _evtGpsReceive(PifGps *p_owner)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
    f.GPS_FIX = p_owner->_fix;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b2e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	4b5c      	ldr	r3, [pc, #368]	; (8007ca8 <_evtGpsReceive+0x188>)
 8007b38:	72da      	strb	r2, [r3, #11]
    if (f.GPS_FIX) {
 8007b3a:	4b5b      	ldr	r3, [pc, #364]	; (8007ca8 <_evtGpsReceive+0x188>)
 8007b3c:	7adb      	ldrb	r3, [r3, #11]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d049      	beq.n	8007bd6 <_evtGpsReceive+0xb6>
        GPS_coord[LAT] = p_owner->_coord_deg[PIF_GPS_LAT] * 10000000UL;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007b48:	a355      	add	r3, pc, #340	; (adr r3, 8007ca0 <_evtGpsReceive+0x180>)
 8007b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4e:	f7f8 fd11 	bl	8000574 <__aeabi_dmul>
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	4610      	mov	r0, r2
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f7f8 ffa5 	bl	8000aa8 <__aeabi_d2iz>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4a52      	ldr	r2, [pc, #328]	; (8007cac <_evtGpsReceive+0x18c>)
 8007b62:	6013      	str	r3, [r2, #0]
        GPS_coord[LON] = p_owner->_coord_deg[PIF_GPS_LON] * 10000000UL;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007b6a:	a34d      	add	r3, pc, #308	; (adr r3, 8007ca0 <_evtGpsReceive+0x180>)
 8007b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b70:	f7f8 fd00 	bl	8000574 <__aeabi_dmul>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	f7f8 ff94 	bl	8000aa8 <__aeabi_d2iz>
 8007b80:	4603      	mov	r3, r0
 8007b82:	4a4a      	ldr	r2, [pc, #296]	; (8007cac <_evtGpsReceive+0x18c>)
 8007b84:	6053      	str	r3, [r2, #4]
        GPS_numSat = p_owner->_num_sat;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007b8c:	4b48      	ldr	r3, [pc, #288]	; (8007cb0 <_evtGpsReceive+0x190>)
 8007b8e:	701a      	strb	r2, [r3, #0]
        GPS_altitude = p_owner->_altitude;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007b96:	4610      	mov	r0, r2
 8007b98:	4619      	mov	r1, r3
 8007b9a:	f7f8 ffad 	bl	8000af8 <__aeabi_d2uiz>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	4b44      	ldr	r3, [pc, #272]	; (8007cb4 <_evtGpsReceive+0x194>)
 8007ba4:	801a      	strh	r2, [r3, #0]
        if (!sensors(SENSOR_BARO) && f.FIXED_WING)
 8007ba6:	2004      	movs	r0, #4
 8007ba8:	f7ff f92a 	bl	8006e00 <sensors>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f083 0301 	eor.w	r3, r3, #1
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00e      	beq.n	8007bd6 <_evtGpsReceive+0xb6>
 8007bb8:	4b3b      	ldr	r3, [pc, #236]	; (8007ca8 <_evtGpsReceive+0x188>)
 8007bba:	7c1b      	ldrb	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <_evtGpsReceive+0xb6>
            EstAlt = (GPS_altitude - GPS_home[ALT]) * 100;    // Use values Based on GPS
 8007bc0:	4b3c      	ldr	r3, [pc, #240]	; (8007cb4 <_evtGpsReceive+0x194>)
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	4b3c      	ldr	r3, [pc, #240]	; (8007cb8 <_evtGpsReceive+0x198>)
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2264      	movs	r2, #100	; 0x64
 8007bce:	fb02 f303 	mul.w	r3, r2, r3
 8007bd2:	4a3a      	ldr	r2, [pc, #232]	; (8007cbc <_evtGpsReceive+0x19c>)
 8007bd4:	6013      	str	r3, [r2, #0]
    }

    GPS_speed = (uint16_t)(p_owner->_ground_speed / 10);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007bdc:	f04f 0200 	mov.w	r2, #0
 8007be0:	4b37      	ldr	r3, [pc, #220]	; (8007cc0 <_evtGpsReceive+0x1a0>)
 8007be2:	f7f8 fdf1 	bl	80007c8 <__aeabi_ddiv>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	4610      	mov	r0, r2
 8007bec:	4619      	mov	r1, r3
 8007bee:	f7f8 ff83 	bl	8000af8 <__aeabi_d2uiz>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	4b33      	ldr	r3, [pc, #204]	; (8007cc4 <_evtGpsReceive+0x1a4>)
 8007bf8:	801a      	strh	r2, [r3, #0]
    GPS_ground_course = (uint16_t)(p_owner->_ground_course * 10);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007c00:	f04f 0200 	mov.w	r2, #0
 8007c04:	4b2e      	ldr	r3, [pc, #184]	; (8007cc0 <_evtGpsReceive+0x1a0>)
 8007c06:	f7f8 fcb5 	bl	8000574 <__aeabi_dmul>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4610      	mov	r0, r2
 8007c10:	4619      	mov	r1, r3
 8007c12:	f7f8 ff71 	bl	8000af8 <__aeabi_d2uiz>
 8007c16:	4603      	mov	r3, r0
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	4b2b      	ldr	r3, [pc, #172]	; (8007cc8 <_evtGpsReceive+0x1a8>)
 8007c1c:	801a      	strh	r2, [r3, #0]
    if (!sensors(SENSOR_MAG) && GPS_speed > 100) {
 8007c1e:	2008      	movs	r0, #8
 8007c20:	f7ff f8ee 	bl	8006e00 <sensors>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f083 0301 	eor.w	r3, r3, #1
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d021      	beq.n	8007c74 <_evtGpsReceive+0x154>
 8007c30:	4b24      	ldr	r3, [pc, #144]	; (8007cc4 <_evtGpsReceive+0x1a4>)
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	2b64      	cmp	r3, #100	; 0x64
 8007c36:	d91d      	bls.n	8007c74 <_evtGpsReceive+0x154>
        GPS_ground_course = wrap_18000(GPS_ground_course * 10) / 10;
 8007c38:	4b23      	ldr	r3, [pc, #140]	; (8007cc8 <_evtGpsReceive+0x1a8>)
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	4618      	mov	r0, r3
 8007c48:	f001 fce4 	bl	8009614 <wrap_18000>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	4a1f      	ldr	r2, [pc, #124]	; (8007ccc <_evtGpsReceive+0x1ac>)
 8007c50:	fb82 1203 	smull	r1, r2, r2, r3
 8007c54:	1092      	asrs	r2, r2, #2
 8007c56:	17db      	asrs	r3, r3, #31
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	4b1a      	ldr	r3, [pc, #104]	; (8007cc8 <_evtGpsReceive+0x1a8>)
 8007c5e:	801a      	strh	r2, [r3, #0]
        heading = GPS_ground_course / 10;    // Use values Based on GPS if we are moving.
 8007c60:	4b19      	ldr	r3, [pc, #100]	; (8007cc8 <_evtGpsReceive+0x1a8>)
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	4a1a      	ldr	r2, [pc, #104]	; (8007cd0 <_evtGpsReceive+0x1b0>)
 8007c66:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6a:	08db      	lsrs	r3, r3, #3
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	b21a      	sxth	r2, r3
 8007c70:	4b18      	ldr	r3, [pc, #96]	; (8007cd4 <_evtGpsReceive+0x1b4>)
 8007c72:	801a      	strh	r2, [r3, #0]
    }

    GPS_HorizontalAcc = p_owner->_horizontal_acc;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c78:	4a17      	ldr	r2, [pc, #92]	; (8007cd8 <_evtGpsReceive+0x1b8>)
 8007c7a:	6013      	str	r3, [r2, #0]
    GPS_VerticalAcc = p_owner->_vertical_acc;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c80:	4a16      	ldr	r2, [pc, #88]	; (8007cdc <_evtGpsReceive+0x1bc>)
 8007c82:	6013      	str	r3, [r2, #0]

    g_task_gps->immediate = TRUE;
 8007c84:	4b16      	ldr	r3, [pc, #88]	; (8007ce0 <_evtGpsReceive+0x1c0>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	705a      	strb	r2, [r3, #1]
    gpsData.receive = TRUE;
 8007c8c:	4b15      	ldr	r3, [pc, #84]	; (8007ce4 <_evtGpsReceive+0x1c4>)
 8007c8e:	2201      	movs	r2, #1
 8007c90:	761a      	strb	r2, [r3, #24]
}
 8007c92:	bf00      	nop
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	00000000 	.word	0x00000000
 8007ca4:	416312d0 	.word	0x416312d0
 8007ca8:	20001628 	.word	0x20001628
 8007cac:	200016ec 	.word	0x200016ec
 8007cb0:	2000170c 	.word	0x2000170c
 8007cb4:	20001712 	.word	0x20001712
 8007cb8:	200016f4 	.word	0x200016f4
 8007cbc:	200013f4 	.word	0x200013f4
 8007cc0:	40240000 	.word	0x40240000
 8007cc4:	20001714 	.word	0x20001714
 8007cc8:	2000171e 	.word	0x2000171e
 8007ccc:	66666667 	.word	0x66666667
 8007cd0:	cccccccd 	.word	0xcccccccd
 8007cd4:	200019ba 	.word	0x200019ba
 8007cd8:	200017bc 	.word	0x200017bc
 8007cdc:	200017c0 	.word	0x200017c0
 8007ce0:	2000182c 	.word	0x2000182c
 8007ce4:	20000e94 	.word	0x20000e94

08007ce8 <_evtGpsTimeout>:

static void _evtGpsTimeout(PifGps *p_owner)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
    (void)p_owner;

    // remove GPS from capability
    if (mcfg.gps_type != GPS_NMEA || gpsInitData[gpsData.baudrateIndex].baudrate != 9600) {
 8007cf0:	4b10      	ldr	r3, [pc, #64]	; (8007d34 <_evtGpsTimeout+0x4c>)
 8007cf2:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d108      	bne.n	8007d0c <_evtGpsTimeout+0x24>
 8007cfa:	4b0f      	ldr	r3, [pc, #60]	; (8007d38 <_evtGpsTimeout+0x50>)
 8007cfc:	785b      	ldrb	r3, [r3, #1]
 8007cfe:	4a0f      	ldr	r2, [pc, #60]	; (8007d3c <_evtGpsTimeout+0x54>)
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	4413      	add	r3, r2
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007d0a:	d005      	beq.n	8007d18 <_evtGpsTimeout+0x30>
        serialStopReceiveFunc(&core.gpsport->comm);
 8007d0c:	4b0c      	ldr	r3, [pc, #48]	; (8007d40 <_evtGpsTimeout+0x58>)
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	3304      	adds	r3, #4
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fa fc6e 	bl	80025f4 <serialStopReceiveFunc>
    }
    sensorsClear(SENSOR_GPS);
 8007d18:	2020      	movs	r0, #32
 8007d1a:	f7ff f899 	bl	8006e50 <sensorsClear>
    gpsSetState(GPS_LOSTCOMMS);
 8007d1e:	2006      	movs	r0, #6
 8007d20:	f7ff fec6 	bl	8007ab0 <gpsSetState>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_INFO, "GPS: Timeout");
 8007d24:	4907      	ldr	r1, [pc, #28]	; (8007d44 <_evtGpsTimeout+0x5c>)
 8007d26:	2002      	movs	r0, #2
 8007d28:	f00b fcfc 	bl	8013724 <pifLog_Print>
#endif
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	200007ac 	.word	0x200007ac
 8007d38:	20000e94 	.word	0x20000e94
 8007d3c:	08028c80 	.word	0x08028c80
 8007d40:	200006f4 	.word	0x200006f4
 8007d44:	08027738 	.word	0x08027738

08007d48 <gpsInit>:

void gpsInit(uint8_t port, uint8_t baudrateIndex)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	4603      	mov	r3, r0
 8007d50:	460a      	mov	r2, r1
 8007d52:	71fb      	strb	r3, [r7, #7]
 8007d54:	4613      	mov	r3, r2
 8007d56:	71bb      	strb	r3, [r7, #6]
    // init gpsData structure. if we're not actually enabled, don't bother doing anything else
    gpsSetState(GPS_UNKNOWN);
 8007d58:	2000      	movs	r0, #0
 8007d5a:	f7ff fea9 	bl	8007ab0 <gpsSetState>

    gpsData.baudrateIndex = baudrateIndex;
 8007d5e:	4a32      	ldr	r2, [pc, #200]	; (8007e28 <gpsInit+0xe0>)
 8007d60:	79bb      	ldrb	r3, [r7, #6]
 8007d62:	7053      	strb	r3, [r2, #1]
    gpsData.lastMessage = pif_cumulative_timer1ms;
 8007d64:	4b31      	ldr	r3, [pc, #196]	; (8007e2c <gpsInit+0xe4>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a2f      	ldr	r2, [pc, #188]	; (8007e28 <gpsInit+0xe0>)
 8007d6a:	6093      	str	r3, [r2, #8]
    gpsData.errors = 0;
 8007d6c:	4b2e      	ldr	r3, [pc, #184]	; (8007e28 <gpsInit+0xe0>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	605a      	str	r2, [r3, #4]

    gpsSetPIDs();
 8007d72:	f000 ff0f 	bl	8008b94 <gpsSetPIDs>
    // Open GPS UART, no callback - buffer will be read out in gpsThread()
    core.gpsport = uartOpen(port, 9600, MODE_RXTX);    // signal GPS "thread" to initialize when it gets to it
 8007d76:	79fb      	ldrb	r3, [r7, #7]
 8007d78:	2203      	movs	r2, #3
 8007d7a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fa fafe 	bl	8002380 <uartOpen>
 8007d84:	4603      	mov	r3, r0
 8007d86:	4a2a      	ldr	r2, [pc, #168]	; (8007e30 <gpsInit+0xe8>)
 8007d88:	6093      	str	r3, [r2, #8]
    if (mcfg.gps_type == GPS_NMEA && gpsInitData[baudrateIndex].baudrate == 9600) {
 8007d8a:	4b2a      	ldr	r3, [pc, #168]	; (8007e34 <gpsInit+0xec>)
 8007d8c:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d125      	bne.n	8007de0 <gpsInit+0x98>
 8007d94:	79bb      	ldrb	r3, [r7, #6]
 8007d96:	4a28      	ldr	r2, [pc, #160]	; (8007e38 <gpsInit+0xf0>)
 8007d98:	00db      	lsls	r3, r3, #3
 8007d9a:	4413      	add	r3, r2
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007da2:	d11d      	bne.n	8007de0 <gpsInit+0x98>
    	serialStartReceiveFunc(&core.gpsport->comm);
 8007da4:	4b22      	ldr	r3, [pc, #136]	; (8007e30 <gpsInit+0xe8>)
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	3304      	adds	r3, #4
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fa fbfe 	bl	80025ac <serialStartReceiveFunc>

        if (!pifGpsNmea_Init(&gps_nmea, PIF_ID_AUTO)) return;
 8007db0:	2100      	movs	r1, #0
 8007db2:	4822      	ldr	r0, [pc, #136]	; (8007e3c <gpsInit+0xf4>)
 8007db4:	f00e fbc2 	bl	801653c <pifGpsNmea_Init>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d02e      	beq.n	8007e1c <gpsInit+0xd4>
        gps_nmea._gps.evt_nmea_msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8007dbe:	4b1f      	ldr	r3, [pc, #124]	; (8007e3c <gpsInit+0xf4>)
 8007dc0:	2203      	movs	r2, #3
 8007dc2:	701a      	strb	r2, [r3, #0]
        pifGpsNmea_AttachComm(&gps_nmea, &core.gpsport->comm);
 8007dc4:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <gpsInit+0xe8>)
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	3304      	adds	r3, #4
 8007dca:	4619      	mov	r1, r3
 8007dcc:	481b      	ldr	r0, [pc, #108]	; (8007e3c <gpsInit+0xf4>)
 8007dce:	f00e fbeb 	bl	80165a8 <pifGpsNmea_AttachComm>
        gps_nmea._gps.evt_receive = _evtGpsReceive;
 8007dd2:	4b1a      	ldr	r3, [pc, #104]	; (8007e3c <gpsInit+0xf4>)
 8007dd4:	4a1a      	ldr	r2, [pc, #104]	; (8007e40 <gpsInit+0xf8>)
 8007dd6:	605a      	str	r2, [r3, #4]

		// signal GPS "thread" to initialize when it gets to it
		gpsSetState(GPS_CONFIGURATION);
 8007dd8:	2004      	movs	r0, #4
 8007dda:	f7ff fe69 	bl	8007ab0 <gpsSetState>
 8007dde:	e013      	b.n	8007e08 <gpsInit+0xc0>
    }
    else {
        if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) return;
 8007de0:	2100      	movs	r1, #0
 8007de2:	4818      	ldr	r0, [pc, #96]	; (8007e44 <gpsInit+0xfc>)
 8007de4:	f00f f9c4 	bl	8017170 <pifGpsUblox_Init>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d018      	beq.n	8007e20 <gpsInit+0xd8>
        pifGpsUblox_AttachComm(&gps_ublox, &core.gpsport->comm);
 8007dee:	4b10      	ldr	r3, [pc, #64]	; (8007e30 <gpsInit+0xe8>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	3304      	adds	r3, #4
 8007df4:	4619      	mov	r1, r3
 8007df6:	4813      	ldr	r0, [pc, #76]	; (8007e44 <gpsInit+0xfc>)
 8007df8:	f00f fa14 	bl	8017224 <pifGpsUblox_AttachComm>
        gps_ublox._gps.evt_receive = _evtGpsReceive;
 8007dfc:	4b11      	ldr	r3, [pc, #68]	; (8007e44 <gpsInit+0xfc>)
 8007dfe:	4a10      	ldr	r2, [pc, #64]	; (8007e40 <gpsInit+0xf8>)
 8007e00:	615a      	str	r2, [r3, #20]

		// signal GPS "thread" to initialize when it gets to it
		gpsSetState(GPS_INITIALIZING);
 8007e02:	2001      	movs	r0, #1
 8007e04:	f7ff fe54 	bl	8007ab0 <gpsSetState>
    }

    // copy ubx sbas config string to use
    if (mcfg.gps_ubx_sbas >= SBAS_LAST)
 8007e08:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <gpsInit+0xec>)
 8007e0a:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	dd07      	ble.n	8007e22 <gpsInit+0xda>
        mcfg.gps_ubx_sbas = SBAS_AUTO;
 8007e12:	4b08      	ldr	r3, [pc, #32]	; (8007e34 <gpsInit+0xec>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
 8007e1a:	e002      	b.n	8007e22 <gpsInit+0xda>
        if (!pifGpsNmea_Init(&gps_nmea, PIF_ID_AUTO)) return;
 8007e1c:	bf00      	nop
 8007e1e:	e000      	b.n	8007e22 <gpsInit+0xda>
        if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) return;
 8007e20:	bf00      	nop
}
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20000e94 	.word	0x20000e94
 8007e2c:	20001f08 	.word	0x20001f08
 8007e30:	200006f4 	.word	0x200006f4
 8007e34:	200007ac 	.word	0x200007ac
 8007e38:	08028c80 	.word	0x08028c80
 8007e3c:	20000eb8 	.word	0x20000eb8
 8007e40:	08007b21 	.word	0x08007b21
 8007e44:	20000f28 	.word	0x20000f28

08007e48 <gpsInitNmea>:

static void gpsInitNmea(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
    if (gpsInitData[gpsData.baudrateIndex].baudrate == 9600) {
 8007e4c:	4b0f      	ldr	r3, [pc, #60]	; (8007e8c <gpsInitNmea+0x44>)
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	4a0f      	ldr	r2, [pc, #60]	; (8007e90 <gpsInitNmea+0x48>)
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	4413      	add	r3, r2
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007e5c:	d107      	bne.n	8007e6e <gpsInitNmea+0x26>
        pifGps_SetTimeout(&gps_nmea._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8007e5e:	4b0d      	ldr	r3, [pc, #52]	; (8007e94 <gpsInitNmea+0x4c>)
 8007e60:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007e64:	490c      	ldr	r1, [pc, #48]	; (8007e98 <gpsInitNmea+0x50>)
 8007e66:	480d      	ldr	r0, [pc, #52]	; (8007e9c <gpsInitNmea+0x54>)
 8007e68:	f00d fe18 	bl	8015a9c <pifGps_SetTimeout>
 8007e6c:	e009      	b.n	8007e82 <gpsInitNmea+0x3a>
    }
    else {
        gps_ublox._gps.evt_nmea_msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8007e6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ea0 <gpsInitNmea+0x58>)
 8007e70:	2203      	movs	r2, #3
 8007e72:	741a      	strb	r2, [r3, #16]
        pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8007e74:	4b07      	ldr	r3, [pc, #28]	; (8007e94 <gpsInitNmea+0x4c>)
 8007e76:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007e7a:	4907      	ldr	r1, [pc, #28]	; (8007e98 <gpsInitNmea+0x50>)
 8007e7c:	4809      	ldr	r0, [pc, #36]	; (8007ea4 <gpsInitNmea+0x5c>)
 8007e7e:	f00d fe0d 	bl	8015a9c <pifGps_SetTimeout>
    }
    gpsSetState(GPS_RECEIVINGDATA);
 8007e82:	2005      	movs	r0, #5
 8007e84:	f7ff fe14 	bl	8007ab0 <gpsSetState>
}
 8007e88:	bf00      	nop
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	20000e94 	.word	0x20000e94
 8007e90:	08028c80 	.word	0x08028c80
 8007e94:	08007ce9 	.word	0x08007ce9
 8007e98:	20001800 	.word	0x20001800
 8007e9c:	20000eb8 	.word	0x20000eb8
 8007ea0:	20000f28 	.word	0x20000f28
 8007ea4:	20000f38 	.word	0x20000f38

08007ea8 <gpsInitUblox>:

static void gpsInitUblox(void)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af02      	add	r7, sp, #8
	static uint8_t cfg_msg_size = 0;
    uint8_t i;
    int line = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	607b      	str	r3, [r7, #4]

	// GPS_CONFIGURATION, push some ublox config strings
	if (gpsData.step >= 20) {
 8007eb2:	4b8c      	ldr	r3, [pc, #560]	; (80080e4 <gpsInitUblox+0x23c>)
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	2b13      	cmp	r3, #19
 8007eb8:	dd30      	ble.n	8007f1c <gpsInitUblox+0x74>
		if (gpsData.cfg_result == GUCR_ACK) {
 8007eba:	4b8a      	ldr	r3, [pc, #552]	; (80080e4 <gpsInitUblox+0x23c>)
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d112      	bne.n	8007ee8 <gpsInitUblox+0x40>
	  		gpsData.step = (gpsData.step - 20) + 1;
 8007ec2:	4b88      	ldr	r3, [pc, #544]	; (80080e4 <gpsInitUblox+0x23c>)
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	3b13      	subs	r3, #19
 8007ec8:	4a86      	ldr	r2, [pc, #536]	; (80080e4 <gpsInitUblox+0x23c>)
 8007eca:	60d3      	str	r3, [r2, #12]
			if (gpsData.step == cfg_msg_size) gpsData.step = 15;
 8007ecc:	4b85      	ldr	r3, [pc, #532]	; (80080e4 <gpsInitUblox+0x23c>)
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	4a85      	ldr	r2, [pc, #532]	; (80080e8 <gpsInitUblox+0x240>)
 8007ed2:	7812      	ldrb	r2, [r2, #0]
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d102      	bne.n	8007ede <gpsInitUblox+0x36>
 8007ed8:	4b82      	ldr	r3, [pc, #520]	; (80080e4 <gpsInitUblox+0x23c>)
 8007eda:	220f      	movs	r2, #15
 8007edc:	60da      	str	r2, [r3, #12]
			gpsData.state_ts = pif_cumulative_timer1ms;
 8007ede:	4b83      	ldr	r3, [pc, #524]	; (80080ec <gpsInitUblox+0x244>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a80      	ldr	r2, [pc, #512]	; (80080e4 <gpsInitUblox+0x23c>)
 8007ee4:	6153      	str	r3, [r2, #20]
 8007ee6:	e121      	b.n	800812c <gpsInitUblox+0x284>
		}
		else if (gpsData.cfg_result == GUCR_NAK) {
 8007ee8:	4b7e      	ldr	r3, [pc, #504]	; (80080e4 <gpsInitUblox+0x23c>)
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d106      	bne.n	8007efe <gpsInitUblox+0x56>
			pif_error = E_RECEIVE_NACK;
 8007ef0:	4b7f      	ldr	r3, [pc, #508]	; (80080f0 <gpsInitUblox+0x248>)
 8007ef2:	2210      	movs	r2, #16
 8007ef4:	701a      	strb	r2, [r3, #0]
			line = __LINE__;
 8007ef6:	f240 1303 	movw	r3, #259	; 0x103
 8007efa:	607b      	str	r3, [r7, #4]
 8007efc:	e116      	b.n	800812c <gpsInitUblox+0x284>
		}
		else {
			if (pif_cumulative_timer1ms - gpsData.state_ts >= 200) {
 8007efe:	4b7b      	ldr	r3, [pc, #492]	; (80080ec <gpsInitUblox+0x244>)
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b78      	ldr	r3, [pc, #480]	; (80080e4 <gpsInitUblox+0x23c>)
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	2bc7      	cmp	r3, #199	; 0xc7
 8007f0a:	f240 810f 	bls.w	800812c <gpsInitUblox+0x284>
				pif_error = E_TIMEOUT;
 8007f0e:	4b78      	ldr	r3, [pc, #480]	; (80080f0 <gpsInitUblox+0x248>)
 8007f10:	2207      	movs	r2, #7
 8007f12:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8007f14:	f44f 7384 	mov.w	r3, #264	; 0x108
 8007f18:	607b      	str	r3, [r7, #4]
 8007f1a:	e107      	b.n	800812c <gpsInitUblox+0x284>
			}
		}
	}
	else {
		if (cfg_msg_size == 0) {
 8007f1c:	4b72      	ldr	r3, [pc, #456]	; (80080e8 <gpsInitUblox+0x240>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d109      	bne.n	8007f38 <gpsInitUblox+0x90>
			cfg_msg_size = sizeof(kCfgMsg) / sizeof(kCfgMsg[0]);
 8007f24:	4b70      	ldr	r3, [pc, #448]	; (80080e8 <gpsInitUblox+0x240>)
 8007f26:	220a      	movs	r2, #10
 8007f28:	701a      	strb	r2, [r3, #0]
			gps_ublox.evt_ubx_cfg_result = _evtGpsUbloxCfgResult;
 8007f2a:	4b72      	ldr	r3, [pc, #456]	; (80080f4 <gpsInitUblox+0x24c>)
 8007f2c:	4a72      	ldr	r2, [pc, #456]	; (80080f8 <gpsInitUblox+0x250>)
 8007f2e:	601a      	str	r2, [r3, #0]
			gpsData.state_ts = pif_cumulative_timer1ms;
 8007f30:	4b6e      	ldr	r3, [pc, #440]	; (80080ec <gpsInitUblox+0x244>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a6b      	ldr	r2, [pc, #428]	; (80080e4 <gpsInitUblox+0x23c>)
 8007f36:	6153      	str	r3, [r2, #20]
		}
		if (pif_cumulative_timer1ms - gpsData.state_ts < 5) return;
 8007f38:	4b6c      	ldr	r3, [pc, #432]	; (80080ec <gpsInitUblox+0x244>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	4b69      	ldr	r3, [pc, #420]	; (80080e4 <gpsInitUblox+0x23c>)
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	f240 8108 	bls.w	8008158 <gpsInitUblox+0x2b0>
		if (gpsData.step < cfg_msg_size) {
 8007f48:	4b66      	ldr	r3, [pc, #408]	; (80080e4 <gpsInitUblox+0x23c>)
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	4a66      	ldr	r2, [pc, #408]	; (80080e8 <gpsInitUblox+0x240>)
 8007f4e:	7812      	ldrb	r2, [r2, #0]
 8007f50:	4293      	cmp	r3, r2
 8007f52:	da26      	bge.n	8007fa2 <gpsInitUblox+0xfa>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_MSG, sizeof(kCfgMsg[gpsData.step]), (uint8_t*)kCfgMsg[gpsData.step], FALSE)) {
 8007f54:	4b63      	ldr	r3, [pc, #396]	; (80080e4 <gpsInitUblox+0x23c>)
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	4413      	add	r3, r2
 8007f5e:	4a67      	ldr	r2, [pc, #412]	; (80080fc <gpsInitUblox+0x254>)
 8007f60:	4413      	add	r3, r2
 8007f62:	2200      	movs	r2, #0
 8007f64:	9201      	str	r2, [sp, #4]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	2303      	movs	r3, #3
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	2106      	movs	r1, #6
 8007f6e:	4861      	ldr	r0, [pc, #388]	; (80080f4 <gpsInitUblox+0x24c>)
 8007f70:	f00f f9a6 	bl	80172c0 <pifGpsUblox_SendUbxMsg>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00c      	beq.n	8007f94 <gpsInitUblox+0xec>
                gpsData.cfg_result = GUCR_NONE;
 8007f7a:	4b5a      	ldr	r3, [pc, #360]	; (80080e4 <gpsInitUblox+0x23c>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 8007f80:	4b58      	ldr	r3, [pc, #352]	; (80080e4 <gpsInitUblox+0x23c>)
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	3314      	adds	r3, #20
 8007f86:	4a57      	ldr	r2, [pc, #348]	; (80080e4 <gpsInitUblox+0x23c>)
 8007f88:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8007f8a:	4b58      	ldr	r3, [pc, #352]	; (80080ec <gpsInitUblox+0x244>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a55      	ldr	r2, [pc, #340]	; (80080e4 <gpsInitUblox+0x23c>)
 8007f90:	6153      	str	r3, [r2, #20]
 8007f92:	e0cb      	b.n	800812c <gpsInitUblox+0x284>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8007f94:	4b56      	ldr	r3, [pc, #344]	; (80080f0 <gpsInitUblox+0x248>)
 8007f96:	220a      	movs	r2, #10
 8007f98:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8007f9a:	f240 131b 	movw	r3, #283	; 0x11b
 8007f9e:	607b      	str	r3, [r7, #4]
 8007fa0:	e0c4      	b.n	800812c <gpsInitUblox+0x284>
			}
		}
		else if (gpsData.step == 15) {
 8007fa2:	4b50      	ldr	r3, [pc, #320]	; (80080e4 <gpsInitUblox+0x23c>)
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	2b0f      	cmp	r3, #15
 8007fa8:	d120      	bne.n	8007fec <gpsInitUblox+0x144>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_RATE, sizeof(kCfgRate), (uint8_t*)kCfgRate, FALSE)) {
 8007faa:	2300      	movs	r3, #0
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	4b54      	ldr	r3, [pc, #336]	; (8008100 <gpsInitUblox+0x258>)
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	2306      	movs	r3, #6
 8007fb4:	2208      	movs	r2, #8
 8007fb6:	2106      	movs	r1, #6
 8007fb8:	484e      	ldr	r0, [pc, #312]	; (80080f4 <gpsInitUblox+0x24c>)
 8007fba:	f00f f981 	bl	80172c0 <pifGpsUblox_SendUbxMsg>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00c      	beq.n	8007fde <gpsInitUblox+0x136>
                gpsData.cfg_result = GUCR_NONE;
 8007fc4:	4b47      	ldr	r3, [pc, #284]	; (80080e4 <gpsInitUblox+0x23c>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 8007fca:	4b46      	ldr	r3, [pc, #280]	; (80080e4 <gpsInitUblox+0x23c>)
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	3314      	adds	r3, #20
 8007fd0:	4a44      	ldr	r2, [pc, #272]	; (80080e4 <gpsInitUblox+0x23c>)
 8007fd2:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8007fd4:	4b45      	ldr	r3, [pc, #276]	; (80080ec <gpsInitUblox+0x244>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a42      	ldr	r2, [pc, #264]	; (80080e4 <gpsInitUblox+0x23c>)
 8007fda:	6153      	str	r3, [r2, #20]
 8007fdc:	e0a6      	b.n	800812c <gpsInitUblox+0x284>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8007fde:	4b44      	ldr	r3, [pc, #272]	; (80080f0 <gpsInitUblox+0x248>)
 8007fe0:	220a      	movs	r2, #10
 8007fe2:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8007fe4:	f44f 7393 	mov.w	r3, #294	; 0x126
 8007fe8:	607b      	str	r3, [r7, #4]
 8007fea:	e09f      	b.n	800812c <gpsInitUblox+0x284>
			}
		}
		else if (gpsData.step == 16) {
 8007fec:	4b3d      	ldr	r3, [pc, #244]	; (80080e4 <gpsInitUblox+0x23c>)
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	2b10      	cmp	r3, #16
 8007ff2:	d120      	bne.n	8008036 <gpsInitUblox+0x18e>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_NAV5, sizeof(kCfgNav5), (uint8_t*)kCfgNav5, FALSE)) {
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	4b42      	ldr	r3, [pc, #264]	; (8008104 <gpsInitUblox+0x25c>)
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	2324      	movs	r3, #36	; 0x24
 8007ffe:	2224      	movs	r2, #36	; 0x24
 8008000:	2106      	movs	r1, #6
 8008002:	483c      	ldr	r0, [pc, #240]	; (80080f4 <gpsInitUblox+0x24c>)
 8008004:	f00f f95c 	bl	80172c0 <pifGpsUblox_SendUbxMsg>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00c      	beq.n	8008028 <gpsInitUblox+0x180>
                gpsData.cfg_result = GUCR_NONE;
 800800e:	4b35      	ldr	r3, [pc, #212]	; (80080e4 <gpsInitUblox+0x23c>)
 8008010:	2200      	movs	r2, #0
 8008012:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 8008014:	4b33      	ldr	r3, [pc, #204]	; (80080e4 <gpsInitUblox+0x23c>)
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	3314      	adds	r3, #20
 800801a:	4a32      	ldr	r2, [pc, #200]	; (80080e4 <gpsInitUblox+0x23c>)
 800801c:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 800801e:	4b33      	ldr	r3, [pc, #204]	; (80080ec <gpsInitUblox+0x244>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a30      	ldr	r2, [pc, #192]	; (80080e4 <gpsInitUblox+0x23c>)
 8008024:	6153      	str	r3, [r2, #20]
 8008026:	e081      	b.n	800812c <gpsInitUblox+0x284>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008028:	4b31      	ldr	r3, [pc, #196]	; (80080f0 <gpsInitUblox+0x248>)
 800802a:	220a      	movs	r2, #10
 800802c:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800802e:	f240 1331 	movw	r3, #305	; 0x131
 8008032:	607b      	str	r3, [r7, #4]
 8008034:	e07a      	b.n	800812c <gpsInitUblox+0x284>
			}
		}
		else if (gpsData.step == 17) {
 8008036:	4b2b      	ldr	r3, [pc, #172]	; (80080e4 <gpsInitUblox+0x23c>)
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	2b11      	cmp	r3, #17
 800803c:	d12f      	bne.n	800809e <gpsInitUblox+0x1f6>
			i = mcfg.gps_ubx_sbas > SBAS_DISABLED ? mcfg.gps_ubx_sbas : SBAS_LAST;
 800803e:	4b32      	ldr	r3, [pc, #200]	; (8008108 <gpsInitUblox+0x260>)
 8008040:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8008044:	2b00      	cmp	r3, #0
 8008046:	db04      	blt.n	8008052 <gpsInitUblox+0x1aa>
 8008048:	4b2f      	ldr	r3, [pc, #188]	; (8008108 <gpsInitUblox+0x260>)
 800804a:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 800804e:	b2db      	uxtb	r3, r3
 8008050:	e000      	b.n	8008054 <gpsInitUblox+0x1ac>
 8008052:	2305      	movs	r3, #5
 8008054:	70fb      	strb	r3, [r7, #3]
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_SBAS, sizeof(kCfgSbas[i]), (uint8_t*)kCfgSbas[i], FALSE)) {
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	00db      	lsls	r3, r3, #3
 800805a:	4a2c      	ldr	r2, [pc, #176]	; (800810c <gpsInitUblox+0x264>)
 800805c:	4413      	add	r3, r2
 800805e:	2200      	movs	r2, #0
 8008060:	9201      	str	r2, [sp, #4]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	2308      	movs	r3, #8
 8008066:	2216      	movs	r2, #22
 8008068:	2106      	movs	r1, #6
 800806a:	4822      	ldr	r0, [pc, #136]	; (80080f4 <gpsInitUblox+0x24c>)
 800806c:	f00f f928 	bl	80172c0 <pifGpsUblox_SendUbxMsg>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00c      	beq.n	8008090 <gpsInitUblox+0x1e8>
                gpsData.cfg_result = GUCR_NONE;
 8008076:	4b1b      	ldr	r3, [pc, #108]	; (80080e4 <gpsInitUblox+0x23c>)
 8008078:	2200      	movs	r2, #0
 800807a:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 800807c:	4b19      	ldr	r3, [pc, #100]	; (80080e4 <gpsInitUblox+0x23c>)
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	3314      	adds	r3, #20
 8008082:	4a18      	ldr	r2, [pc, #96]	; (80080e4 <gpsInitUblox+0x23c>)
 8008084:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8008086:	4b19      	ldr	r3, [pc, #100]	; (80080ec <gpsInitUblox+0x244>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a16      	ldr	r2, [pc, #88]	; (80080e4 <gpsInitUblox+0x23c>)
 800808c:	6153      	str	r3, [r2, #20]
 800808e:	e04d      	b.n	800812c <gpsInitUblox+0x284>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008090:	4b17      	ldr	r3, [pc, #92]	; (80080f0 <gpsInitUblox+0x248>)
 8008092:	220a      	movs	r2, #10
 8008094:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008096:	f240 133d 	movw	r3, #317	; 0x13d
 800809a:	607b      	str	r3, [r7, #4]
 800809c:	e046      	b.n	800812c <gpsInitUblox+0x284>
			}
		}
		else if (gpsData.step == 18) {
 800809e:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <gpsInitUblox+0x23c>)
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	2b12      	cmp	r3, #18
 80080a4:	d142      	bne.n	800812c <gpsInitUblox+0x284>
			if (pif_cumulative_timer1ms - gpsData.state_ts < 10000) {
 80080a6:	4b11      	ldr	r3, [pc, #68]	; (80080ec <gpsInitUblox+0x244>)
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <gpsInitUblox+0x23c>)
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d833      	bhi.n	8008120 <gpsInitUblox+0x278>
				if (gpsData.receive) {
 80080b8:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <gpsInitUblox+0x23c>)
 80080ba:	7e1b      	ldrb	r3, [r3, #24]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d035      	beq.n	800812c <gpsInitUblox+0x284>
					// ublox should be init'd, time to try receiving some junk
					serialStartReceiveFunc(&core.gpsport->comm);
 80080c0:	4b13      	ldr	r3, [pc, #76]	; (8008110 <gpsInitUblox+0x268>)
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	3304      	adds	r3, #4
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fa fa70 	bl	80025ac <serialStartReceiveFunc>
					pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 80080cc:	4b11      	ldr	r3, [pc, #68]	; (8008114 <gpsInitUblox+0x26c>)
 80080ce:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80080d2:	4911      	ldr	r1, [pc, #68]	; (8008118 <gpsInitUblox+0x270>)
 80080d4:	4811      	ldr	r0, [pc, #68]	; (800811c <gpsInitUblox+0x274>)
 80080d6:	f00d fce1 	bl	8015a9c <pifGps_SetTimeout>
					gpsSetState(GPS_RECEIVINGDATA);
 80080da:	2005      	movs	r0, #5
 80080dc:	f7ff fce8 	bl	8007ab0 <gpsSetState>
 80080e0:	e024      	b.n	800812c <gpsInitUblox+0x284>
 80080e2:	bf00      	nop
 80080e4:	20000e94 	.word	0x20000e94
 80080e8:	200012e2 	.word	0x200012e2
 80080ec:	20001f08 	.word	0x20001f08
 80080f0:	20001ef0 	.word	0x20001ef0
 80080f4:	20000f28 	.word	0x20000f28
 80080f8:	08007af1 	.word	0x08007af1
 80080fc:	08028ca8 	.word	0x08028ca8
 8008100:	08028cc8 	.word	0x08028cc8
 8008104:	08028cd0 	.word	0x08028cd0
 8008108:	200007ac 	.word	0x200007ac
 800810c:	08028cf4 	.word	0x08028cf4
 8008110:	200006f4 	.word	0x200006f4
 8008114:	08007ce9 	.word	0x08007ce9
 8008118:	20001800 	.word	0x20001800
 800811c:	20000f38 	.word	0x20000f38
				}
			}
			else {
				pif_error = E_TIMEOUT;
 8008120:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <gpsInitUblox+0x2b8>)
 8008122:	2207      	movs	r2, #7
 8008124:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008126:	f240 134b 	movw	r3, #331	; 0x14b
 800812a:	607b      	str	r3, [r7, #4]
			}
		}
	}

	if (line) {
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d013      	beq.n	800815a <gpsInitUblox+0x2b2>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "GPS(%u) CS:%u S:%u E:%u", line, cfg_msg_size, gpsData.step, pif_error);
 8008132:	4b0c      	ldr	r3, [pc, #48]	; (8008164 <gpsInitUblox+0x2bc>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	4619      	mov	r1, r3
 8008138:	4b0b      	ldr	r3, [pc, #44]	; (8008168 <gpsInitUblox+0x2c0>)
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	4a08      	ldr	r2, [pc, #32]	; (8008160 <gpsInitUblox+0x2b8>)
 800813e:	7812      	ldrb	r2, [r2, #0]
 8008140:	9201      	str	r2, [sp, #4]
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	460b      	mov	r3, r1
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	4908      	ldr	r1, [pc, #32]	; (800816c <gpsInitUblox+0x2c4>)
 800814a:	2004      	movs	r0, #4
 800814c:	f00b fb78 	bl	8013840 <pifLog_Printf>
#endif
		_evtGpsTimeout(&gps_ublox._gps);
 8008150:	4807      	ldr	r0, [pc, #28]	; (8008170 <gpsInitUblox+0x2c8>)
 8008152:	f7ff fdc9 	bl	8007ce8 <_evtGpsTimeout>
 8008156:	e000      	b.n	800815a <gpsInitUblox+0x2b2>
		if (pif_cumulative_timer1ms - gpsData.state_ts < 5) return;
 8008158:	bf00      	nop
	}
}
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	20001ef0 	.word	0x20001ef0
 8008164:	200012e2 	.word	0x200012e2
 8008168:	20000e94 	.word	0x20000e94
 800816c:	08027748 	.word	0x08027748
 8008170:	20000f38 	.word	0x20000f38

08008174 <gpsInitHardware>:

static void gpsInitHardware(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
    switch (mcfg.gps_type) {
 8008178:	4b0b      	ldr	r3, [pc, #44]	; (80081a8 <gpsInitHardware+0x34>)
 800817a:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 800817e:	2b03      	cmp	r3, #3
 8008180:	dc0d      	bgt.n	800819e <gpsInitHardware+0x2a>
 8008182:	2b02      	cmp	r3, #2
 8008184:	da0a      	bge.n	800819c <gpsInitHardware+0x28>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <gpsInitHardware+0x1c>
 800818a:	2b01      	cmp	r3, #1
 800818c:	d003      	beq.n	8008196 <gpsInitHardware+0x22>
 800818e:	e006      	b.n	800819e <gpsInitHardware+0x2a>
        case GPS_NMEA:
            gpsInitNmea();
 8008190:	f7ff fe5a 	bl	8007e48 <gpsInitNmea>
            break;
 8008194:	e003      	b.n	800819e <gpsInitHardware+0x2a>

        case GPS_UBLOX:
            gpsInitUblox();
 8008196:	f7ff fe87 	bl	8007ea8 <gpsInitUblox>
            break;
 800819a:	e000      	b.n	800819e <gpsInitHardware+0x2a>

        case GPS_MTK_NMEA:
        case GPS_MTK_BINARY:
            // TODO. need to find my old piece of shit MTK GPS.
            break;
 800819c:	bf00      	nop
    }

    // clear error counter
    gpsData.errors = 0;
 800819e:	4b03      	ldr	r3, [pc, #12]	; (80081ac <gpsInitHardware+0x38>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	605a      	str	r2, [r3, #4]
}
 80081a4:	bf00      	nop
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	200007ac 	.word	0x200007ac
 80081ac:	20000e94 	.word	0x20000e94

080081b0 <gpsThread>:

void gpsThread(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af02      	add	r7, sp, #8
    uint32_t m;

    switch (gpsData.state) {
 80081b6:	4b70      	ldr	r3, [pc, #448]	; (8008378 <gpsThread+0x1c8>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b06      	cmp	r3, #6
 80081bc:	f200 80d8 	bhi.w	8008370 <gpsThread+0x1c0>
 80081c0:	a201      	add	r2, pc, #4	; (adr r2, 80081c8 <gpsThread+0x18>)
 80081c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c6:	bf00      	nop
 80081c8:	08008371 	.word	0x08008371
 80081cc:	080081e5 	.word	0x080081e5
 80081d0:	0800823f 	.word	0x0800823f
 80081d4:	08008297 	.word	0x08008297
 80081d8:	080082d5 	.word	0x080082d5
 80081dc:	08008371 	.word	0x08008371
 80081e0:	080082db 	.word	0x080082db
        case GPS_UNKNOWN:
            break;

        case GPS_INITIALIZING:
            m = pif_cumulative_timer1ms;
 80081e4:	4b65      	ldr	r3, [pc, #404]	; (800837c <gpsThread+0x1cc>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < (gpsData.state_position ? GPS_BAUD_DELAY : 3000))
 80081ea:	4b63      	ldr	r3, [pc, #396]	; (8008378 <gpsThread+0x1c8>)
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	4a61      	ldr	r2, [pc, #388]	; (8008378 <gpsThread+0x1c8>)
 80081f4:	6912      	ldr	r2, [r2, #16]
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	d001      	beq.n	80081fe <gpsThread+0x4e>
 80081fa:	22c8      	movs	r2, #200	; 0xc8
 80081fc:	e001      	b.n	8008202 <gpsThread+0x52>
 80081fe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008202:	429a      	cmp	r2, r3
 8008204:	f200 80af 	bhi.w	8008366 <gpsThread+0x1b6>
                return;

            if (gpsData.state_position < GPS_INIT_ENTRIES) {
 8008208:	4b5b      	ldr	r3, [pc, #364]	; (8008378 <gpsThread+0x1c8>)
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	2b04      	cmp	r3, #4
 800820e:	dc12      	bgt.n	8008236 <gpsThread+0x86>
                // try different speed to INIT
                serialSetBaudRate(core.gpsport, gpsInitData[gpsData.state_position].baudrate);
 8008210:	4b5b      	ldr	r3, [pc, #364]	; (8008380 <gpsThread+0x1d0>)
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	4b58      	ldr	r3, [pc, #352]	; (8008378 <gpsThread+0x1c8>)
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	495a      	ldr	r1, [pc, #360]	; (8008384 <gpsThread+0x1d4>)
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	440b      	add	r3, r1
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f7fa f9b0 	bl	8002588 <serialSetBaudRate>
                gpsData.state = GPS_SENDBAUD;
 8008228:	4b53      	ldr	r3, [pc, #332]	; (8008378 <gpsThread+0x1c8>)
 800822a:	2202      	movs	r2, #2
 800822c:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 800822e:	4a52      	ldr	r2, [pc, #328]	; (8008378 <gpsThread+0x1c8>)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6153      	str	r3, [r2, #20]
            else
            {
                // we're now (hopefully) at the correct rate, next state will switch to it
                gpsSetState(GPS_SETBAUD);
            }
            break;
 8008234:	e09c      	b.n	8008370 <gpsThread+0x1c0>
                gpsSetState(GPS_SETBAUD);
 8008236:	2003      	movs	r0, #3
 8008238:	f7ff fc3a 	bl	8007ab0 <gpsSetState>
            break;
 800823c:	e098      	b.n	8008370 <gpsThread+0x1c0>

        case GPS_SENDBAUD:
            m = pif_cumulative_timer1ms;
 800823e:	4b4f      	ldr	r3, [pc, #316]	; (800837c <gpsThread+0x1cc>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < 200)
 8008244:	4b4c      	ldr	r3, [pc, #304]	; (8008378 <gpsThread+0x1c8>)
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	2bc7      	cmp	r3, #199	; 0xc7
 800824e:	f240 808c 	bls.w	800836a <gpsThread+0x1ba>
                return;

            // but print our FIXED init string for the baudrate we want to be at
            if (pifGpsUblox_SetPubxConfig(&gps_ublox, 1, 0x07, 0x03, gpsInitData[gpsData.baudrateIndex].baudrate, FALSE)) {
 8008252:	4b49      	ldr	r3, [pc, #292]	; (8008378 <gpsThread+0x1c8>)
 8008254:	785b      	ldrb	r3, [r3, #1]
 8008256:	4a4b      	ldr	r2, [pc, #300]	; (8008384 <gpsThread+0x1d4>)
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	4413      	add	r3, r2
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	9201      	str	r2, [sp, #4]
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	2303      	movs	r3, #3
 8008266:	2207      	movs	r2, #7
 8008268:	2101      	movs	r1, #1
 800826a:	4847      	ldr	r0, [pc, #284]	; (8008388 <gpsThread+0x1d8>)
 800826c:	f00e fff2 	bl	8017254 <pifGpsUblox_SetPubxConfig>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00b      	beq.n	800828e <gpsThread+0xde>
                gpsData.state_position++;
 8008276:	4b40      	ldr	r3, [pc, #256]	; (8008378 <gpsThread+0x1c8>)
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	3301      	adds	r3, #1
 800827c:	4a3e      	ldr	r2, [pc, #248]	; (8008378 <gpsThread+0x1c8>)
 800827e:	6113      	str	r3, [r2, #16]
                gpsData.state = GPS_INITIALIZING;
 8008280:	4b3d      	ldr	r3, [pc, #244]	; (8008378 <gpsThread+0x1c8>)
 8008282:	2201      	movs	r2, #1
 8008284:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 8008286:	4a3c      	ldr	r2, [pc, #240]	; (8008378 <gpsThread+0x1c8>)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6153      	str	r3, [r2, #20]
            }
            else {
        		gpsSetState(GPS_INITIALIZING);
            }
            break;
 800828c:	e070      	b.n	8008370 <gpsThread+0x1c0>
        		gpsSetState(GPS_INITIALIZING);
 800828e:	2001      	movs	r0, #1
 8008290:	f7ff fc0e 	bl	8007ab0 <gpsSetState>
            break;
 8008294:	e06c      	b.n	8008370 <gpsThread+0x1c0>

        case GPS_SETBAUD:
            m = pif_cumulative_timer1ms;
 8008296:	4b39      	ldr	r3, [pc, #228]	; (800837c <gpsThread+0x1cc>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < GPS_BAUD_DELAY)
 800829c:	4b36      	ldr	r3, [pc, #216]	; (8008378 <gpsThread+0x1c8>)
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	2bc7      	cmp	r3, #199	; 0xc7
 80082a6:	d962      	bls.n	800836e <gpsThread+0x1be>
                return;

            serialSetBaudRate(core.gpsport, gpsInitData[gpsData.baudrateIndex].baudrate);
 80082a8:	4b35      	ldr	r3, [pc, #212]	; (8008380 <gpsThread+0x1d0>)
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	4b32      	ldr	r3, [pc, #200]	; (8008378 <gpsThread+0x1c8>)
 80082ae:	785b      	ldrb	r3, [r3, #1]
 80082b0:	4934      	ldr	r1, [pc, #208]	; (8008384 <gpsThread+0x1d4>)
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	440b      	add	r3, r1
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7fa f964 	bl	8002588 <serialSetBaudRate>
        	serialStartReceiveFunc(&core.gpsport->comm);
 80082c0:	4b2f      	ldr	r3, [pc, #188]	; (8008380 <gpsThread+0x1d0>)
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	3304      	adds	r3, #4
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fa f970 	bl	80025ac <serialStartReceiveFunc>
            gpsSetState(GPS_CONFIGURATION);
 80082cc:	2004      	movs	r0, #4
 80082ce:	f7ff fbef 	bl	8007ab0 <gpsSetState>
            break;
 80082d2:	e04d      	b.n	8008370 <gpsThread+0x1c0>

        case GPS_CONFIGURATION:
            gpsInitHardware();
 80082d4:	f7ff ff4e 	bl	8008174 <gpsInitHardware>
            break;
 80082d8:	e04a      	b.n	8008370 <gpsThread+0x1c0>

        case GPS_LOSTCOMMS:
            if (mcfg.gps_type == GPS_NMEA && gpsInitData[gpsData.baudrateIndex].baudrate == 9600) {
 80082da:	4b2c      	ldr	r3, [pc, #176]	; (800838c <gpsThread+0x1dc>)
 80082dc:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10f      	bne.n	8008304 <gpsThread+0x154>
 80082e4:	4b24      	ldr	r3, [pc, #144]	; (8008378 <gpsThread+0x1c8>)
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	4a26      	ldr	r2, [pc, #152]	; (8008384 <gpsThread+0x1d4>)
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	4413      	add	r3, r2
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 80082f4:	d106      	bne.n	8008304 <gpsThread+0x154>
                pifGps_SetTimeout(&gps_nmea._gps, &g_timer_1ms, 0, NULL);
 80082f6:	2300      	movs	r3, #0
 80082f8:	2200      	movs	r2, #0
 80082fa:	4925      	ldr	r1, [pc, #148]	; (8008390 <gpsThread+0x1e0>)
 80082fc:	4825      	ldr	r0, [pc, #148]	; (8008394 <gpsThread+0x1e4>)
 80082fe:	f00d fbcd 	bl	8015a9c <pifGps_SetTimeout>
 8008302:	e005      	b.n	8008310 <gpsThread+0x160>
            }
            else {
                pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, 0, NULL);
 8008304:	2300      	movs	r3, #0
 8008306:	2200      	movs	r2, #0
 8008308:	4921      	ldr	r1, [pc, #132]	; (8008390 <gpsThread+0x1e0>)
 800830a:	4823      	ldr	r0, [pc, #140]	; (8008398 <gpsThread+0x1e8>)
 800830c:	f00d fbc6 	bl	8015a9c <pifGps_SetTimeout>
            }
            gpsData.errors++;
 8008310:	4b19      	ldr	r3, [pc, #100]	; (8008378 <gpsThread+0x1c8>)
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	3301      	adds	r3, #1
 8008316:	4a18      	ldr	r2, [pc, #96]	; (8008378 <gpsThread+0x1c8>)
 8008318:	6053      	str	r3, [r2, #4]
            // try another rate (Only if autobauding is enabled)
            if (mcfg.gps_autobaud) {
 800831a:	4b1c      	ldr	r3, [pc, #112]	; (800838c <gpsThread+0x1dc>)
 800831c:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8008320:	2b00      	cmp	r3, #0
 8008322:	d012      	beq.n	800834a <gpsThread+0x19a>
                gpsData.baudrateIndex++;
 8008324:	4b14      	ldr	r3, [pc, #80]	; (8008378 <gpsThread+0x1c8>)
 8008326:	785b      	ldrb	r3, [r3, #1]
 8008328:	3301      	adds	r3, #1
 800832a:	b2da      	uxtb	r2, r3
 800832c:	4b12      	ldr	r3, [pc, #72]	; (8008378 <gpsThread+0x1c8>)
 800832e:	705a      	strb	r2, [r3, #1]
                gpsData.baudrateIndex %= GPS_INIT_ENTRIES;
 8008330:	4b11      	ldr	r3, [pc, #68]	; (8008378 <gpsThread+0x1c8>)
 8008332:	785a      	ldrb	r2, [r3, #1]
 8008334:	4b19      	ldr	r3, [pc, #100]	; (800839c <gpsThread+0x1ec>)
 8008336:	fba3 1302 	umull	r1, r3, r3, r2
 800833a:	0899      	lsrs	r1, r3, #2
 800833c:	460b      	mov	r3, r1
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	440b      	add	r3, r1
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	b2da      	uxtb	r2, r3
 8008346:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <gpsThread+0x1c8>)
 8008348:	705a      	strb	r2, [r3, #1]
            }
            gpsData.lastMessage = pif_cumulative_timer1ms;
 800834a:	4b0c      	ldr	r3, [pc, #48]	; (800837c <gpsThread+0x1cc>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a0a      	ldr	r2, [pc, #40]	; (8008378 <gpsThread+0x1c8>)
 8008350:	6093      	str	r3, [r2, #8]
            // TODO - move some / all of these into gpsData
            GPS_numSat = 0;
 8008352:	4b13      	ldr	r3, [pc, #76]	; (80083a0 <gpsThread+0x1f0>)
 8008354:	2200      	movs	r2, #0
 8008356:	701a      	strb	r2, [r3, #0]
            f.GPS_FIX = 0;
 8008358:	4b12      	ldr	r3, [pc, #72]	; (80083a4 <gpsThread+0x1f4>)
 800835a:	2200      	movs	r2, #0
 800835c:	72da      	strb	r2, [r3, #11]
            gpsSetState(GPS_INITIALIZING);
 800835e:	2001      	movs	r0, #1
 8008360:	f7ff fba6 	bl	8007ab0 <gpsSetState>
            break;
 8008364:	e004      	b.n	8008370 <gpsThread+0x1c0>
                return;
 8008366:	bf00      	nop
 8008368:	e002      	b.n	8008370 <gpsThread+0x1c0>
                return;
 800836a:	bf00      	nop
 800836c:	e000      	b.n	8008370 <gpsThread+0x1c0>
                return;
 800836e:	bf00      	nop

        case GPS_RECEIVINGDATA:
            break;
    }
}
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20000e94 	.word	0x20000e94
 800837c:	20001f08 	.word	0x20001f08
 8008380:	200006f4 	.word	0x200006f4
 8008384:	08028c80 	.word	0x08028c80
 8008388:	20000f28 	.word	0x20000f28
 800838c:	200007ac 	.word	0x200007ac
 8008390:	20001800 	.word	0x20001800
 8008394:	20000eb8 	.word	0x20000eb8
 8008398:	20000f38 	.word	0x20000f38
 800839c:	cccccccd 	.word	0xcccccccd
 80083a0:	2000170c 	.word	0x2000170c
 80083a4:	20001628 	.word	0x20001628

080083a8 <gpsPollSvinfo>:

// gpsPollSvinfo-function. Used for polling UBX-NAV-SVINFO (0x01 0x30) information from GPS.
void gpsPollSvinfo(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af02      	add	r7, sp, #8
    // If selected GPS isn't UBLOX then we don't poll UBX messages.
    if (mcfg.gps_type != GPS_UBLOX)
 80083ae:	4b2b      	ldr	r3, [pc, #172]	; (800845c <gpsPollSvinfo+0xb4>)
 80083b0:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d14d      	bne.n	8008454 <gpsPollSvinfo+0xac>
        return;

    GPS_numCh = gps_ublox._num_ch;
 80083b8:	4b29      	ldr	r3, [pc, #164]	; (8008460 <gpsPollSvinfo+0xb8>)
 80083ba:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80083be:	4b29      	ldr	r3, [pc, #164]	; (8008464 <gpsPollSvinfo+0xbc>)
 80083c0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 80083c2:	2300      	movs	r3, #0
 80083c4:	607b      	str	r3, [r7, #4]
 80083c6:	e02a      	b.n	800841e <gpsPollSvinfo+0x76>
        GPS_svinfo_chn[i] = gps_ublox._svinfo_chn[i];
 80083c8:	4a25      	ldr	r2, [pc, #148]	; (8008460 <gpsPollSvinfo+0xb8>)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4413      	add	r3, r2
 80083ce:	3379      	adds	r3, #121	; 0x79
 80083d0:	7819      	ldrb	r1, [r3, #0]
 80083d2:	4a25      	ldr	r2, [pc, #148]	; (8008468 <gpsPollSvinfo+0xc0>)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4413      	add	r3, r2
 80083d8:	460a      	mov	r2, r1
 80083da:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_svid[i] = gps_ublox._svinfo_svid[i];
 80083dc:	4a20      	ldr	r2, [pc, #128]	; (8008460 <gpsPollSvinfo+0xb8>)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4413      	add	r3, r2
 80083e2:	3389      	adds	r3, #137	; 0x89
 80083e4:	7819      	ldrb	r1, [r3, #0]
 80083e6:	4a21      	ldr	r2, [pc, #132]	; (800846c <gpsPollSvinfo+0xc4>)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4413      	add	r3, r2
 80083ec:	460a      	mov	r2, r1
 80083ee:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_quality[i] = gps_ublox._svinfo_quality[i];
 80083f0:	4a1b      	ldr	r2, [pc, #108]	; (8008460 <gpsPollSvinfo+0xb8>)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4413      	add	r3, r2
 80083f6:	3399      	adds	r3, #153	; 0x99
 80083f8:	7819      	ldrb	r1, [r3, #0]
 80083fa:	4a1d      	ldr	r2, [pc, #116]	; (8008470 <gpsPollSvinfo+0xc8>)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4413      	add	r3, r2
 8008400:	460a      	mov	r2, r1
 8008402:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_cno[i] = gps_ublox._svinfo_cno[i];
 8008404:	4a16      	ldr	r2, [pc, #88]	; (8008460 <gpsPollSvinfo+0xb8>)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4413      	add	r3, r2
 800840a:	33a9      	adds	r3, #169	; 0xa9
 800840c:	7819      	ldrb	r1, [r3, #0]
 800840e:	4a19      	ldr	r2, [pc, #100]	; (8008474 <gpsPollSvinfo+0xcc>)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4413      	add	r3, r2
 8008414:	460a      	mov	r2, r1
 8008416:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3301      	adds	r3, #1
 800841c:	607b      	str	r3, [r7, #4]
 800841e:	4b11      	ldr	r3, [pc, #68]	; (8008464 <gpsPollSvinfo+0xbc>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4293      	cmp	r3, r2
 8008428:	dbce      	blt.n	80083c8 <gpsPollSvinfo+0x20>
    }
    // Update GPS SVIFO update rate table.
    GPS_svinfo_rate[0] = gps_ublox._svinfo_rate[0];
 800842a:	4b0d      	ldr	r3, [pc, #52]	; (8008460 <gpsPollSvinfo+0xb8>)
 800842c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008430:	4a11      	ldr	r2, [pc, #68]	; (8008478 <gpsPollSvinfo+0xd0>)
 8008432:	6013      	str	r3, [r2, #0]
    GPS_svinfo_rate[1] = gps_ublox._svinfo_rate[1];
 8008434:	4b0a      	ldr	r3, [pc, #40]	; (8008460 <gpsPollSvinfo+0xb8>)
 8008436:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800843a:	4a0f      	ldr	r2, [pc, #60]	; (8008478 <gpsPollSvinfo+0xd0>)
 800843c:	6053      	str	r3, [r2, #4]

    pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_NAV, GUMI_NAV_SVINFO, 0, NULL, FALSE);
 800843e:	2300      	movs	r3, #0
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	2300      	movs	r3, #0
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	2300      	movs	r3, #0
 8008448:	2230      	movs	r2, #48	; 0x30
 800844a:	2101      	movs	r1, #1
 800844c:	4804      	ldr	r0, [pc, #16]	; (8008460 <gpsPollSvinfo+0xb8>)
 800844e:	f00e ff37 	bl	80172c0 <pifGpsUblox_SendUbxMsg>
 8008452:	e000      	b.n	8008456 <gpsPollSvinfo+0xae>
        return;
 8008454:	bf00      	nop
}
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	200007ac 	.word	0x200007ac
 8008460:	20000f28 	.word	0x20000f28
 8008464:	20001729 	.word	0x20001729
 8008468:	2000172c 	.word	0x2000172c
 800846c:	2000174c 	.word	0x2000174c
 8008470:	2000176c 	.word	0x2000176c
 8008474:	2000178c 	.word	0x2000178c
 8008478:	200017b4 	.word	0x200017b4

0800847c <get_P>:
static PID posholdPID[2];
static PID poshold_ratePID[2];
static PID navPID[2];

static int32_t get_P(int32_t error, PID_PARAM *pid)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
    return (float)error * pid->kP;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	ee07 3a90 	vmov	s15, r3
 800848c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	edd3 7a00 	vldr	s15, [r3]
 8008496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800849a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800849e:	ee17 3a90 	vmov	r3, s15
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <get_I>:

static int32_t get_I(int32_t error, float *dt, PID *pid, PID_PARAM *pid_param)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	60f8      	str	r0, [r7, #12]
 80084b6:	60b9      	str	r1, [r7, #8]
 80084b8:	607a      	str	r2, [r7, #4]
 80084ba:	603b      	str	r3, [r7, #0]
    pid->integrator += ((float)error * pid_param->kI) **dt;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	ed93 7a00 	vldr	s14, [r3]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	ee07 3a90 	vmov	s15, r3
 80084c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80084d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	edd3 7a00 	vldr	s15, [r3]
 80084dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	edc3 7a00 	vstr	s15, [r3]
    pid->integrator = constrain(pid->integrator, -pid_param->Imax, pid_param->Imax);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	edd3 7a00 	vldr	s15, [r3]
 80084f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80084fa:	eef1 7a67 	vneg.f32	s15, s15
 80084fe:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	edd3 7a03 	vldr	s15, [r3, #12]
 8008508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800850c:	ee17 2a90 	vmov	r2, s15
 8008510:	ee16 1a90 	vmov	r1, s13
 8008514:	ee17 0a10 	vmov	r0, s14
 8008518:	f7fb fb3a 	bl	8003b90 <constrain>
 800851c:	ee07 0a90 	vmov	s15, r0
 8008520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	edc3 7a00 	vstr	s15, [r3]
    return pid->integrator;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	edd3 7a00 	vldr	s15, [r3]
 8008530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008534:	ee17 3a90 	vmov	r3, s15
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <get_D>:

static int32_t get_D(int32_t input, float *dt, PID *pid, PID_PARAM *pid_param)
{
 8008540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	607a      	str	r2, [r7, #4]
 800854e:	603b      	str	r3, [r7, #0]
    pid->derivative = (input - pid->last_input) / *dt;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	ee07 3a90 	vmov	s15, r3
 800855c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	ed93 7a00 	vldr	s14, [r3]
 8008566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	edc3 7a04 	vstr	s15, [r3, #16]
    // Low pass filter cut frequency for derivative calculation
    // Set to  "1 / ( 2 * PI * gps_lpf )"
#define PID_FILTER       (1.0f / (2.0f * M_PI * (float)cfg.gps_lpf))
    // discrete low pass filter, cuts out the
    // high frequency noise that can drive the controller crazy
    pid->derivative = pid->last_derivative + (*dt / (PID_FILTER + *dt)) * (pid->derivative - pid->last_derivative);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	4618      	mov	r0, r3
 8008576:	f7f7 ffa5 	bl	80004c4 <__aeabi_f2d>
 800857a:	4604      	mov	r4, r0
 800857c:	460d      	mov	r5, r1
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4618      	mov	r0, r3
 8008584:	f7f7 ff9e 	bl	80004c4 <__aeabi_f2d>
 8008588:	4680      	mov	r8, r0
 800858a:	4689      	mov	r9, r1
 800858c:	4b36      	ldr	r3, [pc, #216]	; (8008668 <get_D+0x128>)
 800858e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8008592:	ee07 3a90 	vmov	s15, r3
 8008596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859a:	ee17 0a90 	vmov	r0, s15
 800859e:	f7f7 ff91 	bl	80004c4 <__aeabi_f2d>
 80085a2:	a32f      	add	r3, pc, #188	; (adr r3, 8008660 <get_D+0x120>)
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	f7f7 ffe4 	bl	8000574 <__aeabi_dmul>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	f04f 0000 	mov.w	r0, #0
 80085b4:	492d      	ldr	r1, [pc, #180]	; (800866c <get_D+0x12c>)
 80085b6:	f7f8 f907 	bl	80007c8 <__aeabi_ddiv>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4692      	mov	sl, r2
 80085c0:	469b      	mov	fp, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7f7 ff7c 	bl	80004c4 <__aeabi_f2d>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4650      	mov	r0, sl
 80085d2:	4659      	mov	r1, fp
 80085d4:	f7f7 fe18 	bl	8000208 <__adddf3>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4640      	mov	r0, r8
 80085de:	4649      	mov	r1, r9
 80085e0:	f7f8 f8f2 	bl	80007c8 <__aeabi_ddiv>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	4690      	mov	r8, r2
 80085ea:	4699      	mov	r9, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80085f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085fc:	ee17 0a90 	vmov	r0, s15
 8008600:	f7f7 ff60 	bl	80004c4 <__aeabi_f2d>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4640      	mov	r0, r8
 800860a:	4649      	mov	r1, r9
 800860c:	f7f7 ffb2 	bl	8000574 <__aeabi_dmul>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4620      	mov	r0, r4
 8008616:	4629      	mov	r1, r5
 8008618:	f7f7 fdf6 	bl	8000208 <__adddf3>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4610      	mov	r0, r2
 8008622:	4619      	mov	r1, r3
 8008624:	f7f8 fa88 	bl	8000b38 <__aeabi_d2f>
 8008628:	4602      	mov	r2, r0
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	611a      	str	r2, [r3, #16]
    // update state
    pid->last_input = input;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	605a      	str	r2, [r3, #4]
    pid->last_derivative = pid->derivative;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	691a      	ldr	r2, [r3, #16]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	609a      	str	r2, [r3, #8]
    // add in derivative component
    return pid_param->kD * pid->derivative;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	edd3 7a04 	vldr	s15, [r3, #16]
 8008648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800864c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008650:	ee17 3a90 	vmov	r3, s15
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800865e:	bf00      	nop
 8008660:	54442d18 	.word	0x54442d18
 8008664:	401921fb 	.word	0x401921fb
 8008668:	20000d18 	.word	0x20000d18
 800866c:	3ff00000 	.word	0x3ff00000

08008670 <reset_PID>:

static void reset_PID(PID *pid)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
    pid->integrator = 0;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f04f 0200 	mov.w	r2, #0
 800867e:	601a      	str	r2, [r3, #0]
    pid->last_input = 0;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	605a      	str	r2, [r3, #4]
    pid->last_derivative = 0;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f04f 0200 	mov.w	r2, #0
 800868c:	609a      	str	r2, [r3, #8]
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
	...

0800869c <taskGpsNewData>:
int32_t nav_bearing;
// saves the bearing at takeof (1deg = 1) used to rotate to takeoff direction when arrives at home
static int16_t nav_takeoff_bearing;

uint16_t taskGpsNewData(PifTask *p_task)
{
 800869c:	b590      	push	{r4, r7, lr}
 800869e:	b089      	sub	sp, #36	; 0x24
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	6078      	str	r0, [r7, #4]
    int16_t speed;

    (void)p_task;

        // new data received and parsed, we're in business
        gpsData.lastMessage = pif_cumulative_timer1ms;
 80086a4:	4b84      	ldr	r3, [pc, #528]	; (80088b8 <taskGpsNewData+0x21c>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a84      	ldr	r2, [pc, #528]	; (80088bc <taskGpsNewData+0x220>)
 80086aa:	6093      	str	r3, [r2, #8]
        sensorsSet(SENSOR_GPS);
 80086ac:	2020      	movs	r0, #32
 80086ae:	f7fe fbbd 	bl	8006e2c <sensorsSet>
        if (GPS_update == 1)
 80086b2:	4b83      	ldr	r3, [pc, #524]	; (80088c0 <taskGpsNewData+0x224>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d103      	bne.n	80086c2 <taskGpsNewData+0x26>
            GPS_update = 0;
 80086ba:	4b81      	ldr	r3, [pc, #516]	; (80088c0 <taskGpsNewData+0x224>)
 80086bc:	2200      	movs	r2, #0
 80086be:	701a      	strb	r2, [r3, #0]
 80086c0:	e002      	b.n	80086c8 <taskGpsNewData+0x2c>
        else
            GPS_update = 1;
 80086c2:	4b7f      	ldr	r3, [pc, #508]	; (80088c0 <taskGpsNewData+0x224>)
 80086c4:	2201      	movs	r2, #1
 80086c6:	701a      	strb	r2, [r3, #0]
        if (f.GPS_FIX && GPS_numSat >= 5) {
 80086c8:	4b7e      	ldr	r3, [pc, #504]	; (80088c4 <taskGpsNewData+0x228>)
 80086ca:	7adb      	ldrb	r3, [r3, #11]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 81ae 	beq.w	8008a2e <taskGpsNewData+0x392>
 80086d2:	4b7d      	ldr	r3, [pc, #500]	; (80088c8 <taskGpsNewData+0x22c>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	f240 81a9 	bls.w	8008a2e <taskGpsNewData+0x392>
            if (!f.ARMED && !f.FIXED_WING)
 80086dc:	4b79      	ldr	r3, [pc, #484]	; (80088c4 <taskGpsNewData+0x228>)
 80086de:	785b      	ldrb	r3, [r3, #1]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d106      	bne.n	80086f2 <taskGpsNewData+0x56>
 80086e4:	4b77      	ldr	r3, [pc, #476]	; (80088c4 <taskGpsNewData+0x228>)
 80086e6:	7c1b      	ldrb	r3, [r3, #16]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d102      	bne.n	80086f2 <taskGpsNewData+0x56>
                f.GPS_FIX_HOME = 0;
 80086ec:	4b75      	ldr	r3, [pc, #468]	; (80088c4 <taskGpsNewData+0x228>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	731a      	strb	r2, [r3, #12]
            if (!f.GPS_FIX_HOME && f.ARMED)
 80086f2:	4b74      	ldr	r3, [pc, #464]	; (80088c4 <taskGpsNewData+0x228>)
 80086f4:	7b1b      	ldrb	r3, [r3, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d105      	bne.n	8008706 <taskGpsNewData+0x6a>
 80086fa:	4b72      	ldr	r3, [pc, #456]	; (80088c4 <taskGpsNewData+0x228>)
 80086fc:	785b      	ldrb	r3, [r3, #1]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <taskGpsNewData+0x6a>
                GPS_reset_home_position();
 8008702:	f000 f9c1 	bl	8008a88 <GPS_reset_home_position>
            // Apply moving average filter to GPS data
#if defined(GPS_FILTERING)
            GPS_filter_index = (GPS_filter_index + 1) % GPS_FILTER_VECTOR_LENGTH;
 8008706:	4b71      	ldr	r3, [pc, #452]	; (80088cc <taskGpsNewData+0x230>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	4b70      	ldr	r3, [pc, #448]	; (80088d0 <taskGpsNewData+0x234>)
 800870e:	fb83 1302 	smull	r1, r3, r3, r2
 8008712:	1059      	asrs	r1, r3, #1
 8008714:	17d3      	asrs	r3, r2, #31
 8008716:	1ac9      	subs	r1, r1, r3
 8008718:	460b      	mov	r3, r1
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	440b      	add	r3, r1
 800871e:	1ad1      	subs	r1, r2, r3
 8008720:	b2ca      	uxtb	r2, r1
 8008722:	4b6a      	ldr	r3, [pc, #424]	; (80088cc <taskGpsNewData+0x230>)
 8008724:	701a      	strb	r2, [r3, #0]
            for (axis = 0; axis < 2; axis++) {
 8008726:	2300      	movs	r3, #0
 8008728:	617b      	str	r3, [r7, #20]
 800872a:	e09f      	b.n	800886c <taskGpsNewData+0x1d0>
                GPS_read[axis] = GPS_coord[axis];               // latest unfiltered data is in GPS_latitude and GPS_longitude
 800872c:	4a69      	ldr	r2, [pc, #420]	; (80088d4 <taskGpsNewData+0x238>)
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008734:	4968      	ldr	r1, [pc, #416]	; (80088d8 <taskGpsNewData+0x23c>)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_degree[axis] = GPS_read[axis] / 10000000;   // get the degree to assure the sum fits to the int32_t
 800873c:	4a66      	ldr	r2, [pc, #408]	; (80088d8 <taskGpsNewData+0x23c>)
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008744:	4a65      	ldr	r2, [pc, #404]	; (80088dc <taskGpsNewData+0x240>)
 8008746:	fb82 1203 	smull	r1, r2, r2, r3
 800874a:	1592      	asrs	r2, r2, #22
 800874c:	17db      	asrs	r3, r3, #31
 800874e:	1ad2      	subs	r2, r2, r3
 8008750:	4963      	ldr	r1, [pc, #396]	; (80088e0 <taskGpsNewData+0x244>)
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // How close we are to a degree line ? its the first three digits from the fractions of degree
                // later we use it to Check if we are close to a degree line, if yes, disable averaging,
                fraction3[axis] = (GPS_read[axis] - GPS_degree[axis] * 10000000) / 10000;
 8008758:	4a5f      	ldr	r2, [pc, #380]	; (80088d8 <taskGpsNewData+0x23c>)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008760:	495f      	ldr	r1, [pc, #380]	; (80088e0 <taskGpsNewData+0x244>)
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008768:	495e      	ldr	r1, [pc, #376]	; (80088e4 <taskGpsNewData+0x248>)
 800876a:	fb01 f303 	mul.w	r3, r1, r3
 800876e:	4413      	add	r3, r2
 8008770:	4a5d      	ldr	r2, [pc, #372]	; (80088e8 <taskGpsNewData+0x24c>)
 8008772:	fb82 1203 	smull	r1, r2, r2, r3
 8008776:	1312      	asrs	r2, r2, #12
 8008778:	17db      	asrs	r3, r3, #31
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	b299      	uxth	r1, r3
 800877e:	4a5b      	ldr	r2, [pc, #364]	; (80088ec <taskGpsNewData+0x250>)
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

                GPS_filter_sum[axis] -= GPS_filter[axis][GPS_filter_index];
 8008786:	4a5a      	ldr	r2, [pc, #360]	; (80088f0 <taskGpsNewData+0x254>)
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800878e:	4b4f      	ldr	r3, [pc, #316]	; (80088cc <taskGpsNewData+0x230>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	461c      	mov	r4, r3
 8008794:	4857      	ldr	r0, [pc, #348]	; (80088f4 <taskGpsNewData+0x258>)
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	4613      	mov	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	4423      	add	r3, r4
 80087a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80087a4:	1aca      	subs	r2, r1, r3
 80087a6:	4952      	ldr	r1, [pc, #328]	; (80088f0 <taskGpsNewData+0x254>)
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filter[axis][GPS_filter_index] = GPS_read[axis] - (GPS_degree[axis] * 10000000);
 80087ae:	4a4a      	ldr	r2, [pc, #296]	; (80088d8 <taskGpsNewData+0x23c>)
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80087b6:	494a      	ldr	r1, [pc, #296]	; (80088e0 <taskGpsNewData+0x244>)
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80087be:	4949      	ldr	r1, [pc, #292]	; (80088e4 <taskGpsNewData+0x248>)
 80087c0:	fb01 f303 	mul.w	r3, r1, r3
 80087c4:	4941      	ldr	r1, [pc, #260]	; (80088cc <taskGpsNewData+0x230>)
 80087c6:	7809      	ldrb	r1, [r1, #0]
 80087c8:	460c      	mov	r4, r1
 80087ca:	18d1      	adds	r1, r2, r3
 80087cc:	4849      	ldr	r0, [pc, #292]	; (80088f4 <taskGpsNewData+0x258>)
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	4423      	add	r3, r4
 80087d8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                GPS_filter_sum[axis] += GPS_filter[axis][GPS_filter_index];
 80087dc:	4a44      	ldr	r2, [pc, #272]	; (80088f0 <taskGpsNewData+0x254>)
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80087e4:	4b39      	ldr	r3, [pc, #228]	; (80088cc <taskGpsNewData+0x230>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	461c      	mov	r4, r3
 80087ea:	4842      	ldr	r0, [pc, #264]	; (80088f4 <taskGpsNewData+0x258>)
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	4613      	mov	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	4423      	add	r3, r4
 80087f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80087fa:	18ca      	adds	r2, r1, r3
 80087fc:	493c      	ldr	r1, [pc, #240]	; (80088f0 <taskGpsNewData+0x254>)
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filtered[axis] = GPS_filter_sum[axis] / GPS_FILTER_VECTOR_LENGTH + (GPS_degree[axis] * 10000000);
 8008804:	4a3a      	ldr	r2, [pc, #232]	; (80088f0 <taskGpsNewData+0x254>)
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800880c:	4a30      	ldr	r2, [pc, #192]	; (80088d0 <taskGpsNewData+0x234>)
 800880e:	fb82 1203 	smull	r1, r2, r2, r3
 8008812:	1052      	asrs	r2, r2, #1
 8008814:	17db      	asrs	r3, r3, #31
 8008816:	1ad2      	subs	r2, r2, r3
 8008818:	4931      	ldr	r1, [pc, #196]	; (80088e0 <taskGpsNewData+0x244>)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008820:	4935      	ldr	r1, [pc, #212]	; (80088f8 <taskGpsNewData+0x25c>)
 8008822:	fb01 f303 	mul.w	r3, r1, r3
 8008826:	441a      	add	r2, r3
 8008828:	4934      	ldr	r1, [pc, #208]	; (80088fc <taskGpsNewData+0x260>)
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (nav_mode == NAV_MODE_POSHOLD) {             // we use gps averaging only in poshold mode...
 8008830:	4b33      	ldr	r3, [pc, #204]	; (8008900 <taskGpsNewData+0x264>)
 8008832:	f993 3000 	ldrsb.w	r3, [r3]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d115      	bne.n	8008866 <taskGpsNewData+0x1ca>
                    if (fraction3[axis] > 1 && fraction3[axis] < 999)
 800883a:	4a2c      	ldr	r2, [pc, #176]	; (80088ec <taskGpsNewData+0x250>)
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d90f      	bls.n	8008866 <taskGpsNewData+0x1ca>
 8008846:	4a29      	ldr	r2, [pc, #164]	; (80088ec <taskGpsNewData+0x250>)
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800884e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8008852:	4293      	cmp	r3, r2
 8008854:	d807      	bhi.n	8008866 <taskGpsNewData+0x1ca>
                        GPS_coord[axis] = GPS_filtered[axis];
 8008856:	4a29      	ldr	r2, [pc, #164]	; (80088fc <taskGpsNewData+0x260>)
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800885e:	491d      	ldr	r1, [pc, #116]	; (80088d4 <taskGpsNewData+0x238>)
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (axis = 0; axis < 2; axis++) {
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	3301      	adds	r3, #1
 800886a:	617b      	str	r3, [r7, #20]
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2b01      	cmp	r3, #1
 8008870:	f77f af5c 	ble.w	800872c <taskGpsNewData+0x90>
                }
            }
#endif
            // dTnav calculation
            // Time for calculating x,y speed and navigation pids
            dTnav = (float)(pif_cumulative_timer1ms - nav_loopTimer) / 1000.0f;
 8008874:	4b10      	ldr	r3, [pc, #64]	; (80088b8 <taskGpsNewData+0x21c>)
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	4b22      	ldr	r3, [pc, #136]	; (8008904 <taskGpsNewData+0x268>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008886:	eddf 6a20 	vldr	s13, [pc, #128]	; 8008908 <taskGpsNewData+0x26c>
 800888a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800888e:	4b1f      	ldr	r3, [pc, #124]	; (800890c <taskGpsNewData+0x270>)
 8008890:	edc3 7a00 	vstr	s15, [r3]
            nav_loopTimer = pif_cumulative_timer1ms;
 8008894:	4b08      	ldr	r3, [pc, #32]	; (80088b8 <taskGpsNewData+0x21c>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a1a      	ldr	r2, [pc, #104]	; (8008904 <taskGpsNewData+0x268>)
 800889a:	6013      	str	r3, [r2, #0]
            // prevent runup from bad GPS
            dTnav = min(dTnav, 1.0f);
 800889c:	4b1b      	ldr	r3, [pc, #108]	; (800890c <taskGpsNewData+0x270>)
 800889e:	edd3 7a00 	vldr	s15, [r3]
 80088a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ae:	d52f      	bpl.n	8008910 <taskGpsNewData+0x274>
 80088b0:	4b16      	ldr	r3, [pc, #88]	; (800890c <taskGpsNewData+0x270>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	e02e      	b.n	8008914 <taskGpsNewData+0x278>
 80088b6:	bf00      	nop
 80088b8:	20001f08 	.word	0x20001f08
 80088bc:	20000e94 	.word	0x20000e94
 80088c0:	20001716 	.word	0x20001716
 80088c4:	20001628 	.word	0x20001628
 80088c8:	2000170c 	.word	0x2000170c
 80088cc:	2000128e 	.word	0x2000128e
 80088d0:	66666667 	.word	0x66666667
 80088d4:	200016ec 	.word	0x200016ec
 80088d8:	200012c0 	.word	0x200012c0
 80088dc:	6b5fca6b 	.word	0x6b5fca6b
 80088e0:	200012d0 	.word	0x200012d0
 80088e4:	ff676980 	.word	0xff676980
 80088e8:	68db8bad 	.word	0x68db8bad
 80088ec:	200012d8 	.word	0x200012d8
 80088f0:	200012b8 	.word	0x200012b8
 80088f4:	20001290 	.word	0x20001290
 80088f8:	00989680 	.word	0x00989680
 80088fc:	200012c8 	.word	0x200012c8
 8008900:	20001728 	.word	0x20001728
 8008904:	200012e4 	.word	0x200012e4
 8008908:	447a0000 	.word	0x447a0000
 800890c:	20001260 	.word	0x20001260
 8008910:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008914:	4a4a      	ldr	r2, [pc, #296]	; (8008a40 <taskGpsNewData+0x3a4>)
 8008916:	6013      	str	r3, [r2, #0]

            // calculate distance and bearings for gui and other stuff continously - From home to copter
            GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_home[LAT], &GPS_home[LON], &dist, &dir);
 8008918:	f107 0308 	add.w	r3, r7, #8
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	f107 030c 	add.w	r3, r7, #12
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	4b47      	ldr	r3, [pc, #284]	; (8008a44 <taskGpsNewData+0x3a8>)
 8008926:	4a48      	ldr	r2, [pc, #288]	; (8008a48 <taskGpsNewData+0x3ac>)
 8008928:	4948      	ldr	r1, [pc, #288]	; (8008a4c <taskGpsNewData+0x3b0>)
 800892a:	4849      	ldr	r0, [pc, #292]	; (8008a50 <taskGpsNewData+0x3b4>)
 800892c:	f000 faec 	bl	8008f08 <GPS_distance_cm_bearing>
            GPS_distanceToHome = dist / 100;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4a48      	ldr	r2, [pc, #288]	; (8008a54 <taskGpsNewData+0x3b8>)
 8008934:	fb82 1203 	smull	r1, r2, r2, r3
 8008938:	1152      	asrs	r2, r2, #5
 800893a:	17db      	asrs	r3, r3, #31
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	b29a      	uxth	r2, r3
 8008940:	4b45      	ldr	r3, [pc, #276]	; (8008a58 <taskGpsNewData+0x3bc>)
 8008942:	801a      	strh	r2, [r3, #0]
            GPS_directionToHome = dir / 100;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	4a43      	ldr	r2, [pc, #268]	; (8008a54 <taskGpsNewData+0x3b8>)
 8008948:	fb82 1203 	smull	r1, r2, r2, r3
 800894c:	1152      	asrs	r2, r2, #5
 800894e:	17db      	asrs	r3, r3, #31
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	b21a      	sxth	r2, r3
 8008954:	4b41      	ldr	r3, [pc, #260]	; (8008a5c <taskGpsNewData+0x3c0>)
 8008956:	801a      	strh	r2, [r3, #0]

            if (!f.GPS_FIX_HOME) {      // If we don't have home set, do not display anything
 8008958:	4b41      	ldr	r3, [pc, #260]	; (8008a60 <taskGpsNewData+0x3c4>)
 800895a:	7b1b      	ldrb	r3, [r3, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d105      	bne.n	800896c <taskGpsNewData+0x2d0>
                GPS_distanceToHome = 0;
 8008960:	4b3d      	ldr	r3, [pc, #244]	; (8008a58 <taskGpsNewData+0x3bc>)
 8008962:	2200      	movs	r2, #0
 8008964:	801a      	strh	r2, [r3, #0]
                GPS_directionToHome = 0;
 8008966:	4b3d      	ldr	r3, [pc, #244]	; (8008a5c <taskGpsNewData+0x3c0>)
 8008968:	2200      	movs	r2, #0
 800896a:	801a      	strh	r2, [r3, #0]
            }

            // calculate the current velocity based on gps coordinates continously to get a valid speed at the moment when we start navigating
            GPS_calc_velocity();
 800896c:	f000 fb3a 	bl	8008fe4 <GPS_calc_velocity>

            if (f.GPS_HOLD_MODE || f.GPS_HOME_MODE) { // ok we are navigating
 8008970:	4b3b      	ldr	r3, [pc, #236]	; (8008a60 <taskGpsNewData+0x3c4>)
 8008972:	7a1b      	ldrb	r3, [r3, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d103      	bne.n	8008980 <taskGpsNewData+0x2e4>
 8008978:	4b39      	ldr	r3, [pc, #228]	; (8008a60 <taskGpsNewData+0x3c4>)
 800897a:	79db      	ldrb	r3, [r3, #7]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d056      	beq.n	8008a2e <taskGpsNewData+0x392>
                // do gps nav calculations here, these are common for nav and poshold
                GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008980:	4b38      	ldr	r3, [pc, #224]	; (8008a64 <taskGpsNewData+0x3c8>)
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	4b38      	ldr	r3, [pc, #224]	; (8008a68 <taskGpsNewData+0x3cc>)
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	4b38      	ldr	r3, [pc, #224]	; (8008a6c <taskGpsNewData+0x3d0>)
 800898a:	4a39      	ldr	r2, [pc, #228]	; (8008a70 <taskGpsNewData+0x3d4>)
 800898c:	492f      	ldr	r1, [pc, #188]	; (8008a4c <taskGpsNewData+0x3b0>)
 800898e:	4830      	ldr	r0, [pc, #192]	; (8008a50 <taskGpsNewData+0x3b4>)
 8008990:	f000 faba 	bl	8008f08 <GPS_distance_cm_bearing>
                GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008994:	4b2d      	ldr	r3, [pc, #180]	; (8008a4c <taskGpsNewData+0x3b0>)
 8008996:	4a2e      	ldr	r2, [pc, #184]	; (8008a50 <taskGpsNewData+0x3b4>)
 8008998:	4934      	ldr	r1, [pc, #208]	; (8008a6c <taskGpsNewData+0x3d0>)
 800899a:	4835      	ldr	r0, [pc, #212]	; (8008a70 <taskGpsNewData+0x3d4>)
 800899c:	f000 fba4 	bl	80090e8 <GPS_calc_location_error>

                if (f.FIXED_WING)
 80089a0:	4b2f      	ldr	r3, [pc, #188]	; (8008a60 <taskGpsNewData+0x3c4>)
 80089a2:	7c1b      	ldrb	r3, [r3, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <taskGpsNewData+0x312>
                    nav_mode = NAV_MODE_WP; // Planes always navigate in Wp mode.
 80089a8:	4b32      	ldr	r3, [pc, #200]	; (8008a74 <taskGpsNewData+0x3d8>)
 80089aa:	2202      	movs	r2, #2
 80089ac:	701a      	strb	r2, [r3, #0]

                switch (nav_mode) {
 80089ae:	4b31      	ldr	r3, [pc, #196]	; (8008a74 <taskGpsNewData+0x3d8>)
 80089b0:	f993 3000 	ldrsb.w	r3, [r3]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d002      	beq.n	80089be <taskGpsNewData+0x322>
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d003      	beq.n	80089c4 <taskGpsNewData+0x328>
 80089bc:	e03a      	b.n	8008a34 <taskGpsNewData+0x398>
                    case NAV_MODE_POSHOLD:
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_poshold();
 80089be:	f000 fbbf 	bl	8009140 <GPS_calc_poshold>
                        break;
 80089c2:	e037      	b.n	8008a34 <taskGpsNewData+0x398>

                    case NAV_MODE_WP:
                        speed = GPS_calc_desired_speed(cfg.nav_speed_max, NAV_SLOW_NAV);    // slow navigation
 80089c4:	4b2c      	ldr	r3, [pc, #176]	; (8008a78 <taskGpsNewData+0x3dc>)
 80089c6:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 80089ca:	b21b      	sxth	r3, r3
 80089cc:	2101      	movs	r1, #1
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 fdc4 	bl	800955c <GPS_calc_desired_speed>
 80089d4:	4603      	mov	r3, r0
 80089d6:	827b      	strh	r3, [r7, #18]
                        // use error as the desired rate towards the target
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_nav_rate(speed);
 80089d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 fc67 	bl	80092b0 <GPS_calc_nav_rate>

                        // Tail control
                        if (cfg.nav_controls_heading) {
 80089e2:	4b25      	ldr	r3, [pc, #148]	; (8008a78 <taskGpsNewData+0x3dc>)
 80089e4:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00a      	beq.n	8008a02 <taskGpsNewData+0x366>
                            if (NAV_TAIL_FIRST) {
                                magHold = wrap_18000(nav_bearing - 18000) / 100;
                            } else {
                                magHold = nav_bearing / 100;
 80089ec:	4b23      	ldr	r3, [pc, #140]	; (8008a7c <taskGpsNewData+0x3e0>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a18      	ldr	r2, [pc, #96]	; (8008a54 <taskGpsNewData+0x3b8>)
 80089f2:	fb82 1203 	smull	r1, r2, r2, r3
 80089f6:	1152      	asrs	r2, r2, #5
 80089f8:	17db      	asrs	r3, r3, #31
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	b21a      	sxth	r2, r3
 80089fe:	4b20      	ldr	r3, [pc, #128]	; (8008a80 <taskGpsNewData+0x3e4>)
 8008a00:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        // Are we there yet ?(within x meters of the destination)
                        if ((wp_distance <= cfg.gps_wp_radius) || check_missed_wp()) {      // if yes switch to poshold mode
 8008a02:	4b1d      	ldr	r3, [pc, #116]	; (8008a78 <taskGpsNewData+0x3dc>)
 8008a04:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8008a08:	461a      	mov	r2, r3
 8008a0a:	4b17      	ldr	r3, [pc, #92]	; (8008a68 <taskGpsNewData+0x3cc>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	da04      	bge.n	8008a1c <taskGpsNewData+0x380>
 8008a12:	f000 fa59 	bl	8008ec8 <check_missed_wp>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00a      	beq.n	8008a32 <taskGpsNewData+0x396>
                            nav_mode = NAV_MODE_POSHOLD;
 8008a1c:	4b15      	ldr	r3, [pc, #84]	; (8008a74 <taskGpsNewData+0x3d8>)
 8008a1e:	2201      	movs	r2, #1
 8008a20:	701a      	strb	r2, [r3, #0]
                            if (NAV_SET_TAKEOFF_HEADING) {
                                magHold = nav_takeoff_bearing;
 8008a22:	4b18      	ldr	r3, [pc, #96]	; (8008a84 <taskGpsNewData+0x3e8>)
 8008a24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008a28:	4b15      	ldr	r3, [pc, #84]	; (8008a80 <taskGpsNewData+0x3e4>)
 8008a2a:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        break;
 8008a2c:	e001      	b.n	8008a32 <taskGpsNewData+0x396>
                }
            }                   //end of gps calcs
 8008a2e:	bf00      	nop
 8008a30:	e000      	b.n	8008a34 <taskGpsNewData+0x398>
                        break;
 8008a32:	bf00      	nop
        }

    return 0;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	371c      	adds	r7, #28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd90      	pop	{r4, r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20001260 	.word	0x20001260
 8008a44:	200016f8 	.word	0x200016f8
 8008a48:	200016f4 	.word	0x200016f4
 8008a4c:	200016f0 	.word	0x200016f0
 8008a50:	200016ec 	.word	0x200016ec
 8008a54:	51eb851f 	.word	0x51eb851f
 8008a58:	2000170e 	.word	0x2000170e
 8008a5c:	20001710 	.word	0x20001710
 8008a60:	20001628 	.word	0x20001628
 8008a64:	2000127c 	.word	0x2000127c
 8008a68:	20001288 	.word	0x20001288
 8008a6c:	20001278 	.word	0x20001278
 8008a70:	20001274 	.word	0x20001274
 8008a74:	20001728 	.word	0x20001728
 8008a78:	20000d18 	.word	0x20000d18
 8008a7c:	200012dc 	.word	0x200012dc
 8008a80:	200019bc 	.word	0x200019bc
 8008a84:	200012e0 	.word	0x200012e0

08008a88 <GPS_reset_home_position>:

void GPS_reset_home_position(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	af00      	add	r7, sp, #0
    if (f.GPS_FIX && GPS_numSat >= 5) {
 8008a8c:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <GPS_reset_home_position+0x4c>)
 8008a8e:	7adb      	ldrb	r3, [r3, #11]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d01d      	beq.n	8008ad0 <GPS_reset_home_position+0x48>
 8008a94:	4b10      	ldr	r3, [pc, #64]	; (8008ad8 <GPS_reset_home_position+0x50>)
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	2b04      	cmp	r3, #4
 8008a9a:	d919      	bls.n	8008ad0 <GPS_reset_home_position+0x48>
        GPS_home[LAT] = GPS_coord[LAT];
 8008a9c:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <GPS_reset_home_position+0x54>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a0f      	ldr	r2, [pc, #60]	; (8008ae0 <GPS_reset_home_position+0x58>)
 8008aa2:	6013      	str	r3, [r2, #0]
        GPS_home[LON] = GPS_coord[LON];
 8008aa4:	4b0d      	ldr	r3, [pc, #52]	; (8008adc <GPS_reset_home_position+0x54>)
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	4a0d      	ldr	r2, [pc, #52]	; (8008ae0 <GPS_reset_home_position+0x58>)
 8008aaa:	6053      	str	r3, [r2, #4]
        GPS_calc_longitude_scaling(GPS_coord[LAT]); // need an initial value for distance and bearing calc
 8008aac:	4b0b      	ldr	r3, [pc, #44]	; (8008adc <GPS_reset_home_position+0x54>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 f981 	bl	8008db8 <GPS_calc_longitude_scaling>
        nav_takeoff_bearing = heading;              // save takeoff heading
 8008ab6:	4b0b      	ldr	r3, [pc, #44]	; (8008ae4 <GPS_reset_home_position+0x5c>)
 8008ab8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008abc:	4b0a      	ldr	r3, [pc, #40]	; (8008ae8 <GPS_reset_home_position+0x60>)
 8008abe:	801a      	strh	r2, [r3, #0]
        //Set ground altitude
        GPS_home[ALT] = GPS_altitude;
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <GPS_reset_home_position+0x64>)
 8008ac2:	881b      	ldrh	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	4b06      	ldr	r3, [pc, #24]	; (8008ae0 <GPS_reset_home_position+0x58>)
 8008ac8:	609a      	str	r2, [r3, #8]
        f.GPS_FIX_HOME = 1;
 8008aca:	4b02      	ldr	r3, [pc, #8]	; (8008ad4 <GPS_reset_home_position+0x4c>)
 8008acc:	2201      	movs	r2, #1
 8008ace:	731a      	strb	r2, [r3, #12]
    }
}
 8008ad0:	bf00      	nop
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	20001628 	.word	0x20001628
 8008ad8:	2000170c 	.word	0x2000170c
 8008adc:	200016ec 	.word	0x200016ec
 8008ae0:	200016f4 	.word	0x200016f4
 8008ae4:	200019ba 	.word	0x200019ba
 8008ae8:	200012e0 	.word	0x200012e0
 8008aec:	20001712 	.word	0x20001712

08008af0 <GPS_reset_nav>:

// reset navigation (stop the navigation processor, and clear nav)
void GPS_reset_nav(void)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < 2; i++) {
 8008af6:	2300      	movs	r3, #0
 8008af8:	607b      	str	r3, [r7, #4]
 8008afa:	e02f      	b.n	8008b5c <GPS_reset_nav+0x6c>
        GPS_angle[i] = 0;
 8008afc:	4a1e      	ldr	r2, [pc, #120]	; (8008b78 <GPS_reset_nav+0x88>)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2100      	movs	r1, #0
 8008b02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav_rated[i] = 0;
 8008b06:	4a1d      	ldr	r2, [pc, #116]	; (8008b7c <GPS_reset_nav+0x8c>)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[i] = 0;
 8008b10:	4a1b      	ldr	r2, [pc, #108]	; (8008b80 <GPS_reset_nav+0x90>)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2100      	movs	r1, #0
 8008b16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        reset_PID(&posholdPID[i]);
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4a17      	ldr	r2, [pc, #92]	; (8008b84 <GPS_reset_nav+0x94>)
 8008b26:	4413      	add	r3, r2
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7ff fda1 	bl	8008670 <reset_PID>
        reset_PID(&poshold_ratePID[i]);
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	4613      	mov	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4a13      	ldr	r2, [pc, #76]	; (8008b88 <GPS_reset_nav+0x98>)
 8008b3a:	4413      	add	r3, r2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff fd97 	bl	8008670 <reset_PID>
        reset_PID(&navPID[i]);
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	4613      	mov	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4a0f      	ldr	r2, [pc, #60]	; (8008b8c <GPS_reset_nav+0x9c>)
 8008b4e:	4413      	add	r3, r2
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7ff fd8d 	bl	8008670 <reset_PID>
    for (i = 0; i < 2; i++) {
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	607b      	str	r3, [r7, #4]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	ddcc      	ble.n	8008afc <GPS_reset_nav+0xc>
    }

    if (f.FIXED_WING)
 8008b62:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <GPS_reset_nav+0xa0>)
 8008b64:	7c1b      	ldrb	r3, [r3, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <GPS_reset_nav+0x7e>
        fw_nav_reset();
 8008b6a:	f7fe f9e5 	bl	8006f38 <fw_nav_reset>

}
 8008b6e:	bf00      	nop
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20001718 	.word	0x20001718
 8008b7c:	20001724 	.word	0x20001724
 8008b80:	20001720 	.word	0x20001720
 8008b84:	200011e8 	.word	0x200011e8
 8008b88:	20001210 	.word	0x20001210
 8008b8c:	20001238 	.word	0x20001238
 8008b90:	20001628 	.word	0x20001628

08008b94 <gpsSetPIDs>:

// Get the relevant P I D values and set the PID controllers
void gpsSetPIDs(void)
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
    posholdPID_PARAM.kP = (float)cfg.P8[PIDPOS] / 100.0f;
 8008b98:	4b50      	ldr	r3, [pc, #320]	; (8008cdc <gpsSetPIDs+0x148>)
 8008b9a:	795b      	ldrb	r3, [r3, #5]
 8008b9c:	ee07 3a90 	vmov	s15, r3
 8008ba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ba4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008ce0 <gpsSetPIDs+0x14c>
 8008ba8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008bac:	4b4d      	ldr	r3, [pc, #308]	; (8008ce4 <gpsSetPIDs+0x150>)
 8008bae:	edc3 7a00 	vstr	s15, [r3]
    posholdPID_PARAM.kI = (float)cfg.I8[PIDPOS] / 100.0f;
 8008bb2:	4b4a      	ldr	r3, [pc, #296]	; (8008cdc <gpsSetPIDs+0x148>)
 8008bb4:	7bdb      	ldrb	r3, [r3, #15]
 8008bb6:	ee07 3a90 	vmov	s15, r3
 8008bba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008bbe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008ce0 <gpsSetPIDs+0x14c>
 8008bc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008bc6:	4b47      	ldr	r3, [pc, #284]	; (8008ce4 <gpsSetPIDs+0x150>)
 8008bc8:	edc3 7a01 	vstr	s15, [r3, #4]
    posholdPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008bcc:	4b45      	ldr	r3, [pc, #276]	; (8008ce4 <gpsSetPIDs+0x150>)
 8008bce:	4a46      	ldr	r2, [pc, #280]	; (8008ce8 <gpsSetPIDs+0x154>)
 8008bd0:	60da      	str	r2, [r3, #12]

    poshold_ratePID_PARAM.kP = (float)cfg.P8[PIDPOSR] / 10.0f;
 8008bd2:	4b42      	ldr	r3, [pc, #264]	; (8008cdc <gpsSetPIDs+0x148>)
 8008bd4:	799b      	ldrb	r3, [r3, #6]
 8008bd6:	ee07 3a90 	vmov	s15, r3
 8008bda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008bde:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008be2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008be6:	4b41      	ldr	r3, [pc, #260]	; (8008cec <gpsSetPIDs+0x158>)
 8008be8:	edc3 7a00 	vstr	s15, [r3]
    poshold_ratePID_PARAM.kI = (float)cfg.I8[PIDPOSR] / 100.0f;
 8008bec:	4b3b      	ldr	r3, [pc, #236]	; (8008cdc <gpsSetPIDs+0x148>)
 8008bee:	7c1b      	ldrb	r3, [r3, #16]
 8008bf0:	ee07 3a90 	vmov	s15, r3
 8008bf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008bf8:	eddf 6a39 	vldr	s13, [pc, #228]	; 8008ce0 <gpsSetPIDs+0x14c>
 8008bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c00:	4b3a      	ldr	r3, [pc, #232]	; (8008cec <gpsSetPIDs+0x158>)
 8008c02:	edc3 7a01 	vstr	s15, [r3, #4]
    poshold_ratePID_PARAM.kD = (float)cfg.D8[PIDPOSR] / 1000.0f;
 8008c06:	4b35      	ldr	r3, [pc, #212]	; (8008cdc <gpsSetPIDs+0x148>)
 8008c08:	7e9b      	ldrb	r3, [r3, #26]
 8008c0a:	ee07 3a90 	vmov	s15, r3
 8008c0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c12:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008cf0 <gpsSetPIDs+0x15c>
 8008c16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c1a:	4b34      	ldr	r3, [pc, #208]	; (8008cec <gpsSetPIDs+0x158>)
 8008c1c:	edc3 7a02 	vstr	s15, [r3, #8]
    poshold_ratePID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008c20:	4b32      	ldr	r3, [pc, #200]	; (8008cec <gpsSetPIDs+0x158>)
 8008c22:	4a31      	ldr	r2, [pc, #196]	; (8008ce8 <gpsSetPIDs+0x154>)
 8008c24:	60da      	str	r2, [r3, #12]

    navPID_PARAM.kP = (float)cfg.P8[PIDNAVR] / 10.0f;
 8008c26:	4b2d      	ldr	r3, [pc, #180]	; (8008cdc <gpsSetPIDs+0x148>)
 8008c28:	79db      	ldrb	r3, [r3, #7]
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c32:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008c36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c3a:	4b2e      	ldr	r3, [pc, #184]	; (8008cf4 <gpsSetPIDs+0x160>)
 8008c3c:	edc3 7a00 	vstr	s15, [r3]
    navPID_PARAM.kI = (float)cfg.I8[PIDNAVR] / 100.0f;
 8008c40:	4b26      	ldr	r3, [pc, #152]	; (8008cdc <gpsSetPIDs+0x148>)
 8008c42:	7c5b      	ldrb	r3, [r3, #17]
 8008c44:	ee07 3a90 	vmov	s15, r3
 8008c48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c4c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008ce0 <gpsSetPIDs+0x14c>
 8008c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c54:	4b27      	ldr	r3, [pc, #156]	; (8008cf4 <gpsSetPIDs+0x160>)
 8008c56:	edc3 7a01 	vstr	s15, [r3, #4]
    navPID_PARAM.kD = (float)cfg.D8[PIDNAVR] / 1000.0f;
 8008c5a:	4b20      	ldr	r3, [pc, #128]	; (8008cdc <gpsSetPIDs+0x148>)
 8008c5c:	7edb      	ldrb	r3, [r3, #27]
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c66:	eddf 6a22 	vldr	s13, [pc, #136]	; 8008cf0 <gpsSetPIDs+0x15c>
 8008c6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c6e:	4b21      	ldr	r3, [pc, #132]	; (8008cf4 <gpsSetPIDs+0x160>)
 8008c70:	edc3 7a02 	vstr	s15, [r3, #8]
    navPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008c74:	4b1f      	ldr	r3, [pc, #124]	; (8008cf4 <gpsSetPIDs+0x160>)
 8008c76:	4a1c      	ldr	r2, [pc, #112]	; (8008ce8 <gpsSetPIDs+0x154>)
 8008c78:	60da      	str	r2, [r3, #12]

    if (f.FIXED_WING) {
 8008c7a:	4b1f      	ldr	r3, [pc, #124]	; (8008cf8 <gpsSetPIDs+0x164>)
 8008c7c:	7c1b      	ldrb	r3, [r3, #16]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d026      	beq.n	8008cd0 <gpsSetPIDs+0x13c>
        altPID_PARAM.kP   = (float)cfg.P8[PIDALT] / 10.0f;
 8008c82:	4b16      	ldr	r3, [pc, #88]	; (8008cdc <gpsSetPIDs+0x148>)
 8008c84:	791b      	ldrb	r3, [r3, #4]
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c8e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008c92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c96:	4b19      	ldr	r3, [pc, #100]	; (8008cfc <gpsSetPIDs+0x168>)
 8008c98:	edc3 7a00 	vstr	s15, [r3]
        altPID_PARAM.kI   = (float)cfg.I8[PIDALT] / 100.0f;
 8008c9c:	4b0f      	ldr	r3, [pc, #60]	; (8008cdc <gpsSetPIDs+0x148>)
 8008c9e:	7b9b      	ldrb	r3, [r3, #14]
 8008ca0:	ee07 3a90 	vmov	s15, r3
 8008ca4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ca8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8008ce0 <gpsSetPIDs+0x14c>
 8008cac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cb0:	4b12      	ldr	r3, [pc, #72]	; (8008cfc <gpsSetPIDs+0x168>)
 8008cb2:	edc3 7a01 	vstr	s15, [r3, #4]
        altPID_PARAM.kD   = (float)cfg.D8[PIDALT] / 1000.0f;
 8008cb6:	4b09      	ldr	r3, [pc, #36]	; (8008cdc <gpsSetPIDs+0x148>)
 8008cb8:	7e1b      	ldrb	r3, [r3, #24]
 8008cba:	ee07 3a90 	vmov	s15, r3
 8008cbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cc2:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008cf0 <gpsSetPIDs+0x15c>
 8008cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cca:	4b0c      	ldr	r3, [pc, #48]	; (8008cfc <gpsSetPIDs+0x168>)
 8008ccc:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8008cd0:	bf00      	nop
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	20000d18 	.word	0x20000d18
 8008ce0:	42c80000 	.word	0x42c80000
 8008ce4:	200011a8 	.word	0x200011a8
 8008ce8:	44fa0000 	.word	0x44fa0000
 8008cec:	200011b8 	.word	0x200011b8
 8008cf0:	447a0000 	.word	0x447a0000
 8008cf4:	200011c8 	.word	0x200011c8
 8008cf8:	20001628 	.word	0x20001628
 8008cfc:	200011d8 	.word	0x200011d8

08008d00 <_EvtPrintFrame>:

static void _EvtPrintFrame(char* p_frame)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
    actLed0State(ON);
 8008d08:	2001      	movs	r0, #1
 8008d0a:	f7f9 f9a5 	bl	8002058 <actLed0State>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_NONE, p_frame);
 8008d0e:	6879      	ldr	r1, [r7, #4]
 8008d10:	2000      	movs	r0, #0
 8008d12:	f00a fd07 	bl	8013724 <pifLog_Print>
#else
    (void)p_frame;
#endif
    actLed0State(OFF);
 8008d16:	2000      	movs	r0, #0
 8008d18:	f7f9 f99e 	bl	8002058 <actLed0State>
}
 8008d1c:	bf00      	nop
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <gpsSetPassthrough>:

int8_t gpsSetPassthrough(void)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
    static bool state = false;
	PifGps* p_gps;

    if (gpsData.state != GPS_RECEIVINGDATA)
 8008d2a:	4b1c      	ldr	r3, [pc, #112]	; (8008d9c <gpsSetPassthrough+0x78>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2b05      	cmp	r3, #5
 8008d30:	d002      	beq.n	8008d38 <gpsSetPassthrough+0x14>
        return -1;
 8008d32:	f04f 33ff 	mov.w	r3, #4294967295
 8008d36:	e02d      	b.n	8008d94 <gpsSetPassthrough+0x70>

    actLed0State(OFF);
 8008d38:	2000      	movs	r0, #0
 8008d3a:	f7f9 f98d 	bl	8002058 <actLed0State>
    actLed1State(OFF);
 8008d3e:	2000      	movs	r0, #0
 8008d40:	f7f9 f9b6 	bl	80020b0 <actLed1State>

    if (mcfg.gps_type == GPS_NMEA) {
 8008d44:	4b16      	ldr	r3, [pc, #88]	; (8008da0 <gpsSetPassthrough+0x7c>)
 8008d46:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d120      	bne.n	8008d90 <gpsSetPassthrough+0x6c>
		p_gps = (gpsInitData[gpsData.baudrateIndex].baudrate == 9600) ? &gps_nmea._gps : &gps_ublox._gps;
 8008d4e:	4b13      	ldr	r3, [pc, #76]	; (8008d9c <gpsSetPassthrough+0x78>)
 8008d50:	785b      	ldrb	r3, [r3, #1]
 8008d52:	4a14      	ldr	r2, [pc, #80]	; (8008da4 <gpsSetPassthrough+0x80>)
 8008d54:	00db      	lsls	r3, r3, #3
 8008d56:	4413      	add	r3, r2
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8008d5e:	d101      	bne.n	8008d64 <gpsSetPassthrough+0x40>
 8008d60:	4b11      	ldr	r3, [pc, #68]	; (8008da8 <gpsSetPassthrough+0x84>)
 8008d62:	e000      	b.n	8008d66 <gpsSetPassthrough+0x42>
 8008d64:	4b11      	ldr	r3, [pc, #68]	; (8008dac <gpsSetPassthrough+0x88>)
 8008d66:	607b      	str	r3, [r7, #4]
        if (state) {
 8008d68:	4b11      	ldr	r3, [pc, #68]	; (8008db0 <gpsSetPassthrough+0x8c>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d007      	beq.n	8008d80 <gpsSetPassthrough+0x5c>
            p_gps->evt_frame = NULL;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	609a      	str	r2, [r3, #8]
            state = false;
 8008d76:	4b0e      	ldr	r3, [pc, #56]	; (8008db0 <gpsSetPassthrough+0x8c>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	701a      	strb	r2, [r3, #0]
            return 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	e009      	b.n	8008d94 <gpsSetPassthrough+0x70>
        }
        else {
            p_gps->evt_frame = _EvtPrintFrame;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a0c      	ldr	r2, [pc, #48]	; (8008db4 <gpsSetPassthrough+0x90>)
 8008d84:	609a      	str	r2, [r3, #8]
            state = true;
 8008d86:	4b0a      	ldr	r3, [pc, #40]	; (8008db0 <gpsSetPassthrough+0x8c>)
 8008d88:	2201      	movs	r2, #1
 8008d8a:	701a      	strb	r2, [r3, #0]
            return 1;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e001      	b.n	8008d94 <gpsSetPassthrough+0x70>
        }
    }
    return -1;
 8008d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	20000e94 	.word	0x20000e94
 8008da0:	200007ac 	.word	0x200007ac
 8008da4:	08028c80 	.word	0x08028c80
 8008da8:	20000eb8 	.word	0x20000eb8
 8008dac:	20000f38 	.word	0x20000f38
 8008db0:	200012e8 	.word	0x200012e8
 8008db4:	08008d01 	.word	0x08008d01

08008db8 <GPS_calc_longitude_scaling>:
////////////////////////////////////////////////////////////////////////////////////
// this is used to offset the shrinking longitude as we go towards the poles
// It's ok to calculate this once per waypoint setting, since it changes a little within the reach of a multicopter
//
static void GPS_calc_longitude_scaling(int32_t lat)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
    float rads = (abs((float)lat) / 10000000.0f) * 0.0174532925f;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	ee07 3a90 	vmov	s15, r3
 8008dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd2:	dd05      	ble.n	8008de0 <GPS_calc_longitude_scaling+0x28>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	ee07 3a90 	vmov	s15, r3
 8008dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dde:	e006      	b.n	8008dee <GPS_calc_longitude_scaling+0x36>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dea:	eef1 7a67 	vneg.f32	s15, s15
 8008dee:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008e1c <GPS_calc_longitude_scaling+0x64>
 8008df2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008df6:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008e20 <GPS_calc_longitude_scaling+0x68>
 8008dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dfe:	edc7 7a03 	vstr	s15, [r7, #12]
    GPS_scaleLonDown = cosf(rads);
 8008e02:	ed97 0a03 	vldr	s0, [r7, #12]
 8008e06:	f01a fd1f 	bl	8023848 <cosf>
 8008e0a:	eef0 7a40 	vmov.f32	s15, s0
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <GPS_calc_longitude_scaling+0x6c>)
 8008e10:	edc3 7a00 	vstr	s15, [r3]
}
 8008e14:	bf00      	nop
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	4b189680 	.word	0x4b189680
 8008e20:	3c8efa35 	.word	0x3c8efa35
 8008e24:	20000028 	.word	0x20000028

08008e28 <GPS_set_next_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Sets the waypoint to navigate, reset neccessary variables and calculate initial values
//
void GPS_set_next_wp(int32_t *lat, int32_t *lon)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af02      	add	r7, sp, #8
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
    GPS_WP[LAT] = *lat;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a19      	ldr	r2, [pc, #100]	; (8008e9c <GPS_set_next_wp+0x74>)
 8008e38:	6013      	str	r3, [r2, #0]
    GPS_WP[LON] = *lon;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a17      	ldr	r2, [pc, #92]	; (8008e9c <GPS_set_next_wp+0x74>)
 8008e40:	6053      	str	r3, [r2, #4]

    GPS_calc_longitude_scaling(*lat);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7ff ffb6 	bl	8008db8 <GPS_calc_longitude_scaling>
    if (f.CRUISE_MODE)
 8008e4c:	4b14      	ldr	r3, [pc, #80]	; (8008ea0 <GPS_set_next_wp+0x78>)
 8008e4e:	7d1b      	ldrb	r3, [r3, #20]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <GPS_set_next_wp+0x30>
        fw_FlyTo();  // PatrikE CruiseMode version
 8008e54:	f7fe f8ac 	bl	8006fb0 <fw_FlyTo>

    GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008e58:	4b12      	ldr	r3, [pc, #72]	; (8008ea4 <GPS_set_next_wp+0x7c>)
 8008e5a:	9301      	str	r3, [sp, #4]
 8008e5c:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <GPS_set_next_wp+0x80>)
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	4b12      	ldr	r3, [pc, #72]	; (8008eac <GPS_set_next_wp+0x84>)
 8008e62:	4a0e      	ldr	r2, [pc, #56]	; (8008e9c <GPS_set_next_wp+0x74>)
 8008e64:	4912      	ldr	r1, [pc, #72]	; (8008eb0 <GPS_set_next_wp+0x88>)
 8008e66:	4813      	ldr	r0, [pc, #76]	; (8008eb4 <GPS_set_next_wp+0x8c>)
 8008e68:	f000 f84e 	bl	8008f08 <GPS_distance_cm_bearing>

    nav_bearing = target_bearing;
 8008e6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ea4 <GPS_set_next_wp+0x7c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a11      	ldr	r2, [pc, #68]	; (8008eb8 <GPS_set_next_wp+0x90>)
 8008e72:	6013      	str	r3, [r2, #0]
    GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008e74:	4b0e      	ldr	r3, [pc, #56]	; (8008eb0 <GPS_set_next_wp+0x88>)
 8008e76:	4a0f      	ldr	r2, [pc, #60]	; (8008eb4 <GPS_set_next_wp+0x8c>)
 8008e78:	490c      	ldr	r1, [pc, #48]	; (8008eac <GPS_set_next_wp+0x84>)
 8008e7a:	4808      	ldr	r0, [pc, #32]	; (8008e9c <GPS_set_next_wp+0x74>)
 8008e7c:	f000 f934 	bl	80090e8 <GPS_calc_location_error>
    original_target_bearing = target_bearing;
 8008e80:	4b08      	ldr	r3, [pc, #32]	; (8008ea4 <GPS_set_next_wp+0x7c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a0d      	ldr	r2, [pc, #52]	; (8008ebc <GPS_set_next_wp+0x94>)
 8008e86:	6013      	str	r3, [r2, #0]
    waypoint_speed_gov = cfg.nav_speed_min;
 8008e88:	4b0d      	ldr	r3, [pc, #52]	; (8008ec0 <GPS_set_next_wp+0x98>)
 8008e8a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8008e8e:	b21a      	sxth	r2, r3
 8008e90:	4b0c      	ldr	r3, [pc, #48]	; (8008ec4 <GPS_set_next_wp+0x9c>)
 8008e92:	801a      	strh	r2, [r3, #0]
}
 8008e94:	bf00      	nop
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	20001274 	.word	0x20001274
 8008ea0:	20001628 	.word	0x20001628
 8008ea4:	2000127c 	.word	0x2000127c
 8008ea8:	20001288 	.word	0x20001288
 8008eac:	20001278 	.word	0x20001278
 8008eb0:	200016f0 	.word	0x200016f0
 8008eb4:	200016ec 	.word	0x200016ec
 8008eb8:	200012dc 	.word	0x200012dc
 8008ebc:	20001280 	.word	0x20001280
 8008ec0:	20000d18 	.word	0x20000d18
 8008ec4:	2000128c 	.word	0x2000128c

08008ec8 <check_missed_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Check if we missed the destination somehow
//
static bool check_missed_wp(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
    int32_t temp;
    temp = target_bearing - original_target_bearing;
 8008ece:	4b0c      	ldr	r3, [pc, #48]	; (8008f00 <check_missed_wp+0x38>)
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	4b0c      	ldr	r3, [pc, #48]	; (8008f04 <check_missed_wp+0x3c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	607b      	str	r3, [r7, #4]
    temp = wrap_18000(temp);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fb9a 	bl	8009614 <wrap_18000>
 8008ee0:	6078      	str	r0, [r7, #4]
    return (abs(temp) > 10000); // we passed the waypoint by 100 degrees
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	bfb8      	it	lt
 8008ee8:	425b      	neglt	r3, r3
 8008eea:	f242 7210 	movw	r2, #10000	; 0x2710
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	bfcc      	ite	gt
 8008ef2:	2301      	movgt	r3, #1
 8008ef4:	2300      	movle	r3, #0
 8008ef6:	b2db      	uxtb	r3, r3
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	2000127c 	.word	0x2000127c
 8008f04:	20001280 	.word	0x20001280

08008f08 <GPS_distance_cm_bearing>:

////////////////////////////////////////////////////////////////////////////////////
// Get distance between two points in cm
// Get bearing from pos1 to pos2, returns an 1deg = 100 precision
static void GPS_distance_cm_bearing(int32_t *lat1, int32_t *lon1, int32_t *lat2, int32_t *lon2, int32_t *dist, int32_t *bearing)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	603b      	str	r3, [r7, #0]
    float dLat = *lat2 - *lat1; // difference of latitude in 1/10 000 000 degrees
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	ee07 3a90 	vmov	s15, r3
 8008f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f28:	edc7 7a05 	vstr	s15, [r7, #20]
    float dLon = (float)(*lon2 - *lon1) * GPS_scaleLonDown;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	ee07 3a90 	vmov	s15, r3
 8008f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f3e:	4b25      	ldr	r3, [pc, #148]	; (8008fd4 <GPS_distance_cm_bearing+0xcc>)
 8008f40:	edd3 7a00 	vldr	s15, [r3]
 8008f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f48:	edc7 7a04 	vstr	s15, [r7, #16]
    *dist = sqrtf(sq(dLat) + sq(dLon)) * 1.113195f;
 8008f4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f50:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008f54:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f60:	eeb0 0a67 	vmov.f32	s0, s15
 8008f64:	f01a fdc0 	bl	8023ae8 <sqrtf>
 8008f68:	eef0 7a40 	vmov.f32	s15, s0
 8008f6c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008fd8 <GPS_distance_cm_bearing+0xd0>
 8008f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f78:	ee17 2a90 	vmov	r2, s15
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	601a      	str	r2, [r3, #0]

    *bearing = 9000.0f + atan2f(-dLat, dLon) * 5729.57795f;      // Convert the output radians to 100xdeg
 8008f80:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f84:	eef1 7a67 	vneg.f32	s15, s15
 8008f88:	edd7 0a04 	vldr	s1, [r7, #16]
 8008f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8008f90:	f01a fd50 	bl	8023a34 <atan2f>
 8008f94:	eef0 7a40 	vmov.f32	s15, s0
 8008f98:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008fdc <GPS_distance_cm_bearing+0xd4>
 8008f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fa0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8008fe0 <GPS_distance_cm_bearing+0xd8>
 8008fa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fac:	ee17 2a90 	vmov	r2, s15
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	601a      	str	r2, [r3, #0]
    if (*bearing < 0)
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	da06      	bge.n	8008fca <GPS_distance_cm_bearing+0xc2>
        *bearing += 36000;
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8008fc4:	33a0      	adds	r3, #160	; 0xa0
 8008fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc8:	6013      	str	r3, [r2, #0]
}
 8008fca:	bf00      	nop
 8008fcc:	3718      	adds	r7, #24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20000028 	.word	0x20000028
 8008fd8:	3f8e7d2c 	.word	0x3f8e7d2c
 8008fdc:	45b30ca0 	.word	0x45b30ca0
 8008fe0:	460ca000 	.word	0x460ca000

08008fe4 <GPS_calc_velocity>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate our current speed vector from gps position data
//
static void GPS_calc_velocity(void)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
    static int32_t last[2] = { 0, 0 };
    static uint8_t init = 0;
    // y_GPS_speed positve = Up
    // x_GPS_speed positve = Right

    if (init) {
 8008fea:	4b38      	ldr	r3, [pc, #224]	; (80090cc <GPS_calc_velocity+0xe8>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d05b      	beq.n	80090aa <GPS_calc_velocity+0xc6>
        float tmp = 1.0f / dTnav;
 8008ff2:	4b37      	ldr	r3, [pc, #220]	; (80090d0 <GPS_calc_velocity+0xec>)
 8008ff4:	ed93 7a00 	vldr	s14, [r3]
 8008ff8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009000:	edc7 7a01 	vstr	s15, [r7, #4]
        actual_speed[GPS_X] = (float)(GPS_coord[LON] - last[LON]) * GPS_scaleLonDown * tmp;
 8009004:	4b33      	ldr	r3, [pc, #204]	; (80090d4 <GPS_calc_velocity+0xf0>)
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	4b33      	ldr	r3, [pc, #204]	; (80090d8 <GPS_calc_velocity+0xf4>)
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	ee07 3a90 	vmov	s15, r3
 8009012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009016:	4b31      	ldr	r3, [pc, #196]	; (80090dc <GPS_calc_velocity+0xf8>)
 8009018:	edd3 7a00 	vldr	s15, [r3]
 800901c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009020:	edd7 7a01 	vldr	s15, [r7, #4]
 8009024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800902c:	ee17 3a90 	vmov	r3, s15
 8009030:	b21a      	sxth	r2, r3
 8009032:	4b2b      	ldr	r3, [pc, #172]	; (80090e0 <GPS_calc_velocity+0xfc>)
 8009034:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (float)(GPS_coord[LAT] - last[LAT]) * tmp;
 8009036:	4b27      	ldr	r3, [pc, #156]	; (80090d4 <GPS_calc_velocity+0xf0>)
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	4b27      	ldr	r3, [pc, #156]	; (80090d8 <GPS_calc_velocity+0xf4>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	ee07 3a90 	vmov	s15, r3
 8009044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009048:	edd7 7a01 	vldr	s15, [r7, #4]
 800904c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009054:	ee17 3a90 	vmov	r3, s15
 8009058:	b21a      	sxth	r2, r3
 800905a:	4b21      	ldr	r3, [pc, #132]	; (80090e0 <GPS_calc_velocity+0xfc>)
 800905c:	801a      	strh	r2, [r3, #0]

        actual_speed[GPS_X] = (actual_speed[GPS_X] + speed_old[GPS_X]) / 2;
 800905e:	4b20      	ldr	r3, [pc, #128]	; (80090e0 <GPS_calc_velocity+0xfc>)
 8009060:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009064:	461a      	mov	r2, r3
 8009066:	4b1f      	ldr	r3, [pc, #124]	; (80090e4 <GPS_calc_velocity+0x100>)
 8009068:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800906c:	4413      	add	r3, r2
 800906e:	0fda      	lsrs	r2, r3, #31
 8009070:	4413      	add	r3, r2
 8009072:	105b      	asrs	r3, r3, #1
 8009074:	b21a      	sxth	r2, r3
 8009076:	4b1a      	ldr	r3, [pc, #104]	; (80090e0 <GPS_calc_velocity+0xfc>)
 8009078:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (actual_speed[GPS_Y] + speed_old[GPS_Y]) / 2;
 800907a:	4b19      	ldr	r3, [pc, #100]	; (80090e0 <GPS_calc_velocity+0xfc>)
 800907c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009080:	461a      	mov	r2, r3
 8009082:	4b18      	ldr	r3, [pc, #96]	; (80090e4 <GPS_calc_velocity+0x100>)
 8009084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009088:	4413      	add	r3, r2
 800908a:	0fda      	lsrs	r2, r3, #31
 800908c:	4413      	add	r3, r2
 800908e:	105b      	asrs	r3, r3, #1
 8009090:	b21a      	sxth	r2, r3
 8009092:	4b13      	ldr	r3, [pc, #76]	; (80090e0 <GPS_calc_velocity+0xfc>)
 8009094:	801a      	strh	r2, [r3, #0]

        speed_old[GPS_X] = actual_speed[GPS_X];
 8009096:	4b12      	ldr	r3, [pc, #72]	; (80090e0 <GPS_calc_velocity+0xfc>)
 8009098:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800909c:	4b11      	ldr	r3, [pc, #68]	; (80090e4 <GPS_calc_velocity+0x100>)
 800909e:	805a      	strh	r2, [r3, #2]
        speed_old[GPS_Y] = actual_speed[GPS_Y];
 80090a0:	4b0f      	ldr	r3, [pc, #60]	; (80090e0 <GPS_calc_velocity+0xfc>)
 80090a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80090a6:	4b0f      	ldr	r3, [pc, #60]	; (80090e4 <GPS_calc_velocity+0x100>)
 80090a8:	801a      	strh	r2, [r3, #0]
    }
    init = 1;
 80090aa:	4b08      	ldr	r3, [pc, #32]	; (80090cc <GPS_calc_velocity+0xe8>)
 80090ac:	2201      	movs	r2, #1
 80090ae:	701a      	strb	r2, [r3, #0]

    last[LON] = GPS_coord[LON];
 80090b0:	4b08      	ldr	r3, [pc, #32]	; (80090d4 <GPS_calc_velocity+0xf0>)
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	4a08      	ldr	r2, [pc, #32]	; (80090d8 <GPS_calc_velocity+0xf4>)
 80090b6:	6053      	str	r3, [r2, #4]
    last[LAT] = GPS_coord[LAT];
 80090b8:	4b06      	ldr	r3, [pc, #24]	; (80090d4 <GPS_calc_velocity+0xf0>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a06      	ldr	r2, [pc, #24]	; (80090d8 <GPS_calc_velocity+0xf4>)
 80090be:	6013      	str	r3, [r2, #0]
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	200012e9 	.word	0x200012e9
 80090d0:	20001260 	.word	0x20001260
 80090d4:	200016ec 	.word	0x200016ec
 80090d8:	200012ec 	.word	0x200012ec
 80090dc:	20000028 	.word	0x20000028
 80090e0:	20001264 	.word	0x20001264
 80090e4:	200012f4 	.word	0x200012f4

080090e8 <GPS_calc_location_error>:
//      1800    = 19.80m = 60 feet
//      3000    = 33m
//      10000   = 111m
//
static void GPS_calc_location_error(int32_t *target_lat, int32_t *target_lng, int32_t *gps_lat, int32_t *gps_lng)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	603b      	str	r3, [r7, #0]
    error[LON] = (float)(*target_lng - *gps_lng) * GPS_scaleLonDown;   // X Error
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	ee07 3a90 	vmov	s15, r3
 8009104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009108:	4b0b      	ldr	r3, [pc, #44]	; (8009138 <GPS_calc_location_error+0x50>)
 800910a:	edd3 7a00 	vldr	s15, [r3]
 800910e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009116:	ee17 2a90 	vmov	r2, s15
 800911a:	4b08      	ldr	r3, [pc, #32]	; (800913c <GPS_calc_location_error+0x54>)
 800911c:	605a      	str	r2, [r3, #4]
    error[LAT] = *target_lat - *gps_lat;        // Y Error
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	4a04      	ldr	r2, [pc, #16]	; (800913c <GPS_calc_location_error+0x54>)
 800912a:	6013      	str	r3, [r2, #0]
}
 800912c:	bf00      	nop
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	20000028 	.word	0x20000028
 800913c:	2000126c 	.word	0x2000126c

08009140 <GPS_calc_poshold>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate nav_lat and nav_lon from the x and y error and the speed
//
static void GPS_calc_poshold(void)
{
 8009140:	b590      	push	{r4, r7, lr}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
    int32_t d;
    int32_t target_speed;
    int axis;

    for (axis = 0; axis < 2; axis++) {
 8009146:	2300      	movs	r3, #0
 8009148:	60bb      	str	r3, [r7, #8]
 800914a:	e092      	b.n	8009272 <GPS_calc_poshold+0x132>
        target_speed = get_P(error[axis], &posholdPID_PARAM);       // calculate desired speed from lon error
 800914c:	4a4d      	ldr	r2, [pc, #308]	; (8009284 <GPS_calc_poshold+0x144>)
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009154:	494c      	ldr	r1, [pc, #304]	; (8009288 <GPS_calc_poshold+0x148>)
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff f990 	bl	800847c <get_P>
 800915c:	6078      	str	r0, [r7, #4]
        rate_error[axis] = target_speed - actual_speed[axis];       // calc the speed error
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	b29a      	uxth	r2, r3
 8009162:	494a      	ldr	r1, [pc, #296]	; (800928c <GPS_calc_poshold+0x14c>)
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800916a:	b29b      	uxth	r3, r3
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	b29b      	uxth	r3, r3
 8009170:	b219      	sxth	r1, r3
 8009172:	4a47      	ldr	r2, [pc, #284]	; (8009290 <GPS_calc_poshold+0x150>)
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 800917a:	4a45      	ldr	r2, [pc, #276]	; (8009290 <GPS_calc_poshold+0x150>)
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009182:	4944      	ldr	r1, [pc, #272]	; (8009294 <GPS_calc_poshold+0x154>)
 8009184:	4618      	mov	r0, r3
 8009186:	f7ff f979 	bl	800847c <get_P>
 800918a:	4603      	mov	r3, r0
 800918c:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 800918e:	4a40      	ldr	r2, [pc, #256]	; (8009290 <GPS_calc_poshold+0x150>)
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009196:	4619      	mov	r1, r3
 8009198:	4a3a      	ldr	r2, [pc, #232]	; (8009284 <GPS_calc_poshold+0x144>)
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091a0:	18c8      	adds	r0, r1, r3
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	4613      	mov	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4a3a      	ldr	r2, [pc, #232]	; (8009298 <GPS_calc_poshold+0x158>)
 80091ae:	441a      	add	r2, r3
 80091b0:	4b38      	ldr	r3, [pc, #224]	; (8009294 <GPS_calc_poshold+0x154>)
 80091b2:	493a      	ldr	r1, [pc, #232]	; (800929c <GPS_calc_poshold+0x15c>)
 80091b4:	f7ff f97b 	bl	80084ae <get_I>
 80091b8:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	4423      	add	r3, r4
 80091be:	b29b      	uxth	r3, r3
 80091c0:	b219      	sxth	r1, r3
 80091c2:	4a37      	ldr	r2, [pc, #220]	; (80092a0 <GPS_calc_poshold+0x160>)
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        d = get_D(error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 80091ca:	4a2e      	ldr	r2, [pc, #184]	; (8009284 <GPS_calc_poshold+0x144>)
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	4613      	mov	r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4a2e      	ldr	r2, [pc, #184]	; (8009298 <GPS_calc_poshold+0x158>)
 80091de:	441a      	add	r2, r3
 80091e0:	4b2c      	ldr	r3, [pc, #176]	; (8009294 <GPS_calc_poshold+0x154>)
 80091e2:	492e      	ldr	r1, [pc, #184]	; (800929c <GPS_calc_poshold+0x15c>)
 80091e4:	f7ff f9ac 	bl	8008540 <get_D>
 80091e8:	60f8      	str	r0, [r7, #12]
        d = constrain(d, -2000, 2000);
 80091ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80091ee:	492d      	ldr	r1, [pc, #180]	; (80092a4 <GPS_calc_poshold+0x164>)
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f7fa fccd 	bl	8003b90 <constrain>
 80091f6:	60f8      	str	r0, [r7, #12]

        // get rid of noise
#if defined(GPS_LOW_SPEED_D_FILTER)
        if (abs(actual_speed[axis]) < 50)
 80091f8:	4a24      	ldr	r2, [pc, #144]	; (800928c <GPS_calc_poshold+0x14c>)
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009200:	2b00      	cmp	r3, #0
 8009202:	bfb8      	it	lt
 8009204:	425b      	neglt	r3, r3
 8009206:	b29b      	uxth	r3, r3
 8009208:	2b31      	cmp	r3, #49	; 0x31
 800920a:	d801      	bhi.n	8009210 <GPS_calc_poshold+0xd0>
            d = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	60fb      	str	r3, [r7, #12]
#endif

        nav[axis] += d;
 8009210:	4a23      	ldr	r2, [pc, #140]	; (80092a0 <GPS_calc_poshold+0x160>)
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009218:	b29a      	uxth	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	b29b      	uxth	r3, r3
 800921e:	4413      	add	r3, r2
 8009220:	b29b      	uxth	r3, r3
 8009222:	b219      	sxth	r1, r3
 8009224:	4a1e      	ldr	r2, [pc, #120]	; (80092a0 <GPS_calc_poshold+0x160>)
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 800922c:	4a1c      	ldr	r2, [pc, #112]	; (80092a0 <GPS_calc_poshold+0x160>)
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009234:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009238:	491b      	ldr	r1, [pc, #108]	; (80092a8 <GPS_calc_poshold+0x168>)
 800923a:	4618      	mov	r0, r3
 800923c:	f7fa fca8 	bl	8003b90 <constrain>
 8009240:	4603      	mov	r3, r0
 8009242:	b219      	sxth	r1, r3
 8009244:	4a16      	ldr	r2, [pc, #88]	; (80092a0 <GPS_calc_poshold+0x160>)
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navPID[axis].integrator = poshold_ratePID[axis].integrator;
 800924c:	4912      	ldr	r1, [pc, #72]	; (8009298 <GPS_calc_poshold+0x158>)
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	4613      	mov	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4413      	add	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	440b      	add	r3, r1
 800925a:	6819      	ldr	r1, [r3, #0]
 800925c:	4813      	ldr	r0, [pc, #76]	; (80092ac <GPS_calc_poshold+0x16c>)
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	4613      	mov	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4403      	add	r3, r0
 800926a:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	3301      	adds	r3, #1
 8009270:	60bb      	str	r3, [r7, #8]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b01      	cmp	r3, #1
 8009276:	f77f af69 	ble.w	800914c <GPS_calc_poshold+0xc>
    }
}
 800927a:	bf00      	nop
 800927c:	bf00      	nop
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	bd90      	pop	{r4, r7, pc}
 8009284:	2000126c 	.word	0x2000126c
 8009288:	200011a8 	.word	0x200011a8
 800928c:	20001264 	.word	0x20001264
 8009290:	20001268 	.word	0x20001268
 8009294:	200011b8 	.word	0x200011b8
 8009298:	20001210 	.word	0x20001210
 800929c:	20001260 	.word	0x20001260
 80092a0:	20001720 	.word	0x20001720
 80092a4:	fffff830 	.word	0xfffff830
 80092a8:	fffff448 	.word	0xfffff448
 80092ac:	20001238 	.word	0x20001238

080092b0 <GPS_calc_nav_rate>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate the desired nav_lat and nav_lon for distance flying such as RTH
//
static void GPS_calc_nav_rate(int max_speed)
{
 80092b0:	b590      	push	{r4, r7, lr}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
    float trig[2];
    float temp;
    int axis;

    // push us towards the original track
    GPS_update_crosstrack();
 80092b8:	f000 f8cc 	bl	8009454 <GPS_update_crosstrack>

    // nav_bearing includes crosstrack
    temp = (9000l - nav_bearing) * RADX100;
 80092bc:	4b5a      	ldr	r3, [pc, #360]	; (8009428 <GPS_calc_nav_rate+0x178>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 80092c4:	3328      	adds	r3, #40	; 0x28
 80092c6:	ee07 3a90 	vmov	s15, r3
 80092ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092ce:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800942c <GPS_calc_nav_rate+0x17c>
 80092d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092d6:	edc7 7a04 	vstr	s15, [r7, #16]
    trig[GPS_X] = cosf(temp);
 80092da:	ed97 0a04 	vldr	s0, [r7, #16]
 80092de:	f01a fab3 	bl	8023848 <cosf>
 80092e2:	eef0 7a40 	vmov.f32	s15, s0
 80092e6:	edc7 7a03 	vstr	s15, [r7, #12]
    trig[GPS_Y] = sinf(temp);
 80092ea:	ed97 0a04 	vldr	s0, [r7, #16]
 80092ee:	f01a fb2f 	bl	8023950 <sinf>
 80092f2:	eef0 7a40 	vmov.f32	s15, s0
 80092f6:	edc7 7a02 	vstr	s15, [r7, #8]

    for (axis = 0; axis < 2; axis++) {
 80092fa:	2300      	movs	r3, #0
 80092fc:	617b      	str	r3, [r7, #20]
 80092fe:	e08a      	b.n	8009416 <GPS_calc_nav_rate+0x166>
        rate_error[axis] = (trig[axis] * max_speed) - actual_speed[axis];
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	3318      	adds	r3, #24
 8009306:	443b      	add	r3, r7
 8009308:	3b10      	subs	r3, #16
 800930a:	ed93 7a00 	vldr	s14, [r3]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	ee07 3a90 	vmov	s15, r3
 8009314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009318:	ee27 7a27 	vmul.f32	s14, s14, s15
 800931c:	4a44      	ldr	r2, [pc, #272]	; (8009430 <GPS_calc_nav_rate+0x180>)
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009324:	ee07 3a90 	vmov	s15, r3
 8009328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800932c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009334:	ee17 3a90 	vmov	r3, s15
 8009338:	b219      	sxth	r1, r3
 800933a:	4a3e      	ldr	r2, [pc, #248]	; (8009434 <GPS_calc_nav_rate+0x184>)
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        rate_error[axis] = constrain(rate_error[axis], -1000, 1000);
 8009342:	4a3c      	ldr	r2, [pc, #240]	; (8009434 <GPS_calc_nav_rate+0x184>)
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800934a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800934e:	493a      	ldr	r1, [pc, #232]	; (8009438 <GPS_calc_nav_rate+0x188>)
 8009350:	4618      	mov	r0, r3
 8009352:	f7fa fc1d 	bl	8003b90 <constrain>
 8009356:	4603      	mov	r3, r0
 8009358:	b219      	sxth	r1, r3
 800935a:	4a36      	ldr	r2, [pc, #216]	; (8009434 <GPS_calc_nav_rate+0x184>)
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // P + I + D
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 8009362:	4a34      	ldr	r2, [pc, #208]	; (8009434 <GPS_calc_nav_rate+0x184>)
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800936a:	4934      	ldr	r1, [pc, #208]	; (800943c <GPS_calc_nav_rate+0x18c>)
 800936c:	4618      	mov	r0, r3
 800936e:	f7ff f885 	bl	800847c <get_P>
 8009372:	4603      	mov	r3, r0
 8009374:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 8009376:	4a2f      	ldr	r2, [pc, #188]	; (8009434 <GPS_calc_nav_rate+0x184>)
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800937e:	4618      	mov	r0, r3
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4a2d      	ldr	r2, [pc, #180]	; (8009440 <GPS_calc_nav_rate+0x190>)
 800938c:	441a      	add	r2, r3
 800938e:	4b2b      	ldr	r3, [pc, #172]	; (800943c <GPS_calc_nav_rate+0x18c>)
 8009390:	492c      	ldr	r1, [pc, #176]	; (8009444 <GPS_calc_nav_rate+0x194>)
 8009392:	f7ff f88c 	bl	80084ae <get_I>
 8009396:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 8009398:	b29b      	uxth	r3, r3
 800939a:	4423      	add	r3, r4
 800939c:	b29c      	uxth	r4, r3
                    get_D(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM);
 800939e:	4a25      	ldr	r2, [pc, #148]	; (8009434 <GPS_calc_nav_rate+0x184>)
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80093a6:	4618      	mov	r0, r3
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	4613      	mov	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4a23      	ldr	r2, [pc, #140]	; (8009440 <GPS_calc_nav_rate+0x190>)
 80093b4:	441a      	add	r2, r3
 80093b6:	4b21      	ldr	r3, [pc, #132]	; (800943c <GPS_calc_nav_rate+0x18c>)
 80093b8:	4922      	ldr	r1, [pc, #136]	; (8009444 <GPS_calc_nav_rate+0x194>)
 80093ba:	f7ff f8c1 	bl	8008540 <get_D>
 80093be:	4603      	mov	r3, r0
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	4423      	add	r3, r4
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	b219      	sxth	r1, r3
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 80093c8:	4a1f      	ldr	r2, [pc, #124]	; (8009448 <GPS_calc_nav_rate+0x198>)
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 80093d0:	4a1d      	ldr	r2, [pc, #116]	; (8009448 <GPS_calc_nav_rate+0x198>)
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80093d8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80093dc:	491b      	ldr	r1, [pc, #108]	; (800944c <GPS_calc_nav_rate+0x19c>)
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fa fbd6 	bl	8003b90 <constrain>
 80093e4:	4603      	mov	r3, r0
 80093e6:	b219      	sxth	r1, r3
 80093e8:	4a17      	ldr	r2, [pc, #92]	; (8009448 <GPS_calc_nav_rate+0x198>)
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        poshold_ratePID[axis].integrator = navPID[axis].integrator;
 80093f0:	4913      	ldr	r1, [pc, #76]	; (8009440 <GPS_calc_nav_rate+0x190>)
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	4613      	mov	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	440b      	add	r3, r1
 80093fe:	6819      	ldr	r1, [r3, #0]
 8009400:	4813      	ldr	r0, [pc, #76]	; (8009450 <GPS_calc_nav_rate+0x1a0>)
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	4613      	mov	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4413      	add	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4403      	add	r3, r0
 800940e:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	3301      	adds	r3, #1
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2b01      	cmp	r3, #1
 800941a:	f77f af71 	ble.w	8009300 <GPS_calc_nav_rate+0x50>
    }
}
 800941e:	bf00      	nop
 8009420:	bf00      	nop
 8009422:	371c      	adds	r7, #28
 8009424:	46bd      	mov	sp, r7
 8009426:	bd90      	pop	{r4, r7, pc}
 8009428:	200012dc 	.word	0x200012dc
 800942c:	393702d3 	.word	0x393702d3
 8009430:	20001264 	.word	0x20001264
 8009434:	20001268 	.word	0x20001268
 8009438:	fffffc18 	.word	0xfffffc18
 800943c:	200011c8 	.word	0x200011c8
 8009440:	20001238 	.word	0x20001238
 8009444:	20001260 	.word	0x20001260
 8009448:	20001720 	.word	0x20001720
 800944c:	fffff448 	.word	0xfffff448
 8009450:	20001210 	.word	0x20001210

08009454 <GPS_update_crosstrack>:
////////////////////////////////////////////////////////////////////////////////////
// Calculating cross track error, this tries to keep the copter on a direct line
// when flying to a waypoint.
//
static void GPS_update_crosstrack(void)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
    if (abs(wrap_18000(target_bearing - original_target_bearing)) < 4500) {     // If we are too far off or too close we don't do track following
 800945a:	4b38      	ldr	r3, [pc, #224]	; (800953c <GPS_update_crosstrack+0xe8>)
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	4b38      	ldr	r3, [pc, #224]	; (8009540 <GPS_update_crosstrack+0xec>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	4618      	mov	r0, r3
 8009466:	f000 f8d5 	bl	8009614 <wrap_18000>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	dd10      	ble.n	8009492 <GPS_update_crosstrack+0x3e>
 8009470:	4b32      	ldr	r3, [pc, #200]	; (800953c <GPS_update_crosstrack+0xe8>)
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	4b32      	ldr	r3, [pc, #200]	; (8009540 <GPS_update_crosstrack+0xec>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	4618      	mov	r0, r3
 800947c:	f000 f8ca 	bl	8009614 <wrap_18000>
 8009480:	4603      	mov	r3, r0
 8009482:	f241 1293 	movw	r2, #4499	; 0x1193
 8009486:	4293      	cmp	r3, r2
 8009488:	bfd4      	ite	le
 800948a:	2301      	movle	r3, #1
 800948c:	2300      	movgt	r3, #0
 800948e:	b2db      	uxtb	r3, r3
 8009490:	e00e      	b.n	80094b0 <GPS_update_crosstrack+0x5c>
 8009492:	4b2a      	ldr	r3, [pc, #168]	; (800953c <GPS_update_crosstrack+0xe8>)
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	4b2a      	ldr	r3, [pc, #168]	; (8009540 <GPS_update_crosstrack+0xec>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	4618      	mov	r0, r3
 800949e:	f000 f8b9 	bl	8009614 <wrap_18000>
 80094a2:	4603      	mov	r3, r0
 80094a4:	4a27      	ldr	r2, [pc, #156]	; (8009544 <GPS_update_crosstrack+0xf0>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	bfac      	ite	ge
 80094aa:	2301      	movge	r3, #1
 80094ac:	2300      	movlt	r3, #0
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d03b      	beq.n	800952c <GPS_update_crosstrack+0xd8>
        float temp = (target_bearing - original_target_bearing) * RADX100;
 80094b4:	4b21      	ldr	r3, [pc, #132]	; (800953c <GPS_update_crosstrack+0xe8>)
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	4b21      	ldr	r3, [pc, #132]	; (8009540 <GPS_update_crosstrack+0xec>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	ee07 3a90 	vmov	s15, r3
 80094c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094c6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009548 <GPS_update_crosstrack+0xf4>
 80094ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80094ce:	edc7 7a01 	vstr	s15, [r7, #4]
        crosstrack_error = sinf(temp) * (wp_distance * CROSSTRACK_GAIN); // Meters we are off track line
 80094d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80094d6:	f01a fa3b 	bl	8023950 <sinf>
 80094da:	eeb0 7a40 	vmov.f32	s14, s0
 80094de:	4b1b      	ldr	r3, [pc, #108]	; (800954c <GPS_update_crosstrack+0xf8>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094f2:	ee17 3a90 	vmov	r3, s15
 80094f6:	b21a      	sxth	r2, r3
 80094f8:	4b15      	ldr	r3, [pc, #84]	; (8009550 <GPS_update_crosstrack+0xfc>)
 80094fa:	801a      	strh	r2, [r3, #0]
        nav_bearing = target_bearing + constrain(crosstrack_error, -3000, 3000);
 80094fc:	4b14      	ldr	r3, [pc, #80]	; (8009550 <GPS_update_crosstrack+0xfc>)
 80094fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009502:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009506:	4913      	ldr	r1, [pc, #76]	; (8009554 <GPS_update_crosstrack+0x100>)
 8009508:	4618      	mov	r0, r3
 800950a:	f7fa fb41 	bl	8003b90 <constrain>
 800950e:	4602      	mov	r2, r0
 8009510:	4b0a      	ldr	r3, [pc, #40]	; (800953c <GPS_update_crosstrack+0xe8>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4413      	add	r3, r2
 8009516:	4a10      	ldr	r2, [pc, #64]	; (8009558 <GPS_update_crosstrack+0x104>)
 8009518:	6013      	str	r3, [r2, #0]
        nav_bearing = wrap_36000(nav_bearing);
 800951a:	4b0f      	ldr	r3, [pc, #60]	; (8009558 <GPS_update_crosstrack+0x104>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4618      	mov	r0, r3
 8009520:	f000 f898 	bl	8009654 <wrap_36000>
 8009524:	4603      	mov	r3, r0
 8009526:	4a0c      	ldr	r2, [pc, #48]	; (8009558 <GPS_update_crosstrack+0x104>)
 8009528:	6013      	str	r3, [r2, #0]
    } else {
        nav_bearing = target_bearing;
    }
}
 800952a:	e003      	b.n	8009534 <GPS_update_crosstrack+0xe0>
        nav_bearing = target_bearing;
 800952c:	4b03      	ldr	r3, [pc, #12]	; (800953c <GPS_update_crosstrack+0xe8>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a09      	ldr	r2, [pc, #36]	; (8009558 <GPS_update_crosstrack+0x104>)
 8009532:	6013      	str	r3, [r2, #0]
}
 8009534:	bf00      	nop
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	2000127c 	.word	0x2000127c
 8009540:	20001280 	.word	0x20001280
 8009544:	ffffee6d 	.word	0xffffee6d
 8009548:	393702d3 	.word	0x393702d3
 800954c:	20001288 	.word	0x20001288
 8009550:	20001284 	.word	0x20001284
 8009554:	fffff448 	.word	0xfffff448
 8009558:	200012dc 	.word	0x200012dc

0800955c <GPS_calc_desired_speed>:
//                100  |  200     300     400cm/s
//                 |                                        +|+
//                 |< we should slow to 1.5 m/s as we hit the target
//
static int16_t GPS_calc_desired_speed(int16_t max_speed, bool _slow)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	4603      	mov	r3, r0
 8009564:	460a      	mov	r2, r1
 8009566:	80fb      	strh	r3, [r7, #6]
 8009568:	4613      	mov	r3, r2
 800956a:	717b      	strb	r3, [r7, #5]
    // max_speed is default 400 or 4m/s
    if (_slow) {
 800956c:	797b      	ldrb	r3, [r7, #5]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00c      	beq.n	800958c <GPS_calc_desired_speed+0x30>
        max_speed = min(max_speed, wp_distance / 2);
 8009572:	4b23      	ldr	r3, [pc, #140]	; (8009600 <GPS_calc_desired_speed+0xa4>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	0fda      	lsrs	r2, r3, #31
 8009578:	4413      	add	r3, r2
 800957a:	105b      	asrs	r3, r3, #1
 800957c:	461a      	mov	r2, r3
 800957e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009582:	4293      	cmp	r3, r2
 8009584:	bfa8      	it	ge
 8009586:	4613      	movge	r3, r2
 8009588:	80fb      	strh	r3, [r7, #6]
 800958a:	e011      	b.n	80095b0 <GPS_calc_desired_speed+0x54>
    } else {
        max_speed = min(max_speed, wp_distance);
 800958c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009590:	4b1b      	ldr	r3, [pc, #108]	; (8009600 <GPS_calc_desired_speed+0xa4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4293      	cmp	r3, r2
 8009596:	bfa8      	it	ge
 8009598:	4613      	movge	r3, r2
 800959a:	80fb      	strh	r3, [r7, #6]
        max_speed = max(max_speed, cfg.nav_speed_min);      // go at least 100cm/s
 800959c:	4b19      	ldr	r3, [pc, #100]	; (8009604 <GPS_calc_desired_speed+0xa8>)
 800959e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80095a2:	461a      	mov	r2, r3
 80095a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80095a8:	4293      	cmp	r3, r2
 80095aa:	bfb8      	it	lt
 80095ac:	4613      	movlt	r3, r2
 80095ae:	80fb      	strh	r3, [r7, #6]
    }

    // limit the ramp up of the speed
    // waypoint_speed_gov is reset to 0 at each new WP command
    if (max_speed > waypoint_speed_gov) {
 80095b0:	4b15      	ldr	r3, [pc, #84]	; (8009608 <GPS_calc_desired_speed+0xac>)
 80095b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	dd17      	ble.n	80095ee <GPS_calc_desired_speed+0x92>
        waypoint_speed_gov += (int)(100.0f * dTnav);    // increase at .5/ms
 80095be:	4b13      	ldr	r3, [pc, #76]	; (800960c <GPS_calc_desired_speed+0xb0>)
 80095c0:	edd3 7a00 	vldr	s15, [r3]
 80095c4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8009610 <GPS_calc_desired_speed+0xb4>
 80095c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095d0:	ee17 3a90 	vmov	r3, s15
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <GPS_calc_desired_speed+0xac>)
 80095d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095dc:	b29b      	uxth	r3, r3
 80095de:	4413      	add	r3, r2
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	b21a      	sxth	r2, r3
 80095e4:	4b08      	ldr	r3, [pc, #32]	; (8009608 <GPS_calc_desired_speed+0xac>)
 80095e6:	801a      	strh	r2, [r3, #0]
        max_speed = waypoint_speed_gov;
 80095e8:	4b07      	ldr	r3, [pc, #28]	; (8009608 <GPS_calc_desired_speed+0xac>)
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	80fb      	strh	r3, [r7, #6]
    }
    return max_speed;
 80095ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	20001288 	.word	0x20001288
 8009604:	20000d18 	.word	0x20000d18
 8009608:	2000128c 	.word	0x2000128c
 800960c:	20001260 	.word	0x20001260
 8009610:	42c80000 	.word	0x42c80000

08009614 <wrap_18000>:

////////////////////////////////////////////////////////////////////////////////////
// Utilities
//
int32_t wrap_18000(int32_t err)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
    if (err > 18000)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f244 6250 	movw	r2, #18000	; 0x4650
 8009622:	4293      	cmp	r3, r2
 8009624:	dd04      	ble.n	8009630 <wrap_18000+0x1c>
        err -= 36000;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 800962c:	3ba0      	subs	r3, #160	; 0xa0
 800962e:	607b      	str	r3, [r7, #4]
    if (err < -18000)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a07      	ldr	r2, [pc, #28]	; (8009650 <wrap_18000+0x3c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	da04      	bge.n	8009642 <wrap_18000+0x2e>
        err += 36000;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 800963e:	33a0      	adds	r3, #160	; 0xa0
 8009640:	607b      	str	r3, [r7, #4]
    return err;
 8009642:	687b      	ldr	r3, [r7, #4]
}
 8009644:	4618      	mov	r0, r3
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	ffffb9b0 	.word	0xffffb9b0

08009654 <wrap_36000>:

static int32_t wrap_36000(int32_t deg)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
    if (deg > 36000)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8009662:	4293      	cmp	r3, r2
 8009664:	dd04      	ble.n	8009670 <wrap_36000+0x1c>
        deg -= 36000;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 800966c:	3ba0      	subs	r3, #160	; 0xa0
 800966e:	607b      	str	r3, [r7, #4]
    if (deg < 0)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	da04      	bge.n	8009680 <wrap_36000+0x2c>
        deg += 36000;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 800967c:	33a0      	adds	r3, #160	; 0xa0
 800967e:	607b      	str	r3, [r7, #4]
    return deg;
 8009680:	687b      	ldr	r3, [r7, #4]
}
 8009682:	4618      	mov	r0, r3
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
	...

08009690 <ibusReadRawRC>:
static PifRcIbus s_ibus;
static uint16_t ibusChannelData[IBUS_MAX_CHANNEL];


static uint16_t ibusReadRawRC(uint8_t chan)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	71fb      	strb	r3, [r7, #7]
    return ibusChannelData[mcfg.rcmap[chan]];
 800969a:	79fb      	ldrb	r3, [r7, #7]
 800969c:	4a06      	ldr	r2, [pc, #24]	; (80096b8 <ibusReadRawRC+0x28>)
 800969e:	4413      	add	r3, r2
 80096a0:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 80096a4:	461a      	mov	r2, r3
 80096a6:	4b05      	ldr	r3, [pc, #20]	; (80096bc <ibusReadRawRC+0x2c>)
 80096a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	200007ac 	.word	0x200007ac
 80096bc:	20001398 	.word	0x20001398

080096c0 <_evtIbusReceive>:

static void _evtIbusReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 80096cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80096d0:	f7fd fbde 	bl	8006e90 <feature>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d005      	beq.n	80096e6 <_evtIbusReceive+0x26>
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f00e f994 	bl	8017a08 <pifRc_CheckFailSafe>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d11e      	bne.n	8009724 <_evtIbusReceive+0x64>

    failsafeCnt = 0; // clear FailSafe counter
 80096e6:	4b11      	ldr	r3, [pc, #68]	; (800972c <_evtIbusReceive+0x6c>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < IBUS_MAX_CHANNEL; i++) {
 80096ec:	2300      	movs	r3, #0
 80096ee:	617b      	str	r3, [r7, #20]
 80096f0:	e00b      	b.n	800970a <_evtIbusReceive+0x4a>
		ibusChannelData[i] = channel[i];
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	005b      	lsls	r3, r3, #1
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	4413      	add	r3, r2
 80096fa:	8819      	ldrh	r1, [r3, #0]
 80096fc:	4a0c      	ldr	r2, [pc, #48]	; (8009730 <_evtIbusReceive+0x70>)
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < IBUS_MAX_CHANNEL; i++) {
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	3301      	adds	r3, #1
 8009708:	617b      	str	r3, [r7, #20]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	2b07      	cmp	r3, #7
 800970e:	ddf0      	ble.n	80096f2 <_evtIbusReceive+0x32>
	}

	p_task = (PifTask*)p_issuer;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	613b      	str	r3, [r7, #16]
	if (!p_task->_running) p_task->immediate = TRUE;
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	79db      	ldrb	r3, [r3, #7]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d104      	bne.n	8009726 <_evtIbusReceive+0x66>
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	2201      	movs	r2, #1
 8009720:	705a      	strb	r2, [r3, #1]
 8009722:	e000      	b.n	8009726 <_evtIbusReceive+0x66>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8009724:	bf00      	nop
}
 8009726:	3718      	adds	r7, #24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	2000165a 	.word	0x2000165a
 8009730:	20001398 	.word	0x20001398

08009734 <ibusInit>:

BOOL ibusInit(int uart, rcReadRawDataPtr *callback)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
    int b;

    for (b = 0; b < IBUS_MAX_CHANNEL; b++)
 800973e:	2300      	movs	r3, #0
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	e009      	b.n	8009758 <ibusInit+0x24>
        ibusChannelData[b] = mcfg.midrc;
 8009744:	4b21      	ldr	r3, [pc, #132]	; (80097cc <ibusInit+0x98>)
 8009746:	f8b3 1198 	ldrh.w	r1, [r3, #408]	; 0x198
 800974a:	4a21      	ldr	r2, [pc, #132]	; (80097d0 <ibusInit+0x9c>)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (b = 0; b < IBUS_MAX_CHANNEL; b++)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	3301      	adds	r3, #1
 8009756:	60fb      	str	r3, [r7, #12]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2b07      	cmp	r3, #7
 800975c:	ddf2      	ble.n	8009744 <ibusInit+0x10>

    core.rcvrport = uartOpen(uart, 115200, MODE_RX);
 800975e:	2201      	movs	r2, #1
 8009760:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7f8 fe0b 	bl	8002380 <uartOpen>
 800976a:	4603      	mov	r3, r0
 800976c:	4a19      	ldr	r2, [pc, #100]	; (80097d4 <ibusInit+0xa0>)
 800976e:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 8009770:	4b18      	ldr	r3, [pc, #96]	; (80097d4 <ibusInit+0xa0>)
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <ibusInit+0x48>
 8009778:	2300      	movs	r3, #0
 800977a:	e023      	b.n	80097c4 <ibusInit+0x90>

    if (!pifRcIbus_Init(&s_ibus, PIF_ID_AUTO)) return FALSE;
 800977c:	2100      	movs	r1, #0
 800977e:	4816      	ldr	r0, [pc, #88]	; (80097d8 <ibusInit+0xa4>)
 8009780:	f00e fb5e 	bl	8017e40 <pifRcIbus_Init>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <ibusInit+0x5a>
 800978a:	2300      	movs	r3, #0
 800978c:	e01a      	b.n	80097c4 <ibusInit+0x90>
    pifRc_AttachEvtReceive(&s_ibus.parent, _evtIbusReceive, g_task_compute_rc);
 800978e:	4b13      	ldr	r3, [pc, #76]	; (80097dc <ibusInit+0xa8>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	461a      	mov	r2, r3
 8009794:	4912      	ldr	r1, [pc, #72]	; (80097e0 <ibusInit+0xac>)
 8009796:	4810      	ldr	r0, [pc, #64]	; (80097d8 <ibusInit+0xa4>)
 8009798:	f00e f924 	bl	80179e4 <pifRc_AttachEvtReceive>
    pifRcIbus_AttachComm(&s_ibus, &core.rcvrport->comm);
 800979c:	4b0d      	ldr	r3, [pc, #52]	; (80097d4 <ibusInit+0xa0>)
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	3304      	adds	r3, #4
 80097a2:	4619      	mov	r1, r3
 80097a4:	480c      	ldr	r0, [pc, #48]	; (80097d8 <ibusInit+0xa4>)
 80097a6:	f00e fb7b 	bl	8017ea0 <pifRcIbus_AttachComm>

    if (callback)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <ibusInit+0x82>
        *callback = ibusReadRawRC;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	4a0c      	ldr	r2, [pc, #48]	; (80097e4 <ibusInit+0xb0>)
 80097b4:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 80097b6:	4b07      	ldr	r3, [pc, #28]	; (80097d4 <ibusInit+0xa0>)
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	3304      	adds	r3, #4
 80097bc:	4618      	mov	r0, r3
 80097be:	f7f8 fef5 	bl	80025ac <serialStartReceiveFunc>

    return TRUE;
 80097c2:	2301      	movs	r3, #1
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	200007ac 	.word	0x200007ac
 80097d0:	20001398 	.word	0x20001398
 80097d4:	200006f4 	.word	0x200006f4
 80097d8:	200012f8 	.word	0x200012f8
 80097dc:	20001828 	.word	0x20001828
 80097e0:	080096c1 	.word	0x080096c1
 80097e4:	08009691 	.word	0x08009691

080097e8 <imuInit>:
float anglerad[2] = { 0.0f, 0.0f };    // absolute angle inclination in radians

static void getEstimatedAttitude(void);

void imuInit(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	ed2d 8b02 	vpush	{d8}
 80097ee:	af00      	add	r7, sp, #0
    smallAngle = lrintf(acc_1G * cosf(RAD * cfg.small_angle));
 80097f0:	4b45      	ldr	r3, [pc, #276]	; (8009908 <imuInit+0x120>)
 80097f2:	881b      	ldrh	r3, [r3, #0]
 80097f4:	ee07 3a90 	vmov	s15, r3
 80097f8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80097fc:	4b43      	ldr	r3, [pc, #268]	; (800990c <imuInit+0x124>)
 80097fe:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009802:	4618      	mov	r0, r3
 8009804:	f7f6 fe4c 	bl	80004a0 <__aeabi_i2d>
 8009808:	a339      	add	r3, pc, #228	; (adr r3, 80098f0 <imuInit+0x108>)
 800980a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980e:	f7f6 feb1 	bl	8000574 <__aeabi_dmul>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4610      	mov	r0, r2
 8009818:	4619      	mov	r1, r3
 800981a:	f7f7 f98d 	bl	8000b38 <__aeabi_d2f>
 800981e:	4603      	mov	r3, r0
 8009820:	ee00 3a10 	vmov	s0, r3
 8009824:	f01a f810 	bl	8023848 <cosf>
 8009828:	eef0 7a40 	vmov.f32	s15, s0
 800982c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009830:	eeb0 0a67 	vmov.f32	s0, s15
 8009834:	f01a f84c 	bl	80238d0 <lrintf>
 8009838:	4603      	mov	r3, r0
 800983a:	b21a      	sxth	r2, r3
 800983c:	4b34      	ldr	r3, [pc, #208]	; (8009910 <imuInit+0x128>)
 800983e:	801a      	strh	r2, [r3, #0]
    accVelScale = 9.80665f / acc_1G / 10000.0f;
 8009840:	4b31      	ldr	r3, [pc, #196]	; (8009908 <imuInit+0x120>)
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	ee07 3a90 	vmov	s15, r3
 8009848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800984c:	eddf 6a31 	vldr	s13, [pc, #196]	; 8009914 <imuInit+0x12c>
 8009850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009854:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009918 <imuInit+0x130>
 8009858:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800985c:	4b2f      	ldr	r3, [pc, #188]	; (800991c <imuInit+0x134>)
 800985e:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = (1800.0f / M_PI) * (900.0f / cfg.throttle_correction_angle);
 8009862:	4b2a      	ldr	r3, [pc, #168]	; (800990c <imuInit+0x124>)
 8009864:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8009868:	ee07 3a90 	vmov	s15, r3
 800986c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009870:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8009920 <imuInit+0x138>
 8009874:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009878:	ee16 0a90 	vmov	r0, s13
 800987c:	f7f6 fe22 	bl	80004c4 <__aeabi_f2d>
 8009880:	a31d      	add	r3, pc, #116	; (adr r3, 80098f8 <imuInit+0x110>)
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	f7f6 fe75 	bl	8000574 <__aeabi_dmul>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	4610      	mov	r0, r2
 8009890:	4619      	mov	r1, r3
 8009892:	f7f7 f951 	bl	8000b38 <__aeabi_d2f>
 8009896:	4603      	mov	r3, r0
 8009898:	4a22      	ldr	r2, [pc, #136]	; (8009924 <imuInit+0x13c>)
 800989a:	6013      	str	r3, [r2, #0]

    fc_acc = 0.5f / (M_PI * cfg.accz_lpf_cutoff); // calculate RC time constant used in the accZ lpf
 800989c:	4b1b      	ldr	r3, [pc, #108]	; (800990c <imuInit+0x124>)
 800989e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7f6 fe0f 	bl	80004c4 <__aeabi_f2d>
 80098a6:	a316      	add	r3, pc, #88	; (adr r3, 8009900 <imuInit+0x118>)
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f7f6 fe62 	bl	8000574 <__aeabi_dmul>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	f04f 0000 	mov.w	r0, #0
 80098b8:	491b      	ldr	r1, [pc, #108]	; (8009928 <imuInit+0x140>)
 80098ba:	f7f6 ff85 	bl	80007c8 <__aeabi_ddiv>
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	4610      	mov	r0, r2
 80098c4:	4619      	mov	r1, r3
 80098c6:	f7f7 f937 	bl	8000b38 <__aeabi_d2f>
 80098ca:	4603      	mov	r3, r0
 80098cc:	4a17      	ldr	r2, [pc, #92]	; (800992c <imuInit+0x144>)
 80098ce:	6013      	str	r3, [r2, #0]

#ifdef MAG
    // if mag sensor is enabled, use it
    if (sensors(SENSOR_MAG))
 80098d0:	2008      	movs	r0, #8
 80098d2:	f7fd fa95 	bl	8006e00 <sensors>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <imuInit+0xf8>
        Mag_init();
 80098dc:	f005 fb56 	bl	800ef8c <Mag_init>
#endif
}
 80098e0:	bf00      	nop
 80098e2:	46bd      	mov	sp, r7
 80098e4:	ecbd 8b02 	vpop	{d8}
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	f3af 8000 	nop.w
 80098f0:	a2529d39 	.word	0xa2529d39
 80098f4:	3f91df46 	.word	0x3f91df46
 80098f8:	907e593b 	.word	0x907e593b
 80098fc:	4081e7a9 	.word	0x4081e7a9
 8009900:	54442d18 	.word	0x54442d18
 8009904:	400921fb 	.word	0x400921fb
 8009908:	2000005a 	.word	0x2000005a
 800990c:	20000d18 	.word	0x20000d18
 8009910:	200013dc 	.word	0x200013dc
 8009914:	411ce80a 	.word	0x411ce80a
 8009918:	461c4000 	.word	0x461c4000
 800991c:	20001414 	.word	0x20001414
 8009920:	44610000 	.word	0x44610000
 8009924:	20001418 	.word	0x20001418
 8009928:	3fe00000 	.word	0x3fe00000
 800992c:	2000141c 	.word	0x2000141c

08009930 <computeIMU>:

int computeIMU(int step)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
    static int16_t gyroYawSmooth = 0;

	switch (step) {
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b02      	cmp	r3, #2
 800993c:	d02c      	beq.n	8009998 <computeIMU+0x68>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b02      	cmp	r3, #2
 8009942:	dc2d      	bgt.n	80099a0 <computeIMU+0x70>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <computeIMU+0x22>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d01a      	beq.n	8009986 <computeIMU+0x56>
 8009950:	e026      	b.n	80099a0 <computeIMU+0x70>
	case 0:
		if (Gyro_getADC()) {
 8009952:	f005 fb07 	bl	800ef64 <Gyro_getADC>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d012      	beq.n	8009982 <computeIMU+0x52>
			if (sensors(SENSOR_ACC)) return 1;
 800995c:	2002      	movs	r0, #2
 800995e:	f7fd fa4f 	bl	8006e00 <sensors>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <computeIMU+0x3c>
 8009968:	2301      	movs	r3, #1
 800996a:	e043      	b.n	80099f4 <computeIMU+0xc4>

			accADC[X] = 0;
 800996c:	4b23      	ldr	r3, [pc, #140]	; (80099fc <computeIMU+0xcc>)
 800996e:	2200      	movs	r2, #0
 8009970:	801a      	strh	r2, [r3, #0]
			accADC[Y] = 0;
 8009972:	4b22      	ldr	r3, [pc, #136]	; (80099fc <computeIMU+0xcc>)
 8009974:	2200      	movs	r2, #0
 8009976:	805a      	strh	r2, [r3, #2]
			accADC[Z] = 0;
 8009978:	4b20      	ldr	r3, [pc, #128]	; (80099fc <computeIMU+0xcc>)
 800997a:	2200      	movs	r2, #0
 800997c:	809a      	strh	r2, [r3, #4]
			return 3;
 800997e:	2303      	movs	r3, #3
 8009980:	e038      	b.n	80099f4 <computeIMU+0xc4>
		}
		return step;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	e036      	b.n	80099f4 <computeIMU+0xc4>

	case 1:
		return ACC_getADC() ? 2 : step;
 8009986:	f005 f8d3 	bl	800eb30 <ACC_getADC>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <computeIMU+0x64>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	e02f      	b.n	80099f4 <computeIMU+0xc4>
 8009994:	2302      	movs	r3, #2
 8009996:	e02d      	b.n	80099f4 <computeIMU+0xc4>

	case 2:
		getEstimatedAttitude();
 8009998:	f000 fbba 	bl	800a110 <getEstimatedAttitude>
		return 3;
 800999c:	2303      	movs	r3, #3
 800999e:	e029      	b.n	80099f4 <computeIMU+0xc4>
	}

    if (mcfg.mixerConfiguration == MULTITYPE_TRI) {
 80099a0:	4b17      	ldr	r3, [pc, #92]	; (8009a00 <computeIMU+0xd0>)
 80099a2:	795b      	ldrb	r3, [r3, #5]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d115      	bne.n	80099d4 <computeIMU+0xa4>
        gyroData[YAW] = (gyroYawSmooth * 2 + gyroADC[YAW]) / 3;
 80099a8:	4b16      	ldr	r3, [pc, #88]	; (8009a04 <computeIMU+0xd4>)
 80099aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099ae:	005b      	lsls	r3, r3, #1
 80099b0:	4a15      	ldr	r2, [pc, #84]	; (8009a08 <computeIMU+0xd8>)
 80099b2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80099b6:	4413      	add	r3, r2
 80099b8:	4a14      	ldr	r2, [pc, #80]	; (8009a0c <computeIMU+0xdc>)
 80099ba:	fb82 1203 	smull	r1, r2, r2, r3
 80099be:	17db      	asrs	r3, r3, #31
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	b21a      	sxth	r2, r3
 80099c4:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <computeIMU+0xe0>)
 80099c6:	809a      	strh	r2, [r3, #4]
        gyroYawSmooth = gyroData[YAW];
 80099c8:	4b11      	ldr	r3, [pc, #68]	; (8009a10 <computeIMU+0xe0>)
 80099ca:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80099ce:	4b0d      	ldr	r3, [pc, #52]	; (8009a04 <computeIMU+0xd4>)
 80099d0:	801a      	strh	r2, [r3, #0]
 80099d2:	e004      	b.n	80099de <computeIMU+0xae>
    } else {
        gyroData[YAW] = gyroADC[YAW];
 80099d4:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <computeIMU+0xd8>)
 80099d6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80099da:	4b0d      	ldr	r3, [pc, #52]	; (8009a10 <computeIMU+0xe0>)
 80099dc:	809a      	strh	r2, [r3, #4]
    }
    gyroData[ROLL] = gyroADC[ROLL];
 80099de:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <computeIMU+0xd8>)
 80099e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099e4:	4b0a      	ldr	r3, [pc, #40]	; (8009a10 <computeIMU+0xe0>)
 80099e6:	801a      	strh	r2, [r3, #0]
    gyroData[PITCH] = gyroADC[PITCH];
 80099e8:	4b07      	ldr	r3, [pc, #28]	; (8009a08 <computeIMU+0xd8>)
 80099ea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80099ee:	4b08      	ldr	r3, [pc, #32]	; (8009a10 <computeIMU+0xe0>)
 80099f0:	805a      	strh	r2, [r3, #2]
	return 4;
 80099f2:	2304      	movs	r3, #4
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	200013b0 	.word	0x200013b0
 8009a00:	200007ac 	.word	0x200007ac
 8009a04:	20001448 	.word	0x20001448
 8009a08:	200013a8 	.word	0x200013a8
 8009a0c:	55555556 	.word	0x55555556
 8009a10:	20001420 	.word	0x20001420

08009a14 <normalizeV>:

t_fp_vector EstG;

// Normalize a vector
void normalizeV(struct fp_vector *src, struct fp_vector *dest)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
    float length;

    length = sqrtf(src->X * src->X + src->Y * src->Y + src->Z * src->Z);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	ed93 7a00 	vldr	s14, [r3]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	edd3 7a00 	vldr	s15, [r3]
 8009a2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	edd3 6a01 	vldr	s13, [r3, #4]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	edd3 7a01 	vldr	s15, [r3, #4]
 8009a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	edd3 6a02 	vldr	s13, [r3, #8]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8009a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a56:	eeb0 0a67 	vmov.f32	s0, s15
 8009a5a:	f01a f845 	bl	8023ae8 <sqrtf>
 8009a5e:	ed87 0a03 	vstr	s0, [r7, #12]
    if (length != 0) {
 8009a62:	edd7 7a03 	vldr	s15, [r7, #12]
 8009a66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a6e:	d01d      	beq.n	8009aac <normalizeV+0x98>
        dest->X = src->X / length;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	edd3 6a00 	vldr	s13, [r3]
 8009a76:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	edc3 7a00 	vstr	s15, [r3]
        dest->Y = src->Y / length;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	edd3 6a01 	vldr	s13, [r3, #4]
 8009a8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	edc3 7a01 	vstr	s15, [r3, #4]
        dest->Z = src->Z / length;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	edd3 6a02 	vldr	s13, [r3, #8]
 8009a9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8009aac:	bf00      	nop
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <rotateV>:

// Rotate Estimated vector(s) with small angle approximation, according to the gyro data
void rotateV(struct fp_vector *v, float *delta)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b098      	sub	sp, #96	; 0x60
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
    struct fp_vector v_tmp = *v;
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ac4:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ac6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    // This does a  "proper" matrix rotation using gyro deltas without small-angle approximation
    float mat[3][3];
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cosf(delta[ROLL]);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	edd3 7a00 	vldr	s15, [r3]
 8009ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8009ad4:	f019 feb8 	bl	8023848 <cosf>
 8009ad8:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
    sinx = sinf(delta[ROLL]);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	edd3 7a00 	vldr	s15, [r3]
 8009ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8009ae6:	f019 ff33 	bl	8023950 <sinf>
 8009aea:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    cosy = cosf(delta[PITCH]);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	3304      	adds	r3, #4
 8009af2:	edd3 7a00 	vldr	s15, [r3]
 8009af6:	eeb0 0a67 	vmov.f32	s0, s15
 8009afa:	f019 fea5 	bl	8023848 <cosf>
 8009afe:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
    siny = sinf(delta[PITCH]);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	3304      	adds	r3, #4
 8009b06:	edd3 7a00 	vldr	s15, [r3]
 8009b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b0e:	f019 ff1f 	bl	8023950 <sinf>
 8009b12:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
    cosz = cosf(delta[YAW]);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	3308      	adds	r3, #8
 8009b1a:	edd3 7a00 	vldr	s15, [r3]
 8009b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8009b22:	f019 fe91 	bl	8023848 <cosf>
 8009b26:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    sinz = sinf(delta[YAW]);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	3308      	adds	r3, #8
 8009b2e:	edd3 7a00 	vldr	s15, [r3]
 8009b32:	eeb0 0a67 	vmov.f32	s0, s15
 8009b36:	f019 ff0b 	bl	8023950 <sinf>
 8009b3a:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

    coszcosx = cosz * cosx;
 8009b3e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b42:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    sinzcosx = sinz * cosx;
 8009b4e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009b52:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    coszsinx = sinx * cosz;
 8009b5e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009b62:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sinzsinx = sinx * sinz;
 8009b6e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009b72:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    mat[0][0] = cosz * cosy;
 8009b7e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b82:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b8a:	edc7 7a02 	vstr	s15, [r7, #8]
    mat[0][1] = -cosy * sinz;
 8009b8e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009b92:	eeb1 7a67 	vneg.f32	s14, s15
 8009b96:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9e:	edc7 7a03 	vstr	s15, [r7, #12]
    mat[0][2] = siny;
 8009ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ba4:	613b      	str	r3, [r7, #16]
    mat[1][0] = sinzcosx + (coszsinx * siny);
 8009ba6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009baa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009bae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bb2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bba:	edc7 7a05 	vstr	s15, [r7, #20]
    mat[1][1] = coszcosx - (sinzsinx * siny);
 8009bbe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009bc2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bca:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bd2:	edc7 7a06 	vstr	s15, [r7, #24]
    mat[1][2] = -sinx * cosy;
 8009bd6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009bda:	eeb1 7a67 	vneg.f32	s14, s15
 8009bde:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be6:	edc7 7a07 	vstr	s15, [r7, #28]
    mat[2][0] = (sinzsinx) - (coszcosx * siny);
 8009bea:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009bee:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bfe:	edc7 7a08 	vstr	s15, [r7, #32]
    mat[2][1] = (coszsinx) + (sinzcosx * siny);
 8009c02:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009c06:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c0e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c16:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    mat[2][2] = cosy * cosx;
 8009c1a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009c1e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c26:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    v->X = v_tmp.X * mat[0][0] + v_tmp.Y * mat[1][0] + v_tmp.Z * mat[2][0];
 8009c2a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009c2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c36:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c46:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009c4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8009c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	edc3 7a00 	vstr	s15, [r3]
    v->Y = v_tmp.X * mat[0][1] + v_tmp.Y * mat[1][1] + v_tmp.Z * mat[2][1];
 8009c5c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c68:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c78:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009c7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	edc3 7a01 	vstr	s15, [r3, #4]
    v->Z = v_tmp.X * mat[0][2] + v_tmp.Y * mat[1][2] + v_tmp.Z * mat[2][2];
 8009c8e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009c92:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c9a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009caa:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009cae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8009cc0:	bf00      	nop
 8009cc2:	3760      	adds	r7, #96	; 0x60
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <applyDeadband>:

int32_t applyDeadband(int32_t value, int32_t deadband)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
    if (abs(value) < deadband) {
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bfb8      	it	lt
 8009cd8:	425b      	neglt	r3, r3
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	dd02      	ble.n	8009ce6 <applyDeadband+0x1e>
        value = 0;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	607b      	str	r3, [r7, #4]
 8009ce4:	e00e      	b.n	8009d04 <applyDeadband+0x3c>
    } else if (value > 0) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	dd04      	ble.n	8009cf6 <applyDeadband+0x2e>
        value -= deadband;
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	607b      	str	r3, [r7, #4]
 8009cf4:	e006      	b.n	8009d04 <applyDeadband+0x3c>
    } else if (value < 0) {
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	da03      	bge.n	8009d04 <applyDeadband+0x3c>
        value += deadband;
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	4413      	add	r3, r2
 8009d02:	607b      	str	r3, [r7, #4]
    }
    return value;
 8009d04:	687b      	ldr	r3, [r7, #4]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	370c      	adds	r7, #12
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	0000      	movs	r0, r0
 8009d14:	0000      	movs	r0, r0
	...

08009d18 <acc_calc>:

// rotate acc into Earth frame and calculate acceleration in it
void acc_calc(uint32_t deltaT)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b08a      	sub	sp, #40	; 0x28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
    static int32_t accZoffset = 0;
    static float accz_smooth = 0;
    float dT = 0;
 8009d20:	f04f 0300 	mov.w	r3, #0
 8009d24:	627b      	str	r3, [r7, #36]	; 0x24
    float rpy[3];
    t_fp_vector accel_ned;

    // deltaT is measured in us ticks
    dT = (float)deltaT * 1e-6f;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	ee07 3a90 	vmov	s15, r3
 8009d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d30:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8009f38 <acc_calc+0x220>
 8009d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d38:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // the accel values have to be rotated into the earth frame
    rpy[0] = -(float)anglerad[ROLL];
 8009d3c:	4b7f      	ldr	r3, [pc, #508]	; (8009f3c <acc_calc+0x224>)
 8009d3e:	edd3 7a00 	vldr	s15, [r3]
 8009d42:	eef1 7a67 	vneg.f32	s15, s15
 8009d46:	edc7 7a06 	vstr	s15, [r7, #24]
    rpy[1] = -(float)anglerad[PITCH];
 8009d4a:	4b7c      	ldr	r3, [pc, #496]	; (8009f3c <acc_calc+0x224>)
 8009d4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009d50:	eef1 7a67 	vneg.f32	s15, s15
 8009d54:	edc7 7a07 	vstr	s15, [r7, #28]
    rpy[2] = -(float)heading * RAD;
 8009d58:	4b79      	ldr	r3, [pc, #484]	; (8009f40 <acc_calc+0x228>)
 8009d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d5e:	ee07 3a90 	vmov	s15, r3
 8009d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d66:	eef1 7a67 	vneg.f32	s15, s15
 8009d6a:	ee17 3a90 	vmov	r3, s15
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7f6 fba8 	bl	80004c4 <__aeabi_f2d>
 8009d74:	a36e      	add	r3, pc, #440	; (adr r3, 8009f30 <acc_calc+0x218>)
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	f7f6 fbfb 	bl	8000574 <__aeabi_dmul>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	4610      	mov	r0, r2
 8009d84:	4619      	mov	r1, r3
 8009d86:	f7f6 fed7 	bl	8000b38 <__aeabi_d2f>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	623b      	str	r3, [r7, #32]

    accel_ned.V.X = accSmooth[0];
 8009d8e:	4b6d      	ldr	r3, [pc, #436]	; (8009f44 <acc_calc+0x22c>)
 8009d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d94:	ee07 3a90 	vmov	s15, r3
 8009d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d9c:	edc7 7a03 	vstr	s15, [r7, #12]
    accel_ned.V.Y = accSmooth[1];
 8009da0:	4b68      	ldr	r3, [pc, #416]	; (8009f44 <acc_calc+0x22c>)
 8009da2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009da6:	ee07 3a90 	vmov	s15, r3
 8009daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dae:	edc7 7a04 	vstr	s15, [r7, #16]
    accel_ned.V.Z = accSmooth[2];
 8009db2:	4b64      	ldr	r3, [pc, #400]	; (8009f44 <acc_calc+0x22c>)
 8009db4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009db8:	ee07 3a90 	vmov	s15, r3
 8009dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dc0:	edc7 7a05 	vstr	s15, [r7, #20]

    rotateV(&accel_ned.V, rpy);
 8009dc4:	f107 0218 	add.w	r2, r7, #24
 8009dc8:	f107 030c 	add.w	r3, r7, #12
 8009dcc:	4611      	mov	r1, r2
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff fe70 	bl	8009ab4 <rotateV>

    if (cfg.acc_unarmedcal == 1) {
 8009dd4:	4b5c      	ldr	r3, [pc, #368]	; (8009f48 <acc_calc+0x230>)
 8009dd6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d131      	bne.n	8009e42 <acc_calc+0x12a>
        if (!f.ARMED) {
 8009dde:	4b5b      	ldr	r3, [pc, #364]	; (8009f4c <acc_calc+0x234>)
 8009de0:	785b      	ldrb	r3, [r3, #1]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d11c      	bne.n	8009e20 <acc_calc+0x108>
            accZoffset -= accZoffset / 64;
 8009de6:	4b5a      	ldr	r3, [pc, #360]	; (8009f50 <acc_calc+0x238>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	da00      	bge.n	8009df0 <acc_calc+0xd8>
 8009dee:	333f      	adds	r3, #63	; 0x3f
 8009df0:	119b      	asrs	r3, r3, #6
 8009df2:	425b      	negs	r3, r3
 8009df4:	461a      	mov	r2, r3
 8009df6:	4b56      	ldr	r3, [pc, #344]	; (8009f50 <acc_calc+0x238>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	4a54      	ldr	r2, [pc, #336]	; (8009f50 <acc_calc+0x238>)
 8009dfe:	6013      	str	r3, [r2, #0]
            accZoffset += accel_ned.V.Z;
 8009e00:	4b53      	ldr	r3, [pc, #332]	; (8009f50 <acc_calc+0x238>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	ee07 3a90 	vmov	s15, r3
 8009e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e18:	ee17 2a90 	vmov	r2, s15
 8009e1c:	4b4c      	ldr	r3, [pc, #304]	; (8009f50 <acc_calc+0x238>)
 8009e1e:	601a      	str	r2, [r3, #0]
        }
        accel_ned.V.Z -= accZoffset / 64;  // compensate for gravitation on z-axis
 8009e20:	ed97 7a05 	vldr	s14, [r7, #20]
 8009e24:	4b4a      	ldr	r3, [pc, #296]	; (8009f50 <acc_calc+0x238>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	da00      	bge.n	8009e2e <acc_calc+0x116>
 8009e2c:	333f      	adds	r3, #63	; 0x3f
 8009e2e:	119b      	asrs	r3, r3, #6
 8009e30:	ee07 3a90 	vmov	s15, r3
 8009e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e3c:	edc7 7a05 	vstr	s15, [r7, #20]
 8009e40:	e00b      	b.n	8009e5a <acc_calc+0x142>
    } else
        accel_ned.V.Z -= acc_1G;
 8009e42:	ed97 7a05 	vldr	s14, [r7, #20]
 8009e46:	4b43      	ldr	r3, [pc, #268]	; (8009f54 <acc_calc+0x23c>)
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e56:	edc7 7a05 	vstr	s15, [r7, #20]

    accz_smooth = accz_smooth + (dT / (fc_acc + dT)) * (accel_ned.V.Z - accz_smooth); // low pass filter
 8009e5a:	4b3f      	ldr	r3, [pc, #252]	; (8009f58 <acc_calc+0x240>)
 8009e5c:	ed93 7a00 	vldr	s14, [r3]
 8009e60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e68:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e70:	edd7 6a05 	vldr	s13, [r7, #20]
 8009e74:	4b39      	ldr	r3, [pc, #228]	; (8009f5c <acc_calc+0x244>)
 8009e76:	edd3 7a00 	vldr	s15, [r3]
 8009e7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e82:	4b36      	ldr	r3, [pc, #216]	; (8009f5c <acc_calc+0x244>)
 8009e84:	edd3 7a00 	vldr	s15, [r3]
 8009e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e8c:	4b33      	ldr	r3, [pc, #204]	; (8009f5c <acc_calc+0x244>)
 8009e8e:	edc3 7a00 	vstr	s15, [r3]

    // apply Deadband to reduce integration drift and vibration influence and
    // sum up Values for later integration to get velocity and distance
    accSum[X] += applyDeadband(lrintf(accel_ned.V.X), cfg.accxy_deadband);
 8009e92:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e96:	eeb0 0a67 	vmov.f32	s0, s15
 8009e9a:	f019 fd19 	bl	80238d0 <lrintf>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	4a29      	ldr	r2, [pc, #164]	; (8009f48 <acc_calc+0x230>)
 8009ea2:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7ff ff0d 	bl	8009cc8 <applyDeadband>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	4b2b      	ldr	r3, [pc, #172]	; (8009f60 <acc_calc+0x248>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	4a2a      	ldr	r2, [pc, #168]	; (8009f60 <acc_calc+0x248>)
 8009eb8:	6013      	str	r3, [r2, #0]
    accSum[Y] += applyDeadband(lrintf(accel_ned.V.Y), cfg.accxy_deadband);
 8009eba:	edd7 7a04 	vldr	s15, [r7, #16]
 8009ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8009ec2:	f019 fd05 	bl	80238d0 <lrintf>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	4a1f      	ldr	r2, [pc, #124]	; (8009f48 <acc_calc+0x230>)
 8009eca:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009ece:	4611      	mov	r1, r2
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7ff fef9 	bl	8009cc8 <applyDeadband>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	4b21      	ldr	r3, [pc, #132]	; (8009f60 <acc_calc+0x248>)
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	4413      	add	r3, r2
 8009ede:	4a20      	ldr	r2, [pc, #128]	; (8009f60 <acc_calc+0x248>)
 8009ee0:	6053      	str	r3, [r2, #4]
    accSum[Z] += applyDeadband(lrintf(accz_smooth), cfg.accz_deadband);
 8009ee2:	4b1e      	ldr	r3, [pc, #120]	; (8009f5c <acc_calc+0x244>)
 8009ee4:	edd3 7a00 	vldr	s15, [r3]
 8009ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8009eec:	f019 fcf0 	bl	80238d0 <lrintf>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	4a15      	ldr	r2, [pc, #84]	; (8009f48 <acc_calc+0x230>)
 8009ef4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8009ef8:	4611      	mov	r1, r2
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7ff fee4 	bl	8009cc8 <applyDeadband>
 8009f00:	4602      	mov	r2, r0
 8009f02:	4b17      	ldr	r3, [pc, #92]	; (8009f60 <acc_calc+0x248>)
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	4413      	add	r3, r2
 8009f08:	4a15      	ldr	r2, [pc, #84]	; (8009f60 <acc_calc+0x248>)
 8009f0a:	6093      	str	r3, [r2, #8]

    accTimeSum += deltaT;
 8009f0c:	4b15      	ldr	r3, [pc, #84]	; (8009f64 <acc_calc+0x24c>)
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4413      	add	r3, r2
 8009f14:	4a13      	ldr	r2, [pc, #76]	; (8009f64 <acc_calc+0x24c>)
 8009f16:	6013      	str	r3, [r2, #0]
    accSumCount++;
 8009f18:	4b13      	ldr	r3, [pc, #76]	; (8009f68 <acc_calc+0x250>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	4a12      	ldr	r2, [pc, #72]	; (8009f68 <acc_calc+0x250>)
 8009f20:	6013      	str	r3, [r2, #0]
}
 8009f22:	bf00      	nop
 8009f24:	3728      	adds	r7, #40	; 0x28
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	f3af 8000 	nop.w
 8009f30:	a2529d39 	.word	0xa2529d39
 8009f34:	3f91df46 	.word	0x3f91df46
 8009f38:	358637bd 	.word	0x358637bd
 8009f3c:	20001434 	.word	0x20001434
 8009f40:	200019ba 	.word	0x200019ba
 8009f44:	200013b8 	.word	0x200013b8
 8009f48:	20000d18 	.word	0x20000d18
 8009f4c:	20001628 	.word	0x20001628
 8009f50:	2000144c 	.word	0x2000144c
 8009f54:	2000005a 	.word	0x2000005a
 8009f58:	2000141c 	.word	0x2000141c
 8009f5c:	20001450 	.word	0x20001450
 8009f60:	200013c8 	.word	0x200013c8
 8009f64:	200013d4 	.word	0x200013d4
 8009f68:	200013d8 	.word	0x200013d8

08009f6c <accSum_reset>:

void accSum_reset(void)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	af00      	add	r7, sp, #0
    accSum[0] = 0;
 8009f70:	4b09      	ldr	r3, [pc, #36]	; (8009f98 <accSum_reset+0x2c>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	601a      	str	r2, [r3, #0]
    accSum[1] = 0;
 8009f76:	4b08      	ldr	r3, [pc, #32]	; (8009f98 <accSum_reset+0x2c>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	605a      	str	r2, [r3, #4]
    accSum[2] = 0;
 8009f7c:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <accSum_reset+0x2c>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	609a      	str	r2, [r3, #8]
    accSumCount = 0;
 8009f82:	4b06      	ldr	r3, [pc, #24]	; (8009f9c <accSum_reset+0x30>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]
    accTimeSum = 0;
 8009f88:	4b05      	ldr	r3, [pc, #20]	; (8009fa0 <accSum_reset+0x34>)
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	601a      	str	r2, [r3, #0]
}
 8009f8e:	bf00      	nop
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr
 8009f98:	200013c8 	.word	0x200013c8
 8009f9c:	200013d8 	.word	0x200013d8
 8009fa0:	200013d4 	.word	0x200013d4
 8009fa4:	00000000 	.word	0x00000000

08009fa8 <calculateHeading>:

// baseflight calculation by Luggi09 originates from arducopter
static int16_t calculateHeading(t_fp_vector *vec)
{
 8009fa8:	b5b0      	push	{r4, r5, r7, lr}
 8009faa:	b08a      	sub	sp, #40	; 0x28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
    int16_t head;

    float cosineRoll = cosf(anglerad[ROLL]);
 8009fb0:	4b53      	ldr	r3, [pc, #332]	; (800a100 <calculateHeading+0x158>)
 8009fb2:	edd3 7a00 	vldr	s15, [r3]
 8009fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8009fba:	f019 fc45 	bl	8023848 <cosf>
 8009fbe:	ed87 0a08 	vstr	s0, [r7, #32]
    float sineRoll = sinf(anglerad[ROLL]);
 8009fc2:	4b4f      	ldr	r3, [pc, #316]	; (800a100 <calculateHeading+0x158>)
 8009fc4:	edd3 7a00 	vldr	s15, [r3]
 8009fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8009fcc:	f019 fcc0 	bl	8023950 <sinf>
 8009fd0:	ed87 0a07 	vstr	s0, [r7, #28]
    float cosinePitch = cosf(anglerad[PITCH]);
 8009fd4:	4b4a      	ldr	r3, [pc, #296]	; (800a100 <calculateHeading+0x158>)
 8009fd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8009fda:	eeb0 0a67 	vmov.f32	s0, s15
 8009fde:	f019 fc33 	bl	8023848 <cosf>
 8009fe2:	ed87 0a06 	vstr	s0, [r7, #24]
    float sinePitch = sinf(anglerad[PITCH]);
 8009fe6:	4b46      	ldr	r3, [pc, #280]	; (800a100 <calculateHeading+0x158>)
 8009fe8:	edd3 7a01 	vldr	s15, [r3, #4]
 8009fec:	eeb0 0a67 	vmov.f32	s0, s15
 8009ff0:	f019 fcae 	bl	8023950 <sinf>
 8009ff4:	ed87 0a05 	vstr	s0, [r7, #20]
    float Xh = vec->A[X] * cosinePitch + vec->A[Y] * sineRoll * sinePitch + vec->A[Z] * sinePitch * cosineRoll;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	ed93 7a00 	vldr	s14, [r3]
 8009ffe:	edd7 7a06 	vldr	s15, [r7, #24]
 800a002:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	edd3 6a01 	vldr	s13, [r3, #4]
 800a00c:	edd7 7a07 	vldr	s15, [r7, #28]
 800a010:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a014:	edd7 7a05 	vldr	s15, [r7, #20]
 800a018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a01c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	edd3 6a02 	vldr	s13, [r3, #8]
 800a026:	edd7 7a05 	vldr	s15, [r7, #20]
 800a02a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a02e:	edd7 7a08 	vldr	s15, [r7, #32]
 800a032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a03a:	edc7 7a04 	vstr	s15, [r7, #16]
    float Yh = vec->A[Y] * cosineRoll - vec->A[Z] * sineRoll;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	ed93 7a01 	vldr	s14, [r3, #4]
 800a044:	edd7 7a08 	vldr	s15, [r7, #32]
 800a048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	edd3 6a02 	vldr	s13, [r3, #8]
 800a052:	edd7 7a07 	vldr	s15, [r7, #28]
 800a056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a05a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a05e:	edc7 7a03 	vstr	s15, [r7, #12]
    float hd = (atan2f(Yh, Xh) * 1800.0f / M_PI + sensor_set.mag.declination) / 10.0f;
 800a062:	edd7 0a04 	vldr	s1, [r7, #16]
 800a066:	ed97 0a03 	vldr	s0, [r7, #12]
 800a06a:	f019 fce3 	bl	8023a34 <atan2f>
 800a06e:	eef0 7a40 	vmov.f32	s15, s0
 800a072:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800a104 <calculateHeading+0x15c>
 800a076:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a07a:	ee17 0a90 	vmov	r0, s15
 800a07e:	f7f6 fa21 	bl	80004c4 <__aeabi_f2d>
 800a082:	a31d      	add	r3, pc, #116	; (adr r3, 800a0f8 <calculateHeading+0x150>)
 800a084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a088:	f7f6 fb9e 	bl	80007c8 <__aeabi_ddiv>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4614      	mov	r4, r2
 800a092:	461d      	mov	r5, r3
 800a094:	4b1c      	ldr	r3, [pc, #112]	; (800a108 <calculateHeading+0x160>)
 800a096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a098:	4618      	mov	r0, r3
 800a09a:	f7f6 fa13 	bl	80004c4 <__aeabi_f2d>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	f7f6 f8af 	bl	8000208 <__adddf3>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	4610      	mov	r0, r2
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	f04f 0200 	mov.w	r2, #0
 800a0b6:	4b15      	ldr	r3, [pc, #84]	; (800a10c <calculateHeading+0x164>)
 800a0b8:	f7f6 fb86 	bl	80007c8 <__aeabi_ddiv>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	f7f6 fd38 	bl	8000b38 <__aeabi_d2f>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	60bb      	str	r3, [r7, #8]
    head = lrintf(hd);
 800a0cc:	ed97 0a02 	vldr	s0, [r7, #8]
 800a0d0:	f019 fbfe 	bl	80238d0 <lrintf>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (head < 0)
 800a0d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	da04      	bge.n	800a0ea <calculateHeading+0x142>
        head += 360;
 800a0e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	84fb      	strh	r3, [r7, #38]	; 0x26

    return head;
 800a0ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3728      	adds	r7, #40	; 0x28
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bdb0      	pop	{r4, r5, r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	54442d18 	.word	0x54442d18
 800a0fc:	400921fb 	.word	0x400921fb
 800a100:	20001434 	.word	0x20001434
 800a104:	44e10000 	.word	0x44e10000
 800a108:	200019c8 	.word	0x200019c8
 800a10c:	40240000 	.word	0x40240000

0800a110 <getEstimatedAttitude>:

static void getEstimatedAttitude(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	ed2d 8b02 	vpush	{d8}
 800a116:	b08a      	sub	sp, #40	; 0x28
 800a118:	af00      	add	r7, sp, #0
    int32_t axis;
    int32_t accMag = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	623b      	str	r3, [r7, #32]
    static t_fp_vector EstM;
    static t_fp_vector EstN = { .A = { 1.0f, 0.0f, 0.0f } };
    static float accLPF[3];
    static uint32_t previousT = 0UL;
    uint32_t currentT = (*pif_act_timer1us)();
 800a11e:	4bbc      	ldr	r3, [pc, #752]	; (800a410 <getEstimatedAttitude+0x300>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4798      	blx	r3
 800a124:	61b8      	str	r0, [r7, #24]
    uint32_t deltaT;
    float scale, deltaGyroAngle[3];
    deltaT = currentT - previousT;
 800a126:	4bbb      	ldr	r3, [pc, #748]	; (800a414 <getEstimatedAttitude+0x304>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69ba      	ldr	r2, [r7, #24]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	617b      	str	r3, [r7, #20]
    scale = deltaT * sensor_set.gyro.scale;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	ee07 3a90 	vmov	s15, r3
 800a136:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a13a:	4bb7      	ldr	r3, [pc, #732]	; (800a418 <getEstimatedAttitude+0x308>)
 800a13c:	edd3 7a05 	vldr	s15, [r3, #20]
 800a140:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a144:	edc7 7a04 	vstr	s15, [r7, #16]
    previousT = currentT;
 800a148:	4ab2      	ldr	r2, [pc, #712]	; (800a414 <getEstimatedAttitude+0x304>)
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	6013      	str	r3, [r2, #0]

    // Initialization
    for (axis = 0; axis < 3; axis++) {
 800a14e:	2300      	movs	r3, #0
 800a150:	627b      	str	r3, [r7, #36]	; 0x24
 800a152:	e074      	b.n	800a23e <getEstimatedAttitude+0x12e>
        deltaGyroAngle[axis] = gyroADC[axis] * scale;
 800a154:	4ab1      	ldr	r2, [pc, #708]	; (800a41c <getEstimatedAttitude+0x30c>)
 800a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a158:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a15c:	ee07 3a90 	vmov	s15, r3
 800a160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a164:	edd7 7a04 	vldr	s15, [r7, #16]
 800a168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	3328      	adds	r3, #40	; 0x28
 800a172:	443b      	add	r3, r7
 800a174:	3b28      	subs	r3, #40	; 0x28
 800a176:	edc3 7a00 	vstr	s15, [r3]
        if (cfg.acc_lpf_factor > 0) {
 800a17a:	4ba9      	ldr	r3, [pc, #676]	; (800a420 <getEstimatedAttitude+0x310>)
 800a17c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a180:	2b00      	cmp	r3, #0
 800a182:	d043      	beq.n	800a20c <getEstimatedAttitude+0xfc>
            accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / cfg.acc_lpf_factor)) + accADC[axis] * (1.0f / cfg.acc_lpf_factor);
 800a184:	4aa7      	ldr	r2, [pc, #668]	; (800a424 <getEstimatedAttitude+0x314>)
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	ed93 7a00 	vldr	s14, [r3]
 800a190:	4ba3      	ldr	r3, [pc, #652]	; (800a420 <getEstimatedAttitude+0x310>)
 800a192:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a196:	ee07 3a90 	vmov	s15, r3
 800a19a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a19e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a1a2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a1a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a1ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1b2:	4a9d      	ldr	r2, [pc, #628]	; (800a428 <getEstimatedAttitude+0x318>)
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a1ba:	ee07 3a90 	vmov	s15, r3
 800a1be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1c2:	4b97      	ldr	r3, [pc, #604]	; (800a420 <getEstimatedAttitude+0x310>)
 800a1c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1c8:	ee07 3a90 	vmov	s15, r3
 800a1cc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a1d0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a1d4:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800a1d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1e0:	4a90      	ldr	r2, [pc, #576]	; (800a424 <getEstimatedAttitude+0x314>)
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	edc3 7a00 	vstr	s15, [r3]
            accSmooth[axis] = accLPF[axis];
 800a1ec:	4a8d      	ldr	r2, [pc, #564]	; (800a424 <getEstimatedAttitude+0x314>)
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4413      	add	r3, r2
 800a1f4:	edd3 7a00 	vldr	s15, [r3]
 800a1f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1fc:	ee17 3a90 	vmov	r3, s15
 800a200:	b219      	sxth	r1, r3
 800a202:	4a8a      	ldr	r2, [pc, #552]	; (800a42c <getEstimatedAttitude+0x31c>)
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a20a:	e007      	b.n	800a21c <getEstimatedAttitude+0x10c>
        } else {
            accSmooth[axis] = accADC[axis];
 800a20c:	4a86      	ldr	r2, [pc, #536]	; (800a428 <getEstimatedAttitude+0x318>)
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800a214:	4a85      	ldr	r2, [pc, #532]	; (800a42c <getEstimatedAttitude+0x31c>)
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        accMag += (int32_t)accSmooth[axis] * accSmooth[axis];
 800a21c:	4a83      	ldr	r2, [pc, #524]	; (800a42c <getEstimatedAttitude+0x31c>)
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a224:	4619      	mov	r1, r3
 800a226:	4a81      	ldr	r2, [pc, #516]	; (800a42c <getEstimatedAttitude+0x31c>)
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a22e:	fb01 f303 	mul.w	r3, r1, r3
 800a232:	6a3a      	ldr	r2, [r7, #32]
 800a234:	4413      	add	r3, r2
 800a236:	623b      	str	r3, [r7, #32]
    for (axis = 0; axis < 3; axis++) {
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	3301      	adds	r3, #1
 800a23c:	627b      	str	r3, [r7, #36]	; 0x24
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	2b02      	cmp	r3, #2
 800a242:	dd87      	ble.n	800a154 <getEstimatedAttitude+0x44>
    }
    accMag = accMag * 100 / ((int32_t)acc_1G * acc_1G);
 800a244:	6a3b      	ldr	r3, [r7, #32]
 800a246:	2264      	movs	r2, #100	; 0x64
 800a248:	fb03 f202 	mul.w	r2, r3, r2
 800a24c:	4b78      	ldr	r3, [pc, #480]	; (800a430 <getEstimatedAttitude+0x320>)
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	4619      	mov	r1, r3
 800a252:	4b77      	ldr	r3, [pc, #476]	; (800a430 <getEstimatedAttitude+0x320>)
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	fb01 f303 	mul.w	r3, r1, r3
 800a25a:	fb92 f3f3 	sdiv	r3, r2, r3
 800a25e:	623b      	str	r3, [r7, #32]

    rotateV(&EstG.V, deltaGyroAngle);
 800a260:	463b      	mov	r3, r7
 800a262:	4619      	mov	r1, r3
 800a264:	4873      	ldr	r0, [pc, #460]	; (800a434 <getEstimatedAttitude+0x324>)
 800a266:	f7ff fc25 	bl	8009ab4 <rotateV>

    // Apply complimentary filter (Gyro drift correction)
    // If accel magnitude >1.15G or <0.85G and ACC vector outside of the limit range => we neutralize the effect of accelerometers in the angle estimation.
    // To do that, we just skip filter, as EstV already rotated by Gyro
    if (72 < (uint16_t)accMag && (uint16_t)accMag < 133) {
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	2b48      	cmp	r3, #72	; 0x48
 800a270:	d93c      	bls.n	800a2ec <getEstimatedAttitude+0x1dc>
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	b29b      	uxth	r3, r3
 800a276:	2b84      	cmp	r3, #132	; 0x84
 800a278:	d838      	bhi.n	800a2ec <getEstimatedAttitude+0x1dc>
        for (axis = 0; axis < 3; axis++)
 800a27a:	2300      	movs	r3, #0
 800a27c:	627b      	str	r3, [r7, #36]	; 0x24
 800a27e:	e032      	b.n	800a2e6 <getEstimatedAttitude+0x1d6>
            EstG.A[axis] = (EstG.A[axis] * (float)mcfg.gyro_cmpf_factor + accSmooth[axis]) * INV_GYR_CMPF_FACTOR;
 800a280:	4a6c      	ldr	r2, [pc, #432]	; (800a434 <getEstimatedAttitude+0x324>)
 800a282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4413      	add	r3, r2
 800a288:	ed93 7a00 	vldr	s14, [r3]
 800a28c:	4b6a      	ldr	r3, [pc, #424]	; (800a438 <getEstimatedAttitude+0x328>)
 800a28e:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a292:	ee07 3a90 	vmov	s15, r3
 800a296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a29e:	4a63      	ldr	r2, [pc, #396]	; (800a42c <getEstimatedAttitude+0x31c>)
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a2a6:	ee07 3a90 	vmov	s15, r3
 800a2aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2b2:	4b61      	ldr	r3, [pc, #388]	; (800a438 <getEstimatedAttitude+0x328>)
 800a2b4:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a2b8:	ee07 3a90 	vmov	s15, r3
 800a2bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2c4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a2c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a2cc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a2d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d4:	4a57      	ldr	r2, [pc, #348]	; (800a434 <getEstimatedAttitude+0x324>)
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	ddc9      	ble.n	800a280 <getEstimatedAttitude+0x170>
    }

    f.SMALL_ANGLE = (EstG.A[Z] > smallAngle);
 800a2ec:	4b51      	ldr	r3, [pc, #324]	; (800a434 <getEstimatedAttitude+0x324>)
 800a2ee:	ed93 7a02 	vldr	s14, [r3, #8]
 800a2f2:	4b52      	ldr	r3, [pc, #328]	; (800a43c <getEstimatedAttitude+0x32c>)
 800a2f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2f8:	ee07 3a90 	vmov	s15, r3
 800a2fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a308:	bfcc      	ite	gt
 800a30a:	2301      	movgt	r3, #1
 800a30c:	2300      	movle	r3, #0
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	461a      	mov	r2, r3
 800a312:	4b4b      	ldr	r3, [pc, #300]	; (800a440 <getEstimatedAttitude+0x330>)
 800a314:	735a      	strb	r2, [r3, #13]

    // Attitude of the estimated vector
    anglerad[ROLL] = atan2f(EstG.V.Y, EstG.V.Z);
 800a316:	4b47      	ldr	r3, [pc, #284]	; (800a434 <getEstimatedAttitude+0x324>)
 800a318:	edd3 7a01 	vldr	s15, [r3, #4]
 800a31c:	4b45      	ldr	r3, [pc, #276]	; (800a434 <getEstimatedAttitude+0x324>)
 800a31e:	ed93 7a02 	vldr	s14, [r3, #8]
 800a322:	eef0 0a47 	vmov.f32	s1, s14
 800a326:	eeb0 0a67 	vmov.f32	s0, s15
 800a32a:	f019 fb83 	bl	8023a34 <atan2f>
 800a32e:	eef0 7a40 	vmov.f32	s15, s0
 800a332:	4b44      	ldr	r3, [pc, #272]	; (800a444 <getEstimatedAttitude+0x334>)
 800a334:	edc3 7a00 	vstr	s15, [r3]
    anglerad[PITCH] = atan2f(-EstG.V.X, sqrtf(EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z));
 800a338:	4b3e      	ldr	r3, [pc, #248]	; (800a434 <getEstimatedAttitude+0x324>)
 800a33a:	edd3 7a00 	vldr	s15, [r3]
 800a33e:	eeb1 8a67 	vneg.f32	s16, s15
 800a342:	4b3c      	ldr	r3, [pc, #240]	; (800a434 <getEstimatedAttitude+0x324>)
 800a344:	ed93 7a01 	vldr	s14, [r3, #4]
 800a348:	4b3a      	ldr	r3, [pc, #232]	; (800a434 <getEstimatedAttitude+0x324>)
 800a34a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a34e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a352:	4b38      	ldr	r3, [pc, #224]	; (800a434 <getEstimatedAttitude+0x324>)
 800a354:	edd3 6a02 	vldr	s13, [r3, #8]
 800a358:	4b36      	ldr	r3, [pc, #216]	; (800a434 <getEstimatedAttitude+0x324>)
 800a35a:	edd3 7a02 	vldr	s15, [r3, #8]
 800a35e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a362:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a366:	eeb0 0a67 	vmov.f32	s0, s15
 800a36a:	f019 fbbd 	bl	8023ae8 <sqrtf>
 800a36e:	eef0 7a40 	vmov.f32	s15, s0
 800a372:	eef0 0a67 	vmov.f32	s1, s15
 800a376:	eeb0 0a48 	vmov.f32	s0, s16
 800a37a:	f019 fb5b 	bl	8023a34 <atan2f>
 800a37e:	eef0 7a40 	vmov.f32	s15, s0
 800a382:	4b30      	ldr	r3, [pc, #192]	; (800a444 <getEstimatedAttitude+0x334>)
 800a384:	edc3 7a01 	vstr	s15, [r3, #4]
    angle[ROLL] = lrintf(anglerad[ROLL] * (1800.0f / M_PI));
 800a388:	4b2e      	ldr	r3, [pc, #184]	; (800a444 <getEstimatedAttitude+0x334>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7f6 f899 	bl	80004c4 <__aeabi_f2d>
 800a392:	a31d      	add	r3, pc, #116	; (adr r3, 800a408 <getEstimatedAttitude+0x2f8>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f7f6 f8ec 	bl	8000574 <__aeabi_dmul>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	f7f6 fbc8 	bl	8000b38 <__aeabi_d2f>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	ee00 3a10 	vmov	s0, r3
 800a3ae:	f019 fa8f 	bl	80238d0 <lrintf>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	b21a      	sxth	r2, r3
 800a3b6:	4b24      	ldr	r3, [pc, #144]	; (800a448 <getEstimatedAttitude+0x338>)
 800a3b8:	801a      	strh	r2, [r3, #0]
    angle[PITCH] = lrintf(anglerad[PITCH] * (1800.0f / M_PI));
 800a3ba:	4b22      	ldr	r3, [pc, #136]	; (800a444 <getEstimatedAttitude+0x334>)
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7f6 f880 	bl	80004c4 <__aeabi_f2d>
 800a3c4:	a310      	add	r3, pc, #64	; (adr r3, 800a408 <getEstimatedAttitude+0x2f8>)
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	f7f6 f8d3 	bl	8000574 <__aeabi_dmul>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	f7f6 fbaf 	bl	8000b38 <__aeabi_d2f>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	ee00 3a10 	vmov	s0, r3
 800a3e0:	f019 fa76 	bl	80238d0 <lrintf>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	b21a      	sxth	r2, r3
 800a3e8:	4b17      	ldr	r3, [pc, #92]	; (800a448 <getEstimatedAttitude+0x338>)
 800a3ea:	805a      	strh	r2, [r3, #2]

    if (sensors(SENSOR_MAG)) {
 800a3ec:	2008      	movs	r0, #8
 800a3ee:	f7fc fd07 	bl	8006e00 <sensors>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d069      	beq.n	800a4cc <getEstimatedAttitude+0x3bc>
        rotateV(&EstM.V, deltaGyroAngle);
 800a3f8:	463b      	mov	r3, r7
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	4813      	ldr	r0, [pc, #76]	; (800a44c <getEstimatedAttitude+0x33c>)
 800a3fe:	f7ff fb59 	bl	8009ab4 <rotateV>
        for (axis = 0; axis < 3; axis++)
 800a402:	2300      	movs	r3, #0
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
 800a406:	e056      	b.n	800a4b6 <getEstimatedAttitude+0x3a6>
 800a408:	907e593b 	.word	0x907e593b
 800a40c:	4081e7a9 	.word	0x4081e7a9
 800a410:	20001f14 	.word	0x20001f14
 800a414:	20001454 	.word	0x20001454
 800a418:	200019c8 	.word	0x200019c8
 800a41c:	200013a8 	.word	0x200013a8
 800a420:	20000d18 	.word	0x20000d18
 800a424:	20001458 	.word	0x20001458
 800a428:	200013b0 	.word	0x200013b0
 800a42c:	200013b8 	.word	0x200013b8
 800a430:	2000005a 	.word	0x2000005a
 800a434:	2000143c 	.word	0x2000143c
 800a438:	200007ac 	.word	0x200007ac
 800a43c:	200013dc 	.word	0x200013dc
 800a440:	20001628 	.word	0x20001628
 800a444:	20001434 	.word	0x20001434
 800a448:	20001430 	.word	0x20001430
 800a44c:	20001464 	.word	0x20001464
            EstM.A[axis] = (EstM.A[axis] * (float)mcfg.gyro_cmpfm_factor + magADC[axis]) * INV_GYR_CMPFM_FACTOR;
 800a450:	4a69      	ldr	r2, [pc, #420]	; (800a5f8 <getEstimatedAttitude+0x4e8>)
 800a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	ed93 7a00 	vldr	s14, [r3]
 800a45c:	4b67      	ldr	r3, [pc, #412]	; (800a5fc <getEstimatedAttitude+0x4ec>)
 800a45e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a462:	ee07 3a90 	vmov	s15, r3
 800a466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a46e:	4a64      	ldr	r2, [pc, #400]	; (800a600 <getEstimatedAttitude+0x4f0>)
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a476:	ee07 3a90 	vmov	s15, r3
 800a47a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a47e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a482:	4b5e      	ldr	r3, [pc, #376]	; (800a5fc <getEstimatedAttitude+0x4ec>)
 800a484:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a488:	ee07 3a90 	vmov	s15, r3
 800a48c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a494:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a498:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a49c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a4a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4a4:	4a54      	ldr	r2, [pc, #336]	; (800a5f8 <getEstimatedAttitude+0x4e8>)
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	ddc9      	ble.n	800a450 <getEstimatedAttitude+0x340>
        heading = calculateHeading(&EstM);
 800a4bc:	484e      	ldr	r0, [pc, #312]	; (800a5f8 <getEstimatedAttitude+0x4e8>)
 800a4be:	f7ff fd73 	bl	8009fa8 <calculateHeading>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	4b4f      	ldr	r3, [pc, #316]	; (800a604 <getEstimatedAttitude+0x4f4>)
 800a4c8:	801a      	strh	r2, [r3, #0]
 800a4ca:	e00f      	b.n	800a4ec <getEstimatedAttitude+0x3dc>
    } else {
        rotateV(&EstN.V, deltaGyroAngle);
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	484d      	ldr	r0, [pc, #308]	; (800a608 <getEstimatedAttitude+0x4f8>)
 800a4d2:	f7ff faef 	bl	8009ab4 <rotateV>
        normalizeV(&EstN.V, &EstN.V);
 800a4d6:	494c      	ldr	r1, [pc, #304]	; (800a608 <getEstimatedAttitude+0x4f8>)
 800a4d8:	484b      	ldr	r0, [pc, #300]	; (800a608 <getEstimatedAttitude+0x4f8>)
 800a4da:	f7ff fa9b 	bl	8009a14 <normalizeV>
        heading = calculateHeading(&EstN);
 800a4de:	484a      	ldr	r0, [pc, #296]	; (800a608 <getEstimatedAttitude+0x4f8>)
 800a4e0:	f7ff fd62 	bl	8009fa8 <calculateHeading>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	4b46      	ldr	r3, [pc, #280]	; (800a604 <getEstimatedAttitude+0x4f4>)
 800a4ea:	801a      	strh	r2, [r3, #0]
    }

    acc_calc(deltaT); // rotate acc vector into earth frame
 800a4ec:	6978      	ldr	r0, [r7, #20]
 800a4ee:	f7ff fc13 	bl	8009d18 <acc_calc>

    if (cfg.throttle_correction_value) {
 800a4f2:	4b46      	ldr	r3, [pc, #280]	; (800a60c <getEstimatedAttitude+0x4fc>)
 800a4f4:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d072      	beq.n	800a5e2 <getEstimatedAttitude+0x4d2>

        float cosZ = EstG.V.Z / sqrtf(EstG.V.X * EstG.V.X + EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z);
 800a4fc:	4b44      	ldr	r3, [pc, #272]	; (800a610 <getEstimatedAttitude+0x500>)
 800a4fe:	ed93 8a02 	vldr	s16, [r3, #8]
 800a502:	4b43      	ldr	r3, [pc, #268]	; (800a610 <getEstimatedAttitude+0x500>)
 800a504:	ed93 7a00 	vldr	s14, [r3]
 800a508:	4b41      	ldr	r3, [pc, #260]	; (800a610 <getEstimatedAttitude+0x500>)
 800a50a:	edd3 7a00 	vldr	s15, [r3]
 800a50e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a512:	4b3f      	ldr	r3, [pc, #252]	; (800a610 <getEstimatedAttitude+0x500>)
 800a514:	edd3 6a01 	vldr	s13, [r3, #4]
 800a518:	4b3d      	ldr	r3, [pc, #244]	; (800a610 <getEstimatedAttitude+0x500>)
 800a51a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a51e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a522:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a526:	4b3a      	ldr	r3, [pc, #232]	; (800a610 <getEstimatedAttitude+0x500>)
 800a528:	edd3 6a02 	vldr	s13, [r3, #8]
 800a52c:	4b38      	ldr	r3, [pc, #224]	; (800a610 <getEstimatedAttitude+0x500>)
 800a52e:	edd3 7a02 	vldr	s15, [r3, #8]
 800a532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a53a:	eeb0 0a67 	vmov.f32	s0, s15
 800a53e:	f019 fad3 	bl	8023ae8 <sqrtf>
 800a542:	eeb0 7a40 	vmov.f32	s14, s0
 800a546:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800a54a:	edc7 7a03 	vstr	s15, [r7, #12]

        if (cosZ <= 0.015f) { // we are inverted, vertical or with a small angle < 0.86 deg
 800a54e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a552:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a614 <getEstimatedAttitude+0x504>
 800a556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55e:	d803      	bhi.n	800a568 <getEstimatedAttitude+0x458>
            throttleAngleCorrection = 0;
 800a560:	4b2d      	ldr	r3, [pc, #180]	; (800a618 <getEstimatedAttitude+0x508>)
 800a562:	2200      	movs	r2, #0
 800a564:	801a      	strh	r2, [r3, #0]
            if (deg > 900)
                deg = 900;
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
        }
    }
}
 800a566:	e03c      	b.n	800a5e2 <getEstimatedAttitude+0x4d2>
            int deg = lrintf(acosf(cosZ) * throttleAngleScale);
 800a568:	ed97 0a03 	vldr	s0, [r7, #12]
 800a56c:	f019 fa36 	bl	80239dc <acosf>
 800a570:	eeb0 7a40 	vmov.f32	s14, s0
 800a574:	4b29      	ldr	r3, [pc, #164]	; (800a61c <getEstimatedAttitude+0x50c>)
 800a576:	edd3 7a00 	vldr	s15, [r3]
 800a57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a57e:	eeb0 0a67 	vmov.f32	s0, s15
 800a582:	f019 f9a5 	bl	80238d0 <lrintf>
 800a586:	61f8      	str	r0, [r7, #28]
            if (deg > 900)
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a58e:	dd02      	ble.n	800a596 <getEstimatedAttitude+0x486>
                deg = 900;
 800a590:	f44f 7361 	mov.w	r3, #900	; 0x384
 800a594:	61fb      	str	r3, [r7, #28]
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
 800a596:	4b1d      	ldr	r3, [pc, #116]	; (800a60c <getEstimatedAttitude+0x4fc>)
 800a598:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a59c:	ee07 3a90 	vmov	s15, r3
 800a5a0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a5a4:	69f8      	ldr	r0, [r7, #28]
 800a5a6:	f7f5 ff7b 	bl	80004a0 <__aeabi_i2d>
 800a5aa:	a311      	add	r3, pc, #68	; (adr r3, 800a5f0 <getEstimatedAttitude+0x4e0>)
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	f7f6 f90a 	bl	80007c8 <__aeabi_ddiv>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	f7f6 fabc 	bl	8000b38 <__aeabi_d2f>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	ee00 3a10 	vmov	s0, r3
 800a5c6:	f019 f9c3 	bl	8023950 <sinf>
 800a5ca:	eef0 7a40 	vmov.f32	s15, s0
 800a5ce:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a5d2:	eeb0 0a67 	vmov.f32	s0, s15
 800a5d6:	f019 f97b 	bl	80238d0 <lrintf>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	b21a      	sxth	r2, r3
 800a5de:	4b0e      	ldr	r3, [pc, #56]	; (800a618 <getEstimatedAttitude+0x508>)
 800a5e0:	801a      	strh	r2, [r3, #0]
}
 800a5e2:	bf00      	nop
 800a5e4:	3728      	adds	r7, #40	; 0x28
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	ecbd 8b02 	vpop	{d8}
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	e50feba2 	.word	0xe50feba2
 800a5f4:	409616dd 	.word	0x409616dd
 800a5f8:	20001464 	.word	0x20001464
 800a5fc:	200007ac 	.word	0x200007ac
 800a600:	200013c0 	.word	0x200013c0
 800a604:	200019ba 	.word	0x200019ba
 800a608:	20000034 	.word	0x20000034
 800a60c:	20000d18 	.word	0x20000d18
 800a610:	2000143c 	.word	0x2000143c
 800a614:	3c75c28f 	.word	0x3c75c28f
 800a618:	20001410 	.word	0x20001410
 800a61c:	20001418 	.word	0x20001418

0800a620 <taskGetEstimatedAltitude>:

#ifdef BARO

uint16_t taskGetEstimatedAltitude(PifTask *p_task)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08e      	sub	sp, #56	; 0x38
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
    static uint32_t previousT;
    uint32_t currentT = (*pif_act_timer1us)();
 800a628:	4b84      	ldr	r3, [pc, #528]	; (800a83c <taskGetEstimatedAltitude+0x21c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4798      	blx	r3
 800a62e:	6338      	str	r0, [r7, #48]	; 0x30
    static float vel = 0.0f;
    static float accAlt = 0.0f;
    static int32_t lastBaroAlt;
    static int32_t baroGroundAltitude = 0;
    static int32_t baroGroundPressure = 0;
    int16_t tiltAngle = max(abs(angle[ROLL]), abs(angle[PITCH]));
 800a630:	4b83      	ldr	r3, [pc, #524]	; (800a840 <taskGetEstimatedAltitude+0x220>)
 800a632:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a636:	2b00      	cmp	r3, #0
 800a638:	bfb8      	it	lt
 800a63a:	425b      	neglt	r3, r3
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	4b80      	ldr	r3, [pc, #512]	; (800a840 <taskGetEstimatedAltitude+0x220>)
 800a640:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a644:	2b00      	cmp	r3, #0
 800a646:	bfb8      	it	lt
 800a648:	425b      	neglt	r3, r3
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	4293      	cmp	r3, r2
 800a64e:	bf38      	it	cc
 800a650:	4613      	movcc	r3, r2
 800a652:	b29b      	uxth	r3, r3
 800a654:	85fb      	strh	r3, [r7, #46]	; 0x2e

    (void)p_task;

    baroState = 0;
 800a656:	4b7b      	ldr	r3, [pc, #492]	; (800a844 <taskGetEstimatedAltitude+0x224>)
 800a658:	2200      	movs	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]

    dTime = currentT - previousT;
 800a65c:	4b7a      	ldr	r3, [pc, #488]	; (800a848 <taskGetEstimatedAltitude+0x228>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	62bb      	str	r3, [r7, #40]	; 0x28
    previousT = currentT;
 800a666:	4a78      	ldr	r2, [pc, #480]	; (800a848 <taskGetEstimatedAltitude+0x228>)
 800a668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66a:	6013      	str	r3, [r2, #0]

    if (calibratingB > 0) {
 800a66c:	4b77      	ldr	r3, [pc, #476]	; (800a84c <taskGetEstimatedAltitude+0x22c>)
 800a66e:	881b      	ldrh	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d058      	beq.n	800a726 <taskGetEstimatedAltitude+0x106>
        baroGroundPressure -= baroGroundPressure / 8;
 800a674:	4b76      	ldr	r3, [pc, #472]	; (800a850 <taskGetEstimatedAltitude+0x230>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	da00      	bge.n	800a67e <taskGetEstimatedAltitude+0x5e>
 800a67c:	3307      	adds	r3, #7
 800a67e:	10db      	asrs	r3, r3, #3
 800a680:	425b      	negs	r3, r3
 800a682:	461a      	mov	r2, r3
 800a684:	4b72      	ldr	r3, [pc, #456]	; (800a850 <taskGetEstimatedAltitude+0x230>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4413      	add	r3, r2
 800a68a:	4a71      	ldr	r2, [pc, #452]	; (800a850 <taskGetEstimatedAltitude+0x230>)
 800a68c:	6013      	str	r3, [r2, #0]
        baroGroundPressure += baroPressureSum / (cfg.baro_tab_size - 1);
 800a68e:	4b71      	ldr	r3, [pc, #452]	; (800a854 <taskGetEstimatedAltitude+0x234>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a71      	ldr	r2, [pc, #452]	; (800a858 <taskGetEstimatedAltitude+0x238>)
 800a694:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a698:	3a01      	subs	r2, #1
 800a69a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a69e:	4a6c      	ldr	r2, [pc, #432]	; (800a850 <taskGetEstimatedAltitude+0x230>)
 800a6a0:	6812      	ldr	r2, [r2, #0]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	4b6a      	ldr	r3, [pc, #424]	; (800a850 <taskGetEstimatedAltitude+0x230>)
 800a6a8:	601a      	str	r2, [r3, #0]
        baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 800a6aa:	4b69      	ldr	r3, [pc, #420]	; (800a850 <taskGetEstimatedAltitude+0x230>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	da00      	bge.n	800a6b4 <taskGetEstimatedAltitude+0x94>
 800a6b2:	3307      	adds	r3, #7
 800a6b4:	10db      	asrs	r3, r3, #3
 800a6b6:	ee07 3a90 	vmov	s15, r3
 800a6ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6be:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a85c <taskGetEstimatedAltitude+0x23c>
 800a6c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a6c6:	eddf 0a66 	vldr	s1, [pc, #408]	; 800a860 <taskGetEstimatedAltitude+0x240>
 800a6ca:	eeb0 0a47 	vmov.f32	s0, s14
 800a6ce:	f019 f9b3 	bl	8023a38 <powf>
 800a6d2:	eef0 7a40 	vmov.f32	s15, s0
 800a6d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6de:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800a864 <taskGetEstimatedAltitude+0x244>
 800a6e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a6ea:	ee17 2a90 	vmov	r2, s15
 800a6ee:	4b5e      	ldr	r3, [pc, #376]	; (800a868 <taskGetEstimatedAltitude+0x248>)
 800a6f0:	601a      	str	r2, [r3, #0]

        vel = 0;
 800a6f2:	4b5e      	ldr	r3, [pc, #376]	; (800a86c <taskGetEstimatedAltitude+0x24c>)
 800a6f4:	f04f 0200 	mov.w	r2, #0
 800a6f8:	601a      	str	r2, [r3, #0]
        accAlt = 0;
 800a6fa:	4b5d      	ldr	r3, [pc, #372]	; (800a870 <taskGetEstimatedAltitude+0x250>)
 800a6fc:	f04f 0200 	mov.w	r2, #0
 800a700:	601a      	str	r2, [r3, #0]
        calibratingB--;
 800a702:	4b52      	ldr	r3, [pc, #328]	; (800a84c <taskGetEstimatedAltitude+0x22c>)
 800a704:	881b      	ldrh	r3, [r3, #0]
 800a706:	3b01      	subs	r3, #1
 800a708:	b29a      	uxth	r2, r3
 800a70a:	4b50      	ldr	r3, [pc, #320]	; (800a84c <taskGetEstimatedAltitude+0x22c>)
 800a70c:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingB) {
 800a70e:	4b4f      	ldr	r3, [pc, #316]	; (800a84c <taskGetEstimatedAltitude+0x22c>)
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d107      	bne.n	800a726 <taskGetEstimatedAltitude+0x106>
        	pifLog_Printf(LT_INFO, "Baro: GP=%ld, GA=%ld", baroGroundPressure, baroGroundAltitude);
 800a716:	4b4e      	ldr	r3, [pc, #312]	; (800a850 <taskGetEstimatedAltitude+0x230>)
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	4b53      	ldr	r3, [pc, #332]	; (800a868 <taskGetEstimatedAltitude+0x248>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4955      	ldr	r1, [pc, #340]	; (800a874 <taskGetEstimatedAltitude+0x254>)
 800a720:	2002      	movs	r0, #2
 800a722:	f009 f88d 	bl	8013840 <pifLog_Printf>
#endif
    }

    // calculates height from ground via baro readings
    // see: https://github.com/diydrones/ardupilot/blob/master/libraries/AP_Baro/AP_Baro.cpp#L140
    BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (cfg.baro_tab_size - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 800a726:	4b4b      	ldr	r3, [pc, #300]	; (800a854 <taskGetEstimatedAltitude+0x234>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a4b      	ldr	r2, [pc, #300]	; (800a858 <taskGetEstimatedAltitude+0x238>)
 800a72c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a730:	3a01      	subs	r2, #1
 800a732:	fbb3 f3f2 	udiv	r3, r3, r2
 800a736:	ee07 3a90 	vmov	s15, r3
 800a73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a73e:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a85c <taskGetEstimatedAltitude+0x23c>
 800a742:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a746:	eddf 0a46 	vldr	s1, [pc, #280]	; 800a860 <taskGetEstimatedAltitude+0x240>
 800a74a:	eeb0 0a47 	vmov.f32	s0, s14
 800a74e:	f019 f973 	bl	8023a38 <powf>
 800a752:	eef0 7a40 	vmov.f32	s15, s0
 800a756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a75a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a75e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a864 <taskGetEstimatedAltitude+0x244>
 800a762:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a766:	eeb0 0a67 	vmov.f32	s0, s15
 800a76a:	f019 f8b1 	bl	80238d0 <lrintf>
 800a76e:	6278      	str	r0, [r7, #36]	; 0x24
    BaroAlt_tmp -= baroGroundAltitude;
 800a770:	4b3d      	ldr	r3, [pc, #244]	; (800a868 <taskGetEstimatedAltitude+0x248>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	627b      	str	r3, [r7, #36]	; 0x24
    BaroAlt = lrintf((float)BaroAlt * cfg.baro_noise_lpf + (float)BaroAlt_tmp * (1.0f - cfg.baro_noise_lpf)); // additional LPF to reduce baro noise
 800a77a:	4b3f      	ldr	r3, [pc, #252]	; (800a878 <taskGetEstimatedAltitude+0x258>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	ee07 3a90 	vmov	s15, r3
 800a782:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a786:	4b34      	ldr	r3, [pc, #208]	; (800a858 <taskGetEstimatedAltitude+0x238>)
 800a788:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a78c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	ee07 3a90 	vmov	s15, r3
 800a796:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a79a:	4b2f      	ldr	r3, [pc, #188]	; (800a858 <taskGetEstimatedAltitude+0x238>)
 800a79c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a7a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a7a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a7a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7b0:	eeb0 0a67 	vmov.f32	s0, s15
 800a7b4:	f019 f88c 	bl	80238d0 <lrintf>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	4a2f      	ldr	r2, [pc, #188]	; (800a878 <taskGetEstimatedAltitude+0x258>)
 800a7bc:	6013      	str	r3, [r2, #0]

    // calculate sonar altitude only if the sonar is facing downwards(<25deg)
    if (tiltAngle > 250 || sonarDistance == -1)
 800a7be:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a7c2:	2bfa      	cmp	r3, #250	; 0xfa
 800a7c4:	dc04      	bgt.n	800a7d0 <taskGetEstimatedAltitude+0x1b0>
 800a7c6:	4b2d      	ldr	r3, [pc, #180]	; (800a87c <taskGetEstimatedAltitude+0x25c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ce:	d104      	bne.n	800a7da <taskGetEstimatedAltitude+0x1ba>
        sonarAlt = -1;
 800a7d0:	4b2b      	ldr	r3, [pc, #172]	; (800a880 <taskGetEstimatedAltitude+0x260>)
 800a7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	e01b      	b.n	800a812 <taskGetEstimatedAltitude+0x1f2>
    else
        sonarAlt = sonarDistance * (900.0f - tiltAngle) / 900.0f;
 800a7da:	4b28      	ldr	r3, [pc, #160]	; (800a87c <taskGetEstimatedAltitude+0x25c>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	ee07 3a90 	vmov	s15, r3
 800a7e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7e6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a7ea:	ee07 3a90 	vmov	s15, r3
 800a7ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7f2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a884 <taskGetEstimatedAltitude+0x264>
 800a7f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a7fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7fe:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a884 <taskGetEstimatedAltitude+0x264>
 800a802:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a80a:	ee17 2a90 	vmov	r2, s15
 800a80e:	4b1c      	ldr	r3, [pc, #112]	; (800a880 <taskGetEstimatedAltitude+0x260>)
 800a810:	601a      	str	r2, [r3, #0]

    // do sonarAlt and baroAlt fusion
    if (sonarAlt > 0 && sonarAlt < 200) {
 800a812:	4b1b      	ldr	r3, [pc, #108]	; (800a880 <taskGetEstimatedAltitude+0x260>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	dd38      	ble.n	800a88c <taskGetEstimatedAltitude+0x26c>
 800a81a:	4b19      	ldr	r3, [pc, #100]	; (800a880 <taskGetEstimatedAltitude+0x260>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2bc7      	cmp	r3, #199	; 0xc7
 800a820:	dc34      	bgt.n	800a88c <taskGetEstimatedAltitude+0x26c>
        baroAlt_offset = BaroAlt - sonarAlt;
 800a822:	4b15      	ldr	r3, [pc, #84]	; (800a878 <taskGetEstimatedAltitude+0x258>)
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	4b16      	ldr	r3, [pc, #88]	; (800a880 <taskGetEstimatedAltitude+0x260>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	4a16      	ldr	r2, [pc, #88]	; (800a888 <taskGetEstimatedAltitude+0x268>)
 800a82e:	6013      	str	r3, [r2, #0]
        BaroAlt = sonarAlt;
 800a830:	4b13      	ldr	r3, [pc, #76]	; (800a880 <taskGetEstimatedAltitude+0x260>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a10      	ldr	r2, [pc, #64]	; (800a878 <taskGetEstimatedAltitude+0x258>)
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	e064      	b.n	800a904 <taskGetEstimatedAltitude+0x2e4>
 800a83a:	bf00      	nop
 800a83c:	20001f14 	.word	0x20001f14
 800a840:	20001430 	.word	0x20001430
 800a844:	200013e8 	.word	0x200013e8
 800a848:	20001470 	.word	0x20001470
 800a84c:	200019b6 	.word	0x200019b6
 800a850:	20001474 	.word	0x20001474
 800a854:	200013e0 	.word	0x200013e0
 800a858:	20000d18 	.word	0x20000d18
 800a85c:	47c5e680 	.word	0x47c5e680
 800a860:	3e42dcb1 	.word	0x3e42dcb1
 800a864:	4a8748d0 	.word	0x4a8748d0
 800a868:	20001478 	.word	0x20001478
 800a86c:	2000147c 	.word	0x2000147c
 800a870:	20001480 	.word	0x20001480
 800a874:	08027760 	.word	0x08027760
 800a878:	200013e4 	.word	0x200013e4
 800a87c:	2000002c 	.word	0x2000002c
 800a880:	20000030 	.word	0x20000030
 800a884:	44610000 	.word	0x44610000
 800a888:	200013f0 	.word	0x200013f0
    } else {
        BaroAlt -= baroAlt_offset;
 800a88c:	4ba0      	ldr	r3, [pc, #640]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	4ba0      	ldr	r3, [pc, #640]	; (800ab14 <taskGetEstimatedAltitude+0x4f4>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	4a9e      	ldr	r2, [pc, #632]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800a898:	6013      	str	r3, [r2, #0]
        if (sonarAlt > 0) {
 800a89a:	4b9f      	ldr	r3, [pc, #636]	; (800ab18 <taskGetEstimatedAltitude+0x4f8>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	dd30      	ble.n	800a904 <taskGetEstimatedAltitude+0x2e4>
            sonarTransition = (300 - sonarAlt) / 100.0f;
 800a8a2:	4b9d      	ldr	r3, [pc, #628]	; (800ab18 <taskGetEstimatedAltitude+0x4f8>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800a8aa:	ee07 3a90 	vmov	s15, r3
 800a8ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8b2:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800ab1c <taskGetEstimatedAltitude+0x4fc>
 800a8b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8ba:	4b99      	ldr	r3, [pc, #612]	; (800ab20 <taskGetEstimatedAltitude+0x500>)
 800a8bc:	edc3 7a00 	vstr	s15, [r3]
            BaroAlt = sonarAlt * sonarTransition + BaroAlt * (1.0f - sonarTransition);
 800a8c0:	4b95      	ldr	r3, [pc, #596]	; (800ab18 <taskGetEstimatedAltitude+0x4f8>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	ee07 3a90 	vmov	s15, r3
 800a8c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8cc:	4b94      	ldr	r3, [pc, #592]	; (800ab20 <taskGetEstimatedAltitude+0x500>)
 800a8ce:	edd3 7a00 	vldr	s15, [r3]
 800a8d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8d6:	4b8e      	ldr	r3, [pc, #568]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	ee07 3a90 	vmov	s15, r3
 800a8de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8e2:	4b8f      	ldr	r3, [pc, #572]	; (800ab20 <taskGetEstimatedAltitude+0x500>)
 800a8e4:	edd3 7a00 	vldr	s15, [r3]
 800a8e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a8ec:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a8f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8fc:	ee17 2a90 	vmov	r2, s15
 800a900:	4b83      	ldr	r3, [pc, #524]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800a902:	601a      	str	r2, [r3, #0]
        }
    }

    dt = accTimeSum * 1e-6f; // delta acc reading time in seconds
 800a904:	4b87      	ldr	r3, [pc, #540]	; (800ab24 <taskGetEstimatedAltitude+0x504>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	ee07 3a90 	vmov	s15, r3
 800a90c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a910:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800ab28 <taskGetEstimatedAltitude+0x508>
 800a914:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a918:	edc7 7a08 	vstr	s15, [r7, #32]

    // Integrator - velocity, cm/sec
    accZ_tmp = (float)accSum[2] / (float)accSumCount;
 800a91c:	4b83      	ldr	r3, [pc, #524]	; (800ab2c <taskGetEstimatedAltitude+0x50c>)
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	ee07 3a90 	vmov	s15, r3
 800a924:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a928:	4b81      	ldr	r3, [pc, #516]	; (800ab30 <taskGetEstimatedAltitude+0x510>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	ee07 3a90 	vmov	s15, r3
 800a930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a938:	edc7 7a07 	vstr	s15, [r7, #28]
    vel_acc = accZ_tmp * accVelScale * (float)accTimeSum;
 800a93c:	4b7d      	ldr	r3, [pc, #500]	; (800ab34 <taskGetEstimatedAltitude+0x514>)
 800a93e:	ed93 7a00 	vldr	s14, [r3]
 800a942:	edd7 7a07 	vldr	s15, [r7, #28]
 800a946:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a94a:	4b76      	ldr	r3, [pc, #472]	; (800ab24 <taskGetEstimatedAltitude+0x504>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	ee07 3a90 	vmov	s15, r3
 800a952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a95a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrator - Altitude in cm
    accAlt += (vel_acc * 0.5f) * dt + vel * dt;                                         // integrate velocity to get distance (x= a/2 * t^2)
 800a95e:	edd7 7a06 	vldr	s15, [r7, #24]
 800a962:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a966:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a96a:	edd7 7a08 	vldr	s15, [r7, #32]
 800a96e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a972:	4b71      	ldr	r3, [pc, #452]	; (800ab38 <taskGetEstimatedAltitude+0x518>)
 800a974:	edd3 6a00 	vldr	s13, [r3]
 800a978:	edd7 7a08 	vldr	s15, [r7, #32]
 800a97c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a980:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a984:	4b6d      	ldr	r3, [pc, #436]	; (800ab3c <taskGetEstimatedAltitude+0x51c>)
 800a986:	edd3 7a00 	vldr	s15, [r3]
 800a98a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a98e:	4b6b      	ldr	r3, [pc, #428]	; (800ab3c <taskGetEstimatedAltitude+0x51c>)
 800a990:	edc3 7a00 	vstr	s15, [r3]
    accAlt = accAlt * cfg.baro_cf_alt + (float)BaroAlt * (1.0f - cfg.baro_cf_alt);      // complementary filter for altitude estimation (baro & acc)
 800a994:	4b6a      	ldr	r3, [pc, #424]	; (800ab40 <taskGetEstimatedAltitude+0x520>)
 800a996:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800a99a:	4b68      	ldr	r3, [pc, #416]	; (800ab3c <taskGetEstimatedAltitude+0x51c>)
 800a99c:	edd3 7a00 	vldr	s15, [r3]
 800a9a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9a4:	4b5a      	ldr	r3, [pc, #360]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	ee07 3a90 	vmov	s15, r3
 800a9ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a9b0:	4b63      	ldr	r3, [pc, #396]	; (800ab40 <taskGetEstimatedAltitude+0x520>)
 800a9b2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800a9b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a9ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a9be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9c6:	4b5d      	ldr	r3, [pc, #372]	; (800ab3c <taskGetEstimatedAltitude+0x51c>)
 800a9c8:	edc3 7a00 	vstr	s15, [r3]

    // when the sonar is in his best range
    if (sonarAlt > 0 && sonarAlt < 200)
 800a9cc:	4b52      	ldr	r3, [pc, #328]	; (800ab18 <taskGetEstimatedAltitude+0x4f8>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	dd08      	ble.n	800a9e6 <taskGetEstimatedAltitude+0x3c6>
 800a9d4:	4b50      	ldr	r3, [pc, #320]	; (800ab18 <taskGetEstimatedAltitude+0x4f8>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2bc7      	cmp	r3, #199	; 0xc7
 800a9da:	dc04      	bgt.n	800a9e6 <taskGetEstimatedAltitude+0x3c6>
        EstAlt = BaroAlt;
 800a9dc:	4b4c      	ldr	r3, [pc, #304]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a58      	ldr	r2, [pc, #352]	; (800ab44 <taskGetEstimatedAltitude+0x524>)
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	e008      	b.n	800a9f8 <taskGetEstimatedAltitude+0x3d8>
    else
        EstAlt = accAlt;
 800a9e6:	4b55      	ldr	r3, [pc, #340]	; (800ab3c <taskGetEstimatedAltitude+0x51c>)
 800a9e8:	edd3 7a00 	vldr	s15, [r3]
 800a9ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9f0:	ee17 2a90 	vmov	r2, s15
 800a9f4:	4b53      	ldr	r3, [pc, #332]	; (800ab44 <taskGetEstimatedAltitude+0x524>)
 800a9f6:	601a      	str	r2, [r3, #0]

    vel += vel_acc;
 800a9f8:	4b4f      	ldr	r3, [pc, #316]	; (800ab38 <taskGetEstimatedAltitude+0x518>)
 800a9fa:	ed93 7a00 	vldr	s14, [r3]
 800a9fe:	edd7 7a06 	vldr	s15, [r7, #24]
 800aa02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa06:	4b4c      	ldr	r3, [pc, #304]	; (800ab38 <taskGetEstimatedAltitude+0x518>)
 800aa08:	edc3 7a00 	vstr	s15, [r3]
    debug[0] = accSum[2] / accSumCount; // acceleration
    debug[1] = vel;                     // velocity
    debug[2] = accAlt;                  // height
#endif

    accSum_reset();
 800aa0c:	f7ff faae 	bl	8009f6c <accSum_reset>

    baroVel = (BaroAlt - lastBaroAlt) * 1000000.0f / dTime;
 800aa10:	4b3f      	ldr	r3, [pc, #252]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	4b4c      	ldr	r3, [pc, #304]	; (800ab48 <taskGetEstimatedAltitude+0x528>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa22:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800ab4c <taskGetEstimatedAltitude+0x52c>
 800aa26:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	ee07 3a90 	vmov	s15, r3
 800aa30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa3c:	ee17 3a90 	vmov	r3, s15
 800aa40:	617b      	str	r3, [r7, #20]
    lastBaroAlt = BaroAlt;
 800aa42:	4b33      	ldr	r3, [pc, #204]	; (800ab10 <taskGetEstimatedAltitude+0x4f0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a40      	ldr	r2, [pc, #256]	; (800ab48 <taskGetEstimatedAltitude+0x528>)
 800aa48:	6013      	str	r3, [r2, #0]

    baroVel = constrain(baroVel, -1500, 1500);    // constrain baro velocity +/- 1500cm/s
 800aa4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800aa4e:	4940      	ldr	r1, [pc, #256]	; (800ab50 <taskGetEstimatedAltitude+0x530>)
 800aa50:	6978      	ldr	r0, [r7, #20]
 800aa52:	f7f9 f89d 	bl	8003b90 <constrain>
 800aa56:	6178      	str	r0, [r7, #20]
    baroVel = applyDeadband(baroVel, 10);         // to reduce noise near zero
 800aa58:	210a      	movs	r1, #10
 800aa5a:	6978      	ldr	r0, [r7, #20]
 800aa5c:	f7ff f934 	bl	8009cc8 <applyDeadband>
 800aa60:	6178      	str	r0, [r7, #20]

    // apply Complimentary Filter to keep the calculated velocity based on baro velocity (i.e. near real velocity).
    // By using CF it's possible to correct the drift of integrated accZ (velocity) without loosing the phase, i.e without delay
    vel = vel * cfg.baro_cf_vel + baroVel * (1 - cfg.baro_cf_vel);
 800aa62:	4b37      	ldr	r3, [pc, #220]	; (800ab40 <taskGetEstimatedAltitude+0x520>)
 800aa64:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800aa68:	4b33      	ldr	r3, [pc, #204]	; (800ab38 <taskGetEstimatedAltitude+0x518>)
 800aa6a:	edd3 7a00 	vldr	s15, [r3]
 800aa6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	ee07 3a90 	vmov	s15, r3
 800aa78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aa7c:	4b30      	ldr	r3, [pc, #192]	; (800ab40 <taskGetEstimatedAltitude+0x520>)
 800aa7e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800aa82:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aa86:	ee76 7a67 	vsub.f32	s15, s12, s15
 800aa8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa92:	4b29      	ldr	r3, [pc, #164]	; (800ab38 <taskGetEstimatedAltitude+0x518>)
 800aa94:	edc3 7a00 	vstr	s15, [r3]
    vel_tmp = lrintf(vel);
 800aa98:	4b27      	ldr	r3, [pc, #156]	; (800ab38 <taskGetEstimatedAltitude+0x518>)
 800aa9a:	edd3 7a00 	vldr	s15, [r3]
 800aa9e:	eeb0 0a67 	vmov.f32	s0, s15
 800aaa2:	f018 ff15 	bl	80238d0 <lrintf>
 800aaa6:	6138      	str	r0, [r7, #16]

    // set vario
    vario = applyDeadband(vel_tmp, 5);
 800aaa8:	2105      	movs	r1, #5
 800aaaa:	6938      	ldr	r0, [r7, #16]
 800aaac:	f7ff f90c 	bl	8009cc8 <applyDeadband>
 800aab0:	4603      	mov	r3, r0
 800aab2:	4a28      	ldr	r2, [pc, #160]	; (800ab54 <taskGetEstimatedAltitude+0x534>)
 800aab4:	6013      	str	r3, [r2, #0]

    if (tiltAngle < 800) { // only calculate pid if the copters thrust is facing downwards(<80deg)
 800aab6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800aaba:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800aabe:	f280 80b2 	bge.w	800ac26 <taskGetEstimatedAltitude+0x606>
        // Altitude P-Controller
        if (!velocityControl) {
 800aac2:	4b25      	ldr	r3, [pc, #148]	; (800ab58 <taskGetEstimatedAltitude+0x538>)
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d14e      	bne.n	800ab68 <taskGetEstimatedAltitude+0x548>
            error = constrain(AltHold - EstAlt, -500, 500);
 800aaca:	4b24      	ldr	r3, [pc, #144]	; (800ab5c <taskGetEstimatedAltitude+0x53c>)
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	4b1d      	ldr	r3, [pc, #116]	; (800ab44 <taskGetEstimatedAltitude+0x524>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800aad8:	4921      	ldr	r1, [pc, #132]	; (800ab60 <taskGetEstimatedAltitude+0x540>)
 800aada:	4618      	mov	r0, r3
 800aadc:	f7f9 f858 	bl	8003b90 <constrain>
 800aae0:	60f8      	str	r0, [r7, #12]
            error = applyDeadband(error, 10);       // remove small P parametr to reduce noise near zero position
 800aae2:	210a      	movs	r1, #10
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f7ff f8ef 	bl	8009cc8 <applyDeadband>
 800aaea:	60f8      	str	r0, [r7, #12]
            setVel = constrain((cfg.P8[PIDALT] * error / 128), -300, +300); // limit velocity to +/- 3 m/s
 800aaec:	4b14      	ldr	r3, [pc, #80]	; (800ab40 <taskGetEstimatedAltitude+0x520>)
 800aaee:	791b      	ldrb	r3, [r3, #4]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	fb02 f303 	mul.w	r3, r2, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	da00      	bge.n	800aafe <taskGetEstimatedAltitude+0x4de>
 800aafc:	337f      	adds	r3, #127	; 0x7f
 800aafe:	11db      	asrs	r3, r3, #7
 800ab00:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab04:	4917      	ldr	r1, [pc, #92]	; (800ab64 <taskGetEstimatedAltitude+0x544>)
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7f9 f842 	bl	8003b90 <constrain>
 800ab0c:	6378      	str	r0, [r7, #52]	; 0x34
 800ab0e:	e02e      	b.n	800ab6e <taskGetEstimatedAltitude+0x54e>
 800ab10:	200013e4 	.word	0x200013e4
 800ab14:	200013f0 	.word	0x200013f0
 800ab18:	20000030 	.word	0x20000030
 800ab1c:	42c80000 	.word	0x42c80000
 800ab20:	200013ec 	.word	0x200013ec
 800ab24:	200013d4 	.word	0x200013d4
 800ab28:	358637bd 	.word	0x358637bd
 800ab2c:	200013c8 	.word	0x200013c8
 800ab30:	200013d8 	.word	0x200013d8
 800ab34:	20001414 	.word	0x20001414
 800ab38:	2000147c 	.word	0x2000147c
 800ab3c:	20001480 	.word	0x20001480
 800ab40:	20000d18 	.word	0x20000d18
 800ab44:	200013f4 	.word	0x200013f4
 800ab48:	20001484 	.word	0x20001484
 800ab4c:	49742400 	.word	0x49742400
 800ab50:	fffffa24 	.word	0xfffffa24
 800ab54:	2000140c 	.word	0x2000140c
 800ab58:	20001404 	.word	0x20001404
 800ab5c:	200013fc 	.word	0x200013fc
 800ab60:	fffffe0c 	.word	0xfffffe0c
 800ab64:	fffffed4 	.word	0xfffffed4
        } else {
            setVel = setVelocity;
 800ab68:	4b34      	ldr	r3, [pc, #208]	; (800ac3c <taskGetEstimatedAltitude+0x61c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Velocity PID-Controller
        // P
        error = setVel - vel_tmp;
 800ab6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	60fb      	str	r3, [r7, #12]
        BaroPID = constrain((cfg.P8[PIDVEL] * error / 32), -300, +300);
 800ab76:	4b32      	ldr	r3, [pc, #200]	; (800ac40 <taskGetEstimatedAltitude+0x620>)
 800ab78:	7a9b      	ldrb	r3, [r3, #10]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	fb02 f303 	mul.w	r3, r2, r3
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	da00      	bge.n	800ab88 <taskGetEstimatedAltitude+0x568>
 800ab86:	331f      	adds	r3, #31
 800ab88:	115b      	asrs	r3, r3, #5
 800ab8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab8e:	492d      	ldr	r1, [pc, #180]	; (800ac44 <taskGetEstimatedAltitude+0x624>)
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7f8 fffd 	bl	8003b90 <constrain>
 800ab96:	4603      	mov	r3, r0
 800ab98:	4a2b      	ldr	r2, [pc, #172]	; (800ac48 <taskGetEstimatedAltitude+0x628>)
 800ab9a:	6013      	str	r3, [r2, #0]

        // I
        errorVelocityI += (cfg.I8[PIDVEL] * error);
 800ab9c:	4b28      	ldr	r3, [pc, #160]	; (800ac40 <taskGetEstimatedAltitude+0x620>)
 800ab9e:	7d1b      	ldrb	r3, [r3, #20]
 800aba0:	461a      	mov	r2, r3
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	fb03 f202 	mul.w	r2, r3, r2
 800aba8:	4b28      	ldr	r3, [pc, #160]	; (800ac4c <taskGetEstimatedAltitude+0x62c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4413      	add	r3, r2
 800abae:	4a27      	ldr	r2, [pc, #156]	; (800ac4c <taskGetEstimatedAltitude+0x62c>)
 800abb0:	6013      	str	r3, [r2, #0]
        errorVelocityI = constrain(errorVelocityI, -(8196 * 200), (8196 * 200));
 800abb2:	4b26      	ldr	r3, [pc, #152]	; (800ac4c <taskGetEstimatedAltitude+0x62c>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a26      	ldr	r2, [pc, #152]	; (800ac50 <taskGetEstimatedAltitude+0x630>)
 800abb8:	4926      	ldr	r1, [pc, #152]	; (800ac54 <taskGetEstimatedAltitude+0x634>)
 800abba:	4618      	mov	r0, r3
 800abbc:	f7f8 ffe8 	bl	8003b90 <constrain>
 800abc0:	4603      	mov	r3, r0
 800abc2:	4a22      	ldr	r2, [pc, #136]	; (800ac4c <taskGetEstimatedAltitude+0x62c>)
 800abc4:	6013      	str	r3, [r2, #0]
        BaroPID += errorVelocityI / 8196;     // I in the range of +/-200
 800abc6:	4b21      	ldr	r3, [pc, #132]	; (800ac4c <taskGetEstimatedAltitude+0x62c>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a23      	ldr	r2, [pc, #140]	; (800ac58 <taskGetEstimatedAltitude+0x638>)
 800abcc:	fb82 1203 	smull	r1, r2, r2, r3
 800abd0:	10d2      	asrs	r2, r2, #3
 800abd2:	17db      	asrs	r3, r3, #31
 800abd4:	1ad2      	subs	r2, r2, r3
 800abd6:	4b1c      	ldr	r3, [pc, #112]	; (800ac48 <taskGetEstimatedAltitude+0x628>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4413      	add	r3, r2
 800abdc:	4a1a      	ldr	r2, [pc, #104]	; (800ac48 <taskGetEstimatedAltitude+0x628>)
 800abde:	6013      	str	r3, [r2, #0]

        // D
        BaroPID -= constrain(cfg.D8[PIDVEL] * (accZ_tmp + accZ_old) / 512, -150, 150);
 800abe0:	4b17      	ldr	r3, [pc, #92]	; (800ac40 <taskGetEstimatedAltitude+0x620>)
 800abe2:	7f9b      	ldrb	r3, [r3, #30]
 800abe4:	ee07 3a90 	vmov	s15, r3
 800abe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abec:	4b1b      	ldr	r3, [pc, #108]	; (800ac5c <taskGetEstimatedAltitude+0x63c>)
 800abee:	edd3 6a00 	vldr	s13, [r3]
 800abf2:	edd7 7a07 	vldr	s15, [r7, #28]
 800abf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abfe:	eddf 6a18 	vldr	s13, [pc, #96]	; 800ac60 <taskGetEstimatedAltitude+0x640>
 800ac02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac0a:	2296      	movs	r2, #150	; 0x96
 800ac0c:	f06f 0195 	mvn.w	r1, #149	; 0x95
 800ac10:	ee17 0a90 	vmov	r0, s15
 800ac14:	f7f8 ffbc 	bl	8003b90 <constrain>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	4b0b      	ldr	r3, [pc, #44]	; (800ac48 <taskGetEstimatedAltitude+0x628>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	1a9b      	subs	r3, r3, r2
 800ac20:	4a09      	ldr	r2, [pc, #36]	; (800ac48 <taskGetEstimatedAltitude+0x628>)
 800ac22:	6013      	str	r3, [r2, #0]
 800ac24:	e002      	b.n	800ac2c <taskGetEstimatedAltitude+0x60c>

    } else {
        BaroPID = 0;
 800ac26:	4b08      	ldr	r3, [pc, #32]	; (800ac48 <taskGetEstimatedAltitude+0x628>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	601a      	str	r2, [r3, #0]
    }

    accZ_old = accZ_tmp;
 800ac2c:	4a0b      	ldr	r2, [pc, #44]	; (800ac5c <taskGetEstimatedAltitude+0x63c>)
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	6013      	str	r3, [r2, #0]

    return 1;
 800ac32:	2301      	movs	r3, #1
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3738      	adds	r7, #56	; 0x38
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	20001400 	.word	0x20001400
 800ac40:	20000d18 	.word	0x20000d18
 800ac44:	fffffed4 	.word	0xfffffed4
 800ac48:	200013f8 	.word	0x200013f8
 800ac4c:	20001408 	.word	0x20001408
 800ac50:	00190320 	.word	0x00190320
 800ac54:	ffe6fce0 	.word	0xffe6fce0
 800ac58:	003ff801 	.word	0x003ff801
 800ac5c:	20001488 	.word	0x20001488
 800ac60:	44000000 	.word	0x44000000

0800ac64 <servoMiddle>:
    { 0, NULL },                // MULTITYPE_CUSTOM_PLANE
};


int16_t servoMiddle(int nr)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
    // Normally, servo.middle is a value between 1000..2000, but for the purposes of stupid, if it's less than
    // the number of RC channels, it means the center value is taken FROM that RC channel (by its index)
    if (cfg.servoConf[nr].middle < RC_CHANS && nr < MAX_SERVOS)
 800ac6c:	4916      	ldr	r1, [pc, #88]	; (800acc8 <servoMiddle+0x64>)
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	4613      	mov	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	005b      	lsls	r3, r3, #1
 800ac78:	440b      	add	r3, r1
 800ac7a:	33bc      	adds	r3, #188	; 0xbc
 800ac7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac80:	2b11      	cmp	r3, #17
 800ac82:	dc11      	bgt.n	800aca8 <servoMiddle+0x44>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2b07      	cmp	r3, #7
 800ac88:	dc0e      	bgt.n	800aca8 <servoMiddle+0x44>
        return rcData[cfg.servoConf[nr].middle];
 800ac8a:	490f      	ldr	r1, [pc, #60]	; (800acc8 <servoMiddle+0x64>)
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	005b      	lsls	r3, r3, #1
 800ac96:	440b      	add	r3, r1
 800ac98:	33bc      	adds	r3, #188	; 0xbc
 800ac9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	4b0a      	ldr	r3, [pc, #40]	; (800accc <servoMiddle+0x68>)
 800aca2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800aca6:	e009      	b.n	800acbc <servoMiddle+0x58>
    else
        return cfg.servoConf[nr].middle;
 800aca8:	4907      	ldr	r1, [pc, #28]	; (800acc8 <servoMiddle+0x64>)
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	4613      	mov	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	005b      	lsls	r3, r3, #1
 800acb4:	440b      	add	r3, r1
 800acb6:	33bc      	adds	r3, #188	; 0xbc
 800acb8:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	20000d18 	.word	0x20000d18
 800accc:	20001660 	.word	0x20001660

0800acd0 <servoDirection>:

int servoDirection(int nr, int lr)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
    // load the direction from the direction field of the servo
    if (cfg.servoConf[nr].direction & (1 << lr))
 800acda:	490d      	ldr	r1, [pc, #52]	; (800ad10 <servoDirection+0x40>)
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	4613      	mov	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	440b      	add	r3, r1
 800ace8:	33c0      	adds	r3, #192	; 0xc0
 800acea:	881b      	ldrh	r3, [r3, #0]
 800acec:	461a      	mov	r2, r3
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	fa42 f303 	asr.w	r3, r2, r3
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <servoDirection+0x32>
        return -1;
 800acfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ad00:	e000      	b.n	800ad04 <servoDirection+0x34>
    else
        return 1;
 800ad02:	2301      	movs	r3, #1
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	20000d18 	.word	0x20000d18

0800ad14 <loadCustomServoMixer>:

void loadCustomServoMixer(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
    uint8_t i;

    // reset settings
    numberRules = 0;
 800ad1a:	4b1e      	ldr	r3, [pc, #120]	; (800ad94 <loadCustomServoMixer+0x80>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	701a      	strb	r2, [r3, #0]
    memset(currentServoMixer, 0, sizeof(currentServoMixer));
 800ad20:	2270      	movs	r2, #112	; 0x70
 800ad22:	2100      	movs	r1, #0
 800ad24:	481c      	ldr	r0, [pc, #112]	; (800ad98 <loadCustomServoMixer+0x84>)
 800ad26:	f018 fab1 	bl	802328c <memset>

    // load custom mixer into currentServoMixer
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	71fb      	strb	r3, [r7, #7]
 800ad2e:	e028      	b.n	800ad82 <loadCustomServoMixer+0x6e>
        // check if done
        if (mcfg.customServoMixer[i].rate == 0)
 800ad30:	79fa      	ldrb	r2, [r7, #7]
 800ad32:	491a      	ldr	r1, [pc, #104]	; (800ad9c <loadCustomServoMixer+0x88>)
 800ad34:	4613      	mov	r3, r2
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	1a9b      	subs	r3, r3, r2
 800ad3a:	440b      	add	r3, r1
 800ad3c:	33d2      	adds	r3, #210	; 0xd2
 800ad3e:	f993 3000 	ldrsb.w	r3, [r3]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d021      	beq.n	800ad8a <loadCustomServoMixer+0x76>
            break;
        currentServoMixer[i] = mcfg.customServoMixer[i];
 800ad46:	79fa      	ldrb	r2, [r7, #7]
 800ad48:	79f9      	ldrb	r1, [r7, #7]
 800ad4a:	4813      	ldr	r0, [pc, #76]	; (800ad98 <loadCustomServoMixer+0x84>)
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	00db      	lsls	r3, r3, #3
 800ad50:	1a5b      	subs	r3, r3, r1
 800ad52:	4418      	add	r0, r3
 800ad54:	4911      	ldr	r1, [pc, #68]	; (800ad9c <loadCustomServoMixer+0x88>)
 800ad56:	4613      	mov	r3, r2
 800ad58:	00db      	lsls	r3, r3, #3
 800ad5a:	1a9b      	subs	r3, r3, r2
 800ad5c:	440b      	add	r3, r1
 800ad5e:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800ad62:	4603      	mov	r3, r0
 800ad64:	6811      	ldr	r1, [r2, #0]
 800ad66:	6019      	str	r1, [r3, #0]
 800ad68:	8891      	ldrh	r1, [r2, #4]
 800ad6a:	7992      	ldrb	r2, [r2, #6]
 800ad6c:	8099      	strh	r1, [r3, #4]
 800ad6e:	719a      	strb	r2, [r3, #6]
        numberRules++;
 800ad70:	4b08      	ldr	r3, [pc, #32]	; (800ad94 <loadCustomServoMixer+0x80>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	3301      	adds	r3, #1
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	4b06      	ldr	r3, [pc, #24]	; (800ad94 <loadCustomServoMixer+0x80>)
 800ad7a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	71fb      	strb	r3, [r7, #7]
 800ad82:	79fb      	ldrb	r3, [r7, #7]
 800ad84:	2b0f      	cmp	r3, #15
 800ad86:	d9d3      	bls.n	800ad30 <loadCustomServoMixer+0x1c>
    }
}
 800ad88:	e000      	b.n	800ad8c <loadCustomServoMixer+0x78>
            break;
 800ad8a:	bf00      	nop
}
 800ad8c:	bf00      	nop
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	2000148d 	.word	0x2000148d
 800ad98:	20001580 	.word	0x20001580
 800ad9c:	200007ac 	.word	0x200007ac

0800ada0 <mixerInit>:

void mixerInit(void)
{
 800ada0:	b590      	push	{r4, r7, lr}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
    int i;

    // enable servos for mixes that require them. note, this shifts motor counts.
    core.useServo = mixers[mcfg.mixerConfiguration].useServo;
 800ada6:	4b8b      	ldr	r3, [pc, #556]	; (800afd4 <mixerInit+0x234>)
 800ada8:	795b      	ldrb	r3, [r3, #5]
 800adaa:	4a8b      	ldr	r2, [pc, #556]	; (800afd8 <mixerInit+0x238>)
 800adac:	00db      	lsls	r3, r3, #3
 800adae:	4413      	add	r3, r2
 800adb0:	785b      	ldrb	r3, [r3, #1]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	bf14      	ite	ne
 800adb6:	2301      	movne	r3, #1
 800adb8:	2300      	moveq	r3, #0
 800adba:	b2da      	uxtb	r2, r3
 800adbc:	4b87      	ldr	r3, [pc, #540]	; (800afdc <mixerInit+0x23c>)
 800adbe:	755a      	strb	r2, [r3, #21]
    // if we want camstab/trig, that also enables servos, even if mixer doesn't
    if (feature(FEATURE_SERVO_TILT))
 800adc0:	2020      	movs	r0, #32
 800adc2:	f7fc f865 	bl	8006e90 <feature>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <mixerInit+0x32>
        core.useServo = 1;
 800adcc:	4b83      	ldr	r3, [pc, #524]	; (800afdc <mixerInit+0x23c>)
 800adce:	2201      	movs	r2, #1
 800add0:	755a      	strb	r2, [r3, #21]

    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM) {
 800add2:	4b80      	ldr	r3, [pc, #512]	; (800afd4 <mixerInit+0x234>)
 800add4:	795b      	ldrb	r3, [r3, #5]
 800add6:	2b17      	cmp	r3, #23
 800add8:	d128      	bne.n	800ae2c <mixerInit+0x8c>
        // load custom mixer into currentMixer
        for (i = 0; i < MAX_MOTORS; i++) {
 800adda:	2300      	movs	r3, #0
 800addc:	607b      	str	r3, [r7, #4]
 800adde:	e021      	b.n	800ae24 <mixerInit+0x84>
            // check if done
            if (mcfg.customMixer[i].throttle == 0.0f)
 800ade0:	4a7c      	ldr	r2, [pc, #496]	; (800afd4 <mixerInit+0x234>)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	3301      	adds	r3, #1
 800ade6:	011b      	lsls	r3, r3, #4
 800ade8:	4413      	add	r3, r2
 800adea:	edd3 7a00 	vldr	s15, [r3]
 800adee:	eef5 7a40 	vcmp.f32	s15, #0.0
 800adf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf6:	d048      	beq.n	800ae8a <mixerInit+0xea>
                break;
            currentMixer[i] = mcfg.customMixer[i];
 800adf8:	4a79      	ldr	r2, [pc, #484]	; (800afe0 <mixerInit+0x240>)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	011b      	lsls	r3, r3, #4
 800adfe:	18d1      	adds	r1, r2, r3
 800ae00:	4a74      	ldr	r2, [pc, #464]	; (800afd4 <mixerInit+0x234>)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	3301      	adds	r3, #1
 800ae06:	011b      	lsls	r3, r3, #4
 800ae08:	4413      	add	r3, r2
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            numberMotor++;
 800ae12:	4b74      	ldr	r3, [pc, #464]	; (800afe4 <mixerInit+0x244>)
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	3301      	adds	r3, #1
 800ae18:	b2da      	uxtb	r2, r3
 800ae1a:	4b72      	ldr	r3, [pc, #456]	; (800afe4 <mixerInit+0x244>)
 800ae1c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++) {
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3301      	adds	r3, #1
 800ae22:	607b      	str	r3, [r7, #4]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b0b      	cmp	r3, #11
 800ae28:	ddda      	ble.n	800ade0 <mixerInit+0x40>
 800ae2a:	e02f      	b.n	800ae8c <mixerInit+0xec>
        }
    } else {
        numberMotor = mixers[mcfg.mixerConfiguration].numberMotor;
 800ae2c:	4b69      	ldr	r3, [pc, #420]	; (800afd4 <mixerInit+0x234>)
 800ae2e:	795b      	ldrb	r3, [r3, #5]
 800ae30:	461a      	mov	r2, r3
 800ae32:	4b69      	ldr	r3, [pc, #420]	; (800afd8 <mixerInit+0x238>)
 800ae34:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800ae38:	4b6a      	ldr	r3, [pc, #424]	; (800afe4 <mixerInit+0x244>)
 800ae3a:	701a      	strb	r2, [r3, #0]
        // copy motor-based mixers
        if (mixers[mcfg.mixerConfiguration].motor) {
 800ae3c:	4b65      	ldr	r3, [pc, #404]	; (800afd4 <mixerInit+0x234>)
 800ae3e:	795b      	ldrb	r3, [r3, #5]
 800ae40:	4a65      	ldr	r2, [pc, #404]	; (800afd8 <mixerInit+0x238>)
 800ae42:	00db      	lsls	r3, r3, #3
 800ae44:	4413      	add	r3, r2
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d01f      	beq.n	800ae8c <mixerInit+0xec>
            for (i = 0; i < numberMotor; i++)
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	607b      	str	r3, [r7, #4]
 800ae50:	e014      	b.n	800ae7c <mixerInit+0xdc>
                currentMixer[i] = mixers[mcfg.mixerConfiguration].motor[i];
 800ae52:	4b60      	ldr	r3, [pc, #384]	; (800afd4 <mixerInit+0x234>)
 800ae54:	795b      	ldrb	r3, [r3, #5]
 800ae56:	4a60      	ldr	r2, [pc, #384]	; (800afd8 <mixerInit+0x238>)
 800ae58:	00db      	lsls	r3, r3, #3
 800ae5a:	4413      	add	r3, r2
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	011b      	lsls	r3, r3, #4
 800ae62:	18d1      	adds	r1, r2, r3
 800ae64:	4a5e      	ldr	r2, [pc, #376]	; (800afe0 <mixerInit+0x240>)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	011b      	lsls	r3, r3, #4
 800ae6a:	4413      	add	r3, r2
 800ae6c:	461c      	mov	r4, r3
 800ae6e:	460b      	mov	r3, r1
 800ae70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (i = 0; i < numberMotor; i++)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	607b      	str	r3, [r7, #4]
 800ae7c:	4b59      	ldr	r3, [pc, #356]	; (800afe4 <mixerInit+0x244>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	461a      	mov	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4293      	cmp	r3, r2
 800ae86:	dbe4      	blt.n	800ae52 <mixerInit+0xb2>
 800ae88:	e000      	b.n	800ae8c <mixerInit+0xec>
                break;
 800ae8a:	bf00      	nop
        }
    }

    if (core.useServo) {
 800ae8c:	4b53      	ldr	r3, [pc, #332]	; (800afdc <mixerInit+0x23c>)
 800ae8e:	7d5b      	ldrb	r3, [r3, #21]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d033      	beq.n	800aefc <mixerInit+0x15c>
        numberRules = servoMixers[mcfg.mixerConfiguration].numberRules;
 800ae94:	4b4f      	ldr	r3, [pc, #316]	; (800afd4 <mixerInit+0x234>)
 800ae96:	795b      	ldrb	r3, [r3, #5]
 800ae98:	461a      	mov	r2, r3
 800ae9a:	4b53      	ldr	r3, [pc, #332]	; (800afe8 <mixerInit+0x248>)
 800ae9c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800aea0:	4b52      	ldr	r3, [pc, #328]	; (800afec <mixerInit+0x24c>)
 800aea2:	701a      	strb	r2, [r3, #0]
        if (servoMixers[mcfg.mixerConfiguration].rule) {
 800aea4:	4b4b      	ldr	r3, [pc, #300]	; (800afd4 <mixerInit+0x234>)
 800aea6:	795b      	ldrb	r3, [r3, #5]
 800aea8:	4a4f      	ldr	r2, [pc, #316]	; (800afe8 <mixerInit+0x248>)
 800aeaa:	00db      	lsls	r3, r3, #3
 800aeac:	4413      	add	r3, r2
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d023      	beq.n	800aefc <mixerInit+0x15c>
            for (i = 0; i < numberRules; i++)
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	607b      	str	r3, [r7, #4]
 800aeb8:	e01a      	b.n	800aef0 <mixerInit+0x150>
                currentServoMixer[i] = servoMixers[mcfg.mixerConfiguration].rule[i];
 800aeba:	4b46      	ldr	r3, [pc, #280]	; (800afd4 <mixerInit+0x234>)
 800aebc:	795b      	ldrb	r3, [r3, #5]
 800aebe:	4a4a      	ldr	r2, [pc, #296]	; (800afe8 <mixerInit+0x248>)
 800aec0:	00db      	lsls	r3, r3, #3
 800aec2:	4413      	add	r3, r2
 800aec4:	6859      	ldr	r1, [r3, #4]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	4613      	mov	r3, r2
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	1a9b      	subs	r3, r3, r2
 800aece:	18c8      	adds	r0, r1, r3
 800aed0:	4947      	ldr	r1, [pc, #284]	; (800aff0 <mixerInit+0x250>)
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	4613      	mov	r3, r2
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	1a9b      	subs	r3, r3, r2
 800aeda:	440b      	add	r3, r1
 800aedc:	4602      	mov	r2, r0
 800aede:	6811      	ldr	r1, [r2, #0]
 800aee0:	6019      	str	r1, [r3, #0]
 800aee2:	8891      	ldrh	r1, [r2, #4]
 800aee4:	7992      	ldrb	r2, [r2, #6]
 800aee6:	8099      	strh	r1, [r3, #4]
 800aee8:	719a      	strb	r2, [r3, #6]
            for (i = 0; i < numberRules; i++)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	3301      	adds	r3, #1
 800aeee:	607b      	str	r3, [r7, #4]
 800aef0:	4b3e      	ldr	r3, [pc, #248]	; (800afec <mixerInit+0x24c>)
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	461a      	mov	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4293      	cmp	r3, r2
 800aefa:	dbde      	blt.n	800aeba <mixerInit+0x11a>
        }
    }

    // in 3D mode, mixer gain has to be halved
    if (feature(FEATURE_3D)) {
 800aefc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800af00:	f7fb ffc6 	bl	8006e90 <feature>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d045      	beq.n	800af96 <mixerInit+0x1f6>
        if (numberMotor > 1) {
 800af0a:	4b36      	ldr	r3, [pc, #216]	; (800afe4 <mixerInit+0x244>)
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d941      	bls.n	800af96 <mixerInit+0x1f6>
            for (i = 0; i < numberMotor; i++) {
 800af12:	2300      	movs	r3, #0
 800af14:	607b      	str	r3, [r7, #4]
 800af16:	e038      	b.n	800af8a <mixerInit+0x1ea>
                currentMixer[i].pitch *= 0.5f;
 800af18:	4a31      	ldr	r2, [pc, #196]	; (800afe0 <mixerInit+0x240>)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	011b      	lsls	r3, r3, #4
 800af1e:	4413      	add	r3, r2
 800af20:	3308      	adds	r3, #8
 800af22:	edd3 7a00 	vldr	s15, [r3]
 800af26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af2e:	4a2c      	ldr	r2, [pc, #176]	; (800afe0 <mixerInit+0x240>)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	011b      	lsls	r3, r3, #4
 800af34:	4413      	add	r3, r2
 800af36:	3308      	adds	r3, #8
 800af38:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].roll *= 0.5f;
 800af3c:	4a28      	ldr	r2, [pc, #160]	; (800afe0 <mixerInit+0x240>)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	011b      	lsls	r3, r3, #4
 800af42:	4413      	add	r3, r2
 800af44:	3304      	adds	r3, #4
 800af46:	edd3 7a00 	vldr	s15, [r3]
 800af4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af52:	4a23      	ldr	r2, [pc, #140]	; (800afe0 <mixerInit+0x240>)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	4413      	add	r3, r2
 800af5a:	3304      	adds	r3, #4
 800af5c:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].yaw *= 0.5f;
 800af60:	4a1f      	ldr	r2, [pc, #124]	; (800afe0 <mixerInit+0x240>)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	011b      	lsls	r3, r3, #4
 800af66:	4413      	add	r3, r2
 800af68:	330c      	adds	r3, #12
 800af6a:	edd3 7a00 	vldr	s15, [r3]
 800af6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af76:	4a1a      	ldr	r2, [pc, #104]	; (800afe0 <mixerInit+0x240>)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	011b      	lsls	r3, r3, #4
 800af7c:	4413      	add	r3, r2
 800af7e:	330c      	adds	r3, #12
 800af80:	edc3 7a00 	vstr	s15, [r3]
            for (i = 0; i < numberMotor; i++) {
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3301      	adds	r3, #1
 800af88:	607b      	str	r3, [r7, #4]
 800af8a:	4b16      	ldr	r3, [pc, #88]	; (800afe4 <mixerInit+0x244>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	461a      	mov	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4293      	cmp	r3, r2
 800af94:	dbc0      	blt.n	800af18 <mixerInit+0x178>
            }
        }
    }

    // set flag that we're on something with wings
    if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800af96:	4b0f      	ldr	r3, [pc, #60]	; (800afd4 <mixerInit+0x234>)
 800af98:	795b      	ldrb	r3, [r3, #5]
 800af9a:	2b08      	cmp	r3, #8
 800af9c:	d007      	beq.n	800afae <mixerInit+0x20e>
 800af9e:	4b0d      	ldr	r3, [pc, #52]	; (800afd4 <mixerInit+0x234>)
 800afa0:	795b      	ldrb	r3, [r3, #5]
 800afa2:	2b0e      	cmp	r3, #14
 800afa4:	d003      	beq.n	800afae <mixerInit+0x20e>
 800afa6:	4b0b      	ldr	r3, [pc, #44]	; (800afd4 <mixerInit+0x234>)
 800afa8:	795b      	ldrb	r3, [r3, #5]
 800afaa:	2b18      	cmp	r3, #24
 800afac:	d109      	bne.n	800afc2 <mixerInit+0x222>
        f.FIXED_WING = 1;
 800afae:	4b11      	ldr	r3, [pc, #68]	; (800aff4 <mixerInit+0x254>)
 800afb0:	2201      	movs	r2, #1
 800afb2:	741a      	strb	r2, [r3, #16]

        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800afb4:	4b07      	ldr	r3, [pc, #28]	; (800afd4 <mixerInit+0x234>)
 800afb6:	795b      	ldrb	r3, [r3, #5]
 800afb8:	2b18      	cmp	r3, #24
 800afba:	d105      	bne.n	800afc8 <mixerInit+0x228>
            loadCustomServoMixer();
 800afbc:	f7ff feaa 	bl	800ad14 <loadCustomServoMixer>
        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800afc0:	e002      	b.n	800afc8 <mixerInit+0x228>
    } else
        f.FIXED_WING = 0;
 800afc2:	4b0c      	ldr	r3, [pc, #48]	; (800aff4 <mixerInit+0x254>)
 800afc4:	2200      	movs	r2, #0
 800afc6:	741a      	strb	r2, [r3, #16]

    mixerResetMotors();
 800afc8:	f000 f816 	bl	800aff8 <mixerResetMotors>
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd90      	pop	{r4, r7, pc}
 800afd4:	200007ac 	.word	0x200007ac
 800afd8:	080291f4 	.word	0x080291f4
 800afdc:	200006f4 	.word	0x200006f4
 800afe0:	200014c0 	.word	0x200014c0
 800afe4:	2000148c 	.word	0x2000148c
 800afe8:	08029360 	.word	0x08029360
 800afec:	2000148d 	.word	0x2000148d
 800aff0:	20001580 	.word	0x20001580
 800aff4:	20001628 	.word	0x20001628

0800aff8 <mixerResetMotors>:

void mixerResetMotors(void)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
    int i;
    // set disarmed motor values
    for (i = 0; i < MAX_MOTORS; i++)
 800affe:	2300      	movs	r3, #0
 800b000:	607b      	str	r3, [r7, #4]
 800b002:	e016      	b.n	800b032 <mixerResetMotors+0x3a>
        motor_disarmed[i] = feature(FEATURE_3D) ? mcfg.neutral3d : mcfg.mincommand;
 800b004:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b008:	f7fb ff42 	bl	8006e90 <feature>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d004      	beq.n	800b01c <mixerResetMotors+0x24>
 800b012:	4b0c      	ldr	r3, [pc, #48]	; (800b044 <mixerResetMotors+0x4c>)
 800b014:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800b018:	b21b      	sxth	r3, r3
 800b01a:	e003      	b.n	800b024 <mixerResetMotors+0x2c>
 800b01c:	4b09      	ldr	r3, [pc, #36]	; (800b044 <mixerResetMotors+0x4c>)
 800b01e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800b022:	b21b      	sxth	r3, r3
 800b024:	4908      	ldr	r1, [pc, #32]	; (800b048 <mixerResetMotors+0x50>)
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
    for (i = 0; i < MAX_MOTORS; i++)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3301      	adds	r3, #1
 800b030:	607b      	str	r3, [r7, #4]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b0b      	cmp	r3, #11
 800b036:	dde5      	ble.n	800b004 <mixerResetMotors+0xc>
}
 800b038:	bf00      	nop
 800b03a:	bf00      	nop
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	200007ac 	.word	0x200007ac
 800b048:	200014a8 	.word	0x200014a8

0800b04c <servoMixerLoadMix>:

void servoMixerLoadMix(int index)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3301      	adds	r3, #1
 800b058:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b05a:	2300      	movs	r3, #0
 800b05c:	60fb      	str	r3, [r7, #12]
 800b05e:	e038      	b.n	800b0d2 <servoMixerLoadMix+0x86>
        mcfg.customServoMixer[i].targetChannel = mcfg.customServoMixer[i].fromChannel = mcfg.customServoMixer[i].rate = mcfg.customServoMixer[i].box = 0;
 800b060:	4934      	ldr	r1, [pc, #208]	; (800b134 <servoMixerLoadMix+0xe8>)
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	4613      	mov	r3, r2
 800b066:	00db      	lsls	r3, r3, #3
 800b068:	1a9b      	subs	r3, r3, r2
 800b06a:	440b      	add	r3, r1
 800b06c:	33d6      	adds	r3, #214	; 0xd6
 800b06e:	2200      	movs	r2, #0
 800b070:	701a      	strb	r2, [r3, #0]
 800b072:	4930      	ldr	r1, [pc, #192]	; (800b134 <servoMixerLoadMix+0xe8>)
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	4613      	mov	r3, r2
 800b078:	00db      	lsls	r3, r3, #3
 800b07a:	1a9b      	subs	r3, r3, r2
 800b07c:	440b      	add	r3, r1
 800b07e:	33d2      	adds	r3, #210	; 0xd2
 800b080:	2200      	movs	r2, #0
 800b082:	701a      	strb	r2, [r3, #0]
 800b084:	492b      	ldr	r1, [pc, #172]	; (800b134 <servoMixerLoadMix+0xe8>)
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	4613      	mov	r3, r2
 800b08a:	00db      	lsls	r3, r3, #3
 800b08c:	1a9b      	subs	r3, r3, r2
 800b08e:	440b      	add	r3, r1
 800b090:	33d2      	adds	r3, #210	; 0xd2
 800b092:	f993 3000 	ldrsb.w	r3, [r3]
 800b096:	b2d8      	uxtb	r0, r3
 800b098:	4926      	ldr	r1, [pc, #152]	; (800b134 <servoMixerLoadMix+0xe8>)
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	4613      	mov	r3, r2
 800b09e:	00db      	lsls	r3, r3, #3
 800b0a0:	1a9b      	subs	r3, r3, r2
 800b0a2:	440b      	add	r3, r1
 800b0a4:	33d1      	adds	r3, #209	; 0xd1
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	701a      	strb	r2, [r3, #0]
 800b0aa:	4922      	ldr	r1, [pc, #136]	; (800b134 <servoMixerLoadMix+0xe8>)
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	00db      	lsls	r3, r3, #3
 800b0b2:	1a9b      	subs	r3, r3, r2
 800b0b4:	440b      	add	r3, r1
 800b0b6:	33d1      	adds	r3, #209	; 0xd1
 800b0b8:	7818      	ldrb	r0, [r3, #0]
 800b0ba:	491e      	ldr	r1, [pc, #120]	; (800b134 <servoMixerLoadMix+0xe8>)
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	00db      	lsls	r3, r3, #3
 800b0c2:	1a9b      	subs	r3, r3, r2
 800b0c4:	440b      	add	r3, r1
 800b0c6:	33d0      	adds	r3, #208	; 0xd0
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	60fb      	str	r3, [r7, #12]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2b0f      	cmp	r3, #15
 800b0d6:	ddc3      	ble.n	800b060 <servoMixerLoadMix+0x14>

    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b0d8:	2300      	movs	r3, #0
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	e01a      	b.n	800b114 <servoMixerLoadMix+0xc8>
        mcfg.customServoMixer[i] = servoMixers[index].rule[i];
 800b0de:	4a16      	ldr	r2, [pc, #88]	; (800b138 <servoMixerLoadMix+0xec>)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	00db      	lsls	r3, r3, #3
 800b0e4:	4413      	add	r3, r2
 800b0e6:	6859      	ldr	r1, [r3, #4]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	00db      	lsls	r3, r3, #3
 800b0ee:	1a9b      	subs	r3, r3, r2
 800b0f0:	18c8      	adds	r0, r1, r3
 800b0f2:	4910      	ldr	r1, [pc, #64]	; (800b134 <servoMixerLoadMix+0xe8>)
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	00db      	lsls	r3, r3, #3
 800b0fa:	1a9b      	subs	r3, r3, r2
 800b0fc:	440b      	add	r3, r1
 800b0fe:	33d0      	adds	r3, #208	; 0xd0
 800b100:	4602      	mov	r2, r0
 800b102:	6811      	ldr	r1, [r2, #0]
 800b104:	6019      	str	r1, [r3, #0]
 800b106:	8891      	ldrh	r1, [r2, #4]
 800b108:	7992      	ldrb	r2, [r2, #6]
 800b10a:	8099      	strh	r1, [r3, #4]
 800b10c:	719a      	strb	r2, [r3, #6]
    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	3301      	adds	r3, #1
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	4a08      	ldr	r2, [pc, #32]	; (800b138 <servoMixerLoadMix+0xec>)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b11c:	461a      	mov	r2, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	4293      	cmp	r3, r2
 800b122:	dbdc      	blt.n	800b0de <servoMixerLoadMix+0x92>
}
 800b124:	bf00      	nop
 800b126:	bf00      	nop
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	200007ac 	.word	0x200007ac
 800b138:	08029360 	.word	0x08029360

0800b13c <mixerLoadMix>:

void mixerLoadMix(int index)
{
 800b13c:	b490      	push	{r4, r7}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	3301      	adds	r3, #1
 800b148:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_MOTORS; i++)
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]
 800b14e:	e00a      	b.n	800b166 <mixerLoadMix+0x2a>
        mcfg.customMixer[i].throttle = 0.0f;
 800b150:	4a1c      	ldr	r2, [pc, #112]	; (800b1c4 <mixerLoadMix+0x88>)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3301      	adds	r3, #1
 800b156:	011b      	lsls	r3, r3, #4
 800b158:	4413      	add	r3, r2
 800b15a:	f04f 0200 	mov.w	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3301      	adds	r3, #1
 800b164:	60fb      	str	r3, [r7, #12]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b0b      	cmp	r3, #11
 800b16a:	ddf1      	ble.n	800b150 <mixerLoadMix+0x14>

    // do we have anything here to begin with?
    if (mixers[index].motor != NULL) {
 800b16c:	4a16      	ldr	r2, [pc, #88]	; (800b1c8 <mixerLoadMix+0x8c>)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	00db      	lsls	r3, r3, #3
 800b172:	4413      	add	r3, r2
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d01f      	beq.n	800b1ba <mixerLoadMix+0x7e>
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b17a:	2300      	movs	r3, #0
 800b17c:	60fb      	str	r3, [r7, #12]
 800b17e:	e014      	b.n	800b1aa <mixerLoadMix+0x6e>
            mcfg.customMixer[i] = mixers[index].motor[i];
 800b180:	4a11      	ldr	r2, [pc, #68]	; (800b1c8 <mixerLoadMix+0x8c>)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	00db      	lsls	r3, r3, #3
 800b186:	4413      	add	r3, r2
 800b188:	685a      	ldr	r2, [r3, #4]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	011b      	lsls	r3, r3, #4
 800b18e:	18d1      	adds	r1, r2, r3
 800b190:	4a0c      	ldr	r2, [pc, #48]	; (800b1c4 <mixerLoadMix+0x88>)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3301      	adds	r3, #1
 800b196:	011b      	lsls	r3, r3, #4
 800b198:	4413      	add	r3, r2
 800b19a:	461c      	mov	r4, r3
 800b19c:	460b      	mov	r3, r1
 800b19e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b1a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	60fb      	str	r3, [r7, #12]
 800b1aa:	4a07      	ldr	r2, [pc, #28]	; (800b1c8 <mixerLoadMix+0x8c>)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	dbe2      	blt.n	800b180 <mixerLoadMix+0x44>
    }
}
 800b1ba:	bf00      	nop
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bc90      	pop	{r4, r7}
 800b1c2:	4770      	bx	lr
 800b1c4:	200007ac 	.word	0x200007ac
 800b1c8:	080291f4 	.word	0x080291f4

0800b1cc <writeServos>:

void writeServos(void)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	af00      	add	r7, sp, #0
    if (!core.useServo)
 800b1d0:	4b95      	ldr	r3, [pc, #596]	; (800b428 <writeServos+0x25c>)
 800b1d2:	7d5b      	ldrb	r3, [r3, #21]
 800b1d4:	f083 0301 	eor.w	r3, r3, #1
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f040 811d 	bne.w	800b41a <writeServos+0x24e>
        return;

    switch (mcfg.mixerConfiguration) {
 800b1e0:	4b92      	ldr	r3, [pc, #584]	; (800b42c <writeServos+0x260>)
 800b1e2:	795b      	ldrb	r3, [r3, #5]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	2b17      	cmp	r3, #23
 800b1e8:	f200 8100 	bhi.w	800b3ec <writeServos+0x220>
 800b1ec:	a201      	add	r2, pc, #4	; (adr r2, 800b1f4 <writeServos+0x28>)
 800b1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f2:	bf00      	nop
 800b1f4:	0800b277 	.word	0x0800b277
 800b1f8:	0800b3ed 	.word	0x0800b3ed
 800b1fc:	0800b3ed 	.word	0x0800b3ed
 800b200:	0800b255 	.word	0x0800b255
 800b204:	0800b2b7 	.word	0x0800b2b7
 800b208:	0800b3ed 	.word	0x0800b3ed
 800b20c:	0800b3ed 	.word	0x0800b3ed
 800b210:	0800b2fb 	.word	0x0800b2fb
 800b214:	0800b3ed 	.word	0x0800b3ed
 800b218:	0800b3ed 	.word	0x0800b3ed
 800b21c:	0800b3ed 	.word	0x0800b3ed
 800b220:	0800b3ed 	.word	0x0800b3ed
 800b224:	0800b3ed 	.word	0x0800b3ed
 800b228:	0800b31d 	.word	0x0800b31d
 800b22c:	0800b3ed 	.word	0x0800b3ed
 800b230:	0800b3ed 	.word	0x0800b3ed
 800b234:	0800b3ed 	.word	0x0800b3ed
 800b238:	0800b3ed 	.word	0x0800b3ed
 800b23c:	0800b3ed 	.word	0x0800b3ed
 800b240:	0800b2d9 	.word	0x0800b2d9
 800b244:	0800b31d 	.word	0x0800b31d
 800b248:	0800b3ed 	.word	0x0800b3ed
 800b24c:	0800b3ed 	.word	0x0800b3ed
 800b250:	0800b35f 	.word	0x0800b35f
        case MULTITYPE_BI:
        	actPwmWriteServo(0, servo[4]);
 800b254:	4b76      	ldr	r3, [pc, #472]	; (800b430 <writeServos+0x264>)
 800b256:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	4619      	mov	r1, r3
 800b25e:	2000      	movs	r0, #0
 800b260:	f7f6 fe80 	bl	8001f64 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b264:	4b72      	ldr	r3, [pc, #456]	; (800b430 <writeServos+0x264>)
 800b266:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	4619      	mov	r1, r3
 800b26e:	2001      	movs	r0, #1
 800b270:	f7f6 fe78 	bl	8001f64 <actPwmWriteServo>
            break;
 800b274:	e0d6      	b.n	800b424 <writeServos+0x258>

        case MULTITYPE_TRI:
            if (cfg.tri_unarmed_servo) {
 800b276:	4b6f      	ldr	r3, [pc, #444]	; (800b434 <writeServos+0x268>)
 800b278:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d008      	beq.n	800b292 <writeServos+0xc6>
                // if unarmed flag set, we always move servo
            	actPwmWriteServo(0, servo[5]);
 800b280:	4b6b      	ldr	r3, [pc, #428]	; (800b430 <writeServos+0x264>)
 800b282:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b286:	b29b      	uxth	r3, r3
 800b288:	4619      	mov	r1, r3
 800b28a:	2000      	movs	r0, #0
 800b28c:	f7f6 fe6a 	bl	8001f64 <actPwmWriteServo>
                if (f.ARMED)
                	actPwmWriteServo(0, servo[5]);
                else
                	actPwmWriteServo(0, 0); // kill servo signal completely.
            }
            break;
 800b290:	e0c8      	b.n	800b424 <writeServos+0x258>
                if (f.ARMED)
 800b292:	4b69      	ldr	r3, [pc, #420]	; (800b438 <writeServos+0x26c>)
 800b294:	785b      	ldrb	r3, [r3, #1]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d008      	beq.n	800b2ac <writeServos+0xe0>
                	actPwmWriteServo(0, servo[5]);
 800b29a:	4b65      	ldr	r3, [pc, #404]	; (800b430 <writeServos+0x264>)
 800b29c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	f7f6 fe5d 	bl	8001f64 <actPwmWriteServo>
            break;
 800b2aa:	e0bb      	b.n	800b424 <writeServos+0x258>
                	actPwmWriteServo(0, 0); // kill servo signal completely.
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	f7f6 fe58 	bl	8001f64 <actPwmWriteServo>
            break;
 800b2b4:	e0b6      	b.n	800b424 <writeServos+0x258>

        case MULTITYPE_GIMBAL:
        	actPwmWriteServo(0, servo[0]);
 800b2b6:	4b5e      	ldr	r3, [pc, #376]	; (800b430 <writeServos+0x264>)
 800b2b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	4619      	mov	r1, r3
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	f7f6 fe4f 	bl	8001f64 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[1]);
 800b2c6:	4b5a      	ldr	r3, [pc, #360]	; (800b430 <writeServos+0x264>)
 800b2c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	2001      	movs	r0, #1
 800b2d2:	f7f6 fe47 	bl	8001f64 <actPwmWriteServo>
            break;
 800b2d6:	e0a5      	b.n	800b424 <writeServos+0x258>

        case MULTITYPE_DUALCOPTER:
        	actPwmWriteServo(0, servo[4]);
 800b2d8:	4b55      	ldr	r3, [pc, #340]	; (800b430 <writeServos+0x264>)
 800b2da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	f7f6 fe3e 	bl	8001f64 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b2e8:	4b51      	ldr	r3, [pc, #324]	; (800b430 <writeServos+0x264>)
 800b2ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	2001      	movs	r0, #1
 800b2f4:	f7f6 fe36 	bl	8001f64 <actPwmWriteServo>
            break;
 800b2f8:	e094      	b.n	800b424 <writeServos+0x258>

        case MULTITYPE_FLYING_WING:
        	actPwmWriteServo(0, servo[3]);
 800b2fa:	4b4d      	ldr	r3, [pc, #308]	; (800b430 <writeServos+0x264>)
 800b2fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b300:	b29b      	uxth	r3, r3
 800b302:	4619      	mov	r1, r3
 800b304:	2000      	movs	r0, #0
 800b306:	f7f6 fe2d 	bl	8001f64 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b30a:	4b49      	ldr	r3, [pc, #292]	; (800b430 <writeServos+0x264>)
 800b30c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b310:	b29b      	uxth	r3, r3
 800b312:	4619      	mov	r1, r3
 800b314:	2001      	movs	r0, #1
 800b316:	f7f6 fe25 	bl	8001f64 <actPwmWriteServo>
            break;
 800b31a:	e083      	b.n	800b424 <writeServos+0x258>

        case MULTITYPE_AIRPLANE:
        case MULTITYPE_SINGLECOPTER:
        	actPwmWriteServo(0, servo[3]);
 800b31c:	4b44      	ldr	r3, [pc, #272]	; (800b430 <writeServos+0x264>)
 800b31e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b322:	b29b      	uxth	r3, r3
 800b324:	4619      	mov	r1, r3
 800b326:	2000      	movs	r0, #0
 800b328:	f7f6 fe1c 	bl	8001f64 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b32c:	4b40      	ldr	r3, [pc, #256]	; (800b430 <writeServos+0x264>)
 800b32e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b332:	b29b      	uxth	r3, r3
 800b334:	4619      	mov	r1, r3
 800b336:	2001      	movs	r0, #1
 800b338:	f7f6 fe14 	bl	8001f64 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b33c:	4b3c      	ldr	r3, [pc, #240]	; (800b430 <writeServos+0x264>)
 800b33e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b342:	b29b      	uxth	r3, r3
 800b344:	4619      	mov	r1, r3
 800b346:	2002      	movs	r0, #2
 800b348:	f7f6 fe0c 	bl	8001f64 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b34c:	4b38      	ldr	r3, [pc, #224]	; (800b430 <writeServos+0x264>)
 800b34e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b352:	b29b      	uxth	r3, r3
 800b354:	4619      	mov	r1, r3
 800b356:	2003      	movs	r0, #3
 800b358:	f7f6 fe04 	bl	8001f64 <actPwmWriteServo>
            break;
 800b35c:	e062      	b.n	800b424 <writeServos+0x258>

        case MULTITYPE_CUSTOM_PLANE:
        	actPwmWriteServo(0, servo[3]);
 800b35e:	4b34      	ldr	r3, [pc, #208]	; (800b430 <writeServos+0x264>)
 800b360:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b364:	b29b      	uxth	r3, r3
 800b366:	4619      	mov	r1, r3
 800b368:	2000      	movs	r0, #0
 800b36a:	f7f6 fdfb 	bl	8001f64 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b36e:	4b30      	ldr	r3, [pc, #192]	; (800b430 <writeServos+0x264>)
 800b370:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b374:	b29b      	uxth	r3, r3
 800b376:	4619      	mov	r1, r3
 800b378:	2001      	movs	r0, #1
 800b37a:	f7f6 fdf3 	bl	8001f64 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b37e:	4b2c      	ldr	r3, [pc, #176]	; (800b430 <writeServos+0x264>)
 800b380:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b384:	b29b      	uxth	r3, r3
 800b386:	4619      	mov	r1, r3
 800b388:	2002      	movs	r0, #2
 800b38a:	f7f6 fdeb 	bl	8001f64 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b38e:	4b28      	ldr	r3, [pc, #160]	; (800b430 <writeServos+0x264>)
 800b390:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b394:	b29b      	uxth	r3, r3
 800b396:	4619      	mov	r1, r3
 800b398:	2003      	movs	r0, #3
 800b39a:	f7f6 fde3 	bl	8001f64 <actPwmWriteServo>
            if (feature(FEATURE_PPM)) {
 800b39e:	2001      	movs	r0, #1
 800b3a0:	f7fb fd76 	bl	8006e90 <feature>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d039      	beq.n	800b41e <writeServos+0x252>
            	actPwmWriteServo(4, servo[0]);
 800b3aa:	4b21      	ldr	r3, [pc, #132]	; (800b430 <writeServos+0x264>)
 800b3ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	2004      	movs	r0, #4
 800b3b6:	f7f6 fdd5 	bl	8001f64 <actPwmWriteServo>
            	actPwmWriteServo(5, servo[1]);
 800b3ba:	4b1d      	ldr	r3, [pc, #116]	; (800b430 <writeServos+0x264>)
 800b3bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	2005      	movs	r0, #5
 800b3c6:	f7f6 fdcd 	bl	8001f64 <actPwmWriteServo>
            	actPwmWriteServo(6, servo[2]);
 800b3ca:	4b19      	ldr	r3, [pc, #100]	; (800b430 <writeServos+0x264>)
 800b3cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	2006      	movs	r0, #6
 800b3d6:	f7f6 fdc5 	bl	8001f64 <actPwmWriteServo>
            	actPwmWriteServo(7, servo[7]);
 800b3da:	4b15      	ldr	r3, [pc, #84]	; (800b430 <writeServos+0x264>)
 800b3dc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	2007      	movs	r0, #7
 800b3e6:	f7f6 fdbd 	bl	8001f64 <actPwmWriteServo>
            }
            break;
 800b3ea:	e018      	b.n	800b41e <writeServos+0x252>

        default:
            // Two servos for SERVO_TILT, if enabled
            if (feature(FEATURE_SERVO_TILT)) {
 800b3ec:	2020      	movs	r0, #32
 800b3ee:	f7fb fd4f 	bl	8006e90 <feature>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d014      	beq.n	800b422 <writeServos+0x256>
            	actPwmWriteServo(0, servo[0]);
 800b3f8:	4b0d      	ldr	r3, [pc, #52]	; (800b430 <writeServos+0x264>)
 800b3fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	4619      	mov	r1, r3
 800b402:	2000      	movs	r0, #0
 800b404:	f7f6 fdae 	bl	8001f64 <actPwmWriteServo>
            	actPwmWriteServo(1, servo[1]);
 800b408:	4b09      	ldr	r3, [pc, #36]	; (800b430 <writeServos+0x264>)
 800b40a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	4619      	mov	r1, r3
 800b412:	2001      	movs	r0, #1
 800b414:	f7f6 fda6 	bl	8001f64 <actPwmWriteServo>
            }
            break;
 800b418:	e003      	b.n	800b422 <writeServos+0x256>
        return;
 800b41a:	bf00      	nop
 800b41c:	e002      	b.n	800b424 <writeServos+0x258>
            break;
 800b41e:	bf00      	nop
 800b420:	e000      	b.n	800b424 <writeServos+0x258>
            break;
 800b422:	bf00      	nop
    }
}
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	200006f4 	.word	0x200006f4
 800b42c:	200007ac 	.word	0x200007ac
 800b430:	20000040 	.word	0x20000040
 800b434:	20000d18 	.word	0x20000d18
 800b438:	20001628 	.word	0x20001628

0800b43c <writeMotors>:

void writeMotors(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
    uint8_t i;

    for (i = 0; i < numberMotor; i++)
 800b442:	2300      	movs	r3, #0
 800b444:	71fb      	strb	r3, [r7, #7]
 800b446:	e00c      	b.n	800b462 <writeMotors+0x26>
        actPwmWriteMotor(i, motor[i]);
 800b448:	79fb      	ldrb	r3, [r7, #7]
 800b44a:	4a0b      	ldr	r2, [pc, #44]	; (800b478 <writeMotors+0x3c>)
 800b44c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b450:	b29a      	uxth	r2, r3
 800b452:	79fb      	ldrb	r3, [r7, #7]
 800b454:	4611      	mov	r1, r2
 800b456:	4618      	mov	r0, r3
 800b458:	f7f6 fd68 	bl	8001f2c <actPwmWriteMotor>
    for (i = 0; i < numberMotor; i++)
 800b45c:	79fb      	ldrb	r3, [r7, #7]
 800b45e:	3301      	adds	r3, #1
 800b460:	71fb      	strb	r3, [r7, #7]
 800b462:	4b06      	ldr	r3, [pc, #24]	; (800b47c <writeMotors+0x40>)
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	79fa      	ldrb	r2, [r7, #7]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d3ed      	bcc.n	800b448 <writeMotors+0xc>
}
 800b46c:	bf00      	nop
 800b46e:	bf00      	nop
 800b470:	3708      	adds	r7, #8
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	20001490 	.word	0x20001490
 800b47c:	2000148c 	.word	0x2000148c

0800b480 <servoMixer>:
        motor[i] = mc;
    writeMotors();
}

static void servoMixer(void)
{
 800b480:	b590      	push	{r4, r7, lr}
 800b482:	b08b      	sub	sp, #44	; 0x2c
 800b484:	af00      	add	r7, sp, #0
    int16_t input[INPUT_ITEMS];
    static int16_t currentOutput[MAX_SERVO_RULES];
    uint8_t i;

    if (f.PASSTHRU_MODE) {
 800b486:	4bae      	ldr	r3, [pc, #696]	; (800b740 <servoMixer+0x2c0>)
 800b488:	7a9b      	ldrb	r3, [r3, #10]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00c      	beq.n	800b4a8 <servoMixer+0x28>
        // Direct passthru from RX
        input[INPUT_ROLL] = rcCommand[ROLL];
 800b48e:	4bad      	ldr	r3, [pc, #692]	; (800b744 <servoMixer+0x2c4>)
 800b490:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b494:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = rcCommand[PITCH];
 800b496:	4bab      	ldr	r3, [pc, #684]	; (800b744 <servoMixer+0x2c4>)
 800b498:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b49c:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = rcCommand[YAW];
 800b49e:	4ba9      	ldr	r3, [pc, #676]	; (800b744 <servoMixer+0x2c4>)
 800b4a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b4a4:	813b      	strh	r3, [r7, #8]
 800b4a6:	e00b      	b.n	800b4c0 <servoMixer+0x40>
    } else {
        // Assisted modes (gyro only or gyro+acc according to AUX configuration in Gui
        input[INPUT_ROLL] = axisPID[ROLL];
 800b4a8:	4ba7      	ldr	r3, [pc, #668]	; (800b748 <servoMixer+0x2c8>)
 800b4aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4ae:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = axisPID[PITCH];
 800b4b0:	4ba5      	ldr	r3, [pc, #660]	; (800b748 <servoMixer+0x2c8>)
 800b4b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4b6:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = axisPID[YAW];
 800b4b8:	4ba3      	ldr	r3, [pc, #652]	; (800b748 <servoMixer+0x2c8>)
 800b4ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b4be:	813b      	strh	r3, [r7, #8]
    }

    input[INPUT_THROTTLE] = motor[0];
 800b4c0:	4ba2      	ldr	r3, [pc, #648]	; (800b74c <servoMixer+0x2cc>)
 800b4c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4c6:	817b      	strh	r3, [r7, #10]
    // by subtracting the RC middle value from the RC input value, we get:
    // data - middle = input
    // 2000 - 1500 = +500
    // 1500 - 1500 = 0
    // 1000 - 1500 = -500
    input[INPUT_AUX1] = rcData[AUX1] - mcfg.midrc;
 800b4c8:	4ba1      	ldr	r3, [pc, #644]	; (800b750 <servoMixer+0x2d0>)
 800b4ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	4ba0      	ldr	r3, [pc, #640]	; (800b754 <servoMixer+0x2d4>)
 800b4d2:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	b21b      	sxth	r3, r3
 800b4dc:	81bb      	strh	r3, [r7, #12]
    input[INPUT_AUX2] = rcData[AUX2] - mcfg.midrc;
 800b4de:	4b9c      	ldr	r3, [pc, #624]	; (800b750 <servoMixer+0x2d0>)
 800b4e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	4b9b      	ldr	r3, [pc, #620]	; (800b754 <servoMixer+0x2d4>)
 800b4e8:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	b21b      	sxth	r3, r3
 800b4f2:	81fb      	strh	r3, [r7, #14]
    input[INPUT_AUX3] = rcData[AUX3] - mcfg.midrc;
 800b4f4:	4b96      	ldr	r3, [pc, #600]	; (800b750 <servoMixer+0x2d0>)
 800b4f6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	4b95      	ldr	r3, [pc, #596]	; (800b754 <servoMixer+0x2d4>)
 800b4fe:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	b29b      	uxth	r3, r3
 800b506:	b21b      	sxth	r3, r3
 800b508:	823b      	strh	r3, [r7, #16]
    input[INPUT_AUX4] = rcData[AUX4] - mcfg.midrc;
 800b50a:	4b91      	ldr	r3, [pc, #580]	; (800b750 <servoMixer+0x2d0>)
 800b50c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b510:	b29a      	uxth	r2, r3
 800b512:	4b90      	ldr	r3, [pc, #576]	; (800b754 <servoMixer+0x2d4>)
 800b514:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	b21b      	sxth	r3, r3
 800b51e:	827b      	strh	r3, [r7, #18]
    input[INPUT_RC_ROLL] = rcData[ROLL] - mcfg.midrc;
 800b520:	4b8b      	ldr	r3, [pc, #556]	; (800b750 <servoMixer+0x2d0>)
 800b522:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b526:	b29a      	uxth	r2, r3
 800b528:	4b8a      	ldr	r3, [pc, #552]	; (800b754 <servoMixer+0x2d4>)
 800b52a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	b29b      	uxth	r3, r3
 800b532:	b21b      	sxth	r3, r3
 800b534:	82bb      	strh	r3, [r7, #20]
    input[INPUT_RC_PITCH] = rcData[PITCH] - mcfg.midrc;
 800b536:	4b86      	ldr	r3, [pc, #536]	; (800b750 <servoMixer+0x2d0>)
 800b538:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b53c:	b29a      	uxth	r2, r3
 800b53e:	4b85      	ldr	r3, [pc, #532]	; (800b754 <servoMixer+0x2d4>)
 800b540:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	b29b      	uxth	r3, r3
 800b548:	b21b      	sxth	r3, r3
 800b54a:	82fb      	strh	r3, [r7, #22]
    input[INPUT_RC_YAW] = rcData[YAW] - mcfg.midrc;
 800b54c:	4b80      	ldr	r3, [pc, #512]	; (800b750 <servoMixer+0x2d0>)
 800b54e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b552:	b29a      	uxth	r2, r3
 800b554:	4b7f      	ldr	r3, [pc, #508]	; (800b754 <servoMixer+0x2d4>)
 800b556:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	b21b      	sxth	r3, r3
 800b560:	833b      	strh	r3, [r7, #24]
    input[INPUT_RC_THROTTLE] = rcData[THROTTLE] - mcfg.midrc;
 800b562:	4b7b      	ldr	r3, [pc, #492]	; (800b750 <servoMixer+0x2d0>)
 800b564:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b568:	b29a      	uxth	r2, r3
 800b56a:	4b7a      	ldr	r3, [pc, #488]	; (800b754 <servoMixer+0x2d4>)
 800b56c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	b29b      	uxth	r3, r3
 800b574:	b21b      	sxth	r3, r3
 800b576:	837b      	strh	r3, [r7, #26]

    for (i = 0; i < MAX_SERVOS; i++)
 800b578:	2300      	movs	r3, #0
 800b57a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b57e:	e00a      	b.n	800b596 <servoMixer+0x116>
        servo[i] = 0;
 800b580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b584:	4a74      	ldr	r2, [pc, #464]	; (800b758 <servoMixer+0x2d8>)
 800b586:	2100      	movs	r1, #0
 800b588:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800b58c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b590:	3301      	adds	r3, #1
 800b592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b59a:	2b07      	cmp	r3, #7
 800b59c:	d9f0      	bls.n	800b580 <servoMixer+0x100>

    // mix servos according to rules
    for (i = 0; i < numberRules; i++) {
 800b59e:	2300      	movs	r3, #0
 800b5a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5a4:	e15f      	b.n	800b866 <servoMixer+0x3e6>
        // consider rule if no box assigned or box is active
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b5a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5aa:	496c      	ldr	r1, [pc, #432]	; (800b75c <servoMixer+0x2dc>)
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	00db      	lsls	r3, r3, #3
 800b5b0:	1a9b      	subs	r3, r3, r2
 800b5b2:	440b      	add	r3, r1
 800b5b4:	3306      	adds	r3, #6
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00e      	beq.n	800b5da <servoMixer+0x15a>
 800b5bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5c0:	4966      	ldr	r1, [pc, #408]	; (800b75c <servoMixer+0x2dc>)
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	00db      	lsls	r3, r3, #3
 800b5c6:	1a9b      	subs	r3, r3, r2
 800b5c8:	440b      	add	r3, r1
 800b5ca:	3306      	adds	r3, #6
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	3314      	adds	r3, #20
 800b5d0:	4a63      	ldr	r2, [pc, #396]	; (800b760 <servoMixer+0x2e0>)
 800b5d2:	5cd3      	ldrb	r3, [r2, r3]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 813b 	beq.w	800b850 <servoMixer+0x3d0>
            uint8_t target = currentServoMixer[i].targetChannel;
 800b5da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5de:	495f      	ldr	r1, [pc, #380]	; (800b75c <servoMixer+0x2dc>)
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	00db      	lsls	r3, r3, #3
 800b5e4:	1a9b      	subs	r3, r3, r2
 800b5e6:	440b      	add	r3, r1
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            uint8_t from = currentServoMixer[i].fromChannel;
 800b5ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5f2:	495a      	ldr	r1, [pc, #360]	; (800b75c <servoMixer+0x2dc>)
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	00db      	lsls	r3, r3, #3
 800b5f8:	1a9b      	subs	r3, r3, r2
 800b5fa:	440b      	add	r3, r1
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            uint16_t servo_width = cfg.servoConf[target].max - cfg.servoConf[target].min;
 800b604:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b608:	4956      	ldr	r1, [pc, #344]	; (800b764 <servoMixer+0x2e4>)
 800b60a:	4613      	mov	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4413      	add	r3, r2
 800b610:	005b      	lsls	r3, r3, #1
 800b612:	440b      	add	r3, r1
 800b614:	33ba      	adds	r3, #186	; 0xba
 800b616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b61a:	b299      	uxth	r1, r3
 800b61c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b620:	4850      	ldr	r0, [pc, #320]	; (800b764 <servoMixer+0x2e4>)
 800b622:	4613      	mov	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	005b      	lsls	r3, r3, #1
 800b62a:	4403      	add	r3, r0
 800b62c:	33b8      	adds	r3, #184	; 0xb8
 800b62e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b632:	b29b      	uxth	r3, r3
 800b634:	1acb      	subs	r3, r1, r3
 800b636:	847b      	strh	r3, [r7, #34]	; 0x22
            int16_t min = currentServoMixer[i].min * servo_width / 100 - servo_width / 2;
 800b638:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b63c:	4947      	ldr	r1, [pc, #284]	; (800b75c <servoMixer+0x2dc>)
 800b63e:	4613      	mov	r3, r2
 800b640:	00db      	lsls	r3, r3, #3
 800b642:	1a9b      	subs	r3, r3, r2
 800b644:	440b      	add	r3, r1
 800b646:	3304      	adds	r3, #4
 800b648:	f993 3000 	ldrsb.w	r3, [r3]
 800b64c:	461a      	mov	r2, r3
 800b64e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b650:	fb02 f303 	mul.w	r3, r2, r3
 800b654:	4a44      	ldr	r2, [pc, #272]	; (800b768 <servoMixer+0x2e8>)
 800b656:	fb82 1203 	smull	r1, r2, r2, r3
 800b65a:	1152      	asrs	r2, r2, #5
 800b65c:	17db      	asrs	r3, r3, #31
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	b29a      	uxth	r2, r3
 800b662:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b664:	085b      	lsrs	r3, r3, #1
 800b666:	b29b      	uxth	r3, r3
 800b668:	1ad3      	subs	r3, r2, r3
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	843b      	strh	r3, [r7, #32]
            int16_t max = currentServoMixer[i].max * servo_width / 100 - servo_width / 2;
 800b66e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b672:	493a      	ldr	r1, [pc, #232]	; (800b75c <servoMixer+0x2dc>)
 800b674:	4613      	mov	r3, r2
 800b676:	00db      	lsls	r3, r3, #3
 800b678:	1a9b      	subs	r3, r3, r2
 800b67a:	440b      	add	r3, r1
 800b67c:	3305      	adds	r3, #5
 800b67e:	f993 3000 	ldrsb.w	r3, [r3]
 800b682:	461a      	mov	r2, r3
 800b684:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b686:	fb02 f303 	mul.w	r3, r2, r3
 800b68a:	4a37      	ldr	r2, [pc, #220]	; (800b768 <servoMixer+0x2e8>)
 800b68c:	fb82 1203 	smull	r1, r2, r2, r3
 800b690:	1152      	asrs	r2, r2, #5
 800b692:	17db      	asrs	r3, r3, #31
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	b29a      	uxth	r2, r3
 800b698:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b69a:	085b      	lsrs	r3, r3, #1
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	83fb      	strh	r3, [r7, #30]

            if (currentServoMixer[i].speed == 0)
 800b6a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6a8:	492c      	ldr	r1, [pc, #176]	; (800b75c <servoMixer+0x2dc>)
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	00db      	lsls	r3, r3, #3
 800b6ae:	1a9b      	subs	r3, r3, r2
 800b6b0:	440b      	add	r3, r1
 800b6b2:	3303      	adds	r3, #3
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10c      	bne.n	800b6d4 <servoMixer+0x254>
                currentOutput[i] = input[from];
 800b6ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6c2:	005b      	lsls	r3, r3, #1
 800b6c4:	3328      	adds	r3, #40	; 0x28
 800b6c6:	443b      	add	r3, r7
 800b6c8:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800b6cc:	4b27      	ldr	r3, [pc, #156]	; (800b76c <servoMixer+0x2ec>)
 800b6ce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800b6d2:	e082      	b.n	800b7da <servoMixer+0x35a>
            else {
                if (currentOutput[i] < input[from])
 800b6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6d8:	4a24      	ldr	r2, [pc, #144]	; (800b76c <servoMixer+0x2ec>)
 800b6da:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b6de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	3328      	adds	r3, #40	; 0x28
 800b6e6:	443b      	add	r3, r7
 800b6e8:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	da3f      	bge.n	800b770 <servoMixer+0x2f0>
                    currentOutput[i] = constrain(currentOutput[i] + currentServoMixer[i].speed, currentOutput[i], input[from]);
 800b6f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6f4:	4a1d      	ldr	r2, [pc, #116]	; (800b76c <servoMixer+0x2ec>)
 800b6f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b700:	4916      	ldr	r1, [pc, #88]	; (800b75c <servoMixer+0x2dc>)
 800b702:	4613      	mov	r3, r2
 800b704:	00db      	lsls	r3, r3, #3
 800b706:	1a9b      	subs	r3, r3, r2
 800b708:	440b      	add	r3, r1
 800b70a:	3303      	adds	r3, #3
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	4418      	add	r0, r3
 800b710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b714:	4a15      	ldr	r2, [pc, #84]	; (800b76c <servoMixer+0x2ec>)
 800b716:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b71a:	4619      	mov	r1, r3
 800b71c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b720:	005b      	lsls	r3, r3, #1
 800b722:	3328      	adds	r3, #40	; 0x28
 800b724:	443b      	add	r3, r7
 800b726:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b72a:	461a      	mov	r2, r3
 800b72c:	f7f8 fa30 	bl	8003b90 <constrain>
 800b730:	4602      	mov	r2, r0
 800b732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b736:	b211      	sxth	r1, r2
 800b738:	4a0c      	ldr	r2, [pc, #48]	; (800b76c <servoMixer+0x2ec>)
 800b73a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b73e:	e04c      	b.n	800b7da <servoMixer+0x35a>
 800b740:	20001628 	.word	0x20001628
 800b744:	20001684 	.word	0x20001684
 800b748:	200016e4 	.word	0x200016e4
 800b74c:	20001490 	.word	0x20001490
 800b750:	20001660 	.word	0x20001660
 800b754:	200007ac 	.word	0x200007ac
 800b758:	20000040 	.word	0x20000040
 800b75c:	20001580 	.word	0x20001580
 800b760:	200016c8 	.word	0x200016c8
 800b764:	20000d18 	.word	0x20000d18
 800b768:	51eb851f 	.word	0x51eb851f
 800b76c:	200015f0 	.word	0x200015f0
                else if (currentOutput[i] > input[from])
 800b770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b774:	4a63      	ldr	r2, [pc, #396]	; (800b904 <servoMixer+0x484>)
 800b776:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b77a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b77e:	005b      	lsls	r3, r3, #1
 800b780:	3328      	adds	r3, #40	; 0x28
 800b782:	443b      	add	r3, r7
 800b784:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b788:	429a      	cmp	r2, r3
 800b78a:	dd26      	ble.n	800b7da <servoMixer+0x35a>
                    currentOutput[i] = constrain(currentOutput[i] - currentServoMixer[i].speed, input[from], currentOutput[i]);
 800b78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b790:	4a5c      	ldr	r2, [pc, #368]	; (800b904 <servoMixer+0x484>)
 800b792:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b796:	4618      	mov	r0, r3
 800b798:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b79c:	495a      	ldr	r1, [pc, #360]	; (800b908 <servoMixer+0x488>)
 800b79e:	4613      	mov	r3, r2
 800b7a0:	00db      	lsls	r3, r3, #3
 800b7a2:	1a9b      	subs	r3, r3, r2
 800b7a4:	440b      	add	r3, r1
 800b7a6:	3303      	adds	r3, #3
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	1ac0      	subs	r0, r0, r3
 800b7ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b7b0:	005b      	lsls	r3, r3, #1
 800b7b2:	3328      	adds	r3, #40	; 0x28
 800b7b4:	443b      	add	r3, r7
 800b7b6:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7c0:	4a50      	ldr	r2, [pc, #320]	; (800b904 <servoMixer+0x484>)
 800b7c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	f7f8 f9e2 	bl	8003b90 <constrain>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7d2:	b211      	sxth	r1, r2
 800b7d4:	4a4b      	ldr	r2, [pc, #300]	; (800b904 <servoMixer+0x484>)
 800b7d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            servo[target] += servoDirection(target, from) * constrain(((int32_t)currentOutput[i] * currentServoMixer[i].rate) / 100, min, max);
 800b7da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7de:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7ff fa73 	bl	800acd0 <servoDirection>
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7f0:	4a44      	ldr	r2, [pc, #272]	; (800b904 <servoMixer+0x484>)
 800b7f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b7fc:	4942      	ldr	r1, [pc, #264]	; (800b908 <servoMixer+0x488>)
 800b7fe:	4613      	mov	r3, r2
 800b800:	00db      	lsls	r3, r3, #3
 800b802:	1a9b      	subs	r3, r3, r2
 800b804:	440b      	add	r3, r1
 800b806:	3302      	adds	r3, #2
 800b808:	f993 3000 	ldrsb.w	r3, [r3]
 800b80c:	fb00 f303 	mul.w	r3, r0, r3
 800b810:	4a3e      	ldr	r2, [pc, #248]	; (800b90c <servoMixer+0x48c>)
 800b812:	fb82 1203 	smull	r1, r2, r2, r3
 800b816:	1152      	asrs	r2, r2, #5
 800b818:	17db      	asrs	r3, r3, #31
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 800b820:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b824:	4618      	mov	r0, r3
 800b826:	f7f8 f9b3 	bl	8003b90 <constrain>
 800b82a:	4603      	mov	r3, r0
 800b82c:	fb03 f104 	mul.w	r1, r3, r4
 800b830:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b834:	4a36      	ldr	r2, [pc, #216]	; (800b910 <servoMixer+0x490>)
 800b836:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	b28b      	uxth	r3, r1
 800b83e:	4413      	add	r3, r2
 800b840:	b29a      	uxth	r2, r3
 800b842:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b846:	b211      	sxth	r1, r2
 800b848:	4a31      	ldr	r2, [pc, #196]	; (800b910 <servoMixer+0x490>)
 800b84a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b84e:	e005      	b.n	800b85c <servoMixer+0x3dc>
        } else
            currentOutput[i] = 0;
 800b850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b854:	4a2b      	ldr	r2, [pc, #172]	; (800b904 <servoMixer+0x484>)
 800b856:	2100      	movs	r1, #0
 800b858:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < numberRules; i++) {
 800b85c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b860:	3301      	adds	r3, #1
 800b862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b866:	4b2b      	ldr	r3, [pc, #172]	; (800b914 <servoMixer+0x494>)
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b86e:	429a      	cmp	r2, r3
 800b870:	f4ff ae99 	bcc.w	800b5a6 <servoMixer+0x126>
    }

    // servo rates
    for (i = 0; i < MAX_SERVOS; i++) {
 800b874:	2300      	movs	r3, #0
 800b876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b87a:	e039      	b.n	800b8f0 <servoMixer+0x470>
        servo[i] = ((int32_t)cfg.servoConf[i].rate * servo[i]) / 100;
 800b87c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b880:	4925      	ldr	r1, [pc, #148]	; (800b918 <servoMixer+0x498>)
 800b882:	4613      	mov	r3, r2
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	4413      	add	r3, r2
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	440b      	add	r3, r1
 800b88c:	33be      	adds	r3, #190	; 0xbe
 800b88e:	f993 3000 	ldrsb.w	r3, [r3]
 800b892:	4619      	mov	r1, r3
 800b894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b898:	4a1d      	ldr	r2, [pc, #116]	; (800b910 <servoMixer+0x490>)
 800b89a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b89e:	fb01 f303 	mul.w	r3, r1, r3
 800b8a2:	4a1a      	ldr	r2, [pc, #104]	; (800b90c <servoMixer+0x48c>)
 800b8a4:	fb82 1203 	smull	r1, r2, r2, r3
 800b8a8:	1152      	asrs	r2, r2, #5
 800b8aa:	17db      	asrs	r3, r3, #31
 800b8ac:	1ad2      	subs	r2, r2, r3
 800b8ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8b2:	b211      	sxth	r1, r2
 800b8b4:	4a16      	ldr	r2, [pc, #88]	; (800b910 <servoMixer+0x490>)
 800b8b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        servo[i] += servoMiddle(i);
 800b8ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff f9d0 	bl	800ac64 <servoMiddle>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8cc:	4a10      	ldr	r2, [pc, #64]	; (800b910 <servoMixer+0x490>)
 800b8ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	b28b      	uxth	r3, r1
 800b8d6:	4413      	add	r3, r2
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8de:	b211      	sxth	r1, r2
 800b8e0:	4a0b      	ldr	r2, [pc, #44]	; (800b910 <servoMixer+0x490>)
 800b8e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++) {
 800b8e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8f4:	2b07      	cmp	r3, #7
 800b8f6:	d9c1      	bls.n	800b87c <servoMixer+0x3fc>
    }
}
 800b8f8:	bf00      	nop
 800b8fa:	bf00      	nop
 800b8fc:	372c      	adds	r7, #44	; 0x2c
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd90      	pop	{r4, r7, pc}
 800b902:	bf00      	nop
 800b904:	200015f0 	.word	0x200015f0
 800b908:	20001580 	.word	0x20001580
 800b90c:	51eb851f 	.word	0x51eb851f
 800b910:	20000040 	.word	0x20000040
 800b914:	2000148d 	.word	0x2000148d
 800b918:	20000d18 	.word	0x20000d18

0800b91c <mixTable>:

void mixTable(void)
{
 800b91c:	b590      	push	{r4, r7, lr}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
    int16_t maxMotor;
    uint32_t i;

    if (numberMotor > 3) {
 800b922:	4b7e      	ldr	r3, [pc, #504]	; (800bb1c <mixTable+0x200>)
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	2b03      	cmp	r3, #3
 800b928:	d91d      	bls.n	800b966 <mixTable+0x4a>
        // prevent "yaw jump" during yaw correction
        axisPID[YAW] = constrain(axisPID[YAW], -100 - abs(rcCommand[YAW]), +100 + abs(rcCommand[YAW]));
 800b92a:	4b7d      	ldr	r3, [pc, #500]	; (800bb20 <mixTable+0x204>)
 800b92c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b930:	4618      	mov	r0, r3
 800b932:	4b7c      	ldr	r3, [pc, #496]	; (800bb24 <mixTable+0x208>)
 800b934:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	bfb8      	it	lt
 800b93c:	425b      	neglt	r3, r3
 800b93e:	b29b      	uxth	r3, r3
 800b940:	461a      	mov	r2, r3
 800b942:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b946:	1a9b      	subs	r3, r3, r2
 800b948:	4a76      	ldr	r2, [pc, #472]	; (800bb24 <mixTable+0x208>)
 800b94a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b94e:	2a00      	cmp	r2, #0
 800b950:	bfb8      	it	lt
 800b952:	4252      	neglt	r2, r2
 800b954:	b292      	uxth	r2, r2
 800b956:	3264      	adds	r2, #100	; 0x64
 800b958:	4619      	mov	r1, r3
 800b95a:	f7f8 f919 	bl	8003b90 <constrain>
 800b95e:	4603      	mov	r3, r0
 800b960:	b21a      	sxth	r2, r3
 800b962:	4b6f      	ldr	r3, [pc, #444]	; (800bb20 <mixTable+0x204>)
 800b964:	809a      	strh	r2, [r3, #4]
    }

    // motors for non-servo mixes
    if (numberMotor > 1) {
 800b966:	4b6d      	ldr	r3, [pc, #436]	; (800bb1c <mixTable+0x200>)
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	f240 809a 	bls.w	800baa4 <mixTable+0x188>
        for (i = 0; i < numberMotor; i++) {
 800b970:	2300      	movs	r3, #0
 800b972:	60bb      	str	r3, [r7, #8]
 800b974:	e08f      	b.n	800ba96 <mixTable+0x17a>
            motor[i] = rcCommand[THROTTLE] * currentMixer[i].throttle + axisPID[PITCH] * currentMixer[i].pitch + axisPID[ROLL] * currentMixer[i].roll + -cfg.yaw_direction * axisPID[YAW] * currentMixer[i].yaw;
 800b976:	4b6b      	ldr	r3, [pc, #428]	; (800bb24 <mixTable+0x208>)
 800b978:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b97c:	ee07 3a90 	vmov	s15, r3
 800b980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b984:	4a68      	ldr	r2, [pc, #416]	; (800bb28 <mixTable+0x20c>)
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	011b      	lsls	r3, r3, #4
 800b98a:	4413      	add	r3, r2
 800b98c:	edd3 7a00 	vldr	s15, [r3]
 800b990:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b994:	4b62      	ldr	r3, [pc, #392]	; (800bb20 <mixTable+0x204>)
 800b996:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b99a:	ee07 3a90 	vmov	s15, r3
 800b99e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9a2:	4a61      	ldr	r2, [pc, #388]	; (800bb28 <mixTable+0x20c>)
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	011b      	lsls	r3, r3, #4
 800b9a8:	4413      	add	r3, r2
 800b9aa:	3308      	adds	r3, #8
 800b9ac:	edd3 7a00 	vldr	s15, [r3]
 800b9b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9b8:	4b59      	ldr	r3, [pc, #356]	; (800bb20 <mixTable+0x204>)
 800b9ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9be:	ee07 3a90 	vmov	s15, r3
 800b9c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9c6:	4a58      	ldr	r2, [pc, #352]	; (800bb28 <mixTable+0x20c>)
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	011b      	lsls	r3, r3, #4
 800b9cc:	4413      	add	r3, r2
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	edd3 7a00 	vldr	s15, [r3]
 800b9d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9dc:	4b53      	ldr	r3, [pc, #332]	; (800bb2c <mixTable+0x210>)
 800b9de:	f993 310e 	ldrsb.w	r3, [r3, #270]	; 0x10e
 800b9e2:	425b      	negs	r3, r3
 800b9e4:	4a4e      	ldr	r2, [pc, #312]	; (800bb20 <mixTable+0x204>)
 800b9e6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b9ea:	fb02 f303 	mul.w	r3, r2, r3
 800b9ee:	ee07 3a90 	vmov	s15, r3
 800b9f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9f6:	4a4c      	ldr	r2, [pc, #304]	; (800bb28 <mixTable+0x20c>)
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	011b      	lsls	r3, r3, #4
 800b9fc:	4413      	add	r3, r2
 800b9fe:	330c      	adds	r3, #12
 800ba00:	edd3 7a00 	vldr	s15, [r3]
 800ba04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba10:	ee17 3a90 	vmov	r3, s15
 800ba14:	b219      	sxth	r1, r3
 800ba16:	4a46      	ldr	r2, [pc, #280]	; (800bb30 <mixTable+0x214>)
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (f.FIXED_WING) { // vector_thrust handeling
 800ba1e:	4b45      	ldr	r3, [pc, #276]	; (800bb34 <mixTable+0x218>)
 800ba20:	7c1b      	ldrb	r3, [r3, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d034      	beq.n	800ba90 <mixTable+0x174>
                if (cfg.fw_vector_thrust) {
 800ba26:	4b41      	ldr	r3, [pc, #260]	; (800bb2c <mixTable+0x210>)
 800ba28:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d028      	beq.n	800ba82 <mixTable+0x166>
                    if (f.PASSTHRU_MODE)
 800ba30:	4b40      	ldr	r3, [pc, #256]	; (800bb34 <mixTable+0x218>)
 800ba32:	7a9b      	ldrb	r3, [r3, #10]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d02b      	beq.n	800ba90 <mixTable+0x174>
                        motor[i] = rcCommand[THROTTLE] - rcCommand[YAW] * (i - 0.5f);
 800ba38:	4b3a      	ldr	r3, [pc, #232]	; (800bb24 <mixTable+0x208>)
 800ba3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ba3e:	ee07 3a90 	vmov	s15, r3
 800ba42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba46:	4b37      	ldr	r3, [pc, #220]	; (800bb24 <mixTable+0x208>)
 800ba48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ba4c:	ee07 3a90 	vmov	s15, r3
 800ba50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	ee07 3a90 	vmov	s15, r3
 800ba5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba5e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ba62:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ba66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba72:	ee17 3a90 	vmov	r3, s15
 800ba76:	b219      	sxth	r1, r3
 800ba78:	4a2d      	ldr	r2, [pc, #180]	; (800bb30 <mixTable+0x214>)
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800ba80:	e006      	b.n	800ba90 <mixTable+0x174>
                } else { // Override mixerVectorThrust
                    motor[i] = rcCommand[THROTTLE];
 800ba82:	4b28      	ldr	r3, [pc, #160]	; (800bb24 <mixTable+0x208>)
 800ba84:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800ba88:	4a29      	ldr	r2, [pc, #164]	; (800bb30 <mixTable+0x214>)
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < numberMotor; i++) {
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	3301      	adds	r3, #1
 800ba94:	60bb      	str	r3, [r7, #8]
 800ba96:	4b21      	ldr	r3, [pc, #132]	; (800bb1c <mixTable+0x200>)
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	f4ff af69 	bcc.w	800b976 <mixTable+0x5a>
            }
        }
    }

    // airplane / servo mixes
    switch (mcfg.mixerConfiguration) {
 800baa4:	4b24      	ldr	r3, [pc, #144]	; (800bb38 <mixTable+0x21c>)
 800baa6:	795b      	ldrb	r3, [r3, #5]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	2b17      	cmp	r3, #23
 800baac:	d87b      	bhi.n	800bba6 <mixTable+0x28a>
 800baae:	a201      	add	r2, pc, #4	; (adr r2, 800bab4 <mixTable+0x198>)
 800bab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab4:	0800bb15 	.word	0x0800bb15
 800bab8:	0800bba7 	.word	0x0800bba7
 800babc:	0800bba7 	.word	0x0800bba7
 800bac0:	0800bb15 	.word	0x0800bb15
 800bac4:	0800bb3d 	.word	0x0800bb3d
 800bac8:	0800bba7 	.word	0x0800bba7
 800bacc:	0800bba7 	.word	0x0800bba7
 800bad0:	0800bb15 	.word	0x0800bb15
 800bad4:	0800bba7 	.word	0x0800bba7
 800bad8:	0800bba7 	.word	0x0800bba7
 800badc:	0800bba7 	.word	0x0800bba7
 800bae0:	0800bba7 	.word	0x0800bba7
 800bae4:	0800bba7 	.word	0x0800bba7
 800bae8:	0800bb15 	.word	0x0800bb15
 800baec:	0800bba7 	.word	0x0800bba7
 800baf0:	0800bba7 	.word	0x0800bba7
 800baf4:	0800bba7 	.word	0x0800bba7
 800baf8:	0800bba7 	.word	0x0800bba7
 800bafc:	0800bba7 	.word	0x0800bba7
 800bb00:	0800bb15 	.word	0x0800bb15
 800bb04:	0800bb15 	.word	0x0800bb15
 800bb08:	0800bba7 	.word	0x0800bba7
 800bb0c:	0800bba7 	.word	0x0800bba7
 800bb10:	0800bb15 	.word	0x0800bb15
        case MULTITYPE_AIRPLANE:
        case MULTITYPE_BI:
        case MULTITYPE_TRI:
        case MULTITYPE_DUALCOPTER:
        case MULTITYPE_SINGLECOPTER:
            servoMixer();
 800bb14:	f7ff fcb4 	bl	800b480 <servoMixer>
            break;
 800bb18:	e045      	b.n	800bba6 <mixTable+0x28a>
 800bb1a:	bf00      	nop
 800bb1c:	2000148c 	.word	0x2000148c
 800bb20:	200016e4 	.word	0x200016e4
 800bb24:	20001684 	.word	0x20001684
 800bb28:	200014c0 	.word	0x200014c0
 800bb2c:	20000d18 	.word	0x20000d18
 800bb30:	20001490 	.word	0x20001490
 800bb34:	20001628 	.word	0x20001628
 800bb38:	200007ac 	.word	0x200007ac
        case MULTITYPE_GIMBAL:
            servo[0] = (((int32_t)cfg.servoConf[0].rate * angle[PITCH]) / 50) + servoMiddle(0);
 800bb3c:	4ba7      	ldr	r3, [pc, #668]	; (800bddc <mixTable+0x4c0>)
 800bb3e:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bb42:	461a      	mov	r2, r3
 800bb44:	4ba6      	ldr	r3, [pc, #664]	; (800bde0 <mixTable+0x4c4>)
 800bb46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bb4a:	fb02 f303 	mul.w	r3, r2, r3
 800bb4e:	4aa5      	ldr	r2, [pc, #660]	; (800bde4 <mixTable+0x4c8>)
 800bb50:	fb82 1203 	smull	r1, r2, r2, r3
 800bb54:	1112      	asrs	r2, r2, #4
 800bb56:	17db      	asrs	r3, r3, #31
 800bb58:	1ad3      	subs	r3, r2, r3
 800bb5a:	b29c      	uxth	r4, r3
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	f7ff f881 	bl	800ac64 <servoMiddle>
 800bb62:	4603      	mov	r3, r0
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	4423      	add	r3, r4
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	b21a      	sxth	r2, r3
 800bb6c:	4b9e      	ldr	r3, [pc, #632]	; (800bde8 <mixTable+0x4cc>)
 800bb6e:	801a      	strh	r2, [r3, #0]
            servo[1] = (((int32_t)cfg.servoConf[1].rate * angle[ROLL]) / 50) + servoMiddle(1);
 800bb70:	4b9a      	ldr	r3, [pc, #616]	; (800bddc <mixTable+0x4c0>)
 800bb72:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bb76:	461a      	mov	r2, r3
 800bb78:	4b99      	ldr	r3, [pc, #612]	; (800bde0 <mixTable+0x4c4>)
 800bb7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb7e:	fb02 f303 	mul.w	r3, r2, r3
 800bb82:	4a98      	ldr	r2, [pc, #608]	; (800bde4 <mixTable+0x4c8>)
 800bb84:	fb82 1203 	smull	r1, r2, r2, r3
 800bb88:	1112      	asrs	r2, r2, #4
 800bb8a:	17db      	asrs	r3, r3, #31
 800bb8c:	1ad3      	subs	r3, r2, r3
 800bb8e:	b29c      	uxth	r4, r3
 800bb90:	2001      	movs	r0, #1
 800bb92:	f7ff f867 	bl	800ac64 <servoMiddle>
 800bb96:	4603      	mov	r3, r0
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	4423      	add	r3, r4
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	b21a      	sxth	r2, r3
 800bba0:	4b91      	ldr	r3, [pc, #580]	; (800bde8 <mixTable+0x4cc>)
 800bba2:	805a      	strh	r2, [r3, #2]
            break;
 800bba4:	bf00      	nop
    }

    // do camstab
    if (feature(FEATURE_SERVO_TILT)) {
 800bba6:	2020      	movs	r0, #32
 800bba8:	f7fb f972 	bl	8006e90 <feature>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f000 80a3 	beq.w	800bcfa <mixTable+0x3de>
        // center at fixed position, or vary either pitch or roll by RC channel
        servo[0] = servoMiddle(0);
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	f7ff f855 	bl	800ac64 <servoMiddle>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	4b8a      	ldr	r3, [pc, #552]	; (800bde8 <mixTable+0x4cc>)
 800bbc0:	801a      	strh	r2, [r3, #0]
        servo[1] = servoMiddle(1);
 800bbc2:	2001      	movs	r0, #1
 800bbc4:	f7ff f84e 	bl	800ac64 <servoMiddle>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	461a      	mov	r2, r3
 800bbcc:	4b86      	ldr	r3, [pc, #536]	; (800bde8 <mixTable+0x4cc>)
 800bbce:	805a      	strh	r2, [r3, #2]

        if (rcOptions[BOXCAMSTAB]) {
 800bbd0:	4b86      	ldr	r3, [pc, #536]	; (800bdec <mixTable+0x4d0>)
 800bbd2:	7a1b      	ldrb	r3, [r3, #8]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 8090 	beq.w	800bcfa <mixTable+0x3de>
            if (cfg.gimbal_flags & GIMBAL_MIXTILT) {
 800bbda:	4b80      	ldr	r3, [pc, #512]	; (800bddc <mixTable+0x4c0>)
 800bbdc:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bbe0:	f003 0302 	and.w	r3, r3, #2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d056      	beq.n	800bc96 <mixTable+0x37a>
                servo[0] -= (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 - (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bbe8:	4b7f      	ldr	r3, [pc, #508]	; (800bde8 <mixTable+0x4cc>)
 800bbea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	4b7a      	ldr	r3, [pc, #488]	; (800bddc <mixTable+0x4c0>)
 800bbf2:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bbf6:	425b      	negs	r3, r3
 800bbf8:	4979      	ldr	r1, [pc, #484]	; (800bde0 <mixTable+0x4c4>)
 800bbfa:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bbfe:	fb01 f303 	mul.w	r3, r1, r3
 800bc02:	4978      	ldr	r1, [pc, #480]	; (800bde4 <mixTable+0x4c8>)
 800bc04:	fb81 0103 	smull	r0, r1, r1, r3
 800bc08:	1109      	asrs	r1, r1, #4
 800bc0a:	17db      	asrs	r3, r3, #31
 800bc0c:	1acb      	subs	r3, r1, r3
 800bc0e:	b299      	uxth	r1, r3
 800bc10:	4b72      	ldr	r3, [pc, #456]	; (800bddc <mixTable+0x4c0>)
 800bc12:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bc16:	4618      	mov	r0, r3
 800bc18:	4b71      	ldr	r3, [pc, #452]	; (800bde0 <mixTable+0x4c4>)
 800bc1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc1e:	fb00 f303 	mul.w	r3, r0, r3
 800bc22:	4870      	ldr	r0, [pc, #448]	; (800bde4 <mixTable+0x4c8>)
 800bc24:	fb80 4003 	smull	r4, r0, r0, r3
 800bc28:	1100      	asrs	r0, r0, #4
 800bc2a:	17db      	asrs	r3, r3, #31
 800bc2c:	1a1b      	subs	r3, r3, r0
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	440b      	add	r3, r1
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	b21a      	sxth	r2, r3
 800bc3a:	4b6b      	ldr	r3, [pc, #428]	; (800bde8 <mixTable+0x4cc>)
 800bc3c:	801a      	strh	r2, [r3, #0]
                servo[1] += (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 + (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bc3e:	4b6a      	ldr	r3, [pc, #424]	; (800bde8 <mixTable+0x4cc>)
 800bc40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	4b65      	ldr	r3, [pc, #404]	; (800bddc <mixTable+0x4c0>)
 800bc48:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bc4c:	425b      	negs	r3, r3
 800bc4e:	4964      	ldr	r1, [pc, #400]	; (800bde0 <mixTable+0x4c4>)
 800bc50:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bc54:	fb01 f303 	mul.w	r3, r1, r3
 800bc58:	4962      	ldr	r1, [pc, #392]	; (800bde4 <mixTable+0x4c8>)
 800bc5a:	fb81 0103 	smull	r0, r1, r1, r3
 800bc5e:	1109      	asrs	r1, r1, #4
 800bc60:	17db      	asrs	r3, r3, #31
 800bc62:	1acb      	subs	r3, r1, r3
 800bc64:	b299      	uxth	r1, r3
 800bc66:	4b5d      	ldr	r3, [pc, #372]	; (800bddc <mixTable+0x4c0>)
 800bc68:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	4b5c      	ldr	r3, [pc, #368]	; (800bde0 <mixTable+0x4c4>)
 800bc70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc74:	fb00 f303 	mul.w	r3, r0, r3
 800bc78:	485a      	ldr	r0, [pc, #360]	; (800bde4 <mixTable+0x4c8>)
 800bc7a:	fb80 4003 	smull	r4, r0, r0, r3
 800bc7e:	1100      	asrs	r0, r0, #4
 800bc80:	17db      	asrs	r3, r3, #31
 800bc82:	1ac3      	subs	r3, r0, r3
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	440b      	add	r3, r1
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	4413      	add	r3, r2
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	b21a      	sxth	r2, r3
 800bc90:	4b55      	ldr	r3, [pc, #340]	; (800bde8 <mixTable+0x4cc>)
 800bc92:	805a      	strh	r2, [r3, #2]
 800bc94:	e031      	b.n	800bcfa <mixTable+0x3de>
            } else {
                servo[0] += (int32_t)cfg.servoConf[0].rate * angle[PITCH] / 50;
 800bc96:	4b54      	ldr	r3, [pc, #336]	; (800bde8 <mixTable+0x4cc>)
 800bc98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	4b4f      	ldr	r3, [pc, #316]	; (800bddc <mixTable+0x4c0>)
 800bca0:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bca4:	4619      	mov	r1, r3
 800bca6:	4b4e      	ldr	r3, [pc, #312]	; (800bde0 <mixTable+0x4c4>)
 800bca8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcac:	fb01 f303 	mul.w	r3, r1, r3
 800bcb0:	494c      	ldr	r1, [pc, #304]	; (800bde4 <mixTable+0x4c8>)
 800bcb2:	fb81 0103 	smull	r0, r1, r1, r3
 800bcb6:	1109      	asrs	r1, r1, #4
 800bcb8:	17db      	asrs	r3, r3, #31
 800bcba:	1acb      	subs	r3, r1, r3
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	4413      	add	r3, r2
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	b21a      	sxth	r2, r3
 800bcc4:	4b48      	ldr	r3, [pc, #288]	; (800bde8 <mixTable+0x4cc>)
 800bcc6:	801a      	strh	r2, [r3, #0]
                servo[1] += (int32_t)cfg.servoConf[1].rate * angle[ROLL]  / 50;
 800bcc8:	4b47      	ldr	r3, [pc, #284]	; (800bde8 <mixTable+0x4cc>)
 800bcca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	4b42      	ldr	r3, [pc, #264]	; (800bddc <mixTable+0x4c0>)
 800bcd2:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	4b41      	ldr	r3, [pc, #260]	; (800bde0 <mixTable+0x4c4>)
 800bcda:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcde:	fb01 f303 	mul.w	r3, r1, r3
 800bce2:	4940      	ldr	r1, [pc, #256]	; (800bde4 <mixTable+0x4c8>)
 800bce4:	fb81 0103 	smull	r0, r1, r1, r3
 800bce8:	1109      	asrs	r1, r1, #4
 800bcea:	17db      	asrs	r3, r3, #31
 800bcec:	1acb      	subs	r3, r1, r3
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	4413      	add	r3, r2
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	b21a      	sxth	r2, r3
 800bcf6:	4b3c      	ldr	r3, [pc, #240]	; (800bde8 <mixTable+0x4cc>)
 800bcf8:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    // constrain servos
    for (i = 0; i < MAX_SERVOS; i++)
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	60bb      	str	r3, [r7, #8]
 800bcfe:	e026      	b.n	800bd4e <mixTable+0x432>
        servo[i] = constrain(servo[i], cfg.servoConf[i].min, cfg.servoConf[i].max); // limit the values
 800bd00:	4a39      	ldr	r2, [pc, #228]	; (800bde8 <mixTable+0x4cc>)
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	4934      	ldr	r1, [pc, #208]	; (800bddc <mixTable+0x4c0>)
 800bd0c:	68ba      	ldr	r2, [r7, #8]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	005b      	lsls	r3, r3, #1
 800bd16:	440b      	add	r3, r1
 800bd18:	33b8      	adds	r3, #184	; 0xb8
 800bd1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd1e:	461c      	mov	r4, r3
 800bd20:	492e      	ldr	r1, [pc, #184]	; (800bddc <mixTable+0x4c0>)
 800bd22:	68ba      	ldr	r2, [r7, #8]
 800bd24:	4613      	mov	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	4413      	add	r3, r2
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	440b      	add	r3, r1
 800bd2e:	33ba      	adds	r3, #186	; 0xba
 800bd30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd34:	461a      	mov	r2, r3
 800bd36:	4621      	mov	r1, r4
 800bd38:	f7f7 ff2a 	bl	8003b90 <constrain>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	b219      	sxth	r1, r3
 800bd40:	4a29      	ldr	r2, [pc, #164]	; (800bde8 <mixTable+0x4cc>)
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	60bb      	str	r3, [r7, #8]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2b07      	cmp	r3, #7
 800bd52:	d9d5      	bls.n	800bd00 <mixTable+0x3e4>

    // forward AUX1-4 to servo outputs (not constrained)
    if (cfg.gimbal_flags & GIMBAL_FORWARDAUX) {
 800bd54:	4b21      	ldr	r3, [pc, #132]	; (800bddc <mixTable+0x4c0>)
 800bd56:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bd5a:	f003 0304 	and.w	r3, r3, #4
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d01c      	beq.n	800bd9c <mixTable+0x480>
        int offset = core.numServos - 4;
 800bd62:	4b23      	ldr	r3, [pc, #140]	; (800bdf0 <mixTable+0x4d4>)
 800bd64:	7d9b      	ldrb	r3, [r3, #22]
 800bd66:	3b04      	subs	r3, #4
 800bd68:	607b      	str	r3, [r7, #4]
        // offset servos based off number already used in mixer types
        // airplane and servo_tilt together can't be used
        // calculate offset by taking 4 from core.numServos
        for (i = 0; i < 4; i++)
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60bb      	str	r3, [r7, #8]
 800bd6e:	e012      	b.n	800bd96 <mixTable+0x47a>
        	actPwmWriteServo(i + offset, rcData[AUX1 + i]);
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	4413      	add	r3, r2
 800bd7a:	b2da      	uxtb	r2, r3
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	491c      	ldr	r1, [pc, #112]	; (800bdf4 <mixTable+0x4d8>)
 800bd82:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	4619      	mov	r1, r3
 800bd8a:	4610      	mov	r0, r2
 800bd8c:	f7f6 f8ea 	bl	8001f64 <actPwmWriteServo>
        for (i = 0; i < 4; i++)
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	3301      	adds	r3, #1
 800bd94:	60bb      	str	r3, [r7, #8]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	2b03      	cmp	r3, #3
 800bd9a:	d9e9      	bls.n	800bd70 <mixTable+0x454>
    }

    maxMotor = motor[0];
 800bd9c:	4b16      	ldr	r3, [pc, #88]	; (800bdf8 <mixTable+0x4dc>)
 800bd9e:	881b      	ldrh	r3, [r3, #0]
 800bda0:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bda2:	2301      	movs	r3, #1
 800bda4:	60bb      	str	r3, [r7, #8]
 800bda6:	e00f      	b.n	800bdc8 <mixTable+0x4ac>
        if (motor[i] > maxMotor)
 800bda8:	4a13      	ldr	r2, [pc, #76]	; (800bdf8 <mixTable+0x4dc>)
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bdb0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	da04      	bge.n	800bdc2 <mixTable+0x4a6>
            maxMotor = motor[i];
 800bdb8:	4a0f      	ldr	r2, [pc, #60]	; (800bdf8 <mixTable+0x4dc>)
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdc0:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	60bb      	str	r3, [r7, #8]
 800bdc8:	4b0c      	ldr	r3, [pc, #48]	; (800bdfc <mixTable+0x4e0>)
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d3e9      	bcc.n	800bda8 <mixTable+0x48c>
    for (i = 0; i < numberMotor; i++) {
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	60bb      	str	r3, [r7, #8]
 800bdd8:	e0e8      	b.n	800bfac <mixTable+0x690>
 800bdda:	bf00      	nop
 800bddc:	20000d18 	.word	0x20000d18
 800bde0:	20001430 	.word	0x20001430
 800bde4:	51eb851f 	.word	0x51eb851f
 800bde8:	20000040 	.word	0x20000040
 800bdec:	200016c8 	.word	0x200016c8
 800bdf0:	200006f4 	.word	0x200006f4
 800bdf4:	20001660 	.word	0x20001660
 800bdf8:	20001490 	.word	0x20001490
 800bdfc:	2000148c 	.word	0x2000148c
        if (maxMotor > mcfg.maxthrottle && !f.FIXED_WING)     // this is a way to still have good gyro corrections if at least one motor reaches its max.
 800be00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800be04:	4a6f      	ldr	r2, [pc, #444]	; (800bfc4 <mixTable+0x6a8>)
 800be06:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800be0a:	4293      	cmp	r3, r2
 800be0c:	dd15      	ble.n	800be3a <mixTable+0x51e>
 800be0e:	4b6e      	ldr	r3, [pc, #440]	; (800bfc8 <mixTable+0x6ac>)
 800be10:	7c1b      	ldrb	r3, [r3, #16]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d111      	bne.n	800be3a <mixTable+0x51e>
            motor[i] -= maxMotor - mcfg.maxthrottle;
 800be16:	4a6d      	ldr	r2, [pc, #436]	; (800bfcc <mixTable+0x6b0>)
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800be1e:	b29a      	uxth	r2, r3
 800be20:	4b68      	ldr	r3, [pc, #416]	; (800bfc4 <mixTable+0x6a8>)
 800be22:	f8b3 1142 	ldrh.w	r1, [r3, #322]	; 0x142
 800be26:	89fb      	ldrh	r3, [r7, #14]
 800be28:	1acb      	subs	r3, r1, r3
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	4413      	add	r3, r2
 800be2e:	b29b      	uxth	r3, r3
 800be30:	b219      	sxth	r1, r3
 800be32:	4a66      	ldr	r2, [pc, #408]	; (800bfcc <mixTable+0x6b0>)
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        if (feature(FEATURE_3D)) {
 800be3a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800be3e:	f7fb f827 	bl	8006e90 <feature>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d060      	beq.n	800bf0a <mixTable+0x5ee>
            if ((rcData[THROTTLE]) > mcfg.midrc) {
 800be48:	4b61      	ldr	r3, [pc, #388]	; (800bfd0 <mixTable+0x6b4>)
 800be4a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800be4e:	461a      	mov	r2, r3
 800be50:	4b5c      	ldr	r3, [pc, #368]	; (800bfc4 <mixTable+0x6a8>)
 800be52:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800be56:	429a      	cmp	r2, r3
 800be58:	dd2b      	ble.n	800beb2 <mixTable+0x596>
                motor[i] = constrain(motor[i], mcfg.deadband3d_high, mcfg.maxthrottle);
 800be5a:	4a5c      	ldr	r2, [pc, #368]	; (800bfcc <mixTable+0x6b0>)
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800be62:	4618      	mov	r0, r3
 800be64:	4b57      	ldr	r3, [pc, #348]	; (800bfc4 <mixTable+0x6a8>)
 800be66:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800be6a:	4619      	mov	r1, r3
 800be6c:	4b55      	ldr	r3, [pc, #340]	; (800bfc4 <mixTable+0x6a8>)
 800be6e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800be72:	461a      	mov	r2, r3
 800be74:	f7f7 fe8c 	bl	8003b90 <constrain>
 800be78:	4603      	mov	r3, r0
 800be7a:	b219      	sxth	r1, r3
 800be7c:	4a53      	ldr	r2, [pc, #332]	; (800bfcc <mixTable+0x6b0>)
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800be84:	4b4f      	ldr	r3, [pc, #316]	; (800bfc4 <mixTable+0x6a8>)
 800be86:	795b      	ldrb	r3, [r3, #5]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d17d      	bne.n	800bf88 <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].min, cfg.servoConf[5].max);
 800be8c:	4b51      	ldr	r3, [pc, #324]	; (800bfd4 <mixTable+0x6b8>)
 800be8e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800be92:	4618      	mov	r0, r3
 800be94:	4b50      	ldr	r3, [pc, #320]	; (800bfd8 <mixTable+0x6bc>)
 800be96:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800be9a:	4619      	mov	r1, r3
 800be9c:	4b4e      	ldr	r3, [pc, #312]	; (800bfd8 <mixTable+0x6bc>)
 800be9e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800bea2:	461a      	mov	r2, r3
 800bea4:	f7f7 fe74 	bl	8003b90 <constrain>
 800bea8:	4603      	mov	r3, r0
 800beaa:	b21a      	sxth	r2, r3
 800beac:	4b49      	ldr	r3, [pc, #292]	; (800bfd4 <mixTable+0x6b8>)
 800beae:	815a      	strh	r2, [r3, #10]
 800beb0:	e06a      	b.n	800bf88 <mixTable+0x66c>
                }
            } else {
                motor[i] = constrain(motor[i], mcfg.mincommand, mcfg.deadband3d_low);
 800beb2:	4a46      	ldr	r2, [pc, #280]	; (800bfcc <mixTable+0x6b0>)
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800beba:	4618      	mov	r0, r3
 800bebc:	4b41      	ldr	r3, [pc, #260]	; (800bfc4 <mixTable+0x6a8>)
 800bebe:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bec2:	4619      	mov	r1, r3
 800bec4:	4b3f      	ldr	r3, [pc, #252]	; (800bfc4 <mixTable+0x6a8>)
 800bec6:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 800beca:	461a      	mov	r2, r3
 800becc:	f7f7 fe60 	bl	8003b90 <constrain>
 800bed0:	4603      	mov	r3, r0
 800bed2:	b219      	sxth	r1, r3
 800bed4:	4a3d      	ldr	r2, [pc, #244]	; (800bfcc <mixTable+0x6b0>)
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800bedc:	4b39      	ldr	r3, [pc, #228]	; (800bfc4 <mixTable+0x6a8>)
 800bede:	795b      	ldrb	r3, [r3, #5]
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d151      	bne.n	800bf88 <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].max, cfg.servoConf[5].min);
 800bee4:	4b3b      	ldr	r3, [pc, #236]	; (800bfd4 <mixTable+0x6b8>)
 800bee6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800beea:	4618      	mov	r0, r3
 800beec:	4b3a      	ldr	r3, [pc, #232]	; (800bfd8 <mixTable+0x6bc>)
 800beee:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800bef2:	4619      	mov	r1, r3
 800bef4:	4b38      	ldr	r3, [pc, #224]	; (800bfd8 <mixTable+0x6bc>)
 800bef6:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800befa:	461a      	mov	r2, r3
 800befc:	f7f7 fe48 	bl	8003b90 <constrain>
 800bf00:	4603      	mov	r3, r0
 800bf02:	b21a      	sxth	r2, r3
 800bf04:	4b33      	ldr	r3, [pc, #204]	; (800bfd4 <mixTable+0x6b8>)
 800bf06:	815a      	strh	r2, [r3, #10]
 800bf08:	e03e      	b.n	800bf88 <mixTable+0x66c>
                }
            }
        } else {
            motor[i] = constrain(motor[i], mcfg.minthrottle, mcfg.maxthrottle);
 800bf0a:	4a30      	ldr	r2, [pc, #192]	; (800bfcc <mixTable+0x6b0>)
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bf12:	4618      	mov	r0, r3
 800bf14:	4b2b      	ldr	r3, [pc, #172]	; (800bfc4 <mixTable+0x6a8>)
 800bf16:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	4b29      	ldr	r3, [pc, #164]	; (800bfc4 <mixTable+0x6a8>)
 800bf1e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800bf22:	461a      	mov	r2, r3
 800bf24:	f7f7 fe34 	bl	8003b90 <constrain>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	b219      	sxth	r1, r3
 800bf2c:	4a27      	ldr	r2, [pc, #156]	; (800bfcc <mixTable+0x6b0>)
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if ((rcData[THROTTLE]) < mcfg.mincheck) {
 800bf34:	4b26      	ldr	r3, [pc, #152]	; (800bfd0 <mixTable+0x6b4>)
 800bf36:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	4b21      	ldr	r3, [pc, #132]	; (800bfc4 <mixTable+0x6a8>)
 800bf3e:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800bf42:	429a      	cmp	r2, r3
 800bf44:	da1d      	bge.n	800bf82 <mixTable+0x666>
                if (!feature(FEATURE_MOTOR_STOP))
 800bf46:	2010      	movs	r0, #16
 800bf48:	f7fa ffa2 	bl	8006e90 <feature>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	f083 0301 	eor.w	r3, r3, #1
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d008      	beq.n	800bf6a <mixTable+0x64e>
                    motor[i] = mcfg.minthrottle;
 800bf58:	4b1a      	ldr	r3, [pc, #104]	; (800bfc4 <mixTable+0x6a8>)
 800bf5a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800bf5e:	b219      	sxth	r1, r3
 800bf60:	4a1a      	ldr	r2, [pc, #104]	; (800bfcc <mixTable+0x6b0>)
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800bf68:	e00e      	b.n	800bf88 <mixTable+0x66c>
                else {
                    motor[i] = mcfg.mincommand;
 800bf6a:	4b16      	ldr	r3, [pc, #88]	; (800bfc4 <mixTable+0x6a8>)
 800bf6c:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bf70:	b219      	sxth	r1, r3
 800bf72:	4a16      	ldr	r2, [pc, #88]	; (800bfcc <mixTable+0x6b0>)
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    f.MOTORS_STOPPED = 1;
 800bf7a:	4b13      	ldr	r3, [pc, #76]	; (800bfc8 <mixTable+0x6ac>)
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	745a      	strb	r2, [r3, #17]
 800bf80:	e002      	b.n	800bf88 <mixTable+0x66c>
                }
            } else {
                f.MOTORS_STOPPED = 0;
 800bf82:	4b11      	ldr	r3, [pc, #68]	; (800bfc8 <mixTable+0x6ac>)
 800bf84:	2200      	movs	r2, #0
 800bf86:	745a      	strb	r2, [r3, #17]
            }
        }
        if (!f.ARMED) {
 800bf88:	4b0f      	ldr	r3, [pc, #60]	; (800bfc8 <mixTable+0x6ac>)
 800bf8a:	785b      	ldrb	r3, [r3, #1]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10a      	bne.n	800bfa6 <mixTable+0x68a>
            motor[i] = motor_disarmed[i];
 800bf90:	4a12      	ldr	r2, [pc, #72]	; (800bfdc <mixTable+0x6c0>)
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800bf98:	4a0c      	ldr	r2, [pc, #48]	; (800bfcc <mixTable+0x6b0>)
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            f.MOTORS_STOPPED = 1;
 800bfa0:	4b09      	ldr	r3, [pc, #36]	; (800bfc8 <mixTable+0x6ac>)
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	745a      	strb	r2, [r3, #17]
    for (i = 0; i < numberMotor; i++) {
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	60bb      	str	r3, [r7, #8]
 800bfac:	4b0c      	ldr	r3, [pc, #48]	; (800bfe0 <mixTable+0x6c4>)
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	f4ff af23 	bcc.w	800be00 <mixTable+0x4e4>
        }
    }
}
 800bfba:	bf00      	nop
 800bfbc:	bf00      	nop
 800bfbe:	3714      	adds	r7, #20
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd90      	pop	{r4, r7, pc}
 800bfc4:	200007ac 	.word	0x200007ac
 800bfc8:	20001628 	.word	0x20001628
 800bfcc:	20001490 	.word	0x20001490
 800bfd0:	20001660 	.word	0x20001660
 800bfd4:	20000040 	.word	0x20000040
 800bfd8:	20000d18 	.word	0x20000d18
 800bfdc:	200014a8 	.word	0x200014a8
 800bfe0:	2000148c 	.word	0x2000148c

0800bfe4 <blinkLED>:
// Time of automatic disarm when "Don't spin the motors when armed" is enabled.
static uint32_t disarmTime = 0;


void blinkLED(uint8_t num, uint8_t wait, uint8_t repeat)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	4603      	mov	r3, r0
 800bfec:	71fb      	strb	r3, [r7, #7]
 800bfee:	460b      	mov	r3, r1
 800bff0:	71bb      	strb	r3, [r7, #6]
 800bff2:	4613      	mov	r3, r2
 800bff4:	717b      	strb	r3, [r7, #5]
    uint8_t i, r;

    for (r = 0; r < repeat; r++) {
 800bff6:	2300      	movs	r3, #0
 800bff8:	73bb      	strb	r3, [r7, #14]
 800bffa:	e020      	b.n	800c03e <blinkLED+0x5a>
        for (i = 0; i < num; i++) {
 800bffc:	2300      	movs	r3, #0
 800bffe:	73fb      	strb	r3, [r7, #15]
 800c000:	e013      	b.n	800c02a <blinkLED+0x46>
            actLed0Toggle();            // switch LEDPIN state
 800c002:	f7f6 f83f 	bl	8002084 <actLed0Toggle>
            actBuzzerAction(PIF_ID_BUZZER, ON);
 800c006:	2101      	movs	r1, #1
 800c008:	f44f 7098 	mov.w	r0, #304	; 0x130
 800c00c:	f7f6 f87c 	bl	8002108 <actBuzzerAction>
            pif_Delay1ms(wait);
 800c010:	79bb      	ldrb	r3, [r7, #6]
 800c012:	b29b      	uxth	r3, r3
 800c014:	4618      	mov	r0, r3
 800c016:	f005 fcb9 	bl	801198c <pif_Delay1ms>
            actBuzzerAction(PIF_ID_BUZZER, OFF);
 800c01a:	2100      	movs	r1, #0
 800c01c:	f44f 7098 	mov.w	r0, #304	; 0x130
 800c020:	f7f6 f872 	bl	8002108 <actBuzzerAction>
        for (i = 0; i < num; i++) {
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	3301      	adds	r3, #1
 800c028:	73fb      	strb	r3, [r7, #15]
 800c02a:	7bfa      	ldrb	r2, [r7, #15]
 800c02c:	79fb      	ldrb	r3, [r7, #7]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d3e7      	bcc.n	800c002 <blinkLED+0x1e>
        }
        pif_Delay1ms(60);
 800c032:	203c      	movs	r0, #60	; 0x3c
 800c034:	f005 fcaa 	bl	801198c <pif_Delay1ms>
    for (r = 0; r < repeat; r++) {
 800c038:	7bbb      	ldrb	r3, [r7, #14]
 800c03a:	3301      	adds	r3, #1
 800c03c:	73bb      	strb	r3, [r7, #14]
 800c03e:	7bba      	ldrb	r2, [r7, #14]
 800c040:	797b      	ldrb	r3, [r7, #5]
 800c042:	429a      	cmp	r2, r3
 800c044:	d3da      	bcc.n	800bffc <blinkLED+0x18>
    }
}
 800c046:	bf00      	nop
 800c048:	bf00      	nop
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <annexCode>:

void annexCode(void)
{
 800c050:	b590      	push	{r4, r7, lr}
 800c052:	b08b      	sub	sp, #44	; 0x2c
 800c054:	af00      	add	r7, sp, #0
    int32_t tmp, tmp2;
    int32_t axis, prop1, prop2;
    static uint16_t MaxBrkpoint = 300; // Max angle of APA

    if (!f.FIXED_WING) { // Baseflight original dynamic PID adjustemnt
 800c056:	4b98      	ldr	r3, [pc, #608]	; (800c2b8 <annexCode+0x268>)
 800c058:	7c1b      	ldrb	r3, [r3, #16]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d12e      	bne.n	800c0bc <annexCode+0x6c>
        // PITCH & ROLL only dynamic PID adjustemnt,  depending on throttle value
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c05e:	4b97      	ldr	r3, [pc, #604]	; (800c2bc <annexCode+0x26c>)
 800c060:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c064:	461a      	mov	r2, r3
 800c066:	4b96      	ldr	r3, [pc, #600]	; (800c2c0 <annexCode+0x270>)
 800c068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c06a:	429a      	cmp	r2, r3
 800c06c:	da02      	bge.n	800c074 <annexCode+0x24>
            prop2 = 100;
 800c06e:	2364      	movs	r3, #100	; 0x64
 800c070:	61bb      	str	r3, [r7, #24]
 800c072:	e07b      	b.n	800c16c <annexCode+0x11c>
        } else {
            if (rcData[THROTTLE] < 2000) {
 800c074:	4b91      	ldr	r3, [pc, #580]	; (800c2bc <annexCode+0x26c>)
 800c076:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c07a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c07e:	da16      	bge.n	800c0ae <annexCode+0x5e>
                prop2 = 100 - (uint16_t)cfg.dynThrPID * (rcData[THROTTLE] - cfg.tpa_breakpoint) / (2000 - cfg.tpa_breakpoint);
 800c080:	4b8f      	ldr	r3, [pc, #572]	; (800c2c0 <annexCode+0x270>)
 800c082:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c086:	461a      	mov	r2, r3
 800c088:	4b8c      	ldr	r3, [pc, #560]	; (800c2bc <annexCode+0x26c>)
 800c08a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c08e:	4619      	mov	r1, r3
 800c090:	4b8b      	ldr	r3, [pc, #556]	; (800c2c0 <annexCode+0x270>)
 800c092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c094:	1acb      	subs	r3, r1, r3
 800c096:	fb03 f202 	mul.w	r2, r3, r2
 800c09a:	4b89      	ldr	r3, [pc, #548]	; (800c2c0 <annexCode+0x270>)
 800c09c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c09e:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800c0a2:	fb92 f3f3 	sdiv	r3, r2, r3
 800c0a6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c0aa:	61bb      	str	r3, [r7, #24]
 800c0ac:	e05e      	b.n	800c16c <annexCode+0x11c>
            } else {
                prop2 = 100 - cfg.dynThrPID;
 800c0ae:	4b84      	ldr	r3, [pc, #528]	; (800c2c0 <annexCode+0x270>)
 800c0b0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0b4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c0b8:	61bb      	str	r3, [r7, #24]
 800c0ba:	e057      	b.n	800c16c <annexCode+0x11c>
            }
        }
    } else {
        // Throttle & Angle combined PID Attenuation
        // Will dampen the PID's in High speeds dive on Fixed Wing Only
        prop2 = 128; // prop2 was 100, is 128 now
 800c0bc:	2380      	movs	r3, #128	; 0x80
 800c0be:	61bb      	str	r3, [r7, #24]
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c0c0:	4b7e      	ldr	r3, [pc, #504]	; (800c2bc <annexCode+0x26c>)
 800c0c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	4b7d      	ldr	r3, [pc, #500]	; (800c2c0 <annexCode+0x270>)
 800c0ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	da02      	bge.n	800c0d6 <annexCode+0x86>
            prop2 = 128; // Higher prop2 for Fixed wing Same as used in MWii
 800c0d0:	2380      	movs	r3, #128	; 0x80
 800c0d2:	61bb      	str	r3, [r7, #24]
 800c0d4:	e028      	b.n	800c128 <annexCode+0xd8>
        } else {
            if (rcCommand[THROTTLE] > cfg.dynThrPID) { // Using rcCommand() to include Tpa even in Gps modes.
 800c0d6:	4b7b      	ldr	r3, [pc, #492]	; (800c2c4 <annexCode+0x274>)
 800c0d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0dc:	461a      	mov	r2, r3
 800c0de:	4b78      	ldr	r3, [pc, #480]	; (800c2c0 <annexCode+0x270>)
 800c0e0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	dd1f      	ble.n	800c128 <annexCode+0xd8>
                if (rcCommand[THROTTLE] < 2000) {
 800c0e8:	4b76      	ldr	r3, [pc, #472]	; (800c2c4 <annexCode+0x274>)
 800c0ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c0f2:	da12      	bge.n	800c11a <annexCode+0xca>
                    prop2 -=  ((uint16_t)cfg.dynThrPID * (rcCommand[THROTTLE] - cfg.dynThrPID) >> 9);
 800c0f4:	4b72      	ldr	r3, [pc, #456]	; (800c2c0 <annexCode+0x270>)
 800c0f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	4b71      	ldr	r3, [pc, #452]	; (800c2c4 <annexCode+0x274>)
 800c0fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c102:	4619      	mov	r1, r3
 800c104:	4b6e      	ldr	r3, [pc, #440]	; (800c2c0 <annexCode+0x270>)
 800c106:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c10a:	1acb      	subs	r3, r1, r3
 800c10c:	fb02 f303 	mul.w	r3, r2, r3
 800c110:	125b      	asrs	r3, r3, #9
 800c112:	69ba      	ldr	r2, [r7, #24]
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	61bb      	str	r3, [r7, #24]
 800c118:	e006      	b.n	800c128 <annexCode+0xd8>
                } else {
                    prop2 -=  cfg.dynThrPID;
 800c11a:	4b69      	ldr	r3, [pc, #420]	; (800c2c0 <annexCode+0x270>)
 800c11c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c120:	461a      	mov	r2, r3
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	1a9b      	subs	r3, r3, r2
 800c126:	61bb      	str	r3, [r7, #24]
                }
            }
        }
        // APA dynamic PID adjustemnt, depending on Angle of attack
        if (angle[1] > 20)
 800c128:	4b67      	ldr	r3, [pc, #412]	; (800c2c8 <annexCode+0x278>)
 800c12a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c12e:	2b14      	cmp	r3, #20
 800c130:	dd12      	ble.n	800c158 <annexCode+0x108>
            prop2 -= ((uint16_t)cfg.dynThrPID * (min(angle[1], MaxBrkpoint)) >> 8);
 800c132:	4b63      	ldr	r3, [pc, #396]	; (800c2c0 <annexCode+0x270>)
 800c134:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c138:	461a      	mov	r2, r3
 800c13a:	4b64      	ldr	r3, [pc, #400]	; (800c2cc <annexCode+0x27c>)
 800c13c:	881b      	ldrh	r3, [r3, #0]
 800c13e:	4619      	mov	r1, r3
 800c140:	4b61      	ldr	r3, [pc, #388]	; (800c2c8 <annexCode+0x278>)
 800c142:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c146:	428b      	cmp	r3, r1
 800c148:	bfa8      	it	ge
 800c14a:	460b      	movge	r3, r1
 800c14c:	fb02 f303 	mul.w	r3, r2, r3
 800c150:	121b      	asrs	r3, r3, #8
 800c152:	69ba      	ldr	r2, [r7, #24]
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	61bb      	str	r3, [r7, #24]
        prop2 = max((128 - cfg.dynThrPID), prop2);
 800c158:	4b59      	ldr	r3, [pc, #356]	; (800c2c0 <annexCode+0x270>)
 800c15a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c15e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800c162:	69ba      	ldr	r2, [r7, #24]
 800c164:	4293      	cmp	r3, r2
 800c166:	bfb8      	it	lt
 800c168:	4613      	movlt	r3, r2
 800c16a:	61bb      	str	r3, [r7, #24]
    }


    for (axis = 0; axis < 3; axis++) {
 800c16c:	2300      	movs	r3, #0
 800c16e:	623b      	str	r3, [r7, #32]
 800c170:	e131      	b.n	800c3d6 <annexCode+0x386>
        tmp = min(abs(rcData[axis] - mcfg.midrc), 500);
 800c172:	4a52      	ldr	r2, [pc, #328]	; (800c2bc <annexCode+0x26c>)
 800c174:	6a3b      	ldr	r3, [r7, #32]
 800c176:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c17a:	461a      	mov	r2, r3
 800c17c:	4b54      	ldr	r3, [pc, #336]	; (800c2d0 <annexCode+0x280>)
 800c17e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c182:	1ad3      	subs	r3, r2, r3
 800c184:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800c188:	dd18      	ble.n	800c1bc <annexCode+0x16c>
 800c18a:	4a4c      	ldr	r2, [pc, #304]	; (800c2bc <annexCode+0x26c>)
 800c18c:	6a3b      	ldr	r3, [r7, #32]
 800c18e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c192:	461a      	mov	r2, r3
 800c194:	4b4e      	ldr	r3, [pc, #312]	; (800c2d0 <annexCode+0x280>)
 800c196:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c1a0:	da0c      	bge.n	800c1bc <annexCode+0x16c>
 800c1a2:	4a46      	ldr	r2, [pc, #280]	; (800c2bc <annexCode+0x26c>)
 800c1a4:	6a3b      	ldr	r3, [r7, #32]
 800c1a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	4b48      	ldr	r3, [pc, #288]	; (800c2d0 <annexCode+0x280>)
 800c1ae:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	bfb8      	it	lt
 800c1b8:	425b      	neglt	r3, r3
 800c1ba:	e001      	b.n	800c1c0 <annexCode+0x170>
 800c1bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c1c0:	627b      	str	r3, [r7, #36]	; 0x24
        if (axis != 2) {        // ROLL & PITCH
 800c1c2:	6a3b      	ldr	r3, [r7, #32]
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	d063      	beq.n	800c290 <annexCode+0x240>
            if (cfg.deadband) {
 800c1c8:	4b3d      	ldr	r3, [pc, #244]	; (800c2c0 <annexCode+0x270>)
 800c1ca:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d010      	beq.n	800c1f4 <annexCode+0x1a4>
                if (tmp > cfg.deadband) {
 800c1d2:	4b3b      	ldr	r3, [pc, #236]	; (800c2c0 <annexCode+0x270>)
 800c1d4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c1d8:	461a      	mov	r2, r3
 800c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	dd07      	ble.n	800c1f0 <annexCode+0x1a0>
                    tmp -= cfg.deadband;
 800c1e0:	4b37      	ldr	r3, [pc, #220]	; (800c2c0 <annexCode+0x270>)
 800c1e2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ea:	1a9b      	subs	r3, r3, r2
 800c1ec:	627b      	str	r3, [r7, #36]	; 0x24
 800c1ee:	e001      	b.n	800c1f4 <annexCode+0x1a4>
                } else {
                    tmp = 0;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            tmp2 = tmp / 100;
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f6:	4a37      	ldr	r2, [pc, #220]	; (800c2d4 <annexCode+0x284>)
 800c1f8:	fb82 1203 	smull	r1, r2, r2, r3
 800c1fc:	1152      	asrs	r2, r2, #5
 800c1fe:	17db      	asrs	r3, r3, #31
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	617b      	str	r3, [r7, #20]
            rcCommand[axis] = lookupPitchRollRC[tmp2] + (tmp - tmp2 * 100) * (lookupPitchRollRC[tmp2 + 1] - lookupPitchRollRC[tmp2]) / 100;
 800c204:	4a34      	ldr	r2, [pc, #208]	; (800c2d8 <annexCode+0x288>)
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c214:	fb03 f101 	mul.w	r1, r3, r1
 800c218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21a:	440b      	add	r3, r1
 800c21c:	6979      	ldr	r1, [r7, #20]
 800c21e:	3101      	adds	r1, #1
 800c220:	482d      	ldr	r0, [pc, #180]	; (800c2d8 <annexCode+0x288>)
 800c222:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c226:	460c      	mov	r4, r1
 800c228:	482b      	ldr	r0, [pc, #172]	; (800c2d8 <annexCode+0x288>)
 800c22a:	6979      	ldr	r1, [r7, #20]
 800c22c:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c230:	1a61      	subs	r1, r4, r1
 800c232:	fb01 f303 	mul.w	r3, r1, r3
 800c236:	4927      	ldr	r1, [pc, #156]	; (800c2d4 <annexCode+0x284>)
 800c238:	fb81 0103 	smull	r0, r1, r1, r3
 800c23c:	1149      	asrs	r1, r1, #5
 800c23e:	17db      	asrs	r3, r3, #31
 800c240:	1acb      	subs	r3, r1, r3
 800c242:	b29b      	uxth	r3, r3
 800c244:	4413      	add	r3, r2
 800c246:	b29b      	uxth	r3, r3
 800c248:	b219      	sxth	r1, r3
 800c24a:	4a1e      	ldr	r2, [pc, #120]	; (800c2c4 <annexCode+0x274>)
 800c24c:	6a3b      	ldr	r3, [r7, #32]
 800c24e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.rollPitchRate[axis] * tmp / 500;
 800c252:	4a1b      	ldr	r2, [pc, #108]	; (800c2c0 <annexCode+0x270>)
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	4413      	add	r3, r2
 800c258:	3323      	adds	r3, #35	; 0x23
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	461a      	mov	r2, r3
 800c25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c260:	fb02 f303 	mul.w	r3, r2, r3
 800c264:	4a1d      	ldr	r2, [pc, #116]	; (800c2dc <annexCode+0x28c>)
 800c266:	fb82 1203 	smull	r1, r2, r2, r3
 800c26a:	1152      	asrs	r2, r2, #5
 800c26c:	17db      	asrs	r3, r3, #31
 800c26e:	1a9b      	subs	r3, r3, r2
 800c270:	3364      	adds	r3, #100	; 0x64
 800c272:	61fb      	str	r3, [r7, #28]
            prop1 = (uint16_t)prop1 * prop2 / 100;
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	b29b      	uxth	r3, r3
 800c278:	461a      	mov	r2, r3
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	fb02 f303 	mul.w	r3, r2, r3
 800c280:	4a14      	ldr	r2, [pc, #80]	; (800c2d4 <annexCode+0x284>)
 800c282:	fb82 1203 	smull	r1, r2, r2, r3
 800c286:	1152      	asrs	r2, r2, #5
 800c288:	17db      	asrs	r3, r3, #31
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	61fb      	str	r3, [r7, #28]
 800c28e:	e04a      	b.n	800c326 <annexCode+0x2d6>
        } else {                // YAW
            if (cfg.yawdeadband) {
 800c290:	4b0b      	ldr	r3, [pc, #44]	; (800c2c0 <annexCode+0x270>)
 800c292:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d024      	beq.n	800c2e4 <annexCode+0x294>
                if (tmp > cfg.yawdeadband) {
 800c29a:	4b09      	ldr	r3, [pc, #36]	; (800c2c0 <annexCode+0x270>)
 800c29c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	dd1b      	ble.n	800c2e0 <annexCode+0x290>
                    tmp -= cfg.yawdeadband;
 800c2a8:	4b05      	ldr	r3, [pc, #20]	; (800c2c0 <annexCode+0x270>)
 800c2aa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b2:	1a9b      	subs	r3, r3, r2
 800c2b4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2b6:	e015      	b.n	800c2e4 <annexCode+0x294>
 800c2b8:	20001628 	.word	0x20001628
 800c2bc:	20001660 	.word	0x20001660
 800c2c0:	20000d18 	.word	0x20000d18
 800c2c4:	20001684 	.word	0x20001684
 800c2c8:	20001430 	.word	0x20001430
 800c2cc:	20000056 	.word	0x20000056
 800c2d0:	200007ac 	.word	0x200007ac
 800c2d4:	51eb851f 	.word	0x51eb851f
 800c2d8:	2000168c 	.word	0x2000168c
 800c2dc:	10624dd3 	.word	0x10624dd3
                } else {
                    tmp = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
            rcCommand[axis] = tmp * -mcfg.yaw_control_direction;
 800c2e4:	4ba0      	ldr	r3, [pc, #640]	; (800c568 <annexCode+0x518>)
 800c2e6:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800c2ea:	425b      	negs	r3, r3
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	fb12 f303 	smulbb	r3, r2, r3
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	b219      	sxth	r1, r3
 800c2fa:	4a9c      	ldr	r2, [pc, #624]	; (800c56c <annexCode+0x51c>)
 800c2fc:	6a3b      	ldr	r3, [r7, #32]
 800c2fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.yawRate * abs(tmp) / 500;
 800c302:	4b9b      	ldr	r3, [pc, #620]	; (800c570 <annexCode+0x520>)
 800c304:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c308:	461a      	mov	r2, r3
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	bfb8      	it	lt
 800c310:	425b      	neglt	r3, r3
 800c312:	fb02 f303 	mul.w	r3, r2, r3
 800c316:	4a97      	ldr	r2, [pc, #604]	; (800c574 <annexCode+0x524>)
 800c318:	fb82 1203 	smull	r1, r2, r2, r3
 800c31c:	1152      	asrs	r2, r2, #5
 800c31e:	17db      	asrs	r3, r3, #31
 800c320:	1a9b      	subs	r3, r3, r2
 800c322:	3364      	adds	r3, #100	; 0x64
 800c324:	61fb      	str	r3, [r7, #28]
        }
        dynP8[axis] = (uint16_t)cfg.P8[axis] * prop1 / 100;
 800c326:	4a92      	ldr	r2, [pc, #584]	; (800c570 <annexCode+0x520>)
 800c328:	6a3b      	ldr	r3, [r7, #32]
 800c32a:	4413      	add	r3, r2
 800c32c:	3301      	adds	r3, #1
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	461a      	mov	r2, r3
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	fb02 f303 	mul.w	r3, r2, r3
 800c338:	4a8f      	ldr	r2, [pc, #572]	; (800c578 <annexCode+0x528>)
 800c33a:	fb82 1203 	smull	r1, r2, r2, r3
 800c33e:	1152      	asrs	r2, r2, #5
 800c340:	17db      	asrs	r3, r3, #31
 800c342:	1ad3      	subs	r3, r2, r3
 800c344:	b2d9      	uxtb	r1, r3
 800c346:	4a8d      	ldr	r2, [pc, #564]	; (800c57c <annexCode+0x52c>)
 800c348:	6a3b      	ldr	r3, [r7, #32]
 800c34a:	4413      	add	r3, r2
 800c34c:	460a      	mov	r2, r1
 800c34e:	701a      	strb	r2, [r3, #0]
        dynI8[axis] = (uint16_t)cfg.I8[axis] * prop1 / 100;
 800c350:	4a87      	ldr	r2, [pc, #540]	; (800c570 <annexCode+0x520>)
 800c352:	6a3b      	ldr	r3, [r7, #32]
 800c354:	4413      	add	r3, r2
 800c356:	330b      	adds	r3, #11
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	461a      	mov	r2, r3
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	fb02 f303 	mul.w	r3, r2, r3
 800c362:	4a85      	ldr	r2, [pc, #532]	; (800c578 <annexCode+0x528>)
 800c364:	fb82 1203 	smull	r1, r2, r2, r3
 800c368:	1152      	asrs	r2, r2, #5
 800c36a:	17db      	asrs	r3, r3, #31
 800c36c:	1ad3      	subs	r3, r2, r3
 800c36e:	b2d9      	uxtb	r1, r3
 800c370:	4a83      	ldr	r2, [pc, #524]	; (800c580 <annexCode+0x530>)
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	4413      	add	r3, r2
 800c376:	460a      	mov	r2, r1
 800c378:	701a      	strb	r2, [r3, #0]
        dynD8[axis] = (uint16_t)cfg.D8[axis] * prop1 / 100;
 800c37a:	4a7d      	ldr	r2, [pc, #500]	; (800c570 <annexCode+0x520>)
 800c37c:	6a3b      	ldr	r3, [r7, #32]
 800c37e:	4413      	add	r3, r2
 800c380:	3315      	adds	r3, #21
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	461a      	mov	r2, r3
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	fb02 f303 	mul.w	r3, r2, r3
 800c38c:	4a7a      	ldr	r2, [pc, #488]	; (800c578 <annexCode+0x528>)
 800c38e:	fb82 1203 	smull	r1, r2, r2, r3
 800c392:	1152      	asrs	r2, r2, #5
 800c394:	17db      	asrs	r3, r3, #31
 800c396:	1ad3      	subs	r3, r2, r3
 800c398:	b2d9      	uxtb	r1, r3
 800c39a:	4a7a      	ldr	r2, [pc, #488]	; (800c584 <annexCode+0x534>)
 800c39c:	6a3b      	ldr	r3, [r7, #32]
 800c39e:	4413      	add	r3, r2
 800c3a0:	460a      	mov	r2, r1
 800c3a2:	701a      	strb	r2, [r3, #0]
        if (rcData[axis] < mcfg.midrc)
 800c3a4:	4a78      	ldr	r2, [pc, #480]	; (800c588 <annexCode+0x538>)
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	4b6e      	ldr	r3, [pc, #440]	; (800c568 <annexCode+0x518>)
 800c3b0:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	da0b      	bge.n	800c3d0 <annexCode+0x380>
            rcCommand[axis] = -rcCommand[axis];
 800c3b8:	4a6c      	ldr	r2, [pc, #432]	; (800c56c <annexCode+0x51c>)
 800c3ba:	6a3b      	ldr	r3, [r7, #32]
 800c3bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	425b      	negs	r3, r3
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	b219      	sxth	r1, r3
 800c3c8:	4a68      	ldr	r2, [pc, #416]	; (800c56c <annexCode+0x51c>)
 800c3ca:	6a3b      	ldr	r3, [r7, #32]
 800c3cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800c3d0:	6a3b      	ldr	r3, [r7, #32]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	623b      	str	r3, [r7, #32]
 800c3d6:	6a3b      	ldr	r3, [r7, #32]
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	f77f aeca 	ble.w	800c172 <annexCode+0x122>
    }

    tmp = constrain(rcData[THROTTLE], mcfg.mincheck, 2000);
 800c3de:	4b6a      	ldr	r3, [pc, #424]	; (800c588 <annexCode+0x538>)
 800c3e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	4b60      	ldr	r3, [pc, #384]	; (800c568 <annexCode+0x518>)
 800c3e8:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c3ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	f7f7 fbcd 	bl	8003b90 <constrain>
 800c3f6:	6278      	str	r0, [r7, #36]	; 0x24
    tmp = (uint32_t)(tmp - mcfg.mincheck) * 1000 / (2000 - mcfg.mincheck);       // [MINCHECK;2000] -> [0;1000]
 800c3f8:	4b5b      	ldr	r3, [pc, #364]	; (800c568 <annexCode+0x518>)
 800c3fa:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c3fe:	461a      	mov	r2, r3
 800c400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c402:	1a9b      	subs	r3, r3, r2
 800c404:	461a      	mov	r2, r3
 800c406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c40a:	fb02 f303 	mul.w	r3, r2, r3
 800c40e:	4a56      	ldr	r2, [pc, #344]	; (800c568 <annexCode+0x518>)
 800c410:	f8b2 219a 	ldrh.w	r2, [r2, #410]	; 0x19a
 800c414:	f5c2 62fa 	rsb	r2, r2, #2000	; 0x7d0
 800c418:	fbb3 f3f2 	udiv	r3, r3, r2
 800c41c:	627b      	str	r3, [r7, #36]	; 0x24
    tmp2 = tmp / 100;
 800c41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c420:	4a55      	ldr	r2, [pc, #340]	; (800c578 <annexCode+0x528>)
 800c422:	fb82 1203 	smull	r1, r2, r2, r3
 800c426:	1152      	asrs	r2, r2, #5
 800c428:	17db      	asrs	r3, r3, #31
 800c42a:	1ad3      	subs	r3, r2, r3
 800c42c:	617b      	str	r3, [r7, #20]
    rcCommand[THROTTLE] = lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1] - lookupThrottleRC[tmp2]) / 100;    // [0;1000] -> expo -> [MINTHROTTLE;MAXTHROTTLE]
 800c42e:	4a57      	ldr	r2, [pc, #348]	; (800c58c <annexCode+0x53c>)
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c436:	b29a      	uxth	r2, r3
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c43e:	fb03 f101 	mul.w	r1, r3, r1
 800c442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c444:	440b      	add	r3, r1
 800c446:	6979      	ldr	r1, [r7, #20]
 800c448:	3101      	adds	r1, #1
 800c44a:	4850      	ldr	r0, [pc, #320]	; (800c58c <annexCode+0x53c>)
 800c44c:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c450:	460c      	mov	r4, r1
 800c452:	484e      	ldr	r0, [pc, #312]	; (800c58c <annexCode+0x53c>)
 800c454:	6979      	ldr	r1, [r7, #20]
 800c456:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c45a:	1a61      	subs	r1, r4, r1
 800c45c:	fb01 f303 	mul.w	r3, r1, r3
 800c460:	4945      	ldr	r1, [pc, #276]	; (800c578 <annexCode+0x528>)
 800c462:	fb81 0103 	smull	r0, r1, r1, r3
 800c466:	1149      	asrs	r1, r1, #5
 800c468:	17db      	asrs	r3, r3, #31
 800c46a:	1acb      	subs	r3, r1, r3
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	4413      	add	r3, r2
 800c470:	b29b      	uxth	r3, r3
 800c472:	b21a      	sxth	r2, r3
 800c474:	4b3d      	ldr	r3, [pc, #244]	; (800c56c <annexCode+0x51c>)
 800c476:	80da      	strh	r2, [r3, #6]

    if (f.HEADFREE_MODE) {
 800c478:	4b45      	ldr	r3, [pc, #276]	; (800c590 <annexCode+0x540>)
 800c47a:	7a5b      	ldrb	r3, [r3, #9]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d06b      	beq.n	800c558 <annexCode+0x508>
        float radDiff = (heading - headFreeModeHold) * M_PI / 180.0f;
 800c480:	4b44      	ldr	r3, [pc, #272]	; (800c594 <annexCode+0x544>)
 800c482:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c486:	461a      	mov	r2, r3
 800c488:	4b43      	ldr	r3, [pc, #268]	; (800c598 <annexCode+0x548>)
 800c48a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	4618      	mov	r0, r3
 800c492:	f7f4 f805 	bl	80004a0 <__aeabi_i2d>
 800c496:	a332      	add	r3, pc, #200	; (adr r3, 800c560 <annexCode+0x510>)
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	f7f4 f86a 	bl	8000574 <__aeabi_dmul>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	f04f 0200 	mov.w	r2, #0
 800c4ac:	4b3b      	ldr	r3, [pc, #236]	; (800c59c <annexCode+0x54c>)
 800c4ae:	f7f4 f98b 	bl	80007c8 <__aeabi_ddiv>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	f7f4 fb3d 	bl	8000b38 <__aeabi_d2f>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	613b      	str	r3, [r7, #16]
        float cosDiff = cosf(radDiff);
 800c4c2:	ed97 0a04 	vldr	s0, [r7, #16]
 800c4c6:	f017 f9bf 	bl	8023848 <cosf>
 800c4ca:	ed87 0a03 	vstr	s0, [r7, #12]
        float sinDiff = sinf(radDiff);
 800c4ce:	ed97 0a04 	vldr	s0, [r7, #16]
 800c4d2:	f017 fa3d 	bl	8023950 <sinf>
 800c4d6:	ed87 0a02 	vstr	s0, [r7, #8]
        int16_t rcCommand_PITCH = rcCommand[PITCH] * cosDiff + rcCommand[ROLL] * sinDiff;
 800c4da:	4b24      	ldr	r3, [pc, #144]	; (800c56c <annexCode+0x51c>)
 800c4dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c4e0:	ee07 3a90 	vmov	s15, r3
 800c4e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c4e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4f0:	4b1e      	ldr	r3, [pc, #120]	; (800c56c <annexCode+0x51c>)
 800c4f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4f6:	ee07 3a90 	vmov	s15, r3
 800c4fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c4fe:	edd7 7a02 	vldr	s15, [r7, #8]
 800c502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c50a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c50e:	ee17 3a90 	vmov	r3, s15
 800c512:	80fb      	strh	r3, [r7, #6]
        rcCommand[ROLL] = rcCommand[ROLL] * cosDiff - rcCommand[PITCH] * sinDiff;
 800c514:	4b15      	ldr	r3, [pc, #84]	; (800c56c <annexCode+0x51c>)
 800c516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c51a:	ee07 3a90 	vmov	s15, r3
 800c51e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c522:	edd7 7a03 	vldr	s15, [r7, #12]
 800c526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c52a:	4b10      	ldr	r3, [pc, #64]	; (800c56c <annexCode+0x51c>)
 800c52c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c530:	ee07 3a90 	vmov	s15, r3
 800c534:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c538:	edd7 7a02 	vldr	s15, [r7, #8]
 800c53c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c540:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c548:	ee17 3a90 	vmov	r3, s15
 800c54c:	b21a      	sxth	r2, r3
 800c54e:	4b07      	ldr	r3, [pc, #28]	; (800c56c <annexCode+0x51c>)
 800c550:	801a      	strh	r2, [r3, #0]
        rcCommand[PITCH] = rcCommand_PITCH;
 800c552:	4a06      	ldr	r2, [pc, #24]	; (800c56c <annexCode+0x51c>)
 800c554:	88fb      	ldrh	r3, [r7, #6]
 800c556:	8053      	strh	r3, [r2, #2]
    }
}
 800c558:	bf00      	nop
 800c55a:	372c      	adds	r7, #44	; 0x2c
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd90      	pop	{r4, r7, pc}
 800c560:	54442d18 	.word	0x54442d18
 800c564:	400921fb 	.word	0x400921fb
 800c568:	200007ac 	.word	0x200007ac
 800c56c:	20001684 	.word	0x20001684
 800c570:	20000d18 	.word	0x20000d18
 800c574:	10624dd3 	.word	0x10624dd3
 800c578:	51eb851f 	.word	0x51eb851f
 800c57c:	200016bc 	.word	0x200016bc
 800c580:	200016c0 	.word	0x200016c0
 800c584:	200016c4 	.word	0x200016c4
 800c588:	20001660 	.word	0x20001660
 800c58c:	2000169c 	.word	0x2000169c
 800c590:	20001628 	.word	0x20001628
 800c594:	200019ba 	.word	0x200019ba
 800c598:	2000164a 	.word	0x2000164a
 800c59c:	40668000 	.word	0x40668000

0800c5a0 <taskLedState>:

uint16_t taskLedState(PifTask *p_task)
{
 800c5a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c5a4:	b082      	sub	sp, #8
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
    static int64_t mAhdrawnRaw = 0;
    static int32_t vbatCycleTime = 0;

    (void)p_task;

    if (feature(FEATURE_VBAT)) {
 800c5aa:	2002      	movs	r0, #2
 800c5ac:	f7fa fc70 	bl	8006e90 <feature>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 80bb 	beq.w	800c72e <taskLedState+0x18e>
        vbatCycleTime += cycleTime;
 800c5b8:	4b90      	ldr	r3, [pc, #576]	; (800c7fc <taskLedState+0x25c>)
 800c5ba:	881b      	ldrh	r3, [r3, #0]
 800c5bc:	461a      	mov	r2, r3
 800c5be:	4b90      	ldr	r3, [pc, #576]	; (800c800 <taskLedState+0x260>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	4a8e      	ldr	r2, [pc, #568]	; (800c800 <taskLedState+0x260>)
 800c5c6:	6013      	str	r3, [r2, #0]
        if (!(++vbatTimer % VBATFREQ)) {
 800c5c8:	4b8e      	ldr	r3, [pc, #568]	; (800c804 <taskLedState+0x264>)
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	b2da      	uxtb	r2, r3
 800c5d0:	4b8c      	ldr	r3, [pc, #560]	; (800c804 <taskLedState+0x264>)
 800c5d2:	701a      	strb	r2, [r3, #0]
 800c5d4:	4b8b      	ldr	r3, [pc, #556]	; (800c804 <taskLedState+0x264>)
 800c5d6:	781a      	ldrb	r2, [r3, #0]
 800c5d8:	4b8b      	ldr	r3, [pc, #556]	; (800c808 <taskLedState+0x268>)
 800c5da:	fba3 1302 	umull	r1, r3, r3, r2
 800c5de:	0899      	lsrs	r1, r3, #2
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	440b      	add	r3, r1
 800c5e6:	005b      	lsls	r3, r3, #1
 800c5e8:	1ad3      	subs	r3, r2, r3
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f040 808b 	bne.w	800c708 <taskLedState+0x168>
            vbatRaw -= vbatRaw / 8;
 800c5f2:	4b86      	ldr	r3, [pc, #536]	; (800c80c <taskLedState+0x26c>)
 800c5f4:	ed93 7a00 	vldr	s14, [r3]
 800c5f8:	4b84      	ldr	r3, [pc, #528]	; (800c80c <taskLedState+0x26c>)
 800c5fa:	edd3 6a00 	vldr	s13, [r3]
 800c5fe:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 800c602:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c60a:	4b80      	ldr	r3, [pc, #512]	; (800c80c <taskLedState+0x26c>)
 800c60c:	edc3 7a00 	vstr	s15, [r3]
            vbatRaw += actGetBatteryVoltage() * mcfg.vbatscale;
 800c610:	f7f4 fde6 	bl	80011e0 <actGetBatteryVoltage>
 800c614:	eeb0 7a40 	vmov.f32	s14, s0
 800c618:	4b7d      	ldr	r3, [pc, #500]	; (800c810 <taskLedState+0x270>)
 800c61a:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800c61e:	ee07 3a90 	vmov	s15, r3
 800c622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c626:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c62a:	4b78      	ldr	r3, [pc, #480]	; (800c80c <taskLedState+0x26c>)
 800c62c:	edd3 7a00 	vldr	s15, [r3]
 800c630:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c634:	4b75      	ldr	r3, [pc, #468]	; (800c80c <taskLedState+0x26c>)
 800c636:	edc3 7a00 	vstr	s15, [r3]
            vbat = vbatRaw / 8;
 800c63a:	4b74      	ldr	r3, [pc, #464]	; (800c80c <taskLedState+0x26c>)
 800c63c:	ed93 7a00 	vldr	s14, [r3]
 800c640:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800c644:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c64c:	ee17 3a90 	vmov	r3, s15
 800c650:	b29a      	uxth	r2, r3
 800c652:	4b70      	ldr	r3, [pc, #448]	; (800c814 <taskLedState+0x274>)
 800c654:	801a      	strh	r2, [r3, #0]

            if (mcfg.power_adc_channel > 0) {
 800c656:	4b6e      	ldr	r3, [pc, #440]	; (800c810 <taskLedState+0x270>)
 800c658:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d053      	beq.n	800c708 <taskLedState+0x168>
                amperageRaw -= amperageRaw / 8;
 800c660:	4b6d      	ldr	r3, [pc, #436]	; (800c818 <taskLedState+0x278>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	da00      	bge.n	800c66a <taskLedState+0xca>
 800c668:	3307      	adds	r3, #7
 800c66a:	10db      	asrs	r3, r3, #3
 800c66c:	425b      	negs	r3, r3
 800c66e:	461a      	mov	r2, r3
 800c670:	4b69      	ldr	r3, [pc, #420]	; (800c818 <taskLedState+0x278>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4413      	add	r3, r2
 800c676:	4a68      	ldr	r2, [pc, #416]	; (800c818 <taskLedState+0x278>)
 800c678:	6013      	str	r3, [r2, #0]
                amperageRaw += (actGetBatteryCurrent() - mcfg.currentoffset) * 1000 / (int32_t)mcfg.currentscale; // current in 0.01A steps
 800c67a:	f7f4 fdcf 	bl	800121c <actGetBatteryCurrent>
 800c67e:	4603      	mov	r3, r0
 800c680:	4a63      	ldr	r2, [pc, #396]	; (800c810 <taskLedState+0x270>)
 800c682:	f8b2 217a 	ldrh.w	r2, [r2, #378]	; 0x17a
 800c686:	1a9b      	subs	r3, r3, r2
 800c688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c68c:	fb02 f303 	mul.w	r3, r2, r3
 800c690:	4a5f      	ldr	r2, [pc, #380]	; (800c810 <taskLedState+0x270>)
 800c692:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
 800c696:	fbb3 f3f2 	udiv	r3, r3, r2
 800c69a:	4a5f      	ldr	r2, [pc, #380]	; (800c818 <taskLedState+0x278>)
 800c69c:	6812      	ldr	r2, [r2, #0]
 800c69e:	4413      	add	r3, r2
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	4b5d      	ldr	r3, [pc, #372]	; (800c818 <taskLedState+0x278>)
 800c6a4:	601a      	str	r2, [r3, #0]
                amperage = amperageRaw / 8;
 800c6a6:	4b5c      	ldr	r3, [pc, #368]	; (800c818 <taskLedState+0x278>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	da00      	bge.n	800c6b0 <taskLedState+0x110>
 800c6ae:	3307      	adds	r3, #7
 800c6b0:	10db      	asrs	r3, r3, #3
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4b59      	ldr	r3, [pc, #356]	; (800c81c <taskLedState+0x27c>)
 800c6b6:	601a      	str	r2, [r3, #0]
                mAhdrawnRaw += (amperage * vbatCycleTime) / 1000;
 800c6b8:	4b58      	ldr	r3, [pc, #352]	; (800c81c <taskLedState+0x27c>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a50      	ldr	r2, [pc, #320]	; (800c800 <taskLedState+0x260>)
 800c6be:	6812      	ldr	r2, [r2, #0]
 800c6c0:	fb02 f303 	mul.w	r3, r2, r3
 800c6c4:	4a56      	ldr	r2, [pc, #344]	; (800c820 <taskLedState+0x280>)
 800c6c6:	fb82 1203 	smull	r1, r2, r2, r3
 800c6ca:	1192      	asrs	r2, r2, #6
 800c6cc:	17db      	asrs	r3, r3, #31
 800c6ce:	1ad3      	subs	r3, r2, r3
 800c6d0:	17da      	asrs	r2, r3, #31
 800c6d2:	461c      	mov	r4, r3
 800c6d4:	4615      	mov	r5, r2
 800c6d6:	4b53      	ldr	r3, [pc, #332]	; (800c824 <taskLedState+0x284>)
 800c6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6dc:	eb14 0802 	adds.w	r8, r4, r2
 800c6e0:	eb45 0903 	adc.w	r9, r5, r3
 800c6e4:	4b4f      	ldr	r3, [pc, #316]	; (800c824 <taskLedState+0x284>)
 800c6e6:	e9c3 8900 	strd	r8, r9, [r3]
                mAhdrawn = mAhdrawnRaw / (3600 * 100);
 800c6ea:	4b4e      	ldr	r3, [pc, #312]	; (800c824 <taskLedState+0x284>)
 800c6ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6f0:	4a4d      	ldr	r2, [pc, #308]	; (800c828 <taskLedState+0x288>)
 800c6f2:	f04f 0300 	mov.w	r3, #0
 800c6f6:	f7f4 fb7d 	bl	8000df4 <__aeabi_ldivmod>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	4b4b      	ldr	r3, [pc, #300]	; (800c82c <taskLedState+0x28c>)
 800c700:	601a      	str	r2, [r3, #0]
                vbatCycleTime = 0;
 800c702:	4b3f      	ldr	r3, [pc, #252]	; (800c800 <taskLedState+0x260>)
 800c704:	2200      	movs	r2, #0
 800c706:	601a      	str	r2, [r3, #0]
            }

        }
        // Buzzers for low and critical battery levels
        if (vbat <= batteryCriticalVoltage)
 800c708:	4b42      	ldr	r3, [pc, #264]	; (800c814 <taskLedState+0x274>)
 800c70a:	881a      	ldrh	r2, [r3, #0]
 800c70c:	4b48      	ldr	r3, [pc, #288]	; (800c830 <taskLedState+0x290>)
 800c70e:	881b      	ldrh	r3, [r3, #0]
 800c710:	429a      	cmp	r2, r3
 800c712:	d803      	bhi.n	800c71c <taskLedState+0x17c>
            buzzer(BUZZER_BAT_CRIT_LOW);     // Critically low battery
 800c714:	2001      	movs	r0, #1
 800c716:	f7f7 fbcb 	bl	8003eb0 <buzzer>
 800c71a:	e008      	b.n	800c72e <taskLedState+0x18e>
        else if (vbat <= batteryWarningVoltage)
 800c71c:	4b3d      	ldr	r3, [pc, #244]	; (800c814 <taskLedState+0x274>)
 800c71e:	881a      	ldrh	r2, [r3, #0]
 800c720:	4b44      	ldr	r3, [pc, #272]	; (800c834 <taskLedState+0x294>)
 800c722:	881b      	ldrh	r3, [r3, #0]
 800c724:	429a      	cmp	r2, r3
 800c726:	d802      	bhi.n	800c72e <taskLedState+0x18e>
            buzzer(BUZZER_BAT_LOW);     // low battery
 800c728:	2002      	movs	r0, #2
 800c72a:	f7f7 fbc1 	bl	8003eb0 <buzzer>
    }
    // update buzzer handler
    buzzerUpdate();
 800c72e:	f7f7 fcab 	bl	8004088 <buzzerUpdate>
    if (!cliMode && feature(FEATURE_TELEMETRY)) {
        handleTelemetry();
    }
#endif

    serialCom();
 800c732:	f004 fed1 	bl	80114d8 <serialCom>

    // Read out gyro temperature. can use it for something somewhere. maybe get MCU temperature instead? lots of fun possibilities.
    if (sensor_set.gyro.temperature)
 800c736:	4b40      	ldr	r3, [pc, #256]	; (800c838 <taskLedState+0x298>)
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <taskLedState+0x1a6>
        sensor_set.gyro.temperature(&telemTemperature1);
 800c73e:	4b3e      	ldr	r3, [pc, #248]	; (800c838 <taskLedState+0x298>)
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	483e      	ldr	r0, [pc, #248]	; (800c83c <taskLedState+0x29c>)
 800c744:	4798      	blx	r3
    else {
        // TODO MCU temp
    }

    if ((calibratingA > 0 && sensors(SENSOR_ACC)) || (calibratingG > 0)) {      // Calibration phasis
 800c746:	4b3e      	ldr	r3, [pc, #248]	; (800c840 <taskLedState+0x2a0>)
 800c748:	881b      	ldrh	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d005      	beq.n	800c75a <taskLedState+0x1ba>
 800c74e:	2002      	movs	r0, #2
 800c750:	f7fa fb56 	bl	8006e00 <sensors>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d103      	bne.n	800c762 <taskLedState+0x1c2>
 800c75a:	4b3a      	ldr	r3, [pc, #232]	; (800c844 <taskLedState+0x2a4>)
 800c75c:	881b      	ldrh	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d002      	beq.n	800c768 <taskLedState+0x1c8>
        actLed0Toggle();
 800c762:	f7f5 fc8f 	bl	8002084 <actLed0Toggle>
 800c766:	e00d      	b.n	800c784 <taskLedState+0x1e4>
    } else {
        if (f.ACC_CALIBRATED)
 800c768:	4b37      	ldr	r3, [pc, #220]	; (800c848 <taskLedState+0x2a8>)
 800c76a:	789b      	ldrb	r3, [r3, #2]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <taskLedState+0x1d6>
            actLed0State(OFF);
 800c770:	2000      	movs	r0, #0
 800c772:	f7f5 fc71 	bl	8002058 <actLed0State>
        if (f.ARMED)
 800c776:	4b34      	ldr	r3, [pc, #208]	; (800c848 <taskLedState+0x2a8>)
 800c778:	785b      	ldrb	r3, [r3, #1]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d002      	beq.n	800c784 <taskLedState+0x1e4>
            actLed0State(ON);
 800c77e:	2001      	movs	r0, #1
 800c780:	f7f5 fc6a 	bl	8002058 <actLed0State>
        ledringState();
    }
#endif

    static uint8_t AccCalibLed = 0;
    if (AccCalibLed) AccCalibLed--;
 800c784:	4b31      	ldr	r3, [pc, #196]	; (800c84c <taskLedState+0x2ac>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d006      	beq.n	800c79a <taskLedState+0x1fa>
 800c78c:	4b2f      	ldr	r3, [pc, #188]	; (800c84c <taskLedState+0x2ac>)
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	3b01      	subs	r3, #1
 800c792:	b2da      	uxtb	r2, r3
 800c794:	4b2d      	ldr	r3, [pc, #180]	; (800c84c <taskLedState+0x2ac>)
 800c796:	701a      	strb	r2, [r3, #0]
 800c798:	e00f      	b.n	800c7ba <taskLedState+0x21a>
    else {
        if (!f.SMALL_ANGLE) {
 800c79a:	4b2b      	ldr	r3, [pc, #172]	; (800c848 <taskLedState+0x2a8>)
 800c79c:	7b5b      	ldrb	r3, [r3, #13]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d105      	bne.n	800c7ae <taskLedState+0x20e>
            f.ACC_CALIBRATED = 0; // the multi uses ACC and is not calibrated or is too much inclinated
 800c7a2:	4b29      	ldr	r3, [pc, #164]	; (800c848 <taskLedState+0x2a8>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	709a      	strb	r2, [r3, #2]
            actLed0Toggle();
 800c7a8:	f7f5 fc6c 	bl	8002084 <actLed0Toggle>
 800c7ac:	e002      	b.n	800c7b4 <taskLedState+0x214>
        } else {
            f.ACC_CALIBRATED = 1;
 800c7ae:	4b26      	ldr	r3, [pc, #152]	; (800c848 <taskLedState+0x2a8>)
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	709a      	strb	r2, [r3, #2]
        }
        AccCalibLed = 10 - 1;       // 50ms * 10 = 500ms
 800c7b4:	4b25      	ldr	r3, [pc, #148]	; (800c84c <taskLedState+0x2ac>)
 800c7b6:	2209      	movs	r2, #9
 800c7b8:	701a      	strb	r2, [r3, #0]
    }

    if (sensors(SENSOR_GPS)) {
 800c7ba:	2020      	movs	r0, #32
 800c7bc:	f7fa fb20 	bl	8006e00 <sensors>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d013      	beq.n	800c7ee <taskLedState+0x24e>
        static uint8_t GPSLEDTime = 0;
        if (GPSLEDTime) GPSLEDTime--;
 800c7c6:	4b22      	ldr	r3, [pc, #136]	; (800c850 <taskLedState+0x2b0>)
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d006      	beq.n	800c7dc <taskLedState+0x23c>
 800c7ce:	4b20      	ldr	r3, [pc, #128]	; (800c850 <taskLedState+0x2b0>)
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	b2da      	uxtb	r2, r3
 800c7d6:	4b1e      	ldr	r3, [pc, #120]	; (800c850 <taskLedState+0x2b0>)
 800c7d8:	701a      	strb	r2, [r3, #0]
 800c7da:	e008      	b.n	800c7ee <taskLedState+0x24e>
        else {
            if (GPS_numSat >= 5) actLed1Toggle();
 800c7dc:	4b1d      	ldr	r3, [pc, #116]	; (800c854 <taskLedState+0x2b4>)
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	2b04      	cmp	r3, #4
 800c7e2:	d901      	bls.n	800c7e8 <taskLedState+0x248>
 800c7e4:	f7f5 fc7a 	bl	80020dc <actLed1Toggle>
            GPSLEDTime = 3 - 1;     // 50ms * 3 = 150ms
 800c7e8:	4b19      	ldr	r3, [pc, #100]	; (800c850 <taskLedState+0x2b0>)
 800c7ea:	2202      	movs	r2, #2
 800c7ec:	701a      	strb	r2, [r3, #0]
        }
    }
    return 0;
 800c7ee:	2300      	movs	r3, #0
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c7fa:	bf00      	nop
 800c7fc:	20001648 	.word	0x20001648
 800c800:	2000184c 	.word	0x2000184c
 800c804:	20001850 	.word	0x20001850
 800c808:	aaaaaaab 	.word	0xaaaaaaab
 800c80c:	20001854 	.word	0x20001854
 800c810:	200007ac 	.word	0x200007ac
 800c814:	2000164c 	.word	0x2000164c
 800c818:	20001858 	.word	0x20001858
 800c81c:	20001650 	.word	0x20001650
 800c820:	10624dd3 	.word	0x10624dd3
 800c824:	20001860 	.word	0x20001860
 800c828:	00057e40 	.word	0x00057e40
 800c82c:	20001654 	.word	0x20001654
 800c830:	200017cc 	.word	0x200017cc
 800c834:	200017ca 	.word	0x200017ca
 800c838:	200019c8 	.word	0x200019c8
 800c83c:	20001658 	.word	0x20001658
 800c840:	200019b4 	.word	0x200019b4
 800c844:	200019b8 	.word	0x200019b8
 800c848:	20001628 	.word	0x20001628
 800c84c:	20001868 	.word	0x20001868
 800c850:	20001869 	.word	0x20001869
 800c854:	2000170c 	.word	0x2000170c

0800c858 <pwmReadRawRC>:

uint16_t pwmReadRawRC(uint8_t chan)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	4603      	mov	r3, r0
 800c860:	71fb      	strb	r3, [r7, #7]
    return actPwmRead(mcfg.rcmap[chan]);
 800c862:	79fb      	ldrb	r3, [r7, #7]
 800c864:	4a05      	ldr	r2, [pc, #20]	; (800c87c <pwmReadRawRC+0x24>)
 800c866:	4413      	add	r3, r2
 800c868:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7f5 fb87 	bl	8001f80 <actPwmRead>
 800c872:	4603      	mov	r3, r0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3708      	adds	r7, #8
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	200007ac 	.word	0x200007ac

0800c880 <computeRC>:

void computeRC(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
    uint16_t capture;
    int i, chan;

    if (feature(FEATURE_SERIALRX)) {
 800c886:	2008      	movs	r0, #8
 800c888:	f7fa fb02 	bl	8006e90 <feature>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d019      	beq.n	800c8c6 <computeRC+0x46>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c892:	2300      	movs	r3, #0
 800c894:	607b      	str	r3, [r7, #4]
 800c896:	e00e      	b.n	800c8b6 <computeRC+0x36>
            rcData[chan] = rcReadRawFunc(chan);
 800c898:	4b41      	ldr	r3, [pc, #260]	; (800c9a0 <computeRC+0x120>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	b2d2      	uxtb	r2, r2
 800c8a0:	4610      	mov	r0, r2
 800c8a2:	4798      	blx	r3
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	b219      	sxth	r1, r3
 800c8a8:	4a3e      	ldr	r2, [pc, #248]	; (800c9a4 <computeRC+0x124>)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	607b      	str	r3, [r7, #4]
 800c8b6:	4b3c      	ldr	r3, [pc, #240]	; (800c9a8 <computeRC+0x128>)
 800c8b8:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c8bc:	461a      	mov	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	dbe9      	blt.n	800c898 <computeRC+0x18>
                rcData[chan] += rcDataAverage[chan][i];
            rcData[chan] /= 4;
        }
        rcAverageIndex++;
    }
}
 800c8c4:	e068      	b.n	800c998 <computeRC+0x118>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	607b      	str	r3, [r7, #4]
 800c8ca:	e059      	b.n	800c980 <computeRC+0x100>
            capture = rcReadRawFunc(chan);
 800c8cc:	4b34      	ldr	r3, [pc, #208]	; (800c9a0 <computeRC+0x120>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	b2d2      	uxtb	r2, r2
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	4798      	blx	r3
 800c8d8:	4603      	mov	r3, r0
 800c8da:	81fb      	strh	r3, [r7, #14]
            if (capture < PULSE_MIN || capture > PULSE_MAX)
 800c8dc:	89fb      	ldrh	r3, [r7, #14]
 800c8de:	f240 22ed 	movw	r2, #749	; 0x2ed
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d904      	bls.n	800c8f0 <computeRC+0x70>
 800c8e6:	89fb      	ldrh	r3, [r7, #14]
 800c8e8:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d903      	bls.n	800c8f8 <computeRC+0x78>
                capture = mcfg.midrc;
 800c8f0:	4b2d      	ldr	r3, [pc, #180]	; (800c9a8 <computeRC+0x128>)
 800c8f2:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c8f6:	81fb      	strh	r3, [r7, #14]
            rcDataAverage[chan][rcAverageIndex % 4] = capture;
 800c8f8:	4b2c      	ldr	r3, [pc, #176]	; (800c9ac <computeRC+0x12c>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	425a      	negs	r2, r3
 800c8fe:	f003 0303 	and.w	r3, r3, #3
 800c902:	f002 0203 	and.w	r2, r2, #3
 800c906:	bf58      	it	pl
 800c908:	4253      	negpl	r3, r2
 800c90a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800c90e:	4928      	ldr	r1, [pc, #160]	; (800c9b0 <computeRC+0x130>)
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	0092      	lsls	r2, r2, #2
 800c914:	4413      	add	r3, r2
 800c916:	4602      	mov	r2, r0
 800c918:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            rcData[chan] = 0;
 800c91c:	4a21      	ldr	r2, [pc, #132]	; (800c9a4 <computeRC+0x124>)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2100      	movs	r1, #0
 800c922:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c926:	2300      	movs	r3, #0
 800c928:	60bb      	str	r3, [r7, #8]
 800c92a:	e016      	b.n	800c95a <computeRC+0xda>
                rcData[chan] += rcDataAverage[chan][i];
 800c92c:	4a1d      	ldr	r2, [pc, #116]	; (800c9a4 <computeRC+0x124>)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c934:	b29a      	uxth	r2, r3
 800c936:	481e      	ldr	r0, [pc, #120]	; (800c9b0 <computeRC+0x130>)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	0099      	lsls	r1, r3, #2
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	440b      	add	r3, r1
 800c940:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800c944:	b29b      	uxth	r3, r3
 800c946:	4413      	add	r3, r2
 800c948:	b29b      	uxth	r3, r3
 800c94a:	b219      	sxth	r1, r3
 800c94c:	4a15      	ldr	r2, [pc, #84]	; (800c9a4 <computeRC+0x124>)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	3301      	adds	r3, #1
 800c958:	60bb      	str	r3, [r7, #8]
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	2b03      	cmp	r3, #3
 800c95e:	dde5      	ble.n	800c92c <computeRC+0xac>
            rcData[chan] /= 4;
 800c960:	4a10      	ldr	r2, [pc, #64]	; (800c9a4 <computeRC+0x124>)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	da00      	bge.n	800c96e <computeRC+0xee>
 800c96c:	3303      	adds	r3, #3
 800c96e:	109b      	asrs	r3, r3, #2
 800c970:	b219      	sxth	r1, r3
 800c972:	4a0c      	ldr	r2, [pc, #48]	; (800c9a4 <computeRC+0x124>)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	3301      	adds	r3, #1
 800c97e:	607b      	str	r3, [r7, #4]
 800c980:	4b09      	ldr	r3, [pc, #36]	; (800c9a8 <computeRC+0x128>)
 800c982:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c986:	461a      	mov	r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	4293      	cmp	r3, r2
 800c98c:	db9e      	blt.n	800c8cc <computeRC+0x4c>
        rcAverageIndex++;
 800c98e:	4b07      	ldr	r3, [pc, #28]	; (800c9ac <computeRC+0x12c>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	3301      	adds	r3, #1
 800c994:	4a05      	ldr	r2, [pc, #20]	; (800c9ac <computeRC+0x12c>)
 800c996:	6013      	str	r3, [r2, #0]
}
 800c998:	bf00      	nop
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	200016b8 	.word	0x200016b8
 800c9a4:	20001660 	.word	0x20001660
 800c9a8:	200007ac 	.word	0x200007ac
 800c9ac:	2000186c 	.word	0x2000186c
 800c9b0:	20001870 	.word	0x20001870

0800c9b4 <mwArm>:

static void mwArm(void)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	af00      	add	r7, sp, #0
    if (calibratingG == 0 && f.ACC_CALIBRATED) {
 800c9b8:	4b1b      	ldr	r3, [pc, #108]	; (800ca28 <mwArm+0x74>)
 800c9ba:	881b      	ldrh	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d126      	bne.n	800ca0e <mwArm+0x5a>
 800c9c0:	4b1a      	ldr	r3, [pc, #104]	; (800ca2c <mwArm+0x78>)
 800c9c2:	789b      	ldrb	r3, [r3, #2]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d022      	beq.n	800ca0e <mwArm+0x5a>
        // TODO: feature(FEATURE_FAILSAFE) && failsafeCnt < 2
        // TODO: && ( !feature || ( feature && ( failsafecnt > 2) )
        if (!f.ARMED) {         // arm now!
 800c9c8:	4b18      	ldr	r3, [pc, #96]	; (800ca2c <mwArm+0x78>)
 800c9ca:	785b      	ldrb	r3, [r3, #1]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d128      	bne.n	800ca22 <mwArm+0x6e>
            f.ARMED = 1;
 800c9d0:	4b16      	ldr	r3, [pc, #88]	; (800ca2c <mwArm+0x78>)
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	705a      	strb	r2, [r3, #1]
            headFreeModeHold = heading;
 800c9d6:	4b16      	ldr	r3, [pc, #88]	; (800ca30 <mwArm+0x7c>)
 800c9d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c9dc:	4b15      	ldr	r3, [pc, #84]	; (800ca34 <mwArm+0x80>)
 800c9de:	801a      	strh	r2, [r3, #0]
            // Beep for inform about arming
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5)
 800c9e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c9e4:	f7fa fa54 	bl	8006e90 <feature>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00b      	beq.n	800ca06 <mwArm+0x52>
 800c9ee:	4b0f      	ldr	r3, [pc, #60]	; (800ca2c <mwArm+0x78>)
 800c9f0:	7adb      	ldrb	r3, [r3, #11]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d007      	beq.n	800ca06 <mwArm+0x52>
 800c9f6:	4b10      	ldr	r3, [pc, #64]	; (800ca38 <mwArm+0x84>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	2b04      	cmp	r3, #4
 800c9fc:	d903      	bls.n	800ca06 <mwArm+0x52>
                buzzer(BUZZER_ARMING_GPS_FIX);
 800c9fe:	2007      	movs	r0, #7
 800ca00:	f7f7 fa56 	bl	8003eb0 <buzzer>
        if (!f.ARMED) {         // arm now!
 800ca04:	e00d      	b.n	800ca22 <mwArm+0x6e>
            else
                buzzer(BUZZER_ARMING);
 800ca06:	2006      	movs	r0, #6
 800ca08:	f7f7 fa52 	bl	8003eb0 <buzzer>
        if (!f.ARMED) {         // arm now!
 800ca0c:	e009      	b.n	800ca22 <mwArm+0x6e>
#else
            buzzer(BUZZER_ARMING);
#endif
        }
    } else if (!f.ARMED) {
 800ca0e:	4b07      	ldr	r3, [pc, #28]	; (800ca2c <mwArm+0x78>)
 800ca10:	785b      	ldrb	r3, [r3, #1]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d105      	bne.n	800ca22 <mwArm+0x6e>
        blinkLED(2, 255, 1);
 800ca16:	2201      	movs	r2, #1
 800ca18:	21ff      	movs	r1, #255	; 0xff
 800ca1a:	2002      	movs	r0, #2
 800ca1c:	f7ff fae2 	bl	800bfe4 <blinkLED>
    }
}
 800ca20:	e7ff      	b.n	800ca22 <mwArm+0x6e>
 800ca22:	bf00      	nop
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	200019b8 	.word	0x200019b8
 800ca2c:	20001628 	.word	0x20001628
 800ca30:	200019ba 	.word	0x200019ba
 800ca34:	2000164a 	.word	0x2000164a
 800ca38:	2000170c 	.word	0x2000170c

0800ca3c <mwDisarm>:

static void mwDisarm(void)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	af00      	add	r7, sp, #0
    if (f.ARMED) {
 800ca40:	4b09      	ldr	r3, [pc, #36]	; (800ca68 <mwDisarm+0x2c>)
 800ca42:	785b      	ldrb	r3, [r3, #1]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00c      	beq.n	800ca62 <mwDisarm+0x26>
        f.ARMED = 0;
 800ca48:	4b07      	ldr	r3, [pc, #28]	; (800ca68 <mwDisarm+0x2c>)
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	705a      	strb	r2, [r3, #1]
        // Beep for inform about disarming
        buzzer(BUZZER_DISARMING);
 800ca4e:	2005      	movs	r0, #5
 800ca50:	f7f7 fa2e 	bl	8003eb0 <buzzer>
        // Reset disarm time so that it works next time we arm the board.
        if (disarmTime != 0)
 800ca54:	4b05      	ldr	r3, [pc, #20]	; (800ca6c <mwDisarm+0x30>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <mwDisarm+0x26>
            disarmTime = 0;
 800ca5c:	4b03      	ldr	r3, [pc, #12]	; (800ca6c <mwDisarm+0x30>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]
    }
}
 800ca62:	bf00      	nop
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	20001628 	.word	0x20001628
 800ca6c:	20001830 	.word	0x20001830

0800ca70 <mwVario>:

static void mwVario(void)
{
 800ca70:	b480      	push	{r7}
 800ca72:	af00      	add	r7, sp, #0

}
 800ca74:	bf00      	nop
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
	...

0800ca80 <pidMultiWii>:

static int32_t errorGyroI[3] = { 0, 0, 0 };
static int32_t errorAngleI[2] = { 0, 0 };

static void pidMultiWii(void)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b08e      	sub	sp, #56	; 0x38
 800ca84:	af00      	add	r7, sp, #0
    int axis, prop;
    int32_t error, errorAngle;
    int32_t PTerm, ITerm, PTermACC = 0, ITermACC = 0, PTermGYRO = 0, ITermGYRO = 0, DTerm;
 800ca86:	2300      	movs	r3, #0
 800ca88:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca8e:	2300      	movs	r3, #0
 800ca90:	623b      	str	r3, [r7, #32]
 800ca92:	2300      	movs	r3, #0
 800ca94:	61fb      	str	r3, [r7, #28]
    static int32_t delta1[3], delta2[3];
    int32_t deltaSum;
    int32_t delta;

    // **** PITCH & ROLL & YAW PID ****
    prop = max(abs(rcCommand[PITCH]), abs(rcCommand[ROLL])); // range [0;500]
 800ca96:	4b91      	ldr	r3, [pc, #580]	; (800ccdc <pidMultiWii+0x25c>)
 800ca98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	bfb8      	it	lt
 800caa0:	425b      	neglt	r3, r3
 800caa2:	b29a      	uxth	r2, r3
 800caa4:	4b8d      	ldr	r3, [pc, #564]	; (800ccdc <pidMultiWii+0x25c>)
 800caa6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	bfb8      	it	lt
 800caae:	425b      	neglt	r3, r3
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	4293      	cmp	r3, r2
 800cab4:	bf38      	it	cc
 800cab6:	4613      	movcc	r3, r2
 800cab8:	b29b      	uxth	r3, r3
 800caba:	61bb      	str	r3, [r7, #24]
    for (axis = 0; axis < 3; axis++) {
 800cabc:	2300      	movs	r3, #0
 800cabe:	637b      	str	r3, [r7, #52]	; 0x34
 800cac0:	e189      	b.n	800cdd6 <pidMultiWii+0x356>
        if ((f.ANGLE_MODE || f.HORIZON_MODE) && axis < 2) { // MODE relying on ACC
 800cac2:	4b87      	ldr	r3, [pc, #540]	; (800cce0 <pidMultiWii+0x260>)
 800cac4:	78db      	ldrb	r3, [r3, #3]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d103      	bne.n	800cad2 <pidMultiWii+0x52>
 800caca:	4b85      	ldr	r3, [pc, #532]	; (800cce0 <pidMultiWii+0x260>)
 800cacc:	791b      	ldrb	r3, [r3, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d060      	beq.n	800cb94 <pidMultiWii+0x114>
 800cad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	dc5d      	bgt.n	800cb94 <pidMultiWii+0x114>
            // 50 degrees max inclination
            errorAngle = constrain(2 * rcCommand[axis] + GPS_angle[axis], -((int)mcfg.max_angle_inclination), +mcfg.max_angle_inclination) - angle[axis] + cfg.angleTrim[axis];
 800cad8:	4a80      	ldr	r2, [pc, #512]	; (800ccdc <pidMultiWii+0x25c>)
 800cada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cadc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cae0:	005b      	lsls	r3, r3, #1
 800cae2:	4980      	ldr	r1, [pc, #512]	; (800cce4 <pidMultiWii+0x264>)
 800cae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cae6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800caea:	4413      	add	r3, r2
 800caec:	4a7e      	ldr	r2, [pc, #504]	; (800cce8 <pidMultiWii+0x268>)
 800caee:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800caf2:	4251      	negs	r1, r2
 800caf4:	4a7c      	ldr	r2, [pc, #496]	; (800cce8 <pidMultiWii+0x268>)
 800caf6:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7f7 f848 	bl	8003b90 <constrain>
 800cb00:	4602      	mov	r2, r0
 800cb02:	497a      	ldr	r1, [pc, #488]	; (800ccec <pidMultiWii+0x26c>)
 800cb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb06:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800cb0a:	1ad2      	subs	r2, r2, r3
 800cb0c:	4978      	ldr	r1, [pc, #480]	; (800ccf0 <pidMultiWii+0x270>)
 800cb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb10:	3314      	adds	r3, #20
 800cb12:	005b      	lsls	r3, r3, #1
 800cb14:	440b      	add	r3, r1
 800cb16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	617b      	str	r3, [r7, #20]
            PTermACC = errorAngle * cfg.P8[PIDLEVEL] / 100; // 32 bits is needed for calculation: errorAngle*P8[PIDLEVEL] could exceed 32768   16 bits is ok for result
 800cb1e:	4b74      	ldr	r3, [pc, #464]	; (800ccf0 <pidMultiWii+0x270>)
 800cb20:	7a1b      	ldrb	r3, [r3, #8]
 800cb22:	461a      	mov	r2, r3
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	fb02 f303 	mul.w	r3, r2, r3
 800cb2a:	4a72      	ldr	r2, [pc, #456]	; (800ccf4 <pidMultiWii+0x274>)
 800cb2c:	fb82 1203 	smull	r1, r2, r2, r3
 800cb30:	1152      	asrs	r2, r2, #5
 800cb32:	17db      	asrs	r3, r3, #31
 800cb34:	1ad3      	subs	r3, r2, r3
 800cb36:	62bb      	str	r3, [r7, #40]	; 0x28
            PTermACC = constrain(PTermACC, -cfg.D8[PIDLEVEL] * 5, +cfg.D8[PIDLEVEL] * 5);
 800cb38:	4b6d      	ldr	r3, [pc, #436]	; (800ccf0 <pidMultiWii+0x270>)
 800cb3a:	7f1b      	ldrb	r3, [r3, #28]
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	4613      	mov	r3, r2
 800cb40:	079b      	lsls	r3, r3, #30
 800cb42:	1a9b      	subs	r3, r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	1a99      	subs	r1, r3, r2
 800cb48:	4b69      	ldr	r3, [pc, #420]	; (800ccf0 <pidMultiWii+0x270>)
 800cb4a:	7f1b      	ldrb	r3, [r3, #28]
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	4613      	mov	r3, r2
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	4413      	add	r3, r2
 800cb54:	461a      	mov	r2, r3
 800cb56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb58:	f7f7 f81a 	bl	8003b90 <constrain>
 800cb5c:	62b8      	str	r0, [r7, #40]	; 0x28

            errorAngleI[axis] = constrain(errorAngleI[axis] + errorAngle, -10000, +10000); // WindUp
 800cb5e:	4a66      	ldr	r2, [pc, #408]	; (800ccf8 <pidMultiWii+0x278>)
 800cb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	4413      	add	r3, r2
 800cb6a:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb6e:	4963      	ldr	r1, [pc, #396]	; (800ccfc <pidMultiWii+0x27c>)
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7f7 f80d 	bl	8003b90 <constrain>
 800cb76:	4602      	mov	r2, r0
 800cb78:	495f      	ldr	r1, [pc, #380]	; (800ccf8 <pidMultiWii+0x278>)
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            ITermACC = (errorAngleI[axis] * cfg.I8[PIDLEVEL]) >> 12;
 800cb80:	4a5d      	ldr	r2, [pc, #372]	; (800ccf8 <pidMultiWii+0x278>)
 800cb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb88:	4a59      	ldr	r2, [pc, #356]	; (800ccf0 <pidMultiWii+0x270>)
 800cb8a:	7c92      	ldrb	r2, [r2, #18]
 800cb8c:	fb02 f303 	mul.w	r3, r2, r3
 800cb90:	131b      	asrs	r3, r3, #12
 800cb92:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (!f.ANGLE_MODE || f.HORIZON_MODE || axis == 2) { // MODE relying on GYRO or YAW axis
 800cb94:	4b52      	ldr	r3, [pc, #328]	; (800cce0 <pidMultiWii+0x260>)
 800cb96:	78db      	ldrb	r3, [r3, #3]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d006      	beq.n	800cbaa <pidMultiWii+0x12a>
 800cb9c:	4b50      	ldr	r3, [pc, #320]	; (800cce0 <pidMultiWii+0x260>)
 800cb9e:	791b      	ldrb	r3, [r3, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d102      	bne.n	800cbaa <pidMultiWii+0x12a>
 800cba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d15f      	bne.n	800cc6a <pidMultiWii+0x1ea>
            error = (int32_t)rcCommand[axis] * 10 * 8 / cfg.P8[axis];
 800cbaa:	4a4c      	ldr	r2, [pc, #304]	; (800ccdc <pidMultiWii+0x25c>)
 800cbac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	4413      	add	r3, r2
 800cbba:	011b      	lsls	r3, r3, #4
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	4a4c      	ldr	r2, [pc, #304]	; (800ccf0 <pidMultiWii+0x270>)
 800cbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc2:	4413      	add	r3, r2
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	fb91 f3f3 	sdiv	r3, r1, r3
 800cbcc:	613b      	str	r3, [r7, #16]
            error -= gyroData[axis];
 800cbce:	4a4c      	ldr	r2, [pc, #304]	; (800cd00 <pidMultiWii+0x280>)
 800cbd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	1a9b      	subs	r3, r3, r2
 800cbdc:	613b      	str	r3, [r7, #16]

            PTermGYRO = rcCommand[axis];
 800cbde:	4a3f      	ldr	r2, [pc, #252]	; (800ccdc <pidMultiWii+0x25c>)
 800cbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cbe6:	623b      	str	r3, [r7, #32]

            errorGyroI[axis] = constrain(errorGyroI[axis] + error, -16000, +16000); // WindUp
 800cbe8:	4a46      	ldr	r2, [pc, #280]	; (800cd04 <pidMultiWii+0x284>)
 800cbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800cbf8:	4943      	ldr	r1, [pc, #268]	; (800cd08 <pidMultiWii+0x288>)
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7f6 ffc8 	bl	8003b90 <constrain>
 800cc00:	4602      	mov	r2, r0
 800cc02:	4940      	ldr	r1, [pc, #256]	; (800cd04 <pidMultiWii+0x284>)
 800cc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if ((abs(gyroData[axis]) > 640) || ((axis == YAW) && (abs(rcCommand[axis]) > 100)))
 800cc0a:	4a3d      	ldr	r2, [pc, #244]	; (800cd00 <pidMultiWii+0x280>)
 800cc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	bfb8      	it	lt
 800cc16:	425b      	neglt	r3, r3
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cc1e:	d80c      	bhi.n	800cc3a <pidMultiWii+0x1ba>
 800cc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d10e      	bne.n	800cc44 <pidMultiWii+0x1c4>
 800cc26:	4a2d      	ldr	r2, [pc, #180]	; (800ccdc <pidMultiWii+0x25c>)
 800cc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc2a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	bfb8      	it	lt
 800cc32:	425b      	neglt	r3, r3
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	2b64      	cmp	r3, #100	; 0x64
 800cc38:	d904      	bls.n	800cc44 <pidMultiWii+0x1c4>
                errorGyroI[axis] = 0;
 800cc3a:	4a32      	ldr	r2, [pc, #200]	; (800cd04 <pidMultiWii+0x284>)
 800cc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3e:	2100      	movs	r1, #0
 800cc40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            ITermGYRO = (errorGyroI[axis] / 125 * cfg.I8[axis]) >> 6;
 800cc44:	4a2f      	ldr	r2, [pc, #188]	; (800cd04 <pidMultiWii+0x284>)
 800cc46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc4c:	4a2f      	ldr	r2, [pc, #188]	; (800cd0c <pidMultiWii+0x28c>)
 800cc4e:	fb82 1203 	smull	r1, r2, r2, r3
 800cc52:	10d2      	asrs	r2, r2, #3
 800cc54:	17db      	asrs	r3, r3, #31
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	4925      	ldr	r1, [pc, #148]	; (800ccf0 <pidMultiWii+0x270>)
 800cc5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc5c:	440a      	add	r2, r1
 800cc5e:	320b      	adds	r2, #11
 800cc60:	7812      	ldrb	r2, [r2, #0]
 800cc62:	fb02 f303 	mul.w	r3, r2, r3
 800cc66:	119b      	asrs	r3, r3, #6
 800cc68:	61fb      	str	r3, [r7, #28]
        }
        if (f.HORIZON_MODE && axis < 2) {
 800cc6a:	4b1d      	ldr	r3, [pc, #116]	; (800cce0 <pidMultiWii+0x260>)
 800cc6c:	791b      	ldrb	r3, [r3, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d027      	beq.n	800ccc2 <pidMultiWii+0x242>
 800cc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	dc24      	bgt.n	800ccc2 <pidMultiWii+0x242>
            PTerm = (PTermACC * (500 - prop) + PTermGYRO * prop) / 500;
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800cc7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc80:	fb03 f202 	mul.w	r2, r3, r2
 800cc84:	6a3b      	ldr	r3, [r7, #32]
 800cc86:	69b9      	ldr	r1, [r7, #24]
 800cc88:	fb01 f303 	mul.w	r3, r1, r3
 800cc8c:	4413      	add	r3, r2
 800cc8e:	4a1f      	ldr	r2, [pc, #124]	; (800cd0c <pidMultiWii+0x28c>)
 800cc90:	fb82 1203 	smull	r1, r2, r2, r3
 800cc94:	1152      	asrs	r2, r2, #5
 800cc96:	17db      	asrs	r3, r3, #31
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	633b      	str	r3, [r7, #48]	; 0x30
            ITerm = (ITermACC * (500 - prop) + ITermGYRO * prop) / 500;
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800cca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca4:	fb03 f202 	mul.w	r2, r3, r2
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	69b9      	ldr	r1, [r7, #24]
 800ccac:	fb01 f303 	mul.w	r3, r1, r3
 800ccb0:	4413      	add	r3, r2
 800ccb2:	4a16      	ldr	r2, [pc, #88]	; (800cd0c <pidMultiWii+0x28c>)
 800ccb4:	fb82 1203 	smull	r1, r2, r2, r3
 800ccb8:	1152      	asrs	r2, r2, #5
 800ccba:	17db      	asrs	r3, r3, #31
 800ccbc:	1ad3      	subs	r3, r2, r3
 800ccbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccc0:	e02a      	b.n	800cd18 <pidMultiWii+0x298>
        } else {
            if (f.ANGLE_MODE && axis < 2) {
 800ccc2:	4b07      	ldr	r3, [pc, #28]	; (800cce0 <pidMultiWii+0x260>)
 800ccc4:	78db      	ldrb	r3, [r3, #3]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d022      	beq.n	800cd10 <pidMultiWii+0x290>
 800ccca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	dc1f      	bgt.n	800cd10 <pidMultiWii+0x290>
                PTerm = PTermACC;
 800ccd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd2:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermACC;
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccd8:	e01e      	b.n	800cd18 <pidMultiWii+0x298>
 800ccda:	bf00      	nop
 800ccdc:	20001684 	.word	0x20001684
 800cce0:	20001628 	.word	0x20001628
 800cce4:	20001718 	.word	0x20001718
 800cce8:	200007ac 	.word	0x200007ac
 800ccec:	20001430 	.word	0x20001430
 800ccf0:	20000d18 	.word	0x20000d18
 800ccf4:	51eb851f 	.word	0x51eb851f
 800ccf8:	20001840 	.word	0x20001840
 800ccfc:	ffffd8f0 	.word	0xffffd8f0
 800cd00:	20001420 	.word	0x20001420
 800cd04:	20001834 	.word	0x20001834
 800cd08:	ffffc180 	.word	0xffffc180
 800cd0c:	10624dd3 	.word	0x10624dd3
            } else {
                PTerm = PTermGYRO;
 800cd10:	6a3b      	ldr	r3, [r7, #32]
 800cd12:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermGYRO;
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        PTerm -= (int32_t)gyroData[axis] * dynP8[axis] / 10 / 8; // 32 bits is needed for calculation
 800cd18:	4a33      	ldr	r2, [pc, #204]	; (800cde8 <pidMultiWii+0x368>)
 800cd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd1c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd20:	4619      	mov	r1, r3
 800cd22:	4a32      	ldr	r2, [pc, #200]	; (800cdec <pidMultiWii+0x36c>)
 800cd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd26:	4413      	add	r3, r2
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	fb01 f303 	mul.w	r3, r1, r3
 800cd2e:	4a30      	ldr	r2, [pc, #192]	; (800cdf0 <pidMultiWii+0x370>)
 800cd30:	fb82 1203 	smull	r1, r2, r2, r3
 800cd34:	1152      	asrs	r2, r2, #5
 800cd36:	17db      	asrs	r3, r3, #31
 800cd38:	1a9b      	subs	r3, r3, r2
 800cd3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd3c:	4413      	add	r3, r2
 800cd3e:	633b      	str	r3, [r7, #48]	; 0x30
        delta = gyroData[axis] - lastGyro[axis];
 800cd40:	4a29      	ldr	r2, [pc, #164]	; (800cde8 <pidMultiWii+0x368>)
 800cd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd44:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd48:	4619      	mov	r1, r3
 800cd4a:	4a2a      	ldr	r2, [pc, #168]	; (800cdf4 <pidMultiWii+0x374>)
 800cd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd4e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd52:	1acb      	subs	r3, r1, r3
 800cd54:	60fb      	str	r3, [r7, #12]
        lastGyro[axis] = gyroData[axis];
 800cd56:	4a24      	ldr	r2, [pc, #144]	; (800cde8 <pidMultiWii+0x368>)
 800cd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd5a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800cd5e:	4a25      	ldr	r2, [pc, #148]	; (800cdf4 <pidMultiWii+0x374>)
 800cd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cd66:	4a24      	ldr	r2, [pc, #144]	; (800cdf8 <pidMultiWii+0x378>)
 800cd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd6e:	4923      	ldr	r1, [pc, #140]	; (800cdfc <pidMultiWii+0x37c>)
 800cd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd76:	4413      	add	r3, r2
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cd7e:	4a1e      	ldr	r2, [pc, #120]	; (800cdf8 <pidMultiWii+0x378>)
 800cd80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd86:	491d      	ldr	r1, [pc, #116]	; (800cdfc <pidMultiWii+0x37c>)
 800cd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800cd8e:	491a      	ldr	r1, [pc, #104]	; (800cdf8 <pidMultiWii+0x378>)
 800cd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * dynD8[axis]) / 32;
 800cd98:	4a19      	ldr	r2, [pc, #100]	; (800ce00 <pidMultiWii+0x380>)
 800cd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9c:	4413      	add	r3, r2
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	461a      	mov	r2, r3
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	fb02 f303 	mul.w	r3, r2, r3
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	da00      	bge.n	800cdae <pidMultiWii+0x32e>
 800cdac:	331f      	adds	r3, #31
 800cdae:	115b      	asrs	r3, r3, #5
 800cdb0:	607b      	str	r3, [r7, #4]
        axisPID[axis] = PTerm + ITerm - DTerm;
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	4413      	add	r3, r2
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	b219      	sxth	r1, r3
 800cdc8:	4a0e      	ldr	r2, [pc, #56]	; (800ce04 <pidMultiWii+0x384>)
 800cdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800cdd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	637b      	str	r3, [r7, #52]	; 0x34
 800cdd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	f77f ae72 	ble.w	800cac2 <pidMultiWii+0x42>
    }
}
 800cdde:	bf00      	nop
 800cde0:	bf00      	nop
 800cde2:	3738      	adds	r7, #56	; 0x38
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	20001420 	.word	0x20001420
 800cdec:	200016bc 	.word	0x200016bc
 800cdf0:	66666667 	.word	0x66666667
 800cdf4:	20001900 	.word	0x20001900
 800cdf8:	20001908 	.word	0x20001908
 800cdfc:	20001914 	.word	0x20001914
 800ce00:	200016c4 	.word	0x200016c4
 800ce04:	200016e4 	.word	0x200016e4

0800ce08 <pidRewrite>:

#define GYRO_I_MAX 256

static void pidRewrite(void)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b08a      	sub	sp, #40	; 0x28
 800ce0c:	af00      	add	r7, sp, #0
    int32_t errorAngle = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	61fb      	str	r3, [r7, #28]
    int32_t PTerm, ITerm, DTerm;
    static int32_t lastError[3] = { 0, 0, 0 };
    int32_t AngleRateTmp, RateError;

    // ----------PID controller----------
    for (axis = 0; axis < 3; axis++) {
 800ce12:	2300      	movs	r3, #0
 800ce14:	627b      	str	r3, [r7, #36]	; 0x24
 800ce16:	e0f2      	b.n	800cffe <pidRewrite+0x1f6>
        // -----Get the desired angle rate depending on flight mode
        if (axis == 2) { // YAW is always gyro-controlled (MAG correction is applied to rcCommand)
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1a:	2b02      	cmp	r3, #2
 800ce1c:	d10b      	bne.n	800ce36 <pidRewrite+0x2e>
            AngleRateTmp = (((int32_t)(cfg.yawRate + 27) * rcCommand[YAW]) >> 5);
 800ce1e:	4b7c      	ldr	r3, [pc, #496]	; (800d010 <pidRewrite+0x208>)
 800ce20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ce24:	331b      	adds	r3, #27
 800ce26:	4a7b      	ldr	r2, [pc, #492]	; (800d014 <pidRewrite+0x20c>)
 800ce28:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ce2c:	fb02 f303 	mul.w	r3, r2, r3
 800ce30:	115b      	asrs	r3, r3, #5
 800ce32:	623b      	str	r3, [r7, #32]
 800ce34:	e053      	b.n	800cede <pidRewrite+0xd6>
        } else {
            // calculate error and limit the angle to 50 degrees max inclination
            errorAngle = (constrain(rcCommand[axis] + GPS_angle[axis], -500, +500) - angle[axis] + cfg.angleTrim[axis]) / 10.0f; // 16 bits is ok here
 800ce36:	4a77      	ldr	r2, [pc, #476]	; (800d014 <pidRewrite+0x20c>)
 800ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ce3e:	4619      	mov	r1, r3
 800ce40:	4a75      	ldr	r2, [pc, #468]	; (800d018 <pidRewrite+0x210>)
 800ce42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce44:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ce48:	440b      	add	r3, r1
 800ce4a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ce4e:	4973      	ldr	r1, [pc, #460]	; (800d01c <pidRewrite+0x214>)
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7f6 fe9d 	bl	8003b90 <constrain>
 800ce56:	4602      	mov	r2, r0
 800ce58:	4971      	ldr	r1, [pc, #452]	; (800d020 <pidRewrite+0x218>)
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ce60:	1ad2      	subs	r2, r2, r3
 800ce62:	496b      	ldr	r1, [pc, #428]	; (800d010 <pidRewrite+0x208>)
 800ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce66:	3314      	adds	r3, #20
 800ce68:	005b      	lsls	r3, r3, #1
 800ce6a:	440b      	add	r3, r1
 800ce6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ce70:	4413      	add	r3, r2
 800ce72:	ee07 3a90 	vmov	s15, r3
 800ce76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ce7a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800ce7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ce82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce86:	ee17 3a90 	vmov	r3, s15
 800ce8a:	61fb      	str	r3, [r7, #28]
            if (!f.ANGLE_MODE) { //control is GYRO based (ACRO and HORIZON - direct sticks control is applied to rate PID
 800ce8c:	4b65      	ldr	r3, [pc, #404]	; (800d024 <pidRewrite+0x21c>)
 800ce8e:	78db      	ldrb	r3, [r3, #3]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d11c      	bne.n	800cece <pidRewrite+0xc6>
                AngleRateTmp = ((int32_t)(cfg.rollPitchRate[axis] + 27) * rcCommand[axis]) >> 4;
 800ce94:	4a5e      	ldr	r2, [pc, #376]	; (800d010 <pidRewrite+0x208>)
 800ce96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce98:	4413      	add	r3, r2
 800ce9a:	3323      	adds	r3, #35	; 0x23
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	331b      	adds	r3, #27
 800cea0:	495c      	ldr	r1, [pc, #368]	; (800d014 <pidRewrite+0x20c>)
 800cea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cea4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800cea8:	fb02 f303 	mul.w	r3, r2, r3
 800ceac:	111b      	asrs	r3, r3, #4
 800ceae:	623b      	str	r3, [r7, #32]

                if (f.HORIZON_MODE) {
 800ceb0:	4b5c      	ldr	r3, [pc, #368]	; (800d024 <pidRewrite+0x21c>)
 800ceb2:	791b      	ldrb	r3, [r3, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d012      	beq.n	800cede <pidRewrite+0xd6>
                    // mix up angle error to desired AngleRateTmp to add a little auto-level feel
                    AngleRateTmp += (errorAngle * cfg.I8[PIDLEVEL]) >> 8;
 800ceb8:	4b55      	ldr	r3, [pc, #340]	; (800d010 <pidRewrite+0x208>)
 800ceba:	7c9b      	ldrb	r3, [r3, #18]
 800cebc:	461a      	mov	r2, r3
 800cebe:	69fb      	ldr	r3, [r7, #28]
 800cec0:	fb02 f303 	mul.w	r3, r2, r3
 800cec4:	121b      	asrs	r3, r3, #8
 800cec6:	6a3a      	ldr	r2, [r7, #32]
 800cec8:	4413      	add	r3, r2
 800ceca:	623b      	str	r3, [r7, #32]
 800cecc:	e007      	b.n	800cede <pidRewrite+0xd6>
                }
            } else { // it's the ANGLE mode - control is angle based, so control loop is needed
                AngleRateTmp = (errorAngle * cfg.P8[PIDLEVEL]) >> 4;
 800cece:	4b50      	ldr	r3, [pc, #320]	; (800d010 <pidRewrite+0x208>)
 800ced0:	7a1b      	ldrb	r3, [r3, #8]
 800ced2:	461a      	mov	r2, r3
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	fb02 f303 	mul.w	r3, r2, r3
 800ceda:	111b      	asrs	r3, r3, #4
 800cedc:	623b      	str	r3, [r7, #32]

        // --------low-level gyro-based PID. ----------
        // Used in stand-alone mode for ACRO, controlled by higher level regulators in other modes
        // -----calculate scaled error.AngleRates
        // multiplication of rcCommand corresponds to changing the sticks scaling here
        RateError = AngleRateTmp - gyroData[axis];
 800cede:	4a52      	ldr	r2, [pc, #328]	; (800d028 <pidRewrite+0x220>)
 800cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cee6:	461a      	mov	r2, r3
 800cee8:	6a3b      	ldr	r3, [r7, #32]
 800ceea:	1a9b      	subs	r3, r3, r2
 800ceec:	61bb      	str	r3, [r7, #24]

        // -----calculate P component
        PTerm = (RateError * cfg.P8[axis]) >> 7;
 800ceee:	4a48      	ldr	r2, [pc, #288]	; (800d010 <pidRewrite+0x208>)
 800cef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef2:	4413      	add	r3, r2
 800cef4:	3301      	adds	r3, #1
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	461a      	mov	r2, r3
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	fb02 f303 	mul.w	r3, r2, r3
 800cf00:	11db      	asrs	r3, r3, #7
 800cf02:	617b      	str	r3, [r7, #20]
        // -----calculate I component
        // there should be no division before accumulating the error to integrator, because the precision would be reduced.
        // Precision is critical, as I prevents from long-time drift. Thus, 32 bits integrator is used.
        // Time correction (to avoid different I scaling for different builds based on average cycle time)
        // is normalized to cycle time = 2048.
        errorGyroI[axis] = errorGyroI[axis] + ((RateError * cycleTime) >> 11) * cfg.I8[axis];
 800cf04:	4a49      	ldr	r2, [pc, #292]	; (800d02c <pidRewrite+0x224>)
 800cf06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf0c:	4b48      	ldr	r3, [pc, #288]	; (800d030 <pidRewrite+0x228>)
 800cf0e:	881b      	ldrh	r3, [r3, #0]
 800cf10:	4619      	mov	r1, r3
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	fb01 f303 	mul.w	r3, r1, r3
 800cf18:	12db      	asrs	r3, r3, #11
 800cf1a:	483d      	ldr	r0, [pc, #244]	; (800d010 <pidRewrite+0x208>)
 800cf1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf1e:	4401      	add	r1, r0
 800cf20:	310b      	adds	r1, #11
 800cf22:	7809      	ldrb	r1, [r1, #0]
 800cf24:	fb01 f303 	mul.w	r3, r1, r3
 800cf28:	441a      	add	r2, r3
 800cf2a:	4940      	ldr	r1, [pc, #256]	; (800d02c <pidRewrite+0x224>)
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // limit maximum integrator value to prevent WindUp - accumulating extreme values when system is saturated.
        // I coefficient (I8) moved before integration to make limiting independent from PID settings
        errorGyroI[axis] = constrain(errorGyroI[axis], (int32_t)(-GYRO_I_MAX) << 13, (int32_t)(+GYRO_I_MAX) << 13);
 800cf32:	4a3e      	ldr	r2, [pc, #248]	; (800d02c <pidRewrite+0x224>)
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cf3e:	493d      	ldr	r1, [pc, #244]	; (800d034 <pidRewrite+0x22c>)
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7f6 fe25 	bl	8003b90 <constrain>
 800cf46:	4602      	mov	r2, r0
 800cf48:	4938      	ldr	r1, [pc, #224]	; (800d02c <pidRewrite+0x224>)
 800cf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ITerm = errorGyroI[axis] >> 13;
 800cf50:	4a36      	ldr	r2, [pc, #216]	; (800d02c <pidRewrite+0x224>)
 800cf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf58:	135b      	asrs	r3, r3, #13
 800cf5a:	613b      	str	r3, [r7, #16]

        //-----calculate D-term
        delta = RateError - lastError[axis];  // 16 bits is ok here, the dif between 2 consecutive gyro reads is limited to 800
 800cf5c:	4a36      	ldr	r2, [pc, #216]	; (800d038 <pidRewrite+0x230>)
 800cf5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf64:	69ba      	ldr	r2, [r7, #24]
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	60fb      	str	r3, [r7, #12]
        lastError[axis] = RateError;
 800cf6a:	4933      	ldr	r1, [pc, #204]	; (800d038 <pidRewrite+0x230>)
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6e:	69ba      	ldr	r2, [r7, #24]
 800cf70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Correct difference by cycle time. Cycle time is jittery (can be different 2 times), so calculated difference
        // would be scaled by different dt each time. Division by dT fixes that.
        delta = (delta * ((uint16_t)0xFFFF / (cycleTime >> 4))) >> 6;
 800cf74:	4b2e      	ldr	r3, [pc, #184]	; (800d030 <pidRewrite+0x228>)
 800cf76:	881b      	ldrh	r3, [r3, #0]
 800cf78:	091b      	lsrs	r3, r3, #4
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf80:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	461a      	mov	r2, r3
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	fb02 f303 	mul.w	r3, r2, r3
 800cf8e:	119b      	asrs	r3, r3, #6
 800cf90:	60fb      	str	r3, [r7, #12]
        // add moving average here to reduce noise
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cf92:	4a2a      	ldr	r2, [pc, #168]	; (800d03c <pidRewrite+0x234>)
 800cf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf9a:	4929      	ldr	r1, [pc, #164]	; (800d040 <pidRewrite+0x238>)
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cfaa:	4a24      	ldr	r2, [pc, #144]	; (800d03c <pidRewrite+0x234>)
 800cfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cfb2:	4923      	ldr	r1, [pc, #140]	; (800d040 <pidRewrite+0x238>)
 800cfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800cfba:	4920      	ldr	r1, [pc, #128]	; (800d03c <pidRewrite+0x234>)
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * cfg.D8[axis]) >> 8;
 800cfc4:	4a12      	ldr	r2, [pc, #72]	; (800d010 <pidRewrite+0x208>)
 800cfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc8:	4413      	add	r3, r2
 800cfca:	3315      	adds	r3, #21
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	fb02 f303 	mul.w	r3, r2, r3
 800cfd6:	121b      	asrs	r3, r3, #8
 800cfd8:	607b      	str	r3, [r7, #4]

        // -----calculate total PID output
        axisPID[axis] = PTerm + ITerm + DTerm;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	4413      	add	r3, r2
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	4413      	add	r3, r2
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	b219      	sxth	r1, r3
 800cff0:	4a14      	ldr	r2, [pc, #80]	; (800d044 <pidRewrite+0x23c>)
 800cff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	3301      	adds	r3, #1
 800cffc:	627b      	str	r3, [r7, #36]	; 0x24
 800cffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d000:	2b02      	cmp	r3, #2
 800d002:	f77f af09 	ble.w	800ce18 <pidRewrite+0x10>
    }
}
 800d006:	bf00      	nop
 800d008:	bf00      	nop
 800d00a:	3728      	adds	r7, #40	; 0x28
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	20000d18 	.word	0x20000d18
 800d014:	20001684 	.word	0x20001684
 800d018:	20001718 	.word	0x20001718
 800d01c:	fffffe0c 	.word	0xfffffe0c
 800d020:	20001430 	.word	0x20001430
 800d024:	20001628 	.word	0x20001628
 800d028:	20001420 	.word	0x20001420
 800d02c:	20001834 	.word	0x20001834
 800d030:	20001648 	.word	0x20001648
 800d034:	ffe00000 	.word	0xffe00000
 800d038:	20001920 	.word	0x20001920
 800d03c:	2000192c 	.word	0x2000192c
 800d040:	20001938 	.word	0x20001938
 800d044:	200016e4 	.word	0x200016e4

0800d048 <setPIDController>:

void setPIDController(int type)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
    switch (type) {
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2b01      	cmp	r3, #1
 800d054:	d003      	beq.n	800d05e <setPIDController+0x16>
        case 0:
        default:
            pid_controller = pidMultiWii;
 800d056:	4b07      	ldr	r3, [pc, #28]	; (800d074 <setPIDController+0x2c>)
 800d058:	4a07      	ldr	r2, [pc, #28]	; (800d078 <setPIDController+0x30>)
 800d05a:	601a      	str	r2, [r3, #0]
            break;
 800d05c:	e003      	b.n	800d066 <setPIDController+0x1e>
        case 1:
            pid_controller = pidRewrite;
 800d05e:	4b05      	ldr	r3, [pc, #20]	; (800d074 <setPIDController+0x2c>)
 800d060:	4a06      	ldr	r2, [pc, #24]	; (800d07c <setPIDController+0x34>)
 800d062:	601a      	str	r2, [r3, #0]
            break;
 800d064:	bf00      	nop
    }
}
 800d066:	bf00      	nop
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	20000050 	.word	0x20000050
 800d078:	0800ca81 	.word	0x0800ca81
 800d07c:	0800ce09 	.word	0x0800ce09

0800d080 <taskComputeRc>:
#ifdef BARO
    static int16_t initialThrottleHold;
#endif

uint16_t taskComputeRc(PifTask *p_task)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
    static uint8_t rcDelayCommand;      // this indicates the number of time (multiple of RC measurement at 50Hz) the sticks must be maintained to run or switch off motors
    static uint8_t rcSticks;            // this hold sticks position for command combos
    uint8_t stTmp = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	75fb      	strb	r3, [r7, #23]
    int i;
    uint32_t auxState = 0;
 800d08c:	2300      	movs	r3, #0
 800d08e:	60fb      	str	r3, [r7, #12]
#ifdef GPS
    static uint8_t GPSNavReset = 1;
#endif
    bool isThrottleLow = false;
 800d090:	2300      	movs	r3, #0
 800d092:	72fb      	strb	r3, [r7, #11]

    (void)p_task;

        computeRC();
 800d094:	f7ff fbf4 	bl	800c880 <computeRC>

        // in 3D mode, we need to be able to disarm by switch at any time
        if (feature(FEATURE_3D)) {
 800d098:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d09c:	f7f9 fef8 	bl	8006e90 <feature>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d005      	beq.n	800d0b2 <taskComputeRc+0x32>
            if (!rcOptions[BOXARM])
 800d0a6:	4b9d      	ldr	r3, [pc, #628]	; (800d31c <taskComputeRc+0x29c>)
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d101      	bne.n	800d0b2 <taskComputeRc+0x32>
                mwDisarm();
 800d0ae:	f7ff fcc5 	bl	800ca3c <mwDisarm>
        }

        // Read rssi value
        rssi = RSSI_getValue();
 800d0b2:	f001 fad3 	bl	800e65c <RSSI_getValue>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	4b99      	ldr	r3, [pc, #612]	; (800d320 <taskComputeRc+0x2a0>)
 800d0bc:	801a      	strh	r2, [r3, #0]

        // Failsafe routine
        if (feature(FEATURE_FAILSAFE) || feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d0be:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d0c2:	f7f9 fee5 	bl	8006e90 <feature>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d106      	bne.n	800d0da <taskComputeRc+0x5a>
 800d0cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d0d0:	f7f9 fede 	bl	8006e90 <feature>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d072      	beq.n	800d1c0 <taskComputeRc+0x140>
            if (failsafeCnt > (5 * cfg.failsafe_delay) && f.ARMED) { // Stabilize, and set Throttle to specified level
 800d0da:	4b92      	ldr	r3, [pc, #584]	; (800d324 <taskComputeRc+0x2a4>)
 800d0dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	4b91      	ldr	r3, [pc, #580]	; (800d328 <taskComputeRc+0x2a8>)
 800d0e4:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	4413      	add	r3, r2
 800d0f0:	4299      	cmp	r1, r3
 800d0f2:	dd43      	ble.n	800d17c <taskComputeRc+0xfc>
 800d0f4:	4b8d      	ldr	r3, [pc, #564]	; (800d32c <taskComputeRc+0x2ac>)
 800d0f6:	785b      	ldrb	r3, [r3, #1]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d03f      	beq.n	800d17c <taskComputeRc+0xfc>
                for (i = 0; i < 3; i++)
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	613b      	str	r3, [r7, #16]
 800d100:	e00a      	b.n	800d118 <taskComputeRc+0x98>
                    rcData[i] = mcfg.midrc;      // after specified guard time after RC signal is lost (in 0.1sec)
 800d102:	4b8b      	ldr	r3, [pc, #556]	; (800d330 <taskComputeRc+0x2b0>)
 800d104:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d108:	b219      	sxth	r1, r3
 800d10a:	4a8a      	ldr	r2, [pc, #552]	; (800d334 <taskComputeRc+0x2b4>)
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	3301      	adds	r3, #1
 800d116:	613b      	str	r3, [r7, #16]
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	2b02      	cmp	r3, #2
 800d11c:	ddf1      	ble.n	800d102 <taskComputeRc+0x82>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800d11e:	4b82      	ldr	r3, [pc, #520]	; (800d328 <taskComputeRc+0x2a8>)
 800d120:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800d124:	b21a      	sxth	r2, r3
 800d126:	4b83      	ldr	r3, [pc, #524]	; (800d334 <taskComputeRc+0x2b4>)
 800d128:	80da      	strh	r2, [r3, #6]
                buzzer(BUZZER_TX_LOST_ARMED);
 800d12a:	2003      	movs	r0, #3
 800d12c:	f7f6 fec0 	bl	8003eb0 <buzzer>
                if ((failsafeCnt > 5 * (cfg.failsafe_delay + cfg.failsafe_off_delay)) && !f.FW_FAILSAFE_RTH_ENABLE) {  // Turn OFF motors after specified Time (in 0.1sec)
 800d130:	4b7c      	ldr	r3, [pc, #496]	; (800d324 <taskComputeRc+0x2a4>)
 800d132:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d136:	4619      	mov	r1, r3
 800d138:	4b7b      	ldr	r3, [pc, #492]	; (800d328 <taskComputeRc+0x2a8>)
 800d13a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d13e:	461a      	mov	r2, r3
 800d140:	4b79      	ldr	r3, [pc, #484]	; (800d328 <taskComputeRc+0x2a8>)
 800d142:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800d146:	441a      	add	r2, r3
 800d148:	4613      	mov	r3, r2
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	4413      	add	r3, r2
 800d14e:	4299      	cmp	r1, r3
 800d150:	dd0b      	ble.n	800d16a <taskComputeRc+0xea>
 800d152:	4b76      	ldr	r3, [pc, #472]	; (800d32c <taskComputeRc+0x2ac>)
 800d154:	7c9b      	ldrb	r3, [r3, #18]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d107      	bne.n	800d16a <taskComputeRc+0xea>
                    mwDisarm();             // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d15a:	f7ff fc6f 	bl	800ca3c <mwDisarm>
                    f.OK_TO_ARM = 0;        // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d15e:	4b73      	ldr	r3, [pc, #460]	; (800d32c <taskComputeRc+0x2ac>)
 800d160:	2200      	movs	r2, #0
 800d162:	701a      	strb	r2, [r3, #0]
                    buzzer(BUZZER_TX_LOST);
 800d164:	2004      	movs	r0, #4
 800d166:	f7f6 fea3 	bl	8003eb0 <buzzer>
                }
                failsafeEvents++;
 800d16a:	4b73      	ldr	r3, [pc, #460]	; (800d338 <taskComputeRc+0x2b8>)
 800d16c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d170:	b29b      	uxth	r3, r3
 800d172:	3301      	adds	r3, #1
 800d174:	b29b      	uxth	r3, r3
 800d176:	b21a      	sxth	r2, r3
 800d178:	4b6f      	ldr	r3, [pc, #444]	; (800d338 <taskComputeRc+0x2b8>)
 800d17a:	801a      	strh	r2, [r3, #0]
            }
            if (failsafeCnt > (5 * cfg.failsafe_delay) && !f.ARMED) {  // Turn off "Ok To arm to prevent the motors from spinning after repowering the RX with low throttle and aux to arm
 800d17c:	4b69      	ldr	r3, [pc, #420]	; (800d324 <taskComputeRc+0x2a4>)
 800d17e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d182:	4619      	mov	r1, r3
 800d184:	4b68      	ldr	r3, [pc, #416]	; (800d328 <taskComputeRc+0x2a8>)
 800d186:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d18a:	461a      	mov	r2, r3
 800d18c:	4613      	mov	r3, r2
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	4413      	add	r3, r2
 800d192:	4299      	cmp	r1, r3
 800d194:	dd0b      	ble.n	800d1ae <taskComputeRc+0x12e>
 800d196:	4b65      	ldr	r3, [pc, #404]	; (800d32c <taskComputeRc+0x2ac>)
 800d198:	785b      	ldrb	r3, [r3, #1]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d107      	bne.n	800d1ae <taskComputeRc+0x12e>
                mwDisarm();         // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d19e:	f7ff fc4d 	bl	800ca3c <mwDisarm>
                f.OK_TO_ARM = 0;    // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d1a2:	4b62      	ldr	r3, [pc, #392]	; (800d32c <taskComputeRc+0x2ac>)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_TX_LOST);
 800d1a8:	2004      	movs	r0, #4
 800d1aa:	f7f6 fe81 	bl	8003eb0 <buzzer>
            }
            failsafeCnt++;
 800d1ae:	4b5d      	ldr	r3, [pc, #372]	; (800d324 <taskComputeRc+0x2a4>)
 800d1b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	b21a      	sxth	r2, r3
 800d1bc:	4b59      	ldr	r3, [pc, #356]	; (800d324 <taskComputeRc+0x2a4>)
 800d1be:	801a      	strh	r2, [r3, #0]
        }
        // end of failsafe routine - next change is made with RcOptions setting

        // ------------------ STICKS COMMAND HANDLER --------------------
        // checking sticks positions
        for (i = 0; i < 4; i++) {
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	613b      	str	r3, [r7, #16]
 800d1c4:	e021      	b.n	800d20a <taskComputeRc+0x18a>
            stTmp >>= 2;
 800d1c6:	7dfb      	ldrb	r3, [r7, #23]
 800d1c8:	089b      	lsrs	r3, r3, #2
 800d1ca:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] > mcfg.mincheck)
 800d1cc:	4a59      	ldr	r2, [pc, #356]	; (800d334 <taskComputeRc+0x2b4>)
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	4b56      	ldr	r3, [pc, #344]	; (800d330 <taskComputeRc+0x2b0>)
 800d1d8:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	dd03      	ble.n	800d1e8 <taskComputeRc+0x168>
                stTmp |= 0x80;  // check for MIN
 800d1e0:	7dfb      	ldrb	r3, [r7, #23]
 800d1e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1e6:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] < mcfg.maxcheck)
 800d1e8:	4a52      	ldr	r2, [pc, #328]	; (800d334 <taskComputeRc+0x2b4>)
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	4b4f      	ldr	r3, [pc, #316]	; (800d330 <taskComputeRc+0x2b0>)
 800d1f4:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	da03      	bge.n	800d204 <taskComputeRc+0x184>
                stTmp |= 0x40;  // check for MAX
 800d1fc:	7dfb      	ldrb	r3, [r7, #23]
 800d1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d202:	75fb      	strb	r3, [r7, #23]
        for (i = 0; i < 4; i++) {
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	3301      	adds	r3, #1
 800d208:	613b      	str	r3, [r7, #16]
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	2b03      	cmp	r3, #3
 800d20e:	ddda      	ble.n	800d1c6 <taskComputeRc+0x146>
        }
        if (stTmp == rcSticks) {
 800d210:	4b4a      	ldr	r3, [pc, #296]	; (800d33c <taskComputeRc+0x2bc>)
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	7dfa      	ldrb	r2, [r7, #23]
 800d216:	429a      	cmp	r2, r3
 800d218:	d10a      	bne.n	800d230 <taskComputeRc+0x1b0>
            if (rcDelayCommand < 250)
 800d21a:	4b49      	ldr	r3, [pc, #292]	; (800d340 <taskComputeRc+0x2c0>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2bf9      	cmp	r3, #249	; 0xf9
 800d220:	d809      	bhi.n	800d236 <taskComputeRc+0x1b6>
                rcDelayCommand++;
 800d222:	4b47      	ldr	r3, [pc, #284]	; (800d340 <taskComputeRc+0x2c0>)
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	3301      	adds	r3, #1
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	4b45      	ldr	r3, [pc, #276]	; (800d340 <taskComputeRc+0x2c0>)
 800d22c:	701a      	strb	r2, [r3, #0]
 800d22e:	e002      	b.n	800d236 <taskComputeRc+0x1b6>
        } else
            rcDelayCommand = 0;
 800d230:	4b43      	ldr	r3, [pc, #268]	; (800d340 <taskComputeRc+0x2c0>)
 800d232:	2200      	movs	r2, #0
 800d234:	701a      	strb	r2, [r3, #0]
        rcSticks = stTmp;
 800d236:	4a41      	ldr	r2, [pc, #260]	; (800d33c <taskComputeRc+0x2bc>)
 800d238:	7dfb      	ldrb	r3, [r7, #23]
 800d23a:	7013      	strb	r3, [r2, #0]

        // perform actions
        if (feature(FEATURE_3D) && (rcData[THROTTLE] > (mcfg.midrc - mcfg.deadband3d_throttle) && rcData[THROTTLE] < (mcfg.midrc + mcfg.deadband3d_throttle)))
 800d23c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d240:	f7f9 fe26 	bl	8006e90 <feature>
 800d244:	4603      	mov	r3, r0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d01e      	beq.n	800d288 <taskComputeRc+0x208>
 800d24a:	4b3a      	ldr	r3, [pc, #232]	; (800d334 <taskComputeRc+0x2b4>)
 800d24c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d250:	461a      	mov	r2, r3
 800d252:	4b37      	ldr	r3, [pc, #220]	; (800d330 <taskComputeRc+0x2b0>)
 800d254:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d258:	4619      	mov	r1, r3
 800d25a:	4b35      	ldr	r3, [pc, #212]	; (800d330 <taskComputeRc+0x2b0>)
 800d25c:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d260:	1acb      	subs	r3, r1, r3
 800d262:	429a      	cmp	r2, r3
 800d264:	dd10      	ble.n	800d288 <taskComputeRc+0x208>
 800d266:	4b33      	ldr	r3, [pc, #204]	; (800d334 <taskComputeRc+0x2b4>)
 800d268:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d26c:	461a      	mov	r2, r3
 800d26e:	4b30      	ldr	r3, [pc, #192]	; (800d330 <taskComputeRc+0x2b0>)
 800d270:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d274:	4619      	mov	r1, r3
 800d276:	4b2e      	ldr	r3, [pc, #184]	; (800d330 <taskComputeRc+0x2b0>)
 800d278:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d27c:	440b      	add	r3, r1
 800d27e:	429a      	cmp	r2, r3
 800d280:	da02      	bge.n	800d288 <taskComputeRc+0x208>
            isThrottleLow = true;
 800d282:	2301      	movs	r3, #1
 800d284:	72fb      	strb	r3, [r7, #11]
 800d286:	e014      	b.n	800d2b2 <taskComputeRc+0x232>
        else if (!feature(FEATURE_3D) && (rcData[THROTTLE] < mcfg.mincheck))
 800d288:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d28c:	f7f9 fe00 	bl	8006e90 <feature>
 800d290:	4603      	mov	r3, r0
 800d292:	f083 0301 	eor.w	r3, r3, #1
 800d296:	b2db      	uxtb	r3, r3
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00a      	beq.n	800d2b2 <taskComputeRc+0x232>
 800d29c:	4b25      	ldr	r3, [pc, #148]	; (800d334 <taskComputeRc+0x2b4>)
 800d29e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	4b22      	ldr	r3, [pc, #136]	; (800d330 <taskComputeRc+0x2b0>)
 800d2a6:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	da01      	bge.n	800d2b2 <taskComputeRc+0x232>
            isThrottleLow = true;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	72fb      	strb	r3, [r7, #11]
        if (isThrottleLow) {
 800d2b2:	7afb      	ldrb	r3, [r7, #11]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d01c      	beq.n	800d2f2 <taskComputeRc+0x272>
            errorGyroI[ROLL] = 0;
 800d2b8:	4b22      	ldr	r3, [pc, #136]	; (800d344 <taskComputeRc+0x2c4>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]
            errorGyroI[PITCH] = 0;
 800d2be:	4b21      	ldr	r3, [pc, #132]	; (800d344 <taskComputeRc+0x2c4>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	605a      	str	r2, [r3, #4]
            errorGyroI[YAW] = 0;
 800d2c4:	4b1f      	ldr	r3, [pc, #124]	; (800d344 <taskComputeRc+0x2c4>)
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	609a      	str	r2, [r3, #8]
            errorAngleI[ROLL] = 0;
 800d2ca:	4b1f      	ldr	r3, [pc, #124]	; (800d348 <taskComputeRc+0x2c8>)
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	601a      	str	r2, [r3, #0]
            errorAngleI[PITCH] = 0;
 800d2d0:	4b1d      	ldr	r3, [pc, #116]	; (800d348 <taskComputeRc+0x2c8>)
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	605a      	str	r2, [r3, #4]
            if (cfg.activate[BOXARM] > 0) { // Arming via ARM BOX
 800d2d6:	4b14      	ldr	r3, [pc, #80]	; (800d328 <taskComputeRc+0x2a8>)
 800d2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d009      	beq.n	800d2f2 <taskComputeRc+0x272>
                if (rcOptions[BOXARM] && f.OK_TO_ARM)
 800d2de:	4b0f      	ldr	r3, [pc, #60]	; (800d31c <taskComputeRc+0x29c>)
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d005      	beq.n	800d2f2 <taskComputeRc+0x272>
 800d2e6:	4b11      	ldr	r3, [pc, #68]	; (800d32c <taskComputeRc+0x2ac>)
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d001      	beq.n	800d2f2 <taskComputeRc+0x272>
                    mwArm();
 800d2ee:	f7ff fb61 	bl	800c9b4 <mwArm>
            }
        }

        if (cfg.activate[BOXARM] > 0) { // Disarming via ARM BOX
 800d2f2:	4b0d      	ldr	r3, [pc, #52]	; (800d328 <taskComputeRc+0x2a8>)
 800d2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d02d      	beq.n	800d356 <taskComputeRc+0x2d6>
            if (!rcOptions[BOXARM] && f.ARMED) {
 800d2fa:	4b08      	ldr	r3, [pc, #32]	; (800d31c <taskComputeRc+0x29c>)
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d129      	bne.n	800d356 <taskComputeRc+0x2d6>
 800d302:	4b0a      	ldr	r3, [pc, #40]	; (800d32c <taskComputeRc+0x2ac>)
 800d304:	785b      	ldrb	r3, [r3, #1]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d025      	beq.n	800d356 <taskComputeRc+0x2d6>
                if (mcfg.disarm_kill_switch) {
 800d30a:	4b09      	ldr	r3, [pc, #36]	; (800d330 <taskComputeRc+0x2b0>)
 800d30c:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800d310:	2b00      	cmp	r3, #0
 800d312:	d01b      	beq.n	800d34c <taskComputeRc+0x2cc>
                    mwDisarm();
 800d314:	f7ff fb92 	bl	800ca3c <mwDisarm>
 800d318:	e01d      	b.n	800d356 <taskComputeRc+0x2d6>
 800d31a:	bf00      	nop
 800d31c:	200016c8 	.word	0x200016c8
 800d320:	200016b4 	.word	0x200016b4
 800d324:	2000165a 	.word	0x2000165a
 800d328:	20000d18 	.word	0x20000d18
 800d32c:	20001628 	.word	0x20001628
 800d330:	200007ac 	.word	0x200007ac
 800d334:	20001660 	.word	0x20001660
 800d338:	2000165c 	.word	0x2000165c
 800d33c:	20001944 	.word	0x20001944
 800d340:	20001945 	.word	0x20001945
 800d344:	20001834 	.word	0x20001834
 800d348:	20001840 	.word	0x20001840
                } else if (isThrottleLow) {
 800d34c:	7afb      	ldrb	r3, [r7, #11]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <taskComputeRc+0x2d6>
                    mwDisarm();
 800d352:	f7ff fb73 	bl	800ca3c <mwDisarm>
                }
            }
        }

        if (rcDelayCommand == 20) {
 800d356:	4b82      	ldr	r3, [pc, #520]	; (800d560 <taskComputeRc+0x4e0>)
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	2b14      	cmp	r3, #20
 800d35c:	f040 8131 	bne.w	800d5c2 <taskComputeRc+0x542>
            if (f.ARMED) {      // actions during armed
 800d360:	4b80      	ldr	r3, [pc, #512]	; (800d564 <taskComputeRc+0x4e4>)
 800d362:	785b      	ldrb	r3, [r3, #1]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d01c      	beq.n	800d3a2 <taskComputeRc+0x322>
                // Disarm on throttle down + yaw
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 800d368:	4b7f      	ldr	r3, [pc, #508]	; (800d568 <taskComputeRc+0x4e8>)
 800d36a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d105      	bne.n	800d37c <taskComputeRc+0x2fc>
 800d370:	4b7e      	ldr	r3, [pc, #504]	; (800d56c <taskComputeRc+0x4ec>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b5f      	cmp	r3, #95	; 0x5f
 800d376:	d101      	bne.n	800d37c <taskComputeRc+0x2fc>
                    mwDisarm();
 800d378:	f7ff fb60 	bl	800ca3c <mwDisarm>
                // Disarm on roll (only when retarded_arm is enabled)
                if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_LO))
 800d37c:	4b7c      	ldr	r3, [pc, #496]	; (800d570 <taskComputeRc+0x4f0>)
 800d37e:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d382:	2b00      	cmp	r3, #0
 800d384:	f000 811d 	beq.w	800d5c2 <taskComputeRc+0x542>
 800d388:	4b77      	ldr	r3, [pc, #476]	; (800d568 <taskComputeRc+0x4e8>)
 800d38a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	f040 8118 	bne.w	800d5c2 <taskComputeRc+0x542>
 800d392:	4b76      	ldr	r3, [pc, #472]	; (800d56c <taskComputeRc+0x4ec>)
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	2b7d      	cmp	r3, #125	; 0x7d
 800d398:	f040 8113 	bne.w	800d5c2 <taskComputeRc+0x542>
                    mwDisarm();
 800d39c:	f7ff fb4e 	bl	800ca3c <mwDisarm>
 800d3a0:	e10f      	b.n	800d5c2 <taskComputeRc+0x542>
            } else {            // actions during not armed
                i = 0;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	613b      	str	r3, [r7, #16]
                // GYRO calibration
                if (rcSticks == THR_LO + YAW_LO + PIT_LO + ROL_CE) {
 800d3a6:	4b71      	ldr	r3, [pc, #452]	; (800d56c <taskComputeRc+0x4ec>)
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b57      	cmp	r3, #87	; 0x57
 800d3ac:	d122      	bne.n	800d3f4 <taskComputeRc+0x374>
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800d3ae:	4b71      	ldr	r3, [pc, #452]	; (800d574 <taskComputeRc+0x4f4>)
 800d3b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3b4:	801a      	strh	r2, [r3, #0]
#ifdef GPS
                    if (feature(FEATURE_GPS))
 800d3b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d3ba:	f7f9 fd69 	bl	8006e90 <feature>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d001      	beq.n	800d3c8 <taskComputeRc+0x348>
                        GPS_reset_home_position();
 800d3c4:	f7fb fb60 	bl	8008a88 <GPS_reset_home_position>
#endif
                    if (sensors(SENSOR_BARO))
 800d3c8:	2004      	movs	r0, #4
 800d3ca:	f7f9 fd19 	bl	8006e00 <sensors>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d002      	beq.n	800d3da <taskComputeRc+0x35a>
                        calibratingB = 10; // calibrate baro to new ground level (10 * 25 ms = ~250 ms non blocking)
 800d3d4:	4b68      	ldr	r3, [pc, #416]	; (800d578 <taskComputeRc+0x4f8>)
 800d3d6:	220a      	movs	r2, #10
 800d3d8:	801a      	strh	r2, [r3, #0]
                    if (!sensors(SENSOR_MAG))
 800d3da:	2008      	movs	r0, #8
 800d3dc:	f7f9 fd10 	bl	8006e00 <sensors>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	f083 0301 	eor.w	r3, r3, #1
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d032      	beq.n	800d452 <taskComputeRc+0x3d2>
                        heading = 0; // reset heading to zero after gyro calibration
 800d3ec:	4b63      	ldr	r3, [pc, #396]	; (800d57c <taskComputeRc+0x4fc>)
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	801a      	strh	r2, [r3, #0]
 800d3f2:	e02e      	b.n	800d452 <taskComputeRc+0x3d2>
                    // Inflight ACC Calibration
                } else if (feature(FEATURE_INFLIGHT_ACC_CAL) && (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_HI)) {
 800d3f4:	2004      	movs	r0, #4
 800d3f6:	f7f9 fd4b 	bl	8006e90 <feature>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d028      	beq.n	800d452 <taskComputeRc+0x3d2>
 800d400:	4b5a      	ldr	r3, [pc, #360]	; (800d56c <taskComputeRc+0x4ec>)
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	2b5a      	cmp	r3, #90	; 0x5a
 800d406:	d124      	bne.n	800d452 <taskComputeRc+0x3d2>
                    if (AccInflightCalibrationMeasurementDone) {        // trigger saving into eeprom after landing
 800d408:	4b5d      	ldr	r3, [pc, #372]	; (800d580 <taskComputeRc+0x500>)
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d006      	beq.n	800d41e <taskComputeRc+0x39e>
                        AccInflightCalibrationMeasurementDone = false;
 800d410:	4b5b      	ldr	r3, [pc, #364]	; (800d580 <taskComputeRc+0x500>)
 800d412:	2200      	movs	r2, #0
 800d414:	701a      	strb	r2, [r3, #0]
                        AccInflightCalibrationSavetoEEProm = true;
 800d416:	4b5b      	ldr	r3, [pc, #364]	; (800d584 <taskComputeRc+0x504>)
 800d418:	2201      	movs	r2, #1
 800d41a:	701a      	strb	r2, [r3, #0]
 800d41c:	e019      	b.n	800d452 <taskComputeRc+0x3d2>
                    } else {
                        AccInflightCalibrationArmed = !AccInflightCalibrationArmed;
 800d41e:	4b5a      	ldr	r3, [pc, #360]	; (800d588 <taskComputeRc+0x508>)
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	bf14      	ite	ne
 800d426:	2301      	movne	r3, #1
 800d428:	2300      	moveq	r3, #0
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	f083 0301 	eor.w	r3, r3, #1
 800d430:	b2db      	uxtb	r3, r3
 800d432:	f003 0301 	and.w	r3, r3, #1
 800d436:	b2da      	uxtb	r2, r3
 800d438:	4b53      	ldr	r3, [pc, #332]	; (800d588 <taskComputeRc+0x508>)
 800d43a:	701a      	strb	r2, [r3, #0]
                        if (AccInflightCalibrationArmed) {
 800d43c:	4b52      	ldr	r3, [pc, #328]	; (800d588 <taskComputeRc+0x508>)
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d003      	beq.n	800d44c <taskComputeRc+0x3cc>
                            buzzer(BUZZER_ACC_CALIBRATION);
 800d444:	200a      	movs	r0, #10
 800d446:	f7f6 fd33 	bl	8003eb0 <buzzer>
 800d44a:	e002      	b.n	800d452 <taskComputeRc+0x3d2>
                        } else {
                            buzzer(BUZZER_ACC_CALIBRATION_FAIL);
 800d44c:	200b      	movs	r0, #11
 800d44e:	f7f6 fd2f 	bl	8003eb0 <buzzer>
                        }
                    }
                }

                // Multiple configuration profiles
                if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_LO)          // ROLL left  -> Profile 1
 800d452:	4b46      	ldr	r3, [pc, #280]	; (800d56c <taskComputeRc+0x4ec>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	2b5d      	cmp	r3, #93	; 0x5d
 800d458:	d102      	bne.n	800d460 <taskComputeRc+0x3e0>
                    i = 1;
 800d45a:	2301      	movs	r3, #1
 800d45c:	613b      	str	r3, [r7, #16]
 800d45e:	e00c      	b.n	800d47a <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_CE)     // PITCH up   -> Profile 2
 800d460:	4b42      	ldr	r3, [pc, #264]	; (800d56c <taskComputeRc+0x4ec>)
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	2b5b      	cmp	r3, #91	; 0x5b
 800d466:	d102      	bne.n	800d46e <taskComputeRc+0x3ee>
                    i = 2;
 800d468:	2302      	movs	r3, #2
 800d46a:	613b      	str	r3, [r7, #16]
 800d46c:	e005      	b.n	800d47a <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)     // ROLL right -> Profile 3
 800d46e:	4b3f      	ldr	r3, [pc, #252]	; (800d56c <taskComputeRc+0x4ec>)
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	2b5e      	cmp	r3, #94	; 0x5e
 800d474:	d101      	bne.n	800d47a <taskComputeRc+0x3fa>
                    i = 3;
 800d476:	2303      	movs	r3, #3
 800d478:	613b      	str	r3, [r7, #16]
                if (i) {
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d011      	beq.n	800d4a4 <taskComputeRc+0x424>
                    mcfg.current_profile = i - 1;
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	b2db      	uxtb	r3, r3
 800d484:	3b01      	subs	r3, #1
 800d486:	b2da      	uxtb	r2, r3
 800d488:	4b39      	ldr	r3, [pc, #228]	; (800d570 <taskComputeRc+0x4f0>)
 800d48a:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
                    writeEEPROM(0, false);
 800d48e:	2100      	movs	r1, #0
 800d490:	2000      	movs	r0, #0
 800d492:	f7f9 f91b 	bl	80066cc <writeEEPROM>
                    blinkLED(2, 40, i);
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	461a      	mov	r2, r3
 800d49c:	2128      	movs	r1, #40	; 0x28
 800d49e:	2002      	movs	r0, #2
 800d4a0:	f7fe fda0 	bl	800bfe4 <blinkLED>
                    // TODO alarmArray[0] = i;
                }

                // Arm via YAW
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 800d4a4:	4b30      	ldr	r3, [pc, #192]	; (800d568 <taskComputeRc+0x4e8>)
 800d4a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d106      	bne.n	800d4ba <taskComputeRc+0x43a>
 800d4ac:	4b2f      	ldr	r3, [pc, #188]	; (800d56c <taskComputeRc+0x4ec>)
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	2b6f      	cmp	r3, #111	; 0x6f
 800d4b2:	d102      	bne.n	800d4ba <taskComputeRc+0x43a>
                    mwArm();
 800d4b4:	f7ff fa7e 	bl	800c9b4 <mwArm>
 800d4b8:	e01f      	b.n	800d4fa <taskComputeRc+0x47a>
                // Arm via ROLL
                else if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_HI))
 800d4ba:	4b2d      	ldr	r3, [pc, #180]	; (800d570 <taskComputeRc+0x4f0>)
 800d4bc:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00a      	beq.n	800d4da <taskComputeRc+0x45a>
 800d4c4:	4b28      	ldr	r3, [pc, #160]	; (800d568 <taskComputeRc+0x4e8>)
 800d4c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d106      	bne.n	800d4da <taskComputeRc+0x45a>
 800d4cc:	4b27      	ldr	r3, [pc, #156]	; (800d56c <taskComputeRc+0x4ec>)
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2b7e      	cmp	r3, #126	; 0x7e
 800d4d2:	d102      	bne.n	800d4da <taskComputeRc+0x45a>
                    mwArm();
 800d4d4:	f7ff fa6e 	bl	800c9b4 <mwArm>
 800d4d8:	e00f      	b.n	800d4fa <taskComputeRc+0x47a>
                // Calibrating Acc
                else if (rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_CE)
 800d4da:	4b24      	ldr	r3, [pc, #144]	; (800d56c <taskComputeRc+0x4ec>)
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	2b97      	cmp	r3, #151	; 0x97
 800d4e0:	d104      	bne.n	800d4ec <taskComputeRc+0x46c>
                    calibratingA = CALIBRATING_ACC_CYCLES;
 800d4e2:	4b2a      	ldr	r3, [pc, #168]	; (800d58c <taskComputeRc+0x50c>)
 800d4e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d4e8:	801a      	strh	r2, [r3, #0]
 800d4ea:	e006      	b.n	800d4fa <taskComputeRc+0x47a>
                // Calibrating Mag
                else if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_CE)
 800d4ec:	4b1f      	ldr	r3, [pc, #124]	; (800d56c <taskComputeRc+0x4ec>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	2ba7      	cmp	r3, #167	; 0xa7
 800d4f2:	d102      	bne.n	800d4fa <taskComputeRc+0x47a>
                    f.CALIBRATE_MAG = 1;
 800d4f4:	4b1b      	ldr	r3, [pc, #108]	; (800d564 <taskComputeRc+0x4e4>)
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	739a      	strb	r2, [r3, #14]
                i = 0;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	613b      	str	r3, [r7, #16]
                // Acc Trim
                if (rcSticks == THR_HI + YAW_CE + PIT_HI + ROL_CE) {
 800d4fe:	4b1b      	ldr	r3, [pc, #108]	; (800d56c <taskComputeRc+0x4ec>)
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	2bbb      	cmp	r3, #187	; 0xbb
 800d504:	d10b      	bne.n	800d51e <taskComputeRc+0x49e>
                    cfg.angleTrim[PITCH] += 2;
 800d506:	4b18      	ldr	r3, [pc, #96]	; (800d568 <taskComputeRc+0x4e8>)
 800d508:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	3302      	adds	r3, #2
 800d510:	b29b      	uxth	r3, r3
 800d512:	b21a      	sxth	r2, r3
 800d514:	4b14      	ldr	r3, [pc, #80]	; (800d568 <taskComputeRc+0x4e8>)
 800d516:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d518:	2301      	movs	r3, #1
 800d51a:	613b      	str	r3, [r7, #16]
 800d51c:	e047      	b.n	800d5ae <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_LO + ROL_CE) {
 800d51e:	4b13      	ldr	r3, [pc, #76]	; (800d56c <taskComputeRc+0x4ec>)
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	2bb7      	cmp	r3, #183	; 0xb7
 800d524:	d10b      	bne.n	800d53e <taskComputeRc+0x4be>
                    cfg.angleTrim[PITCH] -= 2;
 800d526:	4b10      	ldr	r3, [pc, #64]	; (800d568 <taskComputeRc+0x4e8>)
 800d528:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	3b02      	subs	r3, #2
 800d530:	b29b      	uxth	r3, r3
 800d532:	b21a      	sxth	r2, r3
 800d534:	4b0c      	ldr	r3, [pc, #48]	; (800d568 <taskComputeRc+0x4e8>)
 800d536:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d538:	2301      	movs	r3, #1
 800d53a:	613b      	str	r3, [r7, #16]
 800d53c:	e037      	b.n	800d5ae <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_HI) {
 800d53e:	4b0b      	ldr	r3, [pc, #44]	; (800d56c <taskComputeRc+0x4ec>)
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	2bbe      	cmp	r3, #190	; 0xbe
 800d544:	d124      	bne.n	800d590 <taskComputeRc+0x510>
                    cfg.angleTrim[ROLL] += 2;
 800d546:	4b08      	ldr	r3, [pc, #32]	; (800d568 <taskComputeRc+0x4e8>)
 800d548:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	3302      	adds	r3, #2
 800d550:	b29b      	uxth	r3, r3
 800d552:	b21a      	sxth	r2, r3
 800d554:	4b04      	ldr	r3, [pc, #16]	; (800d568 <taskComputeRc+0x4e8>)
 800d556:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d558:	2301      	movs	r3, #1
 800d55a:	613b      	str	r3, [r7, #16]
 800d55c:	e027      	b.n	800d5ae <taskComputeRc+0x52e>
 800d55e:	bf00      	nop
 800d560:	20001945 	.word	0x20001945
 800d564:	20001628 	.word	0x20001628
 800d568:	20000d18 	.word	0x20000d18
 800d56c:	20001944 	.word	0x20001944
 800d570:	200007ac 	.word	0x200007ac
 800d574:	200019b8 	.word	0x200019b8
 800d578:	200019b6 	.word	0x200019b6
 800d57c:	200019ba 	.word	0x200019ba
 800d580:	200017c5 	.word	0x200017c5
 800d584:	200017c6 	.word	0x200017c6
 800d588:	200017c4 	.word	0x200017c4
 800d58c:	200019b4 	.word	0x200019b4
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_LO) {
 800d590:	4b9e      	ldr	r3, [pc, #632]	; (800d80c <taskComputeRc+0x78c>)
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	2bbd      	cmp	r3, #189	; 0xbd
 800d596:	d10a      	bne.n	800d5ae <taskComputeRc+0x52e>
                    cfg.angleTrim[ROLL] -= 2;
 800d598:	4b9d      	ldr	r3, [pc, #628]	; (800d810 <taskComputeRc+0x790>)
 800d59a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	3b02      	subs	r3, #2
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	b21a      	sxth	r2, r3
 800d5a6:	4b9a      	ldr	r3, [pc, #616]	; (800d810 <taskComputeRc+0x790>)
 800d5a8:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	613b      	str	r3, [r7, #16]
                }
                if (i) {
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d006      	beq.n	800d5c2 <taskComputeRc+0x542>
                    writeEEPROM(1, true);
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	2001      	movs	r0, #1
 800d5b8:	f7f9 f888 	bl	80066cc <writeEEPROM>
                    rcDelayCommand = 0; // allow autorepetition
 800d5bc:	4b95      	ldr	r3, [pc, #596]	; (800d814 <taskComputeRc+0x794>)
 800d5be:	2200      	movs	r2, #0
 800d5c0:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800d5c2:	2004      	movs	r0, #4
 800d5c4:	f7f9 fc64 	bl	8006e90 <feature>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d041      	beq.n	800d652 <taskComputeRc+0x5d2>
            if (AccInflightCalibrationArmed && f.ARMED && rcData[THROTTLE] > mcfg.mincheck && !rcOptions[BOXARM]) {   // Copter is airborne and you are turning it off via boxarm : start measurement
 800d5ce:	4b92      	ldr	r3, [pc, #584]	; (800d818 <taskComputeRc+0x798>)
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d016      	beq.n	800d604 <taskComputeRc+0x584>
 800d5d6:	4b91      	ldr	r3, [pc, #580]	; (800d81c <taskComputeRc+0x79c>)
 800d5d8:	785b      	ldrb	r3, [r3, #1]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d012      	beq.n	800d604 <taskComputeRc+0x584>
 800d5de:	4b90      	ldr	r3, [pc, #576]	; (800d820 <taskComputeRc+0x7a0>)
 800d5e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	4b8f      	ldr	r3, [pc, #572]	; (800d824 <taskComputeRc+0x7a4>)
 800d5e8:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	dd09      	ble.n	800d604 <taskComputeRc+0x584>
 800d5f0:	4b8d      	ldr	r3, [pc, #564]	; (800d828 <taskComputeRc+0x7a8>)
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d105      	bne.n	800d604 <taskComputeRc+0x584>
                InflightcalibratingA = 50;
 800d5f8:	4b8c      	ldr	r3, [pc, #560]	; (800d82c <taskComputeRc+0x7ac>)
 800d5fa:	2232      	movs	r2, #50	; 0x32
 800d5fc:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationArmed = false;
 800d5fe:	4b86      	ldr	r3, [pc, #536]	; (800d818 <taskComputeRc+0x798>)
 800d600:	2200      	movs	r2, #0
 800d602:	701a      	strb	r2, [r3, #0]
            }
            if (rcOptions[BOXCALIB]) {      // Use the Calib Option to activate : Calib = TRUE Meausrement started, Land and Calib = 0 measurement stored
 800d604:	4b88      	ldr	r3, [pc, #544]	; (800d828 <taskComputeRc+0x7a8>)
 800d606:	7c5b      	ldrb	r3, [r3, #17]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d014      	beq.n	800d636 <taskComputeRc+0x5b6>
                if (!AccInflightCalibrationActive && !AccInflightCalibrationMeasurementDone)
 800d60c:	4b88      	ldr	r3, [pc, #544]	; (800d830 <taskComputeRc+0x7b0>)
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	f083 0301 	eor.w	r3, r3, #1
 800d614:	b2db      	uxtb	r3, r3
 800d616:	2b00      	cmp	r3, #0
 800d618:	d009      	beq.n	800d62e <taskComputeRc+0x5ae>
 800d61a:	4b86      	ldr	r3, [pc, #536]	; (800d834 <taskComputeRc+0x7b4>)
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	f083 0301 	eor.w	r3, r3, #1
 800d622:	b2db      	uxtb	r3, r3
 800d624:	2b00      	cmp	r3, #0
 800d626:	d002      	beq.n	800d62e <taskComputeRc+0x5ae>
                    InflightcalibratingA = 50;
 800d628:	4b80      	ldr	r3, [pc, #512]	; (800d82c <taskComputeRc+0x7ac>)
 800d62a:	2232      	movs	r2, #50	; 0x32
 800d62c:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationActive = true;
 800d62e:	4b80      	ldr	r3, [pc, #512]	; (800d830 <taskComputeRc+0x7b0>)
 800d630:	2201      	movs	r2, #1
 800d632:	701a      	strb	r2, [r3, #0]
 800d634:	e00d      	b.n	800d652 <taskComputeRc+0x5d2>
            } else if (AccInflightCalibrationMeasurementDone && !f.ARMED) {
 800d636:	4b7f      	ldr	r3, [pc, #508]	; (800d834 <taskComputeRc+0x7b4>)
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d009      	beq.n	800d652 <taskComputeRc+0x5d2>
 800d63e:	4b77      	ldr	r3, [pc, #476]	; (800d81c <taskComputeRc+0x79c>)
 800d640:	785b      	ldrb	r3, [r3, #1]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d105      	bne.n	800d652 <taskComputeRc+0x5d2>
                AccInflightCalibrationMeasurementDone = false;
 800d646:	4b7b      	ldr	r3, [pc, #492]	; (800d834 <taskComputeRc+0x7b4>)
 800d648:	2200      	movs	r2, #0
 800d64a:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationSavetoEEProm = true;
 800d64c:	4b7a      	ldr	r3, [pc, #488]	; (800d838 <taskComputeRc+0x7b8>)
 800d64e:	2201      	movs	r2, #1
 800d650:	701a      	strb	r2, [r3, #0]
            }
        }

        // Check AUX switches

        for (i = 0; i < core.numAuxChannels; i++)
 800d652:	2300      	movs	r3, #0
 800d654:	613b      	str	r3, [r7, #16]
 800d656:	e04a      	b.n	800d6ee <taskComputeRc+0x66e>
            auxState |= (rcData[AUX1 + i] < 1300) << (3 * i) | (1300 < rcData[AUX1 + i] && rcData[AUX1 + i] < 1700) << (3 * i + 1) | (rcData[AUX1 + i] > 1700) << (3 * i + 2);
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	3304      	adds	r3, #4
 800d65c:	4a70      	ldr	r2, [pc, #448]	; (800d820 <taskComputeRc+0x7a0>)
 800d65e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d662:	f240 5213 	movw	r2, #1299	; 0x513
 800d666:	4293      	cmp	r3, r2
 800d668:	bfd4      	ite	le
 800d66a:	2301      	movle	r3, #1
 800d66c:	2300      	movgt	r3, #0
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	4619      	mov	r1, r3
 800d672:	693a      	ldr	r2, [r7, #16]
 800d674:	4613      	mov	r3, r2
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	4413      	add	r3, r2
 800d67a:	4099      	lsls	r1, r3
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	3304      	adds	r3, #4
 800d680:	4a67      	ldr	r2, [pc, #412]	; (800d820 <taskComputeRc+0x7a0>)
 800d682:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d686:	f240 5214 	movw	r2, #1300	; 0x514
 800d68a:	4293      	cmp	r3, r2
 800d68c:	dd0a      	ble.n	800d6a4 <taskComputeRc+0x624>
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	3304      	adds	r3, #4
 800d692:	4a63      	ldr	r2, [pc, #396]	; (800d820 <taskComputeRc+0x7a0>)
 800d694:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d698:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800d69c:	4293      	cmp	r3, r2
 800d69e:	dc01      	bgt.n	800d6a4 <taskComputeRc+0x624>
 800d6a0:	2001      	movs	r0, #1
 800d6a2:	e000      	b.n	800d6a6 <taskComputeRc+0x626>
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	693a      	ldr	r2, [r7, #16]
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	005b      	lsls	r3, r3, #1
 800d6ac:	4413      	add	r3, r2
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	fa00 f303 	lsl.w	r3, r0, r3
 800d6b4:	4319      	orrs	r1, r3
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	3304      	adds	r3, #4
 800d6ba:	4a59      	ldr	r2, [pc, #356]	; (800d820 <taskComputeRc+0x7a0>)
 800d6bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d6c0:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	bfcc      	ite	gt
 800d6c8:	2301      	movgt	r3, #1
 800d6ca:	2300      	movle	r3, #0
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	693a      	ldr	r2, [r7, #16]
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	005b      	lsls	r3, r3, #1
 800d6d6:	4413      	add	r3, r2
 800d6d8:	3302      	adds	r3, #2
 800d6da:	fa00 f303 	lsl.w	r3, r0, r3
 800d6de:	430b      	orrs	r3, r1
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < core.numAuxChannels; i++)
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	613b      	str	r3, [r7, #16]
 800d6ee:	4b53      	ldr	r3, [pc, #332]	; (800d83c <taskComputeRc+0x7bc>)
 800d6f0:	7d1b      	ldrb	r3, [r3, #20]
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	dbae      	blt.n	800d658 <taskComputeRc+0x5d8>
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	613b      	str	r3, [r7, #16]
 800d6fe:	e015      	b.n	800d72c <taskComputeRc+0x6ac>
            rcOptions[i] = (auxState & cfg.activate[i]) > 0;
 800d700:	4a43      	ldr	r2, [pc, #268]	; (800d810 <taskComputeRc+0x790>)
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	3312      	adds	r3, #18
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	4413      	add	r3, r2
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	4013      	ands	r3, r2
 800d710:	2b00      	cmp	r3, #0
 800d712:	bf14      	ite	ne
 800d714:	2301      	movne	r3, #1
 800d716:	2300      	moveq	r3, #0
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	4619      	mov	r1, r3
 800d71c:	4a42      	ldr	r2, [pc, #264]	; (800d828 <taskComputeRc+0x7a8>)
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	4413      	add	r3, r2
 800d722:	460a      	mov	r2, r1
 800d724:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	3301      	adds	r3, #1
 800d72a:	613b      	str	r3, [r7, #16]
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	2b18      	cmp	r3, #24
 800d730:	dde6      	ble.n	800d700 <taskComputeRc+0x680>
        f.CRUISE_MODE = rcOptions[BOXGCRUISE];
 800d732:	4b3d      	ldr	r3, [pc, #244]	; (800d828 <taskComputeRc+0x7a8>)
 800d734:	7e1a      	ldrb	r2, [r3, #24]
 800d736:	4b39      	ldr	r3, [pc, #228]	; (800d81c <taskComputeRc+0x79c>)
 800d738:	751a      	strb	r2, [r3, #20]
        if (f.CRUISE_MODE) {
 800d73a:	4b38      	ldr	r3, [pc, #224]	; (800d81c <taskComputeRc+0x79c>)
 800d73c:	7d1b      	ldrb	r3, [r3, #20]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d005      	beq.n	800d74e <taskComputeRc+0x6ce>
            rcOptions[BOXGPSHOLD] = true;
 800d742:	4b39      	ldr	r3, [pc, #228]	; (800d828 <taskComputeRc+0x7a8>)
 800d744:	2201      	movs	r2, #1
 800d746:	72da      	strb	r2, [r3, #11]
            rcOptions[BOXHORIZON] = true;
 800d748:	4b37      	ldr	r3, [pc, #220]	; (800d828 <taskComputeRc+0x7a8>)
 800d74a:	2201      	movs	r2, #1
 800d74c:	709a      	strb	r2, [r3, #2]
        }

        // note: if FAILSAFE is disable, failsafeCnt > 5 * FAILSAVE_DELAY is always false
        if ((rcOptions[BOXANGLE] || (failsafeCnt > 5 * cfg.failsafe_delay)) && (sensors(SENSOR_ACC))) {
 800d74e:	4b36      	ldr	r3, [pc, #216]	; (800d828 <taskComputeRc+0x7a8>)
 800d750:	785b      	ldrb	r3, [r3, #1]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10c      	bne.n	800d770 <taskComputeRc+0x6f0>
 800d756:	4b3a      	ldr	r3, [pc, #232]	; (800d840 <taskComputeRc+0x7c0>)
 800d758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d75c:	4619      	mov	r1, r3
 800d75e:	4b2c      	ldr	r3, [pc, #176]	; (800d810 <taskComputeRc+0x790>)
 800d760:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d764:	461a      	mov	r2, r3
 800d766:	4613      	mov	r3, r2
 800d768:	009b      	lsls	r3, r3, #2
 800d76a:	4413      	add	r3, r2
 800d76c:	4299      	cmp	r1, r3
 800d76e:	dd30      	ble.n	800d7d2 <taskComputeRc+0x752>
 800d770:	2002      	movs	r0, #2
 800d772:	f7f9 fb45 	bl	8006e00 <sensors>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d02a      	beq.n	800d7d2 <taskComputeRc+0x752>
            // bumpless transfer to Level mode
            if (!f.ANGLE_MODE) {
 800d77c:	4b27      	ldr	r3, [pc, #156]	; (800d81c <taskComputeRc+0x79c>)
 800d77e:	78db      	ldrb	r3, [r3, #3]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d108      	bne.n	800d796 <taskComputeRc+0x716>
                errorAngleI[ROLL] = 0;
 800d784:	4b2f      	ldr	r3, [pc, #188]	; (800d844 <taskComputeRc+0x7c4>)
 800d786:	2200      	movs	r2, #0
 800d788:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d78a:	4b2e      	ldr	r3, [pc, #184]	; (800d844 <taskComputeRc+0x7c4>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	605a      	str	r2, [r3, #4]
                f.ANGLE_MODE = 1;
 800d790:	4b22      	ldr	r3, [pc, #136]	; (800d81c <taskComputeRc+0x79c>)
 800d792:	2201      	movs	r2, #1
 800d794:	70da      	strb	r2, [r3, #3]
            }
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d796:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d79a:	f7f9 fb79 	bl	8006e90 <feature>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d01d      	beq.n	800d7e0 <taskComputeRc+0x760>
                if ((failsafeCnt > 5 * cfg.failsafe_delay) && sensors(SENSOR_GPS)) {
 800d7a4:	4b26      	ldr	r3, [pc, #152]	; (800d840 <taskComputeRc+0x7c0>)
 800d7a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	4b18      	ldr	r3, [pc, #96]	; (800d810 <taskComputeRc+0x790>)
 800d7ae:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	4613      	mov	r3, r2
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	4413      	add	r3, r2
 800d7ba:	4299      	cmp	r1, r3
 800d7bc:	dd10      	ble.n	800d7e0 <taskComputeRc+0x760>
 800d7be:	2020      	movs	r0, #32
 800d7c0:	f7f9 fb1e 	bl	8006e00 <sensors>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00a      	beq.n	800d7e0 <taskComputeRc+0x760>
                    f.FW_FAILSAFE_RTH_ENABLE = 1;
 800d7ca:	4b14      	ldr	r3, [pc, #80]	; (800d81c <taskComputeRc+0x79c>)
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	749a      	strb	r2, [r3, #18]
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d7d0:	e006      	b.n	800d7e0 <taskComputeRc+0x760>
                }
            }
        } else {
            f.ANGLE_MODE = 0;   // failsafe support
 800d7d2:	4b12      	ldr	r3, [pc, #72]	; (800d81c <taskComputeRc+0x79c>)
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	70da      	strb	r2, [r3, #3]
            f.FW_FAILSAFE_RTH_ENABLE = 0;
 800d7d8:	4b10      	ldr	r3, [pc, #64]	; (800d81c <taskComputeRc+0x79c>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	749a      	strb	r2, [r3, #18]
 800d7de:	e000      	b.n	800d7e2 <taskComputeRc+0x762>
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d7e0:	bf00      	nop
        }

        if (rcOptions[BOXHORIZON]) {
 800d7e2:	4b11      	ldr	r3, [pc, #68]	; (800d828 <taskComputeRc+0x7a8>)
 800d7e4:	789b      	ldrb	r3, [r3, #2]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d02e      	beq.n	800d848 <taskComputeRc+0x7c8>
            f.ANGLE_MODE = 0;
 800d7ea:	4b0c      	ldr	r3, [pc, #48]	; (800d81c <taskComputeRc+0x79c>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	70da      	strb	r2, [r3, #3]
            if (!f.HORIZON_MODE) {
 800d7f0:	4b0a      	ldr	r3, [pc, #40]	; (800d81c <taskComputeRc+0x79c>)
 800d7f2:	791b      	ldrb	r3, [r3, #4]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d12a      	bne.n	800d84e <taskComputeRc+0x7ce>
                errorAngleI[ROLL] = 0;
 800d7f8:	4b12      	ldr	r3, [pc, #72]	; (800d844 <taskComputeRc+0x7c4>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d7fe:	4b11      	ldr	r3, [pc, #68]	; (800d844 <taskComputeRc+0x7c4>)
 800d800:	2200      	movs	r2, #0
 800d802:	605a      	str	r2, [r3, #4]
                f.HORIZON_MODE = 1;
 800d804:	4b05      	ldr	r3, [pc, #20]	; (800d81c <taskComputeRc+0x79c>)
 800d806:	2201      	movs	r2, #1
 800d808:	711a      	strb	r2, [r3, #4]
 800d80a:	e020      	b.n	800d84e <taskComputeRc+0x7ce>
 800d80c:	20001944 	.word	0x20001944
 800d810:	20000d18 	.word	0x20000d18
 800d814:	20001945 	.word	0x20001945
 800d818:	200017c4 	.word	0x200017c4
 800d81c:	20001628 	.word	0x20001628
 800d820:	20001660 	.word	0x20001660
 800d824:	200007ac 	.word	0x200007ac
 800d828:	200016c8 	.word	0x200016c8
 800d82c:	200017c8 	.word	0x200017c8
 800d830:	200017c7 	.word	0x200017c7
 800d834:	200017c5 	.word	0x200017c5
 800d838:	200017c6 	.word	0x200017c6
 800d83c:	200006f4 	.word	0x200006f4
 800d840:	2000165a 	.word	0x2000165a
 800d844:	20001840 	.word	0x20001840
            }
        } else {
            f.HORIZON_MODE = 0;
 800d848:	4b9c      	ldr	r3, [pc, #624]	; (800dabc <taskComputeRc+0xa3c>)
 800d84a:	2200      	movs	r2, #0
 800d84c:	711a      	strb	r2, [r3, #4]
        }

        if ((rcOptions[BOXARM]) == 0)
 800d84e:	4b9c      	ldr	r3, [pc, #624]	; (800dac0 <taskComputeRc+0xa40>)
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d102      	bne.n	800d85c <taskComputeRc+0x7dc>
            f.OK_TO_ARM = 1;
 800d856:	4b99      	ldr	r3, [pc, #612]	; (800dabc <taskComputeRc+0xa3c>)
 800d858:	2201      	movs	r2, #1
 800d85a:	701a      	strb	r2, [r3, #0]
        if (f.ANGLE_MODE || f.HORIZON_MODE) {
 800d85c:	4b97      	ldr	r3, [pc, #604]	; (800dabc <taskComputeRc+0xa3c>)
 800d85e:	78db      	ldrb	r3, [r3, #3]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d103      	bne.n	800d86c <taskComputeRc+0x7ec>
 800d864:	4b95      	ldr	r3, [pc, #596]	; (800dabc <taskComputeRc+0xa3c>)
 800d866:	791b      	ldrb	r3, [r3, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d003      	beq.n	800d874 <taskComputeRc+0x7f4>
            actLed1State(ON);
 800d86c:	2001      	movs	r0, #1
 800d86e:	f7f4 fc1f 	bl	80020b0 <actLed1State>
 800d872:	e002      	b.n	800d87a <taskComputeRc+0x7fa>
        } else {
            actLed1State(OFF);
 800d874:	2000      	movs	r0, #0
 800d876:	f7f4 fc1b 	bl	80020b0 <actLed1State>
        }

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800d87a:	2004      	movs	r0, #4
 800d87c:	f7f9 fac0 	bl	8006e00 <sensors>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	d033      	beq.n	800d8ee <taskComputeRc+0x86e>
            // Baro alt hold activate
            if (rcOptions[BOXBARO]) {
 800d886:	4b8e      	ldr	r3, [pc, #568]	; (800dac0 <taskComputeRc+0xa40>)
 800d888:	78db      	ldrb	r3, [r3, #3]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d016      	beq.n	800d8bc <taskComputeRc+0x83c>
                if (!f.BARO_MODE) {
 800d88e:	4b8b      	ldr	r3, [pc, #556]	; (800dabc <taskComputeRc+0xa3c>)
 800d890:	799b      	ldrb	r3, [r3, #6]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d115      	bne.n	800d8c2 <taskComputeRc+0x842>
                    f.BARO_MODE = 1;
 800d896:	4b89      	ldr	r3, [pc, #548]	; (800dabc <taskComputeRc+0xa3c>)
 800d898:	2201      	movs	r2, #1
 800d89a:	719a      	strb	r2, [r3, #6]
                    AltHold = EstAlt;
 800d89c:	4b89      	ldr	r3, [pc, #548]	; (800dac4 <taskComputeRc+0xa44>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a89      	ldr	r2, [pc, #548]	; (800dac8 <taskComputeRc+0xa48>)
 800d8a2:	6013      	str	r3, [r2, #0]
                    initialThrottleHold = rcCommand[THROTTLE];
 800d8a4:	4b89      	ldr	r3, [pc, #548]	; (800dacc <taskComputeRc+0xa4c>)
 800d8a6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d8aa:	4b89      	ldr	r3, [pc, #548]	; (800dad0 <taskComputeRc+0xa50>)
 800d8ac:	801a      	strh	r2, [r3, #0]
                    errorVelocityI = 0;
 800d8ae:	4b89      	ldr	r3, [pc, #548]	; (800dad4 <taskComputeRc+0xa54>)
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	601a      	str	r2, [r3, #0]
                    BaroPID = 0;
 800d8b4:	4b88      	ldr	r3, [pc, #544]	; (800dad8 <taskComputeRc+0xa58>)
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	601a      	str	r2, [r3, #0]
 800d8ba:	e002      	b.n	800d8c2 <taskComputeRc+0x842>
                }
            } else {
                f.BARO_MODE = 0;
 800d8bc:	4b7f      	ldr	r3, [pc, #508]	; (800dabc <taskComputeRc+0xa3c>)
 800d8be:	2200      	movs	r2, #0
 800d8c0:	719a      	strb	r2, [r3, #6]
            }
            // Vario signalling activate
            if (feature(FEATURE_VARIO)) {
 800d8c2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d8c6:	f7f9 fae3 	bl	8006e90 <feature>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00e      	beq.n	800d8ee <taskComputeRc+0x86e>
                if (rcOptions[BOXVARIO]) {
 800d8d0:	4b7b      	ldr	r3, [pc, #492]	; (800dac0 <taskComputeRc+0xa40>)
 800d8d2:	791b      	ldrb	r3, [r3, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d007      	beq.n	800d8e8 <taskComputeRc+0x868>
                    if (!f.VARIO_MODE) {
 800d8d8:	4b78      	ldr	r3, [pc, #480]	; (800dabc <taskComputeRc+0xa3c>)
 800d8da:	7bdb      	ldrb	r3, [r3, #15]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d106      	bne.n	800d8ee <taskComputeRc+0x86e>
                        f.VARIO_MODE = 1;
 800d8e0:	4b76      	ldr	r3, [pc, #472]	; (800dabc <taskComputeRc+0xa3c>)
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	73da      	strb	r2, [r3, #15]
 800d8e6:	e002      	b.n	800d8ee <taskComputeRc+0x86e>
                    }
                } else {
                    f.VARIO_MODE = 0;
 800d8e8:	4b74      	ldr	r3, [pc, #464]	; (800dabc <taskComputeRc+0xa3c>)
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	73da      	strb	r2, [r3, #15]
            }
        }
#endif

#ifdef  MAG
        if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800d8ee:	2002      	movs	r0, #2
 800d8f0:	f7f9 fa86 	bl	8006e00 <sensors>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d105      	bne.n	800d906 <taskComputeRc+0x886>
 800d8fa:	2008      	movs	r0, #8
 800d8fc:	f7f9 fa80 	bl	8006e00 <sensors>
 800d900:	4603      	mov	r3, r0
 800d902:	2b00      	cmp	r3, #0
 800d904:	d02b      	beq.n	800d95e <taskComputeRc+0x8de>
            if (rcOptions[BOXMAG]) {
 800d906:	4b6e      	ldr	r3, [pc, #440]	; (800dac0 <taskComputeRc+0xa40>)
 800d908:	795b      	ldrb	r3, [r3, #5]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00c      	beq.n	800d928 <taskComputeRc+0x8a8>
                if (!f.MAG_MODE) {
 800d90e:	4b6b      	ldr	r3, [pc, #428]	; (800dabc <taskComputeRc+0xa3c>)
 800d910:	795b      	ldrb	r3, [r3, #5]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d10b      	bne.n	800d92e <taskComputeRc+0x8ae>
                    f.MAG_MODE = 1;
 800d916:	4b69      	ldr	r3, [pc, #420]	; (800dabc <taskComputeRc+0xa3c>)
 800d918:	2201      	movs	r2, #1
 800d91a:	715a      	strb	r2, [r3, #5]
                    magHold = heading;
 800d91c:	4b6f      	ldr	r3, [pc, #444]	; (800dadc <taskComputeRc+0xa5c>)
 800d91e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d922:	4b6f      	ldr	r3, [pc, #444]	; (800dae0 <taskComputeRc+0xa60>)
 800d924:	801a      	strh	r2, [r3, #0]
 800d926:	e002      	b.n	800d92e <taskComputeRc+0x8ae>
                }
            } else {
                f.MAG_MODE = 0;
 800d928:	4b64      	ldr	r3, [pc, #400]	; (800dabc <taskComputeRc+0xa3c>)
 800d92a:	2200      	movs	r2, #0
 800d92c:	715a      	strb	r2, [r3, #5]
            }
            if (rcOptions[BOXHEADFREE]) {
 800d92e:	4b64      	ldr	r3, [pc, #400]	; (800dac0 <taskComputeRc+0xa40>)
 800d930:	799b      	ldrb	r3, [r3, #6]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d007      	beq.n	800d946 <taskComputeRc+0x8c6>
                if (!f.HEADFREE_MODE) {
 800d936:	4b61      	ldr	r3, [pc, #388]	; (800dabc <taskComputeRc+0xa3c>)
 800d938:	7a5b      	ldrb	r3, [r3, #9]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d106      	bne.n	800d94c <taskComputeRc+0x8cc>
                    f.HEADFREE_MODE = 1;
 800d93e:	4b5f      	ldr	r3, [pc, #380]	; (800dabc <taskComputeRc+0xa3c>)
 800d940:	2201      	movs	r2, #1
 800d942:	725a      	strb	r2, [r3, #9]
 800d944:	e002      	b.n	800d94c <taskComputeRc+0x8cc>
                }
            } else {
                f.HEADFREE_MODE = 0;
 800d946:	4b5d      	ldr	r3, [pc, #372]	; (800dabc <taskComputeRc+0xa3c>)
 800d948:	2200      	movs	r2, #0
 800d94a:	725a      	strb	r2, [r3, #9]
            }
            if (rcOptions[BOXHEADADJ]) {
 800d94c:	4b5c      	ldr	r3, [pc, #368]	; (800dac0 <taskComputeRc+0xa40>)
 800d94e:	79db      	ldrb	r3, [r3, #7]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d004      	beq.n	800d95e <taskComputeRc+0x8de>
                headFreeModeHold = heading; // acquire new heading
 800d954:	4b61      	ldr	r3, [pc, #388]	; (800dadc <taskComputeRc+0xa5c>)
 800d956:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d95a:	4b62      	ldr	r3, [pc, #392]	; (800dae4 <taskComputeRc+0xa64>)
 800d95c:	801a      	strh	r2, [r3, #0]
            }
        }
#endif

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800d95e:	2020      	movs	r0, #32
 800d960:	f7f9 fa4e 	bl	8006e00 <sensors>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	f000 809c 	beq.w	800daa4 <taskComputeRc+0xa24>
            if (f.GPS_FIX && GPS_numSat >= 5) {
 800d96c:	4b53      	ldr	r3, [pc, #332]	; (800dabc <taskComputeRc+0xa3c>)
 800d96e:	7adb      	ldrb	r3, [r3, #11]
 800d970:	2b00      	cmp	r3, #0
 800d972:	f000 808e 	beq.w	800da92 <taskComputeRc+0xa12>
 800d976:	4b5c      	ldr	r3, [pc, #368]	; (800dae8 <taskComputeRc+0xa68>)
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	2b04      	cmp	r3, #4
 800d97c:	f240 8089 	bls.w	800da92 <taskComputeRc+0xa12>
                if (nav_mode != NAV_MODE_NONE && (!f.HORIZON_MODE && !f.ANGLE_MODE))
 800d980:	4b5a      	ldr	r3, [pc, #360]	; (800daec <taskComputeRc+0xa6c>)
 800d982:	f993 3000 	ldrsb.w	r3, [r3]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00a      	beq.n	800d9a0 <taskComputeRc+0x920>
 800d98a:	4b4c      	ldr	r3, [pc, #304]	; (800dabc <taskComputeRc+0xa3c>)
 800d98c:	791b      	ldrb	r3, [r3, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d106      	bne.n	800d9a0 <taskComputeRc+0x920>
 800d992:	4b4a      	ldr	r3, [pc, #296]	; (800dabc <taskComputeRc+0xa3c>)
 800d994:	78db      	ldrb	r3, [r3, #3]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d102      	bne.n	800d9a0 <taskComputeRc+0x920>
                    f.ANGLE_MODE = true; // Force a stable mode in GPS Mode
 800d99a:	4b48      	ldr	r3, [pc, #288]	; (800dabc <taskComputeRc+0xa3c>)
 800d99c:	2201      	movs	r2, #1
 800d99e:	70da      	strb	r2, [r3, #3]

                // if both GPS_HOME & GPS_HOLD are checked => GPS_HOME is the priority
                if (rcOptions[BOXGPSHOME] || f.FW_FAILSAFE_RTH_ENABLE ) {
 800d9a0:	4b47      	ldr	r3, [pc, #284]	; (800dac0 <taskComputeRc+0xa40>)
 800d9a2:	7a9b      	ldrb	r3, [r3, #10]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d103      	bne.n	800d9b0 <taskComputeRc+0x930>
 800d9a8:	4b44      	ldr	r3, [pc, #272]	; (800dabc <taskComputeRc+0xa3c>)
 800d9aa:	7c9b      	ldrb	r3, [r3, #18]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d01c      	beq.n	800d9ea <taskComputeRc+0x96a>
                    if (!f.GPS_HOME_MODE) {
 800d9b0:	4b42      	ldr	r3, [pc, #264]	; (800dabc <taskComputeRc+0xa3c>)
 800d9b2:	79db      	ldrb	r3, [r3, #7]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d168      	bne.n	800da8a <taskComputeRc+0xa0a>
                        f.GPS_HOME_MODE = 1;
 800d9b8:	4b40      	ldr	r3, [pc, #256]	; (800dabc <taskComputeRc+0xa3c>)
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	71da      	strb	r2, [r3, #7]
                        f.GPS_HOLD_MODE = 0;
 800d9be:	4b3f      	ldr	r3, [pc, #252]	; (800dabc <taskComputeRc+0xa3c>)
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	721a      	strb	r2, [r3, #8]
                        GPSNavReset = 0;
 800d9c4:	4b4a      	ldr	r3, [pc, #296]	; (800daf0 <taskComputeRc+0xa70>)
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	701a      	strb	r2, [r3, #0]
                        GPS_set_next_wp(&GPS_home[LAT], &GPS_home[LON]);
 800d9ca:	494a      	ldr	r1, [pc, #296]	; (800daf4 <taskComputeRc+0xa74>)
 800d9cc:	484a      	ldr	r0, [pc, #296]	; (800daf8 <taskComputeRc+0xa78>)
 800d9ce:	f7fb fa2b 	bl	8008e28 <GPS_set_next_wp>
                        nav_mode = NAV_MODE_WP;
 800d9d2:	4b46      	ldr	r3, [pc, #280]	; (800daec <taskComputeRc+0xa6c>)
 800d9d4:	2202      	movs	r2, #2
 800d9d6:	701a      	strb	r2, [r3, #0]
                        GPS_hold[ALT] = GPS_altitude;
 800d9d8:	4b48      	ldr	r3, [pc, #288]	; (800dafc <taskComputeRc+0xa7c>)
 800d9da:	881b      	ldrh	r3, [r3, #0]
 800d9dc:	461a      	mov	r2, r3
 800d9de:	4b48      	ldr	r3, [pc, #288]	; (800db00 <taskComputeRc+0xa80>)
 800d9e0:	609a      	str	r2, [r3, #8]
                        f.CLIMBOUT_FW = 1;
 800d9e2:	4b36      	ldr	r3, [pc, #216]	; (800dabc <taskComputeRc+0xa3c>)
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	74da      	strb	r2, [r3, #19]
                    if (!f.GPS_HOME_MODE) {
 800d9e8:	e04f      	b.n	800da8a <taskComputeRc+0xa0a>
                    }
                } else {
                    f.GPS_HOME_MODE = 0;
 800d9ea:	4b34      	ldr	r3, [pc, #208]	; (800dabc <taskComputeRc+0xa3c>)
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	71da      	strb	r2, [r3, #7]
                    if (rcOptions[BOXGPSHOLD] && abs(rcCommand[ROLL]) < cfg.ap_mode && abs(rcCommand[PITCH]) < cfg.ap_mode) {
 800d9f0:	4b33      	ldr	r3, [pc, #204]	; (800dac0 <taskComputeRc+0xa40>)
 800d9f2:	7adb      	ldrb	r3, [r3, #11]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d039      	beq.n	800da6c <taskComputeRc+0x9ec>
 800d9f8:	4b34      	ldr	r3, [pc, #208]	; (800dacc <taskComputeRc+0xa4c>)
 800d9fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	bfb8      	it	lt
 800da02:	425b      	neglt	r3, r3
 800da04:	b29a      	uxth	r2, r3
 800da06:	4b3f      	ldr	r3, [pc, #252]	; (800db04 <taskComputeRc+0xa84>)
 800da08:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d22d      	bcs.n	800da6c <taskComputeRc+0x9ec>
 800da10:	4b2e      	ldr	r3, [pc, #184]	; (800dacc <taskComputeRc+0xa4c>)
 800da12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da16:	2b00      	cmp	r3, #0
 800da18:	bfb8      	it	lt
 800da1a:	425b      	neglt	r3, r3
 800da1c:	b29a      	uxth	r2, r3
 800da1e:	4b39      	ldr	r3, [pc, #228]	; (800db04 <taskComputeRc+0xa84>)
 800da20:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800da24:	429a      	cmp	r2, r3
 800da26:	d221      	bcs.n	800da6c <taskComputeRc+0x9ec>
                        if (!f.GPS_HOLD_MODE) {
 800da28:	4b24      	ldr	r3, [pc, #144]	; (800dabc <taskComputeRc+0xa3c>)
 800da2a:	7a1b      	ldrb	r3, [r3, #8]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d12c      	bne.n	800da8a <taskComputeRc+0xa0a>
                            f.GPS_HOLD_MODE = 1;
 800da30:	4b22      	ldr	r3, [pc, #136]	; (800dabc <taskComputeRc+0xa3c>)
 800da32:	2201      	movs	r2, #1
 800da34:	721a      	strb	r2, [r3, #8]
                            GPSNavReset = 0;
 800da36:	4b2e      	ldr	r3, [pc, #184]	; (800daf0 <taskComputeRc+0xa70>)
 800da38:	2200      	movs	r2, #0
 800da3a:	701a      	strb	r2, [r3, #0]
                            GPS_hold[LAT] = GPS_coord[LAT];
 800da3c:	4b32      	ldr	r3, [pc, #200]	; (800db08 <taskComputeRc+0xa88>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a2f      	ldr	r2, [pc, #188]	; (800db00 <taskComputeRc+0xa80>)
 800da42:	6013      	str	r3, [r2, #0]
                            GPS_hold[LON] = GPS_coord[LON];
 800da44:	4b30      	ldr	r3, [pc, #192]	; (800db08 <taskComputeRc+0xa88>)
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	4a2d      	ldr	r2, [pc, #180]	; (800db00 <taskComputeRc+0xa80>)
 800da4a:	6053      	str	r3, [r2, #4]
                            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 800da4c:	492f      	ldr	r1, [pc, #188]	; (800db0c <taskComputeRc+0xa8c>)
 800da4e:	482c      	ldr	r0, [pc, #176]	; (800db00 <taskComputeRc+0xa80>)
 800da50:	f7fb f9ea 	bl	8008e28 <GPS_set_next_wp>
                            nav_mode = NAV_MODE_POSHOLD;
 800da54:	4b25      	ldr	r3, [pc, #148]	; (800daec <taskComputeRc+0xa6c>)
 800da56:	2201      	movs	r2, #1
 800da58:	701a      	strb	r2, [r3, #0]
                            GPS_hold[ALT] = GPS_altitude;
 800da5a:	4b28      	ldr	r3, [pc, #160]	; (800dafc <taskComputeRc+0xa7c>)
 800da5c:	881b      	ldrh	r3, [r3, #0]
 800da5e:	461a      	mov	r2, r3
 800da60:	4b27      	ldr	r3, [pc, #156]	; (800db00 <taskComputeRc+0xa80>)
 800da62:	609a      	str	r2, [r3, #8]
                            f.CLIMBOUT_FW = 0;
 800da64:	4b15      	ldr	r3, [pc, #84]	; (800dabc <taskComputeRc+0xa3c>)
 800da66:	2200      	movs	r2, #0
 800da68:	74da      	strb	r2, [r3, #19]
                        if (!f.GPS_HOLD_MODE) {
 800da6a:	e00e      	b.n	800da8a <taskComputeRc+0xa0a>
                        }
                    } else {
                        f.GPS_HOLD_MODE = 0;
 800da6c:	4b13      	ldr	r3, [pc, #76]	; (800dabc <taskComputeRc+0xa3c>)
 800da6e:	2200      	movs	r2, #0
 800da70:	721a      	strb	r2, [r3, #8]
                        // both boxes are unselected here, nav is reset if not already done
                        if (GPSNavReset == 0) {
 800da72:	4b1f      	ldr	r3, [pc, #124]	; (800daf0 <taskComputeRc+0xa70>)
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d107      	bne.n	800da8a <taskComputeRc+0xa0a>
                            GPSNavReset = 1;
 800da7a:	4b1d      	ldr	r3, [pc, #116]	; (800daf0 <taskComputeRc+0xa70>)
 800da7c:	2201      	movs	r2, #1
 800da7e:	701a      	strb	r2, [r3, #0]
                            GPS_reset_nav();
 800da80:	f7fb f836 	bl	8008af0 <GPS_reset_nav>
                            f.CLIMBOUT_FW = 0;
 800da84:	4b0d      	ldr	r3, [pc, #52]	; (800dabc <taskComputeRc+0xa3c>)
 800da86:	2200      	movs	r2, #0
 800da88:	74da      	strb	r2, [r3, #19]
                        }
                    }
                }
                // Beep for indication that GPS has found satellites and naze32 is ready to fly
                buzzer(BUZZER_READY_BEEP);
 800da8a:	200c      	movs	r0, #12
 800da8c:	f7f6 fa10 	bl	8003eb0 <buzzer>
 800da90:	e008      	b.n	800daa4 <taskComputeRc+0xa24>
            } else {
                f.GPS_HOME_MODE = 0;
 800da92:	4b0a      	ldr	r3, [pc, #40]	; (800dabc <taskComputeRc+0xa3c>)
 800da94:	2200      	movs	r2, #0
 800da96:	71da      	strb	r2, [r3, #7]
                f.GPS_HOLD_MODE = 0;
 800da98:	4b08      	ldr	r3, [pc, #32]	; (800dabc <taskComputeRc+0xa3c>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	721a      	strb	r2, [r3, #8]
                nav_mode = NAV_MODE_NONE;
 800da9e:	4b13      	ldr	r3, [pc, #76]	; (800daec <taskComputeRc+0xa6c>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	701a      	strb	r2, [r3, #0]
            }
        }
#endif

        if (rcOptions[BOXPASSTHRU] && !f.FW_FAILSAFE_RTH_ENABLE) {
 800daa4:	4b06      	ldr	r3, [pc, #24]	; (800dac0 <taskComputeRc+0xa40>)
 800daa6:	7b1b      	ldrb	r3, [r3, #12]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d031      	beq.n	800db10 <taskComputeRc+0xa90>
 800daac:	4b03      	ldr	r3, [pc, #12]	; (800dabc <taskComputeRc+0xa3c>)
 800daae:	7c9b      	ldrb	r3, [r3, #18]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d12d      	bne.n	800db10 <taskComputeRc+0xa90>
            f.PASSTHRU_MODE = 1;
 800dab4:	4b01      	ldr	r3, [pc, #4]	; (800dabc <taskComputeRc+0xa3c>)
 800dab6:	2201      	movs	r2, #1
 800dab8:	729a      	strb	r2, [r3, #10]
 800daba:	e02c      	b.n	800db16 <taskComputeRc+0xa96>
 800dabc:	20001628 	.word	0x20001628
 800dac0:	200016c8 	.word	0x200016c8
 800dac4:	200013f4 	.word	0x200013f4
 800dac8:	200013fc 	.word	0x200013fc
 800dacc:	20001684 	.word	0x20001684
 800dad0:	20001848 	.word	0x20001848
 800dad4:	20001408 	.word	0x20001408
 800dad8:	200013f8 	.word	0x200013f8
 800dadc:	200019ba 	.word	0x200019ba
 800dae0:	200019bc 	.word	0x200019bc
 800dae4:	2000164a 	.word	0x2000164a
 800dae8:	2000170c 	.word	0x2000170c
 800daec:	20001728 	.word	0x20001728
 800daf0:	20000058 	.word	0x20000058
 800daf4:	200016f8 	.word	0x200016f8
 800daf8:	200016f4 	.word	0x200016f4
 800dafc:	20001712 	.word	0x20001712
 800db00:	20001700 	.word	0x20001700
 800db04:	20000d18 	.word	0x20000d18
 800db08:	200016ec 	.word	0x200016ec
 800db0c:	20001704 	.word	0x20001704
        } else {
            f.PASSTHRU_MODE = 0;
 800db10:	4b47      	ldr	r3, [pc, #284]	; (800dc30 <taskComputeRc+0xbb0>)
 800db12:	2200      	movs	r2, #0
 800db14:	729a      	strb	r2, [r3, #10]
        }

        if (f.FIXED_WING) {
 800db16:	4b46      	ldr	r3, [pc, #280]	; (800dc30 <taskComputeRc+0xbb0>)
 800db18:	7c1b      	ldrb	r3, [r3, #16]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d047      	beq.n	800dbae <taskComputeRc+0xb2e>
            f.HEADFREE_MODE = 0;
 800db1e:	4b44      	ldr	r3, [pc, #272]	; (800dc30 <taskComputeRc+0xbb0>)
 800db20:	2200      	movs	r2, #0
 800db22:	725a      	strb	r2, [r3, #9]
            if (feature(FEATURE_FAILSAFE) && failsafeCnt > (6 * cfg.failsafe_delay)) {
 800db24:	f44f 7000 	mov.w	r0, #512	; 0x200
 800db28:	f7f9 f9b2 	bl	8006e90 <feature>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d03d      	beq.n	800dbae <taskComputeRc+0xb2e>
 800db32:	4b40      	ldr	r3, [pc, #256]	; (800dc34 <taskComputeRc+0xbb4>)
 800db34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db38:	4619      	mov	r1, r3
 800db3a:	4b3f      	ldr	r3, [pc, #252]	; (800dc38 <taskComputeRc+0xbb8>)
 800db3c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800db40:	461a      	mov	r2, r3
 800db42:	4613      	mov	r3, r2
 800db44:	005b      	lsls	r3, r3, #1
 800db46:	4413      	add	r3, r2
 800db48:	005b      	lsls	r3, r3, #1
 800db4a:	4299      	cmp	r1, r3
 800db4c:	dd2f      	ble.n	800dbae <taskComputeRc+0xb2e>
                f.PASSTHRU_MODE = 0;
 800db4e:	4b38      	ldr	r3, [pc, #224]	; (800dc30 <taskComputeRc+0xbb0>)
 800db50:	2200      	movs	r2, #0
 800db52:	729a      	strb	r2, [r3, #10]
                f.ANGLE_MODE = 1;
 800db54:	4b36      	ldr	r3, [pc, #216]	; (800dc30 <taskComputeRc+0xbb0>)
 800db56:	2201      	movs	r2, #1
 800db58:	70da      	strb	r2, [r3, #3]
                for (i = 0; i < 3; i++)
 800db5a:	2300      	movs	r3, #0
 800db5c:	613b      	str	r3, [r7, #16]
 800db5e:	e00a      	b.n	800db76 <taskComputeRc+0xaf6>
                    rcData[i] = mcfg.midrc;
 800db60:	4b36      	ldr	r3, [pc, #216]	; (800dc3c <taskComputeRc+0xbbc>)
 800db62:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800db66:	b219      	sxth	r1, r3
 800db68:	4a35      	ldr	r2, [pc, #212]	; (800dc40 <taskComputeRc+0xbc0>)
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	3301      	adds	r3, #1
 800db74:	613b      	str	r3, [r7, #16]
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	2b02      	cmp	r3, #2
 800db7a:	ddf1      	ble.n	800db60 <taskComputeRc+0xae0>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800db7c:	4b2e      	ldr	r3, [pc, #184]	; (800dc38 <taskComputeRc+0xbb8>)
 800db7e:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800db82:	b21a      	sxth	r2, r3
 800db84:	4b2e      	ldr	r3, [pc, #184]	; (800dc40 <taskComputeRc+0xbc0>)
 800db86:	80da      	strh	r2, [r3, #6]
                // No GPS?  Force a soft left turn.
                if (!f.GPS_FIX && GPS_numSat <= 5) {
 800db88:	4b29      	ldr	r3, [pc, #164]	; (800dc30 <taskComputeRc+0xbb0>)
 800db8a:	7adb      	ldrb	r3, [r3, #11]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d10e      	bne.n	800dbae <taskComputeRc+0xb2e>
 800db90:	4b2c      	ldr	r3, [pc, #176]	; (800dc44 <taskComputeRc+0xbc4>)
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	2b05      	cmp	r3, #5
 800db96:	d80a      	bhi.n	800dbae <taskComputeRc+0xb2e>
                    f.FW_FAILSAFE_RTH_ENABLE = 0;
 800db98:	4b25      	ldr	r3, [pc, #148]	; (800dc30 <taskComputeRc+0xbb0>)
 800db9a:	2200      	movs	r2, #0
 800db9c:	749a      	strb	r2, [r3, #18]
                    rcData[ROLL] = mcfg.midrc - 50;
 800db9e:	4b27      	ldr	r3, [pc, #156]	; (800dc3c <taskComputeRc+0xbbc>)
 800dba0:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800dba4:	3b32      	subs	r3, #50	; 0x32
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	b21a      	sxth	r2, r3
 800dbaa:	4b25      	ldr	r3, [pc, #148]	; (800dc40 <taskComputeRc+0xbc0>)
 800dbac:	801a      	strh	r2, [r3, #0]
                }
            }
        }
        // When armed and motors aren't spinning. Make warning beeps so that accidentally won't lose fingers...
        // Also disarm board after 5 sec so users without buzzer won't lose fingers.
        if (feature(FEATURE_MOTOR_STOP) && f.ARMED && !f.FIXED_WING) {
 800dbae:	2010      	movs	r0, #16
 800dbb0:	f7f9 f96e 	bl	8006e90 <feature>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d035      	beq.n	800dc26 <taskComputeRc+0xba6>
 800dbba:	4b1d      	ldr	r3, [pc, #116]	; (800dc30 <taskComputeRc+0xbb0>)
 800dbbc:	785b      	ldrb	r3, [r3, #1]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d031      	beq.n	800dc26 <taskComputeRc+0xba6>
 800dbc2:	4b1b      	ldr	r3, [pc, #108]	; (800dc30 <taskComputeRc+0xbb0>)
 800dbc4:	7c1b      	ldrb	r3, [r3, #16]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d12d      	bne.n	800dc26 <taskComputeRc+0xba6>
            if (isThrottleLow) {
 800dbca:	7afb      	ldrb	r3, [r7, #11]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d023      	beq.n	800dc18 <taskComputeRc+0xb98>
                if (disarmTime == 0)
 800dbd0:	4b1d      	ldr	r3, [pc, #116]	; (800dc48 <taskComputeRc+0xbc8>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d10e      	bne.n	800dbf6 <taskComputeRc+0xb76>
                    disarmTime = pif_cumulative_timer1ms + 1000 * mcfg.auto_disarm_board;
 800dbd8:	4b18      	ldr	r3, [pc, #96]	; (800dc3c <taskComputeRc+0xbbc>)
 800dbda:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800dbde:	461a      	mov	r2, r3
 800dbe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dbe4:	fb02 f303 	mul.w	r3, r2, r3
 800dbe8:	461a      	mov	r2, r3
 800dbea:	4b18      	ldr	r3, [pc, #96]	; (800dc4c <taskComputeRc+0xbcc>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4413      	add	r3, r2
 800dbf0:	4a15      	ldr	r2, [pc, #84]	; (800dc48 <taskComputeRc+0xbc8>)
 800dbf2:	6013      	str	r3, [r2, #0]
 800dbf4:	e00c      	b.n	800dc10 <taskComputeRc+0xb90>
                else if (disarmTime < pif_cumulative_timer1ms && mcfg.auto_disarm_board != 0)
 800dbf6:	4b14      	ldr	r3, [pc, #80]	; (800dc48 <taskComputeRc+0xbc8>)
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	4b14      	ldr	r3, [pc, #80]	; (800dc4c <taskComputeRc+0xbcc>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d206      	bcs.n	800dc10 <taskComputeRc+0xb90>
 800dc02:	4b0e      	ldr	r3, [pc, #56]	; (800dc3c <taskComputeRc+0xbbc>)
 800dc04:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d001      	beq.n	800dc10 <taskComputeRc+0xb90>
                    mwDisarm();
 800dc0c:	f7fe ff16 	bl	800ca3c <mwDisarm>
                buzzer(BUZZER_ARMED);
 800dc10:	2009      	movs	r0, #9
 800dc12:	f7f6 f94d 	bl	8003eb0 <buzzer>
 800dc16:	e006      	b.n	800dc26 <taskComputeRc+0xba6>
            } else if (disarmTime != 0)
 800dc18:	4b0b      	ldr	r3, [pc, #44]	; (800dc48 <taskComputeRc+0xbc8>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <taskComputeRc+0xba6>
                disarmTime = 0;
 800dc20:	4b09      	ldr	r3, [pc, #36]	; (800dc48 <taskComputeRc+0xbc8>)
 800dc22:	2200      	movs	r2, #0
 800dc24:	601a      	str	r2, [r3, #0]
        }
    return 0;
 800dc26:	2300      	movs	r3, #0
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	20001628 	.word	0x20001628
 800dc34:	2000165a 	.word	0x2000165a
 800dc38:	20000d18 	.word	0x20000d18
 800dc3c:	200007ac 	.word	0x200007ac
 800dc40:	20001660 	.word	0x20001660
 800dc44:	2000170c 	.word	0x2000170c
 800dc48:	20001830 	.word	0x20001830
 800dc4c:	20001f08 	.word	0x20001f08

0800dc50 <taskLoop>:

uint16_t taskLoop(PifTask *p_task)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
	static int taskOrder = 0;   // never call all function in the same loop, to avoid high delay spikes

	(void)p_task;

	switch (taskOrder) {
 800dc58:	4b15      	ldr	r3, [pc, #84]	; (800dcb0 <taskLoop+0x60>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <taskLoop+0x16>
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d00f      	beq.n	800dc84 <taskLoop+0x34>
 800dc64:	e01f      	b.n	800dca6 <taskLoop+0x56>
		case 0:
			// if GPS feature is enabled, gpsThread() will be called at some intervals to check for stuck
			// hardware, wrong baud rates, init GPS if needed, etc. Don't use SENSOR_GPS here as gpsThread() can and will
			// change this based on available hardware
			taskOrder++;
 800dc66:	4b12      	ldr	r3, [pc, #72]	; (800dcb0 <taskLoop+0x60>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	4a10      	ldr	r2, [pc, #64]	; (800dcb0 <taskLoop+0x60>)
 800dc6e:	6013      	str	r3, [r2, #0]
#ifdef GPS
			if (feature(FEATURE_GPS)) {
 800dc70:	f44f 7080 	mov.w	r0, #256	; 0x100
 800dc74:	f7f9 f90c 	bl	8006e90 <feature>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d002      	beq.n	800dc84 <taskLoop+0x34>
				gpsThread();
 800dc7e:	f7fa fa97 	bl	80081b0 <gpsThread>
				break;
 800dc82:	e010      	b.n	800dca6 <taskLoop+0x56>
			}
#endif
		case 1:
			taskOrder = 0;
 800dc84:	4b0a      	ldr	r3, [pc, #40]	; (800dcb0 <taskLoop+0x60>)
 800dc86:	2200      	movs	r2, #0
 800dc88:	601a      	str	r2, [r3, #0]
			if (feature(FEATURE_VARIO) && f.VARIO_MODE)
 800dc8a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800dc8e:	f7f9 f8ff 	bl	8006e90 <feature>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d005      	beq.n	800dca4 <taskLoop+0x54>
 800dc98:	4b06      	ldr	r3, [pc, #24]	; (800dcb4 <taskLoop+0x64>)
 800dc9a:	7bdb      	ldrb	r3, [r3, #15]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d001      	beq.n	800dca4 <taskLoop+0x54>
				mwVario();
 800dca0:	f7fe fee6 	bl	800ca70 <mwVario>
			break;
 800dca4:	bf00      	nop
	}
    return 0;
 800dca6:	2300      	movs	r3, #0
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3708      	adds	r7, #8
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	20001948 	.word	0x20001948
 800dcb4:	20001628 	.word	0x20001628

0800dcb8 <taskComputeImu>:

uint16_t taskComputeImu(PifTask *p_task)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b086      	sub	sp, #24
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
	static uint8_t step = 0;

    (void)p_task;

    switch (step) {
 800dcc0:	4ba2      	ldr	r3, [pc, #648]	; (800df4c <taskComputeImu+0x294>)
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	2b06      	cmp	r3, #6
 800dcc6:	f200 82c0 	bhi.w	800e24a <taskComputeImu+0x592>
 800dcca:	a201      	add	r2, pc, #4	; (adr r2, 800dcd0 <taskComputeImu+0x18>)
 800dccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd0:	0800dced 	.word	0x0800dced
 800dcd4:	0800dcfd 	.word	0x0800dcfd
 800dcd8:	0800dcfd 	.word	0x0800dcfd
 800dcdc:	0800dcfd 	.word	0x0800dcfd
 800dce0:	0800dd17 	.word	0x0800dd17
 800dce4:	0800dd29 	.word	0x0800dd29
 800dce8:	0800e231 	.word	0x0800e231
    case 0:
        // Measure loop rate just afer reading the sensors
        cycleTime = pifTask_GetDeltaTime(p_task, TRUE);
 800dcec:	2101      	movs	r1, #1
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f006 fd4e 	bl	8014790 <pifTask_GetDeltaTime>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	4b95      	ldr	r3, [pc, #596]	; (800df50 <taskComputeImu+0x298>)
 800dcfa:	801a      	strh	r2, [r3, #0]
    
    case 1:
    case 2:
    case 3:
        step = computeIMU(step);
 800dcfc:	4b93      	ldr	r3, [pc, #588]	; (800df4c <taskComputeImu+0x294>)
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7fb fe15 	bl	8009930 <computeIMU>
 800dd06:	4603      	mov	r3, r0
 800dd08:	b2da      	uxtb	r2, r3
 800dd0a:	4b90      	ldr	r3, [pc, #576]	; (800df4c <taskComputeImu+0x294>)
 800dd0c:	701a      	strb	r2, [r3, #0]
		p_task->immediate = TRUE;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2201      	movs	r2, #1
 800dd12:	705a      	strb	r2, [r3, #1]
		break;
 800dd14:	e299      	b.n	800e24a <taskComputeImu+0x592>

    case 4:
        // non IMU critical, temeperatur
        annexCode();
 800dd16:	f7fe f99b 	bl	800c050 <annexCode>
        step = 5;
 800dd1a:	4b8c      	ldr	r3, [pc, #560]	; (800df4c <taskComputeImu+0x294>)
 800dd1c:	2205      	movs	r2, #5
 800dd1e:	701a      	strb	r2, [r3, #0]
		p_task->immediate = TRUE;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2201      	movs	r2, #1
 800dd24:	705a      	strb	r2, [r3, #1]
    	break;
 800dd26:	e290      	b.n	800e24a <taskComputeImu+0x592>

    case 5:
#ifdef MAG
        if (sensors(SENSOR_MAG)) {
 800dd28:	2008      	movs	r0, #8
 800dd2a:	f7f9 f869 	bl	8006e00 <sensors>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d057      	beq.n	800dde4 <taskComputeImu+0x12c>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dd34:	4b87      	ldr	r3, [pc, #540]	; (800df54 <taskComputeImu+0x29c>)
 800dd36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	bfb8      	it	lt
 800dd3e:	425b      	neglt	r3, r3
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	2b45      	cmp	r3, #69	; 0x45
 800dd44:	d847      	bhi.n	800ddd6 <taskComputeImu+0x11e>
 800dd46:	4b84      	ldr	r3, [pc, #528]	; (800df58 <taskComputeImu+0x2a0>)
 800dd48:	795b      	ldrb	r3, [r3, #5]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d043      	beq.n	800ddd6 <taskComputeImu+0x11e>
                int16_t dif = heading - magHold;
 800dd4e:	4b83      	ldr	r3, [pc, #524]	; (800df5c <taskComputeImu+0x2a4>)
 800dd50:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	4b82      	ldr	r3, [pc, #520]	; (800df60 <taskComputeImu+0x2a8>)
 800dd58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	1ad3      	subs	r3, r2, r3
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	82fb      	strh	r3, [r7, #22]
                if (dif <= -180)
 800dd64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd68:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 800dd6c:	da04      	bge.n	800dd78 <taskComputeImu+0xc0>
                    dif += 360;
 800dd6e:	8afb      	ldrh	r3, [r7, #22]
 800dd70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	82fb      	strh	r3, [r7, #22]
                if (dif >= +180)
 800dd78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd7c:	2bb3      	cmp	r3, #179	; 0xb3
 800dd7e:	dd04      	ble.n	800dd8a <taskComputeImu+0xd2>
                    dif -= 360;
 800dd80:	8afb      	ldrh	r3, [r7, #22]
 800dd82:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	82fb      	strh	r3, [r7, #22]
                dif *= -mcfg.yaw_control_direction;
 800dd8a:	4b76      	ldr	r3, [pc, #472]	; (800df64 <taskComputeImu+0x2ac>)
 800dd8c:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800dd90:	425b      	negs	r3, r3
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	8afb      	ldrh	r3, [r7, #22]
 800dd96:	fb12 f303 	smulbb	r3, r2, r3
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	82fb      	strh	r3, [r7, #22]
                if (f.SMALL_ANGLE)
 800dd9e:	4b6e      	ldr	r3, [pc, #440]	; (800df58 <taskComputeImu+0x2a0>)
 800dda0:	7b5b      	ldrb	r3, [r3, #13]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d01d      	beq.n	800dde2 <taskComputeImu+0x12a>
                    rcCommand[YAW] -= dif * cfg.P8[PIDMAG] / 30;    // 18 deg
 800dda6:	4b6b      	ldr	r3, [pc, #428]	; (800df54 <taskComputeImu+0x29c>)
 800dda8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ddac:	b29a      	uxth	r2, r3
 800ddae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ddb2:	496d      	ldr	r1, [pc, #436]	; (800df68 <taskComputeImu+0x2b0>)
 800ddb4:	7a49      	ldrb	r1, [r1, #9]
 800ddb6:	fb01 f303 	mul.w	r3, r1, r3
 800ddba:	496c      	ldr	r1, [pc, #432]	; (800df6c <taskComputeImu+0x2b4>)
 800ddbc:	fb81 0103 	smull	r0, r1, r1, r3
 800ddc0:	4419      	add	r1, r3
 800ddc2:	1109      	asrs	r1, r1, #4
 800ddc4:	17db      	asrs	r3, r3, #31
 800ddc6:	1a5b      	subs	r3, r3, r1
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	4413      	add	r3, r2
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	b21a      	sxth	r2, r3
 800ddd0:	4b60      	ldr	r3, [pc, #384]	; (800df54 <taskComputeImu+0x29c>)
 800ddd2:	809a      	strh	r2, [r3, #4]
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800ddd4:	e005      	b.n	800dde2 <taskComputeImu+0x12a>
            } else
                magHold = heading;
 800ddd6:	4b61      	ldr	r3, [pc, #388]	; (800df5c <taskComputeImu+0x2a4>)
 800ddd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dddc:	4b60      	ldr	r3, [pc, #384]	; (800df60 <taskComputeImu+0x2a8>)
 800ddde:	801a      	strh	r2, [r3, #0]
 800dde0:	e000      	b.n	800dde4 <taskComputeImu+0x12c>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dde2:	bf00      	nop
        }
#endif

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800dde4:	2004      	movs	r0, #4
 800dde6:	f7f9 f80b 	bl	8006e00 <sensors>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f000 80e2 	beq.w	800dfb6 <taskComputeImu+0x2fe>
            if (f.BARO_MODE) {
 800ddf2:	4b59      	ldr	r3, [pc, #356]	; (800df58 <taskComputeImu+0x2a0>)
 800ddf4:	799b      	ldrb	r3, [r3, #6]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f000 80dd 	beq.w	800dfb6 <taskComputeImu+0x2fe>
                static uint8_t isAltHoldChanged = 0;
                if (!f.FIXED_WING) {
 800ddfc:	4b56      	ldr	r3, [pc, #344]	; (800df58 <taskComputeImu+0x2a0>)
 800ddfe:	7c1b      	ldrb	r3, [r3, #16]
 800de00:	2b00      	cmp	r3, #0
 800de02:	f040 80c5 	bne.w	800df90 <taskComputeImu+0x2d8>
                    // multirotor alt hold
                    if (cfg.alt_hold_fast_change) {
 800de06:	4b58      	ldr	r3, [pc, #352]	; (800df68 <taskComputeImu+0x2b0>)
 800de08:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d053      	beq.n	800deb8 <taskComputeImu+0x200>
                        // rapid alt changes
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800de10:	4b50      	ldr	r3, [pc, #320]	; (800df54 <taskComputeImu+0x29c>)
 800de12:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de16:	461a      	mov	r2, r3
 800de18:	4b55      	ldr	r3, [pc, #340]	; (800df70 <taskComputeImu+0x2b8>)
 800de1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de1e:	1ad3      	subs	r3, r2, r3
 800de20:	2b00      	cmp	r3, #0
 800de22:	bfb8      	it	lt
 800de24:	425b      	neglt	r3, r3
 800de26:	4a50      	ldr	r2, [pc, #320]	; (800df68 <taskComputeImu+0x2b0>)
 800de28:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800de2c:	4293      	cmp	r3, r2
 800de2e:	dd22      	ble.n	800de76 <taskComputeImu+0x1be>
                            errorVelocityI = 0;
 800de30:	4b50      	ldr	r3, [pc, #320]	; (800df74 <taskComputeImu+0x2bc>)
 800de32:	2200      	movs	r2, #0
 800de34:	601a      	str	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800de36:	4b50      	ldr	r3, [pc, #320]	; (800df78 <taskComputeImu+0x2c0>)
 800de38:	2201      	movs	r2, #1
 800de3a:	701a      	strb	r2, [r3, #0]
                            rcCommand[THROTTLE] += (rcCommand[THROTTLE] > initialThrottleHold) ? -cfg.alt_hold_throttle_neutral : cfg.alt_hold_throttle_neutral;
 800de3c:	4b45      	ldr	r3, [pc, #276]	; (800df54 <taskComputeImu+0x29c>)
 800de3e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de42:	b29a      	uxth	r2, r3
 800de44:	4b43      	ldr	r3, [pc, #268]	; (800df54 <taskComputeImu+0x29c>)
 800de46:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800de4a:	4b49      	ldr	r3, [pc, #292]	; (800df70 <taskComputeImu+0x2b8>)
 800de4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de50:	4299      	cmp	r1, r3
 800de52:	dd06      	ble.n	800de62 <taskComputeImu+0x1aa>
 800de54:	4b44      	ldr	r3, [pc, #272]	; (800df68 <taskComputeImu+0x2b0>)
 800de56:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	425b      	negs	r3, r3
 800de5e:	b29b      	uxth	r3, r3
 800de60:	e003      	b.n	800de6a <taskComputeImu+0x1b2>
 800de62:	4b41      	ldr	r3, [pc, #260]	; (800df68 <taskComputeImu+0x2b0>)
 800de64:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800de68:	b29b      	uxth	r3, r3
 800de6a:	4413      	add	r3, r2
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	b21a      	sxth	r2, r3
 800de70:	4b38      	ldr	r3, [pc, #224]	; (800df54 <taskComputeImu+0x29c>)
 800de72:	80da      	strh	r2, [r3, #6]
 800de74:	e09f      	b.n	800dfb6 <taskComputeImu+0x2fe>
                        } else {
                            if (isAltHoldChanged) {
 800de76:	4b40      	ldr	r3, [pc, #256]	; (800df78 <taskComputeImu+0x2c0>)
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d006      	beq.n	800de8c <taskComputeImu+0x1d4>
                                AltHold = EstAlt;
 800de7e:	4b3f      	ldr	r3, [pc, #252]	; (800df7c <taskComputeImu+0x2c4>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4a3f      	ldr	r2, [pc, #252]	; (800df80 <taskComputeImu+0x2c8>)
 800de84:	6013      	str	r3, [r2, #0]
                                isAltHoldChanged = 0;
 800de86:	4b3c      	ldr	r3, [pc, #240]	; (800df78 <taskComputeImu+0x2c0>)
 800de88:	2200      	movs	r2, #0
 800de8a:	701a      	strb	r2, [r3, #0]
                            }
                            rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800de8c:	4b38      	ldr	r3, [pc, #224]	; (800df70 <taskComputeImu+0x2b8>)
 800de8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de92:	461a      	mov	r2, r3
 800de94:	4b3b      	ldr	r3, [pc, #236]	; (800df84 <taskComputeImu+0x2cc>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	4413      	add	r3, r2
 800de9a:	4a32      	ldr	r2, [pc, #200]	; (800df64 <taskComputeImu+0x2ac>)
 800de9c:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800dea0:	4611      	mov	r1, r2
 800dea2:	4a30      	ldr	r2, [pc, #192]	; (800df64 <taskComputeImu+0x2ac>)
 800dea4:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7f5 fe71 	bl	8003b90 <constrain>
 800deae:	4603      	mov	r3, r0
 800deb0:	b21a      	sxth	r2, r3
 800deb2:	4b28      	ldr	r3, [pc, #160]	; (800df54 <taskComputeImu+0x29c>)
 800deb4:	80da      	strh	r2, [r3, #6]
 800deb6:	e07e      	b.n	800dfb6 <taskComputeImu+0x2fe>
                        }
                    } else {
                        // slow alt changes for apfags
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800deb8:	4b26      	ldr	r3, [pc, #152]	; (800df54 <taskComputeImu+0x29c>)
 800deba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800debe:	461a      	mov	r2, r3
 800dec0:	4b2b      	ldr	r3, [pc, #172]	; (800df70 <taskComputeImu+0x2b8>)
 800dec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dec6:	1ad3      	subs	r3, r2, r3
 800dec8:	2b00      	cmp	r3, #0
 800deca:	bfb8      	it	lt
 800decc:	425b      	neglt	r3, r3
 800dece:	4a26      	ldr	r2, [pc, #152]	; (800df68 <taskComputeImu+0x2b0>)
 800ded0:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800ded4:	4293      	cmp	r3, r2
 800ded6:	dd14      	ble.n	800df02 <taskComputeImu+0x24a>
                            // set velocity proportional to stick movement +100 throttle gives ~ +50 cm/s
                            setVelocity = (rcCommand[THROTTLE] - initialThrottleHold) / 2;
 800ded8:	4b1e      	ldr	r3, [pc, #120]	; (800df54 <taskComputeImu+0x29c>)
 800deda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dede:	461a      	mov	r2, r3
 800dee0:	4b23      	ldr	r3, [pc, #140]	; (800df70 <taskComputeImu+0x2b8>)
 800dee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dee6:	1ad3      	subs	r3, r2, r3
 800dee8:	0fda      	lsrs	r2, r3, #31
 800deea:	4413      	add	r3, r2
 800deec:	105b      	asrs	r3, r3, #1
 800deee:	461a      	mov	r2, r3
 800def0:	4b25      	ldr	r3, [pc, #148]	; (800df88 <taskComputeImu+0x2d0>)
 800def2:	601a      	str	r2, [r3, #0]
                            velocityControl = 1;
 800def4:	4b25      	ldr	r3, [pc, #148]	; (800df8c <taskComputeImu+0x2d4>)
 800def6:	2201      	movs	r2, #1
 800def8:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800defa:	4b1f      	ldr	r3, [pc, #124]	; (800df78 <taskComputeImu+0x2c0>)
 800defc:	2201      	movs	r2, #1
 800defe:	701a      	strb	r2, [r3, #0]
 800df00:	e00d      	b.n	800df1e <taskComputeImu+0x266>
                        } else if (isAltHoldChanged) {
 800df02:	4b1d      	ldr	r3, [pc, #116]	; (800df78 <taskComputeImu+0x2c0>)
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d009      	beq.n	800df1e <taskComputeImu+0x266>
                            AltHold = EstAlt;
 800df0a:	4b1c      	ldr	r3, [pc, #112]	; (800df7c <taskComputeImu+0x2c4>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a1c      	ldr	r2, [pc, #112]	; (800df80 <taskComputeImu+0x2c8>)
 800df10:	6013      	str	r3, [r2, #0]
                            velocityControl = 0;
 800df12:	4b1e      	ldr	r3, [pc, #120]	; (800df8c <taskComputeImu+0x2d4>)
 800df14:	2200      	movs	r2, #0
 800df16:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 0;
 800df18:	4b17      	ldr	r3, [pc, #92]	; (800df78 <taskComputeImu+0x2c0>)
 800df1a:	2200      	movs	r2, #0
 800df1c:	701a      	strb	r2, [r3, #0]
                        }
                        rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800df1e:	4b14      	ldr	r3, [pc, #80]	; (800df70 <taskComputeImu+0x2b8>)
 800df20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df24:	461a      	mov	r2, r3
 800df26:	4b17      	ldr	r3, [pc, #92]	; (800df84 <taskComputeImu+0x2cc>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4413      	add	r3, r2
 800df2c:	4a0d      	ldr	r2, [pc, #52]	; (800df64 <taskComputeImu+0x2ac>)
 800df2e:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800df32:	4611      	mov	r1, r2
 800df34:	4a0b      	ldr	r2, [pc, #44]	; (800df64 <taskComputeImu+0x2ac>)
 800df36:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7f5 fe28 	bl	8003b90 <constrain>
 800df40:	4603      	mov	r3, r0
 800df42:	b21a      	sxth	r2, r3
 800df44:	4b03      	ldr	r3, [pc, #12]	; (800df54 <taskComputeImu+0x29c>)
 800df46:	80da      	strh	r2, [r3, #6]
 800df48:	e035      	b.n	800dfb6 <taskComputeImu+0x2fe>
 800df4a:	bf00      	nop
 800df4c:	2000194c 	.word	0x2000194c
 800df50:	20001648 	.word	0x20001648
 800df54:	20001684 	.word	0x20001684
 800df58:	20001628 	.word	0x20001628
 800df5c:	200019ba 	.word	0x200019ba
 800df60:	200019bc 	.word	0x200019bc
 800df64:	200007ac 	.word	0x200007ac
 800df68:	20000d18 	.word	0x20000d18
 800df6c:	88888889 	.word	0x88888889
 800df70:	20001848 	.word	0x20001848
 800df74:	20001408 	.word	0x20001408
 800df78:	2000194d 	.word	0x2000194d
 800df7c:	200013f4 	.word	0x200013f4
 800df80:	200013fc 	.word	0x200013fc
 800df84:	200013f8 	.word	0x200013f8
 800df88:	20001400 	.word	0x20001400
 800df8c:	20001404 	.word	0x20001404
                    }
                } else {
                    // handle fixedwing-related althold. UNTESTED! and probably wrong
                    // most likely need to check changes on pitch channel and 'reset' althold similar to
                    // how throttle does it on multirotor
                    rcCommand[PITCH] += BaroPID * mcfg.fw_althold_dir;
 800df90:	4bb0      	ldr	r3, [pc, #704]	; (800e254 <taskComputeImu+0x59c>)
 800df92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800df96:	b29a      	uxth	r2, r3
 800df98:	4baf      	ldr	r3, [pc, #700]	; (800e258 <taskComputeImu+0x5a0>)
 800df9a:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 800df9e:	b299      	uxth	r1, r3
 800dfa0:	4bae      	ldr	r3, [pc, #696]	; (800e25c <taskComputeImu+0x5a4>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	fb11 f303 	smulbb	r3, r1, r3
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	4413      	add	r3, r2
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	b21a      	sxth	r2, r3
 800dfb2:	4ba8      	ldr	r3, [pc, #672]	; (800e254 <taskComputeImu+0x59c>)
 800dfb4:	805a      	strh	r2, [r3, #2]
                }
            }
        }
#endif

        if (cfg.throttle_correction_value && (f.ANGLE_MODE || f.HORIZON_MODE)) {
 800dfb6:	4baa      	ldr	r3, [pc, #680]	; (800e260 <taskComputeImu+0x5a8>)
 800dfb8:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d014      	beq.n	800dfea <taskComputeImu+0x332>
 800dfc0:	4ba8      	ldr	r3, [pc, #672]	; (800e264 <taskComputeImu+0x5ac>)
 800dfc2:	78db      	ldrb	r3, [r3, #3]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d103      	bne.n	800dfd0 <taskComputeImu+0x318>
 800dfc8:	4ba6      	ldr	r3, [pc, #664]	; (800e264 <taskComputeImu+0x5ac>)
 800dfca:	791b      	ldrb	r3, [r3, #4]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00c      	beq.n	800dfea <taskComputeImu+0x332>
            rcCommand[THROTTLE] += throttleAngleCorrection;
 800dfd0:	4ba0      	ldr	r3, [pc, #640]	; (800e254 <taskComputeImu+0x59c>)
 800dfd2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	4ba3      	ldr	r3, [pc, #652]	; (800e268 <taskComputeImu+0x5b0>)
 800dfda:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	4413      	add	r3, r2
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	b21a      	sxth	r2, r3
 800dfe6:	4b9b      	ldr	r3, [pc, #620]	; (800e254 <taskComputeImu+0x59c>)
 800dfe8:	80da      	strh	r2, [r3, #6]
        }

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800dfea:	2020      	movs	r0, #32
 800dfec:	f7f8 ff08 	bl	8006e00 <sensors>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	f000 8115 	beq.w	800e222 <taskComputeImu+0x56a>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800dff8:	4b9a      	ldr	r3, [pc, #616]	; (800e264 <taskComputeImu+0x5ac>)
 800dffa:	79db      	ldrb	r3, [r3, #7]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d104      	bne.n	800e00a <taskComputeImu+0x352>
 800e000:	4b98      	ldr	r3, [pc, #608]	; (800e264 <taskComputeImu+0x5ac>)
 800e002:	7a1b      	ldrb	r3, [r3, #8]
 800e004:	2b00      	cmp	r3, #0
 800e006:	f000 8103 	beq.w	800e210 <taskComputeImu+0x558>
 800e00a:	4b96      	ldr	r3, [pc, #600]	; (800e264 <taskComputeImu+0x5ac>)
 800e00c:	7b1b      	ldrb	r3, [r3, #12]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	f000 80fe 	beq.w	800e210 <taskComputeImu+0x558>
                float sin_yaw_y = sinf(heading * 0.0174532925f);
 800e014:	4b95      	ldr	r3, [pc, #596]	; (800e26c <taskComputeImu+0x5b4>)
 800e016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e01a:	ee07 3a90 	vmov	s15, r3
 800e01e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e022:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800e270 <taskComputeImu+0x5b8>
 800e026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e02a:	eeb0 0a67 	vmov.f32	s0, s15
 800e02e:	f015 fc8f 	bl	8023950 <sinf>
 800e032:	ed87 0a04 	vstr	s0, [r7, #16]
                float cos_yaw_x = cosf(heading * 0.0174532925f);
 800e036:	4b8d      	ldr	r3, [pc, #564]	; (800e26c <taskComputeImu+0x5b4>)
 800e038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e03c:	ee07 3a90 	vmov	s15, r3
 800e040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e044:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e270 <taskComputeImu+0x5b8>
 800e048:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e04c:	eeb0 0a67 	vmov.f32	s0, s15
 800e050:	f015 fbfa 	bl	8023848 <cosf>
 800e054:	ed87 0a03 	vstr	s0, [r7, #12]
                if (!f.FIXED_WING) {
 800e058:	4b82      	ldr	r3, [pc, #520]	; (800e264 <taskComputeImu+0x5ac>)
 800e05a:	7c1b      	ldrb	r3, [r3, #16]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f040 80d4 	bne.w	800e20a <taskComputeImu+0x552>
                    if (cfg.nav_slew_rate) {
 800e062:	4b7f      	ldr	r3, [pc, #508]	; (800e260 <taskComputeImu+0x5a8>)
 800e064:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f000 8087 	beq.w	800e17c <taskComputeImu+0x4c4>
                        nav_rated[LON] += constrain(wrap_18000(nav[LON] - nav_rated[LON]), -cfg.nav_slew_rate, cfg.nav_slew_rate); // TODO check this on uint8
 800e06e:	4b81      	ldr	r3, [pc, #516]	; (800e274 <taskComputeImu+0x5bc>)
 800e070:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e074:	461a      	mov	r2, r3
 800e076:	4b80      	ldr	r3, [pc, #512]	; (800e278 <taskComputeImu+0x5c0>)
 800e078:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e07c:	1ad3      	subs	r3, r2, r3
 800e07e:	4618      	mov	r0, r3
 800e080:	f7fb fac8 	bl	8009614 <wrap_18000>
 800e084:	4b76      	ldr	r3, [pc, #472]	; (800e260 <taskComputeImu+0x5a8>)
 800e086:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e08a:	425b      	negs	r3, r3
 800e08c:	4a74      	ldr	r2, [pc, #464]	; (800e260 <taskComputeImu+0x5a8>)
 800e08e:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e092:	4619      	mov	r1, r3
 800e094:	f7f5 fd7c 	bl	8003b90 <constrain>
 800e098:	4601      	mov	r1, r0
 800e09a:	4b77      	ldr	r3, [pc, #476]	; (800e278 <taskComputeImu+0x5c0>)
 800e09c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0a0:	b29a      	uxth	r2, r3
 800e0a2:	b28b      	uxth	r3, r1
 800e0a4:	4413      	add	r3, r2
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	b21a      	sxth	r2, r3
 800e0aa:	4b73      	ldr	r3, [pc, #460]	; (800e278 <taskComputeImu+0x5c0>)
 800e0ac:	805a      	strh	r2, [r3, #2]
                        nav_rated[LAT] += constrain(wrap_18000(nav[LAT] - nav_rated[LAT]), -cfg.nav_slew_rate, cfg.nav_slew_rate);
 800e0ae:	4b71      	ldr	r3, [pc, #452]	; (800e274 <taskComputeImu+0x5bc>)
 800e0b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	4b70      	ldr	r3, [pc, #448]	; (800e278 <taskComputeImu+0x5c0>)
 800e0b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7fb faa8 	bl	8009614 <wrap_18000>
 800e0c4:	4b66      	ldr	r3, [pc, #408]	; (800e260 <taskComputeImu+0x5a8>)
 800e0c6:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e0ca:	425b      	negs	r3, r3
 800e0cc:	4a64      	ldr	r2, [pc, #400]	; (800e260 <taskComputeImu+0x5a8>)
 800e0ce:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	f7f5 fd5c 	bl	8003b90 <constrain>
 800e0d8:	4601      	mov	r1, r0
 800e0da:	4b67      	ldr	r3, [pc, #412]	; (800e278 <taskComputeImu+0x5c0>)
 800e0dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0e0:	b29a      	uxth	r2, r3
 800e0e2:	b28b      	uxth	r3, r1
 800e0e4:	4413      	add	r3, r2
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	b21a      	sxth	r2, r3
 800e0ea:	4b63      	ldr	r3, [pc, #396]	; (800e278 <taskComputeImu+0x5c0>)
 800e0ec:	801a      	strh	r2, [r3, #0]
                        GPS_angle[ROLL] = (nav_rated[LON] * cos_yaw_x - nav_rated[LAT] * sin_yaw_y) / 10;
 800e0ee:	4b62      	ldr	r3, [pc, #392]	; (800e278 <taskComputeImu+0x5c0>)
 800e0f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0f4:	ee07 3a90 	vmov	s15, r3
 800e0f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e0fc:	edd7 7a03 	vldr	s15, [r7, #12]
 800e100:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e104:	4b5c      	ldr	r3, [pc, #368]	; (800e278 <taskComputeImu+0x5c0>)
 800e106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e10a:	ee07 3a90 	vmov	s15, r3
 800e10e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e112:	edd7 7a04 	vldr	s15, [r7, #16]
 800e116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e11a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e11e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e12a:	ee17 3a90 	vmov	r3, s15
 800e12e:	b21a      	sxth	r2, r3
 800e130:	4b52      	ldr	r3, [pc, #328]	; (800e27c <taskComputeImu+0x5c4>)
 800e132:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav_rated[LON] * sin_yaw_y + nav_rated[LAT] * cos_yaw_x) / 10;
 800e134:	4b50      	ldr	r3, [pc, #320]	; (800e278 <taskComputeImu+0x5c0>)
 800e136:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e13a:	ee07 3a90 	vmov	s15, r3
 800e13e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e142:	edd7 7a04 	vldr	s15, [r7, #16]
 800e146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e14a:	4b4b      	ldr	r3, [pc, #300]	; (800e278 <taskComputeImu+0x5c0>)
 800e14c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e150:	ee07 3a90 	vmov	s15, r3
 800e154:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e158:	edd7 7a03 	vldr	s15, [r7, #12]
 800e15c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e160:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e164:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e16c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e170:	ee17 3a90 	vmov	r3, s15
 800e174:	b21a      	sxth	r2, r3
 800e176:	4b41      	ldr	r3, [pc, #260]	; (800e27c <taskComputeImu+0x5c4>)
 800e178:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e17a:	e052      	b.n	800e222 <taskComputeImu+0x56a>
                    } else {
                        GPS_angle[ROLL] = (nav[LON] * cos_yaw_x - nav[LAT] * sin_yaw_y) / 10;
 800e17c:	4b3d      	ldr	r3, [pc, #244]	; (800e274 <taskComputeImu+0x5bc>)
 800e17e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e182:	ee07 3a90 	vmov	s15, r3
 800e186:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e18a:	edd7 7a03 	vldr	s15, [r7, #12]
 800e18e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e192:	4b38      	ldr	r3, [pc, #224]	; (800e274 <taskComputeImu+0x5bc>)
 800e194:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e198:	ee07 3a90 	vmov	s15, r3
 800e19c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e1a0:	edd7 7a04 	vldr	s15, [r7, #16]
 800e1a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e1ac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e1b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e1b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1b8:	ee17 3a90 	vmov	r3, s15
 800e1bc:	b21a      	sxth	r2, r3
 800e1be:	4b2f      	ldr	r3, [pc, #188]	; (800e27c <taskComputeImu+0x5c4>)
 800e1c0:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav[LON] * sin_yaw_y + nav[LAT] * cos_yaw_x) / 10;
 800e1c2:	4b2c      	ldr	r3, [pc, #176]	; (800e274 <taskComputeImu+0x5bc>)
 800e1c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e1c8:	ee07 3a90 	vmov	s15, r3
 800e1cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e1d0:	edd7 7a04 	vldr	s15, [r7, #16]
 800e1d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1d8:	4b26      	ldr	r3, [pc, #152]	; (800e274 <taskComputeImu+0x5bc>)
 800e1da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1de:	ee07 3a90 	vmov	s15, r3
 800e1e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e1e6:	edd7 7a03 	vldr	s15, [r7, #12]
 800e1ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e1f2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e1f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e1fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1fe:	ee17 3a90 	vmov	r3, s15
 800e202:	b21a      	sxth	r2, r3
 800e204:	4b1d      	ldr	r3, [pc, #116]	; (800e27c <taskComputeImu+0x5c4>)
 800e206:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e208:	e00b      	b.n	800e222 <taskComputeImu+0x56a>
                    }
                } else fw_nav();
 800e20a:	f7f8 ff73 	bl	80070f4 <fw_nav>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e20e:	e008      	b.n	800e222 <taskComputeImu+0x56a>
            } else {
                GPS_angle[ROLL] = 0;
 800e210:	4b1a      	ldr	r3, [pc, #104]	; (800e27c <taskComputeImu+0x5c4>)
 800e212:	2200      	movs	r2, #0
 800e214:	801a      	strh	r2, [r3, #0]
                GPS_angle[PITCH] = 0;
 800e216:	4b19      	ldr	r3, [pc, #100]	; (800e27c <taskComputeImu+0x5c4>)
 800e218:	2200      	movs	r2, #0
 800e21a:	805a      	strh	r2, [r3, #2]
                GPS_angle[YAW] = 0;
 800e21c:	4b17      	ldr	r3, [pc, #92]	; (800e27c <taskComputeImu+0x5c4>)
 800e21e:	2200      	movs	r2, #0
 800e220:	809a      	strh	r2, [r3, #4]
            }
        }
#endif
        step = 6;
 800e222:	4b17      	ldr	r3, [pc, #92]	; (800e280 <taskComputeImu+0x5c8>)
 800e224:	2206      	movs	r2, #6
 800e226:	701a      	strb	r2, [r3, #0]
		p_task->immediate = TRUE;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2201      	movs	r2, #1
 800e22c:	705a      	strb	r2, [r3, #1]
    	break;
 800e22e:	e00c      	b.n	800e24a <taskComputeImu+0x592>

    case 6:
        // PID - note this is function pointer set by setPIDController()
        pid_controller();
 800e230:	4b14      	ldr	r3, [pc, #80]	; (800e284 <taskComputeImu+0x5cc>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4798      	blx	r3

        mixTable();
 800e236:	f7fd fb71 	bl	800b91c <mixTable>
        writeServos();
 800e23a:	f7fc ffc7 	bl	800b1cc <writeServos>
        writeMotors();
 800e23e:	f7fd f8fd 	bl	800b43c <writeMotors>
        step = 0;
 800e242:	4b0f      	ldr	r3, [pc, #60]	; (800e280 <taskComputeImu+0x5c8>)
 800e244:	2200      	movs	r2, #0
 800e246:	701a      	strb	r2, [r3, #0]
    	break;
 800e248:	bf00      	nop
	}

    return 0;
 800e24a:	2300      	movs	r3, #0
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3718      	adds	r7, #24
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	20001684 	.word	0x20001684
 800e258:	200007ac 	.word	0x200007ac
 800e25c:	200013f8 	.word	0x200013f8
 800e260:	20000d18 	.word	0x20000d18
 800e264:	20001628 	.word	0x20001628
 800e268:	20001410 	.word	0x20001410
 800e26c:	200019ba 	.word	0x200019ba
 800e270:	3c8efa35 	.word	0x3c8efa35
 800e274:	20001720 	.word	0x20001720
 800e278:	20001724 	.word	0x20001724
 800e27c:	20001718 	.word	0x20001718
 800e280:	2000194c 	.word	0x2000194c
 800e284:	20000050 	.word	0x20000050

0800e288 <mspReadRawRC>:
#include "board.h"
#include "mw.h"


static uint16_t mspReadRawRC(uint8_t chan)
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	4603      	mov	r3, r0
 800e290:	71fb      	strb	r3, [r7, #7]
    return rcData[chan];
 800e292:	79fb      	ldrb	r3, [r7, #7]
 800e294:	4a04      	ldr	r2, [pc, #16]	; (800e2a8 <mspReadRawRC+0x20>)
 800e296:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800e29a:	b29b      	uxth	r3, r3
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr
 800e2a8:	20001660 	.word	0x20001660

0800e2ac <mspFrameRecieve>:

void mspFrameRecieve(void)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	af00      	add	r7, sp, #0
    failsafeCnt = 0; // clear FailSafe counter
 800e2b0:	4b08      	ldr	r3, [pc, #32]	; (800e2d4 <mspFrameRecieve+0x28>)
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	801a      	strh	r2, [r3, #0]

    if (!g_task_compute_rc->_running) g_task_compute_rc->immediate = TRUE;
 800e2b6:	4b08      	ldr	r3, [pc, #32]	; (800e2d8 <mspFrameRecieve+0x2c>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	79db      	ldrb	r3, [r3, #7]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d103      	bne.n	800e2c8 <mspFrameRecieve+0x1c>
 800e2c0:	4b05      	ldr	r3, [pc, #20]	; (800e2d8 <mspFrameRecieve+0x2c>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	705a      	strb	r2, [r3, #1]
}
 800e2c8:	bf00      	nop
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop
 800e2d4:	2000165a 	.word	0x2000165a
 800e2d8:	20001828 	.word	0x20001828

0800e2dc <mspInit>:

void mspInit(rcReadRawDataPtr *callback)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b083      	sub	sp, #12
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
    if (callback)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d002      	beq.n	800e2f0 <mspInit+0x14>
        *callback = mspReadRawRC;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	4a03      	ldr	r2, [pc, #12]	; (800e2fc <mspInit+0x20>)
 800e2ee:	601a      	str	r2, [r3, #0]
}
 800e2f0:	bf00      	nop
 800e2f2:	370c      	adds	r7, #12
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr
 800e2fc:	0800e289 	.word	0x0800e289

0800e300 <sbusReadRawRC>:
static PifRcSbus s_sbus;
static uint32_t sbusChannelData[SBUS_MAX_CHANNEL];


static uint16_t sbusReadRawRC(uint8_t chan)
{
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	4603      	mov	r3, r0
 800e308:	71fb      	strb	r3, [r7, #7]
    return sbusChannelData[mcfg.rcmap[chan]];
 800e30a:	79fb      	ldrb	r3, [r7, #7]
 800e30c:	4a07      	ldr	r2, [pc, #28]	; (800e32c <sbusReadRawRC+0x2c>)
 800e30e:	4413      	add	r3, r2
 800e310:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800e314:	461a      	mov	r2, r3
 800e316:	4b06      	ldr	r3, [pc, #24]	; (800e330 <sbusReadRawRC+0x30>)
 800e318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e31c:	b29b      	uxth	r3, r3
}
 800e31e:	4618      	mov	r0, r3
 800e320:	370c      	adds	r7, #12
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr
 800e32a:	bf00      	nop
 800e32c:	200007ac 	.word	0x200007ac
 800e330:	20001994 	.word	0x20001994

0800e334 <_evtSbusReceive>:

static void _evtSbusReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b086      	sub	sp, #24
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	60b9      	str	r1, [r7, #8]
 800e33e:	607a      	str	r2, [r7, #4]
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 800e340:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e344:	f7f8 fda4 	bl	8006e90 <feature>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d005      	beq.n	800e35a <_evtSbusReceive+0x26>
 800e34e:	68f8      	ldr	r0, [r7, #12]
 800e350:	f009 fb5a 	bl	8017a08 <pifRc_CheckFailSafe>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d11f      	bne.n	800e39a <_evtSbusReceive+0x66>

    failsafeCnt = 0; // clear FailSafe counter
 800e35a:	4b12      	ldr	r3, [pc, #72]	; (800e3a4 <_evtSbusReceive+0x70>)
 800e35c:	2200      	movs	r2, #0
 800e35e:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < SBUS_MAX_CHANNEL; i++) {
 800e360:	2300      	movs	r3, #0
 800e362:	617b      	str	r3, [r7, #20]
 800e364:	e00c      	b.n	800e380 <_evtSbusReceive+0x4c>
		sbusChannelData[i] = channel[i];
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	4413      	add	r3, r2
 800e36e:	881b      	ldrh	r3, [r3, #0]
 800e370:	4619      	mov	r1, r3
 800e372:	4a0d      	ldr	r2, [pc, #52]	; (800e3a8 <_evtSbusReceive+0x74>)
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < SBUS_MAX_CHANNEL; i++) {
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	3301      	adds	r3, #1
 800e37e:	617b      	str	r3, [r7, #20]
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	2b07      	cmp	r3, #7
 800e384:	ddef      	ble.n	800e366 <_evtSbusReceive+0x32>
	}

	p_task = (PifTask*)p_issuer;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	613b      	str	r3, [r7, #16]
	if (!p_task->_running) p_task->immediate = TRUE;
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	79db      	ldrb	r3, [r3, #7]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d104      	bne.n	800e39c <_evtSbusReceive+0x68>
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	2201      	movs	r2, #1
 800e396:	705a      	strb	r2, [r3, #1]
 800e398:	e000      	b.n	800e39c <_evtSbusReceive+0x68>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 800e39a:	bf00      	nop
}
 800e39c:	3718      	adds	r7, #24
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	2000165a 	.word	0x2000165a
 800e3a8:	20001994 	.word	0x20001994

0800e3ac <sbusInit>:

BOOL sbusInit(int uart, rcReadRawDataPtr *callback)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
    int b;

    for (b = 0; b < SBUS_MAX_CHANNEL; b++)
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	60fb      	str	r3, [r7, #12]
 800e3ba:	e00a      	b.n	800e3d2 <sbusInit+0x26>
        sbusChannelData[b] = mcfg.midrc;
 800e3bc:	4b21      	ldr	r3, [pc, #132]	; (800e444 <sbusInit+0x98>)
 800e3be:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	4a20      	ldr	r2, [pc, #128]	; (800e448 <sbusInit+0x9c>)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (b = 0; b < SBUS_MAX_CHANNEL; b++)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	60fb      	str	r3, [r7, #12]
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2b07      	cmp	r3, #7
 800e3d6:	ddf1      	ble.n	800e3bc <sbusInit+0x10>

    core.rcvrport = uartOpen(uart, 100000, (portMode_t)(MODE_RX | MODE_SBUS));
 800e3d8:	2205      	movs	r2, #5
 800e3da:	491c      	ldr	r1, [pc, #112]	; (800e44c <sbusInit+0xa0>)
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7f3 ffcf 	bl	8002380 <uartOpen>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	4a1a      	ldr	r2, [pc, #104]	; (800e450 <sbusInit+0xa4>)
 800e3e6:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 800e3e8:	4b19      	ldr	r3, [pc, #100]	; (800e450 <sbusInit+0xa4>)
 800e3ea:	691b      	ldr	r3, [r3, #16]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d101      	bne.n	800e3f4 <sbusInit+0x48>
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	e023      	b.n	800e43c <sbusInit+0x90>

    if (!pifRcSbus_Init(&s_sbus, PIF_ID_AUTO)) return FALSE;
 800e3f4:	2100      	movs	r1, #0
 800e3f6:	4817      	ldr	r0, [pc, #92]	; (800e454 <sbusInit+0xa8>)
 800e3f8:	f00a f9a4 	bl	8018744 <pifRcSbus_Init>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d101      	bne.n	800e406 <sbusInit+0x5a>
 800e402:	2300      	movs	r3, #0
 800e404:	e01a      	b.n	800e43c <sbusInit+0x90>
    pifRc_AttachEvtReceive(&s_sbus.parent, _evtSbusReceive, g_task_compute_rc);
 800e406:	4b14      	ldr	r3, [pc, #80]	; (800e458 <sbusInit+0xac>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	461a      	mov	r2, r3
 800e40c:	4913      	ldr	r1, [pc, #76]	; (800e45c <sbusInit+0xb0>)
 800e40e:	4811      	ldr	r0, [pc, #68]	; (800e454 <sbusInit+0xa8>)
 800e410:	f009 fae8 	bl	80179e4 <pifRc_AttachEvtReceive>
    pifRcSbus_AttachComm(&s_sbus, &core.rcvrport->comm);
 800e414:	4b0e      	ldr	r3, [pc, #56]	; (800e450 <sbusInit+0xa4>)
 800e416:	691b      	ldr	r3, [r3, #16]
 800e418:	3304      	adds	r3, #4
 800e41a:	4619      	mov	r1, r3
 800e41c:	480d      	ldr	r0, [pc, #52]	; (800e454 <sbusInit+0xa8>)
 800e41e:	f00a f9c1 	bl	80187a4 <pifRcSbus_AttachComm>

    if (callback)
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d002      	beq.n	800e42e <sbusInit+0x82>
        *callback = sbusReadRawRC;
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	4a0d      	ldr	r2, [pc, #52]	; (800e460 <sbusInit+0xb4>)
 800e42c:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 800e42e:	4b08      	ldr	r3, [pc, #32]	; (800e450 <sbusInit+0xa4>)
 800e430:	691b      	ldr	r3, [r3, #16]
 800e432:	3304      	adds	r3, #4
 800e434:	4618      	mov	r0, r3
 800e436:	f7f4 f8b9 	bl	80025ac <serialStartReceiveFunc>

    return TRUE;
 800e43a:	2301      	movs	r3, #1
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	200007ac 	.word	0x200007ac
 800e448:	20001994 	.word	0x20001994
 800e44c:	000186a0 	.word	0x000186a0
 800e450:	200006f4 	.word	0x200006f4
 800e454:	20001950 	.word	0x20001950
 800e458:	20001828 	.word	0x20001828
 800e45c:	0800e335 	.word	0x0800e335
 800e460:	0800e301 	.word	0x0800e301

0800e464 <sensorsAutodetect>:
	.baro.hardware = NULL		// barometer access functions
};
PifImuSensor imu_sensor;

bool sensorsAutodetect(sensorDetect_t* gyroDetect, sensorDetect_t* accDetect, sensorDetect_t* baroDetect, sensorDetect_t* magDetect)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b086      	sub	sp, #24
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
 800e470:	603b      	str	r3, [r7, #0]
    int16_t deg, min;

    pifImuSensor_Init(&imu_sensor);
 800e472:	4874      	ldr	r0, [pc, #464]	; (800e644 <sensorsAutodetect+0x1e0>)
 800e474:	f00b fb8a 	bl	8019b8c <pifImuSensor_Init>
    pifImuSensor_InitBoardAlignment(&imu_sensor, mcfg.board_align_roll, mcfg.board_align_pitch, mcfg.board_align_yaw);
 800e478:	4b73      	ldr	r3, [pc, #460]	; (800e648 <sensorsAutodetect+0x1e4>)
 800e47a:	f9b3 1156 	ldrsh.w	r1, [r3, #342]	; 0x156
 800e47e:	4b72      	ldr	r3, [pc, #456]	; (800e648 <sensorsAutodetect+0x1e4>)
 800e480:	f9b3 2158 	ldrsh.w	r2, [r3, #344]	; 0x158
 800e484:	4b70      	ldr	r3, [pc, #448]	; (800e648 <sensorsAutodetect+0x1e4>)
 800e486:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 800e48a:	486e      	ldr	r0, [pc, #440]	; (800e644 <sensorsAutodetect+0x1e0>)
 800e48c:	f00b fb8c 	bl	8019ba8 <pifImuSensor_InitBoardAlignment>

    // set gyro low pass filter parameters
    sensor_set.gyro.lpf = mcfg.gyro_lpf;
 800e490:	4b6d      	ldr	r3, [pc, #436]	; (800e648 <sensorsAutodetect+0x1e4>)
 800e492:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
 800e496:	4b6d      	ldr	r3, [pc, #436]	; (800e64c <sensorsAutodetect+0x1e8>)
 800e498:	821a      	strh	r2, [r3, #16]

    // Autodetect Invensense gyro hardware
    while (gyroDetect->p_func) {
 800e49a:	e010      	b.n	800e4be <sensorsAutodetect+0x5a>
    	if ((*gyroDetect->p_func)(&sensor_set, gyroDetect->p_param)) {
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	6852      	ldr	r2, [r2, #4]
 800e4a4:	4611      	mov	r1, r2
 800e4a6:	4869      	ldr	r0, [pc, #420]	; (800e64c <sensorsAutodetect+0x1e8>)
 800e4a8:	4798      	blx	r3
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d003      	beq.n	800e4b8 <sensorsAutodetect+0x54>
    	    sensorsSet(SENSOR_GYRO);
 800e4b0:	2001      	movs	r0, #1
 800e4b2:	f7f8 fcbb 	bl	8006e2c <sensorsSet>
    		break;
 800e4b6:	e006      	b.n	800e4c6 <sensorsAutodetect+0x62>
    	}
    	gyroDetect++;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	3308      	adds	r3, #8
 800e4bc:	60fb      	str	r3, [r7, #12]
    while (gyroDetect->p_func) {
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d1ea      	bne.n	800e49c <sensorsAutodetect+0x38>
    }
    if (!sensor_set.gyro.hardware) return false;
 800e4c6:	4b61      	ldr	r3, [pc, #388]	; (800e64c <sensorsAutodetect+0x1e8>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d101      	bne.n	800e4d2 <sensorsAutodetect+0x6e>
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	e0b3      	b.n	800e63a <sensorsAutodetect+0x1d6>

    // Autodetect Invensense acc hardware
    if (sensor_set.acc.hardware) {
 800e4d2:	4b5e      	ldr	r3, [pc, #376]	; (800e64c <sensorsAutodetect+0x1e8>)
 800e4d4:	699b      	ldr	r3, [r3, #24]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d003      	beq.n	800e4e2 <sensorsAutodetect+0x7e>
    	sensorsSet(SENSOR_ACC);
 800e4da:	2002      	movs	r0, #2
 800e4dc:	f7f8 fca6 	bl	8006e2c <sensorsSet>
 800e4e0:	e018      	b.n	800e514 <sensorsAutodetect+0xb0>
    }
    else if (accDetect) {
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d015      	beq.n	800e514 <sensorsAutodetect+0xb0>
        while (accDetect->p_func) {
 800e4e8:	e010      	b.n	800e50c <sensorsAutodetect+0xa8>
        	if ((*accDetect->p_func)(&sensor_set, accDetect->p_param)) {
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	68ba      	ldr	r2, [r7, #8]
 800e4f0:	6852      	ldr	r2, [r2, #4]
 800e4f2:	4611      	mov	r1, r2
 800e4f4:	4855      	ldr	r0, [pc, #340]	; (800e64c <sensorsAutodetect+0x1e8>)
 800e4f6:	4798      	blx	r3
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d003      	beq.n	800e506 <sensorsAutodetect+0xa2>
            	sensorsSet(SENSOR_ACC);
 800e4fe:	2002      	movs	r0, #2
 800e500:	f7f8 fc94 	bl	8006e2c <sensorsSet>
        		break;
 800e504:	e006      	b.n	800e514 <sensorsAutodetect+0xb0>
        	}
        	accDetect++;
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	3308      	adds	r3, #8
 800e50a:	60bb      	str	r3, [r7, #8]
        while (accDetect->p_func) {
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d1ea      	bne.n	800e4ea <sensorsAutodetect+0x86>
        }
    }

#ifdef BARO
    // Autodetect Invensense baro hardware
    if (sensor_set.baro.hardware) {
 800e514:	4b4d      	ldr	r3, [pc, #308]	; (800e64c <sensorsAutodetect+0x1e8>)
 800e516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d003      	beq.n	800e524 <sensorsAutodetect+0xc0>
    	sensorsSet(SENSOR_BARO);
 800e51c:	2004      	movs	r0, #4
 800e51e:	f7f8 fc85 	bl	8006e2c <sensorsSet>
 800e522:	e018      	b.n	800e556 <sensorsAutodetect+0xf2>
    }
    else if (baroDetect) {
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d015      	beq.n	800e556 <sensorsAutodetect+0xf2>
		while (baroDetect->p_func) {
 800e52a:	e010      	b.n	800e54e <sensorsAutodetect+0xea>
			if ((*baroDetect->p_func)(&sensor_set, baroDetect->p_param)) {
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	6852      	ldr	r2, [r2, #4]
 800e534:	4611      	mov	r1, r2
 800e536:	4845      	ldr	r0, [pc, #276]	; (800e64c <sensorsAutodetect+0x1e8>)
 800e538:	4798      	blx	r3
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d003      	beq.n	800e548 <sensorsAutodetect+0xe4>
				sensorsSet(SENSOR_BARO);
 800e540:	2004      	movs	r0, #4
 800e542:	f7f8 fc73 	bl	8006e2c <sensorsSet>
				break;
 800e546:	e006      	b.n	800e556 <sensorsAutodetect+0xf2>
			}
			baroDetect++;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	3308      	adds	r3, #8
 800e54c:	607b      	str	r3, [r7, #4]
		while (baroDetect->p_func) {
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d1ea      	bne.n	800e52c <sensorsAutodetect+0xc8>
#else
    (void)baroDetect;
#endif

    // Now time to init things, acc first
    if (sensors(SENSOR_ACC))
 800e556:	2002      	movs	r0, #2
 800e558:	f7f8 fc52 	bl	8006e00 <sensors>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d006      	beq.n	800e570 <sensorsAutodetect+0x10c>
        sensor_set.acc.init(mcfg.acc_align);
 800e562:	4b3a      	ldr	r3, [pc, #232]	; (800e64c <sensorsAutodetect+0x1e8>)
 800e564:	69db      	ldr	r3, [r3, #28]
 800e566:	4a38      	ldr	r2, [pc, #224]	; (800e648 <sensorsAutodetect+0x1e4>)
 800e568:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
 800e56c:	4610      	mov	r0, r2
 800e56e:	4798      	blx	r3
    // this is safe because either mpu6050 or mpu3050 or lg3d20 sets it, and in case of fail, we never get here.
    sensor_set.gyro.init(mcfg.gyro_align);
 800e570:	4b36      	ldr	r3, [pc, #216]	; (800e64c <sensorsAutodetect+0x1e8>)
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	4a34      	ldr	r2, [pc, #208]	; (800e648 <sensorsAutodetect+0x1e4>)
 800e576:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800e57a:	4610      	mov	r0, r2
 800e57c:	4798      	blx	r3

#ifdef MAG
    // Autodetect Invensense mag hardware
    if (sensor_set.mag.hardware) {
 800e57e:	4b33      	ldr	r3, [pc, #204]	; (800e64c <sensorsAutodetect+0x1e8>)
 800e580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e582:	2b00      	cmp	r3, #0
 800e584:	d003      	beq.n	800e58e <sensorsAutodetect+0x12a>
    	sensorsSet(SENSOR_MAG);
 800e586:	2008      	movs	r0, #8
 800e588:	f7f8 fc50 	bl	8006e2c <sensorsSet>
 800e58c:	e018      	b.n	800e5c0 <sensorsAutodetect+0x15c>
    }
    else if (magDetect) {
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d015      	beq.n	800e5c0 <sensorsAutodetect+0x15c>
		while (magDetect->p_func) {
 800e594:	e010      	b.n	800e5b8 <sensorsAutodetect+0x154>
			if ((*magDetect->p_func)(&sensor_set, magDetect->p_param)) {
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	683a      	ldr	r2, [r7, #0]
 800e59c:	6852      	ldr	r2, [r2, #4]
 800e59e:	4611      	mov	r1, r2
 800e5a0:	482a      	ldr	r0, [pc, #168]	; (800e64c <sensorsAutodetect+0x1e8>)
 800e5a2:	4798      	blx	r3
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d003      	beq.n	800e5b2 <sensorsAutodetect+0x14e>
				sensorsSet(SENSOR_MAG);
 800e5aa:	2008      	movs	r0, #8
 800e5ac:	f7f8 fc3e 	bl	8006e2c <sensorsSet>
				break;
 800e5b0:	e006      	b.n	800e5c0 <sensorsAutodetect+0x15c>
			}
			magDetect++;
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	3308      	adds	r3, #8
 800e5b6:	603b      	str	r3, [r7, #0]
		while (magDetect->p_func) {
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d1ea      	bne.n	800e596 <sensorsAutodetect+0x132>
#else
    (void)magDetect;
#endif

    // calculate magnetic declination
    deg = cfg.mag_declination / 100;
 800e5c0:	4b23      	ldr	r3, [pc, #140]	; (800e650 <sensorsAutodetect+0x1ec>)
 800e5c2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e5c6:	4a23      	ldr	r2, [pc, #140]	; (800e654 <sensorsAutodetect+0x1f0>)
 800e5c8:	fb82 1203 	smull	r1, r2, r2, r3
 800e5cc:	1152      	asrs	r2, r2, #5
 800e5ce:	17db      	asrs	r3, r3, #31
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	82fb      	strh	r3, [r7, #22]
    min = cfg.mag_declination % 100;
 800e5d4:	4b1e      	ldr	r3, [pc, #120]	; (800e650 <sensorsAutodetect+0x1ec>)
 800e5d6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e5da:	4a1e      	ldr	r2, [pc, #120]	; (800e654 <sensorsAutodetect+0x1f0>)
 800e5dc:	fb82 1203 	smull	r1, r2, r2, r3
 800e5e0:	1151      	asrs	r1, r2, #5
 800e5e2:	17da      	asrs	r2, r3, #31
 800e5e4:	1a8a      	subs	r2, r1, r2
 800e5e6:	2164      	movs	r1, #100	; 0x64
 800e5e8:	fb01 f202 	mul.w	r2, r1, r2
 800e5ec:	1a9b      	subs	r3, r3, r2
 800e5ee:	82bb      	strh	r3, [r7, #20]
    if (sensors(SENSOR_MAG))
 800e5f0:	2008      	movs	r0, #8
 800e5f2:	f7f8 fc05 	bl	8006e00 <sensors>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d019      	beq.n	800e630 <sensorsAutodetect+0x1cc>
        sensor_set.mag.declination = (deg + ((float)min * (1.0f / 60.0f))) * 10; // heading is in 0.1deg units
 800e5fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e600:	ee07 3a90 	vmov	s15, r3
 800e604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e608:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e60c:	ee07 3a90 	vmov	s15, r3
 800e610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e614:	eddf 6a10 	vldr	s13, [pc, #64]	; 800e658 <sensorsAutodetect+0x1f4>
 800e618:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e61c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e620:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e624:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e628:	4b08      	ldr	r3, [pc, #32]	; (800e64c <sensorsAutodetect+0x1e8>)
 800e62a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 800e62e:	e003      	b.n	800e638 <sensorsAutodetect+0x1d4>
    else
        sensor_set.mag.declination = 0.0f;
 800e630:	4b06      	ldr	r3, [pc, #24]	; (800e64c <sensorsAutodetect+0x1e8>)
 800e632:	f04f 0200 	mov.w	r2, #0
 800e636:	659a      	str	r2, [r3, #88]	; 0x58

    return true;
 800e638:	2301      	movs	r3, #1
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3718      	adds	r7, #24
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	20001a28 	.word	0x20001a28
 800e648:	200007ac 	.word	0x200007ac
 800e64c:	200019c8 	.word	0x200019c8
 800e650:	20000d18 	.word	0x20000d18
 800e654:	51eb851f 	.word	0x51eb851f
 800e658:	3c888889 	.word	0x3c888889

0800e65c <RSSI_getValue>:

uint16_t RSSI_getValue(void)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
    uint16_t value = 0;
 800e662:	2300      	movs	r3, #0
 800e664:	80fb      	strh	r3, [r7, #6]

    if (mcfg.rssi_aux_channel > 0) {
 800e666:	4b2a      	ldr	r3, [pc, #168]	; (800e710 <RSSI_getValue+0xb4>)
 800e668:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d029      	beq.n	800e6c4 <RSSI_getValue+0x68>
        const int16_t rssiChannelData = rcData[AUX1 + mcfg.rssi_aux_channel - 1];
 800e670:	4b27      	ldr	r3, [pc, #156]	; (800e710 <RSSI_getValue+0xb4>)
 800e672:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e676:	3303      	adds	r3, #3
 800e678:	4a26      	ldr	r2, [pc, #152]	; (800e714 <RSSI_getValue+0xb8>)
 800e67a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e67e:	807b      	strh	r3, [r7, #2]
        // Range of rssiChannelData is [1000;2000]. rssi should be in [0;1023];
        value = (uint16_t)((constrain(rssiChannelData - 1000, 0, mcfg.rssi_aux_max) / (float) mcfg.rssi_aux_max) * 1023.0f);
 800e680:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e684:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e688:	4a21      	ldr	r2, [pc, #132]	; (800e710 <RSSI_getValue+0xb4>)
 800e68a:	f8b2 21a2 	ldrh.w	r2, [r2, #418]	; 0x1a2
 800e68e:	2100      	movs	r1, #0
 800e690:	4618      	mov	r0, r3
 800e692:	f7f5 fa7d 	bl	8003b90 <constrain>
 800e696:	ee07 0a90 	vmov	s15, r0
 800e69a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e69e:	4b1c      	ldr	r3, [pc, #112]	; (800e710 <RSSI_getValue+0xb4>)
 800e6a0:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	; 0x1a2
 800e6a4:	ee07 3a90 	vmov	s15, r3
 800e6a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e6ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6b0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e718 <RSSI_getValue+0xbc>
 800e6b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e6b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6bc:	ee17 3a90 	vmov	r3, s15
 800e6c0:	80fb      	strh	r3, [r7, #6]
 800e6c2:	e020      	b.n	800e706 <RSSI_getValue+0xaa>
    } else if (mcfg.rssi_adc_channel > 0) {
 800e6c4:	4b12      	ldr	r3, [pc, #72]	; (800e710 <RSSI_getValue+0xb4>)
 800e6c6:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d01b      	beq.n	800e706 <RSSI_getValue+0xaa>
        const int16_t rssiData = (((int32_t)(actGetAdcChannel(ADC_RSSI) - mcfg.rssi_adc_offset)) * 1023L) / mcfg.rssi_adc_max;
 800e6ce:	2003      	movs	r0, #3
 800e6d0:	f7f2 fd74 	bl	80011bc <actGetAdcChannel>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	4b0d      	ldr	r3, [pc, #52]	; (800e710 <RSSI_getValue+0xb4>)
 800e6da:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 800e6de:	1ad2      	subs	r2, r2, r3
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	029b      	lsls	r3, r3, #10
 800e6e4:	1a9b      	subs	r3, r3, r2
 800e6e6:	4a0a      	ldr	r2, [pc, #40]	; (800e710 <RSSI_getValue+0xb4>)
 800e6e8:	f8b2 21a6 	ldrh.w	r2, [r2, #422]	; 0x1a6
 800e6ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6f0:	80bb      	strh	r3, [r7, #4]
        // Set to correct range [0;1023]
        value = constrain(rssiData, 0, 1023);
 800e6f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e6f6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7f5 fa47 	bl	8003b90 <constrain>
 800e702:	4603      	mov	r3, r0
 800e704:	80fb      	strh	r3, [r7, #6]
    }

    // return range [0;1023]
    return value;
 800e706:	88fb      	ldrh	r3, [r7, #6]
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3708      	adds	r7, #8
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	200007ac 	.word	0x200007ac
 800e714:	20001660 	.word	0x20001660
 800e718:	447fc000 	.word	0x447fc000

0800e71c <batteryInit>:

void batteryInit(void)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
    uint32_t i;
    float voltage = 0;
 800e722:	f04f 0300 	mov.w	r3, #0
 800e726:	603b      	str	r3, [r7, #0]

    // average up some voltage readings
    for (i = 0; i < 32; i++) {
 800e728:	2300      	movs	r3, #0
 800e72a:	607b      	str	r3, [r7, #4]
 800e72c:	e018      	b.n	800e760 <batteryInit+0x44>
        voltage += actGetBatteryVoltage() * mcfg.vbatscale;
 800e72e:	f7f2 fd57 	bl	80011e0 <actGetBatteryVoltage>
 800e732:	eeb0 7a40 	vmov.f32	s14, s0
 800e736:	4b35      	ldr	r3, [pc, #212]	; (800e80c <batteryInit+0xf0>)
 800e738:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800e73c:	ee07 3a90 	vmov	s15, r3
 800e740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e744:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e748:	ed97 7a00 	vldr	s14, [r7]
 800e74c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e750:	edc7 7a00 	vstr	s15, [r7]
        pif_Delay1ms(10);
 800e754:	200a      	movs	r0, #10
 800e756:	f003 f919 	bl	801198c <pif_Delay1ms>
    for (i = 0; i < 32; i++) {
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	3301      	adds	r3, #1
 800e75e:	607b      	str	r3, [r7, #4]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b1f      	cmp	r3, #31
 800e764:	d9e3      	bls.n	800e72e <batteryInit+0x12>
    }

    voltage = voltage / 32;
 800e766:	ed97 7a00 	vldr	s14, [r7]
 800e76a:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e810 <batteryInit+0xf4>
 800e76e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e772:	edc7 7a00 	vstr	s15, [r7]
#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Battery: %fV", voltage / 10);
 800e776:	edd7 7a00 	vldr	s15, [r7]
 800e77a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e77e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e782:	ee16 0a90 	vmov	r0, s13
 800e786:	f7f1 fe9d 	bl	80004c4 <__aeabi_f2d>
 800e78a:	4602      	mov	r2, r0
 800e78c:	460b      	mov	r3, r1
 800e78e:	4921      	ldr	r1, [pc, #132]	; (800e814 <batteryInit+0xf8>)
 800e790:	2002      	movs	r0, #2
 800e792:	f005 f855 	bl	8013840 <pifLog_Printf>
#endif

    // autodetect cell count, going from 2S..8S
    for (i = 1; i < 8; i++) {
 800e796:	2301      	movs	r3, #1
 800e798:	607b      	str	r3, [r7, #4]
 800e79a:	e014      	b.n	800e7c6 <batteryInit+0xaa>
        if (voltage < i * mcfg.vbatmaxcellvoltage)
 800e79c:	4b1b      	ldr	r3, [pc, #108]	; (800e80c <batteryInit+0xf0>)
 800e79e:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	fb02 f303 	mul.w	r3, r2, r3
 800e7aa:	ee07 3a90 	vmov	s15, r3
 800e7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7b2:	ed97 7a00 	vldr	s14, [r7]
 800e7b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7be:	d406      	bmi.n	800e7ce <batteryInit+0xb2>
    for (i = 1; i < 8; i++) {
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	607b      	str	r3, [r7, #4]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2b07      	cmp	r3, #7
 800e7ca:	d9e7      	bls.n	800e79c <batteryInit+0x80>
 800e7cc:	e000      	b.n	800e7d0 <batteryInit+0xb4>
            break;
 800e7ce:	bf00      	nop
    }
    batteryCellCount = i;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	4b10      	ldr	r3, [pc, #64]	; (800e818 <batteryInit+0xfc>)
 800e7d6:	701a      	strb	r2, [r3, #0]
    batteryWarningVoltage = i * mcfg.vbatwarningcellvoltage; // 3.5V per cell minimum, configurable in CLI
 800e7d8:	4b0c      	ldr	r3, [pc, #48]	; (800e80c <batteryInit+0xf0>)
 800e7da:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800e7de:	b29a      	uxth	r2, r3
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	fb12 f303 	smulbb	r3, r2, r3
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	4b0c      	ldr	r3, [pc, #48]	; (800e81c <batteryInit+0x100>)
 800e7ec:	801a      	strh	r2, [r3, #0]
    batteryCriticalVoltage = i * mcfg.vbatmincellvoltage; // 3.3V per cell minimum, configurable in CLI
 800e7ee:	4b07      	ldr	r3, [pc, #28]	; (800e80c <batteryInit+0xf0>)
 800e7f0:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 800e7f4:	b29a      	uxth	r2, r3
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	fb12 f303 	smulbb	r3, r2, r3
 800e7fe:	b29a      	uxth	r2, r3
 800e800:	4b07      	ldr	r3, [pc, #28]	; (800e820 <batteryInit+0x104>)
 800e802:	801a      	strh	r2, [r3, #0]
}
 800e804:	bf00      	nop
 800e806:	3708      	adds	r7, #8
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	200007ac 	.word	0x200007ac
 800e810:	42000000 	.word	0x42000000
 800e814:	08027778 	.word	0x08027778
 800e818:	20000054 	.word	0x20000054
 800e81c:	200017ca 	.word	0x200017ca
 800e820:	200017cc 	.word	0x200017cc

0800e824 <ACC_Common>:

static void ACC_Common(void)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
    static int32_t a[3];
    int axis;

    if (calibratingA > 0) {
 800e82a:	4b4d      	ldr	r3, [pc, #308]	; (800e960 <ACC_Common+0x13c>)
 800e82c:	881b      	ldrh	r3, [r3, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d06b      	beq.n	800e90a <ACC_Common+0xe6>
        for (axis = 0; axis < 3; axis++) {
 800e832:	2300      	movs	r3, #0
 800e834:	607b      	str	r3, [r7, #4]
 800e836:	e025      	b.n	800e884 <ACC_Common+0x60>
            // Reset a[axis] at start of calibration
            if (calibratingA == CALIBRATING_ACC_CYCLES)
 800e838:	4b49      	ldr	r3, [pc, #292]	; (800e960 <ACC_Common+0x13c>)
 800e83a:	881b      	ldrh	r3, [r3, #0]
 800e83c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e840:	d104      	bne.n	800e84c <ACC_Common+0x28>
                a[axis] = 0;
 800e842:	4a48      	ldr	r2, [pc, #288]	; (800e964 <ACC_Common+0x140>)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2100      	movs	r1, #0
 800e848:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            // Sum up CALIBRATING_ACC_CYCLES readings
            a[axis] += accADC[axis];
 800e84c:	4a45      	ldr	r2, [pc, #276]	; (800e964 <ACC_Common+0x140>)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e854:	4944      	ldr	r1, [pc, #272]	; (800e968 <ACC_Common+0x144>)
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800e85c:	441a      	add	r2, r3
 800e85e:	4941      	ldr	r1, [pc, #260]	; (800e964 <ACC_Common+0x140>)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            // Clear global variables for next reading
            accADC[axis] = 0;
 800e866:	4a40      	ldr	r2, [pc, #256]	; (800e968 <ACC_Common+0x144>)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2100      	movs	r1, #0
 800e86c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            mcfg.accZero[axis] = 0;
 800e870:	4a3e      	ldr	r2, [pc, #248]	; (800e96c <ACC_Common+0x148>)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	33b4      	adds	r3, #180	; 0xb4
 800e876:	005b      	lsls	r3, r3, #1
 800e878:	4413      	add	r3, r2
 800e87a:	2200      	movs	r2, #0
 800e87c:	805a      	strh	r2, [r3, #2]
        for (axis = 0; axis < 3; axis++) {
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	3301      	adds	r3, #1
 800e882:	607b      	str	r3, [r7, #4]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b02      	cmp	r3, #2
 800e888:	ddd6      	ble.n	800e838 <ACC_Common+0x14>
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (calibratingA == 1) {
 800e88a:	4b35      	ldr	r3, [pc, #212]	; (800e960 <ACC_Common+0x13c>)
 800e88c:	881b      	ldrh	r3, [r3, #0]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d135      	bne.n	800e8fe <ACC_Common+0xda>
            mcfg.accZero[ROLL] = (a[ROLL] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e892:	4b34      	ldr	r3, [pc, #208]	; (800e964 <ACC_Common+0x140>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	33c8      	adds	r3, #200	; 0xc8
 800e898:	4a35      	ldr	r2, [pc, #212]	; (800e970 <ACC_Common+0x14c>)
 800e89a:	fb82 1203 	smull	r1, r2, r2, r3
 800e89e:	11d2      	asrs	r2, r2, #7
 800e8a0:	17db      	asrs	r3, r3, #31
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	b21a      	sxth	r2, r3
 800e8a6:	4b31      	ldr	r3, [pc, #196]	; (800e96c <ACC_Common+0x148>)
 800e8a8:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = (a[PITCH] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e8ac:	4b2d      	ldr	r3, [pc, #180]	; (800e964 <ACC_Common+0x140>)
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	33c8      	adds	r3, #200	; 0xc8
 800e8b2:	4a2f      	ldr	r2, [pc, #188]	; (800e970 <ACC_Common+0x14c>)
 800e8b4:	fb82 1203 	smull	r1, r2, r2, r3
 800e8b8:	11d2      	asrs	r2, r2, #7
 800e8ba:	17db      	asrs	r3, r3, #31
 800e8bc:	1ad3      	subs	r3, r2, r3
 800e8be:	b21a      	sxth	r2, r3
 800e8c0:	4b2a      	ldr	r3, [pc, #168]	; (800e96c <ACC_Common+0x148>)
 800e8c2:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = (a[YAW] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES - acc_1G;
 800e8c6:	4b27      	ldr	r3, [pc, #156]	; (800e964 <ACC_Common+0x140>)
 800e8c8:	689b      	ldr	r3, [r3, #8]
 800e8ca:	33c8      	adds	r3, #200	; 0xc8
 800e8cc:	4a28      	ldr	r2, [pc, #160]	; (800e970 <ACC_Common+0x14c>)
 800e8ce:	fb82 1203 	smull	r1, r2, r2, r3
 800e8d2:	11d2      	asrs	r2, r2, #7
 800e8d4:	17db      	asrs	r3, r3, #31
 800e8d6:	1ad3      	subs	r3, r2, r3
 800e8d8:	b29a      	uxth	r2, r3
 800e8da:	4b26      	ldr	r3, [pc, #152]	; (800e974 <ACC_Common+0x150>)
 800e8dc:	881b      	ldrh	r3, [r3, #0]
 800e8de:	1ad3      	subs	r3, r2, r3
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	b21a      	sxth	r2, r3
 800e8e4:	4b21      	ldr	r3, [pc, #132]	; (800e96c <ACC_Common+0x148>)
 800e8e6:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e8ea:	4b23      	ldr	r3, [pc, #140]	; (800e978 <ACC_Common+0x154>)
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e8f0:	4b21      	ldr	r3, [pc, #132]	; (800e978 <ACC_Common+0x154>)
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);      // write accZero in EEPROM
 800e8f6:	2101      	movs	r1, #1
 800e8f8:	2001      	movs	r0, #1
 800e8fa:	f7f7 fee7 	bl	80066cc <writeEEPROM>
        }
        calibratingA--;
 800e8fe:	4b18      	ldr	r3, [pc, #96]	; (800e960 <ACC_Common+0x13c>)
 800e900:	881b      	ldrh	r3, [r3, #0]
 800e902:	3b01      	subs	r3, #1
 800e904:	b29a      	uxth	r2, r3
 800e906:	4b16      	ldr	r3, [pc, #88]	; (800e960 <ACC_Common+0x13c>)
 800e908:	801a      	strh	r2, [r3, #0]
    }

    if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800e90a:	2004      	movs	r0, #4
 800e90c:	f7f8 fac0 	bl	8006e90 <feature>
 800e910:	4603      	mov	r3, r0
 800e912:	2b00      	cmp	r3, #0
 800e914:	f000 80c9 	beq.w	800eaaa <ACC_Common+0x286>
        static int32_t b[3];
        static int16_t accZero_saved[3] = { 0, 0, 0 };
        static int16_t angleTrim_saved[2] = { 0, 0 };
        // Saving old zeropoints before measurement
        if (InflightcalibratingA == 50) {
 800e918:	4b18      	ldr	r3, [pc, #96]	; (800e97c <ACC_Common+0x158>)
 800e91a:	881b      	ldrh	r3, [r3, #0]
 800e91c:	2b32      	cmp	r3, #50	; 0x32
 800e91e:	d118      	bne.n	800e952 <ACC_Common+0x12e>
            accZero_saved[ROLL] = mcfg.accZero[ROLL];
 800e920:	4b12      	ldr	r3, [pc, #72]	; (800e96c <ACC_Common+0x148>)
 800e922:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	; 0x16a
 800e926:	4b16      	ldr	r3, [pc, #88]	; (800e980 <ACC_Common+0x15c>)
 800e928:	801a      	strh	r2, [r3, #0]
            accZero_saved[PITCH] = mcfg.accZero[PITCH];
 800e92a:	4b10      	ldr	r3, [pc, #64]	; (800e96c <ACC_Common+0x148>)
 800e92c:	f9b3 216c 	ldrsh.w	r2, [r3, #364]	; 0x16c
 800e930:	4b13      	ldr	r3, [pc, #76]	; (800e980 <ACC_Common+0x15c>)
 800e932:	805a      	strh	r2, [r3, #2]
            accZero_saved[YAW] = mcfg.accZero[YAW];
 800e934:	4b0d      	ldr	r3, [pc, #52]	; (800e96c <ACC_Common+0x148>)
 800e936:	f9b3 216e 	ldrsh.w	r2, [r3, #366]	; 0x16e
 800e93a:	4b11      	ldr	r3, [pc, #68]	; (800e980 <ACC_Common+0x15c>)
 800e93c:	809a      	strh	r2, [r3, #4]
            angleTrim_saved[ROLL] = cfg.angleTrim[ROLL];
 800e93e:	4b0e      	ldr	r3, [pc, #56]	; (800e978 <ACC_Common+0x154>)
 800e940:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800e944:	4b0f      	ldr	r3, [pc, #60]	; (800e984 <ACC_Common+0x160>)
 800e946:	801a      	strh	r2, [r3, #0]
            angleTrim_saved[PITCH] = cfg.angleTrim[PITCH];
 800e948:	4b0b      	ldr	r3, [pc, #44]	; (800e978 <ACC_Common+0x154>)
 800e94a:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 800e94e:	4b0d      	ldr	r3, [pc, #52]	; (800e984 <ACC_Common+0x160>)
 800e950:	805a      	strh	r2, [r3, #2]
        }
        if (InflightcalibratingA > 0) {
 800e952:	4b0a      	ldr	r3, [pc, #40]	; (800e97c <ACC_Common+0x158>)
 800e954:	881b      	ldrh	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d06d      	beq.n	800ea36 <ACC_Common+0x212>
            for (axis = 0; axis < 3; axis++) {
 800e95a:	2300      	movs	r3, #0
 800e95c:	607b      	str	r3, [r7, #4]
 800e95e:	e038      	b.n	800e9d2 <ACC_Common+0x1ae>
 800e960:	200019b4 	.word	0x200019b4
 800e964:	20001aa8 	.word	0x20001aa8
 800e968:	200013b0 	.word	0x200013b0
 800e96c:	200007ac 	.word	0x200007ac
 800e970:	51eb851f 	.word	0x51eb851f
 800e974:	2000005a 	.word	0x2000005a
 800e978:	20000d18 	.word	0x20000d18
 800e97c:	200017c8 	.word	0x200017c8
 800e980:	20001ab4 	.word	0x20001ab4
 800e984:	20001abc 	.word	0x20001abc
                // Reset a[axis] at start of calibration
                if (InflightcalibratingA == 50)
 800e988:	4b5d      	ldr	r3, [pc, #372]	; (800eb00 <ACC_Common+0x2dc>)
 800e98a:	881b      	ldrh	r3, [r3, #0]
 800e98c:	2b32      	cmp	r3, #50	; 0x32
 800e98e:	d104      	bne.n	800e99a <ACC_Common+0x176>
                    b[axis] = 0;
 800e990:	4a5c      	ldr	r2, [pc, #368]	; (800eb04 <ACC_Common+0x2e0>)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2100      	movs	r1, #0
 800e996:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                // Sum up 50 readings
                b[axis] += accADC[axis];
 800e99a:	4a5a      	ldr	r2, [pc, #360]	; (800eb04 <ACC_Common+0x2e0>)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9a2:	4959      	ldr	r1, [pc, #356]	; (800eb08 <ACC_Common+0x2e4>)
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800e9aa:	441a      	add	r2, r3
 800e9ac:	4955      	ldr	r1, [pc, #340]	; (800eb04 <ACC_Common+0x2e0>)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Clear global variables for next reading
                accADC[axis] = 0;
 800e9b4:	4a54      	ldr	r2, [pc, #336]	; (800eb08 <ACC_Common+0x2e4>)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                mcfg.accZero[axis] = 0;
 800e9be:	4a53      	ldr	r2, [pc, #332]	; (800eb0c <ACC_Common+0x2e8>)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	33b4      	adds	r3, #180	; 0xb4
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	4413      	add	r3, r2
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	805a      	strh	r2, [r3, #2]
            for (axis = 0; axis < 3; axis++) {
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	607b      	str	r3, [r7, #4]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2b02      	cmp	r3, #2
 800e9d6:	ddd7      	ble.n	800e988 <ACC_Common+0x164>
            }
            // all values are measured
            if (InflightcalibratingA == 1) {
 800e9d8:	4b49      	ldr	r3, [pc, #292]	; (800eb00 <ACC_Common+0x2dc>)
 800e9da:	881b      	ldrh	r3, [r3, #0]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d124      	bne.n	800ea2a <ACC_Common+0x206>
                AccInflightCalibrationActive = false;
 800e9e0:	4b4b      	ldr	r3, [pc, #300]	; (800eb10 <ACC_Common+0x2ec>)
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationMeasurementDone = true;
 800e9e6:	4b4b      	ldr	r3, [pc, #300]	; (800eb14 <ACC_Common+0x2f0>)
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_ACC_CALIBRATION);      // buzzer for indicatiing the end of calibration
 800e9ec:	200a      	movs	r0, #10
 800e9ee:	f7f5 fa5f 	bl	8003eb0 <buzzer>
                // recover saved values to maintain current flight behavior until new values are transferred
                mcfg.accZero[ROLL] = accZero_saved[ROLL];
 800e9f2:	4b49      	ldr	r3, [pc, #292]	; (800eb18 <ACC_Common+0x2f4>)
 800e9f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e9f8:	4b44      	ldr	r3, [pc, #272]	; (800eb0c <ACC_Common+0x2e8>)
 800e9fa:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
                mcfg.accZero[PITCH] = accZero_saved[PITCH];
 800e9fe:	4b46      	ldr	r3, [pc, #280]	; (800eb18 <ACC_Common+0x2f4>)
 800ea00:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800ea04:	4b41      	ldr	r3, [pc, #260]	; (800eb0c <ACC_Common+0x2e8>)
 800ea06:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
                mcfg.accZero[YAW] = accZero_saved[YAW];
 800ea0a:	4b43      	ldr	r3, [pc, #268]	; (800eb18 <ACC_Common+0x2f4>)
 800ea0c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800ea10:	4b3e      	ldr	r3, [pc, #248]	; (800eb0c <ACC_Common+0x2e8>)
 800ea12:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
                cfg.angleTrim[ROLL] = angleTrim_saved[ROLL];
 800ea16:	4b41      	ldr	r3, [pc, #260]	; (800eb1c <ACC_Common+0x2f8>)
 800ea18:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ea1c:	4b40      	ldr	r3, [pc, #256]	; (800eb20 <ACC_Common+0x2fc>)
 800ea1e:	859a      	strh	r2, [r3, #44]	; 0x2c
                cfg.angleTrim[PITCH] = angleTrim_saved[PITCH];
 800ea20:	4b3e      	ldr	r3, [pc, #248]	; (800eb1c <ACC_Common+0x2f8>)
 800ea22:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800ea26:	4b3e      	ldr	r3, [pc, #248]	; (800eb20 <ACC_Common+0x2fc>)
 800ea28:	85da      	strh	r2, [r3, #46]	; 0x2e
            }
            InflightcalibratingA--;
 800ea2a:	4b35      	ldr	r3, [pc, #212]	; (800eb00 <ACC_Common+0x2dc>)
 800ea2c:	881b      	ldrh	r3, [r3, #0]
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	4b33      	ldr	r3, [pc, #204]	; (800eb00 <ACC_Common+0x2dc>)
 800ea34:	801a      	strh	r2, [r3, #0]
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (AccInflightCalibrationSavetoEEProm) {      // the copter is landed, disarmed and the combo has been done again
 800ea36:	4b3b      	ldr	r3, [pc, #236]	; (800eb24 <ACC_Common+0x300>)
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d035      	beq.n	800eaaa <ACC_Common+0x286>
            AccInflightCalibrationSavetoEEProm = false;
 800ea3e:	4b39      	ldr	r3, [pc, #228]	; (800eb24 <ACC_Common+0x300>)
 800ea40:	2200      	movs	r2, #0
 800ea42:	701a      	strb	r2, [r3, #0]
            mcfg.accZero[ROLL] = b[ROLL] / 50;
 800ea44:	4b2f      	ldr	r3, [pc, #188]	; (800eb04 <ACC_Common+0x2e0>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	4a37      	ldr	r2, [pc, #220]	; (800eb28 <ACC_Common+0x304>)
 800ea4a:	fb82 1203 	smull	r1, r2, r2, r3
 800ea4e:	1112      	asrs	r2, r2, #4
 800ea50:	17db      	asrs	r3, r3, #31
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	b21a      	sxth	r2, r3
 800ea56:	4b2d      	ldr	r3, [pc, #180]	; (800eb0c <ACC_Common+0x2e8>)
 800ea58:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = b[PITCH] / 50;
 800ea5c:	4b29      	ldr	r3, [pc, #164]	; (800eb04 <ACC_Common+0x2e0>)
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	4a31      	ldr	r2, [pc, #196]	; (800eb28 <ACC_Common+0x304>)
 800ea62:	fb82 1203 	smull	r1, r2, r2, r3
 800ea66:	1112      	asrs	r2, r2, #4
 800ea68:	17db      	asrs	r3, r3, #31
 800ea6a:	1ad3      	subs	r3, r2, r3
 800ea6c:	b21a      	sxth	r2, r3
 800ea6e:	4b27      	ldr	r3, [pc, #156]	; (800eb0c <ACC_Common+0x2e8>)
 800ea70:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = b[YAW] / 50 - acc_1G;    // for nunchuk 200=1G
 800ea74:	4b23      	ldr	r3, [pc, #140]	; (800eb04 <ACC_Common+0x2e0>)
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	4a2b      	ldr	r2, [pc, #172]	; (800eb28 <ACC_Common+0x304>)
 800ea7a:	fb82 1203 	smull	r1, r2, r2, r3
 800ea7e:	1112      	asrs	r2, r2, #4
 800ea80:	17db      	asrs	r3, r3, #31
 800ea82:	1ad3      	subs	r3, r2, r3
 800ea84:	b29a      	uxth	r2, r3
 800ea86:	4b29      	ldr	r3, [pc, #164]	; (800eb2c <ACC_Common+0x308>)
 800ea88:	881b      	ldrh	r3, [r3, #0]
 800ea8a:	1ad3      	subs	r3, r2, r3
 800ea8c:	b29b      	uxth	r3, r3
 800ea8e:	b21a      	sxth	r2, r3
 800ea90:	4b1e      	ldr	r3, [pc, #120]	; (800eb0c <ACC_Common+0x2e8>)
 800ea92:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800ea96:	4b22      	ldr	r3, [pc, #136]	; (800eb20 <ACC_Common+0x2fc>)
 800ea98:	2200      	movs	r2, #0
 800ea9a:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800ea9c:	4b20      	ldr	r3, [pc, #128]	; (800eb20 <ACC_Common+0x2fc>)
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);          // write accZero in EEPROM
 800eaa2:	2101      	movs	r1, #1
 800eaa4:	2001      	movs	r0, #1
 800eaa6:	f7f7 fe11 	bl	80066cc <writeEEPROM>
        }
    }

    accADC[ROLL] -= mcfg.accZero[ROLL];
 800eaaa:	4b17      	ldr	r3, [pc, #92]	; (800eb08 <ACC_Common+0x2e4>)
 800eaac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eab0:	b29a      	uxth	r2, r3
 800eab2:	4b16      	ldr	r3, [pc, #88]	; (800eb0c <ACC_Common+0x2e8>)
 800eab4:	f9b3 316a 	ldrsh.w	r3, [r3, #362]	; 0x16a
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	1ad3      	subs	r3, r2, r3
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	b21a      	sxth	r2, r3
 800eac0:	4b11      	ldr	r3, [pc, #68]	; (800eb08 <ACC_Common+0x2e4>)
 800eac2:	801a      	strh	r2, [r3, #0]
    accADC[PITCH] -= mcfg.accZero[PITCH];
 800eac4:	4b10      	ldr	r3, [pc, #64]	; (800eb08 <ACC_Common+0x2e4>)
 800eac6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eaca:	b29a      	uxth	r2, r3
 800eacc:	4b0f      	ldr	r3, [pc, #60]	; (800eb0c <ACC_Common+0x2e8>)
 800eace:	f9b3 316c 	ldrsh.w	r3, [r3, #364]	; 0x16c
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	1ad3      	subs	r3, r2, r3
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	b21a      	sxth	r2, r3
 800eada:	4b0b      	ldr	r3, [pc, #44]	; (800eb08 <ACC_Common+0x2e4>)
 800eadc:	805a      	strh	r2, [r3, #2]
    accADC[YAW] -= mcfg.accZero[YAW];
 800eade:	4b0a      	ldr	r3, [pc, #40]	; (800eb08 <ACC_Common+0x2e4>)
 800eae0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	4b09      	ldr	r3, [pc, #36]	; (800eb0c <ACC_Common+0x2e8>)
 800eae8:	f9b3 316e 	ldrsh.w	r3, [r3, #366]	; 0x16e
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	1ad3      	subs	r3, r2, r3
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	b21a      	sxth	r2, r3
 800eaf4:	4b04      	ldr	r3, [pc, #16]	; (800eb08 <ACC_Common+0x2e4>)
 800eaf6:	809a      	strh	r2, [r3, #4]
}
 800eaf8:	bf00      	nop
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	200017c8 	.word	0x200017c8
 800eb04:	20001ac0 	.word	0x20001ac0
 800eb08:	200013b0 	.word	0x200013b0
 800eb0c:	200007ac 	.word	0x200007ac
 800eb10:	200017c7 	.word	0x200017c7
 800eb14:	200017c5 	.word	0x200017c5
 800eb18:	20001ab4 	.word	0x20001ab4
 800eb1c:	20001abc 	.word	0x20001abc
 800eb20:	20000d18 	.word	0x20000d18
 800eb24:	200017c6 	.word	0x200017c6
 800eb28:	51eb851f 	.word	0x51eb851f
 800eb2c:	2000005a 	.word	0x2000005a

0800eb30 <ACC_getADC>:

BOOL ACC_getADC(void)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	af00      	add	r7, sp, #0
    if (sensor_set.acc.read(accADC)) {
 800eb34:	4b06      	ldr	r3, [pc, #24]	; (800eb50 <ACC_getADC+0x20>)
 800eb36:	6a1b      	ldr	r3, [r3, #32]
 800eb38:	4806      	ldr	r0, [pc, #24]	; (800eb54 <ACC_getADC+0x24>)
 800eb3a:	4798      	blx	r3
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d003      	beq.n	800eb4a <ACC_getADC+0x1a>
    	ACC_Common();
 800eb42:	f7ff fe6f 	bl	800e824 <ACC_Common>
    	return TRUE;
 800eb46:	2301      	movs	r3, #1
 800eb48:	e000      	b.n	800eb4c <ACC_getADC+0x1c>
    }
	return FALSE;
 800eb4a:	2300      	movs	r3, #0
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	200019c8 	.word	0x200019c8
 800eb54:	200013b0 	.word	0x200013b0

0800eb58 <Baro_Common>:

#ifdef BARO
static void Baro_Common(void)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
    static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
    static int baroHistIdx = 0;
    int indexplus1;

    indexplus1 = (baroHistIdx + 1);
 800eb5e:	4b18      	ldr	r3, [pc, #96]	; (800ebc0 <Baro_Common+0x68>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	3301      	adds	r3, #1
 800eb64:	607b      	str	r3, [r7, #4]
    if (indexplus1 >= cfg.baro_tab_size)
 800eb66:	4b17      	ldr	r3, [pc, #92]	; (800ebc4 <Baro_Common+0x6c>)
 800eb68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	4293      	cmp	r3, r2
 800eb72:	db01      	blt.n	800eb78 <Baro_Common+0x20>
        indexplus1 = 0;
 800eb74:	2300      	movs	r3, #0
 800eb76:	607b      	str	r3, [r7, #4]
    baroHistTab[baroHistIdx] = baroPressure;
 800eb78:	4b11      	ldr	r3, [pc, #68]	; (800ebc0 <Baro_Common+0x68>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4a12      	ldr	r2, [pc, #72]	; (800ebc8 <Baro_Common+0x70>)
 800eb7e:	6812      	ldr	r2, [r2, #0]
 800eb80:	4912      	ldr	r1, [pc, #72]	; (800ebcc <Baro_Common+0x74>)
 800eb82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    baroPressureSum += baroHistTab[baroHistIdx];
 800eb86:	4b0e      	ldr	r3, [pc, #56]	; (800ebc0 <Baro_Common+0x68>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	4a10      	ldr	r2, [pc, #64]	; (800ebcc <Baro_Common+0x74>)
 800eb8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb90:	461a      	mov	r2, r3
 800eb92:	4b0f      	ldr	r3, [pc, #60]	; (800ebd0 <Baro_Common+0x78>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4413      	add	r3, r2
 800eb98:	4a0d      	ldr	r2, [pc, #52]	; (800ebd0 <Baro_Common+0x78>)
 800eb9a:	6013      	str	r3, [r2, #0]
    baroPressureSum -= baroHistTab[indexplus1];
 800eb9c:	4b0c      	ldr	r3, [pc, #48]	; (800ebd0 <Baro_Common+0x78>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	490a      	ldr	r1, [pc, #40]	; (800ebcc <Baro_Common+0x74>)
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800eba8:	1a9b      	subs	r3, r3, r2
 800ebaa:	4a09      	ldr	r2, [pc, #36]	; (800ebd0 <Baro_Common+0x78>)
 800ebac:	6013      	str	r3, [r2, #0]
    baroHistIdx = indexplus1;
 800ebae:	4a04      	ldr	r2, [pc, #16]	; (800ebc0 <Baro_Common+0x68>)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6013      	str	r3, [r2, #0]
}
 800ebb4:	bf00      	nop
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr
 800ebc0:	20001acc 	.word	0x20001acc
 800ebc4:	20000d18 	.word	0x20000d18
 800ebc8:	200019c0 	.word	0x200019c0
 800ebcc:	20001ad0 	.word	0x20001ad0
 800ebd0:	200013e0 	.word	0x200013e0

0800ebd4 <evtBaroRead>:

void evtBaroRead(int32_t pressure, float temperature)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	ed87 0a00 	vstr	s0, [r7]
    baroPressure = pressure;
 800ebe0:	4a0c      	ldr	r2, [pc, #48]	; (800ec14 <evtBaroRead+0x40>)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6013      	str	r3, [r2, #0]
    baroTemperature = temperature * 100;
 800ebe6:	edd7 7a00 	vldr	s15, [r7]
 800ebea:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800ec18 <evtBaroRead+0x44>
 800ebee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ebf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ebf6:	ee17 2a90 	vmov	r2, s15
 800ebfa:	4b08      	ldr	r3, [pc, #32]	; (800ec1c <evtBaroRead+0x48>)
 800ebfc:	601a      	str	r2, [r3, #0]
    Baro_Common();
 800ebfe:	f7ff ffab 	bl	800eb58 <Baro_Common>
    sensor_set.baro.p_b_task->immediate = TRUE;
 800ec02:	4b07      	ldr	r3, [pc, #28]	; (800ec20 <evtBaroRead+0x4c>)
 800ec04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec06:	2201      	movs	r2, #1
 800ec08:	705a      	strb	r2, [r3, #1]
}
 800ec0a:	bf00      	nop
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	200019c0 	.word	0x200019c0
 800ec18:	42c80000 	.word	0x42c80000
 800ec1c:	200019c4 	.word	0x200019c4
 800ec20:	200019c8 	.word	0x200019c8

0800ec24 <devClear>:
    float m_oldM, m_newM, m_oldS, m_newS;
    int m_n;
} stdev_t;

static void devClear(stdev_t *dev)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
    dev->m_n = 0;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	611a      	str	r2, [r3, #16]
}
 800ec32:	bf00      	nop
 800ec34:	370c      	adds	r7, #12
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr

0800ec3e <devPush>:

static void devPush(stdev_t *dev, float x)
{
 800ec3e:	b480      	push	{r7}
 800ec40:	b083      	sub	sp, #12
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
 800ec46:	ed87 0a00 	vstr	s0, [r7]
    dev->m_n++;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	691b      	ldr	r3, [r3, #16]
 800ec4e:	1c5a      	adds	r2, r3, #1
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	611a      	str	r2, [r3, #16]
    if (dev->m_n == 1) {
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	691b      	ldr	r3, [r3, #16]
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d10b      	bne.n	800ec74 <devPush+0x36>
        dev->m_oldM = dev->m_newM = x;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	683a      	ldr	r2, [r7, #0]
 800ec60:	605a      	str	r2, [r3, #4]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	685a      	ldr	r2, [r3, #4]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	601a      	str	r2, [r3, #0]
        dev->m_oldS = 0.0f;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f04f 0200 	mov.w	r2, #0
 800ec70:	609a      	str	r2, [r3, #8]
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
        dev->m_oldM = dev->m_newM;
        dev->m_oldS = dev->m_newS;
    }
}
 800ec72:	e036      	b.n	800ece2 <devPush+0xa4>
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	ed93 7a00 	vldr	s14, [r3]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	edd3 7a00 	vldr	s15, [r3]
 800ec80:	edd7 6a00 	vldr	s13, [r7]
 800ec84:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	691b      	ldr	r3, [r3, #16]
 800ec8c:	ee07 3a90 	vmov	s15, r3
 800ec90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ec94:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ec98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	edc3 7a01 	vstr	s15, [r3, #4]
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	ed93 7a02 	vldr	s14, [r3, #8]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	edd3 7a00 	vldr	s15, [r3]
 800ecae:	edd7 6a00 	vldr	s13, [r7]
 800ecb2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	edd3 7a01 	vldr	s15, [r3, #4]
 800ecbc:	ed97 6a00 	vldr	s12, [r7]
 800ecc0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ecc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ecc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	edc3 7a03 	vstr	s15, [r3, #12]
        dev->m_oldM = dev->m_newM;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	685a      	ldr	r2, [r3, #4]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	601a      	str	r2, [r3, #0]
        dev->m_oldS = dev->m_newS;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	68da      	ldr	r2, [r3, #12]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	609a      	str	r2, [r3, #8]
}
 800ece2:	bf00      	nop
 800ece4:	370c      	adds	r7, #12
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr
	...

0800ecf0 <devVariance>:

static float devVariance(stdev_t *dev)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b083      	sub	sp, #12
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
    return ((dev->m_n > 1) ? dev->m_newS / (dev->m_n - 1) : 0.0f);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	691b      	ldr	r3, [r3, #16]
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	dd0c      	ble.n	800ed1a <devVariance+0x2a>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	ed93 7a03 	vldr	s14, [r3, #12]
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	691b      	ldr	r3, [r3, #16]
 800ed0a:	3b01      	subs	r3, #1
 800ed0c:	ee07 3a90 	vmov	s15, r3
 800ed10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ed18:	e001      	b.n	800ed1e <devVariance+0x2e>
 800ed1a:	eddf 6a05 	vldr	s13, [pc, #20]	; 800ed30 <devVariance+0x40>
 800ed1e:	eef0 7a66 	vmov.f32	s15, s13
}
 800ed22:	eeb0 0a67 	vmov.f32	s0, s15
 800ed26:	370c      	adds	r7, #12
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr
 800ed30:	00000000 	.word	0x00000000

0800ed34 <devStandardDeviation>:

static float devStandardDeviation(stdev_t *dev)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
    return sqrtf(devVariance(dev));
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f7ff ffd7 	bl	800ecf0 <devVariance>
 800ed42:	eef0 7a40 	vmov.f32	s15, s0
 800ed46:	eeb0 0a67 	vmov.f32	s0, s15
 800ed4a:	f014 fecd 	bl	8023ae8 <sqrtf>
 800ed4e:	eef0 7a40 	vmov.f32	s15, s0
}
 800ed52:	eeb0 0a67 	vmov.f32	s0, s15
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <GYRO_Common>:

static void GYRO_Common(void)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b086      	sub	sp, #24
 800ed60:	af04      	add	r7, sp, #16
    int axis;
    static int32_t g[3];
    static stdev_t var[3];

    if (calibratingG > 0) {
 800ed62:	4b75      	ldr	r3, [pc, #468]	; (800ef38 <GYRO_Common+0x1dc>)
 800ed64:	881b      	ldrh	r3, [r3, #0]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	f000 80c6 	beq.w	800eef8 <GYRO_Common+0x19c>
        for (axis = 0; axis < 3; axis++) {
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	607b      	str	r3, [r7, #4]
 800ed70:	e0a3      	b.n	800eeba <GYRO_Common+0x15e>
            // Reset g[axis] at start of calibration
            if (calibratingG == CALIBRATING_GYRO_CYCLES) {
 800ed72:	4b71      	ldr	r3, [pc, #452]	; (800ef38 <GYRO_Common+0x1dc>)
 800ed74:	881b      	ldrh	r3, [r3, #0]
 800ed76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ed7a:	d10e      	bne.n	800ed9a <GYRO_Common+0x3e>
                g[axis] = 0;
 800ed7c:	4a6f      	ldr	r2, [pc, #444]	; (800ef3c <GYRO_Common+0x1e0>)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2100      	movs	r1, #0
 800ed82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                devClear(&var[axis]);
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	4613      	mov	r3, r2
 800ed8a:	009b      	lsls	r3, r3, #2
 800ed8c:	4413      	add	r3, r2
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	4a6b      	ldr	r2, [pc, #428]	; (800ef40 <GYRO_Common+0x1e4>)
 800ed92:	4413      	add	r3, r2
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7ff ff45 	bl	800ec24 <devClear>
            }
            // Sum up 1000 readings
            g[axis] += gyroADC[axis];
 800ed9a:	4a68      	ldr	r2, [pc, #416]	; (800ef3c <GYRO_Common+0x1e0>)
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eda2:	4968      	ldr	r1, [pc, #416]	; (800ef44 <GYRO_Common+0x1e8>)
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800edaa:	441a      	add	r2, r3
 800edac:	4963      	ldr	r1, [pc, #396]	; (800ef3c <GYRO_Common+0x1e0>)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            devPush(&var[axis], (float)gyroADC[axis]);
 800edb4:	687a      	ldr	r2, [r7, #4]
 800edb6:	4613      	mov	r3, r2
 800edb8:	009b      	lsls	r3, r3, #2
 800edba:	4413      	add	r3, r2
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	4a60      	ldr	r2, [pc, #384]	; (800ef40 <GYRO_Common+0x1e4>)
 800edc0:	441a      	add	r2, r3
 800edc2:	4960      	ldr	r1, [pc, #384]	; (800ef44 <GYRO_Common+0x1e8>)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800edca:	ee07 3a90 	vmov	s15, r3
 800edce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edd2:	eeb0 0a67 	vmov.f32	s0, s15
 800edd6:	4610      	mov	r0, r2
 800edd8:	f7ff ff31 	bl	800ec3e <devPush>
            // Clear global variables for next reading
            gyroADC[axis] = 0;
 800eddc:	4a59      	ldr	r2, [pc, #356]	; (800ef44 <GYRO_Common+0x1e8>)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2100      	movs	r1, #0
 800ede2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            gyroZero[axis] = 0;
 800ede6:	4a58      	ldr	r2, [pc, #352]	; (800ef48 <GYRO_Common+0x1ec>)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2100      	movs	r1, #0
 800edec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (calibratingG == 1) {
 800edf0:	4b51      	ldr	r3, [pc, #324]	; (800ef38 <GYRO_Common+0x1dc>)
 800edf2:	881b      	ldrh	r3, [r3, #0]
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d15d      	bne.n	800eeb4 <GYRO_Common+0x158>
                float dev = devStandardDeviation(&var[axis]);
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	4613      	mov	r3, r2
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	4413      	add	r3, r2
 800ee00:	009b      	lsls	r3, r3, #2
 800ee02:	4a4f      	ldr	r2, [pc, #316]	; (800ef40 <GYRO_Common+0x1e4>)
 800ee04:	4413      	add	r3, r2
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff ff94 	bl	800ed34 <devStandardDeviation>
 800ee0c:	ed87 0a00 	vstr	s0, [r7]
                // check deviation and startover if idiot was moving the model
                if (mcfg.moron_threshold && dev > mcfg.moron_threshold) {
 800ee10:	4b4e      	ldr	r3, [pc, #312]	; (800ef4c <GYRO_Common+0x1f0>)
 800ee12:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d036      	beq.n	800ee88 <GYRO_Common+0x12c>
 800ee1a:	4b4c      	ldr	r3, [pc, #304]	; (800ef4c <GYRO_Common+0x1f0>)
 800ee1c:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ee20:	ee07 3a90 	vmov	s15, r3
 800ee24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee28:	ed97 7a00 	vldr	s14, [r7]
 800ee2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ee30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee34:	dd28      	ble.n	800ee88 <GYRO_Common+0x12c>
#ifndef __PIF_NO_LOG__
                    pifLog_Printf(LT_INFO, "Gyro Calib[%u]: %f > %d", axis, dev, mcfg.moron_threshold);
 800ee36:	6838      	ldr	r0, [r7, #0]
 800ee38:	f7f1 fb44 	bl	80004c4 <__aeabi_f2d>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	460b      	mov	r3, r1
 800ee40:	4942      	ldr	r1, [pc, #264]	; (800ef4c <GYRO_Common+0x1f0>)
 800ee42:	f891 1166 	ldrb.w	r1, [r1, #358]	; 0x166
 800ee46:	9102      	str	r1, [sp, #8]
 800ee48:	e9cd 2300 	strd	r2, r3, [sp]
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	4940      	ldr	r1, [pc, #256]	; (800ef50 <GYRO_Common+0x1f4>)
 800ee50:	2002      	movs	r0, #2
 800ee52:	f004 fcf5 	bl	8013840 <pifLog_Printf>
#endif
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800ee56:	4b38      	ldr	r3, [pc, #224]	; (800ef38 <GYRO_Common+0x1dc>)
 800ee58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ee5c:	801a      	strh	r2, [r3, #0]
                    devClear(&var[0]);
 800ee5e:	4838      	ldr	r0, [pc, #224]	; (800ef40 <GYRO_Common+0x1e4>)
 800ee60:	f7ff fee0 	bl	800ec24 <devClear>
                    devClear(&var[1]);
 800ee64:	483b      	ldr	r0, [pc, #236]	; (800ef54 <GYRO_Common+0x1f8>)
 800ee66:	f7ff fedd 	bl	800ec24 <devClear>
                    devClear(&var[2]);
 800ee6a:	483b      	ldr	r0, [pc, #236]	; (800ef58 <GYRO_Common+0x1fc>)
 800ee6c:	f7ff feda 	bl	800ec24 <devClear>
                    g[0] = g[1] = g[2] = 0;
 800ee70:	4b32      	ldr	r3, [pc, #200]	; (800ef3c <GYRO_Common+0x1e0>)
 800ee72:	2200      	movs	r2, #0
 800ee74:	609a      	str	r2, [r3, #8]
 800ee76:	4b31      	ldr	r3, [pc, #196]	; (800ef3c <GYRO_Common+0x1e0>)
 800ee78:	689b      	ldr	r3, [r3, #8]
 800ee7a:	4a30      	ldr	r2, [pc, #192]	; (800ef3c <GYRO_Common+0x1e0>)
 800ee7c:	6053      	str	r3, [r2, #4]
 800ee7e:	4b2f      	ldr	r3, [pc, #188]	; (800ef3c <GYRO_Common+0x1e0>)
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	4a2e      	ldr	r2, [pc, #184]	; (800ef3c <GYRO_Common+0x1e0>)
 800ee84:	6013      	str	r3, [r2, #0]
                    continue;
 800ee86:	e015      	b.n	800eeb4 <GYRO_Common+0x158>
                }
                gyroZero[axis] = (g[axis] + (CALIBRATING_GYRO_CYCLES / 2)) / CALIBRATING_GYRO_CYCLES;
 800ee88:	4a2c      	ldr	r2, [pc, #176]	; (800ef3c <GYRO_Common+0x1e0>)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee90:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ee94:	4a31      	ldr	r2, [pc, #196]	; (800ef5c <GYRO_Common+0x200>)
 800ee96:	fb82 1203 	smull	r1, r2, r2, r3
 800ee9a:	1192      	asrs	r2, r2, #6
 800ee9c:	17db      	asrs	r3, r3, #31
 800ee9e:	1ad3      	subs	r3, r2, r3
 800eea0:	b219      	sxth	r1, r3
 800eea2:	4a29      	ldr	r2, [pc, #164]	; (800ef48 <GYRO_Common+0x1ec>)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                blinkLED(10, 15, 1);
 800eeaa:	2201      	movs	r2, #1
 800eeac:	210f      	movs	r1, #15
 800eeae:	200a      	movs	r0, #10
 800eeb0:	f7fd f898 	bl	800bfe4 <blinkLED>
        for (axis = 0; axis < 3; axis++) {
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	607b      	str	r3, [r7, #4]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2b02      	cmp	r3, #2
 800eebe:	f77f af58 	ble.w	800ed72 <GYRO_Common+0x16>
            }
        }
        calibratingG--;
 800eec2:	4b1d      	ldr	r3, [pc, #116]	; (800ef38 <GYRO_Common+0x1dc>)
 800eec4:	881b      	ldrh	r3, [r3, #0]
 800eec6:	3b01      	subs	r3, #1
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	4b1b      	ldr	r3, [pc, #108]	; (800ef38 <GYRO_Common+0x1dc>)
 800eecc:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingG) pifLog_Printf(LT_INFO, "Gyro Zero: %d %d %d", gyroZero[X], gyroZero[Y], gyroZero[Z]);
 800eece:	4b1a      	ldr	r3, [pc, #104]	; (800ef38 <GYRO_Common+0x1dc>)
 800eed0:	881b      	ldrh	r3, [r3, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d110      	bne.n	800eef8 <GYRO_Common+0x19c>
 800eed6:	4b1c      	ldr	r3, [pc, #112]	; (800ef48 <GYRO_Common+0x1ec>)
 800eed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eedc:	461a      	mov	r2, r3
 800eede:	4b1a      	ldr	r3, [pc, #104]	; (800ef48 <GYRO_Common+0x1ec>)
 800eee0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eee4:	4619      	mov	r1, r3
 800eee6:	4b18      	ldr	r3, [pc, #96]	; (800ef48 <GYRO_Common+0x1ec>)
 800eee8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eeec:	9300      	str	r3, [sp, #0]
 800eeee:	460b      	mov	r3, r1
 800eef0:	491b      	ldr	r1, [pc, #108]	; (800ef60 <GYRO_Common+0x204>)
 800eef2:	2002      	movs	r0, #2
 800eef4:	f004 fca4 	bl	8013840 <pifLog_Printf>
#endif
    }
    for (axis = 0; axis < 3; axis++)
 800eef8:	2300      	movs	r3, #0
 800eefa:	607b      	str	r3, [r7, #4]
 800eefc:	e013      	b.n	800ef26 <GYRO_Common+0x1ca>
        gyroADC[axis] -= gyroZero[axis];
 800eefe:	4a11      	ldr	r2, [pc, #68]	; (800ef44 <GYRO_Common+0x1e8>)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ef06:	b29a      	uxth	r2, r3
 800ef08:	490f      	ldr	r1, [pc, #60]	; (800ef48 <GYRO_Common+0x1ec>)
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	1ad3      	subs	r3, r2, r3
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	b219      	sxth	r1, r3
 800ef18:	4a0a      	ldr	r2, [pc, #40]	; (800ef44 <GYRO_Common+0x1e8>)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	3301      	adds	r3, #1
 800ef24:	607b      	str	r3, [r7, #4]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2b02      	cmp	r3, #2
 800ef2a:	dde8      	ble.n	800eefe <GYRO_Common+0x1a2>
}
 800ef2c:	bf00      	nop
 800ef2e:	bf00      	nop
 800ef30:	3708      	adds	r7, #8
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	200019b8 	.word	0x200019b8
 800ef3c:	20001b90 	.word	0x20001b90
 800ef40:	20001b9c 	.word	0x20001b9c
 800ef44:	200013a8 	.word	0x200013a8
 800ef48:	20001428 	.word	0x20001428
 800ef4c:	200007ac 	.word	0x200007ac
 800ef50:	08027788 	.word	0x08027788
 800ef54:	20001bb0 	.word	0x20001bb0
 800ef58:	20001bc4 	.word	0x20001bc4
 800ef5c:	10624dd3 	.word	0x10624dd3
 800ef60:	080277a0 	.word	0x080277a0

0800ef64 <Gyro_getADC>:

BOOL Gyro_getADC(void)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	af00      	add	r7, sp, #0
    // range: +/- 8192; +/- 2000 deg/sec
    if (sensor_set.gyro.read(gyroADC)) {
 800ef68:	4b06      	ldr	r3, [pc, #24]	; (800ef84 <Gyro_getADC+0x20>)
 800ef6a:	689b      	ldr	r3, [r3, #8]
 800ef6c:	4806      	ldr	r0, [pc, #24]	; (800ef88 <Gyro_getADC+0x24>)
 800ef6e:	4798      	blx	r3
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d003      	beq.n	800ef7e <Gyro_getADC+0x1a>
    	GYRO_Common();
 800ef76:	f7ff fef1 	bl	800ed5c <GYRO_Common>
    	return TRUE;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	e000      	b.n	800ef80 <Gyro_getADC+0x1c>
    }
    return FALSE;
 800ef7e:	2300      	movs	r3, #0
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	200019c8 	.word	0x200019c8
 800ef88:	200013a8 	.word	0x200013a8

0800ef8c <Mag_init>:

#ifdef MAG
static uint8_t magInit = 0;

void Mag_init(void)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	af00      	add	r7, sp, #0
    // initialize and calibration. turn on led during mag calibration (calibration routine blinks it)
    actLed1State(ON);
 800ef90:	2001      	movs	r0, #1
 800ef92:	f7f3 f88d 	bl	80020b0 <actLed1State>
    if (!sensor_set.mag.init(mcfg.mag_align)) {
 800ef96:	4b0c      	ldr	r3, [pc, #48]	; (800efc8 <Mag_init+0x3c>)
 800ef98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef9a:	4a0c      	ldr	r2, [pc, #48]	; (800efcc <Mag_init+0x40>)
 800ef9c:	f892 2155 	ldrb.w	r2, [r2, #341]	; 0x155
 800efa0:	4610      	mov	r0, r2
 800efa2:	4798      	blx	r3
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d106      	bne.n	800efb8 <Mag_init+0x2c>
#ifndef __PIF_NO_LOG__
    	pifLog_Printf(LT_INFO, "Mag Error:%d", pif_error);
 800efaa:	4b09      	ldr	r3, [pc, #36]	; (800efd0 <Mag_init+0x44>)
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	461a      	mov	r2, r3
 800efb0:	4908      	ldr	r1, [pc, #32]	; (800efd4 <Mag_init+0x48>)
 800efb2:	2002      	movs	r0, #2
 800efb4:	f004 fc44 	bl	8013840 <pifLog_Printf>
#endif
    }
    actLed1State(OFF);
 800efb8:	2000      	movs	r0, #0
 800efba:	f7f3 f879 	bl	80020b0 <actLed1State>
    magInit = 1;
 800efbe:	4b06      	ldr	r3, [pc, #24]	; (800efd8 <Mag_init+0x4c>)
 800efc0:	2201      	movs	r2, #1
 800efc2:	701a      	strb	r2, [r3, #0]
}
 800efc4:	bf00      	nop
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	200019c8 	.word	0x200019c8
 800efcc:	200007ac 	.word	0x200007ac
 800efd0:	20001ef0 	.word	0x20001ef0
 800efd4:	080277b4 	.word	0x080277b4
 800efd8:	20001aa0 	.word	0x20001aa0

0800efdc <taskMagGetAdc>:

uint16_t taskMagGetAdc(PifTask *p_task)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b084      	sub	sp, #16
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
    uint32_t axis;

    (void)p_task;

    // Read mag sensor
    if (!sensor_set.mag.read(magADC)) {
 800efe4:	4b64      	ldr	r3, [pc, #400]	; (800f178 <taskMagGetAdc+0x19c>)
 800efe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efe8:	4864      	ldr	r0, [pc, #400]	; (800f17c <taskMagGetAdc+0x1a0>)
 800efea:	4798      	blx	r3
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d104      	bne.n	800effc <taskMagGetAdc+0x20>
    	p_task->immediate = TRUE;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2201      	movs	r2, #1
 800eff6:	705a      	strb	r2, [r3, #1]
    	return 0;
 800eff8:	2300      	movs	r3, #0
 800effa:	e0b8      	b.n	800f16e <taskMagGetAdc+0x192>
    }

    if (f.CALIBRATE_MAG) {
 800effc:	4b60      	ldr	r3, [pc, #384]	; (800f180 <taskMagGetAdc+0x1a4>)
 800effe:	7b9b      	ldrb	r3, [r3, #14]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d027      	beq.n	800f054 <taskMagGetAdc+0x78>
        tCal = (*pif_act_timer1us)();
 800f004:	4b5f      	ldr	r3, [pc, #380]	; (800f184 <taskMagGetAdc+0x1a8>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4798      	blx	r3
 800f00a:	4603      	mov	r3, r0
 800f00c:	4a5e      	ldr	r2, [pc, #376]	; (800f188 <taskMagGetAdc+0x1ac>)
 800f00e:	6013      	str	r3, [r2, #0]
        for (axis = 0; axis < 3; axis++) {
 800f010:	2300      	movs	r3, #0
 800f012:	60fb      	str	r3, [r7, #12]
 800f014:	e018      	b.n	800f048 <taskMagGetAdc+0x6c>
            mcfg.magZero[axis] = 0;
 800f016:	4a5d      	ldr	r2, [pc, #372]	; (800f18c <taskMagGetAdc+0x1b0>)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	33b8      	adds	r3, #184	; 0xb8
 800f01c:	2100      	movs	r1, #0
 800f01e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMin[axis] = magADC[axis];
 800f022:	4a56      	ldr	r2, [pc, #344]	; (800f17c <taskMagGetAdc+0x1a0>)
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f02a:	4a59      	ldr	r2, [pc, #356]	; (800f190 <taskMagGetAdc+0x1b4>)
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMax[axis] = magADC[axis];
 800f032:	4a52      	ldr	r2, [pc, #328]	; (800f17c <taskMagGetAdc+0x1a0>)
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f03a:	4a56      	ldr	r2, [pc, #344]	; (800f194 <taskMagGetAdc+0x1b8>)
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (axis = 0; axis < 3; axis++) {
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	3301      	adds	r3, #1
 800f046:	60fb      	str	r3, [r7, #12]
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2b02      	cmp	r3, #2
 800f04c:	d9e3      	bls.n	800f016 <taskMagGetAdc+0x3a>
        }
        f.CALIBRATE_MAG = 0;
 800f04e:	4b4c      	ldr	r3, [pc, #304]	; (800f180 <taskMagGetAdc+0x1a4>)
 800f050:	2200      	movs	r2, #0
 800f052:	739a      	strb	r2, [r3, #14]
    }

    if (magInit) {              // we apply offset only once mag calibration is done
 800f054:	4b50      	ldr	r3, [pc, #320]	; (800f198 <taskMagGetAdc+0x1bc>)
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d026      	beq.n	800f0aa <taskMagGetAdc+0xce>
        magADC[X] -= mcfg.magZero[X];
 800f05c:	4b47      	ldr	r3, [pc, #284]	; (800f17c <taskMagGetAdc+0x1a0>)
 800f05e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f062:	b29a      	uxth	r2, r3
 800f064:	4b49      	ldr	r3, [pc, #292]	; (800f18c <taskMagGetAdc+0x1b0>)
 800f066:	f9b3 3170 	ldrsh.w	r3, [r3, #368]	; 0x170
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	1ad3      	subs	r3, r2, r3
 800f06e:	b29b      	uxth	r3, r3
 800f070:	b21a      	sxth	r2, r3
 800f072:	4b42      	ldr	r3, [pc, #264]	; (800f17c <taskMagGetAdc+0x1a0>)
 800f074:	801a      	strh	r2, [r3, #0]
        magADC[Y] -= mcfg.magZero[Y];
 800f076:	4b41      	ldr	r3, [pc, #260]	; (800f17c <taskMagGetAdc+0x1a0>)
 800f078:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f07c:	b29a      	uxth	r2, r3
 800f07e:	4b43      	ldr	r3, [pc, #268]	; (800f18c <taskMagGetAdc+0x1b0>)
 800f080:	f9b3 3172 	ldrsh.w	r3, [r3, #370]	; 0x172
 800f084:	b29b      	uxth	r3, r3
 800f086:	1ad3      	subs	r3, r2, r3
 800f088:	b29b      	uxth	r3, r3
 800f08a:	b21a      	sxth	r2, r3
 800f08c:	4b3b      	ldr	r3, [pc, #236]	; (800f17c <taskMagGetAdc+0x1a0>)
 800f08e:	805a      	strh	r2, [r3, #2]
        magADC[Z] -= mcfg.magZero[Z];
 800f090:	4b3a      	ldr	r3, [pc, #232]	; (800f17c <taskMagGetAdc+0x1a0>)
 800f092:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f096:	b29a      	uxth	r2, r3
 800f098:	4b3c      	ldr	r3, [pc, #240]	; (800f18c <taskMagGetAdc+0x1b0>)
 800f09a:	f9b3 3174 	ldrsh.w	r3, [r3, #372]	; 0x174
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	1ad3      	subs	r3, r2, r3
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	b21a      	sxth	r2, r3
 800f0a6:	4b35      	ldr	r3, [pc, #212]	; (800f17c <taskMagGetAdc+0x1a0>)
 800f0a8:	809a      	strh	r2, [r3, #4]
    }

    if (tCal != 0) {
 800f0aa:	4b37      	ldr	r3, [pc, #220]	; (800f188 <taskMagGetAdc+0x1ac>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d05c      	beq.n	800f16c <taskMagGetAdc+0x190>
        if (((*pif_act_timer1us)() - tCal) < 30000000) {    // 30s: you have 30s to turn the multi in all directions
 800f0b2:	4b34      	ldr	r3, [pc, #208]	; (800f184 <taskMagGetAdc+0x1a8>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	4798      	blx	r3
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	4b33      	ldr	r3, [pc, #204]	; (800f188 <taskMagGetAdc+0x1ac>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	1ad3      	subs	r3, r2, r3
 800f0c0:	4a36      	ldr	r2, [pc, #216]	; (800f19c <taskMagGetAdc+0x1c0>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d82f      	bhi.n	800f126 <taskMagGetAdc+0x14a>
            actLed0Toggle();
 800f0c6:	f7f2 ffdd 	bl	8002084 <actLed0Toggle>
            for (axis = 0; axis < 3; axis++) {
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	60fb      	str	r3, [r7, #12]
 800f0ce:	e026      	b.n	800f11e <taskMagGetAdc+0x142>
                if (magADC[axis] < magZeroTempMin[axis])
 800f0d0:	4a2a      	ldr	r2, [pc, #168]	; (800f17c <taskMagGetAdc+0x1a0>)
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800f0d8:	492d      	ldr	r1, [pc, #180]	; (800f190 <taskMagGetAdc+0x1b4>)
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	da07      	bge.n	800f0f4 <taskMagGetAdc+0x118>
                    magZeroTempMin[axis] = magADC[axis];
 800f0e4:	4a25      	ldr	r2, [pc, #148]	; (800f17c <taskMagGetAdc+0x1a0>)
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f0ec:	4a28      	ldr	r2, [pc, #160]	; (800f190 <taskMagGetAdc+0x1b4>)
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (magADC[axis] > magZeroTempMax[axis])
 800f0f4:	4a21      	ldr	r2, [pc, #132]	; (800f17c <taskMagGetAdc+0x1a0>)
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800f0fc:	4925      	ldr	r1, [pc, #148]	; (800f194 <taskMagGetAdc+0x1b8>)
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800f104:	429a      	cmp	r2, r3
 800f106:	dd07      	ble.n	800f118 <taskMagGetAdc+0x13c>
                    magZeroTempMax[axis] = magADC[axis];
 800f108:	4a1c      	ldr	r2, [pc, #112]	; (800f17c <taskMagGetAdc+0x1a0>)
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f110:	4a20      	ldr	r2, [pc, #128]	; (800f194 <taskMagGetAdc+0x1b8>)
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++) {
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	3301      	adds	r3, #1
 800f11c:	60fb      	str	r3, [r7, #12]
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2b02      	cmp	r3, #2
 800f122:	d9d5      	bls.n	800f0d0 <taskMagGetAdc+0xf4>
 800f124:	e022      	b.n	800f16c <taskMagGetAdc+0x190>
            }
        } else {
            tCal = 0;
 800f126:	4b18      	ldr	r3, [pc, #96]	; (800f188 <taskMagGetAdc+0x1ac>)
 800f128:	2200      	movs	r2, #0
 800f12a:	601a      	str	r2, [r3, #0]
            for (axis = 0; axis < 3; axis++)
 800f12c:	2300      	movs	r3, #0
 800f12e:	60fb      	str	r3, [r7, #12]
 800f130:	e015      	b.n	800f15e <taskMagGetAdc+0x182>
                mcfg.magZero[axis] = (magZeroTempMin[axis] + magZeroTempMax[axis]) / 2; // Calculate offsets
 800f132:	4a17      	ldr	r2, [pc, #92]	; (800f190 <taskMagGetAdc+0x1b4>)
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800f13a:	4619      	mov	r1, r3
 800f13c:	4a15      	ldr	r2, [pc, #84]	; (800f194 <taskMagGetAdc+0x1b8>)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800f144:	440b      	add	r3, r1
 800f146:	0fda      	lsrs	r2, r3, #31
 800f148:	4413      	add	r3, r2
 800f14a:	105b      	asrs	r3, r3, #1
 800f14c:	b219      	sxth	r1, r3
 800f14e:	4a0f      	ldr	r2, [pc, #60]	; (800f18c <taskMagGetAdc+0x1b0>)
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	33b8      	adds	r3, #184	; 0xb8
 800f154:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++)
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	3301      	adds	r3, #1
 800f15c:	60fb      	str	r3, [r7, #12]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2b02      	cmp	r3, #2
 800f162:	d9e6      	bls.n	800f132 <taskMagGetAdc+0x156>
            writeEEPROM(1, true);
 800f164:	2101      	movs	r1, #1
 800f166:	2001      	movs	r0, #1
 800f168:	f7f7 fab0 	bl	80066cc <writeEEPROM>
        }
    }
    return 0;
 800f16c:	2300      	movs	r3, #0
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3710      	adds	r7, #16
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	200019c8 	.word	0x200019c8
 800f17c:	200013c0 	.word	0x200013c0
 800f180:	20001628 	.word	0x20001628
 800f184:	20001f14 	.word	0x20001f14
 800f188:	20001bd8 	.word	0x20001bd8
 800f18c:	200007ac 	.word	0x200007ac
 800f190:	20001bdc 	.word	0x20001bdc
 800f194:	20001be4 	.word	0x20001be4
 800f198:	20001aa0 	.word	0x20001aa0
 800f19c:	01c9c37f 	.word	0x01c9c37f

0800f1a0 <getSonarDistance>:
#ifdef SONAR

static PifNoiseFilter* p_sonar_noise_filter;

static float getSonarDistance(int32_t distance)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
	if (distance > 300)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f1ae:	dd02      	ble.n	800f1b6 <getSonarDistance+0x16>
		distance = -1;
 800f1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1b4:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f1b6:	4a0d      	ldr	r2, [pc, #52]	; (800f1ec <getSonarDistance+0x4c>)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f1bc:	4b0c      	ldr	r3, [pc, #48]	; (800f1f0 <getSonarDistance+0x50>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7f1 f96d 	bl	80004a0 <__aeabi_i2d>
 800f1c6:	f04f 0200 	mov.w	r2, #0
 800f1ca:	4b0a      	ldr	r3, [pc, #40]	; (800f1f4 <getSonarDistance+0x54>)
 800f1cc:	f7f1 fafc 	bl	80007c8 <__aeabi_ddiv>
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	460b      	mov	r3, r1
 800f1d4:	4610      	mov	r0, r2
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	f7f1 fcae 	bl	8000b38 <__aeabi_d2f>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f1e2:	eeb0 0a67 	vmov.f32	s0, s15
 800f1e6:	3708      	adds	r7, #8
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}
 800f1ec:	2000002c 	.word	0x2000002c
 800f1f0:	200019c4 	.word	0x200019c4
 800f1f4:	40590000 	.word	0x40590000

0800f1f8 <getSonarDistanceFilter>:

static float getSonarDistanceFilter(int32_t distance)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
	distance = *(int32_t*)pifNoiseFilter_Process(p_sonar_noise_filter, &distance);
 800f200:	4b15      	ldr	r3, [pc, #84]	; (800f258 <getSonarDistanceFilter+0x60>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	1d3a      	adds	r2, r7, #4
 800f206:	4611      	mov	r1, r2
 800f208:	4618      	mov	r0, r3
 800f20a:	f005 ff69 	bl	80150e0 <pifNoiseFilter_Process>
 800f20e:	4603      	mov	r3, r0
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	607b      	str	r3, [r7, #4]
	if (distance > 300)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f21a:	dd02      	ble.n	800f222 <getSonarDistanceFilter+0x2a>
		distance = -1;
 800f21c:	f04f 33ff 	mov.w	r3, #4294967295
 800f220:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4a0d      	ldr	r2, [pc, #52]	; (800f25c <getSonarDistanceFilter+0x64>)
 800f226:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f228:	4b0d      	ldr	r3, [pc, #52]	; (800f260 <getSonarDistanceFilter+0x68>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7f1 f937 	bl	80004a0 <__aeabi_i2d>
 800f232:	f04f 0200 	mov.w	r2, #0
 800f236:	4b0b      	ldr	r3, [pc, #44]	; (800f264 <getSonarDistanceFilter+0x6c>)
 800f238:	f7f1 fac6 	bl	80007c8 <__aeabi_ddiv>
 800f23c:	4602      	mov	r2, r0
 800f23e:	460b      	mov	r3, r1
 800f240:	4610      	mov	r0, r2
 800f242:	4619      	mov	r1, r3
 800f244:	f7f1 fc78 	bl	8000b38 <__aeabi_d2f>
 800f248:	4603      	mov	r3, r0
 800f24a:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f24e:	eeb0 0a67 	vmov.f32	s0, s15
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	20001aa4 	.word	0x20001aa4
 800f25c:	2000002c 	.word	0x2000002c
 800f260:	200019c4 	.word	0x200019c4
 800f264:	40590000 	.word	0x40590000

0800f268 <Sonar_init>:

void Sonar_init(sonarInitFuncPtr sonarInit, sonar_filter_t filter)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	460b      	mov	r3, r1
 800f272:	70fb      	strb	r3, [r7, #3]
    static PifNoiseFilterInt32 noise_filter;

    // the repeat interval of trig signal should be greater than 60ms
    // to avoid interference between connective measurements.
	switch (filter) {
 800f274:	78fb      	ldrb	r3, [r7, #3]
 800f276:	2b01      	cmp	r3, #1
 800f278:	d002      	beq.n	800f280 <Sonar_init+0x18>
 800f27a:	2b02      	cmp	r3, #2
 800f27c:	d00b      	beq.n	800f296 <Sonar_init+0x2e>
	        }
	    }
		break;

	default:
		break;
 800f27e:	e01e      	b.n	800f2be <Sonar_init+0x56>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 5)) {
 800f280:	2105      	movs	r1, #5
 800f282:	4820      	ldr	r0, [pc, #128]	; (800f304 <Sonar_init+0x9c>)
 800f284:	f006 f8dc 	bl	8015440 <pifNoiseFilterInt32_Init>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d014      	beq.n	800f2b8 <Sonar_init+0x50>
	        p_sonar_noise_filter = &noise_filter.parent;
 800f28e:	4b1e      	ldr	r3, [pc, #120]	; (800f308 <Sonar_init+0xa0>)
 800f290:	4a1c      	ldr	r2, [pc, #112]	; (800f304 <Sonar_init+0x9c>)
 800f292:	601a      	str	r2, [r3, #0]
		break;
 800f294:	e010      	b.n	800f2b8 <Sonar_init+0x50>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 7)) {
 800f296:	2107      	movs	r1, #7
 800f298:	481a      	ldr	r0, [pc, #104]	; (800f304 <Sonar_init+0x9c>)
 800f29a:	f006 f8d1 	bl	8015440 <pifNoiseFilterInt32_Init>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d00b      	beq.n	800f2bc <Sonar_init+0x54>
	        if (pifNoiseFilterInt32_SetNoiseCancel(&noise_filter)) {
 800f2a4:	4817      	ldr	r0, [pc, #92]	; (800f304 <Sonar_init+0x9c>)
 800f2a6:	f006 f90b 	bl	80154c0 <pifNoiseFilterInt32_SetNoiseCancel>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d005      	beq.n	800f2bc <Sonar_init+0x54>
	            p_sonar_noise_filter = &noise_filter.parent;
 800f2b0:	4b15      	ldr	r3, [pc, #84]	; (800f308 <Sonar_init+0xa0>)
 800f2b2:	4a14      	ldr	r2, [pc, #80]	; (800f304 <Sonar_init+0x9c>)
 800f2b4:	601a      	str	r2, [r3, #0]
		break;
 800f2b6:	e001      	b.n	800f2bc <Sonar_init+0x54>
		break;
 800f2b8:	bf00      	nop
 800f2ba:	e000      	b.n	800f2be <Sonar_init+0x56>
		break;
 800f2bc:	bf00      	nop
	}
	if (p_sonar_noise_filter) {
 800f2be:	4b12      	ldr	r3, [pc, #72]	; (800f308 <Sonar_init+0xa0>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d007      	beq.n	800f2d6 <Sonar_init+0x6e>
		if (!(*sonarInit)(60, getSonarDistanceFilter)) return;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4910      	ldr	r1, [pc, #64]	; (800f30c <Sonar_init+0xa4>)
 800f2ca:	203c      	movs	r0, #60	; 0x3c
 800f2cc:	4798      	blx	r3
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d107      	bne.n	800f2e4 <Sonar_init+0x7c>
 800f2d4:	e013      	b.n	800f2fe <Sonar_init+0x96>
	}
	else {
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	490d      	ldr	r1, [pc, #52]	; (800f310 <Sonar_init+0xa8>)
 800f2da:	203c      	movs	r0, #60	; 0x3c
 800f2dc:	4798      	blx	r3
 800f2de:	4603      	mov	r3, r0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d00b      	beq.n	800f2fc <Sonar_init+0x94>
	}
    sensorsSet(SENSOR_SONAR);
 800f2e4:	2010      	movs	r0, #16
 800f2e6:	f7f7 fda1 	bl	8006e2c <sensorsSet>
    sonarDistance = -1;
 800f2ea:	4b0a      	ldr	r3, [pc, #40]	; (800f314 <Sonar_init+0xac>)
 800f2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800f2f0:	601a      	str	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Print(LT_INFO, "Sonar init : success");
 800f2f2:	4909      	ldr	r1, [pc, #36]	; (800f318 <Sonar_init+0xb0>)
 800f2f4:	2002      	movs	r0, #2
 800f2f6:	f004 fa15 	bl	8013724 <pifLog_Print>
 800f2fa:	e000      	b.n	800f2fe <Sonar_init+0x96>
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f2fc:	bf00      	nop
#endif
}
 800f2fe:	3708      	adds	r7, #8
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	20001bec 	.word	0x20001bec
 800f308:	20001aa4 	.word	0x20001aa4
 800f30c:	0800f1f9 	.word	0x0800f1f9
 800f310:	0800f1a1 	.word	0x0800f1a1
 800f314:	2000002c 	.word	0x2000002c
 800f318:	080277c4 	.word	0x080277c4

0800f31c <_Read8>:

static void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet);
static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data);

static uint8_t _Read8(mspPortState_t* p_port)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b085      	sub	sp, #20
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
	uint8_t data = p_port->p_rx_packet[0];
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	73fb      	strb	r3, [r7, #15]
	p_port->p_rx_packet++;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f330:	1c5a      	adds	r2, r3, #1
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	651a      	str	r2, [r3, #80]	; 0x50
	return data;
 800f336:	7bfb      	ldrb	r3, [r7, #15]
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3714      	adds	r7, #20
 800f33c:	46bd      	mov	sp, r7
 800f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f342:	4770      	bx	lr

0800f344 <_Read16>:

static uint16_t _Read16(mspPortState_t* p_port)
{
 800f344:	b480      	push	{r7}
 800f346:	b085      	sub	sp, #20
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
	uint16_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	b29a      	uxth	r2, r3
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f358:	3301      	adds	r3, #1
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	021b      	lsls	r3, r3, #8
 800f360:	b29b      	uxth	r3, r3
 800f362:	4413      	add	r3, r2
 800f364:	81fb      	strh	r3, [r7, #14]
	p_port->p_rx_packet += 2;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f36a:	1c9a      	adds	r2, r3, #2
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	651a      	str	r2, [r3, #80]	; 0x50
	return data;
 800f370:	89fb      	ldrh	r3, [r7, #14]
}
 800f372:	4618      	mov	r0, r3
 800f374:	3714      	adds	r7, #20
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr

0800f37e <_Read32>:

static uint16_t _Read32(mspPortState_t* p_port)
{
 800f37e:	b480      	push	{r7}
 800f380:	b085      	sub	sp, #20
 800f382:	af00      	add	r7, sp, #0
 800f384:	6078      	str	r0, [r7, #4]
	uint32_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8) +
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	461a      	mov	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f392:	3301      	adds	r3, #1
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	021b      	lsls	r3, r3, #8
 800f398:	4413      	add	r3, r2
 800f39a:	461a      	mov	r2, r3
			((uint32_t)p_port->p_rx_packet[2] << 16) + ((uint32_t)p_port->p_rx_packet[3] << 24);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3a0:	3302      	adds	r3, #2
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	041b      	lsls	r3, r3, #16
	uint32_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8) +
 800f3a6:	441a      	add	r2, r3
			((uint32_t)p_port->p_rx_packet[2] << 16) + ((uint32_t)p_port->p_rx_packet[3] << 24);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3ac:	3303      	adds	r3, #3
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	061b      	lsls	r3, r3, #24
	uint32_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8) +
 800f3b2:	4413      	add	r3, r2
 800f3b4:	60fb      	str	r3, [r7, #12]
	p_port->p_rx_packet += 4;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3ba:	1d1a      	adds	r2, r3, #4
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	651a      	str	r2, [r3, #80]	; 0x50
	return data;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	b29b      	uxth	r3, r3
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3714      	adds	r7, #20
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr

0800f3d0 <_Serialize8>:

static void _Serialize8(mspPortState_t* p_port, uint8_t a)
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b083      	sub	sp, #12
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	460b      	mov	r3, r1
 800f3da:	70fb      	strb	r3, [r7, #3]
    p_port->p_tx_packet[0] = a;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f3e2:	78fa      	ldrb	r2, [r7, #3]
 800f3e4:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet++;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f3ec:	1c5a      	adds	r2, r3, #1
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800f3f4:	bf00      	nop
 800f3f6:	370c      	adds	r7, #12
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr

0800f400 <_Serialize16>:

static void _Serialize16(mspPortState_t* p_port, int16_t a)
{
 800f400:	b480      	push	{r7}
 800f402:	b083      	sub	sp, #12
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	460b      	mov	r3, r1
 800f40a:	807b      	strh	r3, [r7, #2]
    p_port->p_tx_packet[0] = a & 0xFF;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f412:	887a      	ldrh	r2, [r7, #2]
 800f414:	b2d2      	uxtb	r2, r2
 800f416:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[1] = (a >> 8) & 0xFF;
 800f418:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f41c:	121b      	asrs	r3, r3, #8
 800f41e:	b21a      	sxth	r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f426:	3301      	adds	r3, #1
 800f428:	b2d2      	uxtb	r2, r2
 800f42a:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet += 2;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f432:	1c9a      	adds	r2, r3, #2
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800f43a:	bf00      	nop
 800f43c:	370c      	adds	r7, #12
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr

0800f446 <_Serialize32>:

static void _Serialize32(mspPortState_t* p_port, uint32_t a)
{
 800f446:	b480      	push	{r7}
 800f448:	b083      	sub	sp, #12
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
 800f44e:	6039      	str	r1, [r7, #0]
    p_port->p_tx_packet[0] = a & 0xFF;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f456:	683a      	ldr	r2, [r7, #0]
 800f458:	b2d2      	uxtb	r2, r2
 800f45a:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[1] = (a >> 8) & 0xFF;
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	0a1a      	lsrs	r2, r3, #8
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f466:	3301      	adds	r3, #1
 800f468:	b2d2      	uxtb	r2, r2
 800f46a:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[2] = (a >> 16) & 0xFF;
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	0c1a      	lsrs	r2, r3, #16
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f476:	3302      	adds	r3, #2
 800f478:	b2d2      	uxtb	r2, r2
 800f47a:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[3] = (a >> 24) & 0xFF;
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	0e1a      	lsrs	r2, r3, #24
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f486:	3303      	adds	r3, #3
 800f488:	b2d2      	uxtb	r2, r2
 800f48a:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet += 4;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f492:	1d1a      	adds	r2, r3, #4
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800f49a:	bf00      	nop
 800f49c:	370c      	adds	r7, #12
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr

0800f4a6 <_SerializeStruct>:

static void _SerializeStruct(mspPortState_t* p_port, uint8_t *cb, uint8_t siz)
{
 800f4a6:	b480      	push	{r7}
 800f4a8:	b085      	sub	sp, #20
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	60f8      	str	r0, [r7, #12]
 800f4ae:	60b9      	str	r1, [r7, #8]
 800f4b0:	4613      	mov	r3, r2
 800f4b2:	71fb      	strb	r3, [r7, #7]
    while (siz--)
 800f4b4:	e00b      	b.n	800f4ce <_SerializeStruct+0x28>
        *p_port->p_tx_packet++ = *cb++;
 800f4b6:	68ba      	ldr	r2, [r7, #8]
 800f4b8:	1c53      	adds	r3, r2, #1
 800f4ba:	60bb      	str	r3, [r7, #8]
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f4c2:	1c58      	adds	r0, r3, #1
 800f4c4:	68f9      	ldr	r1, [r7, #12]
 800f4c6:	f8c1 00d4 	str.w	r0, [r1, #212]	; 0xd4
 800f4ca:	7812      	ldrb	r2, [r2, #0]
 800f4cc:	701a      	strb	r2, [r3, #0]
    while (siz--)
 800f4ce:	79fb      	ldrb	r3, [r7, #7]
 800f4d0:	1e5a      	subs	r2, r3, #1
 800f4d2:	71fa      	strb	r2, [r7, #7]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d1ee      	bne.n	800f4b6 <_SerializeStruct+0x10>
}
 800f4d8:	bf00      	nop
 800f4da:	bf00      	nop
 800f4dc:	3714      	adds	r7, #20
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr

0800f4e6 <_SerializeNames>:

static void _SerializeNames(mspPortState_t* p_port, const char *s)
{
 800f4e6:	b480      	push	{r7}
 800f4e8:	b085      	sub	sp, #20
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
 800f4ee:	6039      	str	r1, [r7, #0]
    const char *c;
    for (c = s; *c; c++)
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	60fb      	str	r3, [r7, #12]
 800f4f4:	e00c      	b.n	800f510 <_SerializeNames+0x2a>
        *p_port->p_tx_packet++ = *c;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f4fc:	1c59      	adds	r1, r3, #1
 800f4fe:	687a      	ldr	r2, [r7, #4]
 800f500:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 800f504:	68fa      	ldr	r2, [r7, #12]
 800f506:	7812      	ldrb	r2, [r2, #0]
 800f508:	701a      	strb	r2, [r3, #0]
    for (c = s; *c; c++)
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	3301      	adds	r3, #1
 800f50e:	60fb      	str	r3, [r7, #12]
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d1ee      	bne.n	800f4f6 <_SerializeNames+0x10>
}
 800f518:	bf00      	nop
 800f51a:	bf00      	nop
 800f51c:	3714      	adds	r7, #20
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr
	...

0800f528 <_SerializeBoxNamesReply>:

static int _SerializeBoxNamesReply(mspPortState_t* p_port)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b088      	sub	sp, #32
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
    int i, idx, j, flag = 1, count = 0, len;
 800f530:	2301      	movs	r3, #1
 800f532:	617b      	str	r3, [r7, #20]
 800f534:	2300      	movs	r3, #0
 800f536:	613b      	str	r3, [r7, #16]

reset:
    // in first run of the loop, we grab total size of junk to be sent
    // then come back and actually send it
    for (i = 0; i < numberBoxItems; i++) {
 800f538:	2300      	movs	r3, #0
 800f53a:	61fb      	str	r3, [r7, #28]
 800f53c:	e03b      	b.n	800f5b6 <_SerializeBoxNamesReply+0x8e>
        idx = availableBoxes[i];
 800f53e:	4a26      	ldr	r2, [pc, #152]	; (800f5d8 <_SerializeBoxNamesReply+0xb0>)
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	4413      	add	r3, r2
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	60fb      	str	r3, [r7, #12]
        len = strlen(boxes[idx].boxName);
 800f548:	4924      	ldr	r1, [pc, #144]	; (800f5dc <_SerializeBoxNamesReply+0xb4>)
 800f54a:	68fa      	ldr	r2, [r7, #12]
 800f54c:	4613      	mov	r3, r2
 800f54e:	005b      	lsls	r3, r3, #1
 800f550:	4413      	add	r3, r2
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	440b      	add	r3, r1
 800f556:	3304      	adds	r3, #4
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7f0 fe46 	bl	80001ec <strlen>
 800f560:	4603      	mov	r3, r0
 800f562:	60bb      	str	r3, [r7, #8]
        if (flag) {
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d004      	beq.n	800f574 <_SerializeBoxNamesReply+0x4c>
            count += len;
 800f56a:	693a      	ldr	r2, [r7, #16]
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	4413      	add	r3, r2
 800f570:	613b      	str	r3, [r7, #16]
 800f572:	e01d      	b.n	800f5b0 <_SerializeBoxNamesReply+0x88>
        } else {
            for (j = 0; j < len; j++)
 800f574:	2300      	movs	r3, #0
 800f576:	61bb      	str	r3, [r7, #24]
 800f578:	e016      	b.n	800f5a8 <_SerializeBoxNamesReply+0x80>
                *p_port->p_tx_packet++ = boxes[idx].boxName[j];
 800f57a:	4918      	ldr	r1, [pc, #96]	; (800f5dc <_SerializeBoxNamesReply+0xb4>)
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	4613      	mov	r3, r2
 800f580:	005b      	lsls	r3, r3, #1
 800f582:	4413      	add	r3, r2
 800f584:	009b      	lsls	r3, r3, #2
 800f586:	440b      	add	r3, r1
 800f588:	3304      	adds	r3, #4
 800f58a:	681a      	ldr	r2, [r3, #0]
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	441a      	add	r2, r3
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f596:	1c58      	adds	r0, r3, #1
 800f598:	6879      	ldr	r1, [r7, #4]
 800f59a:	f8c1 00d4 	str.w	r0, [r1, #212]	; 0xd4
 800f59e:	7812      	ldrb	r2, [r2, #0]
 800f5a0:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < len; j++)
 800f5a2:	69bb      	ldr	r3, [r7, #24]
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	61bb      	str	r3, [r7, #24]
 800f5a8:	69ba      	ldr	r2, [r7, #24]
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	dbe4      	blt.n	800f57a <_SerializeBoxNamesReply+0x52>
    for (i = 0; i < numberBoxItems; i++) {
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	61fb      	str	r3, [r7, #28]
 800f5b6:	4b0a      	ldr	r3, [pc, #40]	; (800f5e0 <_SerializeBoxNamesReply+0xb8>)
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	69fb      	ldr	r3, [r7, #28]
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	dbbd      	blt.n	800f53e <_SerializeBoxNamesReply+0x16>
        }
    }

    if (flag) {
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d002      	beq.n	800f5ce <_SerializeBoxNamesReply+0xa6>
        flag = 0;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	617b      	str	r3, [r7, #20]
        goto reset;
 800f5cc:	e7b4      	b.n	800f538 <_SerializeBoxNamesReply+0x10>
    }
    return count;
 800f5ce:	693b      	ldr	r3, [r7, #16]
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3720      	adds	r7, #32
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	20001c0c 	.word	0x20001c0c
 800f5dc:	08029428 	.word	0x08029428
 800f5e0:	20001c25 	.word	0x20001c25

0800f5e4 <serialInit>:

void serialInit(uint8_t port, uint32_t baudrate, uint8_t flexport)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	6039      	str	r1, [r7, #0]
 800f5ee:	71fb      	strb	r3, [r7, #7]
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	71bb      	strb	r3, [r7, #6]
    int idx;

    core.mainport = uartOpen(port, baudrate, MODE_RXTX);
 800f5f4:	79fb      	ldrb	r3, [r7, #7]
 800f5f6:	2203      	movs	r2, #3
 800f5f8:	6839      	ldr	r1, [r7, #0]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7f2 fec0 	bl	8002380 <uartOpen>
 800f600:	4603      	mov	r3, r0
 800f602:	4a92      	ldr	r2, [pc, #584]	; (800f84c <serialInit+0x268>)
 800f604:	6013      	str	r3, [r2, #0]
    ports[0].port = core.mainport;
 800f606:	4b91      	ldr	r3, [pc, #580]	; (800f84c <serialInit+0x268>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4a91      	ldr	r2, [pc, #580]	; (800f850 <serialInit+0x26c>)
 800f60c:	6013      	str	r3, [r2, #0]

    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f60e:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f612:	4990      	ldr	r1, [pc, #576]	; (800f854 <serialInit+0x270>)
 800f614:	4890      	ldr	r0, [pc, #576]	; (800f858 <serialInit+0x274>)
 800f616:	f008 f861 	bl	80176dc <pifMsp_Init>
 800f61a:	4603      	mov	r3, r0
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	f000 810f 	beq.w	800f840 <serialInit+0x25c>
    ports[0].pif_msp.evt_receive = evtMspReceive;
 800f622:	4b8b      	ldr	r3, [pc, #556]	; (800f850 <serialInit+0x26c>)
 800f624:	4a8d      	ldr	r2, [pc, #564]	; (800f85c <serialInit+0x278>)
 800f626:	605a      	str	r2, [r3, #4]
    ports[0].pif_msp.evt_other_packet = evtMspOtherPacket;
 800f628:	4b89      	ldr	r3, [pc, #548]	; (800f850 <serialInit+0x26c>)
 800f62a:	4a8d      	ldr	r2, [pc, #564]	; (800f860 <serialInit+0x27c>)
 800f62c:	609a      	str	r2, [r3, #8]
    pifMsp_AttachComm(&ports[0].pif_msp, &core.mainport->comm);
 800f62e:	4b87      	ldr	r3, [pc, #540]	; (800f84c <serialInit+0x268>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	3304      	adds	r3, #4
 800f634:	4619      	mov	r1, r3
 800f636:	4888      	ldr	r0, [pc, #544]	; (800f858 <serialInit+0x274>)
 800f638:	f008 f8de 	bl	80177f8 <pifMsp_AttachComm>

    serialStartReceiveFunc(&core.mainport->comm);
 800f63c:	4b83      	ldr	r3, [pc, #524]	; (800f84c <serialInit+0x268>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	3304      	adds	r3, #4
 800f642:	4618      	mov	r0, r3
 800f644:	f7f2 ffb2 	bl	80025ac <serialStartReceiveFunc>

    // additional telemetry port available only if spektrum sat isn't already assigned there
    if (flexport) {
 800f648:	79bb      	ldrb	r3, [r7, #6]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d02c      	beq.n	800f6a8 <serialInit+0xc4>
        core.flexport = uartOpen(flexport, baudrate, MODE_RXTX);
 800f64e:	79bb      	ldrb	r3, [r7, #6]
 800f650:	2203      	movs	r2, #3
 800f652:	6839      	ldr	r1, [r7, #0]
 800f654:	4618      	mov	r0, r3
 800f656:	f7f2 fe93 	bl	8002380 <uartOpen>
 800f65a:	4603      	mov	r3, r0
 800f65c:	4a7b      	ldr	r2, [pc, #492]	; (800f84c <serialInit+0x268>)
 800f65e:	6053      	str	r3, [r2, #4]
        ports[1].port = core.flexport;
 800f660:	4b7a      	ldr	r3, [pc, #488]	; (800f84c <serialInit+0x268>)
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	4a7a      	ldr	r2, [pc, #488]	; (800f850 <serialInit+0x26c>)
 800f666:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f66a:	f240 1211 	movw	r2, #273	; 0x111
 800f66e:	4979      	ldr	r1, [pc, #484]	; (800f854 <serialInit+0x270>)
 800f670:	487c      	ldr	r0, [pc, #496]	; (800f864 <serialInit+0x280>)
 800f672:	f008 f833 	bl	80176dc <pifMsp_Init>
 800f676:	4603      	mov	r3, r0
 800f678:	2b00      	cmp	r3, #0
 800f67a:	f000 80e3 	beq.w	800f844 <serialInit+0x260>
        ports[1].pif_msp.evt_receive = evtMspReceive;
 800f67e:	4b74      	ldr	r3, [pc, #464]	; (800f850 <serialInit+0x26c>)
 800f680:	4a76      	ldr	r2, [pc, #472]	; (800f85c <serialInit+0x278>)
 800f682:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
        ports[1].pif_msp.evt_other_packet = evtMspOtherPacket;
 800f686:	4b72      	ldr	r3, [pc, #456]	; (800f850 <serialInit+0x26c>)
 800f688:	4a75      	ldr	r2, [pc, #468]	; (800f860 <serialInit+0x27c>)
 800f68a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        pifMsp_AttachComm(&ports[1].pif_msp, &core.flexport->comm);
 800f68e:	4b6f      	ldr	r3, [pc, #444]	; (800f84c <serialInit+0x268>)
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	3304      	adds	r3, #4
 800f694:	4619      	mov	r1, r3
 800f696:	4873      	ldr	r0, [pc, #460]	; (800f864 <serialInit+0x280>)
 800f698:	f008 f8ae 	bl	80177f8 <pifMsp_AttachComm>

        serialStartReceiveFunc(&core.flexport->comm);
 800f69c:	4b6b      	ldr	r3, [pc, #428]	; (800f84c <serialInit+0x268>)
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	3304      	adds	r3, #4
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7f2 ff82 	bl	80025ac <serialStartReceiveFunc>
    }

    // calculate used boxes based on features and fill availableBoxes[] array
    memset(availableBoxes, 0xFF, sizeof(availableBoxes));
 800f6a8:	2219      	movs	r2, #25
 800f6aa:	21ff      	movs	r1, #255	; 0xff
 800f6ac:	486e      	ldr	r0, [pc, #440]	; (800f868 <serialInit+0x284>)
 800f6ae:	f013 fded 	bl	802328c <memset>

    idx = 0;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	60fb      	str	r3, [r7, #12]
    availableBoxes[idx++] = BOXARM;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	1c5a      	adds	r2, r3, #1
 800f6ba:	60fa      	str	r2, [r7, #12]
 800f6bc:	4a6a      	ldr	r2, [pc, #424]	; (800f868 <serialInit+0x284>)
 800f6be:	2100      	movs	r1, #0
 800f6c0:	54d1      	strb	r1, [r2, r3]
    if (sensors(SENSOR_ACC)) {
 800f6c2:	2002      	movs	r0, #2
 800f6c4:	f7f7 fb9c 	bl	8006e00 <sensors>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00b      	beq.n	800f6e6 <serialInit+0x102>
        availableBoxes[idx++] = BOXANGLE;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	1c5a      	adds	r2, r3, #1
 800f6d2:	60fa      	str	r2, [r7, #12]
 800f6d4:	4a64      	ldr	r2, [pc, #400]	; (800f868 <serialInit+0x284>)
 800f6d6:	2101      	movs	r1, #1
 800f6d8:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHORIZON;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	1c5a      	adds	r2, r3, #1
 800f6de:	60fa      	str	r2, [r7, #12]
 800f6e0:	4a61      	ldr	r2, [pc, #388]	; (800f868 <serialInit+0x284>)
 800f6e2:	2102      	movs	r1, #2
 800f6e4:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_BARO)) {
 800f6e6:	2004      	movs	r0, #4
 800f6e8:	f7f7 fb8a 	bl	8006e00 <sensors>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d012      	beq.n	800f718 <serialInit+0x134>
        availableBoxes[idx++] = BOXBARO;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	1c5a      	adds	r2, r3, #1
 800f6f6:	60fa      	str	r2, [r7, #12]
 800f6f8:	4a5b      	ldr	r2, [pc, #364]	; (800f868 <serialInit+0x284>)
 800f6fa:	2103      	movs	r1, #3
 800f6fc:	54d1      	strb	r1, [r2, r3]
        if (feature(FEATURE_VARIO))
 800f6fe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f702:	f7f7 fbc5 	bl	8006e90 <feature>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d005      	beq.n	800f718 <serialInit+0x134>
            availableBoxes[idx++] = BOXVARIO;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	1c5a      	adds	r2, r3, #1
 800f710:	60fa      	str	r2, [r7, #12]
 800f712:	4a55      	ldr	r2, [pc, #340]	; (800f868 <serialInit+0x284>)
 800f714:	2104      	movs	r1, #4
 800f716:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800f718:	2002      	movs	r0, #2
 800f71a:	f7f7 fb71 	bl	8006e00 <sensors>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d105      	bne.n	800f730 <serialInit+0x14c>
 800f724:	2008      	movs	r0, #8
 800f726:	f7f7 fb6b 	bl	8006e00 <sensors>
 800f72a:	4603      	mov	r3, r0
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d011      	beq.n	800f754 <serialInit+0x170>
        availableBoxes[idx++] = BOXMAG;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	1c5a      	adds	r2, r3, #1
 800f734:	60fa      	str	r2, [r7, #12]
 800f736:	4a4c      	ldr	r2, [pc, #304]	; (800f868 <serialInit+0x284>)
 800f738:	2105      	movs	r1, #5
 800f73a:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADFREE;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	1c5a      	adds	r2, r3, #1
 800f740:	60fa      	str	r2, [r7, #12]
 800f742:	4a49      	ldr	r2, [pc, #292]	; (800f868 <serialInit+0x284>)
 800f744:	2106      	movs	r1, #6
 800f746:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADADJ;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	1c5a      	adds	r2, r3, #1
 800f74c:	60fa      	str	r2, [r7, #12]
 800f74e:	4a46      	ldr	r2, [pc, #280]	; (800f868 <serialInit+0x284>)
 800f750:	2107      	movs	r1, #7
 800f752:	54d1      	strb	r1, [r2, r3]
    }
    if (feature(FEATURE_SERVO_TILT))
 800f754:	2020      	movs	r0, #32
 800f756:	f7f7 fb9b 	bl	8006e90 <feature>
 800f75a:	4603      	mov	r3, r0
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d005      	beq.n	800f76c <serialInit+0x188>
        availableBoxes[idx++] = BOXCAMSTAB;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	1c5a      	adds	r2, r3, #1
 800f764:	60fa      	str	r2, [r7, #12]
 800f766:	4a40      	ldr	r2, [pc, #256]	; (800f868 <serialInit+0x284>)
 800f768:	2108      	movs	r1, #8
 800f76a:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_GPS)) {
 800f76c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f770:	f7f7 fb8e 	bl	8006e90 <feature>
 800f774:	4603      	mov	r3, r0
 800f776:	2b00      	cmp	r3, #0
 800f778:	d00b      	beq.n	800f792 <serialInit+0x1ae>
        availableBoxes[idx++] = BOXGPSHOME;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	1c5a      	adds	r2, r3, #1
 800f77e:	60fa      	str	r2, [r7, #12]
 800f780:	4a39      	ldr	r2, [pc, #228]	; (800f868 <serialInit+0x284>)
 800f782:	210a      	movs	r1, #10
 800f784:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGPSHOLD;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	1c5a      	adds	r2, r3, #1
 800f78a:	60fa      	str	r2, [r7, #12]
 800f78c:	4a36      	ldr	r2, [pc, #216]	; (800f868 <serialInit+0x284>)
 800f78e:	210b      	movs	r1, #11
 800f790:	54d1      	strb	r1, [r2, r3]
    }
    if (f.FIXED_WING) {
 800f792:	4b36      	ldr	r3, [pc, #216]	; (800f86c <serialInit+0x288>)
 800f794:	7c1b      	ldrb	r3, [r3, #16]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d00b      	beq.n	800f7b2 <serialInit+0x1ce>
        availableBoxes[idx++] = BOXPASSTHRU;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	1c5a      	adds	r2, r3, #1
 800f79e:	60fa      	str	r2, [r7, #12]
 800f7a0:	4a31      	ldr	r2, [pc, #196]	; (800f868 <serialInit+0x284>)
 800f7a2:	210c      	movs	r1, #12
 800f7a4:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGCRUISE;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	1c5a      	adds	r2, r3, #1
 800f7aa:	60fa      	str	r2, [r7, #12]
 800f7ac:	4a2e      	ldr	r2, [pc, #184]	; (800f868 <serialInit+0x284>)
 800f7ae:	2118      	movs	r1, #24
 800f7b0:	54d1      	strb	r1, [r2, r3]
    }
    availableBoxes[idx++] = BOXBEEPERON;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	1c5a      	adds	r2, r3, #1
 800f7b6:	60fa      	str	r2, [r7, #12]
 800f7b8:	4a2b      	ldr	r2, [pc, #172]	; (800f868 <serialInit+0x284>)
 800f7ba:	210d      	movs	r1, #13
 800f7bc:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_INFLIGHT_ACC_CAL))
 800f7be:	2004      	movs	r0, #4
 800f7c0:	f7f7 fb66 	bl	8006e90 <feature>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d005      	beq.n	800f7d6 <serialInit+0x1f2>
        availableBoxes[idx++] = BOXCALIB;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	1c5a      	adds	r2, r3, #1
 800f7ce:	60fa      	str	r2, [r7, #12]
 800f7d0:	4a25      	ldr	r2, [pc, #148]	; (800f868 <serialInit+0x284>)
 800f7d2:	2111      	movs	r1, #17
 800f7d4:	54d1      	strb	r1, [r2, r3]
    availableBoxes[idx++] = BOXOSD;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	1c5a      	adds	r2, r3, #1
 800f7da:	60fa      	str	r2, [r7, #12]
 800f7dc:	4a22      	ldr	r2, [pc, #136]	; (800f868 <serialInit+0x284>)
 800f7de:	2113      	movs	r1, #19
 800f7e0:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_TELEMETRY && mcfg.telemetry_switch))
 800f7e2:	4b23      	ldr	r3, [pc, #140]	; (800f870 <serialInit+0x28c>)
 800f7e4:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	bf14      	ite	ne
 800f7ec:	2301      	movne	r3, #1
 800f7ee:	2300      	moveq	r3, #0
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7f7 fb4c 	bl	8006e90 <feature>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d005      	beq.n	800f80a <serialInit+0x226>
        availableBoxes[idx++] = BOXTELEMETRY;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	1c5a      	adds	r2, r3, #1
 800f802:	60fa      	str	r2, [r7, #12]
 800f804:	4a18      	ldr	r2, [pc, #96]	; (800f868 <serialInit+0x284>)
 800f806:	2114      	movs	r1, #20
 800f808:	54d1      	strb	r1, [r2, r3]
    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800f80a:	4b19      	ldr	r3, [pc, #100]	; (800f870 <serialInit+0x28c>)
 800f80c:	795b      	ldrb	r3, [r3, #5]
 800f80e:	2b18      	cmp	r3, #24
 800f810:	d111      	bne.n	800f836 <serialInit+0x252>
        availableBoxes[idx++] = BOXSERVO1;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	1c5a      	adds	r2, r3, #1
 800f816:	60fa      	str	r2, [r7, #12]
 800f818:	4a13      	ldr	r2, [pc, #76]	; (800f868 <serialInit+0x284>)
 800f81a:	2115      	movs	r1, #21
 800f81c:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO2;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	1c5a      	adds	r2, r3, #1
 800f822:	60fa      	str	r2, [r7, #12]
 800f824:	4a10      	ldr	r2, [pc, #64]	; (800f868 <serialInit+0x284>)
 800f826:	2116      	movs	r1, #22
 800f828:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO3;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	1c5a      	adds	r2, r3, #1
 800f82e:	60fa      	str	r2, [r7, #12]
 800f830:	4a0d      	ldr	r2, [pc, #52]	; (800f868 <serialInit+0x284>)
 800f832:	2117      	movs	r1, #23
 800f834:	54d1      	strb	r1, [r2, r3]
    }

    numberBoxItems = idx;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	b2da      	uxtb	r2, r3
 800f83a:	4b0e      	ldr	r3, [pc, #56]	; (800f874 <serialInit+0x290>)
 800f83c:	701a      	strb	r2, [r3, #0]
 800f83e:	e002      	b.n	800f846 <serialInit+0x262>
    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f840:	bf00      	nop
 800f842:	e000      	b.n	800f846 <serialInit+0x262>
        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f844:	bf00      	nop
}
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	200006f4 	.word	0x200006f4
 800f850:	20001c28 	.word	0x20001c28
 800f854:	20001800 	.word	0x20001800
 800f858:	20001c2c 	.word	0x20001c2c
 800f85c:	0800f879 	.word	0x0800f879
 800f860:	0801148d 	.word	0x0801148d
 800f864:	20001d04 	.word	0x20001d04
 800f868:	20001c0c 	.word	0x20001c0c
 800f86c:	20001628 	.word	0x20001628
 800f870:	200007ac 	.word	0x200007ac
 800f874:	20001c25 	.word	0x20001c25

0800f878 <evtMspReceive>:

void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet)
{
 800f878:	b590      	push	{r4, r7, lr}
 800f87a:	b091      	sub	sp, #68	; 0x44
 800f87c:	af02      	add	r7, sp, #8
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
    uint32_t i, j, tmp, junk;
#ifdef GPS
    uint8_t wp_no;
    int32_t lat = 0, lon = 0, alt = 0;
 800f882:	2300      	movs	r3, #0
 800f884:	62bb      	str	r3, [r7, #40]	; 0x28
 800f886:	2300      	movs	r3, #0
 800f888:	627b      	str	r3, [r7, #36]	; 0x24
 800f88a:	2300      	movs	r3, #0
 800f88c:	623b      	str	r3, [r7, #32]
#endif
    const char *build = __DATE__;
 800f88e:	4be7      	ldr	r3, [pc, #924]	; (800fc2c <evtMspReceive+0x3b4>)
 800f890:	61fb      	str	r3, [r7, #28]
    mspPortState_t* p_port = &ports[PIF_ID_MSP_2_IDX(p_owner->_id)];
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	891b      	ldrh	r3, [r3, #8]
 800f896:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f89a:	22d8      	movs	r2, #216	; 0xd8
 800f89c:	fb02 f303 	mul.w	r3, r2, r3
 800f8a0:	4ae3      	ldr	r2, [pc, #908]	; (800fc30 <evtMspReceive+0x3b8>)
 800f8a2:	4413      	add	r3, r2
 800f8a4:	61bb      	str	r3, [r7, #24]

    p_port->p_rx_packet = p_packet->p_data;
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	685a      	ldr	r2, [r3, #4]
 800f8aa:	69bb      	ldr	r3, [r7, #24]
 800f8ac:	651a      	str	r2, [r3, #80]	; 0x50
    p_port->p_tx_packet = p_port->tx_packet;
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800f8b4:	69bb      	ldr	r3, [r7, #24]
 800f8b6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    switch (p_packet->command) {
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	3b40      	subs	r3, #64	; 0x40
 800f8c0:	2bbe      	cmp	r3, #190	; 0xbe
 800f8c2:	f201 85d3 	bhi.w	801146c <evtMspReceive+0x1bf4>
 800f8c6:	a201      	add	r2, pc, #4	; (adr r2, 800f8cc <evtMspReceive+0x54>)
 800f8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8cc:	080113a5 	.word	0x080113a5
 800f8d0:	080113dd 	.word	0x080113dd
 800f8d4:	080112bd 	.word	0x080112bd
 800f8d8:	08011139 	.word	0x08011139
 800f8dc:	08011415 	.word	0x08011415
 800f8e0:	08011429 	.word	0x08011429
 800f8e4:	0801146d 	.word	0x0801146d
 800f8e8:	0801146d 	.word	0x0801146d
 800f8ec:	0801146d 	.word	0x0801146d
 800f8f0:	0801146d 	.word	0x0801146d
 800f8f4:	0801146d 	.word	0x0801146d
 800f8f8:	0801146d 	.word	0x0801146d
 800f8fc:	0801146d 	.word	0x0801146d
 800f900:	0801146d 	.word	0x0801146d
 800f904:	0801146d 	.word	0x0801146d
 800f908:	0801146d 	.word	0x0801146d
 800f90c:	0801146d 	.word	0x0801146d
 800f910:	0801146d 	.word	0x0801146d
 800f914:	0801146d 	.word	0x0801146d
 800f918:	0801146d 	.word	0x0801146d
 800f91c:	0801146d 	.word	0x0801146d
 800f920:	0801146d 	.word	0x0801146d
 800f924:	0801146d 	.word	0x0801146d
 800f928:	0801146d 	.word	0x0801146d
 800f92c:	0801146d 	.word	0x0801146d
 800f930:	0801146d 	.word	0x0801146d
 800f934:	0801146d 	.word	0x0801146d
 800f938:	0801146d 	.word	0x0801146d
 800f93c:	0801146d 	.word	0x0801146d
 800f940:	0801146d 	.word	0x0801146d
 800f944:	0801146d 	.word	0x0801146d
 800f948:	0801146d 	.word	0x0801146d
 800f94c:	0801146d 	.word	0x0801146d
 800f950:	0801146d 	.word	0x0801146d
 800f954:	0801146d 	.word	0x0801146d
 800f958:	0801146d 	.word	0x0801146d
 800f95c:	0800ffdf 	.word	0x0800ffdf
 800f960:	08010017 	.word	0x08010017
 800f964:	080101b5 	.word	0x080101b5
 800f968:	08010299 	.word	0x08010299
 800f96c:	080107a5 	.word	0x080107a5
 800f970:	080107c3 	.word	0x080107c3
 800f974:	08010809 	.word	0x08010809
 800f978:	08010877 	.word	0x08010877
 800f97c:	080108b9 	.word	0x080108b9
 800f980:	080108fd 	.word	0x080108fd
 800f984:	0801092b 	.word	0x0801092b
 800f988:	080109eb 	.word	0x080109eb
 800f98c:	08010a5f 	.word	0x08010a5f
 800f990:	08010b55 	.word	0x08010b55
 800f994:	08010c41 	.word	0x08010c41
 800f998:	08010d49 	.word	0x08010d49
 800f99c:	08010ba5 	.word	0x08010ba5
 800f9a0:	08010b39 	.word	0x08010b39
 800f9a4:	08010d9f 	.word	0x08010d9f
 800f9a8:	08010bc5 	.word	0x08010bc5
 800f9ac:	080102b7 	.word	0x080102b7
 800f9b0:	0801146d 	.word	0x0801146d
 800f9b4:	0801146d 	.word	0x0801146d
 800f9b8:	080105ff 	.word	0x080105ff
 800f9bc:	0801146d 	.word	0x0801146d
 800f9c0:	0801146d 	.word	0x0801146d
 800f9c4:	0801146d 	.word	0x0801146d
 800f9c8:	0801146d 	.word	0x0801146d
 800f9cc:	0801146d 	.word	0x0801146d
 800f9d0:	0801146d 	.word	0x0801146d
 800f9d4:	0801146d 	.word	0x0801146d
 800f9d8:	0801146d 	.word	0x0801146d
 800f9dc:	0801146d 	.word	0x0801146d
 800f9e0:	0801146d 	.word	0x0801146d
 800f9e4:	0801146d 	.word	0x0801146d
 800f9e8:	0801146d 	.word	0x0801146d
 800f9ec:	0801146d 	.word	0x0801146d
 800f9f0:	0801146d 	.word	0x0801146d
 800f9f4:	0801146d 	.word	0x0801146d
 800f9f8:	0801146d 	.word	0x0801146d
 800f9fc:	0801146d 	.word	0x0801146d
 800fa00:	0801146d 	.word	0x0801146d
 800fa04:	0801146d 	.word	0x0801146d
 800fa08:	0801146d 	.word	0x0801146d
 800fa0c:	0801146d 	.word	0x0801146d
 800fa10:	0801146d 	.word	0x0801146d
 800fa14:	0801146d 	.word	0x0801146d
 800fa18:	0801146d 	.word	0x0801146d
 800fa1c:	0801146d 	.word	0x0801146d
 800fa20:	0801146d 	.word	0x0801146d
 800fa24:	0801146d 	.word	0x0801146d
 800fa28:	0801146d 	.word	0x0801146d
 800fa2c:	0801146d 	.word	0x0801146d
 800fa30:	0801146d 	.word	0x0801146d
 800fa34:	0801146d 	.word	0x0801146d
 800fa38:	0801146d 	.word	0x0801146d
 800fa3c:	0801146d 	.word	0x0801146d
 800fa40:	0801146d 	.word	0x0801146d
 800fa44:	0801146d 	.word	0x0801146d
 800fa48:	0801146d 	.word	0x0801146d
 800fa4c:	08010fd7 	.word	0x08010fd7
 800fa50:	0801146d 	.word	0x0801146d
 800fa54:	0801146d 	.word	0x0801146d
 800fa58:	0801146d 	.word	0x0801146d
 800fa5c:	0801100d 	.word	0x0801100d
 800fa60:	0801146d 	.word	0x0801146d
 800fa64:	080110cd 	.word	0x080110cd
 800fa68:	0801146d 	.word	0x0801146d
 800fa6c:	0801146d 	.word	0x0801146d
 800fa70:	0801146d 	.word	0x0801146d
 800fa74:	0801146d 	.word	0x0801146d
 800fa78:	0801146d 	.word	0x0801146d
 800fa7c:	0801146d 	.word	0x0801146d
 800fa80:	0801146d 	.word	0x0801146d
 800fa84:	0801146d 	.word	0x0801146d
 800fa88:	0801146d 	.word	0x0801146d
 800fa8c:	0801146d 	.word	0x0801146d
 800fa90:	0801146d 	.word	0x0801146d
 800fa94:	0801146d 	.word	0x0801146d
 800fa98:	0801146d 	.word	0x0801146d
 800fa9c:	0801146d 	.word	0x0801146d
 800faa0:	0801146d 	.word	0x0801146d
 800faa4:	0801146d 	.word	0x0801146d
 800faa8:	0801146d 	.word	0x0801146d
 800faac:	0801146d 	.word	0x0801146d
 800fab0:	0801146d 	.word	0x0801146d
 800fab4:	0801146d 	.word	0x0801146d
 800fab8:	0801146d 	.word	0x0801146d
 800fabc:	0801146d 	.word	0x0801146d
 800fac0:	0801146d 	.word	0x0801146d
 800fac4:	0801146d 	.word	0x0801146d
 800fac8:	0801146d 	.word	0x0801146d
 800facc:	0801146d 	.word	0x0801146d
 800fad0:	0801146d 	.word	0x0801146d
 800fad4:	0801146d 	.word	0x0801146d
 800fad8:	0801146d 	.word	0x0801146d
 800fadc:	0801146d 	.word	0x0801146d
 800fae0:	0801146d 	.word	0x0801146d
 800fae4:	0801146d 	.word	0x0801146d
 800fae8:	0801146d 	.word	0x0801146d
 800faec:	0800fbc9 	.word	0x0800fbc9
 800faf0:	0800fc3d 	.word	0x0800fc3d
 800faf4:	0800fcaf 	.word	0x0800fcaf
 800faf8:	0800fd45 	.word	0x0800fd45
 800fafc:	0800fd89 	.word	0x0800fd89
 800fb00:	08010edf 	.word	0x08010edf
 800fb04:	08010efd 	.word	0x08010efd
 800fb08:	0800fdfd 	.word	0x0800fdfd
 800fb0c:	08010ec3 	.word	0x08010ec3
 800fb10:	08010e23 	.word	0x08010e23
 800fb14:	0800ff7f 	.word	0x0800ff7f
 800fb18:	0800ffc1 	.word	0x0800ffc1
 800fb1c:	0801036b 	.word	0x0801036b
 800fb20:	0801146d 	.word	0x0801146d
 800fb24:	0800ff1f 	.word	0x0800ff1f
 800fb28:	0801146d 	.word	0x0801146d
 800fb2c:	080106d7 	.word	0x080106d7
 800fb30:	0801146d 	.word	0x0801146d
 800fb34:	0801146d 	.word	0x0801146d
 800fb38:	0801146d 	.word	0x0801146d
 800fb3c:	0801146d 	.word	0x0801146d
 800fb40:	0801146d 	.word	0x0801146d
 800fb44:	0801146d 	.word	0x0801146d
 800fb48:	0801146d 	.word	0x0801146d
 800fb4c:	0801146d 	.word	0x0801146d
 800fb50:	0801146d 	.word	0x0801146d
 800fb54:	0801146d 	.word	0x0801146d
 800fb58:	0801146d 	.word	0x0801146d
 800fb5c:	0801146d 	.word	0x0801146d
 800fb60:	0801146d 	.word	0x0801146d
 800fb64:	0801146d 	.word	0x0801146d
 800fb68:	0801146d 	.word	0x0801146d
 800fb6c:	0801146d 	.word	0x0801146d
 800fb70:	0801146d 	.word	0x0801146d
 800fb74:	0801146d 	.word	0x0801146d
 800fb78:	0801146d 	.word	0x0801146d
 800fb7c:	0801146d 	.word	0x0801146d
 800fb80:	0801146d 	.word	0x0801146d
 800fb84:	0801146d 	.word	0x0801146d
 800fb88:	0800fc01 	.word	0x0800fc01
 800fb8c:	08010fa9 	.word	0x08010fa9
 800fb90:	08010423 	.word	0x08010423
 800fb94:	08010515 	.word	0x08010515
 800fb98:	0801146d 	.word	0x0801146d
 800fb9c:	0801146d 	.word	0x0801146d
 800fba0:	0801146d 	.word	0x0801146d
 800fba4:	0801146d 	.word	0x0801146d
 800fba8:	0801146d 	.word	0x0801146d
 800fbac:	0801146d 	.word	0x0801146d
 800fbb0:	0801146d 	.word	0x0801146d
 800fbb4:	08010f19 	.word	0x08010f19
 800fbb8:	0801146d 	.word	0x0801146d
 800fbbc:	0801146d 	.word	0x0801146d
 800fbc0:	0801146d 	.word	0x0801146d
 800fbc4:	08010f41 	.word	0x08010f41
    case MSP_SET_RAW_RC:
        for (i = 0; i < 8; i++)
 800fbc8:	2300      	movs	r3, #0
 800fbca:	637b      	str	r3, [r7, #52]	; 0x34
 800fbcc:	e00b      	b.n	800fbe6 <evtMspReceive+0x36e>
            rcData[i] = _Read16(p_port);
 800fbce:	69b8      	ldr	r0, [r7, #24]
 800fbd0:	f7ff fbb8 	bl	800f344 <_Read16>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	b219      	sxth	r1, r3
 800fbd8:	4a16      	ldr	r2, [pc, #88]	; (800fc34 <evtMspReceive+0x3bc>)
 800fbda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800fbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	637b      	str	r3, [r7, #52]	; 0x34
 800fbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbe8:	2b07      	cmp	r3, #7
 800fbea:	d9f0      	bls.n	800fbce <evtMspReceive+0x356>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fbec:	2300      	movs	r3, #0
 800fbee:	2200      	movs	r2, #0
 800fbf0:	6839      	ldr	r1, [r7, #0]
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f007 fe26 	bl	8017844 <pifMsp_MakeAnswer>
        mspFrameRecieve();
 800fbf8:	f7fe fb58 	bl	800e2ac <mspFrameRecieve>
        break;
 800fbfc:	f001 bc3b 	b.w	8011476 <evtMspReceive+0x1bfe>
        
    case MSP_SET_ACC_TRIM:
        cfg.angleTrim[PITCH] = _Read16(p_port);
 800fc00:	69b8      	ldr	r0, [r7, #24]
 800fc02:	f7ff fb9f 	bl	800f344 <_Read16>
 800fc06:	4603      	mov	r3, r0
 800fc08:	b21a      	sxth	r2, r3
 800fc0a:	4b0b      	ldr	r3, [pc, #44]	; (800fc38 <evtMspReceive+0x3c0>)
 800fc0c:	85da      	strh	r2, [r3, #46]	; 0x2e
        cfg.angleTrim[ROLL]  = _Read16(p_port);
 800fc0e:	69b8      	ldr	r0, [r7, #24]
 800fc10:	f7ff fb98 	bl	800f344 <_Read16>
 800fc14:	4603      	mov	r3, r0
 800fc16:	b21a      	sxth	r2, r3
 800fc18:	4b07      	ldr	r3, [pc, #28]	; (800fc38 <evtMspReceive+0x3c0>)
 800fc1a:	859a      	strh	r2, [r3, #44]	; 0x2c
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	2200      	movs	r2, #0
 800fc20:	6839      	ldr	r1, [r7, #0]
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f007 fe0e 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 800fc28:	f001 bc25 	b.w	8011476 <evtMspReceive+0x1bfe>
 800fc2c:	080278d0 	.word	0x080278d0
 800fc30:	20001c28 	.word	0x20001c28
 800fc34:	20001660 	.word	0x20001660
 800fc38:	20000d18 	.word	0x20000d18

#ifdef GPS
    case MSP_SET_RAW_GPS:
        f.GPS_FIX = _Read8(p_port);
 800fc3c:	69b8      	ldr	r0, [r7, #24]
 800fc3e:	f7ff fb6d 	bl	800f31c <_Read8>
 800fc42:	4603      	mov	r3, r0
 800fc44:	461a      	mov	r2, r3
 800fc46:	4bb7      	ldr	r3, [pc, #732]	; (800ff24 <evtMspReceive+0x6ac>)
 800fc48:	72da      	strb	r2, [r3, #11]
        GPS_numSat = _Read8(p_port);
 800fc4a:	69b8      	ldr	r0, [r7, #24]
 800fc4c:	f7ff fb66 	bl	800f31c <_Read8>
 800fc50:	4603      	mov	r3, r0
 800fc52:	461a      	mov	r2, r3
 800fc54:	4bb4      	ldr	r3, [pc, #720]	; (800ff28 <evtMspReceive+0x6b0>)
 800fc56:	701a      	strb	r2, [r3, #0]
        GPS_coord[LAT] = _Read32(p_port);
 800fc58:	69b8      	ldr	r0, [r7, #24]
 800fc5a:	f7ff fb90 	bl	800f37e <_Read32>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	461a      	mov	r2, r3
 800fc62:	4bb2      	ldr	r3, [pc, #712]	; (800ff2c <evtMspReceive+0x6b4>)
 800fc64:	601a      	str	r2, [r3, #0]
        GPS_coord[LON] = _Read32(p_port);
 800fc66:	69b8      	ldr	r0, [r7, #24]
 800fc68:	f7ff fb89 	bl	800f37e <_Read32>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	461a      	mov	r2, r3
 800fc70:	4bae      	ldr	r3, [pc, #696]	; (800ff2c <evtMspReceive+0x6b4>)
 800fc72:	605a      	str	r2, [r3, #4]
        GPS_altitude = _Read16(p_port);
 800fc74:	69b8      	ldr	r0, [r7, #24]
 800fc76:	f7ff fb65 	bl	800f344 <_Read16>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	4bac      	ldr	r3, [pc, #688]	; (800ff30 <evtMspReceive+0x6b8>)
 800fc80:	801a      	strh	r2, [r3, #0]
        GPS_speed = _Read16(p_port);
 800fc82:	69b8      	ldr	r0, [r7, #24]
 800fc84:	f7ff fb5e 	bl	800f344 <_Read16>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	4ba9      	ldr	r3, [pc, #676]	; (800ff34 <evtMspReceive+0x6bc>)
 800fc8e:	801a      	strh	r2, [r3, #0]
        GPS_update |= 2;        // New data signalisation to GPS functions
 800fc90:	4ba9      	ldr	r3, [pc, #676]	; (800ff38 <evtMspReceive+0x6c0>)
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	f043 0302 	orr.w	r3, r3, #2
 800fc98:	b2da      	uxtb	r2, r3
 800fc9a:	4ba7      	ldr	r3, [pc, #668]	; (800ff38 <evtMspReceive+0x6c0>)
 800fc9c:	701a      	strb	r2, [r3, #0]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fc9e:	2300      	movs	r3, #0
 800fca0:	2200      	movs	r2, #0
 800fca2:	6839      	ldr	r1, [r7, #0]
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f007 fdcd 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 800fcaa:	f001 bbe4 	b.w	8011476 <evtMspReceive+0x1bfe>
#endif

    case MSP_SET_PID:
        for (i = 0; i < PIDITEMS; i++) {
 800fcae:	2300      	movs	r3, #0
 800fcb0:	637b      	str	r3, [r7, #52]	; 0x34
 800fcb2:	e03c      	b.n	800fd2e <evtMspReceive+0x4b6>
            cfg.P8[i] = _Read8(p_port);
 800fcb4:	69b8      	ldr	r0, [r7, #24]
 800fcb6:	f7ff fb31 	bl	800f31c <_Read8>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	4a9f      	ldr	r2, [pc, #636]	; (800ff3c <evtMspReceive+0x6c4>)
 800fcc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcc2:	4413      	add	r3, r2
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	460a      	mov	r2, r1
 800fcc8:	701a      	strb	r2, [r3, #0]
            cfg.I8[i] = _Read8(p_port);
 800fcca:	69b8      	ldr	r0, [r7, #24]
 800fccc:	f7ff fb26 	bl	800f31c <_Read8>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	4a99      	ldr	r2, [pc, #612]	; (800ff3c <evtMspReceive+0x6c4>)
 800fcd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcd8:	4413      	add	r3, r2
 800fcda:	330b      	adds	r3, #11
 800fcdc:	460a      	mov	r2, r1
 800fcde:	701a      	strb	r2, [r3, #0]
            cfg.D8[i] = _Read8(p_port);
 800fce0:	69b8      	ldr	r0, [r7, #24]
 800fce2:	f7ff fb1b 	bl	800f31c <_Read8>
 800fce6:	4603      	mov	r3, r0
 800fce8:	4619      	mov	r1, r3
 800fcea:	4a94      	ldr	r2, [pc, #592]	; (800ff3c <evtMspReceive+0x6c4>)
 800fcec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcee:	4413      	add	r3, r2
 800fcf0:	3315      	adds	r3, #21
 800fcf2:	460a      	mov	r2, r1
 800fcf4:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "S-PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 800fcf6:	4a91      	ldr	r2, [pc, #580]	; (800ff3c <evtMspReceive+0x6c4>)
 800fcf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcfa:	4413      	add	r3, r2
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	4618      	mov	r0, r3
 800fd02:	4a8e      	ldr	r2, [pc, #568]	; (800ff3c <evtMspReceive+0x6c4>)
 800fd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd06:	4413      	add	r3, r2
 800fd08:	330b      	adds	r3, #11
 800fd0a:	781b      	ldrb	r3, [r3, #0]
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	4a8b      	ldr	r2, [pc, #556]	; (800ff3c <evtMspReceive+0x6c4>)
 800fd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd12:	4413      	add	r3, r2
 800fd14:	3315      	adds	r3, #21
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	9301      	str	r3, [sp, #4]
 800fd1a:	9100      	str	r1, [sp, #0]
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd20:	4987      	ldr	r1, [pc, #540]	; (800ff40 <evtMspReceive+0x6c8>)
 800fd22:	2002      	movs	r0, #2
 800fd24:	f003 fd8c 	bl	8013840 <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 800fd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	637b      	str	r3, [r7, #52]	; 0x34
 800fd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd30:	2b09      	cmp	r3, #9
 800fd32:	d9bf      	bls.n	800fcb4 <evtMspReceive+0x43c>
#endif
        }
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fd34:	2300      	movs	r3, #0
 800fd36:	2200      	movs	r2, #0
 800fd38:	6839      	ldr	r1, [r7, #0]
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f007 fd82 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 800fd40:	f001 bb99 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_SET_BOX:
        for (i = 0; i < numberBoxItems; i++)
 800fd44:	2300      	movs	r3, #0
 800fd46:	637b      	str	r3, [r7, #52]	; 0x34
 800fd48:	e010      	b.n	800fd6c <evtMspReceive+0x4f4>
            cfg.activate[availableBoxes[i]] = _Read16(p_port);
 800fd4a:	69b8      	ldr	r0, [r7, #24]
 800fd4c:	f7ff fafa 	bl	800f344 <_Read16>
 800fd50:	4603      	mov	r3, r0
 800fd52:	4619      	mov	r1, r3
 800fd54:	4a7b      	ldr	r2, [pc, #492]	; (800ff44 <evtMspReceive+0x6cc>)
 800fd56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd58:	4413      	add	r3, r2
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	4a77      	ldr	r2, [pc, #476]	; (800ff3c <evtMspReceive+0x6c4>)
 800fd5e:	3312      	adds	r3, #18
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	4413      	add	r3, r2
 800fd64:	6059      	str	r1, [r3, #4]
        for (i = 0; i < numberBoxItems; i++)
 800fd66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd68:	3301      	adds	r3, #1
 800fd6a:	637b      	str	r3, [r7, #52]	; 0x34
 800fd6c:	4b76      	ldr	r3, [pc, #472]	; (800ff48 <evtMspReceive+0x6d0>)
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	461a      	mov	r2, r3
 800fd72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d3e8      	bcc.n	800fd4a <evtMspReceive+0x4d2>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fd78:	2300      	movs	r3, #0
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	6839      	ldr	r1, [r7, #0]
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f007 fd60 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 800fd84:	f001 bb77 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_SET_RC_TUNING:
        cfg.rcRate8 = _Read8(p_port);
 800fd88:	69b8      	ldr	r0, [r7, #24]
 800fd8a:	f7ff fac7 	bl	800f31c <_Read8>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	461a      	mov	r2, r3
 800fd92:	4b6a      	ldr	r3, [pc, #424]	; (800ff3c <evtMspReceive+0x6c4>)
 800fd94:	77da      	strb	r2, [r3, #31]
        cfg.rcExpo8 = _Read8(p_port);
 800fd96:	69b8      	ldr	r0, [r7, #24]
 800fd98:	f7ff fac0 	bl	800f31c <_Read8>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	461a      	mov	r2, r3
 800fda0:	4b66      	ldr	r3, [pc, #408]	; (800ff3c <evtMspReceive+0x6c4>)
 800fda2:	f883 2020 	strb.w	r2, [r3, #32]
        _Read8(p_port); // Legacy pitch-roll rate, read but not set.
 800fda6:	69b8      	ldr	r0, [r7, #24]
 800fda8:	f7ff fab8 	bl	800f31c <_Read8>
        cfg.yawRate = _Read8(p_port);
 800fdac:	69b8      	ldr	r0, [r7, #24]
 800fdae:	f7ff fab5 	bl	800f31c <_Read8>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	4b61      	ldr	r3, [pc, #388]	; (800ff3c <evtMspReceive+0x6c4>)
 800fdb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        cfg.dynThrPID = _Read8(p_port);
 800fdbc:	69b8      	ldr	r0, [r7, #24]
 800fdbe:	f7ff faad 	bl	800f31c <_Read8>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	4b5d      	ldr	r3, [pc, #372]	; (800ff3c <evtMspReceive+0x6c4>)
 800fdc8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        cfg.thrMid8 = _Read8(p_port);
 800fdcc:	69b8      	ldr	r0, [r7, #24]
 800fdce:	f7ff faa5 	bl	800f31c <_Read8>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	4b59      	ldr	r3, [pc, #356]	; (800ff3c <evtMspReceive+0x6c4>)
 800fdd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        cfg.thrExpo8 = _Read8(p_port);
 800fddc:	69b8      	ldr	r0, [r7, #24]
 800fdde:	f7ff fa9d 	bl	800f31c <_Read8>
 800fde2:	4603      	mov	r3, r0
 800fde4:	461a      	mov	r2, r3
 800fde6:	4b55      	ldr	r3, [pc, #340]	; (800ff3c <evtMspReceive+0x6c4>)
 800fde8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fdec:	2300      	movs	r3, #0
 800fdee:	2200      	movs	r2, #0
 800fdf0:	6839      	ldr	r1, [r7, #0]
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f007 fd26 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 800fdf8:	f001 bb3d 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_SET_MISC:
        tmp = _Read16(p_port);
 800fdfc:	69b8      	ldr	r0, [r7, #24]
 800fdfe:	f7ff faa1 	bl	800f344 <_Read16>
 800fe02:	4603      	mov	r3, r0
 800fe04:	613b      	str	r3, [r7, #16]
        // sanity check
        if (tmp < 1600 && tmp > 1400)
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fe0c:	d208      	bcs.n	800fe20 <evtMspReceive+0x5a8>
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800fe14:	d904      	bls.n	800fe20 <evtMspReceive+0x5a8>
            mcfg.midrc = tmp;
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	b29a      	uxth	r2, r3
 800fe1a:	4b4c      	ldr	r3, [pc, #304]	; (800ff4c <evtMspReceive+0x6d4>)
 800fe1c:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
        mcfg.minthrottle = _Read16(p_port);
 800fe20:	69b8      	ldr	r0, [r7, #24]
 800fe22:	f7ff fa8f 	bl	800f344 <_Read16>
 800fe26:	4603      	mov	r3, r0
 800fe28:	461a      	mov	r2, r3
 800fe2a:	4b48      	ldr	r3, [pc, #288]	; (800ff4c <evtMspReceive+0x6d4>)
 800fe2c:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
        mcfg.maxthrottle = _Read16(p_port);
 800fe30:	69b8      	ldr	r0, [r7, #24]
 800fe32:	f7ff fa87 	bl	800f344 <_Read16>
 800fe36:	4603      	mov	r3, r0
 800fe38:	461a      	mov	r2, r3
 800fe3a:	4b44      	ldr	r3, [pc, #272]	; (800ff4c <evtMspReceive+0x6d4>)
 800fe3c:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
        mcfg.mincommand = _Read16(p_port);
 800fe40:	69b8      	ldr	r0, [r7, #24]
 800fe42:	f7ff fa7f 	bl	800f344 <_Read16>
 800fe46:	4603      	mov	r3, r0
 800fe48:	461a      	mov	r2, r3
 800fe4a:	4b40      	ldr	r3, [pc, #256]	; (800ff4c <evtMspReceive+0x6d4>)
 800fe4c:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
        cfg.failsafe_throttle = _Read16(p_port);
 800fe50:	69b8      	ldr	r0, [r7, #24]
 800fe52:	f7ff fa77 	bl	800f344 <_Read16>
 800fe56:	4603      	mov	r3, r0
 800fe58:	461a      	mov	r2, r3
 800fe5a:	4b38      	ldr	r3, [pc, #224]	; (800ff3c <evtMspReceive+0x6c4>)
 800fe5c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
        mcfg.gps_type = _Read8(p_port);
 800fe60:	69b8      	ldr	r0, [r7, #24]
 800fe62:	f7ff fa5b 	bl	800f31c <_Read8>
 800fe66:	4603      	mov	r3, r0
 800fe68:	461a      	mov	r2, r3
 800fe6a:	4b38      	ldr	r3, [pc, #224]	; (800ff4c <evtMspReceive+0x6d4>)
 800fe6c:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
        mcfg.gps_baudrate = _Read8(p_port);
 800fe70:	69b8      	ldr	r0, [r7, #24]
 800fe72:	f7ff fa53 	bl	800f31c <_Read8>
 800fe76:	4603      	mov	r3, r0
 800fe78:	b25a      	sxtb	r2, r3
 800fe7a:	4b34      	ldr	r3, [pc, #208]	; (800ff4c <evtMspReceive+0x6d4>)
 800fe7c:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
        mcfg.gps_ubx_sbas = _Read8(p_port);
 800fe80:	69b8      	ldr	r0, [r7, #24]
 800fe82:	f7ff fa4b 	bl	800f31c <_Read8>
 800fe86:	4603      	mov	r3, r0
 800fe88:	b25a      	sxtb	r2, r3
 800fe8a:	4b30      	ldr	r3, [pc, #192]	; (800ff4c <evtMspReceive+0x6d4>)
 800fe8c:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
        mcfg.multiwiicurrentoutput = _Read8(p_port);
 800fe90:	69b8      	ldr	r0, [r7, #24]
 800fe92:	f7ff fa43 	bl	800f31c <_Read8>
 800fe96:	4603      	mov	r3, r0
 800fe98:	461a      	mov	r2, r3
 800fe9a:	4b2c      	ldr	r3, [pc, #176]	; (800ff4c <evtMspReceive+0x6d4>)
 800fe9c:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
        mcfg.rssi_aux_channel = _Read8(p_port);
 800fea0:	69b8      	ldr	r0, [r7, #24]
 800fea2:	f7ff fa3b 	bl	800f31c <_Read8>
 800fea6:	4603      	mov	r3, r0
 800fea8:	461a      	mov	r2, r3
 800feaa:	4b28      	ldr	r3, [pc, #160]	; (800ff4c <evtMspReceive+0x6d4>)
 800feac:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
        _Read8(p_port);
 800feb0:	69b8      	ldr	r0, [r7, #24]
 800feb2:	f7ff fa33 	bl	800f31c <_Read8>
        cfg.mag_declination = _Read16(p_port) * 10;
 800feb6:	69b8      	ldr	r0, [r7, #24]
 800feb8:	f7ff fa44 	bl	800f344 <_Read16>
 800febc:	4603      	mov	r3, r0
 800febe:	461a      	mov	r2, r3
 800fec0:	0092      	lsls	r2, r2, #2
 800fec2:	4413      	add	r3, r2
 800fec4:	005b      	lsls	r3, r3, #1
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	b21a      	sxth	r2, r3
 800feca:	4b1c      	ldr	r3, [pc, #112]	; (800ff3c <evtMspReceive+0x6c4>)
 800fecc:	855a      	strh	r2, [r3, #42]	; 0x2a
        mcfg.vbatscale = _Read8(p_port);           // actual vbatscale as intended
 800fece:	69b8      	ldr	r0, [r7, #24]
 800fed0:	f7ff fa24 	bl	800f31c <_Read8>
 800fed4:	4603      	mov	r3, r0
 800fed6:	461a      	mov	r2, r3
 800fed8:	4b1c      	ldr	r3, [pc, #112]	; (800ff4c <evtMspReceive+0x6d4>)
 800feda:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
        mcfg.vbatmincellvoltage = _Read8(p_port);  // vbatlevel_warn1 in MWC2.3 GUI
 800fede:	69b8      	ldr	r0, [r7, #24]
 800fee0:	f7ff fa1c 	bl	800f31c <_Read8>
 800fee4:	4603      	mov	r3, r0
 800fee6:	461a      	mov	r2, r3
 800fee8:	4b18      	ldr	r3, [pc, #96]	; (800ff4c <evtMspReceive+0x6d4>)
 800feea:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
        mcfg.vbatmaxcellvoltage = _Read8(p_port);  // vbatlevel_warn2 in MWC2.3 GUI
 800feee:	69b8      	ldr	r0, [r7, #24]
 800fef0:	f7ff fa14 	bl	800f31c <_Read8>
 800fef4:	4603      	mov	r3, r0
 800fef6:	461a      	mov	r2, r3
 800fef8:	4b14      	ldr	r3, [pc, #80]	; (800ff4c <evtMspReceive+0x6d4>)
 800fefa:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
        mcfg.vbatwarningcellvoltage = _Read8(p_port); // vbatlevel when buzzer starts to alert
 800fefe:	69b8      	ldr	r0, [r7, #24]
 800ff00:	f7ff fa0c 	bl	800f31c <_Read8>
 800ff04:	4603      	mov	r3, r0
 800ff06:	461a      	mov	r2, r3
 800ff08:	4b10      	ldr	r3, [pc, #64]	; (800ff4c <evtMspReceive+0x6d4>)
 800ff0a:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800ff0e:	2300      	movs	r3, #0
 800ff10:	2200      	movs	r2, #0
 800ff12:	6839      	ldr	r1, [r7, #0]
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f007 fc95 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 800ff1a:	f001 baac 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_SET_MOTOR:
        for (i = 0; i < 8; i++)
 800ff1e:	2300      	movs	r3, #0
 800ff20:	637b      	str	r3, [r7, #52]	; 0x34
 800ff22:	e021      	b.n	800ff68 <evtMspReceive+0x6f0>
 800ff24:	20001628 	.word	0x20001628
 800ff28:	2000170c 	.word	0x2000170c
 800ff2c:	200016ec 	.word	0x200016ec
 800ff30:	20001712 	.word	0x20001712
 800ff34:	20001714 	.word	0x20001714
 800ff38:	20001716 	.word	0x20001716
 800ff3c:	20000d18 	.word	0x20000d18
 800ff40:	080278dc 	.word	0x080278dc
 800ff44:	20001c0c 	.word	0x20001c0c
 800ff48:	20001c25 	.word	0x20001c25
 800ff4c:	200007ac 	.word	0x200007ac
            motor_disarmed[i] = _Read16(p_port);
 800ff50:	69b8      	ldr	r0, [r7, #24]
 800ff52:	f7ff f9f7 	bl	800f344 <_Read16>
 800ff56:	4603      	mov	r3, r0
 800ff58:	b219      	sxth	r1, r3
 800ff5a:	4aa6      	ldr	r2, [pc, #664]	; (80101f4 <evtMspReceive+0x97c>)
 800ff5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800ff62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff64:	3301      	adds	r3, #1
 800ff66:	637b      	str	r3, [r7, #52]	; 0x34
 800ff68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff6a:	2b07      	cmp	r3, #7
 800ff6c:	d9f0      	bls.n	800ff50 <evtMspReceive+0x6d8>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800ff6e:	2300      	movs	r3, #0
 800ff70:	2200      	movs	r2, #0
 800ff72:	6839      	ldr	r1, [r7, #0]
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f007 fc65 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 800ff7a:	f001 ba7c 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_SELECT_SETTING:
        if (!f.ARMED) {
 800ff7e:	4b9e      	ldr	r3, [pc, #632]	; (80101f8 <evtMspReceive+0x980>)
 800ff80:	785b      	ldrb	r3, [r3, #1]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d114      	bne.n	800ffb0 <evtMspReceive+0x738>
            mcfg.current_profile = _Read8(p_port);
 800ff86:	69b8      	ldr	r0, [r7, #24]
 800ff88:	f7ff f9c8 	bl	800f31c <_Read8>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	461a      	mov	r2, r3
 800ff90:	4b9a      	ldr	r3, [pc, #616]	; (80101fc <evtMspReceive+0x984>)
 800ff92:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            if (mcfg.current_profile > 2)
 800ff96:	4b99      	ldr	r3, [pc, #612]	; (80101fc <evtMspReceive+0x984>)
 800ff98:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800ff9c:	2b02      	cmp	r3, #2
 800ff9e:	d903      	bls.n	800ffa8 <evtMspReceive+0x730>
                mcfg.current_profile = 0;
 800ffa0:	4b96      	ldr	r3, [pc, #600]	; (80101fc <evtMspReceive+0x984>)
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            // this writes new profile index and re-reads it
            writeEEPROM(0, false);
 800ffa8:	2100      	movs	r1, #0
 800ffaa:	2000      	movs	r0, #0
 800ffac:	f7f6 fb8e 	bl	80066cc <writeEEPROM>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	6839      	ldr	r1, [r7, #0]
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f007 fc44 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 800ffbc:	f001 ba5b 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_SET_HEAD:
        magHold = _Read16(p_port);
 800ffc0:	69b8      	ldr	r0, [r7, #24]
 800ffc2:	f7ff f9bf 	bl	800f344 <_Read16>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	b21a      	sxth	r2, r3
 800ffca:	4b8d      	ldr	r3, [pc, #564]	; (8010200 <evtMspReceive+0x988>)
 800ffcc:	801a      	strh	r2, [r3, #0]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800ffce:	2300      	movs	r3, #0
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	6839      	ldr	r1, [r7, #0]
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f007 fc35 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 800ffda:	f001 ba4c 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_IDENT:
        _Serialize8(p_port, VERSION);                    // multiwii version
 800ffde:	21e7      	movs	r1, #231	; 0xe7
 800ffe0:	69b8      	ldr	r0, [r7, #24]
 800ffe2:	f7ff f9f5 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, mcfg.mixerConfiguration);    // type of multicopter
 800ffe6:	4b85      	ldr	r3, [pc, #532]	; (80101fc <evtMspReceive+0x984>)
 800ffe8:	795b      	ldrb	r3, [r3, #5]
 800ffea:	4619      	mov	r1, r3
 800ffec:	69b8      	ldr	r0, [r7, #24]
 800ffee:	f7ff f9ef 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, MSP_VERSION);                // MultiWii Serial Protocol Version
 800fff2:	2104      	movs	r1, #4
 800fff4:	69b8      	ldr	r0, [r7, #24]
 800fff6:	f7ff f9eb 	bl	800f3d0 <_Serialize8>
        _Serialize32(p_port, CAP_PLATFORM_32BIT | CAP_BASEFLIGHT_CONFIG | CAP_DYNBALANCE | CAP_FW_FLAPS); // "capability"
 800fffa:	4982      	ldr	r1, [pc, #520]	; (8010204 <evtMspReceive+0x98c>)
 800fffc:	69b8      	ldr	r0, [r7, #24]
 800fffe:	f7ff fa22 	bl	800f446 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 7);
 8010002:	69bb      	ldr	r3, [r7, #24]
 8010004:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010008:	2307      	movs	r3, #7
 801000a:	6839      	ldr	r1, [r7, #0]
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f007 fc19 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010012:	f001 ba30 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_STATUS:
        _Serialize16(p_port, cycleTime);
 8010016:	4b7c      	ldr	r3, [pc, #496]	; (8010208 <evtMspReceive+0x990>)
 8010018:	881b      	ldrh	r3, [r3, #0]
 801001a:	b21b      	sxth	r3, r3
 801001c:	4619      	mov	r1, r3
 801001e:	69b8      	ldr	r0, [r7, #24]
 8010020:	f7ff f9ee 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, g_i2c_port.error_count);
 8010024:	4b79      	ldr	r3, [pc, #484]	; (801020c <evtMspReceive+0x994>)
 8010026:	881b      	ldrh	r3, [r3, #0]
 8010028:	b21b      	sxth	r3, r3
 801002a:	4619      	mov	r1, r3
 801002c:	69b8      	ldr	r0, [r7, #24]
 801002e:	f7ff f9e7 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, sensors(SENSOR_ACC) | sensors(SENSOR_BARO) << 1 | sensors(SENSOR_MAG) << 2 | sensors(SENSOR_GPS) << 3 | sensors(SENSOR_SONAR) << 4);
 8010032:	2002      	movs	r0, #2
 8010034:	f7f6 fee4 	bl	8006e00 <sensors>
 8010038:	4603      	mov	r3, r0
 801003a:	b21c      	sxth	r4, r3
 801003c:	2004      	movs	r0, #4
 801003e:	f7f6 fedf 	bl	8006e00 <sensors>
 8010042:	4603      	mov	r3, r0
 8010044:	005b      	lsls	r3, r3, #1
 8010046:	b21b      	sxth	r3, r3
 8010048:	4323      	orrs	r3, r4
 801004a:	b21c      	sxth	r4, r3
 801004c:	2008      	movs	r0, #8
 801004e:	f7f6 fed7 	bl	8006e00 <sensors>
 8010052:	4603      	mov	r3, r0
 8010054:	009b      	lsls	r3, r3, #2
 8010056:	b21b      	sxth	r3, r3
 8010058:	4323      	orrs	r3, r4
 801005a:	b21c      	sxth	r4, r3
 801005c:	2020      	movs	r0, #32
 801005e:	f7f6 fecf 	bl	8006e00 <sensors>
 8010062:	4603      	mov	r3, r0
 8010064:	00db      	lsls	r3, r3, #3
 8010066:	b21b      	sxth	r3, r3
 8010068:	4323      	orrs	r3, r4
 801006a:	b21c      	sxth	r4, r3
 801006c:	2010      	movs	r0, #16
 801006e:	f7f6 fec7 	bl	8006e00 <sensors>
 8010072:	4603      	mov	r3, r0
 8010074:	011b      	lsls	r3, r3, #4
 8010076:	b21b      	sxth	r3, r3
 8010078:	4323      	orrs	r3, r4
 801007a:	b21b      	sxth	r3, r3
 801007c:	4619      	mov	r1, r3
 801007e:	69b8      	ldr	r0, [r7, #24]
 8010080:	f7ff f9be 	bl	800f400 <_Serialize16>
        // OK, so you waste all the fucking time to have BOXNAMES and BOXINDEXES etc, and then you go ahead and serialize enabled shit simply by stuffing all
        // the bits in order, instead of setting the enabled bits based on BOXINDEX. WHERE IS THE FUCKING LOGIC IN THIS, FUCKWADS.
        // Serialize the boxes in the order we delivered them, until multiwii retards fix their shit
        junk = 0;
 8010084:	2300      	movs	r3, #0
 8010086:	62fb      	str	r3, [r7, #44]	; 0x2c
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 8010088:	4b5b      	ldr	r3, [pc, #364]	; (80101f8 <evtMspReceive+0x980>)
 801008a:	78db      	ldrb	r3, [r3, #3]
 801008c:	005a      	lsls	r2, r3, #1
 801008e:	4b5a      	ldr	r3, [pc, #360]	; (80101f8 <evtMspReceive+0x980>)
 8010090:	791b      	ldrb	r3, [r3, #4]
 8010092:	009b      	lsls	r3, r3, #2
 8010094:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 8010096:	4b58      	ldr	r3, [pc, #352]	; (80101f8 <evtMspReceive+0x980>)
 8010098:	799b      	ldrb	r3, [r3, #6]
 801009a:	00db      	lsls	r3, r3, #3
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 801009c:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 801009e:	4b56      	ldr	r3, [pc, #344]	; (80101f8 <evtMspReceive+0x980>)
 80100a0:	795b      	ldrb	r3, [r3, #5]
 80100a2:	015b      	lsls	r3, r3, #5
 80100a4:	431a      	orrs	r2, r3
 80100a6:	4b54      	ldr	r3, [pc, #336]	; (80101f8 <evtMspReceive+0x980>)
 80100a8:	7a5b      	ldrb	r3, [r3, #9]
 80100aa:	019b      	lsls	r3, r3, #6
 80100ac:	431a      	orrs	r2, r3
 80100ae:	4b58      	ldr	r3, [pc, #352]	; (8010210 <evtMspReceive+0x998>)
 80100b0:	79db      	ldrb	r3, [r3, #7]
 80100b2:	01db      	lsls	r3, r3, #7
 80100b4:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 80100b6:	4b56      	ldr	r3, [pc, #344]	; (8010210 <evtMspReceive+0x998>)
 80100b8:	7a1b      	ldrb	r3, [r3, #8]
 80100ba:	021b      	lsls	r3, r3, #8
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 80100bc:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 80100be:	4b54      	ldr	r3, [pc, #336]	; (8010210 <evtMspReceive+0x998>)
 80100c0:	7a5b      	ldrb	r3, [r3, #9]
 80100c2:	025b      	lsls	r3, r3, #9
 80100c4:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 80100c6:	4b4c      	ldr	r3, [pc, #304]	; (80101f8 <evtMspReceive+0x980>)
 80100c8:	79db      	ldrb	r3, [r3, #7]
 80100ca:	029b      	lsls	r3, r3, #10
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 80100cc:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 80100ce:	4b4a      	ldr	r3, [pc, #296]	; (80101f8 <evtMspReceive+0x980>)
 80100d0:	7a1b      	ldrb	r3, [r3, #8]
 80100d2:	02db      	lsls	r3, r3, #11
 80100d4:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 80100d6:	4b48      	ldr	r3, [pc, #288]	; (80101f8 <evtMspReceive+0x980>)
 80100d8:	7d1b      	ldrb	r3, [r3, #20]
 80100da:	061b      	lsls	r3, r3, #24
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 80100dc:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 80100de:	4b46      	ldr	r3, [pc, #280]	; (80101f8 <evtMspReceive+0x980>)
 80100e0:	7a9b      	ldrb	r3, [r3, #10]
 80100e2:	031b      	lsls	r3, r3, #12
 80100e4:	431a      	orrs	r2, r3
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 80100e6:	4b4a      	ldr	r3, [pc, #296]	; (8010210 <evtMspReceive+0x998>)
 80100e8:	7b5b      	ldrb	r3, [r3, #13]
 80100ea:	035b      	lsls	r3, r3, #13
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 80100ec:	431a      	orrs	r2, r3
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 80100ee:	4b48      	ldr	r3, [pc, #288]	; (8010210 <evtMspReceive+0x998>)
 80100f0:	7b9b      	ldrb	r3, [r3, #14]
 80100f2:	039b      	lsls	r3, r3, #14
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 80100f4:	431a      	orrs	r2, r3
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 80100f6:	4b46      	ldr	r3, [pc, #280]	; (8010210 <evtMspReceive+0x998>)
 80100f8:	7c1b      	ldrb	r3, [r3, #16]
 80100fa:	041b      	lsls	r3, r3, #16
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 80100fc:	431a      	orrs	r2, r3
                rcOptions[BOXVARIO] << BOXVARIO |
 80100fe:	4b44      	ldr	r3, [pc, #272]	; (8010210 <evtMspReceive+0x998>)
 8010100:	791b      	ldrb	r3, [r3, #4]
 8010102:	011b      	lsls	r3, r3, #4
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 8010104:	431a      	orrs	r2, r3
                rcOptions[BOXCALIB] << BOXCALIB |
 8010106:	4b42      	ldr	r3, [pc, #264]	; (8010210 <evtMspReceive+0x998>)
 8010108:	7c5b      	ldrb	r3, [r3, #17]
 801010a:	045b      	lsls	r3, r3, #17
                rcOptions[BOXVARIO] << BOXVARIO |
 801010c:	431a      	orrs	r2, r3
                rcOptions[BOXGOV] << BOXGOV |
 801010e:	4b40      	ldr	r3, [pc, #256]	; (8010210 <evtMspReceive+0x998>)
 8010110:	7c9b      	ldrb	r3, [r3, #18]
 8010112:	049b      	lsls	r3, r3, #18
                rcOptions[BOXCALIB] << BOXCALIB |
 8010114:	431a      	orrs	r2, r3
                rcOptions[BOXOSD] << BOXOSD |
 8010116:	4b3e      	ldr	r3, [pc, #248]	; (8010210 <evtMspReceive+0x998>)
 8010118:	7cdb      	ldrb	r3, [r3, #19]
 801011a:	04db      	lsls	r3, r3, #19
                rcOptions[BOXGOV] << BOXGOV |
 801011c:	431a      	orrs	r2, r3
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 801011e:	4b3c      	ldr	r3, [pc, #240]	; (8010210 <evtMspReceive+0x998>)
 8010120:	7d1b      	ldrb	r3, [r3, #20]
 8010122:	051b      	lsls	r3, r3, #20
                rcOptions[BOXOSD] << BOXOSD |
 8010124:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 8010126:	4b3a      	ldr	r3, [pc, #232]	; (8010210 <evtMspReceive+0x998>)
 8010128:	7d5b      	ldrb	r3, [r3, #21]
 801012a:	055b      	lsls	r3, r3, #21
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 801012c:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 801012e:	4b38      	ldr	r3, [pc, #224]	; (8010210 <evtMspReceive+0x998>)
 8010130:	7d9b      	ldrb	r3, [r3, #22]
 8010132:	059b      	lsls	r3, r3, #22
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 8010134:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 8010136:	4b36      	ldr	r3, [pc, #216]	; (8010210 <evtMspReceive+0x998>)
 8010138:	7ddb      	ldrb	r3, [r3, #23]
 801013a:	05db      	lsls	r3, r3, #23
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 801013c:	4313      	orrs	r3, r2
                f.ARMED << BOXARM;
 801013e:	4a2e      	ldr	r2, [pc, #184]	; (80101f8 <evtMspReceive+0x980>)
 8010140:	7852      	ldrb	r2, [r2, #1]
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 8010142:	4313      	orrs	r3, r2
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 8010144:	613b      	str	r3, [r7, #16]
        for (i = 0; i < numberBoxItems; i++) {
 8010146:	2300      	movs	r3, #0
 8010148:	637b      	str	r3, [r7, #52]	; 0x34
 801014a:	e018      	b.n	801017e <evtMspReceive+0x906>
            int flag = (tmp & (1 << availableBoxes[i]));
 801014c:	4a31      	ldr	r2, [pc, #196]	; (8010214 <evtMspReceive+0x99c>)
 801014e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010150:	4413      	add	r3, r2
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	461a      	mov	r2, r3
 8010156:	2301      	movs	r3, #1
 8010158:	4093      	lsls	r3, r2
 801015a:	461a      	mov	r2, r3
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	4013      	ands	r3, r2
 8010160:	60fb      	str	r3, [r7, #12]
            if (flag)
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d007      	beq.n	8010178 <evtMspReceive+0x900>
                junk |= 1 << i;
 8010168:	2201      	movs	r2, #1
 801016a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801016c:	fa02 f303 	lsl.w	r3, r2, r3
 8010170:	461a      	mov	r2, r3
 8010172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010174:	4313      	orrs	r3, r2
 8010176:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = 0; i < numberBoxItems; i++) {
 8010178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801017a:	3301      	adds	r3, #1
 801017c:	637b      	str	r3, [r7, #52]	; 0x34
 801017e:	4b26      	ldr	r3, [pc, #152]	; (8010218 <evtMspReceive+0x9a0>)
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	461a      	mov	r2, r3
 8010184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010186:	4293      	cmp	r3, r2
 8010188:	d3e0      	bcc.n	801014c <evtMspReceive+0x8d4>
        }
        _Serialize32(p_port, junk);
 801018a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801018c:	69b8      	ldr	r0, [r7, #24]
 801018e:	f7ff f95a 	bl	800f446 <_Serialize32>
        _Serialize8(p_port, mcfg.current_profile);
 8010192:	4b1a      	ldr	r3, [pc, #104]	; (80101fc <evtMspReceive+0x984>)
 8010194:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8010198:	4619      	mov	r1, r3
 801019a:	69b8      	ldr	r0, [r7, #24]
 801019c:	f7ff f918 	bl	800f3d0 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 11);
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80101a6:	230b      	movs	r3, #11
 80101a8:	6839      	ldr	r1, [r7, #0]
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f007 fb4a 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 80101b0:	f001 b961 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_RAW_IMU:
        // Retarded hack until multiwiidorks start using real units for sensor data
        if (acc_1G > 1024) {
 80101b4:	4b19      	ldr	r3, [pc, #100]	; (801021c <evtMspReceive+0x9a4>)
 80101b6:	881b      	ldrh	r3, [r3, #0]
 80101b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80101bc:	d916      	bls.n	80101ec <evtMspReceive+0x974>
            for (i = 0; i < 3; i++)
 80101be:	2300      	movs	r3, #0
 80101c0:	637b      	str	r3, [r7, #52]	; 0x34
 80101c2:	e00f      	b.n	80101e4 <evtMspReceive+0x96c>
                _Serialize16(p_port, accSmooth[i] / 8);
 80101c4:	4a16      	ldr	r2, [pc, #88]	; (8010220 <evtMspReceive+0x9a8>)
 80101c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	da00      	bge.n	80101d2 <evtMspReceive+0x95a>
 80101d0:	3307      	adds	r3, #7
 80101d2:	10db      	asrs	r3, r3, #3
 80101d4:	b21b      	sxth	r3, r3
 80101d6:	4619      	mov	r1, r3
 80101d8:	69b8      	ldr	r0, [r7, #24]
 80101da:	f7ff f911 	bl	800f400 <_Serialize16>
            for (i = 0; i < 3; i++)
 80101de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101e0:	3301      	adds	r3, #1
 80101e2:	637b      	str	r3, [r7, #52]	; 0x34
 80101e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101e6:	2b02      	cmp	r3, #2
 80101e8:	d9ec      	bls.n	80101c4 <evtMspReceive+0x94c>
 80101ea:	e029      	b.n	8010240 <evtMspReceive+0x9c8>
        } else {
            for (i = 0; i < 3; i++)
 80101ec:	2300      	movs	r3, #0
 80101ee:	637b      	str	r3, [r7, #52]	; 0x34
 80101f0:	e023      	b.n	801023a <evtMspReceive+0x9c2>
 80101f2:	bf00      	nop
 80101f4:	200014a8 	.word	0x200014a8
 80101f8:	20001628 	.word	0x20001628
 80101fc:	200007ac 	.word	0x200007ac
 8010200:	200019bc 	.word	0x200019bc
 8010204:	c000000c 	.word	0xc000000c
 8010208:	20001648 	.word	0x20001648
 801020c:	200017d0 	.word	0x200017d0
 8010210:	200016c8 	.word	0x200016c8
 8010214:	20001c0c 	.word	0x20001c0c
 8010218:	20001c25 	.word	0x20001c25
 801021c:	2000005a 	.word	0x2000005a
 8010220:	200013b8 	.word	0x200013b8
                _Serialize16(p_port, accSmooth[i]);
 8010224:	4ab5      	ldr	r2, [pc, #724]	; (80104fc <evtMspReceive+0xc84>)
 8010226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010228:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801022c:	4619      	mov	r1, r3
 801022e:	69b8      	ldr	r0, [r7, #24]
 8010230:	f7ff f8e6 	bl	800f400 <_Serialize16>
            for (i = 0; i < 3; i++)
 8010234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010236:	3301      	adds	r3, #1
 8010238:	637b      	str	r3, [r7, #52]	; 0x34
 801023a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801023c:	2b02      	cmp	r3, #2
 801023e:	d9f1      	bls.n	8010224 <evtMspReceive+0x9ac>
        }
        for (i = 0; i < 3; i++)
 8010240:	2300      	movs	r3, #0
 8010242:	637b      	str	r3, [r7, #52]	; 0x34
 8010244:	e00a      	b.n	801025c <evtMspReceive+0x9e4>
            _Serialize16(p_port, gyroData[i]);
 8010246:	4aae      	ldr	r2, [pc, #696]	; (8010500 <evtMspReceive+0xc88>)
 8010248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801024a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801024e:	4619      	mov	r1, r3
 8010250:	69b8      	ldr	r0, [r7, #24]
 8010252:	f7ff f8d5 	bl	800f400 <_Serialize16>
        for (i = 0; i < 3; i++)
 8010256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010258:	3301      	adds	r3, #1
 801025a:	637b      	str	r3, [r7, #52]	; 0x34
 801025c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801025e:	2b02      	cmp	r3, #2
 8010260:	d9f1      	bls.n	8010246 <evtMspReceive+0x9ce>
        for (i = 0; i < 3; i++)
 8010262:	2300      	movs	r3, #0
 8010264:	637b      	str	r3, [r7, #52]	; 0x34
 8010266:	e00a      	b.n	801027e <evtMspReceive+0xa06>
            _Serialize16(p_port, magADC[i]);
 8010268:	4aa6      	ldr	r2, [pc, #664]	; (8010504 <evtMspReceive+0xc8c>)
 801026a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801026c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010270:	4619      	mov	r1, r3
 8010272:	69b8      	ldr	r0, [r7, #24]
 8010274:	f7ff f8c4 	bl	800f400 <_Serialize16>
        for (i = 0; i < 3; i++)
 8010278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801027a:	3301      	adds	r3, #1
 801027c:	637b      	str	r3, [r7, #52]	; 0x34
 801027e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010280:	2b02      	cmp	r3, #2
 8010282:	d9f1      	bls.n	8010268 <evtMspReceive+0x9f0>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 18);
 8010284:	69bb      	ldr	r3, [r7, #24]
 8010286:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801028a:	2312      	movs	r3, #18
 801028c:	6839      	ldr	r1, [r7, #0]
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f007 fad8 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010294:	f001 b8ef 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_SERVO:
        _SerializeStruct(p_port, (uint8_t *)&servo, 16);
 8010298:	2210      	movs	r2, #16
 801029a:	499b      	ldr	r1, [pc, #620]	; (8010508 <evtMspReceive+0xc90>)
 801029c:	69b8      	ldr	r0, [r7, #24]
 801029e:	f7ff f902 	bl	800f4a6 <_SerializeStruct>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 80102a2:	69bb      	ldr	r3, [r7, #24]
 80102a4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80102a8:	2310      	movs	r3, #16
 80102aa:	6839      	ldr	r1, [r7, #0]
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f007 fac9 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 80102b2:	f001 b8e0 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 80102b6:	2300      	movs	r3, #0
 80102b8:	637b      	str	r3, [r7, #52]	; 0x34
 80102ba:	e049      	b.n	8010350 <evtMspReceive+0xad8>
            _Serialize16(p_port, cfg.servoConf[i].min);
 80102bc:	4993      	ldr	r1, [pc, #588]	; (801050c <evtMspReceive+0xc94>)
 80102be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102c0:	4613      	mov	r3, r2
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	4413      	add	r3, r2
 80102c6:	005b      	lsls	r3, r3, #1
 80102c8:	440b      	add	r3, r1
 80102ca:	33b8      	adds	r3, #184	; 0xb8
 80102cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80102d0:	4619      	mov	r1, r3
 80102d2:	69b8      	ldr	r0, [r7, #24]
 80102d4:	f7ff f894 	bl	800f400 <_Serialize16>
            _Serialize16(p_port, cfg.servoConf[i].max);
 80102d8:	498c      	ldr	r1, [pc, #560]	; (801050c <evtMspReceive+0xc94>)
 80102da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102dc:	4613      	mov	r3, r2
 80102de:	009b      	lsls	r3, r3, #2
 80102e0:	4413      	add	r3, r2
 80102e2:	005b      	lsls	r3, r3, #1
 80102e4:	440b      	add	r3, r1
 80102e6:	33ba      	adds	r3, #186	; 0xba
 80102e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80102ec:	4619      	mov	r1, r3
 80102ee:	69b8      	ldr	r0, [r7, #24]
 80102f0:	f7ff f886 	bl	800f400 <_Serialize16>
            _Serialize16(p_port, cfg.servoConf[i].middle);
 80102f4:	4985      	ldr	r1, [pc, #532]	; (801050c <evtMspReceive+0xc94>)
 80102f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102f8:	4613      	mov	r3, r2
 80102fa:	009b      	lsls	r3, r3, #2
 80102fc:	4413      	add	r3, r2
 80102fe:	005b      	lsls	r3, r3, #1
 8010300:	440b      	add	r3, r1
 8010302:	33bc      	adds	r3, #188	; 0xbc
 8010304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010308:	4619      	mov	r1, r3
 801030a:	69b8      	ldr	r0, [r7, #24]
 801030c:	f7ff f878 	bl	800f400 <_Serialize16>
            _Serialize8(p_port, cfg.servoConf[i].rate);
 8010310:	497e      	ldr	r1, [pc, #504]	; (801050c <evtMspReceive+0xc94>)
 8010312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010314:	4613      	mov	r3, r2
 8010316:	009b      	lsls	r3, r3, #2
 8010318:	4413      	add	r3, r2
 801031a:	005b      	lsls	r3, r3, #1
 801031c:	440b      	add	r3, r1
 801031e:	33be      	adds	r3, #190	; 0xbe
 8010320:	f993 3000 	ldrsb.w	r3, [r3]
 8010324:	b2db      	uxtb	r3, r3
 8010326:	4619      	mov	r1, r3
 8010328:	69b8      	ldr	r0, [r7, #24]
 801032a:	f7ff f851 	bl	800f3d0 <_Serialize8>
            _Serialize16(p_port, cfg.servoConf[i].direction);
 801032e:	4977      	ldr	r1, [pc, #476]	; (801050c <evtMspReceive+0xc94>)
 8010330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010332:	4613      	mov	r3, r2
 8010334:	009b      	lsls	r3, r3, #2
 8010336:	4413      	add	r3, r2
 8010338:	005b      	lsls	r3, r3, #1
 801033a:	440b      	add	r3, r1
 801033c:	33c0      	adds	r3, #192	; 0xc0
 801033e:	881b      	ldrh	r3, [r3, #0]
 8010340:	b21b      	sxth	r3, r3
 8010342:	4619      	mov	r1, r3
 8010344:	69b8      	ldr	r0, [r7, #24]
 8010346:	f7ff f85b 	bl	800f400 <_Serialize16>
        for (i = 0; i < MAX_SERVOS; i++) {
 801034a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801034c:	3301      	adds	r3, #1
 801034e:	637b      	str	r3, [r7, #52]	; 0x34
 8010350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010352:	2b07      	cmp	r3, #7
 8010354:	d9b2      	bls.n	80102bc <evtMspReceive+0xa44>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, MAX_SERVOS * 9);
 8010356:	69bb      	ldr	r3, [r7, #24]
 8010358:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801035c:	2348      	movs	r3, #72	; 0x48
 801035e:	6839      	ldr	r1, [r7, #0]
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f007 fa6f 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010366:	f001 b886 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_SET_SERVO_CONF:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 801036a:	2300      	movs	r3, #0
 801036c:	2200      	movs	r2, #0
 801036e:	6839      	ldr	r1, [r7, #0]
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f007 fa67 	bl	8017844 <pifMsp_MakeAnswer>
        for (i = 0; i < MAX_SERVOS; i++) {
 8010376:	2300      	movs	r3, #0
 8010378:	637b      	str	r3, [r7, #52]	; 0x34
 801037a:	e04d      	b.n	8010418 <evtMspReceive+0xba0>
            cfg.servoConf[i].min = _Read16(p_port);
 801037c:	69b8      	ldr	r0, [r7, #24]
 801037e:	f7fe ffe1 	bl	800f344 <_Read16>
 8010382:	4603      	mov	r3, r0
 8010384:	b218      	sxth	r0, r3
 8010386:	4961      	ldr	r1, [pc, #388]	; (801050c <evtMspReceive+0xc94>)
 8010388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801038a:	4613      	mov	r3, r2
 801038c:	009b      	lsls	r3, r3, #2
 801038e:	4413      	add	r3, r2
 8010390:	005b      	lsls	r3, r3, #1
 8010392:	440b      	add	r3, r1
 8010394:	33b8      	adds	r3, #184	; 0xb8
 8010396:	4602      	mov	r2, r0
 8010398:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = _Read16(p_port);
 801039a:	69b8      	ldr	r0, [r7, #24]
 801039c:	f7fe ffd2 	bl	800f344 <_Read16>
 80103a0:	4603      	mov	r3, r0
 80103a2:	b218      	sxth	r0, r3
 80103a4:	4959      	ldr	r1, [pc, #356]	; (801050c <evtMspReceive+0xc94>)
 80103a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103a8:	4613      	mov	r3, r2
 80103aa:	009b      	lsls	r3, r3, #2
 80103ac:	4413      	add	r3, r2
 80103ae:	005b      	lsls	r3, r3, #1
 80103b0:	440b      	add	r3, r1
 80103b2:	33ba      	adds	r3, #186	; 0xba
 80103b4:	4602      	mov	r2, r0
 80103b6:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = _Read16(p_port);
 80103b8:	69b8      	ldr	r0, [r7, #24]
 80103ba:	f7fe ffc3 	bl	800f344 <_Read16>
 80103be:	4603      	mov	r3, r0
 80103c0:	b218      	sxth	r0, r3
 80103c2:	4952      	ldr	r1, [pc, #328]	; (801050c <evtMspReceive+0xc94>)
 80103c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103c6:	4613      	mov	r3, r2
 80103c8:	009b      	lsls	r3, r3, #2
 80103ca:	4413      	add	r3, r2
 80103cc:	005b      	lsls	r3, r3, #1
 80103ce:	440b      	add	r3, r1
 80103d0:	33bc      	adds	r3, #188	; 0xbc
 80103d2:	4602      	mov	r2, r0
 80103d4:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = _Read8(p_port);
 80103d6:	69b8      	ldr	r0, [r7, #24]
 80103d8:	f7fe ffa0 	bl	800f31c <_Read8>
 80103dc:	4603      	mov	r3, r0
 80103de:	b258      	sxtb	r0, r3
 80103e0:	494a      	ldr	r1, [pc, #296]	; (801050c <evtMspReceive+0xc94>)
 80103e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103e4:	4613      	mov	r3, r2
 80103e6:	009b      	lsls	r3, r3, #2
 80103e8:	4413      	add	r3, r2
 80103ea:	005b      	lsls	r3, r3, #1
 80103ec:	440b      	add	r3, r1
 80103ee:	33be      	adds	r3, #190	; 0xbe
 80103f0:	4602      	mov	r2, r0
 80103f2:	701a      	strb	r2, [r3, #0]
            cfg.servoConf[i].direction = _Read16(p_port);
 80103f4:	69b8      	ldr	r0, [r7, #24]
 80103f6:	f7fe ffa5 	bl	800f344 <_Read16>
 80103fa:	4603      	mov	r3, r0
 80103fc:	4618      	mov	r0, r3
 80103fe:	4943      	ldr	r1, [pc, #268]	; (801050c <evtMspReceive+0xc94>)
 8010400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010402:	4613      	mov	r3, r2
 8010404:	009b      	lsls	r3, r3, #2
 8010406:	4413      	add	r3, r2
 8010408:	005b      	lsls	r3, r3, #1
 801040a:	440b      	add	r3, r1
 801040c:	33c0      	adds	r3, #192	; 0xc0
 801040e:	4602      	mov	r2, r0
 8010410:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8010412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010414:	3301      	adds	r3, #1
 8010416:	637b      	str	r3, [r7, #52]	; 0x34
 8010418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801041a:	2b07      	cmp	r3, #7
 801041c:	d9ae      	bls.n	801037c <evtMspReceive+0xb04>
        }
        break;
 801041e:	f001 b82a 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8010422:	2300      	movs	r3, #0
 8010424:	637b      	str	r3, [r7, #52]	; 0x34
 8010426:	e05c      	b.n	80104e2 <evtMspReceive+0xc6a>
            _Serialize8(p_port, mcfg.customServoMixer[i].targetChannel);
 8010428:	4939      	ldr	r1, [pc, #228]	; (8010510 <evtMspReceive+0xc98>)
 801042a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801042c:	4613      	mov	r3, r2
 801042e:	00db      	lsls	r3, r3, #3
 8010430:	1a9b      	subs	r3, r3, r2
 8010432:	440b      	add	r3, r1
 8010434:	33d0      	adds	r3, #208	; 0xd0
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	4619      	mov	r1, r3
 801043a:	69b8      	ldr	r0, [r7, #24]
 801043c:	f7fe ffc8 	bl	800f3d0 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].fromChannel);
 8010440:	4933      	ldr	r1, [pc, #204]	; (8010510 <evtMspReceive+0xc98>)
 8010442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010444:	4613      	mov	r3, r2
 8010446:	00db      	lsls	r3, r3, #3
 8010448:	1a9b      	subs	r3, r3, r2
 801044a:	440b      	add	r3, r1
 801044c:	33d1      	adds	r3, #209	; 0xd1
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	4619      	mov	r1, r3
 8010452:	69b8      	ldr	r0, [r7, #24]
 8010454:	f7fe ffbc 	bl	800f3d0 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].rate);
 8010458:	492d      	ldr	r1, [pc, #180]	; (8010510 <evtMspReceive+0xc98>)
 801045a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801045c:	4613      	mov	r3, r2
 801045e:	00db      	lsls	r3, r3, #3
 8010460:	1a9b      	subs	r3, r3, r2
 8010462:	440b      	add	r3, r1
 8010464:	33d2      	adds	r3, #210	; 0xd2
 8010466:	f993 3000 	ldrsb.w	r3, [r3]
 801046a:	b2db      	uxtb	r3, r3
 801046c:	4619      	mov	r1, r3
 801046e:	69b8      	ldr	r0, [r7, #24]
 8010470:	f7fe ffae 	bl	800f3d0 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].speed);
 8010474:	4926      	ldr	r1, [pc, #152]	; (8010510 <evtMspReceive+0xc98>)
 8010476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010478:	4613      	mov	r3, r2
 801047a:	00db      	lsls	r3, r3, #3
 801047c:	1a9b      	subs	r3, r3, r2
 801047e:	440b      	add	r3, r1
 8010480:	33d3      	adds	r3, #211	; 0xd3
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	4619      	mov	r1, r3
 8010486:	69b8      	ldr	r0, [r7, #24]
 8010488:	f7fe ffa2 	bl	800f3d0 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].min);
 801048c:	4920      	ldr	r1, [pc, #128]	; (8010510 <evtMspReceive+0xc98>)
 801048e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010490:	4613      	mov	r3, r2
 8010492:	00db      	lsls	r3, r3, #3
 8010494:	1a9b      	subs	r3, r3, r2
 8010496:	440b      	add	r3, r1
 8010498:	33d4      	adds	r3, #212	; 0xd4
 801049a:	f993 3000 	ldrsb.w	r3, [r3]
 801049e:	b2db      	uxtb	r3, r3
 80104a0:	4619      	mov	r1, r3
 80104a2:	69b8      	ldr	r0, [r7, #24]
 80104a4:	f7fe ff94 	bl	800f3d0 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].max);
 80104a8:	4919      	ldr	r1, [pc, #100]	; (8010510 <evtMspReceive+0xc98>)
 80104aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104ac:	4613      	mov	r3, r2
 80104ae:	00db      	lsls	r3, r3, #3
 80104b0:	1a9b      	subs	r3, r3, r2
 80104b2:	440b      	add	r3, r1
 80104b4:	33d5      	adds	r3, #213	; 0xd5
 80104b6:	f993 3000 	ldrsb.w	r3, [r3]
 80104ba:	b2db      	uxtb	r3, r3
 80104bc:	4619      	mov	r1, r3
 80104be:	69b8      	ldr	r0, [r7, #24]
 80104c0:	f7fe ff86 	bl	800f3d0 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].box);
 80104c4:	4912      	ldr	r1, [pc, #72]	; (8010510 <evtMspReceive+0xc98>)
 80104c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104c8:	4613      	mov	r3, r2
 80104ca:	00db      	lsls	r3, r3, #3
 80104cc:	1a9b      	subs	r3, r3, r2
 80104ce:	440b      	add	r3, r1
 80104d0:	33d6      	adds	r3, #214	; 0xd6
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	4619      	mov	r1, r3
 80104d6:	69b8      	ldr	r0, [r7, #24]
 80104d8:	f7fe ff7a 	bl	800f3d0 <_Serialize8>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80104dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104de:	3301      	adds	r3, #1
 80104e0:	637b      	str	r3, [r7, #52]	; 0x34
 80104e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104e4:	2b0f      	cmp	r3, #15
 80104e6:	d99f      	bls.n	8010428 <evtMspReceive+0xbb0>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, MAX_SERVO_RULES * sizeof(servoMixer_t));
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80104ee:	2370      	movs	r3, #112	; 0x70
 80104f0:	6839      	ldr	r1, [r7, #0]
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f007 f9a6 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 80104f8:	f000 bfbd 	b.w	8011476 <evtMspReceive+0x1bfe>
 80104fc:	200013b8 	.word	0x200013b8
 8010500:	20001420 	.word	0x20001420
 8010504:	200013c0 	.word	0x200013c0
 8010508:	20000040 	.word	0x20000040
 801050c:	20000d18 	.word	0x20000d18
 8010510:	200007ac 	.word	0x200007ac

    case MSP_SET_SERVOMIX_CONF:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010514:	2300      	movs	r3, #0
 8010516:	2200      	movs	r2, #0
 8010518:	6839      	ldr	r1, [r7, #0]
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f007 f992 	bl	8017844 <pifMsp_MakeAnswer>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8010520:	2300      	movs	r3, #0
 8010522:	637b      	str	r3, [r7, #52]	; 0x34
 8010524:	e064      	b.n	80105f0 <evtMspReceive+0xd78>
            mcfg.customServoMixer[i].targetChannel = _Read8(p_port);
 8010526:	69b8      	ldr	r0, [r7, #24]
 8010528:	f7fe fef8 	bl	800f31c <_Read8>
 801052c:	4603      	mov	r3, r0
 801052e:	4618      	mov	r0, r3
 8010530:	49b1      	ldr	r1, [pc, #708]	; (80107f8 <evtMspReceive+0xf80>)
 8010532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010534:	4613      	mov	r3, r2
 8010536:	00db      	lsls	r3, r3, #3
 8010538:	1a9b      	subs	r3, r3, r2
 801053a:	440b      	add	r3, r1
 801053c:	33d0      	adds	r3, #208	; 0xd0
 801053e:	4602      	mov	r2, r0
 8010540:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = _Read8(p_port);
 8010542:	69b8      	ldr	r0, [r7, #24]
 8010544:	f7fe feea 	bl	800f31c <_Read8>
 8010548:	4603      	mov	r3, r0
 801054a:	4618      	mov	r0, r3
 801054c:	49aa      	ldr	r1, [pc, #680]	; (80107f8 <evtMspReceive+0xf80>)
 801054e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010550:	4613      	mov	r3, r2
 8010552:	00db      	lsls	r3, r3, #3
 8010554:	1a9b      	subs	r3, r3, r2
 8010556:	440b      	add	r3, r1
 8010558:	33d1      	adds	r3, #209	; 0xd1
 801055a:	4602      	mov	r2, r0
 801055c:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = _Read8(p_port);
 801055e:	69b8      	ldr	r0, [r7, #24]
 8010560:	f7fe fedc 	bl	800f31c <_Read8>
 8010564:	4603      	mov	r3, r0
 8010566:	b258      	sxtb	r0, r3
 8010568:	49a3      	ldr	r1, [pc, #652]	; (80107f8 <evtMspReceive+0xf80>)
 801056a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801056c:	4613      	mov	r3, r2
 801056e:	00db      	lsls	r3, r3, #3
 8010570:	1a9b      	subs	r3, r3, r2
 8010572:	440b      	add	r3, r1
 8010574:	33d2      	adds	r3, #210	; 0xd2
 8010576:	4602      	mov	r2, r0
 8010578:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = _Read8(p_port);
 801057a:	69b8      	ldr	r0, [r7, #24]
 801057c:	f7fe fece 	bl	800f31c <_Read8>
 8010580:	4603      	mov	r3, r0
 8010582:	4618      	mov	r0, r3
 8010584:	499c      	ldr	r1, [pc, #624]	; (80107f8 <evtMspReceive+0xf80>)
 8010586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010588:	4613      	mov	r3, r2
 801058a:	00db      	lsls	r3, r3, #3
 801058c:	1a9b      	subs	r3, r3, r2
 801058e:	440b      	add	r3, r1
 8010590:	33d3      	adds	r3, #211	; 0xd3
 8010592:	4602      	mov	r2, r0
 8010594:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = _Read8(p_port);
 8010596:	69b8      	ldr	r0, [r7, #24]
 8010598:	f7fe fec0 	bl	800f31c <_Read8>
 801059c:	4603      	mov	r3, r0
 801059e:	b258      	sxtb	r0, r3
 80105a0:	4995      	ldr	r1, [pc, #596]	; (80107f8 <evtMspReceive+0xf80>)
 80105a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105a4:	4613      	mov	r3, r2
 80105a6:	00db      	lsls	r3, r3, #3
 80105a8:	1a9b      	subs	r3, r3, r2
 80105aa:	440b      	add	r3, r1
 80105ac:	33d4      	adds	r3, #212	; 0xd4
 80105ae:	4602      	mov	r2, r0
 80105b0:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = _Read8(p_port);
 80105b2:	69b8      	ldr	r0, [r7, #24]
 80105b4:	f7fe feb2 	bl	800f31c <_Read8>
 80105b8:	4603      	mov	r3, r0
 80105ba:	b258      	sxtb	r0, r3
 80105bc:	498e      	ldr	r1, [pc, #568]	; (80107f8 <evtMspReceive+0xf80>)
 80105be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105c0:	4613      	mov	r3, r2
 80105c2:	00db      	lsls	r3, r3, #3
 80105c4:	1a9b      	subs	r3, r3, r2
 80105c6:	440b      	add	r3, r1
 80105c8:	33d5      	adds	r3, #213	; 0xd5
 80105ca:	4602      	mov	r2, r0
 80105cc:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = _Read8(p_port);
 80105ce:	69b8      	ldr	r0, [r7, #24]
 80105d0:	f7fe fea4 	bl	800f31c <_Read8>
 80105d4:	4603      	mov	r3, r0
 80105d6:	4618      	mov	r0, r3
 80105d8:	4987      	ldr	r1, [pc, #540]	; (80107f8 <evtMspReceive+0xf80>)
 80105da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105dc:	4613      	mov	r3, r2
 80105de:	00db      	lsls	r3, r3, #3
 80105e0:	1a9b      	subs	r3, r3, r2
 80105e2:	440b      	add	r3, r1
 80105e4:	33d6      	adds	r3, #214	; 0xd6
 80105e6:	4602      	mov	r2, r0
 80105e8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80105ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ec:	3301      	adds	r3, #1
 80105ee:	637b      	str	r3, [r7, #52]	; 0x34
 80105f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f2:	2b0f      	cmp	r3, #15
 80105f4:	d997      	bls.n	8010526 <evtMspReceive+0xcae>
        }
        loadCustomServoMixer();
 80105f6:	f7fa fb8d 	bl	800ad14 <loadCustomServoMixer>
        break;
 80105fa:	f000 bf3c 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_FW_CONFIG:
        _Serialize8(p_port, mcfg.fw_althold_dir);
 80105fe:	4b7e      	ldr	r3, [pc, #504]	; (80107f8 <evtMspReceive+0xf80>)
 8010600:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 8010604:	b2db      	uxtb	r3, r3
 8010606:	4619      	mov	r1, r3
 8010608:	69b8      	ldr	r0, [r7, #24]
 801060a:	f7fe fee1 	bl	800f3d0 <_Serialize8>
        // _Serialize8(p_port, cfg.fw_vector_thrust); // Future Gui setting?
        _Serialize16(p_port, cfg.fw_gps_maxcorr);
 801060e:	4b7b      	ldr	r3, [pc, #492]	; (80107fc <evtMspReceive+0xf84>)
 8010610:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8010614:	4619      	mov	r1, r3
 8010616:	69b8      	ldr	r0, [r7, #24]
 8010618:	f7fe fef2 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, cfg.fw_gps_rudder);
 801061c:	4b77      	ldr	r3, [pc, #476]	; (80107fc <evtMspReceive+0xf84>)
 801061e:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8010622:	4619      	mov	r1, r3
 8010624:	69b8      	ldr	r0, [r7, #24]
 8010626:	f7fe feeb 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, cfg.fw_gps_maxclimb);
 801062a:	4b74      	ldr	r3, [pc, #464]	; (80107fc <evtMspReceive+0xf84>)
 801062c:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8010630:	4619      	mov	r1, r3
 8010632:	69b8      	ldr	r0, [r7, #24]
 8010634:	f7fe fee4 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, cfg.fw_gps_maxdive);
 8010638:	4b70      	ldr	r3, [pc, #448]	; (80107fc <evtMspReceive+0xf84>)
 801063a:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 801063e:	4619      	mov	r1, r3
 8010640:	69b8      	ldr	r0, [r7, #24]
 8010642:	f7fe fedd 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, cfg.fw_climb_throttle);
 8010646:	4b6d      	ldr	r3, [pc, #436]	; (80107fc <evtMspReceive+0xf84>)
 8010648:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 801064c:	b21b      	sxth	r3, r3
 801064e:	4619      	mov	r1, r3
 8010650:	69b8      	ldr	r0, [r7, #24]
 8010652:	f7fe fed5 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, cfg.fw_cruise_throttle);
 8010656:	4b69      	ldr	r3, [pc, #420]	; (80107fc <evtMspReceive+0xf84>)
 8010658:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 801065c:	b21b      	sxth	r3, r3
 801065e:	4619      	mov	r1, r3
 8010660:	69b8      	ldr	r0, [r7, #24]
 8010662:	f7fe fecd 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, cfg.fw_idle_throttle);
 8010666:	4b65      	ldr	r3, [pc, #404]	; (80107fc <evtMspReceive+0xf84>)
 8010668:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 801066c:	b21b      	sxth	r3, r3
 801066e:	4619      	mov	r1, r3
 8010670:	69b8      	ldr	r0, [r7, #24]
 8010672:	f7fe fec5 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, cfg.fw_scaler_throttle);
 8010676:	4b61      	ldr	r3, [pc, #388]	; (80107fc <evtMspReceive+0xf84>)
 8010678:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 801067c:	b21b      	sxth	r3, r3
 801067e:	4619      	mov	r1, r3
 8010680:	69b8      	ldr	r0, [r7, #24]
 8010682:	f7fe febd 	bl	800f400 <_Serialize16>
        _Serialize32(p_port, cfg.fw_roll_comp); // Float is Not compatible with Gui. Change to _Serialize8
 8010686:	4b5d      	ldr	r3, [pc, #372]	; (80107fc <evtMspReceive+0xf84>)
 8010688:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 801068c:	4619      	mov	r1, r3
 801068e:	69b8      	ldr	r0, [r7, #24]
 8010690:	f7fe fed9 	bl	800f446 <_Serialize32>
        _Serialize8(p_port, cfg.fw_rth_alt);
 8010694:	4b59      	ldr	r3, [pc, #356]	; (80107fc <evtMspReceive+0xf84>)
 8010696:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 801069a:	4619      	mov	r1, r3
 801069c:	69b8      	ldr	r0, [r7, #24]
 801069e:	f7fe fe97 	bl	800f3d0 <_Serialize8>
        // next added for future use
        _Serialize32(p_port, 0);
 80106a2:	2100      	movs	r1, #0
 80106a4:	69b8      	ldr	r0, [r7, #24]
 80106a6:	f7fe fece 	bl	800f446 <_Serialize32>
        _Serialize32(p_port, 0);
 80106aa:	2100      	movs	r1, #0
 80106ac:	69b8      	ldr	r0, [r7, #24]
 80106ae:	f7fe feca 	bl	800f446 <_Serialize32>
        _Serialize32(p_port, 0);
 80106b2:	2100      	movs	r1, #0
 80106b4:	69b8      	ldr	r0, [r7, #24]
 80106b6:	f7fe fec6 	bl	800f446 <_Serialize32>
        _Serialize32(p_port, 0);
 80106ba:	2100      	movs	r1, #0
 80106bc:	69b8      	ldr	r0, [r7, #24]
 80106be:	f7fe fec2 	bl	800f446 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 38);
 80106c2:	69bb      	ldr	r3, [r7, #24]
 80106c4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80106c8:	2326      	movs	r3, #38	; 0x26
 80106ca:	6839      	ldr	r1, [r7, #0]
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f007 f8b9 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 80106d2:	f000 bed0 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_SET_FW_CONFIG:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 80106d6:	2300      	movs	r3, #0
 80106d8:	2200      	movs	r2, #0
 80106da:	6839      	ldr	r1, [r7, #0]
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f007 f8b1 	bl	8017844 <pifMsp_MakeAnswer>
        mcfg.fw_althold_dir = _Read8(p_port);
 80106e2:	69b8      	ldr	r0, [r7, #24]
 80106e4:	f7fe fe1a 	bl	800f31c <_Read8>
 80106e8:	4603      	mov	r3, r0
 80106ea:	b25a      	sxtb	r2, r3
 80106ec:	4b42      	ldr	r3, [pc, #264]	; (80107f8 <evtMspReceive+0xf80>)
 80106ee:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        // cfg.fw_vector_thrust = _Read8(p_port); // Future Gui setting?
        cfg.fw_gps_maxcorr = _Read16(p_port);
 80106f2:	69b8      	ldr	r0, [r7, #24]
 80106f4:	f7fe fe26 	bl	800f344 <_Read16>
 80106f8:	4603      	mov	r3, r0
 80106fa:	b21a      	sxth	r2, r3
 80106fc:	4b3f      	ldr	r3, [pc, #252]	; (80107fc <evtMspReceive+0xf84>)
 80106fe:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
        cfg.fw_gps_rudder = _Read16(p_port);
 8010702:	69b8      	ldr	r0, [r7, #24]
 8010704:	f7fe fe1e 	bl	800f344 <_Read16>
 8010708:	4603      	mov	r3, r0
 801070a:	b21a      	sxth	r2, r3
 801070c:	4b3b      	ldr	r3, [pc, #236]	; (80107fc <evtMspReceive+0xf84>)
 801070e:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
        cfg.fw_gps_maxclimb = _Read16(p_port);
 8010712:	69b8      	ldr	r0, [r7, #24]
 8010714:	f7fe fe16 	bl	800f344 <_Read16>
 8010718:	4603      	mov	r3, r0
 801071a:	b21a      	sxth	r2, r3
 801071c:	4b37      	ldr	r3, [pc, #220]	; (80107fc <evtMspReceive+0xf84>)
 801071e:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        cfg.fw_gps_maxdive = _Read16(p_port);
 8010722:	69b8      	ldr	r0, [r7, #24]
 8010724:	f7fe fe0e 	bl	800f344 <_Read16>
 8010728:	4603      	mov	r3, r0
 801072a:	b21a      	sxth	r2, r3
 801072c:	4b33      	ldr	r3, [pc, #204]	; (80107fc <evtMspReceive+0xf84>)
 801072e:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
        cfg.fw_climb_throttle = _Read16(p_port);
 8010732:	69b8      	ldr	r0, [r7, #24]
 8010734:	f7fe fe06 	bl	800f344 <_Read16>
 8010738:	4603      	mov	r3, r0
 801073a:	461a      	mov	r2, r3
 801073c:	4b2f      	ldr	r3, [pc, #188]	; (80107fc <evtMspReceive+0xf84>)
 801073e:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
        cfg.fw_cruise_throttle = _Read16(p_port);
 8010742:	69b8      	ldr	r0, [r7, #24]
 8010744:	f7fe fdfe 	bl	800f344 <_Read16>
 8010748:	4603      	mov	r3, r0
 801074a:	461a      	mov	r2, r3
 801074c:	4b2b      	ldr	r3, [pc, #172]	; (80107fc <evtMspReceive+0xf84>)
 801074e:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
        cfg.fw_idle_throttle = _Read16(p_port);
 8010752:	69b8      	ldr	r0, [r7, #24]
 8010754:	f7fe fdf6 	bl	800f344 <_Read16>
 8010758:	4603      	mov	r3, r0
 801075a:	461a      	mov	r2, r3
 801075c:	4b27      	ldr	r3, [pc, #156]	; (80107fc <evtMspReceive+0xf84>)
 801075e:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
        cfg.fw_scaler_throttle = _Read16(p_port);
 8010762:	69b8      	ldr	r0, [r7, #24]
 8010764:	f7fe fdee 	bl	800f344 <_Read16>
 8010768:	4603      	mov	r3, r0
 801076a:	461a      	mov	r2, r3
 801076c:	4b23      	ldr	r3, [pc, #140]	; (80107fc <evtMspReceive+0xf84>)
 801076e:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
        //cfg.fw_gps_maxdive = _Read32(p_port);// Wrong when using float in MSP!... Change to _Read8
        _Read32(p_port); // Just read and skip
 8010772:	69b8      	ldr	r0, [r7, #24]
 8010774:	f7fe fe03 	bl	800f37e <_Read32>
        cfg.fw_rth_alt = _Read8(p_port);
 8010778:	69b8      	ldr	r0, [r7, #24]
 801077a:	f7fe fdcf 	bl	800f31c <_Read8>
 801077e:	4603      	mov	r3, r0
 8010780:	461a      	mov	r2, r3
 8010782:	4b1e      	ldr	r3, [pc, #120]	; (80107fc <evtMspReceive+0xf84>)
 8010784:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
        // next added for future use
        _Read32(p_port);
 8010788:	69b8      	ldr	r0, [r7, #24]
 801078a:	f7fe fdf8 	bl	800f37e <_Read32>
        _Read32(p_port);
 801078e:	69b8      	ldr	r0, [r7, #24]
 8010790:	f7fe fdf5 	bl	800f37e <_Read32>
        _Read32(p_port);
 8010794:	69b8      	ldr	r0, [r7, #24]
 8010796:	f7fe fdf2 	bl	800f37e <_Read32>
        _Read32(p_port);
 801079a:	69b8      	ldr	r0, [r7, #24]
 801079c:	f7fe fdef 	bl	800f37e <_Read32>
        break;
 80107a0:	f000 be69 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_MOTOR:
        _SerializeStruct(p_port, (uint8_t *)&motor, 16);
 80107a4:	2210      	movs	r2, #16
 80107a6:	4916      	ldr	r1, [pc, #88]	; (8010800 <evtMspReceive+0xf88>)
 80107a8:	69b8      	ldr	r0, [r7, #24]
 80107aa:	f7fe fe7c 	bl	800f4a6 <_SerializeStruct>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 80107ae:	69bb      	ldr	r3, [r7, #24]
 80107b0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80107b4:	2310      	movs	r3, #16
 80107b6:	6839      	ldr	r1, [r7, #0]
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f007 f843 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 80107be:	f000 be5a 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_RC:
        for (i = 0; i < 8; i++)
 80107c2:	2300      	movs	r3, #0
 80107c4:	637b      	str	r3, [r7, #52]	; 0x34
 80107c6:	e00a      	b.n	80107de <evtMspReceive+0xf66>
            _Serialize16(p_port, rcData[i]);
 80107c8:	4a0e      	ldr	r2, [pc, #56]	; (8010804 <evtMspReceive+0xf8c>)
 80107ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80107d0:	4619      	mov	r1, r3
 80107d2:	69b8      	ldr	r0, [r7, #24]
 80107d4:	f7fe fe14 	bl	800f400 <_Serialize16>
        for (i = 0; i < 8; i++)
 80107d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107da:	3301      	adds	r3, #1
 80107dc:	637b      	str	r3, [r7, #52]	; 0x34
 80107de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e0:	2b07      	cmp	r3, #7
 80107e2:	d9f1      	bls.n	80107c8 <evtMspReceive+0xf50>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 80107e4:	69bb      	ldr	r3, [r7, #24]
 80107e6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80107ea:	2310      	movs	r3, #16
 80107ec:	6839      	ldr	r1, [r7, #0]
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f007 f828 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 80107f4:	f000 be3f 	b.w	8011476 <evtMspReceive+0x1bfe>
 80107f8:	200007ac 	.word	0x200007ac
 80107fc:	20000d18 	.word	0x20000d18
 8010800:	20001490 	.word	0x20001490
 8010804:	20001660 	.word	0x20001660

    case MSP_RAW_GPS:
        _Serialize8(p_port, f.GPS_FIX);
 8010808:	4b96      	ldr	r3, [pc, #600]	; (8010a64 <evtMspReceive+0x11ec>)
 801080a:	7adb      	ldrb	r3, [r3, #11]
 801080c:	4619      	mov	r1, r3
 801080e:	69b8      	ldr	r0, [r7, #24]
 8010810:	f7fe fdde 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, GPS_numSat);
 8010814:	4b94      	ldr	r3, [pc, #592]	; (8010a68 <evtMspReceive+0x11f0>)
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	4619      	mov	r1, r3
 801081a:	69b8      	ldr	r0, [r7, #24]
 801081c:	f7fe fdd8 	bl	800f3d0 <_Serialize8>
        _Serialize32(p_port, GPS_coord[LAT]);
 8010820:	4b92      	ldr	r3, [pc, #584]	; (8010a6c <evtMspReceive+0x11f4>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4619      	mov	r1, r3
 8010826:	69b8      	ldr	r0, [r7, #24]
 8010828:	f7fe fe0d 	bl	800f446 <_Serialize32>
        _Serialize32(p_port, GPS_coord[LON]);
 801082c:	4b8f      	ldr	r3, [pc, #572]	; (8010a6c <evtMspReceive+0x11f4>)
 801082e:	685b      	ldr	r3, [r3, #4]
 8010830:	4619      	mov	r1, r3
 8010832:	69b8      	ldr	r0, [r7, #24]
 8010834:	f7fe fe07 	bl	800f446 <_Serialize32>
        _Serialize16(p_port, GPS_altitude);
 8010838:	4b8d      	ldr	r3, [pc, #564]	; (8010a70 <evtMspReceive+0x11f8>)
 801083a:	881b      	ldrh	r3, [r3, #0]
 801083c:	b21b      	sxth	r3, r3
 801083e:	4619      	mov	r1, r3
 8010840:	69b8      	ldr	r0, [r7, #24]
 8010842:	f7fe fddd 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, GPS_speed);
 8010846:	4b8b      	ldr	r3, [pc, #556]	; (8010a74 <evtMspReceive+0x11fc>)
 8010848:	881b      	ldrh	r3, [r3, #0]
 801084a:	b21b      	sxth	r3, r3
 801084c:	4619      	mov	r1, r3
 801084e:	69b8      	ldr	r0, [r7, #24]
 8010850:	f7fe fdd6 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, GPS_ground_course);
 8010854:	4b88      	ldr	r3, [pc, #544]	; (8010a78 <evtMspReceive+0x1200>)
 8010856:	881b      	ldrh	r3, [r3, #0]
 8010858:	b21b      	sxth	r3, r3
 801085a:	4619      	mov	r1, r3
 801085c:	69b8      	ldr	r0, [r7, #24]
 801085e:	f7fe fdcf 	bl	800f400 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 8010862:	69bb      	ldr	r3, [r7, #24]
 8010864:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010868:	2310      	movs	r3, #16
 801086a:	6839      	ldr	r1, [r7, #0]
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f006 ffe9 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010872:	f000 be00 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_COMP_GPS:
        _Serialize16(p_port, GPS_distanceToHome);
 8010876:	4b81      	ldr	r3, [pc, #516]	; (8010a7c <evtMspReceive+0x1204>)
 8010878:	881b      	ldrh	r3, [r3, #0]
 801087a:	b21b      	sxth	r3, r3
 801087c:	4619      	mov	r1, r3
 801087e:	69b8      	ldr	r0, [r7, #24]
 8010880:	f7fe fdbe 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, GPS_directionToHome);
 8010884:	4b7e      	ldr	r3, [pc, #504]	; (8010a80 <evtMspReceive+0x1208>)
 8010886:	f9b3 3000 	ldrsh.w	r3, [r3]
 801088a:	4619      	mov	r1, r3
 801088c:	69b8      	ldr	r0, [r7, #24]
 801088e:	f7fe fdb7 	bl	800f400 <_Serialize16>
        _Serialize8(p_port, GPS_update & 1);
 8010892:	4b7c      	ldr	r3, [pc, #496]	; (8010a84 <evtMspReceive+0x120c>)
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	f003 0301 	and.w	r3, r3, #1
 801089a:	b2db      	uxtb	r3, r3
 801089c:	4619      	mov	r1, r3
 801089e:	69b8      	ldr	r0, [r7, #24]
 80108a0:	f7fe fd96 	bl	800f3d0 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 5);
 80108a4:	69bb      	ldr	r3, [r7, #24]
 80108a6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80108aa:	2305      	movs	r3, #5
 80108ac:	6839      	ldr	r1, [r7, #0]
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f006 ffc8 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 80108b4:	f000 bddf 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_ATTITUDE:
        for (i = 0; i < 2; i++)
 80108b8:	2300      	movs	r3, #0
 80108ba:	637b      	str	r3, [r7, #52]	; 0x34
 80108bc:	e00a      	b.n	80108d4 <evtMspReceive+0x105c>
            _Serialize16(p_port, angle[i]);
 80108be:	4a72      	ldr	r2, [pc, #456]	; (8010a88 <evtMspReceive+0x1210>)
 80108c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80108c6:	4619      	mov	r1, r3
 80108c8:	69b8      	ldr	r0, [r7, #24]
 80108ca:	f7fe fd99 	bl	800f400 <_Serialize16>
        for (i = 0; i < 2; i++)
 80108ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108d0:	3301      	adds	r3, #1
 80108d2:	637b      	str	r3, [r7, #52]	; 0x34
 80108d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108d6:	2b01      	cmp	r3, #1
 80108d8:	d9f1      	bls.n	80108be <evtMspReceive+0x1046>
        _Serialize16(p_port, heading);
 80108da:	4b6c      	ldr	r3, [pc, #432]	; (8010a8c <evtMspReceive+0x1214>)
 80108dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80108e0:	4619      	mov	r1, r3
 80108e2:	69b8      	ldr	r0, [r7, #24]
 80108e4:	f7fe fd8c 	bl	800f400 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 6);
 80108e8:	69bb      	ldr	r3, [r7, #24]
 80108ea:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80108ee:	2306      	movs	r3, #6
 80108f0:	6839      	ldr	r1, [r7, #0]
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f006 ffa6 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 80108f8:	f000 bdbd 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_ALTITUDE:
        _Serialize32(p_port, EstAlt);
 80108fc:	4b64      	ldr	r3, [pc, #400]	; (8010a90 <evtMspReceive+0x1218>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	4619      	mov	r1, r3
 8010902:	69b8      	ldr	r0, [r7, #24]
 8010904:	f7fe fd9f 	bl	800f446 <_Serialize32>
        _Serialize16(p_port, vario);
 8010908:	4b62      	ldr	r3, [pc, #392]	; (8010a94 <evtMspReceive+0x121c>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	b21b      	sxth	r3, r3
 801090e:	4619      	mov	r1, r3
 8010910:	69b8      	ldr	r0, [r7, #24]
 8010912:	f7fe fd75 	bl	800f400 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 6);
 8010916:	69bb      	ldr	r3, [r7, #24]
 8010918:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801091c:	2306      	movs	r3, #6
 801091e:	6839      	ldr	r1, [r7, #0]
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f006 ff8f 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010926:	f000 bda6 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_ANALOG:
        _Serialize8(p_port, (uint8_t)constrain((int16_t)vbat, 0, 255));
 801092a:	4b5b      	ldr	r3, [pc, #364]	; (8010a98 <evtMspReceive+0x1220>)
 801092c:	881b      	ldrh	r3, [r3, #0]
 801092e:	b21b      	sxth	r3, r3
 8010930:	22ff      	movs	r2, #255	; 0xff
 8010932:	2100      	movs	r1, #0
 8010934:	4618      	mov	r0, r3
 8010936:	f7f3 f92b 	bl	8003b90 <constrain>
 801093a:	4603      	mov	r3, r0
 801093c:	b2db      	uxtb	r3, r3
 801093e:	4619      	mov	r1, r3
 8010940:	69b8      	ldr	r0, [r7, #24]
 8010942:	f7fe fd45 	bl	800f3d0 <_Serialize8>
        _Serialize16(p_port, (uint16_t)constrain(mAhdrawn, 0, 0xFFFF)); // milliamphours drawn from battery
 8010946:	4b55      	ldr	r3, [pc, #340]	; (8010a9c <evtMspReceive+0x1224>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801094e:	2100      	movs	r1, #0
 8010950:	4618      	mov	r0, r3
 8010952:	f7f3 f91d 	bl	8003b90 <constrain>
 8010956:	4603      	mov	r3, r0
 8010958:	b21b      	sxth	r3, r3
 801095a:	4619      	mov	r1, r3
 801095c:	69b8      	ldr	r0, [r7, #24]
 801095e:	f7fe fd4f 	bl	800f400 <_Serialize16>
//        _Serialize16(p_port, rssi);
        _Serialize16(p_port, pif_performance._use_rate * 10);
 8010962:	4b4f      	ldr	r3, [pc, #316]	; (8010aa0 <evtMspReceive+0x1228>)
 8010964:	791b      	ldrb	r3, [r3, #4]
 8010966:	b29b      	uxth	r3, r3
 8010968:	461a      	mov	r2, r3
 801096a:	0092      	lsls	r2, r2, #2
 801096c:	4413      	add	r3, r2
 801096e:	005b      	lsls	r3, r3, #1
 8010970:	b29b      	uxth	r3, r3
 8010972:	b21b      	sxth	r3, r3
 8010974:	4619      	mov	r1, r3
 8010976:	69b8      	ldr	r0, [r7, #24]
 8010978:	f7fe fd42 	bl	800f400 <_Serialize16>
        if (mcfg.multiwiicurrentoutput)
 801097c:	4b49      	ldr	r3, [pc, #292]	; (8010aa4 <evtMspReceive+0x122c>)
 801097e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8010982:	2b00      	cmp	r3, #0
 8010984:	d016      	beq.n	80109b4 <evtMspReceive+0x113c>
            _Serialize16(p_port, (uint16_t)constrain((abs(amperage) * 10), 0, 0xFFFF)); // send amperage in 0.001 A steps
 8010986:	4b48      	ldr	r3, [pc, #288]	; (8010aa8 <evtMspReceive+0x1230>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801098e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8010992:	4613      	mov	r3, r2
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	4413      	add	r3, r2
 8010998:	005b      	lsls	r3, r3, #1
 801099a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801099e:	2100      	movs	r1, #0
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7f3 f8f5 	bl	8003b90 <constrain>
 80109a6:	4603      	mov	r3, r0
 80109a8:	b21b      	sxth	r3, r3
 80109aa:	4619      	mov	r1, r3
 80109ac:	69b8      	ldr	r0, [r7, #24]
 80109ae:	f7fe fd27 	bl	800f400 <_Serialize16>
 80109b2:	e010      	b.n	80109d6 <evtMspReceive+0x115e>
        else
            _Serialize16(p_port, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
 80109b4:	4b3c      	ldr	r3, [pc, #240]	; (8010aa8 <evtMspReceive+0x1230>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	bfb8      	it	lt
 80109bc:	425b      	neglt	r3, r3
 80109be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80109c2:	2100      	movs	r1, #0
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7f3 f8e3 	bl	8003b90 <constrain>
 80109ca:	4603      	mov	r3, r0
 80109cc:	b21b      	sxth	r3, r3
 80109ce:	4619      	mov	r1, r3
 80109d0:	69b8      	ldr	r0, [r7, #24]
 80109d2:	f7fe fd15 	bl	800f400 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 7);
 80109d6:	69bb      	ldr	r3, [r7, #24]
 80109d8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80109dc:	2307      	movs	r3, #7
 80109de:	6839      	ldr	r1, [r7, #0]
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f006 ff2f 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 80109e6:	f000 bd46 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_RC_TUNING:
        _Serialize8(p_port, cfg.rcRate8);
 80109ea:	4b30      	ldr	r3, [pc, #192]	; (8010aac <evtMspReceive+0x1234>)
 80109ec:	7fdb      	ldrb	r3, [r3, #31]
 80109ee:	4619      	mov	r1, r3
 80109f0:	69b8      	ldr	r0, [r7, #24]
 80109f2:	f7fe fced 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, cfg.rcExpo8);
 80109f6:	4b2d      	ldr	r3, [pc, #180]	; (8010aac <evtMspReceive+0x1234>)
 80109f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80109fc:	4619      	mov	r1, r3
 80109fe:	69b8      	ldr	r0, [r7, #24]
 8010a00:	f7fe fce6 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, cfg.rollPitchRate[0]); // here for legacy support
 8010a04:	4b29      	ldr	r3, [pc, #164]	; (8010aac <evtMspReceive+0x1234>)
 8010a06:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	69b8      	ldr	r0, [r7, #24]
 8010a0e:	f7fe fcdf 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, cfg.yawRate);
 8010a12:	4b26      	ldr	r3, [pc, #152]	; (8010aac <evtMspReceive+0x1234>)
 8010a14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010a18:	4619      	mov	r1, r3
 8010a1a:	69b8      	ldr	r0, [r7, #24]
 8010a1c:	f7fe fcd8 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, cfg.dynThrPID);
 8010a20:	4b22      	ldr	r3, [pc, #136]	; (8010aac <evtMspReceive+0x1234>)
 8010a22:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8010a26:	4619      	mov	r1, r3
 8010a28:	69b8      	ldr	r0, [r7, #24]
 8010a2a:	f7fe fcd1 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, cfg.thrMid8);
 8010a2e:	4b1f      	ldr	r3, [pc, #124]	; (8010aac <evtMspReceive+0x1234>)
 8010a30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010a34:	4619      	mov	r1, r3
 8010a36:	69b8      	ldr	r0, [r7, #24]
 8010a38:	f7fe fcca 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, cfg.thrExpo8);
 8010a3c:	4b1b      	ldr	r3, [pc, #108]	; (8010aac <evtMspReceive+0x1234>)
 8010a3e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010a42:	4619      	mov	r1, r3
 8010a44:	69b8      	ldr	r0, [r7, #24]
 8010a46:	f7fe fcc3 	bl	800f3d0 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 7);
 8010a4a:	69bb      	ldr	r3, [r7, #24]
 8010a4c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010a50:	2307      	movs	r3, #7
 8010a52:	6839      	ldr	r1, [r7, #0]
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f006 fef5 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010a5a:	f000 bd0c 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_PID:
        for (i = 0; i < PIDITEMS; i++) {
 8010a5e:	2300      	movs	r3, #0
 8010a60:	637b      	str	r3, [r7, #52]	; 0x34
 8010a62:	e05c      	b.n	8010b1e <evtMspReceive+0x12a6>
 8010a64:	20001628 	.word	0x20001628
 8010a68:	2000170c 	.word	0x2000170c
 8010a6c:	200016ec 	.word	0x200016ec
 8010a70:	20001712 	.word	0x20001712
 8010a74:	20001714 	.word	0x20001714
 8010a78:	2000171e 	.word	0x2000171e
 8010a7c:	2000170e 	.word	0x2000170e
 8010a80:	20001710 	.word	0x20001710
 8010a84:	20001716 	.word	0x20001716
 8010a88:	20001430 	.word	0x20001430
 8010a8c:	200019ba 	.word	0x200019ba
 8010a90:	200013f4 	.word	0x200013f4
 8010a94:	2000140c 	.word	0x2000140c
 8010a98:	2000164c 	.word	0x2000164c
 8010a9c:	20001654 	.word	0x20001654
 8010aa0:	20001f0c 	.word	0x20001f0c
 8010aa4:	200007ac 	.word	0x200007ac
 8010aa8:	20001650 	.word	0x20001650
 8010aac:	20000d18 	.word	0x20000d18
            _Serialize8(p_port, cfg.P8[i]);
 8010ab0:	4aa7      	ldr	r2, [pc, #668]	; (8010d50 <evtMspReceive+0x14d8>)
 8010ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ab4:	4413      	add	r3, r2
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	4619      	mov	r1, r3
 8010abc:	69b8      	ldr	r0, [r7, #24]
 8010abe:	f7fe fc87 	bl	800f3d0 <_Serialize8>
            _Serialize8(p_port, cfg.I8[i]);
 8010ac2:	4aa3      	ldr	r2, [pc, #652]	; (8010d50 <evtMspReceive+0x14d8>)
 8010ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac6:	4413      	add	r3, r2
 8010ac8:	330b      	adds	r3, #11
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	4619      	mov	r1, r3
 8010ace:	69b8      	ldr	r0, [r7, #24]
 8010ad0:	f7fe fc7e 	bl	800f3d0 <_Serialize8>
            _Serialize8(p_port, cfg.D8[i]);
 8010ad4:	4a9e      	ldr	r2, [pc, #632]	; (8010d50 <evtMspReceive+0x14d8>)
 8010ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad8:	4413      	add	r3, r2
 8010ada:	3315      	adds	r3, #21
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	4619      	mov	r1, r3
 8010ae0:	69b8      	ldr	r0, [r7, #24]
 8010ae2:	f7fe fc75 	bl	800f3d0 <_Serialize8>
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 8010ae6:	4a9a      	ldr	r2, [pc, #616]	; (8010d50 <evtMspReceive+0x14d8>)
 8010ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aea:	4413      	add	r3, r2
 8010aec:	3301      	adds	r3, #1
 8010aee:	781b      	ldrb	r3, [r3, #0]
 8010af0:	4618      	mov	r0, r3
 8010af2:	4a97      	ldr	r2, [pc, #604]	; (8010d50 <evtMspReceive+0x14d8>)
 8010af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010af6:	4413      	add	r3, r2
 8010af8:	330b      	adds	r3, #11
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	4619      	mov	r1, r3
 8010afe:	4a94      	ldr	r2, [pc, #592]	; (8010d50 <evtMspReceive+0x14d8>)
 8010b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b02:	4413      	add	r3, r2
 8010b04:	3315      	adds	r3, #21
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	9301      	str	r3, [sp, #4]
 8010b0a:	9100      	str	r1, [sp, #0]
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b10:	4990      	ldr	r1, [pc, #576]	; (8010d54 <evtMspReceive+0x14dc>)
 8010b12:	2002      	movs	r0, #2
 8010b14:	f002 fe94 	bl	8013840 <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 8010b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b1a:	3301      	adds	r3, #1
 8010b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8010b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b20:	2b09      	cmp	r3, #9
 8010b22:	d9c5      	bls.n	8010ab0 <evtMspReceive+0x1238>
#endif
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 3 * PIDITEMS);
 8010b24:	69bb      	ldr	r3, [r7, #24]
 8010b26:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010b2a:	231e      	movs	r3, #30
 8010b2c:	6839      	ldr	r1, [r7, #0]
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f006 fe88 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010b34:	f000 bc9f 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_PIDNAMES:
        _SerializeNames(p_port, pidnames);
 8010b38:	4987      	ldr	r1, [pc, #540]	; (8010d58 <evtMspReceive+0x14e0>)
 8010b3a:	69b8      	ldr	r0, [r7, #24]
 8010b3c:	f7fe fcd3 	bl	800f4e6 <_SerializeNames>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, sizeof(pidnames) - 1);
 8010b40:	69bb      	ldr	r3, [r7, #24]
 8010b42:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010b46:	232f      	movs	r3, #47	; 0x2f
 8010b48:	6839      	ldr	r1, [r7, #0]
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f006 fe7a 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010b50:	f000 bc91 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_BOX:
        for (i = 0; i < numberBoxItems; i++)
 8010b54:	2300      	movs	r3, #0
 8010b56:	637b      	str	r3, [r7, #52]	; 0x34
 8010b58:	e010      	b.n	8010b7c <evtMspReceive+0x1304>
            _Serialize16(p_port, cfg.activate[availableBoxes[i]]);
 8010b5a:	4a80      	ldr	r2, [pc, #512]	; (8010d5c <evtMspReceive+0x14e4>)
 8010b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b5e:	4413      	add	r3, r2
 8010b60:	781b      	ldrb	r3, [r3, #0]
 8010b62:	4a7b      	ldr	r2, [pc, #492]	; (8010d50 <evtMspReceive+0x14d8>)
 8010b64:	3312      	adds	r3, #18
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	4413      	add	r3, r2
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	b21b      	sxth	r3, r3
 8010b6e:	4619      	mov	r1, r3
 8010b70:	69b8      	ldr	r0, [r7, #24]
 8010b72:	f7fe fc45 	bl	800f400 <_Serialize16>
        for (i = 0; i < numberBoxItems; i++)
 8010b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b78:	3301      	adds	r3, #1
 8010b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8010b7c:	4b78      	ldr	r3, [pc, #480]	; (8010d60 <evtMspReceive+0x14e8>)
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	461a      	mov	r2, r3
 8010b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b84:	4293      	cmp	r3, r2
 8010b86:	d3e8      	bcc.n	8010b5a <evtMspReceive+0x12e2>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 2 * numberBoxItems);
 8010b88:	69bb      	ldr	r3, [r7, #24]
 8010b8a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010b8e:	4b74      	ldr	r3, [pc, #464]	; (8010d60 <evtMspReceive+0x14e8>)
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	b29b      	uxth	r3, r3
 8010b94:	005b      	lsls	r3, r3, #1
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	6839      	ldr	r1, [r7, #0]
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f006 fe52 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010ba0:	f000 bc69 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_BOXNAMES:
        tmp = _SerializeBoxNamesReply(p_port);
 8010ba4:	69b8      	ldr	r0, [r7, #24]
 8010ba6:	f7fe fcbf 	bl	800f528 <_SerializeBoxNamesReply>
 8010baa:	4603      	mov	r3, r0
 8010bac:	613b      	str	r3, [r7, #16]
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, tmp);
 8010bae:	69bb      	ldr	r3, [r7, #24]
 8010bb0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	b29b      	uxth	r3, r3
 8010bb8:	6839      	ldr	r1, [r7, #0]
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f006 fe42 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010bc0:	f000 bc59 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_BOXIDS:
        for (i = 0; i < numberBoxItems; i++) {
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8010bc8:	e028      	b.n	8010c1c <evtMspReceive+0x13a4>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 8010bca:	2300      	movs	r3, #0
 8010bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8010bce:	e01f      	b.n	8010c10 <evtMspReceive+0x1398>
                if (boxes[j].permanentId == availableBoxes[i]) {
 8010bd0:	4964      	ldr	r1, [pc, #400]	; (8010d64 <evtMspReceive+0x14ec>)
 8010bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bd4:	4613      	mov	r3, r2
 8010bd6:	005b      	lsls	r3, r3, #1
 8010bd8:	4413      	add	r3, r2
 8010bda:	009b      	lsls	r3, r3, #2
 8010bdc:	440b      	add	r3, r1
 8010bde:	3308      	adds	r3, #8
 8010be0:	781a      	ldrb	r2, [r3, #0]
 8010be2:	495e      	ldr	r1, [pc, #376]	; (8010d5c <evtMspReceive+0x14e4>)
 8010be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010be6:	440b      	add	r3, r1
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d10d      	bne.n	8010c0a <evtMspReceive+0x1392>
                    _Serialize8(p_port, boxes[j].permanentId);
 8010bee:	495d      	ldr	r1, [pc, #372]	; (8010d64 <evtMspReceive+0x14ec>)
 8010bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bf2:	4613      	mov	r3, r2
 8010bf4:	005b      	lsls	r3, r3, #1
 8010bf6:	4413      	add	r3, r2
 8010bf8:	009b      	lsls	r3, r3, #2
 8010bfa:	440b      	add	r3, r1
 8010bfc:	3308      	adds	r3, #8
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	4619      	mov	r1, r3
 8010c02:	69b8      	ldr	r0, [r7, #24]
 8010c04:	f7fe fbe4 	bl	800f3d0 <_Serialize8>
                    break;
 8010c08:	e005      	b.n	8010c16 <evtMspReceive+0x139e>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 8010c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0c:	3301      	adds	r3, #1
 8010c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8010c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c12:	2b18      	cmp	r3, #24
 8010c14:	d9dc      	bls.n	8010bd0 <evtMspReceive+0x1358>
        for (i = 0; i < numberBoxItems; i++) {
 8010c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c18:	3301      	adds	r3, #1
 8010c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8010c1c:	4b50      	ldr	r3, [pc, #320]	; (8010d60 <evtMspReceive+0x14e8>)
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	461a      	mov	r2, r3
 8010c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c24:	4293      	cmp	r3, r2
 8010c26:	d3d0      	bcc.n	8010bca <evtMspReceive+0x1352>
                }
            }
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, numberBoxItems);
 8010c28:	69bb      	ldr	r3, [r7, #24]
 8010c2a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010c2e:	4b4c      	ldr	r3, [pc, #304]	; (8010d60 <evtMspReceive+0x14e8>)
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	b29b      	uxth	r3, r3
 8010c34:	6839      	ldr	r1, [r7, #0]
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f006 fe04 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010c3c:	f000 bc1b 	b.w	8011476 <evtMspReceive+0x1bfe>

    case MSP_MISC:
        _Serialize16(p_port, mcfg.midrc);
 8010c40:	4b49      	ldr	r3, [pc, #292]	; (8010d68 <evtMspReceive+0x14f0>)
 8010c42:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8010c46:	b21b      	sxth	r3, r3
 8010c48:	4619      	mov	r1, r3
 8010c4a:	69b8      	ldr	r0, [r7, #24]
 8010c4c:	f7fe fbd8 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, mcfg.minthrottle);
 8010c50:	4b45      	ldr	r3, [pc, #276]	; (8010d68 <evtMspReceive+0x14f0>)
 8010c52:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8010c56:	b21b      	sxth	r3, r3
 8010c58:	4619      	mov	r1, r3
 8010c5a:	69b8      	ldr	r0, [r7, #24]
 8010c5c:	f7fe fbd0 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, mcfg.maxthrottle);
 8010c60:	4b41      	ldr	r3, [pc, #260]	; (8010d68 <evtMspReceive+0x14f0>)
 8010c62:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8010c66:	b21b      	sxth	r3, r3
 8010c68:	4619      	mov	r1, r3
 8010c6a:	69b8      	ldr	r0, [r7, #24]
 8010c6c:	f7fe fbc8 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, mcfg.mincommand);
 8010c70:	4b3d      	ldr	r3, [pc, #244]	; (8010d68 <evtMspReceive+0x14f0>)
 8010c72:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8010c76:	b21b      	sxth	r3, r3
 8010c78:	4619      	mov	r1, r3
 8010c7a:	69b8      	ldr	r0, [r7, #24]
 8010c7c:	f7fe fbc0 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, cfg.failsafe_throttle);
 8010c80:	4b33      	ldr	r3, [pc, #204]	; (8010d50 <evtMspReceive+0x14d8>)
 8010c82:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8010c86:	b21b      	sxth	r3, r3
 8010c88:	4619      	mov	r1, r3
 8010c8a:	69b8      	ldr	r0, [r7, #24]
 8010c8c:	f7fe fbb8 	bl	800f400 <_Serialize16>
        _Serialize8(p_port, mcfg.gps_type);
 8010c90:	4b35      	ldr	r3, [pc, #212]	; (8010d68 <evtMspReceive+0x14f0>)
 8010c92:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8010c96:	4619      	mov	r1, r3
 8010c98:	69b8      	ldr	r0, [r7, #24]
 8010c9a:	f7fe fb99 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, mcfg.gps_baudrate);
 8010c9e:	4b32      	ldr	r3, [pc, #200]	; (8010d68 <evtMspReceive+0x14f0>)
 8010ca0:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8010ca4:	b2db      	uxtb	r3, r3
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	69b8      	ldr	r0, [r7, #24]
 8010caa:	f7fe fb91 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, mcfg.gps_ubx_sbas);
 8010cae:	4b2e      	ldr	r3, [pc, #184]	; (8010d68 <evtMspReceive+0x14f0>)
 8010cb0:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8010cb4:	b2db      	uxtb	r3, r3
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	69b8      	ldr	r0, [r7, #24]
 8010cba:	f7fe fb89 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, mcfg.multiwiicurrentoutput);
 8010cbe:	4b2a      	ldr	r3, [pc, #168]	; (8010d68 <evtMspReceive+0x14f0>)
 8010cc0:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8010cc4:	4619      	mov	r1, r3
 8010cc6:	69b8      	ldr	r0, [r7, #24]
 8010cc8:	f7fe fb82 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, mcfg.rssi_aux_channel);
 8010ccc:	4b26      	ldr	r3, [pc, #152]	; (8010d68 <evtMspReceive+0x14f0>)
 8010cce:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	69b8      	ldr	r0, [r7, #24]
 8010cd6:	f7fe fb7b 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, 0);
 8010cda:	2100      	movs	r1, #0
 8010cdc:	69b8      	ldr	r0, [r7, #24]
 8010cde:	f7fe fb77 	bl	800f3d0 <_Serialize8>
        _Serialize16(p_port, cfg.mag_declination / 10); // TODO check this shit
 8010ce2:	4b1b      	ldr	r3, [pc, #108]	; (8010d50 <evtMspReceive+0x14d8>)
 8010ce4:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8010ce8:	4a20      	ldr	r2, [pc, #128]	; (8010d6c <evtMspReceive+0x14f4>)
 8010cea:	fb82 1203 	smull	r1, r2, r2, r3
 8010cee:	1092      	asrs	r2, r2, #2
 8010cf0:	17db      	asrs	r3, r3, #31
 8010cf2:	1ad3      	subs	r3, r2, r3
 8010cf4:	b21b      	sxth	r3, r3
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	69b8      	ldr	r0, [r7, #24]
 8010cfa:	f7fe fb81 	bl	800f400 <_Serialize16>
        _Serialize8(p_port, mcfg.vbatscale);
 8010cfe:	4b1a      	ldr	r3, [pc, #104]	; (8010d68 <evtMspReceive+0x14f0>)
 8010d00:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8010d04:	4619      	mov	r1, r3
 8010d06:	69b8      	ldr	r0, [r7, #24]
 8010d08:	f7fe fb62 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, mcfg.vbatmincellvoltage);
 8010d0c:	4b16      	ldr	r3, [pc, #88]	; (8010d68 <evtMspReceive+0x14f0>)
 8010d0e:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 8010d12:	4619      	mov	r1, r3
 8010d14:	69b8      	ldr	r0, [r7, #24]
 8010d16:	f7fe fb5b 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, mcfg.vbatmaxcellvoltage);
 8010d1a:	4b13      	ldr	r3, [pc, #76]	; (8010d68 <evtMspReceive+0x14f0>)
 8010d1c:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8010d20:	4619      	mov	r1, r3
 8010d22:	69b8      	ldr	r0, [r7, #24]
 8010d24:	f7fe fb54 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, mcfg.vbatwarningcellvoltage);
 8010d28:	4b0f      	ldr	r3, [pc, #60]	; (8010d68 <evtMspReceive+0x14f0>)
 8010d2a:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8010d2e:	4619      	mov	r1, r3
 8010d30:	69b8      	ldr	r0, [r7, #24]
 8010d32:	f7fe fb4d 	bl	800f3d0 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 2 * 6 + 4 + 2 + 4);
 8010d36:	69bb      	ldr	r3, [r7, #24]
 8010d38:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010d3c:	2316      	movs	r3, #22
 8010d3e:	6839      	ldr	r1, [r7, #0]
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f006 fd7f 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010d46:	e396      	b.n	8011476 <evtMspReceive+0x1bfe>

    case MSP_MOTOR_PINS:
        for (i = 0; i < 8; i++)
 8010d48:	2300      	movs	r3, #0
 8010d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8010d4c:	e01b      	b.n	8010d86 <evtMspReceive+0x150e>
 8010d4e:	bf00      	nop
 8010d50:	20000d18 	.word	0x20000d18
 8010d54:	080278f4 	.word	0x080278f4
 8010d58:	08029560 	.word	0x08029560
 8010d5c:	20001c0c 	.word	0x20001c0c
 8010d60:	20001c25 	.word	0x20001c25
 8010d64:	08029428 	.word	0x08029428
 8010d68:	200007ac 	.word	0x200007ac
 8010d6c:	66666667 	.word	0x66666667
            _Serialize8(p_port, i + 1);
 8010d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d72:	b2db      	uxtb	r3, r3
 8010d74:	3301      	adds	r3, #1
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	4619      	mov	r1, r3
 8010d7a:	69b8      	ldr	r0, [r7, #24]
 8010d7c:	f7fe fb28 	bl	800f3d0 <_Serialize8>
        for (i = 0; i < 8; i++)
 8010d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d82:	3301      	adds	r3, #1
 8010d84:	637b      	str	r3, [r7, #52]	; 0x34
 8010d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d88:	2b07      	cmp	r3, #7
 8010d8a:	d9f1      	bls.n	8010d70 <evtMspReceive+0x14f8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 8);
 8010d8c:	69bb      	ldr	r3, [r7, #24]
 8010d8e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010d92:	2308      	movs	r3, #8
 8010d94:	6839      	ldr	r1, [r7, #0]
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f006 fd54 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010d9c:	e36b      	b.n	8011476 <evtMspReceive+0x1bfe>

#ifdef GPS
    case MSP_WP:
        wp_no = _Read8(p_port);    // get the wp number
 8010d9e:	69b8      	ldr	r0, [r7, #24]
 8010da0:	f7fe fabc 	bl	800f31c <_Read8>
 8010da4:	4603      	mov	r3, r0
 8010da6:	75fb      	strb	r3, [r7, #23]
        if (wp_no == 0) {
 8010da8:	7dfb      	ldrb	r3, [r7, #23]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d106      	bne.n	8010dbc <evtMspReceive+0x1544>
            lat = GPS_home[LAT];
 8010dae:	4b9c      	ldr	r3, [pc, #624]	; (8011020 <evtMspReceive+0x17a8>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_home[LON];
 8010db4:	4b9a      	ldr	r3, [pc, #616]	; (8011020 <evtMspReceive+0x17a8>)
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	627b      	str	r3, [r7, #36]	; 0x24
 8010dba:	e008      	b.n	8010dce <evtMspReceive+0x1556>
        } else if (wp_no == 16) {
 8010dbc:	7dfb      	ldrb	r3, [r7, #23]
 8010dbe:	2b10      	cmp	r3, #16
 8010dc0:	d105      	bne.n	8010dce <evtMspReceive+0x1556>
            lat = GPS_hold[LAT];
 8010dc2:	4b98      	ldr	r3, [pc, #608]	; (8011024 <evtMspReceive+0x17ac>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_hold[LON];
 8010dc8:	4b96      	ldr	r3, [pc, #600]	; (8011024 <evtMspReceive+0x17ac>)
 8010dca:	685b      	ldr	r3, [r3, #4]
 8010dcc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        _Serialize8(p_port, wp_no);
 8010dce:	7dfb      	ldrb	r3, [r7, #23]
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	69b8      	ldr	r0, [r7, #24]
 8010dd4:	f7fe fafc 	bl	800f3d0 <_Serialize8>
        _Serialize32(p_port, lat);
 8010dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dda:	4619      	mov	r1, r3
 8010ddc:	69b8      	ldr	r0, [r7, #24]
 8010dde:	f7fe fb32 	bl	800f446 <_Serialize32>
        _Serialize32(p_port, lon);
 8010de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de4:	4619      	mov	r1, r3
 8010de6:	69b8      	ldr	r0, [r7, #24]
 8010de8:	f7fe fb2d 	bl	800f446 <_Serialize32>
        _Serialize32(p_port, AltHold);           // altitude (cm) will come here -- temporary implementation to test feature with apps
 8010dec:	4b8e      	ldr	r3, [pc, #568]	; (8011028 <evtMspReceive+0x17b0>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	4619      	mov	r1, r3
 8010df2:	69b8      	ldr	r0, [r7, #24]
 8010df4:	f7fe fb27 	bl	800f446 <_Serialize32>
        _Serialize16(p_port, 0);                 // heading  will come here (deg)
 8010df8:	2100      	movs	r1, #0
 8010dfa:	69b8      	ldr	r0, [r7, #24]
 8010dfc:	f7fe fb00 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, 0);                 // time to stay (ms) will come here
 8010e00:	2100      	movs	r1, #0
 8010e02:	69b8      	ldr	r0, [r7, #24]
 8010e04:	f7fe fafc 	bl	800f400 <_Serialize16>
        _Serialize8(p_port, 0);                  // nav flag will come here
 8010e08:	2100      	movs	r1, #0
 8010e0a:	69b8      	ldr	r0, [r7, #24]
 8010e0c:	f7fe fae0 	bl	800f3d0 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 18);
 8010e10:	69bb      	ldr	r3, [r7, #24]
 8010e12:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010e16:	2312      	movs	r3, #18
 8010e18:	6839      	ldr	r1, [r7, #0]
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f006 fd12 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010e20:	e329      	b.n	8011476 <evtMspReceive+0x1bfe>

    case MSP_SET_WP:
        wp_no = _Read8(p_port);    //get the wp number
 8010e22:	69b8      	ldr	r0, [r7, #24]
 8010e24:	f7fe fa7a 	bl	800f31c <_Read8>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	75fb      	strb	r3, [r7, #23]
        lat = _Read32(p_port);
 8010e2c:	69b8      	ldr	r0, [r7, #24]
 8010e2e:	f7fe faa6 	bl	800f37e <_Read32>
 8010e32:	4603      	mov	r3, r0
 8010e34:	62bb      	str	r3, [r7, #40]	; 0x28
        lon = _Read32(p_port);
 8010e36:	69b8      	ldr	r0, [r7, #24]
 8010e38:	f7fe faa1 	bl	800f37e <_Read32>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	627b      	str	r3, [r7, #36]	; 0x24
        alt = _Read32(p_port);     // to set altitude (cm)
 8010e40:	69b8      	ldr	r0, [r7, #24]
 8010e42:	f7fe fa9c 	bl	800f37e <_Read32>
 8010e46:	4603      	mov	r3, r0
 8010e48:	623b      	str	r3, [r7, #32]
        _Read16(p_port);           // future: to set heading (deg)
 8010e4a:	69b8      	ldr	r0, [r7, #24]
 8010e4c:	f7fe fa7a 	bl	800f344 <_Read16>
        _Read16(p_port);           // future: to set time to stay (ms)
 8010e50:	69b8      	ldr	r0, [r7, #24]
 8010e52:	f7fe fa77 	bl	800f344 <_Read16>
        _Read8(p_port);            // future: to set nav flag
 8010e56:	69b8      	ldr	r0, [r7, #24]
 8010e58:	f7fe fa60 	bl	800f31c <_Read8>
        if (wp_no == 0) {
 8010e5c:	7dfb      	ldrb	r3, [r7, #23]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d112      	bne.n	8010e88 <evtMspReceive+0x1610>
            GPS_home[LAT] = lat;
 8010e62:	4a6f      	ldr	r2, [pc, #444]	; (8011020 <evtMspReceive+0x17a8>)
 8010e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e66:	6013      	str	r3, [r2, #0]
            GPS_home[LON] = lon;
 8010e68:	4a6d      	ldr	r2, [pc, #436]	; (8011020 <evtMspReceive+0x17a8>)
 8010e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6c:	6053      	str	r3, [r2, #4]
            f.GPS_HOME_MODE = 0;        // with this flag, GPS_set_next_wp will be called in the next loop -- OK with SERIAL GPS / OK with I2C GPS
 8010e6e:	4b6f      	ldr	r3, [pc, #444]	; (801102c <evtMspReceive+0x17b4>)
 8010e70:	2200      	movs	r2, #0
 8010e72:	71da      	strb	r2, [r3, #7]
            f.GPS_FIX_HOME = 1;
 8010e74:	4b6d      	ldr	r3, [pc, #436]	; (801102c <evtMspReceive+0x17b4>)
 8010e76:	2201      	movs	r2, #1
 8010e78:	731a      	strb	r2, [r3, #12]
            if (alt != 0)
 8010e7a:	6a3b      	ldr	r3, [r7, #32]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d019      	beq.n	8010eb4 <evtMspReceive+0x163c>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010e80:	4a69      	ldr	r2, [pc, #420]	; (8011028 <evtMspReceive+0x17b0>)
 8010e82:	6a3b      	ldr	r3, [r7, #32]
 8010e84:	6013      	str	r3, [r2, #0]
 8010e86:	e015      	b.n	8010eb4 <evtMspReceive+0x163c>
        } else if (wp_no == 16) {       // OK with SERIAL GPS  --  NOK for I2C GPS / needs more code dev in order to inject GPS coord inside I2C GPS
 8010e88:	7dfb      	ldrb	r3, [r7, #23]
 8010e8a:	2b10      	cmp	r3, #16
 8010e8c:	d112      	bne.n	8010eb4 <evtMspReceive+0x163c>
            GPS_hold[LAT] = lat;
 8010e8e:	4a65      	ldr	r2, [pc, #404]	; (8011024 <evtMspReceive+0x17ac>)
 8010e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e92:	6013      	str	r3, [r2, #0]
            GPS_hold[LON] = lon;
 8010e94:	4a63      	ldr	r2, [pc, #396]	; (8011024 <evtMspReceive+0x17ac>)
 8010e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e98:	6053      	str	r3, [r2, #4]
            if (alt != 0)
 8010e9a:	6a3b      	ldr	r3, [r7, #32]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d002      	beq.n	8010ea6 <evtMspReceive+0x162e>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010ea0:	4a61      	ldr	r2, [pc, #388]	; (8011028 <evtMspReceive+0x17b0>)
 8010ea2:	6a3b      	ldr	r3, [r7, #32]
 8010ea4:	6013      	str	r3, [r2, #0]
            nav_mode = NAV_MODE_WP;
 8010ea6:	4b62      	ldr	r3, [pc, #392]	; (8011030 <evtMspReceive+0x17b8>)
 8010ea8:	2202      	movs	r2, #2
 8010eaa:	701a      	strb	r2, [r3, #0]
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 8010eac:	4961      	ldr	r1, [pc, #388]	; (8011034 <evtMspReceive+0x17bc>)
 8010eae:	485d      	ldr	r0, [pc, #372]	; (8011024 <evtMspReceive+0x17ac>)
 8010eb0:	f7f7 ffba 	bl	8008e28 <GPS_set_next_wp>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	6839      	ldr	r1, [r7, #0]
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f006 fcc2 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010ec0:	e2d9      	b.n	8011476 <evtMspReceive+0x1bfe>
#endif  // GPS

    case MSP_RESET_CONF:
        if (!f.ARMED)
 8010ec2:	4b5a      	ldr	r3, [pc, #360]	; (801102c <evtMspReceive+0x17b4>)
 8010ec4:	785b      	ldrb	r3, [r3, #1]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d102      	bne.n	8010ed0 <evtMspReceive+0x1658>
            checkFirstTime(true);
 8010eca:	2001      	movs	r0, #1
 8010ecc:	f7f5 fc80 	bl	80067d0 <checkFirstTime>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	6839      	ldr	r1, [r7, #0]
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f006 fcb4 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010edc:	e2cb      	b.n	8011476 <evtMspReceive+0x1bfe>

    case MSP_ACC_CALIBRATION:
        if (!f.ARMED)
 8010ede:	4b53      	ldr	r3, [pc, #332]	; (801102c <evtMspReceive+0x17b4>)
 8010ee0:	785b      	ldrb	r3, [r3, #1]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d103      	bne.n	8010eee <evtMspReceive+0x1676>
            calibratingA = CALIBRATING_ACC_CYCLES;
 8010ee6:	4b54      	ldr	r3, [pc, #336]	; (8011038 <evtMspReceive+0x17c0>)
 8010ee8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010eec:	801a      	strh	r2, [r3, #0]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010eee:	2300      	movs	r3, #0
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	6839      	ldr	r1, [r7, #0]
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f006 fca5 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010efa:	e2bc      	b.n	8011476 <evtMspReceive+0x1bfe>

    case MSP_MAG_CALIBRATION:
        if (!f.ARMED)
 8010efc:	4b4b      	ldr	r3, [pc, #300]	; (801102c <evtMspReceive+0x17b4>)
 8010efe:	785b      	ldrb	r3, [r3, #1]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d102      	bne.n	8010f0a <evtMspReceive+0x1692>
            f.CALIBRATE_MAG = 1;
 8010f04:	4b49      	ldr	r3, [pc, #292]	; (801102c <evtMspReceive+0x17b4>)
 8010f06:	2201      	movs	r2, #1
 8010f08:	739a      	strb	r2, [r3, #14]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	6839      	ldr	r1, [r7, #0]
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f006 fc97 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010f16:	e2ae      	b.n	8011476 <evtMspReceive+0x1bfe>

    case MSP_EEPROM_WRITE:
        if (f.ARMED) {
 8010f18:	4b44      	ldr	r3, [pc, #272]	; (801102c <evtMspReceive+0x17b4>)
 8010f1a:	785b      	ldrb	r3, [r3, #1]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d004      	beq.n	8010f2a <evtMspReceive+0x16b2>
            pifMsp_MakeError(p_owner, p_packet);
 8010f20:	6839      	ldr	r1, [r7, #0]
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f006 fd0a 	bl	801793c <pifMsp_MakeError>
        } else {
            writeEEPROM(0, true);
            pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
        }
        break;
 8010f28:	e2a5      	b.n	8011476 <evtMspReceive+0x1bfe>
            writeEEPROM(0, true);
 8010f2a:	2101      	movs	r1, #1
 8010f2c:	2000      	movs	r0, #0
 8010f2e:	f7f5 fbcd 	bl	80066cc <writeEEPROM>
            pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010f32:	2300      	movs	r3, #0
 8010f34:	2200      	movs	r2, #0
 8010f36:	6839      	ldr	r1, [r7, #0]
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f006 fc83 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010f3e:	e29a      	b.n	8011476 <evtMspReceive+0x1bfe>

    case MSP_DEBUG:
        // make use of this crap, output some useful QA statistics
        debug[3] = ((g_crystal_clock / 1000000) * 1000) + (g_core_clock / 1000000);         // XX0YY [crystal clock : core clock]
 8010f40:	4b3e      	ldr	r3, [pc, #248]	; (801103c <evtMspReceive+0x17c4>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	4a3e      	ldr	r2, [pc, #248]	; (8011040 <evtMspReceive+0x17c8>)
 8010f46:	fba2 2303 	umull	r2, r3, r2, r3
 8010f4a:	0c9b      	lsrs	r3, r3, #18
 8010f4c:	b29b      	uxth	r3, r3
 8010f4e:	461a      	mov	r2, r3
 8010f50:	0152      	lsls	r2, r2, #5
 8010f52:	1ad2      	subs	r2, r2, r3
 8010f54:	0092      	lsls	r2, r2, #2
 8010f56:	4413      	add	r3, r2
 8010f58:	00db      	lsls	r3, r3, #3
 8010f5a:	b29a      	uxth	r2, r3
 8010f5c:	4b39      	ldr	r3, [pc, #228]	; (8011044 <evtMspReceive+0x17cc>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	4937      	ldr	r1, [pc, #220]	; (8011040 <evtMspReceive+0x17c8>)
 8010f62:	fba1 1303 	umull	r1, r3, r1, r3
 8010f66:	0c9b      	lsrs	r3, r3, #18
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	4413      	add	r3, r2
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	b21a      	sxth	r2, r3
 8010f70:	4b35      	ldr	r3, [pc, #212]	; (8011048 <evtMspReceive+0x17d0>)
 8010f72:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 8010f74:	2300      	movs	r3, #0
 8010f76:	637b      	str	r3, [r7, #52]	; 0x34
 8010f78:	e00a      	b.n	8010f90 <evtMspReceive+0x1718>
            _Serialize16(p_port, debug[i]);      // 4 variables are here for general monitoring purpose
 8010f7a:	4a33      	ldr	r2, [pc, #204]	; (8011048 <evtMspReceive+0x17d0>)
 8010f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f7e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010f82:	4619      	mov	r1, r3
 8010f84:	69b8      	ldr	r0, [r7, #24]
 8010f86:	f7fe fa3b 	bl	800f400 <_Serialize16>
        for (i = 0; i < 4; i++)
 8010f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8010f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f92:	2b03      	cmp	r3, #3
 8010f94:	d9f1      	bls.n	8010f7a <evtMspReceive+0x1702>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 8);
 8010f96:	69bb      	ldr	r3, [r7, #24]
 8010f98:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010f9c:	2308      	movs	r3, #8
 8010f9e:	6839      	ldr	r1, [r7, #0]
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f006 fc4f 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010fa6:	e266      	b.n	8011476 <evtMspReceive+0x1bfe>

    // Additional commands that are not compatible with MultiWii
    case MSP_ACC_TRIM:
        _Serialize16(p_port, cfg.angleTrim[PITCH]);
 8010fa8:	4b28      	ldr	r3, [pc, #160]	; (801104c <evtMspReceive+0x17d4>)
 8010faa:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8010fae:	4619      	mov	r1, r3
 8010fb0:	69b8      	ldr	r0, [r7, #24]
 8010fb2:	f7fe fa25 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, cfg.angleTrim[ROLL]);
 8010fb6:	4b25      	ldr	r3, [pc, #148]	; (801104c <evtMspReceive+0x17d4>)
 8010fb8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010fbc:	4619      	mov	r1, r3
 8010fbe:	69b8      	ldr	r0, [r7, #24]
 8010fc0:	f7fe fa1e 	bl	800f400 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 4);
 8010fc4:	69bb      	ldr	r3, [r7, #24]
 8010fc6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010fca:	2304      	movs	r3, #4
 8010fcc:	6839      	ldr	r1, [r7, #0]
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f006 fc38 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8010fd4:	e24f      	b.n	8011476 <evtMspReceive+0x1bfe>

    case MSP_UID:
        _Serialize32(p_port, g_unique_id[0]);
 8010fd6:	4b1e      	ldr	r3, [pc, #120]	; (8011050 <evtMspReceive+0x17d8>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	4619      	mov	r1, r3
 8010fdc:	69b8      	ldr	r0, [r7, #24]
 8010fde:	f7fe fa32 	bl	800f446 <_Serialize32>
        _Serialize32(p_port, g_unique_id[1]);
 8010fe2:	4b1b      	ldr	r3, [pc, #108]	; (8011050 <evtMspReceive+0x17d8>)
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	69b8      	ldr	r0, [r7, #24]
 8010fea:	f7fe fa2c 	bl	800f446 <_Serialize32>
        _Serialize32(p_port, g_unique_id[2]);
 8010fee:	4b18      	ldr	r3, [pc, #96]	; (8011050 <evtMspReceive+0x17d8>)
 8010ff0:	689b      	ldr	r3, [r3, #8]
 8010ff2:	4619      	mov	r1, r3
 8010ff4:	69b8      	ldr	r0, [r7, #24]
 8010ff6:	f7fe fa26 	bl	800f446 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 12);
 8010ffa:	69bb      	ldr	r3, [r7, #24]
 8010ffc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8011000:	230c      	movs	r3, #12
 8011002:	6839      	ldr	r1, [r7, #0]
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f006 fc1d 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 801100a:	e234      	b.n	8011476 <evtMspReceive+0x1bfe>

#ifdef GPS
    case MSP_GPSSVINFO:
        _Serialize8(p_port, GPS_numCh);
 801100c:	4b11      	ldr	r3, [pc, #68]	; (8011054 <evtMspReceive+0x17dc>)
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	4619      	mov	r1, r3
 8011012:	69b8      	ldr	r0, [r7, #24]
 8011014:	f7fe f9dc 	bl	800f3d0 <_Serialize8>
        for (i = 0; i < GPS_numCh; i++) {
 8011018:	2300      	movs	r3, #0
 801101a:	637b      	str	r3, [r7, #52]	; 0x34
 801101c:	e03f      	b.n	801109e <evtMspReceive+0x1826>
 801101e:	bf00      	nop
 8011020:	200016f4 	.word	0x200016f4
 8011024:	20001700 	.word	0x20001700
 8011028:	200013fc 	.word	0x200013fc
 801102c:	20001628 	.word	0x20001628
 8011030:	20001728 	.word	0x20001728
 8011034:	20001704 	.word	0x20001704
 8011038:	200019b4 	.word	0x200019b4
 801103c:	20001614 	.word	0x20001614
 8011040:	431bde83 	.word	0x431bde83
 8011044:	20001618 	.word	0x20001618
 8011048:	20001640 	.word	0x20001640
 801104c:	20000d18 	.word	0x20000d18
 8011050:	2000161c 	.word	0x2000161c
 8011054:	20001729 	.word	0x20001729
            _Serialize8(p_port, GPS_svinfo_chn[i]);
 8011058:	4a8c      	ldr	r2, [pc, #560]	; (801128c <evtMspReceive+0x1a14>)
 801105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801105c:	4413      	add	r3, r2
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	4619      	mov	r1, r3
 8011062:	69b8      	ldr	r0, [r7, #24]
 8011064:	f7fe f9b4 	bl	800f3d0 <_Serialize8>
            _Serialize8(p_port, GPS_svinfo_svid[i]);
 8011068:	4a89      	ldr	r2, [pc, #548]	; (8011290 <evtMspReceive+0x1a18>)
 801106a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801106c:	4413      	add	r3, r2
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	4619      	mov	r1, r3
 8011072:	69b8      	ldr	r0, [r7, #24]
 8011074:	f7fe f9ac 	bl	800f3d0 <_Serialize8>
            _Serialize8(p_port, GPS_svinfo_quality[i]);
 8011078:	4a86      	ldr	r2, [pc, #536]	; (8011294 <evtMspReceive+0x1a1c>)
 801107a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801107c:	4413      	add	r3, r2
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	4619      	mov	r1, r3
 8011082:	69b8      	ldr	r0, [r7, #24]
 8011084:	f7fe f9a4 	bl	800f3d0 <_Serialize8>
            _Serialize8(p_port, GPS_svinfo_cno[i]);
 8011088:	4a83      	ldr	r2, [pc, #524]	; (8011298 <evtMspReceive+0x1a20>)
 801108a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801108c:	4413      	add	r3, r2
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	4619      	mov	r1, r3
 8011092:	69b8      	ldr	r0, [r7, #24]
 8011094:	f7fe f99c 	bl	800f3d0 <_Serialize8>
        for (i = 0; i < GPS_numCh; i++) {
 8011098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801109a:	3301      	adds	r3, #1
 801109c:	637b      	str	r3, [r7, #52]	; 0x34
 801109e:	4b7f      	ldr	r3, [pc, #508]	; (801129c <evtMspReceive+0x1a24>)
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	461a      	mov	r2, r3
 80110a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d3d6      	bcc.n	8011058 <evtMspReceive+0x17e0>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 1 + (GPS_numCh * 4));
 80110aa:	69bb      	ldr	r3, [r7, #24]
 80110ac:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80110b0:	4b7a      	ldr	r3, [pc, #488]	; (801129c <evtMspReceive+0x1a24>)
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	009b      	lsls	r3, r3, #2
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	3301      	adds	r3, #1
 80110bc:	b29b      	uxth	r3, r3
 80110be:	6839      	ldr	r1, [r7, #0]
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f006 fbbf 	bl	8017844 <pifMsp_MakeAnswer>
        // Poll new SVINFO from GPS
        gpsPollSvinfo();
 80110c6:	f7f7 f96f 	bl	80083a8 <gpsPollSvinfo>
        break;
 80110ca:	e1d4      	b.n	8011476 <evtMspReceive+0x1bfe>
    case MSP_GPSDEBUGINFO:
        if (sensors(SENSOR_GPS)) {
 80110cc:	2020      	movs	r0, #32
 80110ce:	f7f5 fe97 	bl	8006e00 <sensors>
 80110d2:	4603      	mov	r3, r0
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d012      	beq.n	80110fe <evtMspReceive+0x1886>
            _Serialize32(p_port, GPS_update_rate[1] - GPS_update_rate[0]);
 80110d8:	4b71      	ldr	r3, [pc, #452]	; (80112a0 <evtMspReceive+0x1a28>)
 80110da:	685a      	ldr	r2, [r3, #4]
 80110dc:	4b70      	ldr	r3, [pc, #448]	; (80112a0 <evtMspReceive+0x1a28>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	1ad3      	subs	r3, r2, r3
 80110e2:	4619      	mov	r1, r3
 80110e4:	69b8      	ldr	r0, [r7, #24]
 80110e6:	f7fe f9ae 	bl	800f446 <_Serialize32>
            _Serialize32(p_port, GPS_svinfo_rate[1] - GPS_svinfo_rate[0]);
 80110ea:	4b6e      	ldr	r3, [pc, #440]	; (80112a4 <evtMspReceive+0x1a2c>)
 80110ec:	685a      	ldr	r2, [r3, #4]
 80110ee:	4b6d      	ldr	r3, [pc, #436]	; (80112a4 <evtMspReceive+0x1a2c>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	1ad3      	subs	r3, r2, r3
 80110f4:	4619      	mov	r1, r3
 80110f6:	69b8      	ldr	r0, [r7, #24]
 80110f8:	f7fe f9a5 	bl	800f446 <_Serialize32>
 80110fc:	e007      	b.n	801110e <evtMspReceive+0x1896>
        } else {
            _Serialize32(p_port, 0);
 80110fe:	2100      	movs	r1, #0
 8011100:	69b8      	ldr	r0, [r7, #24]
 8011102:	f7fe f9a0 	bl	800f446 <_Serialize32>
            _Serialize32(p_port, 0);
 8011106:	2100      	movs	r1, #0
 8011108:	69b8      	ldr	r0, [r7, #24]
 801110a:	f7fe f99c 	bl	800f446 <_Serialize32>
        }
        _Serialize32(p_port, GPS_HorizontalAcc);
 801110e:	4b66      	ldr	r3, [pc, #408]	; (80112a8 <evtMspReceive+0x1a30>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	4619      	mov	r1, r3
 8011114:	69b8      	ldr	r0, [r7, #24]
 8011116:	f7fe f996 	bl	800f446 <_Serialize32>
        _Serialize32(p_port, GPS_VerticalAcc);
 801111a:	4b64      	ldr	r3, [pc, #400]	; (80112ac <evtMspReceive+0x1a34>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	4619      	mov	r1, r3
 8011120:	69b8      	ldr	r0, [r7, #24]
 8011122:	f7fe f990 	bl	800f446 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 8011126:	69bb      	ldr	r3, [r7, #24]
 8011128:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801112c:	2310      	movs	r3, #16
 801112e:	6839      	ldr	r1, [r7, #0]
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f006 fb87 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 8011136:	e19e      	b.n	8011476 <evtMspReceive+0x1bfe>
#endif  // GPS

    case MSP_SET_CONFIG:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8011138:	2300      	movs	r3, #0
 801113a:	2200      	movs	r2, #0
 801113c:	6839      	ldr	r1, [r7, #0]
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f006 fb80 	bl	8017844 <pifMsp_MakeAnswer>
        mcfg.mixerConfiguration = _Read8(p_port); // multitype
 8011144:	69b8      	ldr	r0, [r7, #24]
 8011146:	f7fe f8e9 	bl	800f31c <_Read8>
 801114a:	4603      	mov	r3, r0
 801114c:	461a      	mov	r2, r3
 801114e:	4b58      	ldr	r3, [pc, #352]	; (80112b0 <evtMspReceive+0x1a38>)
 8011150:	715a      	strb	r2, [r3, #5]
        featureClearAll();
 8011152:	f7f5 fed9 	bl	8006f08 <featureClearAll>
        featureSet(_Read32(p_port)); // features bitmap
 8011156:	69b8      	ldr	r0, [r7, #24]
 8011158:	f7fe f911 	bl	800f37e <_Read32>
 801115c:	4603      	mov	r3, r0
 801115e:	4618      	mov	r0, r3
 8011160:	f7f5 feac 	bl	8006ebc <featureSet>
        mcfg.serialrx_type = _Read8(p_port); // serialrx_type
 8011164:	69b8      	ldr	r0, [r7, #24]
 8011166:	f7fe f8d9 	bl	800f31c <_Read8>
 801116a:	4603      	mov	r3, r0
 801116c:	461a      	mov	r2, r3
 801116e:	4b50      	ldr	r3, [pc, #320]	; (80112b0 <evtMspReceive+0x1a38>)
 8011170:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
        mcfg.board_align_roll = _Read16(p_port); // board_align_roll
 8011174:	69b8      	ldr	r0, [r7, #24]
 8011176:	f7fe f8e5 	bl	800f344 <_Read16>
 801117a:	4603      	mov	r3, r0
 801117c:	b21a      	sxth	r2, r3
 801117e:	4b4c      	ldr	r3, [pc, #304]	; (80112b0 <evtMspReceive+0x1a38>)
 8011180:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
        mcfg.board_align_pitch = _Read16(p_port); // board_align_pitch
 8011184:	69b8      	ldr	r0, [r7, #24]
 8011186:	f7fe f8dd 	bl	800f344 <_Read16>
 801118a:	4603      	mov	r3, r0
 801118c:	b21a      	sxth	r2, r3
 801118e:	4b48      	ldr	r3, [pc, #288]	; (80112b0 <evtMspReceive+0x1a38>)
 8011190:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
        mcfg.board_align_yaw = _Read16(p_port); // board_align_yaw
 8011194:	69b8      	ldr	r0, [r7, #24]
 8011196:	f7fe f8d5 	bl	800f344 <_Read16>
 801119a:	4603      	mov	r3, r0
 801119c:	b21a      	sxth	r2, r3
 801119e:	4b44      	ldr	r3, [pc, #272]	; (80112b0 <evtMspReceive+0x1a38>)
 80111a0:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
        mcfg.currentscale = _Read16(p_port);
 80111a4:	69b8      	ldr	r0, [r7, #24]
 80111a6:	f7fe f8cd 	bl	800f344 <_Read16>
 80111aa:	4603      	mov	r3, r0
 80111ac:	461a      	mov	r2, r3
 80111ae:	4b40      	ldr	r3, [pc, #256]	; (80112b0 <evtMspReceive+0x1a38>)
 80111b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
        mcfg.currentoffset = _Read16(p_port);
 80111b4:	69b8      	ldr	r0, [r7, #24]
 80111b6:	f7fe f8c5 	bl	800f344 <_Read16>
 80111ba:	4603      	mov	r3, r0
 80111bc:	461a      	mov	r2, r3
 80111be:	4b3c      	ldr	r3, [pc, #240]	; (80112b0 <evtMspReceive+0x1a38>)
 80111c0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
        mcfg.motor_pwm_rate = _Read16(p_port);
 80111c4:	69b8      	ldr	r0, [r7, #24]
 80111c6:	f7fe f8bd 	bl	800f344 <_Read16>
 80111ca:	4603      	mov	r3, r0
 80111cc:	461a      	mov	r2, r3
 80111ce:	4b38      	ldr	r3, [pc, #224]	; (80112b0 <evtMspReceive+0x1a38>)
 80111d0:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
        cfg.rollPitchRate[0] = _Read8(p_port);
 80111d4:	69b8      	ldr	r0, [r7, #24]
 80111d6:	f7fe f8a1 	bl	800f31c <_Read8>
 80111da:	4603      	mov	r3, r0
 80111dc:	461a      	mov	r2, r3
 80111de:	4b35      	ldr	r3, [pc, #212]	; (80112b4 <evtMspReceive+0x1a3c>)
 80111e0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        cfg.rollPitchRate[1] = _Read8(p_port);
 80111e4:	69b8      	ldr	r0, [r7, #24]
 80111e6:	f7fe f899 	bl	800f31c <_Read8>
 80111ea:	4603      	mov	r3, r0
 80111ec:	461a      	mov	r2, r3
 80111ee:	4b31      	ldr	r3, [pc, #196]	; (80112b4 <evtMspReceive+0x1a3c>)
 80111f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mcfg.power_adc_channel = _Read8(p_port);
 80111f4:	69b8      	ldr	r0, [r7, #24]
 80111f6:	f7fe f891 	bl	800f31c <_Read8>
 80111fa:	4603      	mov	r3, r0
 80111fc:	461a      	mov	r2, r3
 80111fe:	4b2c      	ldr	r3, [pc, #176]	; (80112b0 <evtMspReceive+0x1a38>)
 8011200:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
        cfg.small_angle = _Read8(p_port);
 8011204:	69b8      	ldr	r0, [r7, #24]
 8011206:	f7fe f889 	bl	800f31c <_Read8>
 801120a:	4603      	mov	r3, r0
 801120c:	461a      	mov	r2, r3
 801120e:	4b29      	ldr	r3, [pc, #164]	; (80112b4 <evtMspReceive+0x1a3c>)
 8011210:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        tmp = _Read16(p_port);
 8011214:	69b8      	ldr	r0, [r7, #24]
 8011216:	f7fe f895 	bl	800f344 <_Read16>
 801121a:	4603      	mov	r3, r0
 801121c:	613b      	str	r3, [r7, #16]
        if (tmp != mcfg.looptime) {
 801121e:	4b24      	ldr	r3, [pc, #144]	; (80112b0 <evtMspReceive+0x1a38>)
 8011220:	899b      	ldrh	r3, [r3, #12]
 8011222:	461a      	mov	r2, r3
 8011224:	693b      	ldr	r3, [r7, #16]
 8011226:	4293      	cmp	r3, r2
 8011228:	d026      	beq.n	8011278 <evtMspReceive+0x1a00>
            if (mcfg.looptime && tmp) {
 801122a:	4b21      	ldr	r3, [pc, #132]	; (80112b0 <evtMspReceive+0x1a38>)
 801122c:	899b      	ldrh	r3, [r3, #12]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d00b      	beq.n	801124a <evtMspReceive+0x19d2>
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d008      	beq.n	801124a <evtMspReceive+0x19d2>
                pifTask_ChangePeriod(g_task_compute_imu, tmp);
 8011238:	4b1f      	ldr	r3, [pc, #124]	; (80112b8 <evtMspReceive+0x1a40>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	693a      	ldr	r2, [r7, #16]
 801123e:	b292      	uxth	r2, r2
 8011240:	4611      	mov	r1, r2
 8011242:	4618      	mov	r0, r3
 8011244:	f003 fa82 	bl	801474c <pifTask_ChangePeriod>
 8011248:	e012      	b.n	8011270 <evtMspReceive+0x19f8>
            }
            else {
                if (tmp) {
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d008      	beq.n	8011262 <evtMspReceive+0x19ea>
                    pifTask_ChangeMode(g_task_compute_imu, TM_PERIOD_US, tmp);
 8011250:	4b19      	ldr	r3, [pc, #100]	; (80112b8 <evtMspReceive+0x1a40>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	693a      	ldr	r2, [r7, #16]
 8011256:	b292      	uxth	r2, r2
 8011258:	2103      	movs	r1, #3
 801125a:	4618      	mov	r0, r3
 801125c:	f003 fa48 	bl	80146f0 <pifTask_ChangeMode>
 8011260:	e006      	b.n	8011270 <evtMspReceive+0x19f8>
                }
                else {
                    pifTask_ChangeMode(g_task_compute_imu, TM_ALWAYS, 100);	    // 100%
 8011262:	4b15      	ldr	r3, [pc, #84]	; (80112b8 <evtMspReceive+0x1a40>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	2264      	movs	r2, #100	; 0x64
 8011268:	2101      	movs	r1, #1
 801126a:	4618      	mov	r0, r3
 801126c:	f003 fa40 	bl	80146f0 <pifTask_ChangeMode>
                }
            }
            mcfg.looptime = tmp;
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	b29a      	uxth	r2, r3
 8011274:	4b0e      	ldr	r3, [pc, #56]	; (80112b0 <evtMspReceive+0x1a38>)
 8011276:	819a      	strh	r2, [r3, #12]
        }
        cfg.locked_in = _Read8(p_port);
 8011278:	69b8      	ldr	r0, [r7, #24]
 801127a:	f7fe f84f 	bl	800f31c <_Read8>
 801127e:	4603      	mov	r3, r0
 8011280:	461a      	mov	r2, r3
 8011282:	4b0c      	ldr	r3, [pc, #48]	; (80112b4 <evtMspReceive+0x1a3c>)
 8011284:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        /// ???
        break;
 8011288:	e0f5      	b.n	8011476 <evtMspReceive+0x1bfe>
 801128a:	bf00      	nop
 801128c:	2000172c 	.word	0x2000172c
 8011290:	2000174c 	.word	0x2000174c
 8011294:	2000176c 	.word	0x2000176c
 8011298:	2000178c 	.word	0x2000178c
 801129c:	20001729 	.word	0x20001729
 80112a0:	200017ac 	.word	0x200017ac
 80112a4:	200017b4 	.word	0x200017b4
 80112a8:	200017bc 	.word	0x200017bc
 80112ac:	200017c0 	.word	0x200017c0
 80112b0:	200007ac 	.word	0x200007ac
 80112b4:	20000d18 	.word	0x20000d18
 80112b8:	20001824 	.word	0x20001824

    case MSP_CONFIG:
        _Serialize8(p_port, mcfg.mixerConfiguration);
 80112bc:	4b70      	ldr	r3, [pc, #448]	; (8011480 <evtMspReceive+0x1c08>)
 80112be:	795b      	ldrb	r3, [r3, #5]
 80112c0:	4619      	mov	r1, r3
 80112c2:	69b8      	ldr	r0, [r7, #24]
 80112c4:	f7fe f884 	bl	800f3d0 <_Serialize8>
        _Serialize32(p_port, featureMask());
 80112c8:	f7f5 fe2a 	bl	8006f20 <featureMask>
 80112cc:	4603      	mov	r3, r0
 80112ce:	4619      	mov	r1, r3
 80112d0:	69b8      	ldr	r0, [r7, #24]
 80112d2:	f7fe f8b8 	bl	800f446 <_Serialize32>
        _Serialize8(p_port, mcfg.serialrx_type);
 80112d6:	4b6a      	ldr	r3, [pc, #424]	; (8011480 <evtMspReceive+0x1c08>)
 80112d8:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80112dc:	4619      	mov	r1, r3
 80112de:	69b8      	ldr	r0, [r7, #24]
 80112e0:	f7fe f876 	bl	800f3d0 <_Serialize8>
        _Serialize16(p_port, mcfg.board_align_roll);
 80112e4:	4b66      	ldr	r3, [pc, #408]	; (8011480 <evtMspReceive+0x1c08>)
 80112e6:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 80112ea:	4619      	mov	r1, r3
 80112ec:	69b8      	ldr	r0, [r7, #24]
 80112ee:	f7fe f887 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, mcfg.board_align_pitch);
 80112f2:	4b63      	ldr	r3, [pc, #396]	; (8011480 <evtMspReceive+0x1c08>)
 80112f4:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 80112f8:	4619      	mov	r1, r3
 80112fa:	69b8      	ldr	r0, [r7, #24]
 80112fc:	f7fe f880 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, mcfg.board_align_yaw);
 8011300:	4b5f      	ldr	r3, [pc, #380]	; (8011480 <evtMspReceive+0x1c08>)
 8011302:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8011306:	4619      	mov	r1, r3
 8011308:	69b8      	ldr	r0, [r7, #24]
 801130a:	f7fe f879 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, mcfg.currentscale);
 801130e:	4b5c      	ldr	r3, [pc, #368]	; (8011480 <evtMspReceive+0x1c08>)
 8011310:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
 8011314:	b21b      	sxth	r3, r3
 8011316:	4619      	mov	r1, r3
 8011318:	69b8      	ldr	r0, [r7, #24]
 801131a:	f7fe f871 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, mcfg.currentoffset);
 801131e:	4b58      	ldr	r3, [pc, #352]	; (8011480 <evtMspReceive+0x1c08>)
 8011320:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
 8011324:	b21b      	sxth	r3, r3
 8011326:	4619      	mov	r1, r3
 8011328:	69b8      	ldr	r0, [r7, #24]
 801132a:	f7fe f869 	bl	800f400 <_Serialize16>
        _Serialize16(p_port, mcfg.motor_pwm_rate);
 801132e:	4b54      	ldr	r3, [pc, #336]	; (8011480 <evtMspReceive+0x1c08>)
 8011330:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8011334:	b21b      	sxth	r3, r3
 8011336:	4619      	mov	r1, r3
 8011338:	69b8      	ldr	r0, [r7, #24]
 801133a:	f7fe f861 	bl	800f400 <_Serialize16>
        _Serialize8(p_port, cfg.rollPitchRate[0]);
 801133e:	4b51      	ldr	r3, [pc, #324]	; (8011484 <evtMspReceive+0x1c0c>)
 8011340:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011344:	4619      	mov	r1, r3
 8011346:	69b8      	ldr	r0, [r7, #24]
 8011348:	f7fe f842 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, cfg.rollPitchRate[1]);
 801134c:	4b4d      	ldr	r3, [pc, #308]	; (8011484 <evtMspReceive+0x1c0c>)
 801134e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011352:	4619      	mov	r1, r3
 8011354:	69b8      	ldr	r0, [r7, #24]
 8011356:	f7fe f83b 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, mcfg.power_adc_channel);
 801135a:	4b49      	ldr	r3, [pc, #292]	; (8011480 <evtMspReceive+0x1c08>)
 801135c:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8011360:	4619      	mov	r1, r3
 8011362:	69b8      	ldr	r0, [r7, #24]
 8011364:	f7fe f834 	bl	800f3d0 <_Serialize8>
        _Serialize8(p_port, cfg.small_angle);
 8011368:	4b46      	ldr	r3, [pc, #280]	; (8011484 <evtMspReceive+0x1c0c>)
 801136a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801136e:	4619      	mov	r1, r3
 8011370:	69b8      	ldr	r0, [r7, #24]
 8011372:	f7fe f82d 	bl	800f3d0 <_Serialize8>
        _Serialize16(p_port, mcfg.looptime);
 8011376:	4b42      	ldr	r3, [pc, #264]	; (8011480 <evtMspReceive+0x1c08>)
 8011378:	899b      	ldrh	r3, [r3, #12]
 801137a:	b21b      	sxth	r3, r3
 801137c:	4619      	mov	r1, r3
 801137e:	69b8      	ldr	r0, [r7, #24]
 8011380:	f7fe f83e 	bl	800f400 <_Serialize16>
        _Serialize8(p_port, cfg.locked_in);
 8011384:	4b3f      	ldr	r3, [pc, #252]	; (8011484 <evtMspReceive+0x1c0c>)
 8011386:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801138a:	4619      	mov	r1, r3
 801138c:	69b8      	ldr	r0, [r7, #24]
 801138e:	f7fe f81f 	bl	800f3d0 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 1 + 4 + 1 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 1 + 1 + 2 + 1);
 8011392:	69bb      	ldr	r3, [r7, #24]
 8011394:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8011398:	2319      	movs	r3, #25
 801139a:	6839      	ldr	r1, [r7, #0]
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f006 fa51 	bl	8017844 <pifMsp_MakeAnswer>
        /// ???
        break;
 80113a2:	e068      	b.n	8011476 <evtMspReceive+0x1bfe>

    case MSP_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 80113a4:	2300      	movs	r3, #0
 80113a6:	637b      	str	r3, [r7, #52]	; 0x34
 80113a8:	e00c      	b.n	80113c4 <evtMspReceive+0x1b4c>
            _Serialize8(p_port, mcfg.rcmap[i]);
 80113aa:	4a35      	ldr	r2, [pc, #212]	; (8011480 <evtMspReceive+0x1c08>)
 80113ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ae:	4413      	add	r3, r2
 80113b0:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80113b4:	781b      	ldrb	r3, [r3, #0]
 80113b6:	4619      	mov	r1, r3
 80113b8:	69b8      	ldr	r0, [r7, #24]
 80113ba:	f7fe f809 	bl	800f3d0 <_Serialize8>
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 80113be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113c0:	3301      	adds	r3, #1
 80113c2:	637b      	str	r3, [r7, #52]	; 0x34
 80113c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113c6:	2b07      	cmp	r3, #7
 80113c8:	d9ef      	bls.n	80113aa <evtMspReceive+0x1b32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, MAX_SERIAL_INPUTS);
 80113ca:	69bb      	ldr	r3, [r7, #24]
 80113cc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80113d0:	2308      	movs	r3, #8
 80113d2:	6839      	ldr	r1, [r7, #0]
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f006 fa35 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 80113da:	e04c      	b.n	8011476 <evtMspReceive+0x1bfe>

    case MSP_SET_RCMAP:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 80113dc:	2300      	movs	r3, #0
 80113de:	2200      	movs	r2, #0
 80113e0:	6839      	ldr	r1, [r7, #0]
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f006 fa2e 	bl	8017844 <pifMsp_MakeAnswer>
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 80113e8:	2300      	movs	r3, #0
 80113ea:	637b      	str	r3, [r7, #52]	; 0x34
 80113ec:	e00e      	b.n	801140c <evtMspReceive+0x1b94>
            mcfg.rcmap[i] = _Read8(p_port);
 80113ee:	69b8      	ldr	r0, [r7, #24]
 80113f0:	f7fd ff94 	bl	800f31c <_Read8>
 80113f4:	4603      	mov	r3, r0
 80113f6:	4619      	mov	r1, r3
 80113f8:	4a21      	ldr	r2, [pc, #132]	; (8011480 <evtMspReceive+0x1c08>)
 80113fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113fc:	4413      	add	r3, r2
 80113fe:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8011402:	460a      	mov	r2, r1
 8011404:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8011406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011408:	3301      	adds	r3, #1
 801140a:	637b      	str	r3, [r7, #52]	; 0x34
 801140c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801140e:	2b07      	cmp	r3, #7
 8011410:	d9ed      	bls.n	80113ee <evtMspReceive+0x1b76>
        break;
 8011412:	e030      	b.n	8011476 <evtMspReceive+0x1bfe>

    case MSP_REBOOT:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8011414:	2300      	movs	r3, #0
 8011416:	2200      	movs	r2, #0
 8011418:	6839      	ldr	r1, [r7, #0]
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f006 fa12 	bl	8017844 <pifMsp_MakeAnswer>
        pendReboot = true;
 8011420:	4b19      	ldr	r3, [pc, #100]	; (8011488 <evtMspReceive+0x1c10>)
 8011422:	2201      	movs	r2, #1
 8011424:	701a      	strb	r2, [r3, #0]
        break;
 8011426:	e026      	b.n	8011476 <evtMspReceive+0x1bfe>

    case MSP_BUILDINFO:
        for (i = 0; i < 11; i++)
 8011428:	2300      	movs	r3, #0
 801142a:	637b      	str	r3, [r7, #52]	; 0x34
 801142c:	e00a      	b.n	8011444 <evtMspReceive+0x1bcc>
            _Serialize8(p_port, build[i]); // MMM DD YYYY as ascii, MMM = Jan/Feb... etc
 801142e:	69fa      	ldr	r2, [r7, #28]
 8011430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011432:	4413      	add	r3, r2
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	4619      	mov	r1, r3
 8011438:	69b8      	ldr	r0, [r7, #24]
 801143a:	f7fd ffc9 	bl	800f3d0 <_Serialize8>
        for (i = 0; i < 11; i++)
 801143e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011440:	3301      	adds	r3, #1
 8011442:	637b      	str	r3, [r7, #52]	; 0x34
 8011444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011446:	2b0a      	cmp	r3, #10
 8011448:	d9f1      	bls.n	801142e <evtMspReceive+0x1bb6>
        _Serialize32(p_port, 0); // future exp
 801144a:	2100      	movs	r1, #0
 801144c:	69b8      	ldr	r0, [r7, #24]
 801144e:	f7fd fffa 	bl	800f446 <_Serialize32>
        _Serialize32(p_port, 0); // future exp
 8011452:	2100      	movs	r1, #0
 8011454:	69b8      	ldr	r0, [r7, #24]
 8011456:	f7fd fff6 	bl	800f446 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 11 + 4 + 4);
 801145a:	69bb      	ldr	r3, [r7, #24]
 801145c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8011460:	2313      	movs	r3, #19
 8011462:	6839      	ldr	r1, [r7, #0]
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f006 f9ed 	bl	8017844 <pifMsp_MakeAnswer>
        break;
 801146a:	e004      	b.n	8011476 <evtMspReceive+0x1bfe>

    default:                   // we do not know how to handle the (valid) message, indicate error MSP $M!
        pifMsp_MakeError(p_owner, p_packet);
 801146c:	6839      	ldr	r1, [r7, #0]
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f006 fa64 	bl	801793c <pifMsp_MakeError>
        break;
 8011474:	bf00      	nop
    }
}
 8011476:	bf00      	nop
 8011478:	373c      	adds	r7, #60	; 0x3c
 801147a:	46bd      	mov	sp, r7
 801147c:	bd90      	pop	{r4, r7, pc}
 801147e:	bf00      	nop
 8011480:	200007ac 	.word	0x200007ac
 8011484:	20000d18 	.word	0x20000d18
 8011488:	20001c26 	.word	0x20001c26

0801148c <evtMspOtherPacket>:

static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b082      	sub	sp, #8
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
 8011494:	460b      	mov	r3, r1
 8011496:	70fb      	strb	r3, [r7, #3]
    (void)p_owner;

    if (f.ARMED) return;
 8011498:	4b0c      	ldr	r3, [pc, #48]	; (80114cc <evtMspOtherPacket+0x40>)
 801149a:	785b      	ldrb	r3, [r3, #1]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d110      	bne.n	80114c2 <evtMspOtherPacket+0x36>

    if (data == '#')
 80114a0:	78fb      	ldrb	r3, [r7, #3]
 80114a2:	2b23      	cmp	r3, #35	; 0x23
 80114a4:	d103      	bne.n	80114ae <evtMspOtherPacket+0x22>
        s_change_cli = TRUE;
 80114a6:	4b0a      	ldr	r3, [pc, #40]	; (80114d0 <evtMspOtherPacket+0x44>)
 80114a8:	2201      	movs	r2, #1
 80114aa:	701a      	strb	r2, [r3, #0]
 80114ac:	e00a      	b.n	80114c4 <evtMspOtherPacket+0x38>
    else if (data == mcfg.reboot_character)
 80114ae:	4b09      	ldr	r3, [pc, #36]	; (80114d4 <evtMspOtherPacket+0x48>)
 80114b0:	f893 3569 	ldrb.w	r3, [r3, #1385]	; 0x569
 80114b4:	78fa      	ldrb	r2, [r7, #3]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d104      	bne.n	80114c4 <evtMspOtherPacket+0x38>
        systemReset(true);      // reboot to bootloader
 80114ba:	2001      	movs	r0, #1
 80114bc:	f7f0 fdb0 	bl	8002020 <systemReset>
 80114c0:	e000      	b.n	80114c4 <evtMspOtherPacket+0x38>
    if (f.ARMED) return;
 80114c2:	bf00      	nop
}
 80114c4:	3708      	adds	r7, #8
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}
 80114ca:	bf00      	nop
 80114cc:	20001628 	.word	0x20001628
 80114d0:	20001dd8 	.word	0x20001dd8
 80114d4:	200007ac 	.word	0x200007ac

080114d8 <serialCom>:

void serialCom(void)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	af00      	add	r7, sp, #0
    if (s_change_cli) {
 80114dc:	4b0c      	ldr	r3, [pc, #48]	; (8011510 <serialCom+0x38>)
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00b      	beq.n	80114fc <serialCom+0x24>
        s_change_cli = FALSE;
 80114e4:	4b0a      	ldr	r3, [pc, #40]	; (8011510 <serialCom+0x38>)
 80114e6:	2200      	movs	r2, #0
 80114e8:	701a      	strb	r2, [r3, #0]

        pifMsp_DetachComm(&ports[0].pif_msp);
 80114ea:	480a      	ldr	r0, [pc, #40]	; (8011514 <serialCom+0x3c>)
 80114ec:	f006 f99a 	bl	8017824 <pifMsp_DetachComm>
        cliInit(&core.mainport->comm);
 80114f0:	4b09      	ldr	r3, [pc, #36]	; (8011518 <serialCom+0x40>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	3304      	adds	r3, #4
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7f4 fef4 	bl	80062e4 <cliInit>
    };

    if (pendReboot)
 80114fc:	4b07      	ldr	r3, [pc, #28]	; (801151c <serialCom+0x44>)
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d002      	beq.n	801150a <serialCom+0x32>
        systemReset(false); // noreturn
 8011504:	2000      	movs	r0, #0
 8011506:	f7f0 fd8b 	bl	8002020 <systemReset>
}
 801150a:	bf00      	nop
 801150c:	bd80      	pop	{r7, pc}
 801150e:	bf00      	nop
 8011510:	20001dd8 	.word	0x20001dd8
 8011514:	20001c2c 	.word	0x20001c2c
 8011518:	200006f4 	.word	0x200006f4
 801151c:	20001c26 	.word	0x20001c26

08011520 <spektrumReadRawRC>:
static PifRcSpektrum s_spektrum;
static uint32_t spekChannelData[SPEK_2048_MAX_CHANNEL];


static uint16_t spektrumReadRawRC(uint8_t chan)
{
 8011520:	b480      	push	{r7}
 8011522:	b085      	sub	sp, #20
 8011524:	af00      	add	r7, sp, #0
 8011526:	4603      	mov	r3, r0
 8011528:	71fb      	strb	r3, [r7, #7]
	uint16_t data;

    if (chan >= s_spektrum.parent._channel_count) {
 801152a:	4b0d      	ldr	r3, [pc, #52]	; (8011560 <spektrumReadRawRC+0x40>)
 801152c:	789b      	ldrb	r3, [r3, #2]
 801152e:	79fa      	ldrb	r2, [r7, #7]
 8011530:	429a      	cmp	r2, r3
 8011532:	d304      	bcc.n	801153e <spektrumReadRawRC+0x1e>
        data = mcfg.midrc;
 8011534:	4b0b      	ldr	r3, [pc, #44]	; (8011564 <spektrumReadRawRC+0x44>)
 8011536:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 801153a:	81fb      	strh	r3, [r7, #14]
 801153c:	e009      	b.n	8011552 <spektrumReadRawRC+0x32>
    } else {
        data = spekChannelData[mcfg.rcmap[chan]];
 801153e:	79fb      	ldrb	r3, [r7, #7]
 8011540:	4a08      	ldr	r2, [pc, #32]	; (8011564 <spektrumReadRawRC+0x44>)
 8011542:	4413      	add	r3, r2
 8011544:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 8011548:	461a      	mov	r2, r3
 801154a:	4b07      	ldr	r3, [pc, #28]	; (8011568 <spektrumReadRawRC+0x48>)
 801154c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011550:	81fb      	strh	r3, [r7, #14]
    }

    return data;
 8011552:	89fb      	ldrh	r3, [r7, #14]
}
 8011554:	4618      	mov	r0, r3
 8011556:	3714      	adds	r7, #20
 8011558:	46bd      	mov	sp, r7
 801155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155e:	4770      	bx	lr
 8011560:	20001de0 	.word	0x20001de0
 8011564:	200007ac 	.word	0x200007ac
 8011568:	20001e40 	.word	0x20001e40

0801156c <_evtSpektrumReceive>:

static void _evtSpektrumReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b086      	sub	sp, #24
 8011570:	af00      	add	r7, sp, #0
 8011572:	60f8      	str	r0, [r7, #12]
 8011574:	60b9      	str	r1, [r7, #8]
 8011576:	607a      	str	r2, [r7, #4]
	int i;
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8011578:	f44f 7000 	mov.w	r0, #512	; 0x200
 801157c:	f7f5 fc88 	bl	8006e90 <feature>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d005      	beq.n	8011592 <_evtSpektrumReceive+0x26>
 8011586:	68f8      	ldr	r0, [r7, #12]
 8011588:	f006 fa3e 	bl	8017a08 <pifRc_CheckFailSafe>
 801158c:	4603      	mov	r3, r0
 801158e:	2b00      	cmp	r3, #0
 8011590:	d122      	bne.n	80115d8 <_evtSpektrumReceive+0x6c>

    failsafeCnt = 0;
 8011592:	4b13      	ldr	r3, [pc, #76]	; (80115e0 <_evtSpektrumReceive+0x74>)
 8011594:	2200      	movs	r2, #0
 8011596:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < p_owner->_channel_count; i++) {
 8011598:	2300      	movs	r3, #0
 801159a:	617b      	str	r3, [r7, #20]
 801159c:	e00c      	b.n	80115b8 <_evtSpektrumReceive+0x4c>
        spekChannelData[i] = channel[i];
 801159e:	697b      	ldr	r3, [r7, #20]
 80115a0:	005b      	lsls	r3, r3, #1
 80115a2:	68ba      	ldr	r2, [r7, #8]
 80115a4:	4413      	add	r3, r2
 80115a6:	881b      	ldrh	r3, [r3, #0]
 80115a8:	4619      	mov	r1, r3
 80115aa:	4a0e      	ldr	r2, [pc, #56]	; (80115e4 <_evtSpektrumReceive+0x78>)
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < p_owner->_channel_count; i++) {
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	3301      	adds	r3, #1
 80115b6:	617b      	str	r3, [r7, #20]
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	789b      	ldrb	r3, [r3, #2]
 80115bc:	461a      	mov	r2, r3
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	4293      	cmp	r3, r2
 80115c2:	dbec      	blt.n	801159e <_evtSpektrumReceive+0x32>
    }

	p_task = (PifTask*)p_issuer;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	613b      	str	r3, [r7, #16]
	if (!p_task->_running) p_task->immediate = TRUE;
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	79db      	ldrb	r3, [r3, #7]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d104      	bne.n	80115da <_evtSpektrumReceive+0x6e>
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	2201      	movs	r2, #1
 80115d4:	705a      	strb	r2, [r3, #1]
 80115d6:	e000      	b.n	80115da <_evtSpektrumReceive+0x6e>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 80115d8:	bf00      	nop
}
 80115da:	3718      	adds	r7, #24
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}
 80115e0:	2000165a 	.word	0x2000165a
 80115e4:	20001e40 	.word	0x20001e40

080115e8 <spektrumInit>:

BOOL spektrumInit(int uart, rcReadRawDataPtr *callback)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b084      	sub	sp, #16
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	6039      	str	r1, [r7, #0]
    int b;
    uint8_t Protocol_id;

    for (b = 0; b < SPEK_2048_MAX_CHANNEL; b++)
 80115f2:	2300      	movs	r3, #0
 80115f4:	60fb      	str	r3, [r7, #12]
 80115f6:	e00a      	b.n	801160e <spektrumInit+0x26>
        spekChannelData[b] = mcfg.midrc;
 80115f8:	4b2a      	ldr	r3, [pc, #168]	; (80116a4 <spektrumInit+0xbc>)
 80115fa:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 80115fe:	4619      	mov	r1, r3
 8011600:	4a29      	ldr	r2, [pc, #164]	; (80116a8 <spektrumInit+0xc0>)
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (b = 0; b < SPEK_2048_MAX_CHANNEL; b++)
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	3301      	adds	r3, #1
 801160c:	60fb      	str	r3, [r7, #12]
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2b07      	cmp	r3, #7
 8011612:	ddf1      	ble.n	80115f8 <spektrumInit+0x10>

    switch (mcfg.serialrx_type) {
 8011614:	4b23      	ldr	r3, [pc, #140]	; (80116a4 <spektrumInit+0xbc>)
 8011616:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 801161a:	2b00      	cmp	r3, #0
 801161c:	d004      	beq.n	8011628 <spektrumInit+0x40>
 801161e:	2b01      	cmp	r3, #1
 8011620:	d105      	bne.n	801162e <spektrumInit+0x46>
    case SERIALRX_SPEKTRUM2048:
        Protocol_id = PIF_SPEKTRUM_PROTOCOL_ID_22MS_2048_DSMS;
 8011622:	23a2      	movs	r3, #162	; 0xa2
 8011624:	72fb      	strb	r3, [r7, #11]
        break;
 8011626:	e004      	b.n	8011632 <spektrumInit+0x4a>

    case SERIALRX_SPEKTRUM1024:
        Protocol_id = PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2;
 8011628:	2301      	movs	r3, #1
 801162a:	72fb      	strb	r3, [r7, #11]
        break;
 801162c:	e001      	b.n	8011632 <spektrumInit+0x4a>

    default:
        return FALSE;
 801162e:	2300      	movs	r3, #0
 8011630:	e034      	b.n	801169c <spektrumInit+0xb4>
    }

    // spekUart is set by spektrumBind() which is called very early at startup
    core.rcvrport = uartOpen(uart, 115200, MODE_RX);
 8011632:	2201      	movs	r2, #1
 8011634:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f7f0 fea1 	bl	8002380 <uartOpen>
 801163e:	4603      	mov	r3, r0
 8011640:	4a1a      	ldr	r2, [pc, #104]	; (80116ac <spektrumInit+0xc4>)
 8011642:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 8011644:	4b19      	ldr	r3, [pc, #100]	; (80116ac <spektrumInit+0xc4>)
 8011646:	691b      	ldr	r3, [r3, #16]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d101      	bne.n	8011650 <spektrumInit+0x68>
 801164c:	2300      	movs	r3, #0
 801164e:	e025      	b.n	801169c <spektrumInit+0xb4>

    if (!pifRcSpektrum_Init(&s_spektrum, PIF_ID_AUTO, Protocol_id)) return FALSE;
 8011650:	7afb      	ldrb	r3, [r7, #11]
 8011652:	461a      	mov	r2, r3
 8011654:	2100      	movs	r1, #0
 8011656:	4816      	ldr	r0, [pc, #88]	; (80116b0 <spektrumInit+0xc8>)
 8011658:	f007 f986 	bl	8018968 <pifRcSpektrum_Init>
 801165c:	4603      	mov	r3, r0
 801165e:	2b00      	cmp	r3, #0
 8011660:	d101      	bne.n	8011666 <spektrumInit+0x7e>
 8011662:	2300      	movs	r3, #0
 8011664:	e01a      	b.n	801169c <spektrumInit+0xb4>
    pifRc_AttachEvtReceive(&s_spektrum.parent, _evtSpektrumReceive, g_task_compute_rc);
 8011666:	4b13      	ldr	r3, [pc, #76]	; (80116b4 <spektrumInit+0xcc>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	461a      	mov	r2, r3
 801166c:	4912      	ldr	r1, [pc, #72]	; (80116b8 <spektrumInit+0xd0>)
 801166e:	4810      	ldr	r0, [pc, #64]	; (80116b0 <spektrumInit+0xc8>)
 8011670:	f006 f9b8 	bl	80179e4 <pifRc_AttachEvtReceive>
    pifRcSpektrum_AttachComm(&s_spektrum, &core.rcvrport->comm);
 8011674:	4b0d      	ldr	r3, [pc, #52]	; (80116ac <spektrumInit+0xc4>)
 8011676:	691b      	ldr	r3, [r3, #16]
 8011678:	3304      	adds	r3, #4
 801167a:	4619      	mov	r1, r3
 801167c:	480c      	ldr	r0, [pc, #48]	; (80116b0 <spektrumInit+0xc8>)
 801167e:	f007 fa07 	bl	8018a90 <pifRcSpektrum_AttachComm>

    if (callback)
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d002      	beq.n	801168e <spektrumInit+0xa6>
        *callback = spektrumReadRawRC;
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	4a0c      	ldr	r2, [pc, #48]	; (80116bc <spektrumInit+0xd4>)
 801168c:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 801168e:	4b07      	ldr	r3, [pc, #28]	; (80116ac <spektrumInit+0xc4>)
 8011690:	691b      	ldr	r3, [r3, #16]
 8011692:	3304      	adds	r3, #4
 8011694:	4618      	mov	r0, r3
 8011696:	f7f0 ff89 	bl	80025ac <serialStartReceiveFunc>

    return TRUE;
 801169a:	2301      	movs	r3, #1
}
 801169c:	4618      	mov	r0, r3
 801169e:	3710      	adds	r7, #16
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	200007ac 	.word	0x200007ac
 80116a8:	20001e40 	.word	0x20001e40
 80116ac:	200006f4 	.word	0x200006f4
 80116b0:	20001de0 	.word	0x20001de0
 80116b4:	20001828 	.word	0x20001828
 80116b8:	0801156d 	.word	0x0801156d
 80116bc:	08011521 	.word	0x08011521

080116c0 <sumdReadRawRC>:
static PifRcSumd s_sumd;
static uint32_t sumdChannelData[SUMD_MAX_CHANNEL];


static uint16_t sumdReadRawRC(uint8_t chan)
{
 80116c0:	b480      	push	{r7}
 80116c2:	b083      	sub	sp, #12
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	4603      	mov	r3, r0
 80116c8:	71fb      	strb	r3, [r7, #7]
    return sumdChannelData[mcfg.rcmap[chan]];
 80116ca:	79fb      	ldrb	r3, [r7, #7]
 80116cc:	4a07      	ldr	r2, [pc, #28]	; (80116ec <sumdReadRawRC+0x2c>)
 80116ce:	4413      	add	r3, r2
 80116d0:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 80116d4:	461a      	mov	r2, r3
 80116d6:	4b06      	ldr	r3, [pc, #24]	; (80116f0 <sumdReadRawRC+0x30>)
 80116d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116dc:	b29b      	uxth	r3, r3
}
 80116de:	4618      	mov	r0, r3
 80116e0:	370c      	adds	r7, #12
 80116e2:	46bd      	mov	sp, r7
 80116e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e8:	4770      	bx	lr
 80116ea:	bf00      	nop
 80116ec:	200007ac 	.word	0x200007ac
 80116f0:	20001ed0 	.word	0x20001ed0

080116f4 <_evtSumdReceive>:

static void _evtSumdReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b086      	sub	sp, #24
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	60f8      	str	r0, [r7, #12]
 80116fc:	60b9      	str	r1, [r7, #8]
 80116fe:	607a      	str	r2, [r7, #4]
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8011700:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011704:	f7f5 fbc4 	bl	8006e90 <feature>
 8011708:	4603      	mov	r3, r0
 801170a:	2b00      	cmp	r3, #0
 801170c:	d005      	beq.n	801171a <_evtSumdReceive+0x26>
 801170e:	68f8      	ldr	r0, [r7, #12]
 8011710:	f006 f97a 	bl	8017a08 <pifRc_CheckFailSafe>
 8011714:	4603      	mov	r3, r0
 8011716:	2b00      	cmp	r3, #0
 8011718:	d11f      	bne.n	801175a <_evtSumdReceive+0x66>

	failsafeCnt = 0;
 801171a:	4b12      	ldr	r3, [pc, #72]	; (8011764 <_evtSumdReceive+0x70>)
 801171c:	2200      	movs	r2, #0
 801171e:	801a      	strh	r2, [r3, #0]
	for (int b = 0; b < SUMD_MAX_CHANNEL; b++)
 8011720:	2300      	movs	r3, #0
 8011722:	617b      	str	r3, [r7, #20]
 8011724:	e00c      	b.n	8011740 <_evtSumdReceive+0x4c>
		sumdChannelData[b] = channel[b];
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	005b      	lsls	r3, r3, #1
 801172a:	68ba      	ldr	r2, [r7, #8]
 801172c:	4413      	add	r3, r2
 801172e:	881b      	ldrh	r3, [r3, #0]
 8011730:	4619      	mov	r1, r3
 8011732:	4a0d      	ldr	r2, [pc, #52]	; (8011768 <_evtSumdReceive+0x74>)
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int b = 0; b < SUMD_MAX_CHANNEL; b++)
 801173a:	697b      	ldr	r3, [r7, #20]
 801173c:	3301      	adds	r3, #1
 801173e:	617b      	str	r3, [r7, #20]
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	2b07      	cmp	r3, #7
 8011744:	ddef      	ble.n	8011726 <_evtSumdReceive+0x32>

	p_task = (PifTask*)p_issuer;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	613b      	str	r3, [r7, #16]
	if (!p_task->_running) p_task->immediate = TRUE;
 801174a:	693b      	ldr	r3, [r7, #16]
 801174c:	79db      	ldrb	r3, [r3, #7]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d104      	bne.n	801175c <_evtSumdReceive+0x68>
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	2201      	movs	r2, #1
 8011756:	705a      	strb	r2, [r3, #1]
 8011758:	e000      	b.n	801175c <_evtSumdReceive+0x68>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 801175a:	bf00      	nop
}
 801175c:	3718      	adds	r7, #24
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	2000165a 	.word	0x2000165a
 8011768:	20001ed0 	.word	0x20001ed0

0801176c <sumdInit>:

BOOL sumdInit(int uart, rcReadRawDataPtr *callback)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b082      	sub	sp, #8
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	6039      	str	r1, [r7, #0]
    core.rcvrport = uartOpen(uart, 115200, MODE_RX);
 8011776:	2201      	movs	r2, #1
 8011778:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f7f0 fdff 	bl	8002380 <uartOpen>
 8011782:	4603      	mov	r3, r0
 8011784:	4a17      	ldr	r2, [pc, #92]	; (80117e4 <sumdInit+0x78>)
 8011786:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 8011788:	4b16      	ldr	r3, [pc, #88]	; (80117e4 <sumdInit+0x78>)
 801178a:	691b      	ldr	r3, [r3, #16]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d101      	bne.n	8011794 <sumdInit+0x28>
 8011790:	2300      	movs	r3, #0
 8011792:	e023      	b.n	80117dc <sumdInit+0x70>

    if (!pifRcSumd_Init(&s_sumd, PIF_ID_AUTO)) return FALSE;
 8011794:	2100      	movs	r1, #0
 8011796:	4814      	ldr	r0, [pc, #80]	; (80117e8 <sumdInit+0x7c>)
 8011798:	f007 fa84 	bl	8018ca4 <pifRcSumd_Init>
 801179c:	4603      	mov	r3, r0
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d101      	bne.n	80117a6 <sumdInit+0x3a>
 80117a2:	2300      	movs	r3, #0
 80117a4:	e01a      	b.n	80117dc <sumdInit+0x70>
    pifRc_AttachEvtReceive(&s_sumd.parent, _evtSumdReceive, g_task_compute_rc);
 80117a6:	4b11      	ldr	r3, [pc, #68]	; (80117ec <sumdInit+0x80>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	461a      	mov	r2, r3
 80117ac:	4910      	ldr	r1, [pc, #64]	; (80117f0 <sumdInit+0x84>)
 80117ae:	480e      	ldr	r0, [pc, #56]	; (80117e8 <sumdInit+0x7c>)
 80117b0:	f006 f918 	bl	80179e4 <pifRc_AttachEvtReceive>
    pifRcSumd_AttachComm(&s_sumd, &core.rcvrport->comm);
 80117b4:	4b0b      	ldr	r3, [pc, #44]	; (80117e4 <sumdInit+0x78>)
 80117b6:	691b      	ldr	r3, [r3, #16]
 80117b8:	3304      	adds	r3, #4
 80117ba:	4619      	mov	r1, r3
 80117bc:	480a      	ldr	r0, [pc, #40]	; (80117e8 <sumdInit+0x7c>)
 80117be:	f007 faa5 	bl	8018d0c <pifRcSumd_AttachComm>

    if (callback)
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d002      	beq.n	80117ce <sumdInit+0x62>
        *callback = sumdReadRawRC;
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	4a0a      	ldr	r2, [pc, #40]	; (80117f4 <sumdInit+0x88>)
 80117cc:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 80117ce:	4b05      	ldr	r3, [pc, #20]	; (80117e4 <sumdInit+0x78>)
 80117d0:	691b      	ldr	r3, [r3, #16]
 80117d2:	3304      	adds	r3, #4
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7f0 fee9 	bl	80025ac <serialStartReceiveFunc>

    return TRUE;
 80117da:	2301      	movs	r3, #1
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3708      	adds	r7, #8
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	200006f4 	.word	0x200006f4
 80117e8:	20001e60 	.word	0x20001e60
 80117ec:	20001828 	.word	0x20001828
 80117f0:	080116f5 	.word	0x080116f5
 80117f4:	080116c1 	.word	0x080116c1

080117f8 <pif_Init>:
void PIF_WEAK pifSequenceColSig_Clear() {}

#endif

void pif_Init(PifActTimer1us act_timer1us)
{
 80117f8:	b480      	push	{r7}
 80117fa:	b083      	sub	sp, #12
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
	pif_act_timer1us = act_timer1us;
 8011800:	4a07      	ldr	r2, [pc, #28]	; (8011820 <pif_Init+0x28>)
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6013      	str	r3, [r2, #0]

	pif_datetime.month = 1;
 8011806:	4b07      	ldr	r3, [pc, #28]	; (8011824 <pif_Init+0x2c>)
 8011808:	2201      	movs	r2, #1
 801180a:	705a      	strb	r2, [r3, #1]
	pif_datetime.day = 1;
 801180c:	4b05      	ldr	r3, [pc, #20]	; (8011824 <pif_Init+0x2c>)
 801180e:	2201      	movs	r2, #1
 8011810:	709a      	strb	r2, [r3, #2]
    pifSensorDigitalColSig_Init();
    pifSensorSwitchColSig_Init();
    pifSolenoidColSig_Init();
    pifSequenceColSig_Init();
#endif
}
 8011812:	bf00      	nop
 8011814:	370c      	adds	r7, #12
 8011816:	46bd      	mov	sp, r7
 8011818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181c:	4770      	bx	lr
 801181e:	bf00      	nop
 8011820:	20001f14 	.word	0x20001f14
 8011824:	20001f00 	.word	0x20001f00

08011828 <pif_sigTimer1ms>:
    pifSequenceColSig_Clear();
#endif
}

void pif_sigTimer1ms()
{
 8011828:	b480      	push	{r7}
 801182a:	b083      	sub	sp, #12
 801182c:	af00      	add	r7, sp, #0
	uint8_t days;
	uint16_t year;

	pif_cumulative_timer1ms++;
 801182e:	4b51      	ldr	r3, [pc, #324]	; (8011974 <pif_sigTimer1ms+0x14c>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	3301      	adds	r3, #1
 8011834:	4a4f      	ldr	r2, [pc, #316]	; (8011974 <pif_sigTimer1ms+0x14c>)
 8011836:	6013      	str	r3, [r2, #0]
    pif_timer1ms++;
 8011838:	4b4f      	ldr	r3, [pc, #316]	; (8011978 <pif_sigTimer1ms+0x150>)
 801183a:	881b      	ldrh	r3, [r3, #0]
 801183c:	b29b      	uxth	r3, r3
 801183e:	3301      	adds	r3, #1
 8011840:	b29a      	uxth	r2, r3
 8011842:	4b4d      	ldr	r3, [pc, #308]	; (8011978 <pif_sigTimer1ms+0x150>)
 8011844:	801a      	strh	r2, [r3, #0]
    if (pif_timer1ms >= 1000) {
 8011846:	4b4c      	ldr	r3, [pc, #304]	; (8011978 <pif_sigTimer1ms+0x150>)
 8011848:	881b      	ldrh	r3, [r3, #0]
 801184a:	b29b      	uxth	r3, r3
 801184c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011850:	f0c0 8089 	bcc.w	8011966 <pif_sigTimer1ms+0x13e>
        pif_timer1ms = 0;
 8011854:	4b48      	ldr	r3, [pc, #288]	; (8011978 <pif_sigTimer1ms+0x150>)
 8011856:	2200      	movs	r2, #0
 8011858:	801a      	strh	r2, [r3, #0]

        pif_timer1sec++;
 801185a:	4b48      	ldr	r3, [pc, #288]	; (801197c <pif_sigTimer1ms+0x154>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	3301      	adds	r3, #1
 8011860:	4a46      	ldr	r2, [pc, #280]	; (801197c <pif_sigTimer1ms+0x154>)
 8011862:	6013      	str	r3, [r2, #0]
    	pif_datetime.second++;
 8011864:	4b46      	ldr	r3, [pc, #280]	; (8011980 <pif_sigTimer1ms+0x158>)
 8011866:	795b      	ldrb	r3, [r3, #5]
 8011868:	b2db      	uxtb	r3, r3
 801186a:	3301      	adds	r3, #1
 801186c:	b2da      	uxtb	r2, r3
 801186e:	4b44      	ldr	r3, [pc, #272]	; (8011980 <pif_sigTimer1ms+0x158>)
 8011870:	715a      	strb	r2, [r3, #5]
    	if (pif_datetime.second >= 60) {
 8011872:	4b43      	ldr	r3, [pc, #268]	; (8011980 <pif_sigTimer1ms+0x158>)
 8011874:	795b      	ldrb	r3, [r3, #5]
 8011876:	b2db      	uxtb	r3, r3
 8011878:	2b3b      	cmp	r3, #59	; 0x3b
 801187a:	d96d      	bls.n	8011958 <pif_sigTimer1ms+0x130>
    		pif_datetime.second = 0;
 801187c:	4b40      	ldr	r3, [pc, #256]	; (8011980 <pif_sigTimer1ms+0x158>)
 801187e:	2200      	movs	r2, #0
 8011880:	715a      	strb	r2, [r3, #5]
    		pif_datetime.minute++;
 8011882:	4b3f      	ldr	r3, [pc, #252]	; (8011980 <pif_sigTimer1ms+0x158>)
 8011884:	791b      	ldrb	r3, [r3, #4]
 8011886:	b2db      	uxtb	r3, r3
 8011888:	3301      	adds	r3, #1
 801188a:	b2da      	uxtb	r2, r3
 801188c:	4b3c      	ldr	r3, [pc, #240]	; (8011980 <pif_sigTimer1ms+0x158>)
 801188e:	711a      	strb	r2, [r3, #4]
    		if (pif_datetime.minute >= 60) {
 8011890:	4b3b      	ldr	r3, [pc, #236]	; (8011980 <pif_sigTimer1ms+0x158>)
 8011892:	791b      	ldrb	r3, [r3, #4]
 8011894:	b2db      	uxtb	r3, r3
 8011896:	2b3b      	cmp	r3, #59	; 0x3b
 8011898:	d95b      	bls.n	8011952 <pif_sigTimer1ms+0x12a>
    			pif_datetime.minute = 0;
 801189a:	4b39      	ldr	r3, [pc, #228]	; (8011980 <pif_sigTimer1ms+0x158>)
 801189c:	2200      	movs	r2, #0
 801189e:	711a      	strb	r2, [r3, #4]
    			pif_datetime.hour++;
 80118a0:	4b37      	ldr	r3, [pc, #220]	; (8011980 <pif_sigTimer1ms+0x158>)
 80118a2:	78db      	ldrb	r3, [r3, #3]
 80118a4:	b2db      	uxtb	r3, r3
 80118a6:	3301      	adds	r3, #1
 80118a8:	b2da      	uxtb	r2, r3
 80118aa:	4b35      	ldr	r3, [pc, #212]	; (8011980 <pif_sigTimer1ms+0x158>)
 80118ac:	70da      	strb	r2, [r3, #3]
    			if (pif_datetime.hour >= 24) {
 80118ae:	4b34      	ldr	r3, [pc, #208]	; (8011980 <pif_sigTimer1ms+0x158>)
 80118b0:	78db      	ldrb	r3, [r3, #3]
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	2b17      	cmp	r3, #23
 80118b6:	d94c      	bls.n	8011952 <pif_sigTimer1ms+0x12a>
    				pif_datetime.hour = 0;
 80118b8:	4b31      	ldr	r3, [pc, #196]	; (8011980 <pif_sigTimer1ms+0x158>)
 80118ba:	2200      	movs	r2, #0
 80118bc:	70da      	strb	r2, [r3, #3]
    				pif_datetime.day++;
 80118be:	4b30      	ldr	r3, [pc, #192]	; (8011980 <pif_sigTimer1ms+0x158>)
 80118c0:	789b      	ldrb	r3, [r3, #2]
 80118c2:	b2db      	uxtb	r3, r3
 80118c4:	3301      	adds	r3, #1
 80118c6:	b2da      	uxtb	r2, r3
 80118c8:	4b2d      	ldr	r3, [pc, #180]	; (8011980 <pif_sigTimer1ms+0x158>)
 80118ca:	709a      	strb	r2, [r3, #2]
    				days = kDaysInMonth[pif_datetime.month - 1];
 80118cc:	4b2c      	ldr	r3, [pc, #176]	; (8011980 <pif_sigTimer1ms+0x158>)
 80118ce:	785b      	ldrb	r3, [r3, #1]
 80118d0:	b2db      	uxtb	r3, r3
 80118d2:	3b01      	subs	r3, #1
 80118d4:	4a2b      	ldr	r2, [pc, #172]	; (8011984 <pif_sigTimer1ms+0x15c>)
 80118d6:	5cd3      	ldrb	r3, [r2, r3]
 80118d8:	71fb      	strb	r3, [r7, #7]
    				if (pif_datetime.month == 2) {
 80118da:	4b29      	ldr	r3, [pc, #164]	; (8011980 <pif_sigTimer1ms+0x158>)
 80118dc:	785b      	ldrb	r3, [r3, #1]
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	2b02      	cmp	r3, #2
 80118e2:	d117      	bne.n	8011914 <pif_sigTimer1ms+0xec>
    					year = 2000 + pif_datetime.year;
 80118e4:	4b26      	ldr	r3, [pc, #152]	; (8011980 <pif_sigTimer1ms+0x158>)
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	b2db      	uxtb	r3, r3
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80118f0:	80bb      	strh	r3, [r7, #4]
    					if (year / 4 == 0) {
 80118f2:	88bb      	ldrh	r3, [r7, #4]
 80118f4:	2b03      	cmp	r3, #3
 80118f6:	d80d      	bhi.n	8011914 <pif_sigTimer1ms+0xec>
    						if (year / 100 == 0) {
 80118f8:	88bb      	ldrh	r3, [r7, #4]
 80118fa:	2b63      	cmp	r3, #99	; 0x63
 80118fc:	d807      	bhi.n	801190e <pif_sigTimer1ms+0xe6>
    							if (year / 400 == 0) days++;
 80118fe:	88bb      	ldrh	r3, [r7, #4]
 8011900:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8011904:	d206      	bcs.n	8011914 <pif_sigTimer1ms+0xec>
 8011906:	79fb      	ldrb	r3, [r7, #7]
 8011908:	3301      	adds	r3, #1
 801190a:	71fb      	strb	r3, [r7, #7]
 801190c:	e002      	b.n	8011914 <pif_sigTimer1ms+0xec>
    						}
    						else days++;
 801190e:	79fb      	ldrb	r3, [r7, #7]
 8011910:	3301      	adds	r3, #1
 8011912:	71fb      	strb	r3, [r7, #7]
    					}
    				}
    				if (pif_datetime.day > days) {
 8011914:	4b1a      	ldr	r3, [pc, #104]	; (8011980 <pif_sigTimer1ms+0x158>)
 8011916:	789b      	ldrb	r3, [r3, #2]
 8011918:	b2db      	uxtb	r3, r3
 801191a:	79fa      	ldrb	r2, [r7, #7]
 801191c:	429a      	cmp	r2, r3
 801191e:	d218      	bcs.n	8011952 <pif_sigTimer1ms+0x12a>
    					pif_datetime.day = 1;
 8011920:	4b17      	ldr	r3, [pc, #92]	; (8011980 <pif_sigTimer1ms+0x158>)
 8011922:	2201      	movs	r2, #1
 8011924:	709a      	strb	r2, [r3, #2]
    					pif_datetime.month++;
 8011926:	4b16      	ldr	r3, [pc, #88]	; (8011980 <pif_sigTimer1ms+0x158>)
 8011928:	785b      	ldrb	r3, [r3, #1]
 801192a:	b2db      	uxtb	r3, r3
 801192c:	3301      	adds	r3, #1
 801192e:	b2da      	uxtb	r2, r3
 8011930:	4b13      	ldr	r3, [pc, #76]	; (8011980 <pif_sigTimer1ms+0x158>)
 8011932:	705a      	strb	r2, [r3, #1]
    					if (pif_datetime.month > 12) {
 8011934:	4b12      	ldr	r3, [pc, #72]	; (8011980 <pif_sigTimer1ms+0x158>)
 8011936:	785b      	ldrb	r3, [r3, #1]
 8011938:	b2db      	uxtb	r3, r3
 801193a:	2b0c      	cmp	r3, #12
 801193c:	d909      	bls.n	8011952 <pif_sigTimer1ms+0x12a>
    						pif_datetime.month = 1;
 801193e:	4b10      	ldr	r3, [pc, #64]	; (8011980 <pif_sigTimer1ms+0x158>)
 8011940:	2201      	movs	r2, #1
 8011942:	705a      	strb	r2, [r3, #1]
    						pif_datetime.year++;
 8011944:	4b0e      	ldr	r3, [pc, #56]	; (8011980 <pif_sigTimer1ms+0x158>)
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	b2db      	uxtb	r3, r3
 801194a:	3301      	adds	r3, #1
 801194c:	b2da      	uxtb	r2, r3
 801194e:	4b0c      	ldr	r3, [pc, #48]	; (8011980 <pif_sigTimer1ms+0x158>)
 8011950:	701a      	strb	r2, [r3, #0]
    					}
    				}
    			}
    		}

        	pif_performance.__state = 2;
 8011952:	4b0d      	ldr	r3, [pc, #52]	; (8011988 <pif_sigTimer1ms+0x160>)
 8011954:	2202      	movs	r2, #2
 8011956:	715a      	strb	r2, [r3, #5]
    	}

    	if (!pif_performance.__state) pif_performance.__state = 1;
 8011958:	4b0b      	ldr	r3, [pc, #44]	; (8011988 <pif_sigTimer1ms+0x160>)
 801195a:	795b      	ldrb	r3, [r3, #5]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d102      	bne.n	8011966 <pif_sigTimer1ms+0x13e>
 8011960:	4b09      	ldr	r3, [pc, #36]	; (8011988 <pif_sigTimer1ms+0x160>)
 8011962:	2201      	movs	r2, #1
 8011964:	715a      	strb	r2, [r3, #5]
    }
}
 8011966:	bf00      	nop
 8011968:	370c      	adds	r7, #12
 801196a:	46bd      	mov	sp, r7
 801196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011970:	4770      	bx	lr
 8011972:	bf00      	nop
 8011974:	20001f08 	.word	0x20001f08
 8011978:	20001ef8 	.word	0x20001ef8
 801197c:	20001efc 	.word	0x20001efc
 8011980:	20001f00 	.word	0x20001f00
 8011984:	08029590 	.word	0x08029590
 8011988:	20001f0c 	.word	0x20001f0c

0801198c <pif_Delay1ms>:

void pif_Delay1ms(uint16_t delay)
{
 801198c:	b480      	push	{r7}
 801198e:	b085      	sub	sp, #20
 8011990:	af00      	add	r7, sp, #0
 8011992:	4603      	mov	r3, r0
 8011994:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = pif_cumulative_timer1ms;
 8011996:	4b0a      	ldr	r3, [pc, #40]	; (80119c0 <pif_Delay1ms+0x34>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	60fb      	str	r3, [r7, #12]
	do {
		diff = pif_cumulative_timer1ms - start;
 801199c:	4b08      	ldr	r3, [pc, #32]	; (80119c0 <pif_Delay1ms+0x34>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	b29a      	uxth	r2, r3
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	1ad3      	subs	r3, r2, r3
 80119a8:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 80119aa:	897a      	ldrh	r2, [r7, #10]
 80119ac:	88fb      	ldrh	r3, [r7, #6]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d3f4      	bcc.n	801199c <pif_Delay1ms+0x10>
}
 80119b2:	bf00      	nop
 80119b4:	bf00      	nop
 80119b6:	3714      	adds	r7, #20
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr
 80119c0:	20001f08 	.word	0x20001f08

080119c4 <pif_Delay1us>:

void pif_Delay1us(uint16_t delay)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	4603      	mov	r3, r0
 80119cc:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = (*pif_act_timer1us)();
 80119ce:	4b0b      	ldr	r3, [pc, #44]	; (80119fc <pif_Delay1us+0x38>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	4798      	blx	r3
 80119d4:	60f8      	str	r0, [r7, #12]
	do {
		diff = (*pif_act_timer1us)() - start;
 80119d6:	4b09      	ldr	r3, [pc, #36]	; (80119fc <pif_Delay1us+0x38>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	4798      	blx	r3
 80119dc:	4603      	mov	r3, r0
 80119de:	b29a      	uxth	r2, r3
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	1ad3      	subs	r3, r2, r3
 80119e6:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 80119e8:	897a      	ldrh	r2, [r7, #10]
 80119ea:	88fb      	ldrh	r3, [r7, #6]
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d3f2      	bcc.n	80119d6 <pif_Delay1us+0x12>
}
 80119f0:	bf00      	nop
 80119f2:	bf00      	nop
 80119f4:	3710      	adds	r7, #16
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}
 80119fa:	bf00      	nop
 80119fc:	20001f14 	.word	0x20001f14

08011a00 <pif_BinToString>:
{
	pif_error = E_SUCCESS;
}

int pif_BinToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 8011a00:	b480      	push	{r7}
 8011a02:	b089      	sub	sp, #36	; 0x24
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	60f8      	str	r0, [r7, #12]
 8011a08:	60b9      	str	r1, [r7, #8]
 8011a0a:	4613      	mov	r3, r2
 8011a0c:	80fb      	strh	r3, [r7, #6]
	int i, idx = 0;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	61bb      	str	r3, [r7, #24]
	BOOL first;
    uint32_t tmp_val;

    if (str_cnt) {
 8011a12:	88fb      	ldrh	r3, [r7, #6]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d01b      	beq.n	8011a50 <pif_BinToString+0x50>
    	for (i = str_cnt - 1; i >= 0; i--) {
 8011a18:	88fb      	ldrh	r3, [r7, #6]
 8011a1a:	3b01      	subs	r3, #1
 8011a1c:	61fb      	str	r3, [r7, #28]
 8011a1e:	e013      	b.n	8011a48 <pif_BinToString+0x48>
    		p_buffer[idx++] = '0' + ((value >> i) & 1);
 8011a20:	68ba      	ldr	r2, [r7, #8]
 8011a22:	69fb      	ldr	r3, [r7, #28]
 8011a24:	fa22 f303 	lsr.w	r3, r2, r3
 8011a28:	b2db      	uxtb	r3, r3
 8011a2a:	f003 0301 	and.w	r3, r3, #1
 8011a2e:	b2da      	uxtb	r2, r3
 8011a30:	69bb      	ldr	r3, [r7, #24]
 8011a32:	1c59      	adds	r1, r3, #1
 8011a34:	61b9      	str	r1, [r7, #24]
 8011a36:	4619      	mov	r1, r3
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	440b      	add	r3, r1
 8011a3c:	3230      	adds	r2, #48	; 0x30
 8011a3e:	b2d2      	uxtb	r2, r2
 8011a40:	701a      	strb	r2, [r3, #0]
    	for (i = str_cnt - 1; i >= 0; i--) {
 8011a42:	69fb      	ldr	r3, [r7, #28]
 8011a44:	3b01      	subs	r3, #1
 8011a46:	61fb      	str	r3, [r7, #28]
 8011a48:	69fb      	ldr	r3, [r7, #28]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	dae8      	bge.n	8011a20 <pif_BinToString+0x20>
 8011a4e:	e030      	b.n	8011ab2 <pif_BinToString+0xb2>
    	}
    }
    else if (value > 0) {
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d025      	beq.n	8011aa2 <pif_BinToString+0xa2>
    	first = TRUE;
 8011a56:	2301      	movs	r3, #1
 8011a58:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 8011a5a:	231f      	movs	r3, #31
 8011a5c:	61fb      	str	r3, [r7, #28]
 8011a5e:	e01c      	b.n	8011a9a <pif_BinToString+0x9a>
    		tmp_val = (value >> i) & 1;
 8011a60:	68ba      	ldr	r2, [r7, #8]
 8011a62:	69fb      	ldr	r3, [r7, #28]
 8011a64:	fa22 f303 	lsr.w	r3, r2, r3
 8011a68:	f003 0301 	and.w	r3, r3, #1
 8011a6c:	613b      	str	r3, [r7, #16]
    		if (!first || tmp_val) {
 8011a6e:	7dfb      	ldrb	r3, [r7, #23]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d002      	beq.n	8011a7a <pif_BinToString+0x7a>
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d00c      	beq.n	8011a94 <pif_BinToString+0x94>
    			p_buffer[idx++] = '0' + tmp_val;
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	b2da      	uxtb	r2, r3
 8011a7e:	69bb      	ldr	r3, [r7, #24]
 8011a80:	1c59      	adds	r1, r3, #1
 8011a82:	61b9      	str	r1, [r7, #24]
 8011a84:	4619      	mov	r1, r3
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	440b      	add	r3, r1
 8011a8a:	3230      	adds	r2, #48	; 0x30
 8011a8c:	b2d2      	uxtb	r2, r2
 8011a8e:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 8011a90:	2300      	movs	r3, #0
 8011a92:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	3b01      	subs	r3, #1
 8011a98:	61fb      	str	r3, [r7, #28]
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	dadf      	bge.n	8011a60 <pif_BinToString+0x60>
 8011aa0:	e007      	b.n	8011ab2 <pif_BinToString+0xb2>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 8011aa2:	69bb      	ldr	r3, [r7, #24]
 8011aa4:	1c5a      	adds	r2, r3, #1
 8011aa6:	61ba      	str	r2, [r7, #24]
 8011aa8:	461a      	mov	r2, r3
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	4413      	add	r3, r2
 8011aae:	2230      	movs	r2, #48	; 0x30
 8011ab0:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 8011ab2:	69bb      	ldr	r3, [r7, #24]
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	3724      	adds	r7, #36	; 0x24
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abe:	4770      	bx	lr

08011ac0 <pif_DecToString>:

int pif_DecToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b08d      	sub	sp, #52	; 0x34
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	60f8      	str	r0, [r7, #12]
 8011ac8:	60b9      	str	r1, [r7, #8]
 8011aca:	4613      	mov	r3, r2
 8011acc:	80fb      	strh	r3, [r7, #6]
    uint16_t exp_cnt = 0;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t zero_str_cnt = 0;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	85bb      	strh	r3, [r7, #44]	; 0x2c
    int idx = 0;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t idx_inv = 0;
 8011ada:	2300      	movs	r3, #0
 8011adc:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t tmp_val;
    char inv_buf[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8011ade:	4a43      	ldr	r2, [pc, #268]	; (8011bec <pif_DecToString+0x12c>)
 8011ae0:	f107 0314 	add.w	r3, r7, #20
 8011ae4:	ca07      	ldmia	r2, {r0, r1, r2}
 8011ae6:	c303      	stmia	r3!, {r0, r1}
 8011ae8:	801a      	strh	r2, [r3, #0]
 8011aea:	3302      	adds	r3, #2
 8011aec:	0c12      	lsrs	r2, r2, #16
 8011aee:	701a      	strb	r2, [r3, #0]

    tmp_val = value;
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	623b      	str	r3, [r7, #32]
    if (tmp_val != 0) {
 8011af4:	6a3b      	ldr	r3, [r7, #32]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d05e      	beq.n	8011bb8 <pif_DecToString+0xf8>
        while (tmp_val) {
 8011afa:	e02c      	b.n	8011b56 <pif_DecToString+0x96>
        	exp_cnt++;
 8011afc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011afe:	3301      	adds	r3, #1
 8011b00:	85fb      	strh	r3, [r7, #46]	; 0x2e
            if (tmp_val >= 10) {
 8011b02:	6a3b      	ldr	r3, [r7, #32]
 8011b04:	2b09      	cmp	r3, #9
 8011b06:	d914      	bls.n	8011b32 <pif_DecToString+0x72>
                inv_buf[idx_inv++] = (tmp_val % 10) + '0';
 8011b08:	6a39      	ldr	r1, [r7, #32]
 8011b0a:	4b39      	ldr	r3, [pc, #228]	; (8011bf0 <pif_DecToString+0x130>)
 8011b0c:	fba3 2301 	umull	r2, r3, r3, r1
 8011b10:	08da      	lsrs	r2, r3, #3
 8011b12:	4613      	mov	r3, r2
 8011b14:	009b      	lsls	r3, r3, #2
 8011b16:	4413      	add	r3, r2
 8011b18:	005b      	lsls	r3, r3, #1
 8011b1a:	1aca      	subs	r2, r1, r3
 8011b1c:	b2d2      	uxtb	r2, r2
 8011b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b20:	1c59      	adds	r1, r3, #1
 8011b22:	6279      	str	r1, [r7, #36]	; 0x24
 8011b24:	3230      	adds	r2, #48	; 0x30
 8011b26:	b2d2      	uxtb	r2, r2
 8011b28:	3330      	adds	r3, #48	; 0x30
 8011b2a:	443b      	add	r3, r7
 8011b2c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8011b30:	e00b      	b.n	8011b4a <pif_DecToString+0x8a>
            }
            else {
                inv_buf[idx_inv++] = tmp_val + '0';
 8011b32:	6a3b      	ldr	r3, [r7, #32]
 8011b34:	b2da      	uxtb	r2, r3
 8011b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b38:	1c59      	adds	r1, r3, #1
 8011b3a:	6279      	str	r1, [r7, #36]	; 0x24
 8011b3c:	3230      	adds	r2, #48	; 0x30
 8011b3e:	b2d2      	uxtb	r2, r2
 8011b40:	3330      	adds	r3, #48	; 0x30
 8011b42:	443b      	add	r3, r7
 8011b44:	f803 2c1c 	strb.w	r2, [r3, #-28]
                break;
 8011b48:	e008      	b.n	8011b5c <pif_DecToString+0x9c>
            }
            tmp_val = tmp_val / 10;
 8011b4a:	6a3b      	ldr	r3, [r7, #32]
 8011b4c:	4a28      	ldr	r2, [pc, #160]	; (8011bf0 <pif_DecToString+0x130>)
 8011b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8011b52:	08db      	lsrs	r3, r3, #3
 8011b54:	623b      	str	r3, [r7, #32]
        while (tmp_val) {
 8011b56:	6a3b      	ldr	r3, [r7, #32]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d1cf      	bne.n	8011afc <pif_DecToString+0x3c>
        }

        if ((str_cnt != 0) && (exp_cnt < str_cnt)) {
 8011b5c:	88fb      	ldrh	r3, [r7, #6]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d026      	beq.n	8011bb0 <pif_DecToString+0xf0>
 8011b62:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011b64:	88fb      	ldrh	r3, [r7, #6]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d222      	bcs.n	8011bb0 <pif_DecToString+0xf0>
            zero_str_cnt = str_cnt - exp_cnt;
 8011b6a:	88fa      	ldrh	r2, [r7, #6]
 8011b6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011b6e:	1ad3      	subs	r3, r2, r3
 8011b70:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 8011b72:	e00a      	b.n	8011b8a <pif_DecToString+0xca>
            	p_buffer[idx++] = '0';
 8011b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b76:	1c5a      	adds	r2, r3, #1
 8011b78:	62ba      	str	r2, [r7, #40]	; 0x28
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	4413      	add	r3, r2
 8011b80:	2230      	movs	r2, #48	; 0x30
 8011b82:	701a      	strb	r2, [r3, #0]
                zero_str_cnt--;
 8011b84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011b86:	3b01      	subs	r3, #1
 8011b88:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 8011b8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d1f1      	bne.n	8011b74 <pif_DecToString+0xb4>
            }
        }
        while (idx_inv) {
 8011b90:	e00e      	b.n	8011bb0 <pif_DecToString+0xf0>
            idx_inv--;
 8011b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b94:	3b01      	subs	r3, #1
 8011b96:	627b      	str	r3, [r7, #36]	; 0x24
            p_buffer[idx++] = inv_buf[idx_inv];
 8011b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b9a:	1c5a      	adds	r2, r3, #1
 8011b9c:	62ba      	str	r2, [r7, #40]	; 0x28
 8011b9e:	461a      	mov	r2, r3
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	4413      	add	r3, r2
 8011ba4:	f107 0114 	add.w	r1, r7, #20
 8011ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011baa:	440a      	add	r2, r1
 8011bac:	7812      	ldrb	r2, [r2, #0]
 8011bae:	701a      	strb	r2, [r3, #0]
        while (idx_inv) {
 8011bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d1ed      	bne.n	8011b92 <pif_DecToString+0xd2>
 8011bb6:	e012      	b.n	8011bde <pif_DecToString+0x11e>
        }
    }
    else {
        zero_str_cnt = str_cnt;
 8011bb8:	88fb      	ldrh	r3, [r7, #6]
 8011bba:	85bb      	strh	r3, [r7, #44]	; 0x2c
        do {
        	p_buffer[idx++] = '0';
 8011bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bbe:	1c5a      	adds	r2, r3, #1
 8011bc0:	62ba      	str	r2, [r7, #40]	; 0x28
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	4413      	add	r3, r2
 8011bc8:	2230      	movs	r2, #48	; 0x30
 8011bca:	701a      	strb	r2, [r3, #0]
            if (zero_str_cnt > 0) zero_str_cnt--;
 8011bcc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d002      	beq.n	8011bd8 <pif_DecToString+0x118>
 8011bd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011bd4:	3b01      	subs	r3, #1
 8011bd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
        while (zero_str_cnt);
 8011bd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d1ee      	bne.n	8011bbc <pif_DecToString+0xfc>
    }
    return idx;
 8011bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3734      	adds	r7, #52	; 0x34
 8011be4:	46bd      	mov	sp, r7
 8011be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bea:	4770      	bx	lr
 8011bec:	08027964 	.word	0x08027964
 8011bf0:	cccccccd 	.word	0xcccccccd

08011bf4 <pif_HexToString>:

int pif_HexToString(char* p_buffer, uint32_t value, uint16_t str_cnt, BOOL upper)
{
 8011bf4:	b480      	push	{r7}
 8011bf6:	b08b      	sub	sp, #44	; 0x2c
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	4611      	mov	r1, r2
 8011c00:	461a      	mov	r2, r3
 8011c02:	460b      	mov	r3, r1
 8011c04:	80fb      	strh	r3, [r7, #6]
 8011c06:	4613      	mov	r3, r2
 8011c08:	717b      	strb	r3, [r7, #5]
	int i, idx = 0;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	623b      	str	r3, [r7, #32]
	BOOL first;
    uint32_t tmp_val;
    const char* kHexChar = upper ? kPifHexUpperChar : kPifHexLowerChar;
 8011c0e:	797b      	ldrb	r3, [r7, #5]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d002      	beq.n	8011c1a <pif_HexToString+0x26>
 8011c14:	4b2f      	ldr	r3, [pc, #188]	; (8011cd4 <pif_HexToString+0xe0>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	e001      	b.n	8011c1e <pif_HexToString+0x2a>
 8011c1a:	4b2f      	ldr	r3, [pc, #188]	; (8011cd8 <pif_HexToString+0xe4>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	61bb      	str	r3, [r7, #24]

    if (str_cnt) {
 8011c20:	88fb      	ldrh	r3, [r7, #6]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d01d      	beq.n	8011c62 <pif_HexToString+0x6e>
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 8011c26:	88fb      	ldrh	r3, [r7, #6]
 8011c28:	3b01      	subs	r3, #1
 8011c2a:	009b      	lsls	r3, r3, #2
 8011c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8011c2e:	e014      	b.n	8011c5a <pif_HexToString+0x66>
    		tmp_val = (value >> i) & 0x0F;
 8011c30:	68ba      	ldr	r2, [r7, #8]
 8011c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c34:	fa22 f303 	lsr.w	r3, r2, r3
 8011c38:	f003 030f 	and.w	r3, r3, #15
 8011c3c:	617b      	str	r3, [r7, #20]
    		p_buffer[idx++] = kHexChar[tmp_val];
 8011c3e:	69ba      	ldr	r2, [r7, #24]
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	441a      	add	r2, r3
 8011c44:	6a3b      	ldr	r3, [r7, #32]
 8011c46:	1c59      	adds	r1, r3, #1
 8011c48:	6239      	str	r1, [r7, #32]
 8011c4a:	4619      	mov	r1, r3
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	440b      	add	r3, r1
 8011c50:	7812      	ldrb	r2, [r2, #0]
 8011c52:	701a      	strb	r2, [r3, #0]
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 8011c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c56:	3b04      	subs	r3, #4
 8011c58:	627b      	str	r3, [r7, #36]	; 0x24
 8011c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	dae7      	bge.n	8011c30 <pif_HexToString+0x3c>
 8011c60:	e030      	b.n	8011cc4 <pif_HexToString+0xd0>
    	}
    }
    else if (value > 0) {
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d025      	beq.n	8011cb4 <pif_HexToString+0xc0>
    	first = TRUE;
 8011c68:	2301      	movs	r3, #1
 8011c6a:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 8011c6c:	231c      	movs	r3, #28
 8011c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8011c70:	e01c      	b.n	8011cac <pif_HexToString+0xb8>
    		tmp_val = (value >> i) & 0x0F;
 8011c72:	68ba      	ldr	r2, [r7, #8]
 8011c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c76:	fa22 f303 	lsr.w	r3, r2, r3
 8011c7a:	f003 030f 	and.w	r3, r3, #15
 8011c7e:	617b      	str	r3, [r7, #20]
    		if (!first || tmp_val) {
 8011c80:	7ffb      	ldrb	r3, [r7, #31]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d002      	beq.n	8011c8c <pif_HexToString+0x98>
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d00c      	beq.n	8011ca6 <pif_HexToString+0xb2>
    			p_buffer[idx++] = kHexChar[tmp_val];
 8011c8c:	69ba      	ldr	r2, [r7, #24]
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	441a      	add	r2, r3
 8011c92:	6a3b      	ldr	r3, [r7, #32]
 8011c94:	1c59      	adds	r1, r3, #1
 8011c96:	6239      	str	r1, [r7, #32]
 8011c98:	4619      	mov	r1, r3
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	440b      	add	r3, r1
 8011c9e:	7812      	ldrb	r2, [r2, #0]
 8011ca0:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 8011ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca8:	3b04      	subs	r3, #4
 8011caa:	627b      	str	r3, [r7, #36]	; 0x24
 8011cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	dadf      	bge.n	8011c72 <pif_HexToString+0x7e>
 8011cb2:	e007      	b.n	8011cc4 <pif_HexToString+0xd0>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 8011cb4:	6a3b      	ldr	r3, [r7, #32]
 8011cb6:	1c5a      	adds	r2, r3, #1
 8011cb8:	623a      	str	r2, [r7, #32]
 8011cba:	461a      	mov	r2, r3
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	4413      	add	r3, r2
 8011cc0:	2230      	movs	r2, #48	; 0x30
 8011cc2:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 8011cc4:	6a3b      	ldr	r3, [r7, #32]
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	372c      	adds	r7, #44	; 0x2c
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd0:	4770      	bx	lr
 8011cd2:	bf00      	nop
 8011cd4:	20000060 	.word	0x20000060
 8011cd8:	20000064 	.word	0x20000064

08011cdc <pif_FloatToString>:

int pif_FloatToString(char* p_buffer, double value, uint16_t point)
{
 8011cdc:	b5b0      	push	{r4, r5, r7, lr}
 8011cde:	b086      	sub	sp, #24
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	ed87 0b00 	vstr	d0, [r7]
 8011ce8:	460b      	mov	r3, r1
 8011cea:	817b      	strh	r3, [r7, #10]
	uint16_t i, idx = 0;
 8011cec:	2300      	movs	r3, #0
 8011cee:	82bb      	strh	r3, [r7, #20]
	uint32_t num;

	if (value < 0.0) {
 8011cf0:	f04f 0200 	mov.w	r2, #0
 8011cf4:	f04f 0300 	mov.w	r3, #0
 8011cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011cfc:	f7ee feac 	bl	8000a58 <__aeabi_dcmplt>
 8011d00:	4603      	mov	r3, r0
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d00d      	beq.n	8011d22 <pif_FloatToString+0x46>
		p_buffer[idx++] = '-';
 8011d06:	8abb      	ldrh	r3, [r7, #20]
 8011d08:	1c5a      	adds	r2, r3, #1
 8011d0a:	82ba      	strh	r2, [r7, #20]
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	4413      	add	r3, r2
 8011d12:	222d      	movs	r2, #45	; 0x2d
 8011d14:	701a      	strb	r2, [r3, #0]
		value *= -1.0;
 8011d16:	683c      	ldr	r4, [r7, #0]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8011d1e:	e9c7 4500 	strd	r4, r5, [r7]
	}

	num = (uint32_t)value;
 8011d22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011d26:	f7ee fee7 	bl	8000af8 <__aeabi_d2uiz>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	613b      	str	r3, [r7, #16]
	idx += pif_DecToString(p_buffer + idx, num, 0);
 8011d2e:	8abb      	ldrh	r3, [r7, #20]
 8011d30:	68fa      	ldr	r2, [r7, #12]
 8011d32:	4413      	add	r3, r2
 8011d34:	2200      	movs	r2, #0
 8011d36:	6939      	ldr	r1, [r7, #16]
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f7ff fec1 	bl	8011ac0 <pif_DecToString>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	b29a      	uxth	r2, r3
 8011d42:	8abb      	ldrh	r3, [r7, #20]
 8011d44:	4413      	add	r3, r2
 8011d46:	82bb      	strh	r3, [r7, #20]
	p_buffer[idx++] = '.';
 8011d48:	8abb      	ldrh	r3, [r7, #20]
 8011d4a:	1c5a      	adds	r2, r3, #1
 8011d4c:	82ba      	strh	r2, [r7, #20]
 8011d4e:	461a      	mov	r2, r3
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	4413      	add	r3, r2
 8011d54:	222e      	movs	r2, #46	; 0x2e
 8011d56:	701a      	strb	r2, [r3, #0]

	if (point == 0) point = 6;
 8011d58:	897b      	ldrh	r3, [r7, #10]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d101      	bne.n	8011d62 <pif_FloatToString+0x86>
 8011d5e:	2306      	movs	r3, #6
 8011d60:	817b      	strh	r3, [r7, #10]
	value -= num;
 8011d62:	6938      	ldr	r0, [r7, #16]
 8011d64:	f7ee fb8c 	bl	8000480 <__aeabi_ui2d>
 8011d68:	4602      	mov	r2, r0
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011d70:	f7ee fa48 	bl	8000204 <__aeabi_dsub>
 8011d74:	4602      	mov	r2, r0
 8011d76:	460b      	mov	r3, r1
 8011d78:	e9c7 2300 	strd	r2, r3, [r7]
	for (i = 0; i < point; i++) value *= 10;
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	82fb      	strh	r3, [r7, #22]
 8011d80:	e00d      	b.n	8011d9e <pif_FloatToString+0xc2>
 8011d82:	f04f 0200 	mov.w	r2, #0
 8011d86:	4b13      	ldr	r3, [pc, #76]	; (8011dd4 <pif_FloatToString+0xf8>)
 8011d88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011d8c:	f7ee fbf2 	bl	8000574 <__aeabi_dmul>
 8011d90:	4602      	mov	r2, r0
 8011d92:	460b      	mov	r3, r1
 8011d94:	e9c7 2300 	strd	r2, r3, [r7]
 8011d98:	8afb      	ldrh	r3, [r7, #22]
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	82fb      	strh	r3, [r7, #22]
 8011d9e:	8afa      	ldrh	r2, [r7, #22]
 8011da0:	897b      	ldrh	r3, [r7, #10]
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d3ed      	bcc.n	8011d82 <pif_FloatToString+0xa6>

	idx += pif_DecToString(p_buffer + idx, (uint32_t)value, point);
 8011da6:	8abb      	ldrh	r3, [r7, #20]
 8011da8:	68fa      	ldr	r2, [r7, #12]
 8011daa:	18d4      	adds	r4, r2, r3
 8011dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011db0:	f7ee fea2 	bl	8000af8 <__aeabi_d2uiz>
 8011db4:	4601      	mov	r1, r0
 8011db6:	897b      	ldrh	r3, [r7, #10]
 8011db8:	461a      	mov	r2, r3
 8011dba:	4620      	mov	r0, r4
 8011dbc:	f7ff fe80 	bl	8011ac0 <pif_DecToString>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	b29a      	uxth	r2, r3
 8011dc4:	8abb      	ldrh	r3, [r7, #20]
 8011dc6:	4413      	add	r3, r2
 8011dc8:	82bb      	strh	r3, [r7, #20]
    return idx;
 8011dca:	8abb      	ldrh	r3, [r7, #20]
}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	3718      	adds	r7, #24
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8011dd4:	40240000 	.word	0x40240000

08011dd8 <pif_PrintFormat>:

void pif_PrintFormat(char* p_buffer, va_list* p_data, const char* p_format)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b08c      	sub	sp, #48	; 0x30
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	60b9      	str	r1, [r7, #8]
 8011de2:	607a      	str	r2, [r7, #4]
	unsigned long ulong_val;
	long long_val;
	uint16_t num_str_cnt;
	BOOL is_long;
	char *p_var_str;
	int offset = 0;
 8011de4:	2300      	movs	r3, #0
 8011de6:	623b      	str	r3, [r7, #32]
	size_t size;

	while (*p_format) {
 8011de8:	e242      	b.n	8012270 <pif_PrintFormat+0x498>
        if (*p_format == '%') {
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	2b25      	cmp	r3, #37	; 0x25
 8011df0:	f040 8230 	bne.w	8012254 <pif_PrintFormat+0x47c>
            num_str_cnt = 0;
 8011df4:	2300      	movs	r3, #0
 8011df6:	84fb      	strh	r3, [r7, #38]	; 0x26
        	is_long = FALSE;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
NEXT_STR:
			p_format = p_format + 1;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	3301      	adds	r3, #1
 8011e02:	607b      	str	r3, [r7, #4]
            switch(*p_format) {
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	781b      	ldrb	r3, [r3, #0]
 8011e08:	3b25      	subs	r3, #37	; 0x25
 8011e0a:	2b53      	cmp	r3, #83	; 0x53
 8011e0c:	f200 822d 	bhi.w	801226a <pif_PrintFormat+0x492>
 8011e10:	a201      	add	r2, pc, #4	; (adr r2, 8011e18 <pif_PrintFormat+0x40>)
 8011e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e16:	bf00      	nop
 8011e18:	08012243 	.word	0x08012243
 8011e1c:	0801226b 	.word	0x0801226b
 8011e20:	0801226b 	.word	0x0801226b
 8011e24:	0801226b 	.word	0x0801226b
 8011e28:	0801226b 	.word	0x0801226b
 8011e2c:	0801226b 	.word	0x0801226b
 8011e30:	0801226b 	.word	0x0801226b
 8011e34:	0801226b 	.word	0x0801226b
 8011e38:	0801226b 	.word	0x0801226b
 8011e3c:	0801226b 	.word	0x0801226b
 8011e40:	0801226b 	.word	0x0801226b
 8011e44:	08011f69 	.word	0x08011f69
 8011e48:	08011f69 	.word	0x08011f69
 8011e4c:	08011f69 	.word	0x08011f69
 8011e50:	08011f69 	.word	0x08011f69
 8011e54:	08011f69 	.word	0x08011f69
 8011e58:	08011f69 	.word	0x08011f69
 8011e5c:	08011f69 	.word	0x08011f69
 8011e60:	08011f69 	.word	0x08011f69
 8011e64:	08011f69 	.word	0x08011f69
 8011e68:	08011f69 	.word	0x08011f69
 8011e6c:	0801226b 	.word	0x0801226b
 8011e70:	0801226b 	.word	0x0801226b
 8011e74:	0801226b 	.word	0x0801226b
 8011e78:	0801226b 	.word	0x0801226b
 8011e7c:	0801226b 	.word	0x0801226b
 8011e80:	0801226b 	.word	0x0801226b
 8011e84:	0801226b 	.word	0x0801226b
 8011e88:	0801226b 	.word	0x0801226b
 8011e8c:	0801226b 	.word	0x0801226b
 8011e90:	0801226b 	.word	0x0801226b
 8011e94:	0801226b 	.word	0x0801226b
 8011e98:	0801226b 	.word	0x0801226b
 8011e9c:	0801226b 	.word	0x0801226b
 8011ea0:	0801226b 	.word	0x0801226b
 8011ea4:	0801226b 	.word	0x0801226b
 8011ea8:	0801226b 	.word	0x0801226b
 8011eac:	0801226b 	.word	0x0801226b
 8011eb0:	0801226b 	.word	0x0801226b
 8011eb4:	0801226b 	.word	0x0801226b
 8011eb8:	0801226b 	.word	0x0801226b
 8011ebc:	0801226b 	.word	0x0801226b
 8011ec0:	0801226b 	.word	0x0801226b
 8011ec4:	0801226b 	.word	0x0801226b
 8011ec8:	0801226b 	.word	0x0801226b
 8011ecc:	0801226b 	.word	0x0801226b
 8011ed0:	0801226b 	.word	0x0801226b
 8011ed4:	0801226b 	.word	0x0801226b
 8011ed8:	0801226b 	.word	0x0801226b
 8011edc:	0801226b 	.word	0x0801226b
 8011ee0:	0801226b 	.word	0x0801226b
 8011ee4:	0801213f 	.word	0x0801213f
 8011ee8:	0801226b 	.word	0x0801226b
 8011eec:	0801226b 	.word	0x0801226b
 8011ef0:	0801226b 	.word	0x0801226b
 8011ef4:	0801226b 	.word	0x0801226b
 8011ef8:	0801226b 	.word	0x0801226b
 8011efc:	0801226b 	.word	0x0801226b
 8011f00:	0801226b 	.word	0x0801226b
 8011f04:	0801226b 	.word	0x0801226b
 8011f08:	0801226b 	.word	0x0801226b
 8011f0c:	08011f8f 	.word	0x08011f8f
 8011f10:	08012225 	.word	0x08012225
 8011f14:	08011fe7 	.word	0x08011fe7
 8011f18:	0801226b 	.word	0x0801226b
 8011f1c:	08012197 	.word	0x08012197
 8011f20:	0801226b 	.word	0x0801226b
 8011f24:	0801226b 	.word	0x0801226b
 8011f28:	08011fe7 	.word	0x08011fe7
 8011f2c:	0801226b 	.word	0x0801226b
 8011f30:	0801226b 	.word	0x0801226b
 8011f34:	08011f87 	.word	0x08011f87
 8011f38:	0801226b 	.word	0x0801226b
 8011f3c:	0801226b 	.word	0x0801226b
 8011f40:	0801226b 	.word	0x0801226b
 8011f44:	0801226b 	.word	0x0801226b
 8011f48:	0801226b 	.word	0x0801226b
 8011f4c:	0801226b 	.word	0x0801226b
 8011f50:	080121cd 	.word	0x080121cd
 8011f54:	0801226b 	.word	0x0801226b
 8011f58:	0801208f 	.word	0x0801208f
 8011f5c:	0801226b 	.word	0x0801226b
 8011f60:	0801226b 	.word	0x0801226b
 8011f64:	080120e7 	.word	0x080120e7
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    num_str_cnt *= 10;
 8011f68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	0092      	lsls	r2, r2, #2
 8011f6e:	4413      	add	r3, r2
 8011f70:	005b      	lsls	r3, r3, #1
 8011f72:	84fb      	strh	r3, [r7, #38]	; 0x26
                    num_str_cnt += *p_format - '0';
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	b29a      	uxth	r2, r3
 8011f7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011f7c:	4413      	add	r3, r2
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	3b30      	subs	r3, #48	; 0x30
 8011f82:	84fb      	strh	r3, [r7, #38]	; 0x26
                    goto NEXT_STR;
 8011f84:	e73b      	b.n	8011dfe <pif_PrintFormat+0x26>

                case 'l':
					is_long = TRUE;
 8011f86:	2301      	movs	r3, #1
 8011f88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					goto NEXT_STR;
 8011f8c:	e737      	b.n	8011dfe <pif_PrintFormat+0x26>

                case 'b':
                	if (is_long) {
 8011f8e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d013      	beq.n	8011fbe <pif_PrintFormat+0x1e6>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	1d19      	adds	r1, r3, #4
 8011f9c:	68ba      	ldr	r2, [r7, #8]
 8011f9e:	6011      	str	r1, [r2, #0]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	617b      	str	r3, [r7, #20]
						offset += pif_BinToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011fa4:	6a3b      	ldr	r3, [r7, #32]
 8011fa6:	68fa      	ldr	r2, [r7, #12]
 8011fa8:	4413      	add	r3, r2
 8011faa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011fac:	6979      	ldr	r1, [r7, #20]
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7ff fd26 	bl	8011a00 <pif_BinToString>
 8011fb4:	4602      	mov	r2, r0
 8011fb6:	6a3b      	ldr	r3, [r7, #32]
 8011fb8:	4413      	add	r3, r2
 8011fba:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 8011fbc:	e155      	b.n	801226a <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	1d19      	adds	r1, r3, #4
 8011fc4:	68ba      	ldr	r2, [r7, #8]
 8011fc6:	6011      	str	r1, [r2, #0]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	61bb      	str	r3, [r7, #24]
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
 8011fcc:	6a3b      	ldr	r3, [r7, #32]
 8011fce:	68fa      	ldr	r2, [r7, #12]
 8011fd0:	4413      	add	r3, r2
 8011fd2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011fd4:	69b9      	ldr	r1, [r7, #24]
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7ff fd12 	bl	8011a00 <pif_BinToString>
 8011fdc:	4602      	mov	r2, r0
 8011fde:	6a3b      	ldr	r3, [r7, #32]
 8011fe0:	4413      	add	r3, r2
 8011fe2:	623b      	str	r3, [r7, #32]
                    break;
 8011fe4:	e141      	b.n	801226a <pif_PrintFormat+0x492>

                case 'd':
                case 'i':
                	if (is_long) {
 8011fe6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d027      	beq.n	801203e <pif_PrintFormat+0x266>
            			long_val = va_arg(*p_data, long);
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	1d19      	adds	r1, r3, #4
 8011ff4:	68ba      	ldr	r2, [r7, #8]
 8011ff6:	6011      	str	r1, [r2, #0]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	62bb      	str	r3, [r7, #40]	; 0x28
            			if (long_val < 0) {
 8011ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	da10      	bge.n	8012024 <pif_PrintFormat+0x24c>
            				p_buffer[offset++] = '-';
 8012002:	6a3b      	ldr	r3, [r7, #32]
 8012004:	1c5a      	adds	r2, r3, #1
 8012006:	623a      	str	r2, [r7, #32]
 8012008:	461a      	mov	r2, r3
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	4413      	add	r3, r2
 801200e:	222d      	movs	r2, #45	; 0x2d
 8012010:	701a      	strb	r2, [r3, #0]
            				long_val *= -1;
 8012012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012014:	425b      	negs	r3, r3
 8012016:	62bb      	str	r3, [r7, #40]	; 0x28
            				if (num_str_cnt) num_str_cnt--;
 8012018:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801201a:	2b00      	cmp	r3, #0
 801201c:	d002      	beq.n	8012024 <pif_PrintFormat+0x24c>
 801201e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012020:	3b01      	subs	r3, #1
 8012022:	84fb      	strh	r3, [r7, #38]	; 0x26
            			}
            			offset += pif_DecToString(p_buffer + offset, long_val, num_str_cnt);
 8012024:	6a3b      	ldr	r3, [r7, #32]
 8012026:	68fa      	ldr	r2, [r7, #12]
 8012028:	4413      	add	r3, r2
 801202a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801202c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801202e:	4618      	mov	r0, r3
 8012030:	f7ff fd46 	bl	8011ac0 <pif_DecToString>
 8012034:	4602      	mov	r2, r0
 8012036:	6a3b      	ldr	r3, [r7, #32]
 8012038:	4413      	add	r3, r2
 801203a:	623b      	str	r3, [r7, #32]
                			int_val *= -1;
                			if (num_str_cnt) num_str_cnt--;
            			}
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
                	}
                    break;
 801203c:	e115      	b.n	801226a <pif_PrintFormat+0x492>
            			int_val = va_arg(*p_data, int);
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	1d19      	adds	r1, r3, #4
 8012044:	68ba      	ldr	r2, [r7, #8]
 8012046:	6011      	str	r1, [r2, #0]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	62fb      	str	r3, [r7, #44]	; 0x2c
            			if (int_val < 0) {
 801204c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801204e:	2b00      	cmp	r3, #0
 8012050:	da10      	bge.n	8012074 <pif_PrintFormat+0x29c>
            				p_buffer[offset++] = '-';
 8012052:	6a3b      	ldr	r3, [r7, #32]
 8012054:	1c5a      	adds	r2, r3, #1
 8012056:	623a      	str	r2, [r7, #32]
 8012058:	461a      	mov	r2, r3
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	4413      	add	r3, r2
 801205e:	222d      	movs	r2, #45	; 0x2d
 8012060:	701a      	strb	r2, [r3, #0]
                			int_val *= -1;
 8012062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012064:	425b      	negs	r3, r3
 8012066:	62fb      	str	r3, [r7, #44]	; 0x2c
                			if (num_str_cnt) num_str_cnt--;
 8012068:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801206a:	2b00      	cmp	r3, #0
 801206c:	d002      	beq.n	8012074 <pif_PrintFormat+0x29c>
 801206e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012070:	3b01      	subs	r3, #1
 8012072:	84fb      	strh	r3, [r7, #38]	; 0x26
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
 8012074:	6a3b      	ldr	r3, [r7, #32]
 8012076:	68fa      	ldr	r2, [r7, #12]
 8012078:	4413      	add	r3, r2
 801207a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801207c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801207e:	4618      	mov	r0, r3
 8012080:	f7ff fd1e 	bl	8011ac0 <pif_DecToString>
 8012084:	4602      	mov	r2, r0
 8012086:	6a3b      	ldr	r3, [r7, #32]
 8012088:	4413      	add	r3, r2
 801208a:	623b      	str	r3, [r7, #32]
                    break;
 801208c:	e0ed      	b.n	801226a <pif_PrintFormat+0x492>

                case 'u':
                	if (is_long) {
 801208e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012092:	2b00      	cmp	r3, #0
 8012094:	d013      	beq.n	80120be <pif_PrintFormat+0x2e6>
						ulong_val = va_arg(*p_data, unsigned long);
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	1d19      	adds	r1, r3, #4
 801209c:	68ba      	ldr	r2, [r7, #8]
 801209e:	6011      	str	r1, [r2, #0]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	617b      	str	r3, [r7, #20]
						offset += pif_DecToString(p_buffer + offset, ulong_val, num_str_cnt);
 80120a4:	6a3b      	ldr	r3, [r7, #32]
 80120a6:	68fa      	ldr	r2, [r7, #12]
 80120a8:	4413      	add	r3, r2
 80120aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80120ac:	6979      	ldr	r1, [r7, #20]
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7ff fd06 	bl	8011ac0 <pif_DecToString>
 80120b4:	4602      	mov	r2, r0
 80120b6:	6a3b      	ldr	r3, [r7, #32]
 80120b8:	4413      	add	r3, r2
 80120ba:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 80120bc:	e0d5      	b.n	801226a <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	1d19      	adds	r1, r3, #4
 80120c4:	68ba      	ldr	r2, [r7, #8]
 80120c6:	6011      	str	r1, [r2, #0]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	61bb      	str	r3, [r7, #24]
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
 80120cc:	6a3b      	ldr	r3, [r7, #32]
 80120ce:	68fa      	ldr	r2, [r7, #12]
 80120d0:	4413      	add	r3, r2
 80120d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80120d4:	69b9      	ldr	r1, [r7, #24]
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7ff fcf2 	bl	8011ac0 <pif_DecToString>
 80120dc:	4602      	mov	r2, r0
 80120de:	6a3b      	ldr	r3, [r7, #32]
 80120e0:	4413      	add	r3, r2
 80120e2:	623b      	str	r3, [r7, #32]
                    break;
 80120e4:	e0c1      	b.n	801226a <pif_PrintFormat+0x492>

                case 'x':
                	if (is_long) {
 80120e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d013      	beq.n	8012116 <pif_PrintFormat+0x33e>
                		ulong_val = va_arg(*p_data, unsigned long);
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	1d19      	adds	r1, r3, #4
 80120f4:	68ba      	ldr	r2, [r7, #8]
 80120f6:	6011      	str	r1, [r2, #0]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	617b      	str	r3, [r7, #20]
						offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, FALSE);
 80120fc:	6a3b      	ldr	r3, [r7, #32]
 80120fe:	68fa      	ldr	r2, [r7, #12]
 8012100:	18d0      	adds	r0, r2, r3
 8012102:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012104:	2300      	movs	r3, #0
 8012106:	6979      	ldr	r1, [r7, #20]
 8012108:	f7ff fd74 	bl	8011bf4 <pif_HexToString>
 801210c:	4602      	mov	r2, r0
 801210e:	6a3b      	ldr	r3, [r7, #32]
 8012110:	4413      	add	r3, r2
 8012112:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
                	}
                    break;
 8012114:	e0a9      	b.n	801226a <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	1d19      	adds	r1, r3, #4
 801211c:	68ba      	ldr	r2, [r7, #8]
 801211e:	6011      	str	r1, [r2, #0]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	61bb      	str	r3, [r7, #24]
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
 8012124:	6a3b      	ldr	r3, [r7, #32]
 8012126:	68fa      	ldr	r2, [r7, #12]
 8012128:	18d0      	adds	r0, r2, r3
 801212a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801212c:	2300      	movs	r3, #0
 801212e:	69b9      	ldr	r1, [r7, #24]
 8012130:	f7ff fd60 	bl	8011bf4 <pif_HexToString>
 8012134:	4602      	mov	r2, r0
 8012136:	6a3b      	ldr	r3, [r7, #32]
 8012138:	4413      	add	r3, r2
 801213a:	623b      	str	r3, [r7, #32]
                    break;
 801213c:	e095      	b.n	801226a <pif_PrintFormat+0x492>

                case 'X':
                	if (is_long) {
 801213e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012142:	2b00      	cmp	r3, #0
 8012144:	d013      	beq.n	801216e <pif_PrintFormat+0x396>
                		ulong_val = va_arg(*p_data, unsigned long);
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	1d19      	adds	r1, r3, #4
 801214c:	68ba      	ldr	r2, [r7, #8]
 801214e:	6011      	str	r1, [r2, #0]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	617b      	str	r3, [r7, #20]
                		offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, TRUE);
 8012154:	6a3b      	ldr	r3, [r7, #32]
 8012156:	68fa      	ldr	r2, [r7, #12]
 8012158:	18d0      	adds	r0, r2, r3
 801215a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801215c:	2301      	movs	r3, #1
 801215e:	6979      	ldr	r1, [r7, #20]
 8012160:	f7ff fd48 	bl	8011bf4 <pif_HexToString>
 8012164:	4602      	mov	r2, r0
 8012166:	6a3b      	ldr	r3, [r7, #32]
 8012168:	4413      	add	r3, r2
 801216a:	623b      	str	r3, [r7, #32]
                	}
                	else {
                		uint_val = va_arg(*p_data, unsigned int);
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
                	}
                    break;
 801216c:	e07d      	b.n	801226a <pif_PrintFormat+0x492>
                		uint_val = va_arg(*p_data, unsigned int);
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	1d19      	adds	r1, r3, #4
 8012174:	68ba      	ldr	r2, [r7, #8]
 8012176:	6011      	str	r1, [r2, #0]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	61bb      	str	r3, [r7, #24]
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
 801217c:	6a3b      	ldr	r3, [r7, #32]
 801217e:	68fa      	ldr	r2, [r7, #12]
 8012180:	18d0      	adds	r0, r2, r3
 8012182:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012184:	2301      	movs	r3, #1
 8012186:	69b9      	ldr	r1, [r7, #24]
 8012188:	f7ff fd34 	bl	8011bf4 <pif_HexToString>
 801218c:	4602      	mov	r2, r0
 801218e:	6a3b      	ldr	r3, [r7, #32]
 8012190:	4413      	add	r3, r2
 8012192:	623b      	str	r3, [r7, #32]
                    break;
 8012194:	e069      	b.n	801226a <pif_PrintFormat+0x492>

                case 'f':
					offset += pif_FloatToString(p_buffer + offset, va_arg(*p_data, double), num_str_cnt);
 8012196:	6a3b      	ldr	r3, [r7, #32]
 8012198:	68fa      	ldr	r2, [r7, #12]
 801219a:	18d0      	adds	r0, r2, r3
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	3307      	adds	r3, #7
 80121a2:	f023 0307 	bic.w	r3, r3, #7
 80121a6:	f103 0108 	add.w	r1, r3, #8
 80121aa:	68ba      	ldr	r2, [r7, #8]
 80121ac:	6011      	str	r1, [r2, #0]
 80121ae:	ed93 7b00 	vldr	d7, [r3]
 80121b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80121b4:	4619      	mov	r1, r3
 80121b6:	eeb0 0a47 	vmov.f32	s0, s14
 80121ba:	eef0 0a67 	vmov.f32	s1, s15
 80121be:	f7ff fd8d 	bl	8011cdc <pif_FloatToString>
 80121c2:	4602      	mov	r2, r0
 80121c4:	6a3b      	ldr	r3, [r7, #32]
 80121c6:	4413      	add	r3, r2
 80121c8:	623b      	str	r3, [r7, #32]
                    break;
 80121ca:	e04e      	b.n	801226a <pif_PrintFormat+0x492>

                case 's':
                    p_var_str = va_arg(*p_data, char *);
 80121cc:	68bb      	ldr	r3, [r7, #8]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	1d19      	adds	r1, r3, #4
 80121d2:	68ba      	ldr	r2, [r7, #8]
 80121d4:	6011      	str	r1, [r2, #0]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	613b      	str	r3, [r7, #16]
                    if (p_var_str) {
 80121da:	693b      	ldr	r3, [r7, #16]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d043      	beq.n	8012268 <pif_PrintFormat+0x490>
						size = strlen(p_var_str);
 80121e0:	6938      	ldr	r0, [r7, #16]
 80121e2:	f7ee f803 	bl	80001ec <strlen>
 80121e6:	61f8      	str	r0, [r7, #28]
						if (offset + size < PIF_LOG_LINE_SIZE - 1) {
 80121e8:	6a3a      	ldr	r2, [r7, #32]
 80121ea:	69fb      	ldr	r3, [r7, #28]
 80121ec:	4413      	add	r3, r2
 80121ee:	2b4e      	cmp	r3, #78	; 0x4e
 80121f0:	d807      	bhi.n	8012202 <pif_PrintFormat+0x42a>
							strcpy(p_buffer + offset, p_var_str);
 80121f2:	6a3b      	ldr	r3, [r7, #32]
 80121f4:	68fa      	ldr	r2, [r7, #12]
 80121f6:	4413      	add	r3, r2
 80121f8:	6939      	ldr	r1, [r7, #16]
 80121fa:	4618      	mov	r0, r3
 80121fc:	f011 f98a 	bl	8023514 <strcpy>
 8012200:	e00b      	b.n	801221a <pif_PrintFormat+0x442>
						}
						else {
							size = PIF_LOG_LINE_SIZE - 1 - offset;
 8012202:	6a3b      	ldr	r3, [r7, #32]
 8012204:	f1c3 034f 	rsb	r3, r3, #79	; 0x4f
 8012208:	61fb      	str	r3, [r7, #28]
							strncpy(p_buffer + offset, p_var_str, size);
 801220a:	6a3b      	ldr	r3, [r7, #32]
 801220c:	68fa      	ldr	r2, [r7, #12]
 801220e:	4413      	add	r3, r2
 8012210:	69fa      	ldr	r2, [r7, #28]
 8012212:	6939      	ldr	r1, [r7, #16]
 8012214:	4618      	mov	r0, r3
 8012216:	f011 f9a7 	bl	8023568 <strncpy>
						}
						offset += size;
 801221a:	6a3a      	ldr	r2, [r7, #32]
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	4413      	add	r3, r2
 8012220:	623b      	str	r3, [r7, #32]
                    }
                    break;
 8012222:	e021      	b.n	8012268 <pif_PrintFormat+0x490>

                case 'c':
                	p_buffer[offset++] = va_arg(*p_data, int);
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	1d19      	adds	r1, r3, #4
 801222a:	68ba      	ldr	r2, [r7, #8]
 801222c:	6011      	str	r1, [r2, #0]
 801222e:	6819      	ldr	r1, [r3, #0]
 8012230:	6a3b      	ldr	r3, [r7, #32]
 8012232:	1c5a      	adds	r2, r3, #1
 8012234:	623a      	str	r2, [r7, #32]
 8012236:	461a      	mov	r2, r3
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	4413      	add	r3, r2
 801223c:	b2ca      	uxtb	r2, r1
 801223e:	701a      	strb	r2, [r3, #0]
                    break;
 8012240:	e013      	b.n	801226a <pif_PrintFormat+0x492>

                case '%':
                	p_buffer[offset++] = '%';
 8012242:	6a3b      	ldr	r3, [r7, #32]
 8012244:	1c5a      	adds	r2, r3, #1
 8012246:	623a      	str	r2, [r7, #32]
 8012248:	461a      	mov	r2, r3
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	4413      	add	r3, r2
 801224e:	2225      	movs	r2, #37	; 0x25
 8012250:	701a      	strb	r2, [r3, #0]
                    break;
 8012252:	e00a      	b.n	801226a <pif_PrintFormat+0x492>
            }
        }
        else {
        	p_buffer[offset++] = *p_format;
 8012254:	6a3b      	ldr	r3, [r7, #32]
 8012256:	1c5a      	adds	r2, r3, #1
 8012258:	623a      	str	r2, [r7, #32]
 801225a:	461a      	mov	r2, r3
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	4413      	add	r3, r2
 8012260:	687a      	ldr	r2, [r7, #4]
 8012262:	7812      	ldrb	r2, [r2, #0]
 8012264:	701a      	strb	r2, [r3, #0]
 8012266:	e000      	b.n	801226a <pif_PrintFormat+0x492>
                    break;
 8012268:	bf00      	nop
        }
        p_format = p_format + 1;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	3301      	adds	r3, #1
 801226e:	607b      	str	r3, [r7, #4]
	while (*p_format) {
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	2b00      	cmp	r3, #0
 8012276:	f47f adb8 	bne.w	8011dea <pif_PrintFormat+0x12>
	}
	p_buffer[offset] = 0;
 801227a:	6a3b      	ldr	r3, [r7, #32]
 801227c:	68fa      	ldr	r2, [r7, #12]
 801227e:	4413      	add	r3, r2
 8012280:	2200      	movs	r2, #0
 8012282:	701a      	strb	r2, [r3, #0]
}
 8012284:	bf00      	nop
 8012286:	3730      	adds	r7, #48	; 0x30
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}

0801228c <pif_Printf>:

void pif_Printf(char* p_buffer, const char* p_format, ...)
{
 801228c:	b40e      	push	{r1, r2, r3}
 801228e:	b580      	push	{r7, lr}
 8012290:	b085      	sub	sp, #20
 8012292:	af00      	add	r7, sp, #0
 8012294:	6078      	str	r0, [r7, #4]
	va_list data;

	va_start(data, p_format);
 8012296:	f107 0320 	add.w	r3, r7, #32
 801229a:	60fb      	str	r3, [r7, #12]
	pif_PrintFormat(p_buffer, &data, p_format);
 801229c:	f107 030c 	add.w	r3, r7, #12
 80122a0:	69fa      	ldr	r2, [r7, #28]
 80122a2:	4619      	mov	r1, r3
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f7ff fd97 	bl	8011dd8 <pif_PrintFormat>
	va_end(data);
}
 80122aa:	bf00      	nop
 80122ac:	3714      	adds	r7, #20
 80122ae:	46bd      	mov	sp, r7
 80122b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80122b4:	b003      	add	sp, #12
 80122b6:	4770      	bx	lr

080122b8 <pifCrc16_Add>:
	}
	return pifCrc7_Result(crc);
}

uint16_t pifCrc16_Add(uint16_t crc, uint8_t data)
{
 80122b8:	b480      	push	{r7}
 80122ba:	b085      	sub	sp, #20
 80122bc:	af00      	add	r7, sp, #0
 80122be:	4603      	mov	r3, r0
 80122c0:	460a      	mov	r2, r1
 80122c2:	80fb      	strh	r3, [r7, #6]
 80122c4:	4613      	mov	r3, r2
 80122c6:	717b      	strb	r3, [r7, #5]
	uint16_t i;

    crc ^= (uint16_t)data << 8;
 80122c8:	797b      	ldrb	r3, [r7, #5]
 80122ca:	021b      	lsls	r3, r3, #8
 80122cc:	b21a      	sxth	r2, r3
 80122ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122d2:	4053      	eors	r3, r2
 80122d4:	b21b      	sxth	r3, r3
 80122d6:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 80122d8:	2300      	movs	r3, #0
 80122da:	81fb      	strh	r3, [r7, #14]
 80122dc:	e013      	b.n	8012306 <pifCrc16_Add+0x4e>
        if (crc & 0x8000) crc = (crc << 1) ^ 0x1021;
 80122de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	da09      	bge.n	80122fa <pifCrc16_Add+0x42>
 80122e6:	88fb      	ldrh	r3, [r7, #6]
 80122e8:	005b      	lsls	r3, r3, #1
 80122ea:	b21b      	sxth	r3, r3
 80122ec:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80122f0:	f083 0301 	eor.w	r3, r3, #1
 80122f4:	b21b      	sxth	r3, r3
 80122f6:	80fb      	strh	r3, [r7, #6]
 80122f8:	e002      	b.n	8012300 <pifCrc16_Add+0x48>
        else crc <<= 1;
 80122fa:	88fb      	ldrh	r3, [r7, #6]
 80122fc:	005b      	lsls	r3, r3, #1
 80122fe:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8012300:	89fb      	ldrh	r3, [r7, #14]
 8012302:	3301      	adds	r3, #1
 8012304:	81fb      	strh	r3, [r7, #14]
 8012306:	89fb      	ldrh	r3, [r7, #14]
 8012308:	2b07      	cmp	r3, #7
 801230a:	d9e8      	bls.n	80122de <pifCrc16_Add+0x26>
    }
	return crc;
 801230c:	88fb      	ldrh	r3, [r7, #6]
}
 801230e:	4618      	mov	r0, r3
 8012310:	3714      	adds	r7, #20
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr

0801231a <pifCrc16>:

uint16_t pifCrc16(uint8_t* p_data, uint16_t length)
{
 801231a:	b580      	push	{r7, lr}
 801231c:	b084      	sub	sp, #16
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
 8012322:	460b      	mov	r3, r1
 8012324:	807b      	strh	r3, [r7, #2]
	uint16_t i, crc = 0;
 8012326:	2300      	movs	r3, #0
 8012328:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < length; i++) {
 801232a:	2300      	movs	r3, #0
 801232c:	81fb      	strh	r3, [r7, #14]
 801232e:	e00d      	b.n	801234c <pifCrc16+0x32>
		crc = pifCrc16_Add(crc, p_data[i]);
 8012330:	89fb      	ldrh	r3, [r7, #14]
 8012332:	687a      	ldr	r2, [r7, #4]
 8012334:	4413      	add	r3, r2
 8012336:	781a      	ldrb	r2, [r3, #0]
 8012338:	89bb      	ldrh	r3, [r7, #12]
 801233a:	4611      	mov	r1, r2
 801233c:	4618      	mov	r0, r3
 801233e:	f7ff ffbb 	bl	80122b8 <pifCrc16_Add>
 8012342:	4603      	mov	r3, r0
 8012344:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < length; i++) {
 8012346:	89fb      	ldrh	r3, [r7, #14]
 8012348:	3301      	adds	r3, #1
 801234a:	81fb      	strh	r3, [r7, #14]
 801234c:	89fa      	ldrh	r2, [r7, #14]
 801234e:	887b      	ldrh	r3, [r7, #2]
 8012350:	429a      	cmp	r2, r3
 8012352:	d3ed      	bcc.n	8012330 <pifCrc16+0x16>
	}
	return crc;
 8012354:	89bb      	ldrh	r3, [r7, #12]
}
 8012356:	4618      	mov	r0, r3
 8012358:	3710      	adds	r7, #16
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}

0801235e <pifCheckSum>:

uint32_t pifCheckSum(uint8_t* p_data, uint16_t length)
{
 801235e:	b480      	push	{r7}
 8012360:	b085      	sub	sp, #20
 8012362:	af00      	add	r7, sp, #0
 8012364:	6078      	str	r0, [r7, #4]
 8012366:	460b      	mov	r3, r1
 8012368:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint32_t sum = 0UL;
 801236a:	2300      	movs	r3, #0
 801236c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < length; i++) {
 801236e:	2300      	movs	r3, #0
 8012370:	81fb      	strh	r3, [r7, #14]
 8012372:	e00a      	b.n	801238a <pifCheckSum+0x2c>
		sum += p_data[i];
 8012374:	89fb      	ldrh	r3, [r7, #14]
 8012376:	687a      	ldr	r2, [r7, #4]
 8012378:	4413      	add	r3, r2
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	461a      	mov	r2, r3
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	4413      	add	r3, r2
 8012382:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < length; i++) {
 8012384:	89fb      	ldrh	r3, [r7, #14]
 8012386:	3301      	adds	r3, #1
 8012388:	81fb      	strh	r3, [r7, #14]
 801238a:	89fa      	ldrh	r2, [r7, #14]
 801238c:	887b      	ldrh	r3, [r7, #2]
 801238e:	429a      	cmp	r2, r3
 8012390:	d3f0      	bcc.n	8012374 <pifCheckSum+0x16>
	}
	return sum;
 8012392:	68bb      	ldr	r3, [r7, #8]
}
 8012394:	4618      	mov	r0, r3
 8012396:	3714      	adds	r7, #20
 8012398:	46bd      	mov	sp, r7
 801239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239e:	4770      	bx	lr

080123a0 <pifCheckXor>:

uint8_t pifCheckXor(uint8_t* p_data, uint16_t length)
{
 80123a0:	b480      	push	{r7}
 80123a2:	b085      	sub	sp, #20
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	460b      	mov	r3, r1
 80123aa:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint8_t xor = 0;
 80123ac:	2300      	movs	r3, #0
 80123ae:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < length; i++) {
 80123b0:	2300      	movs	r3, #0
 80123b2:	81fb      	strh	r3, [r7, #14]
 80123b4:	e009      	b.n	80123ca <pifCheckXor+0x2a>
		xor ^= p_data[i];
 80123b6:	89fb      	ldrh	r3, [r7, #14]
 80123b8:	687a      	ldr	r2, [r7, #4]
 80123ba:	4413      	add	r3, r2
 80123bc:	781a      	ldrb	r2, [r3, #0]
 80123be:	7b7b      	ldrb	r3, [r7, #13]
 80123c0:	4053      	eors	r3, r2
 80123c2:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < length; i++) {
 80123c4:	89fb      	ldrh	r3, [r7, #14]
 80123c6:	3301      	adds	r3, #1
 80123c8:	81fb      	strh	r3, [r7, #14]
 80123ca:	89fa      	ldrh	r2, [r7, #14]
 80123cc:	887b      	ldrh	r3, [r7, #2]
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d3f1      	bcc.n	80123b6 <pifCheckXor+0x16>
	}
	return xor;
 80123d2:	7b7b      	ldrb	r3, [r7, #13]
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3714      	adds	r7, #20
 80123d8:	46bd      	mov	sp, r7
 80123da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123de:	4770      	bx	lr

080123e0 <_actReceiveData>:
#include "core/pif_comm.h"


static BOOL _actReceiveData(PifComm* p_owner, uint8_t* p_data)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b082      	sub	sp, #8
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
 80123e8:	6039      	str	r1, [r7, #0]
	return pifRingBuffer_GetByte(p_owner->_p_rx_buffer, p_data);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	699b      	ldr	r3, [r3, #24]
 80123ee:	6839      	ldr	r1, [r7, #0]
 80123f0:	4618      	mov	r0, r3
 80123f2:	f001 fdb5 	bl	8013f60 <pifRingBuffer_GetByte>
 80123f6:	4603      	mov	r3, r0
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3708      	adds	r7, #8
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <_actSendData>:

static uint16_t _actSendData(PifComm* p_owner, uint8_t* p_buffer, uint16_t size)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b086      	sub	sp, #24
 8012404:	af00      	add	r7, sp, #0
 8012406:	60f8      	str	r0, [r7, #12]
 8012408:	60b9      	str	r1, [r7, #8]
 801240a:	4613      	mov	r3, r2
 801240c:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner->_p_tx_buffer);
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	695b      	ldr	r3, [r3, #20]
 8012412:	4618      	mov	r0, r3
 8012414:	f001 fc97 	bl	8013d46 <pifRingBuffer_GetRemainSize>
 8012418:	4603      	mov	r3, r0
 801241a:	82fb      	strh	r3, [r7, #22]

	if (!remain) return 0;
 801241c:	8afb      	ldrh	r3, [r7, #22]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d101      	bne.n	8012426 <_actSendData+0x26>
 8012422:	2300      	movs	r3, #0
 8012424:	e012      	b.n	801244c <_actSendData+0x4c>
	if (size > remain) size = remain;
 8012426:	88fa      	ldrh	r2, [r7, #6]
 8012428:	8afb      	ldrh	r3, [r7, #22]
 801242a:	429a      	cmp	r2, r3
 801242c:	d901      	bls.n	8012432 <_actSendData+0x32>
 801242e:	8afb      	ldrh	r3, [r7, #22]
 8012430:	80fb      	strh	r3, [r7, #6]
	if (pifRingBuffer_PutData(p_owner->_p_tx_buffer, p_buffer, size)) {
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	695b      	ldr	r3, [r3, #20]
 8012436:	88fa      	ldrh	r2, [r7, #6]
 8012438:	68b9      	ldr	r1, [r7, #8]
 801243a:	4618      	mov	r0, r3
 801243c:	f001 fcf8 	bl	8013e30 <pifRingBuffer_PutData>
 8012440:	4603      	mov	r3, r0
 8012442:	2b00      	cmp	r3, #0
 8012444:	d001      	beq.n	801244a <_actSendData+0x4a>
		return size;
 8012446:	88fb      	ldrh	r3, [r7, #6]
 8012448:	e000      	b.n	801244c <_actSendData+0x4c>
	}
	return 0;
 801244a:	2300      	movs	r3, #0
}
 801244c:	4618      	mov	r0, r3
 801244e:	3718      	adds	r7, #24
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}

08012454 <_sendData>:

static void _sendData(PifComm* p_owner)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
	if (p_owner->act_send_data) {
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	689b      	ldr	r3, [r3, #8]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d008      	beq.n	8012476 <_sendData+0x22>
		(*p_owner->__evt_sending)(p_owner->__p_client, p_owner->act_send_data);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012468:	687a      	ldr	r2, [r7, #4]
 801246a:	6a10      	ldr	r0, [r2, #32]
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	6892      	ldr	r2, [r2, #8]
 8012470:	4611      	mov	r1, r2
 8012472:	4798      	blx	r3
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
				}
			}
		}
	}
}
 8012474:	e025      	b.n	80124c2 <_sendData+0x6e>
	else if (p_owner->_p_tx_buffer) {
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	695b      	ldr	r3, [r3, #20]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d021      	beq.n	80124c2 <_sendData+0x6e>
		if ((*p_owner->__evt_sending)(p_owner->__p_client, _actSendData)) {
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012482:	687a      	ldr	r2, [r7, #4]
 8012484:	6a12      	ldr	r2, [r2, #32]
 8012486:	4911      	ldr	r1, [pc, #68]	; (80124cc <_sendData+0x78>)
 8012488:	4610      	mov	r0, r2
 801248a:	4798      	blx	r3
 801248c:	4603      	mov	r3, r0
 801248e:	2b00      	cmp	r3, #0
 8012490:	d017      	beq.n	80124c2 <_sendData+0x6e>
			if (p_owner->__state == CTS_IDLE) {
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012498:	2b00      	cmp	r3, #0
 801249a:	d112      	bne.n	80124c2 <_sendData+0x6e>
				p_owner->__state = CTS_SENDING;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2201      	movs	r2, #1
 80124a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if (p_owner->act_start_transfer) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	68db      	ldr	r3, [r3, #12]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d00a      	beq.n	80124c2 <_sendData+0x6e>
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	4798      	blx	r3
 80124b4:	4603      	mov	r3, r0
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d103      	bne.n	80124c2 <_sendData+0x6e>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2200      	movs	r2, #0
 80124be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80124c2:	bf00      	nop
 80124c4:	3708      	adds	r7, #8
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}
 80124ca:	bf00      	nop
 80124cc:	08012401 	.word	0x08012401

080124d0 <pifComm_Init>:

BOOL pifComm_Init(PifComm* p_owner, PifId id)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b082      	sub	sp, #8
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	460b      	mov	r3, r1
 80124da:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d104      	bne.n	80124ec <pifComm_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80124e2:	4b0e      	ldr	r3, [pc, #56]	; (801251c <pifComm_Init+0x4c>)
 80124e4:	2201      	movs	r2, #1
 80124e6:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 80124e8:	2300      	movs	r3, #0
 80124ea:	e012      	b.n	8012512 <pifComm_Init+0x42>
	}

	memset(p_owner, 0, sizeof(PifComm));
 80124ec:	2230      	movs	r2, #48	; 0x30
 80124ee:	2100      	movs	r1, #0
 80124f0:	6878      	ldr	r0, [r7, #4]
 80124f2:	f010 fecb 	bl	802328c <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 80124f6:	887b      	ldrh	r3, [r7, #2]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d106      	bne.n	801250a <pifComm_Init+0x3a>
 80124fc:	4b08      	ldr	r3, [pc, #32]	; (8012520 <pifComm_Init+0x50>)
 80124fe:	881b      	ldrh	r3, [r3, #0]
 8012500:	1c5a      	adds	r2, r3, #1
 8012502:	b291      	uxth	r1, r2
 8012504:	4a06      	ldr	r2, [pc, #24]	; (8012520 <pifComm_Init+0x50>)
 8012506:	8011      	strh	r1, [r2, #0]
 8012508:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	887a      	ldrh	r2, [r7, #2]
 801250e:	821a      	strh	r2, [r3, #16]
    return TRUE;
 8012510:	2301      	movs	r3, #1
}
 8012512:	4618      	mov	r0, r3
 8012514:	3708      	adds	r7, #8
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
 801251a:	bf00      	nop
 801251c:	20001ef0 	.word	0x20001ef0
 8012520:	2000005c 	.word	0x2000005c

08012524 <pifComm_Clear>:

void pifComm_Clear(PifComm* p_owner)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	69db      	ldr	r3, [r3, #28]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d007      	beq.n	8012544 <pifComm_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	69db      	ldr	r3, [r3, #28]
 8012538:	4618      	mov	r0, r3
 801253a:	f002 f9dd 	bl	80148f8 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2200      	movs	r2, #0
 8012542:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_rx_buffer) pifRingBuffer_Destroy(&p_owner->_p_rx_buffer);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	699b      	ldr	r3, [r3, #24]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d004      	beq.n	8012556 <pifComm_Clear+0x32>
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	3318      	adds	r3, #24
 8012550:	4618      	mov	r0, r3
 8012552:	f001 fae5 	bl	8013b20 <pifRingBuffer_Destroy>
	if (p_owner->_p_tx_buffer) pifRingBuffer_Destroy(&p_owner->_p_tx_buffer);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	695b      	ldr	r3, [r3, #20]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d004      	beq.n	8012568 <pifComm_Clear+0x44>
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	3314      	adds	r3, #20
 8012562:	4618      	mov	r0, r3
 8012564:	f001 fadc 	bl	8013b20 <pifRingBuffer_Destroy>
}
 8012568:	bf00      	nop
 801256a:	3708      	adds	r7, #8
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <pifComm_AllocRxBuffer>:

BOOL pifComm_AllocRxBuffer(PifComm* p_owner, uint16_t rx_size, uint8_t threshold)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b082      	sub	sp, #8
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
 8012578:	460b      	mov	r3, r1
 801257a:	807b      	strh	r3, [r7, #2]
 801257c:	4613      	mov	r3, r2
 801257e:	707b      	strb	r3, [r7, #1]
    if (!rx_size) {
 8012580:	887b      	ldrh	r3, [r7, #2]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d104      	bne.n	8012590 <pifComm_AllocRxBuffer+0x20>
    	pif_error = E_INVALID_PARAM;
 8012586:	4b1a      	ldr	r3, [pc, #104]	; (80125f0 <pifComm_AllocRxBuffer+0x80>)
 8012588:	2201      	movs	r2, #1
 801258a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801258c:	2300      	movs	r3, #0
 801258e:	e02a      	b.n	80125e6 <pifComm_AllocRxBuffer+0x76>
    }

    p_owner->_p_rx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, rx_size);
 8012590:	887b      	ldrh	r3, [r7, #2]
 8012592:	4619      	mov	r1, r3
 8012594:	2000      	movs	r0, #0
 8012596:	f001 fa97 	bl	8013ac8 <pifRingBuffer_CreateHeap>
 801259a:	4602      	mov	r2, r0
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	619a      	str	r2, [r3, #24]
    if (!p_owner->_p_rx_buffer) return FALSE;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	699b      	ldr	r3, [r3, #24]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d101      	bne.n	80125ac <pifComm_AllocRxBuffer+0x3c>
 80125a8:	2300      	movs	r3, #0
 80125aa:	e01c      	b.n	80125e6 <pifComm_AllocRxBuffer+0x76>
    if (threshold > 100) threshold = 100;
 80125ac:	787b      	ldrb	r3, [r7, #1]
 80125ae:	2b64      	cmp	r3, #100	; 0x64
 80125b0:	d901      	bls.n	80125b6 <pifComm_AllocRxBuffer+0x46>
 80125b2:	2364      	movs	r3, #100	; 0x64
 80125b4:	707b      	strb	r3, [r7, #1]
    p_owner->__rx_threshold = rx_size * 100 / threshold;
 80125b6:	887b      	ldrh	r3, [r7, #2]
 80125b8:	2264      	movs	r2, #100	; 0x64
 80125ba:	fb03 f202 	mul.w	r2, r3, r2
 80125be:	787b      	ldrb	r3, [r7, #1]
 80125c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80125c4:	b29a      	uxth	r2, r3
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	84da      	strh	r2, [r3, #38]	; 0x26
    if (p_owner->__rx_threshold == 0) p_owner->__rx_threshold = 1;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d102      	bne.n	80125d8 <pifComm_AllocRxBuffer+0x68>
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2201      	movs	r2, #1
 80125d6:	84da      	strh	r2, [r3, #38]	; 0x26
    pifRingBuffer_SetName(p_owner->_p_rx_buffer, "RB");
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	699b      	ldr	r3, [r3, #24]
 80125dc:	4905      	ldr	r1, [pc, #20]	; (80125f4 <pifComm_AllocRxBuffer+0x84>)
 80125de:	4618      	mov	r0, r3
 80125e0:	f001 fb19 	bl	8013c16 <pifRingBuffer_SetName>
    return TRUE;
 80125e4:	2301      	movs	r3, #1
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3708      	adds	r7, #8
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	bf00      	nop
 80125f0:	20001ef0 	.word	0x20001ef0
 80125f4:	08027970 	.word	0x08027970

080125f8 <pifComm_AllocTxBuffer>:

BOOL pifComm_AllocTxBuffer(PifComm* p_owner, uint16_t tx_size)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b082      	sub	sp, #8
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
 8012600:	460b      	mov	r3, r1
 8012602:	807b      	strh	r3, [r7, #2]
	if (!tx_size) {
 8012604:	887b      	ldrh	r3, [r7, #2]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d104      	bne.n	8012614 <pifComm_AllocTxBuffer+0x1c>
    	pif_error = E_INVALID_PARAM;
 801260a:	4b0f      	ldr	r3, [pc, #60]	; (8012648 <pifComm_AllocTxBuffer+0x50>)
 801260c:	2201      	movs	r2, #1
 801260e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012610:	2300      	movs	r3, #0
 8012612:	e014      	b.n	801263e <pifComm_AllocTxBuffer+0x46>
    }

    p_owner->_p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, tx_size);
 8012614:	887b      	ldrh	r3, [r7, #2]
 8012616:	4619      	mov	r1, r3
 8012618:	2000      	movs	r0, #0
 801261a:	f001 fa55 	bl	8013ac8 <pifRingBuffer_CreateHeap>
 801261e:	4602      	mov	r2, r0
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	615a      	str	r2, [r3, #20]
    if (!p_owner->_p_tx_buffer) return FALSE;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	695b      	ldr	r3, [r3, #20]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d101      	bne.n	8012630 <pifComm_AllocTxBuffer+0x38>
 801262c:	2300      	movs	r3, #0
 801262e:	e006      	b.n	801263e <pifComm_AllocTxBuffer+0x46>
    pifRingBuffer_SetName(p_owner->_p_tx_buffer, "TB");
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	695b      	ldr	r3, [r3, #20]
 8012634:	4905      	ldr	r1, [pc, #20]	; (801264c <pifComm_AllocTxBuffer+0x54>)
 8012636:	4618      	mov	r0, r3
 8012638:	f001 faed 	bl	8013c16 <pifRingBuffer_SetName>
	return TRUE;
 801263c:	2301      	movs	r3, #1
}
 801263e:	4618      	mov	r0, r3
 8012640:	3708      	adds	r7, #8
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	20001ef0 	.word	0x20001ef0
 801264c:	08027974 	.word	0x08027974

08012650 <pifComm_AttachClient>:

void pifComm_AttachClient(PifComm* p_owner, void* p_client, PifEvtCommParsing evt_parsing, PifEvtCommSending evt_sending)
{
 8012650:	b480      	push	{r7}
 8012652:	b085      	sub	sp, #20
 8012654:	af00      	add	r7, sp, #0
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
 801265c:	603b      	str	r3, [r7, #0]
	p_owner->__p_client = p_client;
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	68ba      	ldr	r2, [r7, #8]
 8012662:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = evt_parsing;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	687a      	ldr	r2, [r7, #4]
 8012668:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = evt_sending;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	683a      	ldr	r2, [r7, #0]
 801266e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012670:	bf00      	nop
 8012672:	3714      	adds	r7, #20
 8012674:	46bd      	mov	sp, r7
 8012676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267a:	4770      	bx	lr

0801267c <pifComm_DetachClient>:

void pifComm_DetachClient(PifComm* p_owner)
{
 801267c:	b480      	push	{r7}
 801267e:	b083      	sub	sp, #12
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
	p_owner->__p_client = NULL;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2200      	movs	r2, #0
 8012688:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = NULL;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2200      	movs	r2, #0
 801268e:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = NULL;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2200      	movs	r2, #0
 8012694:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012696:	bf00      	nop
 8012698:	370c      	adds	r7, #12
 801269a:	46bd      	mov	sp, r7
 801269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a0:	4770      	bx	lr

080126a2 <pifComm_PutRxByte>:
{
	return pifRingBuffer_GetFillSize(p_owner->_p_tx_buffer);
}

BOOL pifComm_PutRxByte(PifComm* p_owner, uint8_t data)
{
 80126a2:	b580      	push	{r7, lr}
 80126a4:	b082      	sub	sp, #8
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	6078      	str	r0, [r7, #4]
 80126aa:	460b      	mov	r3, r1
 80126ac:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->_p_rx_buffer) return FALSE;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	699b      	ldr	r3, [r3, #24]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d101      	bne.n	80126ba <pifComm_PutRxByte+0x18>
 80126b6:	2300      	movs	r3, #0
 80126b8:	e01b      	b.n	80126f2 <pifComm_PutRxByte+0x50>

	if (!pifRingBuffer_PutByte(p_owner->_p_rx_buffer, data)) return FALSE;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	699b      	ldr	r3, [r3, #24]
 80126be:	78fa      	ldrb	r2, [r7, #3]
 80126c0:	4611      	mov	r1, r2
 80126c2:	4618      	mov	r0, r3
 80126c4:	f001 fb80 	bl	8013dc8 <pifRingBuffer_PutByte>
 80126c8:	4603      	mov	r3, r0
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d101      	bne.n	80126d2 <pifComm_PutRxByte+0x30>
 80126ce:	2300      	movs	r3, #0
 80126d0:	e00f      	b.n	80126f2 <pifComm_PutRxByte+0x50>
	if (pifRingBuffer_GetFillSize(p_owner->_p_rx_buffer) >= p_owner->__rx_threshold) p_owner->_p_task->immediate = TRUE;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	699b      	ldr	r3, [r3, #24]
 80126d6:	4618      	mov	r0, r3
 80126d8:	f001 faea 	bl	8013cb0 <pifRingBuffer_GetFillSize>
 80126dc:	4603      	mov	r3, r0
 80126de:	461a      	mov	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d303      	bcc.n	80126f0 <pifComm_PutRxByte+0x4e>
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	69db      	ldr	r3, [r3, #28]
 80126ec:	2201      	movs	r2, #1
 80126ee:	705a      	strb	r2, [r3, #1]
	return TRUE;
 80126f0:	2301      	movs	r3, #1
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3708      	adds	r7, #8
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}

080126fa <pifComm_StartGetTxData>:
	else ucState |= PIF_COMM_SEND_DATA_STATE_EMPTY;
	return ucState;
}

uint8_t pifComm_StartGetTxData(PifComm* p_owner, uint8_t** pp_data, uint16_t* p_length)
{
 80126fa:	b580      	push	{r7, lr}
 80126fc:	b086      	sub	sp, #24
 80126fe:	af00      	add	r7, sp, #0
 8012700:	60f8      	str	r0, [r7, #12]
 8012702:	60b9      	str	r1, [r7, #8]
 8012704:	607a      	str	r2, [r7, #4]
	uint16_t usLength;

    if (!p_owner->_p_tx_buffer) return PIF_COMM_SEND_DATA_STATE_INIT;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	695b      	ldr	r3, [r3, #20]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d101      	bne.n	8012712 <pifComm_StartGetTxData+0x18>
 801270e:	2300      	movs	r3, #0
 8012710:	e027      	b.n	8012762 <pifComm_StartGetTxData+0x68>
    if (pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer)) return PIF_COMM_SEND_DATA_STATE_EMPTY;
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	695b      	ldr	r3, [r3, #20]
 8012716:	4618      	mov	r0, r3
 8012718:	f001 fab7 	bl	8013c8a <pifRingBuffer_IsEmpty>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	d001      	beq.n	8012726 <pifComm_StartGetTxData+0x2c>
 8012722:	2302      	movs	r3, #2
 8012724:	e01d      	b.n	8012762 <pifComm_StartGetTxData+0x68>

    *pp_data = pifRingBuffer_GetTailPointer(p_owner->_p_tx_buffer, 0);
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	695b      	ldr	r3, [r3, #20]
 801272a:	2100      	movs	r1, #0
 801272c:	4618      	mov	r0, r3
 801272e:	f001 fa80 	bl	8013c32 <pifRingBuffer_GetTailPointer>
 8012732:	4602      	mov	r2, r0
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	601a      	str	r2, [r3, #0]
    usLength = pifRingBuffer_GetLinerSize(p_owner->_p_tx_buffer, 0);
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	695b      	ldr	r3, [r3, #20]
 801273c:	2100      	movs	r1, #0
 801273e:	4618      	mov	r0, r3
 8012740:	f001 fad8 	bl	8013cf4 <pifRingBuffer_GetLinerSize>
 8012744:	4603      	mov	r3, r0
 8012746:	82fb      	strh	r3, [r7, #22]
    if (!*p_length || usLength <= *p_length) *p_length = usLength;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	881b      	ldrh	r3, [r3, #0]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d004      	beq.n	801275a <pifComm_StartGetTxData+0x60>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	881b      	ldrh	r3, [r3, #0]
 8012754:	8afa      	ldrh	r2, [r7, #22]
 8012756:	429a      	cmp	r2, r3
 8012758:	d802      	bhi.n	8012760 <pifComm_StartGetTxData+0x66>
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	8afa      	ldrh	r2, [r7, #22]
 801275e:	801a      	strh	r2, [r3, #0]
	return PIF_COMM_SEND_DATA_STATE_DATA;
 8012760:	2301      	movs	r3, #1
}
 8012762:	4618      	mov	r0, r3
 8012764:	3718      	adds	r7, #24
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}

0801276a <pifComm_EndGetTxData>:

uint8_t pifComm_EndGetTxData(PifComm* p_owner, uint16_t length)
{
 801276a:	b580      	push	{r7, lr}
 801276c:	b082      	sub	sp, #8
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
 8012772:	460b      	mov	r3, r1
 8012774:	807b      	strh	r3, [r7, #2]
    pifRingBuffer_Remove(p_owner->_p_tx_buffer, length);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	695b      	ldr	r3, [r3, #20]
 801277a:	887a      	ldrh	r2, [r7, #2]
 801277c:	4611      	mov	r1, r2
 801277e:	4618      	mov	r0, r3
 8012780:	f001 fc5f 	bl	8014042 <pifRingBuffer_Remove>
	return pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer) << 1;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	695b      	ldr	r3, [r3, #20]
 8012788:	4618      	mov	r0, r3
 801278a:	f001 fa7e 	bl	8013c8a <pifRingBuffer_IsEmpty>
 801278e:	4603      	mov	r3, r0
 8012790:	005b      	lsls	r3, r3, #1
 8012792:	b2db      	uxtb	r3, r3
}
 8012794:	4618      	mov	r0, r3
 8012796:	3708      	adds	r7, #8
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}

0801279c <pifComm_FinishTransfer>:
	}
	return FALSE;
}

void pifComm_FinishTransfer(PifComm* p_owner)
{
 801279c:	b480      	push	{r7}
 801279e:	b083      	sub	sp, #12
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
	p_owner->__state = CTS_IDLE;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2200      	movs	r2, #0
 80127a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	p_owner->_p_task->immediate = TRUE;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	69db      	ldr	r3, [r3, #28]
 80127b0:	2201      	movs	r2, #1
 80127b2:	705a      	strb	r2, [r3, #1]
}
 80127b4:	bf00      	nop
 80127b6:	370c      	adds	r7, #12
 80127b8:	46bd      	mov	sp, r7
 80127ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127be:	4770      	bx	lr

080127c0 <_doTask>:
{
	if (p_owner->__evt_sending) _sendData(p_owner);
}

static uint16_t _doTask(PifTask* p_task)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b084      	sub	sp, #16
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
	PifComm *p_owner = p_task->_p_client;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	68db      	ldr	r3, [r3, #12]
 80127cc:	60fb      	str	r3, [r7, #12]

	if (p_owner->__evt_parsing) {
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d017      	beq.n	8012806 <_doTask+0x46>
		if (p_owner->act_receive_data) {
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	685b      	ldr	r3, [r3, #4]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d008      	beq.n	80127f0 <_doTask+0x30>
			(*p_owner->__evt_parsing)(p_owner->__p_client, p_owner->act_receive_data);
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127e2:	68fa      	ldr	r2, [r7, #12]
 80127e4:	6a10      	ldr	r0, [r2, #32]
 80127e6:	68fa      	ldr	r2, [r7, #12]
 80127e8:	6852      	ldr	r2, [r2, #4]
 80127ea:	4611      	mov	r1, r2
 80127ec:	4798      	blx	r3
 80127ee:	e00a      	b.n	8012806 <_doTask+0x46>
		}
		else if (p_owner->_p_rx_buffer) {
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	699b      	ldr	r3, [r3, #24]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d006      	beq.n	8012806 <_doTask+0x46>
			(*p_owner->__evt_parsing)(p_owner->__p_client, _actReceiveData);
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127fc:	68fa      	ldr	r2, [r7, #12]
 80127fe:	6a12      	ldr	r2, [r2, #32]
 8012800:	4907      	ldr	r1, [pc, #28]	; (8012820 <_doTask+0x60>)
 8012802:	4610      	mov	r0, r2
 8012804:	4798      	blx	r3
		}
	}

	if (p_owner->__evt_sending) _sendData(p_owner);
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801280a:	2b00      	cmp	r3, #0
 801280c:	d002      	beq.n	8012814 <_doTask+0x54>
 801280e:	68f8      	ldr	r0, [r7, #12]
 8012810:	f7ff fe20 	bl	8012454 <_sendData>
	return 0;
 8012814:	2300      	movs	r3, #0
}
 8012816:	4618      	mov	r0, r3
 8012818:	3710      	adds	r7, #16
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}
 801281e:	bf00      	nop
 8012820:	080123e1 	.word	0x080123e1

08012824 <pifComm_AttachTask>:

PifTask* pifComm_AttachTask(PifComm* p_owner, PifTaskMode mode, uint16_t period, BOOL start)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af02      	add	r7, sp, #8
 801282a:	6078      	str	r0, [r7, #4]
 801282c:	4608      	mov	r0, r1
 801282e:	4611      	mov	r1, r2
 8012830:	461a      	mov	r2, r3
 8012832:	4603      	mov	r3, r0
 8012834:	70fb      	strb	r3, [r7, #3]
 8012836:	460b      	mov	r3, r1
 8012838:	803b      	strh	r3, [r7, #0]
 801283a:	4613      	mov	r3, r2
 801283c:	70bb      	strb	r3, [r7, #2]
	p_owner->_p_task = pifTaskManager_Add(mode, period, _doTask, p_owner, start);
 801283e:	8839      	ldrh	r1, [r7, #0]
 8012840:	78f8      	ldrb	r0, [r7, #3]
 8012842:	78bb      	ldrb	r3, [r7, #2]
 8012844:	9300      	str	r3, [sp, #0]
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	4a05      	ldr	r2, [pc, #20]	; (8012860 <pifComm_AttachTask+0x3c>)
 801284a:	f001 fff1 	bl	8014830 <pifTaskManager_Add>
 801284e:	4602      	mov	r2, r0
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	61da      	str	r2, [r3, #28]
	return p_owner->_p_task;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	69db      	ldr	r3, [r3, #28]
}
 8012858:	4618      	mov	r0, r3
 801285a:	3708      	adds	r7, #8
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}
 8012860:	080127c1 	.word	0x080127c1

08012864 <pifI2cPort_Init>:
#endif
#include "core/pif_task.h"


BOOL pifI2cPort_Init(PifI2cPort* p_owner, PifId id, uint8_t device_count, uint16_t max_transfer_size)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
 801286a:	60f8      	str	r0, [r7, #12]
 801286c:	4608      	mov	r0, r1
 801286e:	4611      	mov	r1, r2
 8012870:	461a      	mov	r2, r3
 8012872:	4603      	mov	r3, r0
 8012874:	817b      	strh	r3, [r7, #10]
 8012876:	460b      	mov	r3, r1
 8012878:	727b      	strb	r3, [r7, #9]
 801287a:	4613      	mov	r3, r2
 801287c:	80fb      	strh	r3, [r7, #6]
	if (!p_owner || !device_count || !max_transfer_size) {
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d005      	beq.n	8012890 <pifI2cPort_Init+0x2c>
 8012884:	7a7b      	ldrb	r3, [r7, #9]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d002      	beq.n	8012890 <pifI2cPort_Init+0x2c>
 801288a:	88fb      	ldrh	r3, [r7, #6]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d104      	bne.n	801289a <pifI2cPort_Init+0x36>
		pif_error = E_INVALID_PARAM;
 8012890:	4b17      	ldr	r3, [pc, #92]	; (80128f0 <pifI2cPort_Init+0x8c>)
 8012892:	2201      	movs	r2, #1
 8012894:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012896:	2300      	movs	r3, #0
 8012898:	e025      	b.n	80128e6 <pifI2cPort_Init+0x82>
	}

    memset(p_owner, 0, sizeof(PifI2cPort));
 801289a:	2230      	movs	r2, #48	; 0x30
 801289c:	2100      	movs	r1, #0
 801289e:	68f8      	ldr	r0, [r7, #12]
 80128a0:	f010 fcf4 	bl	802328c <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 80128a4:	897b      	ldrh	r3, [r7, #10]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d106      	bne.n	80128b8 <pifI2cPort_Init+0x54>
 80128aa:	4b12      	ldr	r3, [pc, #72]	; (80128f4 <pifI2cPort_Init+0x90>)
 80128ac:	881b      	ldrh	r3, [r3, #0]
 80128ae:	1c5a      	adds	r2, r3, #1
 80128b0:	b291      	uxth	r1, r2
 80128b2:	4a10      	ldr	r2, [pc, #64]	; (80128f4 <pifI2cPort_Init+0x90>)
 80128b4:	8011      	strh	r1, [r2, #0]
 80128b6:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	897a      	ldrh	r2, [r7, #10]
 80128bc:	819a      	strh	r2, [r3, #12]
    p_owner->__max_transfer_size = max_transfer_size;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	88fa      	ldrh	r2, [r7, #6]
 80128c2:	851a      	strh	r2, [r3, #40]	; 0x28
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	3310      	adds	r3, #16
 80128c8:	7a7a      	ldrb	r2, [r7, #9]
 80128ca:	2108      	movs	r1, #8
 80128cc:	4618      	mov	r0, r3
 80128ce:	f000 fac5 	bl	8012e5c <pifFixList_Init>
 80128d2:	4603      	mov	r3, r0
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d001      	beq.n	80128dc <pifI2cPort_Init+0x78>
    return TRUE;
 80128d8:	2301      	movs	r3, #1
 80128da:	e004      	b.n	80128e6 <pifI2cPort_Init+0x82>
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 80128dc:	bf00      	nop

fail:
	pifI2cPort_Clear(p_owner);
 80128de:	68f8      	ldr	r0, [r7, #12]
 80128e0:	f000 f80a 	bl	80128f8 <pifI2cPort_Clear>
	return FALSE;
 80128e4:	2300      	movs	r3, #0
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3710      	adds	r7, #16
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	20001ef0 	.word	0x20001ef0
 80128f4:	2000005c 	.word	0x2000005c

080128f8 <pifI2cPort_Clear>:

void pifI2cPort_Clear(PifI2cPort* p_owner)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b082      	sub	sp, #8
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
	pifFixList_Clear(&p_owner->__devices, NULL);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	3310      	adds	r3, #16
 8012904:	2100      	movs	r1, #0
 8012906:	4618      	mov	r0, r3
 8012908:	f000 fb08 	bl	8012f1c <pifFixList_Clear>
}
 801290c:	bf00      	nop
 801290e:	3708      	adds	r7, #8
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}

08012914 <pifI2cPort_AddDevice>:

PifI2cDevice* pifI2cPort_AddDevice(PifI2cPort* p_owner)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b084      	sub	sp, #16
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
	if (!p_owner) {
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d104      	bne.n	801292c <pifI2cPort_AddDevice+0x18>
		pif_error = E_INVALID_PARAM;
 8012922:	4b0d      	ldr	r3, [pc, #52]	; (8012958 <pifI2cPort_AddDevice+0x44>)
 8012924:	2201      	movs	r2, #1
 8012926:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012928:	2300      	movs	r3, #0
 801292a:	e011      	b.n	8012950 <pifI2cPort_AddDevice+0x3c>
	}

	PifI2cDevice* p_device = (PifI2cDevice*)pifFixList_AddFirst(&p_owner->__devices);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	3310      	adds	r3, #16
 8012930:	4618      	mov	r0, r3
 8012932:	f000 fb26 	bl	8012f82 <pifFixList_AddFirst>
 8012936:	60f8      	str	r0, [r7, #12]
    if (!p_device) return FALSE;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d101      	bne.n	8012942 <pifI2cPort_AddDevice+0x2e>
 801293e:	2300      	movs	r3, #0
 8012940:	e006      	b.n	8012950 <pifI2cPort_AddDevice+0x3c>

    p_device->__p_port = p_owner;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	687a      	ldr	r2, [r7, #4]
 8012946:	605a      	str	r2, [r3, #4]
    p_device->timeout = 10;		// 10ms
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	220a      	movs	r2, #10
 801294c:	705a      	strb	r2, [r3, #1]
    return p_device;
 801294e:	68fb      	ldr	r3, [r7, #12]
}
 8012950:	4618      	mov	r0, r3
 8012952:	3710      	adds	r7, #16
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}
 8012958:	20001ef0 	.word	0x20001ef0

0801295c <pifI2cPort_RemoveDevice>:

void pifI2cPort_RemoveDevice(PifI2cPort* p_owner, PifI2cDevice* p_device)
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b082      	sub	sp, #8
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
 8012964:	6039      	str	r1, [r7, #0]
	if (p_device) {
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d007      	beq.n	801297c <pifI2cPort_RemoveDevice+0x20>
		pifFixList_Remove(&p_owner->__devices, p_device);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	3310      	adds	r3, #16
 8012970:	6839      	ldr	r1, [r7, #0]
 8012972:	4618      	mov	r0, r3
 8012974:	f000 fb39 	bl	8012fea <pifFixList_Remove>
		p_device = NULL;
 8012978:	2300      	movs	r3, #0
 801297a:	603b      	str	r3, [r7, #0]
	}
}
 801297c:	bf00      	nop
 801297e:	3708      	adds	r7, #8
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}

08012984 <pifI2cDevice_Read>:
}

#endif

BOOL pifI2cDevice_Read(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 8012984:	b5b0      	push	{r4, r5, r7, lr}
 8012986:	b08c      	sub	sp, #48	; 0x30
 8012988:	af02      	add	r7, sp, #8
 801298a:	60f8      	str	r0, [r7, #12]
 801298c:	60b9      	str	r1, [r7, #8]
 801298e:	603b      	str	r3, [r7, #0]
 8012990:	4613      	mov	r3, r2
 8012992:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	685b      	ldr	r3, [r3, #4]
 8012998:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_read) return FALSE;
 801299a:	69fb      	ldr	r3, [r7, #28]
 801299c:	685b      	ldr	r3, [r3, #4]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d101      	bne.n	80129a6 <pifI2cDevice_Read+0x22>
 80129a2:	2300      	movs	r3, #0
 80129a4:	e08e      	b.n	8012ac4 <pifI2cDevice_Read+0x140>
	if (p_port->__use_device) {
 80129a6:	69fb      	ldr	r3, [r7, #28]
 80129a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d00f      	beq.n	80129ce <pifI2cDevice_Read+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CR:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	461a      	mov	r2, r3
 80129b4:	69fb      	ldr	r3, [r7, #28]
 80129b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129b8:	781b      	ldrb	r3, [r3, #0]
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	9300      	str	r3, [sp, #0]
 80129be:	4613      	mov	r3, r2
 80129c0:	2262      	movs	r2, #98	; 0x62
 80129c2:	4942      	ldr	r1, [pc, #264]	; (8012acc <pifI2cDevice_Read+0x148>)
 80129c4:	2002      	movs	r0, #2
 80129c6:	f000 ff3b 	bl	8013840 <pifLog_Printf>
#endif
		return FALSE;
 80129ca:	2300      	movs	r3, #0
 80129cc:	e07a      	b.n	8012ac4 <pifI2cDevice_Read+0x140>
	}

	p_port->__use_device = p_owner;
 80129ce:	69fb      	ldr	r3, [r7, #28]
 80129d0:	68fa      	ldr	r2, [r7, #12]
 80129d2:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	2201      	movs	r2, #1
 80129d8:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 80129da:	2300      	movs	r3, #0
 80129dc:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 80129de:	e048      	b.n	8012a72 <pifI2cDevice_Read+0xee>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 80129e0:	69fb      	ldr	r3, [r7, #28]
 80129e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80129e4:	461a      	mov	r2, r3
 80129e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e8:	4293      	cmp	r3, r2
 80129ea:	bf28      	it	cs
 80129ec:	4613      	movcs	r3, r2
 80129ee:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_read)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 80129f0:	69fb      	ldr	r3, [r7, #28]
 80129f2:	685c      	ldr	r4, [r3, #4]
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	7818      	ldrb	r0, [r3, #0]
 80129f8:	68ba      	ldr	r2, [r7, #8]
 80129fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fc:	18d1      	adds	r1, r2, r3
 80129fe:	683a      	ldr	r2, [r7, #0]
 8012a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a02:	18d5      	adds	r5, r2, r3
 8012a04:	7efb      	ldrb	r3, [r7, #27]
 8012a06:	b29b      	uxth	r3, r3
 8012a08:	79fa      	ldrb	r2, [r7, #7]
 8012a0a:	9300      	str	r3, [sp, #0]
 8012a0c:	462b      	mov	r3, r5
 8012a0e:	47a0      	blx	r4
 8012a10:	4603      	mov	r3, r0
 8012a12:	2b02      	cmp	r3, #2
 8012a14:	d021      	beq.n	8012a5a <pifI2cDevice_Read+0xd6>
 8012a16:	2b02      	cmp	r3, #2
 8012a18:	dc23      	bgt.n	8012a62 <pifI2cDevice_Read+0xde>
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d001      	beq.n	8012a22 <pifI2cDevice_Read+0x9e>
 8012a1e:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 8012a20:	e01f      	b.n	8012a62 <pifI2cDevice_Read+0xde>
			timer1ms = pif_cumulative_timer1ms;
 8012a22:	4b2b      	ldr	r3, [pc, #172]	; (8012ad0 <pifI2cDevice_Read+0x14c>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 8012a28:	e00a      	b.n	8012a40 <pifI2cDevice_Read+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 8012a2a:	4b29      	ldr	r3, [pc, #164]	; (8012ad0 <pifI2cDevice_Read+0x14c>)
 8012a2c:	681a      	ldr	r2, [r3, #0]
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	1ad3      	subs	r3, r2, r3
 8012a32:	68fa      	ldr	r2, [r7, #12]
 8012a34:	7852      	ldrb	r2, [r2, #1]
 8012a36:	4293      	cmp	r3, r2
 8012a38:	d902      	bls.n	8012a40 <pifI2cDevice_Read+0xbc>
					line = __LINE__;
 8012a3a:	2372      	movs	r3, #114	; 0x72
 8012a3c:	623b      	str	r3, [r7, #32]
					goto fail;
 8012a3e:	e023      	b.n	8012a88 <pifI2cDevice_Read+0x104>
			while (p_owner->_state == IS_RUN) {
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	789b      	ldrb	r3, [r3, #2]
 8012a44:	b2db      	uxtb	r3, r3
 8012a46:	2b01      	cmp	r3, #1
 8012a48:	d0ef      	beq.n	8012a2a <pifI2cDevice_Read+0xa6>
			if (p_owner->_state == IS_ERROR) {
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	789b      	ldrb	r3, [r3, #2]
 8012a4e:	b2db      	uxtb	r3, r3
 8012a50:	2b03      	cmp	r3, #3
 8012a52:	d105      	bne.n	8012a60 <pifI2cDevice_Read+0xdc>
				line = __LINE__;
 8012a54:	2379      	movs	r3, #121	; 0x79
 8012a56:	623b      	str	r3, [r7, #32]
				goto fail;
 8012a58:	e016      	b.n	8012a88 <pifI2cDevice_Read+0x104>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 8012a5a:	2384      	movs	r3, #132	; 0x84
 8012a5c:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 8012a5e:	e013      	b.n	8012a88 <pifI2cDevice_Read+0x104>
			break;
 8012a60:	bf00      	nop
		}
		ptr += len;
 8012a62:	7efb      	ldrb	r3, [r7, #27]
 8012a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a66:	4413      	add	r3, r2
 8012a68:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 8012a6a:	7efb      	ldrb	r3, [r7, #27]
 8012a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a6e:	1ad3      	subs	r3, r2, r3
 8012a70:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 8012a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d1b3      	bne.n	80129e0 <pifI2cDevice_Read+0x5c>
	}
	p_port->__use_device = NULL;
 8012a78:	69fb      	ldr	r3, [r7, #28]
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	2200      	movs	r2, #0
 8012a82:	709a      	strb	r2, [r3, #2]
	return TRUE;
 8012a84:	2301      	movs	r3, #1
 8012a86:	e01d      	b.n	8012ac4 <pifI2cDevice_Read+0x140>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CR:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	4b11      	ldr	r3, [pc, #68]	; (8012ad4 <pifI2cDevice_Read+0x150>)
 8012a90:	781b      	ldrb	r3, [r3, #0]
 8012a92:	9301      	str	r3, [sp, #4]
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	9300      	str	r3, [sp, #0]
 8012a98:	4613      	mov	r3, r2
 8012a9a:	6a3a      	ldr	r2, [r7, #32]
 8012a9c:	490e      	ldr	r1, [pc, #56]	; (8012ad8 <pifI2cDevice_Read+0x154>)
 8012a9e:	2004      	movs	r0, #4
 8012aa0:	f000 fece 	bl	8013840 <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 8012aa4:	69fb      	ldr	r3, [r7, #28]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 8012aaa:	69fb      	ldr	r3, [r7, #28]
 8012aac:	881b      	ldrh	r3, [r3, #0]
 8012aae:	3301      	adds	r3, #1
 8012ab0:	b29a      	uxth	r2, r3
 8012ab2:	69fb      	ldr	r3, [r7, #28]
 8012ab4:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 8012abc:	4b05      	ldr	r3, [pc, #20]	; (8012ad4 <pifI2cDevice_Read+0x150>)
 8012abe:	220a      	movs	r2, #10
 8012ac0:	701a      	strb	r2, [r3, #0]
	return FALSE;
 8012ac2:	2300      	movs	r3, #0
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3728      	adds	r7, #40	; 0x28
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bdb0      	pop	{r4, r5, r7, pc}
 8012acc:	080279a8 	.word	0x080279a8
 8012ad0:	20001f08 	.word	0x20001f08
 8012ad4:	20001ef0 	.word	0x20001ef0
 8012ad8:	080279c8 	.word	0x080279c8

08012adc <pifI2cDevice_ReadRegByte>:

BOOL pifI2cDevice_ReadRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b086      	sub	sp, #24
 8012ae0:	af02      	add	r7, sp, #8
 8012ae2:	60f8      	str	r0, [r7, #12]
 8012ae4:	460b      	mov	r3, r1
 8012ae6:	607a      	str	r2, [r7, #4]
 8012ae8:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, 1);
 8012aea:	7af9      	ldrb	r1, [r7, #11]
 8012aec:	2301      	movs	r3, #1
 8012aee:	9300      	str	r3, [sp, #0]
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2201      	movs	r2, #1
 8012af4:	68f8      	ldr	r0, [r7, #12]
 8012af6:	f7ff ff45 	bl	8012984 <pifI2cDevice_Read>
 8012afa:	4603      	mov	r3, r0
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3710      	adds	r7, #16
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}

08012b04 <pifI2cDevice_ReadRegWord>:

BOOL pifI2cDevice_ReadRegWord(PifI2cDevice* p_owner, uint8_t reg, uint16_t* p_data)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b088      	sub	sp, #32
 8012b08:	af02      	add	r7, sp, #8
 8012b0a:	60f8      	str	r0, [r7, #12]
 8012b0c:	460b      	mov	r3, r1
 8012b0e:	607a      	str	r2, [r7, #4]
 8012b10:	72fb      	strb	r3, [r7, #11]
	uint8_t tmp[2];

	if (!pifI2cDevice_Read(p_owner, reg, 1, tmp, 2)) return FALSE;
 8012b12:	7af9      	ldrb	r1, [r7, #11]
 8012b14:	f107 0314 	add.w	r3, r7, #20
 8012b18:	2202      	movs	r2, #2
 8012b1a:	9200      	str	r2, [sp, #0]
 8012b1c:	2201      	movs	r2, #1
 8012b1e:	68f8      	ldr	r0, [r7, #12]
 8012b20:	f7ff ff30 	bl	8012984 <pifI2cDevice_Read>
 8012b24:	4603      	mov	r3, r0
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d101      	bne.n	8012b2e <pifI2cDevice_ReadRegWord+0x2a>
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	e00a      	b.n	8012b44 <pifI2cDevice_ReadRegWord+0x40>
	*p_data = (tmp[0] << 8) + tmp[1];
 8012b2e:	7d3b      	ldrb	r3, [r7, #20]
 8012b30:	b29b      	uxth	r3, r3
 8012b32:	021b      	lsls	r3, r3, #8
 8012b34:	b29a      	uxth	r2, r3
 8012b36:	7d7b      	ldrb	r3, [r7, #21]
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	4413      	add	r3, r2
 8012b3c:	b29a      	uxth	r2, r3
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8012b42:	2301      	movs	r3, #1
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	3718      	adds	r7, #24
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}

08012b4c <pifI2cDevice_ReadRegBytes>:

BOOL pifI2cDevice_ReadRegBytes(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data, size_t size)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b086      	sub	sp, #24
 8012b50:	af02      	add	r7, sp, #8
 8012b52:	60f8      	str	r0, [r7, #12]
 8012b54:	607a      	str	r2, [r7, #4]
 8012b56:	603b      	str	r3, [r7, #0]
 8012b58:	460b      	mov	r3, r1
 8012b5a:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, size);
 8012b5c:	7af9      	ldrb	r1, [r7, #11]
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	9300      	str	r3, [sp, #0]
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2201      	movs	r2, #1
 8012b66:	68f8      	ldr	r0, [r7, #12]
 8012b68:	f7ff ff0c 	bl	8012984 <pifI2cDevice_Read>
 8012b6c:	4603      	mov	r3, r0
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3710      	adds	r7, #16
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}

08012b76 <pifI2cDevice_ReadRegBit8>:

BOOL pifI2cDevice_ReadRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t* p_data)
{
 8012b76:	b580      	push	{r7, lr}
 8012b78:	b088      	sub	sp, #32
 8012b7a:	af02      	add	r7, sp, #8
 8012b7c:	60f8      	str	r0, [r7, #12]
 8012b7e:	607b      	str	r3, [r7, #4]
 8012b80:	460b      	mov	r3, r1
 8012b82:	72fb      	strb	r3, [r7, #11]
 8012b84:	4613      	mov	r3, r2
 8012b86:	813b      	strh	r3, [r7, #8]
	uint8_t tmp, shift, mask;

	shift = field >> 8;
 8012b88:	893b      	ldrh	r3, [r7, #8]
 8012b8a:	0a1b      	lsrs	r3, r3, #8
 8012b8c:	b29b      	uxth	r3, r3
 8012b8e:	75fb      	strb	r3, [r7, #23]
	mask = (1 << (field & 0xFF)) - 1;
 8012b90:	893b      	ldrh	r3, [r7, #8]
 8012b92:	b2db      	uxtb	r3, r3
 8012b94:	2201      	movs	r2, #1
 8012b96:	fa02 f303 	lsl.w	r3, r2, r3
 8012b9a:	b2db      	uxtb	r3, r3
 8012b9c:	3b01      	subs	r3, #1
 8012b9e:	75bb      	strb	r3, [r7, #22]

	if (!pifI2cDevice_Read(p_owner, reg, 1, &tmp, 1)) return FALSE;
 8012ba0:	7af9      	ldrb	r1, [r7, #11]
 8012ba2:	f107 0315 	add.w	r3, r7, #21
 8012ba6:	2201      	movs	r2, #1
 8012ba8:	9200      	str	r2, [sp, #0]
 8012baa:	2201      	movs	r2, #1
 8012bac:	68f8      	ldr	r0, [r7, #12]
 8012bae:	f7ff fee9 	bl	8012984 <pifI2cDevice_Read>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d101      	bne.n	8012bbc <pifI2cDevice_ReadRegBit8+0x46>
 8012bb8:	2300      	movs	r3, #0
 8012bba:	e00d      	b.n	8012bd8 <pifI2cDevice_ReadRegBit8+0x62>
	*p_data = (tmp >> shift) & mask;
 8012bbc:	7d7b      	ldrb	r3, [r7, #21]
 8012bbe:	461a      	mov	r2, r3
 8012bc0:	7dfb      	ldrb	r3, [r7, #23]
 8012bc2:	fa42 f303 	asr.w	r3, r2, r3
 8012bc6:	b25a      	sxtb	r2, r3
 8012bc8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8012bcc:	4013      	ands	r3, r2
 8012bce:	b25b      	sxtb	r3, r3
 8012bd0:	b2da      	uxtb	r2, r3
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8012bd6:	2301      	movs	r3, #1
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3718      	adds	r7, #24
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <pifI2cDevice_Write>:
	*p_data = (((tmp[0] << 8) + tmp[1]) >> shift) & mask;
	return TRUE;
}

BOOL pifI2cDevice_Write(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 8012be0:	b5b0      	push	{r4, r5, r7, lr}
 8012be2:	b08c      	sub	sp, #48	; 0x30
 8012be4:	af02      	add	r7, sp, #8
 8012be6:	60f8      	str	r0, [r7, #12]
 8012be8:	60b9      	str	r1, [r7, #8]
 8012bea:	603b      	str	r3, [r7, #0]
 8012bec:	4613      	mov	r3, r2
 8012bee:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	685b      	ldr	r3, [r3, #4]
 8012bf4:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_write) return FALSE;
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	689b      	ldr	r3, [r3, #8]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d101      	bne.n	8012c02 <pifI2cDevice_Write+0x22>
 8012bfe:	2300      	movs	r3, #0
 8012c00:	e08e      	b.n	8012d20 <pifI2cDevice_Write+0x140>
	if (p_port->__use_device) {
 8012c02:	69fb      	ldr	r3, [r7, #28]
 8012c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d00f      	beq.n	8012c2a <pifI2cDevice_Write+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CW:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	461a      	mov	r2, r3
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	b2db      	uxtb	r3, r3
 8012c18:	9300      	str	r3, [sp, #0]
 8012c1a:	4613      	mov	r3, r2
 8012c1c:	22d3      	movs	r2, #211	; 0xd3
 8012c1e:	4942      	ldr	r1, [pc, #264]	; (8012d28 <pifI2cDevice_Write+0x148>)
 8012c20:	2002      	movs	r0, #2
 8012c22:	f000 fe0d 	bl	8013840 <pifLog_Printf>
#endif
		return FALSE;
 8012c26:	2300      	movs	r3, #0
 8012c28:	e07a      	b.n	8012d20 <pifI2cDevice_Write+0x140>
	}

	p_port->__use_device = p_owner;
 8012c2a:	69fb      	ldr	r3, [r7, #28]
 8012c2c:	68fa      	ldr	r2, [r7, #12]
 8012c2e:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	2201      	movs	r2, #1
 8012c34:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 8012c36:	2300      	movs	r3, #0
 8012c38:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 8012c3a:	e048      	b.n	8012cce <pifI2cDevice_Write+0xee>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c40:	461a      	mov	r2, r3
 8012c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c44:	4293      	cmp	r3, r2
 8012c46:	bf28      	it	cs
 8012c48:	4613      	movcs	r3, r2
 8012c4a:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_write)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 8012c4c:	69fb      	ldr	r3, [r7, #28]
 8012c4e:	689c      	ldr	r4, [r3, #8]
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	7818      	ldrb	r0, [r3, #0]
 8012c54:	68ba      	ldr	r2, [r7, #8]
 8012c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c58:	18d1      	adds	r1, r2, r3
 8012c5a:	683a      	ldr	r2, [r7, #0]
 8012c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5e:	18d5      	adds	r5, r2, r3
 8012c60:	7efb      	ldrb	r3, [r7, #27]
 8012c62:	b29b      	uxth	r3, r3
 8012c64:	79fa      	ldrb	r2, [r7, #7]
 8012c66:	9300      	str	r3, [sp, #0]
 8012c68:	462b      	mov	r3, r5
 8012c6a:	47a0      	blx	r4
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	2b02      	cmp	r3, #2
 8012c70:	d021      	beq.n	8012cb6 <pifI2cDevice_Write+0xd6>
 8012c72:	2b02      	cmp	r3, #2
 8012c74:	dc23      	bgt.n	8012cbe <pifI2cDevice_Write+0xde>
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d001      	beq.n	8012c7e <pifI2cDevice_Write+0x9e>
 8012c7a:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 8012c7c:	e01f      	b.n	8012cbe <pifI2cDevice_Write+0xde>
			timer1ms = pif_cumulative_timer1ms;
 8012c7e:	4b2b      	ldr	r3, [pc, #172]	; (8012d2c <pifI2cDevice_Write+0x14c>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 8012c84:	e00a      	b.n	8012c9c <pifI2cDevice_Write+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 8012c86:	4b29      	ldr	r3, [pc, #164]	; (8012d2c <pifI2cDevice_Write+0x14c>)
 8012c88:	681a      	ldr	r2, [r3, #0]
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	1ad3      	subs	r3, r2, r3
 8012c8e:	68fa      	ldr	r2, [r7, #12]
 8012c90:	7852      	ldrb	r2, [r2, #1]
 8012c92:	4293      	cmp	r3, r2
 8012c94:	d902      	bls.n	8012c9c <pifI2cDevice_Write+0xbc>
					line = __LINE__;
 8012c96:	23e3      	movs	r3, #227	; 0xe3
 8012c98:	623b      	str	r3, [r7, #32]
					goto fail;
 8012c9a:	e023      	b.n	8012ce4 <pifI2cDevice_Write+0x104>
			while (p_owner->_state == IS_RUN) {
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	789b      	ldrb	r3, [r3, #2]
 8012ca0:	b2db      	uxtb	r3, r3
 8012ca2:	2b01      	cmp	r3, #1
 8012ca4:	d0ef      	beq.n	8012c86 <pifI2cDevice_Write+0xa6>
			if (p_owner->_state == IS_ERROR) {
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	789b      	ldrb	r3, [r3, #2]
 8012caa:	b2db      	uxtb	r3, r3
 8012cac:	2b03      	cmp	r3, #3
 8012cae:	d105      	bne.n	8012cbc <pifI2cDevice_Write+0xdc>
				line = __LINE__;
 8012cb0:	23ea      	movs	r3, #234	; 0xea
 8012cb2:	623b      	str	r3, [r7, #32]
				goto fail;
 8012cb4:	e016      	b.n	8012ce4 <pifI2cDevice_Write+0x104>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 8012cb6:	23f5      	movs	r3, #245	; 0xf5
 8012cb8:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 8012cba:	e013      	b.n	8012ce4 <pifI2cDevice_Write+0x104>
			break;
 8012cbc:	bf00      	nop
		}
		ptr += len;
 8012cbe:	7efb      	ldrb	r3, [r7, #27]
 8012cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cc2:	4413      	add	r3, r2
 8012cc4:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 8012cc6:	7efb      	ldrb	r3, [r7, #27]
 8012cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012cca:	1ad3      	subs	r3, r2, r3
 8012ccc:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 8012cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d1b3      	bne.n	8012c3c <pifI2cDevice_Write+0x5c>
	}
	p_port->__use_device = NULL;
 8012cd4:	69fb      	ldr	r3, [r7, #28]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	2200      	movs	r2, #0
 8012cde:	709a      	strb	r2, [r3, #2]
	return TRUE;
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	e01d      	b.n	8012d20 <pifI2cDevice_Write+0x140>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CW:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	461a      	mov	r2, r3
 8012cea:	4b11      	ldr	r3, [pc, #68]	; (8012d30 <pifI2cDevice_Write+0x150>)
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	9301      	str	r3, [sp, #4]
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	9300      	str	r3, [sp, #0]
 8012cf4:	4613      	mov	r3, r2
 8012cf6:	6a3a      	ldr	r2, [r7, #32]
 8012cf8:	490e      	ldr	r1, [pc, #56]	; (8012d34 <pifI2cDevice_Write+0x154>)
 8012cfa:	2004      	movs	r0, #4
 8012cfc:	f000 fda0 	bl	8013840 <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 8012d00:	69fb      	ldr	r3, [r7, #28]
 8012d02:	2200      	movs	r2, #0
 8012d04:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 8012d06:	69fb      	ldr	r3, [r7, #28]
 8012d08:	881b      	ldrh	r3, [r3, #0]
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	b29a      	uxth	r2, r3
 8012d0e:	69fb      	ldr	r3, [r7, #28]
 8012d10:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	2200      	movs	r2, #0
 8012d16:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 8012d18:	4b05      	ldr	r3, [pc, #20]	; (8012d30 <pifI2cDevice_Write+0x150>)
 8012d1a:	220a      	movs	r2, #10
 8012d1c:	701a      	strb	r2, [r3, #0]
	return FALSE;
 8012d1e:	2300      	movs	r3, #0
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	3728      	adds	r7, #40	; 0x28
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bdb0      	pop	{r4, r5, r7, pc}
 8012d28:	080279e4 	.word	0x080279e4
 8012d2c:	20001f08 	.word	0x20001f08
 8012d30:	20001ef0 	.word	0x20001ef0
 8012d34:	08027a04 	.word	0x08027a04

08012d38 <pifI2cDevice_WriteRegByte>:

BOOL pifI2cDevice_WriteRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t data)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b084      	sub	sp, #16
 8012d3c:	af02      	add	r7, sp, #8
 8012d3e:	6078      	str	r0, [r7, #4]
 8012d40:	460b      	mov	r3, r1
 8012d42:	70fb      	strb	r3, [r7, #3]
 8012d44:	4613      	mov	r3, r2
 8012d46:	70bb      	strb	r3, [r7, #2]
	return pifI2cDevice_Write(p_owner, reg, 1, &data, 1);
 8012d48:	78f9      	ldrb	r1, [r7, #3]
 8012d4a:	1cbb      	adds	r3, r7, #2
 8012d4c:	2201      	movs	r2, #1
 8012d4e:	9200      	str	r2, [sp, #0]
 8012d50:	2201      	movs	r2, #1
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f7ff ff44 	bl	8012be0 <pifI2cDevice_Write>
 8012d58:	4603      	mov	r3, r0
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3708      	adds	r7, #8
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
	...

08012d64 <pifI2cDevice_WriteRegBit8>:
{
	return pifI2cDevice_Write(p_owner, reg, 1, p_data, size);
}

BOOL pifI2cDevice_WriteRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t data)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b086      	sub	sp, #24
 8012d68:	af02      	add	r7, sp, #8
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	4608      	mov	r0, r1
 8012d6e:	4611      	mov	r1, r2
 8012d70:	461a      	mov	r2, r3
 8012d72:	4603      	mov	r3, r0
 8012d74:	70fb      	strb	r3, [r7, #3]
 8012d76:	460b      	mov	r3, r1
 8012d78:	803b      	strh	r3, [r7, #0]
 8012d7a:	4613      	mov	r3, r2
 8012d7c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp, org, shift, mask;

	shift = field >> 8;
 8012d7e:	883b      	ldrh	r3, [r7, #0]
 8012d80:	0a1b      	lsrs	r3, r3, #8
 8012d82:	b29b      	uxth	r3, r3
 8012d84:	73fb      	strb	r3, [r7, #15]
	mask = (1 << (field & 0xFF)) - 1;
 8012d86:	883b      	ldrh	r3, [r7, #0]
 8012d88:	b2db      	uxtb	r3, r3
 8012d8a:	2201      	movs	r2, #1
 8012d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8012d90:	b2db      	uxtb	r3, r3
 8012d92:	3b01      	subs	r3, #1
 8012d94:	73bb      	strb	r3, [r7, #14]

	if (data > mask) {
 8012d96:	78ba      	ldrb	r2, [r7, #2]
 8012d98:	7bbb      	ldrb	r3, [r7, #14]
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d904      	bls.n	8012da8 <pifI2cDevice_WriteRegBit8+0x44>
		pif_error = E_WRONG_DATA;
 8012d9e:	4b21      	ldr	r3, [pc, #132]	; (8012e24 <pifI2cDevice_WriteRegBit8+0xc0>)
 8012da0:	2206      	movs	r2, #6
 8012da2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012da4:	2300      	movs	r3, #0
 8012da6:	e039      	b.n	8012e1c <pifI2cDevice_WriteRegBit8+0xb8>
	}
	if (!pifI2cDevice_Read(p_owner, reg, 1, &org, 1)) return FALSE;
 8012da8:	78f9      	ldrb	r1, [r7, #3]
 8012daa:	f107 030c 	add.w	r3, r7, #12
 8012dae:	2201      	movs	r2, #1
 8012db0:	9200      	str	r2, [sp, #0]
 8012db2:	2201      	movs	r2, #1
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f7ff fde5 	bl	8012984 <pifI2cDevice_Read>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d101      	bne.n	8012dc4 <pifI2cDevice_WriteRegBit8+0x60>
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	e02b      	b.n	8012e1c <pifI2cDevice_WriteRegBit8+0xb8>

	if (((org >> shift) & mask) != data) {
 8012dc4:	7b3b      	ldrb	r3, [r7, #12]
 8012dc6:	461a      	mov	r2, r3
 8012dc8:	7bfb      	ldrb	r3, [r7, #15]
 8012dca:	411a      	asrs	r2, r3
 8012dcc:	7bbb      	ldrb	r3, [r7, #14]
 8012dce:	401a      	ands	r2, r3
 8012dd0:	78bb      	ldrb	r3, [r7, #2]
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d021      	beq.n	8012e1a <pifI2cDevice_WriteRegBit8+0xb6>
		tmp = (org & ~(mask << shift)) | (data << shift);
 8012dd6:	7bba      	ldrb	r2, [r7, #14]
 8012dd8:	7bfb      	ldrb	r3, [r7, #15]
 8012dda:	fa02 f303 	lsl.w	r3, r2, r3
 8012dde:	b25b      	sxtb	r3, r3
 8012de0:	43db      	mvns	r3, r3
 8012de2:	b25a      	sxtb	r2, r3
 8012de4:	7b3b      	ldrb	r3, [r7, #12]
 8012de6:	b25b      	sxtb	r3, r3
 8012de8:	4013      	ands	r3, r2
 8012dea:	b25a      	sxtb	r2, r3
 8012dec:	78b9      	ldrb	r1, [r7, #2]
 8012dee:	7bfb      	ldrb	r3, [r7, #15]
 8012df0:	fa01 f303 	lsl.w	r3, r1, r3
 8012df4:	b25b      	sxtb	r3, r3
 8012df6:	4313      	orrs	r3, r2
 8012df8:	b25b      	sxtb	r3, r3
 8012dfa:	b2db      	uxtb	r3, r3
 8012dfc:	737b      	strb	r3, [r7, #13]
		if (!pifI2cDevice_Write(p_owner, reg, 1, &tmp, 1)) return FALSE;
 8012dfe:	78f9      	ldrb	r1, [r7, #3]
 8012e00:	f107 030d 	add.w	r3, r7, #13
 8012e04:	2201      	movs	r2, #1
 8012e06:	9200      	str	r2, [sp, #0]
 8012e08:	2201      	movs	r2, #1
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f7ff fee8 	bl	8012be0 <pifI2cDevice_Write>
 8012e10:	4603      	mov	r3, r0
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d101      	bne.n	8012e1a <pifI2cDevice_WriteRegBit8+0xb6>
 8012e16:	2300      	movs	r3, #0
 8012e18:	e000      	b.n	8012e1c <pifI2cDevice_WriteRegBit8+0xb8>
	}
    return TRUE;
 8012e1a:	2301      	movs	r3, #1
}
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	3710      	adds	r7, #16
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}
 8012e24:	20001ef0 	.word	0x20001ef0

08012e28 <pifI2cPort_sigEndTransfer>:
	}
    return TRUE;
}

void pifI2cPort_sigEndTransfer(PifI2cPort* p_owner, BOOL result)
{
 8012e28:	b480      	push	{r7}
 8012e2a:	b083      	sub	sp, #12
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	460b      	mov	r3, r1
 8012e32:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->__use_device) return;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d009      	beq.n	8012e50 <pifI2cPort_sigEndTransfer+0x28>
	p_owner->__use_device->_state = result ? IS_COMPLETE : IS_ERROR;
 8012e3c:	78fb      	ldrb	r3, [r7, #3]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d001      	beq.n	8012e46 <pifI2cPort_sigEndTransfer+0x1e>
 8012e42:	2202      	movs	r2, #2
 8012e44:	e000      	b.n	8012e48 <pifI2cPort_sigEndTransfer+0x20>
 8012e46:	2203      	movs	r2, #3
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e4c:	709a      	strb	r2, [r3, #2]
 8012e4e:	e000      	b.n	8012e52 <pifI2cPort_sigEndTransfer+0x2a>
	if (!p_owner->__use_device) return;
 8012e50:	bf00      	nop
}
 8012e52:	370c      	adds	r7, #12
 8012e54:	46bd      	mov	sp, r7
 8012e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5a:	4770      	bx	lr

08012e5c <pifFixList_Init>:
}

// ---------- PIF Fixed Linked List ----------

BOOL pifFixList_Init(PifFixList* p_owner, int size, int max_count)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b088      	sub	sp, #32
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	60f8      	str	r0, [r7, #12]
 8012e64:	60b9      	str	r1, [r7, #8]
 8012e66:	607a      	str	r2, [r7, #4]
	char* p_buffer;
	PifFixListIterator p_node;

	if (!p_owner || !size || !max_count) {
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d005      	beq.n	8012e7a <pifFixList_Init+0x1e>
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d002      	beq.n	8012e7a <pifFixList_Init+0x1e>
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d104      	bne.n	8012e84 <pifFixList_Init+0x28>
		pif_error = E_INVALID_PARAM;
 8012e7a:	4b27      	ldr	r3, [pc, #156]	; (8012f18 <pifFixList_Init+0xbc>)
 8012e7c:	2201      	movs	r2, #1
 8012e7e:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8012e80:	2300      	movs	r3, #0
 8012e82:	e045      	b.n	8012f10 <pifFixList_Init+0xb4>
	}

	p_buffer = calloc(2 * sizeof(PifFixListIterator) + size, max_count);
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	3308      	adds	r3, #8
 8012e88:	687a      	ldr	r2, [r7, #4]
 8012e8a:	4611      	mov	r1, r2
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f010 f9ad 	bl	80231ec <calloc>
 8012e92:	4603      	mov	r3, r0
 8012e94:	61fb      	str	r3, [r7, #28]
	if (!p_buffer) goto fail;
 8012e96:	69fb      	ldr	r3, [r7, #28]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d033      	beq.n	8012f04 <pifFixList_Init+0xa8>

	p_owner->p_node = (PifFixListIterator)p_buffer;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	69fa      	ldr	r2, [r7, #28]
 8012ea0:	60da      	str	r2, [r3, #12]
	p_owner->size = size;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	68ba      	ldr	r2, [r7, #8]
 8012ea6:	601a      	str	r2, [r3, #0]
	p_owner->max_count = max_count;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	687a      	ldr	r2, [r7, #4]
 8012eac:	605a      	str	r2, [r3, #4]
	p_owner->count = 0;
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	609a      	str	r2, [r3, #8]

	p_owner->p_first = NULL;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	611a      	str	r2, [r3, #16]

	p_node = p_owner->p_node;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	68db      	ldr	r3, [r3, #12]
 8012ebe:	61bb      	str	r3, [r7, #24]
	p_owner->p_free = p_node;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	69ba      	ldr	r2, [r7, #24]
 8012ec4:	615a      	str	r2, [r3, #20]
	for (int i = 1; i < max_count; i++) {
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	617b      	str	r3, [r7, #20]
 8012eca:	e00f      	b.n	8012eec <pifFixList_Init+0x90>
		p_buffer += 2 * sizeof(PifFixListIterator) + size;
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	3308      	adds	r3, #8
 8012ed0:	69fa      	ldr	r2, [r7, #28]
 8012ed2:	4413      	add	r3, r2
 8012ed4:	61fb      	str	r3, [r7, #28]
		p_node->p_next = (PifFixListIterator)p_buffer;
 8012ed6:	69bb      	ldr	r3, [r7, #24]
 8012ed8:	69fa      	ldr	r2, [r7, #28]
 8012eda:	601a      	str	r2, [r3, #0]
		p_node->p_prev = NULL;
 8012edc:	69bb      	ldr	r3, [r7, #24]
 8012ede:	2200      	movs	r2, #0
 8012ee0:	605a      	str	r2, [r3, #4]
		p_node = (PifFixListIterator)p_buffer;
 8012ee2:	69fb      	ldr	r3, [r7, #28]
 8012ee4:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < max_count; i++) {
 8012ee6:	697b      	ldr	r3, [r7, #20]
 8012ee8:	3301      	adds	r3, #1
 8012eea:	617b      	str	r3, [r7, #20]
 8012eec:	697a      	ldr	r2, [r7, #20]
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	dbeb      	blt.n	8012ecc <pifFixList_Init+0x70>
	}
	p_node->p_next = NULL;
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 8012efa:	69bb      	ldr	r3, [r7, #24]
 8012efc:	2200      	movs	r2, #0
 8012efe:	605a      	str	r2, [r3, #4]

	return TRUE;
 8012f00:	2301      	movs	r3, #1
 8012f02:	e005      	b.n	8012f10 <pifFixList_Init+0xb4>
	if (!p_buffer) goto fail;
 8012f04:	bf00      	nop

fail:
	pifFixList_Clear(p_owner, NULL);
 8012f06:	2100      	movs	r1, #0
 8012f08:	68f8      	ldr	r0, [r7, #12]
 8012f0a:	f000 f807 	bl	8012f1c <pifFixList_Clear>
	return FALSE;
 8012f0e:	2300      	movs	r3, #0
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	3720      	adds	r7, #32
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	20001ef0 	.word	0x20001ef0

08012f1c <pifFixList_Clear>:

void pifFixList_Clear(PifFixList* p_owner, PifEvtFixListClear evt_clear)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b084      	sub	sp, #16
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	6039      	str	r1, [r7, #0]
	if (p_owner->p_node) {
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	68db      	ldr	r3, [r3, #12]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d01f      	beq.n	8012f6e <pifFixList_Clear+0x52>
		if (evt_clear) {
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d014      	beq.n	8012f5e <pifFixList_Clear+0x42>
			PifFixListIterator it = p_owner->p_first;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	691b      	ldr	r3, [r3, #16]
 8012f38:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012f3a:	e00d      	b.n	8012f58 <pifFixList_Clear+0x3c>
				(*evt_clear)(it->data);
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	f103 0208 	add.w	r2, r3, #8
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	4610      	mov	r0, r2
 8012f46:	4798      	blx	r3
				it = it ? it->p_next : NULL;
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d002      	beq.n	8012f54 <pifFixList_Clear+0x38>
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	e000      	b.n	8012f56 <pifFixList_Clear+0x3a>
 8012f54:	2300      	movs	r3, #0
 8012f56:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d1ee      	bne.n	8012f3c <pifFixList_Clear+0x20>
			}
		}

		free(p_owner->p_node);
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	68db      	ldr	r3, [r3, #12]
 8012f62:	4618      	mov	r0, r3
 8012f64:	f010 f97c 	bl	8023260 <free>
		p_owner->p_node = NULL;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	60da      	str	r2, [r3, #12]
	}

	p_owner->size = 0;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2200      	movs	r2, #0
 8012f72:	601a      	str	r2, [r3, #0]
	p_owner->max_count = 0;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2200      	movs	r2, #0
 8012f78:	605a      	str	r2, [r3, #4]
}
 8012f7a:	bf00      	nop
 8012f7c:	3710      	adds	r7, #16
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}

08012f82 <pifFixList_AddFirst>:

void* pifFixList_AddFirst(PifFixList* p_owner)
{
 8012f82:	b580      	push	{r7, lr}
 8012f84:	b084      	sub	sp, #16
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	6078      	str	r0, [r7, #4]
	char* p;

	if (p_owner->p_free == NULL) return NULL;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	695b      	ldr	r3, [r3, #20]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d101      	bne.n	8012f96 <pifFixList_AddFirst+0x14>
 8012f92:	2300      	movs	r3, #0
 8012f94:	e025      	b.n	8012fe2 <pifFixList_AddFirst+0x60>

	PifFixListIterator p_node = p_owner->p_free;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	695b      	ldr	r3, [r3, #20]
 8012f9a:	60fb      	str	r3, [r7, #12]
	p_owner->p_free = p_node->p_next;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	681a      	ldr	r2, [r3, #0]
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	615a      	str	r2, [r3, #20]

	p_node->p_next = p_owner->p_first;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	691a      	ldr	r2, [r3, #16]
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	601a      	str	r2, [r3, #0]
	if (p_owner->p_first) {
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	691b      	ldr	r3, [r3, #16]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d003      	beq.n	8012fbc <pifFixList_AddFirst+0x3a>
		p_owner->p_first->p_prev = p_node;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	691b      	ldr	r3, [r3, #16]
 8012fb8:	68fa      	ldr	r2, [r7, #12]
 8012fba:	605a      	str	r2, [r3, #4]
	}
	p_owner->p_first = p_node;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	68fa      	ldr	r2, [r7, #12]
 8012fc0:	611a      	str	r2, [r3, #16]
	p_owner->count++;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	689b      	ldr	r3, [r3, #8]
 8012fc6:	1c5a      	adds	r2, r3, #1
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	609a      	str	r2, [r3, #8]

	p = (char*)p_node + 2 * sizeof(PifFixListIterator);
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	3308      	adds	r3, #8
 8012fd0:	60bb      	str	r3, [r7, #8]
	memset(p, 0, p_owner->size);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	461a      	mov	r2, r3
 8012fd8:	2100      	movs	r1, #0
 8012fda:	68b8      	ldr	r0, [r7, #8]
 8012fdc:	f010 f956 	bl	802328c <memset>
    return p;
 8012fe0:	68bb      	ldr	r3, [r7, #8]
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	3710      	adds	r7, #16
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd80      	pop	{r7, pc}

08012fea <pifFixList_Remove>:

void pifFixList_Remove(PifFixList* p_owner, void* p_data)
{
 8012fea:	b480      	push	{r7}
 8012fec:	b085      	sub	sp, #20
 8012fee:	af00      	add	r7, sp, #0
 8012ff0:	6078      	str	r0, [r7, #4]
 8012ff2:	6039      	str	r1, [r7, #0]
	PifFixListIterator p_node = (PifFixListIterator)((uint8_t*)p_data - 2 * sizeof(PifFixListIterator));
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	3b08      	subs	r3, #8
 8012ff8:	60fb      	str	r3, [r7, #12]

	if (p_node->p_prev) {
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d005      	beq.n	801300e <pifFixList_Remove+0x24>
		p_node->p_prev->p_next = p_node->p_next;
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	685b      	ldr	r3, [r3, #4]
 8013006:	68fa      	ldr	r2, [r7, #12]
 8013008:	6812      	ldr	r2, [r2, #0]
 801300a:	601a      	str	r2, [r3, #0]
 801300c:	e003      	b.n	8013016 <pifFixList_Remove+0x2c>
	}
	else {
		p_owner->p_first = p_node->p_next;
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	681a      	ldr	r2, [r3, #0]
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	611a      	str	r2, [r3, #16]
	}
	if (p_node->p_next) {
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d004      	beq.n	8013028 <pifFixList_Remove+0x3e>
		p_node->p_next->p_prev = p_node->p_prev;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	68fa      	ldr	r2, [r7, #12]
 8013024:	6852      	ldr	r2, [r2, #4]
 8013026:	605a      	str	r2, [r3, #4]
	}
	p_node->p_next = p_owner->p_free;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	695a      	ldr	r2, [r3, #20]
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	2200      	movs	r2, #0
 8013034:	605a      	str	r2, [r3, #4]
	p_owner->p_free = p_node;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	68fa      	ldr	r2, [r7, #12]
 801303a:	615a      	str	r2, [r3, #20]

	p_owner->count--;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	689b      	ldr	r3, [r3, #8]
 8013040:	1e5a      	subs	r2, r3, #1
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	609a      	str	r2, [r3, #8]
}
 8013046:	bf00      	nop
 8013048:	3714      	adds	r7, #20
 801304a:	46bd      	mov	sp, r7
 801304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013050:	4770      	bx	lr

08013052 <pifFixList_Count>:

#ifdef __PIF_NO_USE_INLINE__

int pifFixList_Count(PifFixList* p_owner)
{
 8013052:	b480      	push	{r7}
 8013054:	b083      	sub	sp, #12
 8013056:	af00      	add	r7, sp, #0
 8013058:	6078      	str	r0, [r7, #4]
	return p_owner->count;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	689b      	ldr	r3, [r3, #8]
}
 801305e:	4618      	mov	r0, r3
 8013060:	370c      	adds	r7, #12
 8013062:	46bd      	mov	sp, r7
 8013064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013068:	4770      	bx	lr

0801306a <pifFixList_Begin>:

PifFixListIterator pifFixList_Begin(PifFixList* p_owner)
{
 801306a:	b480      	push	{r7}
 801306c:	b083      	sub	sp, #12
 801306e:	af00      	add	r7, sp, #0
 8013070:	6078      	str	r0, [r7, #4]
	return p_owner->p_first;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	691b      	ldr	r3, [r3, #16]
}
 8013076:	4618      	mov	r0, r3
 8013078:	370c      	adds	r7, #12
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr

08013082 <pifFixList_Next>:

PifFixListIterator pifFixList_Next(PifFixListIterator it)
{
 8013082:	b480      	push	{r7}
 8013084:	b083      	sub	sp, #12
 8013086:	af00      	add	r7, sp, #0
 8013088:	6078      	str	r0, [r7, #4]
	return it ? it->p_next : NULL;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d002      	beq.n	8013096 <pifFixList_Next+0x14>
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	e000      	b.n	8013098 <pifFixList_Next+0x16>
 8013096:	2300      	movs	r3, #0
}
 8013098:	4618      	mov	r0, r3
 801309a:	370c      	adds	r7, #12
 801309c:	46bd      	mov	sp, r7
 801309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a2:	4770      	bx	lr

080130a4 <_cmdHelp>:
		{ NULL, NULL, NULL }
};


static int _cmdHelp(int argc, char *argv[])
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b084      	sub	sp, #16
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	6039      	str	r1, [r7, #0]
    int i;

    (void)argc;
    (void)argv;

    pifLog_Print(LT_NONE, "Available PIF commands:\n");
 80130ae:	492d      	ldr	r1, [pc, #180]	; (8013164 <_cmdHelp+0xc0>)
 80130b0:	2000      	movs	r0, #0
 80130b2:	f000 fb37 	bl	8013724 <pifLog_Print>
    i = 0;
 80130b6:	2300      	movs	r3, #0
 80130b8:	60fb      	str	r3, [r7, #12]
    while (c_cmd_table[i].p_name) {
 80130ba:	e018      	b.n	80130ee <_cmdHelp+0x4a>
        pifLog_Printf(LT_NONE, "  %s\t%s\n", c_cmd_table[i].p_name, c_cmd_table[i].p_help);
 80130bc:	492a      	ldr	r1, [pc, #168]	; (8013168 <_cmdHelp+0xc4>)
 80130be:	68fa      	ldr	r2, [r7, #12]
 80130c0:	4613      	mov	r3, r2
 80130c2:	005b      	lsls	r3, r3, #1
 80130c4:	4413      	add	r3, r2
 80130c6:	009b      	lsls	r3, r3, #2
 80130c8:	440b      	add	r3, r1
 80130ca:	6819      	ldr	r1, [r3, #0]
 80130cc:	4826      	ldr	r0, [pc, #152]	; (8013168 <_cmdHelp+0xc4>)
 80130ce:	68fa      	ldr	r2, [r7, #12]
 80130d0:	4613      	mov	r3, r2
 80130d2:	005b      	lsls	r3, r3, #1
 80130d4:	4413      	add	r3, r2
 80130d6:	009b      	lsls	r3, r3, #2
 80130d8:	4403      	add	r3, r0
 80130da:	3308      	adds	r3, #8
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	460a      	mov	r2, r1
 80130e0:	4922      	ldr	r1, [pc, #136]	; (801316c <_cmdHelp+0xc8>)
 80130e2:	2000      	movs	r0, #0
 80130e4:	f000 fbac 	bl	8013840 <pifLog_Printf>
        i++;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	3301      	adds	r3, #1
 80130ec:	60fb      	str	r3, [r7, #12]
    while (c_cmd_table[i].p_name) {
 80130ee:	491e      	ldr	r1, [pc, #120]	; (8013168 <_cmdHelp+0xc4>)
 80130f0:	68fa      	ldr	r2, [r7, #12]
 80130f2:	4613      	mov	r3, r2
 80130f4:	005b      	lsls	r3, r3, #1
 80130f6:	4413      	add	r3, r2
 80130f8:	009b      	lsls	r3, r3, #2
 80130fa:	440b      	add	r3, r1
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d1dc      	bne.n	80130bc <_cmdHelp+0x18>
    }

    pifLog_Print(LT_NONE, "\nAvailable user commands:\n");
 8013102:	491b      	ldr	r1, [pc, #108]	; (8013170 <_cmdHelp+0xcc>)
 8013104:	2000      	movs	r0, #0
 8013106:	f000 fb0d 	bl	8013724 <pifLog_Print>
    i = 0;
 801310a:	2300      	movs	r3, #0
 801310c:	60fb      	str	r3, [r7, #12]
    while (s_log.p_cmd_table[1][i].p_name) {
 801310e:	e019      	b.n	8013144 <_cmdHelp+0xa0>
        pifLog_Printf(LT_NONE, "  %s\t%s\n", s_log.p_cmd_table[1][i].p_name, s_log.p_cmd_table[1][i].p_help);
 8013110:	4b18      	ldr	r3, [pc, #96]	; (8013174 <_cmdHelp+0xd0>)
 8013112:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013114:	68fa      	ldr	r2, [r7, #12]
 8013116:	4613      	mov	r3, r2
 8013118:	005b      	lsls	r3, r3, #1
 801311a:	4413      	add	r3, r2
 801311c:	009b      	lsls	r3, r3, #2
 801311e:	440b      	add	r3, r1
 8013120:	6818      	ldr	r0, [r3, #0]
 8013122:	4b14      	ldr	r3, [pc, #80]	; (8013174 <_cmdHelp+0xd0>)
 8013124:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013126:	68fa      	ldr	r2, [r7, #12]
 8013128:	4613      	mov	r3, r2
 801312a:	005b      	lsls	r3, r3, #1
 801312c:	4413      	add	r3, r2
 801312e:	009b      	lsls	r3, r3, #2
 8013130:	440b      	add	r3, r1
 8013132:	689b      	ldr	r3, [r3, #8]
 8013134:	4602      	mov	r2, r0
 8013136:	490d      	ldr	r1, [pc, #52]	; (801316c <_cmdHelp+0xc8>)
 8013138:	2000      	movs	r0, #0
 801313a:	f000 fb81 	bl	8013840 <pifLog_Printf>
        i++;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	3301      	adds	r3, #1
 8013142:	60fb      	str	r3, [r7, #12]
    while (s_log.p_cmd_table[1][i].p_name) {
 8013144:	4b0b      	ldr	r3, [pc, #44]	; (8013174 <_cmdHelp+0xd0>)
 8013146:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013148:	68fa      	ldr	r2, [r7, #12]
 801314a:	4613      	mov	r3, r2
 801314c:	005b      	lsls	r3, r3, #1
 801314e:	4413      	add	r3, r2
 8013150:	009b      	lsls	r3, r3, #2
 8013152:	440b      	add	r3, r1
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d1da      	bne.n	8013110 <_cmdHelp+0x6c>
    }
	return PIF_LOG_CMD_NO_ERROR;
 801315a:	2300      	movs	r3, #0
}
 801315c:	4618      	mov	r0, r3
 801315e:	3710      	adds	r7, #16
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}
 8013164:	08027ac8 	.word	0x08027ac8
 8013168:	080295d0 	.word	0x080295d0
 801316c:	08027ae4 	.word	0x08027ae4
 8013170:	08027af0 	.word	0x08027af0
 8013174:	20001f1c 	.word	0x20001f1c

08013178 <_cmdPrintVersion>:

static int _cmdPrintVersion(int argc, char* argv[])
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b084      	sub	sp, #16
 801317c:	af02      	add	r7, sp, #8
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifLog_Printf(LT_NONE, "PIF Version: %d.%d.%d %s\n", PIF_VERSION_MAJOR, PIF_VERSION_MINOR, PIF_VERSION_PATCH, __DATE__);
 8013182:	4b07      	ldr	r3, [pc, #28]	; (80131a0 <_cmdPrintVersion+0x28>)
 8013184:	9301      	str	r3, [sp, #4]
 8013186:	2300      	movs	r3, #0
 8013188:	9300      	str	r3, [sp, #0]
 801318a:	2301      	movs	r3, #1
 801318c:	2200      	movs	r2, #0
 801318e:	4905      	ldr	r1, [pc, #20]	; (80131a4 <_cmdPrintVersion+0x2c>)
 8013190:	2000      	movs	r0, #0
 8013192:	f000 fb55 	bl	8013840 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8013196:	2300      	movs	r3, #0
}
 8013198:	4618      	mov	r0, r3
 801319a:	3708      	adds	r7, #8
 801319c:	46bd      	mov	sp, r7
 801319e:	bd80      	pop	{r7, pc}
 80131a0:	08027b28 	.word	0x08027b28
 80131a4:	08027b0c 	.word	0x08027b0c

080131a8 <_cmdSetStatus>:

static int _cmdSetStatus(int argc, char* argv[])
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b086      	sub	sp, #24
 80131ac:	af02      	add	r7, sp, #8
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	6039      	str	r1, [r7, #0]
	BOOL value;
	int i;

	if (argc == 1) {
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2b01      	cmp	r3, #1
 80131b6:	d137      	bne.n	8013228 <_cmdSetStatus+0x80>
	   	pifLog_Printf(LT_NONE, "Task count: %d\n", pifTaskManager_Count());
 80131b8:	f001 fbd6 	bl	8014968 <pifTaskManager_Count>
 80131bc:	4603      	mov	r3, r0
 80131be:	461a      	mov	r2, r3
 80131c0:	494a      	ldr	r1, [pc, #296]	; (80132ec <_cmdSetStatus+0x144>)
 80131c2:	2000      	movs	r0, #0
 80131c4:	f000 fb3c 	bl	8013840 <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Error: %d\n", pif_error);
 80131c8:	4b49      	ldr	r3, [pc, #292]	; (80132f0 <_cmdSetStatus+0x148>)
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	461a      	mov	r2, r3
 80131ce:	4949      	ldr	r1, [pc, #292]	; (80132f4 <_cmdSetStatus+0x14c>)
 80131d0:	2000      	movs	r0, #0
 80131d2:	f000 fb35 	bl	8013840 <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Flag:\n");
 80131d6:	4948      	ldr	r1, [pc, #288]	; (80132f8 <_cmdSetStatus+0x150>)
 80131d8:	2000      	movs	r0, #0
 80131da:	f000 fb31 	bl	8013840 <pifLog_Printf>
	   	i = 0;
 80131de:	2300      	movs	r3, #0
 80131e0:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 80131e2:	e019      	b.n	8013218 <_cmdSetStatus+0x70>
			pifLog_Printf(LT_NONE, "  %s(%s): %d\n", c_log_flags[i].p_name, c_log_flags[i].p_command, (pif_log_flag.all >> i) & 1);
 80131e4:	4a45      	ldr	r2, [pc, #276]	; (80132fc <_cmdSetStatus+0x154>)
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80131ec:	4a43      	ldr	r2, [pc, #268]	; (80132fc <_cmdSetStatus+0x154>)
 80131ee:	68bb      	ldr	r3, [r7, #8]
 80131f0:	00db      	lsls	r3, r3, #3
 80131f2:	4413      	add	r3, r2
 80131f4:	6858      	ldr	r0, [r3, #4]
 80131f6:	4b42      	ldr	r3, [pc, #264]	; (8013300 <_cmdSetStatus+0x158>)
 80131f8:	681a      	ldr	r2, [r3, #0]
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	fa22 f303 	lsr.w	r3, r2, r3
 8013200:	f003 0301 	and.w	r3, r3, #1
 8013204:	9300      	str	r3, [sp, #0]
 8013206:	4603      	mov	r3, r0
 8013208:	460a      	mov	r2, r1
 801320a:	493e      	ldr	r1, [pc, #248]	; (8013304 <_cmdSetStatus+0x15c>)
 801320c:	2000      	movs	r0, #0
 801320e:	f000 fb17 	bl	8013840 <pifLog_Printf>
			i++;
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	3301      	adds	r3, #1
 8013216:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8013218:	4a38      	ldr	r2, [pc, #224]	; (80132fc <_cmdSetStatus+0x154>)
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d1df      	bne.n	80131e4 <_cmdSetStatus+0x3c>
		}
		return PIF_LOG_CMD_NO_ERROR;
 8013224:	2300      	movs	r3, #0
 8013226:	e05d      	b.n	80132e4 <_cmdSetStatus+0x13c>
	}
	else if (argc > 2) {
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2b02      	cmp	r3, #2
 801322c:	dd58      	ble.n	80132e0 <_cmdSetStatus+0x138>
		switch (argv[2][0]) {
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	3308      	adds	r3, #8
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	2b74      	cmp	r3, #116	; 0x74
 8013238:	d015      	beq.n	8013266 <_cmdSetStatus+0xbe>
 801323a:	2b74      	cmp	r3, #116	; 0x74
 801323c:	dc16      	bgt.n	801326c <_cmdSetStatus+0xc4>
 801323e:	2b66      	cmp	r3, #102	; 0x66
 8013240:	d00e      	beq.n	8013260 <_cmdSetStatus+0xb8>
 8013242:	2b66      	cmp	r3, #102	; 0x66
 8013244:	dc12      	bgt.n	801326c <_cmdSetStatus+0xc4>
 8013246:	2b54      	cmp	r3, #84	; 0x54
 8013248:	d00d      	beq.n	8013266 <_cmdSetStatus+0xbe>
 801324a:	2b54      	cmp	r3, #84	; 0x54
 801324c:	dc0e      	bgt.n	801326c <_cmdSetStatus+0xc4>
 801324e:	2b46      	cmp	r3, #70	; 0x46
 8013250:	d006      	beq.n	8013260 <_cmdSetStatus+0xb8>
 8013252:	2b46      	cmp	r3, #70	; 0x46
 8013254:	dc0a      	bgt.n	801326c <_cmdSetStatus+0xc4>
 8013256:	2b30      	cmp	r3, #48	; 0x30
 8013258:	d002      	beq.n	8013260 <_cmdSetStatus+0xb8>
 801325a:	2b31      	cmp	r3, #49	; 0x31
 801325c:	d003      	beq.n	8013266 <_cmdSetStatus+0xbe>
 801325e:	e005      	b.n	801326c <_cmdSetStatus+0xc4>
		case '0':
		case 'F':
		case 'f':
			value = FALSE;
 8013260:	2300      	movs	r3, #0
 8013262:	73fb      	strb	r3, [r7, #15]
			break;
 8013264:	e005      	b.n	8013272 <_cmdSetStatus+0xca>

		case '1':
		case 'T':
		case 't':
			value = TRUE;
 8013266:	2301      	movs	r3, #1
 8013268:	73fb      	strb	r3, [r7, #15]
			break;
 801326a:	e002      	b.n	8013272 <_cmdSetStatus+0xca>

		default:
			return PIF_LOG_CMD_INVALID_ARG;
 801326c:	f06f 0303 	mvn.w	r3, #3
 8013270:	e038      	b.n	80132e4 <_cmdSetStatus+0x13c>
		}
		i = 0;
 8013272:	2300      	movs	r3, #0
 8013274:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8013276:	e02a      	b.n	80132ce <_cmdSetStatus+0x126>
			if (!strcmp(argv[1], c_log_flags[i].p_command)) {
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	3304      	adds	r3, #4
 801327c:	681a      	ldr	r2, [r3, #0]
 801327e:	491f      	ldr	r1, [pc, #124]	; (80132fc <_cmdSetStatus+0x154>)
 8013280:	68bb      	ldr	r3, [r7, #8]
 8013282:	00db      	lsls	r3, r3, #3
 8013284:	440b      	add	r3, r1
 8013286:	685b      	ldr	r3, [r3, #4]
 8013288:	4619      	mov	r1, r3
 801328a:	4610      	mov	r0, r2
 801328c:	f7ec ffa4 	bl	80001d8 <strcmp>
 8013290:	4603      	mov	r3, r0
 8013292:	2b00      	cmp	r3, #0
 8013294:	d118      	bne.n	80132c8 <_cmdSetStatus+0x120>
				if (value) {
 8013296:	7bfb      	ldrb	r3, [r7, #15]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d009      	beq.n	80132b0 <_cmdSetStatus+0x108>
					pif_log_flag.all |= 1L << i;
 801329c:	4b18      	ldr	r3, [pc, #96]	; (8013300 <_cmdSetStatus+0x158>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	2101      	movs	r1, #1
 80132a2:	68ba      	ldr	r2, [r7, #8]
 80132a4:	fa01 f202 	lsl.w	r2, r1, r2
 80132a8:	4313      	orrs	r3, r2
 80132aa:	4a15      	ldr	r2, [pc, #84]	; (8013300 <_cmdSetStatus+0x158>)
 80132ac:	6013      	str	r3, [r2, #0]
 80132ae:	e009      	b.n	80132c4 <_cmdSetStatus+0x11c>
				}
				else {
					pif_log_flag.all &= ~(1L << i);
 80132b0:	4b13      	ldr	r3, [pc, #76]	; (8013300 <_cmdSetStatus+0x158>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	2101      	movs	r1, #1
 80132b6:	68ba      	ldr	r2, [r7, #8]
 80132b8:	fa01 f202 	lsl.w	r2, r1, r2
 80132bc:	43d2      	mvns	r2, r2
 80132be:	4013      	ands	r3, r2
 80132c0:	4a0f      	ldr	r2, [pc, #60]	; (8013300 <_cmdSetStatus+0x158>)
 80132c2:	6013      	str	r3, [r2, #0]
				}
				return PIF_LOG_CMD_NO_ERROR;
 80132c4:	2300      	movs	r3, #0
 80132c6:	e00d      	b.n	80132e4 <_cmdSetStatus+0x13c>
			}
			i++;
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	3301      	adds	r3, #1
 80132cc:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 80132ce:	4a0b      	ldr	r2, [pc, #44]	; (80132fc <_cmdSetStatus+0x154>)
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d1ce      	bne.n	8013278 <_cmdSetStatus+0xd0>
		}
		return PIF_LOG_CMD_INVALID_ARG;
 80132da:	f06f 0303 	mvn.w	r3, #3
 80132de:	e001      	b.n	80132e4 <_cmdSetStatus+0x13c>
	}
	return PIF_LOG_CMD_TOO_FEW_ARGS;
 80132e0:	f06f 0302 	mvn.w	r3, #2
}
 80132e4:	4618      	mov	r0, r3
 80132e6:	3710      	adds	r7, #16
 80132e8:	46bd      	mov	sp, r7
 80132ea:	bd80      	pop	{r7, pc}
 80132ec:	08027b34 	.word	0x08027b34
 80132f0:	20001ef0 	.word	0x20001ef0
 80132f4:	08027b44 	.word	0x08027b44
 80132f8:	08027b50 	.word	0x08027b50
 80132fc:	0802959c 	.word	0x0802959c
 8013300:	20001f18 	.word	0x20001f18
 8013304:	08027b58 	.word	0x08027b58

08013308 <_getDebugString>:

static BOOL _getDebugString(PifLog* p_owner, PifActCommReceiveData act_receive_data)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b084      	sub	sp, #16
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
 8013310:	6039      	str	r1, [r7, #0]
    char tmp_char;
    BOOL str_get_done_flag = FALSE;
 8013312:	2300      	movs	r3, #0
 8013314:	73fb      	strb	r3, [r7, #15]
    static BOOL last_cr = FALSE;

	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8013316:	e0b5      	b.n	8013484 <_getDebugString+0x17c>
        switch (tmp_char) {
 8013318:	7bbb      	ldrb	r3, [r7, #14]
 801331a:	3b08      	subs	r3, #8
 801331c:	2b13      	cmp	r3, #19
 801331e:	d866      	bhi.n	80133ee <_getDebugString+0xe6>
 8013320:	a201      	add	r2, pc, #4	; (adr r2, 8013328 <_getDebugString+0x20>)
 8013322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013326:	bf00      	nop
 8013328:	08013379 	.word	0x08013379
 801332c:	080133ef 	.word	0x080133ef
 8013330:	080133d3 	.word	0x080133d3
 8013334:	080133ef 	.word	0x080133ef
 8013338:	080133ef 	.word	0x080133ef
 801333c:	080133c7 	.word	0x080133c7
 8013340:	080133ef 	.word	0x080133ef
 8013344:	080133ef 	.word	0x080133ef
 8013348:	080133ef 	.word	0x080133ef
 801334c:	080133ef 	.word	0x080133ef
 8013350:	080133ef 	.word	0x080133ef
 8013354:	080133ef 	.word	0x080133ef
 8013358:	080133ef 	.word	0x080133ef
 801335c:	080133ef 	.word	0x080133ef
 8013360:	080133ef 	.word	0x080133ef
 8013364:	080133ef 	.word	0x080133ef
 8013368:	080133ef 	.word	0x080133ef
 801336c:	080133ef 	.word	0x080133ef
 8013370:	080133ef 	.word	0x080133ef
 8013374:	080133e9 	.word	0x080133e9
        case '\b':
            if (p_owner->char_idx > 0) {
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801337e:	2b00      	cmp	r3, #0
 8013380:	d062      	beq.n	8013448 <_getDebugString+0x140>
            	while (!pifRingBuffer_PutString(p_owner->p_tx_buffer, "\b \b")) {
 8013382:	e004      	b.n	801338e <_getDebugString+0x86>
            		if (!pifTaskManager_Yield()) break;
 8013384:	f001 fba6 	bl	8014ad4 <pifTaskManager_Yield>
 8013388:	4603      	mov	r3, r0
 801338a:	2b00      	cmp	r3, #0
 801338c:	d009      	beq.n	80133a2 <_getDebugString+0x9a>
            	while (!pifRingBuffer_PutString(p_owner->p_tx_buffer, "\b \b")) {
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013392:	4944      	ldr	r1, [pc, #272]	; (80134a4 <_getDebugString+0x19c>)
 8013394:	4618      	mov	r0, r3
 8013396:	f000 fd95 	bl	8013ec4 <pifRingBuffer_PutString>
 801339a:	4603      	mov	r3, r0
 801339c:	2b00      	cmp	r3, #0
 801339e:	d0f1      	beq.n	8013384 <_getDebugString+0x7c>
 80133a0:	e000      	b.n	80133a4 <_getDebugString+0x9c>
            		if (!pifTaskManager_Yield()) break;
 80133a2:	bf00      	nop
            	}
                p_owner->char_idx--;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80133aa:	3b01      	subs	r3, #1
 80133ac:	b2da      	uxtb	r2, r3
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133b8:	687a      	ldr	r2, [r7, #4]
 80133ba:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80133be:	4413      	add	r3, r2
 80133c0:	2200      	movs	r2, #0
 80133c2:	701a      	strb	r2, [r3, #0]
            }
            break;
 80133c4:	e040      	b.n	8013448 <_getDebugString+0x140>

        case '\r':
        	last_cr = TRUE;
 80133c6:	4b38      	ldr	r3, [pc, #224]	; (80134a8 <_getDebugString+0x1a0>)
 80133c8:	2201      	movs	r2, #1
 80133ca:	701a      	strb	r2, [r3, #0]
            str_get_done_flag = TRUE;
 80133cc:	2301      	movs	r3, #1
 80133ce:	73fb      	strb	r3, [r7, #15]
            break;
 80133d0:	e03d      	b.n	801344e <_getDebugString+0x146>

        case '\n':
            if (last_cr == TRUE) {
 80133d2:	4b35      	ldr	r3, [pc, #212]	; (80134a8 <_getDebugString+0x1a0>)
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	2b01      	cmp	r3, #1
 80133d8:	d103      	bne.n	80133e2 <_getDebugString+0xda>
            	last_cr = FALSE;
 80133da:	4b33      	ldr	r3, [pc, #204]	; (80134a8 <_getDebugString+0x1a0>)
 80133dc:	2200      	movs	r2, #0
 80133de:	701a      	strb	r2, [r3, #0]
            }
            else {
            	str_get_done_flag = TRUE;
            }
            break;
 80133e0:	e035      	b.n	801344e <_getDebugString+0x146>
            	str_get_done_flag = TRUE;
 80133e2:	2301      	movs	r3, #1
 80133e4:	73fb      	strb	r3, [r7, #15]
            break;
 80133e6:	e032      	b.n	801344e <_getDebugString+0x146>

        case 0x1b:  // ESC-Key pressed
            str_get_done_flag = TRUE;
 80133e8:	2301      	movs	r3, #1
 80133ea:	73fb      	strb	r3, [r7, #15]
            break;
 80133ec:	e02f      	b.n	801344e <_getDebugString+0x146>

        default:
            if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80133f4:	461a      	mov	r2, r3
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80133fc:	3b03      	subs	r3, #3
 80133fe:	429a      	cmp	r2, r3
 8013400:	da24      	bge.n	801344c <_getDebugString+0x144>
                while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, tmp_char)) {
 8013402:	e004      	b.n	801340e <_getDebugString+0x106>
                	if (!pifTaskManager_Yield()) break;
 8013404:	f001 fb66 	bl	8014ad4 <pifTaskManager_Yield>
 8013408:	4603      	mov	r3, r0
 801340a:	2b00      	cmp	r3, #0
 801340c:	d00a      	beq.n	8013424 <_getDebugString+0x11c>
                while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, tmp_char)) {
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013412:	7bba      	ldrb	r2, [r7, #14]
 8013414:	4611      	mov	r1, r2
 8013416:	4618      	mov	r0, r3
 8013418:	f000 fcd6 	bl	8013dc8 <pifRingBuffer_PutByte>
 801341c:	4603      	mov	r3, r0
 801341e:	2b00      	cmp	r3, #0
 8013420:	d0f0      	beq.n	8013404 <_getDebugString+0xfc>
 8013422:	e000      	b.n	8013426 <_getDebugString+0x11e>
                	if (!pifTaskManager_Yield()) break;
 8013424:	bf00      	nop
                }
                p_owner->p_rx_buffer[p_owner->char_idx] = tmp_char;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8013430:	4413      	add	r3, r2
 8013432:	7bba      	ldrb	r2, [r7, #14]
 8013434:	701a      	strb	r2, [r3, #0]
                p_owner->char_idx++;
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801343c:	3301      	adds	r3, #1
 801343e:	b2da      	uxtb	r2, r3
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            }
            break;
 8013446:	e001      	b.n	801344c <_getDebugString+0x144>
            break;
 8013448:	bf00      	nop
 801344a:	e000      	b.n	801344e <_getDebugString+0x146>
            break;
 801344c:	bf00      	nop
        }

        if (str_get_done_flag == TRUE) {
 801344e:	7bfb      	ldrb	r3, [r7, #15]
 8013450:	2b01      	cmp	r3, #1
 8013452:	d117      	bne.n	8013484 <_getDebugString+0x17c>
        	p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013458:	687a      	ldr	r2, [r7, #4]
 801345a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 801345e:	4413      	add	r3, r2
 8013460:	2200      	movs	r2, #0
 8013462:	701a      	strb	r2, [r3, #0]
        	while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\n')) {
 8013464:	e005      	b.n	8013472 <_getDebugString+0x16a>
        		if (!pifTaskManager_Yield()) break;
 8013466:	f001 fb35 	bl	8014ad4 <pifTaskManager_Yield>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d100      	bne.n	8013472 <_getDebugString+0x16a>
 8013470:	e008      	b.n	8013484 <_getDebugString+0x17c>
        	while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\n')) {
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013476:	210a      	movs	r1, #10
 8013478:	4618      	mov	r0, r3
 801347a:	f000 fca5 	bl	8013dc8 <pifRingBuffer_PutByte>
 801347e:	4603      	mov	r3, r0
 8013480:	2b00      	cmp	r3, #0
 8013482:	d0f0      	beq.n	8013466 <_getDebugString+0x15e>
	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	6a1a      	ldr	r2, [r3, #32]
 8013488:	f107 010e 	add.w	r1, r7, #14
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	4610      	mov	r0, r2
 8013490:	4798      	blx	r3
 8013492:	4603      	mov	r3, r0
 8013494:	2b00      	cmp	r3, #0
 8013496:	f47f af3f 	bne.w	8013318 <_getDebugString+0x10>
        	}
        }
    }
    return str_get_done_flag;
 801349a:	7bfb      	ldrb	r3, [r7, #15]
}
 801349c:	4618      	mov	r0, r3
 801349e:	3710      	adds	r7, #16
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}
 80134a4:	08027b68 	.word	0x08027b68
 80134a8:	20001f80 	.word	0x20001f80

080134ac <_evtParsing>:
    }
    return PIF_LOG_CMD_NO_ERROR;
}

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b084      	sub	sp, #16
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
 80134b4:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	60fb      	str	r3, [r7, #12]

    if (p_owner->cmd_done == FALSE) {
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d10e      	bne.n	80134e2 <_evtParsing+0x36>
        if (_getDebugString(p_owner, act_receive_data)) {
 80134c4:	6839      	ldr	r1, [r7, #0]
 80134c6:	68f8      	ldr	r0, [r7, #12]
 80134c8:	f7ff ff1e 	bl	8013308 <_getDebugString>
 80134cc:	4603      	mov	r3, r0
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d007      	beq.n	80134e2 <_evtParsing+0x36>
        	p_owner->cmd_done = TRUE;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	2201      	movs	r2, #1
 80134d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        	p_owner->p_task->immediate = TRUE;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134de:	2201      	movs	r2, #1
 80134e0:	705a      	strb	r2, [r3, #1]
        }
    }
}
 80134e2:	bf00      	nop
 80134e4:	3710      	adds	r7, #16
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}

080134ea <_evtSending>:
}

#endif

static BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 80134ea:	b5b0      	push	{r4, r5, r7, lr}
 80134ec:	b084      	sub	sp, #16
 80134ee:	af00      	add	r7, sp, #0
 80134f0:	6078      	str	r0, [r7, #4]
 80134f2:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (!pifRingBuffer_IsEmpty(p_owner->p_tx_buffer)) {
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134fc:	4618      	mov	r0, r3
 80134fe:	f000 fbc4 	bl	8013c8a <pifRingBuffer_IsEmpty>
 8013502:	4603      	mov	r3, r0
 8013504:	2b00      	cmp	r3, #0
 8013506:	d11f      	bne.n	8013548 <_evtSending+0x5e>
		length = (*act_send_data)(p_owner->p_comm, pifRingBuffer_GetTailPointer(p_owner->p_tx_buffer, 0),
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	6a1c      	ldr	r4, [r3, #32]
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013510:	2100      	movs	r1, #0
 8013512:	4618      	mov	r0, r3
 8013514:	f000 fb8d 	bl	8013c32 <pifRingBuffer_GetTailPointer>
 8013518:	4605      	mov	r5, r0
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801351e:	2100      	movs	r1, #0
 8013520:	4618      	mov	r0, r3
 8013522:	f000 fbe7 	bl	8013cf4 <pifRingBuffer_GetLinerSize>
 8013526:	4603      	mov	r3, r0
 8013528:	461a      	mov	r2, r3
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	4629      	mov	r1, r5
 801352e:	4620      	mov	r0, r4
 8013530:	4798      	blx	r3
 8013532:	4603      	mov	r3, r0
 8013534:	817b      	strh	r3, [r7, #10]
    			pifRingBuffer_GetLinerSize(p_owner->p_tx_buffer, 0));
		pifRingBuffer_Remove(p_owner->p_tx_buffer, length);
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801353a:	897a      	ldrh	r2, [r7, #10]
 801353c:	4611      	mov	r1, r2
 801353e:	4618      	mov	r0, r3
 8013540:	f000 fd7f 	bl	8014042 <pifRingBuffer_Remove>
		return TRUE;
 8013544:	2301      	movs	r3, #1
 8013546:	e000      	b.n	801354a <_evtSending+0x60>
	}
	return FALSE;
 8013548:	2300      	movs	r3, #0
}
 801354a:	4618      	mov	r0, r3
 801354c:	3710      	adds	r7, #16
 801354e:	46bd      	mov	sp, r7
 8013550:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013554 <_printLog>:

static void _printLog(char* p_string, BOOL vcd)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b082      	sub	sp, #8
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	460b      	mov	r3, r1
 801355e:	70fb      	strb	r3, [r7, #3]
	if (!vcd && pifRingBuffer_IsBuffer(&s_log.buffer)) {
 8013560:	78fb      	ldrb	r3, [r7, #3]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d109      	bne.n	801357a <_printLog+0x26>
 8013566:	4813      	ldr	r0, [pc, #76]	; (80135b4 <_printLog+0x60>)
 8013568:	f000 fb7e 	bl	8013c68 <pifRingBuffer_IsBuffer>
 801356c:	4603      	mov	r3, r0
 801356e:	2b00      	cmp	r3, #0
 8013570:	d003      	beq.n	801357a <_printLog+0x26>
		pifRingBuffer_PutString(&s_log.buffer, p_string);
 8013572:	6879      	ldr	r1, [r7, #4]
 8013574:	480f      	ldr	r0, [pc, #60]	; (80135b4 <_printLog+0x60>)
 8013576:	f000 fca5 	bl	8013ec4 <pifRingBuffer_PutString>
	}

	if (s_log.enable || vcd) {
 801357a:	4b0f      	ldr	r3, [pc, #60]	; (80135b8 <_printLog+0x64>)
 801357c:	781b      	ldrb	r3, [r3, #0]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d108      	bne.n	8013594 <_printLog+0x40>
 8013582:	78fb      	ldrb	r3, [r7, #3]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d010      	beq.n	80135aa <_printLog+0x56>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 8013588:	e004      	b.n	8013594 <_printLog+0x40>
        	if (!pifTaskManager_Yield()) break;
 801358a:	f001 faa3 	bl	8014ad4 <pifTaskManager_Yield>
 801358e:	4603      	mov	r3, r0
 8013590:	2b00      	cmp	r3, #0
 8013592:	d009      	beq.n	80135a8 <_printLog+0x54>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 8013594:	4b08      	ldr	r3, [pc, #32]	; (80135b8 <_printLog+0x64>)
 8013596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013598:	6879      	ldr	r1, [r7, #4]
 801359a:	4618      	mov	r0, r3
 801359c:	f000 fc92 	bl	8013ec4 <pifRingBuffer_PutString>
 80135a0:	4603      	mov	r3, r0
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d0f1      	beq.n	801358a <_printLog+0x36>
        }
	}
}
 80135a6:	e000      	b.n	80135aa <_printLog+0x56>
        	if (!pifTaskManager_Yield()) break;
 80135a8:	bf00      	nop
}
 80135aa:	bf00      	nop
 80135ac:	3708      	adds	r7, #8
 80135ae:	46bd      	mov	sp, r7
 80135b0:	bd80      	pop	{r7, pc}
 80135b2:	bf00      	nop
 80135b4:	20001f20 	.word	0x20001f20
 80135b8:	20001f1c 	.word	0x20001f1c

080135bc <_printTime>:

static void _printTime()
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b082      	sub	sp, #8
 80135c0:	af00      	add	r7, sp, #0
	int offset = 0;
 80135c2:	2300      	movs	r3, #0
 80135c4:	607b      	str	r3, [r7, #4]
    static char tmp_buf[20];

    tmp_buf[offset++] = '\n';
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	1c5a      	adds	r2, r3, #1
 80135ca:	607a      	str	r2, [r7, #4]
 80135cc:	4a35      	ldr	r2, [pc, #212]	; (80136a4 <_printTime+0xe8>)
 80135ce:	210a      	movs	r1, #10
 80135d0:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	4a33      	ldr	r2, [pc, #204]	; (80136a4 <_printTime+0xe8>)
 80135d6:	4413      	add	r3, r2
 80135d8:	4a33      	ldr	r2, [pc, #204]	; (80136a8 <_printTime+0xec>)
 80135da:	7952      	ldrb	r2, [r2, #5]
 80135dc:	b2d2      	uxtb	r2, r2
 80135de:	4611      	mov	r1, r2
 80135e0:	2202      	movs	r2, #2
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7fe fa6c 	bl	8011ac0 <pif_DecToString>
 80135e8:	4602      	mov	r2, r0
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	4413      	add	r3, r2
 80135ee:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = '.';
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	1c5a      	adds	r2, r3, #1
 80135f4:	607a      	str	r2, [r7, #4]
 80135f6:	4a2b      	ldr	r2, [pc, #172]	; (80136a4 <_printTime+0xe8>)
 80135f8:	212e      	movs	r1, #46	; 0x2e
 80135fa:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	4a29      	ldr	r2, [pc, #164]	; (80136a4 <_printTime+0xe8>)
 8013600:	4413      	add	r3, r2
 8013602:	4a2a      	ldr	r2, [pc, #168]	; (80136ac <_printTime+0xf0>)
 8013604:	8812      	ldrh	r2, [r2, #0]
 8013606:	b292      	uxth	r2, r2
 8013608:	4611      	mov	r1, r2
 801360a:	2203      	movs	r2, #3
 801360c:	4618      	mov	r0, r3
 801360e:	f7fe fa57 	bl	8011ac0 <pif_DecToString>
 8013612:	4602      	mov	r2, r0
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	4413      	add	r3, r2
 8013618:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	1c5a      	adds	r2, r3, #1
 801361e:	607a      	str	r2, [r7, #4]
 8013620:	4a20      	ldr	r2, [pc, #128]	; (80136a4 <_printTime+0xe8>)
 8013622:	2120      	movs	r1, #32
 8013624:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = 'T';
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	1c5a      	adds	r2, r3, #1
 801362a:	607a      	str	r2, [r7, #4]
 801362c:	4a1d      	ldr	r2, [pc, #116]	; (80136a4 <_printTime+0xe8>)
 801362e:	2154      	movs	r1, #84	; 0x54
 8013630:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = ' ';
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	1c5a      	adds	r2, r3, #1
 8013636:	607a      	str	r2, [r7, #4]
 8013638:	4a1a      	ldr	r2, [pc, #104]	; (80136a4 <_printTime+0xe8>)
 801363a:	2120      	movs	r1, #32
 801363c:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.hour, 2);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	4a18      	ldr	r2, [pc, #96]	; (80136a4 <_printTime+0xe8>)
 8013642:	4413      	add	r3, r2
 8013644:	4a18      	ldr	r2, [pc, #96]	; (80136a8 <_printTime+0xec>)
 8013646:	78d2      	ldrb	r2, [r2, #3]
 8013648:	b2d2      	uxtb	r2, r2
 801364a:	4611      	mov	r1, r2
 801364c:	2202      	movs	r2, #2
 801364e:	4618      	mov	r0, r3
 8013650:	f7fe fa36 	bl	8011ac0 <pif_DecToString>
 8013654:	4602      	mov	r2, r0
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	4413      	add	r3, r2
 801365a:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ':';
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	1c5a      	adds	r2, r3, #1
 8013660:	607a      	str	r2, [r7, #4]
 8013662:	4a10      	ldr	r2, [pc, #64]	; (80136a4 <_printTime+0xe8>)
 8013664:	213a      	movs	r1, #58	; 0x3a
 8013666:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.minute, 2);
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	4a0e      	ldr	r2, [pc, #56]	; (80136a4 <_printTime+0xe8>)
 801366c:	4413      	add	r3, r2
 801366e:	4a0e      	ldr	r2, [pc, #56]	; (80136a8 <_printTime+0xec>)
 8013670:	7912      	ldrb	r2, [r2, #4]
 8013672:	b2d2      	uxtb	r2, r2
 8013674:	4611      	mov	r1, r2
 8013676:	2202      	movs	r2, #2
 8013678:	4618      	mov	r0, r3
 801367a:	f7fe fa21 	bl	8011ac0 <pif_DecToString>
 801367e:	4602      	mov	r2, r0
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	4413      	add	r3, r2
 8013684:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	1c5a      	adds	r2, r3, #1
 801368a:	607a      	str	r2, [r7, #4]
 801368c:	4a05      	ldr	r2, [pc, #20]	; (80136a4 <_printTime+0xe8>)
 801368e:	2120      	movs	r1, #32
 8013690:	54d1      	strb	r1, [r2, r3]

	_printLog(tmp_buf, FALSE);
 8013692:	2100      	movs	r1, #0
 8013694:	4803      	ldr	r0, [pc, #12]	; (80136a4 <_printTime+0xe8>)
 8013696:	f7ff ff5d 	bl	8013554 <_printLog>
}
 801369a:	bf00      	nop
 801369c:	3708      	adds	r7, #8
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}
 80136a2:	bf00      	nop
 80136a4:	20001f84 	.word	0x20001f84
 80136a8:	20001f00 	.word	0x20001f00
 80136ac:	20001ef8 	.word	0x20001ef8

080136b0 <pifLog_UseCommand>:
}

#ifdef __PIF_LOG_COMMAND__

BOOL pifLog_UseCommand(const PifLogCmdEntry* p_cmd_table, const char* p_prompt)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b082      	sub	sp, #8
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	6039      	str	r1, [r7, #0]
    if (!p_cmd_table || !p_prompt) {
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d002      	beq.n	80136c6 <pifLog_UseCommand+0x16>
 80136c0:	683b      	ldr	r3, [r7, #0]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d104      	bne.n	80136d0 <pifLog_UseCommand+0x20>
    	pif_error = E_INVALID_PARAM;
 80136c6:	4b14      	ldr	r3, [pc, #80]	; (8013718 <pifLog_UseCommand+0x68>)
 80136c8:	2201      	movs	r2, #1
 80136ca:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80136cc:	2300      	movs	r3, #0
 80136ce:	e01e      	b.n	801370e <pifLog_UseCommand+0x5e>
    }

    s_log.p_rx_buffer = calloc(sizeof(char), PIF_LOG_RX_BUFFER_SIZE);
 80136d0:	2120      	movs	r1, #32
 80136d2:	2001      	movs	r0, #1
 80136d4:	f00f fd8a 	bl	80231ec <calloc>
 80136d8:	4603      	mov	r3, r0
 80136da:	461a      	mov	r2, r3
 80136dc:	4b0f      	ldr	r3, [pc, #60]	; (801371c <pifLog_UseCommand+0x6c>)
 80136de:	631a      	str	r2, [r3, #48]	; 0x30
    if (!s_log.p_rx_buffer) {
 80136e0:	4b0e      	ldr	r3, [pc, #56]	; (801371c <pifLog_UseCommand+0x6c>)
 80136e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d104      	bne.n	80136f2 <pifLog_UseCommand+0x42>
        pif_error = E_OUT_OF_HEAP;
 80136e8:	4b0b      	ldr	r3, [pc, #44]	; (8013718 <pifLog_UseCommand+0x68>)
 80136ea:	2203      	movs	r2, #3
 80136ec:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80136ee:	2300      	movs	r3, #0
 80136f0:	e00d      	b.n	801370e <pifLog_UseCommand+0x5e>
    }
    s_log.rx_buffer_size = PIF_LOG_RX_BUFFER_SIZE;
 80136f2:	4b0a      	ldr	r3, [pc, #40]	; (801371c <pifLog_UseCommand+0x6c>)
 80136f4:	2220      	movs	r2, #32
 80136f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    s_log.p_cmd_table[0] = c_cmd_table;
 80136fa:	4b08      	ldr	r3, [pc, #32]	; (801371c <pifLog_UseCommand+0x6c>)
 80136fc:	4a08      	ldr	r2, [pc, #32]	; (8013720 <pifLog_UseCommand+0x70>)
 80136fe:	659a      	str	r2, [r3, #88]	; 0x58
    s_log.p_cmd_table[1] = p_cmd_table;
 8013700:	4a06      	ldr	r2, [pc, #24]	; (801371c <pifLog_UseCommand+0x6c>)
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	65d3      	str	r3, [r2, #92]	; 0x5c
    s_log.p_prompt = p_prompt;
 8013706:	4a05      	ldr	r2, [pc, #20]	; (801371c <pifLog_UseCommand+0x6c>)
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	6613      	str	r3, [r2, #96]	; 0x60
    return TRUE;
 801370c:	2301      	movs	r3, #1
}
 801370e:	4618      	mov	r0, r3
 8013710:	3708      	adds	r7, #8
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}
 8013716:	bf00      	nop
 8013718:	20001ef0 	.word	0x20001ef0
 801371c:	20001f1c 	.word	0x20001f1c
 8013720:	080295d0 	.word	0x080295d0

08013724 <pifLog_Print>:
{
	return pifRingBuffer_IsEmpty(&s_log.buffer);
}

void pifLog_Print(PifLogType type, const char* p_string)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b098      	sub	sp, #96	; 0x60
 8013728:	af00      	add	r7, sp, #0
 801372a:	4603      	mov	r3, r0
 801372c:	6039      	str	r1, [r7, #0]
 801372e:	71fb      	strb	r3, [r7, #7]
	int offset = 0;
 8013730:	2300      	movs	r3, #0
 8013732:	65fb      	str	r3, [r7, #92]	; 0x5c
    char tmp_buf[PIF_LOG_LINE_SIZE];

    if (type >= LT_INFO) {
 8013734:	79fb      	ldrb	r3, [r7, #7]
 8013736:	2b01      	cmp	r3, #1
 8013738:	d96b      	bls.n	8013812 <pifLog_Print+0xee>
        if (s_minute != pif_datetime.minute) {
 801373a:	4b3d      	ldr	r3, [pc, #244]	; (8013830 <pifLog_Print+0x10c>)
 801373c:	791b      	ldrb	r3, [r3, #4]
 801373e:	b2da      	uxtb	r2, r3
 8013740:	4b3c      	ldr	r3, [pc, #240]	; (8013834 <pifLog_Print+0x110>)
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	429a      	cmp	r2, r3
 8013746:	d006      	beq.n	8013756 <pifLog_Print+0x32>
        	_printTime();
 8013748:	f7ff ff38 	bl	80135bc <_printTime>
        	s_minute = pif_datetime.minute;
 801374c:	4b38      	ldr	r3, [pc, #224]	; (8013830 <pifLog_Print+0x10c>)
 801374e:	791b      	ldrb	r3, [r3, #4]
 8013750:	b2da      	uxtb	r2, r3
 8013752:	4b38      	ldr	r3, [pc, #224]	; (8013834 <pifLog_Print+0x110>)
 8013754:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 8013756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013758:	1c5a      	adds	r2, r3, #1
 801375a:	65fa      	str	r2, [r7, #92]	; 0x5c
 801375c:	3360      	adds	r3, #96	; 0x60
 801375e:	443b      	add	r3, r7
 8013760:	220a      	movs	r2, #10
 8013762:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 8013766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013768:	f107 020c 	add.w	r2, r7, #12
 801376c:	4413      	add	r3, r2
 801376e:	4a30      	ldr	r2, [pc, #192]	; (8013830 <pifLog_Print+0x10c>)
 8013770:	7952      	ldrb	r2, [r2, #5]
 8013772:	b2d2      	uxtb	r2, r2
 8013774:	4611      	mov	r1, r2
 8013776:	2202      	movs	r2, #2
 8013778:	4618      	mov	r0, r3
 801377a:	f7fe f9a1 	bl	8011ac0 <pif_DecToString>
 801377e:	4602      	mov	r2, r0
 8013780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013782:	4413      	add	r3, r2
 8013784:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = '.';
 8013786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013788:	1c5a      	adds	r2, r3, #1
 801378a:	65fa      	str	r2, [r7, #92]	; 0x5c
 801378c:	3360      	adds	r3, #96	; 0x60
 801378e:	443b      	add	r3, r7
 8013790:	222e      	movs	r2, #46	; 0x2e
 8013792:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 8013796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013798:	f107 020c 	add.w	r2, r7, #12
 801379c:	4413      	add	r3, r2
 801379e:	4a26      	ldr	r2, [pc, #152]	; (8013838 <pifLog_Print+0x114>)
 80137a0:	8812      	ldrh	r2, [r2, #0]
 80137a2:	b292      	uxth	r2, r2
 80137a4:	4611      	mov	r1, r2
 80137a6:	2203      	movs	r2, #3
 80137a8:	4618      	mov	r0, r3
 80137aa:	f7fe f989 	bl	8011ac0 <pif_DecToString>
 80137ae:	4602      	mov	r2, r0
 80137b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80137b2:	4413      	add	r3, r2
 80137b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = ' ';
 80137b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80137b8:	1c5a      	adds	r2, r3, #1
 80137ba:	65fa      	str	r2, [r7, #92]	; 0x5c
 80137bc:	3360      	adds	r3, #96	; 0x60
 80137be:	443b      	add	r3, r7
 80137c0:	2220      	movs	r2, #32
 80137c2:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 80137c6:	79fb      	ldrb	r3, [r7, #7]
 80137c8:	1e9a      	subs	r2, r3, #2
 80137ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80137cc:	1c59      	adds	r1, r3, #1
 80137ce:	65f9      	str	r1, [r7, #92]	; 0x5c
 80137d0:	491a      	ldr	r1, [pc, #104]	; (801383c <pifLog_Print+0x118>)
 80137d2:	5c8a      	ldrb	r2, [r1, r2]
 80137d4:	3360      	adds	r3, #96	; 0x60
 80137d6:	443b      	add	r3, r7
 80137d8:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = ' ';
 80137dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80137de:	1c5a      	adds	r2, r3, #1
 80137e0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80137e2:	3360      	adds	r3, #96	; 0x60
 80137e4:	443b      	add	r3, r7
 80137e6:	2220      	movs	r2, #32
 80137e8:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset] = 0;
 80137ec:	f107 020c 	add.w	r2, r7, #12
 80137f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80137f2:	4413      	add	r3, r2
 80137f4:	2200      	movs	r2, #0
 80137f6:	701a      	strb	r2, [r3, #0]
    	_printLog(tmp_buf, type == LT_VCD);
 80137f8:	79fb      	ldrb	r3, [r7, #7]
 80137fa:	2b01      	cmp	r3, #1
 80137fc:	bf0c      	ite	eq
 80137fe:	2301      	moveq	r3, #1
 8013800:	2300      	movne	r3, #0
 8013802:	b2db      	uxtb	r3, r3
 8013804:	461a      	mov	r2, r3
 8013806:	f107 030c 	add.w	r3, r7, #12
 801380a:	4611      	mov	r1, r2
 801380c:	4618      	mov	r0, r3
 801380e:	f7ff fea1 	bl	8013554 <_printLog>
    }

	_printLog((char*)p_string, type == LT_VCD);
 8013812:	79fb      	ldrb	r3, [r7, #7]
 8013814:	2b01      	cmp	r3, #1
 8013816:	bf0c      	ite	eq
 8013818:	2301      	moveq	r3, #1
 801381a:	2300      	movne	r3, #0
 801381c:	b2db      	uxtb	r3, r3
 801381e:	4619      	mov	r1, r3
 8013820:	6838      	ldr	r0, [r7, #0]
 8013822:	f7ff fe97 	bl	8013554 <_printLog>
}
 8013826:	bf00      	nop
 8013828:	3760      	adds	r7, #96	; 0x60
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}
 801382e:	bf00      	nop
 8013830:	20001f00 	.word	0x20001f00
 8013834:	20000068 	.word	0x20000068
 8013838:	20001ef8 	.word	0x20001ef8
 801383c:	080295cc 	.word	0x080295cc

08013840 <pifLog_Printf>:

void pifLog_Printf(PifLogType type, const char* p_format, ...)
{
 8013840:	b40e      	push	{r1, r2, r3}
 8013842:	b580      	push	{r7, lr}
 8013844:	b09b      	sub	sp, #108	; 0x6c
 8013846:	af00      	add	r7, sp, #0
 8013848:	4603      	mov	r3, r0
 801384a:	71fb      	strb	r3, [r7, #7]
	va_list data;
	int offset = 0;
 801384c:	2300      	movs	r3, #0
 801384e:	667b      	str	r3, [r7, #100]	; 0x64
    char tmp_buf[PIF_LOG_LINE_SIZE + 1];

    if (type >= LT_INFO) {
 8013850:	79fb      	ldrb	r3, [r7, #7]
 8013852:	2b01      	cmp	r3, #1
 8013854:	d958      	bls.n	8013908 <pifLog_Printf+0xc8>
        if (s_minute != pif_datetime.minute) {
 8013856:	4b3d      	ldr	r3, [pc, #244]	; (801394c <pifLog_Printf+0x10c>)
 8013858:	791b      	ldrb	r3, [r3, #4]
 801385a:	b2da      	uxtb	r2, r3
 801385c:	4b3c      	ldr	r3, [pc, #240]	; (8013950 <pifLog_Printf+0x110>)
 801385e:	781b      	ldrb	r3, [r3, #0]
 8013860:	429a      	cmp	r2, r3
 8013862:	d006      	beq.n	8013872 <pifLog_Printf+0x32>
        	_printTime();
 8013864:	f7ff feaa 	bl	80135bc <_printTime>
        	s_minute = pif_datetime.minute;
 8013868:	4b38      	ldr	r3, [pc, #224]	; (801394c <pifLog_Printf+0x10c>)
 801386a:	791b      	ldrb	r3, [r3, #4]
 801386c:	b2da      	uxtb	r2, r3
 801386e:	4b38      	ldr	r3, [pc, #224]	; (8013950 <pifLog_Printf+0x110>)
 8013870:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 8013872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013874:	1c5a      	adds	r2, r3, #1
 8013876:	667a      	str	r2, [r7, #100]	; 0x64
 8013878:	3368      	adds	r3, #104	; 0x68
 801387a:	443b      	add	r3, r7
 801387c:	220a      	movs	r2, #10
 801387e:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 8013882:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013884:	f107 020c 	add.w	r2, r7, #12
 8013888:	4413      	add	r3, r2
 801388a:	4a30      	ldr	r2, [pc, #192]	; (801394c <pifLog_Printf+0x10c>)
 801388c:	7952      	ldrb	r2, [r2, #5]
 801388e:	b2d2      	uxtb	r2, r2
 8013890:	4611      	mov	r1, r2
 8013892:	2202      	movs	r2, #2
 8013894:	4618      	mov	r0, r3
 8013896:	f7fe f913 	bl	8011ac0 <pif_DecToString>
 801389a:	4602      	mov	r2, r0
 801389c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801389e:	4413      	add	r3, r2
 80138a0:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = '.';
 80138a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80138a4:	1c5a      	adds	r2, r3, #1
 80138a6:	667a      	str	r2, [r7, #100]	; 0x64
 80138a8:	3368      	adds	r3, #104	; 0x68
 80138aa:	443b      	add	r3, r7
 80138ac:	222e      	movs	r2, #46	; 0x2e
 80138ae:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 80138b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80138b4:	f107 020c 	add.w	r2, r7, #12
 80138b8:	4413      	add	r3, r2
 80138ba:	4a26      	ldr	r2, [pc, #152]	; (8013954 <pifLog_Printf+0x114>)
 80138bc:	8812      	ldrh	r2, [r2, #0]
 80138be:	b292      	uxth	r2, r2
 80138c0:	4611      	mov	r1, r2
 80138c2:	2203      	movs	r2, #3
 80138c4:	4618      	mov	r0, r3
 80138c6:	f7fe f8fb 	bl	8011ac0 <pif_DecToString>
 80138ca:	4602      	mov	r2, r0
 80138cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80138ce:	4413      	add	r3, r2
 80138d0:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = ' ';
 80138d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80138d4:	1c5a      	adds	r2, r3, #1
 80138d6:	667a      	str	r2, [r7, #100]	; 0x64
 80138d8:	3368      	adds	r3, #104	; 0x68
 80138da:	443b      	add	r3, r7
 80138dc:	2220      	movs	r2, #32
 80138de:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 80138e2:	79fb      	ldrb	r3, [r7, #7]
 80138e4:	1e9a      	subs	r2, r3, #2
 80138e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80138e8:	1c59      	adds	r1, r3, #1
 80138ea:	6679      	str	r1, [r7, #100]	; 0x64
 80138ec:	491a      	ldr	r1, [pc, #104]	; (8013958 <pifLog_Printf+0x118>)
 80138ee:	5c8a      	ldrb	r2, [r1, r2]
 80138f0:	3368      	adds	r3, #104	; 0x68
 80138f2:	443b      	add	r3, r7
 80138f4:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = ' ';
 80138f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80138fa:	1c5a      	adds	r2, r3, #1
 80138fc:	667a      	str	r2, [r7, #100]	; 0x64
 80138fe:	3368      	adds	r3, #104	; 0x68
 8013900:	443b      	add	r3, r7
 8013902:	2220      	movs	r2, #32
 8013904:	f803 2c5c 	strb.w	r2, [r3, #-92]
    }

	va_start(data, p_format);
 8013908:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801390c:	663b      	str	r3, [r7, #96]	; 0x60
	pif_PrintFormat(tmp_buf + offset, &data, p_format);
 801390e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013910:	f107 020c 	add.w	r2, r7, #12
 8013914:	4413      	add	r3, r2
 8013916:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801391a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801391c:	4618      	mov	r0, r3
 801391e:	f7fe fa5b 	bl	8011dd8 <pif_PrintFormat>
	va_end(data);

	_printLog(tmp_buf, type == LT_VCD);
 8013922:	79fb      	ldrb	r3, [r7, #7]
 8013924:	2b01      	cmp	r3, #1
 8013926:	bf0c      	ite	eq
 8013928:	2301      	moveq	r3, #1
 801392a:	2300      	movne	r3, #0
 801392c:	b2db      	uxtb	r3, r3
 801392e:	461a      	mov	r2, r3
 8013930:	f107 030c 	add.w	r3, r7, #12
 8013934:	4611      	mov	r1, r2
 8013936:	4618      	mov	r0, r3
 8013938:	f7ff fe0c 	bl	8013554 <_printLog>
}
 801393c:	bf00      	nop
 801393e:	376c      	adds	r7, #108	; 0x6c
 8013940:	46bd      	mov	sp, r7
 8013942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013946:	b003      	add	sp, #12
 8013948:	4770      	bx	lr
 801394a:	bf00      	nop
 801394c:	20001f00 	.word	0x20001f00
 8013950:	20000068 	.word	0x20000068
 8013954:	20001ef8 	.word	0x20001ef8
 8013958:	080295cc 	.word	0x080295cc

0801395c <pifLog_AttachComm>:
{
	return s_log.p_comm->_p_task;
}

BOOL pifLog_AttachComm(PifComm* p_comm)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b082      	sub	sp, #8
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
    s_log.p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, PIF_LOG_TX_BUFFER_SIZE);
 8013964:	2150      	movs	r1, #80	; 0x50
 8013966:	2000      	movs	r0, #0
 8013968:	f000 f8ae 	bl	8013ac8 <pifRingBuffer_CreateHeap>
 801396c:	4603      	mov	r3, r0
 801396e:	4a0b      	ldr	r2, [pc, #44]	; (801399c <pifLog_AttachComm+0x40>)
 8013970:	6253      	str	r3, [r2, #36]	; 0x24
    if (!s_log.p_tx_buffer) return FALSE;
 8013972:	4b0a      	ldr	r3, [pc, #40]	; (801399c <pifLog_AttachComm+0x40>)
 8013974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013976:	2b00      	cmp	r3, #0
 8013978:	d101      	bne.n	801397e <pifLog_AttachComm+0x22>
 801397a:	2300      	movs	r3, #0
 801397c:	e009      	b.n	8013992 <pifLog_AttachComm+0x36>

	s_log.p_comm = p_comm;
 801397e:	4a07      	ldr	r2, [pc, #28]	; (801399c <pifLog_AttachComm+0x40>)
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	6213      	str	r3, [r2, #32]
	pifComm_AttachClient(p_comm, &s_log, _evtParsing, _evtSending);
 8013984:	4b06      	ldr	r3, [pc, #24]	; (80139a0 <pifLog_AttachComm+0x44>)
 8013986:	4a07      	ldr	r2, [pc, #28]	; (80139a4 <pifLog_AttachComm+0x48>)
 8013988:	4904      	ldr	r1, [pc, #16]	; (801399c <pifLog_AttachComm+0x40>)
 801398a:	6878      	ldr	r0, [r7, #4]
 801398c:	f7fe fe60 	bl	8012650 <pifComm_AttachClient>
    return TRUE;
 8013990:	2301      	movs	r3, #1
}
 8013992:	4618      	mov	r0, r3
 8013994:	3708      	adds	r7, #8
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}
 801399a:	bf00      	nop
 801399c:	20001f1c 	.word	0x20001f1c
 80139a0:	080134eb 	.word	0x080134eb
 80139a4:	080134ad 	.word	0x080134ad

080139a8 <pifLog_DetachComm>:

void pifLog_DetachComm()
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	af00      	add	r7, sp, #0
	pifComm_DetachClient(s_log.p_comm);
 80139ac:	4b06      	ldr	r3, [pc, #24]	; (80139c8 <pifLog_DetachComm+0x20>)
 80139ae:	6a1b      	ldr	r3, [r3, #32]
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7fe fe63 	bl	801267c <pifComm_DetachClient>
	s_log.p_comm = NULL;
 80139b6:	4b04      	ldr	r3, [pc, #16]	; (80139c8 <pifLog_DetachComm+0x20>)
 80139b8:	2200      	movs	r2, #0
 80139ba:	621a      	str	r2, [r3, #32]

	pifRingBuffer_Destroy(&s_log.p_tx_buffer);
 80139bc:	4803      	ldr	r0, [pc, #12]	; (80139cc <pifLog_DetachComm+0x24>)
 80139be:	f000 f8af 	bl	8013b20 <pifRingBuffer_Destroy>
}
 80139c2:	bf00      	nop
 80139c4:	bd80      	pop	{r7, pc}
 80139c6:	bf00      	nop
 80139c8:	20001f1c 	.word	0x20001f1c
 80139cc:	20001f40 	.word	0x20001f40

080139d0 <_chopOff>:

#include <string.h>


static BOOL _chopOff(PifRingBuffer* p_owner, uint16_t count)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b084      	sub	sp, #16
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	460b      	mov	r3, r1
 80139da:	807b      	strh	r3, [r7, #2]
	uint16_t length;
	uint16_t size, tail;

	switch (p_owner->_bt.chop_off) {
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	791b      	ldrb	r3, [r3, #4]
 80139e0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80139e4:	b2db      	uxtb	r3, r3
 80139e6:	2b01      	cmp	r3, #1
 80139e8:	d002      	beq.n	80139f0 <_chopOff+0x20>
 80139ea:	2b02      	cmp	r3, #2
 80139ec:	d02e      	beq.n	8013a4c <_chopOff+0x7c>
 80139ee:	e065      	b.n	8013abc <_chopOff+0xec>
	case RB_CHOP_OFF_CHAR:
		size = 0;
 80139f0:	2300      	movs	r3, #0
 80139f2:	81fb      	strh	r3, [r7, #14]
		tail = p_owner->__tail;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	8adb      	ldrh	r3, [r3, #22]
 80139f8:	81bb      	strh	r3, [r7, #12]
		while (tail != p_owner->__head) {
 80139fa:	e021      	b.n	8013a40 <_chopOff+0x70>
			if (p_owner->__p_buffer[tail] == p_owner->__ui.chop_off_char) {
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	691a      	ldr	r2, [r3, #16]
 8013a00:	89bb      	ldrh	r3, [r7, #12]
 8013a02:	4413      	add	r3, r2
 8013a04:	781a      	ldrb	r2, [r3, #0]
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	7e9b      	ldrb	r3, [r3, #26]
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d108      	bne.n	8013a20 <_chopOff+0x50>
				if (size > count) {
 8013a0e:	89fa      	ldrh	r2, [r7, #14]
 8013a10:	887b      	ldrh	r3, [r7, #2]
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d904      	bls.n	8013a20 <_chopOff+0x50>
					p_owner->__tail = tail;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	89ba      	ldrh	r2, [r7, #12]
 8013a1a:	82da      	strh	r2, [r3, #22]
					return TRUE;
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	e04e      	b.n	8013abe <_chopOff+0xee>
				}
			}
			tail++;
 8013a20:	89bb      	ldrh	r3, [r7, #12]
 8013a22:	3301      	adds	r3, #1
 8013a24:	81bb      	strh	r3, [r7, #12]
			if (tail >= p_owner->_size) tail -= p_owner->_size;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	891b      	ldrh	r3, [r3, #8]
 8013a2a:	89ba      	ldrh	r2, [r7, #12]
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d304      	bcc.n	8013a3a <_chopOff+0x6a>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	891b      	ldrh	r3, [r3, #8]
 8013a34:	89ba      	ldrh	r2, [r7, #12]
 8013a36:	1ad3      	subs	r3, r2, r3
 8013a38:	81bb      	strh	r3, [r7, #12]
			size++;
 8013a3a:	89fb      	ldrh	r3, [r7, #14]
 8013a3c:	3301      	adds	r3, #1
 8013a3e:	81fb      	strh	r3, [r7, #14]
		while (tail != p_owner->__head) {
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	8a9b      	ldrh	r3, [r3, #20]
 8013a44:	89ba      	ldrh	r2, [r7, #12]
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d1d8      	bne.n	80139fc <_chopOff+0x2c>
		}
		break;
 8013a4a:	e037      	b.n	8013abc <_chopOff+0xec>

	case RB_CHOP_OFF_LENGTH:
		length = pifRingBuffer_GetFillSize(p_owner);
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f000 f92f 	bl	8013cb0 <pifRingBuffer_GetFillSize>
 8013a52:	4603      	mov	r3, r0
 8013a54:	817b      	strh	r3, [r7, #10]
		size = p_owner->__ui.chop_off_length;
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	8b5b      	ldrh	r3, [r3, #26]
 8013a5a:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013a5c:	e004      	b.n	8013a68 <_chopOff+0x98>
			size += p_owner->__ui.chop_off_length;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	8b5a      	ldrh	r2, [r3, #26]
 8013a62:	89fb      	ldrh	r3, [r7, #14]
 8013a64:	4413      	add	r3, r2
 8013a66:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013a68:	887a      	ldrh	r2, [r7, #2]
 8013a6a:	89fb      	ldrh	r3, [r7, #14]
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d8f6      	bhi.n	8013a5e <_chopOff+0x8e>
		}
		if (size < length) {
 8013a70:	89fa      	ldrh	r2, [r7, #14]
 8013a72:	897b      	ldrh	r3, [r7, #10]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d216      	bcs.n	8013aa6 <_chopOff+0xd6>
			p_owner->__tail += size;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	8ada      	ldrh	r2, [r3, #22]
 8013a7c:	89fb      	ldrh	r3, [r7, #14]
 8013a7e:	4413      	add	r3, r2
 8013a80:	b29a      	uxth	r2, r3
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	82da      	strh	r2, [r3, #22]
			if (p_owner->__tail >= p_owner->_size) p_owner->__tail -= p_owner->_size;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	8ada      	ldrh	r2, [r3, #22]
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	891b      	ldrh	r3, [r3, #8]
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d307      	bcc.n	8013aa2 <_chopOff+0xd2>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	8ada      	ldrh	r2, [r3, #22]
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	891b      	ldrh	r3, [r3, #8]
 8013a9a:	1ad3      	subs	r3, r2, r3
 8013a9c:	b29a      	uxth	r2, r3
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	82da      	strh	r2, [r3, #22]
			return TRUE;
 8013aa2:	2301      	movs	r3, #1
 8013aa4:	e00b      	b.n	8013abe <_chopOff+0xee>
		}
		else if (count <= length) {
 8013aa6:	887a      	ldrh	r2, [r7, #2]
 8013aa8:	897b      	ldrh	r3, [r7, #10]
 8013aaa:	429a      	cmp	r2, r3
 8013aac:	d805      	bhi.n	8013aba <_chopOff+0xea>
			p_owner->__tail = p_owner->__head;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	8a9a      	ldrh	r2, [r3, #20]
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	82da      	strh	r2, [r3, #22]
			return TRUE;
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	e001      	b.n	8013abe <_chopOff+0xee>
		}
		break;
 8013aba:	bf00      	nop
	}
	return FALSE;
 8013abc:	2300      	movs	r3, #0
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	3710      	adds	r7, #16
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}
	...

08013ac8 <pifRingBuffer_CreateHeap>:

PifRingBuffer* pifRingBuffer_CreateHeap(PifId id, uint16_t size)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b084      	sub	sp, #16
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	4603      	mov	r3, r0
 8013ad0:	460a      	mov	r2, r1
 8013ad2:	80fb      	strh	r3, [r7, #6]
 8013ad4:	4613      	mov	r3, r2
 8013ad6:	80bb      	strh	r3, [r7, #4]
	PifRingBuffer* p_owner = malloc(sizeof(PifRingBuffer));
 8013ad8:	201c      	movs	r0, #28
 8013ada:	f00f fbb9 	bl	8023250 <malloc>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	60fb      	str	r3, [r7, #12]
	if (!p_owner) {
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d104      	bne.n	8013af2 <pifRingBuffer_CreateHeap+0x2a>
		pif_error = E_OUT_OF_HEAP;
 8013ae8:	4b0c      	ldr	r3, [pc, #48]	; (8013b1c <pifRingBuffer_CreateHeap+0x54>)
 8013aea:	2203      	movs	r2, #3
 8013aec:	701a      	strb	r2, [r3, #0]
		return NULL;
 8013aee:	2300      	movs	r3, #0
 8013af0:	e010      	b.n	8013b14 <pifRingBuffer_CreateHeap+0x4c>
	}

	if (!pifRingBuffer_InitHeap(p_owner, id, size)) {
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	88ba      	ldrh	r2, [r7, #4]
 8013af6:	88f9      	ldrh	r1, [r7, #6]
 8013af8:	4618      	mov	r0, r3
 8013afa:	f000 f829 	bl	8013b50 <pifRingBuffer_InitHeap>
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d106      	bne.n	8013b12 <pifRingBuffer_CreateHeap+0x4a>
		pifRingBuffer_Destroy(&p_owner);
 8013b04:	f107 030c 	add.w	r3, r7, #12
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f000 f809 	bl	8013b20 <pifRingBuffer_Destroy>
		return NULL;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	e000      	b.n	8013b14 <pifRingBuffer_CreateHeap+0x4c>
	}
    return p_owner;
 8013b12:	68fb      	ldr	r3, [r7, #12]
}
 8013b14:	4618      	mov	r0, r3
 8013b16:	3710      	adds	r7, #16
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bd80      	pop	{r7, pc}
 8013b1c:	20001ef0 	.word	0x20001ef0

08013b20 <pifRingBuffer_Destroy>:
	}
    return p_owner;
}

void pifRingBuffer_Destroy(PifRingBuffer** pp_owner)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b082      	sub	sp, #8
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
	if (pp_owner) {
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d00c      	beq.n	8013b48 <pifRingBuffer_Destroy+0x28>
		pifRingBuffer_Clear(*pp_owner);
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	4618      	mov	r0, r3
 8013b34:	f000 f854 	bl	8013be0 <pifRingBuffer_Clear>
		free(*pp_owner);
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f00f fb8f 	bl	8023260 <free>
		*pp_owner = NULL;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	2200      	movs	r2, #0
 8013b46:	601a      	str	r2, [r3, #0]
	}
}
 8013b48:	bf00      	nop
 8013b4a:	3708      	adds	r7, #8
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}

08013b50 <pifRingBuffer_InitHeap>:

BOOL pifRingBuffer_InitHeap(PifRingBuffer* p_owner, PifId id, uint16_t size)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b082      	sub	sp, #8
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	460b      	mov	r3, r1
 8013b5a:	807b      	strh	r3, [r7, #2]
 8013b5c:	4613      	mov	r3, r2
 8013b5e:	803b      	strh	r3, [r7, #0]
    if (!p_owner || !size) {
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d002      	beq.n	8013b6c <pifRingBuffer_InitHeap+0x1c>
 8013b66:	883b      	ldrh	r3, [r7, #0]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d104      	bne.n	8013b76 <pifRingBuffer_InitHeap+0x26>
		pif_error = E_INVALID_PARAM;
 8013b6c:	4b1a      	ldr	r3, [pc, #104]	; (8013bd8 <pifRingBuffer_InitHeap+0x88>)
 8013b6e:	2201      	movs	r2, #1
 8013b70:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013b72:	2300      	movs	r3, #0
 8013b74:	e02b      	b.n	8013bce <pifRingBuffer_InitHeap+0x7e>
	}

	memset(p_owner, 0, sizeof(PifRingBuffer));
 8013b76:	221c      	movs	r2, #28
 8013b78:	2100      	movs	r1, #0
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f00f fb86 	bl	802328c <memset>

	p_owner->__p_buffer = calloc(sizeof(uint8_t), size);
 8013b80:	883b      	ldrh	r3, [r7, #0]
 8013b82:	4619      	mov	r1, r3
 8013b84:	2001      	movs	r0, #1
 8013b86:	f00f fb31 	bl	80231ec <calloc>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	461a      	mov	r2, r3
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	611a      	str	r2, [r3, #16]
	if (!p_owner->__p_buffer) {
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	691b      	ldr	r3, [r3, #16]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d108      	bne.n	8013bac <pifRingBuffer_InitHeap+0x5c>
		pif_error = E_OUT_OF_HEAP;
 8013b9a:	4b0f      	ldr	r3, [pc, #60]	; (8013bd8 <pifRingBuffer_InitHeap+0x88>)
 8013b9c:	2203      	movs	r2, #3
 8013b9e:	701a      	strb	r2, [r3, #0]
		goto fail;
 8013ba0:	bf00      	nop
	p_owner->_id = id;
    p_owner->_size = size;
    return TRUE;

fail:
	pifRingBuffer_Clear(p_owner);
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f000 f81c 	bl	8013be0 <pifRingBuffer_Clear>
    return FALSE;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	e010      	b.n	8013bce <pifRingBuffer_InitHeap+0x7e>
	if (id == PIF_ID_AUTO) id = pif_id++;
 8013bac:	887b      	ldrh	r3, [r7, #2]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d106      	bne.n	8013bc0 <pifRingBuffer_InitHeap+0x70>
 8013bb2:	4b0a      	ldr	r3, [pc, #40]	; (8013bdc <pifRingBuffer_InitHeap+0x8c>)
 8013bb4:	881b      	ldrh	r3, [r3, #0]
 8013bb6:	1c5a      	adds	r2, r3, #1
 8013bb8:	b291      	uxth	r1, r2
 8013bba:	4a08      	ldr	r2, [pc, #32]	; (8013bdc <pifRingBuffer_InitHeap+0x8c>)
 8013bbc:	8011      	strh	r1, [r2, #0]
 8013bbe:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	887a      	ldrh	r2, [r7, #2]
 8013bc4:	801a      	strh	r2, [r3, #0]
    p_owner->_size = size;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	883a      	ldrh	r2, [r7, #0]
 8013bca:	811a      	strh	r2, [r3, #8]
    return TRUE;
 8013bcc:	2301      	movs	r3, #1
}
 8013bce:	4618      	mov	r0, r3
 8013bd0:	3708      	adds	r7, #8
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bd80      	pop	{r7, pc}
 8013bd6:	bf00      	nop
 8013bd8:	20001ef0 	.word	0x20001ef0
 8013bdc:	2000005c 	.word	0x2000005c

08013be0 <pifRingBuffer_Clear>:
    p_owner->_size = size;
    return TRUE;
}

void pifRingBuffer_Clear(PifRingBuffer* p_owner)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b082      	sub	sp, #8
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
	if (p_owner->_bt.is_static == FALSE && p_owner->__p_buffer) {
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	791b      	ldrb	r3, [r3, #4]
 8013bec:	f003 0301 	and.w	r3, r3, #1
 8013bf0:	b2db      	uxtb	r3, r3
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d108      	bne.n	8013c08 <pifRingBuffer_Clear+0x28>
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	691b      	ldr	r3, [r3, #16]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d004      	beq.n	8013c08 <pifRingBuffer_Clear+0x28>
        free(p_owner->__p_buffer);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	691b      	ldr	r3, [r3, #16]
 8013c02:	4618      	mov	r0, r3
 8013c04:	f00f fb2c 	bl	8023260 <free>
    }
    p_owner->__p_buffer = NULL;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	611a      	str	r2, [r3, #16]
}
 8013c0e:	bf00      	nop
 8013c10:	3708      	adds	r7, #8
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}

08013c16 <pifRingBuffer_SetName>:
    p_owner->_size = size;
	return TRUE;
}

void pifRingBuffer_SetName(PifRingBuffer* p_owner, const char* p_name)
{
 8013c16:	b480      	push	{r7}
 8013c18:	b083      	sub	sp, #12
 8013c1a:	af00      	add	r7, sp, #0
 8013c1c:	6078      	str	r0, [r7, #4]
 8013c1e:	6039      	str	r1, [r7, #0]
	p_owner->__p_name = p_name;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	683a      	ldr	r2, [r7, #0]
 8013c24:	60da      	str	r2, [r3, #12]
}
 8013c26:	bf00      	nop
 8013c28:	370c      	adds	r7, #12
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c30:	4770      	bx	lr

08013c32 <pifRingBuffer_GetTailPointer>:

uint8_t *pifRingBuffer_GetTailPointer(PifRingBuffer* p_owner, uint16_t pos)
{
 8013c32:	b480      	push	{r7}
 8013c34:	b083      	sub	sp, #12
 8013c36:	af00      	add	r7, sp, #0
 8013c38:	6078      	str	r0, [r7, #4]
 8013c3a:	460b      	mov	r3, r1
 8013c3c:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__tail + pos) % p_owner->_size];
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	6919      	ldr	r1, [r3, #16]
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	8adb      	ldrh	r3, [r3, #22]
 8013c46:	461a      	mov	r2, r3
 8013c48:	887b      	ldrh	r3, [r7, #2]
 8013c4a:	4413      	add	r3, r2
 8013c4c:	687a      	ldr	r2, [r7, #4]
 8013c4e:	8912      	ldrh	r2, [r2, #8]
 8013c50:	fb93 f0f2 	sdiv	r0, r3, r2
 8013c54:	fb00 f202 	mul.w	r2, r0, r2
 8013c58:	1a9b      	subs	r3, r3, r2
 8013c5a:	440b      	add	r3, r1
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	370c      	adds	r7, #12
 8013c60:	46bd      	mov	sp, r7
 8013c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c66:	4770      	bx	lr

08013c68 <pifRingBuffer_IsBuffer>:
	p_owner->_bt.chop_off = RB_CHOP_OFF_LENGTH;
	p_owner->__ui.chop_off_length = length;
}

BOOL pifRingBuffer_IsBuffer(PifRingBuffer* p_owner)
{
 8013c68:	b480      	push	{r7}
 8013c6a:	b083      	sub	sp, #12
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
	return p_owner->__p_buffer != NULL;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	691b      	ldr	r3, [r3, #16]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	bf14      	ite	ne
 8013c78:	2301      	movne	r3, #1
 8013c7a:	2300      	moveq	r3, #0
 8013c7c:	b2db      	uxtb	r3, r3
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	370c      	adds	r7, #12
 8013c82:	46bd      	mov	sp, r7
 8013c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c88:	4770      	bx	lr

08013c8a <pifRingBuffer_IsEmpty>:

BOOL pifRingBuffer_IsEmpty(PifRingBuffer* p_owner)
{
 8013c8a:	b480      	push	{r7}
 8013c8c:	b083      	sub	sp, #12
 8013c8e:	af00      	add	r7, sp, #0
 8013c90:	6078      	str	r0, [r7, #4]
	return p_owner->__head == p_owner->__tail;
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	8a9a      	ldrh	r2, [r3, #20]
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	8adb      	ldrh	r3, [r3, #22]
 8013c9a:	429a      	cmp	r2, r3
 8013c9c:	bf0c      	ite	eq
 8013c9e:	2301      	moveq	r3, #1
 8013ca0:	2300      	movne	r3, #0
 8013ca2:	b2db      	uxtb	r3, r3
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	370c      	adds	r7, #12
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cae:	4770      	bx	lr

08013cb0 <pifRingBuffer_GetFillSize>:

uint16_t pifRingBuffer_GetFillSize(PifRingBuffer* p_owner)
{
 8013cb0:	b480      	push	{r7}
 8013cb2:	b085      	sub	sp, #20
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
	uint16_t usFill;

    if (p_owner->__head >= p_owner->__tail) {
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	8a9a      	ldrh	r2, [r3, #20]
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	8adb      	ldrh	r3, [r3, #22]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d306      	bcc.n	8013cd2 <pifRingBuffer_GetFillSize+0x22>
    	usFill = p_owner->__head - p_owner->__tail;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	8a9a      	ldrh	r2, [r3, #20]
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	8adb      	ldrh	r3, [r3, #22]
 8013ccc:	1ad3      	subs	r3, r2, r3
 8013cce:	81fb      	strh	r3, [r7, #14]
 8013cd0:	e009      	b.n	8013ce6 <pifRingBuffer_GetFillSize+0x36>
    }
    else {
    	usFill = p_owner->_size - p_owner->__tail + p_owner->__head;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	891a      	ldrh	r2, [r3, #8]
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	8adb      	ldrh	r3, [r3, #22]
 8013cda:	1ad3      	subs	r3, r2, r3
 8013cdc:	b29a      	uxth	r2, r3
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	8a9b      	ldrh	r3, [r3, #20]
 8013ce2:	4413      	add	r3, r2
 8013ce4:	81fb      	strh	r3, [r7, #14]
    }
    return usFill;
 8013ce6:	89fb      	ldrh	r3, [r7, #14]
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3714      	adds	r7, #20
 8013cec:	46bd      	mov	sp, r7
 8013cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf2:	4770      	bx	lr

08013cf4 <pifRingBuffer_GetLinerSize>:

uint16_t pifRingBuffer_GetLinerSize(PifRingBuffer* p_owner, uint16_t pos)
{
 8013cf4:	b480      	push	{r7}
 8013cf6:	b085      	sub	sp, #20
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
 8013cfc:	460b      	mov	r3, r1
 8013cfe:	807b      	strh	r3, [r7, #2]
	uint16_t tail = (p_owner->__tail + pos) % p_owner->_size;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	8adb      	ldrh	r3, [r3, #22]
 8013d04:	461a      	mov	r2, r3
 8013d06:	887b      	ldrh	r3, [r7, #2]
 8013d08:	4413      	add	r3, r2
 8013d0a:	687a      	ldr	r2, [r7, #4]
 8013d0c:	8912      	ldrh	r2, [r2, #8]
 8013d0e:	fb93 f1f2 	sdiv	r1, r3, r2
 8013d12:	fb01 f202 	mul.w	r2, r1, r2
 8013d16:	1a9b      	subs	r3, r3, r2
 8013d18:	81fb      	strh	r3, [r7, #14]

    if (p_owner->__head >= tail) {
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	8a9b      	ldrh	r3, [r3, #20]
 8013d1e:	89fa      	ldrh	r2, [r7, #14]
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d805      	bhi.n	8013d30 <pifRingBuffer_GetLinerSize+0x3c>
    	return p_owner->__head - tail;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	8a9a      	ldrh	r2, [r3, #20]
 8013d28:	89fb      	ldrh	r3, [r7, #14]
 8013d2a:	1ad3      	subs	r3, r2, r3
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	e004      	b.n	8013d3a <pifRingBuffer_GetLinerSize+0x46>
    }
    else {
    	return p_owner->_size - tail;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	891a      	ldrh	r2, [r3, #8]
 8013d34:	89fb      	ldrh	r3, [r7, #14]
 8013d36:	1ad3      	subs	r3, r2, r3
 8013d38:	b29b      	uxth	r3, r3
    }
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3714      	adds	r7, #20
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d44:	4770      	bx	lr

08013d46 <pifRingBuffer_GetRemainSize>:

uint16_t pifRingBuffer_GetRemainSize(PifRingBuffer* p_owner)
{
 8013d46:	b480      	push	{r7}
 8013d48:	b085      	sub	sp, #20
 8013d4a:	af00      	add	r7, sp, #0
 8013d4c:	6078      	str	r0, [r7, #4]
	uint16_t remain;

    if (p_owner->__head < p_owner->__tail) {
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	8a9a      	ldrh	r2, [r3, #20]
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	8adb      	ldrh	r3, [r3, #22]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d206      	bcs.n	8013d68 <pifRingBuffer_GetRemainSize+0x22>
    	remain = p_owner->__tail - p_owner->__head;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	8ada      	ldrh	r2, [r3, #22]
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	8a9b      	ldrh	r3, [r3, #20]
 8013d62:	1ad3      	subs	r3, r2, r3
 8013d64:	81fb      	strh	r3, [r7, #14]
 8013d66:	e009      	b.n	8013d7c <pifRingBuffer_GetRemainSize+0x36>
    }
    else {
    	remain = p_owner->_size - p_owner->__head + p_owner->__tail;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	891a      	ldrh	r2, [r3, #8]
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	8a9b      	ldrh	r3, [r3, #20]
 8013d70:	1ad3      	subs	r3, r2, r3
 8013d72:	b29a      	uxth	r2, r3
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	8adb      	ldrh	r3, [r3, #22]
 8013d78:	4413      	add	r3, r2
 8013d7a:	81fb      	strh	r3, [r7, #14]
    }
    return remain - 1;
 8013d7c:	89fb      	ldrh	r3, [r7, #14]
 8013d7e:	3b01      	subs	r3, #1
 8013d80:	b29b      	uxth	r3, r3
}
 8013d82:	4618      	mov	r0, r3
 8013d84:	3714      	adds	r7, #20
 8013d86:	46bd      	mov	sp, r7
 8013d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8c:	4770      	bx	lr

08013d8e <pifRingBuffer_BackupHead>:

void pifRingBuffer_BackupHead(PifRingBuffer* p_owner)
{
 8013d8e:	b480      	push	{r7}
 8013d90:	b083      	sub	sp, #12
 8013d92:	af00      	add	r7, sp, #0
 8013d94:	6078      	str	r0, [r7, #4]
	p_owner->__backup_head = p_owner->__head;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	8a9a      	ldrh	r2, [r3, #20]
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	831a      	strh	r2, [r3, #24]
}
 8013d9e:	bf00      	nop
 8013da0:	370c      	adds	r7, #12
 8013da2:	46bd      	mov	sp, r7
 8013da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da8:	4770      	bx	lr

08013daa <pifRingBuffer_RestoreHead>:

void pifRingBuffer_RestoreHead(PifRingBuffer* p_owner)
{
 8013daa:	b480      	push	{r7}
 8013dac:	b083      	sub	sp, #12
 8013dae:	af00      	add	r7, sp, #0
 8013db0:	6078      	str	r0, [r7, #4]
	p_owner->__head = p_owner->__backup_head;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	8b1a      	ldrh	r2, [r3, #24]
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	829a      	strh	r2, [r3, #20]
}
 8013dba:	bf00      	nop
 8013dbc:	370c      	adds	r7, #12
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc4:	4770      	bx	lr
	...

08013dc8 <pifRingBuffer_PutByte>:

BOOL pifRingBuffer_PutByte(PifRingBuffer* p_owner, uint8_t data)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b084      	sub	sp, #16
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
 8013dd0:	460b      	mov	r3, r1
 8013dd2:	70fb      	strb	r3, [r7, #3]
    uint16_t next;

    next = p_owner->__head + 1;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	8a9b      	ldrh	r3, [r3, #20]
 8013dd8:	3301      	adds	r3, #1
 8013dda:	81fb      	strh	r3, [r7, #14]
	if (next >= p_owner->_size) next = 0;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	891b      	ldrh	r3, [r3, #8]
 8013de0:	89fa      	ldrh	r2, [r7, #14]
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d301      	bcc.n	8013dea <pifRingBuffer_PutByte+0x22>
 8013de6:	2300      	movs	r3, #0
 8013de8:	81fb      	strh	r3, [r7, #14]
    if (next == p_owner->__tail) {
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	8adb      	ldrh	r3, [r3, #22]
 8013dee:	89fa      	ldrh	r2, [r7, #14]
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d10b      	bne.n	8013e0c <pifRingBuffer_PutByte+0x44>
    	if (!_chopOff(p_owner, 1)) {
 8013df4:	2101      	movs	r1, #1
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f7ff fdea 	bl	80139d0 <_chopOff>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d104      	bne.n	8013e0c <pifRingBuffer_PutByte+0x44>
    		pif_error = E_OVERFLOW_BUFFER;
 8013e02:	4b0a      	ldr	r3, [pc, #40]	; (8013e2c <pifRingBuffer_PutByte+0x64>)
 8013e04:	2204      	movs	r2, #4
 8013e06:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013e08:	2300      	movs	r3, #0
 8013e0a:	e00a      	b.n	8013e22 <pifRingBuffer_PutByte+0x5a>
    	}
    }

    p_owner->__p_buffer[p_owner->__head] = data;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	691b      	ldr	r3, [r3, #16]
 8013e10:	687a      	ldr	r2, [r7, #4]
 8013e12:	8a92      	ldrh	r2, [r2, #20]
 8013e14:	4413      	add	r3, r2
 8013e16:	78fa      	ldrb	r2, [r7, #3]
 8013e18:	701a      	strb	r2, [r3, #0]
    p_owner->__head = next;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	89fa      	ldrh	r2, [r7, #14]
 8013e1e:	829a      	strh	r2, [r3, #20]
    return TRUE;
 8013e20:	2301      	movs	r3, #1
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	3710      	adds	r7, #16
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}
 8013e2a:	bf00      	nop
 8013e2c:	20001ef0 	.word	0x20001ef0

08013e30 <pifRingBuffer_PutData>:

BOOL pifRingBuffer_PutData(PifRingBuffer* p_owner, uint8_t* p_data, uint16_t length)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b086      	sub	sp, #24
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	60f8      	str	r0, [r7, #12]
 8013e38:	60b9      	str	r1, [r7, #8]
 8013e3a:	4613      	mov	r3, r2
 8013e3c:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013e3e:	68f8      	ldr	r0, [r7, #12]
 8013e40:	f7ff ff81 	bl	8013d46 <pifRingBuffer_GetRemainSize>
 8013e44:	4603      	mov	r3, r0
 8013e46:	82bb      	strh	r3, [r7, #20]

    if (length > remain) {
 8013e48:	88fa      	ldrh	r2, [r7, #6]
 8013e4a:	8abb      	ldrh	r3, [r7, #20]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d90f      	bls.n	8013e70 <pifRingBuffer_PutData+0x40>
    	if (!_chopOff(p_owner, length - remain)) {
 8013e50:	88fa      	ldrh	r2, [r7, #6]
 8013e52:	8abb      	ldrh	r3, [r7, #20]
 8013e54:	1ad3      	subs	r3, r2, r3
 8013e56:	b29b      	uxth	r3, r3
 8013e58:	4619      	mov	r1, r3
 8013e5a:	68f8      	ldr	r0, [r7, #12]
 8013e5c:	f7ff fdb8 	bl	80139d0 <_chopOff>
 8013e60:	4603      	mov	r3, r0
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d104      	bne.n	8013e70 <pifRingBuffer_PutData+0x40>
    		pif_error = E_OVERFLOW_BUFFER;
 8013e66:	4b16      	ldr	r3, [pc, #88]	; (8013ec0 <pifRingBuffer_PutData+0x90>)
 8013e68:	2204      	movs	r2, #4
 8013e6a:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	e023      	b.n	8013eb8 <pifRingBuffer_PutData+0x88>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013e70:	2300      	movs	r3, #0
 8013e72:	82fb      	strh	r3, [r7, #22]
 8013e74:	e01b      	b.n	8013eae <pifRingBuffer_PutData+0x7e>
    	p_owner->__p_buffer[p_owner->__head] = p_data[i];
 8013e76:	8afb      	ldrh	r3, [r7, #22]
 8013e78:	68ba      	ldr	r2, [r7, #8]
 8013e7a:	441a      	add	r2, r3
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	691b      	ldr	r3, [r3, #16]
 8013e80:	68f9      	ldr	r1, [r7, #12]
 8013e82:	8a89      	ldrh	r1, [r1, #20]
 8013e84:	440b      	add	r3, r1
 8013e86:	7812      	ldrb	r2, [r2, #0]
 8013e88:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	8a9b      	ldrh	r3, [r3, #20]
 8013e8e:	3301      	adds	r3, #1
 8013e90:	b29a      	uxth	r2, r3
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	8a9a      	ldrh	r2, [r3, #20]
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	891b      	ldrh	r3, [r3, #8]
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d302      	bcc.n	8013ea8 <pifRingBuffer_PutData+0x78>
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013ea8:	8afb      	ldrh	r3, [r7, #22]
 8013eaa:	3301      	adds	r3, #1
 8013eac:	82fb      	strh	r3, [r7, #22]
 8013eae:	8afa      	ldrh	r2, [r7, #22]
 8013eb0:	88fb      	ldrh	r3, [r7, #6]
 8013eb2:	429a      	cmp	r2, r3
 8013eb4:	d3df      	bcc.n	8013e76 <pifRingBuffer_PutData+0x46>
    }
    return TRUE;
 8013eb6:	2301      	movs	r3, #1
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3718      	adds	r7, #24
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}
 8013ec0:	20001ef0 	.word	0x20001ef0

08013ec4 <pifRingBuffer_PutString>:

BOOL pifRingBuffer_PutString(PifRingBuffer* p_owner, char* p_string)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b084      	sub	sp, #16
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
 8013ecc:	6039      	str	r1, [r7, #0]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f7ff ff39 	bl	8013d46 <pifRingBuffer_GetRemainSize>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	81bb      	strh	r3, [r7, #12]
	uint16_t length = strlen(p_string);
 8013ed8:	6838      	ldr	r0, [r7, #0]
 8013eda:	f7ec f987 	bl	80001ec <strlen>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	817b      	strh	r3, [r7, #10]

    if (length > remain) {
 8013ee2:	897a      	ldrh	r2, [r7, #10]
 8013ee4:	89bb      	ldrh	r3, [r7, #12]
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d90f      	bls.n	8013f0a <pifRingBuffer_PutString+0x46>
    	if (!_chopOff(p_owner, length - remain)) {
 8013eea:	897a      	ldrh	r2, [r7, #10]
 8013eec:	89bb      	ldrh	r3, [r7, #12]
 8013eee:	1ad3      	subs	r3, r2, r3
 8013ef0:	b29b      	uxth	r3, r3
 8013ef2:	4619      	mov	r1, r3
 8013ef4:	6878      	ldr	r0, [r7, #4]
 8013ef6:	f7ff fd6b 	bl	80139d0 <_chopOff>
 8013efa:	4603      	mov	r3, r0
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d104      	bne.n	8013f0a <pifRingBuffer_PutString+0x46>
    		pif_error = E_OVERFLOW_BUFFER;
 8013f00:	4b16      	ldr	r3, [pc, #88]	; (8013f5c <pifRingBuffer_PutString+0x98>)
 8013f02:	2204      	movs	r2, #4
 8013f04:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013f06:	2300      	movs	r3, #0
 8013f08:	e023      	b.n	8013f52 <pifRingBuffer_PutString+0x8e>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	81fb      	strh	r3, [r7, #14]
 8013f0e:	e01b      	b.n	8013f48 <pifRingBuffer_PutString+0x84>
    	p_owner->__p_buffer[p_owner->__head] = p_string[i];
 8013f10:	89fb      	ldrh	r3, [r7, #14]
 8013f12:	683a      	ldr	r2, [r7, #0]
 8013f14:	441a      	add	r2, r3
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	691b      	ldr	r3, [r3, #16]
 8013f1a:	6879      	ldr	r1, [r7, #4]
 8013f1c:	8a89      	ldrh	r1, [r1, #20]
 8013f1e:	440b      	add	r3, r1
 8013f20:	7812      	ldrb	r2, [r2, #0]
 8013f22:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	8a9b      	ldrh	r3, [r3, #20]
 8013f28:	3301      	adds	r3, #1
 8013f2a:	b29a      	uxth	r2, r3
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	8a9a      	ldrh	r2, [r3, #20]
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	891b      	ldrh	r3, [r3, #8]
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	d302      	bcc.n	8013f42 <pifRingBuffer_PutString+0x7e>
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2200      	movs	r2, #0
 8013f40:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013f42:	89fb      	ldrh	r3, [r7, #14]
 8013f44:	3301      	adds	r3, #1
 8013f46:	81fb      	strh	r3, [r7, #14]
 8013f48:	89fa      	ldrh	r2, [r7, #14]
 8013f4a:	897b      	ldrh	r3, [r7, #10]
 8013f4c:	429a      	cmp	r2, r3
 8013f4e:	d3df      	bcc.n	8013f10 <pifRingBuffer_PutString+0x4c>
    }
    return TRUE;
 8013f50:	2301      	movs	r3, #1
}
 8013f52:	4618      	mov	r0, r3
 8013f54:	3710      	adds	r7, #16
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bd80      	pop	{r7, pc}
 8013f5a:	bf00      	nop
 8013f5c:	20001ef0 	.word	0x20001ef0

08013f60 <pifRingBuffer_GetByte>:

BOOL pifRingBuffer_GetByte(PifRingBuffer* p_owner, uint8_t* p_data)
{
 8013f60:	b480      	push	{r7}
 8013f62:	b083      	sub	sp, #12
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
 8013f68:	6039      	str	r1, [r7, #0]
	if (p_owner->__tail == p_owner->__head) return FALSE;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	8ada      	ldrh	r2, [r3, #22]
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	8a9b      	ldrh	r3, [r3, #20]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d101      	bne.n	8013f7a <pifRingBuffer_GetByte+0x1a>
 8013f76:	2300      	movs	r3, #0
 8013f78:	e017      	b.n	8013faa <pifRingBuffer_GetByte+0x4a>

	*p_data = p_owner->__p_buffer[p_owner->__tail];
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	691b      	ldr	r3, [r3, #16]
 8013f7e:	687a      	ldr	r2, [r7, #4]
 8013f80:	8ad2      	ldrh	r2, [r2, #22]
 8013f82:	4413      	add	r3, r2
 8013f84:	781a      	ldrb	r2, [r3, #0]
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	701a      	strb	r2, [r3, #0]
	p_owner->__tail++;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	8adb      	ldrh	r3, [r3, #22]
 8013f8e:	3301      	adds	r3, #1
 8013f90:	b29a      	uxth	r2, r3
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	82da      	strh	r2, [r3, #22]
	if (p_owner->__tail >= p_owner->_size) p_owner->__tail = 0;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	8ada      	ldrh	r2, [r3, #22]
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	891b      	ldrh	r3, [r3, #8]
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d302      	bcc.n	8013fa8 <pifRingBuffer_GetByte+0x48>
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	82da      	strh	r2, [r3, #22]
	return TRUE;
 8013fa8:	2301      	movs	r3, #1
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	370c      	adds	r7, #12
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb4:	4770      	bx	lr

08013fb6 <pifRingBuffer_CopyToArray>:

uint16_t pifRingBuffer_CopyToArray(uint8_t* p_dst, uint16_t count, PifRingBuffer* p_src, uint16_t pos)
{
 8013fb6:	b480      	push	{r7}
 8013fb8:	b087      	sub	sp, #28
 8013fba:	af00      	add	r7, sp, #0
 8013fbc:	60f8      	str	r0, [r7, #12]
 8013fbe:	607a      	str	r2, [r7, #4]
 8013fc0:	461a      	mov	r2, r3
 8013fc2:	460b      	mov	r3, r1
 8013fc4:	817b      	strh	r3, [r7, #10]
 8013fc6:	4613      	mov	r3, r2
 8013fc8:	813b      	strh	r3, [r7, #8]
	uint16_t tail = p_src->__tail + pos;
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	8ada      	ldrh	r2, [r3, #22]
 8013fce:	893b      	ldrh	r3, [r7, #8]
 8013fd0:	4413      	add	r3, r2
 8013fd2:	82fb      	strh	r3, [r7, #22]
	if (tail >= p_src->_size) tail -= p_src->_size;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	891b      	ldrh	r3, [r3, #8]
 8013fd8:	8afa      	ldrh	r2, [r7, #22]
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d304      	bcc.n	8013fe8 <pifRingBuffer_CopyToArray+0x32>
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	891b      	ldrh	r3, [r3, #8]
 8013fe2:	8afa      	ldrh	r2, [r7, #22]
 8013fe4:	1ad3      	subs	r3, r2, r3
 8013fe6:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i = 0; i < count; i++) {
 8013fe8:	2300      	movs	r3, #0
 8013fea:	82bb      	strh	r3, [r7, #20]
 8013fec:	e01e      	b.n	801402c <pifRingBuffer_CopyToArray+0x76>
		p_dst[i] = p_src->__p_buffer[tail];
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	691a      	ldr	r2, [r3, #16]
 8013ff2:	8afb      	ldrh	r3, [r7, #22]
 8013ff4:	441a      	add	r2, r3
 8013ff6:	8abb      	ldrh	r3, [r7, #20]
 8013ff8:	68f9      	ldr	r1, [r7, #12]
 8013ffa:	440b      	add	r3, r1
 8013ffc:	7812      	ldrb	r2, [r2, #0]
 8013ffe:	701a      	strb	r2, [r3, #0]
		tail++;
 8014000:	8afb      	ldrh	r3, [r7, #22]
 8014002:	3301      	adds	r3, #1
 8014004:	82fb      	strh	r3, [r7, #22]
		if (tail >= p_src->_size) tail = 0;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	891b      	ldrh	r3, [r3, #8]
 801400a:	8afa      	ldrh	r2, [r7, #22]
 801400c:	429a      	cmp	r2, r3
 801400e:	d301      	bcc.n	8014014 <pifRingBuffer_CopyToArray+0x5e>
 8014010:	2300      	movs	r3, #0
 8014012:	82fb      	strh	r3, [r7, #22]
		if (tail == p_src->__head) return i + 1;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	8a9b      	ldrh	r3, [r3, #20]
 8014018:	8afa      	ldrh	r2, [r7, #22]
 801401a:	429a      	cmp	r2, r3
 801401c:	d103      	bne.n	8014026 <pifRingBuffer_CopyToArray+0x70>
 801401e:	8abb      	ldrh	r3, [r7, #20]
 8014020:	3301      	adds	r3, #1
 8014022:	b29b      	uxth	r3, r3
 8014024:	e007      	b.n	8014036 <pifRingBuffer_CopyToArray+0x80>
	for (uint16_t i = 0; i < count; i++) {
 8014026:	8abb      	ldrh	r3, [r7, #20]
 8014028:	3301      	adds	r3, #1
 801402a:	82bb      	strh	r3, [r7, #20]
 801402c:	8aba      	ldrh	r2, [r7, #20]
 801402e:	897b      	ldrh	r3, [r7, #10]
 8014030:	429a      	cmp	r2, r3
 8014032:	d3dc      	bcc.n	8013fee <pifRingBuffer_CopyToArray+0x38>
	}
	return count;
 8014034:	897b      	ldrh	r3, [r7, #10]
}
 8014036:	4618      	mov	r0, r3
 8014038:	371c      	adds	r7, #28
 801403a:	46bd      	mov	sp, r7
 801403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014040:	4770      	bx	lr

08014042 <pifRingBuffer_Remove>:
	}
	return TRUE;
}

void pifRingBuffer_Remove(PifRingBuffer* p_owner, uint16_t size)
{
 8014042:	b580      	push	{r7, lr}
 8014044:	b084      	sub	sp, #16
 8014046:	af00      	add	r7, sp, #0
 8014048:	6078      	str	r0, [r7, #4]
 801404a:	460b      	mov	r3, r1
 801404c:	807b      	strh	r3, [r7, #2]
	uint16_t fill = pifRingBuffer_GetFillSize(p_owner);
 801404e:	6878      	ldr	r0, [r7, #4]
 8014050:	f7ff fe2e 	bl	8013cb0 <pifRingBuffer_GetFillSize>
 8014054:	4603      	mov	r3, r0
 8014056:	81fb      	strh	r3, [r7, #14]

	if (size >= fill) {
 8014058:	887a      	ldrh	r2, [r7, #2]
 801405a:	89fb      	ldrh	r3, [r7, #14]
 801405c:	429a      	cmp	r2, r3
 801405e:	d304      	bcc.n	801406a <pifRingBuffer_Remove+0x28>
		p_owner->__tail = p_owner->__head;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	8a9a      	ldrh	r2, [r3, #20]
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	82da      	strh	r2, [r3, #22]
	}
	else {
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
	}
}
 8014068:	e00e      	b.n	8014088 <pifRingBuffer_Remove+0x46>
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	8adb      	ldrh	r3, [r3, #22]
 801406e:	461a      	mov	r2, r3
 8014070:	887b      	ldrh	r3, [r7, #2]
 8014072:	4413      	add	r3, r2
 8014074:	687a      	ldr	r2, [r7, #4]
 8014076:	8912      	ldrh	r2, [r2, #8]
 8014078:	fb93 f1f2 	sdiv	r1, r3, r2
 801407c:	fb01 f202 	mul.w	r2, r1, r2
 8014080:	1a9b      	subs	r3, r3, r2
 8014082:	b29a      	uxth	r2, r3
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	82da      	strh	r2, [r3, #22]
}
 8014088:	bf00      	nop
 801408a:	3710      	adds	r7, #16
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}

08014090 <_setTable>:

static uint32_t s_loop_count = 0UL, s_pass_count = 0UL;


static int _setTable(uint16_t period, PifTaskMode* p_mode)
{
 8014090:	b480      	push	{r7}
 8014092:	b089      	sub	sp, #36	; 0x24
 8014094:	af00      	add	r7, sp, #0
 8014096:	4603      	mov	r3, r0
 8014098:	6039      	str	r1, [r7, #0]
 801409a:	80fb      	strh	r3, [r7, #6]
	uint32_t gap, index, bit;
	static int base = 0;
	int i, count, num = -1;
 801409c:	f04f 33ff 	mov.w	r3, #4294967295
 80140a0:	617b      	str	r3, [r7, #20]

	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 80140a2:	2300      	movs	r3, #0
 80140a4:	61bb      	str	r3, [r7, #24]
 80140a6:	e00f      	b.n	80140c8 <_setTable+0x38>
		if (!(s_table_number & (1 << i))) {
 80140a8:	2201      	movs	r2, #1
 80140aa:	69bb      	ldr	r3, [r7, #24]
 80140ac:	fa02 f303 	lsl.w	r3, r2, r3
 80140b0:	461a      	mov	r2, r3
 80140b2:	4b34      	ldr	r3, [pc, #208]	; (8014184 <_setTable+0xf4>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	4013      	ands	r3, r2
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d102      	bne.n	80140c2 <_setTable+0x32>
			num = i;
 80140bc:	69bb      	ldr	r3, [r7, #24]
 80140be:	617b      	str	r3, [r7, #20]
			break;
 80140c0:	e005      	b.n	80140ce <_setTable+0x3e>
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 80140c2:	69bb      	ldr	r3, [r7, #24]
 80140c4:	3301      	adds	r3, #1
 80140c6:	61bb      	str	r3, [r7, #24]
 80140c8:	69bb      	ldr	r3, [r7, #24]
 80140ca:	2b1f      	cmp	r3, #31
 80140cc:	ddec      	ble.n	80140a8 <_setTable+0x18>
		}
	}
	if (num == -1) {
 80140ce:	697b      	ldr	r3, [r7, #20]
 80140d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140d4:	d105      	bne.n	80140e2 <_setTable+0x52>
		pif_error = E_OVERFLOW_BUFFER;
 80140d6:	4b2c      	ldr	r3, [pc, #176]	; (8014188 <_setTable+0xf8>)
 80140d8:	2204      	movs	r2, #4
 80140da:	701a      	strb	r2, [r3, #0]
		return -1;
 80140dc:	f04f 33ff 	mov.w	r3, #4294967295
 80140e0:	e04a      	b.n	8014178 <_setTable+0xe8>
	}
	bit = 1 << num;
 80140e2:	2201      	movs	r2, #1
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	fa02 f303 	lsl.w	r3, r2, r3
 80140ea:	613b      	str	r3, [r7, #16]
	s_table_number |= bit;
 80140ec:	4b25      	ldr	r3, [pc, #148]	; (8014184 <_setTable+0xf4>)
 80140ee:	681a      	ldr	r2, [r3, #0]
 80140f0:	693b      	ldr	r3, [r7, #16]
 80140f2:	4313      	orrs	r3, r2
 80140f4:	4a23      	ldr	r2, [pc, #140]	; (8014184 <_setTable+0xf4>)
 80140f6:	6013      	str	r3, [r2, #0]

	count = PIF_TASK_TABLE_SIZE * period;
 80140f8:	88fb      	ldrh	r3, [r7, #6]
 80140fa:	015b      	lsls	r3, r3, #5
 80140fc:	60fb      	str	r3, [r7, #12]
	gap = 10000L * PIF_TASK_TABLE_SIZE / count;
 80140fe:	4a23      	ldr	r2, [pc, #140]	; (801418c <_setTable+0xfc>)
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	fb92 f3f3 	sdiv	r3, r2, r3
 8014106:	60bb      	str	r3, [r7, #8]
	if (gap > 100) {
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	2b64      	cmp	r3, #100	; 0x64
 801410c:	d930      	bls.n	8014170 <_setTable+0xe0>
		index = 100 * base;
 801410e:	4b20      	ldr	r3, [pc, #128]	; (8014190 <_setTable+0x100>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	2264      	movs	r2, #100	; 0x64
 8014114:	fb02 f303 	mul.w	r3, r2, r3
 8014118:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 801411a:	2300      	movs	r3, #0
 801411c:	61bb      	str	r3, [r7, #24]
 801411e:	e017      	b.n	8014150 <_setTable+0xc0>
			s_table[(index / 100) & PIF_TASK_TABLE_MASK] |= bit;
 8014120:	69fb      	ldr	r3, [r7, #28]
 8014122:	4a1c      	ldr	r2, [pc, #112]	; (8014194 <_setTable+0x104>)
 8014124:	fba2 2303 	umull	r2, r3, r2, r3
 8014128:	095b      	lsrs	r3, r3, #5
 801412a:	f003 021f 	and.w	r2, r3, #31
 801412e:	491a      	ldr	r1, [pc, #104]	; (8014198 <_setTable+0x108>)
 8014130:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014134:	f003 031f 	and.w	r3, r3, #31
 8014138:	693a      	ldr	r2, [r7, #16]
 801413a:	430a      	orrs	r2, r1
 801413c:	4916      	ldr	r1, [pc, #88]	; (8014198 <_setTable+0x108>)
 801413e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			index += gap;
 8014142:	69fa      	ldr	r2, [r7, #28]
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	4413      	add	r3, r2
 8014148:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 801414a:	69bb      	ldr	r3, [r7, #24]
 801414c:	3301      	adds	r3, #1
 801414e:	61bb      	str	r3, [r7, #24]
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	4a10      	ldr	r2, [pc, #64]	; (8014194 <_setTable+0x104>)
 8014154:	fb82 1203 	smull	r1, r2, r2, r3
 8014158:	1152      	asrs	r2, r2, #5
 801415a:	17db      	asrs	r3, r3, #31
 801415c:	1ad3      	subs	r3, r2, r3
 801415e:	69ba      	ldr	r2, [r7, #24]
 8014160:	429a      	cmp	r2, r3
 8014162:	dbdd      	blt.n	8014120 <_setTable+0x90>
		}
		base++;
 8014164:	4b0a      	ldr	r3, [pc, #40]	; (8014190 <_setTable+0x100>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	3301      	adds	r3, #1
 801416a:	4a09      	ldr	r2, [pc, #36]	; (8014190 <_setTable+0x100>)
 801416c:	6013      	str	r3, [r2, #0]
 801416e:	e002      	b.n	8014176 <_setTable+0xe6>
	}
	else {
		*p_mode = TM_ALWAYS;
 8014170:	683b      	ldr	r3, [r7, #0]
 8014172:	2201      	movs	r2, #1
 8014174:	701a      	strb	r2, [r3, #0]
	}
	return num;
 8014176:	697b      	ldr	r3, [r7, #20]
}
 8014178:	4618      	mov	r0, r3
 801417a:	3724      	adds	r7, #36	; 0x24
 801417c:	46bd      	mov	sp, r7
 801417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014182:	4770      	bx	lr
 8014184:	20001fcc 	.word	0x20001fcc
 8014188:	20001ef0 	.word	0x20001ef0
 801418c:	0004e200 	.word	0x0004e200
 8014190:	2000205c 	.word	0x2000205c
 8014194:	51eb851f 	.word	0x51eb851f
 8014198:	20001fd0 	.word	0x20001fd0

0801419c <_resetTable>:

static void _resetTable(int number)
{
 801419c:	b480      	push	{r7}
 801419e:	b085      	sub	sp, #20
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
	int i;
	uint32_t mask;

	mask = ~((uint32_t)1 << number);
 80141a4:	2201      	movs	r2, #1
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	fa02 f303 	lsl.w	r3, r2, r3
 80141ac:	43db      	mvns	r3, r3
 80141ae:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 80141b0:	2300      	movs	r3, #0
 80141b2:	60fb      	str	r3, [r7, #12]
 80141b4:	e00c      	b.n	80141d0 <_resetTable+0x34>
		s_table[i] &= mask;
 80141b6:	4a0e      	ldr	r2, [pc, #56]	; (80141f0 <_resetTable+0x54>)
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80141be:	68bb      	ldr	r3, [r7, #8]
 80141c0:	401a      	ands	r2, r3
 80141c2:	490b      	ldr	r1, [pc, #44]	; (80141f0 <_resetTable+0x54>)
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	3301      	adds	r3, #1
 80141ce:	60fb      	str	r3, [r7, #12]
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	2b1f      	cmp	r3, #31
 80141d4:	ddef      	ble.n	80141b6 <_resetTable+0x1a>
	}
	s_table_number &= mask;
 80141d6:	4b07      	ldr	r3, [pc, #28]	; (80141f4 <_resetTable+0x58>)
 80141d8:	681a      	ldr	r2, [r3, #0]
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	4013      	ands	r3, r2
 80141de:	4a05      	ldr	r2, [pc, #20]	; (80141f4 <_resetTable+0x58>)
 80141e0:	6013      	str	r3, [r2, #0]
}
 80141e2:	bf00      	nop
 80141e4:	3714      	adds	r7, #20
 80141e6:	46bd      	mov	sp, r7
 80141e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ec:	4770      	bx	lr
 80141ee:	bf00      	nop
 80141f0:	20001fd0 	.word	0x20001fd0
 80141f4:	20001fcc 	.word	0x20001fcc

080141f8 <_processingAlways>:

static PifTask* _processingAlways(PifTask* p_owner)
{
 80141f8:	b480      	push	{r7}
 80141fa:	b085      	sub	sp, #20
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
	uint32_t gap;

	if (p_owner->__delay_ms) {
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014204:	2b00      	cmp	r3, #0
 8014206:	d010      	beq.n	801422a <_processingAlways+0x32>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 8014208:	4b0b      	ldr	r3, [pc, #44]	; (8014238 <_processingAlways+0x40>)
 801420a:	681a      	ldr	r2, [r3, #0]
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014210:	1ad3      	subs	r3, r2, r3
 8014212:	60fb      	str	r3, [r7, #12]
		if (gap >= p_owner->__delay_ms) {
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014218:	461a      	mov	r2, r3
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	4293      	cmp	r3, r2
 801421e:	d302      	bcc.n	8014226 <_processingAlways+0x2e>
			p_owner->__delay_ms = 0;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2200      	movs	r2, #0
 8014224:	849a      	strh	r2, [r3, #36]	; 0x24
		}
		return NULL;
 8014226:	2300      	movs	r3, #0
 8014228:	e000      	b.n	801422c <_processingAlways+0x34>
	}
	return p_owner;
 801422a:	687b      	ldr	r3, [r7, #4]
}
 801422c:	4618      	mov	r0, r3
 801422e:	3714      	adds	r7, #20
 8014230:	46bd      	mov	sp, r7
 8014232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014236:	4770      	bx	lr
 8014238:	20001f08 	.word	0x20001f08

0801423c <_processingPeriodUs>:

static PifTask* _processingPeriodUs(PifTask* p_owner)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = (*pif_act_timer1us)();
 8014244:	4b0f      	ldr	r3, [pc, #60]	; (8014284 <_processingPeriodUs+0x48>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	4798      	blx	r3
 801424a:	60f8      	str	r0, [r7, #12]
	gap = current - p_owner->__pretime;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014250:	68fa      	ldr	r2, [r7, #12]
 8014252:	1ad3      	subs	r3, r2, r3
 8014254:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	891b      	ldrh	r3, [r3, #8]
 801425a:	461a      	mov	r2, r3
 801425c:	68bb      	ldr	r3, [r7, #8]
 801425e:	4293      	cmp	r3, r2
 8014260:	d30a      	bcc.n	8014278 <_processingPeriodUs+0x3c>
		p_owner->__pretime = current - (gap - p_owner->_period);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	891b      	ldrh	r3, [r3, #8]
 8014266:	461a      	mov	r2, r3
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	1ad2      	subs	r2, r2, r3
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	441a      	add	r2, r3
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	629a      	str	r2, [r3, #40]	; 0x28
		return p_owner;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	e000      	b.n	801427a <_processingPeriodUs+0x3e>
	}
	return NULL;
 8014278:	2300      	movs	r3, #0
}
 801427a:	4618      	mov	r0, r3
 801427c:	3710      	adds	r7, #16
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}
 8014282:	bf00      	nop
 8014284:	20001f14 	.word	0x20001f14

08014288 <_processingPeriodMs>:

static PifTask* _processingPeriodMs(PifTask* p_owner)
{
 8014288:	b480      	push	{r7}
 801428a:	b085      	sub	sp, #20
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = pif_cumulative_timer1ms;
 8014290:	4b0c      	ldr	r3, [pc, #48]	; (80142c4 <_processingPeriodMs+0x3c>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	60fb      	str	r3, [r7, #12]
	gap = current - p_owner->__pretime;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801429a:	68fa      	ldr	r2, [r7, #12]
 801429c:	1ad3      	subs	r3, r2, r3
 801429e:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	891b      	ldrh	r3, [r3, #8]
 80142a4:	461a      	mov	r2, r3
 80142a6:	68bb      	ldr	r3, [r7, #8]
 80142a8:	4293      	cmp	r3, r2
 80142aa:	d304      	bcc.n	80142b6 <_processingPeriodMs+0x2e>
		p_owner->__pretime = current;
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	68fa      	ldr	r2, [r7, #12]
 80142b0:	629a      	str	r2, [r3, #40]	; 0x28
		return p_owner;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	e000      	b.n	80142b8 <_processingPeriodMs+0x30>
	}
	return NULL;
 80142b6:	2300      	movs	r3, #0
}
 80142b8:	4618      	mov	r0, r3
 80142ba:	3714      	adds	r7, #20
 80142bc:	46bd      	mov	sp, r7
 80142be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c2:	4770      	bx	lr
 80142c4:	20001f08 	.word	0x20001f08

080142c8 <_processingRatio>:

static PifTask* _processingRatio(PifTask* p_owner)
{
 80142c8:	b480      	push	{r7}
 80142ca:	b085      	sub	sp, #20
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
#ifdef __PIF_DEBUG__
	uint32_t time;
	static uint32_t pretime;
#endif

	if (p_owner->__delay_ms) {
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d00f      	beq.n	80142f8 <_processingRatio+0x30>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 80142d8:	4b13      	ldr	r3, [pc, #76]	; (8014328 <_processingRatio+0x60>)
 80142da:	681a      	ldr	r2, [r3, #0]
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142e0:	1ad3      	subs	r3, r2, r3
 80142e2:	60fb      	str	r3, [r7, #12]
		if (gap >= p_owner->__delay_ms) {
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80142e8:	461a      	mov	r2, r3
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	4293      	cmp	r3, r2
 80142ee:	d313      	bcc.n	8014318 <_processingRatio+0x50>
			p_owner->__delay_ms = 0;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2200      	movs	r2, #0
 80142f4:	849a      	strh	r2, [r3, #36]	; 0x24
 80142f6:	e00f      	b.n	8014318 <_processingRatio+0x50>
		}
	}
	else if (s_table[s_number] & (1 << p_owner->__table_number)) {
 80142f8:	4b0c      	ldr	r3, [pc, #48]	; (801432c <_processingRatio+0x64>)
 80142fa:	781b      	ldrb	r3, [r3, #0]
 80142fc:	461a      	mov	r2, r3
 80142fe:	4b0c      	ldr	r3, [pc, #48]	; (8014330 <_processingRatio+0x68>)
 8014300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014304:	687a      	ldr	r2, [r7, #4]
 8014306:	6a12      	ldr	r2, [r2, #32]
 8014308:	2101      	movs	r1, #1
 801430a:	fa01 f202 	lsl.w	r2, r1, r2
 801430e:	4013      	ands	r3, r2
 8014310:	2b00      	cmp	r3, #0
 8014312:	d001      	beq.n	8014318 <_processingRatio+0x50>
			p_owner->__count = 0;
			pretime = time;
		}
		p_owner->__count++;
#endif
		return p_owner;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	e000      	b.n	801431a <_processingRatio+0x52>
	}
	return NULL;
 8014318:	2300      	movs	r3, #0
}
 801431a:	4618      	mov	r0, r3
 801431c:	3714      	adds	r7, #20
 801431e:	46bd      	mov	sp, r7
 8014320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014324:	4770      	bx	lr
 8014326:	bf00      	nop
 8014328:	20001f08 	.word	0x20001f08
 801432c:	20002050 	.word	0x20002050
 8014330:	20001fd0 	.word	0x20001fd0

08014334 <_checkParam>:

static BOOL _checkParam(PifTaskMode* p_mode, uint16_t period)
{
 8014334:	b480      	push	{r7}
 8014336:	b083      	sub	sp, #12
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
 801433c:	460b      	mov	r3, r1
 801433e:	807b      	strh	r3, [r7, #2]
	switch (*p_mode) {
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	2b08      	cmp	r3, #8
 8014346:	d840      	bhi.n	80143ca <_checkParam+0x96>
 8014348:	a201      	add	r2, pc, #4	; (adr r2, 8014350 <_checkParam+0x1c>)
 801434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801434e:	bf00      	nop
 8014350:	08014375 	.word	0x08014375
 8014354:	080143d5 	.word	0x080143d5
 8014358:	08014399 	.word	0x08014399
 801435c:	080143a9 	.word	0x080143a9
 8014360:	08014399 	.word	0x08014399
 8014364:	080143a9 	.word	0x080143a9
 8014368:	080143d5 	.word	0x080143d5
 801436c:	080143d5 	.word	0x080143d5
 8014370:	08014399 	.word	0x08014399
    case TM_RATIO:
    	if (!period || period > 100) {
 8014374:	887b      	ldrh	r3, [r7, #2]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d002      	beq.n	8014380 <_checkParam+0x4c>
 801437a:	887b      	ldrh	r3, [r7, #2]
 801437c:	2b64      	cmp	r3, #100	; 0x64
 801437e:	d904      	bls.n	801438a <_checkParam+0x56>
    		pif_error = E_INVALID_PARAM;
 8014380:	4b1b      	ldr	r3, [pc, #108]	; (80143f0 <_checkParam+0xbc>)
 8014382:	2201      	movs	r2, #1
 8014384:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014386:	2300      	movs	r3, #0
 8014388:	e02c      	b.n	80143e4 <_checkParam+0xb0>
    	}
    	else if (period == 100) {
 801438a:	887b      	ldrh	r3, [r7, #2]
 801438c:	2b64      	cmp	r3, #100	; 0x64
 801438e:	d123      	bne.n	80143d8 <_checkParam+0xa4>
    		*p_mode = TM_ALWAYS;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2201      	movs	r2, #1
 8014394:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 8014396:	e01f      	b.n	80143d8 <_checkParam+0xa4>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    case TM_IDLE_MS:
    	if (!period) {
 8014398:	887b      	ldrh	r3, [r7, #2]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d11e      	bne.n	80143dc <_checkParam+0xa8>
    		pif_error = E_INVALID_PARAM;
 801439e:	4b14      	ldr	r3, [pc, #80]	; (80143f0 <_checkParam+0xbc>)
 80143a0:	2201      	movs	r2, #1
 80143a2:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 80143a4:	2300      	movs	r3, #0
 80143a6:	e01d      	b.n	80143e4 <_checkParam+0xb0>
    	}
    	break;

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	if (!period) {
 80143a8:	887b      	ldrh	r3, [r7, #2]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d104      	bne.n	80143b8 <_checkParam+0x84>
    		pif_error = E_INVALID_PARAM;
 80143ae:	4b10      	ldr	r3, [pc, #64]	; (80143f0 <_checkParam+0xbc>)
 80143b0:	2201      	movs	r2, #1
 80143b2:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 80143b4:	2300      	movs	r3, #0
 80143b6:	e015      	b.n	80143e4 <_checkParam+0xb0>
    	}

    	if (!pif_act_timer1us) {
 80143b8:	4b0e      	ldr	r3, [pc, #56]	; (80143f4 <_checkParam+0xc0>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d10f      	bne.n	80143e0 <_checkParam+0xac>
    		pif_error = E_CANNOT_USE;
 80143c0:	4b0b      	ldr	r3, [pc, #44]	; (80143f0 <_checkParam+0xbc>)
 80143c2:	2209      	movs	r2, #9
 80143c4:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 80143c6:	2300      	movs	r3, #0
 80143c8:	e00c      	b.n	80143e4 <_checkParam+0xb0>
	case TM_ALWAYS:
	case TM_NEED:
		break;

    default:
		pif_error = E_INVALID_PARAM;
 80143ca:	4b09      	ldr	r3, [pc, #36]	; (80143f0 <_checkParam+0xbc>)
 80143cc:	2201      	movs	r2, #1
 80143ce:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 80143d0:	2300      	movs	r3, #0
 80143d2:	e007      	b.n	80143e4 <_checkParam+0xb0>
		break;
 80143d4:	bf00      	nop
 80143d6:	e004      	b.n	80143e2 <_checkParam+0xae>
    	break;
 80143d8:	bf00      	nop
 80143da:	e002      	b.n	80143e2 <_checkParam+0xae>
    	break;
 80143dc:	bf00      	nop
 80143de:	e000      	b.n	80143e2 <_checkParam+0xae>
    	break;
 80143e0:	bf00      	nop
    }
	return TRUE;
 80143e2:	2301      	movs	r3, #1
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	370c      	adds	r7, #12
 80143e8:	46bd      	mov	sp, r7
 80143ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ee:	4770      	bx	lr
 80143f0:	20001ef0 	.word	0x20001ef0
 80143f4:	20001f14 	.word	0x20001f14

080143f8 <_setParam>:

static BOOL _setParam(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b084      	sub	sp, #16
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
 8014400:	460b      	mov	r3, r1
 8014402:	70fb      	strb	r3, [r7, #3]
 8014404:	4613      	mov	r3, r2
 8014406:	803b      	strh	r3, [r7, #0]
	int num = -1;
 8014408:	f04f 33ff 	mov.w	r3, #4294967295
 801440c:	60fb      	str	r3, [r7, #12]

	if (mode == TM_RATIO) {
 801440e:	78fb      	ldrb	r3, [r7, #3]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d10c      	bne.n	801442e <_setParam+0x36>
    	num = _setTable(period, &mode);
 8014414:	1cfa      	adds	r2, r7, #3
 8014416:	883b      	ldrh	r3, [r7, #0]
 8014418:	4611      	mov	r1, r2
 801441a:	4618      	mov	r0, r3
 801441c:	f7ff fe38 	bl	8014090 <_setTable>
 8014420:	60f8      	str	r0, [r7, #12]
    	if (num == -1) return FALSE;
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014428:	d101      	bne.n	801442e <_setParam+0x36>
 801442a:	2300      	movs	r3, #0
 801442c:	e045      	b.n	80144ba <_setParam+0xc2>
	}

    switch (mode) {
 801442e:	78fb      	ldrb	r3, [r7, #3]
 8014430:	2b08      	cmp	r3, #8
 8014432:	d83a      	bhi.n	80144aa <_setParam+0xb2>
 8014434:	a201      	add	r2, pc, #4	; (adr r2, 801443c <_setParam+0x44>)
 8014436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801443a:	bf00      	nop
 801443c:	08014461 	.word	0x08014461
 8014440:	0801446f 	.word	0x0801446f
 8014444:	0801447b 	.word	0x0801447b
 8014448:	0801448b 	.word	0x0801448b
 801444c:	0801447b 	.word	0x0801447b
 8014450:	0801448b 	.word	0x0801448b
 8014454:	0801449f 	.word	0x0801449f
 8014458:	0801449f 	.word	0x0801449f
 801445c:	0801447b 	.word	0x0801447b
    case TM_RATIO:
    	p_owner->__table_number = num;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	68fa      	ldr	r2, [r7, #12]
 8014464:	621a      	str	r2, [r3, #32]
    	p_owner->__processing = _processingRatio;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	4a16      	ldr	r2, [pc, #88]	; (80144c4 <_setParam+0xcc>)
 801446a:	61da      	str	r2, [r3, #28]
    	break;
 801446c:	e01e      	b.n	80144ac <_setParam+0xb4>

    case TM_ALWAYS:
    	period = 100;
 801446e:	2364      	movs	r3, #100	; 0x64
 8014470:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = _processingAlways;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	4a14      	ldr	r2, [pc, #80]	; (80144c8 <_setParam+0xd0>)
 8014476:	61da      	str	r2, [r3, #28]
    	break;
 8014478:	e018      	b.n	80144ac <_setParam+0xb4>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    case TM_IDLE_MS:
    	p_owner->__pretime = pif_cumulative_timer1ms;
 801447a:	4b14      	ldr	r3, [pc, #80]	; (80144cc <_setParam+0xd4>)
 801447c:	681a      	ldr	r2, [r3, #0]
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	629a      	str	r2, [r3, #40]	; 0x28
    	p_owner->__processing = _processingPeriodMs;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	4a12      	ldr	r2, [pc, #72]	; (80144d0 <_setParam+0xd8>)
 8014486:	61da      	str	r2, [r3, #28]
    	break;
 8014488:	e010      	b.n	80144ac <_setParam+0xb4>

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	p_owner->__pretime = (*pif_act_timer1us)();
 801448a:	4b12      	ldr	r3, [pc, #72]	; (80144d4 <_setParam+0xdc>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	4798      	blx	r3
 8014490:	4602      	mov	r2, r0
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	629a      	str	r2, [r3, #40]	; 0x28
    	p_owner->__processing = _processingPeriodUs;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	4a0f      	ldr	r2, [pc, #60]	; (80144d8 <_setParam+0xe0>)
 801449a:	61da      	str	r2, [r3, #28]
    	break;
 801449c:	e006      	b.n	80144ac <_setParam+0xb4>

	case TM_TIMER:
    case TM_NEED:
    	period = 0;
 801449e:	2300      	movs	r3, #0
 80144a0:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = NULL;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2200      	movs	r2, #0
 80144a6:	61da      	str	r2, [r3, #28]
    	break;
 80144a8:	e000      	b.n	80144ac <_setParam+0xb4>

    default:
    	break;
 80144aa:	bf00      	nop
    }

    p_owner->_mode = mode;
 80144ac:	78fa      	ldrb	r2, [r7, #3]
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	719a      	strb	r2, [r3, #6]
    p_owner->_period = period;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	883a      	ldrh	r2, [r7, #0]
 80144b6:	811a      	strh	r2, [r3, #8]
	return TRUE;
 80144b8:	2301      	movs	r3, #1
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3710      	adds	r7, #16
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	080142c9 	.word	0x080142c9
 80144c8:	080141f9 	.word	0x080141f9
 80144cc:	20001f08 	.word	0x20001f08
 80144d0:	08014289 	.word	0x08014289
 80144d4:	20001f14 	.word	0x20001f14
 80144d8:	0801423d 	.word	0x0801423d

080144dc <_processingTask>:

static BOOL _processingTask(PifTask* p_owner)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b086      	sub	sp, #24
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
	uint16_t period;
	uint32_t current, start_time, execute_time;

	if (s_task_stack_ptr >= PIF_TASK_STACK_SIZE) return FALSE;
 80144e4:	4b3d      	ldr	r3, [pc, #244]	; (80145dc <_processingTask+0x100>)
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	2b04      	cmp	r3, #4
 80144ea:	dd01      	ble.n	80144f0 <_processingTask+0x14>
 80144ec:	2300      	movs	r3, #0
 80144ee:	e070      	b.n	80145d2 <_processingTask+0xf6>

	switch (p_owner->_mode) {
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	799b      	ldrb	r3, [r3, #6]
 80144f4:	2b04      	cmp	r3, #4
 80144f6:	d002      	beq.n	80144fe <_processingTask+0x22>
 80144f8:	2b05      	cmp	r3, #5
 80144fa:	d004      	beq.n	8014506 <_processingTask+0x2a>
 80144fc:	e008      	b.n	8014510 <_processingTask+0x34>
	case TM_CHANGE_MS:
		current = pif_cumulative_timer1ms;
 80144fe:	4b38      	ldr	r3, [pc, #224]	; (80145e0 <_processingTask+0x104>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	613b      	str	r3, [r7, #16]
		break;
 8014504:	e007      	b.n	8014516 <_processingTask+0x3a>

	case TM_CHANGE_US:
		current = (*pif_act_timer1us)();
 8014506:	4b37      	ldr	r3, [pc, #220]	; (80145e4 <_processingTask+0x108>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	4798      	blx	r3
 801450c:	6138      	str	r0, [r7, #16]
		break;
 801450e:	e002      	b.n	8014516 <_processingTask+0x3a>

	default:
		current = 0UL;
 8014510:	2300      	movs	r3, #0
 8014512:	613b      	str	r3, [r7, #16]
		break;
 8014514:	bf00      	nop

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(TRUE);
#endif

    s_task_stack[s_task_stack_ptr] = p_owner;
 8014516:	4b31      	ldr	r3, [pc, #196]	; (80145dc <_processingTask+0x100>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	4933      	ldr	r1, [pc, #204]	; (80145e8 <_processingTask+0x10c>)
 801451c:	687a      	ldr	r2, [r7, #4]
 801451e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	s_task_stack_ptr++;
 8014522:	4b2e      	ldr	r3, [pc, #184]	; (80145dc <_processingTask+0x100>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	3301      	adds	r3, #1
 8014528:	4a2c      	ldr	r2, [pc, #176]	; (80145dc <_processingTask+0x100>)
 801452a:	6013      	str	r3, [r2, #0]
	p_owner->_running = TRUE;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2201      	movs	r2, #1
 8014530:	71da      	strb	r2, [r3, #7]
	if (pif_act_timer1us) {
 8014532:	4b2c      	ldr	r3, [pc, #176]	; (80145e4 <_processingTask+0x108>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d024      	beq.n	8014584 <_processingTask+0xa8>
		start_time = (*pif_act_timer1us)();
 801453a:	4b2a      	ldr	r3, [pc, #168]	; (80145e4 <_processingTask+0x108>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	4798      	blx	r3
 8014540:	60f8      	str	r0, [r7, #12]
		period = (*p_owner->__evt_loop)(p_owner);
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014546:	6878      	ldr	r0, [r7, #4]
 8014548:	4798      	blx	r3
 801454a:	4603      	mov	r3, r0
 801454c:	82fb      	strh	r3, [r7, #22]
		execute_time = (*pif_act_timer1us)() - start_time;
 801454e:	4b25      	ldr	r3, [pc, #148]	; (80145e4 <_processingTask+0x108>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	4798      	blx	r3
 8014554:	4602      	mov	r2, r0
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	1ad3      	subs	r3, r2, r3
 801455a:	60bb      	str	r3, [r7, #8]
		p_owner->_execution_count++;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	699b      	ldr	r3, [r3, #24]
 8014560:	1c5a      	adds	r2, r3, #1
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	619a      	str	r2, [r3, #24]
		if (execute_time > p_owner->_max_execution_time) p_owner->_max_execution_time = execute_time;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	691b      	ldr	r3, [r3, #16]
 801456a:	68ba      	ldr	r2, [r7, #8]
 801456c:	429a      	cmp	r2, r3
 801456e:	d902      	bls.n	8014576 <_processingTask+0x9a>
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	68ba      	ldr	r2, [r7, #8]
 8014574:	611a      	str	r2, [r3, #16]
		p_owner->_total_execution_time += execute_time;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	695a      	ldr	r2, [r3, #20]
 801457a:	68bb      	ldr	r3, [r7, #8]
 801457c:	441a      	add	r2, r3
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	615a      	str	r2, [r3, #20]
 8014582:	e005      	b.n	8014590 <_processingTask+0xb4>
	}
	else {
		period = (*p_owner->__evt_loop)(p_owner);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	4798      	blx	r3
 801458c:	4603      	mov	r3, r0
 801458e:	82fb      	strh	r3, [r7, #22]
	}
	p_owner->_running = FALSE;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	2200      	movs	r2, #0
 8014594:	71da      	strb	r2, [r3, #7]
	s_task_stack_ptr--;
 8014596:	4b11      	ldr	r3, [pc, #68]	; (80145dc <_processingTask+0x100>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	3b01      	subs	r3, #1
 801459c:	4a0f      	ldr	r2, [pc, #60]	; (80145dc <_processingTask+0x100>)
 801459e:	6013      	str	r3, [r2, #0]
	s_task_stack[s_task_stack_ptr] = NULL;
 80145a0:	4b0e      	ldr	r3, [pc, #56]	; (80145dc <_processingTask+0x100>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	4a10      	ldr	r2, [pc, #64]	; (80145e8 <_processingTask+0x10c>)
 80145a6:	2100      	movs	r1, #0
 80145a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(FALSE);
#endif

	switch (p_owner->_mode) {
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	799b      	ldrb	r3, [r3, #6]
 80145b0:	3b04      	subs	r3, #4
 80145b2:	2b01      	cmp	r3, #1
 80145b4:	d809      	bhi.n	80145ca <_processingTask+0xee>
	case TM_CHANGE_MS:
	case TM_CHANGE_US:
		if (period > 0) {
 80145b6:	8afb      	ldrh	r3, [r7, #22]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d008      	beq.n	80145ce <_processingTask+0xf2>
			p_owner->_period = period;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	8afa      	ldrh	r2, [r7, #22]
 80145c0:	811a      	strh	r2, [r3, #8]
			p_owner->__pretime = current;
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	693a      	ldr	r2, [r7, #16]
 80145c6:	629a      	str	r2, [r3, #40]	; 0x28
		}
		break;
 80145c8:	e001      	b.n	80145ce <_processingTask+0xf2>

	default:
		break;
 80145ca:	bf00      	nop
 80145cc:	e000      	b.n	80145d0 <_processingTask+0xf4>
		break;
 80145ce:	bf00      	nop
	}
	return TRUE;
 80145d0:	2301      	movs	r3, #1
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3718      	adds	r7, #24
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	bf00      	nop
 80145dc:	20001fc8 	.word	0x20001fc8
 80145e0:	20001f08 	.word	0x20001f08
 80145e4:	20001f14 	.word	0x20001f14
 80145e8:	20001fb4 	.word	0x20001fb4

080145ec <_checkLoopTime>:

static void _checkLoopTime()
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b082      	sub	sp, #8
 80145f0:	af00      	add	r7, sp, #0
		}
		pretime = (*pif_act_timer1us)();
	}
#endif

	pif_performance._count++;
 80145f2:	4b2c      	ldr	r3, [pc, #176]	; (80146a4 <_checkLoopTime+0xb8>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	3301      	adds	r3, #1
 80145f8:	4a2a      	ldr	r2, [pc, #168]	; (80146a4 <_checkLoopTime+0xb8>)
 80145fa:	6013      	str	r3, [r2, #0]

	switch (pif_performance.__state) {
 80145fc:	4b29      	ldr	r3, [pc, #164]	; (80146a4 <_checkLoopTime+0xb8>)
 80145fe:	795b      	ldrb	r3, [r3, #5]
 8014600:	2b01      	cmp	r3, #1
 8014602:	d002      	beq.n	801460a <_checkLoopTime+0x1e>
 8014604:	2b02      	cmp	r3, #2
 8014606:	d041      	beq.n	801468c <_checkLoopTime+0xa0>
#endif
    	pif_performance._count = 0;
		pif_performance.__state = FALSE;
		break;
    }
}
 8014608:	e047      	b.n	801469a <_checkLoopTime+0xae>
		pif_performance._use_rate = 100 - 100 * s_pass_count / s_loop_count;
 801460a:	4b27      	ldr	r3, [pc, #156]	; (80146a8 <_checkLoopTime+0xbc>)
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	2264      	movs	r2, #100	; 0x64
 8014610:	fb03 f202 	mul.w	r2, r3, r2
 8014614:	4b25      	ldr	r3, [pc, #148]	; (80146ac <_checkLoopTime+0xc0>)
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	fbb2 f3f3 	udiv	r3, r2, r3
 801461c:	b2db      	uxtb	r3, r3
 801461e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8014622:	b2da      	uxtb	r2, r3
 8014624:	4b1f      	ldr	r3, [pc, #124]	; (80146a4 <_checkLoopTime+0xb8>)
 8014626:	711a      	strb	r2, [r3, #4]
		s_loop_count = 0UL;
 8014628:	4b20      	ldr	r3, [pc, #128]	; (80146ac <_checkLoopTime+0xc0>)
 801462a:	2200      	movs	r2, #0
 801462c:	601a      	str	r2, [r3, #0]
		s_pass_count = 0UL;
 801462e:	4b1e      	ldr	r3, [pc, #120]	; (80146a8 <_checkLoopTime+0xbc>)
 8014630:	2200      	movs	r2, #0
 8014632:	601a      	str	r2, [r3, #0]
		if (use_rate != pif_performance._use_rate) {
 8014634:	4b1b      	ldr	r3, [pc, #108]	; (80146a4 <_checkLoopTime+0xb8>)
 8014636:	791a      	ldrb	r2, [r3, #4]
 8014638:	4b1d      	ldr	r3, [pc, #116]	; (80146b0 <_checkLoopTime+0xc4>)
 801463a:	781b      	ldrb	r3, [r3, #0]
 801463c:	429a      	cmp	r2, r3
 801463e:	d00a      	beq.n	8014656 <_checkLoopTime+0x6a>
			use_rate = pif_performance._use_rate;
 8014640:	4b18      	ldr	r3, [pc, #96]	; (80146a4 <_checkLoopTime+0xb8>)
 8014642:	791a      	ldrb	r2, [r3, #4]
 8014644:	4b1a      	ldr	r3, [pc, #104]	; (80146b0 <_checkLoopTime+0xc4>)
 8014646:	701a      	strb	r2, [r3, #0]
	    	pifLog_Printf(LT_INFO, "Use Rate: %u%%", use_rate);
 8014648:	4b19      	ldr	r3, [pc, #100]	; (80146b0 <_checkLoopTime+0xc4>)
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	461a      	mov	r2, r3
 801464e:	4919      	ldr	r1, [pc, #100]	; (80146b4 <_checkLoopTime+0xc8>)
 8014650:	2002      	movs	r0, #2
 8014652:	f7ff f8f5 	bl	8013840 <pifLog_Printf>
		if (pif_log_flag.bt.performance) {
 8014656:	4b18      	ldr	r3, [pc, #96]	; (80146b8 <_checkLoopTime+0xcc>)
 8014658:	781b      	ldrb	r3, [r3, #0]
 801465a:	f003 0301 	and.w	r3, r3, #1
 801465e:	b2db      	uxtb	r3, r3
 8014660:	2b00      	cmp	r3, #0
 8014662:	d00c      	beq.n	801467e <_checkLoopTime+0x92>
			value = 1000000L / pif_performance._count;
 8014664:	4b0f      	ldr	r3, [pc, #60]	; (80146a4 <_checkLoopTime+0xb8>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	4a14      	ldr	r2, [pc, #80]	; (80146bc <_checkLoopTime+0xd0>)
 801466a:	fbb2 f3f3 	udiv	r3, r2, r3
 801466e:	607b      	str	r3, [r7, #4]
        	pifLog_Printf(LT_INFO, "LT:%uns(%lur/s)", value, pif_performance._count);
 8014670:	4b0c      	ldr	r3, [pc, #48]	; (80146a4 <_checkLoopTime+0xb8>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	687a      	ldr	r2, [r7, #4]
 8014676:	4912      	ldr	r1, [pc, #72]	; (80146c0 <_checkLoopTime+0xd4>)
 8014678:	2002      	movs	r0, #2
 801467a:	f7ff f8e1 	bl	8013840 <pifLog_Printf>
    	pif_performance._count = 0;
 801467e:	4b09      	ldr	r3, [pc, #36]	; (80146a4 <_checkLoopTime+0xb8>)
 8014680:	2200      	movs	r2, #0
 8014682:	601a      	str	r2, [r3, #0]
		pif_performance.__state = FALSE;
 8014684:	4b07      	ldr	r3, [pc, #28]	; (80146a4 <_checkLoopTime+0xb8>)
 8014686:	2200      	movs	r2, #0
 8014688:	715a      	strb	r2, [r3, #5]
		break;
 801468a:	e006      	b.n	801469a <_checkLoopTime+0xae>
    	pif_performance._count = 0;
 801468c:	4b05      	ldr	r3, [pc, #20]	; (80146a4 <_checkLoopTime+0xb8>)
 801468e:	2200      	movs	r2, #0
 8014690:	601a      	str	r2, [r3, #0]
		pif_performance.__state = FALSE;
 8014692:	4b04      	ldr	r3, [pc, #16]	; (80146a4 <_checkLoopTime+0xb8>)
 8014694:	2200      	movs	r2, #0
 8014696:	715a      	strb	r2, [r3, #5]
		break;
 8014698:	bf00      	nop
}
 801469a:	bf00      	nop
 801469c:	3708      	adds	r7, #8
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}
 80146a2:	bf00      	nop
 80146a4:	20001f0c 	.word	0x20001f0c
 80146a8:	20002058 	.word	0x20002058
 80146ac:	20002054 	.word	0x20002054
 80146b0:	20002060 	.word	0x20002060
 80146b4:	08027bec 	.word	0x08027bec
 80146b8:	20001f18 	.word	0x20001f18
 80146bc:	000f4240 	.word	0x000f4240
 80146c0:	08027bfc 	.word	0x08027bfc

080146c4 <pifTask_Init>:


void pifTask_Init(PifTask* p_owner)
{
 80146c4:	b480      	push	{r7}
 80146c6:	b083      	sub	sp, #12
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
    pif_id++;
 80146cc:	4b07      	ldr	r3, [pc, #28]	; (80146ec <pifTask_Init+0x28>)
 80146ce:	881b      	ldrh	r3, [r3, #0]
 80146d0:	3301      	adds	r3, #1
 80146d2:	b29a      	uxth	r2, r3
 80146d4:	4b05      	ldr	r3, [pc, #20]	; (80146ec <pifTask_Init+0x28>)
 80146d6:	801a      	strh	r2, [r3, #0]
    p_owner->_id = pif_id;
 80146d8:	4b04      	ldr	r3, [pc, #16]	; (80146ec <pifTask_Init+0x28>)
 80146da:	881a      	ldrh	r2, [r3, #0]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	809a      	strh	r2, [r3, #4]
}
 80146e0:	bf00      	nop
 80146e2:	370c      	adds	r7, #12
 80146e4:	46bd      	mov	sp, r7
 80146e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ea:	4770      	bx	lr
 80146ec:	2000005c 	.word	0x2000005c

080146f0 <pifTask_ChangeMode>:

BOOL pifTask_ChangeMode(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	460b      	mov	r3, r1
 80146fa:	70fb      	strb	r3, [r7, #3]
 80146fc:	4613      	mov	r3, r2
 80146fe:	803b      	strh	r3, [r7, #0]
	if (!_checkParam(&mode, period)) return FALSE;
 8014700:	883a      	ldrh	r2, [r7, #0]
 8014702:	1cfb      	adds	r3, r7, #3
 8014704:	4611      	mov	r1, r2
 8014706:	4618      	mov	r0, r3
 8014708:	f7ff fe14 	bl	8014334 <_checkParam>
 801470c:	4603      	mov	r3, r0
 801470e:	2b00      	cmp	r3, #0
 8014710:	d101      	bne.n	8014716 <pifTask_ChangeMode+0x26>
 8014712:	2300      	movs	r3, #0
 8014714:	e016      	b.n	8014744 <pifTask_ChangeMode+0x54>

	switch (p_owner->_mode) {
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	799b      	ldrb	r3, [r3, #6]
 801471a:	2b01      	cmp	r3, #1
 801471c:	d805      	bhi.n	801472a <pifTask_ChangeMode+0x3a>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_owner->__table_number);
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	6a1b      	ldr	r3, [r3, #32]
 8014722:	4618      	mov	r0, r3
 8014724:	f7ff fd3a 	bl	801419c <_resetTable>
		break;
 8014728:	e000      	b.n	801472c <pifTask_ChangeMode+0x3c>

	default:
		break;
 801472a:	bf00      	nop
	}

	if (!_setParam(p_owner, mode, period)) return FALSE;
 801472c:	78fb      	ldrb	r3, [r7, #3]
 801472e:	883a      	ldrh	r2, [r7, #0]
 8014730:	4619      	mov	r1, r3
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f7ff fe60 	bl	80143f8 <_setParam>
 8014738:	4603      	mov	r3, r0
 801473a:	2b00      	cmp	r3, #0
 801473c:	d101      	bne.n	8014742 <pifTask_ChangeMode+0x52>
 801473e:	2300      	movs	r3, #0
 8014740:	e000      	b.n	8014744 <pifTask_ChangeMode+0x54>

    return TRUE;
 8014742:	2301      	movs	r3, #1
}
 8014744:	4618      	mov	r0, r3
 8014746:	3708      	adds	r7, #8
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}

0801474c <pifTask_ChangePeriod>:

BOOL pifTask_ChangePeriod(PifTask* p_owner, uint16_t period)
{
 801474c:	b480      	push	{r7}
 801474e:	b083      	sub	sp, #12
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	460b      	mov	r3, r1
 8014756:	807b      	strh	r3, [r7, #2]
	switch (p_owner->_mode) {
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	799b      	ldrb	r3, [r3, #6]
 801475c:	2b03      	cmp	r3, #3
 801475e:	dc02      	bgt.n	8014766 <pifTask_ChangePeriod+0x1a>
 8014760:	2b02      	cmp	r3, #2
 8014762:	da02      	bge.n	801476a <pifTask_ChangePeriod+0x1e>
 8014764:	e007      	b.n	8014776 <pifTask_ChangePeriod+0x2a>
 8014766:	2b08      	cmp	r3, #8
 8014768:	d105      	bne.n	8014776 <pifTask_ChangePeriod+0x2a>
	case TM_PERIOD_MS:
	case TM_PERIOD_US:
	case TM_IDLE_MS:
		p_owner->_period = period;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	887a      	ldrh	r2, [r7, #2]
 801476e:	811a      	strh	r2, [r3, #8]
		break;
 8014770:	bf00      	nop

	default:
		pif_error = E_CANNOT_USE;
		return FALSE;
	}
	return TRUE;
 8014772:	2301      	movs	r3, #1
 8014774:	e003      	b.n	801477e <pifTask_ChangePeriod+0x32>
		pif_error = E_CANNOT_USE;
 8014776:	4b05      	ldr	r3, [pc, #20]	; (801478c <pifTask_ChangePeriod+0x40>)
 8014778:	2209      	movs	r2, #9
 801477a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801477c:	2300      	movs	r3, #0
}
 801477e:	4618      	mov	r0, r3
 8014780:	370c      	adds	r7, #12
 8014782:	46bd      	mov	sp, r7
 8014784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014788:	4770      	bx	lr
 801478a:	bf00      	nop
 801478c:	20001ef0 	.word	0x20001ef0

08014790 <pifTask_GetDeltaTime>:
		break;
	}
}

uint32_t pifTask_GetDeltaTime(PifTask* p_owner, BOOL reset)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b084      	sub	sp, #16
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
 8014798:	460b      	mov	r3, r1
 801479a:	70fb      	strb	r3, [r7, #3]
	uint32_t currect, delta;

    if (!pif_act_timer1us) {
 801479c:	4b0f      	ldr	r3, [pc, #60]	; (80147dc <pifTask_GetDeltaTime+0x4c>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d107      	bne.n	80147b4 <pifTask_GetDeltaTime+0x24>
		currect = pif_cumulative_timer1ms * 1000;
 80147a4:	4b0e      	ldr	r3, [pc, #56]	; (80147e0 <pifTask_GetDeltaTime+0x50>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80147ac:	fb02 f303 	mul.w	r3, r2, r3
 80147b0:	60fb      	str	r3, [r7, #12]
 80147b2:	e003      	b.n	80147bc <pifTask_GetDeltaTime+0x2c>
	}
	else {
		currect = (*pif_act_timer1us)();
 80147b4:	4b09      	ldr	r3, [pc, #36]	; (80147dc <pifTask_GetDeltaTime+0x4c>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	4798      	blx	r3
 80147ba:	60f8      	str	r0, [r7, #12]
	}
	delta = currect - p_owner->__last_execute_time;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147c0:	68fa      	ldr	r2, [r7, #12]
 80147c2:	1ad3      	subs	r3, r2, r3
 80147c4:	60bb      	str	r3, [r7, #8]
	if (reset) p_owner->__last_execute_time = currect;
 80147c6:	78fb      	ldrb	r3, [r7, #3]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d002      	beq.n	80147d2 <pifTask_GetDeltaTime+0x42>
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	68fa      	ldr	r2, [r7, #12]
 80147d0:	62da      	str	r2, [r3, #44]	; 0x2c

	return delta;
 80147d2:	68bb      	ldr	r3, [r7, #8]
}
 80147d4:	4618      	mov	r0, r3
 80147d6:	3710      	adds	r7, #16
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}
 80147dc:	20001f14 	.word	0x20001f14
 80147e0:	20001f08 	.word	0x20001f08

080147e4 <pifTaskManager_Init>:


BOOL pifTaskManager_Init(int max_count)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
	if (!pifFixList_Init(&s_tasks, sizeof(PifTask), max_count)) return FALSE;
 80147ec:	687a      	ldr	r2, [r7, #4]
 80147ee:	2134      	movs	r1, #52	; 0x34
 80147f0:	480b      	ldr	r0, [pc, #44]	; (8014820 <pifTaskManager_Init+0x3c>)
 80147f2:	f7fe fb33 	bl	8012e5c <pifFixList_Init>
 80147f6:	4603      	mov	r3, r0
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d101      	bne.n	8014800 <pifTaskManager_Init+0x1c>
 80147fc:	2300      	movs	r3, #0
 80147fe:	e00b      	b.n	8014818 <pifTaskManager_Init+0x34>
	s_it_current = NULL;
 8014800:	4b08      	ldr	r3, [pc, #32]	; (8014824 <pifTaskManager_Init+0x40>)
 8014802:	2200      	movs	r2, #0
 8014804:	601a      	str	r2, [r3, #0]

	s_table_number = 0L;
 8014806:	4b08      	ldr	r3, [pc, #32]	; (8014828 <pifTaskManager_Init+0x44>)
 8014808:	2200      	movs	r2, #0
 801480a:	601a      	str	r2, [r3, #0]
	memset(s_table, 0, sizeof(s_table));
 801480c:	2280      	movs	r2, #128	; 0x80
 801480e:	2100      	movs	r1, #0
 8014810:	4806      	ldr	r0, [pc, #24]	; (801482c <pifTaskManager_Init+0x48>)
 8014812:	f00e fd3b 	bl	802328c <memset>
	return TRUE;
 8014816:	2301      	movs	r3, #1
}
 8014818:	4618      	mov	r0, r3
 801481a:	3708      	adds	r7, #8
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}
 8014820:	20001f98 	.word	0x20001f98
 8014824:	20001fb0 	.word	0x20001fb0
 8014828:	20001fcc 	.word	0x20001fcc
 801482c:	20001fd0 	.word	0x20001fd0

08014830 <pifTaskManager_Add>:
{
	pifFixList_Clear(&s_tasks, NULL);
}

PifTask* pifTaskManager_Add(PifTaskMode mode, uint16_t period, PifEvtTaskLoop evt_loop, void* p_client, BOOL start)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b086      	sub	sp, #24
 8014834:	af00      	add	r7, sp, #0
 8014836:	60ba      	str	r2, [r7, #8]
 8014838:	607b      	str	r3, [r7, #4]
 801483a:	4603      	mov	r3, r0
 801483c:	73fb      	strb	r3, [r7, #15]
 801483e:	460b      	mov	r3, r1
 8014840:	81bb      	strh	r3, [r7, #12]
	if (!evt_loop) {
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d104      	bne.n	8014852 <pifTaskManager_Add+0x22>
        pif_error = E_INVALID_PARAM;
 8014848:	4b28      	ldr	r3, [pc, #160]	; (80148ec <pifTaskManager_Add+0xbc>)
 801484a:	2201      	movs	r2, #1
 801484c:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801484e:	2300      	movs	r3, #0
 8014850:	e048      	b.n	80148e4 <pifTaskManager_Add+0xb4>
	}

	if (!_checkParam(&mode, period)) return NULL;
 8014852:	89ba      	ldrh	r2, [r7, #12]
 8014854:	f107 030f 	add.w	r3, r7, #15
 8014858:	4611      	mov	r1, r2
 801485a:	4618      	mov	r0, r3
 801485c:	f7ff fd6a 	bl	8014334 <_checkParam>
 8014860:	4603      	mov	r3, r0
 8014862:	2b00      	cmp	r3, #0
 8014864:	d101      	bne.n	801486a <pifTaskManager_Add+0x3a>
 8014866:	2300      	movs	r3, #0
 8014868:	e03c      	b.n	80148e4 <pifTaskManager_Add+0xb4>

	PifTask* p_owner = (PifTask*)pifFixList_AddFirst(&s_tasks);
 801486a:	4821      	ldr	r0, [pc, #132]	; (80148f0 <pifTaskManager_Add+0xc0>)
 801486c:	f7fe fb89 	bl	8012f82 <pifFixList_AddFirst>
 8014870:	6178      	str	r0, [r7, #20]
	if (!p_owner) return NULL;
 8014872:	697b      	ldr	r3, [r7, #20]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d101      	bne.n	801487c <pifTaskManager_Add+0x4c>
 8014878:	2300      	movs	r3, #0
 801487a:	e033      	b.n	80148e4 <pifTaskManager_Add+0xb4>

	pifTask_Init(p_owner);
 801487c:	6978      	ldr	r0, [r7, #20]
 801487e:	f7ff ff21 	bl	80146c4 <pifTask_Init>

	if (!_setParam(p_owner, mode, period)) goto fail;
 8014882:	7bfb      	ldrb	r3, [r7, #15]
 8014884:	89ba      	ldrh	r2, [r7, #12]
 8014886:	4619      	mov	r1, r3
 8014888:	6978      	ldr	r0, [r7, #20]
 801488a:	f7ff fdb5 	bl	80143f8 <_setParam>
 801488e:	4603      	mov	r3, r0
 8014890:	2b00      	cmp	r3, #0
 8014892:	d01e      	beq.n	80148d2 <pifTaskManager_Add+0xa2>

    p_owner->__evt_loop = evt_loop;
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	68ba      	ldr	r2, [r7, #8]
 8014898:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->_p_client = p_client;
 801489a:	697b      	ldr	r3, [r7, #20]
 801489c:	687a      	ldr	r2, [r7, #4]
 801489e:	60da      	str	r2, [r3, #12]
    p_owner->pause = (mode != TM_NEED) ? !start : TRUE;
 80148a0:	7bfb      	ldrb	r3, [r7, #15]
 80148a2:	2b06      	cmp	r3, #6
 80148a4:	d003      	beq.n	80148ae <pifTaskManager_Add+0x7e>
 80148a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d101      	bne.n	80148b2 <pifTaskManager_Add+0x82>
 80148ae:	2301      	movs	r3, #1
 80148b0:	e000      	b.n	80148b4 <pifTaskManager_Add+0x84>
 80148b2:	2300      	movs	r3, #0
 80148b4:	b2da      	uxtb	r2, r3
 80148b6:	697b      	ldr	r3, [r7, #20]
 80148b8:	701a      	strb	r2, [r3, #0]
    if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 80148ba:	4b0e      	ldr	r3, [pc, #56]	; (80148f4 <pifTaskManager_Add+0xc4>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d105      	bne.n	80148ce <pifTaskManager_Add+0x9e>
 80148c2:	480b      	ldr	r0, [pc, #44]	; (80148f0 <pifTaskManager_Add+0xc0>)
 80148c4:	f7fe fbd1 	bl	801306a <pifFixList_Begin>
 80148c8:	4603      	mov	r3, r0
 80148ca:	4a0a      	ldr	r2, [pc, #40]	; (80148f4 <pifTaskManager_Add+0xc4>)
 80148cc:	6013      	str	r3, [r2, #0]
    return p_owner;
 80148ce:	697b      	ldr	r3, [r7, #20]
 80148d0:	e008      	b.n	80148e4 <pifTaskManager_Add+0xb4>
	if (!_setParam(p_owner, mode, period)) goto fail;
 80148d2:	bf00      	nop

fail:
	if (p_owner) {
 80148d4:	697b      	ldr	r3, [r7, #20]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d003      	beq.n	80148e2 <pifTaskManager_Add+0xb2>
		pifFixList_Remove(&s_tasks, p_owner);
 80148da:	6979      	ldr	r1, [r7, #20]
 80148dc:	4804      	ldr	r0, [pc, #16]	; (80148f0 <pifTaskManager_Add+0xc0>)
 80148de:	f7fe fb84 	bl	8012fea <pifFixList_Remove>
	}
	return NULL;
 80148e2:	2300      	movs	r3, #0
}
 80148e4:	4618      	mov	r0, r3
 80148e6:	3718      	adds	r7, #24
 80148e8:	46bd      	mov	sp, r7
 80148ea:	bd80      	pop	{r7, pc}
 80148ec:	20001ef0 	.word	0x20001ef0
 80148f0:	20001f98 	.word	0x20001f98
 80148f4:	20001fb0 	.word	0x20001fb0

080148f8 <pifTaskManager_Remove>:

void pifTaskManager_Remove(PifTask* p_task)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b082      	sub	sp, #8
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
	if (p_task == (PifTask*)s_it_current->data) s_it_current = NULL;
 8014900:	4b17      	ldr	r3, [pc, #92]	; (8014960 <pifTaskManager_Remove+0x68>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	3308      	adds	r3, #8
 8014906:	687a      	ldr	r2, [r7, #4]
 8014908:	429a      	cmp	r2, r3
 801490a:	d102      	bne.n	8014912 <pifTaskManager_Remove+0x1a>
 801490c:	4b14      	ldr	r3, [pc, #80]	; (8014960 <pifTaskManager_Remove+0x68>)
 801490e:	2200      	movs	r2, #0
 8014910:	601a      	str	r2, [r3, #0]

	switch (p_task->_mode) {
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	799b      	ldrb	r3, [r3, #6]
 8014916:	2b01      	cmp	r3, #1
 8014918:	d805      	bhi.n	8014926 <pifTaskManager_Remove+0x2e>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_task->__table_number);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	6a1b      	ldr	r3, [r3, #32]
 801491e:	4618      	mov	r0, r3
 8014920:	f7ff fc3c 	bl	801419c <_resetTable>
		break;
 8014924:	e000      	b.n	8014928 <pifTaskManager_Remove+0x30>

	default:
		break;
 8014926:	bf00      	nop
	}
	pifFixList_Remove(&s_tasks, p_task);
 8014928:	6879      	ldr	r1, [r7, #4]
 801492a:	480e      	ldr	r0, [pc, #56]	; (8014964 <pifTaskManager_Remove+0x6c>)
 801492c:	f7fe fb5d 	bl	8012fea <pifFixList_Remove>

	if (!pifFixList_Count(&s_tasks)) s_it_current = NULL;
 8014930:	480c      	ldr	r0, [pc, #48]	; (8014964 <pifTaskManager_Remove+0x6c>)
 8014932:	f7fe fb8e 	bl	8013052 <pifFixList_Count>
 8014936:	4603      	mov	r3, r0
 8014938:	2b00      	cmp	r3, #0
 801493a:	d103      	bne.n	8014944 <pifTaskManager_Remove+0x4c>
 801493c:	4b08      	ldr	r3, [pc, #32]	; (8014960 <pifTaskManager_Remove+0x68>)
 801493e:	2200      	movs	r2, #0
 8014940:	601a      	str	r2, [r3, #0]
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
}
 8014942:	e009      	b.n	8014958 <pifTaskManager_Remove+0x60>
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 8014944:	4b06      	ldr	r3, [pc, #24]	; (8014960 <pifTaskManager_Remove+0x68>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d105      	bne.n	8014958 <pifTaskManager_Remove+0x60>
 801494c:	4805      	ldr	r0, [pc, #20]	; (8014964 <pifTaskManager_Remove+0x6c>)
 801494e:	f7fe fb8c 	bl	801306a <pifFixList_Begin>
 8014952:	4603      	mov	r3, r0
 8014954:	4a02      	ldr	r2, [pc, #8]	; (8014960 <pifTaskManager_Remove+0x68>)
 8014956:	6013      	str	r3, [r2, #0]
}
 8014958:	bf00      	nop
 801495a:	3708      	adds	r7, #8
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	20001fb0 	.word	0x20001fb0
 8014964:	20001f98 	.word	0x20001f98

08014968 <pifTaskManager_Count>:

int pifTaskManager_Count()
{
 8014968:	b580      	push	{r7, lr}
 801496a:	af00      	add	r7, sp, #0
	return pifFixList_Count(&s_tasks);
 801496c:	4802      	ldr	r0, [pc, #8]	; (8014978 <pifTaskManager_Count+0x10>)
 801496e:	f7fe fb70 	bl	8013052 <pifFixList_Count>
 8014972:	4603      	mov	r3, r0
}
 8014974:	4618      	mov	r0, r3
 8014976:	bd80      	pop	{r7, pc}
 8014978:	20001f98 	.word	0x20001f98

0801497c <pifTaskManager_Loop>:

void pifTaskManager_Loop()
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b088      	sub	sp, #32
 8014980:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 8014982:	2300      	movs	r3, #0
 8014984:	61fb      	str	r3, [r7, #28]
	PifTask* p_idle = NULL;
 8014986:	2300      	movs	r3, #0
 8014988:	61bb      	str	r3, [r7, #24]
	int i, n, t, count = pifFixList_Count(&s_tasks);
 801498a:	484c      	ldr	r0, [pc, #304]	; (8014abc <pifTaskManager_Loop+0x140>)
 801498c:	f7fe fb61 	bl	8013052 <pifFixList_Count>
 8014990:	60b8      	str	r0, [r7, #8]

	if (*pif_act_timer1us) pif_timer1us = (*pif_act_timer1us)();
 8014992:	4b4b      	ldr	r3, [pc, #300]	; (8014ac0 <pifTaskManager_Loop+0x144>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d005      	beq.n	80149a6 <pifTaskManager_Loop+0x2a>
 801499a:	4b49      	ldr	r3, [pc, #292]	; (8014ac0 <pifTaskManager_Loop+0x144>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	4798      	blx	r3
 80149a0:	4603      	mov	r3, r0
 80149a2:	4a48      	ldr	r2, [pc, #288]	; (8014ac4 <pifTaskManager_Loop+0x148>)
 80149a4:	6013      	str	r3, [r2, #0]

	if (!s_it_current) {
 80149a6:	4b48      	ldr	r3, [pc, #288]	; (8014ac8 <pifTaskManager_Loop+0x14c>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d108      	bne.n	80149c0 <pifTaskManager_Loop+0x44>
		if (!count) return;
 80149ae:	68bb      	ldr	r3, [r7, #8]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d07f      	beq.n	8014ab4 <pifTaskManager_Loop+0x138>
		s_it_current = pifFixList_Begin(&s_tasks);
 80149b4:	4841      	ldr	r0, [pc, #260]	; (8014abc <pifTaskManager_Loop+0x140>)
 80149b6:	f7fe fb58 	bl	801306a <pifFixList_Begin>
 80149ba:	4603      	mov	r3, r0
 80149bc:	4a42      	ldr	r2, [pc, #264]	; (8014ac8 <pifTaskManager_Loop+0x14c>)
 80149be:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 80149c0:	4b42      	ldr	r3, [pc, #264]	; (8014acc <pifTaskManager_Loop+0x150>)
 80149c2:	681a      	ldr	r2, [r3, #0]
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	4413      	add	r3, r2
 80149c8:	4a40      	ldr	r2, [pc, #256]	; (8014acc <pifTaskManager_Loop+0x150>)
 80149ca:	6013      	str	r3, [r2, #0]
	for (i = t = n = 0; i < count && !p_select; i++) {
 80149cc:	2300      	movs	r3, #0
 80149ce:	613b      	str	r3, [r7, #16]
 80149d0:	693b      	ldr	r3, [r7, #16]
 80149d2:	60fb      	str	r3, [r7, #12]
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	617b      	str	r3, [r7, #20]
 80149d8:	e04a      	b.n	8014a70 <pifTaskManager_Loop+0xf4>
		p_owner = (PifTask*)s_it_current->data;
 80149da:	4b3b      	ldr	r3, [pc, #236]	; (8014ac8 <pifTaskManager_Loop+0x14c>)
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	3308      	adds	r3, #8
 80149e0:	607b      	str	r3, [r7, #4]

		if (p_owner->_mode == TM_TIMER) {
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	799b      	ldrb	r3, [r3, #6]
 80149e6:	2b07      	cmp	r3, #7
 80149e8:	d107      	bne.n	80149fa <pifTaskManager_Loop+0x7e>
			(*p_owner->__evt_loop)(p_owner);
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149ee:	6878      	ldr	r0, [r7, #4]
 80149f0:	4798      	blx	r3
			t++;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	3301      	adds	r3, #1
 80149f6:	60fb      	str	r3, [r7, #12]
 80149f8:	e025      	b.n	8014a46 <pifTaskManager_Loop+0xca>
		}
		else if (p_owner->immediate) {
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	785b      	ldrb	r3, [r3, #1]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d005      	beq.n	8014a0e <pifTaskManager_Loop+0x92>
			p_owner->immediate = FALSE;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	2200      	movs	r2, #0
 8014a06:	705a      	strb	r2, [r3, #1]
			p_select = p_owner;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	61fb      	str	r3, [r7, #28]
 8014a0c:	e01b      	b.n	8014a46 <pifTaskManager_Loop+0xca>
		}
		else if (!p_owner->pause && p_owner->__processing) {
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d117      	bne.n	8014a46 <pifTaskManager_Loop+0xca>
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	69db      	ldr	r3, [r3, #28]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d013      	beq.n	8014a46 <pifTaskManager_Loop+0xca>
			if (p_owner->_mode == TM_IDLE_MS) {
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	799b      	ldrb	r3, [r3, #6]
 8014a22:	2b08      	cmp	r3, #8
 8014a24:	d10a      	bne.n	8014a3c <pifTaskManager_Loop+0xc0>
				if (!p_idle) {
 8014a26:	69bb      	ldr	r3, [r7, #24]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d10c      	bne.n	8014a46 <pifTaskManager_Loop+0xca>
					p_idle = (*p_owner->__processing)(p_owner);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	69db      	ldr	r3, [r3, #28]
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	4798      	blx	r3
 8014a34:	61b8      	str	r0, [r7, #24]
					n = i;
 8014a36:	697b      	ldr	r3, [r7, #20]
 8014a38:	613b      	str	r3, [r7, #16]
 8014a3a:	e004      	b.n	8014a46 <pifTaskManager_Loop+0xca>
				}
			}
			else {
				p_select = (*p_owner->__processing)(p_owner);
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	69db      	ldr	r3, [r3, #28]
 8014a40:	6878      	ldr	r0, [r7, #4]
 8014a42:	4798      	blx	r3
 8014a44:	61f8      	str	r0, [r7, #28]
			}
		}

		s_it_current = pifFixList_Next(s_it_current);
 8014a46:	4b20      	ldr	r3, [pc, #128]	; (8014ac8 <pifTaskManager_Loop+0x14c>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f7fe fb19 	bl	8013082 <pifFixList_Next>
 8014a50:	4603      	mov	r3, r0
 8014a52:	4a1d      	ldr	r2, [pc, #116]	; (8014ac8 <pifTaskManager_Loop+0x14c>)
 8014a54:	6013      	str	r3, [r2, #0]
		if (!s_it_current) {
 8014a56:	4b1c      	ldr	r3, [pc, #112]	; (8014ac8 <pifTaskManager_Loop+0x14c>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d105      	bne.n	8014a6a <pifTaskManager_Loop+0xee>
			s_it_current = pifFixList_Begin(&s_tasks);
 8014a5e:	4817      	ldr	r0, [pc, #92]	; (8014abc <pifTaskManager_Loop+0x140>)
 8014a60:	f7fe fb03 	bl	801306a <pifFixList_Begin>
 8014a64:	4603      	mov	r3, r0
 8014a66:	4a18      	ldr	r2, [pc, #96]	; (8014ac8 <pifTaskManager_Loop+0x14c>)
 8014a68:	6013      	str	r3, [r2, #0]
	for (i = t = n = 0; i < count && !p_select; i++) {
 8014a6a:	697b      	ldr	r3, [r7, #20]
 8014a6c:	3301      	adds	r3, #1
 8014a6e:	617b      	str	r3, [r7, #20]
 8014a70:	697a      	ldr	r2, [r7, #20]
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	429a      	cmp	r2, r3
 8014a76:	da02      	bge.n	8014a7e <pifTaskManager_Loop+0x102>
 8014a78:	69fb      	ldr	r3, [r7, #28]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d0ad      	beq.n	80149da <pifTaskManager_Loop+0x5e>
		}
	}

	if (p_select) {
 8014a7e:	69fb      	ldr	r3, [r7, #28]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d003      	beq.n	8014a8c <pifTaskManager_Loop+0x110>
	    _processingTask(p_select);
 8014a84:	69f8      	ldr	r0, [r7, #28]
 8014a86:	f7ff fd29 	bl	80144dc <_processingTask>
 8014a8a:	e007      	b.n	8014a9c <pifTaskManager_Loop+0x120>
	}
	else if (p_idle) {
 8014a8c:	69bb      	ldr	r3, [r7, #24]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d004      	beq.n	8014a9c <pifTaskManager_Loop+0x120>
		i = n;
 8014a92:	693b      	ldr	r3, [r7, #16]
 8014a94:	617b      	str	r3, [r7, #20]
	    _processingTask(p_idle);
 8014a96:	69b8      	ldr	r0, [r7, #24]
 8014a98:	f7ff fd20 	bl	80144dc <_processingTask>
	}
	s_pass_count += i - t;
 8014a9c:	697a      	ldr	r2, [r7, #20]
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	1ad3      	subs	r3, r2, r3
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	4b0a      	ldr	r3, [pc, #40]	; (8014ad0 <pifTaskManager_Loop+0x154>)
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	4413      	add	r3, r2
 8014aaa:	4a09      	ldr	r2, [pc, #36]	; (8014ad0 <pifTaskManager_Loop+0x154>)
 8014aac:	6013      	str	r3, [r2, #0]

    _checkLoopTime();
 8014aae:	f7ff fd9d 	bl	80145ec <_checkLoopTime>
 8014ab2:	e000      	b.n	8014ab6 <pifTaskManager_Loop+0x13a>
		if (!count) return;
 8014ab4:	bf00      	nop
}
 8014ab6:	3720      	adds	r7, #32
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}
 8014abc:	20001f98 	.word	0x20001f98
 8014ac0:	20001f14 	.word	0x20001f14
 8014ac4:	20001ef4 	.word	0x20001ef4
 8014ac8:	20001fb0 	.word	0x20001fb0
 8014acc:	20002054 	.word	0x20002054
 8014ad0:	20002058 	.word	0x20002058

08014ad4 <pifTaskManager_Yield>:

BOOL pifTaskManager_Yield()
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b08a      	sub	sp, #40	; 0x28
 8014ad8:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 8014ada:	2300      	movs	r3, #0
 8014adc:	627b      	str	r3, [r7, #36]	; 0x24
	PifTask* p_idle = NULL;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	623b      	str	r3, [r7, #32]
	int i, k, n, t, count = pifFixList_Count(&s_tasks);
 8014ae2:	4869      	ldr	r0, [pc, #420]	; (8014c88 <pifTaskManager_Yield+0x1b4>)
 8014ae4:	f7fe fab5 	bl	8013052 <pifFixList_Count>
 8014ae8:	60b8      	str	r0, [r7, #8]
	BOOL rtn = TRUE;
 8014aea:	2301      	movs	r3, #1
 8014aec:	73fb      	strb	r3, [r7, #15]

	if (*pif_act_timer1us) pif_timer1us = (*pif_act_timer1us)();
 8014aee:	4b67      	ldr	r3, [pc, #412]	; (8014c8c <pifTaskManager_Yield+0x1b8>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d005      	beq.n	8014b02 <pifTaskManager_Yield+0x2e>
 8014af6:	4b65      	ldr	r3, [pc, #404]	; (8014c8c <pifTaskManager_Yield+0x1b8>)
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	4798      	blx	r3
 8014afc:	4603      	mov	r3, r0
 8014afe:	4a64      	ldr	r2, [pc, #400]	; (8014c90 <pifTaskManager_Yield+0x1bc>)
 8014b00:	6013      	str	r3, [r2, #0]

	if (!s_it_current) {
 8014b02:	4b64      	ldr	r3, [pc, #400]	; (8014c94 <pifTaskManager_Yield+0x1c0>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d10a      	bne.n	8014b20 <pifTaskManager_Yield+0x4c>
		if (!count) return FALSE;
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d101      	bne.n	8014b14 <pifTaskManager_Yield+0x40>
 8014b10:	2300      	movs	r3, #0
 8014b12:	e0b4      	b.n	8014c7e <pifTaskManager_Yield+0x1aa>
		s_it_current = pifFixList_Begin(&s_tasks);
 8014b14:	485c      	ldr	r0, [pc, #368]	; (8014c88 <pifTaskManager_Yield+0x1b4>)
 8014b16:	f7fe faa8 	bl	801306a <pifFixList_Begin>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	4a5d      	ldr	r2, [pc, #372]	; (8014c94 <pifTaskManager_Yield+0x1c0>)
 8014b1e:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 8014b20:	4b5d      	ldr	r3, [pc, #372]	; (8014c98 <pifTaskManager_Yield+0x1c4>)
 8014b22:	681a      	ldr	r2, [r3, #0]
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	4413      	add	r3, r2
 8014b28:	4a5b      	ldr	r2, [pc, #364]	; (8014c98 <pifTaskManager_Yield+0x1c4>)
 8014b2a:	6013      	str	r3, [r2, #0]
	for (i = t = n = 0; i < count && !p_select; i++) {
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	617b      	str	r3, [r7, #20]
 8014b30:	697b      	ldr	r3, [r7, #20]
 8014b32:	613b      	str	r3, [r7, #16]
 8014b34:	693b      	ldr	r3, [r7, #16]
 8014b36:	61fb      	str	r3, [r7, #28]
 8014b38:	e07a      	b.n	8014c30 <pifTaskManager_Yield+0x15c>
		p_owner = (PifTask*)s_it_current->data;
 8014b3a:	4b56      	ldr	r3, [pc, #344]	; (8014c94 <pifTaskManager_Yield+0x1c0>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	3308      	adds	r3, #8
 8014b40:	607b      	str	r3, [r7, #4]

		if (p_owner->_running) goto next;
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	79db      	ldrb	r3, [r3, #7]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d158      	bne.n	8014bfc <pifTaskManager_Yield+0x128>
		if (s_task_stack_ptr) {
 8014b4a:	4b54      	ldr	r3, [pc, #336]	; (8014c9c <pifTaskManager_Yield+0x1c8>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d021      	beq.n	8014b96 <pifTaskManager_Yield+0xc2>
			for (k = 0; k < s_task_stack_ptr; k++) {
 8014b52:	2300      	movs	r3, #0
 8014b54:	61bb      	str	r3, [r7, #24]
 8014b56:	e012      	b.n	8014b7e <pifTaskManager_Yield+0xaa>
				if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8014b58:	4a51      	ldr	r2, [pc, #324]	; (8014ca0 <pifTaskManager_Yield+0x1cc>)
 8014b5a:	69bb      	ldr	r3, [r7, #24]
 8014b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b60:	789b      	ldrb	r3, [r3, #2]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d008      	beq.n	8014b78 <pifTaskManager_Yield+0xa4>
 8014b66:	4a4e      	ldr	r2, [pc, #312]	; (8014ca0 <pifTaskManager_Yield+0x1cc>)
 8014b68:	69bb      	ldr	r3, [r7, #24]
 8014b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b6e:	789a      	ldrb	r2, [r3, #2]
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	789b      	ldrb	r3, [r3, #2]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	d008      	beq.n	8014b8a <pifTaskManager_Yield+0xb6>
			for (k = 0; k < s_task_stack_ptr; k++) {
 8014b78:	69bb      	ldr	r3, [r7, #24]
 8014b7a:	3301      	adds	r3, #1
 8014b7c:	61bb      	str	r3, [r7, #24]
 8014b7e:	4b47      	ldr	r3, [pc, #284]	; (8014c9c <pifTaskManager_Yield+0x1c8>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	69ba      	ldr	r2, [r7, #24]
 8014b84:	429a      	cmp	r2, r3
 8014b86:	dbe7      	blt.n	8014b58 <pifTaskManager_Yield+0x84>
 8014b88:	e000      	b.n	8014b8c <pifTaskManager_Yield+0xb8>
				if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8014b8a:	bf00      	nop
			}
			if (k < s_task_stack_ptr) goto next;
 8014b8c:	4b43      	ldr	r3, [pc, #268]	; (8014c9c <pifTaskManager_Yield+0x1c8>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	69ba      	ldr	r2, [r7, #24]
 8014b92:	429a      	cmp	r2, r3
 8014b94:	db34      	blt.n	8014c00 <pifTaskManager_Yield+0x12c>
		}

		if (p_owner->_mode == TM_TIMER) {
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	799b      	ldrb	r3, [r3, #6]
 8014b9a:	2b07      	cmp	r3, #7
 8014b9c:	d107      	bne.n	8014bae <pifTaskManager_Yield+0xda>
			(*p_owner->__evt_loop)(p_owner);
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ba2:	6878      	ldr	r0, [r7, #4]
 8014ba4:	4798      	blx	r3
			t++;
 8014ba6:	693b      	ldr	r3, [r7, #16]
 8014ba8:	3301      	adds	r3, #1
 8014baa:	613b      	str	r3, [r7, #16]
 8014bac:	e02b      	b.n	8014c06 <pifTaskManager_Yield+0x132>
		}
		else if (p_owner->immediate) {
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	785b      	ldrb	r3, [r3, #1]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d005      	beq.n	8014bc2 <pifTaskManager_Yield+0xee>
			p_owner->immediate = FALSE;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	2200      	movs	r2, #0
 8014bba:	705a      	strb	r2, [r3, #1]
			p_select = p_owner;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8014bc0:	e021      	b.n	8014c06 <pifTaskManager_Yield+0x132>
		}
		else if (!p_owner->pause && p_owner->__processing) {
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	781b      	ldrb	r3, [r3, #0]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d11c      	bne.n	8014c04 <pifTaskManager_Yield+0x130>
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	69db      	ldr	r3, [r3, #28]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d018      	beq.n	8014c04 <pifTaskManager_Yield+0x130>
			if (p_owner->_mode == TM_IDLE_MS) {
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	799b      	ldrb	r3, [r3, #6]
 8014bd6:	2b08      	cmp	r3, #8
 8014bd8:	d10a      	bne.n	8014bf0 <pifTaskManager_Yield+0x11c>
				if (!p_idle) {
 8014bda:	6a3b      	ldr	r3, [r7, #32]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d112      	bne.n	8014c06 <pifTaskManager_Yield+0x132>
					p_idle = (*p_owner->__processing)(p_owner);
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	69db      	ldr	r3, [r3, #28]
 8014be4:	6878      	ldr	r0, [r7, #4]
 8014be6:	4798      	blx	r3
 8014be8:	6238      	str	r0, [r7, #32]
					n = i;
 8014bea:	69fb      	ldr	r3, [r7, #28]
 8014bec:	617b      	str	r3, [r7, #20]
 8014bee:	e00a      	b.n	8014c06 <pifTaskManager_Yield+0x132>
				}
			}
			else {
				p_select = (*p_owner->__processing)(p_owner);
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	69db      	ldr	r3, [r3, #28]
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	4798      	blx	r3
 8014bf8:	6278      	str	r0, [r7, #36]	; 0x24
 8014bfa:	e004      	b.n	8014c06 <pifTaskManager_Yield+0x132>
		if (p_owner->_running) goto next;
 8014bfc:	bf00      	nop
 8014bfe:	e002      	b.n	8014c06 <pifTaskManager_Yield+0x132>
			if (k < s_task_stack_ptr) goto next;
 8014c00:	bf00      	nop
 8014c02:	e000      	b.n	8014c06 <pifTaskManager_Yield+0x132>
			}
		}

next:
 8014c04:	bf00      	nop
		s_it_current = pifFixList_Next(s_it_current);
 8014c06:	4b23      	ldr	r3, [pc, #140]	; (8014c94 <pifTaskManager_Yield+0x1c0>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7fe fa39 	bl	8013082 <pifFixList_Next>
 8014c10:	4603      	mov	r3, r0
 8014c12:	4a20      	ldr	r2, [pc, #128]	; (8014c94 <pifTaskManager_Yield+0x1c0>)
 8014c14:	6013      	str	r3, [r2, #0]
		if (!s_it_current) {
 8014c16:	4b1f      	ldr	r3, [pc, #124]	; (8014c94 <pifTaskManager_Yield+0x1c0>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d105      	bne.n	8014c2a <pifTaskManager_Yield+0x156>
			s_it_current = pifFixList_Begin(&s_tasks);
 8014c1e:	481a      	ldr	r0, [pc, #104]	; (8014c88 <pifTaskManager_Yield+0x1b4>)
 8014c20:	f7fe fa23 	bl	801306a <pifFixList_Begin>
 8014c24:	4603      	mov	r3, r0
 8014c26:	4a1b      	ldr	r2, [pc, #108]	; (8014c94 <pifTaskManager_Yield+0x1c0>)
 8014c28:	6013      	str	r3, [r2, #0]
	for (i = t = n = 0; i < count && !p_select; i++) {
 8014c2a:	69fb      	ldr	r3, [r7, #28]
 8014c2c:	3301      	adds	r3, #1
 8014c2e:	61fb      	str	r3, [r7, #28]
 8014c30:	69fa      	ldr	r2, [r7, #28]
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	429a      	cmp	r2, r3
 8014c36:	da03      	bge.n	8014c40 <pifTaskManager_Yield+0x16c>
 8014c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	f43f af7d 	beq.w	8014b3a <pifTaskManager_Yield+0x66>
		}
	}

	if (p_select) {
 8014c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d005      	beq.n	8014c52 <pifTaskManager_Yield+0x17e>
	    rtn = _processingTask(p_select);
 8014c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c48:	f7ff fc48 	bl	80144dc <_processingTask>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	73fb      	strb	r3, [r7, #15]
 8014c50:	e009      	b.n	8014c66 <pifTaskManager_Yield+0x192>
	}
	else if (p_idle) {
 8014c52:	6a3b      	ldr	r3, [r7, #32]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d006      	beq.n	8014c66 <pifTaskManager_Yield+0x192>
		i = n;
 8014c58:	697b      	ldr	r3, [r7, #20]
 8014c5a:	61fb      	str	r3, [r7, #28]
	    rtn = _processingTask(p_idle);
 8014c5c:	6a38      	ldr	r0, [r7, #32]
 8014c5e:	f7ff fc3d 	bl	80144dc <_processingTask>
 8014c62:	4603      	mov	r3, r0
 8014c64:	73fb      	strb	r3, [r7, #15]
	}
	s_pass_count += i - t;
 8014c66:	69fa      	ldr	r2, [r7, #28]
 8014c68:	693b      	ldr	r3, [r7, #16]
 8014c6a:	1ad3      	subs	r3, r2, r3
 8014c6c:	461a      	mov	r2, r3
 8014c6e:	4b0d      	ldr	r3, [pc, #52]	; (8014ca4 <pifTaskManager_Yield+0x1d0>)
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	4413      	add	r3, r2
 8014c74:	4a0b      	ldr	r2, [pc, #44]	; (8014ca4 <pifTaskManager_Yield+0x1d0>)
 8014c76:	6013      	str	r3, [r2, #0]

    _checkLoopTime();
 8014c78:	f7ff fcb8 	bl	80145ec <_checkLoopTime>
    return rtn;
 8014c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c7e:	4618      	mov	r0, r3
 8014c80:	3728      	adds	r7, #40	; 0x28
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}
 8014c86:	bf00      	nop
 8014c88:	20001f98 	.word	0x20001f98
 8014c8c:	20001f14 	.word	0x20001f14
 8014c90:	20001ef4 	.word	0x20001ef4
 8014c94:	20001fb0 	.word	0x20001fb0
 8014c98:	20002054 	.word	0x20002054
 8014c9c:	20001fc8 	.word	0x20001fc8
 8014ca0:	20001fb4 	.word	0x20001fb4
 8014ca4:	20002058 	.word	0x20002058

08014ca8 <pifTaskManager_YieldMs>:

BOOL pifTaskManager_YieldMs(uint32_t time)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b084      	sub	sp, #16
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
    uint32_t start;

    if (!time) return FALSE;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d101      	bne.n	8014cba <pifTaskManager_YieldMs+0x12>
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	e011      	b.n	8014cde <pifTaskManager_YieldMs+0x36>

    start = pif_cumulative_timer1ms;
 8014cba:	4b0b      	ldr	r3, [pc, #44]	; (8014ce8 <pifTaskManager_YieldMs+0x40>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	60fb      	str	r3, [r7, #12]
    do {
		if (!pifTaskManager_Yield()) return FALSE;
 8014cc0:	f7ff ff08 	bl	8014ad4 <pifTaskManager_Yield>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d101      	bne.n	8014cce <pifTaskManager_YieldMs+0x26>
 8014cca:	2300      	movs	r3, #0
 8014ccc:	e007      	b.n	8014cde <pifTaskManager_YieldMs+0x36>
    } while (pif_cumulative_timer1ms - start <= time);
 8014cce:	4b06      	ldr	r3, [pc, #24]	; (8014ce8 <pifTaskManager_YieldMs+0x40>)
 8014cd0:	681a      	ldr	r2, [r3, #0]
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	1ad3      	subs	r3, r2, r3
 8014cd6:	687a      	ldr	r2, [r7, #4]
 8014cd8:	429a      	cmp	r2, r3
 8014cda:	d2f1      	bcs.n	8014cc0 <pifTaskManager_YieldMs+0x18>
    return TRUE;
 8014cdc:	2301      	movs	r3, #1
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	3710      	adds	r7, #16
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}
 8014ce6:	bf00      	nop
 8014ce8:	20001f08 	.word	0x20001f08

08014cec <_doTask>:
#include "core/pif_timer.h"


static uint16_t _doTask(PifTask* p_task)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b086      	sub	sp, #24
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
	PifTimerManager* p_manager = p_task->_p_client;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	68db      	ldr	r3, [r3, #12]
 8014cf8:	613b      	str	r3, [r7, #16]

	PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 8014cfa:	693b      	ldr	r3, [r7, #16]
 8014cfc:	3308      	adds	r3, #8
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f7fe f9b3 	bl	801306a <pifFixList_Begin>
 8014d04:	6178      	str	r0, [r7, #20]
	while (it) {
 8014d06:	e017      	b.n	8014d38 <_doTask+0x4c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	3308      	adds	r3, #8
 8014d0c:	60fb      	str	r3, [r7, #12]

		if (p_timer->__event) {
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	7f1b      	ldrb	r3, [r3, #28]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d00c      	beq.n	8014d30 <_doTask+0x44>
			p_timer->__event = FALSE;
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	2200      	movs	r2, #0
 8014d1a:	771a      	strb	r2, [r3, #28]

			if (p_timer->__evt_finish) (*p_timer->__evt_finish)(p_timer->__p_finish_issuer);
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	6a1b      	ldr	r3, [r3, #32]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d005      	beq.n	8014d30 <_doTask+0x44>
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	6a1b      	ldr	r3, [r3, #32]
 8014d28:	68fa      	ldr	r2, [r7, #12]
 8014d2a:	6912      	ldr	r2, [r2, #16]
 8014d2c:	4610      	mov	r0, r2
 8014d2e:	4798      	blx	r3
		}

		it = pifFixList_Next(it);
 8014d30:	6978      	ldr	r0, [r7, #20]
 8014d32:	f7fe f9a6 	bl	8013082 <pifFixList_Next>
 8014d36:	6178      	str	r0, [r7, #20]
	while (it) {
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d1e4      	bne.n	8014d08 <_doTask+0x1c>
	}
	return 0;
 8014d3e:	2300      	movs	r3, #0
}
 8014d40:	4618      	mov	r0, r3
 8014d42:	3718      	adds	r7, #24
 8014d44:	46bd      	mov	sp, r7
 8014d46:	bd80      	pop	{r7, pc}

08014d48 <pifTimerManager_Init>:

BOOL pifTimerManager_Init(PifTimerManager* p_manager, PifId id, uint32_t period1us, int max_count)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b086      	sub	sp, #24
 8014d4c:	af02      	add	r7, sp, #8
 8014d4e:	60f8      	str	r0, [r7, #12]
 8014d50:	607a      	str	r2, [r7, #4]
 8014d52:	603b      	str	r3, [r7, #0]
 8014d54:	460b      	mov	r3, r1
 8014d56:	817b      	strh	r3, [r7, #10]
    if (!p_manager || !period1us) {
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d002      	beq.n	8014d64 <pifTimerManager_Init+0x1c>
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d104      	bne.n	8014d6e <pifTimerManager_Init+0x26>
        pif_error = E_INVALID_PARAM;
 8014d64:	4b1f      	ldr	r3, [pc, #124]	; (8014de4 <pifTimerManager_Init+0x9c>)
 8014d66:	2201      	movs	r2, #1
 8014d68:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	e036      	b.n	8014ddc <pifTimerManager_Init+0x94>
    }

	memset(p_manager, 0, sizeof(PifTimerManager));
 8014d6e:	2224      	movs	r2, #36	; 0x24
 8014d70:	2100      	movs	r1, #0
 8014d72:	68f8      	ldr	r0, [r7, #12]
 8014d74:	f00e fa8a 	bl	802328c <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8014d78:	897b      	ldrh	r3, [r7, #10]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d106      	bne.n	8014d8c <pifTimerManager_Init+0x44>
 8014d7e:	4b1a      	ldr	r3, [pc, #104]	; (8014de8 <pifTimerManager_Init+0xa0>)
 8014d80:	881b      	ldrh	r3, [r3, #0]
 8014d82:	1c5a      	adds	r2, r3, #1
 8014d84:	b291      	uxth	r1, r2
 8014d86:	4a18      	ldr	r2, [pc, #96]	; (8014de8 <pifTimerManager_Init+0xa0>)
 8014d88:	8011      	strh	r1, [r2, #0]
 8014d8a:	817b      	strh	r3, [r7, #10]
    p_manager->_id = id;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	897a      	ldrh	r2, [r7, #10]
 8014d90:	801a      	strh	r2, [r3, #0]
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	3308      	adds	r3, #8
 8014d96:	683a      	ldr	r2, [r7, #0]
 8014d98:	2128      	movs	r1, #40	; 0x28
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	f7fe f85e 	bl	8012e5c <pifFixList_Init>
 8014da0:	4603      	mov	r3, r0
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d013      	beq.n	8014dce <pifTimerManager_Init+0x86>
    p_manager->_period1us = period1us;
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	687a      	ldr	r2, [r7, #4]
 8014daa:	605a      	str	r2, [r3, #4]

    p_manager->__p_task = pifTaskManager_Add(TM_TIMER, 0, _doTask, p_manager, TRUE);
 8014dac:	2301      	movs	r3, #1
 8014dae:	9300      	str	r3, [sp, #0]
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	4a0e      	ldr	r2, [pc, #56]	; (8014dec <pifTimerManager_Init+0xa4>)
 8014db4:	2100      	movs	r1, #0
 8014db6:	2007      	movs	r0, #7
 8014db8:	f7ff fd3a 	bl	8014830 <pifTaskManager_Add>
 8014dbc:	4602      	mov	r2, r0
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	621a      	str	r2, [r3, #32]
    if (!p_manager->__p_task) goto fail;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	6a1b      	ldr	r3, [r3, #32]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d003      	beq.n	8014dd2 <pifTimerManager_Init+0x8a>
    return TRUE;
 8014dca:	2301      	movs	r3, #1
 8014dcc:	e006      	b.n	8014ddc <pifTimerManager_Init+0x94>
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014dce:	bf00      	nop
 8014dd0:	e000      	b.n	8014dd4 <pifTimerManager_Init+0x8c>
    if (!p_manager->__p_task) goto fail;
 8014dd2:	bf00      	nop

fail:
	pifTimerManager_Clear(p_manager);
 8014dd4:	68f8      	ldr	r0, [r7, #12]
 8014dd6:	f000 f80b 	bl	8014df0 <pifTimerManager_Clear>
    return FALSE;
 8014dda:	2300      	movs	r3, #0
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3710      	adds	r7, #16
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}
 8014de4:	20001ef0 	.word	0x20001ef0
 8014de8:	2000005c 	.word	0x2000005c
 8014dec:	08014ced 	.word	0x08014ced

08014df0 <pifTimerManager_Clear>:

void pifTimerManager_Clear(PifTimerManager* p_manager)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b082      	sub	sp, #8
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
	if (p_manager->__p_task) {
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	6a1b      	ldr	r3, [r3, #32]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d007      	beq.n	8014e10 <pifTimerManager_Clear+0x20>
		pifTaskManager_Remove(p_manager->__p_task);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	6a1b      	ldr	r3, [r3, #32]
 8014e04:	4618      	mov	r0, r3
 8014e06:	f7ff fd77 	bl	80148f8 <pifTaskManager_Remove>
		p_manager->__p_task = NULL;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	621a      	str	r2, [r3, #32]
	}
	pifFixList_Clear(&p_manager->__timers, NULL);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	3308      	adds	r3, #8
 8014e14:	2100      	movs	r1, #0
 8014e16:	4618      	mov	r0, r3
 8014e18:	f7fe f880 	bl	8012f1c <pifFixList_Clear>
}
 8014e1c:	bf00      	nop
 8014e1e:	3708      	adds	r7, #8
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}

08014e24 <pifTimerManager_Add>:

PifTimer* pifTimerManager_Add(PifTimerManager* p_manager, PifTimerType type)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b084      	sub	sp, #16
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
 8014e2c:	460b      	mov	r3, r1
 8014e2e:	70fb      	strb	r3, [r7, #3]
	PifTimer* p_timer = (PifTimer*)pifFixList_AddFirst(&p_manager->__timers);
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	3308      	adds	r3, #8
 8014e34:	4618      	mov	r0, r3
 8014e36:	f7fe f8a4 	bl	8012f82 <pifFixList_AddFirst>
 8014e3a:	60f8      	str	r0, [r7, #12]
    if (!p_timer) return NULL;
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d101      	bne.n	8014e46 <pifTimerManager_Add+0x22>
 8014e42:	2300      	movs	r3, #0
 8014e44:	e006      	b.n	8014e54 <pifTimerManager_Add+0x30>

    p_timer->_type = type;
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	78fa      	ldrb	r2, [r7, #3]
 8014e4a:	721a      	strb	r2, [r3, #8]
    p_timer->_step = TS_STOP;
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	2200      	movs	r2, #0
 8014e50:	725a      	strb	r2, [r3, #9]
    return p_timer;
 8014e52:	68fb      	ldr	r3, [r7, #12]
}
 8014e54:	4618      	mov	r0, r3
 8014e56:	3710      	adds	r7, #16
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd80      	pop	{r7, pc}

08014e5c <pifTimerManager_Remove>:

void pifTimerManager_Remove(PifTimer* p_timer)
{
 8014e5c:	b480      	push	{r7}
 8014e5e:	b083      	sub	sp, #12
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
	p_timer->_step = TS_REMOVE;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	2202      	movs	r2, #2
 8014e68:	725a      	strb	r2, [r3, #9]
}
 8014e6a:	bf00      	nop
 8014e6c:	370c      	adds	r7, #12
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e74:	4770      	bx	lr

08014e76 <pifTimerManager_Count>:

int pifTimerManager_Count(PifTimerManager* p_manager)
{
 8014e76:	b580      	push	{r7, lr}
 8014e78:	b082      	sub	sp, #8
 8014e7a:	af00      	add	r7, sp, #0
 8014e7c:	6078      	str	r0, [r7, #4]
	return pifFixList_Count(&p_manager->__timers);
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	3308      	adds	r3, #8
 8014e82:	4618      	mov	r0, r3
 8014e84:	f7fe f8e5 	bl	8013052 <pifFixList_Count>
 8014e88:	4603      	mov	r3, r0
}
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	3708      	adds	r7, #8
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}
	...

08014e94 <pifTimer_Start>:

BOOL pifTimer_Start(PifTimer* p_owner, uint32_t target)
{
 8014e94:	b480      	push	{r7}
 8014e96:	b083      	sub	sp, #12
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
 8014e9c:	6039      	str	r1, [r7, #0]
	if (!target) {
 8014e9e:	683b      	ldr	r3, [r7, #0]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d104      	bne.n	8014eae <pifTimer_Start+0x1a>
		pif_error = E_INVALID_PARAM;
 8014ea4:	4b11      	ldr	r3, [pc, #68]	; (8014eec <pifTimer_Start+0x58>)
 8014ea6:	2201      	movs	r2, #1
 8014ea8:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	e017      	b.n	8014ede <pifTimer_Start+0x4a>
    }

    if (p_owner->_step == TS_STOP) {
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	7a5b      	ldrb	r3, [r3, #9]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d105      	bne.n	8014ec2 <pifTimer_Start+0x2e>
    	p_owner->_step = TS_RUNNING;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	2201      	movs	r2, #1
 8014eba:	725a      	strb	r2, [r3, #9]
    	p_owner->__event = FALSE;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	771a      	strb	r2, [r3, #28]
    }
    p_owner->target = target;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	683a      	ldr	r2, [r7, #0]
 8014ec6:	601a      	str	r2, [r3, #0]
    p_owner->__current = target;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	683a      	ldr	r2, [r7, #0]
 8014ecc:	60da      	str	r2, [r3, #12]

    if (p_owner->_type == TT_PWM) {
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	7a1b      	ldrb	r3, [r3, #8]
 8014ed2:	2b02      	cmp	r3, #2
 8014ed4:	d102      	bne.n	8014edc <pifTimer_Start+0x48>
    	p_owner->__pwm_duty = 0;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	2200      	movs	r2, #0
 8014eda:	619a      	str	r2, [r3, #24]
    }
    return TRUE;
 8014edc:	2301      	movs	r3, #1
}
 8014ede:	4618      	mov	r0, r3
 8014ee0:	370c      	adds	r7, #12
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee8:	4770      	bx	lr
 8014eea:	bf00      	nop
 8014eec:	20001ef0 	.word	0x20001ef0

08014ef0 <pifTimer_Stop>:

void pifTimer_Stop(PifTimer* p_owner)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b082      	sub	sp, #8
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
	p_owner->__current = 0;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	2200      	movs	r2, #0
 8014efc:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_STOP;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	2200      	movs	r2, #0
 8014f02:	725a      	strb	r2, [r3, #9]
	if (p_owner->_type == TT_PWM) {
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	7a1b      	ldrb	r3, [r3, #8]
 8014f08:	2b02      	cmp	r3, #2
 8014f0a:	d103      	bne.n	8014f14 <pifTimer_Stop+0x24>
		(*p_owner->act_pwm)(OFF);
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	685b      	ldr	r3, [r3, #4]
 8014f10:	2000      	movs	r0, #0
 8014f12:	4798      	blx	r3
	}
}
 8014f14:	bf00      	nop
 8014f16:	3708      	adds	r7, #8
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd80      	pop	{r7, pc}

08014f1c <pifTimer_Reset>:

void pifTimer_Reset(PifTimer* p_owner)
{
 8014f1c:	b480      	push	{r7}
 8014f1e:	b083      	sub	sp, #12
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
	p_owner->__current = p_owner->target;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	681a      	ldr	r2, [r3, #0]
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_RUNNING;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2201      	movs	r2, #1
 8014f30:	725a      	strb	r2, [r3, #9]
}
 8014f32:	bf00      	nop
 8014f34:	370c      	adds	r7, #12
 8014f36:	46bd      	mov	sp, r7
 8014f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3c:	4770      	bx	lr

08014f3e <pifTimerManager_sigTick>:
	if (p_owner->_step != TS_RUNNING) return 0;
	else return p_owner->target - p_owner->__current;
}

void pifTimerManager_sigTick(PifTimerManager* p_manager)
{
 8014f3e:	b580      	push	{r7, lr}
 8014f40:	b086      	sub	sp, #24
 8014f42:	af00      	add	r7, sp, #0
 8014f44:	6078      	str	r0, [r7, #4]
	PifTimer* p_remove = NULL;
 8014f46:	2300      	movs	r3, #0
 8014f48:	617b      	str	r3, [r7, #20]

    if (!p_manager) return;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	f000 8092 	beq.w	8015076 <pifTimerManager_sigTick+0x138>

    PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	3308      	adds	r3, #8
 8014f56:	4618      	mov	r0, r3
 8014f58:	f7fe f887 	bl	801306a <pifFixList_Begin>
 8014f5c:	6138      	str	r0, [r7, #16]
	while (it) {
 8014f5e:	e07c      	b.n	801505a <pifTimerManager_sigTick+0x11c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8014f60:	693b      	ldr	r3, [r7, #16]
 8014f62:	3308      	adds	r3, #8
 8014f64:	60fb      	str	r3, [r7, #12]

		if (p_timer->_step == TS_REMOVE) {
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	7a5b      	ldrb	r3, [r3, #9]
 8014f6a:	2b02      	cmp	r3, #2
 8014f6c:	d105      	bne.n	8014f7a <pifTimerManager_sigTick+0x3c>
			if (!p_remove) p_remove = p_timer;
 8014f6e:	697b      	ldr	r3, [r7, #20]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d16e      	bne.n	8015052 <pifTimerManager_sigTick+0x114>
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	617b      	str	r3, [r7, #20]
 8014f78:	e06b      	b.n	8015052 <pifTimerManager_sigTick+0x114>
		}
		else if (p_timer->__current) {
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	68db      	ldr	r3, [r3, #12]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d060      	beq.n	8015044 <pifTimerManager_sigTick+0x106>
			p_timer->__current--;
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	68db      	ldr	r3, [r3, #12]
 8014f86:	1e5a      	subs	r2, r3, #1
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	60da      	str	r2, [r3, #12]
			switch (p_timer->_type) {
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	7a1b      	ldrb	r3, [r3, #8]
 8014f90:	2b02      	cmp	r3, #2
 8014f92:	d031      	beq.n	8014ff8 <pifTimerManager_sigTick+0xba>
 8014f94:	2b02      	cmp	r3, #2
 8014f96:	dc5c      	bgt.n	8015052 <pifTimerManager_sigTick+0x114>
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d002      	beq.n	8014fa2 <pifTimerManager_sigTick+0x64>
 8014f9c:	2b01      	cmp	r3, #1
 8014f9e:	d015      	beq.n	8014fcc <pifTimerManager_sigTick+0x8e>
 8014fa0:	e057      	b.n	8015052 <pifTimerManager_sigTick+0x114>
			case TT_ONCE:
				if (!p_timer->__current) {
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	68db      	ldr	r3, [r3, #12]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d14e      	bne.n	8015048 <pifTimerManager_sigTick+0x10a>
					p_timer->_step = TS_STOP;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	2200      	movs	r2, #0
 8014fae:	725a      	strb	r2, [r3, #9]
					p_timer->__event = TRUE;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	2201      	movs	r2, #1
 8014fb4:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d044      	beq.n	8015048 <pifTimerManager_sigTick+0x10a>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fc2:	68fa      	ldr	r2, [r7, #12]
 8014fc4:	6952      	ldr	r2, [r2, #20]
 8014fc6:	4610      	mov	r0, r2
 8014fc8:	4798      	blx	r3
					}
				}
				break;
 8014fca:	e03d      	b.n	8015048 <pifTimerManager_sigTick+0x10a>

			case TT_REPEAT:
				if (!p_timer->__current) {
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	68db      	ldr	r3, [r3, #12]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d13b      	bne.n	801504c <pifTimerManager_sigTick+0x10e>
					p_timer->__current = p_timer->target;
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	681a      	ldr	r2, [r3, #0]
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	60da      	str	r2, [r3, #12]
					p_timer->__event = TRUE;
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	2201      	movs	r2, #1
 8014fe0:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d030      	beq.n	801504c <pifTimerManager_sigTick+0x10e>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fee:	68fa      	ldr	r2, [r7, #12]
 8014ff0:	6952      	ldr	r2, [r2, #20]
 8014ff2:	4610      	mov	r0, r2
 8014ff4:	4798      	blx	r3
					}
				}
				break;
 8014ff6:	e029      	b.n	801504c <pifTimerManager_sigTick+0x10e>

			case TT_PWM:
				if (p_timer->__pwm_duty != p_timer->target) {
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	699a      	ldr	r2, [r3, #24]
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	429a      	cmp	r2, r3
 8015002:	d016      	beq.n	8015032 <pifTimerManager_sigTick+0xf4>
					if (!p_timer->__current) {
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	68db      	ldr	r3, [r3, #12]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d107      	bne.n	801501c <pifTimerManager_sigTick+0xde>
						(*p_timer->act_pwm)(OFF);
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	685b      	ldr	r3, [r3, #4]
 8015010:	2000      	movs	r0, #0
 8015012:	4798      	blx	r3
						p_timer->__current = p_timer->target;
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	681a      	ldr	r2, [r3, #0]
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	60da      	str	r2, [r3, #12]
					}
					if (p_timer->__current == p_timer->__pwm_duty) {
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	68da      	ldr	r2, [r3, #12]
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	699b      	ldr	r3, [r3, #24]
 8015024:	429a      	cmp	r2, r3
 8015026:	d113      	bne.n	8015050 <pifTimerManager_sigTick+0x112>
						(*p_timer->act_pwm)(ON);
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	685b      	ldr	r3, [r3, #4]
 801502c:	2001      	movs	r0, #1
 801502e:	4798      	blx	r3
				else {
					if (!p_timer->__current) {
						p_timer->__current = p_timer->target;
					}
				}
				break;
 8015030:	e00e      	b.n	8015050 <pifTimerManager_sigTick+0x112>
					if (!p_timer->__current) {
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	68db      	ldr	r3, [r3, #12]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d10a      	bne.n	8015050 <pifTimerManager_sigTick+0x112>
						p_timer->__current = p_timer->target;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	681a      	ldr	r2, [r3, #0]
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	60da      	str	r2, [r3, #12]
				break;
 8015042:	e005      	b.n	8015050 <pifTimerManager_sigTick+0x112>
			}
		}
 8015044:	bf00      	nop
 8015046:	e004      	b.n	8015052 <pifTimerManager_sigTick+0x114>
				break;
 8015048:	bf00      	nop
 801504a:	e002      	b.n	8015052 <pifTimerManager_sigTick+0x114>
				break;
 801504c:	bf00      	nop
 801504e:	e000      	b.n	8015052 <pifTimerManager_sigTick+0x114>
				break;
 8015050:	bf00      	nop

		it = pifFixList_Next(it);
 8015052:	6938      	ldr	r0, [r7, #16]
 8015054:	f7fe f815 	bl	8013082 <pifFixList_Next>
 8015058:	6138      	str	r0, [r7, #16]
	while (it) {
 801505a:	693b      	ldr	r3, [r7, #16]
 801505c:	2b00      	cmp	r3, #0
 801505e:	f47f af7f 	bne.w	8014f60 <pifTimerManager_sigTick+0x22>
	}

	if (p_remove) pifFixList_Remove(&p_manager->__timers, p_remove);
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d007      	beq.n	8015078 <pifTimerManager_sigTick+0x13a>
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	3308      	adds	r3, #8
 801506c:	6979      	ldr	r1, [r7, #20]
 801506e:	4618      	mov	r0, r3
 8015070:	f7fd ffbb 	bl	8012fea <pifFixList_Remove>
 8015074:	e000      	b.n	8015078 <pifTimerManager_sigTick+0x13a>
    if (!p_manager) return;
 8015076:	bf00      	nop
}
 8015078:	3718      	adds	r7, #24
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}

0801507e <pifTimer_AttachEvtFinish>:

void pifTimer_AttachEvtFinish(PifTimer* p_owner, PifEvtTimerFinish evt_finish, PifIssuerP p_issuer)
{
 801507e:	b480      	push	{r7}
 8015080:	b085      	sub	sp, #20
 8015082:	af00      	add	r7, sp, #0
 8015084:	60f8      	str	r0, [r7, #12]
 8015086:	60b9      	str	r1, [r7, #8]
 8015088:	607a      	str	r2, [r7, #4]
	p_owner->__evt_finish = evt_finish;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	68ba      	ldr	r2, [r7, #8]
 801508e:	621a      	str	r2, [r3, #32]
	p_owner->__p_finish_issuer = p_issuer;
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	687a      	ldr	r2, [r7, #4]
 8015094:	611a      	str	r2, [r3, #16]
}
 8015096:	bf00      	nop
 8015098:	3714      	adds	r7, #20
 801509a:	46bd      	mov	sp, r7
 801509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a0:	4770      	bx	lr
	...

080150a4 <pifNoiseFilter_Init>:
#include "filter/pif_noise_filter.h"


BOOL pifNoiseFilter_Init(PifNoiseFilter* p_owner, PifNoiseFilterType type)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b082      	sub	sp, #8
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	460b      	mov	r3, r1
 80150ae:	70fb      	strb	r3, [r7, #3]
	if (!p_owner) {
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d104      	bne.n	80150c0 <pifNoiseFilter_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80150b6:	4b09      	ldr	r3, [pc, #36]	; (80150dc <pifNoiseFilter_Init+0x38>)
 80150b8:	2201      	movs	r2, #1
 80150ba:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80150bc:	2300      	movs	r3, #0
 80150be:	e008      	b.n	80150d2 <pifNoiseFilter_Init+0x2e>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilter));
 80150c0:	2208      	movs	r2, #8
 80150c2:	2100      	movs	r1, #0
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f00e f8e1 	bl	802328c <memset>

    p_owner->_type = type;
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	78fa      	ldrb	r2, [r7, #3]
 80150ce:	701a      	strb	r2, [r3, #0]
    return TRUE;
 80150d0:	2301      	movs	r3, #1
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	3708      	adds	r7, #8
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}
 80150da:	bf00      	nop
 80150dc:	20001ef0 	.word	0x20001ef0

080150e0 <pifNoiseFilter_Process>:

#ifdef __PIF_NO_USE_INLINE__

PifNoiseFilterValueP pifNoiseFilter_Process(PifNoiseFilter* p_owner, PifNoiseFilterValueP p_value)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b082      	sub	sp, #8
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
 80150e8:	6039      	str	r1, [r7, #0]
	return (*p_owner->__fn_process)(p_owner, p_value);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	685b      	ldr	r3, [r3, #4]
 80150ee:	6839      	ldr	r1, [r7, #0]
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	4798      	blx	r3
 80150f4:	4603      	mov	r3, r0
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	3708      	adds	r7, #8
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}

080150fe <_clear>:
#include "filter/pif_noise_filter_int32.h"


static void _clear(PifNoiseFilterInt32* p_owner)
{
 80150fe:	b580      	push	{r7, lr}
 8015100:	b082      	sub	sp, #8
 8015102:	af00      	add	r7, sp, #0
 8015104:	6078      	str	r0, [r7, #4]
	switch (p_owner->parent._type) {
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	781b      	ldrb	r3, [r3, #0]
 801510a:	2b01      	cmp	r3, #1
 801510c:	d002      	beq.n	8015114 <_clear+0x16>
 801510e:	2b02      	cmp	r3, #2
 8015110:	d00d      	beq.n	801512e <_clear+0x30>
			p_owner->__nc.diff = NULL;
		}
		break;

	default:
		break;
 8015112:	e01c      	b.n	801514e <_clear+0x50>
		if (p_owner->__wf.value) {
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	699b      	ldr	r3, [r3, #24]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d015      	beq.n	8015148 <_clear+0x4a>
			free(p_owner->__wf.value);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	699b      	ldr	r3, [r3, #24]
 8015120:	4618      	mov	r0, r3
 8015122:	f00e f89d 	bl	8023260 <free>
			p_owner->__wf.value = NULL;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2200      	movs	r2, #0
 801512a:	619a      	str	r2, [r3, #24]
		break;
 801512c:	e00c      	b.n	8015148 <_clear+0x4a>
		if (p_owner->__nc.diff) {
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	69db      	ldr	r3, [r3, #28]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d00a      	beq.n	801514c <_clear+0x4e>
			free(p_owner->__nc.diff);
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	69db      	ldr	r3, [r3, #28]
 801513a:	4618      	mov	r0, r3
 801513c:	f00e f890 	bl	8023260 <free>
			p_owner->__nc.diff = NULL;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2200      	movs	r2, #0
 8015144:	61da      	str	r2, [r3, #28]
		break;
 8015146:	e001      	b.n	801514c <_clear+0x4e>
		break;
 8015148:	bf00      	nop
 801514a:	e000      	b.n	801514e <_clear+0x50>
		break;
 801514c:	bf00      	nop
	}
}
 801514e:	bf00      	nop
 8015150:	3708      	adds	r7, #8
 8015152:	46bd      	mov	sp, r7
 8015154:	bd80      	pop	{r7, pc}

08015156 <_processAverage>:

static PifNoiseFilterValueP _processAverage(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 8015156:	b480      	push	{r7}
 8015158:	b085      	sub	sp, #20
 801515a:	af00      	add	r7, sp, #0
 801515c:	6078      	str	r0, [r7, #4]
 801515e:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	60fb      	str	r3, [r7, #12]

	p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801516a:	3301      	adds	r3, #1
 801516c:	68fa      	ldr	r2, [r7, #12]
 801516e:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015172:	fb93 f1f2 	sdiv	r1, r3, r2
 8015176:	fb01 f202 	mul.w	r2, r1, r2
 801517a:	1a9b      	subs	r3, r3, r2
 801517c:	b25a      	sxtb	r2, r3
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	751a      	strb	r2, [r3, #20]
	p_owner->__avg.sum -= p_owner->__buffer[p_owner->__current];
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	699a      	ldr	r2, [r3, #24]
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	6919      	ldr	r1, [r3, #16]
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015190:	009b      	lsls	r3, r3, #2
 8015192:	440b      	add	r3, r1
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	1ad2      	subs	r2, r2, r3
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	619a      	str	r2, [r3, #24]
	p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	691a      	ldr	r2, [r3, #16]
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80151a6:	009b      	lsls	r3, r3, #2
 80151a8:	4413      	add	r3, r2
 80151aa:	683a      	ldr	r2, [r7, #0]
 80151ac:	6812      	ldr	r2, [r2, #0]
 80151ae:	601a      	str	r2, [r3, #0]

	p_owner->__avg.sum += p_owner->__buffer[p_owner->__current];
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	699a      	ldr	r2, [r3, #24]
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	6919      	ldr	r1, [r3, #16]
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80151be:	009b      	lsls	r3, r3, #2
 80151c0:	440b      	add	r3, r1
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	441a      	add	r2, r3
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	619a      	str	r2, [r3, #24]
	p_owner->_result = p_owner->__avg.sum / p_owner->_size;
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	699b      	ldr	r3, [r3, #24]
 80151ce:	68fa      	ldr	r2, [r7, #12]
 80151d0:	f992 2008 	ldrsb.w	r2, [r2, #8]
 80151d4:	fb93 f2f2 	sdiv	r2, r3, r2
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	60da      	str	r2, [r3, #12]
	return &p_owner->_result;
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	330c      	adds	r3, #12
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3714      	adds	r7, #20
 80151e4:	46bd      	mov	sp, r7
 80151e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ea:	4770      	bx	lr

080151ec <_processNoiseCancel>:
	p_owner->_result = sum / p_owner->__wf.total;
	return &p_owner->_result;
}

static PifNoiseFilterValueP _processNoiseCancel(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 80151ec:	b480      	push	{r7}
 80151ee:	b08b      	sub	sp, #44	; 0x2c
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	61bb      	str	r3, [r7, #24]
	int32_t sum;
	int16_t* p_current;
	int16_t* p_before;
	int16_t current[3];

	p_before = p_owner->__nc.diff + p_owner->__current * 3;
 80151fa:	69bb      	ldr	r3, [r7, #24]
 80151fc:	69da      	ldr	r2, [r3, #28]
 80151fe:	69bb      	ldr	r3, [r7, #24]
 8015200:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015204:	4619      	mov	r1, r3
 8015206:	460b      	mov	r3, r1
 8015208:	005b      	lsls	r3, r3, #1
 801520a:	440b      	add	r3, r1
 801520c:	005b      	lsls	r3, r3, #1
 801520e:	4413      	add	r3, r2
 8015210:	617b      	str	r3, [r7, #20]

	current[0] = *(int32_t*)p_value - p_owner->__buffer[p_owner->__current];
 8015212:	683b      	ldr	r3, [r7, #0]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	b29a      	uxth	r2, r3
 8015218:	69bb      	ldr	r3, [r7, #24]
 801521a:	6919      	ldr	r1, [r3, #16]
 801521c:	69bb      	ldr	r3, [r7, #24]
 801521e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015222:	009b      	lsls	r3, r3, #2
 8015224:	440b      	add	r3, r1
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	b29b      	uxth	r3, r3
 801522a:	1ad3      	subs	r3, r2, r3
 801522c:	b29b      	uxth	r3, r3
 801522e:	b21b      	sxth	r3, r3
 8015230:	813b      	strh	r3, [r7, #8]

	current[1] = current[0] - p_before[0];
 8015232:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015236:	b29a      	uxth	r2, r3
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801523e:	b29b      	uxth	r3, r3
 8015240:	1ad3      	subs	r3, r2, r3
 8015242:	b29b      	uxth	r3, r3
 8015244:	b21b      	sxth	r3, r3
 8015246:	817b      	strh	r3, [r7, #10]
	if (current[1] < 0) current[1] = -current[1];
 8015248:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801524c:	2b00      	cmp	r3, #0
 801524e:	da06      	bge.n	801525e <_processNoiseCancel+0x72>
 8015250:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015254:	b29b      	uxth	r3, r3
 8015256:	425b      	negs	r3, r3
 8015258:	b29b      	uxth	r3, r3
 801525a:	b21b      	sxth	r3, r3
 801525c:	817b      	strh	r3, [r7, #10]

	current[2] = current[0] + p_before[0];
 801525e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015262:	b29a      	uxth	r2, r3
 8015264:	697b      	ldr	r3, [r7, #20]
 8015266:	f9b3 3000 	ldrsh.w	r3, [r3]
 801526a:	b29b      	uxth	r3, r3
 801526c:	4413      	add	r3, r2
 801526e:	b29b      	uxth	r3, r3
 8015270:	b21b      	sxth	r3, r3
 8015272:	81bb      	strh	r3, [r7, #12]
	if (current[2] < 0) current[2] = -current[2];
 8015274:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015278:	2b00      	cmp	r3, #0
 801527a:	da06      	bge.n	801528a <_processNoiseCancel+0x9e>
 801527c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015280:	b29b      	uxth	r3, r3
 8015282:	425b      	negs	r3, r3
 8015284:	b29b      	uxth	r3, r3
 8015286:	b21b      	sxth	r3, r3
 8015288:	81bb      	strh	r3, [r7, #12]

	if (current[1] > current[2]) {
 801528a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801528e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015292:	429a      	cmp	r2, r3
 8015294:	dd6d      	ble.n	8015372 <_processNoiseCancel+0x186>
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015296:	69bb      	ldr	r3, [r7, #24]
 8015298:	691a      	ldr	r2, [r3, #16]
 801529a:	69bb      	ldr	r3, [r7, #24]
 801529c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80152a0:	009b      	lsls	r3, r3, #2
 80152a2:	4413      	add	r3, r2
 80152a4:	683a      	ldr	r2, [r7, #0]
 80152a6:	6812      	ldr	r2, [r2, #0]
 80152a8:	601a      	str	r2, [r3, #0]

		p_current = p_before;
 80152aa:	697b      	ldr	r3, [r7, #20]
 80152ac:	613b      	str	r3, [r7, #16]
		p_before = p_owner->__nc.diff + p_owner->__nc.before * 3;
 80152ae:	69bb      	ldr	r3, [r7, #24]
 80152b0:	69da      	ldr	r2, [r3, #28]
 80152b2:	69bb      	ldr	r3, [r7, #24]
 80152b4:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80152b8:	4619      	mov	r1, r3
 80152ba:	460b      	mov	r3, r1
 80152bc:	005b      	lsls	r3, r3, #1
 80152be:	440b      	add	r3, r1
 80152c0:	005b      	lsls	r3, r3, #1
 80152c2:	4413      	add	r3, r2
 80152c4:	617b      	str	r3, [r7, #20]

		p_current[0] = p_owner->__buffer[p_owner->__current] - p_owner->__buffer[p_owner->__nc.before];
 80152c6:	69bb      	ldr	r3, [r7, #24]
 80152c8:	691a      	ldr	r2, [r3, #16]
 80152ca:	69bb      	ldr	r3, [r7, #24]
 80152cc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80152d0:	009b      	lsls	r3, r3, #2
 80152d2:	4413      	add	r3, r2
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	b29a      	uxth	r2, r3
 80152d8:	69bb      	ldr	r3, [r7, #24]
 80152da:	6919      	ldr	r1, [r3, #16]
 80152dc:	69bb      	ldr	r3, [r7, #24]
 80152de:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80152e2:	009b      	lsls	r3, r3, #2
 80152e4:	440b      	add	r3, r1
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	b29b      	uxth	r3, r3
 80152ea:	1ad3      	subs	r3, r2, r3
 80152ec:	b29b      	uxth	r3, r3
 80152ee:	b21a      	sxth	r2, r3
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	801a      	strh	r2, [r3, #0]

		p_current[1] = p_current[0] - p_before[0];
 80152f4:	693b      	ldr	r3, [r7, #16]
 80152f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152fa:	b29a      	uxth	r2, r3
 80152fc:	697b      	ldr	r3, [r7, #20]
 80152fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015302:	b29b      	uxth	r3, r3
 8015304:	1ad3      	subs	r3, r2, r3
 8015306:	b29a      	uxth	r2, r3
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	3302      	adds	r3, #2
 801530c:	b212      	sxth	r2, r2
 801530e:	801a      	strh	r2, [r3, #0]
		if (p_current[1] < 0) p_current[1] = -p_current[1];
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	3302      	adds	r3, #2
 8015314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015318:	2b00      	cmp	r3, #0
 801531a:	da0a      	bge.n	8015332 <_processNoiseCancel+0x146>
 801531c:	693b      	ldr	r3, [r7, #16]
 801531e:	3302      	adds	r3, #2
 8015320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015324:	b29b      	uxth	r3, r3
 8015326:	425b      	negs	r3, r3
 8015328:	b29a      	uxth	r2, r3
 801532a:	693b      	ldr	r3, [r7, #16]
 801532c:	3302      	adds	r3, #2
 801532e:	b212      	sxth	r2, r2
 8015330:	801a      	strh	r2, [r3, #0]

		p_current[2] = p_current[0] + p_before[0];
 8015332:	693b      	ldr	r3, [r7, #16]
 8015334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015338:	b29a      	uxth	r2, r3
 801533a:	697b      	ldr	r3, [r7, #20]
 801533c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015340:	b29b      	uxth	r3, r3
 8015342:	4413      	add	r3, r2
 8015344:	b29a      	uxth	r2, r3
 8015346:	693b      	ldr	r3, [r7, #16]
 8015348:	3304      	adds	r3, #4
 801534a:	b212      	sxth	r2, r2
 801534c:	801a      	strh	r2, [r3, #0]
		if (p_current[2] < 0) p_current[2] = -p_current[2];
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	3304      	adds	r3, #4
 8015352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015356:	2b00      	cmp	r3, #0
 8015358:	da43      	bge.n	80153e2 <_processNoiseCancel+0x1f6>
 801535a:	693b      	ldr	r3, [r7, #16]
 801535c:	3304      	adds	r3, #4
 801535e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015362:	b29b      	uxth	r3, r3
 8015364:	425b      	negs	r3, r3
 8015366:	b29a      	uxth	r2, r3
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	3304      	adds	r3, #4
 801536c:	b212      	sxth	r2, r2
 801536e:	801a      	strh	r2, [r3, #0]
 8015370:	e037      	b.n	80153e2 <_processNoiseCancel+0x1f6>
	}
	else {
		p_owner->__nc.before = p_owner->__current;
 8015372:	69bb      	ldr	r3, [r7, #24]
 8015374:	f993 2014 	ldrsb.w	r2, [r3, #20]
 8015378:	69bb      	ldr	r3, [r7, #24]
 801537a:	761a      	strb	r2, [r3, #24]
		p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 801537c:	69bb      	ldr	r3, [r7, #24]
 801537e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015382:	3301      	adds	r3, #1
 8015384:	69ba      	ldr	r2, [r7, #24]
 8015386:	f992 2008 	ldrsb.w	r2, [r2, #8]
 801538a:	fb93 f1f2 	sdiv	r1, r3, r2
 801538e:	fb01 f202 	mul.w	r2, r1, r2
 8015392:	1a9b      	subs	r3, r3, r2
 8015394:	b25a      	sxtb	r2, r3
 8015396:	69bb      	ldr	r3, [r7, #24]
 8015398:	751a      	strb	r2, [r3, #20]
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 801539a:	69bb      	ldr	r3, [r7, #24]
 801539c:	691a      	ldr	r2, [r3, #16]
 801539e:	69bb      	ldr	r3, [r7, #24]
 80153a0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80153a4:	009b      	lsls	r3, r3, #2
 80153a6:	4413      	add	r3, r2
 80153a8:	683a      	ldr	r2, [r7, #0]
 80153aa:	6812      	ldr	r2, [r2, #0]
 80153ac:	601a      	str	r2, [r3, #0]

		p_current = p_owner->__nc.diff + p_owner->__current * 3;
 80153ae:	69bb      	ldr	r3, [r7, #24]
 80153b0:	69da      	ldr	r2, [r3, #28]
 80153b2:	69bb      	ldr	r3, [r7, #24]
 80153b4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80153b8:	4619      	mov	r1, r3
 80153ba:	460b      	mov	r3, r1
 80153bc:	005b      	lsls	r3, r3, #1
 80153be:	440b      	add	r3, r1
 80153c0:	005b      	lsls	r3, r3, #1
 80153c2:	4413      	add	r3, r2
 80153c4:	613b      	str	r3, [r7, #16]

		p_current[0] = current[0];
 80153c6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80153ca:	693b      	ldr	r3, [r7, #16]
 80153cc:	801a      	strh	r2, [r3, #0]
		p_current[1] = current[1];
 80153ce:	693b      	ldr	r3, [r7, #16]
 80153d0:	3302      	adds	r3, #2
 80153d2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80153d6:	801a      	strh	r2, [r3, #0]
		p_current[2] = current[2];
 80153d8:	693b      	ldr	r3, [r7, #16]
 80153da:	3304      	adds	r3, #4
 80153dc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80153e0:	801a      	strh	r2, [r3, #0]
	}

	sum = 0;
 80153e2:	2300      	movs	r3, #0
 80153e4:	61fb      	str	r3, [r7, #28]
	count = 0;
 80153e6:	2300      	movs	r3, #0
 80153e8:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 80153ea:	2300      	movs	r3, #0
 80153ec:	627b      	str	r3, [r7, #36]	; 0x24
 80153ee:	e00e      	b.n	801540e <_processNoiseCancel+0x222>
		sum += p_owner->__buffer[i];
 80153f0:	69bb      	ldr	r3, [r7, #24]
 80153f2:	691a      	ldr	r2, [r3, #16]
 80153f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f6:	009b      	lsls	r3, r3, #2
 80153f8:	4413      	add	r3, r2
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	69fa      	ldr	r2, [r7, #28]
 80153fe:	4413      	add	r3, r2
 8015400:	61fb      	str	r3, [r7, #28]
		count++;
 8015402:	6a3b      	ldr	r3, [r7, #32]
 8015404:	3301      	adds	r3, #1
 8015406:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 8015408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801540a:	3301      	adds	r3, #1
 801540c:	627b      	str	r3, [r7, #36]	; 0x24
 801540e:	69bb      	ldr	r3, [r7, #24]
 8015410:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015414:	461a      	mov	r2, r3
 8015416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015418:	4293      	cmp	r3, r2
 801541a:	dbe9      	blt.n	80153f0 <_processNoiseCancel+0x204>
	}
	if (count > 0) {
 801541c:	6a3b      	ldr	r3, [r7, #32]
 801541e:	2b00      	cmp	r3, #0
 8015420:	dd05      	ble.n	801542e <_processNoiseCancel+0x242>
		p_owner->_result = sum / count;
 8015422:	69fa      	ldr	r2, [r7, #28]
 8015424:	6a3b      	ldr	r3, [r7, #32]
 8015426:	fb92 f2f3 	sdiv	r2, r2, r3
 801542a:	69bb      	ldr	r3, [r7, #24]
 801542c:	60da      	str	r2, [r3, #12]
	}
	return &p_owner->_result;
 801542e:	69bb      	ldr	r3, [r7, #24]
 8015430:	330c      	adds	r3, #12
}
 8015432:	4618      	mov	r0, r3
 8015434:	372c      	adds	r7, #44	; 0x2c
 8015436:	46bd      	mov	sp, r7
 8015438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543c:	4770      	bx	lr
	...

08015440 <pifNoiseFilterInt32_Init>:

BOOL pifNoiseFilterInt32_Init(PifNoiseFilterInt32* p_owner, uint8_t size)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b082      	sub	sp, #8
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
 8015448:	460b      	mov	r3, r1
 801544a:	70fb      	strb	r3, [r7, #3]
	if (!p_owner || !size) {
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d002      	beq.n	8015458 <pifNoiseFilterInt32_Init+0x18>
 8015452:	78fb      	ldrb	r3, [r7, #3]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d104      	bne.n	8015462 <pifNoiseFilterInt32_Init+0x22>
		pif_error = E_INVALID_PARAM;
 8015458:	4b17      	ldr	r3, [pc, #92]	; (80154b8 <pifNoiseFilterInt32_Init+0x78>)
 801545a:	2201      	movs	r2, #1
 801545c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801545e:	2300      	movs	r3, #0
 8015460:	e026      	b.n	80154b0 <pifNoiseFilterInt32_Init+0x70>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilterInt32));
 8015462:	2220      	movs	r2, #32
 8015464:	2100      	movs	r1, #0
 8015466:	6878      	ldr	r0, [r7, #4]
 8015468:	f00d ff10 	bl	802328c <memset>

	p_owner->__buffer = calloc(size, sizeof(int32_t));
 801546c:	78fb      	ldrb	r3, [r7, #3]
 801546e:	2104      	movs	r1, #4
 8015470:	4618      	mov	r0, r3
 8015472:	f00d febb 	bl	80231ec <calloc>
 8015476:	4603      	mov	r3, r0
 8015478:	461a      	mov	r2, r3
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	611a      	str	r2, [r3, #16]
	if (!p_owner->__buffer) {
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	691b      	ldr	r3, [r3, #16]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d104      	bne.n	8015490 <pifNoiseFilterInt32_Init+0x50>
		pif_error = E_OUT_OF_HEAP;
 8015486:	4b0c      	ldr	r3, [pc, #48]	; (80154b8 <pifNoiseFilterInt32_Init+0x78>)
 8015488:	2203      	movs	r2, #3
 801548a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801548c:	2300      	movs	r3, #0
 801548e:	e00f      	b.n	80154b0 <pifNoiseFilterInt32_Init+0x70>
	}

	pifNoiseFilter_Init(&p_owner->parent, NFT_AVERAGE);
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2100      	movs	r1, #0
 8015494:	4618      	mov	r0, r3
 8015496:	f7ff fe05 	bl	80150a4 <pifNoiseFilter_Init>
    p_owner->_size = size;
 801549a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	721a      	strb	r2, [r3, #8]
	p_owner->__current = 0;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	2200      	movs	r2, #0
 80154a6:	751a      	strb	r2, [r3, #20]

	p_owner->parent.__fn_process = _processAverage;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	4a04      	ldr	r2, [pc, #16]	; (80154bc <pifNoiseFilterInt32_Init+0x7c>)
 80154ac:	605a      	str	r2, [r3, #4]
    return TRUE;
 80154ae:	2301      	movs	r3, #1
}
 80154b0:	4618      	mov	r0, r3
 80154b2:	3708      	adds	r7, #8
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}
 80154b8:	20001ef0 	.word	0x20001ef0
 80154bc:	08015157 	.word	0x08015157

080154c0 <pifNoiseFilterInt32_SetNoiseCancel>:
	p_owner->parent.__fn_process = _processWeightFactor;
	return TRUE;
}

BOOL pifNoiseFilterInt32_SetNoiseCancel(PifNoiseFilterInt32* p_owner)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b082      	sub	sp, #8
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
	_clear(p_owner);
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f7ff fe18 	bl	80150fe <_clear>

	if (p_owner->_size < 3 || p_owner->_size > 32) {
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80154d4:	2b02      	cmp	r3, #2
 80154d6:	dd04      	ble.n	80154e2 <pifNoiseFilterInt32_SetNoiseCancel+0x22>
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80154de:	2b20      	cmp	r3, #32
 80154e0:	dd04      	ble.n	80154ec <pifNoiseFilterInt32_SetNoiseCancel+0x2c>
		pif_error = E_INVALID_PARAM;
 80154e2:	4b15      	ldr	r3, [pc, #84]	; (8015538 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 80154e4:	2201      	movs	r2, #1
 80154e6:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80154e8:	2300      	movs	r3, #0
 80154ea:	e021      	b.n	8015530 <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.diff = calloc(p_owner->_size * 3, sizeof(int16_t));
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80154f2:	461a      	mov	r2, r3
 80154f4:	4613      	mov	r3, r2
 80154f6:	005b      	lsls	r3, r3, #1
 80154f8:	4413      	add	r3, r2
 80154fa:	2102      	movs	r1, #2
 80154fc:	4618      	mov	r0, r3
 80154fe:	f00d fe75 	bl	80231ec <calloc>
 8015502:	4603      	mov	r3, r0
 8015504:	461a      	mov	r2, r3
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	61da      	str	r2, [r3, #28]
	if (!p_owner->__nc.diff) {
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	69db      	ldr	r3, [r3, #28]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d104      	bne.n	801551c <pifNoiseFilterInt32_SetNoiseCancel+0x5c>
		pif_error = E_OUT_OF_HEAP;
 8015512:	4b09      	ldr	r3, [pc, #36]	; (8015538 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 8015514:	2203      	movs	r2, #3
 8015516:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015518:	2300      	movs	r3, #0
 801551a:	e009      	b.n	8015530 <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.before = 0;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2200      	movs	r2, #0
 8015520:	761a      	strb	r2, [r3, #24]

	p_owner->parent._type = NFT_NOISE_CANCEL;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2202      	movs	r2, #2
 8015526:	701a      	strb	r2, [r3, #0]
	p_owner->parent.__fn_process = _processNoiseCancel;
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	4a04      	ldr	r2, [pc, #16]	; (801553c <pifNoiseFilterInt32_SetNoiseCancel+0x7c>)
 801552c:	605a      	str	r2, [r3, #4]
	return TRUE;
 801552e:	2301      	movs	r3, #1
}
 8015530:	4618      	mov	r0, r3
 8015532:	3708      	adds	r7, #8
 8015534:	46bd      	mov	sp, r7
 8015536:	bd80      	pop	{r7, pc}
 8015538:	20001ef0 	.word	0x20001ef0
 801553c:	080151ed 	.word	0x080151ed

08015540 <_convertString2Date>:

#define DIGIT_TO_VAL(_x)        (_x - '0')


static void _convertString2Date(char* str, PifDateTime* p_date_time)
{
 8015540:	b480      	push	{r7}
 8015542:	b083      	sub	sp, #12
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
 8015548:	6039      	str	r1, [r7, #0]
	p_date_time->day = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	781b      	ldrb	r3, [r3, #0]
 801554e:	3b30      	subs	r3, #48	; 0x30
 8015550:	b2db      	uxtb	r3, r3
 8015552:	461a      	mov	r2, r3
 8015554:	0092      	lsls	r2, r2, #2
 8015556:	4413      	add	r3, r2
 8015558:	005b      	lsls	r3, r3, #1
 801555a:	b2da      	uxtb	r2, r3
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	3301      	adds	r3, #1
 8015560:	781b      	ldrb	r3, [r3, #0]
 8015562:	4413      	add	r3, r2
 8015564:	b2db      	uxtb	r3, r3
 8015566:	3b30      	subs	r3, #48	; 0x30
 8015568:	b2da      	uxtb	r2, r3
 801556a:	683b      	ldr	r3, [r7, #0]
 801556c:	709a      	strb	r2, [r3, #2]
	p_date_time->month = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	3302      	adds	r3, #2
 8015572:	781b      	ldrb	r3, [r3, #0]
 8015574:	3b30      	subs	r3, #48	; 0x30
 8015576:	b2db      	uxtb	r3, r3
 8015578:	461a      	mov	r2, r3
 801557a:	0092      	lsls	r2, r2, #2
 801557c:	4413      	add	r3, r2
 801557e:	005b      	lsls	r3, r3, #1
 8015580:	b2da      	uxtb	r2, r3
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	3303      	adds	r3, #3
 8015586:	781b      	ldrb	r3, [r3, #0]
 8015588:	4413      	add	r3, r2
 801558a:	b2db      	uxtb	r3, r3
 801558c:	3b30      	subs	r3, #48	; 0x30
 801558e:	b2da      	uxtb	r2, r3
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	705a      	strb	r2, [r3, #1]
	p_date_time->year = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	3304      	adds	r3, #4
 8015598:	781b      	ldrb	r3, [r3, #0]
 801559a:	3b30      	subs	r3, #48	; 0x30
 801559c:	b2db      	uxtb	r3, r3
 801559e:	461a      	mov	r2, r3
 80155a0:	0092      	lsls	r2, r2, #2
 80155a2:	4413      	add	r3, r2
 80155a4:	005b      	lsls	r3, r3, #1
 80155a6:	b2da      	uxtb	r2, r3
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	3305      	adds	r3, #5
 80155ac:	781b      	ldrb	r3, [r3, #0]
 80155ae:	4413      	add	r3, r2
 80155b0:	b2db      	uxtb	r3, r3
 80155b2:	3b30      	subs	r3, #48	; 0x30
 80155b4:	b2da      	uxtb	r2, r3
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	701a      	strb	r2, [r3, #0]
}
 80155ba:	bf00      	nop
 80155bc:	370c      	adds	r7, #12
 80155be:	46bd      	mov	sp, r7
 80155c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c4:	4770      	bx	lr
	...

080155c8 <_convertString2Time>:

static void _convertString2Time(char* str, PifDateTime* p_date_time)
{
 80155c8:	b480      	push	{r7}
 80155ca:	b085      	sub	sp, #20
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
 80155d0:	6039      	str	r1, [r7, #0]
	int i, digit;

	p_date_time->hour = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	781b      	ldrb	r3, [r3, #0]
 80155d6:	3b30      	subs	r3, #48	; 0x30
 80155d8:	b2db      	uxtb	r3, r3
 80155da:	461a      	mov	r2, r3
 80155dc:	0092      	lsls	r2, r2, #2
 80155de:	4413      	add	r3, r2
 80155e0:	005b      	lsls	r3, r3, #1
 80155e2:	b2da      	uxtb	r2, r3
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	3301      	adds	r3, #1
 80155e8:	781b      	ldrb	r3, [r3, #0]
 80155ea:	4413      	add	r3, r2
 80155ec:	b2db      	uxtb	r3, r3
 80155ee:	3b30      	subs	r3, #48	; 0x30
 80155f0:	b2da      	uxtb	r2, r3
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	70da      	strb	r2, [r3, #3]
	p_date_time->minute = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	3302      	adds	r3, #2
 80155fa:	781b      	ldrb	r3, [r3, #0]
 80155fc:	3b30      	subs	r3, #48	; 0x30
 80155fe:	b2db      	uxtb	r3, r3
 8015600:	461a      	mov	r2, r3
 8015602:	0092      	lsls	r2, r2, #2
 8015604:	4413      	add	r3, r2
 8015606:	005b      	lsls	r3, r3, #1
 8015608:	b2da      	uxtb	r2, r3
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	3303      	adds	r3, #3
 801560e:	781b      	ldrb	r3, [r3, #0]
 8015610:	4413      	add	r3, r2
 8015612:	b2db      	uxtb	r3, r3
 8015614:	3b30      	subs	r3, #48	; 0x30
 8015616:	b2da      	uxtb	r2, r3
 8015618:	683b      	ldr	r3, [r7, #0]
 801561a:	711a      	strb	r2, [r3, #4]
	p_date_time->second = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	3304      	adds	r3, #4
 8015620:	781b      	ldrb	r3, [r3, #0]
 8015622:	3b30      	subs	r3, #48	; 0x30
 8015624:	b2db      	uxtb	r3, r3
 8015626:	461a      	mov	r2, r3
 8015628:	0092      	lsls	r2, r2, #2
 801562a:	4413      	add	r3, r2
 801562c:	005b      	lsls	r3, r3, #1
 801562e:	b2da      	uxtb	r2, r3
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	3305      	adds	r3, #5
 8015634:	781b      	ldrb	r3, [r3, #0]
 8015636:	4413      	add	r3, r2
 8015638:	b2db      	uxtb	r3, r3
 801563a:	3b30      	subs	r3, #48	; 0x30
 801563c:	b2da      	uxtb	r2, r3
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	715a      	strb	r2, [r3, #5]
	if (str[6] == '.') {
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	3306      	adds	r3, #6
 8015646:	781b      	ldrb	r3, [r3, #0]
 8015648:	2b2e      	cmp	r3, #46	; 0x2e
 801564a:	d134      	bne.n	80156b6 <_convertString2Time+0xee>
		p_date_time->millisecond = 0;
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	2200      	movs	r2, #0
 8015650:	80da      	strh	r2, [r3, #6]
		digit = 100;
 8015652:	2364      	movs	r3, #100	; 0x64
 8015654:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 8015656:	2307      	movs	r3, #7
 8015658:	60fb      	str	r3, [r7, #12]
 801565a:	e027      	b.n	80156ac <_convertString2Time+0xe4>
			if (!isdigit((int)str[i])) break;
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	687a      	ldr	r2, [r7, #4]
 8015660:	4413      	add	r3, r2
 8015662:	781b      	ldrb	r3, [r3, #0]
 8015664:	3301      	adds	r3, #1
 8015666:	4a17      	ldr	r2, [pc, #92]	; (80156c4 <_convertString2Time+0xfc>)
 8015668:	4413      	add	r3, r2
 801566a:	781b      	ldrb	r3, [r3, #0]
 801566c:	f003 0304 	and.w	r3, r3, #4
 8015670:	2b00      	cmp	r3, #0
 8015672:	d01f      	beq.n	80156b4 <_convertString2Time+0xec>
			p_date_time->millisecond += DIGIT_TO_VAL(str[i]) * digit;
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	88da      	ldrh	r2, [r3, #6]
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	6879      	ldr	r1, [r7, #4]
 801567c:	440b      	add	r3, r1
 801567e:	781b      	ldrb	r3, [r3, #0]
 8015680:	3b30      	subs	r3, #48	; 0x30
 8015682:	b299      	uxth	r1, r3
 8015684:	68bb      	ldr	r3, [r7, #8]
 8015686:	b29b      	uxth	r3, r3
 8015688:	fb11 f303 	smulbb	r3, r1, r3
 801568c:	b29b      	uxth	r3, r3
 801568e:	4413      	add	r3, r2
 8015690:	b29a      	uxth	r2, r3
 8015692:	683b      	ldr	r3, [r7, #0]
 8015694:	80da      	strh	r2, [r3, #6]
			digit /= 10;
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	4a0b      	ldr	r2, [pc, #44]	; (80156c8 <_convertString2Time+0x100>)
 801569a:	fb82 1203 	smull	r1, r2, r2, r3
 801569e:	1092      	asrs	r2, r2, #2
 80156a0:	17db      	asrs	r3, r3, #31
 80156a2:	1ad3      	subs	r3, r2, r3
 80156a4:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	3301      	adds	r3, #1
 80156aa:	60fb      	str	r3, [r7, #12]
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	2b09      	cmp	r3, #9
 80156b0:	ddd4      	ble.n	801565c <_convertString2Time+0x94>
		}
	}
}
 80156b2:	e000      	b.n	80156b6 <_convertString2Time+0xee>
			if (!isdigit((int)str[i])) break;
 80156b4:	bf00      	nop
}
 80156b6:	bf00      	nop
 80156b8:	3714      	adds	r7, #20
 80156ba:	46bd      	mov	sp, r7
 80156bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c0:	4770      	bx	lr
 80156c2:	bf00      	nop
 80156c4:	08029608 	.word	0x08029608
 80156c8:	66666667 	.word	0x66666667

080156cc <_convertString2Float>:

static double _convertString2Float(char* str)
{
 80156cc:	b5b0      	push	{r4, r5, r7, lr}
 80156ce:	b088      	sub	sp, #32
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
	char* p;
	double value = 0.0, unit;
 80156d4:	f04f 0200 	mov.w	r2, #0
 80156d8:	f04f 0300 	mov.w	r3, #0
 80156dc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	p = str;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	61fb      	str	r3, [r7, #28]
	if (*p == '-') p++;
 80156e4:	69fb      	ldr	r3, [r7, #28]
 80156e6:	781b      	ldrb	r3, [r3, #0]
 80156e8:	2b2d      	cmp	r3, #45	; 0x2d
 80156ea:	d120      	bne.n	801572e <_convertString2Float+0x62>
 80156ec:	69fb      	ldr	r3, [r7, #28]
 80156ee:	3301      	adds	r3, #1
 80156f0:	61fb      	str	r3, [r7, #28]
	while (isdigit((int)*p)) {
 80156f2:	e01c      	b.n	801572e <_convertString2Float+0x62>
		value *= 10;
 80156f4:	f04f 0200 	mov.w	r2, #0
 80156f8:	4b38      	ldr	r3, [pc, #224]	; (80157dc <_convertString2Float+0x110>)
 80156fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80156fe:	f7ea ff39 	bl	8000574 <__aeabi_dmul>
 8015702:	4602      	mov	r2, r0
 8015704:	460b      	mov	r3, r1
 8015706:	e9c7 2304 	strd	r2, r3, [r7, #16]
		value += DIGIT_TO_VAL(*p++);
 801570a:	69fb      	ldr	r3, [r7, #28]
 801570c:	1c5a      	adds	r2, r3, #1
 801570e:	61fa      	str	r2, [r7, #28]
 8015710:	781b      	ldrb	r3, [r3, #0]
 8015712:	3b30      	subs	r3, #48	; 0x30
 8015714:	4618      	mov	r0, r3
 8015716:	f7ea fec3 	bl	80004a0 <__aeabi_i2d>
 801571a:	4602      	mov	r2, r0
 801571c:	460b      	mov	r3, r1
 801571e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015722:	f7ea fd71 	bl	8000208 <__adddf3>
 8015726:	4602      	mov	r2, r0
 8015728:	460b      	mov	r3, r1
 801572a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (isdigit((int)*p)) {
 801572e:	69fb      	ldr	r3, [r7, #28]
 8015730:	781b      	ldrb	r3, [r3, #0]
 8015732:	3301      	adds	r3, #1
 8015734:	4a2a      	ldr	r2, [pc, #168]	; (80157e0 <_convertString2Float+0x114>)
 8015736:	4413      	add	r3, r2
 8015738:	781b      	ldrb	r3, [r3, #0]
 801573a:	f003 0304 	and.w	r3, r3, #4
 801573e:	2b00      	cmp	r3, #0
 8015740:	d1d8      	bne.n	80156f4 <_convertString2Float+0x28>
	}
	if (*str == '-') value = -value;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	781b      	ldrb	r3, [r3, #0]
 8015746:	2b2d      	cmp	r3, #45	; 0x2d
 8015748:	d105      	bne.n	8015756 <_convertString2Float+0x8a>
 801574a:	693c      	ldr	r4, [r7, #16]
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8015752:	e9c7 4504 	strd	r4, r5, [r7, #16]

	if (*p == '.') {
 8015756:	69fb      	ldr	r3, [r7, #28]
 8015758:	781b      	ldrb	r3, [r3, #0]
 801575a:	2b2e      	cmp	r3, #46	; 0x2e
 801575c:	d133      	bne.n	80157c6 <_convertString2Float+0xfa>
		p++;
 801575e:	69fb      	ldr	r3, [r7, #28]
 8015760:	3301      	adds	r3, #1
 8015762:	61fb      	str	r3, [r7, #28]
		unit = 10;
 8015764:	f04f 0200 	mov.w	r2, #0
 8015768:	4b1c      	ldr	r3, [pc, #112]	; (80157dc <_convertString2Float+0x110>)
 801576a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 801576e:	e020      	b.n	80157b2 <_convertString2Float+0xe6>
			value += DIGIT_TO_VAL(*p++) / unit;
 8015770:	69fb      	ldr	r3, [r7, #28]
 8015772:	1c5a      	adds	r2, r3, #1
 8015774:	61fa      	str	r2, [r7, #28]
 8015776:	781b      	ldrb	r3, [r3, #0]
 8015778:	3b30      	subs	r3, #48	; 0x30
 801577a:	4618      	mov	r0, r3
 801577c:	f7ea fe90 	bl	80004a0 <__aeabi_i2d>
 8015780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015784:	f7eb f820 	bl	80007c8 <__aeabi_ddiv>
 8015788:	4602      	mov	r2, r0
 801578a:	460b      	mov	r3, r1
 801578c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015790:	f7ea fd3a 	bl	8000208 <__adddf3>
 8015794:	4602      	mov	r2, r0
 8015796:	460b      	mov	r3, r1
 8015798:	e9c7 2304 	strd	r2, r3, [r7, #16]
			unit *= 10;
 801579c:	f04f 0200 	mov.w	r2, #0
 80157a0:	4b0e      	ldr	r3, [pc, #56]	; (80157dc <_convertString2Float+0x110>)
 80157a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80157a6:	f7ea fee5 	bl	8000574 <__aeabi_dmul>
 80157aa:	4602      	mov	r2, r0
 80157ac:	460b      	mov	r3, r1
 80157ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 80157b2:	69fb      	ldr	r3, [r7, #28]
 80157b4:	781b      	ldrb	r3, [r3, #0]
 80157b6:	3301      	adds	r3, #1
 80157b8:	4a09      	ldr	r2, [pc, #36]	; (80157e0 <_convertString2Float+0x114>)
 80157ba:	4413      	add	r3, r2
 80157bc:	781b      	ldrb	r3, [r3, #0]
 80157be:	f003 0304 	and.w	r3, r3, #4
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d1d4      	bne.n	8015770 <_convertString2Float+0xa4>
		}
	}
	return value;
 80157c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80157ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80157ce:	eeb0 0a47 	vmov.f32	s0, s14
 80157d2:	eef0 0a67 	vmov.f32	s1, s15
 80157d6:	3720      	adds	r7, #32
 80157d8:	46bd      	mov	sp, r7
 80157da:	bdb0      	pop	{r4, r5, r7, pc}
 80157dc:	40240000 	.word	0x40240000
 80157e0:	08029608 	.word	0x08029608

080157e4 <_convertString2Interger>:

static int _convertString2Interger(char* str)
{
 80157e4:	b480      	push	{r7}
 80157e6:	b085      	sub	sp, #20
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
	char* p;
	int value = 0.0;
 80157ec:	2300      	movs	r3, #0
 80157ee:	60bb      	str	r3, [r7, #8]

	p = str;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	60fb      	str	r3, [r7, #12]
	if (*p == '-') p++;
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	781b      	ldrb	r3, [r3, #0]
 80157f8:	2b2d      	cmp	r3, #45	; 0x2d
 80157fa:	d111      	bne.n	8015820 <_convertString2Interger+0x3c>
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	3301      	adds	r3, #1
 8015800:	60fb      	str	r3, [r7, #12]
	while (isdigit((int)*p)) {
 8015802:	e00d      	b.n	8015820 <_convertString2Interger+0x3c>
		value *= 10;
 8015804:	68ba      	ldr	r2, [r7, #8]
 8015806:	4613      	mov	r3, r2
 8015808:	009b      	lsls	r3, r3, #2
 801580a:	4413      	add	r3, r2
 801580c:	005b      	lsls	r3, r3, #1
 801580e:	60bb      	str	r3, [r7, #8]
		value += DIGIT_TO_VAL(*p++);
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	1c5a      	adds	r2, r3, #1
 8015814:	60fa      	str	r2, [r7, #12]
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	3b30      	subs	r3, #48	; 0x30
 801581a:	68ba      	ldr	r2, [r7, #8]
 801581c:	4413      	add	r3, r2
 801581e:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)*p)) {
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	781b      	ldrb	r3, [r3, #0]
 8015824:	3301      	adds	r3, #1
 8015826:	4a0a      	ldr	r2, [pc, #40]	; (8015850 <_convertString2Interger+0x6c>)
 8015828:	4413      	add	r3, r2
 801582a:	781b      	ldrb	r3, [r3, #0]
 801582c:	f003 0304 	and.w	r3, r3, #4
 8015830:	2b00      	cmp	r3, #0
 8015832:	d1e7      	bne.n	8015804 <_convertString2Interger+0x20>
	}
	if (*str == '-') value = -value;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	781b      	ldrb	r3, [r3, #0]
 8015838:	2b2d      	cmp	r3, #45	; 0x2d
 801583a:	d102      	bne.n	8015842 <_convertString2Interger+0x5e>
 801583c:	68bb      	ldr	r3, [r7, #8]
 801583e:	425b      	negs	r3, r3
 8015840:	60bb      	str	r3, [r7, #8]
	return value;
 8015842:	68bb      	ldr	r3, [r7, #8]
}
 8015844:	4618      	mov	r0, r3
 8015846:	3714      	adds	r7, #20
 8015848:	46bd      	mov	sp, r7
 801584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584e:	4770      	bx	lr
 8015850:	08029608 	.word	0x08029608
 8015854:	00000000 	.word	0x00000000

08015858 <_convertString2Degrees>:
 * with 10e7 it's around 1 cm now. Increasing it further is irrelevant, since even 1cm resolution is unrealistic, however increased
 * resolution also increased precision of nav calculations
*/

static double _convertString2Degrees(char* s)
{
 8015858:	b5b0      	push	{r4, r5, r7, lr}
 801585a:	b088      	sub	sp, #32
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
	char* p;
	char* q;
	uint8_t deg = 0, min = 0;
 8015860:	2300      	movs	r3, #0
 8015862:	75fb      	strb	r3, [r7, #23]
 8015864:	2300      	movs	r3, #0
 8015866:	75bb      	strb	r3, [r7, #22]
	unsigned int frac_min = 0;
 8015868:	2300      	movs	r3, #0
 801586a:	613b      	str	r3, [r7, #16]
	uint8_t i;

	// scan for decimal point or end of field
	for (p = s; isdigit((int)*p); p++);
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	61fb      	str	r3, [r7, #28]
 8015870:	e002      	b.n	8015878 <_convertString2Degrees+0x20>
 8015872:	69fb      	ldr	r3, [r7, #28]
 8015874:	3301      	adds	r3, #1
 8015876:	61fb      	str	r3, [r7, #28]
 8015878:	69fb      	ldr	r3, [r7, #28]
 801587a:	781b      	ldrb	r3, [r3, #0]
 801587c:	3301      	adds	r3, #1
 801587e:	4a46      	ldr	r2, [pc, #280]	; (8015998 <_convertString2Degrees+0x140>)
 8015880:	4413      	add	r3, r2
 8015882:	781b      	ldrb	r3, [r3, #0]
 8015884:	f003 0304 	and.w	r3, r3, #4
 8015888:	2b00      	cmp	r3, #0
 801588a:	d1f2      	bne.n	8015872 <_convertString2Degrees+0x1a>
	q = s;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	61bb      	str	r3, [r7, #24]

	// convert degrees
	while ((p - q) > 2) {
 8015890:	e011      	b.n	80158b6 <_convertString2Degrees+0x5e>
		if (deg) deg *= 10;
 8015892:	7dfb      	ldrb	r3, [r7, #23]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d005      	beq.n	80158a4 <_convertString2Degrees+0x4c>
 8015898:	7dfb      	ldrb	r3, [r7, #23]
 801589a:	461a      	mov	r2, r3
 801589c:	0092      	lsls	r2, r2, #2
 801589e:	4413      	add	r3, r2
 80158a0:	005b      	lsls	r3, r3, #1
 80158a2:	75fb      	strb	r3, [r7, #23]
		deg += DIGIT_TO_VAL(*q++);
 80158a4:	69bb      	ldr	r3, [r7, #24]
 80158a6:	1c5a      	adds	r2, r3, #1
 80158a8:	61ba      	str	r2, [r7, #24]
 80158aa:	781b      	ldrb	r3, [r3, #0]
 80158ac:	3b30      	subs	r3, #48	; 0x30
 80158ae:	b2da      	uxtb	r2, r3
 80158b0:	7dfb      	ldrb	r3, [r7, #23]
 80158b2:	4413      	add	r3, r2
 80158b4:	75fb      	strb	r3, [r7, #23]
	while ((p - q) > 2) {
 80158b6:	69fa      	ldr	r2, [r7, #28]
 80158b8:	69bb      	ldr	r3, [r7, #24]
 80158ba:	1ad3      	subs	r3, r2, r3
 80158bc:	2b02      	cmp	r3, #2
 80158be:	dce8      	bgt.n	8015892 <_convertString2Degrees+0x3a>
	}
	// convert minutes
	while (p > q) {
 80158c0:	e011      	b.n	80158e6 <_convertString2Degrees+0x8e>
		if (min) min *= 10;
 80158c2:	7dbb      	ldrb	r3, [r7, #22]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d005      	beq.n	80158d4 <_convertString2Degrees+0x7c>
 80158c8:	7dbb      	ldrb	r3, [r7, #22]
 80158ca:	461a      	mov	r2, r3
 80158cc:	0092      	lsls	r2, r2, #2
 80158ce:	4413      	add	r3, r2
 80158d0:	005b      	lsls	r3, r3, #1
 80158d2:	75bb      	strb	r3, [r7, #22]
		min += DIGIT_TO_VAL(*q++);
 80158d4:	69bb      	ldr	r3, [r7, #24]
 80158d6:	1c5a      	adds	r2, r3, #1
 80158d8:	61ba      	str	r2, [r7, #24]
 80158da:	781b      	ldrb	r3, [r3, #0]
 80158dc:	3b30      	subs	r3, #48	; 0x30
 80158de:	b2da      	uxtb	r2, r3
 80158e0:	7dbb      	ldrb	r3, [r7, #22]
 80158e2:	4413      	add	r3, r2
 80158e4:	75bb      	strb	r3, [r7, #22]
	while (p > q) {
 80158e6:	69fa      	ldr	r2, [r7, #28]
 80158e8:	69bb      	ldr	r3, [r7, #24]
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d8e9      	bhi.n	80158c2 <_convertString2Degrees+0x6a>
	}
	// convert fractional minutes
	// expect up to four digits, result is in
	// ten-thousandths of a minute
	if (*p == '.') {
 80158ee:	69fb      	ldr	r3, [r7, #28]
 80158f0:	781b      	ldrb	r3, [r3, #0]
 80158f2:	2b2e      	cmp	r3, #46	; 0x2e
 80158f4:	d124      	bne.n	8015940 <_convertString2Degrees+0xe8>
		q = p + 1;
 80158f6:	69fb      	ldr	r3, [r7, #28]
 80158f8:	3301      	adds	r3, #1
 80158fa:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < 4; i++) {
 80158fc:	2300      	movs	r3, #0
 80158fe:	73fb      	strb	r3, [r7, #15]
 8015900:	e01b      	b.n	801593a <_convertString2Degrees+0xe2>
			frac_min *= 10;
 8015902:	693a      	ldr	r2, [r7, #16]
 8015904:	4613      	mov	r3, r2
 8015906:	009b      	lsls	r3, r3, #2
 8015908:	4413      	add	r3, r2
 801590a:	005b      	lsls	r3, r3, #1
 801590c:	613b      	str	r3, [r7, #16]
			if (isdigit((int)*q)) frac_min += *q++ - '0';
 801590e:	69bb      	ldr	r3, [r7, #24]
 8015910:	781b      	ldrb	r3, [r3, #0]
 8015912:	3301      	adds	r3, #1
 8015914:	4a20      	ldr	r2, [pc, #128]	; (8015998 <_convertString2Degrees+0x140>)
 8015916:	4413      	add	r3, r2
 8015918:	781b      	ldrb	r3, [r3, #0]
 801591a:	f003 0304 	and.w	r3, r3, #4
 801591e:	2b00      	cmp	r3, #0
 8015920:	d008      	beq.n	8015934 <_convertString2Degrees+0xdc>
 8015922:	69bb      	ldr	r3, [r7, #24]
 8015924:	1c5a      	adds	r2, r3, #1
 8015926:	61ba      	str	r2, [r7, #24]
 8015928:	781b      	ldrb	r3, [r3, #0]
 801592a:	3b30      	subs	r3, #48	; 0x30
 801592c:	461a      	mov	r2, r3
 801592e:	693b      	ldr	r3, [r7, #16]
 8015930:	4413      	add	r3, r2
 8015932:	613b      	str	r3, [r7, #16]
		for (i = 0; i < 4; i++) {
 8015934:	7bfb      	ldrb	r3, [r7, #15]
 8015936:	3301      	adds	r3, #1
 8015938:	73fb      	strb	r3, [r7, #15]
 801593a:	7bfb      	ldrb	r3, [r7, #15]
 801593c:	2b03      	cmp	r3, #3
 801593e:	d9e0      	bls.n	8015902 <_convertString2Degrees+0xaa>
		}
	}
	return deg + (min * 10000UL + frac_min) / 600000.0;
 8015940:	7dfb      	ldrb	r3, [r7, #23]
 8015942:	4618      	mov	r0, r3
 8015944:	f7ea fdac 	bl	80004a0 <__aeabi_i2d>
 8015948:	4604      	mov	r4, r0
 801594a:	460d      	mov	r5, r1
 801594c:	7dbb      	ldrb	r3, [r7, #22]
 801594e:	f242 7210 	movw	r2, #10000	; 0x2710
 8015952:	fb03 f202 	mul.w	r2, r3, r2
 8015956:	693b      	ldr	r3, [r7, #16]
 8015958:	4413      	add	r3, r2
 801595a:	4618      	mov	r0, r3
 801595c:	f7ea fd90 	bl	8000480 <__aeabi_ui2d>
 8015960:	a30b      	add	r3, pc, #44	; (adr r3, 8015990 <_convertString2Degrees+0x138>)
 8015962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015966:	f7ea ff2f 	bl	80007c8 <__aeabi_ddiv>
 801596a:	4602      	mov	r2, r0
 801596c:	460b      	mov	r3, r1
 801596e:	4620      	mov	r0, r4
 8015970:	4629      	mov	r1, r5
 8015972:	f7ea fc49 	bl	8000208 <__adddf3>
 8015976:	4602      	mov	r2, r0
 8015978:	460b      	mov	r3, r1
 801597a:	ec43 2b17 	vmov	d7, r2, r3
}
 801597e:	eeb0 0a47 	vmov.f32	s0, s14
 8015982:	eef0 0a67 	vmov.f32	s1, s15
 8015986:	3720      	adds	r7, #32
 8015988:	46bd      	mov	sp, r7
 801598a:	bdb0      	pop	{r4, r5, r7, pc}
 801598c:	f3af 8000 	nop.w
 8015990:	00000000 	.word	0x00000000
 8015994:	41224f80 	.word	0x41224f80
 8015998:	08029608 	.word	0x08029608

0801599c <_convertAscii2Hex>:

static uint8_t _convertAscii2Hex(char n)    // convert '0'..'9','A'..'F' to 0..15
{
 801599c:	b480      	push	{r7}
 801599e:	b083      	sub	sp, #12
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	4603      	mov	r3, r0
 80159a4:	71fb      	strb	r3, [r7, #7]
	n -= '0';
 80159a6:	79fb      	ldrb	r3, [r7, #7]
 80159a8:	3b30      	subs	r3, #48	; 0x30
 80159aa:	71fb      	strb	r3, [r7, #7]
	if (n > 9) n -= 7;
 80159ac:	79fb      	ldrb	r3, [r7, #7]
 80159ae:	2b09      	cmp	r3, #9
 80159b0:	d902      	bls.n	80159b8 <_convertAscii2Hex+0x1c>
 80159b2:	79fb      	ldrb	r3, [r7, #7]
 80159b4:	3b07      	subs	r3, #7
 80159b6:	71fb      	strb	r3, [r7, #7]
	n &= 0x0F;
 80159b8:	79fb      	ldrb	r3, [r7, #7]
 80159ba:	f003 030f 	and.w	r3, r3, #15
 80159be:	71fb      	strb	r3, [r7, #7]
	return n;
 80159c0:	79fb      	ldrb	r3, [r7, #7]
}
 80159c2:	4618      	mov	r0, r3
 80159c4:	370c      	adds	r7, #12
 80159c6:	46bd      	mov	sp, r7
 80159c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159cc:	4770      	bx	lr

080159ce <_evtTimerFinish>:

static void _evtTimerFinish(PifIssuerP p_issuer)
{
 80159ce:	b580      	push	{r7, lr}
 80159d0:	b084      	sub	sp, #16
 80159d2:	af00      	add	r7, sp, #0
 80159d4:	6078      	str	r0, [r7, #4]
    PifGps* p_owner = (PifGps*)p_issuer;
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	60fb      	str	r3, [r7, #12]

	p_owner->_connect = FALSE;
 80159da:	68fa      	ldr	r2, [r7, #12]
 80159dc:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 80159e0:	f36f 0341 	bfc	r3, #1, #1
 80159e4:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_fix = FALSE;
 80159e8:	68fa      	ldr	r2, [r7, #12]
 80159ea:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 80159ee:	f36f 0300 	bfc	r3, #0, #1
 80159f2:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_num_sat = 0;
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	2200      	movs	r2, #0
 80159fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if (p_owner->__evt_timeout) (*p_owner->__evt_timeout)(p_owner);
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d003      	beq.n	8015a0e <_evtTimerFinish+0x40>
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015a0a:	68f8      	ldr	r0, [r7, #12]
 8015a0c:	4798      	blx	r3
}
 8015a0e:	bf00      	nop
 8015a10:	3710      	adds	r7, #16
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}
	...

08015a18 <pifGps_Init>:

BOOL pifGps_Init(PifGps* p_owner, PifId id)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b082      	sub	sp, #8
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	460b      	mov	r3, r1
 8015a22:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d104      	bne.n	8015a34 <pifGps_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8015a2a:	4b0e      	ldr	r3, [pc, #56]	; (8015a64 <pifGps_Init+0x4c>)
 8015a2c:	2201      	movs	r2, #1
 8015a2e:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8015a30:	2300      	movs	r3, #0
 8015a32:	e012      	b.n	8015a5a <pifGps_Init+0x42>
	}

    memset(p_owner, 0, sizeof(PifGps));
 8015a34:	2268      	movs	r2, #104	; 0x68
 8015a36:	2100      	movs	r1, #0
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	f00d fc27 	bl	802328c <memset>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8015a3e:	887b      	ldrh	r3, [r7, #2]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d106      	bne.n	8015a52 <pifGps_Init+0x3a>
 8015a44:	4b08      	ldr	r3, [pc, #32]	; (8015a68 <pifGps_Init+0x50>)
 8015a46:	881b      	ldrh	r3, [r3, #0]
 8015a48:	1c5a      	adds	r2, r3, #1
 8015a4a:	b291      	uxth	r1, r2
 8015a4c:	4a06      	ldr	r2, [pc, #24]	; (8015a68 <pifGps_Init+0x50>)
 8015a4e:	8011      	strh	r1, [r2, #0]
 8015a50:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	887a      	ldrh	r2, [r7, #2]
 8015a56:	819a      	strh	r2, [r3, #12]
	return TRUE;
 8015a58:	2301      	movs	r3, #1
}
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	3708      	adds	r7, #8
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	bd80      	pop	{r7, pc}
 8015a62:	bf00      	nop
 8015a64:	20001ef0 	.word	0x20001ef0
 8015a68:	2000005c 	.word	0x2000005c

08015a6c <pifGps_Clear>:

void pifGps_Clear(PifGps* p_owner)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b082      	sub	sp, #8
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
	if (p_owner->__p_txt) {
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d007      	beq.n	8015a8c <pifGps_Clear+0x20>
		free(p_owner->__p_txt);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a80:	4618      	mov	r0, r3
 8015a82:	f00d fbed 	bl	8023260 <free>
		p_owner->__p_txt = NULL;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2200      	movs	r2, #0
 8015a8a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	p_owner->__evt_text = NULL;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	2200      	movs	r2, #0
 8015a90:	661a      	str	r2, [r3, #96]	; 0x60
}
 8015a92:	bf00      	nop
 8015a94:	3708      	adds	r7, #8
 8015a96:	46bd      	mov	sp, r7
 8015a98:	bd80      	pop	{r7, pc}
	...

08015a9c <pifGps_SetTimeout>:

BOOL pifGps_SetTimeout(PifGps* p_owner, PifTimerManager* p_timer_manager, uint32_t timeout, PifEvtGpsTimeout evt_timeout)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b084      	sub	sp, #16
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	60f8      	str	r0, [r7, #12]
 8015aa4:	60b9      	str	r1, [r7, #8]
 8015aa6:	607a      	str	r2, [r7, #4]
 8015aa8:	603b      	str	r3, [r7, #0]
	if (timeout > 0) {
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d025      	beq.n	8015afc <pifGps_SetTimeout+0x60>
		if (!p_owner->__p_timer) {
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d116      	bne.n	8015ae6 <pifGps_SetTimeout+0x4a>
			p_owner->__p_timer = pifTimerManager_Add(p_timer_manager, TT_ONCE);
 8015ab8:	2100      	movs	r1, #0
 8015aba:	68b8      	ldr	r0, [r7, #8]
 8015abc:	f7ff f9b2 	bl	8014e24 <pifTimerManager_Add>
 8015ac0:	4602      	mov	r2, r0
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	655a      	str	r2, [r3, #84]	; 0x54
			if (!p_owner->__p_timer) return FALSE;
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d101      	bne.n	8015ad2 <pifGps_SetTimeout+0x36>
 8015ace:	2300      	movs	r3, #0
 8015ad0:	e01e      	b.n	8015b10 <pifGps_SetTimeout+0x74>
			pifTimer_AttachEvtFinish(p_owner->__p_timer, _evtTimerFinish, p_owner);
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ad6:	68fa      	ldr	r2, [r7, #12]
 8015ad8:	490f      	ldr	r1, [pc, #60]	; (8015b18 <pifGps_SetTimeout+0x7c>)
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7ff facf 	bl	801507e <pifTimer_AttachEvtFinish>
		    p_owner->__evt_timeout = evt_timeout;
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	683a      	ldr	r2, [r7, #0]
 8015ae4:	65da      	str	r2, [r3, #92]	; 0x5c
		}
	    if (!pifTimer_Start(p_owner->__p_timer, timeout)) return FALSE;
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015aea:	6879      	ldr	r1, [r7, #4]
 8015aec:	4618      	mov	r0, r3
 8015aee:	f7ff f9d1 	bl	8014e94 <pifTimer_Start>
 8015af2:	4603      	mov	r3, r0
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d10a      	bne.n	8015b0e <pifGps_SetTimeout+0x72>
 8015af8:	2300      	movs	r3, #0
 8015afa:	e009      	b.n	8015b10 <pifGps_SetTimeout+0x74>
	}
	else {
		if (p_owner->__p_timer) pifTimer_Stop(p_owner->__p_timer);
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d004      	beq.n	8015b0e <pifGps_SetTimeout+0x72>
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f7ff f9f1 	bl	8014ef0 <pifTimer_Stop>
	}
    return TRUE;
 8015b0e:	2301      	movs	r3, #1
}
 8015b10:	4618      	mov	r0, r3
 8015b12:	3710      	adds	r7, #16
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}
 8015b18:	080159cf 	.word	0x080159cf

08015b1c <pifGps_SendEvent>:

void pifGps_SendEvent(PifGps* p_owner)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
	p_owner->_connect = TRUE;
 8015b24:	687a      	ldr	r2, [r7, #4]
 8015b26:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015b2a:	f043 0302 	orr.w	r3, r3, #2
 8015b2e:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
	if (p_owner->evt_receive) (*p_owner->evt_receive)(p_owner);
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	685b      	ldr	r3, [r3, #4]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d003      	beq.n	8015b42 <pifGps_SendEvent+0x26>
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	685b      	ldr	r3, [r3, #4]
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	4798      	blx	r3
	if (p_owner->__p_timer) pifTimer_Reset(p_owner->__p_timer);
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d004      	beq.n	8015b54 <pifGps_SendEvent+0x38>
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f7ff f9e4 	bl	8014f1c <pifTimer_Reset>
}
 8015b54:	bf00      	nop
 8015b56:	3708      	adds	r7, #8
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	bd80      	pop	{r7, pc}
 8015b5c:	0000      	movs	r0, r0
	...

08015b60 <pifGps_ParsingNmea>:
	p_owner->__evt_text = evt_text;
	return TRUE;
}

BOOL pifGps_ParsingNmea(PifGps* p_owner, uint8_t c)
{
 8015b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015b64:	b090      	sub	sp, #64	; 0x40
 8015b66:	af02      	add	r7, sp, #8
 8015b68:	62f8      	str	r0, [r7, #44]	; 0x2c
 8015b6a:	460b      	mov	r3, r1
 8015b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	BOOL rtn = FALSE;
 8015b70:	2300      	movs	r3, #0
 8015b72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t frame_ok = 0;
 8015b76:	2300      	movs	r3, #0
 8015b78:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	static uint8_t param = 0, offset = 0, parity = 0;
	static char string[PIF_GPS_NMEA_VALUE_SIZE];
	static uint8_t checksum_param = 0;
	static uint16_t msg_id = PIF_GPS_NMEA_MSG_ID_NONE;

	if (c == '$') {
 8015b7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015b80:	2b24      	cmp	r3, #36	; 0x24
 8015b82:	d11a      	bne.n	8015bba <pifGps_ParsingNmea+0x5a>
		param = 0;
 8015b84:	4b80      	ldr	r3, [pc, #512]	; (8015d88 <pifGps_ParsingNmea+0x228>)
 8015b86:	2200      	movs	r2, #0
 8015b88:	701a      	strb	r2, [r3, #0]
		offset = 0;
 8015b8a:	4b80      	ldr	r3, [pc, #512]	; (8015d8c <pifGps_ParsingNmea+0x22c>)
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	701a      	strb	r2, [r3, #0]
		parity = 0;
 8015b90:	4b7f      	ldr	r3, [pc, #508]	; (8015d90 <pifGps_ParsingNmea+0x230>)
 8015b92:	2200      	movs	r2, #0
 8015b94:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8015b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b98:	689b      	ldr	r3, [r3, #8]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d00a      	beq.n	8015bb4 <pifGps_ParsingNmea+0x54>
			string[0] = c;
 8015b9e:	4a7d      	ldr	r2, [pc, #500]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015ba0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015ba4:	7013      	strb	r3, [r2, #0]
			string[1] = 0;
 8015ba6:	4b7b      	ldr	r3, [pc, #492]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015ba8:	2200      	movs	r2, #0
 8015baa:	705a      	strb	r2, [r3, #1]
			(p_owner->evt_frame)(string);
 8015bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bae:	689b      	ldr	r3, [r3, #8]
 8015bb0:	4878      	ldr	r0, [pc, #480]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015bb2:	4798      	blx	r3
		}
		return TRUE;
 8015bb4:	2301      	movs	r3, #1
 8015bb6:	f000 bc8f 	b.w	80164d8 <pifGps_ParsingNmea+0x978>
	}
	else if (c == ',' || c == '*') {
 8015bba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015bbe:	2b2c      	cmp	r3, #44	; 0x2c
 8015bc0:	d004      	beq.n	8015bcc <pifGps_ParsingNmea+0x6c>
 8015bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8015bc8:	f040 83e2 	bne.w	8016390 <pifGps_ParsingNmea+0x830>
		string[offset] = 0;
 8015bcc:	4b6f      	ldr	r3, [pc, #444]	; (8015d8c <pifGps_ParsingNmea+0x22c>)
 8015bce:	781b      	ldrb	r3, [r3, #0]
 8015bd0:	4619      	mov	r1, r3
 8015bd2:	4a70      	ldr	r2, [pc, #448]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	5453      	strb	r3, [r2, r1]
		if (param == 0) { //frame identification
 8015bd8:	4b6b      	ldr	r3, [pc, #428]	; (8015d88 <pifGps_ParsingNmea+0x228>)
 8015bda:	781b      	ldrb	r3, [r3, #0]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	f040 8100 	bne.w	8015de2 <pifGps_ParsingNmea+0x282>
			msg_id = PIF_GPS_NMEA_MSG_ID_NONE;
 8015be2:	4b6d      	ldr	r3, [pc, #436]	; (8015d98 <pifGps_ParsingNmea+0x238>)
 8015be4:	2200      	movs	r2, #0
 8015be6:	801a      	strh	r2, [r3, #0]
			if (string[2] == 'D' && string[3] == 'T' && string[4] == 'M') msg_id = PIF_GPS_NMEA_MSG_ID_DTM;
 8015be8:	4b6a      	ldr	r3, [pc, #424]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015bea:	789b      	ldrb	r3, [r3, #2]
 8015bec:	2b44      	cmp	r3, #68	; 0x44
 8015bee:	d10b      	bne.n	8015c08 <pifGps_ParsingNmea+0xa8>
 8015bf0:	4b68      	ldr	r3, [pc, #416]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015bf2:	78db      	ldrb	r3, [r3, #3]
 8015bf4:	2b54      	cmp	r3, #84	; 0x54
 8015bf6:	d107      	bne.n	8015c08 <pifGps_ParsingNmea+0xa8>
 8015bf8:	4b66      	ldr	r3, [pc, #408]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015bfa:	791b      	ldrb	r3, [r3, #4]
 8015bfc:	2b4d      	cmp	r3, #77	; 0x4d
 8015bfe:	d103      	bne.n	8015c08 <pifGps_ParsingNmea+0xa8>
 8015c00:	4b65      	ldr	r3, [pc, #404]	; (8015d98 <pifGps_ParsingNmea+0x238>)
 8015c02:	2201      	movs	r2, #1
 8015c04:	801a      	strh	r2, [r3, #0]
 8015c06:	e38c      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'B' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GBS;
 8015c08:	4b62      	ldr	r3, [pc, #392]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c0a:	789b      	ldrb	r3, [r3, #2]
 8015c0c:	2b47      	cmp	r3, #71	; 0x47
 8015c0e:	d10b      	bne.n	8015c28 <pifGps_ParsingNmea+0xc8>
 8015c10:	4b60      	ldr	r3, [pc, #384]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c12:	78db      	ldrb	r3, [r3, #3]
 8015c14:	2b42      	cmp	r3, #66	; 0x42
 8015c16:	d107      	bne.n	8015c28 <pifGps_ParsingNmea+0xc8>
 8015c18:	4b5e      	ldr	r3, [pc, #376]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c1a:	791b      	ldrb	r3, [r3, #4]
 8015c1c:	2b53      	cmp	r3, #83	; 0x53
 8015c1e:	d103      	bne.n	8015c28 <pifGps_ParsingNmea+0xc8>
 8015c20:	4b5d      	ldr	r3, [pc, #372]	; (8015d98 <pifGps_ParsingNmea+0x238>)
 8015c22:	2202      	movs	r2, #2
 8015c24:	801a      	strh	r2, [r3, #0]
 8015c26:	e37c      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'G' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8015c28:	4b5a      	ldr	r3, [pc, #360]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c2a:	789b      	ldrb	r3, [r3, #2]
 8015c2c:	2b47      	cmp	r3, #71	; 0x47
 8015c2e:	d10b      	bne.n	8015c48 <pifGps_ParsingNmea+0xe8>
 8015c30:	4b58      	ldr	r3, [pc, #352]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c32:	78db      	ldrb	r3, [r3, #3]
 8015c34:	2b47      	cmp	r3, #71	; 0x47
 8015c36:	d107      	bne.n	8015c48 <pifGps_ParsingNmea+0xe8>
 8015c38:	4b56      	ldr	r3, [pc, #344]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c3a:	791b      	ldrb	r3, [r3, #4]
 8015c3c:	2b41      	cmp	r3, #65	; 0x41
 8015c3e:	d103      	bne.n	8015c48 <pifGps_ParsingNmea+0xe8>
 8015c40:	4b55      	ldr	r3, [pc, #340]	; (8015d98 <pifGps_ParsingNmea+0x238>)
 8015c42:	2203      	movs	r2, #3
 8015c44:	801a      	strh	r2, [r3, #0]
 8015c46:	e36c      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'L' && string[4] == 'L') msg_id = PIF_GPS_NMEA_MSG_ID_GLL;
 8015c48:	4b52      	ldr	r3, [pc, #328]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c4a:	789b      	ldrb	r3, [r3, #2]
 8015c4c:	2b47      	cmp	r3, #71	; 0x47
 8015c4e:	d10b      	bne.n	8015c68 <pifGps_ParsingNmea+0x108>
 8015c50:	4b50      	ldr	r3, [pc, #320]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c52:	78db      	ldrb	r3, [r3, #3]
 8015c54:	2b4c      	cmp	r3, #76	; 0x4c
 8015c56:	d107      	bne.n	8015c68 <pifGps_ParsingNmea+0x108>
 8015c58:	4b4e      	ldr	r3, [pc, #312]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c5a:	791b      	ldrb	r3, [r3, #4]
 8015c5c:	2b4c      	cmp	r3, #76	; 0x4c
 8015c5e:	d103      	bne.n	8015c68 <pifGps_ParsingNmea+0x108>
 8015c60:	4b4d      	ldr	r3, [pc, #308]	; (8015d98 <pifGps_ParsingNmea+0x238>)
 8015c62:	2204      	movs	r2, #4
 8015c64:	801a      	strh	r2, [r3, #0]
 8015c66:	e35c      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'N' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GNS;
 8015c68:	4b4a      	ldr	r3, [pc, #296]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c6a:	789b      	ldrb	r3, [r3, #2]
 8015c6c:	2b47      	cmp	r3, #71	; 0x47
 8015c6e:	d10b      	bne.n	8015c88 <pifGps_ParsingNmea+0x128>
 8015c70:	4b48      	ldr	r3, [pc, #288]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c72:	78db      	ldrb	r3, [r3, #3]
 8015c74:	2b4e      	cmp	r3, #78	; 0x4e
 8015c76:	d107      	bne.n	8015c88 <pifGps_ParsingNmea+0x128>
 8015c78:	4b46      	ldr	r3, [pc, #280]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c7a:	791b      	ldrb	r3, [r3, #4]
 8015c7c:	2b53      	cmp	r3, #83	; 0x53
 8015c7e:	d103      	bne.n	8015c88 <pifGps_ParsingNmea+0x128>
 8015c80:	4b45      	ldr	r3, [pc, #276]	; (8015d98 <pifGps_ParsingNmea+0x238>)
 8015c82:	2205      	movs	r2, #5
 8015c84:	801a      	strh	r2, [r3, #0]
 8015c86:	e34c      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'R' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GRS;
 8015c88:	4b42      	ldr	r3, [pc, #264]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c8a:	789b      	ldrb	r3, [r3, #2]
 8015c8c:	2b47      	cmp	r3, #71	; 0x47
 8015c8e:	d10b      	bne.n	8015ca8 <pifGps_ParsingNmea+0x148>
 8015c90:	4b40      	ldr	r3, [pc, #256]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c92:	78db      	ldrb	r3, [r3, #3]
 8015c94:	2b52      	cmp	r3, #82	; 0x52
 8015c96:	d107      	bne.n	8015ca8 <pifGps_ParsingNmea+0x148>
 8015c98:	4b3e      	ldr	r3, [pc, #248]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015c9a:	791b      	ldrb	r3, [r3, #4]
 8015c9c:	2b53      	cmp	r3, #83	; 0x53
 8015c9e:	d103      	bne.n	8015ca8 <pifGps_ParsingNmea+0x148>
 8015ca0:	4b3d      	ldr	r3, [pc, #244]	; (8015d98 <pifGps_ParsingNmea+0x238>)
 8015ca2:	2206      	movs	r2, #6
 8015ca4:	801a      	strh	r2, [r3, #0]
 8015ca6:	e33c      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GSA;
 8015ca8:	4b3a      	ldr	r3, [pc, #232]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015caa:	789b      	ldrb	r3, [r3, #2]
 8015cac:	2b47      	cmp	r3, #71	; 0x47
 8015cae:	d10b      	bne.n	8015cc8 <pifGps_ParsingNmea+0x168>
 8015cb0:	4b38      	ldr	r3, [pc, #224]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015cb2:	78db      	ldrb	r3, [r3, #3]
 8015cb4:	2b53      	cmp	r3, #83	; 0x53
 8015cb6:	d107      	bne.n	8015cc8 <pifGps_ParsingNmea+0x168>
 8015cb8:	4b36      	ldr	r3, [pc, #216]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015cba:	791b      	ldrb	r3, [r3, #4]
 8015cbc:	2b41      	cmp	r3, #65	; 0x41
 8015cbe:	d103      	bne.n	8015cc8 <pifGps_ParsingNmea+0x168>
 8015cc0:	4b35      	ldr	r3, [pc, #212]	; (8015d98 <pifGps_ParsingNmea+0x238>)
 8015cc2:	2207      	movs	r2, #7
 8015cc4:	801a      	strh	r2, [r3, #0]
 8015cc6:	e32c      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_GST;
 8015cc8:	4b32      	ldr	r3, [pc, #200]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015cca:	789b      	ldrb	r3, [r3, #2]
 8015ccc:	2b47      	cmp	r3, #71	; 0x47
 8015cce:	d10b      	bne.n	8015ce8 <pifGps_ParsingNmea+0x188>
 8015cd0:	4b30      	ldr	r3, [pc, #192]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015cd2:	78db      	ldrb	r3, [r3, #3]
 8015cd4:	2b53      	cmp	r3, #83	; 0x53
 8015cd6:	d107      	bne.n	8015ce8 <pifGps_ParsingNmea+0x188>
 8015cd8:	4b2e      	ldr	r3, [pc, #184]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015cda:	791b      	ldrb	r3, [r3, #4]
 8015cdc:	2b54      	cmp	r3, #84	; 0x54
 8015cde:	d103      	bne.n	8015ce8 <pifGps_ParsingNmea+0x188>
 8015ce0:	4b2d      	ldr	r3, [pc, #180]	; (8015d98 <pifGps_ParsingNmea+0x238>)
 8015ce2:	2208      	movs	r2, #8
 8015ce4:	801a      	strh	r2, [r3, #0]
 8015ce6:	e31c      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'V') msg_id = PIF_GPS_NMEA_MSG_ID_GSV;
 8015ce8:	4b2a      	ldr	r3, [pc, #168]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015cea:	789b      	ldrb	r3, [r3, #2]
 8015cec:	2b47      	cmp	r3, #71	; 0x47
 8015cee:	d10b      	bne.n	8015d08 <pifGps_ParsingNmea+0x1a8>
 8015cf0:	4b28      	ldr	r3, [pc, #160]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015cf2:	78db      	ldrb	r3, [r3, #3]
 8015cf4:	2b53      	cmp	r3, #83	; 0x53
 8015cf6:	d107      	bne.n	8015d08 <pifGps_ParsingNmea+0x1a8>
 8015cf8:	4b26      	ldr	r3, [pc, #152]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015cfa:	791b      	ldrb	r3, [r3, #4]
 8015cfc:	2b56      	cmp	r3, #86	; 0x56
 8015cfe:	d103      	bne.n	8015d08 <pifGps_ParsingNmea+0x1a8>
 8015d00:	4b25      	ldr	r3, [pc, #148]	; (8015d98 <pifGps_ParsingNmea+0x238>)
 8015d02:	2209      	movs	r2, #9
 8015d04:	801a      	strh	r2, [r3, #0]
 8015d06:	e30c      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'R' && string[3] == 'M' && string[4] == 'C') msg_id = PIF_GPS_NMEA_MSG_ID_RMC;
 8015d08:	4b22      	ldr	r3, [pc, #136]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015d0a:	789b      	ldrb	r3, [r3, #2]
 8015d0c:	2b52      	cmp	r3, #82	; 0x52
 8015d0e:	d10b      	bne.n	8015d28 <pifGps_ParsingNmea+0x1c8>
 8015d10:	4b20      	ldr	r3, [pc, #128]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015d12:	78db      	ldrb	r3, [r3, #3]
 8015d14:	2b4d      	cmp	r3, #77	; 0x4d
 8015d16:	d107      	bne.n	8015d28 <pifGps_ParsingNmea+0x1c8>
 8015d18:	4b1e      	ldr	r3, [pc, #120]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015d1a:	791b      	ldrb	r3, [r3, #4]
 8015d1c:	2b43      	cmp	r3, #67	; 0x43
 8015d1e:	d103      	bne.n	8015d28 <pifGps_ParsingNmea+0x1c8>
 8015d20:	4b1d      	ldr	r3, [pc, #116]	; (8015d98 <pifGps_ParsingNmea+0x238>)
 8015d22:	220a      	movs	r2, #10
 8015d24:	801a      	strh	r2, [r3, #0]
 8015d26:	e2fc      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'T' && string[3] == 'H' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_THS;
 8015d28:	4b1a      	ldr	r3, [pc, #104]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015d2a:	789b      	ldrb	r3, [r3, #2]
 8015d2c:	2b54      	cmp	r3, #84	; 0x54
 8015d2e:	d10b      	bne.n	8015d48 <pifGps_ParsingNmea+0x1e8>
 8015d30:	4b18      	ldr	r3, [pc, #96]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015d32:	78db      	ldrb	r3, [r3, #3]
 8015d34:	2b48      	cmp	r3, #72	; 0x48
 8015d36:	d107      	bne.n	8015d48 <pifGps_ParsingNmea+0x1e8>
 8015d38:	4b16      	ldr	r3, [pc, #88]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015d3a:	791b      	ldrb	r3, [r3, #4]
 8015d3c:	2b53      	cmp	r3, #83	; 0x53
 8015d3e:	d103      	bne.n	8015d48 <pifGps_ParsingNmea+0x1e8>
 8015d40:	4b15      	ldr	r3, [pc, #84]	; (8015d98 <pifGps_ParsingNmea+0x238>)
 8015d42:	220b      	movs	r2, #11
 8015d44:	801a      	strh	r2, [r3, #0]
 8015d46:	e2ec      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'T' && string[3] == 'X' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_TXT;
 8015d48:	4b12      	ldr	r3, [pc, #72]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015d4a:	789b      	ldrb	r3, [r3, #2]
 8015d4c:	2b54      	cmp	r3, #84	; 0x54
 8015d4e:	d10b      	bne.n	8015d68 <pifGps_ParsingNmea+0x208>
 8015d50:	4b10      	ldr	r3, [pc, #64]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015d52:	78db      	ldrb	r3, [r3, #3]
 8015d54:	2b58      	cmp	r3, #88	; 0x58
 8015d56:	d107      	bne.n	8015d68 <pifGps_ParsingNmea+0x208>
 8015d58:	4b0e      	ldr	r3, [pc, #56]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015d5a:	791b      	ldrb	r3, [r3, #4]
 8015d5c:	2b54      	cmp	r3, #84	; 0x54
 8015d5e:	d103      	bne.n	8015d68 <pifGps_ParsingNmea+0x208>
 8015d60:	4b0d      	ldr	r3, [pc, #52]	; (8015d98 <pifGps_ParsingNmea+0x238>)
 8015d62:	220c      	movs	r2, #12
 8015d64:	801a      	strh	r2, [r3, #0]
 8015d66:	e2dc      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'V' && string[3] == 'L' && string[4] == 'W') msg_id = PIF_GPS_NMEA_MSG_ID_VLW;
 8015d68:	4b0a      	ldr	r3, [pc, #40]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015d6a:	789b      	ldrb	r3, [r3, #2]
 8015d6c:	2b56      	cmp	r3, #86	; 0x56
 8015d6e:	d115      	bne.n	8015d9c <pifGps_ParsingNmea+0x23c>
 8015d70:	4b08      	ldr	r3, [pc, #32]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015d72:	78db      	ldrb	r3, [r3, #3]
 8015d74:	2b4c      	cmp	r3, #76	; 0x4c
 8015d76:	d111      	bne.n	8015d9c <pifGps_ParsingNmea+0x23c>
 8015d78:	4b06      	ldr	r3, [pc, #24]	; (8015d94 <pifGps_ParsingNmea+0x234>)
 8015d7a:	791b      	ldrb	r3, [r3, #4]
 8015d7c:	2b57      	cmp	r3, #87	; 0x57
 8015d7e:	d10d      	bne.n	8015d9c <pifGps_ParsingNmea+0x23c>
 8015d80:	4b05      	ldr	r3, [pc, #20]	; (8015d98 <pifGps_ParsingNmea+0x238>)
 8015d82:	220d      	movs	r2, #13
 8015d84:	801a      	strh	r2, [r3, #0]
 8015d86:	e2cc      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
 8015d88:	20002061 	.word	0x20002061
 8015d8c:	20002062 	.word	0x20002062
 8015d90:	20002063 	.word	0x20002063
 8015d94:	20002064 	.word	0x20002064
 8015d98:	20002084 	.word	0x20002084
			else if (string[2] == 'V' && string[3] == 'T' && string[4] == 'G') msg_id = PIF_GPS_NMEA_MSG_ID_VTG;
 8015d9c:	4ba1      	ldr	r3, [pc, #644]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015d9e:	789b      	ldrb	r3, [r3, #2]
 8015da0:	2b56      	cmp	r3, #86	; 0x56
 8015da2:	d10b      	bne.n	8015dbc <pifGps_ParsingNmea+0x25c>
 8015da4:	4b9f      	ldr	r3, [pc, #636]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015da6:	78db      	ldrb	r3, [r3, #3]
 8015da8:	2b54      	cmp	r3, #84	; 0x54
 8015daa:	d107      	bne.n	8015dbc <pifGps_ParsingNmea+0x25c>
 8015dac:	4b9d      	ldr	r3, [pc, #628]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015dae:	791b      	ldrb	r3, [r3, #4]
 8015db0:	2b47      	cmp	r3, #71	; 0x47
 8015db2:	d103      	bne.n	8015dbc <pifGps_ParsingNmea+0x25c>
 8015db4:	4b9c      	ldr	r3, [pc, #624]	; (8016028 <pifGps_ParsingNmea+0x4c8>)
 8015db6:	220e      	movs	r2, #14
 8015db8:	801a      	strh	r2, [r3, #0]
 8015dba:	e2b2      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'Z' && string[3] == 'D' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_ZDA;
 8015dbc:	4b99      	ldr	r3, [pc, #612]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015dbe:	789b      	ldrb	r3, [r3, #2]
 8015dc0:	2b5a      	cmp	r3, #90	; 0x5a
 8015dc2:	f040 82ae 	bne.w	8016322 <pifGps_ParsingNmea+0x7c2>
 8015dc6:	4b97      	ldr	r3, [pc, #604]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015dc8:	78db      	ldrb	r3, [r3, #3]
 8015dca:	2b44      	cmp	r3, #68	; 0x44
 8015dcc:	f040 82a9 	bne.w	8016322 <pifGps_ParsingNmea+0x7c2>
 8015dd0:	4b94      	ldr	r3, [pc, #592]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015dd2:	791b      	ldrb	r3, [r3, #4]
 8015dd4:	2b41      	cmp	r3, #65	; 0x41
 8015dd6:	f040 82a4 	bne.w	8016322 <pifGps_ParsingNmea+0x7c2>
 8015dda:	4b93      	ldr	r3, [pc, #588]	; (8016028 <pifGps_ParsingNmea+0x4c8>)
 8015ddc:	220f      	movs	r2, #15
 8015dde:	801a      	strh	r2, [r3, #0]
 8015de0:	e29f      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
		}
		else if (offset) {
 8015de2:	4b92      	ldr	r3, [pc, #584]	; (801602c <pifGps_ParsingNmea+0x4cc>)
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	f000 828c 	beq.w	8016304 <pifGps_ParsingNmea+0x7a4>
			switch (msg_id) {
 8015dec:	4b8e      	ldr	r3, [pc, #568]	; (8016028 <pifGps_ParsingNmea+0x4c8>)
 8015dee:	881b      	ldrh	r3, [r3, #0]
 8015df0:	3b01      	subs	r3, #1
 8015df2:	2b0e      	cmp	r3, #14
 8015df4:	f200 8295 	bhi.w	8016322 <pifGps_ParsingNmea+0x7c2>
 8015df8:	a201      	add	r2, pc, #4	; (adr r2, 8015e00 <pifGps_ParsingNmea+0x2a0>)
 8015dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dfe:	bf00      	nop
 8015e00:	08016323 	.word	0x08016323
 8015e04:	08016323 	.word	0x08016323
 8015e08:	08015e3d 	.word	0x08015e3d
 8015e0c:	08015f45 	.word	0x08015f45
 8015e10:	08015fef 	.word	0x08015fef
 8015e14:	08016323 	.word	0x08016323
 8015e18:	08016323 	.word	0x08016323
 8015e1c:	08016323 	.word	0x08016323
 8015e20:	08016323 	.word	0x08016323
 8015e24:	080160dd 	.word	0x080160dd
 8015e28:	08016323 	.word	0x08016323
 8015e2c:	080161d7 	.word	0x080161d7
 8015e30:	08016323 	.word	0x08016323
 8015e34:	08016249 	.word	0x08016249
 8015e38:	0801628f 	.word	0x0801628f

			case PIF_GPS_NMEA_MSG_ID_GBS:
				break;

			case PIF_GPS_NMEA_MSG_ID_GGA:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8015e3c:	4b7c      	ldr	r3, [pc, #496]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8015e3e:	781b      	ldrb	r3, [r3, #0]
 8015e40:	2b01      	cmp	r3, #1
 8015e42:	d106      	bne.n	8015e52 <pifGps_ParsingNmea+0x2f2>
 8015e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e46:	330e      	adds	r3, #14
 8015e48:	4619      	mov	r1, r3
 8015e4a:	4876      	ldr	r0, [pc, #472]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015e4c:	f7ff fbbc 	bl	80155c8 <_convertString2Time>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 6) p_owner->_fix = (string[0]  > '0');
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
				break;
 8015e50:	e25a      	b.n	8016308 <pifGps_ParsingNmea+0x7a8>
				else if (param == 2) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015e52:	4b77      	ldr	r3, [pc, #476]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8015e54:	781b      	ldrb	r3, [r3, #0]
 8015e56:	2b02      	cmp	r3, #2
 8015e58:	d10a      	bne.n	8015e70 <pifGps_ParsingNmea+0x310>
 8015e5a:	4872      	ldr	r0, [pc, #456]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015e5c:	f7ff fcfc 	bl	8015858 <_convertString2Degrees>
 8015e60:	eeb0 7a40 	vmov.f32	s14, s0
 8015e64:	eef0 7a60 	vmov.f32	s15, s1
 8015e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e6a:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 8015e6e:	e24b      	b.n	8016308 <pifGps_ParsingNmea+0x7a8>
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015e70:	4b6f      	ldr	r3, [pc, #444]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8015e72:	781b      	ldrb	r3, [r3, #0]
 8015e74:	2b03      	cmp	r3, #3
 8015e76:	d110      	bne.n	8015e9a <pifGps_ParsingNmea+0x33a>
 8015e78:	4b6a      	ldr	r3, [pc, #424]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015e7a:	781b      	ldrb	r3, [r3, #0]
 8015e7c:	2b53      	cmp	r3, #83	; 0x53
 8015e7e:	d10c      	bne.n	8015e9a <pifGps_ParsingNmea+0x33a>
 8015e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e82:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015e86:	623a      	str	r2, [r7, #32]
 8015e88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8015e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e90:	ed97 7b08 	vldr	d7, [r7, #32]
 8015e94:	ed83 7b06 	vstr	d7, [r3, #24]
 8015e98:	e053      	b.n	8015f42 <pifGps_ParsingNmea+0x3e2>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8015e9a:	4b65      	ldr	r3, [pc, #404]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8015e9c:	781b      	ldrb	r3, [r3, #0]
 8015e9e:	2b04      	cmp	r3, #4
 8015ea0:	d10a      	bne.n	8015eb8 <pifGps_ParsingNmea+0x358>
 8015ea2:	4860      	ldr	r0, [pc, #384]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015ea4:	f7ff fcd8 	bl	8015858 <_convertString2Degrees>
 8015ea8:	eeb0 7a40 	vmov.f32	s14, s0
 8015eac:	eef0 7a60 	vmov.f32	s15, s1
 8015eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eb2:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8015eb6:	e227      	b.n	8016308 <pifGps_ParsingNmea+0x7a8>
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8015eb8:	4b5d      	ldr	r3, [pc, #372]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8015eba:	781b      	ldrb	r3, [r3, #0]
 8015ebc:	2b05      	cmp	r3, #5
 8015ebe:	d110      	bne.n	8015ee2 <pifGps_ParsingNmea+0x382>
 8015ec0:	4b58      	ldr	r3, [pc, #352]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015ec2:	781b      	ldrb	r3, [r3, #0]
 8015ec4:	2b57      	cmp	r3, #87	; 0x57
 8015ec6:	d10c      	bne.n	8015ee2 <pifGps_ParsingNmea+0x382>
 8015ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015ece:	61ba      	str	r2, [r7, #24]
 8015ed0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015ed4:	61fb      	str	r3, [r7, #28]
 8015ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed8:	ed97 7b06 	vldr	d7, [r7, #24]
 8015edc:	ed83 7b08 	vstr	d7, [r3, #32]
 8015ee0:	e02f      	b.n	8015f42 <pifGps_ParsingNmea+0x3e2>
				else if (param == 6) p_owner->_fix = (string[0]  > '0');
 8015ee2:	4b53      	ldr	r3, [pc, #332]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8015ee4:	781b      	ldrb	r3, [r3, #0]
 8015ee6:	2b06      	cmp	r3, #6
 8015ee8:	d10e      	bne.n	8015f08 <pifGps_ParsingNmea+0x3a8>
 8015eea:	4b4e      	ldr	r3, [pc, #312]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015eec:	781b      	ldrb	r3, [r3, #0]
 8015eee:	2b30      	cmp	r3, #48	; 0x30
 8015ef0:	bf8c      	ite	hi
 8015ef2:	2301      	movhi	r3, #1
 8015ef4:	2300      	movls	r3, #0
 8015ef6:	b2d9      	uxtb	r1, r3
 8015ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015efa:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015efe:	f361 0300 	bfi	r3, r1, #0, #1
 8015f02:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
				break;
 8015f06:	e1ff      	b.n	8016308 <pifGps_ParsingNmea+0x7a8>
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
 8015f08:	4b49      	ldr	r3, [pc, #292]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8015f0a:	781b      	ldrb	r3, [r3, #0]
 8015f0c:	2b07      	cmp	r3, #7
 8015f0e:	d108      	bne.n	8015f22 <pifGps_ParsingNmea+0x3c2>
 8015f10:	4844      	ldr	r0, [pc, #272]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015f12:	f7ff fc67 	bl	80157e4 <_convertString2Interger>
 8015f16:	4603      	mov	r3, r0
 8015f18:	b2da      	uxtb	r2, r3
 8015f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				break;
 8015f20:	e1f2      	b.n	8016308 <pifGps_ParsingNmea+0x7a8>
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
 8015f22:	4b43      	ldr	r3, [pc, #268]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8015f24:	781b      	ldrb	r3, [r3, #0]
 8015f26:	2b09      	cmp	r3, #9
 8015f28:	f040 81ee 	bne.w	8016308 <pifGps_ParsingNmea+0x7a8>
 8015f2c:	483d      	ldr	r0, [pc, #244]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015f2e:	f7ff fbcd 	bl	80156cc <_convertString2Float>
 8015f32:	eeb0 7a40 	vmov.f32	s14, s0
 8015f36:	eef0 7a60 	vmov.f32	s15, s1
 8015f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f3c:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
				break;
 8015f40:	e1e2      	b.n	8016308 <pifGps_ParsingNmea+0x7a8>
 8015f42:	e1e1      	b.n	8016308 <pifGps_ParsingNmea+0x7a8>

			case PIF_GPS_NMEA_MSG_ID_GLL:
				if (param == 1) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015f44:	4b3a      	ldr	r3, [pc, #232]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8015f46:	781b      	ldrb	r3, [r3, #0]
 8015f48:	2b01      	cmp	r3, #1
 8015f4a:	d10a      	bne.n	8015f62 <pifGps_ParsingNmea+0x402>
 8015f4c:	4835      	ldr	r0, [pc, #212]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015f4e:	f7ff fc83 	bl	8015858 <_convertString2Degrees>
 8015f52:	eeb0 7a40 	vmov.f32	s14, s0
 8015f56:	eef0 7a60 	vmov.f32	s15, s1
 8015f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f5c:	ed83 7b06 	vstr	d7, [r3, #24]
				else if (param == 2 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 4 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 5) _convertString2Time(string, &p_owner->_utc);
				break;
 8015f60:	e1d4      	b.n	801630c <pifGps_ParsingNmea+0x7ac>
				else if (param == 2 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015f62:	4b33      	ldr	r3, [pc, #204]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	2b02      	cmp	r3, #2
 8015f68:	d110      	bne.n	8015f8c <pifGps_ParsingNmea+0x42c>
 8015f6a:	4b2e      	ldr	r3, [pc, #184]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015f6c:	781b      	ldrb	r3, [r3, #0]
 8015f6e:	2b53      	cmp	r3, #83	; 0x53
 8015f70:	d10c      	bne.n	8015f8c <pifGps_ParsingNmea+0x42c>
 8015f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f74:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015f78:	613a      	str	r2, [r7, #16]
 8015f7a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015f7e:	617b      	str	r3, [r7, #20]
 8015f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f82:	ed97 7b04 	vldr	d7, [r7, #16]
 8015f86:	ed83 7b06 	vstr	d7, [r3, #24]
 8015f8a:	e02f      	b.n	8015fec <pifGps_ParsingNmea+0x48c>
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8015f8c:	4b28      	ldr	r3, [pc, #160]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8015f8e:	781b      	ldrb	r3, [r3, #0]
 8015f90:	2b03      	cmp	r3, #3
 8015f92:	d10a      	bne.n	8015faa <pifGps_ParsingNmea+0x44a>
 8015f94:	4823      	ldr	r0, [pc, #140]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015f96:	f7ff fc5f 	bl	8015858 <_convertString2Degrees>
 8015f9a:	eeb0 7a40 	vmov.f32	s14, s0
 8015f9e:	eef0 7a60 	vmov.f32	s15, s1
 8015fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fa4:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8015fa8:	e1b0      	b.n	801630c <pifGps_ParsingNmea+0x7ac>
				else if (param == 4 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8015faa:	4b21      	ldr	r3, [pc, #132]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8015fac:	781b      	ldrb	r3, [r3, #0]
 8015fae:	2b04      	cmp	r3, #4
 8015fb0:	d110      	bne.n	8015fd4 <pifGps_ParsingNmea+0x474>
 8015fb2:	4b1c      	ldr	r3, [pc, #112]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015fb4:	781b      	ldrb	r3, [r3, #0]
 8015fb6:	2b57      	cmp	r3, #87	; 0x57
 8015fb8:	d10c      	bne.n	8015fd4 <pifGps_ParsingNmea+0x474>
 8015fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015fc0:	60ba      	str	r2, [r7, #8]
 8015fc2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015fc6:	60fb      	str	r3, [r7, #12]
 8015fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fca:	ed97 7b02 	vldr	d7, [r7, #8]
 8015fce:	ed83 7b08 	vstr	d7, [r3, #32]
 8015fd2:	e00b      	b.n	8015fec <pifGps_ParsingNmea+0x48c>
				else if (param == 5) _convertString2Time(string, &p_owner->_utc);
 8015fd4:	4b16      	ldr	r3, [pc, #88]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8015fd6:	781b      	ldrb	r3, [r3, #0]
 8015fd8:	2b05      	cmp	r3, #5
 8015fda:	f040 8197 	bne.w	801630c <pifGps_ParsingNmea+0x7ac>
 8015fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fe0:	330e      	adds	r3, #14
 8015fe2:	4619      	mov	r1, r3
 8015fe4:	480f      	ldr	r0, [pc, #60]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015fe6:	f7ff faef 	bl	80155c8 <_convertString2Time>
				break;
 8015fea:	e18f      	b.n	801630c <pifGps_ParsingNmea+0x7ac>
 8015fec:	e18e      	b.n	801630c <pifGps_ParsingNmea+0x7ac>

			case PIF_GPS_NMEA_MSG_ID_GNS:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8015fee:	4b10      	ldr	r3, [pc, #64]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8015ff0:	781b      	ldrb	r3, [r3, #0]
 8015ff2:	2b01      	cmp	r3, #1
 8015ff4:	d106      	bne.n	8016004 <pifGps_ParsingNmea+0x4a4>
 8015ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ff8:	330e      	adds	r3, #14
 8015ffa:	4619      	mov	r1, r3
 8015ffc:	4809      	ldr	r0, [pc, #36]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 8015ffe:	f7ff fae3 	bl	80155c8 <_convertString2Time>
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
				break;
 8016002:	e185      	b.n	8016310 <pifGps_ParsingNmea+0x7b0>
				else if (param == 2) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8016004:	4b0a      	ldr	r3, [pc, #40]	; (8016030 <pifGps_ParsingNmea+0x4d0>)
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	2b02      	cmp	r3, #2
 801600a:	d113      	bne.n	8016034 <pifGps_ParsingNmea+0x4d4>
 801600c:	4805      	ldr	r0, [pc, #20]	; (8016024 <pifGps_ParsingNmea+0x4c4>)
 801600e:	f7ff fc23 	bl	8015858 <_convertString2Degrees>
 8016012:	eeb0 7a40 	vmov.f32	s14, s0
 8016016:	eef0 7a60 	vmov.f32	s15, s1
 801601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801601c:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 8016020:	e176      	b.n	8016310 <pifGps_ParsingNmea+0x7b0>
 8016022:	bf00      	nop
 8016024:	20002064 	.word	0x20002064
 8016028:	20002084 	.word	0x20002084
 801602c:	20002062 	.word	0x20002062
 8016030:	20002061 	.word	0x20002061
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8016034:	4b9e      	ldr	r3, [pc, #632]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	2b03      	cmp	r3, #3
 801603a:	d110      	bne.n	801605e <pifGps_ParsingNmea+0x4fe>
 801603c:	4b9d      	ldr	r3, [pc, #628]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 801603e:	781b      	ldrb	r3, [r3, #0]
 8016040:	2b53      	cmp	r3, #83	; 0x53
 8016042:	d10c      	bne.n	801605e <pifGps_ParsingNmea+0x4fe>
 8016044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016046:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801604a:	603a      	str	r2, [r7, #0]
 801604c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016050:	607b      	str	r3, [r7, #4]
 8016052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016054:	ed97 7b00 	vldr	d7, [r7]
 8016058:	ed83 7b06 	vstr	d7, [r3, #24]
 801605c:	e03d      	b.n	80160da <pifGps_ParsingNmea+0x57a>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 801605e:	4b94      	ldr	r3, [pc, #592]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 8016060:	781b      	ldrb	r3, [r3, #0]
 8016062:	2b04      	cmp	r3, #4
 8016064:	d10a      	bne.n	801607c <pifGps_ParsingNmea+0x51c>
 8016066:	4893      	ldr	r0, [pc, #588]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 8016068:	f7ff fbf6 	bl	8015858 <_convertString2Degrees>
 801606c:	eeb0 7a40 	vmov.f32	s14, s0
 8016070:	eef0 7a60 	vmov.f32	s15, s1
 8016074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016076:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 801607a:	e149      	b.n	8016310 <pifGps_ParsingNmea+0x7b0>
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 801607c:	4b8c      	ldr	r3, [pc, #560]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 801607e:	781b      	ldrb	r3, [r3, #0]
 8016080:	2b05      	cmp	r3, #5
 8016082:	d10d      	bne.n	80160a0 <pifGps_ParsingNmea+0x540>
 8016084:	4b8b      	ldr	r3, [pc, #556]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 8016086:	781b      	ldrb	r3, [r3, #0]
 8016088:	2b57      	cmp	r3, #87	; 0x57
 801608a:	d109      	bne.n	80160a0 <pifGps_ParsingNmea+0x540>
 801608c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801608e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016092:	4692      	mov	sl, r2
 8016094:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8016098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801609a:	e9c3 ab08 	strd	sl, fp, [r3, #32]
 801609e:	e01c      	b.n	80160da <pifGps_ParsingNmea+0x57a>
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
 80160a0:	4b83      	ldr	r3, [pc, #524]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 80160a2:	781b      	ldrb	r3, [r3, #0]
 80160a4:	2b07      	cmp	r3, #7
 80160a6:	d108      	bne.n	80160ba <pifGps_ParsingNmea+0x55a>
 80160a8:	4882      	ldr	r0, [pc, #520]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 80160aa:	f7ff fb9b 	bl	80157e4 <_convertString2Interger>
 80160ae:	4603      	mov	r3, r0
 80160b0:	b2da      	uxtb	r2, r3
 80160b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				break;
 80160b8:	e12a      	b.n	8016310 <pifGps_ParsingNmea+0x7b0>
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
 80160ba:	4b7d      	ldr	r3, [pc, #500]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 80160bc:	781b      	ldrb	r3, [r3, #0]
 80160be:	2b09      	cmp	r3, #9
 80160c0:	f040 8126 	bne.w	8016310 <pifGps_ParsingNmea+0x7b0>
 80160c4:	487b      	ldr	r0, [pc, #492]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 80160c6:	f7ff fb01 	bl	80156cc <_convertString2Float>
 80160ca:	eeb0 7a40 	vmov.f32	s14, s0
 80160ce:	eef0 7a60 	vmov.f32	s15, s1
 80160d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d4:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
				break;
 80160d8:	e11a      	b.n	8016310 <pifGps_ParsingNmea+0x7b0>
 80160da:	e119      	b.n	8016310 <pifGps_ParsingNmea+0x7b0>

			case PIF_GPS_NMEA_MSG_ID_GSV:
				break;

			case PIF_GPS_NMEA_MSG_ID_RMC:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 80160dc:	4b74      	ldr	r3, [pc, #464]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 80160de:	781b      	ldrb	r3, [r3, #0]
 80160e0:	2b01      	cmp	r3, #1
 80160e2:	d106      	bne.n	80160f2 <pifGps_ParsingNmea+0x592>
 80160e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160e6:	330e      	adds	r3, #14
 80160e8:	4619      	mov	r1, r3
 80160ea:	4872      	ldr	r0, [pc, #456]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 80160ec:	f7ff fa6c 	bl	80155c8 <_convertString2Time>
				else if (param == 5) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 6 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 7) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
				else if (param == 8) p_owner->_ground_course = _convertString2Float(string);
				else if (param == 9) _convertString2Date(string, &p_owner->_utc);
				break;
 80160f0:	e110      	b.n	8016314 <pifGps_ParsingNmea+0x7b4>
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 80160f2:	4b6f      	ldr	r3, [pc, #444]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 80160f4:	781b      	ldrb	r3, [r3, #0]
 80160f6:	2b03      	cmp	r3, #3
 80160f8:	d10a      	bne.n	8016110 <pifGps_ParsingNmea+0x5b0>
 80160fa:	486e      	ldr	r0, [pc, #440]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 80160fc:	f7ff fbac 	bl	8015858 <_convertString2Degrees>
 8016100:	eeb0 7a40 	vmov.f32	s14, s0
 8016104:	eef0 7a60 	vmov.f32	s15, s1
 8016108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801610a:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 801610e:	e101      	b.n	8016314 <pifGps_ParsingNmea+0x7b4>
				else if (param == 4 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8016110:	4b67      	ldr	r3, [pc, #412]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 8016112:	781b      	ldrb	r3, [r3, #0]
 8016114:	2b04      	cmp	r3, #4
 8016116:	d10d      	bne.n	8016134 <pifGps_ParsingNmea+0x5d4>
 8016118:	4b66      	ldr	r3, [pc, #408]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 801611a:	781b      	ldrb	r3, [r3, #0]
 801611c:	2b53      	cmp	r3, #83	; 0x53
 801611e:	d109      	bne.n	8016134 <pifGps_ParsingNmea+0x5d4>
 8016120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016122:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016126:	4690      	mov	r8, r2
 8016128:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 801612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801612e:	e9c3 8906 	strd	r8, r9, [r3, #24]
 8016132:	e04f      	b.n	80161d4 <pifGps_ParsingNmea+0x674>
				else if (param == 5) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8016134:	4b5e      	ldr	r3, [pc, #376]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 8016136:	781b      	ldrb	r3, [r3, #0]
 8016138:	2b05      	cmp	r3, #5
 801613a:	d10a      	bne.n	8016152 <pifGps_ParsingNmea+0x5f2>
 801613c:	485d      	ldr	r0, [pc, #372]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 801613e:	f7ff fb8b 	bl	8015858 <_convertString2Degrees>
 8016142:	eeb0 7a40 	vmov.f32	s14, s0
 8016146:	eef0 7a60 	vmov.f32	s15, s1
 801614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801614c:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8016150:	e0e0      	b.n	8016314 <pifGps_ParsingNmea+0x7b4>
				else if (param == 6 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8016152:	4b57      	ldr	r3, [pc, #348]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 8016154:	781b      	ldrb	r3, [r3, #0]
 8016156:	2b06      	cmp	r3, #6
 8016158:	d10d      	bne.n	8016176 <pifGps_ParsingNmea+0x616>
 801615a:	4b56      	ldr	r3, [pc, #344]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 801615c:	781b      	ldrb	r3, [r3, #0]
 801615e:	2b57      	cmp	r3, #87	; 0x57
 8016160:	d109      	bne.n	8016176 <pifGps_ParsingNmea+0x616>
 8016162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016164:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016168:	4614      	mov	r4, r2
 801616a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 801616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016170:	e9c3 4508 	strd	r4, r5, [r3, #32]
 8016174:	e02e      	b.n	80161d4 <pifGps_ParsingNmea+0x674>
				else if (param == 7) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 8016176:	4b4e      	ldr	r3, [pc, #312]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	2b07      	cmp	r3, #7
 801617c:	d10f      	bne.n	801619e <pifGps_ParsingNmea+0x63e>
 801617e:	484d      	ldr	r0, [pc, #308]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 8016180:	f7ff faa4 	bl	80156cc <_convertString2Float>
 8016184:	ec51 0b10 	vmov	r0, r1, d0
 8016188:	a347      	add	r3, pc, #284	; (adr r3, 80162a8 <pifGps_ParsingNmea+0x748>)
 801618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801618e:	f7ea f9f1 	bl	8000574 <__aeabi_dmul>
 8016192:	4602      	mov	r2, r0
 8016194:	460b      	mov	r3, r1
 8016196:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016198:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				break;
 801619c:	e0ba      	b.n	8016314 <pifGps_ParsingNmea+0x7b4>
				else if (param == 8) p_owner->_ground_course = _convertString2Float(string);
 801619e:	4b44      	ldr	r3, [pc, #272]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 80161a0:	781b      	ldrb	r3, [r3, #0]
 80161a2:	2b08      	cmp	r3, #8
 80161a4:	d10a      	bne.n	80161bc <pifGps_ParsingNmea+0x65c>
 80161a6:	4843      	ldr	r0, [pc, #268]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 80161a8:	f7ff fa90 	bl	80156cc <_convertString2Float>
 80161ac:	eeb0 7a40 	vmov.f32	s14, s0
 80161b0:	eef0 7a60 	vmov.f32	s15, s1
 80161b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b6:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
				break;
 80161ba:	e0ab      	b.n	8016314 <pifGps_ParsingNmea+0x7b4>
				else if (param == 9) _convertString2Date(string, &p_owner->_utc);
 80161bc:	4b3c      	ldr	r3, [pc, #240]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 80161be:	781b      	ldrb	r3, [r3, #0]
 80161c0:	2b09      	cmp	r3, #9
 80161c2:	f040 80a7 	bne.w	8016314 <pifGps_ParsingNmea+0x7b4>
 80161c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c8:	330e      	adds	r3, #14
 80161ca:	4619      	mov	r1, r3
 80161cc:	4839      	ldr	r0, [pc, #228]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 80161ce:	f7ff f9b7 	bl	8015540 <_convertString2Date>
				break;
 80161d2:	e09f      	b.n	8016314 <pifGps_ParsingNmea+0x7b4>
 80161d4:	e09e      	b.n	8016314 <pifGps_ParsingNmea+0x7b4>

			case PIF_GPS_NMEA_MSG_ID_THS:
				break;

			case PIF_GPS_NMEA_MSG_ID_TXT:
				if (p_owner->__evt_text) {
 80161d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80161da:	2b00      	cmp	r3, #0
 80161dc:	f000 809c 	beq.w	8016318 <pifGps_ParsingNmea+0x7b8>
					if (param == 1) p_owner->__p_txt->total = _convertString2Interger(string);
 80161e0:	4b33      	ldr	r3, [pc, #204]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 80161e2:	781b      	ldrb	r3, [r3, #0]
 80161e4:	2b01      	cmp	r3, #1
 80161e6:	d108      	bne.n	80161fa <pifGps_ParsingNmea+0x69a>
 80161e8:	4832      	ldr	r0, [pc, #200]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 80161ea:	f7ff fafb 	bl	80157e4 <_convertString2Interger>
 80161ee:	4602      	mov	r2, r0
 80161f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161f4:	b2d2      	uxtb	r2, r2
 80161f6:	701a      	strb	r2, [r3, #0]
					else if (param == 2) p_owner->__p_txt->num = _convertString2Interger(string);
					else if (param == 3) p_owner->__p_txt->type = _convertString2Interger(string);
					else if (param == 4) strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
				}
				break;
 80161f8:	e08e      	b.n	8016318 <pifGps_ParsingNmea+0x7b8>
					else if (param == 2) p_owner->__p_txt->num = _convertString2Interger(string);
 80161fa:	4b2d      	ldr	r3, [pc, #180]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 80161fc:	781b      	ldrb	r3, [r3, #0]
 80161fe:	2b02      	cmp	r3, #2
 8016200:	d108      	bne.n	8016214 <pifGps_ParsingNmea+0x6b4>
 8016202:	482c      	ldr	r0, [pc, #176]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 8016204:	f7ff faee 	bl	80157e4 <_convertString2Interger>
 8016208:	4602      	mov	r2, r0
 801620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801620c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801620e:	b2d2      	uxtb	r2, r2
 8016210:	705a      	strb	r2, [r3, #1]
				break;
 8016212:	e081      	b.n	8016318 <pifGps_ParsingNmea+0x7b8>
					else if (param == 3) p_owner->__p_txt->type = _convertString2Interger(string);
 8016214:	4b26      	ldr	r3, [pc, #152]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 8016216:	781b      	ldrb	r3, [r3, #0]
 8016218:	2b03      	cmp	r3, #3
 801621a:	d108      	bne.n	801622e <pifGps_ParsingNmea+0x6ce>
 801621c:	4825      	ldr	r0, [pc, #148]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 801621e:	f7ff fae1 	bl	80157e4 <_convertString2Interger>
 8016222:	4602      	mov	r2, r0
 8016224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016228:	b2d2      	uxtb	r2, r2
 801622a:	709a      	strb	r2, [r3, #2]
				break;
 801622c:	e074      	b.n	8016318 <pifGps_ParsingNmea+0x7b8>
					else if (param == 4) strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
 801622e:	4b20      	ldr	r3, [pc, #128]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	2b04      	cmp	r3, #4
 8016234:	d170      	bne.n	8016318 <pifGps_ParsingNmea+0x7b8>
 8016236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801623a:	3303      	adds	r3, #3
 801623c:	223f      	movs	r2, #63	; 0x3f
 801623e:	491d      	ldr	r1, [pc, #116]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 8016240:	4618      	mov	r0, r3
 8016242:	f00d f991 	bl	8023568 <strncpy>
				break;
 8016246:	e067      	b.n	8016318 <pifGps_ParsingNmea+0x7b8>

			case PIF_GPS_NMEA_MSG_ID_VLW:
				break;

			case PIF_GPS_NMEA_MSG_ID_VTG:
				if (param == 1) p_owner->_ground_course = _convertString2Float(string);
 8016248:	4b19      	ldr	r3, [pc, #100]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 801624a:	781b      	ldrb	r3, [r3, #0]
 801624c:	2b01      	cmp	r3, #1
 801624e:	d10a      	bne.n	8016266 <pifGps_ParsingNmea+0x706>
 8016250:	4818      	ldr	r0, [pc, #96]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 8016252:	f7ff fa3b 	bl	80156cc <_convertString2Float>
 8016256:	eeb0 7a40 	vmov.f32	s14, s0
 801625a:	eef0 7a60 	vmov.f32	s15, s1
 801625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016260:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
				else if (param == 5) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
				break;
 8016264:	e05a      	b.n	801631c <pifGps_ParsingNmea+0x7bc>
				else if (param == 5) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 8016266:	4b12      	ldr	r3, [pc, #72]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 8016268:	781b      	ldrb	r3, [r3, #0]
 801626a:	2b05      	cmp	r3, #5
 801626c:	d156      	bne.n	801631c <pifGps_ParsingNmea+0x7bc>
 801626e:	4811      	ldr	r0, [pc, #68]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 8016270:	f7ff fa2c 	bl	80156cc <_convertString2Float>
 8016274:	ec51 0b10 	vmov	r0, r1, d0
 8016278:	a30b      	add	r3, pc, #44	; (adr r3, 80162a8 <pifGps_ParsingNmea+0x748>)
 801627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801627e:	f7ea f979 	bl	8000574 <__aeabi_dmul>
 8016282:	4602      	mov	r2, r0
 8016284:	460b      	mov	r3, r1
 8016286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016288:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				break;
 801628c:	e046      	b.n	801631c <pifGps_ParsingNmea+0x7bc>

			case PIF_GPS_NMEA_MSG_ID_ZDA:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 801628e:	4b08      	ldr	r3, [pc, #32]	; (80162b0 <pifGps_ParsingNmea+0x750>)
 8016290:	781b      	ldrb	r3, [r3, #0]
 8016292:	2b01      	cmp	r3, #1
 8016294:	d110      	bne.n	80162b8 <pifGps_ParsingNmea+0x758>
 8016296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016298:	330e      	adds	r3, #14
 801629a:	4619      	mov	r1, r3
 801629c:	4805      	ldr	r0, [pc, #20]	; (80162b4 <pifGps_ParsingNmea+0x754>)
 801629e:	f7ff f993 	bl	80155c8 <_convertString2Time>
				else if (param == 2) p_owner->_utc.day = _convertString2Interger(string);
				else if (param == 3) p_owner->_utc.month = _convertString2Interger(string);
				else if (param == 4) p_owner->_utc.year = _convertString2Interger(string) - 2000;
				break;
 80162a2:	e03d      	b.n	8016320 <pifGps_ParsingNmea+0x7c0>
 80162a4:	f3af 8000 	nop.w
 80162a8:	00000000 	.word	0x00000000
 80162ac:	40e91e80 	.word	0x40e91e80
 80162b0:	20002061 	.word	0x20002061
 80162b4:	20002064 	.word	0x20002064
				else if (param == 2) p_owner->_utc.day = _convertString2Interger(string);
 80162b8:	4b8a      	ldr	r3, [pc, #552]	; (80164e4 <pifGps_ParsingNmea+0x984>)
 80162ba:	781b      	ldrb	r3, [r3, #0]
 80162bc:	2b02      	cmp	r3, #2
 80162be:	d107      	bne.n	80162d0 <pifGps_ParsingNmea+0x770>
 80162c0:	4889      	ldr	r0, [pc, #548]	; (80164e8 <pifGps_ParsingNmea+0x988>)
 80162c2:	f7ff fa8f 	bl	80157e4 <_convertString2Interger>
 80162c6:	4603      	mov	r3, r0
 80162c8:	b2da      	uxtb	r2, r3
 80162ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162cc:	741a      	strb	r2, [r3, #16]
				break;
 80162ce:	e027      	b.n	8016320 <pifGps_ParsingNmea+0x7c0>
				else if (param == 3) p_owner->_utc.month = _convertString2Interger(string);
 80162d0:	4b84      	ldr	r3, [pc, #528]	; (80164e4 <pifGps_ParsingNmea+0x984>)
 80162d2:	781b      	ldrb	r3, [r3, #0]
 80162d4:	2b03      	cmp	r3, #3
 80162d6:	d107      	bne.n	80162e8 <pifGps_ParsingNmea+0x788>
 80162d8:	4883      	ldr	r0, [pc, #524]	; (80164e8 <pifGps_ParsingNmea+0x988>)
 80162da:	f7ff fa83 	bl	80157e4 <_convertString2Interger>
 80162de:	4603      	mov	r3, r0
 80162e0:	b2da      	uxtb	r2, r3
 80162e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e4:	73da      	strb	r2, [r3, #15]
				break;
 80162e6:	e01b      	b.n	8016320 <pifGps_ParsingNmea+0x7c0>
				else if (param == 4) p_owner->_utc.year = _convertString2Interger(string) - 2000;
 80162e8:	4b7e      	ldr	r3, [pc, #504]	; (80164e4 <pifGps_ParsingNmea+0x984>)
 80162ea:	781b      	ldrb	r3, [r3, #0]
 80162ec:	2b04      	cmp	r3, #4
 80162ee:	d117      	bne.n	8016320 <pifGps_ParsingNmea+0x7c0>
 80162f0:	487d      	ldr	r0, [pc, #500]	; (80164e8 <pifGps_ParsingNmea+0x988>)
 80162f2:	f7ff fa77 	bl	80157e4 <_convertString2Interger>
 80162f6:	4603      	mov	r3, r0
 80162f8:	b2db      	uxtb	r3, r3
 80162fa:	3330      	adds	r3, #48	; 0x30
 80162fc:	b2da      	uxtb	r2, r3
 80162fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016300:	739a      	strb	r2, [r3, #14]
				break;
 8016302:	e00d      	b.n	8016320 <pifGps_ParsingNmea+0x7c0>
			}
		}
 8016304:	bf00      	nop
 8016306:	e00c      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
				break;
 8016308:	bf00      	nop
 801630a:	e00a      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
				break;
 801630c:	bf00      	nop
 801630e:	e008      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
				break;
 8016310:	bf00      	nop
 8016312:	e006      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
				break;
 8016314:	bf00      	nop
 8016316:	e004      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
				break;
 8016318:	bf00      	nop
 801631a:	e002      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
				break;
 801631c:	bf00      	nop
 801631e:	e000      	b.n	8016322 <pifGps_ParsingNmea+0x7c2>
				break;
 8016320:	bf00      	nop
		param++;
 8016322:	4b70      	ldr	r3, [pc, #448]	; (80164e4 <pifGps_ParsingNmea+0x984>)
 8016324:	781b      	ldrb	r3, [r3, #0]
 8016326:	3301      	adds	r3, #1
 8016328:	b2da      	uxtb	r2, r3
 801632a:	4b6e      	ldr	r3, [pc, #440]	; (80164e4 <pifGps_ParsingNmea+0x984>)
 801632c:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param = 1;
 801632e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016332:	2b2a      	cmp	r3, #42	; 0x2a
 8016334:	d103      	bne.n	801633e <pifGps_ParsingNmea+0x7de>
 8016336:	4b6d      	ldr	r3, [pc, #436]	; (80164ec <pifGps_ParsingNmea+0x98c>)
 8016338:	2201      	movs	r2, #1
 801633a:	701a      	strb	r2, [r3, #0]
 801633c:	e007      	b.n	801634e <pifGps_ParsingNmea+0x7ee>
		else parity ^= c;
 801633e:	4b6c      	ldr	r3, [pc, #432]	; (80164f0 <pifGps_ParsingNmea+0x990>)
 8016340:	781a      	ldrb	r2, [r3, #0]
 8016342:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016346:	4053      	eors	r3, r2
 8016348:	b2da      	uxtb	r2, r3
 801634a:	4b69      	ldr	r3, [pc, #420]	; (80164f0 <pifGps_ParsingNmea+0x990>)
 801634c:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 801634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016350:	689b      	ldr	r3, [r3, #8]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d018      	beq.n	8016388 <pifGps_ParsingNmea+0x828>
			string[offset++] = c;
 8016356:	4b67      	ldr	r3, [pc, #412]	; (80164f4 <pifGps_ParsingNmea+0x994>)
 8016358:	781b      	ldrb	r3, [r3, #0]
 801635a:	1c5a      	adds	r2, r3, #1
 801635c:	b2d1      	uxtb	r1, r2
 801635e:	4a65      	ldr	r2, [pc, #404]	; (80164f4 <pifGps_ParsingNmea+0x994>)
 8016360:	7011      	strb	r1, [r2, #0]
 8016362:	4619      	mov	r1, r3
 8016364:	4a60      	ldr	r2, [pc, #384]	; (80164e8 <pifGps_ParsingNmea+0x988>)
 8016366:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801636a:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 801636c:	4b61      	ldr	r3, [pc, #388]	; (80164f4 <pifGps_ParsingNmea+0x994>)
 801636e:	781b      	ldrb	r3, [r3, #0]
 8016370:	1c5a      	adds	r2, r3, #1
 8016372:	b2d1      	uxtb	r1, r2
 8016374:	4a5f      	ldr	r2, [pc, #380]	; (80164f4 <pifGps_ParsingNmea+0x994>)
 8016376:	7011      	strb	r1, [r2, #0]
 8016378:	461a      	mov	r2, r3
 801637a:	4b5b      	ldr	r3, [pc, #364]	; (80164e8 <pifGps_ParsingNmea+0x988>)
 801637c:	2100      	movs	r1, #0
 801637e:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 8016380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016382:	689b      	ldr	r3, [r3, #8]
 8016384:	4858      	ldr	r0, [pc, #352]	; (80164e8 <pifGps_ParsingNmea+0x988>)
 8016386:	4798      	blx	r3
		}
		offset = 0;
 8016388:	4b5a      	ldr	r3, [pc, #360]	; (80164f4 <pifGps_ParsingNmea+0x994>)
 801638a:	2200      	movs	r2, #0
 801638c:	701a      	strb	r2, [r3, #0]
 801638e:	e0a2      	b.n	80164d6 <pifGps_ParsingNmea+0x976>
	}
	else if (c == '\r' || c == '\n') {
 8016390:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016394:	2b0d      	cmp	r3, #13
 8016396:	d003      	beq.n	80163a0 <pifGps_ParsingNmea+0x840>
 8016398:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801639c:	2b0a      	cmp	r3, #10
 801639e:	d17f      	bne.n	80164a0 <pifGps_ParsingNmea+0x940>
		if (msg_id && checksum_param) { //parity checksum
 80163a0:	4b55      	ldr	r3, [pc, #340]	; (80164f8 <pifGps_ParsingNmea+0x998>)
 80163a2:	881b      	ldrh	r3, [r3, #0]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d04e      	beq.n	8016446 <pifGps_ParsingNmea+0x8e6>
 80163a8:	4b50      	ldr	r3, [pc, #320]	; (80164ec <pifGps_ParsingNmea+0x98c>)
 80163aa:	781b      	ldrb	r3, [r3, #0]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d04a      	beq.n	8016446 <pifGps_ParsingNmea+0x8e6>
			uint8_t checksum = _convertAscii2Hex(string[0]);
 80163b0:	4b4d      	ldr	r3, [pc, #308]	; (80164e8 <pifGps_ParsingNmea+0x988>)
 80163b2:	781b      	ldrb	r3, [r3, #0]
 80163b4:	4618      	mov	r0, r3
 80163b6:	f7ff faf1 	bl	801599c <_convertAscii2Hex>
 80163ba:	4603      	mov	r3, r0
 80163bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			checksum <<= 4;
 80163c0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80163c4:	011b      	lsls	r3, r3, #4
 80163c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			checksum += _convertAscii2Hex(string[1]);
 80163ca:	4b47      	ldr	r3, [pc, #284]	; (80164e8 <pifGps_ParsingNmea+0x988>)
 80163cc:	785b      	ldrb	r3, [r3, #1]
 80163ce:	4618      	mov	r0, r3
 80163d0:	f7ff fae4 	bl	801599c <_convertAscii2Hex>
 80163d4:	4603      	mov	r3, r0
 80163d6:	461a      	mov	r2, r3
 80163d8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80163dc:	4413      	add	r3, r2
 80163de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			if (checksum == parity) {
 80163e2:	4b43      	ldr	r3, [pc, #268]	; (80164f0 <pifGps_ParsingNmea+0x990>)
 80163e4:	781b      	ldrb	r3, [r3, #0]
 80163e6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80163ea:	429a      	cmp	r2, r3
 80163ec:	d118      	bne.n	8016420 <pifGps_ParsingNmea+0x8c0>
				if (msg_id == p_owner->evt_nmea_msg_id) frame_ok = 1;
 80163ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f0:	781b      	ldrb	r3, [r3, #0]
 80163f2:	b29a      	uxth	r2, r3
 80163f4:	4b40      	ldr	r3, [pc, #256]	; (80164f8 <pifGps_ParsingNmea+0x998>)
 80163f6:	881b      	ldrh	r3, [r3, #0]
 80163f8:	429a      	cmp	r2, r3
 80163fa:	d102      	bne.n	8016402 <pifGps_ParsingNmea+0x8a2>
 80163fc:	2301      	movs	r3, #1
 80163fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if (msg_id == PIF_GPS_NMEA_MSG_ID_TXT && p_owner->__evt_text) {
 8016402:	4b3d      	ldr	r3, [pc, #244]	; (80164f8 <pifGps_ParsingNmea+0x998>)
 8016404:	881b      	ldrh	r3, [r3, #0]
 8016406:	2b0c      	cmp	r3, #12
 8016408:	d11a      	bne.n	8016440 <pifGps_ParsingNmea+0x8e0>
 801640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801640c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801640e:	2b00      	cmp	r3, #0
 8016410:	d016      	beq.n	8016440 <pifGps_ParsingNmea+0x8e0>
					(p_owner->__evt_text)(p_owner->__p_txt);
 8016412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016418:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801641a:	4610      	mov	r0, r2
 801641c:	4798      	blx	r3
 801641e:	e00f      	b.n	8016440 <pifGps_ParsingNmea+0x8e0>
				}
			}
#ifndef __PIF_NO_LOG__
			else {
				pifLog_Printf(LT_ERROR, "GN(%u): MsgId=%u CS=%x:%x", __LINE__, msg_id, checksum, parity);
 8016420:	4b35      	ldr	r3, [pc, #212]	; (80164f8 <pifGps_ParsingNmea+0x998>)
 8016422:	881b      	ldrh	r3, [r3, #0]
 8016424:	4619      	mov	r1, r3
 8016426:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801642a:	4a31      	ldr	r2, [pc, #196]	; (80164f0 <pifGps_ParsingNmea+0x990>)
 801642c:	7812      	ldrb	r2, [r2, #0]
 801642e:	9201      	str	r2, [sp, #4]
 8016430:	9300      	str	r3, [sp, #0]
 8016432:	460b      	mov	r3, r1
 8016434:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8016438:	4930      	ldr	r1, [pc, #192]	; (80164fc <pifGps_ParsingNmea+0x99c>)
 801643a:	2004      	movs	r0, #4
 801643c:	f7fd fa00 	bl	8013840 <pifLog_Printf>
			}
#endif
			rtn = TRUE;
 8016440:	2301      	movs	r3, #1
 8016442:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		checksum_param = 0;
 8016446:	4b29      	ldr	r3, [pc, #164]	; (80164ec <pifGps_ParsingNmea+0x98c>)
 8016448:	2200      	movs	r2, #0
 801644a:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 801644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801644e:	689b      	ldr	r3, [r3, #8]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d018      	beq.n	8016486 <pifGps_ParsingNmea+0x926>
			string[offset++] = c;
 8016454:	4b27      	ldr	r3, [pc, #156]	; (80164f4 <pifGps_ParsingNmea+0x994>)
 8016456:	781b      	ldrb	r3, [r3, #0]
 8016458:	1c5a      	adds	r2, r3, #1
 801645a:	b2d1      	uxtb	r1, r2
 801645c:	4a25      	ldr	r2, [pc, #148]	; (80164f4 <pifGps_ParsingNmea+0x994>)
 801645e:	7011      	strb	r1, [r2, #0]
 8016460:	4619      	mov	r1, r3
 8016462:	4a21      	ldr	r2, [pc, #132]	; (80164e8 <pifGps_ParsingNmea+0x988>)
 8016464:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016468:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 801646a:	4b22      	ldr	r3, [pc, #136]	; (80164f4 <pifGps_ParsingNmea+0x994>)
 801646c:	781b      	ldrb	r3, [r3, #0]
 801646e:	1c5a      	adds	r2, r3, #1
 8016470:	b2d1      	uxtb	r1, r2
 8016472:	4a20      	ldr	r2, [pc, #128]	; (80164f4 <pifGps_ParsingNmea+0x994>)
 8016474:	7011      	strb	r1, [r2, #0]
 8016476:	461a      	mov	r2, r3
 8016478:	4b1b      	ldr	r3, [pc, #108]	; (80164e8 <pifGps_ParsingNmea+0x988>)
 801647a:	2100      	movs	r1, #0
 801647c:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 801647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016480:	689b      	ldr	r3, [r3, #8]
 8016482:	4819      	ldr	r0, [pc, #100]	; (80164e8 <pifGps_ParsingNmea+0x988>)
 8016484:	4798      	blx	r3
		}
		offset = 0;
 8016486:	4b1b      	ldr	r3, [pc, #108]	; (80164f4 <pifGps_ParsingNmea+0x994>)
 8016488:	2200      	movs	r2, #0
 801648a:	701a      	strb	r2, [r3, #0]
		if (frame_ok) {
 801648c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016490:	2b00      	cmp	r3, #0
 8016492:	d002      	beq.n	801649a <pifGps_ParsingNmea+0x93a>
			pifGps_SendEvent(p_owner);
 8016494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016496:	f7ff fb41 	bl	8015b1c <pifGps_SendEvent>
		}
		return rtn;
 801649a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801649e:	e01b      	b.n	80164d8 <pifGps_ParsingNmea+0x978>
	}
	else {
		if (offset < PIF_GPS_NMEA_VALUE_SIZE) string[offset++] = c;
 80164a0:	4b14      	ldr	r3, [pc, #80]	; (80164f4 <pifGps_ParsingNmea+0x994>)
 80164a2:	781b      	ldrb	r3, [r3, #0]
 80164a4:	2b1f      	cmp	r3, #31
 80164a6:	d80a      	bhi.n	80164be <pifGps_ParsingNmea+0x95e>
 80164a8:	4b12      	ldr	r3, [pc, #72]	; (80164f4 <pifGps_ParsingNmea+0x994>)
 80164aa:	781b      	ldrb	r3, [r3, #0]
 80164ac:	1c5a      	adds	r2, r3, #1
 80164ae:	b2d1      	uxtb	r1, r2
 80164b0:	4a10      	ldr	r2, [pc, #64]	; (80164f4 <pifGps_ParsingNmea+0x994>)
 80164b2:	7011      	strb	r1, [r2, #0]
 80164b4:	4619      	mov	r1, r3
 80164b6:	4a0c      	ldr	r2, [pc, #48]	; (80164e8 <pifGps_ParsingNmea+0x988>)
 80164b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80164bc:	5453      	strb	r3, [r2, r1]
		if (!checksum_param) parity ^= c;
 80164be:	4b0b      	ldr	r3, [pc, #44]	; (80164ec <pifGps_ParsingNmea+0x98c>)
 80164c0:	781b      	ldrb	r3, [r3, #0]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d107      	bne.n	80164d6 <pifGps_ParsingNmea+0x976>
 80164c6:	4b0a      	ldr	r3, [pc, #40]	; (80164f0 <pifGps_ParsingNmea+0x990>)
 80164c8:	781a      	ldrb	r2, [r3, #0]
 80164ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80164ce:	4053      	eors	r3, r2
 80164d0:	b2da      	uxtb	r2, r3
 80164d2:	4b07      	ldr	r3, [pc, #28]	; (80164f0 <pifGps_ParsingNmea+0x990>)
 80164d4:	701a      	strb	r2, [r3, #0]
	}
	return FALSE;
 80164d6:	2300      	movs	r3, #0
}
 80164d8:	4618      	mov	r0, r3
 80164da:	3738      	adds	r7, #56	; 0x38
 80164dc:	46bd      	mov	sp, r7
 80164de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80164e2:	bf00      	nop
 80164e4:	20002061 	.word	0x20002061
 80164e8:	20002064 	.word	0x20002064
 80164ec:	20002086 	.word	0x20002086
 80164f0:	20002063 	.word	0x20002063
 80164f4:	20002062 	.word	0x20002062
 80164f8:	20002084 	.word	0x20002084
 80164fc:	08027c0c 	.word	0x08027c0c

08016500 <_evtParsing>:
#include "gps/pif_gps_nmea.h"

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b084      	sub	sp, #16
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
 8016508:	6039      	str	r1, [r7, #0]
	PifGpsNmea *p_owner = (PifGpsNmea *)p_client;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	60fb      	str	r3, [r7, #12]
	uint8_t c;

	while ((*act_receive_data)(p_owner->__p_comm, &c)) {
 801650e:	e005      	b.n	801651c <_evtParsing+0x1c>
		pifGps_ParsingNmea(&p_owner->_gps, c);
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	7afa      	ldrb	r2, [r7, #11]
 8016514:	4611      	mov	r1, r2
 8016516:	4618      	mov	r0, r3
 8016518:	f7ff fb22 	bl	8015b60 <pifGps_ParsingNmea>
	while ((*act_receive_data)(p_owner->__p_comm, &c)) {
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8016520:	f107 010b 	add.w	r1, r7, #11
 8016524:	683b      	ldr	r3, [r7, #0]
 8016526:	4610      	mov	r0, r2
 8016528:	4798      	blx	r3
 801652a:	4603      	mov	r3, r0
 801652c:	2b00      	cmp	r3, #0
 801652e:	d1ef      	bne.n	8016510 <_evtParsing+0x10>
	}
}
 8016530:	bf00      	nop
 8016532:	bf00      	nop
 8016534:	3710      	adds	r7, #16
 8016536:	46bd      	mov	sp, r7
 8016538:	bd80      	pop	{r7, pc}
	...

0801653c <pifGpsNmea_Init>:

BOOL pifGpsNmea_Init(PifGpsNmea* p_owner, PifId id)
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b082      	sub	sp, #8
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
 8016544:	460b      	mov	r3, r1
 8016546:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d104      	bne.n	8016558 <pifGpsNmea_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 801654e:	4b0f      	ldr	r3, [pc, #60]	; (801658c <pifGpsNmea_Init+0x50>)
 8016550:	2201      	movs	r2, #1
 8016552:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8016554:	2300      	movs	r3, #0
 8016556:	e014      	b.n	8016582 <pifGpsNmea_Init+0x46>
	}

	memset(p_owner, 0, sizeof(PifGpsNmea));
 8016558:	2270      	movs	r2, #112	; 0x70
 801655a:	2100      	movs	r1, #0
 801655c:	6878      	ldr	r0, [r7, #4]
 801655e:	f00c fe95 	bl	802328c <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	887a      	ldrh	r2, [r7, #2]
 8016566:	4611      	mov	r1, r2
 8016568:	4618      	mov	r0, r3
 801656a:	f7ff fa55 	bl	8015a18 <pifGps_Init>
 801656e:	4603      	mov	r3, r0
 8016570:	2b00      	cmp	r3, #0
 8016572:	d001      	beq.n	8016578 <pifGpsNmea_Init+0x3c>
    return TRUE;
 8016574:	2301      	movs	r3, #1
 8016576:	e004      	b.n	8016582 <pifGpsNmea_Init+0x46>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8016578:	bf00      	nop

fail:
	pifGpsNmea_Clear(p_owner);
 801657a:	6878      	ldr	r0, [r7, #4]
 801657c:	f000 f808 	bl	8016590 <pifGpsNmea_Clear>
    return FALSE;
 8016580:	2300      	movs	r3, #0
}
 8016582:	4618      	mov	r0, r3
 8016584:	3708      	adds	r7, #8
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
 801658a:	bf00      	nop
 801658c:	20001ef0 	.word	0x20001ef0

08016590 <pifGpsNmea_Clear>:

void pifGpsNmea_Clear(PifGpsNmea* p_owner)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b082      	sub	sp, #8
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
	pifGps_Clear(&p_owner->_gps);
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	4618      	mov	r0, r3
 801659c:	f7ff fa66 	bl	8015a6c <pifGps_Clear>
}
 80165a0:	bf00      	nop
 80165a2:	3708      	adds	r7, #8
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd80      	pop	{r7, pc}

080165a8 <pifGpsNmea_AttachComm>:

void pifGpsNmea_AttachComm(PifGpsNmea* p_owner, PifComm* p_comm)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b082      	sub	sp, #8
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
 80165b0:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	683a      	ldr	r2, [r7, #0]
 80165b6:	669a      	str	r2, [r3, #104]	; 0x68
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 80165b8:	2300      	movs	r3, #0
 80165ba:	4a04      	ldr	r2, [pc, #16]	; (80165cc <pifGpsNmea_AttachComm+0x24>)
 80165bc:	6879      	ldr	r1, [r7, #4]
 80165be:	6838      	ldr	r0, [r7, #0]
 80165c0:	f7fc f846 	bl	8012650 <pifComm_AttachClient>
}
 80165c4:	bf00      	nop
 80165c6:	3708      	adds	r7, #8
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bd80      	pop	{r7, pc}
 80165cc:	08016501 	.word	0x08016501

080165d0 <_checksumUbx>:

#endif


static uint16_t _checksumUbx(uint8_t* p_header, uint8_t* p_payload, uint16_t len)
{
 80165d0:	b480      	push	{r7}
 80165d2:	b087      	sub	sp, #28
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	60f8      	str	r0, [r7, #12]
 80165d8:	60b9      	str	r1, [r7, #8]
 80165da:	4613      	mov	r3, r2
 80165dc:	80fb      	strh	r3, [r7, #6]
	uint8_t ck_a = 0, ck_b = 0;
 80165de:	2300      	movs	r3, #0
 80165e0:	75fb      	strb	r3, [r7, #23]
 80165e2:	2300      	movs	r3, #0
 80165e4:	75bb      	strb	r3, [r7, #22]
	uint16_t i;

	for (i = 0; i < 4; i++) {
 80165e6:	2300      	movs	r3, #0
 80165e8:	82bb      	strh	r3, [r7, #20]
 80165ea:	e00d      	b.n	8016608 <_checksumUbx+0x38>
		ck_a += p_header[i];
 80165ec:	8abb      	ldrh	r3, [r7, #20]
 80165ee:	68fa      	ldr	r2, [r7, #12]
 80165f0:	4413      	add	r3, r2
 80165f2:	781a      	ldrb	r2, [r3, #0]
 80165f4:	7dfb      	ldrb	r3, [r7, #23]
 80165f6:	4413      	add	r3, r2
 80165f8:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 80165fa:	7dba      	ldrb	r2, [r7, #22]
 80165fc:	7dfb      	ldrb	r3, [r7, #23]
 80165fe:	4413      	add	r3, r2
 8016600:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < 4; i++) {
 8016602:	8abb      	ldrh	r3, [r7, #20]
 8016604:	3301      	adds	r3, #1
 8016606:	82bb      	strh	r3, [r7, #20]
 8016608:	8abb      	ldrh	r3, [r7, #20]
 801660a:	2b03      	cmp	r3, #3
 801660c:	d9ee      	bls.n	80165ec <_checksumUbx+0x1c>
	}
	for (i = 0; i < len; i++) {
 801660e:	2300      	movs	r3, #0
 8016610:	82bb      	strh	r3, [r7, #20]
 8016612:	e00d      	b.n	8016630 <_checksumUbx+0x60>
		ck_a += p_payload[i];
 8016614:	8abb      	ldrh	r3, [r7, #20]
 8016616:	68ba      	ldr	r2, [r7, #8]
 8016618:	4413      	add	r3, r2
 801661a:	781a      	ldrb	r2, [r3, #0]
 801661c:	7dfb      	ldrb	r3, [r7, #23]
 801661e:	4413      	add	r3, r2
 8016620:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 8016622:	7dba      	ldrb	r2, [r7, #22]
 8016624:	7dfb      	ldrb	r3, [r7, #23]
 8016626:	4413      	add	r3, r2
 8016628:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < len; i++) {
 801662a:	8abb      	ldrh	r3, [r7, #20]
 801662c:	3301      	adds	r3, #1
 801662e:	82bb      	strh	r3, [r7, #20]
 8016630:	8aba      	ldrh	r2, [r7, #20]
 8016632:	88fb      	ldrh	r3, [r7, #6]
 8016634:	429a      	cmp	r2, r3
 8016636:	d3ed      	bcc.n	8016614 <_checksumUbx+0x44>
	}
	return ck_a + (ck_b << 8);
 8016638:	7dfb      	ldrb	r3, [r7, #23]
 801663a:	b29a      	uxth	r2, r3
 801663c:	7dbb      	ldrb	r3, [r7, #22]
 801663e:	b29b      	uxth	r3, r3
 8016640:	021b      	lsls	r3, r3, #8
 8016642:	b29b      	uxth	r3, r3
 8016644:	4413      	add	r3, r2
 8016646:	b29b      	uxth	r3, r3
}
 8016648:	4618      	mov	r0, r3
 801664a:	371c      	adds	r7, #28
 801664c:	46bd      	mov	sp, r7
 801664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016652:	4770      	bx	lr

08016654 <_parsingPacket>:

static void _parsingPacket(PifGpsUblox *p_owner, PifActCommReceiveData act_receive_data)
{
 8016654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016656:	b08d      	sub	sp, #52	; 0x34
 8016658:	af06      	add	r7, sp, #24
 801665a:	6078      	str	r0, [r7, #4]
 801665c:	6039      	str	r1, [r7, #0]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	33cc      	adds	r3, #204	; 0xcc
 8016662:	60fb      	str	r3, [r7, #12]
	uint8_t pkt_err;
	int line;
	static uint8_t pre_err = PKT_ERR_NONE;
#endif

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8016664:	e0da      	b.n	801681c <_parsingPacket+0x1c8>
		switch (p_owner->__rx.state) {
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 801666c:	2b09      	cmp	r3, #9
 801666e:	f200 80d4 	bhi.w	801681a <_parsingPacket+0x1c6>
 8016672:	a201      	add	r2, pc, #4	; (adr r2, 8016678 <_parsingPacket+0x24>)
 8016674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016678:	080166a1 	.word	0x080166a1
 801667c:	080166dd 	.word	0x080166dd
 8016680:	080166f7 	.word	0x080166f7
 8016684:	08016707 	.word	0x08016707
 8016688:	08016717 	.word	0x08016717
 801668c:	08016729 	.word	0x08016729
 8016690:	08016765 	.word	0x08016765
 8016694:	0801679f 	.word	0x0801679f
 8016698:	080167b3 	.word	0x080167b3
 801669c:	080167fd 	.word	0x080167fd
		case GURS_SYNC_CHAR_1:
			if (data == 0xB5) {
 80166a0:	7afb      	ldrb	r3, [r7, #11]
 80166a2:	2bb5      	cmp	r3, #181	; 0xb5
 80166a4:	d107      	bne.n	80166b6 <_parsingPacket+0x62>
				p_owner->__rx.state = GURS_SYNC_CHAR_2;
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	2201      	movs	r2, #1
 80166aa:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
 80166ae:	4b85      	ldr	r3, [pc, #532]	; (80168c4 <_parsingPacket+0x270>)
 80166b0:	2204      	movs	r2, #4
 80166b2:	701a      	strb	r2, [r3, #0]
 80166b4:	e0b2      	b.n	801681c <_parsingPacket+0x1c8>
#endif
			}
			else if (pifGps_ParsingNmea(&p_owner->_gps, data)) {
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	3310      	adds	r3, #16
 80166ba:	7afa      	ldrb	r2, [r7, #11]
 80166bc:	4611      	mov	r1, r2
 80166be:	4618      	mov	r0, r3
 80166c0:	f7ff fa4e 	bl	8015b60 <pifGps_ParsingNmea>
 80166c4:	4603      	mov	r3, r0
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	f000 80a8 	beq.w	801681c <_parsingPacket+0x1c8>
				p_owner->__rx.state = GURS_NMEA;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	2209      	movs	r2, #9
 80166d0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
 80166d4:	4b7b      	ldr	r3, [pc, #492]	; (80168c4 <_parsingPacket+0x270>)
 80166d6:	2204      	movs	r2, #4
 80166d8:	701a      	strb	r2, [r3, #0]
#endif
			}
			break;
 80166da:	e09f      	b.n	801681c <_parsingPacket+0x1c8>

		case GURS_SYNC_CHAR_2:
			if (data == 0x62) {
 80166dc:	7afb      	ldrb	r3, [r7, #11]
 80166de:	2b62      	cmp	r3, #98	; 0x62
 80166e0:	d104      	bne.n	80166ec <_parsingPacket+0x98>
				p_owner->__rx.state = GURS_CLASS;
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	2202      	movs	r2, #2
 80166e6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				pkt_err = PKT_ERR_INVALID_DATA;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80166ea:	e097      	b.n	801681c <_parsingPacket+0x1c8>
				pkt_err = PKT_ERR_INVALID_DATA;
 80166ec:	2301      	movs	r3, #1
 80166ee:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80166f0:	2361      	movs	r3, #97	; 0x61
 80166f2:	613b      	str	r3, [r7, #16]
				goto fail;
 80166f4:	e09f      	b.n	8016836 <_parsingPacket+0x1e2>

		case GURS_CLASS:
			p_packet->class_id = data;
 80166f6:	7afa      	ldrb	r2, [r7, #11]
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.state = GURS_ID;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	2203      	movs	r2, #3
 8016700:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 8016704:	e08a      	b.n	801681c <_parsingPacket+0x1c8>

		case GURS_ID:
			p_packet->msg_id = data;
 8016706:	7afa      	ldrb	r2, [r7, #11]
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	705a      	strb	r2, [r3, #1]
			p_owner->__rx.state = GURS_LENGTH_LOW;
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	2204      	movs	r2, #4
 8016710:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 8016714:	e082      	b.n	801681c <_parsingPacket+0x1c8>

		case GURS_LENGTH_LOW:
			p_packet->length = data;
 8016716:	7afb      	ldrb	r3, [r7, #11]
 8016718:	b29a      	uxth	r2, r3
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	805a      	strh	r2, [r3, #2]
			p_owner->__rx.state = GURS_LENGTH_HIGH;
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	2205      	movs	r2, #5
 8016722:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 8016726:	e079      	b.n	801681c <_parsingPacket+0x1c8>

		case GURS_LENGTH_HIGH:
			p_packet->length |= data << 8;
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	885b      	ldrh	r3, [r3, #2]
 801672c:	b21a      	sxth	r2, r3
 801672e:	7afb      	ldrb	r3, [r7, #11]
 8016730:	021b      	lsls	r3, r3, #8
 8016732:	b21b      	sxth	r3, r3
 8016734:	4313      	orrs	r3, r2
 8016736:	b21b      	sxth	r3, r3
 8016738:	b29a      	uxth	r2, r3
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	805a      	strh	r2, [r3, #2]
			if (p_packet->length < sizeof(PifGpsUbxPacket) - 4) {
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	885b      	ldrh	r3, [r3, #2]
 8016742:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 8016746:	d208      	bcs.n	801675a <_parsingPacket+0x106>
				p_owner->__rx.payload_count = 0;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	2200      	movs	r2, #0
 801674c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				p_owner->__rx.state = GURS_PAYLOAD;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	2206      	movs	r2, #6
 8016754:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				pkt_err = PKT_ERR_BIG_LENGHT;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8016758:	e060      	b.n	801681c <_parsingPacket+0x1c8>
				pkt_err = PKT_ERR_BIG_LENGHT;
 801675a:	2300      	movs	r3, #0
 801675c:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 801675e:	237f      	movs	r3, #127	; 0x7f
 8016760:	613b      	str	r3, [r7, #16]
				goto fail;
 8016762:	e068      	b.n	8016836 <_parsingPacket+0x1e2>

		case GURS_PAYLOAD:
			p_packet->payload.bytes[p_owner->__rx.payload_count] = data;
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801676a:	4619      	mov	r1, r3
 801676c:	7afa      	ldrb	r2, [r7, #11]
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	440b      	add	r3, r1
 8016772:	711a      	strb	r2, [r3, #4]
			p_owner->__rx.payload_count++;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801677a:	3301      	adds	r3, #1
 801677c:	b2da      	uxtb	r2, r3
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			if (p_owner->__rx.payload_count >= p_packet->length) {
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801678a:	b29a      	uxth	r2, r3
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	885b      	ldrh	r3, [r3, #2]
 8016790:	429a      	cmp	r2, r3
 8016792:	d343      	bcc.n	801681c <_parsingPacket+0x1c8>
				p_owner->__rx.state = GURS_CK_A;
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	2207      	movs	r2, #7
 8016798:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			}
			break;
 801679c:	e03e      	b.n	801681c <_parsingPacket+0x1c8>

		case GURS_CK_A:
			p_owner->__rx.checksum = data;
 801679e:	7afb      	ldrb	r3, [r7, #11]
 80167a0:	b29a      	uxth	r2, r3
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			p_owner->__rx.state = GURS_CK_B;
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2208      	movs	r2, #8
 80167ac:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80167b0:	e034      	b.n	801681c <_parsingPacket+0x1c8>

		case GURS_CK_B:
			p_owner->__rx.checksum |= data << 8;
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	f8b3 3258 	ldrh.w	r3, [r3, #600]	; 0x258
 80167b8:	b21a      	sxth	r2, r3
 80167ba:	7afb      	ldrb	r3, [r7, #11]
 80167bc:	021b      	lsls	r3, r3, #8
 80167be:	b21b      	sxth	r3, r3
 80167c0:	4313      	orrs	r3, r2
 80167c2:	b21b      	sxth	r3, r3
 80167c4:	b29a      	uxth	r2, r3
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			if (p_owner->__rx.checksum == _checksumUbx((uint8_t*)p_packet, p_packet->payload.bytes, p_packet->length)) {
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	f8b3 4258 	ldrh.w	r4, [r3, #600]	; 0x258
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	1d19      	adds	r1, r3, #4
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	885b      	ldrh	r3, [r3, #2]
 80167da:	461a      	mov	r2, r3
 80167dc:	68f8      	ldr	r0, [r7, #12]
 80167de:	f7ff fef7 	bl	80165d0 <_checksumUbx>
 80167e2:	4603      	mov	r3, r0
 80167e4:	429c      	cmp	r4, r3
 80167e6:	d104      	bne.n	80167f2 <_parsingPacket+0x19e>
				p_owner->__rx.state = GURS_DONE;
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	220a      	movs	r2, #10
 80167ec:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				return;
 80167f0:	e064      	b.n	80168bc <_parsingPacket+0x268>
			}
			else {
#ifndef __PIF_NO_LOG__
				pkt_err = PKT_ERR_WRONG_CRC;
 80167f2:	2302      	movs	r3, #2
 80167f4:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80167f6:	239b      	movs	r3, #155	; 0x9b
 80167f8:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 80167fa:	e01c      	b.n	8016836 <_parsingPacket+0x1e2>
			}
			break;

		case GURS_NMEA:
			if (pifGps_ParsingNmea(&p_owner->_gps, data))	{
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	3310      	adds	r3, #16
 8016800:	7afa      	ldrb	r2, [r7, #11]
 8016802:	4611      	mov	r1, r2
 8016804:	4618      	mov	r0, r3
 8016806:	f7ff f9ab 	bl	8015b60 <pifGps_ParsingNmea>
 801680a:	4603      	mov	r3, r0
 801680c:	2b00      	cmp	r3, #0
 801680e:	d005      	beq.n	801681c <_parsingPacket+0x1c8>
				p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	2200      	movs	r2, #0
 8016814:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				return;
 8016818:	e050      	b.n	80168bc <_parsingPacket+0x268>
			}
			break;

		default:
			break;
 801681a:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8016822:	f107 010b 	add.w	r1, r7, #11
 8016826:	683b      	ldr	r3, [r7, #0]
 8016828:	4610      	mov	r0, r2
 801682a:	4798      	blx	r3
 801682c:	4603      	mov	r3, r0
 801682e:	2b00      	cmp	r3, #0
 8016830:	f47f af19 	bne.w	8016666 <_parsingPacket+0x12>
		}
	}
	return;
 8016834:	e042      	b.n	80168bc <_parsingPacket+0x268>

fail:
#ifndef __PIF_NO_LOG__
	if (pkt_err != pre_err) {
 8016836:	4b23      	ldr	r3, [pc, #140]	; (80168c4 <_parsingPacket+0x270>)
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	7dfa      	ldrb	r2, [r7, #23]
 801683c:	429a      	cmp	r2, r3
 801683e:	d039      	beq.n	80168b4 <_parsingPacket+0x260>
		if (p_owner->__rx.state) {
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8016846:	2b00      	cmp	r3, #0
 8016848:	d021      	beq.n	801688e <_parsingPacket+0x23a>
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	8b9b      	ldrh	r3, [r3, #28]
 801684e:	461e      	mov	r6, r3
 8016850:	7dfb      	ldrb	r3, [r7, #23]
 8016852:	4a1d      	ldr	r2, [pc, #116]	; (80168c8 <_parsingPacket+0x274>)
 8016854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016858:	7afa      	ldrb	r2, [r7, #11]
 801685a:	4611      	mov	r1, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 801685c:	687a      	ldr	r2, [r7, #4]
 801685e:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016862:	4610      	mov	r0, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8016864:	68fa      	ldr	r2, [r7, #12]
 8016866:	7812      	ldrb	r2, [r2, #0]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016868:	4614      	mov	r4, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 801686a:	68fa      	ldr	r2, [r7, #12]
 801686c:	7852      	ldrb	r2, [r2, #1]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 801686e:	4615      	mov	r5, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8016870:	68fa      	ldr	r2, [r7, #12]
 8016872:	8852      	ldrh	r2, [r2, #2]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016874:	9205      	str	r2, [sp, #20]
 8016876:	9504      	str	r5, [sp, #16]
 8016878:	9403      	str	r4, [sp, #12]
 801687a:	9002      	str	r0, [sp, #8]
 801687c:	9101      	str	r1, [sp, #4]
 801687e:	9300      	str	r3, [sp, #0]
 8016880:	4633      	mov	r3, r6
 8016882:	693a      	ldr	r2, [r7, #16]
 8016884:	4911      	ldr	r1, [pc, #68]	; (80168cc <_parsingPacket+0x278>)
 8016886:	2004      	movs	r0, #4
 8016888:	f7fc ffda 	bl	8013840 <pifLog_Printf>
 801688c:	e00f      	b.n	80168ae <_parsingPacket+0x25a>
		}
		else {
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh", line, p_owner->_gps._id, kPktErr[pkt_err], data);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	8b9b      	ldrh	r3, [r3, #28]
 8016892:	4619      	mov	r1, r3
 8016894:	7dfb      	ldrb	r3, [r7, #23]
 8016896:	4a0c      	ldr	r2, [pc, #48]	; (80168c8 <_parsingPacket+0x274>)
 8016898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801689c:	7afa      	ldrb	r2, [r7, #11]
 801689e:	9201      	str	r2, [sp, #4]
 80168a0:	9300      	str	r3, [sp, #0]
 80168a2:	460b      	mov	r3, r1
 80168a4:	693a      	ldr	r2, [r7, #16]
 80168a6:	490a      	ldr	r1, [pc, #40]	; (80168d0 <_parsingPacket+0x27c>)
 80168a8:	2004      	movs	r0, #4
 80168aa:	f7fc ffc9 	bl	8013840 <pifLog_Printf>
		}
		pre_err = pkt_err;
 80168ae:	4a05      	ldr	r2, [pc, #20]	; (80168c4 <_parsingPacket+0x270>)
 80168b0:	7dfb      	ldrb	r3, [r7, #23]
 80168b2:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_packet->payload.bytes[0], p_packet->payload.bytes[1],	p_packet->payload.bytes[2],
			p_packet->payload.bytes[3], p_packet->payload.bytes[4], p_packet->payload.bytes[5], p_packet->payload.bytes[6], p_packet->payload.bytes[7]);
#endif
#endif

	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	2200      	movs	r2, #0
 80168b8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 80168bc:	371c      	adds	r7, #28
 80168be:	46bd      	mov	sp, r7
 80168c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168c2:	bf00      	nop
 80168c4:	2000007c 	.word	0x2000007c
 80168c8:	2000006c 	.word	0x2000006c
 80168cc:	08027c5c 	.word	0x08027c5c
 80168d0:	08027c8c 	.word	0x08027c8c
 80168d4:	00000000 	.word	0x00000000

080168d8 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b08c      	sub	sp, #48	; 0x30
 80168dc:	af04      	add	r7, sp, #16
 80168de:	6078      	str	r0, [r7, #4]
 80168e0:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	617b      	str	r3, [r7, #20]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 80168e6:	697b      	ldr	r3, [r7, #20]
 80168e8:	33cc      	adds	r3, #204	; 0xcc
 80168ea:	613b      	str	r3, [r7, #16]
	PifGps *p_parent = &p_owner->_gps;
 80168ec:	697b      	ldr	r3, [r7, #20]
 80168ee:	3310      	adds	r3, #16
 80168f0:	60fb      	str	r3, [r7, #12]
    int i;
    static BOOL _new_position = FALSE;
    static BOOL next_fix = FALSE;
    static BOOL _new_speed = FALSE;
    BOOL error = FALSE;
 80168f2:	2300      	movs	r3, #0
 80168f4:	76fb      	strb	r3, [r7, #27]

    if (!p_owner->_gps.evt_receive) return;
 80168f6:	697b      	ldr	r3, [r7, #20]
 80168f8:	695b      	ldr	r3, [r3, #20]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	f000 826b 	beq.w	8016dd6 <_evtParsing+0x4fe>

    if (p_owner->__rx.state < GURS_DONE) {
 8016900:	697b      	ldr	r3, [r7, #20]
 8016902:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8016906:	2b09      	cmp	r3, #9
 8016908:	d803      	bhi.n	8016912 <_evtParsing+0x3a>
    	_parsingPacket(p_owner, act_receive_data);
 801690a:	6839      	ldr	r1, [r7, #0]
 801690c:	6978      	ldr	r0, [r7, #20]
 801690e:	f7ff fea1 	bl	8016654 <_parsingPacket>
    }

    if (p_owner->__rx.state == GURS_DONE) {
 8016912:	697b      	ldr	r3, [r7, #20]
 8016914:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8016918:	2b0a      	cmp	r3, #10
 801691a:	f040 825d 	bne.w	8016dd8 <_evtParsing+0x500>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x %x %x %x", p_owner->_gps._id, p_packet->class_id, p_packet->msg_id, p_packet->length,
    			p_packet->payload.bytes[0], p_packet->payload.bytes[1], p_packet->payload.bytes[2], p_packet->payload.bytes[3], p_packet->payload.bytes[4]);
#endif
#endif

        switch (p_packet->class_id) {
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	781b      	ldrb	r3, [r3, #0]
 8016922:	2b01      	cmp	r3, #1
 8016924:	d02a      	beq.n	801697c <_evtParsing+0xa4>
 8016926:	2b05      	cmp	r3, #5
 8016928:	f040 821e 	bne.w	8016d68 <_evtParsing+0x490>
        case GUCI_ACK:
        	switch (p_packet->msg_id) {
 801692c:	693b      	ldr	r3, [r7, #16]
 801692e:	785b      	ldrb	r3, [r3, #1]
 8016930:	2b01      	cmp	r3, #1
 8016932:	d80b      	bhi.n	801694c <_evtParsing+0x74>
        	case GUMI_ACK_ACK:
        	case GUMI_ACK_NAK:
        		if (p_owner->evt_ubx_cfg_result) (*p_owner->evt_ubx_cfg_result)(p_owner, p_packet->msg_id);
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d01d      	beq.n	8016978 <_evtParsing+0xa0>
 801693c:	697b      	ldr	r3, [r7, #20]
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	693a      	ldr	r2, [r7, #16]
 8016942:	7852      	ldrb	r2, [r2, #1]
 8016944:	4611      	mov	r1, r2
 8016946:	6978      	ldr	r0, [r7, #20]
 8016948:	4798      	blx	r3
        		break;
 801694a:	e015      	b.n	8016978 <_evtParsing+0xa0>

            default:
            	error = TRUE;
 801694c:	2301      	movs	r3, #1
 801694e:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
        		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 8016950:	697b      	ldr	r3, [r7, #20]
 8016952:	8b9b      	ldrh	r3, [r3, #28]
 8016954:	4618      	mov	r0, r3
 8016956:	4ba2      	ldr	r3, [pc, #648]	; (8016be0 <_evtParsing+0x308>)
 8016958:	68db      	ldr	r3, [r3, #12]
 801695a:	693a      	ldr	r2, [r7, #16]
 801695c:	7812      	ldrb	r2, [r2, #0]
 801695e:	4611      	mov	r1, r2
 8016960:	693a      	ldr	r2, [r7, #16]
 8016962:	7852      	ldrb	r2, [r2, #1]
 8016964:	9202      	str	r2, [sp, #8]
 8016966:	9101      	str	r1, [sp, #4]
 8016968:	9300      	str	r3, [sp, #0]
 801696a:	4603      	mov	r3, r0
 801696c:	22e7      	movs	r2, #231	; 0xe7
 801696e:	499d      	ldr	r1, [pc, #628]	; (8016be4 <_evtParsing+0x30c>)
 8016970:	2004      	movs	r0, #4
 8016972:	f7fc ff65 	bl	8013840 <pifLog_Printf>
#endif
                break;
 8016976:	e000      	b.n	801697a <_evtParsing+0xa2>
        		break;
 8016978:	bf00      	nop
        	}
        	break;
 801697a:	e208      	b.n	8016d8e <_evtParsing+0x4b6>

        case GUCI_NAV:
            switch (p_packet->msg_id) {
 801697c:	693b      	ldr	r3, [r7, #16]
 801697e:	785b      	ldrb	r3, [r3, #1]
 8016980:	3b02      	subs	r3, #2
 8016982:	2b2e      	cmp	r3, #46	; 0x2e
 8016984:	f200 81d5 	bhi.w	8016d32 <_evtParsing+0x45a>
 8016988:	a201      	add	r2, pc, #4	; (adr r2, 8016990 <_evtParsing+0xb8>)
 801698a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801698e:	bf00      	nop
 8016990:	08016a4d 	.word	0x08016a4d
 8016994:	08016b77 	.word	0x08016b77
 8016998:	08016d33 	.word	0x08016d33
 801699c:	08016d33 	.word	0x08016d33
 80169a0:	08016b33 	.word	0x08016b33
 80169a4:	08016ae7 	.word	0x08016ae7
 80169a8:	08016d33 	.word	0x08016d33
 80169ac:	08016d33 	.word	0x08016d33
 80169b0:	08016d33 	.word	0x08016d33
 80169b4:	08016d33 	.word	0x08016d33
 80169b8:	08016d33 	.word	0x08016d33
 80169bc:	08016d33 	.word	0x08016d33
 80169c0:	08016d33 	.word	0x08016d33
 80169c4:	08016d33 	.word	0x08016d33
 80169c8:	08016d33 	.word	0x08016d33
 80169cc:	08016d33 	.word	0x08016d33
 80169d0:	08016cf9 	.word	0x08016cf9
 80169d4:	08016d33 	.word	0x08016d33
 80169d8:	08016d33 	.word	0x08016d33
 80169dc:	08016d33 	.word	0x08016d33
 80169e0:	08016d33 	.word	0x08016d33
 80169e4:	08016d33 	.word	0x08016d33
 80169e8:	08016d33 	.word	0x08016d33
 80169ec:	08016d33 	.word	0x08016d33
 80169f0:	08016d33 	.word	0x08016d33
 80169f4:	08016d33 	.word	0x08016d33
 80169f8:	08016d33 	.word	0x08016d33
 80169fc:	08016d33 	.word	0x08016d33
 8016a00:	08016d33 	.word	0x08016d33
 8016a04:	08016d33 	.word	0x08016d33
 8016a08:	08016d33 	.word	0x08016d33
 8016a0c:	08016ca1 	.word	0x08016ca1
 8016a10:	08016d33 	.word	0x08016d33
 8016a14:	08016d33 	.word	0x08016d33
 8016a18:	08016d33 	.word	0x08016d33
 8016a1c:	08016d33 	.word	0x08016d33
 8016a20:	08016d33 	.word	0x08016d33
 8016a24:	08016d33 	.word	0x08016d33
 8016a28:	08016d33 	.word	0x08016d33
 8016a2c:	08016d33 	.word	0x08016d33
 8016a30:	08016d33 	.word	0x08016d33
 8016a34:	08016d33 	.word	0x08016d33
 8016a38:	08016d33 	.word	0x08016d33
 8016a3c:	08016d33 	.word	0x08016d33
 8016a40:	08016d33 	.word	0x08016d33
 8016a44:	08016d33 	.word	0x08016d33
 8016a48:	08016bb1 	.word	0x08016bb1
                case GUMI_NAV_POSLLH:
                	p_parent->_coord_deg[PIF_GPS_LON] = p_packet->payload.posllh.lon / 10000000.0;
 8016a4c:	693b      	ldr	r3, [r7, #16]
 8016a4e:	689b      	ldr	r3, [r3, #8]
 8016a50:	4618      	mov	r0, r3
 8016a52:	f7e9 fd25 	bl	80004a0 <__aeabi_i2d>
 8016a56:	a360      	add	r3, pc, #384	; (adr r3, 8016bd8 <_evtParsing+0x300>)
 8016a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a5c:	f7e9 feb4 	bl	80007c8 <__aeabi_ddiv>
 8016a60:	4602      	mov	r2, r0
 8016a62:	460b      	mov	r3, r1
 8016a64:	68f9      	ldr	r1, [r7, #12]
 8016a66:	e9c1 2308 	strd	r2, r3, [r1, #32]
                	p_parent->_coord_deg[PIF_GPS_LAT] = p_packet->payload.posllh.lat / 10000000.0;
 8016a6a:	693b      	ldr	r3, [r7, #16]
 8016a6c:	68db      	ldr	r3, [r3, #12]
 8016a6e:	4618      	mov	r0, r3
 8016a70:	f7e9 fd16 	bl	80004a0 <__aeabi_i2d>
 8016a74:	a358      	add	r3, pc, #352	; (adr r3, 8016bd8 <_evtParsing+0x300>)
 8016a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a7a:	f7e9 fea5 	bl	80007c8 <__aeabi_ddiv>
 8016a7e:	4602      	mov	r2, r0
 8016a80:	460b      	mov	r3, r1
 8016a82:	68f9      	ldr	r1, [r7, #12]
 8016a84:	e9c1 2306 	strd	r2, r3, [r1, #24]
                	p_parent->_altitude = p_packet->payload.posllh.h_msl / 1000.0;
 8016a88:	693b      	ldr	r3, [r7, #16]
 8016a8a:	695b      	ldr	r3, [r3, #20]
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	f7e9 fd07 	bl	80004a0 <__aeabi_i2d>
 8016a92:	f04f 0200 	mov.w	r2, #0
 8016a96:	4b54      	ldr	r3, [pc, #336]	; (8016be8 <_evtParsing+0x310>)
 8016a98:	f7e9 fe96 	bl	80007c8 <__aeabi_ddiv>
 8016a9c:	4602      	mov	r2, r0
 8016a9e:	460b      	mov	r3, r1
 8016aa0:	68f9      	ldr	r1, [r7, #12]
 8016aa2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                	p_parent->_horizontal_acc = p_packet->payload.posllh.h_acc;
 8016aa6:	693b      	ldr	r3, [r7, #16]
 8016aa8:	699a      	ldr	r2, [r3, #24]
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	641a      	str	r2, [r3, #64]	; 0x40
                	p_parent->_vertical_acc = p_packet->payload.posllh.v_acc;
 8016aae:	693b      	ldr	r3, [r7, #16]
 8016ab0:	69da      	ldr	r2, [r3, #28]
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	645a      	str	r2, [r3, #68]	; 0x44
                    p_parent->_fix = next_fix;
 8016ab6:	4b4d      	ldr	r3, [pc, #308]	; (8016bec <_evtParsing+0x314>)
 8016ab8:	781b      	ldrb	r3, [r3, #0]
 8016aba:	f003 0301 	and.w	r3, r3, #1
 8016abe:	b2d9      	uxtb	r1, r3
 8016ac0:	68fa      	ldr	r2, [r7, #12]
 8016ac2:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016ac6:	f361 0300 	bfi	r3, r1, #0, #1
 8016aca:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    _new_position = TRUE;
 8016ace:	4b48      	ldr	r3, [pc, #288]	; (8016bf0 <_evtParsing+0x318>)
 8016ad0:	2201      	movs	r2, #1
 8016ad2:	701a      	strb	r2, [r3, #0]
                    // Update GPS update rate table.
                    p_parent->_update_rate[0] = p_parent->_update_rate[1];
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	649a      	str	r2, [r3, #72]	; 0x48
                    p_parent->_update_rate[1] = pif_cumulative_timer1ms;
 8016adc:	4b45      	ldr	r3, [pc, #276]	; (8016bf4 <_evtParsing+0x31c>)
 8016ade:	681a      	ldr	r2, [r3, #0]
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	64da      	str	r2, [r3, #76]	; 0x4c
                    break;
 8016ae4:	e13f      	b.n	8016d66 <_evtParsing+0x48e>

                case GUMI_NAV_PVT:
                	p_parent->_utc.year = 20 + p_packet->payload.pvt.year - 2000;
 8016ae6:	693b      	ldr	r3, [r7, #16]
 8016ae8:	891b      	ldrh	r3, [r3, #8]
 8016aea:	b2db      	uxtb	r3, r3
 8016aec:	3344      	adds	r3, #68	; 0x44
 8016aee:	b2da      	uxtb	r2, r3
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	739a      	strb	r2, [r3, #14]
                	p_parent->_utc.month = p_packet->payload.pvt.month;
 8016af4:	693b      	ldr	r3, [r7, #16]
 8016af6:	7a9a      	ldrb	r2, [r3, #10]
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	73da      	strb	r2, [r3, #15]
                	p_parent->_utc.day = p_packet->payload.pvt.day;
 8016afc:	693b      	ldr	r3, [r7, #16]
 8016afe:	7ada      	ldrb	r2, [r3, #11]
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	741a      	strb	r2, [r3, #16]
                	p_parent->_utc.hour = p_packet->payload.pvt.hour;
 8016b04:	693b      	ldr	r3, [r7, #16]
 8016b06:	7b1a      	ldrb	r2, [r3, #12]
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	745a      	strb	r2, [r3, #17]
                	p_parent->_utc.minute = p_packet->payload.pvt.min;
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	7b5a      	ldrb	r2, [r3, #13]
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	749a      	strb	r2, [r3, #18]
                	p_parent->_utc.second = p_packet->payload.pvt.sec;
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	7b9a      	ldrb	r2, [r3, #14]
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	74da      	strb	r2, [r3, #19]
                	p_parent->_utc.millisecond = p_packet->payload.pvt.nano / 1000000UL;
 8016b1c:	693b      	ldr	r3, [r7, #16]
 8016b1e:	695b      	ldr	r3, [r3, #20]
 8016b20:	461a      	mov	r2, r3
 8016b22:	4b35      	ldr	r3, [pc, #212]	; (8016bf8 <_evtParsing+0x320>)
 8016b24:	fba3 2302 	umull	r2, r3, r3, r2
 8016b28:	0c9b      	lsrs	r3, r3, #18
 8016b2a:	b29a      	uxth	r2, r3
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	829a      	strh	r2, [r3, #20]
                    break;
 8016b30:	e119      	b.n	8016d66 <_evtParsing+0x48e>

                case GUMI_NAV_SOL:
                    next_fix = (p_packet->payload.sol.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.sol.gps_fix == FIX_3D);
 8016b32:	693b      	ldr	r3, [r7, #16]
 8016b34:	7bdb      	ldrb	r3, [r3, #15]
 8016b36:	f003 0301 	and.w	r3, r3, #1
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d005      	beq.n	8016b4a <_evtParsing+0x272>
 8016b3e:	693b      	ldr	r3, [r7, #16]
 8016b40:	7b9b      	ldrb	r3, [r3, #14]
 8016b42:	2b03      	cmp	r3, #3
 8016b44:	d101      	bne.n	8016b4a <_evtParsing+0x272>
 8016b46:	2301      	movs	r3, #1
 8016b48:	e000      	b.n	8016b4c <_evtParsing+0x274>
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	b2da      	uxtb	r2, r3
 8016b4e:	4b27      	ldr	r3, [pc, #156]	; (8016bec <_evtParsing+0x314>)
 8016b50:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016b52:	4b26      	ldr	r3, [pc, #152]	; (8016bec <_evtParsing+0x314>)
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d106      	bne.n	8016b68 <_evtParsing+0x290>
                    	p_parent->_fix = FALSE;
 8016b5a:	68fa      	ldr	r2, [r7, #12]
 8016b5c:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016b60:	f36f 0300 	bfc	r3, #0, #1
 8016b64:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    p_parent->_num_sat = p_packet->payload.sol.num_sv;
 8016b68:	693b      	ldr	r3, [r7, #16]
 8016b6a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    break;
 8016b74:	e0f7      	b.n	8016d66 <_evtParsing+0x48e>

                case GUMI_NAV_STATUS:
                    next_fix = (p_packet->payload.status.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.status.gps_fix == FIX_3D);
 8016b76:	693b      	ldr	r3, [r7, #16]
 8016b78:	7a5b      	ldrb	r3, [r3, #9]
 8016b7a:	f003 0301 	and.w	r3, r3, #1
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d005      	beq.n	8016b8e <_evtParsing+0x2b6>
 8016b82:	693b      	ldr	r3, [r7, #16]
 8016b84:	7a1b      	ldrb	r3, [r3, #8]
 8016b86:	2b03      	cmp	r3, #3
 8016b88:	d101      	bne.n	8016b8e <_evtParsing+0x2b6>
 8016b8a:	2301      	movs	r3, #1
 8016b8c:	e000      	b.n	8016b90 <_evtParsing+0x2b8>
 8016b8e:	2300      	movs	r3, #0
 8016b90:	b2da      	uxtb	r2, r3
 8016b92:	4b16      	ldr	r3, [pc, #88]	; (8016bec <_evtParsing+0x314>)
 8016b94:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016b96:	4b15      	ldr	r3, [pc, #84]	; (8016bec <_evtParsing+0x314>)
 8016b98:	781b      	ldrb	r3, [r3, #0]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	f040 80e0 	bne.w	8016d60 <_evtParsing+0x488>
                    	p_parent->_fix = FALSE;
 8016ba0:	68fa      	ldr	r2, [r7, #12]
 8016ba2:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016ba6:	f36f 0300 	bfc	r3, #0, #1
 8016baa:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    break;
 8016bae:	e0d7      	b.n	8016d60 <_evtParsing+0x488>

                case GUMI_NAV_SVINFO:
                	p_owner->_num_ch = p_packet->payload.sv_info.num_ch;
 8016bb0:	693b      	ldr	r3, [r7, #16]
 8016bb2:	7a1a      	ldrb	r2, [r3, #8]
 8016bb4:	697b      	ldr	r3, [r7, #20]
 8016bb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    if (p_owner->_num_ch > 16)
 8016bba:	697b      	ldr	r3, [r7, #20]
 8016bbc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8016bc0:	2b10      	cmp	r3, #16
 8016bc2:	d903      	bls.n	8016bcc <_evtParsing+0x2f4>
                    	p_owner->_num_ch = 16;
 8016bc4:	697b      	ldr	r3, [r7, #20]
 8016bc6:	2210      	movs	r2, #16
 8016bc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016bcc:	2300      	movs	r3, #0
 8016bce:	61fb      	str	r3, [r7, #28]
 8016bd0:	e053      	b.n	8016c7a <_evtParsing+0x3a2>
 8016bd2:	bf00      	nop
 8016bd4:	f3af 8000 	nop.w
 8016bd8:	00000000 	.word	0x00000000
 8016bdc:	416312d0 	.word	0x416312d0
 8016be0:	2000006c 	.word	0x2000006c
 8016be4:	08027ca0 	.word	0x08027ca0
 8016be8:	408f4000 	.word	0x408f4000
 8016bec:	20002087 	.word	0x20002087
 8016bf0:	20002088 	.word	0x20002088
 8016bf4:	20001f08 	.word	0x20001f08
 8016bf8:	431bde83 	.word	0x431bde83
                    	p_owner->_svinfo_chn[i] = p_packet->payload.sv_info.channel[i].chn;
 8016bfc:	6939      	ldr	r1, [r7, #16]
 8016bfe:	69fa      	ldr	r2, [r7, #28]
 8016c00:	4613      	mov	r3, r2
 8016c02:	005b      	lsls	r3, r3, #1
 8016c04:	4413      	add	r3, r2
 8016c06:	009b      	lsls	r3, r3, #2
 8016c08:	440b      	add	r3, r1
 8016c0a:	330c      	adds	r3, #12
 8016c0c:	7819      	ldrb	r1, [r3, #0]
 8016c0e:	697a      	ldr	r2, [r7, #20]
 8016c10:	69fb      	ldr	r3, [r7, #28]
 8016c12:	4413      	add	r3, r2
 8016c14:	3379      	adds	r3, #121	; 0x79
 8016c16:	460a      	mov	r2, r1
 8016c18:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_svid[i] = p_packet->payload.sv_info.channel[i].svid;
 8016c1a:	6939      	ldr	r1, [r7, #16]
 8016c1c:	69fa      	ldr	r2, [r7, #28]
 8016c1e:	4613      	mov	r3, r2
 8016c20:	005b      	lsls	r3, r3, #1
 8016c22:	4413      	add	r3, r2
 8016c24:	009b      	lsls	r3, r3, #2
 8016c26:	440b      	add	r3, r1
 8016c28:	330d      	adds	r3, #13
 8016c2a:	7819      	ldrb	r1, [r3, #0]
 8016c2c:	697a      	ldr	r2, [r7, #20]
 8016c2e:	69fb      	ldr	r3, [r7, #28]
 8016c30:	4413      	add	r3, r2
 8016c32:	3389      	adds	r3, #137	; 0x89
 8016c34:	460a      	mov	r2, r1
 8016c36:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_quality[i] = p_packet->payload.sv_info.channel[i].quality;
 8016c38:	6939      	ldr	r1, [r7, #16]
 8016c3a:	69fa      	ldr	r2, [r7, #28]
 8016c3c:	4613      	mov	r3, r2
 8016c3e:	005b      	lsls	r3, r3, #1
 8016c40:	4413      	add	r3, r2
 8016c42:	009b      	lsls	r3, r3, #2
 8016c44:	440b      	add	r3, r1
 8016c46:	330f      	adds	r3, #15
 8016c48:	7819      	ldrb	r1, [r3, #0]
 8016c4a:	697a      	ldr	r2, [r7, #20]
 8016c4c:	69fb      	ldr	r3, [r7, #28]
 8016c4e:	4413      	add	r3, r2
 8016c50:	3399      	adds	r3, #153	; 0x99
 8016c52:	460a      	mov	r2, r1
 8016c54:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_cno[i] = p_packet->payload.sv_info.channel[i].cno;
 8016c56:	6939      	ldr	r1, [r7, #16]
 8016c58:	69fa      	ldr	r2, [r7, #28]
 8016c5a:	4613      	mov	r3, r2
 8016c5c:	005b      	lsls	r3, r3, #1
 8016c5e:	4413      	add	r3, r2
 8016c60:	009b      	lsls	r3, r3, #2
 8016c62:	440b      	add	r3, r1
 8016c64:	3310      	adds	r3, #16
 8016c66:	7819      	ldrb	r1, [r3, #0]
 8016c68:	697a      	ldr	r2, [r7, #20]
 8016c6a:	69fb      	ldr	r3, [r7, #28]
 8016c6c:	4413      	add	r3, r2
 8016c6e:	33a9      	adds	r3, #169	; 0xa9
 8016c70:	460a      	mov	r2, r1
 8016c72:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016c74:	69fb      	ldr	r3, [r7, #28]
 8016c76:	3301      	adds	r3, #1
 8016c78:	61fb      	str	r3, [r7, #28]
 8016c7a:	697b      	ldr	r3, [r7, #20]
 8016c7c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8016c80:	461a      	mov	r2, r3
 8016c82:	69fb      	ldr	r3, [r7, #28]
 8016c84:	4293      	cmp	r3, r2
 8016c86:	dbb9      	blt.n	8016bfc <_evtParsing+0x324>
                    }
                    // Update GPS SVIFO update rate table.
                    p_owner->_svinfo_rate[0] = p_owner->_svinfo_rate[1];
 8016c88:	697b      	ldr	r3, [r7, #20]
 8016c8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8016c8e:	697b      	ldr	r3, [r7, #20]
 8016c90:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                    p_owner->_svinfo_rate[1] = pif_cumulative_timer1ms;
 8016c94:	4b54      	ldr	r3, [pc, #336]	; (8016de8 <_evtParsing+0x510>)
 8016c96:	681a      	ldr	r2, [r3, #0]
 8016c98:	697b      	ldr	r3, [r7, #20]
 8016c9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
                    break;
 8016c9e:	e062      	b.n	8016d66 <_evtParsing+0x48e>

                case GUMI_NAV_TIMEUTC:
                	if (p_packet->payload.time_utc.valid & 4) {
 8016ca0:	693b      	ldr	r3, [r7, #16]
 8016ca2:	7ddb      	ldrb	r3, [r3, #23]
 8016ca4:	f003 0304 	and.w	r3, r3, #4
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d05b      	beq.n	8016d64 <_evtParsing+0x48c>
						p_parent->_utc.year = p_packet->payload.time_utc.year - 2000;
 8016cac:	693b      	ldr	r3, [r7, #16]
 8016cae:	8a1b      	ldrh	r3, [r3, #16]
 8016cb0:	b2db      	uxtb	r3, r3
 8016cb2:	3330      	adds	r3, #48	; 0x30
 8016cb4:	b2da      	uxtb	r2, r3
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	739a      	strb	r2, [r3, #14]
						p_parent->_utc.month = p_packet->payload.time_utc.month;
 8016cba:	693b      	ldr	r3, [r7, #16]
 8016cbc:	7c9a      	ldrb	r2, [r3, #18]
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	73da      	strb	r2, [r3, #15]
						p_parent->_utc.day = p_packet->payload.time_utc.day;
 8016cc2:	693b      	ldr	r3, [r7, #16]
 8016cc4:	7cda      	ldrb	r2, [r3, #19]
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	741a      	strb	r2, [r3, #16]
						p_parent->_utc.hour = p_packet->payload.time_utc.hour;
 8016cca:	693b      	ldr	r3, [r7, #16]
 8016ccc:	7d1a      	ldrb	r2, [r3, #20]
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	745a      	strb	r2, [r3, #17]
						p_parent->_utc.minute = p_packet->payload.time_utc.min;
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	7d5a      	ldrb	r2, [r3, #21]
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	749a      	strb	r2, [r3, #18]
						p_parent->_utc.second = p_packet->payload.time_utc.sec;
 8016cda:	693b      	ldr	r3, [r7, #16]
 8016cdc:	7d9a      	ldrb	r2, [r3, #22]
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	74da      	strb	r2, [r3, #19]
						p_parent->_utc.millisecond = p_packet->payload.time_utc.nano / 1000000UL;
 8016ce2:	693b      	ldr	r3, [r7, #16]
 8016ce4:	68db      	ldr	r3, [r3, #12]
 8016ce6:	461a      	mov	r2, r3
 8016ce8:	4b40      	ldr	r3, [pc, #256]	; (8016dec <_evtParsing+0x514>)
 8016cea:	fba3 2302 	umull	r2, r3, r3, r2
 8016cee:	0c9b      	lsrs	r3, r3, #18
 8016cf0:	b29a      	uxth	r2, r3
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	829a      	strh	r2, [r3, #20]
                	}
                	break;
 8016cf6:	e035      	b.n	8016d64 <_evtParsing+0x48c>

                case GUMI_NAV_VELNED:
                	p_parent->_ground_speed = p_packet->payload.velned.speed;
 8016cf8:	693b      	ldr	r3, [r7, #16]
 8016cfa:	695b      	ldr	r3, [r3, #20]
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f7e9 fbbf 	bl	8000480 <__aeabi_ui2d>
 8016d02:	4602      	mov	r2, r0
 8016d04:	460b      	mov	r3, r1
 8016d06:	68f9      	ldr	r1, [r7, #12]
 8016d08:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
                	p_parent->_ground_course = p_packet->payload.velned.heading / 100000.0;
 8016d0c:	693b      	ldr	r3, [r7, #16]
 8016d0e:	69db      	ldr	r3, [r3, #28]
 8016d10:	4618      	mov	r0, r3
 8016d12:	f7e9 fbc5 	bl	80004a0 <__aeabi_i2d>
 8016d16:	a332      	add	r3, pc, #200	; (adr r3, 8016de0 <_evtParsing+0x508>)
 8016d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d1c:	f7e9 fd54 	bl	80007c8 <__aeabi_ddiv>
 8016d20:	4602      	mov	r2, r0
 8016d22:	460b      	mov	r3, r1
 8016d24:	68f9      	ldr	r1, [r7, #12]
 8016d26:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
                    _new_speed = TRUE;
 8016d2a:	4b31      	ldr	r3, [pc, #196]	; (8016df0 <_evtParsing+0x518>)
 8016d2c:	2201      	movs	r2, #1
 8016d2e:	701a      	strb	r2, [r3, #0]
                    break;
 8016d30:	e019      	b.n	8016d66 <_evtParsing+0x48e>

                default:
                	error = TRUE;
 8016d32:	2301      	movs	r3, #1
 8016d34:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
            		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 8016d36:	697b      	ldr	r3, [r7, #20]
 8016d38:	8b9b      	ldrh	r3, [r3, #28]
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	4b2d      	ldr	r3, [pc, #180]	; (8016df4 <_evtParsing+0x51c>)
 8016d3e:	68db      	ldr	r3, [r3, #12]
 8016d40:	693a      	ldr	r2, [r7, #16]
 8016d42:	7812      	ldrb	r2, [r2, #0]
 8016d44:	4611      	mov	r1, r2
 8016d46:	693a      	ldr	r2, [r7, #16]
 8016d48:	7852      	ldrb	r2, [r2, #1]
 8016d4a:	9202      	str	r2, [sp, #8]
 8016d4c:	9101      	str	r1, [sp, #4]
 8016d4e:	9300      	str	r3, [sp, #0]
 8016d50:	4603      	mov	r3, r0
 8016d52:	f240 1237 	movw	r2, #311	; 0x137
 8016d56:	4928      	ldr	r1, [pc, #160]	; (8016df8 <_evtParsing+0x520>)
 8016d58:	2004      	movs	r0, #4
 8016d5a:	f7fc fd71 	bl	8013840 <pifLog_Printf>
#endif
                    break;
 8016d5e:	e002      	b.n	8016d66 <_evtParsing+0x48e>
                    break;
 8016d60:	bf00      	nop
 8016d62:	e014      	b.n	8016d8e <_evtParsing+0x4b6>
                	break;
 8016d64:	bf00      	nop
            }
        	break;
 8016d66:	e012      	b.n	8016d8e <_evtParsing+0x4b6>

		default:
        	error = TRUE;
 8016d68:	2301      	movs	r3, #1
 8016d6a:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id);
 8016d6c:	697b      	ldr	r3, [r7, #20]
 8016d6e:	8b9b      	ldrh	r3, [r3, #28]
 8016d70:	4619      	mov	r1, r3
 8016d72:	4b20      	ldr	r3, [pc, #128]	; (8016df4 <_evtParsing+0x51c>)
 8016d74:	68db      	ldr	r3, [r3, #12]
 8016d76:	693a      	ldr	r2, [r7, #16]
 8016d78:	7812      	ldrb	r2, [r2, #0]
 8016d7a:	9201      	str	r2, [sp, #4]
 8016d7c:	9300      	str	r3, [sp, #0]
 8016d7e:	460b      	mov	r3, r1
 8016d80:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8016d84:	491d      	ldr	r1, [pc, #116]	; (8016dfc <_evtParsing+0x524>)
 8016d86:	2004      	movs	r0, #4
 8016d88:	f7fc fd5a 	bl	8013840 <pifLog_Printf>
#endif
			break;
 8016d8c:	bf00      	nop
        }

    	if (!error && p_owner->evt_ubx_receive) (*p_owner->evt_ubx_receive)(p_packet);
 8016d8e:	7efb      	ldrb	r3, [r7, #27]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d107      	bne.n	8016da4 <_evtParsing+0x4cc>
 8016d94:	697b      	ldr	r3, [r7, #20]
 8016d96:	685b      	ldr	r3, [r3, #4]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d003      	beq.n	8016da4 <_evtParsing+0x4cc>
 8016d9c:	697b      	ldr	r3, [r7, #20]
 8016d9e:	685b      	ldr	r3, [r3, #4]
 8016da0:	6938      	ldr	r0, [r7, #16]
 8016da2:	4798      	blx	r3

        if (_new_position && _new_speed) {
 8016da4:	4b16      	ldr	r3, [pc, #88]	; (8016e00 <_evtParsing+0x528>)
 8016da6:	781b      	ldrb	r3, [r3, #0]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d00f      	beq.n	8016dcc <_evtParsing+0x4f4>
 8016dac:	4b10      	ldr	r3, [pc, #64]	; (8016df0 <_evtParsing+0x518>)
 8016dae:	781b      	ldrb	r3, [r3, #0]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d00b      	beq.n	8016dcc <_evtParsing+0x4f4>
			pifGps_SendEvent(&p_owner->_gps);
 8016db4:	697b      	ldr	r3, [r7, #20]
 8016db6:	3310      	adds	r3, #16
 8016db8:	4618      	mov	r0, r3
 8016dba:	f7fe feaf 	bl	8015b1c <pifGps_SendEvent>
            _new_speed = _new_position = FALSE;
 8016dbe:	4b10      	ldr	r3, [pc, #64]	; (8016e00 <_evtParsing+0x528>)
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	701a      	strb	r2, [r3, #0]
 8016dc4:	4b0e      	ldr	r3, [pc, #56]	; (8016e00 <_evtParsing+0x528>)
 8016dc6:	781a      	ldrb	r2, [r3, #0]
 8016dc8:	4b09      	ldr	r3, [pc, #36]	; (8016df0 <_evtParsing+0x518>)
 8016dca:	701a      	strb	r2, [r3, #0]
        }
    	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8016dcc:	697b      	ldr	r3, [r7, #20]
 8016dce:	2200      	movs	r2, #0
 8016dd0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8016dd4:	e000      	b.n	8016dd8 <_evtParsing+0x500>
    if (!p_owner->_gps.evt_receive) return;
 8016dd6:	bf00      	nop
    }
}
 8016dd8:	3720      	adds	r7, #32
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	bd80      	pop	{r7, pc}
 8016dde:	bf00      	nop
 8016de0:	00000000 	.word	0x00000000
 8016de4:	40f86a00 	.word	0x40f86a00
 8016de8:	20001f08 	.word	0x20001f08
 8016dec:	431bde83 	.word	0x431bde83
 8016df0:	20002089 	.word	0x20002089
 8016df4:	2000006c 	.word	0x2000006c
 8016df8:	08027ca0 	.word	0x08027ca0
 8016dfc:	08027cbc 	.word	0x08027cbc
 8016e00:	20002088 	.word	0x20002088

08016e04 <_makeNmeaPacket>:

static BOOL _makeNmeaPacket(PifGpsUblox* p_owner, char* p_data, BOOL blocking)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b088      	sub	sp, #32
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	60f8      	str	r0, [r7, #12]
 8016e0c:	60b9      	str	r1, [r7, #8]
 8016e0e:	4613      	mov	r3, r2
 8016e10:	71fb      	strb	r3, [r7, #7]
	uint8_t header[4];
	uint8_t parity = 0;
 8016e12:	2300      	movs	r3, #0
 8016e14:	77fb      	strb	r3, [r7, #31]
	int i;

	i = 1;
 8016e16:	2301      	movs	r3, #1
 8016e18:	61bb      	str	r3, [r7, #24]
	while (TRUE) {
		if (p_data[i] == '*') {
 8016e1a:	69bb      	ldr	r3, [r7, #24]
 8016e1c:	68ba      	ldr	r2, [r7, #8]
 8016e1e:	4413      	add	r3, r2
 8016e20:	781b      	ldrb	r3, [r3, #0]
 8016e22:	2b2a      	cmp	r3, #42	; 0x2a
 8016e24:	d13a      	bne.n	8016e9c <_makeNmeaPacket+0x98>
			i++;
 8016e26:	69bb      	ldr	r3, [r7, #24]
 8016e28:	3301      	adds	r3, #1
 8016e2a:	61bb      	str	r3, [r7, #24]
			break;
 8016e2c:	bf00      	nop
		else {
			parity ^= p_data[i];
			i++;
		}
	}
	p_data[i] = kPifHexUpperChar[(parity >> 4) & 0x0F]; i++;
 8016e2e:	4b47      	ldr	r3, [pc, #284]	; (8016f4c <_makeNmeaPacket+0x148>)
 8016e30:	681a      	ldr	r2, [r3, #0]
 8016e32:	7ffb      	ldrb	r3, [r7, #31]
 8016e34:	091b      	lsrs	r3, r3, #4
 8016e36:	b2db      	uxtb	r3, r3
 8016e38:	f003 030f 	and.w	r3, r3, #15
 8016e3c:	441a      	add	r2, r3
 8016e3e:	69bb      	ldr	r3, [r7, #24]
 8016e40:	68b9      	ldr	r1, [r7, #8]
 8016e42:	440b      	add	r3, r1
 8016e44:	7812      	ldrb	r2, [r2, #0]
 8016e46:	701a      	strb	r2, [r3, #0]
 8016e48:	69bb      	ldr	r3, [r7, #24]
 8016e4a:	3301      	adds	r3, #1
 8016e4c:	61bb      	str	r3, [r7, #24]
	p_data[i] = kPifHexUpperChar[parity & 0x0F]; i++;
 8016e4e:	4b3f      	ldr	r3, [pc, #252]	; (8016f4c <_makeNmeaPacket+0x148>)
 8016e50:	681a      	ldr	r2, [r3, #0]
 8016e52:	7ffb      	ldrb	r3, [r7, #31]
 8016e54:	f003 030f 	and.w	r3, r3, #15
 8016e58:	441a      	add	r2, r3
 8016e5a:	69bb      	ldr	r3, [r7, #24]
 8016e5c:	68b9      	ldr	r1, [r7, #8]
 8016e5e:	440b      	add	r3, r1
 8016e60:	7812      	ldrb	r2, [r2, #0]
 8016e62:	701a      	strb	r2, [r3, #0]
 8016e64:	69bb      	ldr	r3, [r7, #24]
 8016e66:	3301      	adds	r3, #1
 8016e68:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\r'; i++;
 8016e6a:	69bb      	ldr	r3, [r7, #24]
 8016e6c:	68ba      	ldr	r2, [r7, #8]
 8016e6e:	4413      	add	r3, r2
 8016e70:	220d      	movs	r2, #13
 8016e72:	701a      	strb	r2, [r3, #0]
 8016e74:	69bb      	ldr	r3, [r7, #24]
 8016e76:	3301      	adds	r3, #1
 8016e78:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\n'; i++;
 8016e7a:	69bb      	ldr	r3, [r7, #24]
 8016e7c:	68ba      	ldr	r2, [r7, #8]
 8016e7e:	4413      	add	r3, r2
 8016e80:	220a      	movs	r2, #10
 8016e82:	701a      	strb	r2, [r3, #0]
 8016e84:	69bb      	ldr	r3, [r7, #24]
 8016e86:	3301      	adds	r3, #1
 8016e88:	61bb      	str	r3, [r7, #24]
	p_data[i] = 0;
 8016e8a:	69bb      	ldr	r3, [r7, #24]
 8016e8c:	68ba      	ldr	r2, [r7, #8]
 8016e8e:	4413      	add	r3, r2
 8016e90:	2200      	movs	r2, #0
 8016e92:	701a      	strb	r2, [r3, #0]

	if (blocking) {
 8016e94:	79fb      	ldrb	r3, [r7, #7]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d01b      	beq.n	8016ed2 <_makeNmeaPacket+0xce>
 8016e9a:	e00f      	b.n	8016ebc <_makeNmeaPacket+0xb8>
			parity ^= p_data[i];
 8016e9c:	69bb      	ldr	r3, [r7, #24]
 8016e9e:	68ba      	ldr	r2, [r7, #8]
 8016ea0:	4413      	add	r3, r2
 8016ea2:	781a      	ldrb	r2, [r3, #0]
 8016ea4:	7ffb      	ldrb	r3, [r7, #31]
 8016ea6:	4053      	eors	r3, r2
 8016ea8:	77fb      	strb	r3, [r7, #31]
			i++;
 8016eaa:	69bb      	ldr	r3, [r7, #24]
 8016eac:	3301      	adds	r3, #1
 8016eae:	61bb      	str	r3, [r7, #24]
		if (p_data[i] == '*') {
 8016eb0:	e7b3      	b.n	8016e1a <_makeNmeaPacket+0x16>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
			if (!pifTaskManager_Yield()) break;
 8016eb2:	f7fd fe0f 	bl	8014ad4 <pifTaskManager_Yield>
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d009      	beq.n	8016ed0 <_makeNmeaPacket+0xcc>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7fc fee1 	bl	8013c8a <pifRingBuffer_IsEmpty>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d0f1      	beq.n	8016eb2 <_makeNmeaPacket+0xae>
 8016ece:	e000      	b.n	8016ed2 <_makeNmeaPacket+0xce>
			if (!pifTaskManager_Yield()) break;
 8016ed0:	bf00      	nop
		}
	}

	pifRingBuffer_BackupHead(&p_owner->__tx.buffer);
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f7fc ff58 	bl	8013d8e <pifRingBuffer_BackupHead>

	header[0] = i;
 8016ede:	69bb      	ldr	r3, [r7, #24]
 8016ee0:	b2db      	uxtb	r3, r3
 8016ee2:	753b      	strb	r3, [r7, #20]
	header[1] = 0;
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	757b      	strb	r3, [r7, #21]
	header[2] = 0;
 8016ee8:	2300      	movs	r3, #0
 8016eea:	75bb      	strb	r3, [r7, #22]
	header[3] = 0;
 8016eec:	2300      	movs	r3, #0
 8016eee:	75fb      	strb	r3, [r7, #23]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016ef6:	f107 0114 	add.w	r1, r7, #20
 8016efa:	2204      	movs	r2, #4
 8016efc:	4618      	mov	r0, r3
 8016efe:	f7fc ff97 	bl	8013e30 <pifRingBuffer_PutData>
 8016f02:	4603      	mov	r3, r0
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d013      	beq.n	8016f30 <_makeNmeaPacket+0x12c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016f0e:	7d3a      	ldrb	r2, [r7, #20]
 8016f10:	b292      	uxth	r2, r2
 8016f12:	68b9      	ldr	r1, [r7, #8]
 8016f14:	4618      	mov	r0, r3
 8016f16:	f7fc ff8b 	bl	8013e30 <pifRingBuffer_PutData>
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d009      	beq.n	8016f34 <_makeNmeaPacket+0x130>
	p_owner->__p_comm->_p_task->immediate = TRUE;
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016f26:	69db      	ldr	r3, [r3, #28]
 8016f28:	2201      	movs	r2, #1
 8016f2a:	705a      	strb	r2, [r3, #1]
	return TRUE;
 8016f2c:	2301      	movs	r3, #1
 8016f2e:	e009      	b.n	8016f44 <_makeNmeaPacket+0x140>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8016f30:	bf00      	nop
 8016f32:	e000      	b.n	8016f36 <_makeNmeaPacket+0x132>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8016f34:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.buffer);
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	f7fc ff34 	bl	8013daa <pifRingBuffer_RestoreHead>
	return FALSE;
 8016f42:	2300      	movs	r3, #0
}
 8016f44:	4618      	mov	r0, r3
 8016f46:	3720      	adds	r7, #32
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	bd80      	pop	{r7, pc}
 8016f4c:	20000060 	.word	0x20000060

08016f50 <_makeUbxPacket>:

static BOOL _makeUbxPacket(PifGpsUblox* p_owner, uint8_t* p_header, uint16_t length, uint8_t* p_payload, BOOL blocking)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b088      	sub	sp, #32
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	60f8      	str	r0, [r7, #12]
 8016f58:	60b9      	str	r1, [r7, #8]
 8016f5a:	603b      	str	r3, [r7, #0]
 8016f5c:	4613      	mov	r3, r2
 8016f5e:	80fb      	strh	r3, [r7, #6]
	uint8_t info[4];
	uint8_t tailer[2];
	uint16_t checksum;

	checksum = _checksumUbx(p_header + 2, p_payload, length);
 8016f60:	68bb      	ldr	r3, [r7, #8]
 8016f62:	3302      	adds	r3, #2
 8016f64:	88fa      	ldrh	r2, [r7, #6]
 8016f66:	6839      	ldr	r1, [r7, #0]
 8016f68:	4618      	mov	r0, r3
 8016f6a:	f7ff fb31 	bl	80165d0 <_checksumUbx>
 8016f6e:	4603      	mov	r3, r0
 8016f70:	83fb      	strh	r3, [r7, #30]
	tailer[0] = checksum & 0xFF;
 8016f72:	8bfb      	ldrh	r3, [r7, #30]
 8016f74:	b2db      	uxtb	r3, r3
 8016f76:	753b      	strb	r3, [r7, #20]
	tailer[1] = checksum >> 8;
 8016f78:	8bfb      	ldrh	r3, [r7, #30]
 8016f7a:	0a1b      	lsrs	r3, r3, #8
 8016f7c:	b29b      	uxth	r3, r3
 8016f7e:	b2db      	uxtb	r3, r3
 8016f80:	757b      	strb	r3, [r7, #21]

	if (blocking) {
 8016f82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d010      	beq.n	8016fac <_makeUbxPacket+0x5c>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016f8a:	e004      	b.n	8016f96 <_makeUbxPacket+0x46>
			if (!pifTaskManager_Yield()) break;
 8016f8c:	f7fd fda2 	bl	8014ad4 <pifTaskManager_Yield>
 8016f90:	4603      	mov	r3, r0
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d009      	beq.n	8016faa <_makeUbxPacket+0x5a>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	f7fc fe74 	bl	8013c8a <pifRingBuffer_IsEmpty>
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d0f1      	beq.n	8016f8c <_makeUbxPacket+0x3c>
 8016fa8:	e000      	b.n	8016fac <_makeUbxPacket+0x5c>
			if (!pifTaskManager_Yield()) break;
 8016faa:	bf00      	nop
		}
	}

	pifRingBuffer_BackupHead(&p_owner->__tx.buffer);
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	f7fc feeb 	bl	8013d8e <pifRingBuffer_BackupHead>

	info[0] = length + 8;
 8016fb8:	88fb      	ldrh	r3, [r7, #6]
 8016fba:	b2db      	uxtb	r3, r3
 8016fbc:	3308      	adds	r3, #8
 8016fbe:	b2db      	uxtb	r3, r3
 8016fc0:	763b      	strb	r3, [r7, #24]
	info[1] = 0;
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	767b      	strb	r3, [r7, #25]
	info[2] = 0;
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	76bb      	strb	r3, [r7, #26]
	info[3] = 0;
 8016fca:	2300      	movs	r3, #0
 8016fcc:	76fb      	strb	r3, [r7, #27]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016fd4:	f107 0118 	add.w	r1, r7, #24
 8016fd8:	2204      	movs	r2, #4
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f7fc ff28 	bl	8013e30 <pifRingBuffer_PutData>
 8016fe0:	4603      	mov	r3, r0
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d026      	beq.n	8017034 <_makeUbxPacket+0xe4>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016fec:	2206      	movs	r2, #6
 8016fee:	68b9      	ldr	r1, [r7, #8]
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f7fc ff1d 	bl	8013e30 <pifRingBuffer_PutData>
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d01d      	beq.n	8017038 <_makeUbxPacket+0xe8>
	if (length > 0) {
 8016ffc:	88fb      	ldrh	r3, [r7, #6]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d00a      	beq.n	8017018 <_makeUbxPacket+0xc8>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017008:	88fa      	ldrh	r2, [r7, #6]
 801700a:	6839      	ldr	r1, [r7, #0]
 801700c:	4618      	mov	r0, r3
 801700e:	f7fc ff0f 	bl	8013e30 <pifRingBuffer_PutData>
 8017012:	4603      	mov	r3, r0
 8017014:	2b00      	cmp	r3, #0
 8017016:	d011      	beq.n	801703c <_makeUbxPacket+0xec>
	}
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 801701e:	f107 0114 	add.w	r1, r7, #20
 8017022:	2202      	movs	r2, #2
 8017024:	4618      	mov	r0, r3
 8017026:	f7fc ff03 	bl	8013e30 <pifRingBuffer_PutData>
 801702a:	4603      	mov	r3, r0
 801702c:	2b00      	cmp	r3, #0
 801702e:	d007      	beq.n	8017040 <_makeUbxPacket+0xf0>
	return TRUE;
 8017030:	2301      	movs	r3, #1
 8017032:	e00d      	b.n	8017050 <_makeUbxPacket+0x100>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 8017034:	bf00      	nop
 8017036:	e004      	b.n	8017042 <_makeUbxPacket+0xf2>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 8017038:	bf00      	nop
 801703a:	e002      	b.n	8017042 <_makeUbxPacket+0xf2>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 801703c:	bf00      	nop
 801703e:	e000      	b.n	8017042 <_makeUbxPacket+0xf2>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 8017040:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.buffer);
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017048:	4618      	mov	r0, r3
 801704a:	f7fc feae 	bl	8013daa <pifRingBuffer_RestoreHead>
	return FALSE;
 801704e:	2300      	movs	r3, #0
}
 8017050:	4618      	mov	r0, r3
 8017052:	3720      	adds	r7, #32
 8017054:	46bd      	mov	sp, r7
 8017056:	bd80      	pop	{r7, pc}

08017058 <_evtSending>:

BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 8017058:	b5b0      	push	{r4, r5, r7, lr}
 801705a:	b084      	sub	sp, #16
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
 8017060:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	switch (p_owner->__tx.state) {
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 801706c:	2b02      	cmp	r3, #2
 801706e:	d05d      	beq.n	801712c <_evtSending+0xd4>
 8017070:	2b02      	cmp	r3, #2
 8017072:	dc72      	bgt.n	801715a <_evtSending+0x102>
 8017074:	2b00      	cmp	r3, #0
 8017076:	d002      	beq.n	801707e <_evtSending+0x26>
 8017078:	2b01      	cmp	r3, #1
 801707a:	d01c      	beq.n	80170b6 <_evtSending+0x5e>
			p_owner->__tx.state = GUTS_IDLE;
		}
		break;

	default:
		break;
 801707c:	e06d      	b.n	801715a <_evtSending+0x102>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017084:	4618      	mov	r0, r3
 8017086:	f7fc fe00 	bl	8013c8a <pifRingBuffer_IsEmpty>
 801708a:	4603      	mov	r3, r0
 801708c:	2b00      	cmp	r3, #0
 801708e:	d166      	bne.n	801715e <_evtSending+0x106>
			pifRingBuffer_CopyToArray(p_owner->__tx.ui.info, 4, &p_owner->__tx.buffer, 0);
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	f203 207a 	addw	r0, r3, #634	; 0x27a
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 801709c:	2300      	movs	r3, #0
 801709e:	2104      	movs	r1, #4
 80170a0:	f7fc ff89 	bl	8013fb6 <pifRingBuffer_CopyToArray>
			p_owner->__tx.pos = 4;
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	2204      	movs	r2, #4
 80170a8:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
			p_owner->__tx.state = GUTS_SENDING;
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	2201      	movs	r2, #1
 80170b0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		break;
 80170b4:	e053      	b.n	801715e <_evtSending+0x106>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
 80170c8:	b29b      	uxth	r3, r3
 80170ca:	4619      	mov	r1, r3
 80170cc:	4610      	mov	r0, r2
 80170ce:	f7fc fdb0 	bl	8013c32 <pifRingBuffer_GetTailPointer>
 80170d2:	4605      	mov	r5, r0
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	f503 7217 	add.w	r2, r3, #604	; 0x25c
				pifRingBuffer_GetLinerSize(&p_owner->__tx.buffer, p_owner->__tx.pos));
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 80170e0:	b29b      	uxth	r3, r3
 80170e2:	4619      	mov	r1, r3
 80170e4:	4610      	mov	r0, r2
 80170e6:	f7fc fe05 	bl	8013cf4 <pifRingBuffer_GetLinerSize>
 80170ea:	4603      	mov	r3, r0
 80170ec:	461a      	mov	r2, r3
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	4629      	mov	r1, r5
 80170f2:	4620      	mov	r0, r4
 80170f4:	4798      	blx	r3
 80170f6:	4603      	mov	r3, r0
 80170f8:	817b      	strh	r3, [r7, #10]
		p_owner->__tx.pos += length;
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	f893 227e 	ldrb.w	r2, [r3, #638]	; 0x27e
 8017100:	897b      	ldrh	r3, [r7, #10]
 8017102:	b2db      	uxtb	r3, r3
 8017104:	4413      	add	r3, r2
 8017106:	b2da      	uxtb	r2, r3
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
		if (p_owner->__tx.pos >= 4 + p_owner->__tx.ui.st.length) {
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 8017114:	3303      	adds	r3, #3
 8017116:	68fa      	ldr	r2, [r7, #12]
 8017118:	f892 227e 	ldrb.w	r2, [r2, #638]	; 0x27e
 801711c:	4293      	cmp	r3, r2
 801711e:	da03      	bge.n	8017128 <_evtSending+0xd0>
			p_owner->__tx.state = GUTS_WAIT_SENDED;
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	2202      	movs	r2, #2
 8017124:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		return TRUE;
 8017128:	2301      	movs	r3, #1
 801712a:	e01c      	b.n	8017166 <_evtSending+0x10e>
		if (!p_owner->__tx.ui.st.response) {
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 8017132:	2b00      	cmp	r3, #0
 8017134:	d115      	bne.n	8017162 <_evtSending+0x10a>
			pifRingBuffer_Remove(&p_owner->__tx.buffer, 4 + p_owner->__tx.ui.st.length);
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 8017142:	b29b      	uxth	r3, r3
 8017144:	3304      	adds	r3, #4
 8017146:	b29b      	uxth	r3, r3
 8017148:	4619      	mov	r1, r3
 801714a:	4610      	mov	r0, r2
 801714c:	f7fc ff79 	bl	8014042 <pifRingBuffer_Remove>
			p_owner->__tx.state = GUTS_IDLE;
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	2200      	movs	r2, #0
 8017154:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		break;
 8017158:	e003      	b.n	8017162 <_evtSending+0x10a>
		break;
 801715a:	bf00      	nop
 801715c:	e002      	b.n	8017164 <_evtSending+0x10c>
		break;
 801715e:	bf00      	nop
 8017160:	e000      	b.n	8017164 <_evtSending+0x10c>
		break;
 8017162:	bf00      	nop
	}
	return FALSE;
 8017164:	2300      	movs	r3, #0
}
 8017166:	4618      	mov	r0, r3
 8017168:	3710      	adds	r7, #16
 801716a:	46bd      	mov	sp, r7
 801716c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017170 <pifGpsUblox_Init>:

BOOL pifGpsUblox_Init(PifGpsUblox* p_owner, PifId id)
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b084      	sub	sp, #16
 8017174:	af02      	add	r7, sp, #8
 8017176:	6078      	str	r0, [r7, #4]
 8017178:	460b      	mov	r3, r1
 801717a:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d103      	bne.n	801718a <pifGpsUblox_Init+0x1a>
		pif_error = E_INVALID_PARAM;
 8017182:	4b1e      	ldr	r3, [pc, #120]	; (80171fc <pifGpsUblox_Init+0x8c>)
 8017184:	2201      	movs	r2, #1
 8017186:	701a      	strb	r2, [r3, #0]
		goto fail;
 8017188:	e026      	b.n	80171d8 <pifGpsUblox_Init+0x68>
	}

	memset(p_owner, 0, sizeof(PifGpsUblox));
 801718a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801718e:	2100      	movs	r1, #0
 8017190:	6878      	ldr	r0, [r7, #4]
 8017192:	f00c f87b 	bl	802328c <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	3310      	adds	r3, #16
 801719a:	887a      	ldrh	r2, [r7, #2]
 801719c:	4611      	mov	r1, r2
 801719e:	4618      	mov	r0, r3
 80171a0:	f7fe fc3a 	bl	8015a18 <pifGps_Init>
 80171a4:	4603      	mov	r3, r0
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d013      	beq.n	80171d2 <pifGpsUblox_Init+0x62>

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80171b0:	2240      	movs	r2, #64	; 0x40
 80171b2:	2100      	movs	r1, #0
 80171b4:	4618      	mov	r0, r3
 80171b6:	f7fc fccb 	bl	8013b50 <pifRingBuffer_InitHeap>
 80171ba:	4603      	mov	r3, r0
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d00a      	beq.n	80171d6 <pifGpsUblox_Init+0x66>
    pifRingBuffer_SetName(&p_owner->__tx.buffer, "TxB");
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80171c6:	490e      	ldr	r1, [pc, #56]	; (8017200 <pifGpsUblox_Init+0x90>)
 80171c8:	4618      	mov	r0, r3
 80171ca:	f7fc fd24 	bl	8013c16 <pifRingBuffer_SetName>
    return TRUE;
 80171ce:	2301      	movs	r3, #1
 80171d0:	e010      	b.n	80171f4 <pifGpsUblox_Init+0x84>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 80171d2:	bf00      	nop
 80171d4:	e000      	b.n	80171d8 <pifGpsUblox_Init+0x68>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 80171d6:	bf00      	nop

fail:
	pifGpsUblox_Clear(p_owner);
 80171d8:	6878      	ldr	r0, [r7, #4]
 80171da:	f000 f815 	bl	8017208 <pifGpsUblox_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 80171de:	887b      	ldrh	r3, [r7, #2]
 80171e0:	4a06      	ldr	r2, [pc, #24]	; (80171fc <pifGpsUblox_Init+0x8c>)
 80171e2:	7812      	ldrb	r2, [r2, #0]
 80171e4:	9200      	str	r2, [sp, #0]
 80171e6:	f240 12d5 	movw	r2, #469	; 0x1d5
 80171ea:	4906      	ldr	r1, [pc, #24]	; (8017204 <pifGpsUblox_Init+0x94>)
 80171ec:	2004      	movs	r0, #4
 80171ee:	f7fc fb27 	bl	8013840 <pifLog_Printf>
#endif
    return FALSE;
 80171f2:	2300      	movs	r3, #0
}
 80171f4:	4618      	mov	r0, r3
 80171f6:	3708      	adds	r7, #8
 80171f8:	46bd      	mov	sp, r7
 80171fa:	bd80      	pop	{r7, pc}
 80171fc:	20001ef0 	.word	0x20001ef0
 8017200:	08027cd0 	.word	0x08027cd0
 8017204:	08027cd4 	.word	0x08027cd4

08017208 <pifGpsUblox_Clear>:

void pifGpsUblox_Clear(PifGpsUblox* p_owner)
{
 8017208:	b580      	push	{r7, lr}
 801720a:	b082      	sub	sp, #8
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
	pifRingBuffer_Clear(&p_owner->__tx.buffer);
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017216:	4618      	mov	r0, r3
 8017218:	f7fc fce2 	bl	8013be0 <pifRingBuffer_Clear>
}
 801721c:	bf00      	nop
 801721e:	3708      	adds	r7, #8
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}

08017224 <pifGpsUblox_AttachComm>:

void pifGpsUblox_AttachComm(PifGpsUblox* p_owner, PifComm *p_comm)
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b082      	sub	sp, #8
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
 801722c:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	683a      	ldr	r2, [r7, #0]
 8017232:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 8017236:	4b05      	ldr	r3, [pc, #20]	; (801724c <pifGpsUblox_AttachComm+0x28>)
 8017238:	4a05      	ldr	r2, [pc, #20]	; (8017250 <pifGpsUblox_AttachComm+0x2c>)
 801723a:	6879      	ldr	r1, [r7, #4]
 801723c:	6838      	ldr	r0, [r7, #0]
 801723e:	f7fb fa07 	bl	8012650 <pifComm_AttachClient>
}
 8017242:	bf00      	nop
 8017244:	3708      	adds	r7, #8
 8017246:	46bd      	mov	sp, r7
 8017248:	bd80      	pop	{r7, pc}
 801724a:	bf00      	nop
 801724c:	08017059 	.word	0x08017059
 8017250:	080168d9 	.word	0x080168d9

08017254 <pifGpsUblox_SetPubxConfig>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SetPubxConfig(PifGpsUblox* p_owner, uint8_t port_id, uint16_t in_proto, uint16_t out_proto, uint32_t baudrate, BOOL blocking)
{
 8017254:	b590      	push	{r4, r7, lr}
 8017256:	b091      	sub	sp, #68	; 0x44
 8017258:	af02      	add	r7, sp, #8
 801725a:	60f8      	str	r0, [r7, #12]
 801725c:	4608      	mov	r0, r1
 801725e:	4611      	mov	r1, r2
 8017260:	461a      	mov	r2, r3
 8017262:	4603      	mov	r3, r0
 8017264:	72fb      	strb	r3, [r7, #11]
 8017266:	460b      	mov	r3, r1
 8017268:	813b      	strh	r3, [r7, #8]
 801726a:	4613      	mov	r3, r2
 801726c:	80fb      	strh	r3, [r7, #6]
	char data[40];

	if (p_owner->__tx.state != GUTS_IDLE) {
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8017274:	2b00      	cmp	r3, #0
 8017276:	d004      	beq.n	8017282 <pifGpsUblox_SetPubxConfig+0x2e>
		pif_error = E_INVALID_STATE;
 8017278:	4b0f      	ldr	r3, [pc, #60]	; (80172b8 <pifGpsUblox_SetPubxConfig+0x64>)
 801727a:	2202      	movs	r2, #2
 801727c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801727e:	2300      	movs	r3, #0
 8017280:	e015      	b.n	80172ae <pifGpsUblox_SetPubxConfig+0x5a>
	}

	pif_Printf(data, "$PUBX,41,%u,%4X,%4X,%lu,0*", port_id, in_proto, out_proto, baudrate);
 8017282:	7af9      	ldrb	r1, [r7, #11]
 8017284:	893c      	ldrh	r4, [r7, #8]
 8017286:	88fb      	ldrh	r3, [r7, #6]
 8017288:	f107 0010 	add.w	r0, r7, #16
 801728c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801728e:	9201      	str	r2, [sp, #4]
 8017290:	9300      	str	r3, [sp, #0]
 8017292:	4623      	mov	r3, r4
 8017294:	460a      	mov	r2, r1
 8017296:	4909      	ldr	r1, [pc, #36]	; (80172bc <pifGpsUblox_SetPubxConfig+0x68>)
 8017298:	f7fa fff8 	bl	801228c <pif_Printf>

	return _makeNmeaPacket(p_owner, data, blocking);
 801729c:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80172a0:	f107 0310 	add.w	r3, r7, #16
 80172a4:	4619      	mov	r1, r3
 80172a6:	68f8      	ldr	r0, [r7, #12]
 80172a8:	f7ff fdac 	bl	8016e04 <_makeNmeaPacket>
 80172ac:	4603      	mov	r3, r0
}
 80172ae:	4618      	mov	r0, r3
 80172b0:	373c      	adds	r7, #60	; 0x3c
 80172b2:	46bd      	mov	sp, r7
 80172b4:	bd90      	pop	{r4, r7, pc}
 80172b6:	bf00      	nop
 80172b8:	20001ef0 	.word	0x20001ef0
 80172bc:	08027d28 	.word	0x08027d28

080172c0 <pifGpsUblox_SendUbxMsg>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SendUbxMsg(PifGpsUblox* p_owner, uint8_t class_id, uint8_t msg_id, uint16_t length, uint8_t* payload, BOOL blocking)
{
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b086      	sub	sp, #24
 80172c4:	af02      	add	r7, sp, #8
 80172c6:	6078      	str	r0, [r7, #4]
 80172c8:	4608      	mov	r0, r1
 80172ca:	4611      	mov	r1, r2
 80172cc:	461a      	mov	r2, r3
 80172ce:	4603      	mov	r3, r0
 80172d0:	70fb      	strb	r3, [r7, #3]
 80172d2:	460b      	mov	r3, r1
 80172d4:	70bb      	strb	r3, [r7, #2]
 80172d6:	4613      	mov	r3, r2
 80172d8:	803b      	strh	r3, [r7, #0]
	uint8_t header[6] = { 0xB5, 0x62 };
 80172da:	f246 23b5 	movw	r3, #25269	; 0x62b5
 80172de:	60bb      	str	r3, [r7, #8]
 80172e0:	2300      	movs	r3, #0
 80172e2:	81bb      	strh	r3, [r7, #12]

	if (p_owner->__tx.state != GUTS_IDLE) {
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d004      	beq.n	80172f8 <pifGpsUblox_SendUbxMsg+0x38>
		pif_error = E_INVALID_STATE;
 80172ee:	4b0f      	ldr	r3, [pc, #60]	; (801732c <pifGpsUblox_SendUbxMsg+0x6c>)
 80172f0:	2202      	movs	r2, #2
 80172f2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80172f4:	2300      	movs	r3, #0
 80172f6:	e015      	b.n	8017324 <pifGpsUblox_SendUbxMsg+0x64>
	}

	header[2] = class_id;
 80172f8:	78fb      	ldrb	r3, [r7, #3]
 80172fa:	72bb      	strb	r3, [r7, #10]
	header[3] = msg_id;
 80172fc:	78bb      	ldrb	r3, [r7, #2]
 80172fe:	72fb      	strb	r3, [r7, #11]
	header[4] = length & 0xFF;
 8017300:	883b      	ldrh	r3, [r7, #0]
 8017302:	b2db      	uxtb	r3, r3
 8017304:	733b      	strb	r3, [r7, #12]
	header[5] = length >> 8;
 8017306:	883b      	ldrh	r3, [r7, #0]
 8017308:	0a1b      	lsrs	r3, r3, #8
 801730a:	b29b      	uxth	r3, r3
 801730c:	b2db      	uxtb	r3, r3
 801730e:	737b      	strb	r3, [r7, #13]

	return _makeUbxPacket(p_owner, header, length, payload, blocking);
 8017310:	883a      	ldrh	r2, [r7, #0]
 8017312:	f107 0108 	add.w	r1, r7, #8
 8017316:	7f3b      	ldrb	r3, [r7, #28]
 8017318:	9300      	str	r3, [sp, #0]
 801731a:	69bb      	ldr	r3, [r7, #24]
 801731c:	6878      	ldr	r0, [r7, #4]
 801731e:	f7ff fe17 	bl	8016f50 <_makeUbxPacket>
 8017322:	4603      	mov	r3, r0
}
 8017324:	4618      	mov	r0, r3
 8017326:	3710      	adds	r7, #16
 8017328:	46bd      	mov	sp, r7
 801732a:	bd80      	pop	{r7, pc}
 801732c:	20001ef0 	.word	0x20001ef0

08017330 <_evtTimerRxTimeout>:

#if PIF_MSP_RECEIVE_TIMEOUT


static void _evtTimerRxTimeout(PifIssuerP p_issuer)
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b086      	sub	sp, #24
 8017334:	af02      	add	r7, sp, #8
 8017336:	6078      	str	r0, [r7, #4]
	if (!p_issuer) {
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d103      	bne.n	8017346 <_evtTimerRxTimeout+0x16>
		pif_error = E_INVALID_PARAM;
 801733e:	4b0e      	ldr	r3, [pc, #56]	; (8017378 <_evtTimerRxTimeout+0x48>)
 8017340:	2201      	movs	r2, #1
 8017342:	701a      	strb	r2, [r3, #0]
		return;
 8017344:	e014      	b.n	8017370 <_evtTimerRxTimeout+0x40>
	}

	PifMsp* p_owner = (PifMsp *)p_issuer;
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	60fb      	str	r3, [r7, #12]

#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	891b      	ldrh	r3, [r3, #8]
 801734e:	4619      	mov	r1, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	7c1b      	ldrb	r3, [r3, #16]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 8017354:	461a      	mov	r2, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	7f5b      	ldrb	r3, [r3, #29]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 801735a:	9301      	str	r3, [sp, #4]
 801735c:	9200      	str	r2, [sp, #0]
 801735e:	460b      	mov	r3, r1
 8017360:	2216      	movs	r2, #22
 8017362:	4906      	ldr	r1, [pc, #24]	; (801737c <_evtTimerRxTimeout+0x4c>)
 8017364:	2004      	movs	r0, #4
 8017366:	f7fc fa6b 	bl	8013840 <pifLog_Printf>
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1],
			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4], p_owner->__rx.p_packet[5],
			p_owner->__rx.p_packet[6], p_owner->__rx.p_packet[7]);
#endif
#endif
	p_owner->__rx.state = MRS_IDLE;
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	2200      	movs	r2, #0
 801736e:	741a      	strb	r2, [r3, #16]
}
 8017370:	3710      	adds	r7, #16
 8017372:	46bd      	mov	sp, r7
 8017374:	bd80      	pop	{r7, pc}
 8017376:	bf00      	nop
 8017378:	20001ef0 	.word	0x20001ef0
 801737c:	08027d64 	.word	0x08027d64

08017380 <_parsingPacket>:
};

#endif

static void _parsingPacket(PifMsp *p_owner, PifActCommReceiveData act_receive_data)
{
 8017380:	b590      	push	{r4, r7, lr}
 8017382:	b08b      	sub	sp, #44	; 0x2c
 8017384:	af04      	add	r7, sp, #16
 8017386:	6078      	str	r0, [r7, #4]
 8017388:	6039      	str	r1, [r7, #0]
	PifMspPacket* p_packet = &p_owner->__rx.packet;
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	331c      	adds	r3, #28
 801738e:	60fb      	str	r3, [r7, #12]
#ifndef __PIF_NO_LOG__
	int line;
#endif
	static uint8_t pre_error = PKT_ERR_NONE;

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017390:	e0b0      	b.n	80174f4 <_parsingPacket+0x174>
		switch (p_owner->__rx.state) {
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	7c1b      	ldrb	r3, [r3, #16]
 8017396:	2b05      	cmp	r3, #5
 8017398:	f200 80ab 	bhi.w	80174f2 <_parsingPacket+0x172>
 801739c:	a201      	add	r2, pc, #4	; (adr r2, 80173a4 <_parsingPacket+0x24>)
 801739e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173a2:	bf00      	nop
 80173a4:	080173bd 	.word	0x080173bd
 80173a8:	08017401 	.word	0x08017401
 80173ac:	08017419 	.word	0x08017419
 80173b0:	08017431 	.word	0x08017431
 80173b4:	0801745d 	.word	0x0801745d
 80173b8:	08017485 	.word	0x08017485
		case MRS_IDLE:
			if (data == '$') {
 80173bc:	7afb      	ldrb	r3, [r7, #11]
 80173be:	2b24      	cmp	r3, #36	; 0x24
 80173c0:	d109      	bne.n	80173d6 <_parsingPacket+0x56>
				p_owner->__rx.state = MRS_HEADER_CHAR_1;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	2201      	movs	r2, #1
 80173c6:	741a      	strb	r2, [r3, #16]
#if PIF_MSP_RECEIVE_TIMEOUT
				pifTimer_Start(p_owner->__rx.p_timer, PIF_MSP_RECEIVE_TIMEOUT);
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173cc:	21c8      	movs	r1, #200	; 0xc8
 80173ce:	4618      	mov	r0, r3
 80173d0:	f7fd fd60 	bl	8014e94 <pifTimer_Start>
 80173d4:	e08e      	b.n	80174f4 <_parsingPacket+0x174>
#endif
			}
			else if (pre_error == PKT_ERR_NONE && p_owner->evt_other_packet) {
 80173d6:	4b64      	ldr	r3, [pc, #400]	; (8017568 <_parsingPacket+0x1e8>)
 80173d8:	781b      	ldrb	r3, [r3, #0]
 80173da:	2b03      	cmp	r3, #3
 80173dc:	d10a      	bne.n	80173f4 <_parsingPacket+0x74>
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	685b      	ldr	r3, [r3, #4]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d006      	beq.n	80173f4 <_parsingPacket+0x74>
				(*p_owner->evt_other_packet)(p_owner, data);
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	685b      	ldr	r3, [r3, #4]
 80173ea:	7afa      	ldrb	r2, [r7, #11]
 80173ec:	4611      	mov	r1, r2
 80173ee:	6878      	ldr	r0, [r7, #4]
 80173f0:	4798      	blx	r3
 80173f2:	e004      	b.n	80173fe <_parsingPacket+0x7e>
			}
			else {
				pkt_err = PKT_ERR_INVALID_DATA;
 80173f4:	2301      	movs	r3, #1
 80173f6:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
 80173f8:	234b      	movs	r3, #75	; 0x4b
 80173fa:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 80173fc:	e089      	b.n	8017512 <_parsingPacket+0x192>
			}
			break;
 80173fe:	e079      	b.n	80174f4 <_parsingPacket+0x174>

		case MRS_HEADER_CHAR_1:
			if (data == 'M') {
 8017400:	7afb      	ldrb	r3, [r7, #11]
 8017402:	2b4d      	cmp	r3, #77	; 0x4d
 8017404:	d103      	bne.n	801740e <_parsingPacket+0x8e>
				p_owner->__rx.state = MRS_HEADER_CHAR_2;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	2202      	movs	r2, #2
 801740a:	741a      	strb	r2, [r3, #16]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 801740c:	e072      	b.n	80174f4 <_parsingPacket+0x174>
				pkt_err = PKT_ERR_INVALID_DATA;
 801740e:	2301      	movs	r3, #1
 8017410:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8017412:	2358      	movs	r3, #88	; 0x58
 8017414:	613b      	str	r3, [r7, #16]
				goto fail;
 8017416:	e07c      	b.n	8017512 <_parsingPacket+0x192>

		case MRS_HEADER_CHAR_2:
			if (data == '<') {
 8017418:	7afb      	ldrb	r3, [r7, #11]
 801741a:	2b3c      	cmp	r3, #60	; 0x3c
 801741c:	d103      	bne.n	8017426 <_parsingPacket+0xa6>
				p_owner->__rx.state = MRS_DIRECTION;
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	2203      	movs	r2, #3
 8017422:	741a      	strb	r2, [r3, #16]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8017424:	e066      	b.n	80174f4 <_parsingPacket+0x174>
				pkt_err = PKT_ERR_INVALID_DATA;
 8017426:	2301      	movs	r3, #1
 8017428:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 801742a:	2365      	movs	r3, #101	; 0x65
 801742c:	613b      	str	r3, [r7, #16]
				goto fail;
 801742e:	e070      	b.n	8017512 <_parsingPacket+0x192>

		case MRS_DIRECTION:
			if (data < PIF_MSP_RX_PACKET_SIZE - 3) {
 8017430:	7afb      	ldrb	r3, [r7, #11]
 8017432:	2b7c      	cmp	r3, #124	; 0x7c
 8017434:	d80d      	bhi.n	8017452 <_parsingPacket+0xd2>
				p_packet->data_count = data;
 8017436:	7afa      	ldrb	r2, [r7, #11]
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	705a      	strb	r2, [r3, #1]
				p_owner->__rx.p_packet[0] = data;
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	695b      	ldr	r3, [r3, #20]
 8017440:	7afa      	ldrb	r2, [r7, #11]
 8017442:	701a      	strb	r2, [r3, #0]
				p_owner->__rx.packet_count = 1;
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	2201      	movs	r2, #1
 8017448:	761a      	strb	r2, [r3, #24]
				p_owner->__rx.state = MRS_LENGTH;
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	2204      	movs	r2, #4
 801744e:	741a      	strb	r2, [r3, #16]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8017450:	e050      	b.n	80174f4 <_parsingPacket+0x174>
				pkt_err = PKT_ERR_BIG_LENGHT;
 8017452:	2300      	movs	r3, #0
 8017454:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8017456:	2375      	movs	r3, #117	; 0x75
 8017458:	613b      	str	r3, [r7, #16]
				goto fail;
 801745a:	e05a      	b.n	8017512 <_parsingPacket+0x192>

		case MRS_LENGTH:
			p_packet->command = data;
 801745c:	7afa      	ldrb	r2, [r7, #11]
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	695b      	ldr	r3, [r3, #20]
 8017466:	687a      	ldr	r2, [r7, #4]
 8017468:	7e12      	ldrb	r2, [r2, #24]
 801746a:	4413      	add	r3, r2
 801746c:	7afa      	ldrb	r2, [r7, #11]
 801746e:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	7e1b      	ldrb	r3, [r3, #24]
 8017474:	3301      	adds	r3, #1
 8017476:	b2da      	uxtb	r2, r3
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	761a      	strb	r2, [r3, #24]
			p_owner->__rx.state = MRS_MESSAGE_TYPE;
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	2205      	movs	r2, #5
 8017480:	741a      	strb	r2, [r3, #16]
			break;
 8017482:	e037      	b.n	80174f4 <_parsingPacket+0x174>

		case MRS_MESSAGE_TYPE:
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	695b      	ldr	r3, [r3, #20]
 8017488:	687a      	ldr	r2, [r7, #4]
 801748a:	7e12      	ldrb	r2, [r2, #24]
 801748c:	4413      	add	r3, r2
 801748e:	7afa      	ldrb	r2, [r7, #11]
 8017490:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	7e1b      	ldrb	r3, [r3, #24]
 8017496:	3301      	adds	r3, #1
 8017498:	b2da      	uxtb	r2, r3
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	761a      	strb	r2, [r3, #24]
			if (p_owner->__rx.packet_count >= 3 + p_packet->data_count) {
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	785b      	ldrb	r3, [r3, #1]
 80174a2:	3302      	adds	r3, #2
 80174a4:	687a      	ldr	r2, [r7, #4]
 80174a6:	7e12      	ldrb	r2, [r2, #24]
 80174a8:	4293      	cmp	r3, r2
 80174aa:	da23      	bge.n	80174f4 <_parsingPacket+0x174>
				if (data == pifCheckXor(p_owner->__rx.p_packet, 2 + p_packet->data_count)) {
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	695a      	ldr	r2, [r3, #20]
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	785b      	ldrb	r3, [r3, #1]
 80174b4:	b29b      	uxth	r3, r3
 80174b6:	3302      	adds	r3, #2
 80174b8:	b29b      	uxth	r3, r3
 80174ba:	4619      	mov	r1, r3
 80174bc:	4610      	mov	r0, r2
 80174be:	f7fa ff6f 	bl	80123a0 <pifCheckXor>
 80174c2:	4603      	mov	r3, r0
 80174c4:	461a      	mov	r2, r3
 80174c6:	7afb      	ldrb	r3, [r7, #11]
 80174c8:	429a      	cmp	r2, r3
 80174ca:	d10d      	bne.n	80174e8 <_parsingPacket+0x168>
#if PIF_MSP_RECEIVE_TIMEOUT
					pifTimer_Stop(p_owner->__rx.p_timer);
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174d0:	4618      	mov	r0, r3
 80174d2:	f7fd fd0d 	bl	8014ef0 <pifTimer_Stop>
#endif
					p_packet->p_data = p_owner->__rx.p_packet + 2;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	695b      	ldr	r3, [r3, #20]
 80174da:	1c9a      	adds	r2, r3, #2
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	605a      	str	r2, [r3, #4]
					p_owner->__rx.state = MRS_DONE;
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	2206      	movs	r2, #6
 80174e4:	741a      	strb	r2, [r3, #16]
					return;
 80174e6:	e03c      	b.n	8017562 <_parsingPacket+0x1e2>
				}
				else {
					pkt_err = PKT_ERR_WRONG_CRC;
 80174e8:	2302      	movs	r3, #2
 80174ea:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
					line = __LINE__;
 80174ec:	2391      	movs	r3, #145	; 0x91
 80174ee:	613b      	str	r3, [r7, #16]
#endif
					goto fail;
 80174f0:	e00f      	b.n	8017512 <_parsingPacket+0x192>
				}
			}
			break;

		default:
			break;
 80174f2:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	68da      	ldr	r2, [r3, #12]
 80174f8:	f107 010b 	add.w	r1, r7, #11
 80174fc:	683b      	ldr	r3, [r7, #0]
 80174fe:	4610      	mov	r0, r2
 8017500:	4798      	blx	r3
 8017502:	4603      	mov	r3, r0
 8017504:	2b00      	cmp	r3, #0
 8017506:	f47f af44 	bne.w	8017392 <_parsingPacket+0x12>
		}
	}
	pre_error = PKT_ERR_NONE;
 801750a:	4b17      	ldr	r3, [pc, #92]	; (8017568 <_parsingPacket+0x1e8>)
 801750c:	2203      	movs	r2, #3
 801750e:	701a      	strb	r2, [r3, #0]
	return;
 8017510:	e027      	b.n	8017562 <_parsingPacket+0x1e2>

fail:
	if (pkt_err != pre_error) {
 8017512:	4b15      	ldr	r3, [pc, #84]	; (8017568 <_parsingPacket+0x1e8>)
 8017514:	781b      	ldrb	r3, [r3, #0]
 8017516:	7dfa      	ldrb	r2, [r7, #23]
 8017518:	429a      	cmp	r2, r3
 801751a:	d01a      	beq.n	8017552 <_parsingPacket+0x1d2>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	891b      	ldrh	r3, [r3, #8]
 8017520:	461c      	mov	r4, r3
 8017522:	7dfb      	ldrb	r3, [r7, #23]
 8017524:	4a11      	ldr	r2, [pc, #68]	; (801756c <_parsingPacket+0x1ec>)
 8017526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801752a:	7afa      	ldrb	r2, [r7, #11]
 801752c:	4611      	mov	r1, r2
				p_owner->__rx.state, p_packet->data_count);
 801752e:	687a      	ldr	r2, [r7, #4]
 8017530:	7c12      	ldrb	r2, [r2, #16]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 8017532:	4610      	mov	r0, r2
				p_owner->__rx.state, p_packet->data_count);
 8017534:	68fa      	ldr	r2, [r7, #12]
 8017536:	7852      	ldrb	r2, [r2, #1]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 8017538:	9203      	str	r2, [sp, #12]
 801753a:	9002      	str	r0, [sp, #8]
 801753c:	9101      	str	r1, [sp, #4]
 801753e:	9300      	str	r3, [sp, #0]
 8017540:	4623      	mov	r3, r4
 8017542:	693a      	ldr	r2, [r7, #16]
 8017544:	490a      	ldr	r1, [pc, #40]	; (8017570 <_parsingPacket+0x1f0>)
 8017546:	2004      	movs	r0, #4
 8017548:	f7fc f97a 	bl	8013840 <pifLog_Printf>
#endif
		pre_error = pkt_err;
 801754c:	4a06      	ldr	r2, [pc, #24]	; (8017568 <_parsingPacket+0x1e8>)
 801754e:	7dfb      	ldrb	r3, [r7, #23]
 8017550:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1], p_owner->__rx.p_packet[2],
			p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif

#if PIF_MSP_RECEIVE_TIMEOUT
   	pifTimer_Stop(p_owner->__rx.p_timer);
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017556:	4618      	mov	r0, r3
 8017558:	f7fd fcca 	bl	8014ef0 <pifTimer_Stop>
#endif
	p_owner->__rx.state = MRS_IDLE;
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	2200      	movs	r2, #0
 8017560:	741a      	strb	r2, [r3, #16]
}
 8017562:	371c      	adds	r7, #28
 8017564:	46bd      	mov	sp, r7
 8017566:	bd90      	pop	{r4, r7, pc}
 8017568:	2000008c 	.word	0x2000008c
 801756c:	20000080 	.word	0x20000080
 8017570:	08027dc0 	.word	0x08027dc0

08017574 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8017574:	b580      	push	{r7, lr}
 8017576:	b084      	sub	sp, #16
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]
 801757c:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	60fb      	str	r3, [r7, #12]

    if (p_owner->__rx.state < MRS_DONE) {
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	7c1b      	ldrb	r3, [r3, #16]
 8017586:	2b05      	cmp	r3, #5
 8017588:	d803      	bhi.n	8017592 <_evtParsing+0x1e>
    	_parsingPacket(p_owner, act_receive_data);
 801758a:	6839      	ldr	r1, [r7, #0]
 801758c:	68f8      	ldr	r0, [r7, #12]
 801758e:	f7ff fef7 	bl	8017380 <_parsingPacket>
    }

    if (p_owner->__rx.state == MRS_DONE) {
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	7c1b      	ldrb	r3, [r3, #16]
 8017596:	2b06      	cmp	r3, #6
 8017598:	d117      	bne.n	80175ca <_evtParsing+0x56>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x", p_owner->_id, p_owner->__rx.p_packet[0],	p_owner->__rx.p_packet[1],
    			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif
#endif

    	if (p_owner->evt_receive) (*p_owner->evt_receive)(p_owner, &p_owner->__rx.packet);
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d006      	beq.n	80175b0 <_evtParsing+0x3c>
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	68fa      	ldr	r2, [r7, #12]
 80175a8:	321c      	adds	r2, #28
 80175aa:	4611      	mov	r1, r2
 80175ac:	68f8      	ldr	r0, [r7, #12]
 80175ae:	4798      	blx	r3
    	if (p_owner->__p_comm->_p_task) p_owner->__p_comm->_p_task->immediate = TRUE;
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	68db      	ldr	r3, [r3, #12]
 80175b4:	69db      	ldr	r3, [r3, #28]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d004      	beq.n	80175c4 <_evtParsing+0x50>
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	68db      	ldr	r3, [r3, #12]
 80175be:	69db      	ldr	r3, [r3, #28]
 80175c0:	2201      	movs	r2, #1
 80175c2:	705a      	strb	r2, [r3, #1]
    	p_owner->__rx.state = MRS_IDLE;
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	2200      	movs	r2, #0
 80175c8:	741a      	strb	r2, [r3, #16]
    }
}
 80175ca:	bf00      	nop
 80175cc:	3710      	adds	r7, #16
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}

080175d2 <_evtSending>:

static BOOL _evtSending(void *p_client, PifActCommSendData act_send_data)
{
 80175d2:	b5b0      	push	{r4, r5, r7, lr}
 80175d4:	b084      	sub	sp, #16
 80175d6:	af00      	add	r7, sp, #0
 80175d8:	6078      	str	r0, [r7, #4]
 80175da:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (p_owner->__rx.state != MRS_IDLE) return FALSE;
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	7c1b      	ldrb	r3, [r3, #16]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d001      	beq.n	80175ec <_evtSending+0x1a>
 80175e8:	2300      	movs	r3, #0
 80175ea:	e073      	b.n	80176d4 <_evtSending+0x102>

	switch (p_owner->__tx.state) {
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d002      	beq.n	80175fc <_evtSending+0x2a>
 80175f6:	2b01      	cmp	r3, #1
 80175f8:	d025      	beq.n	8017646 <_evtSending+0x74>
			p_owner->__tx.state = MTS_IDLE;
		}
		return TRUE;

	default:
		break;
 80175fa:	e06a      	b.n	80176d2 <_evtSending+0x100>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.answer_buffer)) {
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	3328      	adds	r3, #40	; 0x28
 8017600:	4618      	mov	r0, r3
 8017602:	f7fc fb42 	bl	8013c8a <pifRingBuffer_IsEmpty>
 8017606:	4603      	mov	r3, r0
 8017608:	2b00      	cmp	r3, #0
 801760a:	d161      	bne.n	80176d0 <_evtSending+0xfe>
			p_owner->__tx.length = pifRingBuffer_GetFillSize(&p_owner->__tx.answer_buffer);
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	3328      	adds	r3, #40	; 0x28
 8017610:	4618      	mov	r0, r3
 8017612:	f7fc fb4d 	bl	8013cb0 <pifRingBuffer_GetFillSize>
 8017616:	4603      	mov	r3, r0
 8017618:	461a      	mov	r2, r3
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			p_owner->__tx.pos = 0;
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	2200      	movs	r2, #0
 8017624:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			p_owner->__tx.state = MTS_SENDING;
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	2201      	movs	r2, #1
 801762c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			if (p_owner->__p_comm->_p_task) p_owner->__p_comm->_p_task->immediate = TRUE;
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	68db      	ldr	r3, [r3, #12]
 8017634:	69db      	ldr	r3, [r3, #28]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d04a      	beq.n	80176d0 <_evtSending+0xfe>
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	68db      	ldr	r3, [r3, #12]
 801763e:	69db      	ldr	r3, [r3, #28]
 8017640:	2201      	movs	r2, #1
 8017642:	705a      	strb	r2, [r3, #1]
		break;
 8017644:	e044      	b.n	80176d0 <_evtSending+0xfe>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.answer_buffer, p_owner->__tx.pos),
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	68dc      	ldr	r4, [r3, #12]
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017656:	4619      	mov	r1, r3
 8017658:	4610      	mov	r0, r2
 801765a:	f7fc faea 	bl	8013c32 <pifRingBuffer_GetTailPointer>
 801765e:	4605      	mov	r5, r0
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801766c:	4619      	mov	r1, r3
 801766e:	4610      	mov	r0, r2
 8017670:	f7fc fb40 	bl	8013cf4 <pifRingBuffer_GetLinerSize>
 8017674:	4603      	mov	r3, r0
 8017676:	461a      	mov	r2, r3
 8017678:	683b      	ldr	r3, [r7, #0]
 801767a:	4629      	mov	r1, r5
 801767c:	4620      	mov	r0, r4
 801767e:	4798      	blx	r3
 8017680:	4603      	mov	r3, r0
 8017682:	817b      	strh	r3, [r7, #10]
		if (!length) return FALSE;
 8017684:	897b      	ldrh	r3, [r7, #10]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d101      	bne.n	801768e <_evtSending+0xbc>
 801768a:	2300      	movs	r3, #0
 801768c:	e022      	b.n	80176d4 <_evtSending+0x102>
		p_owner->__tx.pos += length;
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017694:	897b      	ldrh	r3, [r7, #10]
 8017696:	4413      	add	r3, r2
 8017698:	b29a      	uxth	r2, r3
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		if (p_owner->__tx.pos >= p_owner->__tx.length) {
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80176ac:	429a      	cmp	r2, r3
 80176ae:	d30d      	bcc.n	80176cc <_evtSending+0xfa>
			pifRingBuffer_Remove(&p_owner->__tx.answer_buffer, p_owner->__tx.pos);
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80176bc:	4619      	mov	r1, r3
 80176be:	4610      	mov	r0, r2
 80176c0:	f7fc fcbf 	bl	8014042 <pifRingBuffer_Remove>
			p_owner->__tx.state = MTS_IDLE;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	2200      	movs	r2, #0
 80176c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		return TRUE;
 80176cc:	2301      	movs	r3, #1
 80176ce:	e001      	b.n	80176d4 <_evtSending+0x102>
		break;
 80176d0:	bf00      	nop
	}
	return FALSE;
 80176d2:	2300      	movs	r3, #0
}
 80176d4:	4618      	mov	r0, r3
 80176d6:	3710      	adds	r7, #16
 80176d8:	46bd      	mov	sp, r7
 80176da:	bdb0      	pop	{r4, r5, r7, pc}

080176dc <pifMsp_Init>:

BOOL pifMsp_Init(PifMsp* p_owner, PifTimerManager* p_timer, PifId id)
{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b086      	sub	sp, #24
 80176e0:	af02      	add	r7, sp, #8
 80176e2:	60f8      	str	r0, [r7, #12]
 80176e4:	60b9      	str	r1, [r7, #8]
 80176e6:	4613      	mov	r3, r2
 80176e8:	80fb      	strh	r3, [r7, #6]
    if (!p_timer) {
 80176ea:	68bb      	ldr	r3, [r7, #8]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d103      	bne.n	80176f8 <pifMsp_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80176f0:	4b2c      	ldr	r3, [pc, #176]	; (80177a4 <pifMsp_Init+0xc8>)
 80176f2:	2201      	movs	r2, #1
 80176f4:	701a      	strb	r2, [r3, #0]
		goto fail;
 80176f6:	e042      	b.n	801777e <pifMsp_Init+0xa2>
	}

	memset(p_owner, 0, sizeof(PifMsp));
 80176f8:	224c      	movs	r2, #76	; 0x4c
 80176fa:	2100      	movs	r1, #0
 80176fc:	68f8      	ldr	r0, [r7, #12]
 80176fe:	f00b fdc5 	bl	802328c <memset>

    p_owner->__rx.p_packet = calloc(sizeof(uint8_t), PIF_MSP_RX_PACKET_SIZE);
 8017702:	2180      	movs	r1, #128	; 0x80
 8017704:	2001      	movs	r0, #1
 8017706:	f00b fd71 	bl	80231ec <calloc>
 801770a:	4603      	mov	r3, r0
 801770c:	461a      	mov	r2, r3
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	615a      	str	r2, [r3, #20]
    if (!p_owner->__rx.p_packet) {
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	695b      	ldr	r3, [r3, #20]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d103      	bne.n	8017722 <pifMsp_Init+0x46>
        pif_error = E_OUT_OF_HEAP;
 801771a:	4b22      	ldr	r3, [pc, #136]	; (80177a4 <pifMsp_Init+0xc8>)
 801771c:	2203      	movs	r2, #3
 801771e:	701a      	strb	r2, [r3, #0]
        goto fail;
 8017720:	e02d      	b.n	801777e <pifMsp_Init+0xa2>
    }

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	3328      	adds	r3, #40	; 0x28
 8017726:	2280      	movs	r2, #128	; 0x80
 8017728:	2100      	movs	r1, #0
 801772a:	4618      	mov	r0, r3
 801772c:	f7fc fa10 	bl	8013b50 <pifRingBuffer_InitHeap>
 8017730:	4603      	mov	r3, r0
 8017732:	2b00      	cmp	r3, #0
 8017734:	d020      	beq.n	8017778 <pifMsp_Init+0x9c>

#if PIF_MSP_RECEIVE_TIMEOUT
    p_owner->__rx.p_timer = pifTimerManager_Add(p_timer, TT_ONCE);
 8017736:	2100      	movs	r1, #0
 8017738:	68b8      	ldr	r0, [r7, #8]
 801773a:	f7fd fb73 	bl	8014e24 <pifTimerManager_Add>
 801773e:	4602      	mov	r2, r0
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	625a      	str	r2, [r3, #36]	; 0x24
    if (!p_owner->__rx.p_timer) goto fail;
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017748:	2b00      	cmp	r3, #0
 801774a:	d017      	beq.n	801777c <pifMsp_Init+0xa0>
    pifTimer_AttachEvtFinish(p_owner->__rx.p_timer, _evtTimerRxTimeout, p_owner);
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017750:	68fa      	ldr	r2, [r7, #12]
 8017752:	4915      	ldr	r1, [pc, #84]	; (80177a8 <pifMsp_Init+0xcc>)
 8017754:	4618      	mov	r0, r3
 8017756:	f7fd fc92 	bl	801507e <pifTimer_AttachEvtFinish>
#endif

    if (id == PIF_ID_AUTO) id = pif_id++;
 801775a:	88fb      	ldrh	r3, [r7, #6]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d106      	bne.n	801776e <pifMsp_Init+0x92>
 8017760:	4b12      	ldr	r3, [pc, #72]	; (80177ac <pifMsp_Init+0xd0>)
 8017762:	881b      	ldrh	r3, [r3, #0]
 8017764:	1c5a      	adds	r2, r3, #1
 8017766:	b291      	uxth	r1, r2
 8017768:	4a10      	ldr	r2, [pc, #64]	; (80177ac <pifMsp_Init+0xd0>)
 801776a:	8011      	strh	r1, [r2, #0]
 801776c:	80fb      	strh	r3, [r7, #6]
    p_owner->_id = id;
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	88fa      	ldrh	r2, [r7, #6]
 8017772:	811a      	strh	r2, [r3, #8]
    return TRUE;
 8017774:	2301      	movs	r3, #1
 8017776:	e010      	b.n	801779a <pifMsp_Init+0xbe>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 8017778:	bf00      	nop
 801777a:	e000      	b.n	801777e <pifMsp_Init+0xa2>
    if (!p_owner->__rx.p_timer) goto fail;
 801777c:	bf00      	nop

fail:
	pifMsp_Clear(p_owner);
 801777e:	68f8      	ldr	r0, [r7, #12]
 8017780:	f000 f818 	bl	80177b4 <pifMsp_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 8017784:	88fb      	ldrh	r3, [r7, #6]
 8017786:	4a07      	ldr	r2, [pc, #28]	; (80177a4 <pifMsp_Init+0xc8>)
 8017788:	7812      	ldrb	r2, [r2, #0]
 801778a:	9200      	str	r2, [sp, #0]
 801778c:	f240 1209 	movw	r2, #265	; 0x109
 8017790:	4907      	ldr	r1, [pc, #28]	; (80177b0 <pifMsp_Init+0xd4>)
 8017792:	2004      	movs	r0, #4
 8017794:	f7fc f854 	bl	8013840 <pifLog_Printf>
#endif
    return FALSE;
 8017798:	2300      	movs	r3, #0
}
 801779a:	4618      	mov	r0, r3
 801779c:	3710      	adds	r7, #16
 801779e:	46bd      	mov	sp, r7
 80177a0:	bd80      	pop	{r7, pc}
 80177a2:	bf00      	nop
 80177a4:	20001ef0 	.word	0x20001ef0
 80177a8:	08017331 	.word	0x08017331
 80177ac:	2000005c 	.word	0x2000005c
 80177b0:	08027de4 	.word	0x08027de4

080177b4 <pifMsp_Clear>:

void pifMsp_Clear(PifMsp* p_owner)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b082      	sub	sp, #8
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
	if (p_owner->__rx.p_packet) {
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	695b      	ldr	r3, [r3, #20]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d007      	beq.n	80177d4 <pifMsp_Clear+0x20>
		free(p_owner->__rx.p_packet);
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	695b      	ldr	r3, [r3, #20]
 80177c8:	4618      	mov	r0, r3
 80177ca:	f00b fd49 	bl	8023260 <free>
		p_owner->__rx.p_packet = NULL;
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	2200      	movs	r2, #0
 80177d2:	615a      	str	r2, [r3, #20]
	}
	pifRingBuffer_Clear(&p_owner->__tx.answer_buffer);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	3328      	adds	r3, #40	; 0x28
 80177d8:	4618      	mov	r0, r3
 80177da:	f7fc fa01 	bl	8013be0 <pifRingBuffer_Clear>
#if PIF_MSP_RECEIVE_TIMEOUT
	if (p_owner->__rx.p_timer) {
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d004      	beq.n	80177f0 <pifMsp_Clear+0x3c>
		pifTimerManager_Remove(p_owner->__rx.p_timer);
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177ea:	4618      	mov	r0, r3
 80177ec:	f7fd fb36 	bl	8014e5c <pifTimerManager_Remove>
	}
#endif
}
 80177f0:	bf00      	nop
 80177f2:	3708      	adds	r7, #8
 80177f4:	46bd      	mov	sp, r7
 80177f6:	bd80      	pop	{r7, pc}

080177f8 <pifMsp_AttachComm>:

void pifMsp_AttachComm(PifMsp* p_owner, PifComm *p_comm)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b082      	sub	sp, #8
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
 8017800:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	683a      	ldr	r2, [r7, #0]
 8017806:	60da      	str	r2, [r3, #12]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 8017808:	4b04      	ldr	r3, [pc, #16]	; (801781c <pifMsp_AttachComm+0x24>)
 801780a:	4a05      	ldr	r2, [pc, #20]	; (8017820 <pifMsp_AttachComm+0x28>)
 801780c:	6879      	ldr	r1, [r7, #4]
 801780e:	6838      	ldr	r0, [r7, #0]
 8017810:	f7fa ff1e 	bl	8012650 <pifComm_AttachClient>
}
 8017814:	bf00      	nop
 8017816:	3708      	adds	r7, #8
 8017818:	46bd      	mov	sp, r7
 801781a:	bd80      	pop	{r7, pc}
 801781c:	080175d3 	.word	0x080175d3
 8017820:	08017575 	.word	0x08017575

08017824 <pifMsp_DetachComm>:

void pifMsp_DetachComm(PifMsp* p_owner)
{
 8017824:	b580      	push	{r7, lr}
 8017826:	b082      	sub	sp, #8
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
	pifComm_DetachClient(p_owner->__p_comm);
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	68db      	ldr	r3, [r3, #12]
 8017830:	4618      	mov	r0, r3
 8017832:	f7fa ff23 	bl	801267c <pifComm_DetachClient>
	p_owner->__p_comm = NULL;
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	2200      	movs	r2, #0
 801783a:	60da      	str	r2, [r3, #12]
}
 801783c:	bf00      	nop
 801783e:	3708      	adds	r7, #8
 8017840:	46bd      	mov	sp, r7
 8017842:	bd80      	pop	{r7, pc}

08017844 <pifMsp_MakeAnswer>:

BOOL pifMsp_MakeAnswer(PifMsp* p_owner, PifMspPacket* p_question, uint8_t* p_data, uint16_t data_size)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b08a      	sub	sp, #40	; 0x28
 8017848:	af04      	add	r7, sp, #16
 801784a:	60f8      	str	r0, [r7, #12]
 801784c:	60b9      	str	r1, [r7, #8]
 801784e:	607a      	str	r2, [r7, #4]
 8017850:	807b      	strh	r3, [r7, #2]
	uint8_t header[5], check_xor;

	pifRingBuffer_BackupHead(&p_owner->__tx.answer_buffer);
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	3328      	adds	r3, #40	; 0x28
 8017856:	4618      	mov	r0, r3
 8017858:	f7fc fa99 	bl	8013d8e <pifRingBuffer_BackupHead>

	header[0] = '$';
 801785c:	2324      	movs	r3, #36	; 0x24
 801785e:	743b      	strb	r3, [r7, #16]
	header[1] = 'M';
 8017860:	234d      	movs	r3, #77	; 0x4d
 8017862:	747b      	strb	r3, [r7, #17]
	header[2] = '>';
 8017864:	233e      	movs	r3, #62	; 0x3e
 8017866:	74bb      	strb	r3, [r7, #18]
	header[3] = data_size;
 8017868:	887b      	ldrh	r3, [r7, #2]
 801786a:	b2db      	uxtb	r3, r3
 801786c:	74fb      	strb	r3, [r7, #19]
	header[4] = p_question->command;
 801786e:	68bb      	ldr	r3, [r7, #8]
 8017870:	781b      	ldrb	r3, [r3, #0]
 8017872:	753b      	strb	r3, [r7, #20]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	3328      	adds	r3, #40	; 0x28
 8017878:	f107 0110 	add.w	r1, r7, #16
 801787c:	2205      	movs	r2, #5
 801787e:	4618      	mov	r0, r3
 8017880:	f7fc fad6 	bl	8013e30 <pifRingBuffer_PutData>
 8017884:	4603      	mov	r3, r0
 8017886:	2b00      	cmp	r3, #0
 8017888:	d02b      	beq.n	80178e2 <pifMsp_MakeAnswer+0x9e>
	check_xor = header[3] ^ header[4];
 801788a:	7cfa      	ldrb	r2, [r7, #19]
 801788c:	7d3b      	ldrb	r3, [r7, #20]
 801788e:	4053      	eors	r3, r2
 8017890:	75fb      	strb	r3, [r7, #23]
	if (data_size > 0) {
 8017892:	887b      	ldrh	r3, [r7, #2]
 8017894:	2b00      	cmp	r3, #0
 8017896:	d013      	beq.n	80178c0 <pifMsp_MakeAnswer+0x7c>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, data_size)) goto fail;
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	3328      	adds	r3, #40	; 0x28
 801789c:	887a      	ldrh	r2, [r7, #2]
 801789e:	6879      	ldr	r1, [r7, #4]
 80178a0:	4618      	mov	r0, r3
 80178a2:	f7fc fac5 	bl	8013e30 <pifRingBuffer_PutData>
 80178a6:	4603      	mov	r3, r0
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d01c      	beq.n	80178e6 <pifMsp_MakeAnswer+0xa2>
		check_xor ^= pifCheckXor(p_data, data_size);
 80178ac:	887b      	ldrh	r3, [r7, #2]
 80178ae:	4619      	mov	r1, r3
 80178b0:	6878      	ldr	r0, [r7, #4]
 80178b2:	f7fa fd75 	bl	80123a0 <pifCheckXor>
 80178b6:	4603      	mov	r3, r0
 80178b8:	461a      	mov	r2, r3
 80178ba:	7dfb      	ldrb	r3, [r7, #23]
 80178bc:	4053      	eors	r3, r2
 80178be:	75fb      	strb	r3, [r7, #23]
	}
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, check_xor)) goto fail;
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	3328      	adds	r3, #40	; 0x28
 80178c4:	7dfa      	ldrb	r2, [r7, #23]
 80178c6:	4611      	mov	r1, r2
 80178c8:	4618      	mov	r0, r3
 80178ca:	f7fc fa7d 	bl	8013dc8 <pifRingBuffer_PutByte>
 80178ce:	4603      	mov	r3, r0
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d00a      	beq.n	80178ea <pifMsp_MakeAnswer+0xa6>
	p_owner->__p_comm->_p_task->immediate = TRUE;
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	68db      	ldr	r3, [r3, #12]
 80178d8:	69db      	ldr	r3, [r3, #28]
 80178da:	2201      	movs	r2, #1
 80178dc:	705a      	strb	r2, [r3, #1]

#ifdef __DEBUG_PACKET__
	pifLog_Printf(LT_NONE, "\n%u< %x %x %x %x %x : %x", p_owner->_id,
			header[0], header[1], header[2], header[3], header[4], check_xor);
#endif
	return TRUE;
 80178de:	2301      	movs	r3, #1
 80178e0:	e024      	b.n	801792c <pifMsp_MakeAnswer+0xe8>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 80178e2:	bf00      	nop
 80178e4:	e002      	b.n	80178ec <pifMsp_MakeAnswer+0xa8>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, data_size)) goto fail;
 80178e6:	bf00      	nop
 80178e8:	e000      	b.n	80178ec <pifMsp_MakeAnswer+0xa8>
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, check_xor)) goto fail;
 80178ea:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.answer_buffer);
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	3328      	adds	r3, #40	; 0x28
 80178f0:	4618      	mov	r0, r3
 80178f2:	f7fc fa5a 	bl	8013daa <pifRingBuffer_RestoreHead>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 80178f6:	4b0f      	ldr	r3, [pc, #60]	; (8017934 <pifMsp_MakeAnswer+0xf0>)
 80178f8:	781b      	ldrb	r3, [r3, #0]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d102      	bne.n	8017904 <pifMsp_MakeAnswer+0xc0>
 80178fe:	4b0d      	ldr	r3, [pc, #52]	; (8017934 <pifMsp_MakeAnswer+0xf0>)
 8017900:	2204      	movs	r2, #4
 8017902:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u D:%u EC:%d", __LINE__, p_owner->_id, p_question->command, data_size, pif_error);
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	891b      	ldrh	r3, [r3, #8]
 8017908:	4618      	mov	r0, r3
 801790a:	68bb      	ldr	r3, [r7, #8]
 801790c:	781b      	ldrb	r3, [r3, #0]
 801790e:	4619      	mov	r1, r3
 8017910:	887b      	ldrh	r3, [r7, #2]
 8017912:	4a08      	ldr	r2, [pc, #32]	; (8017934 <pifMsp_MakeAnswer+0xf0>)
 8017914:	7812      	ldrb	r2, [r2, #0]
 8017916:	9202      	str	r2, [sp, #8]
 8017918:	9301      	str	r3, [sp, #4]
 801791a:	9100      	str	r1, [sp, #0]
 801791c:	4603      	mov	r3, r0
 801791e:	f44f 72a3 	mov.w	r2, #326	; 0x146
 8017922:	4905      	ldr	r1, [pc, #20]	; (8017938 <pifMsp_MakeAnswer+0xf4>)
 8017924:	2004      	movs	r0, #4
 8017926:	f7fb ff8b 	bl	8013840 <pifLog_Printf>
#endif
	return FALSE;
 801792a:	2300      	movs	r3, #0
}
 801792c:	4618      	mov	r0, r3
 801792e:	3718      	adds	r7, #24
 8017930:	46bd      	mov	sp, r7
 8017932:	bd80      	pop	{r7, pc}
 8017934:	20001ef0 	.word	0x20001ef0
 8017938:	08027df8 	.word	0x08027df8

0801793c <pifMsp_MakeError>:

BOOL pifMsp_MakeError(PifMsp* p_owner, PifMspPacket* p_question)
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b086      	sub	sp, #24
 8017940:	af02      	add	r7, sp, #8
 8017942:	6078      	str	r0, [r7, #4]
 8017944:	6039      	str	r1, [r7, #0]
	uint8_t header[6];

	pifRingBuffer_BackupHead(&p_owner->__tx.answer_buffer);
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	3328      	adds	r3, #40	; 0x28
 801794a:	4618      	mov	r0, r3
 801794c:	f7fc fa1f 	bl	8013d8e <pifRingBuffer_BackupHead>

	header[0] = '$';
 8017950:	2324      	movs	r3, #36	; 0x24
 8017952:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 8017954:	234d      	movs	r3, #77	; 0x4d
 8017956:	727b      	strb	r3, [r7, #9]
	header[2] = '!';
 8017958:	2321      	movs	r3, #33	; 0x21
 801795a:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 801795c:	2300      	movs	r3, #0
 801795e:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 8017960:	683b      	ldr	r3, [r7, #0]
 8017962:	781b      	ldrb	r3, [r3, #0]
 8017964:	733b      	strb	r3, [r7, #12]
	header[5] = header[3] ^ header[4];
 8017966:	7afa      	ldrb	r2, [r7, #11]
 8017968:	7b3b      	ldrb	r3, [r7, #12]
 801796a:	4053      	eors	r3, r2
 801796c:	b2db      	uxtb	r3, r3
 801796e:	737b      	strb	r3, [r7, #13]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 6)) goto fail;
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	3328      	adds	r3, #40	; 0x28
 8017974:	f107 0108 	add.w	r1, r7, #8
 8017978:	2206      	movs	r2, #6
 801797a:	4618      	mov	r0, r3
 801797c:	f7fc fa58 	bl	8013e30 <pifRingBuffer_PutData>
 8017980:	4603      	mov	r3, r0
 8017982:	2b00      	cmp	r3, #0
 8017984:	d006      	beq.n	8017994 <pifMsp_MakeError+0x58>
	p_owner->__p_comm->_p_task->immediate = TRUE;
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	68db      	ldr	r3, [r3, #12]
 801798a:	69db      	ldr	r3, [r3, #28]
 801798c:	2201      	movs	r2, #1
 801798e:	705a      	strb	r2, [r3, #1]
#ifdef __DEBUG_PACKET__
	pifLog_Printf(LT_NONE, "\n%u< %x %x %x %x %x : %x", p_owner->_id,
			header[0], header[1], header[2], header[3], header[4], header[5]);
#endif
#endif
	return TRUE;
 8017990:	2301      	movs	r3, #1
 8017992:	e01e      	b.n	80179d2 <pifMsp_MakeError+0x96>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 6)) goto fail;
 8017994:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.answer_buffer);
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	3328      	adds	r3, #40	; 0x28
 801799a:	4618      	mov	r0, r3
 801799c:	f7fc fa05 	bl	8013daa <pifRingBuffer_RestoreHead>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 80179a0:	4b0e      	ldr	r3, [pc, #56]	; (80179dc <pifMsp_MakeError+0xa0>)
 80179a2:	781b      	ldrb	r3, [r3, #0]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d102      	bne.n	80179ae <pifMsp_MakeError+0x72>
 80179a8:	4b0c      	ldr	r3, [pc, #48]	; (80179dc <pifMsp_MakeError+0xa0>)
 80179aa:	2204      	movs	r2, #4
 80179ac:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	891b      	ldrh	r3, [r3, #8]
 80179b2:	4619      	mov	r1, r3
 80179b4:	683b      	ldr	r3, [r7, #0]
 80179b6:	781b      	ldrb	r3, [r3, #0]
 80179b8:	461a      	mov	r2, r3
 80179ba:	4b08      	ldr	r3, [pc, #32]	; (80179dc <pifMsp_MakeError+0xa0>)
 80179bc:	781b      	ldrb	r3, [r3, #0]
 80179be:	9301      	str	r3, [sp, #4]
 80179c0:	9200      	str	r2, [sp, #0]
 80179c2:	460b      	mov	r3, r1
 80179c4:	f44f 72b3 	mov.w	r2, #358	; 0x166
 80179c8:	4905      	ldr	r1, [pc, #20]	; (80179e0 <pifMsp_MakeError+0xa4>)
 80179ca:	2004      	movs	r0, #4
 80179cc:	f7fb ff38 	bl	8013840 <pifLog_Printf>
#endif
	return FALSE;
 80179d0:	2300      	movs	r3, #0
}
 80179d2:	4618      	mov	r0, r3
 80179d4:	3710      	adds	r7, #16
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}
 80179da:	bf00      	nop
 80179dc:	20001ef0 	.word	0x20001ef0
 80179e0:	08027e14 	.word	0x08027e14

080179e4 <pifRc_AttachEvtReceive>:
#include "rc/pif_rc.h"


void pifRc_AttachEvtReceive(PifRc* p_owner, PifEvtRcReceive evt_receive, PifIssuerP p_issuer)
{
 80179e4:	b480      	push	{r7}
 80179e6:	b085      	sub	sp, #20
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	60f8      	str	r0, [r7, #12]
 80179ec:	60b9      	str	r1, [r7, #8]
 80179ee:	607a      	str	r2, [r7, #4]
	p_owner->__evt_receive = evt_receive;
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	68ba      	ldr	r2, [r7, #8]
 80179f4:	619a      	str	r2, [r3, #24]
	p_owner->__p_issuer = p_issuer;
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	687a      	ldr	r2, [r7, #4]
 80179fa:	61da      	str	r2, [r3, #28]
}
 80179fc:	bf00      	nop
 80179fe:	3714      	adds	r7, #20
 8017a00:	46bd      	mov	sp, r7
 8017a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a06:	4770      	bx	lr

08017a08 <pifRc_CheckFailSafe>:
	long loss_frames = p_owner->_lost_frames + p_owner->_error_frames;
	return (int)(loss_frames * 100 / (p_owner->_good_frames + loss_frames));
}

BOOL pifRc_CheckFailSafe(PifRc* p_owner) 
{
 8017a08:	b480      	push	{r7}
 8017a0a:	b085      	sub	sp, #20
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
	BOOL timeout = FALSE;
 8017a10:	2300      	movs	r3, #0
 8017a12:	73fb      	strb	r3, [r7, #15]

	if (p_owner->_max_frame_period) {
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	889b      	ldrh	r3, [r3, #4]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d00c      	beq.n	8017a36 <pifRc_CheckFailSafe+0x2e>
		timeout = (pif_cumulative_timer1ms - p_owner->_last_frame_time) > p_owner->_max_frame_period;
 8017a1c:	4b0e      	ldr	r3, [pc, #56]	; (8017a58 <pifRc_CheckFailSafe+0x50>)
 8017a1e:	681a      	ldr	r2, [r3, #0]
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	689b      	ldr	r3, [r3, #8]
 8017a24:	1ad3      	subs	r3, r2, r3
 8017a26:	687a      	ldr	r2, [r7, #4]
 8017a28:	8892      	ldrh	r2, [r2, #4]
 8017a2a:	4293      	cmp	r3, r2
 8017a2c:	bf8c      	ite	hi
 8017a2e:	2301      	movhi	r3, #1
 8017a30:	2300      	movls	r3, #0
 8017a32:	b2db      	uxtb	r3, r3
 8017a34:	73fb      	strb	r3, [r7, #15]
	}
	return p_owner->_failsafe || timeout;
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	78db      	ldrb	r3, [r3, #3]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d102      	bne.n	8017a44 <pifRc_CheckFailSafe+0x3c>
 8017a3e:	7bfb      	ldrb	r3, [r7, #15]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d001      	beq.n	8017a48 <pifRc_CheckFailSafe+0x40>
 8017a44:	2301      	movs	r3, #1
 8017a46:	e000      	b.n	8017a4a <pifRc_CheckFailSafe+0x42>
 8017a48:	2300      	movs	r3, #0
 8017a4a:	b2db      	uxtb	r3, r3
}
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	3714      	adds	r7, #20
 8017a50:	46bd      	mov	sp, r7
 8017a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a56:	4770      	bx	lr
 8017a58:	20001f08 	.word	0x20001f08

08017a5c <_ParsingPacket>:

#define IBUS_RETRY_TIMEOUT		3		// 3ms, Packets are received very ~7ms so use ~half that for the gap


static void _ParsingPacket(PifRcIbus *p_owner, PifActCommReceiveData act_receive_data)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b084      	sub	sp, #16
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
 8017a64:	6039      	str	r1, [r7, #0]
	uint8_t data;
	static uint8_t ptr;                      // pointer in buffer
	static uint16_t chksum;                  // checksum calculation
	static uint8_t lchksum;                  // checksum lower byte received

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017a66:	e070      	b.n	8017b4a <_ParsingPacket+0xee>
		switch (p_owner->__rx_state) {
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017a6e:	2b03      	cmp	r3, #3
 8017a70:	d86a      	bhi.n	8017b48 <_ParsingPacket+0xec>
 8017a72:	a201      	add	r2, pc, #4	; (adr r2, 8017a78 <_ParsingPacket+0x1c>)
 8017a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a78:	08017a89 	.word	0x08017a89
 8017a7c:	08017abd 	.word	0x08017abd
 8017a80:	08017afd 	.word	0x08017afd
 8017a84:	08017b0d 	.word	0x08017b0d
		case IRS_GET_LENGTH:
			if (data <= IBUS_FRAME_SIZE && data > IBUS_OVERHEAD) {
 8017a88:	7bfb      	ldrb	r3, [r7, #15]
 8017a8a:	2b20      	cmp	r3, #32
 8017a8c:	d85d      	bhi.n	8017b4a <_ParsingPacket+0xee>
 8017a8e:	7bfb      	ldrb	r3, [r7, #15]
 8017a90:	2b03      	cmp	r3, #3
 8017a92:	d95a      	bls.n	8017b4a <_ParsingPacket+0xee>
				ptr = 0;
 8017a94:	4b34      	ldr	r3, [pc, #208]	; (8017b68 <_ParsingPacket+0x10c>)
 8017a96:	2200      	movs	r2, #0
 8017a98:	701a      	strb	r2, [r3, #0]
				p_owner->__rx_length = data - IBUS_OVERHEAD;
 8017a9a:	7bfb      	ldrb	r3, [r7, #15]
 8017a9c:	3b03      	subs	r3, #3
 8017a9e:	b2da      	uxtb	r2, r3
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
				chksum = 0xFFFF - data;
 8017aa6:	7bfb      	ldrb	r3, [r7, #15]
 8017aa8:	b29b      	uxth	r3, r3
 8017aaa:	43db      	mvns	r3, r3
 8017aac:	b29a      	uxth	r2, r3
 8017aae:	4b2f      	ldr	r3, [pc, #188]	; (8017b6c <_ParsingPacket+0x110>)
 8017ab0:	801a      	strh	r2, [r3, #0]
				p_owner->__rx_state = IRS_GET_DATA;
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	2201      	movs	r2, #1
 8017ab6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			}
			break;
 8017aba:	e046      	b.n	8017b4a <_ParsingPacket+0xee>

		case IRS_GET_DATA:
			p_owner->__rx_buffer[ptr++] = data;
 8017abc:	4b2a      	ldr	r3, [pc, #168]	; (8017b68 <_ParsingPacket+0x10c>)
 8017abe:	781b      	ldrb	r3, [r3, #0]
 8017ac0:	1c5a      	adds	r2, r3, #1
 8017ac2:	b2d1      	uxtb	r1, r2
 8017ac4:	4a28      	ldr	r2, [pc, #160]	; (8017b68 <_ParsingPacket+0x10c>)
 8017ac6:	7011      	strb	r1, [r2, #0]
 8017ac8:	4619      	mov	r1, r3
 8017aca:	7bfa      	ldrb	r2, [r7, #15]
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	440b      	add	r3, r1
 8017ad0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
			chksum -= data;
 8017ad4:	4b25      	ldr	r3, [pc, #148]	; (8017b6c <_ParsingPacket+0x110>)
 8017ad6:	881a      	ldrh	r2, [r3, #0]
 8017ad8:	7bfb      	ldrb	r3, [r7, #15]
 8017ada:	b29b      	uxth	r3, r3
 8017adc:	1ad3      	subs	r3, r2, r3
 8017ade:	b29a      	uxth	r2, r3
 8017ae0:	4b22      	ldr	r3, [pc, #136]	; (8017b6c <_ParsingPacket+0x110>)
 8017ae2:	801a      	strh	r2, [r3, #0]
			if (ptr == p_owner->__rx_length) {
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
 8017aea:	4b1f      	ldr	r3, [pc, #124]	; (8017b68 <_ParsingPacket+0x10c>)
 8017aec:	781b      	ldrb	r3, [r3, #0]
 8017aee:	429a      	cmp	r2, r3
 8017af0:	d12b      	bne.n	8017b4a <_ParsingPacket+0xee>
				p_owner->__rx_state = IRS_GET_CHKSUML;
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	2202      	movs	r2, #2
 8017af6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			}
			break;
 8017afa:	e026      	b.n	8017b4a <_ParsingPacket+0xee>

		case IRS_GET_CHKSUML:
			lchksum = data;
 8017afc:	7bfa      	ldrb	r2, [r7, #15]
 8017afe:	4b1c      	ldr	r3, [pc, #112]	; (8017b70 <_ParsingPacket+0x114>)
 8017b00:	701a      	strb	r2, [r3, #0]
			p_owner->__rx_state = IRS_GET_CHKSUMH;
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	2203      	movs	r2, #3
 8017b06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			break;
 8017b0a:	e01e      	b.n	8017b4a <_ParsingPacket+0xee>

		case IRS_GET_CHKSUMH:
			// Validate checksum
			if (chksum == ((uint16_t)data << 8) + lchksum) {
 8017b0c:	4b17      	ldr	r3, [pc, #92]	; (8017b6c <_ParsingPacket+0x110>)
 8017b0e:	881b      	ldrh	r3, [r3, #0]
 8017b10:	4619      	mov	r1, r3
 8017b12:	7bfb      	ldrb	r3, [r7, #15]
 8017b14:	021b      	lsls	r3, r3, #8
 8017b16:	4a16      	ldr	r2, [pc, #88]	; (8017b70 <_ParsingPacket+0x114>)
 8017b18:	7812      	ldrb	r2, [r2, #0]
 8017b1a:	4413      	add	r3, r2
 8017b1c:	4299      	cmp	r1, r3
 8017b1e:	d109      	bne.n	8017b34 <_ParsingPacket+0xd8>
				p_owner->parent._good_frames++;
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	68db      	ldr	r3, [r3, #12]
 8017b24:	1c5a      	adds	r2, r3, #1
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	60da      	str	r2, [r3, #12]
				p_owner->__rx_state = IRS_DONE;
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	2204      	movs	r2, #4
 8017b2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8017b32:	e00a      	b.n	8017b4a <_ParsingPacket+0xee>
			}
			else {
				p_owner->parent._error_frames++;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	691b      	ldr	r3, [r3, #16]
 8017b38:	1c5a      	adds	r2, r3, #1
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	611a      	str	r2, [r3, #16]
				p_owner->__rx_state = IRS_GET_LENGTH;
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	2200      	movs	r2, #0
 8017b42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			}
			break;
 8017b46:	e000      	b.n	8017b4a <_ParsingPacket+0xee>

		default:
			break;
 8017b48:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017b4e:	f107 010f 	add.w	r1, r7, #15
 8017b52:	683b      	ldr	r3, [r7, #0]
 8017b54:	4610      	mov	r0, r2
 8017b56:	4798      	blx	r3
 8017b58:	4603      	mov	r3, r0
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d184      	bne.n	8017a68 <_ParsingPacket+0xc>
		}
	}
}
 8017b5e:	bf00      	nop
 8017b60:	bf00      	nop
 8017b62:	3710      	adds	r7, #16
 8017b64:	46bd      	mov	sp, r7
 8017b66:	bd80      	pop	{r7, pc}
 8017b68:	2000208a 	.word	0x2000208a
 8017b6c:	2000208c 	.word	0x2000208c
 8017b70:	2000208e 	.word	0x2000208e

08017b74 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b090      	sub	sp, #64	; 0x40
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
 8017b7c:	6039      	str	r1, [r7, #0]
	PifRcIbus *p_owner = (PifRcIbus *)p_client;
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	637b      	str	r3, [r7, #52]	; 0x34
	PifRcIbusSensorinfo* p_sensor;
    int i;
	uint16_t p = 0;
 8017b82:	2300      	movs	r3, #0
 8017b84:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint8_t tx_buffer[8];					// tx message buffer
	uint16_t channel[PIF_IBUS_CHANNEL_COUNT]; 	// servo data received
	uint16_t chksum;

    if (!p_owner->parent.__evt_receive) return;
 8017b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b88:	699b      	ldr	r3, [r3, #24]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	f000 8151 	beq.w	8017e32 <_evtParsing+0x2be>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= IBUS_RETRY_TIMEOUT) {
 8017b90:	4baa      	ldr	r3, [pc, #680]	; (8017e3c <_evtParsing+0x2c8>)
 8017b92:	681a      	ldr	r2, [r3, #0]
 8017b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017b9a:	1ad3      	subs	r3, r2, r3
 8017b9c:	2b02      	cmp	r3, #2
 8017b9e:	d903      	bls.n	8017ba8 <_evtParsing+0x34>
		p_owner->__rx_state = IRS_GET_LENGTH;
 8017ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 8017ba8:	4ba4      	ldr	r3, [pc, #656]	; (8017e3c <_evtParsing+0x2c8>)
 8017baa:	681a      	ldr	r2, [r3, #0]
 8017bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    if (p_owner->__rx_state < IRS_DONE) {
 8017bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bb4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017bb8:	2b03      	cmp	r3, #3
 8017bba:	d803      	bhi.n	8017bc4 <_evtParsing+0x50>
    	_ParsingPacket(p_owner, act_receive_data);
 8017bbc:	6839      	ldr	r1, [r7, #0]
 8017bbe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017bc0:	f7ff ff4c 	bl	8017a5c <_ParsingPacket>
    }

    if (p_owner->__rx_state == IRS_DONE) {
 8017bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bc6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017bca:	2b04      	cmp	r3, #4
 8017bcc:	f040 8132 	bne.w	8017e34 <_evtParsing+0x2c0>
		p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 8017bd0:	4b9a      	ldr	r3, [pc, #616]	; (8017e3c <_evtParsing+0x2c8>)
 8017bd2:	681a      	ldr	r2, [r3, #0]
 8017bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bd6:	609a      	str	r2, [r3, #8]

		// Checksum is all fine Execute command - 
		uint8_t adr = p_owner->__rx_buffer[0] & 0x0f;
 8017bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bda:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8017bde:	f003 030f 	and.w	r3, r3, #15
 8017be2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		if (p_owner->__rx_buffer[0] == IBUS_COMMAND_SERVO) {
 8017be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017be8:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8017bec:	2b40      	cmp	r3, #64	; 0x40
 8017bee:	d130      	bne.n	8017c52 <_evtParsing+0xde>
			// Valid servo command received - extract channel data
			for (i = 1; i < PIF_IBUS_CHANNEL_COUNT * 2 + 1; i += 2) {
 8017bf0:	2301      	movs	r3, #1
 8017bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017bf4:	e01c      	b.n	8017c30 <_evtParsing+0xbc>
				channel[i / 2] = p_owner->__rx_buffer[i] | (p_owner->__rx_buffer[i + 1] << 8);
 8017bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bfa:	4413      	add	r3, r2
 8017bfc:	337a      	adds	r3, #122	; 0x7a
 8017bfe:	781b      	ldrb	r3, [r3, #0]
 8017c00:	b21a      	sxth	r2, r3
 8017c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c04:	3301      	adds	r3, #1
 8017c06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017c08:	440b      	add	r3, r1
 8017c0a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8017c0e:	021b      	lsls	r3, r3, #8
 8017c10:	b21b      	sxth	r3, r3
 8017c12:	4313      	orrs	r3, r2
 8017c14:	b219      	sxth	r1, r3
 8017c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c18:	0fda      	lsrs	r2, r3, #31
 8017c1a:	4413      	add	r3, r2
 8017c1c:	105b      	asrs	r3, r3, #1
 8017c1e:	b28a      	uxth	r2, r1
 8017c20:	005b      	lsls	r3, r3, #1
 8017c22:	3340      	adds	r3, #64	; 0x40
 8017c24:	443b      	add	r3, r7
 8017c26:	f823 2c38 	strh.w	r2, [r3, #-56]
			for (i = 1; i < PIF_IBUS_CHANNEL_COUNT * 2 + 1; i += 2) {
 8017c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c2c:	3302      	adds	r3, #2
 8017c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c32:	2b1c      	cmp	r3, #28
 8017c34:	dddf      	ble.n	8017bf6 <_evtParsing+0x82>
			}

	    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channel, p_owner->parent.__p_issuer);
 8017c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c38:	699b      	ldr	r3, [r3, #24]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	f000 80f4 	beq.w	8017e28 <_evtParsing+0x2b4>
 8017c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c42:	699b      	ldr	r3, [r3, #24]
 8017c44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017c48:	69d2      	ldr	r2, [r2, #28]
 8017c4a:	f107 0108 	add.w	r1, r7, #8
 8017c4e:	4798      	blx	r3
 8017c50:	e0ea      	b.n	8017e28 <_evtParsing+0x2b4>
		} 
		else if (p_owner->__p_comm->_p_tx_buffer && adr <= p_owner->_number_sensors && adr > 0 && p_owner->__rx_length == 1) {
 8017c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c56:	695b      	ldr	r3, [r3, #20]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	f000 80e5 	beq.w	8017e28 <_evtParsing+0x2b4>
 8017c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017c64:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8017c68:	429a      	cmp	r2, r3
 8017c6a:	f200 80dd 	bhi.w	8017e28 <_evtParsing+0x2b4>
 8017c6e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	f000 80d8 	beq.w	8017e28 <_evtParsing+0x2b4>
 8017c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c7a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8017c7e:	2b01      	cmp	r3, #1
 8017c80:	f040 80d2 	bne.w	8017e28 <_evtParsing+0x2b4>
			// all sensor data commands go here
			// we only process the length==1 commands (=message length is 4 bytes incl overhead) to prevent the case the
			// return messages from the UART TX port loop back to the RX port and are processed again. This is extra
			// precaution as it will also be prevented by the IBUS_TIMEGAP required
			p_sensor = &p_owner->__sensors[adr - 1];
 8017c84:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017c88:	3b01      	subs	r3, #1
 8017c8a:	3305      	adds	r3, #5
 8017c8c:	00db      	lsls	r3, r3, #3
 8017c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017c90:	4413      	add	r3, r2
 8017c92:	633b      	str	r3, [r7, #48]	; 0x30
			switch (p_owner->__rx_buffer[0] & 0x0f0) {
 8017c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c96:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8017c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017c9e:	2ba0      	cmp	r3, #160	; 0xa0
 8017ca0:	d049      	beq.n	8017d36 <_evtParsing+0x1c2>
 8017ca2:	2ba0      	cmp	r3, #160	; 0xa0
 8017ca4:	f300 808f 	bgt.w	8017dc6 <_evtParsing+0x252>
 8017ca8:	2b80      	cmp	r3, #128	; 0x80
 8017caa:	d002      	beq.n	8017cb2 <_evtParsing+0x13e>
 8017cac:	2b90      	cmp	r3, #144	; 0x90
 8017cae:	d016      	beq.n	8017cde <_evtParsing+0x16a>
 8017cb0:	e089      	b.n	8017dc6 <_evtParsing+0x252>
			case IBUS_COMMAND_DISCOVER:
				// echo discover command: 0x04, 0x81, 0x7A, 0xFF 
				tx_buffer[p++] = 0x04;
 8017cb2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017cb4:	1c5a      	adds	r2, r3, #1
 8017cb6:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017cb8:	3340      	adds	r3, #64	; 0x40
 8017cba:	443b      	add	r3, r7
 8017cbc:	2204      	movs	r2, #4
 8017cbe:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = IBUS_COMMAND_DISCOVER + adr;
 8017cc2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017cc4:	1c5a      	adds	r2, r3, #1
 8017cc6:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017cc8:	4619      	mov	r1, r3
 8017cca:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017cce:	3b80      	subs	r3, #128	; 0x80
 8017cd0:	b2da      	uxtb	r2, r3
 8017cd2:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8017cd6:	443b      	add	r3, r7
 8017cd8:	f803 2c1c 	strb.w	r2, [r3, #-28]
				break;
 8017cdc:	e078      	b.n	8017dd0 <_evtParsing+0x25c>

			case IBUS_COMMAND_TYPE:
				// echo sensor type command: 0x06 0x91 0x00 0x02 0x66 0xFF 
				tx_buffer[p++] = 0x06;
 8017cde:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017ce0:	1c5a      	adds	r2, r3, #1
 8017ce2:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017ce4:	3340      	adds	r3, #64	; 0x40
 8017ce6:	443b      	add	r3, r7
 8017ce8:	2206      	movs	r2, #6
 8017cea:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = IBUS_COMMAND_TYPE + adr;
 8017cee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017cf0:	1c5a      	adds	r2, r3, #1
 8017cf2:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017cf4:	4619      	mov	r1, r3
 8017cf6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017cfa:	3b70      	subs	r3, #112	; 0x70
 8017cfc:	b2da      	uxtb	r2, r3
 8017cfe:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8017d02:	443b      	add	r3, r7
 8017d04:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = p_sensor->type;
 8017d08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d0a:	1c5a      	adds	r2, r3, #1
 8017d0c:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017d0e:	4619      	mov	r1, r3
 8017d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d12:	781a      	ldrb	r2, [r3, #0]
 8017d14:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8017d18:	443b      	add	r3, r7
 8017d1a:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = p_sensor->length;
 8017d1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d20:	1c5a      	adds	r2, r3, #1
 8017d22:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017d24:	4619      	mov	r1, r3
 8017d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d28:	785a      	ldrb	r2, [r3, #1]
 8017d2a:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8017d2e:	443b      	add	r3, r7
 8017d30:	f803 2c1c 	strb.w	r2, [r3, #-28]
				break;
 8017d34:	e04c      	b.n	8017dd0 <_evtParsing+0x25c>

			case IBUS_COMMAND_VALUE:
				// echo sensor value command: 0x06 0x91 0x00 0x02 0x66 0xFF 
				tx_buffer[p++] = 0x04 + p_sensor->length;
 8017d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d38:	785a      	ldrb	r2, [r3, #1]
 8017d3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d3c:	1c59      	adds	r1, r3, #1
 8017d3e:	8779      	strh	r1, [r7, #58]	; 0x3a
 8017d40:	3204      	adds	r2, #4
 8017d42:	b2d2      	uxtb	r2, r2
 8017d44:	3340      	adds	r3, #64	; 0x40
 8017d46:	443b      	add	r3, r7
 8017d48:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = IBUS_COMMAND_VALUE + adr;
 8017d4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d4e:	1c5a      	adds	r2, r3, #1
 8017d50:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017d52:	4619      	mov	r1, r3
 8017d54:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017d58:	3b60      	subs	r3, #96	; 0x60
 8017d5a:	b2da      	uxtb	r2, r3
 8017d5c:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8017d60:	443b      	add	r3, r7
 8017d62:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = p_sensor->value & 0x0ff;
 8017d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d68:	685a      	ldr	r2, [r3, #4]
 8017d6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d6c:	1c59      	adds	r1, r3, #1
 8017d6e:	8779      	strh	r1, [r7, #58]	; 0x3a
 8017d70:	b2d2      	uxtb	r2, r2
 8017d72:	3340      	adds	r3, #64	; 0x40
 8017d74:	443b      	add	r3, r7
 8017d76:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = (p_sensor->value >> 8) & 0x0ff; 
 8017d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d7c:	685b      	ldr	r3, [r3, #4]
 8017d7e:	121a      	asrs	r2, r3, #8
 8017d80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d82:	1c59      	adds	r1, r3, #1
 8017d84:	8779      	strh	r1, [r7, #58]	; 0x3a
 8017d86:	b2d2      	uxtb	r2, r2
 8017d88:	3340      	adds	r3, #64	; 0x40
 8017d8a:	443b      	add	r3, r7
 8017d8c:	f803 2c1c 	strb.w	r2, [r3, #-28]
				if (p_sensor->length == 4) {
 8017d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d92:	785b      	ldrb	r3, [r3, #1]
 8017d94:	2b04      	cmp	r3, #4
 8017d96:	d11a      	bne.n	8017dce <_evtParsing+0x25a>
					tx_buffer[p++] = (p_sensor->value >> 16) & 0x0ff; 
 8017d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d9a:	685b      	ldr	r3, [r3, #4]
 8017d9c:	141a      	asrs	r2, r3, #16
 8017d9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017da0:	1c59      	adds	r1, r3, #1
 8017da2:	8779      	strh	r1, [r7, #58]	; 0x3a
 8017da4:	b2d2      	uxtb	r2, r2
 8017da6:	3340      	adds	r3, #64	; 0x40
 8017da8:	443b      	add	r3, r7
 8017daa:	f803 2c1c 	strb.w	r2, [r3, #-28]
					tx_buffer[p++] = (p_sensor->value >> 24) & 0x0ff; 
 8017dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017db0:	685b      	ldr	r3, [r3, #4]
 8017db2:	0e1a      	lsrs	r2, r3, #24
 8017db4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017db6:	1c59      	adds	r1, r3, #1
 8017db8:	8779      	strh	r1, [r7, #58]	; 0x3a
 8017dba:	b2d2      	uxtb	r2, r2
 8017dbc:	3340      	adds	r3, #64	; 0x40
 8017dbe:	443b      	add	r3, r7
 8017dc0:	f803 2c1c 	strb.w	r2, [r3, #-28]
				}
				break;
 8017dc4:	e003      	b.n	8017dce <_evtParsing+0x25a>

			default:
				adr = 0; // unknown command, prevent sending chksum
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				break;
 8017dcc:	e000      	b.n	8017dd0 <_evtParsing+0x25c>
				break;
 8017dce:	bf00      	nop
			}
			if (adr > 0) {
 8017dd0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d027      	beq.n	8017e28 <_evtParsing+0x2b4>
				chksum = 0xFFFF - pifCheckSum(tx_buffer, p);
 8017dd8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017dde:	4611      	mov	r1, r2
 8017de0:	4618      	mov	r0, r3
 8017de2:	f7fa fabc 	bl	801235e <pifCheckSum>
 8017de6:	4603      	mov	r3, r0
 8017de8:	b29b      	uxth	r3, r3
 8017dea:	43db      	mvns	r3, r3
 8017dec:	85fb      	strh	r3, [r7, #46]	; 0x2e
				tx_buffer[p++] = chksum & 0x0ff;
 8017dee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017df0:	1c5a      	adds	r2, r3, #1
 8017df2:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017df4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017df6:	b2d2      	uxtb	r2, r2
 8017df8:	3340      	adds	r3, #64	; 0x40
 8017dfa:	443b      	add	r3, r7
 8017dfc:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = chksum >> 8;
 8017e00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017e02:	0a1b      	lsrs	r3, r3, #8
 8017e04:	b29a      	uxth	r2, r3
 8017e06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e08:	1c59      	adds	r1, r3, #1
 8017e0a:	8779      	strh	r1, [r7, #58]	; 0x3a
 8017e0c:	b2d2      	uxtb	r2, r2
 8017e0e:	3340      	adds	r3, #64	; 0x40
 8017e10:	443b      	add	r3, r7
 8017e12:	f803 2c1c 	strb.w	r2, [r3, #-28]

				pifRingBuffer_PutData(p_owner->__p_comm->_p_tx_buffer, tx_buffer, p);
 8017e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e1a:	695b      	ldr	r3, [r3, #20]
 8017e1c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017e1e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8017e22:	4618      	mov	r0, r3
 8017e24:	f7fc f804 	bl	8013e30 <pifRingBuffer_PutData>
			}
		}

    	p_owner->__rx_state = IRS_GET_LENGTH;
 8017e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e2a:	2200      	movs	r2, #0
 8017e2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8017e30:	e000      	b.n	8017e34 <_evtParsing+0x2c0>
    if (!p_owner->parent.__evt_receive) return;
 8017e32:	bf00      	nop
    }
}
 8017e34:	3740      	adds	r7, #64	; 0x40
 8017e36:	46bd      	mov	sp, r7
 8017e38:	bd80      	pop	{r7, pc}
 8017e3a:	bf00      	nop
 8017e3c:	20001f08 	.word	0x20001f08

08017e40 <pifRcIbus_Init>:

BOOL pifRcIbus_Init(PifRcIbus* p_owner, PifId id)
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b082      	sub	sp, #8
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
 8017e48:	460b      	mov	r3, r1
 8017e4a:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d104      	bne.n	8017e5c <pifRcIbus_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8017e52:	4b11      	ldr	r3, [pc, #68]	; (8017e98 <pifRcIbus_Init+0x58>)
 8017e54:	2201      	movs	r2, #1
 8017e56:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8017e58:	2300      	movs	r3, #0
 8017e5a:	e018      	b.n	8017e8e <pifRcIbus_Init+0x4e>
	}

	memset(p_owner, 0, sizeof(PifRcIbus));
 8017e5c:	22a0      	movs	r2, #160	; 0xa0
 8017e5e:	2100      	movs	r1, #0
 8017e60:	6878      	ldr	r0, [r7, #4]
 8017e62:	f00b fa13 	bl	802328c <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8017e66:	887b      	ldrh	r3, [r7, #2]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d106      	bne.n	8017e7a <pifRcIbus_Init+0x3a>
 8017e6c:	4b0b      	ldr	r3, [pc, #44]	; (8017e9c <pifRcIbus_Init+0x5c>)
 8017e6e:	881b      	ldrh	r3, [r3, #0]
 8017e70:	1c5a      	adds	r2, r3, #1
 8017e72:	b291      	uxth	r1, r2
 8017e74:	4a09      	ldr	r2, [pc, #36]	; (8017e9c <pifRcIbus_Init+0x5c>)
 8017e76:	8011      	strh	r1, [r2, #0]
 8017e78:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	887a      	ldrh	r2, [r7, #2]
 8017e7e:	801a      	strh	r2, [r3, #0]
	p_owner->parent._channel_count = PIF_IBUS_CHANNEL_COUNT;
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	220e      	movs	r2, #14
 8017e84:	709a      	strb	r2, [r3, #2]
	p_owner->parent._failsafe = FALSE;
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	2200      	movs	r2, #0
 8017e8a:	70da      	strb	r2, [r3, #3]
    return TRUE;
 8017e8c:	2301      	movs	r3, #1
}
 8017e8e:	4618      	mov	r0, r3
 8017e90:	3708      	adds	r7, #8
 8017e92:	46bd      	mov	sp, r7
 8017e94:	bd80      	pop	{r7, pc}
 8017e96:	bf00      	nop
 8017e98:	20001ef0 	.word	0x20001ef0
 8017e9c:	2000005c 	.word	0x2000005c

08017ea0 <pifRcIbus_AttachComm>:

void pifRcIbus_AttachComm(PifRcIbus* p_owner, PifComm *p_comm)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b082      	sub	sp, #8
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	6078      	str	r0, [r7, #4]
 8017ea8:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	683a      	ldr	r2, [r7, #0]
 8017eae:	625a      	str	r2, [r3, #36]	; 0x24
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	4a04      	ldr	r2, [pc, #16]	; (8017ec4 <pifRcIbus_AttachComm+0x24>)
 8017eb4:	6879      	ldr	r1, [r7, #4]
 8017eb6:	6838      	ldr	r0, [r7, #0]
 8017eb8:	f7fa fbca 	bl	8012650 <pifComm_AttachClient>
}
 8017ebc:	bf00      	nop
 8017ebe:	3708      	adds	r7, #8
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	bd80      	pop	{r7, pc}
 8017ec4:	08017b75 	.word	0x08017b75

08017ec8 <_processRcPpm>:
#include "core/pif_list.h"
#include "rc/pif_rc_ppm.h"


static uint16_t _processRcPpm(PifRcPpm* p_owner, uint16_t diff)
{
 8017ec8:	b580      	push	{r7, lr}
 8017eca:	b084      	sub	sp, #16
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	6078      	str	r0, [r7, #4]
 8017ed0:	460b      	mov	r3, r1
 8017ed2:	807b      	strh	r3, [r7, #2]
	uint16_t rtn = 0;
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	81fb      	strh	r3, [r7, #14]

	switch (p_owner->__process_step) {
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8017ede:	2b02      	cmp	r3, #2
 8017ee0:	d04f      	beq.n	8017f82 <_processRcPpm+0xba>
 8017ee2:	2b02      	cmp	r3, #2
 8017ee4:	f300 80b5 	bgt.w	8018052 <_processRcPpm+0x18a>
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d002      	beq.n	8017ef2 <_processRcPpm+0x2a>
 8017eec:	2b01      	cmp	r3, #1
 8017eee:	d010      	beq.n	8017f12 <_processRcPpm+0x4a>
 8017ef0:	e0af      	b.n	8018052 <_processRcPpm+0x18a>
	case 0:
		if (diff >= p_owner->__threshold_1us) p_owner->__process_step++;
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017ef8:	887a      	ldrh	r2, [r7, #2]
 8017efa:	429a      	cmp	r2, r3
 8017efc:	f0c0 80a4 	bcc.w	8018048 <_processRcPpm+0x180>
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8017f06:	3301      	adds	r3, #1
 8017f08:	b2da      	uxtb	r2, r3
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8017f10:	e09a      	b.n	8018048 <_processRcPpm+0x180>

	case 1:
		if (diff < p_owner->__threshold_1us) {
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017f18:	887a      	ldrh	r2, [r7, #2]
 8017f1a:	429a      	cmp	r2, r3
 8017f1c:	d224      	bcs.n	8017f68 <_processRcPpm+0xa0>
			p_owner->_channel++;
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017f24:	b2db      	uxtb	r3, r3
 8017f26:	3301      	adds	r3, #1
 8017f28:	b2db      	uxtb	r3, r3
 8017f2a:	b25a      	sxtb	r2, r3
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	f883 2020 	strb.w	r2, [r3, #32]
			if (p_owner->_channel < p_owner->__max_channel) {
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017f38:	461a      	mov	r2, r3
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8017f40:	429a      	cmp	r2, r3
 8017f42:	f280 8083 	bge.w	801804c <_processRcPpm+0x184>
				if (p_owner->_channel + 1 > p_owner->parent._channel_count) p_owner->parent._channel_count = p_owner->_channel + 1;
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017f4c:	461a      	mov	r2, r3
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	789b      	ldrb	r3, [r3, #2]
 8017f52:	429a      	cmp	r2, r3
 8017f54:	db7a      	blt.n	801804c <_processRcPpm+0x184>
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017f5c:	b2db      	uxtb	r3, r3
 8017f5e:	3301      	adds	r3, #1
 8017f60:	b2da      	uxtb	r2, r3
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	709a      	strb	r2, [r3, #2]
		}
		else {
			p_owner->_channel = -1;
			p_owner->__process_step++;
		}
		break;
 8017f66:	e071      	b.n	801804c <_processRcPpm+0x184>
			p_owner->_channel = -1;
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	22ff      	movs	r2, #255	; 0xff
 8017f6c:	f883 2020 	strb.w	r2, [r3, #32]
			p_owner->__process_step++;
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8017f76:	3301      	adds	r3, #1
 8017f78:	b2da      	uxtb	r2, r3
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8017f80:	e064      	b.n	801804c <_processRcPpm+0x184>

	case 2:
		if (diff < p_owner->__threshold_1us) {
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017f88:	887a      	ldrh	r2, [r7, #2]
 8017f8a:	429a      	cmp	r2, r3
 8017f8c:	d257      	bcs.n	801803e <_processRcPpm+0x176>
			p_owner->_channel++;
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017f94:	b2db      	uxtb	r3, r3
 8017f96:	3301      	adds	r3, #1
 8017f98:	b2db      	uxtb	r3, r3
 8017f9a:	b25a      	sxtb	r2, r3
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	f883 2020 	strb.w	r2, [r3, #32]
			if (p_owner->_channel < p_owner->__max_channel) {
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017fa8:	461a      	mov	r2, r3
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	da4d      	bge.n	8018050 <_processRcPpm+0x188>
				if (p_owner->__valid_range.check) {
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8017fba:	f003 0301 	and.w	r3, r3, #1
 8017fbe:	b2db      	uxtb	r3, r3
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d019      	beq.n	8017ff8 <_processRcPpm+0x130>
					if (diff >= p_owner->__valid_range.min && diff <= p_owner->__valid_range.max) {
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017fc8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8017fcc:	b29b      	uxth	r3, r3
 8017fce:	461a      	mov	r2, r3
 8017fd0:	887b      	ldrh	r3, [r7, #2]
 8017fd2:	4293      	cmp	r3, r2
 8017fd4:	d31b      	bcc.n	801800e <_processRcPpm+0x146>
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017fda:	887a      	ldrh	r2, [r7, #2]
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	d816      	bhi.n	801800e <_processRcPpm+0x146>
						p_owner->__p_channel[p_owner->_channel] = diff;
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017fea:	005b      	lsls	r3, r3, #1
 8017fec:	4413      	add	r3, r2
 8017fee:	887a      	ldrh	r2, [r7, #2]
 8017ff0:	801a      	strh	r2, [r3, #0]
						rtn = diff;
 8017ff2:	887b      	ldrh	r3, [r7, #2]
 8017ff4:	81fb      	strh	r3, [r7, #14]
 8017ff6:	e00a      	b.n	801800e <_processRcPpm+0x146>
					}
				}
				else {
					p_owner->__p_channel[p_owner->_channel] = diff;
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018002:	005b      	lsls	r3, r3, #1
 8018004:	4413      	add	r3, r2
 8018006:	887a      	ldrh	r2, [r7, #2]
 8018008:	801a      	strh	r2, [r3, #0]
					rtn = diff;
 801800a:	887b      	ldrh	r3, [r7, #2]
 801800c:	81fb      	strh	r3, [r7, #14]
				}

				if (rtn && p_owner->_channel + 1 >= p_owner->parent._channel_count) {
 801800e:	89fb      	ldrh	r3, [r7, #14]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d01d      	beq.n	8018050 <_processRcPpm+0x188>
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801801a:	3301      	adds	r3, #1
 801801c:	687a      	ldr	r2, [r7, #4]
 801801e:	7892      	ldrb	r2, [r2, #2]
 8018020:	4293      	cmp	r3, r2
 8018022:	db15      	blt.n	8018050 <_processRcPpm+0x188>
					if (p_owner->parent.__evt_receive) {
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	699b      	ldr	r3, [r3, #24]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d011      	beq.n	8018050 <_processRcPpm+0x188>
						(*p_owner->parent.__evt_receive)(&p_owner->parent, p_owner->__p_channel, p_owner->parent.__p_issuer);
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	699b      	ldr	r3, [r3, #24]
 8018030:	6878      	ldr	r0, [r7, #4]
 8018032:	687a      	ldr	r2, [r7, #4]
 8018034:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8018036:	687a      	ldr	r2, [r7, #4]
 8018038:	69d2      	ldr	r2, [r2, #28]
 801803a:	4798      	blx	r3
			}
		}
		else {
			p_owner->_channel = -1;
		}
		break;
 801803c:	e008      	b.n	8018050 <_processRcPpm+0x188>
			p_owner->_channel = -1;
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	22ff      	movs	r2, #255	; 0xff
 8018042:	f883 2020 	strb.w	r2, [r3, #32]
		break;
 8018046:	e003      	b.n	8018050 <_processRcPpm+0x188>
		break;
 8018048:	bf00      	nop
 801804a:	e002      	b.n	8018052 <_processRcPpm+0x18a>
		break;
 801804c:	bf00      	nop
 801804e:	e000      	b.n	8018052 <_processRcPpm+0x18a>
		break;
 8018050:	bf00      	nop
	}
	return rtn;
 8018052:	89fb      	ldrh	r3, [r7, #14]
}
 8018054:	4618      	mov	r0, r3
 8018056:	3710      	adds	r7, #16
 8018058:	46bd      	mov	sp, r7
 801805a:	bd80      	pop	{r7, pc}

0801805c <pifRcPpm_Init>:


BOOL pifRcPpm_Init(PifRcPpm* p_owner, PifId id, uint8_t channel_count, uint16_t threshold_1us)
{
 801805c:	b580      	push	{r7, lr}
 801805e:	b084      	sub	sp, #16
 8018060:	af00      	add	r7, sp, #0
 8018062:	60f8      	str	r0, [r7, #12]
 8018064:	4608      	mov	r0, r1
 8018066:	4611      	mov	r1, r2
 8018068:	461a      	mov	r2, r3
 801806a:	4603      	mov	r3, r0
 801806c:	817b      	strh	r3, [r7, #10]
 801806e:	460b      	mov	r3, r1
 8018070:	727b      	strb	r3, [r7, #9]
 8018072:	4613      	mov	r3, r2
 8018074:	80fb      	strh	r3, [r7, #6]
    if (!p_owner) {
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d104      	bne.n	8018086 <pifRcPpm_Init+0x2a>
        pif_error = E_INVALID_PARAM;
 801807c:	4b1e      	ldr	r3, [pc, #120]	; (80180f8 <pifRcPpm_Init+0x9c>)
 801807e:	2201      	movs	r2, #1
 8018080:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018082:	2300      	movs	r3, #0
 8018084:	e033      	b.n	80180ee <pifRcPpm_Init+0x92>
    }

	memset(p_owner, 0, sizeof(PifRcPpm));
 8018086:	2254      	movs	r2, #84	; 0x54
 8018088:	2100      	movs	r1, #0
 801808a:	68f8      	ldr	r0, [r7, #12]
 801808c:	f00b f8fe 	bl	802328c <memset>

    p_owner->__p_channel = calloc(sizeof(uint16_t), channel_count);
 8018090:	7a7b      	ldrb	r3, [r7, #9]
 8018092:	4619      	mov	r1, r3
 8018094:	2002      	movs	r0, #2
 8018096:	f00b f8a9 	bl	80231ec <calloc>
 801809a:	4603      	mov	r3, r0
 801809c:	461a      	mov	r2, r3
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	651a      	str	r2, [r3, #80]	; 0x50
    if (!p_owner->__p_channel) {
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d104      	bne.n	80180b4 <pifRcPpm_Init+0x58>
		pif_error = E_OUT_OF_HEAP;
 80180aa:	4b13      	ldr	r3, [pc, #76]	; (80180f8 <pifRcPpm_Init+0x9c>)
 80180ac:	2203      	movs	r2, #3
 80180ae:	701a      	strb	r2, [r3, #0]
        return FALSE;
 80180b0:	2300      	movs	r3, #0
 80180b2:	e01c      	b.n	80180ee <pifRcPpm_Init+0x92>
	}

    if (id == PIF_ID_AUTO) id = pif_id++;
 80180b4:	897b      	ldrh	r3, [r7, #10]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d106      	bne.n	80180c8 <pifRcPpm_Init+0x6c>
 80180ba:	4b10      	ldr	r3, [pc, #64]	; (80180fc <pifRcPpm_Init+0xa0>)
 80180bc:	881b      	ldrh	r3, [r3, #0]
 80180be:	1c5a      	adds	r2, r3, #1
 80180c0:	b291      	uxth	r1, r2
 80180c2:	4a0e      	ldr	r2, [pc, #56]	; (80180fc <pifRcPpm_Init+0xa0>)
 80180c4:	8011      	strh	r1, [r2, #0]
 80180c6:	817b      	strh	r3, [r7, #10]
    p_owner->parent._id = id;
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	897a      	ldrh	r2, [r7, #10]
 80180cc:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	2200      	movs	r2, #0
 80180d2:	70da      	strb	r2, [r3, #3]
	p_owner->_channel = -1;
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	22ff      	movs	r2, #255	; 0xff
 80180d8:	f883 2020 	strb.w	r2, [r3, #32]
	p_owner->__max_channel = channel_count;
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	7a7a      	ldrb	r2, [r7, #9]
 80180e0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    p_owner->__threshold_1us = threshold_1us;
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	88fa      	ldrh	r2, [r7, #6]
 80180e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    return TRUE;
 80180ec:	2301      	movs	r3, #1
}
 80180ee:	4618      	mov	r0, r3
 80180f0:	3710      	adds	r7, #16
 80180f2:	46bd      	mov	sp, r7
 80180f4:	bd80      	pop	{r7, pc}
 80180f6:	bf00      	nop
 80180f8:	20001ef0 	.word	0x20001ef0
 80180fc:	2000005c 	.word	0x2000005c

08018100 <pifRcPpm_SetValidRange>:
		p_owner->__p_channel = NULL;
	}
}

BOOL pifRcPpm_SetValidRange(PifRcPpm* p_owner, uint32_t min, uint32_t max)
{
 8018100:	b480      	push	{r7}
 8018102:	b085      	sub	sp, #20
 8018104:	af00      	add	r7, sp, #0
 8018106:	60f8      	str	r0, [r7, #12]
 8018108:	60b9      	str	r1, [r7, #8]
 801810a:	607a      	str	r2, [r7, #4]
	p_owner->__valid_range.check = TRUE;
 801810c:	68fa      	ldr	r2, [r7, #12]
 801810e:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8018112:	f043 0301 	orr.w	r3, r3, #1
 8018116:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
	p_owner->__valid_range.min = min;
 801811a:	68bb      	ldr	r3, [r7, #8]
 801811c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018120:	b299      	uxth	r1, r3
 8018122:	68fa      	ldr	r2, [r7, #12]
 8018124:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8018126:	f361 034f 	bfi	r3, r1, #1, #15
 801812a:	8453      	strh	r3, [r2, #34]	; 0x22
	p_owner->__valid_range.max = max;
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	b29a      	uxth	r2, r3
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	849a      	strh	r2, [r3, #36]	; 0x24
	return TRUE;
 8018134:	2301      	movs	r3, #1
}
 8018136:	4618      	mov	r0, r3
 8018138:	3714      	adds	r7, #20
 801813a:	46bd      	mov	sp, r7
 801813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018140:	4770      	bx	lr

08018142 <pifRcPpm_sigTick>:
	p_owner->__last_ptr = 0;
	p_owner->__count = 0;
}

uint16_t pifRcPpm_sigTick(PifRcPpm* p_owner, uint32_t time_us)
{
 8018142:	b580      	push	{r7, lr}
 8018144:	b084      	sub	sp, #16
 8018146:	af00      	add	r7, sp, #0
 8018148:	6078      	str	r0, [r7, #4]
 801814a:	6039      	str	r1, [r7, #0]
	uint16_t rtn = 0;
 801814c:	2300      	movs	r3, #0
 801814e:	81fb      	strh	r3, [r7, #14]

	p_owner->__pulse[p_owner->__ptr].falling = time_us;
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018156:	687a      	ldr	r2, [r7, #4]
 8018158:	3305      	adds	r3, #5
 801815a:	00db      	lsls	r3, r3, #3
 801815c:	4413      	add	r3, r2
 801815e:	683a      	ldr	r2, [r7, #0]
 8018160:	605a      	str	r2, [r3, #4]
	rtn = _processRcPpm(p_owner, p_owner->__pulse[p_owner->__ptr].falling - p_owner->__pulse[p_owner->__last_ptr].falling);
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018168:	687a      	ldr	r2, [r7, #4]
 801816a:	3305      	adds	r3, #5
 801816c:	00db      	lsls	r3, r3, #3
 801816e:	4413      	add	r3, r2
 8018170:	685b      	ldr	r3, [r3, #4]
 8018172:	b29a      	uxth	r2, r3
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801817a:	6879      	ldr	r1, [r7, #4]
 801817c:	3305      	adds	r3, #5
 801817e:	00db      	lsls	r3, r3, #3
 8018180:	440b      	add	r3, r1
 8018182:	685b      	ldr	r3, [r3, #4]
 8018184:	b29b      	uxth	r3, r3
 8018186:	1ad3      	subs	r3, r2, r3
 8018188:	b29b      	uxth	r3, r3
 801818a:	4619      	mov	r1, r3
 801818c:	6878      	ldr	r0, [r7, #4]
 801818e:	f7ff fe9b 	bl	8017ec8 <_processRcPpm>
 8018192:	4603      	mov	r3, r0
 8018194:	81fb      	strh	r3, [r7, #14]
	p_owner->__last_ptr = p_owner->__ptr;
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	p_owner->__ptr = (p_owner->__ptr + 1) & PIF_RC_PPM_DATA_MASK;
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80181a8:	3301      	adds	r3, #1
 80181aa:	b2db      	uxtb	r3, r3
 80181ac:	f003 0303 	and.w	r3, r3, #3
 80181b0:	b2da      	uxtb	r2, r3
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	if (p_owner->__count < PIF_RC_PPM_DATA_SIZE) p_owner->__count++;
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80181be:	2b03      	cmp	r3, #3
 80181c0:	d807      	bhi.n	80181d2 <pifRcPpm_sigTick+0x90>
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80181c8:	3301      	adds	r3, #1
 80181ca:	b2da      	uxtb	r2, r3
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	return rtn;
 80181d2:	89fb      	ldrh	r3, [r7, #14]
}
 80181d4:	4618      	mov	r0, r3
 80181d6:	3710      	adds	r7, #16
 80181d8:	46bd      	mov	sp, r7
 80181da:	bd80      	pop	{r7, pc}

080181dc <pifRcPwm_Init>:
	return rtn;
}


BOOL pifRcPwm_Init(PifRcPwm* p_owner, PifId id, uint8_t channel_count)
{
 80181dc:	b580      	push	{r7, lr}
 80181de:	b082      	sub	sp, #8
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	6078      	str	r0, [r7, #4]
 80181e4:	460b      	mov	r3, r1
 80181e6:	807b      	strh	r3, [r7, #2]
 80181e8:	4613      	mov	r3, r2
 80181ea:	707b      	strb	r3, [r7, #1]
    if (!p_owner) {
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d104      	bne.n	80181fc <pifRcPwm_Init+0x20>
        pif_error = E_INVALID_PARAM;
 80181f2:	4b25      	ldr	r3, [pc, #148]	; (8018288 <pifRcPwm_Init+0xac>)
 80181f4:	2201      	movs	r2, #1
 80181f6:	701a      	strb	r2, [r3, #0]
        return FALSE;
 80181f8:	2300      	movs	r3, #0
 80181fa:	e041      	b.n	8018280 <pifRcPwm_Init+0xa4>
    }

	memset(p_owner, 0, sizeof(PifRcPwm));
 80181fc:	2230      	movs	r2, #48	; 0x30
 80181fe:	2100      	movs	r1, #0
 8018200:	6878      	ldr	r0, [r7, #4]
 8018202:	f00b f843 	bl	802328c <memset>

	p_owner->__p_data = calloc(sizeof(PifRcPwmData), channel_count);
 8018206:	787b      	ldrb	r3, [r7, #1]
 8018208:	4619      	mov	r1, r3
 801820a:	2024      	movs	r0, #36	; 0x24
 801820c:	f00a ffee 	bl	80231ec <calloc>
 8018210:	4603      	mov	r3, r0
 8018212:	461a      	mov	r2, r3
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	629a      	str	r2, [r3, #40]	; 0x28
    if (!p_owner->__p_data) {
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801821c:	2b00      	cmp	r3, #0
 801821e:	d108      	bne.n	8018232 <pifRcPwm_Init+0x56>
		pif_error = E_OUT_OF_HEAP;
 8018220:	4b19      	ldr	r3, [pc, #100]	; (8018288 <pifRcPwm_Init+0xac>)
 8018222:	2203      	movs	r2, #3
 8018224:	701a      	strb	r2, [r3, #0]
        goto fail;
 8018226:	bf00      	nop
	p_owner->parent._failsafe = FALSE;
	p_owner->__max_channel = channel_count;
    return TRUE;

fail:
	pifRcPwm_Clear(p_owner);
 8018228:	6878      	ldr	r0, [r7, #4]
 801822a:	f000 f831 	bl	8018290 <pifRcPwm_Clear>
	return FALSE;
 801822e:	2300      	movs	r3, #0
 8018230:	e026      	b.n	8018280 <pifRcPwm_Init+0xa4>
    p_owner->__p_channel = calloc(sizeof(uint16_t), channel_count);
 8018232:	787b      	ldrb	r3, [r7, #1]
 8018234:	4619      	mov	r1, r3
 8018236:	2002      	movs	r0, #2
 8018238:	f00a ffd8 	bl	80231ec <calloc>
 801823c:	4603      	mov	r3, r0
 801823e:	461a      	mov	r2, r3
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	62da      	str	r2, [r3, #44]	; 0x2c
    if (!p_owner->__p_channel) {
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018248:	2b00      	cmp	r3, #0
 801824a:	d104      	bne.n	8018256 <pifRcPwm_Init+0x7a>
		pif_error = E_OUT_OF_HEAP;
 801824c:	4b0e      	ldr	r3, [pc, #56]	; (8018288 <pifRcPwm_Init+0xac>)
 801824e:	2203      	movs	r2, #3
 8018250:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018252:	2300      	movs	r3, #0
 8018254:	e014      	b.n	8018280 <pifRcPwm_Init+0xa4>
    if (id == PIF_ID_AUTO) id = pif_id++;
 8018256:	887b      	ldrh	r3, [r7, #2]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d106      	bne.n	801826a <pifRcPwm_Init+0x8e>
 801825c:	4b0b      	ldr	r3, [pc, #44]	; (801828c <pifRcPwm_Init+0xb0>)
 801825e:	881b      	ldrh	r3, [r3, #0]
 8018260:	1c5a      	adds	r2, r3, #1
 8018262:	b291      	uxth	r1, r2
 8018264:	4a09      	ldr	r2, [pc, #36]	; (801828c <pifRcPwm_Init+0xb0>)
 8018266:	8011      	strh	r1, [r2, #0]
 8018268:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	887a      	ldrh	r2, [r7, #2]
 801826e:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	2200      	movs	r2, #0
 8018274:	70da      	strb	r2, [r3, #3]
	p_owner->__max_channel = channel_count;
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	787a      	ldrb	r2, [r7, #1]
 801827a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return TRUE;
 801827e:	2301      	movs	r3, #1
}
 8018280:	4618      	mov	r0, r3
 8018282:	3708      	adds	r7, #8
 8018284:	46bd      	mov	sp, r7
 8018286:	bd80      	pop	{r7, pc}
 8018288:	20001ef0 	.word	0x20001ef0
 801828c:	2000005c 	.word	0x2000005c

08018290 <pifRcPwm_Clear>:

void pifRcPwm_Clear(PifRcPwm* p_owner)
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b082      	sub	sp, #8
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
	if (p_owner->__p_channel) {
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801829c:	2b00      	cmp	r3, #0
 801829e:	d007      	beq.n	80182b0 <pifRcPwm_Clear+0x20>
		free(p_owner->__p_channel);
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182a4:	4618      	mov	r0, r3
 80182a6:	f00a ffdb 	bl	8023260 <free>
		p_owner->__p_channel = NULL;
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	2200      	movs	r2, #0
 80182ae:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	if (p_owner->__p_data) {
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d007      	beq.n	80182c8 <pifRcPwm_Clear+0x38>
		free(p_owner->__p_data);
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182bc:	4618      	mov	r0, r3
 80182be:	f00a ffcf 	bl	8023260 <free>
		p_owner->__p_data = NULL;
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	2200      	movs	r2, #0
 80182c6:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 80182c8:	bf00      	nop
 80182ca:	3708      	adds	r7, #8
 80182cc:	46bd      	mov	sp, r7
 80182ce:	bd80      	pop	{r7, pc}

080182d0 <pifRcPwm_SetValidRange>:

BOOL pifRcPwm_SetValidRange(PifRcPwm* p_owner, uint32_t min, uint32_t max)
{
 80182d0:	b480      	push	{r7}
 80182d2:	b085      	sub	sp, #20
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	60f8      	str	r0, [r7, #12]
 80182d8:	60b9      	str	r1, [r7, #8]
 80182da:	607a      	str	r2, [r7, #4]
	p_owner->__valid_range.check = TRUE;
 80182dc:	68fa      	ldr	r2, [r7, #12]
 80182de:	f892 3020 	ldrb.w	r3, [r2, #32]
 80182e2:	f043 0301 	orr.w	r3, r3, #1
 80182e6:	f882 3020 	strb.w	r3, [r2, #32]
	p_owner->__valid_range.min = min;
 80182ea:	68bb      	ldr	r3, [r7, #8]
 80182ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80182f0:	b299      	uxth	r1, r3
 80182f2:	68fa      	ldr	r2, [r7, #12]
 80182f4:	8c13      	ldrh	r3, [r2, #32]
 80182f6:	f361 034f 	bfi	r3, r1, #1, #15
 80182fa:	8413      	strh	r3, [r2, #32]
	p_owner->__valid_range.max = max;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	b29a      	uxth	r2, r3
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	845a      	strh	r2, [r3, #34]	; 0x22
	return TRUE;
 8018304:	2301      	movs	r3, #1
}
 8018306:	4618      	mov	r0, r3
 8018308:	3714      	adds	r7, #20
 801830a:	46bd      	mov	sp, r7
 801830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018310:	4770      	bx	lr
	...

08018314 <_evtParsing>:

#define SBUS_RETRY_TIMEOUT		3		// 3ms


static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8018314:	b580      	push	{r7, lr}
 8018316:	b090      	sub	sp, #64	; 0x40
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
 801831c:	6039      	str	r1, [r7, #0]
	PifRcSbus *p_owner = (PifRcSbus *)p_client;
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t i, data;
	uint8_t* p_buffer;
	uint16_t channels[PIF_SBUS_CHANNEL_COUNT]; 	// servo data received

    if (!p_owner->parent.__evt_receive) return;
 8018322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018324:	699b      	ldr	r3, [r3, #24]
 8018326:	2b00      	cmp	r3, #0
 8018328:	f000 8206 	beq.w	8018738 <_evtParsing+0x424>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= SBUS_RETRY_TIMEOUT) {
 801832c:	4b1f      	ldr	r3, [pc, #124]	; (80183ac <_evtParsing+0x98>)
 801832e:	681a      	ldr	r2, [r3, #0]
 8018330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018334:	1ad3      	subs	r3, r2, r3
 8018336:	2b02      	cmp	r3, #2
 8018338:	d903      	bls.n	8018342 <_evtParsing+0x2e>
		p_owner->__index = 0;
 801833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801833c:	2200      	movs	r2, #0
 801833e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 8018342:	4b1a      	ldr	r3, [pc, #104]	; (80183ac <_evtParsing+0x98>)
 8018344:	681a      	ldr	r2, [r3, #0]
 8018346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018348:	641a      	str	r2, [r3, #64]	; 0x40

	p_buffer = p_owner->__buffer;
 801834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801834c:	3325      	adds	r3, #37	; 0x25
 801834e:	637b      	str	r3, [r7, #52]	; 0x34

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8018350:	e1e6      	b.n	8018720 <_evtParsing+0x40c>
		if (p_owner->__index == 0 && data != SBUS_STARTBYTE) {
 8018352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018358:	2b00      	cmp	r3, #0
 801835a:	d104      	bne.n	8018366 <_evtParsing+0x52>
 801835c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8018360:	2b0f      	cmp	r3, #15
 8018362:	d000      	beq.n	8018366 <_evtParsing+0x52>
			continue;
 8018364:	e1dc      	b.n	8018720 <_evtParsing+0x40c>
		}

		p_buffer[p_owner->__index++] = data;
 8018366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801836c:	1c5a      	adds	r2, r3, #1
 801836e:	b2d1      	uxtb	r1, r2
 8018370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018372:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
 8018376:	461a      	mov	r2, r3
 8018378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801837a:	4413      	add	r3, r2
 801837c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8018380:	701a      	strb	r2, [r3, #0]

	    if (p_owner->__index == SBUS_FRAME_SIZE) {
 8018382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018388:	2b19      	cmp	r3, #25
 801838a:	f040 81c9 	bne.w	8018720 <_evtParsing+0x40c>
			p_owner->__index = 0;
 801838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018390:	2200      	movs	r2, #0
 8018392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if (p_buffer[24] != SBUS_ENDBYTE) {
 8018396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018398:	3318      	adds	r3, #24
 801839a:	781b      	ldrb	r3, [r3, #0]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d007      	beq.n	80183b0 <_evtParsing+0x9c>
				//incorrect end byte, out of sync
				p_owner->parent._error_frames++;
 80183a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183a2:	691b      	ldr	r3, [r3, #16]
 80183a4:	1c5a      	adds	r2, r3, #1
 80183a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183a8:	611a      	str	r2, [r3, #16]
				continue;
 80183aa:	e1b9      	b.n	8018720 <_evtParsing+0x40c>
 80183ac:	20001f08 	.word	0x20001f08
			}

			p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 80183b0:	4b9d      	ldr	r3, [pc, #628]	; (8018628 <_evtParsing+0x314>)
 80183b2:	681a      	ldr	r2, [r3, #0]
 80183b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183b6:	609a      	str	r2, [r3, #8]

			channels[0]  = (p_buffer[1]       | p_buffer[2] << 8)                       & 0x07FF;
 80183b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183ba:	3301      	adds	r3, #1
 80183bc:	781b      	ldrb	r3, [r3, #0]
 80183be:	b21a      	sxth	r2, r3
 80183c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183c2:	3302      	adds	r3, #2
 80183c4:	781b      	ldrb	r3, [r3, #0]
 80183c6:	021b      	lsls	r3, r3, #8
 80183c8:	b21b      	sxth	r3, r3
 80183ca:	4313      	orrs	r3, r2
 80183cc:	b21b      	sxth	r3, r3
 80183ce:	b29b      	uxth	r3, r3
 80183d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80183d4:	b29b      	uxth	r3, r3
 80183d6:	81bb      	strh	r3, [r7, #12]
			channels[1]  = (p_buffer[2] >> 3  | p_buffer[3] << 5)                 	    & 0x07FF;
 80183d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183da:	3302      	adds	r3, #2
 80183dc:	781b      	ldrb	r3, [r3, #0]
 80183de:	08db      	lsrs	r3, r3, #3
 80183e0:	b2db      	uxtb	r3, r3
 80183e2:	b21a      	sxth	r2, r3
 80183e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183e6:	3303      	adds	r3, #3
 80183e8:	781b      	ldrb	r3, [r3, #0]
 80183ea:	015b      	lsls	r3, r3, #5
 80183ec:	b21b      	sxth	r3, r3
 80183ee:	4313      	orrs	r3, r2
 80183f0:	b21b      	sxth	r3, r3
 80183f2:	b29b      	uxth	r3, r3
 80183f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80183f8:	b29b      	uxth	r3, r3
 80183fa:	81fb      	strh	r3, [r7, #14]
			channels[2]  = (p_buffer[3] >> 6  | p_buffer[4] << 2  | p_buffer[5] << 10)  & 0x07FF;
 80183fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183fe:	3303      	adds	r3, #3
 8018400:	781b      	ldrb	r3, [r3, #0]
 8018402:	099b      	lsrs	r3, r3, #6
 8018404:	b2db      	uxtb	r3, r3
 8018406:	b21a      	sxth	r2, r3
 8018408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801840a:	3304      	adds	r3, #4
 801840c:	781b      	ldrb	r3, [r3, #0]
 801840e:	009b      	lsls	r3, r3, #2
 8018410:	b21b      	sxth	r3, r3
 8018412:	4313      	orrs	r3, r2
 8018414:	b21a      	sxth	r2, r3
 8018416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018418:	3305      	adds	r3, #5
 801841a:	781b      	ldrb	r3, [r3, #0]
 801841c:	029b      	lsls	r3, r3, #10
 801841e:	b21b      	sxth	r3, r3
 8018420:	4313      	orrs	r3, r2
 8018422:	b21b      	sxth	r3, r3
 8018424:	b29b      	uxth	r3, r3
 8018426:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801842a:	b29b      	uxth	r3, r3
 801842c:	823b      	strh	r3, [r7, #16]
			channels[3]  = (p_buffer[5] >> 1  | p_buffer[6] << 7)                 	    & 0x07FF;
 801842e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018430:	3305      	adds	r3, #5
 8018432:	781b      	ldrb	r3, [r3, #0]
 8018434:	085b      	lsrs	r3, r3, #1
 8018436:	b2db      	uxtb	r3, r3
 8018438:	b21a      	sxth	r2, r3
 801843a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801843c:	3306      	adds	r3, #6
 801843e:	781b      	ldrb	r3, [r3, #0]
 8018440:	01db      	lsls	r3, r3, #7
 8018442:	b21b      	sxth	r3, r3
 8018444:	4313      	orrs	r3, r2
 8018446:	b21b      	sxth	r3, r3
 8018448:	b29b      	uxth	r3, r3
 801844a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801844e:	b29b      	uxth	r3, r3
 8018450:	827b      	strh	r3, [r7, #18]
			channels[4]  = (p_buffer[6] >> 4  | p_buffer[7] << 4)                 	    & 0x07FF;
 8018452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018454:	3306      	adds	r3, #6
 8018456:	781b      	ldrb	r3, [r3, #0]
 8018458:	091b      	lsrs	r3, r3, #4
 801845a:	b2db      	uxtb	r3, r3
 801845c:	b21a      	sxth	r2, r3
 801845e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018460:	3307      	adds	r3, #7
 8018462:	781b      	ldrb	r3, [r3, #0]
 8018464:	011b      	lsls	r3, r3, #4
 8018466:	b21b      	sxth	r3, r3
 8018468:	4313      	orrs	r3, r2
 801846a:	b21b      	sxth	r3, r3
 801846c:	b29b      	uxth	r3, r3
 801846e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018472:	b29b      	uxth	r3, r3
 8018474:	82bb      	strh	r3, [r7, #20]
			channels[5]  = (p_buffer[7] >> 7  | p_buffer[8] << 1  | p_buffer[9] << 9)   & 0x07FF;
 8018476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018478:	3307      	adds	r3, #7
 801847a:	781b      	ldrb	r3, [r3, #0]
 801847c:	09db      	lsrs	r3, r3, #7
 801847e:	b2db      	uxtb	r3, r3
 8018480:	b21a      	sxth	r2, r3
 8018482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018484:	3308      	adds	r3, #8
 8018486:	781b      	ldrb	r3, [r3, #0]
 8018488:	005b      	lsls	r3, r3, #1
 801848a:	b21b      	sxth	r3, r3
 801848c:	4313      	orrs	r3, r2
 801848e:	b21a      	sxth	r2, r3
 8018490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018492:	3309      	adds	r3, #9
 8018494:	781b      	ldrb	r3, [r3, #0]
 8018496:	025b      	lsls	r3, r3, #9
 8018498:	b21b      	sxth	r3, r3
 801849a:	4313      	orrs	r3, r2
 801849c:	b21b      	sxth	r3, r3
 801849e:	b29b      	uxth	r3, r3
 80184a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80184a4:	b29b      	uxth	r3, r3
 80184a6:	82fb      	strh	r3, [r7, #22]
			channels[6]  = (p_buffer[9] >> 2  | p_buffer[10] << 6)                	    & 0x07FF;
 80184a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184aa:	3309      	adds	r3, #9
 80184ac:	781b      	ldrb	r3, [r3, #0]
 80184ae:	089b      	lsrs	r3, r3, #2
 80184b0:	b2db      	uxtb	r3, r3
 80184b2:	b21a      	sxth	r2, r3
 80184b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184b6:	330a      	adds	r3, #10
 80184b8:	781b      	ldrb	r3, [r3, #0]
 80184ba:	019b      	lsls	r3, r3, #6
 80184bc:	b21b      	sxth	r3, r3
 80184be:	4313      	orrs	r3, r2
 80184c0:	b21b      	sxth	r3, r3
 80184c2:	b29b      	uxth	r3, r3
 80184c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80184c8:	b29b      	uxth	r3, r3
 80184ca:	833b      	strh	r3, [r7, #24]
			channels[7]  = (p_buffer[10] >> 5 | p_buffer[11] << 3)                	    & 0x07FF;
 80184cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184ce:	330a      	adds	r3, #10
 80184d0:	781b      	ldrb	r3, [r3, #0]
 80184d2:	095b      	lsrs	r3, r3, #5
 80184d4:	b2db      	uxtb	r3, r3
 80184d6:	b21a      	sxth	r2, r3
 80184d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184da:	330b      	adds	r3, #11
 80184dc:	781b      	ldrb	r3, [r3, #0]
 80184de:	00db      	lsls	r3, r3, #3
 80184e0:	b21b      	sxth	r3, r3
 80184e2:	4313      	orrs	r3, r2
 80184e4:	b21b      	sxth	r3, r3
 80184e6:	b29b      	uxth	r3, r3
 80184e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80184ec:	b29b      	uxth	r3, r3
 80184ee:	837b      	strh	r3, [r7, #26]
			channels[8]  = (p_buffer[12]      | p_buffer[13] << 8)                	    & 0x07FF;
 80184f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184f2:	330c      	adds	r3, #12
 80184f4:	781b      	ldrb	r3, [r3, #0]
 80184f6:	b21a      	sxth	r2, r3
 80184f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184fa:	330d      	adds	r3, #13
 80184fc:	781b      	ldrb	r3, [r3, #0]
 80184fe:	021b      	lsls	r3, r3, #8
 8018500:	b21b      	sxth	r3, r3
 8018502:	4313      	orrs	r3, r2
 8018504:	b21b      	sxth	r3, r3
 8018506:	b29b      	uxth	r3, r3
 8018508:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801850c:	b29b      	uxth	r3, r3
 801850e:	83bb      	strh	r3, [r7, #28]
			channels[9]  = (p_buffer[13] >> 3 | p_buffer[14] << 5)                	    & 0x07FF;
 8018510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018512:	330d      	adds	r3, #13
 8018514:	781b      	ldrb	r3, [r3, #0]
 8018516:	08db      	lsrs	r3, r3, #3
 8018518:	b2db      	uxtb	r3, r3
 801851a:	b21a      	sxth	r2, r3
 801851c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801851e:	330e      	adds	r3, #14
 8018520:	781b      	ldrb	r3, [r3, #0]
 8018522:	015b      	lsls	r3, r3, #5
 8018524:	b21b      	sxth	r3, r3
 8018526:	4313      	orrs	r3, r2
 8018528:	b21b      	sxth	r3, r3
 801852a:	b29b      	uxth	r3, r3
 801852c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018530:	b29b      	uxth	r3, r3
 8018532:	83fb      	strh	r3, [r7, #30]
			channels[10] = (p_buffer[14] >> 6 | p_buffer[15] << 2 | p_buffer[16] << 10) & 0x07FF;
 8018534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018536:	330e      	adds	r3, #14
 8018538:	781b      	ldrb	r3, [r3, #0]
 801853a:	099b      	lsrs	r3, r3, #6
 801853c:	b2db      	uxtb	r3, r3
 801853e:	b21a      	sxth	r2, r3
 8018540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018542:	330f      	adds	r3, #15
 8018544:	781b      	ldrb	r3, [r3, #0]
 8018546:	009b      	lsls	r3, r3, #2
 8018548:	b21b      	sxth	r3, r3
 801854a:	4313      	orrs	r3, r2
 801854c:	b21a      	sxth	r2, r3
 801854e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018550:	3310      	adds	r3, #16
 8018552:	781b      	ldrb	r3, [r3, #0]
 8018554:	029b      	lsls	r3, r3, #10
 8018556:	b21b      	sxth	r3, r3
 8018558:	4313      	orrs	r3, r2
 801855a:	b21b      	sxth	r3, r3
 801855c:	b29b      	uxth	r3, r3
 801855e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018562:	b29b      	uxth	r3, r3
 8018564:	843b      	strh	r3, [r7, #32]
			channels[11] = (p_buffer[16] >> 1 | p_buffer[17] << 7)                	    & 0x07FF;
 8018566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018568:	3310      	adds	r3, #16
 801856a:	781b      	ldrb	r3, [r3, #0]
 801856c:	085b      	lsrs	r3, r3, #1
 801856e:	b2db      	uxtb	r3, r3
 8018570:	b21a      	sxth	r2, r3
 8018572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018574:	3311      	adds	r3, #17
 8018576:	781b      	ldrb	r3, [r3, #0]
 8018578:	01db      	lsls	r3, r3, #7
 801857a:	b21b      	sxth	r3, r3
 801857c:	4313      	orrs	r3, r2
 801857e:	b21b      	sxth	r3, r3
 8018580:	b29b      	uxth	r3, r3
 8018582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018586:	b29b      	uxth	r3, r3
 8018588:	847b      	strh	r3, [r7, #34]	; 0x22
			channels[12] = (p_buffer[17] >> 4 | p_buffer[18] << 4)                	    & 0x07FF;
 801858a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801858c:	3311      	adds	r3, #17
 801858e:	781b      	ldrb	r3, [r3, #0]
 8018590:	091b      	lsrs	r3, r3, #4
 8018592:	b2db      	uxtb	r3, r3
 8018594:	b21a      	sxth	r2, r3
 8018596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018598:	3312      	adds	r3, #18
 801859a:	781b      	ldrb	r3, [r3, #0]
 801859c:	011b      	lsls	r3, r3, #4
 801859e:	b21b      	sxth	r3, r3
 80185a0:	4313      	orrs	r3, r2
 80185a2:	b21b      	sxth	r3, r3
 80185a4:	b29b      	uxth	r3, r3
 80185a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80185aa:	b29b      	uxth	r3, r3
 80185ac:	84bb      	strh	r3, [r7, #36]	; 0x24
			channels[13] = (p_buffer[18] >> 7 | p_buffer[19] << 1 | p_buffer[20] << 9)  & 0x07FF;
 80185ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185b0:	3312      	adds	r3, #18
 80185b2:	781b      	ldrb	r3, [r3, #0]
 80185b4:	09db      	lsrs	r3, r3, #7
 80185b6:	b2db      	uxtb	r3, r3
 80185b8:	b21a      	sxth	r2, r3
 80185ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185bc:	3313      	adds	r3, #19
 80185be:	781b      	ldrb	r3, [r3, #0]
 80185c0:	005b      	lsls	r3, r3, #1
 80185c2:	b21b      	sxth	r3, r3
 80185c4:	4313      	orrs	r3, r2
 80185c6:	b21a      	sxth	r2, r3
 80185c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185ca:	3314      	adds	r3, #20
 80185cc:	781b      	ldrb	r3, [r3, #0]
 80185ce:	025b      	lsls	r3, r3, #9
 80185d0:	b21b      	sxth	r3, r3
 80185d2:	4313      	orrs	r3, r2
 80185d4:	b21b      	sxth	r3, r3
 80185d6:	b29b      	uxth	r3, r3
 80185d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80185dc:	b29b      	uxth	r3, r3
 80185de:	84fb      	strh	r3, [r7, #38]	; 0x26
			channels[14] = (p_buffer[20] >> 2 | p_buffer[21] << 6)                	    & 0x07FF;
 80185e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185e2:	3314      	adds	r3, #20
 80185e4:	781b      	ldrb	r3, [r3, #0]
 80185e6:	089b      	lsrs	r3, r3, #2
 80185e8:	b2db      	uxtb	r3, r3
 80185ea:	b21a      	sxth	r2, r3
 80185ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185ee:	3315      	adds	r3, #21
 80185f0:	781b      	ldrb	r3, [r3, #0]
 80185f2:	019b      	lsls	r3, r3, #6
 80185f4:	b21b      	sxth	r3, r3
 80185f6:	4313      	orrs	r3, r2
 80185f8:	b21b      	sxth	r3, r3
 80185fa:	b29b      	uxth	r3, r3
 80185fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018600:	b29b      	uxth	r3, r3
 8018602:	853b      	strh	r3, [r7, #40]	; 0x28
			channels[15] = (p_buffer[21] >> 5 | p_buffer[22] << 3)                	    & 0x07FF;
 8018604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018606:	3315      	adds	r3, #21
 8018608:	781b      	ldrb	r3, [r3, #0]
 801860a:	095b      	lsrs	r3, r3, #5
 801860c:	b2db      	uxtb	r3, r3
 801860e:	b21a      	sxth	r2, r3
 8018610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018612:	3316      	adds	r3, #22
 8018614:	781b      	ldrb	r3, [r3, #0]
 8018616:	00db      	lsls	r3, r3, #3
 8018618:	b21b      	sxth	r3, r3
 801861a:	4313      	orrs	r3, r2
 801861c:	b21b      	sxth	r3, r3
 801861e:	b29b      	uxth	r3, r3
 8018620:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018624:	b29b      	uxth	r3, r3
 8018626:	e003      	b.n	8018630 <_evtParsing+0x31c>
 8018628:	20001f08 	.word	0x20001f08
 801862c:	445c0000 	.word	0x445c0000
 8018630:	857b      	strh	r3, [r7, #42]	; 0x2a

			channels[16] = ((p_buffer[23])      & 0x0001) ? 2047 : 0;
 8018632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018634:	3317      	adds	r3, #23
 8018636:	781b      	ldrb	r3, [r3, #0]
 8018638:	f003 0301 	and.w	r3, r3, #1
 801863c:	2b00      	cmp	r3, #0
 801863e:	d002      	beq.n	8018646 <_evtParsing+0x332>
 8018640:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8018644:	e000      	b.n	8018648 <_evtParsing+0x334>
 8018646:	2300      	movs	r3, #0
 8018648:	85bb      	strh	r3, [r7, #44]	; 0x2c
			channels[17] = ((p_buffer[23] >> 1) & 0x0001) ? 2047 : 0;
 801864a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801864c:	3317      	adds	r3, #23
 801864e:	781b      	ldrb	r3, [r3, #0]
 8018650:	085b      	lsrs	r3, r3, #1
 8018652:	b2db      	uxtb	r3, r3
 8018654:	f003 0301 	and.w	r3, r3, #1
 8018658:	2b00      	cmp	r3, #0
 801865a:	d002      	beq.n	8018662 <_evtParsing+0x34e>
 801865c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8018660:	e000      	b.n	8018664 <_evtParsing+0x350>
 8018662:	2300      	movs	r3, #0
 8018664:	85fb      	strh	r3, [r7, #46]	; 0x2e

			if ((p_buffer[23] >> 3) & 0x0001) {
 8018666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018668:	3317      	adds	r3, #23
 801866a:	781b      	ldrb	r3, [r3, #0]
 801866c:	08db      	lsrs	r3, r3, #3
 801866e:	b2db      	uxtb	r3, r3
 8018670:	f003 0301 	and.w	r3, r3, #1
 8018674:	2b00      	cmp	r3, #0
 8018676:	d003      	beq.n	8018680 <_evtParsing+0x36c>
				p_owner->parent._failsafe = TRUE;
 8018678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801867a:	2201      	movs	r2, #1
 801867c:	70da      	strb	r2, [r3, #3]
 801867e:	e002      	b.n	8018686 <_evtParsing+0x372>
			} else {
				p_owner->parent._failsafe = FALSE;
 8018680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018682:	2200      	movs	r2, #0
 8018684:	70da      	strb	r2, [r3, #3]
			}

			if ((p_buffer[23] >> 2) & 0x0001) {
 8018686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018688:	3317      	adds	r3, #23
 801868a:	781b      	ldrb	r3, [r3, #0]
 801868c:	089b      	lsrs	r3, r3, #2
 801868e:	b2db      	uxtb	r3, r3
 8018690:	f003 0301 	and.w	r3, r3, #1
 8018694:	2b00      	cmp	r3, #0
 8018696:	d005      	beq.n	80186a4 <_evtParsing+0x390>
				p_owner->parent._lost_frames++;
 8018698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801869a:	695b      	ldr	r3, [r3, #20]
 801869c:	1c5a      	adds	r2, r3, #1
 801869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186a0:	615a      	str	r2, [r3, #20]
				for (i = 0; i < PIF_SBUS_CHANNEL_COUNT; i++) {
					channels[i] = 0.625f * channels[i] + 880;
				}
		    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channels, p_owner->parent.__p_issuer);
			}
			break;
 80186a2:	e04b      	b.n	801873c <_evtParsing+0x428>
				p_owner->parent._good_frames++;
 80186a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186a6:	68db      	ldr	r3, [r3, #12]
 80186a8:	1c5a      	adds	r2, r3, #1
 80186aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186ac:	60da      	str	r2, [r3, #12]
				for (i = 0; i < PIF_SBUS_CHANNEL_COUNT; i++) {
 80186ae:	2300      	movs	r3, #0
 80186b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80186b4:	e023      	b.n	80186fe <_evtParsing+0x3ea>
					channels[i] = 0.625f * channels[i] + 880;
 80186b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80186ba:	005b      	lsls	r3, r3, #1
 80186bc:	3340      	adds	r3, #64	; 0x40
 80186be:	443b      	add	r3, r7
 80186c0:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 80186c4:	ee07 3a90 	vmov	s15, r3
 80186c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80186cc:	eeb6 7a04 	vmov.f32	s14, #100	; 0x3f200000  0.625
 80186d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80186d4:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 801862c <_evtParsing+0x318>
 80186d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80186dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80186e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80186e4:	ee17 2a90 	vmov	r2, s15
 80186e8:	b292      	uxth	r2, r2
 80186ea:	005b      	lsls	r3, r3, #1
 80186ec:	3340      	adds	r3, #64	; 0x40
 80186ee:	443b      	add	r3, r7
 80186f0:	f823 2c34 	strh.w	r2, [r3, #-52]
				for (i = 0; i < PIF_SBUS_CHANNEL_COUNT; i++) {
 80186f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80186f8:	3301      	adds	r3, #1
 80186fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80186fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018702:	2b11      	cmp	r3, #17
 8018704:	d9d7      	bls.n	80186b6 <_evtParsing+0x3a2>
		    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channels, p_owner->parent.__p_issuer);
 8018706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018708:	699b      	ldr	r3, [r3, #24]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d016      	beq.n	801873c <_evtParsing+0x428>
 801870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018710:	699b      	ldr	r3, [r3, #24]
 8018712:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018714:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018716:	69d2      	ldr	r2, [r2, #28]
 8018718:	f107 010c 	add.w	r1, r7, #12
 801871c:	4798      	blx	r3
			break;
 801871e:	e00d      	b.n	801873c <_evtParsing+0x428>
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8018720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018722:	6a1a      	ldr	r2, [r3, #32]
 8018724:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8018728:	683b      	ldr	r3, [r7, #0]
 801872a:	4610      	mov	r0, r2
 801872c:	4798      	blx	r3
 801872e:	4603      	mov	r3, r0
 8018730:	2b00      	cmp	r3, #0
 8018732:	f47f ae0e 	bne.w	8018352 <_evtParsing+0x3e>
 8018736:	e002      	b.n	801873e <_evtParsing+0x42a>
    if (!p_owner->parent.__evt_receive) return;
 8018738:	bf00      	nop
 801873a:	e000      	b.n	801873e <_evtParsing+0x42a>
			break;
 801873c:	bf00      	nop
		}
	}
}
 801873e:	3740      	adds	r7, #64	; 0x40
 8018740:	46bd      	mov	sp, r7
 8018742:	bd80      	pop	{r7, pc}

08018744 <pifRcSbus_Init>:

BOOL pifRcSbus_Init(PifRcSbus* p_owner, PifId id)
{
 8018744:	b580      	push	{r7, lr}
 8018746:	b082      	sub	sp, #8
 8018748:	af00      	add	r7, sp, #0
 801874a:	6078      	str	r0, [r7, #4]
 801874c:	460b      	mov	r3, r1
 801874e:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d104      	bne.n	8018760 <pifRcSbus_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8018756:	4b11      	ldr	r3, [pc, #68]	; (801879c <pifRcSbus_Init+0x58>)
 8018758:	2201      	movs	r2, #1
 801875a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801875c:	2300      	movs	r3, #0
 801875e:	e018      	b.n	8018792 <pifRcSbus_Init+0x4e>
	}

	memset(p_owner, 0, sizeof(PifRcSbus));
 8018760:	2244      	movs	r2, #68	; 0x44
 8018762:	2100      	movs	r1, #0
 8018764:	6878      	ldr	r0, [r7, #4]
 8018766:	f00a fd91 	bl	802328c <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801876a:	887b      	ldrh	r3, [r7, #2]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d106      	bne.n	801877e <pifRcSbus_Init+0x3a>
 8018770:	4b0b      	ldr	r3, [pc, #44]	; (80187a0 <pifRcSbus_Init+0x5c>)
 8018772:	881b      	ldrh	r3, [r3, #0]
 8018774:	1c5a      	adds	r2, r3, #1
 8018776:	b291      	uxth	r1, r2
 8018778:	4a09      	ldr	r2, [pc, #36]	; (80187a0 <pifRcSbus_Init+0x5c>)
 801877a:	8011      	strh	r1, [r2, #0]
 801877c:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	887a      	ldrh	r2, [r7, #2]
 8018782:	801a      	strh	r2, [r3, #0]
	p_owner->parent._channel_count = PIF_SBUS_CHANNEL_COUNT;
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	2212      	movs	r2, #18
 8018788:	709a      	strb	r2, [r3, #2]
	p_owner->parent._failsafe = TRUE;
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	2201      	movs	r2, #1
 801878e:	70da      	strb	r2, [r3, #3]
    return TRUE;
 8018790:	2301      	movs	r3, #1
}
 8018792:	4618      	mov	r0, r3
 8018794:	3708      	adds	r7, #8
 8018796:	46bd      	mov	sp, r7
 8018798:	bd80      	pop	{r7, pc}
 801879a:	bf00      	nop
 801879c:	20001ef0 	.word	0x20001ef0
 80187a0:	2000005c 	.word	0x2000005c

080187a4 <pifRcSbus_AttachComm>:

void pifRcSbus_AttachComm(PifRcSbus* p_owner, PifComm *p_comm)
{
 80187a4:	b580      	push	{r7, lr}
 80187a6:	b082      	sub	sp, #8
 80187a8:	af00      	add	r7, sp, #0
 80187aa:	6078      	str	r0, [r7, #4]
 80187ac:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	683a      	ldr	r2, [r7, #0]
 80187b2:	621a      	str	r2, [r3, #32]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 80187b4:	2300      	movs	r3, #0
 80187b6:	4a04      	ldr	r2, [pc, #16]	; (80187c8 <pifRcSbus_AttachComm+0x24>)
 80187b8:	6879      	ldr	r1, [r7, #4]
 80187ba:	6838      	ldr	r0, [r7, #0]
 80187bc:	f7f9 ff48 	bl	8012650 <pifComm_AttachClient>
}
 80187c0:	bf00      	nop
 80187c2:	3708      	adds	r7, #8
 80187c4:	46bd      	mov	sp, r7
 80187c6:	bd80      	pop	{r7, pc}
 80187c8:	08018315 	.word	0x08018315

080187cc <_evtParsing>:

#define SPEKTRUM_RETRY_TIMEOUT		5	// 5ms


static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 80187cc:	b590      	push	{r4, r7, lr}
 80187ce:	b087      	sub	sp, #28
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]
 80187d4:	6039      	str	r1, [r7, #0]
	PifRcSpektrum *p_owner = (PifRcSpektrum *)p_client;
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	613b      	str	r3, [r7, #16]
	uint8_t data, id;
	uint8_t* p_buffer;
	int index;

    if (!p_owner->parent.__evt_receive) return;
 80187da:	693b      	ldr	r3, [r7, #16]
 80187dc:	699b      	ldr	r3, [r3, #24]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	f000 80b9 	beq.w	8018956 <_evtParsing+0x18a>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= SPEKTRUM_RETRY_TIMEOUT) {
 80187e4:	4b5e      	ldr	r3, [pc, #376]	; (8018960 <_evtParsing+0x194>)
 80187e6:	681a      	ldr	r2, [r3, #0]
 80187e8:	693b      	ldr	r3, [r7, #16]
 80187ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80187ec:	1ad3      	subs	r3, r2, r3
 80187ee:	2b04      	cmp	r3, #4
 80187f0:	d903      	bls.n	80187fa <_evtParsing+0x2e>
		p_owner->__index = 0;
 80187f2:	693b      	ldr	r3, [r7, #16]
 80187f4:	2200      	movs	r2, #0
 80187f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 80187fa:	4b59      	ldr	r3, [pc, #356]	; (8018960 <_evtParsing+0x194>)
 80187fc:	681a      	ldr	r2, [r3, #0]
 80187fe:	693b      	ldr	r3, [r7, #16]
 8018800:	659a      	str	r2, [r3, #88]	; 0x58

	p_buffer = p_owner->__p_buffer;
 8018802:	693b      	ldr	r3, [r7, #16]
 8018804:	3334      	adds	r3, #52	; 0x34
 8018806:	60fb      	str	r3, [r7, #12]

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8018808:	e099      	b.n	801893e <_evtParsing+0x172>
		p_buffer[p_owner->__index++] = data;
 801880a:	693b      	ldr	r3, [r7, #16]
 801880c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018810:	1c5a      	adds	r2, r3, #1
 8018812:	b2d1      	uxtb	r1, r2
 8018814:	693a      	ldr	r2, [r7, #16]
 8018816:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
 801881a:	461a      	mov	r2, r3
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	4413      	add	r3, r2
 8018820:	7aba      	ldrb	r2, [r7, #10]
 8018822:	701a      	strb	r2, [r3, #0]

		if (p_owner->__index == 2) {
 8018824:	693b      	ldr	r3, [r7, #16]
 8018826:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801882a:	2b02      	cmp	r3, #2
 801882c:	d119      	bne.n	8018862 <_evtParsing+0x96>
			if (p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2 && 
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	3301      	adds	r3, #1
 8018832:	781b      	ldrb	r3, [r3, #0]
 8018834:	2b01      	cmp	r3, #1
 8018836:	f000 8082 	beq.w	801893e <_evtParsing+0x172>
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSM2 && 
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	3301      	adds	r3, #1
 801883e:	781b      	ldrb	r3, [r3, #0]
			if (p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2 && 
 8018840:	2b12      	cmp	r3, #18
 8018842:	d07c      	beq.n	801893e <_evtParsing+0x172>
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSMX && 
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	3301      	adds	r3, #1
 8018848:	781b      	ldrb	r3, [r3, #0]
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSM2 && 
 801884a:	2bb2      	cmp	r3, #178	; 0xb2
 801884c:	d077      	beq.n	801893e <_evtParsing+0x172>
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_22MS_2048_DSMS) {
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	3301      	adds	r3, #1
 8018852:	781b      	ldrb	r3, [r3, #0]
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSMX && 
 8018854:	2ba2      	cmp	r3, #162	; 0xa2
 8018856:	d072      	beq.n	801893e <_evtParsing+0x172>
				p_owner->__index = 0;
 8018858:	693b      	ldr	r3, [r7, #16]
 801885a:	2200      	movs	r2, #0
 801885c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				continue;
 8018860:	e06d      	b.n	801893e <_evtParsing+0x172>
			}
		}
		else if (p_owner->__index >= SPEKTRUM_FRAME_SIZE) {
 8018862:	693b      	ldr	r3, [r7, #16]
 8018864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018868:	2b0f      	cmp	r3, #15
 801886a:	d968      	bls.n	801893e <_evtParsing+0x172>
			p_owner->parent._good_frames++;
 801886c:	693b      	ldr	r3, [r7, #16]
 801886e:	68db      	ldr	r3, [r3, #12]
 8018870:	1c5a      	adds	r2, r3, #1
 8018872:	693b      	ldr	r3, [r7, #16]
 8018874:	60da      	str	r2, [r3, #12]

			for (index = 2; index < SPEKTRUM_FRAME_SIZE; index += 2) {
 8018876:	2302      	movs	r3, #2
 8018878:	617b      	str	r3, [r7, #20]
 801887a:	e048      	b.n	801890e <_evtParsing+0x142>
				id = (p_buffer[index] >> p_owner->__id_shift) & p_owner->__id_mask;
 801887c:	697b      	ldr	r3, [r7, #20]
 801887e:	68fa      	ldr	r2, [r7, #12]
 8018880:	4413      	add	r3, r2
 8018882:	781b      	ldrb	r3, [r3, #0]
 8018884:	461a      	mov	r2, r3
 8018886:	693b      	ldr	r3, [r7, #16]
 8018888:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801888c:	fa42 f303 	asr.w	r3, r2, r3
 8018890:	b25a      	sxtb	r2, r3
 8018892:	693b      	ldr	r3, [r7, #16]
 8018894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018898:	b25b      	sxtb	r3, r3
 801889a:	4013      	ands	r3, r2
 801889c:	b25b      	sxtb	r3, r3
 801889e:	72fb      	strb	r3, [r7, #11]
				if (id < p_owner->parent._channel_count) {
 80188a0:	693b      	ldr	r3, [r7, #16]
 80188a2:	789b      	ldrb	r3, [r3, #2]
 80188a4:	7afa      	ldrb	r2, [r7, #11]
 80188a6:	429a      	cmp	r2, r3
 80188a8:	d22e      	bcs.n	8018908 <_evtParsing+0x13c>
					p_owner->__channel[id] = 988 + (((uint16_t)(p_buffer[index] & p_owner->__pos_mask) << 8) + p_buffer[index + 1]) / p_owner->_pos_factor;
 80188aa:	697b      	ldr	r3, [r7, #20]
 80188ac:	68fa      	ldr	r2, [r7, #12]
 80188ae:	4413      	add	r3, r2
 80188b0:	781a      	ldrb	r2, [r3, #0]
 80188b2:	693b      	ldr	r3, [r7, #16]
 80188b4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80188b8:	4013      	ands	r3, r2
 80188ba:	b2db      	uxtb	r3, r3
 80188bc:	021b      	lsls	r3, r3, #8
 80188be:	697a      	ldr	r2, [r7, #20]
 80188c0:	3201      	adds	r2, #1
 80188c2:	68f9      	ldr	r1, [r7, #12]
 80188c4:	440a      	add	r2, r1
 80188c6:	7812      	ldrb	r2, [r2, #0]
 80188c8:	4413      	add	r3, r2
 80188ca:	4618      	mov	r0, r3
 80188cc:	f7e7 fde8 	bl	80004a0 <__aeabi_i2d>
 80188d0:	693b      	ldr	r3, [r7, #16]
 80188d2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80188d6:	f7e7 ff77 	bl	80007c8 <__aeabi_ddiv>
 80188da:	4602      	mov	r2, r0
 80188dc:	460b      	mov	r3, r1
 80188de:	4610      	mov	r0, r2
 80188e0:	4619      	mov	r1, r3
 80188e2:	f04f 0200 	mov.w	r2, #0
 80188e6:	4b1f      	ldr	r3, [pc, #124]	; (8018964 <_evtParsing+0x198>)
 80188e8:	f7e7 fc8e 	bl	8000208 <__adddf3>
 80188ec:	4602      	mov	r2, r0
 80188ee:	460b      	mov	r3, r1
 80188f0:	7afc      	ldrb	r4, [r7, #11]
 80188f2:	4610      	mov	r0, r2
 80188f4:	4619      	mov	r1, r3
 80188f6:	f7e8 f8ff 	bl	8000af8 <__aeabi_d2uiz>
 80188fa:	4603      	mov	r3, r0
 80188fc:	b299      	uxth	r1, r3
 80188fe:	693b      	ldr	r3, [r7, #16]
 8018900:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8018904:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (index = 2; index < SPEKTRUM_FRAME_SIZE; index += 2) {
 8018908:	697b      	ldr	r3, [r7, #20]
 801890a:	3302      	adds	r3, #2
 801890c:	617b      	str	r3, [r7, #20]
 801890e:	697b      	ldr	r3, [r7, #20]
 8018910:	2b0f      	cmp	r3, #15
 8018912:	ddb3      	ble.n	801887c <_evtParsing+0xb0>
				}
			}
			p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 8018914:	4b12      	ldr	r3, [pc, #72]	; (8018960 <_evtParsing+0x194>)
 8018916:	681a      	ldr	r2, [r3, #0]
 8018918:	693b      	ldr	r3, [r7, #16]
 801891a:	609a      	str	r2, [r3, #8]

			p_owner->__index = 0;
 801891c:	693b      	ldr	r3, [r7, #16]
 801891e:	2200      	movs	r2, #0
 8018920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

			if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, p_owner->__channel, p_owner->parent.__p_issuer);
 8018924:	693b      	ldr	r3, [r7, #16]
 8018926:	699b      	ldr	r3, [r3, #24]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d008      	beq.n	801893e <_evtParsing+0x172>
 801892c:	693b      	ldr	r3, [r7, #16]
 801892e:	699b      	ldr	r3, [r3, #24]
 8018930:	6938      	ldr	r0, [r7, #16]
 8018932:	693a      	ldr	r2, [r7, #16]
 8018934:	f102 0148 	add.w	r1, r2, #72	; 0x48
 8018938:	693a      	ldr	r2, [r7, #16]
 801893a:	69d2      	ldr	r2, [r2, #28]
 801893c:	4798      	blx	r3
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 801893e:	693b      	ldr	r3, [r7, #16]
 8018940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018942:	f107 010a 	add.w	r1, r7, #10
 8018946:	683b      	ldr	r3, [r7, #0]
 8018948:	4610      	mov	r0, r2
 801894a:	4798      	blx	r3
 801894c:	4603      	mov	r3, r0
 801894e:	2b00      	cmp	r3, #0
 8018950:	f47f af5b 	bne.w	801880a <_evtParsing+0x3e>
 8018954:	e000      	b.n	8018958 <_evtParsing+0x18c>
    if (!p_owner->parent.__evt_receive) return;
 8018956:	bf00      	nop
		}
	}
}
 8018958:	371c      	adds	r7, #28
 801895a:	46bd      	mov	sp, r7
 801895c:	bd90      	pop	{r4, r7, pc}
 801895e:	bf00      	nop
 8018960:	20001f08 	.word	0x20001f08
 8018964:	408ee000 	.word	0x408ee000

08018968 <pifRcSpektrum_Init>:

BOOL pifRcSpektrum_Init(PifRcSpektrum* p_owner, PifId id, uint8_t protocol_id)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b082      	sub	sp, #8
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
 8018970:	460b      	mov	r3, r1
 8018972:	807b      	strh	r3, [r7, #2]
 8018974:	4613      	mov	r3, r2
 8018976:	707b      	strb	r3, [r7, #1]
    if (!p_owner) {
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d104      	bne.n	8018988 <pifRcSpektrum_Init+0x20>
		pif_error = E_INVALID_PARAM;
 801897e:	4b41      	ldr	r3, [pc, #260]	; (8018a84 <pifRcSpektrum_Init+0x11c>)
 8018980:	2201      	movs	r2, #1
 8018982:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8018984:	2300      	movs	r3, #0
 8018986:	e079      	b.n	8018a7c <pifRcSpektrum_Init+0x114>
	}

	memset(p_owner, 0, sizeof(PifRcSpektrum));
 8018988:	2260      	movs	r2, #96	; 0x60
 801898a:	2100      	movs	r1, #0
 801898c:	6878      	ldr	r0, [r7, #4]
 801898e:	f00a fc7d 	bl	802328c <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8018992:	887b      	ldrh	r3, [r7, #2]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d106      	bne.n	80189a6 <pifRcSpektrum_Init+0x3e>
 8018998:	4b3b      	ldr	r3, [pc, #236]	; (8018a88 <pifRcSpektrum_Init+0x120>)
 801899a:	881b      	ldrh	r3, [r3, #0]
 801899c:	1c5a      	adds	r2, r3, #1
 801899e:	b291      	uxth	r1, r2
 80189a0:	4a39      	ldr	r2, [pc, #228]	; (8018a88 <pifRcSpektrum_Init+0x120>)
 80189a2:	8011      	strh	r1, [r2, #0]
 80189a4:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	887a      	ldrh	r2, [r7, #2]
 80189aa:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	2200      	movs	r2, #0
 80189b0:	70da      	strb	r2, [r3, #3]
	p_owner->_protocol_id = protocol_id;
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	787a      	ldrb	r2, [r7, #1]
 80189b6:	f883 2020 	strb.w	r2, [r3, #32]
	switch (protocol_id) {
 80189ba:	787b      	ldrb	r3, [r7, #1]
 80189bc:	2bb2      	cmp	r3, #178	; 0xb2
 80189be:	d023      	beq.n	8018a08 <pifRcSpektrum_Init+0xa0>
 80189c0:	2bb2      	cmp	r3, #178	; 0xb2
 80189c2:	dc55      	bgt.n	8018a70 <pifRcSpektrum_Init+0x108>
 80189c4:	2ba2      	cmp	r3, #162	; 0xa2
 80189c6:	d039      	beq.n	8018a3c <pifRcSpektrum_Init+0xd4>
 80189c8:	2ba2      	cmp	r3, #162	; 0xa2
 80189ca:	dc51      	bgt.n	8018a70 <pifRcSpektrum_Init+0x108>
 80189cc:	2b01      	cmp	r3, #1
 80189ce:	d002      	beq.n	80189d6 <pifRcSpektrum_Init+0x6e>
 80189d0:	2b12      	cmp	r3, #18
 80189d2:	d019      	beq.n	8018a08 <pifRcSpektrum_Init+0xa0>
 80189d4:	e04c      	b.n	8018a70 <pifRcSpektrum_Init+0x108>
	case PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2:
		p_owner->parent._channel_count = 7;
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	2207      	movs	r2, #7
 80189da:	709a      	strb	r2, [r3, #2]
		p_owner->parent._max_frame_period = 25;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	2219      	movs	r2, #25
 80189e0:	809a      	strh	r2, [r3, #4]
		p_owner->__id_mask = 0x3F;
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	223f      	movs	r2, #63	; 0x3f
 80189e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		p_owner->__id_shift = 2;
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	2202      	movs	r2, #2
 80189ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		p_owner->__pos_mask = 0x03;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	2203      	movs	r2, #3
 80189f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		p_owner->_pos_factor = 1;
 80189fa:	6879      	ldr	r1, [r7, #4]
 80189fc:	f04f 0200 	mov.w	r2, #0
 8018a00:	4b22      	ldr	r3, [pc, #136]	; (8018a8c <pifRcSpektrum_Init+0x124>)
 8018a02:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		break;
 8018a06:	e038      	b.n	8018a7a <pifRcSpektrum_Init+0x112>

	case PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSM2:
	case PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSMX:
		p_owner->parent._channel_count = 8;
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	2208      	movs	r2, #8
 8018a0c:	709a      	strb	r2, [r3, #2]
		p_owner->parent._max_frame_period = 15;
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	220f      	movs	r2, #15
 8018a12:	809a      	strh	r2, [r3, #4]
		p_owner->__id_mask = 0x0F;
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	220f      	movs	r2, #15
 8018a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		p_owner->__id_shift = 3;
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	2203      	movs	r2, #3
 8018a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		p_owner->__pos_mask = 0x07;
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	2207      	movs	r2, #7
 8018a28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		p_owner->_pos_factor = 2;
 8018a2c:	6879      	ldr	r1, [r7, #4]
 8018a2e:	f04f 0200 	mov.w	r2, #0
 8018a32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018a36:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		break;
 8018a3a:	e01e      	b.n	8018a7a <pifRcSpektrum_Init+0x112>

	case PIF_SPEKTRUM_PROTOCOL_ID_22MS_2048_DSMS:
		p_owner->parent._channel_count = 8;
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	2208      	movs	r2, #8
 8018a40:	709a      	strb	r2, [r3, #2]
		p_owner->parent._max_frame_period = 25;
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	2219      	movs	r2, #25
 8018a46:	809a      	strh	r2, [r3, #4]
		p_owner->__id_mask = 0x0F;
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	220f      	movs	r2, #15
 8018a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		p_owner->__id_shift = 3;
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	2203      	movs	r2, #3
 8018a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		p_owner->__pos_mask = 0x07;
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	2207      	movs	r2, #7
 8018a5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		p_owner->_pos_factor = 2;
 8018a60:	6879      	ldr	r1, [r7, #4]
 8018a62:	f04f 0200 	mov.w	r2, #0
 8018a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018a6a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		break;
 8018a6e:	e004      	b.n	8018a7a <pifRcSpektrum_Init+0x112>

	default:
		pif_error = E_INVALID_PARAM;
 8018a70:	4b04      	ldr	r3, [pc, #16]	; (8018a84 <pifRcSpektrum_Init+0x11c>)
 8018a72:	2201      	movs	r2, #1
 8018a74:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8018a76:	2300      	movs	r3, #0
 8018a78:	e000      	b.n	8018a7c <pifRcSpektrum_Init+0x114>
	}
	return TRUE;
 8018a7a:	2301      	movs	r3, #1
}
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	3708      	adds	r7, #8
 8018a80:	46bd      	mov	sp, r7
 8018a82:	bd80      	pop	{r7, pc}
 8018a84:	20001ef0 	.word	0x20001ef0
 8018a88:	2000005c 	.word	0x2000005c
 8018a8c:	3ff00000 	.word	0x3ff00000

08018a90 <pifRcSpektrum_AttachComm>:

void pifRcSpektrum_AttachComm(PifRcSpektrum* p_owner, PifComm *p_comm)
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b082      	sub	sp, #8
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
 8018a98:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	683a      	ldr	r2, [r7, #0]
 8018a9e:	631a      	str	r2, [r3, #48]	; 0x30
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	4a04      	ldr	r2, [pc, #16]	; (8018ab4 <pifRcSpektrum_AttachComm+0x24>)
 8018aa4:	6879      	ldr	r1, [r7, #4]
 8018aa6:	6838      	ldr	r0, [r7, #0]
 8018aa8:	f7f9 fdd2 	bl	8012650 <pifComm_AttachClient>
}
 8018aac:	bf00      	nop
 8018aae:	3708      	adds	r7, #8
 8018ab0:	46bd      	mov	sp, r7
 8018ab2:	bd80      	pop	{r7, pc}
 8018ab4:	080187cd 	.word	0x080187cd

08018ab8 <_evtParsing>:
#define SUMD_MAX_FRAME_PERIOD   750 	// 750ms, above this delay, switch to failsafe
#define SUMD_RETRY_TIMEOUT		4		// 4ms


static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8018ab8:	b580      	push	{r7, lr}
 8018aba:	b096      	sub	sp, #88	; 0x58
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]
 8018ac0:	6039      	str	r1, [r7, #0]
	PifRcSumd *p_owner = (PifRcSumd *)p_client;
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t* p_buffer;
    uint16_t channel[PIF_SUMD_CHANNEL_COUNT];
	uint16_t crc;
	int index;

    if (!p_owner->parent.__evt_receive) return;
 8018ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018ac8:	699b      	ldr	r3, [r3, #24]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	f000 80e4 	beq.w	8018c98 <_evtParsing+0x1e0>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= SUMD_RETRY_TIMEOUT) {
 8018ad0:	4b73      	ldr	r3, [pc, #460]	; (8018ca0 <_evtParsing+0x1e8>)
 8018ad2:	681a      	ldr	r2, [r3, #0]
 8018ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018ad8:	1ad3      	subs	r3, r2, r3
 8018ada:	2b03      	cmp	r3, #3
 8018adc:	d903      	bls.n	8018ae6 <_evtParsing+0x2e>
		p_owner->__index = 0;
 8018ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018ae0:	2200      	movs	r2, #0
 8018ae2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 8018ae6:	4b6e      	ldr	r3, [pc, #440]	; (8018ca0 <_evtParsing+0x1e8>)
 8018ae8:	681a      	ldr	r2, [r3, #0]
 8018aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018aec:	66da      	str	r2, [r3, #108]	; 0x6c

	p_buffer = p_owner->__p_buffer;
 8018aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018af0:	3324      	adds	r3, #36	; 0x24
 8018af2:	64fb      	str	r3, [r7, #76]	; 0x4c

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8018af4:	e0c4      	b.n	8018c80 <_evtParsing+0x1c8>
		//add byte to the ring buffer
		p_buffer[p_owner->__index++] = data;
 8018af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018af8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8018afc:	1c5a      	adds	r2, r3, #1
 8018afe:	b2d1      	uxtb	r1, r2
 8018b00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018b02:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
 8018b06:	461a      	mov	r2, r3
 8018b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b0a:	4413      	add	r3, r2
 8018b0c:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8018b10:	701a      	strb	r2, [r3, #0]

		if (p_owner->__index == 1) {
 8018b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b14:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8018b18:	2b01      	cmp	r3, #1
 8018b1a:	d109      	bne.n	8018b30 <_evtParsing+0x78>
			if (p_buffer[0] != SUMD_VENDOR_ID) {
 8018b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b1e:	781b      	ldrb	r3, [r3, #0]
 8018b20:	2ba8      	cmp	r3, #168	; 0xa8
 8018b22:	f000 80ad 	beq.w	8018c80 <_evtParsing+0x1c8>
				p_owner->__index = 0;
 8018b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b28:	2200      	movs	r2, #0
 8018b2a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				continue;
 8018b2e:	e0a7      	b.n	8018c80 <_evtParsing+0x1c8>
			}
		}
		else if (p_owner->__index == 2) {
 8018b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b32:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8018b36:	2b02      	cmp	r3, #2
 8018b38:	d11f      	bne.n	8018b7a <_evtParsing+0xc2>
			if (p_buffer[1] != SUMD_STATUS_VALID && p_buffer[1] != SUMD_STATUS_FAILSAFE) {
 8018b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b3c:	3301      	adds	r3, #1
 8018b3e:	781b      	ldrb	r3, [r3, #0]
 8018b40:	2b01      	cmp	r3, #1
 8018b42:	d00e      	beq.n	8018b62 <_evtParsing+0xaa>
 8018b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b46:	3301      	adds	r3, #1
 8018b48:	781b      	ldrb	r3, [r3, #0]
 8018b4a:	2b81      	cmp	r3, #129	; 0x81
 8018b4c:	d009      	beq.n	8018b62 <_evtParsing+0xaa>
				p_owner->parent._error_frames++;
 8018b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b50:	691b      	ldr	r3, [r3, #16]
 8018b52:	1c5a      	adds	r2, r3, #1
 8018b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b56:	611a      	str	r2, [r3, #16]
				p_owner->__index = 0;
 8018b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				continue;
 8018b60:	e08e      	b.n	8018c80 <_evtParsing+0x1c8>
			}
			else {
				p_owner->parent._failsafe = (p_buffer[1] == SUMD_STATUS_FAILSAFE);
 8018b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b64:	3301      	adds	r3, #1
 8018b66:	781b      	ldrb	r3, [r3, #0]
 8018b68:	2b81      	cmp	r3, #129	; 0x81
 8018b6a:	bf0c      	ite	eq
 8018b6c:	2301      	moveq	r3, #1
 8018b6e:	2300      	movne	r3, #0
 8018b70:	b2db      	uxtb	r3, r3
 8018b72:	461a      	mov	r2, r3
 8018b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b76:	70da      	strb	r2, [r3, #3]
 8018b78:	e082      	b.n	8018c80 <_evtParsing+0x1c8>
			}
		}
		else if (p_owner->__index == 3) {
 8018b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b7c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8018b80:	2b03      	cmp	r3, #3
 8018b82:	d118      	bne.n	8018bb6 <_evtParsing+0xfe>
			if (p_buffer[2] < 2 || p_buffer[2] > PIF_SUMD_CHANNEL_COUNT) {		// 2 < channels < PIF_SUMD_CHANNEL_COUNT
 8018b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b86:	3302      	adds	r3, #2
 8018b88:	781b      	ldrb	r3, [r3, #0]
 8018b8a:	2b01      	cmp	r3, #1
 8018b8c:	d904      	bls.n	8018b98 <_evtParsing+0xe0>
 8018b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b90:	3302      	adds	r3, #2
 8018b92:	781b      	ldrb	r3, [r3, #0]
 8018b94:	2b20      	cmp	r3, #32
 8018b96:	d909      	bls.n	8018bac <_evtParsing+0xf4>
				p_owner->parent._error_frames++;
 8018b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b9a:	691b      	ldr	r3, [r3, #16]
 8018b9c:	1c5a      	adds	r2, r3, #1
 8018b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018ba0:	611a      	str	r2, [r3, #16]
				p_owner->__index = 0;
 8018ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018ba4:	2200      	movs	r2, #0
 8018ba6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				continue;
 8018baa:	e069      	b.n	8018c80 <_evtParsing+0x1c8>
			}
			else {
				p_owner->parent._channel_count = p_buffer[2];
 8018bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018bae:	789a      	ldrb	r2, [r3, #2]
 8018bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018bb2:	709a      	strb	r2, [r3, #2]
 8018bb4:	e064      	b.n	8018c80 <_evtParsing+0x1c8>
			}
		}
		else if (p_owner->__index >= SUMD_HEADER_SIZE + p_buffer[2] * 2 + SUMD_CRC_SIZE) {
 8018bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018bb8:	3302      	adds	r3, #2
 8018bba:	781b      	ldrb	r3, [r3, #0]
 8018bbc:	3302      	adds	r3, #2
 8018bbe:	005b      	lsls	r3, r3, #1
 8018bc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018bc2:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 8018bc6:	4293      	cmp	r3, r2
 8018bc8:	da5a      	bge.n	8018c80 <_evtParsing+0x1c8>
			//compute CRC with header and data
			crc = pifCrc16(p_buffer, SUMD_HEADER_SIZE + 2 * p_owner->parent._channel_count + SUMD_CRC_SIZE);
 8018bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018bcc:	789b      	ldrb	r3, [r3, #2]
 8018bce:	b29b      	uxth	r3, r3
 8018bd0:	005b      	lsls	r3, r3, #1
 8018bd2:	b29b      	uxth	r3, r3
 8018bd4:	3305      	adds	r3, #5
 8018bd6:	b29b      	uxth	r3, r3
 8018bd8:	4619      	mov	r1, r3
 8018bda:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8018bdc:	f7f9 fb9d 	bl	801231a <pifCrc16>
 8018be0:	4603      	mov	r3, r0
 8018be2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			//if frame is valid
			if (crc == 0) {
 8018be6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d13f      	bne.n	8018c6e <_evtParsing+0x1b6>
				p_owner->parent._good_frames++;
 8018bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018bf0:	68db      	ldr	r3, [r3, #12]
 8018bf2:	1c5a      	adds	r2, r3, #1
 8018bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018bf6:	60da      	str	r2, [r3, #12]

				//update channel output values
				for (index = 0; index < p_owner->parent._channel_count; index++) {
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	657b      	str	r3, [r7, #84]	; 0x54
 8018bfc:	e01c      	b.n	8018c38 <_evtParsing+0x180>
					channel[index] = ((p_buffer[SUMD_HEADER_SIZE + 2 * index] << 8) + p_buffer[SUMD_HEADER_SIZE + 2 * index + 1]) / 8;
 8018bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c00:	005b      	lsls	r3, r3, #1
 8018c02:	3303      	adds	r3, #3
 8018c04:	461a      	mov	r2, r3
 8018c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c08:	4413      	add	r3, r2
 8018c0a:	781b      	ldrb	r3, [r3, #0]
 8018c0c:	021b      	lsls	r3, r3, #8
 8018c0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018c10:	0052      	lsls	r2, r2, #1
 8018c12:	3204      	adds	r2, #4
 8018c14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018c16:	440a      	add	r2, r1
 8018c18:	7812      	ldrb	r2, [r2, #0]
 8018c1a:	4413      	add	r3, r2
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	da00      	bge.n	8018c22 <_evtParsing+0x16a>
 8018c20:	3307      	adds	r3, #7
 8018c22:	10db      	asrs	r3, r3, #3
 8018c24:	b29a      	uxth	r2, r3
 8018c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c28:	005b      	lsls	r3, r3, #1
 8018c2a:	3358      	adds	r3, #88	; 0x58
 8018c2c:	443b      	add	r3, r7
 8018c2e:	f823 2c50 	strh.w	r2, [r3, #-80]
				for (index = 0; index < p_owner->parent._channel_count; index++) {
 8018c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c34:	3301      	adds	r3, #1
 8018c36:	657b      	str	r3, [r7, #84]	; 0x54
 8018c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c3a:	789b      	ldrb	r3, [r3, #2]
 8018c3c:	461a      	mov	r2, r3
 8018c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c40:	4293      	cmp	r3, r2
 8018c42:	dbdc      	blt.n	8018bfe <_evtParsing+0x146>
				}
				p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 8018c44:	4b16      	ldr	r3, [pc, #88]	; (8018ca0 <_evtParsing+0x1e8>)
 8018c46:	681a      	ldr	r2, [r3, #0]
 8018c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c4a:	609a      	str	r2, [r3, #8]

				//forgot decoded bytes from the ring buffer
				p_owner->__index = 0;
 8018c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c4e:	2200      	movs	r2, #0
 8018c50:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

		    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channel, p_owner->parent.__p_issuer);
 8018c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c56:	699b      	ldr	r3, [r3, #24]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d011      	beq.n	8018c80 <_evtParsing+0x1c8>
 8018c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c5e:	699b      	ldr	r3, [r3, #24]
 8018c60:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8018c62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018c64:	69d2      	ldr	r2, [r2, #28]
 8018c66:	f107 0108 	add.w	r1, r7, #8
 8018c6a:	4798      	blx	r3
 8018c6c:	e008      	b.n	8018c80 <_evtParsing+0x1c8>
			}
			else {
				p_owner->parent._error_frames++;
 8018c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c70:	691b      	ldr	r3, [r3, #16]
 8018c72:	1c5a      	adds	r2, r3, #1
 8018c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c76:	611a      	str	r2, [r3, #16]
				p_owner->__index = 0;
 8018c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8018c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c82:	6a1a      	ldr	r2, [r3, #32]
 8018c84:	f107 0149 	add.w	r1, r7, #73	; 0x49
 8018c88:	683b      	ldr	r3, [r7, #0]
 8018c8a:	4610      	mov	r0, r2
 8018c8c:	4798      	blx	r3
 8018c8e:	4603      	mov	r3, r0
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	f47f af30 	bne.w	8018af6 <_evtParsing+0x3e>
 8018c96:	e000      	b.n	8018c9a <_evtParsing+0x1e2>
    if (!p_owner->parent.__evt_receive) return;
 8018c98:	bf00      	nop
			}
		}
	}
}
 8018c9a:	3758      	adds	r7, #88	; 0x58
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	bd80      	pop	{r7, pc}
 8018ca0:	20001f08 	.word	0x20001f08

08018ca4 <pifRcSumd_Init>:

BOOL pifRcSumd_Init(PifRcSumd* p_owner, PifId id)
{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	b082      	sub	sp, #8
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
 8018cac:	460b      	mov	r3, r1
 8018cae:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d104      	bne.n	8018cc0 <pifRcSumd_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8018cb6:	4b13      	ldr	r3, [pc, #76]	; (8018d04 <pifRcSumd_Init+0x60>)
 8018cb8:	2201      	movs	r2, #1
 8018cba:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	e01c      	b.n	8018cfa <pifRcSumd_Init+0x56>
	}

	memset(p_owner, 0, sizeof(PifRcSumd));
 8018cc0:	2270      	movs	r2, #112	; 0x70
 8018cc2:	2100      	movs	r1, #0
 8018cc4:	6878      	ldr	r0, [r7, #4]
 8018cc6:	f00a fae1 	bl	802328c <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8018cca:	887b      	ldrh	r3, [r7, #2]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d106      	bne.n	8018cde <pifRcSumd_Init+0x3a>
 8018cd0:	4b0d      	ldr	r3, [pc, #52]	; (8018d08 <pifRcSumd_Init+0x64>)
 8018cd2:	881b      	ldrh	r3, [r3, #0]
 8018cd4:	1c5a      	adds	r2, r3, #1
 8018cd6:	b291      	uxth	r1, r2
 8018cd8:	4a0b      	ldr	r2, [pc, #44]	; (8018d08 <pifRcSumd_Init+0x64>)
 8018cda:	8011      	strh	r1, [r2, #0]
 8018cdc:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	887a      	ldrh	r2, [r7, #2]
 8018ce2:	801a      	strh	r2, [r3, #0]
	p_owner->parent._channel_count = PIF_SUMD_CHANNEL_COUNT;
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	2220      	movs	r2, #32
 8018ce8:	709a      	strb	r2, [r3, #2]
	p_owner->parent._failsafe = TRUE;
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	2201      	movs	r2, #1
 8018cee:	70da      	strb	r2, [r3, #3]
	p_owner->parent._max_frame_period = SUMD_MAX_FRAME_PERIOD;
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018cf6:	809a      	strh	r2, [r3, #4]
    return TRUE;
 8018cf8:	2301      	movs	r3, #1
}
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	3708      	adds	r7, #8
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	bd80      	pop	{r7, pc}
 8018d02:	bf00      	nop
 8018d04:	20001ef0 	.word	0x20001ef0
 8018d08:	2000005c 	.word	0x2000005c

08018d0c <pifRcSumd_AttachComm>:

void pifRcSumd_AttachComm(PifRcSumd* p_owner, PifComm *p_comm)
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b082      	sub	sp, #8
 8018d10:	af00      	add	r7, sp, #0
 8018d12:	6078      	str	r0, [r7, #4]
 8018d14:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	683a      	ldr	r2, [r7, #0]
 8018d1a:	621a      	str	r2, [r3, #32]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	4a04      	ldr	r2, [pc, #16]	; (8018d30 <pifRcSumd_AttachComm+0x24>)
 8018d20:	6879      	ldr	r1, [r7, #4]
 8018d22:	6838      	ldr	r0, [r7, #0]
 8018d24:	f7f9 fc94 	bl	8012650 <pifComm_AttachClient>
}
 8018d28:	bf00      	nop
 8018d2a:	3708      	adds	r7, #8
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bd80      	pop	{r7, pc}
 8018d30:	08018ab9 	.word	0x08018ab9

08018d34 <pifGy86_Init>:
#include "core/pif_log.h"
#include "sensor/pif_gy86.h"


BOOL pifGy86_Init(PifGy86* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor, PifGy86Config* p_config)
{
 8018d34:	b580      	push	{r7, lr}
 8018d36:	b090      	sub	sp, #64	; 0x40
 8018d38:	af02      	add	r7, sp, #8
 8018d3a:	60f8      	str	r0, [r7, #12]
 8018d3c:	607a      	str	r2, [r7, #4]
 8018d3e:	603b      	str	r3, [r7, #0]
 8018d40:	460b      	mov	r3, r1
 8018d42:	817b      	strh	r3, [r7, #10]
	PifMpu60x0IntEnable int_enable;
	PifMpu60x0IntPinCfg int_pin_cfg;
    PifMpu60x0PwrMgmt1 pwr_mgmt_1;
	PifHmc5883ConfigA config_a;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d005      	beq.n	8018d56 <pifGy86_Init+0x22>
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d002      	beq.n	8018d56 <pifGy86_Init+0x22>
 8018d50:	683b      	ldr	r3, [r7, #0]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d104      	bne.n	8018d60 <pifGy86_Init+0x2c>
		pif_error = E_INVALID_PARAM;
 8018d56:	4b48      	ldr	r3, [pc, #288]	; (8018e78 <pifGy86_Init+0x144>)
 8018d58:	2201      	movs	r2, #1
 8018d5a:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018d5c:	2300      	movs	r3, #0
 8018d5e:	e1dd      	b.n	801911c <pifGy86_Init+0x3e8>
	}

	memset(p_owner, 0, sizeof(PifGy86));
 8018d60:	2260      	movs	r2, #96	; 0x60
 8018d62:	2100      	movs	r1, #0
 8018d64:	68f8      	ldr	r0, [r7, #12]
 8018d66:	f00a fa91 	bl	802328c <memset>

    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	1d18      	adds	r0, r3, #4
 8018d6e:	683b      	ldr	r3, [r7, #0]
 8018d70:	9300      	str	r3, [sp, #0]
 8018d72:	2368      	movs	r3, #104	; 0x68
 8018d74:	687a      	ldr	r2, [r7, #4]
 8018d76:	2100      	movs	r1, #0
 8018d78:	f001 f92c 	bl	8019fd4 <pifMpu60x0_Init>
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	f000 81a5 	beq.w	80190ce <pifGy86_Init+0x39a>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	68db      	ldr	r3, [r3, #12]
 8018d88:	2200      	movs	r2, #0
 8018d8a:	2119      	movs	r1, #25
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	f7f9 ffd3 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8018d92:	4603      	mov	r3, r0
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	f000 819c 	beq.w	80190d2 <pifGy86_Init+0x39e>

    pwr_mgmt_1.byte = 0;
 8018d9a:	2300      	movs	r3, #0
 8018d9c:	753b      	strb	r3, [r7, #20]
    pwr_mgmt_1.bit.clksel = p_config ? p_config->mpu60x0_clksel : MPU60X0_CLKSEL_PLL_ZGYRO;
 8018d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d005      	beq.n	8018db0 <pifGy86_Init+0x7c>
 8018da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018da6:	789b      	ldrb	r3, [r3, #2]
 8018da8:	f003 0307 	and.w	r3, r3, #7
 8018dac:	b2da      	uxtb	r2, r3
 8018dae:	e000      	b.n	8018db2 <pifGy86_Init+0x7e>
 8018db0:	2203      	movs	r2, #3
 8018db2:	7d3b      	ldrb	r3, [r7, #20]
 8018db4:	f362 0302 	bfi	r3, r2, #0, #3
 8018db8:	753b      	strb	r3, [r7, #20]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8018dba:	68fb      	ldr	r3, [r7, #12]
 8018dbc:	68db      	ldr	r3, [r3, #12]
 8018dbe:	7d3a      	ldrb	r2, [r7, #20]
 8018dc0:	216b      	movs	r1, #107	; 0x6b
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	f7f9 ffb8 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8018dc8:	4603      	mov	r3, r0
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	f000 8183 	beq.w	80190d6 <pifGy86_Init+0x3a2>

    if (p_config) {
 8018dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d043      	beq.n	8018e5e <pifGy86_Init+0x12a>
    	config.byte = 0;
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   		config.bit.dlpf_cfg = p_config->mpu60x0_dlpf_cfg;
 8018ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018dde:	78db      	ldrb	r3, [r3, #3]
 8018de0:	f003 0307 	and.w	r3, r3, #7
 8018de4:	b2da      	uxtb	r2, r3
 8018de6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8018dea:	f362 0302 	bfi	r3, r2, #0, #3
 8018dee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	68db      	ldr	r3, [r3, #12]
 8018df6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018dfa:	211a      	movs	r1, #26
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	f7f9 ff9b 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8018e02:	4603      	mov	r3, r0
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	f000 8168 	beq.w	80190da <pifGy86_Init+0x3a6>

        gyro_config.byte = 0;
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        gyro_config.bit.fs_sel = p_config->mpu60x0_fs_sel;
 8018e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e12:	791b      	ldrb	r3, [r3, #4]
 8018e14:	f003 0303 	and.w	r3, r3, #3
 8018e18:	b2da      	uxtb	r2, r3
 8018e1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018e1e:	f362 03c4 	bfi	r3, r2, #3, #2
 8018e22:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        pifMpu60x0_SetGyroConfig(&p_owner->_mpu6050, gyro_config);
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	3304      	adds	r3, #4
 8018e2a:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8018e2e:	4618      	mov	r0, r3
 8018e30:	f001 f9ec 	bl	801a20c <pifMpu60x0_SetGyroConfig>

        accel_config.byte = 0;
 8018e34:	2300      	movs	r3, #0
 8018e36:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        accel_config.bit.afs_sel = p_config->mpu60x0_afs_sel;
 8018e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e3c:	785b      	ldrb	r3, [r3, #1]
 8018e3e:	f003 0303 	and.w	r3, r3, #3
 8018e42:	b2da      	uxtb	r2, r3
 8018e44:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8018e48:	f362 03c4 	bfi	r3, r2, #3, #2
 8018e4c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        pifMpu60x0_SetAccelConfig(&p_owner->_mpu6050, accel_config);
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	3304      	adds	r3, #4
 8018e54:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8018e58:	4618      	mov	r0, r3
 8018e5a:	f001 f9f7 	bl	801a24c <pifMpu60x0_SetAccelConfig>
    }

    i2c_mst_ctrl.byte = 0;
 8018e5e:	2300      	movs	r3, #0
 8018e60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    i2c_mst_ctrl.bit.i2c_mst_clk = p_config ? p_config->mpu60x0_i2c_mst_clk : MPU60X0_I2C_MST_CLK_400KHZ;
 8018e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d008      	beq.n	8018e7c <pifGy86_Init+0x148>
 8018e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e6c:	795b      	ldrb	r3, [r3, #5]
 8018e6e:	f003 030f 	and.w	r3, r3, #15
 8018e72:	b2da      	uxtb	r2, r3
 8018e74:	e003      	b.n	8018e7e <pifGy86_Init+0x14a>
 8018e76:	bf00      	nop
 8018e78:	20001ef0 	.word	0x20001ef0
 8018e7c:	220d      	movs	r2, #13
 8018e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018e82:	f362 0303 	bfi	r3, r2, #0, #4
 8018e86:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	68db      	ldr	r3, [r3, #12]
 8018e8e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018e92:	2124      	movs	r1, #36	; 0x24
 8018e94:	4618      	mov	r0, r3
 8018e96:	f7f9 ff4f 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8018e9a:	4603      	mov	r3, r0
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	f000 811e 	beq.w	80190de <pifGy86_Init+0x3aa>

    int_pin_cfg.byte = 0;
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.int_rd_clear = TRUE;
 8018ea6:	7e3b      	ldrb	r3, [r7, #24]
 8018ea8:	f043 0310 	orr.w	r3, r3, #16
 8018eac:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.i2c_bypass_en = TRUE;
 8018eae:	7e3b      	ldrb	r3, [r7, #24]
 8018eb0:	f043 0302 	orr.w	r3, r3, #2
 8018eb4:	763b      	strb	r3, [r7, #24]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	68db      	ldr	r3, [r3, #12]
 8018eba:	7e3a      	ldrb	r2, [r7, #24]
 8018ebc:	2137      	movs	r1, #55	; 0x37
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f7f9 ff3a 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8018ec4:	4603      	mov	r3, r0
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	f000 810b 	beq.w	80190e2 <pifGy86_Init+0x3ae>

    int_enable.byte = 0;
 8018ecc:	2300      	movs	r3, #0
 8018ece:	773b      	strb	r3, [r7, #28]
    int_enable.bit.data_rdy_en = TRUE;
 8018ed0:	7f3b      	ldrb	r3, [r7, #28]
 8018ed2:	f043 0301 	orr.w	r3, r3, #1
 8018ed6:	773b      	strb	r3, [r7, #28]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	68db      	ldr	r3, [r3, #12]
 8018edc:	7f3a      	ldrb	r2, [r7, #28]
 8018ede:	2138      	movs	r1, #56	; 0x38
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	f7f9 ff29 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	f000 80fc 	beq.w	80190e6 <pifGy86_Init+0x3b2>

    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	f103 0014 	add.w	r0, r3, #20
 8018ef4:	683b      	ldr	r3, [r7, #0]
 8018ef6:	687a      	ldr	r2, [r7, #4]
 8018ef8:	2100      	movs	r1, #0
 8018efa:	f000 fb4b 	bl	8019594 <pifHmc5883_Init>
 8018efe:	4603      	mov	r3, r0
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	f000 80f2 	beq.w	80190ea <pifGy86_Init+0x3b6>

    if (p_config) {
 8018f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d039      	beq.n	8018f80 <pifGy86_Init+0x24c>
        config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 8018f0c:	7c3b      	ldrb	r3, [r7, #16]
 8018f0e:	f36f 0301 	bfc	r3, #0, #2
 8018f12:	743b      	strb	r3, [r7, #16]
   		config_a.bit.samples = p_config->hmc5883_samples;
 8018f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f16:	7a5b      	ldrb	r3, [r3, #9]
 8018f18:	f003 0303 	and.w	r3, r3, #3
 8018f1c:	b2da      	uxtb	r2, r3
 8018f1e:	7c3b      	ldrb	r3, [r7, #16]
 8018f20:	f362 1346 	bfi	r3, r2, #5, #2
 8018f24:	743b      	strb	r3, [r7, #16]
   		config_a.bit.data_rate = p_config->hmc5883_data_rate;
 8018f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f28:	799b      	ldrb	r3, [r3, #6]
 8018f2a:	f003 0307 	and.w	r3, r3, #7
 8018f2e:	b2da      	uxtb	r2, r3
 8018f30:	7c3b      	ldrb	r3, [r7, #16]
 8018f32:	f362 0384 	bfi	r3, r2, #2, #3
 8018f36:	743b      	strb	r3, [r7, #16]
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f3c:	7c3a      	ldrb	r2, [r7, #16]
 8018f3e:	2100      	movs	r1, #0
 8018f40:	4618      	mov	r0, r3
 8018f42:	f7f9 fef9 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8018f46:	4603      	mov	r3, r0
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	f000 80d0 	beq.w	80190ee <pifGy86_Init+0x3ba>

        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	f103 0214 	add.w	r2, r3, #20
 8018f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f56:	79db      	ldrb	r3, [r3, #7]
 8018f58:	4619      	mov	r1, r3
 8018f5a:	4610      	mov	r0, r2
 8018f5c:	f000 fbf0 	bl	8019740 <pifHmc5883_SetGain>
 8018f60:	4603      	mov	r3, r0
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	f000 80c5 	beq.w	80190f2 <pifGy86_Init+0x3be>

        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f6e:	7a1b      	ldrb	r3, [r3, #8]
 8018f70:	2202      	movs	r2, #2
 8018f72:	2102      	movs	r1, #2
 8018f74:	f7f9 fef6 	bl	8012d64 <pifI2cDevice_WriteRegBit8>
 8018f78:	4603      	mov	r3, r0
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	f000 80bb 	beq.w	80190f6 <pifGy86_Init+0x3c2>
    }

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	68d8      	ldr	r0, [r3, #12]
 8018f84:	2300      	movs	r3, #0
 8018f86:	f240 1201 	movw	r2, #257	; 0x101
 8018f8a:	2137      	movs	r1, #55	; 0x37
 8018f8c:	f7f9 feea 	bl	8012d64 <pifI2cDevice_WriteRegBit8>
 8018f90:	4603      	mov	r3, r0
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	f000 80b1 	beq.w	80190fa <pifGy86_Init+0x3c6>

    pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, 0x01); // DATA_RDY_EN interrupt enable
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	68db      	ldr	r3, [r3, #12]
 8018f9c:	2201      	movs	r2, #1
 8018f9e:	2138      	movs	r1, #56	; 0x38
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	f7f9 fec9 	bl	8012d38 <pifI2cDevice_WriteRegByte>

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	68d8      	ldr	r0, [r3, #12]
 8018faa:	2301      	movs	r3, #1
 8018fac:	f240 5201 	movw	r2, #1281	; 0x501
 8018fb0:	216a      	movs	r1, #106	; 0x6a
 8018fb2:	f7f9 fed7 	bl	8012d64 <pifI2cDevice_WriteRegBit8>
 8018fb6:	4603      	mov	r3, r0
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	f000 80a0 	beq.w	80190fe <pifGy86_Init+0x3ca>

    i2c_slv_addr.byte = 0;
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_addr = HMC5883_I2C_ADDR;
 8018fc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018fc8:	221e      	movs	r2, #30
 8018fca:	f362 0306 	bfi	r3, r2, #0, #7
 8018fce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_rw = TRUE;
 8018fd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018fda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	68db      	ldr	r3, [r3, #12]
 8018fe2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8018fe6:	2125      	movs	r1, #37	; 0x25
 8018fe8:	4618      	mov	r0, r3
 8018fea:	f7f9 fea5 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8018fee:	4603      	mov	r3, r0
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	f000 8086 	beq.w	8019102 <pifGy86_Init+0x3ce>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	68db      	ldr	r3, [r3, #12]
 8018ffa:	2203      	movs	r2, #3
 8018ffc:	2126      	movs	r1, #38	; 0x26
 8018ffe:	4618      	mov	r0, r3
 8019000:	f7f9 fe9a 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 8019004:	4603      	mov	r3, r0
 8019006:	2b00      	cmp	r3, #0
 8019008:	d07d      	beq.n	8019106 <pifGy86_Init+0x3d2>

    i2c_slv_ctrl.byte = 0;
 801900a:	2300      	movs	r3, #0
 801900c:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_len = 6;
 8019010:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019014:	2206      	movs	r2, #6
 8019016:	f362 0303 	bfi	r3, r2, #0, #4
 801901a:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_en = TRUE;
 801901e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019026:	f887 3020 	strb.w	r3, [r7, #32]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	68db      	ldr	r3, [r3, #12]
 801902e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8019032:	2127      	movs	r1, #39	; 0x27
 8019034:	4618      	mov	r0, r3
 8019036:	f7f9 fe7f 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 801903a:	4603      	mov	r3, r0
 801903c:	2b00      	cmp	r3, #0
 801903e:	d064      	beq.n	801910a <pifGy86_Init+0x3d6>

    if (p_config && p_config->ms5611_evt_read) {
 8019040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019042:	2b00      	cmp	r3, #0
 8019044:	d02a      	beq.n	801909c <pifGy86_Init+0x368>
 8019046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019048:	691b      	ldr	r3, [r3, #16]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d026      	beq.n	801909c <pifGy86_Init+0x368>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8019054:	2377      	movs	r3, #119	; 0x77
 8019056:	687a      	ldr	r2, [r7, #4]
 8019058:	2100      	movs	r1, #0
 801905a:	f001 fdcb 	bl	801abf4 <pifMs5611_Init>
 801905e:	4603      	mov	r3, r0
 8019060:	2b00      	cmp	r3, #0
 8019062:	d054      	beq.n	801910e <pifGy86_Init+0x3da>

        pifMs5611_SetOverSamplingRate(&p_owner->_ms5611, p_config->ms5611_osr);
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801906a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801906c:	7a9b      	ldrb	r3, [r3, #10]
 801906e:	b29b      	uxth	r3, r3
 8019070:	4619      	mov	r1, r3
 8019072:	4610      	mov	r0, r2
 8019074:	f001 fe5e 	bl	801ad34 <pifMs5611_SetOverSamplingRate>

        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read)) goto fail;
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801907e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019080:	8999      	ldrh	r1, [r3, #12]
 8019082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019084:	691b      	ldr	r3, [r3, #16]
 8019086:	461a      	mov	r2, r3
 8019088:	f001 fe90 	bl	801adac <pifMs5611_AddTaskForReading>
 801908c:	4603      	mov	r3, r0
 801908e:	2b00      	cmp	r3, #0
 8019090:	d03f      	beq.n	8019112 <pifGy86_Init+0x3de>
        p_owner->_ms5611._p_task->disallow_yield_id = p_config->disallow_yield_id;
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019096:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019098:	7812      	ldrb	r2, [r2, #0]
 801909a:	709a      	strb	r2, [r3, #2]
    }

	if (id == PIF_ID_AUTO) id = pif_id++;
 801909c:	897b      	ldrh	r3, [r7, #10]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d106      	bne.n	80190b0 <pifGy86_Init+0x37c>
 80190a2:	4b20      	ldr	r3, [pc, #128]	; (8019124 <pifGy86_Init+0x3f0>)
 80190a4:	881b      	ldrh	r3, [r3, #0]
 80190a6:	1c5a      	adds	r2, r3, #1
 80190a8:	b291      	uxth	r1, r2
 80190aa:	4a1e      	ldr	r2, [pc, #120]	; (8019124 <pifGy86_Init+0x3f0>)
 80190ac:	8011      	strh	r1, [r2, #0]
 80190ae:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	897a      	ldrh	r2, [r7, #10]
 80190b4:	801a      	strh	r2, [r3, #0]
    p_owner->__mag_start_reg = 0;
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	2200      	movs	r2, #0
 80190ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifGy86_ReadMag;
 80190be:	683b      	ldr	r3, [r7, #0]
 80190c0:	4a19      	ldr	r2, [pc, #100]	; (8019128 <pifGy86_Init+0x3f4>)
 80190c2:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 80190c4:	683b      	ldr	r3, [r7, #0]
 80190c6:	68fa      	ldr	r2, [r7, #12]
 80190c8:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 80190ca:	2301      	movs	r3, #1
 80190cc:	e026      	b.n	801911c <pifGy86_Init+0x3e8>
    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 80190ce:	bf00      	nop
 80190d0:	e020      	b.n	8019114 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 80190d2:	bf00      	nop
 80190d4:	e01e      	b.n	8019114 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 80190d6:	bf00      	nop
 80190d8:	e01c      	b.n	8019114 <pifGy86_Init+0x3e0>
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 80190da:	bf00      	nop
 80190dc:	e01a      	b.n	8019114 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 80190de:	bf00      	nop
 80190e0:	e018      	b.n	8019114 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 80190e2:	bf00      	nop
 80190e4:	e016      	b.n	8019114 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 80190e6:	bf00      	nop
 80190e8:	e014      	b.n	8019114 <pifGy86_Init+0x3e0>
    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 80190ea:	bf00      	nop
 80190ec:	e012      	b.n	8019114 <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 80190ee:	bf00      	nop
 80190f0:	e010      	b.n	8019114 <pifGy86_Init+0x3e0>
        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 80190f2:	bf00      	nop
 80190f4:	e00e      	b.n	8019114 <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 80190f6:	bf00      	nop
 80190f8:	e00c      	b.n	8019114 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 80190fa:	bf00      	nop
 80190fc:	e00a      	b.n	8019114 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 80190fe:	bf00      	nop
 8019100:	e008      	b.n	8019114 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 8019102:	bf00      	nop
 8019104:	e006      	b.n	8019114 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 8019106:	bf00      	nop
 8019108:	e004      	b.n	8019114 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 801910a:	bf00      	nop
 801910c:	e002      	b.n	8019114 <pifGy86_Init+0x3e0>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 801910e:	bf00      	nop
 8019110:	e000      	b.n	8019114 <pifGy86_Init+0x3e0>
        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read)) goto fail;
 8019112:	bf00      	nop

fail:
	pifGy86_Clear(p_owner);
 8019114:	68f8      	ldr	r0, [r7, #12]
 8019116:	f000 f809 	bl	801912c <pifGy86_Clear>
	return FALSE;
 801911a:	2300      	movs	r3, #0
}
 801911c:	4618      	mov	r0, r3
 801911e:	3738      	adds	r7, #56	; 0x38
 8019120:	46bd      	mov	sp, r7
 8019122:	bd80      	pop	{r7, pc}
 8019124:	2000005c 	.word	0x2000005c
 8019128:	0801915b 	.word	0x0801915b

0801912c <pifGy86_Clear>:

void pifGy86_Clear(PifGy86* p_owner)
{
 801912c:	b580      	push	{r7, lr}
 801912e:	b082      	sub	sp, #8
 8019130:	af00      	add	r7, sp, #0
 8019132:	6078      	str	r0, [r7, #4]
    pifMs5611_Clear(&p_owner->_ms5611);
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	332c      	adds	r3, #44	; 0x2c
 8019138:	4618      	mov	r0, r3
 801913a:	f001 fdd7 	bl	801acec <pifMs5611_Clear>
    pifHmc5883_Clear(&p_owner->_hmc5883);
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	3314      	adds	r3, #20
 8019142:	4618      	mov	r0, r3
 8019144:	f000 fae4 	bl	8019710 <pifHmc5883_Clear>
    pifMpu60x0_Clear(&p_owner->_mpu6050);
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	3304      	adds	r3, #4
 801914c:	4618      	mov	r0, r3
 801914e:	f001 f845 	bl	801a1dc <pifMpu60x0_Clear>
}
 8019152:	bf00      	nop
 8019154:	3708      	adds	r7, #8
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}

0801915a <pifGy86_ReadMag>:

BOOL pifGy86_ReadMag(PifGy86* p_owner, int16_t* p_mag)
{
 801915a:	b580      	push	{r7, lr}
 801915c:	b084      	sub	sp, #16
 801915e:	af00      	add	r7, sp, #0
 8019160:	6078      	str	r0, [r7, #4]
 8019162:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_mpu6050._p_i2c, MPU60X0_REG_EXT_SENS_DATA_00 + p_owner->__mag_start_reg, data, 6)) return FALSE;
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	68d8      	ldr	r0, [r3, #12]
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801916e:	3349      	adds	r3, #73	; 0x49
 8019170:	b2d9      	uxtb	r1, r3
 8019172:	f107 0208 	add.w	r2, r7, #8
 8019176:	2306      	movs	r3, #6
 8019178:	f7f9 fce8 	bl	8012b4c <pifI2cDevice_ReadRegBytes>
 801917c:	4603      	mov	r3, r0
 801917e:	2b00      	cmp	r3, #0
 8019180:	d101      	bne.n	8019186 <pifGy86_ReadMag+0x2c>
 8019182:	2300      	movs	r3, #0
 8019184:	e04d      	b.n	8019222 <pifGy86_ReadMag+0xc8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->_hmc5883.scale[AXIS_X];
 8019186:	7a3b      	ldrb	r3, [r7, #8]
 8019188:	b29b      	uxth	r3, r3
 801918a:	021b      	lsls	r3, r3, #8
 801918c:	b29a      	uxth	r2, r3
 801918e:	7a7b      	ldrb	r3, [r7, #9]
 8019190:	b29b      	uxth	r3, r3
 8019192:	4413      	add	r3, r2
 8019194:	b29b      	uxth	r3, r3
 8019196:	b21b      	sxth	r3, r3
 8019198:	ee07 3a90 	vmov	s15, r3
 801919c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80191a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80191aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80191ae:	ee17 3a90 	vmov	r3, s15
 80191b2:	b21a      	sxth	r2, r3
 80191b4:	683b      	ldr	r3, [r7, #0]
 80191b6:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->_hmc5883.scale[AXIS_Z];
 80191b8:	7abb      	ldrb	r3, [r7, #10]
 80191ba:	b29b      	uxth	r3, r3
 80191bc:	021b      	lsls	r3, r3, #8
 80191be:	b29a      	uxth	r2, r3
 80191c0:	7afb      	ldrb	r3, [r7, #11]
 80191c2:	b29b      	uxth	r3, r3
 80191c4:	4413      	add	r3, r2
 80191c6:	b29b      	uxth	r3, r3
 80191c8:	b21b      	sxth	r3, r3
 80191ca:	ee07 3a90 	vmov	s15, r3
 80191ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80191d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80191dc:	683b      	ldr	r3, [r7, #0]
 80191de:	3304      	adds	r3, #4
 80191e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80191e4:	ee17 2a90 	vmov	r2, s15
 80191e8:	b212      	sxth	r2, r2
 80191ea:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->_hmc5883.scale[AXIS_Y];
 80191ec:	7b3b      	ldrb	r3, [r7, #12]
 80191ee:	b29b      	uxth	r3, r3
 80191f0:	021b      	lsls	r3, r3, #8
 80191f2:	b29a      	uxth	r2, r3
 80191f4:	7b7b      	ldrb	r3, [r7, #13]
 80191f6:	b29b      	uxth	r3, r3
 80191f8:	4413      	add	r3, r2
 80191fa:	b29b      	uxth	r3, r3
 80191fc:	b21b      	sxth	r3, r3
 80191fe:	ee07 3a90 	vmov	s15, r3
 8019202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	edd3 7a06 	vldr	s15, [r3, #24]
 801920c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019210:	683b      	ldr	r3, [r7, #0]
 8019212:	3302      	adds	r3, #2
 8019214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019218:	ee17 2a90 	vmov	r2, s15
 801921c:	b212      	sxth	r2, r2
 801921e:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8019220:	2301      	movs	r3, #1
}
 8019222:	4618      	mov	r0, r3
 8019224:	3710      	adds	r7, #16
 8019226:	46bd      	mov	sp, r7
 8019228:	bd80      	pop	{r7, pc}

0801922a <_doTask>:
#include "core/pif_task.h"
#include "sensor/pif_hc_sr04.h"


static uint16_t _doTask(PifTask* p_task)
{
 801922a:	b580      	push	{r7, lr}
 801922c:	b084      	sub	sp, #16
 801922e:	af00      	add	r7, sp, #0
 8019230:	6078      	str	r0, [r7, #4]
	PifHcSr04* p_owner = (PifHcSr04*)p_task->_p_client;
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	68db      	ldr	r3, [r3, #12]
 8019236:	60fb      	str	r3, [r7, #12]

	if (p_owner->__timer) p_owner->__timer--; else p_owner->__timer = 0;
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801923e:	2b00      	cmp	r3, #0
 8019240:	d009      	beq.n	8019256 <_doTask+0x2c>
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8019248:	b29b      	uxth	r3, r3
 801924a:	3b01      	subs	r3, #1
 801924c:	b29b      	uxth	r3, r3
 801924e:	b21a      	sxth	r2, r3
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	831a      	strh	r2, [r3, #24]
 8019254:	e002      	b.n	801925c <_doTask+0x32>
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	2200      	movs	r2, #0
 801925a:	831a      	strh	r2, [r3, #24]
	if (p_owner->__period > -1 && !p_owner->__timer) {
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8019262:	2b00      	cmp	r3, #0
 8019264:	db2c      	blt.n	80192c0 <_doTask+0x96>
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801926c:	2b00      	cmp	r3, #0
 801926e:	d127      	bne.n	80192c0 <_doTask+0x96>
		if (p_owner->__state == HSS_HIGH) {
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	7d1b      	ldrb	r3, [r3, #20]
 8019274:	2b02      	cmp	r3, #2
 8019276:	d11b      	bne.n	80192b0 <_doTask+0x86>
			if (p_owner->evt_distance) (*p_owner->evt_distance)(p_owner->__period * 1000L / p_owner->_transform_const);
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	685b      	ldr	r3, [r3, #4]
 801927c:	2b00      	cmp	r3, #0
 801927e:	d017      	beq.n	80192b0 <_doTask+0x86>
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	685b      	ldr	r3, [r3, #4]
 8019284:	68fa      	ldr	r2, [r7, #12]
 8019286:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 801928a:	4611      	mov	r1, r2
 801928c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019290:	fb01 f202 	mul.w	r2, r1, r2
 8019294:	ee07 2a90 	vmov	s15, r2
 8019298:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801929c:	68fa      	ldr	r2, [r7, #12]
 801929e:	ed92 7a04 	vldr	s14, [r2, #16]
 80192a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80192a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80192aa:	ee17 0a90 	vmov	r0, s15
 80192ae:	4798      	blx	r3
	    }
		pifHcSr04_Trigger(p_owner);
 80192b0:	68f8      	ldr	r0, [r7, #12]
 80192b2:	f000 f867 	bl	8019384 <pifHcSr04_Trigger>
		p_owner->__timer = p_owner->__period;
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	831a      	strh	r2, [r3, #24]
	}

	if (p_owner->__state == HSS_LOW) {
 80192c0:	68fb      	ldr	r3, [r7, #12]
 80192c2:	7d1b      	ldrb	r3, [r3, #20]
 80192c4:	2b03      	cmp	r3, #3
 80192c6:	d10c      	bne.n	80192e2 <_doTask+0xb8>
		if (p_owner->evt_distance) (*p_owner->evt_distance)(p_owner->__distance);
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	685b      	ldr	r3, [r3, #4]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d005      	beq.n	80192dc <_doTask+0xb2>
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	685b      	ldr	r3, [r3, #4]
 80192d4:	68fa      	ldr	r2, [r7, #12]
 80192d6:	6a12      	ldr	r2, [r2, #32]
 80192d8:	4610      	mov	r0, r2
 80192da:	4798      	blx	r3
		p_owner->__state = HSS_READY;
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	2200      	movs	r2, #0
 80192e0:	751a      	strb	r2, [r3, #20]
    }
	return 0;
 80192e2:	2300      	movs	r3, #0
}
 80192e4:	4618      	mov	r0, r3
 80192e6:	3710      	adds	r7, #16
 80192e8:	46bd      	mov	sp, r7
 80192ea:	bd80      	pop	{r7, pc}

080192ec <pifHcSr04_Init>:

BOOL pifHcSr04_Init(PifHcSr04* p_owner, PifId id)
{
 80192ec:	b580      	push	{r7, lr}
 80192ee:	b084      	sub	sp, #16
 80192f0:	af02      	add	r7, sp, #8
 80192f2:	6078      	str	r0, [r7, #4]
 80192f4:	460b      	mov	r3, r1
 80192f6:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d104      	bne.n	8019308 <pifHcSr04_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80192fe:	4b1d      	ldr	r3, [pc, #116]	; (8019374 <pifHcSr04_Init+0x88>)
 8019300:	2201      	movs	r2, #1
 8019302:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8019304:	2300      	movs	r3, #0
 8019306:	e031      	b.n	801936c <pifHcSr04_Init+0x80>
	}

	if (!pif_act_timer1us) {
 8019308:	4b1b      	ldr	r3, [pc, #108]	; (8019378 <pifHcSr04_Init+0x8c>)
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d104      	bne.n	801931a <pifHcSr04_Init+0x2e>
		pif_error = E_CANNOT_USE;
 8019310:	4b18      	ldr	r3, [pc, #96]	; (8019374 <pifHcSr04_Init+0x88>)
 8019312:	2209      	movs	r2, #9
 8019314:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8019316:	2300      	movs	r3, #0
 8019318:	e028      	b.n	801936c <pifHcSr04_Init+0x80>
	}

	memset(p_owner, 0, sizeof(PifHcSr04));
 801931a:	2224      	movs	r2, #36	; 0x24
 801931c:	2100      	movs	r1, #0
 801931e:	6878      	ldr	r0, [r7, #4]
 8019320:	f009 ffb4 	bl	802328c <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_PERIOD_MS, 1, _doTask, p_owner, TRUE);
 8019324:	2301      	movs	r3, #1
 8019326:	9300      	str	r3, [sp, #0]
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	4a14      	ldr	r2, [pc, #80]	; (801937c <pifHcSr04_Init+0x90>)
 801932c:	2101      	movs	r1, #1
 801932e:	2002      	movs	r0, #2
 8019330:	f7fb fa7e 	bl	8014830 <pifTaskManager_Add>
 8019334:	4602      	mov	r2, r0
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	60da      	str	r2, [r3, #12]
	if (!p_owner->_p_task) return FALSE;
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	68db      	ldr	r3, [r3, #12]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d101      	bne.n	8019346 <pifHcSr04_Init+0x5a>
 8019342:	2300      	movs	r3, #0
 8019344:	e012      	b.n	801936c <pifHcSr04_Init+0x80>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8019346:	887b      	ldrh	r3, [r7, #2]
 8019348:	2b00      	cmp	r3, #0
 801934a:	d106      	bne.n	801935a <pifHcSr04_Init+0x6e>
 801934c:	4b0c      	ldr	r3, [pc, #48]	; (8019380 <pifHcSr04_Init+0x94>)
 801934e:	881b      	ldrh	r3, [r3, #0]
 8019350:	1c5a      	adds	r2, r3, #1
 8019352:	b291      	uxth	r1, r2
 8019354:	4a0a      	ldr	r2, [pc, #40]	; (8019380 <pifHcSr04_Init+0x94>)
 8019356:	8011      	strh	r1, [r2, #0]
 8019358:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	887a      	ldrh	r2, [r7, #2]
 801935e:	811a      	strh	r2, [r3, #8]

    pifHcSr04_SetTemperature(p_owner, 20);
 8019360:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8019364:	6878      	ldr	r0, [r7, #4]
 8019366:	f000 f847 	bl	80193f8 <pifHcSr04_SetTemperature>

    return TRUE;
 801936a:	2301      	movs	r3, #1
}
 801936c:	4618      	mov	r0, r3
 801936e:	3708      	adds	r7, #8
 8019370:	46bd      	mov	sp, r7
 8019372:	bd80      	pop	{r7, pc}
 8019374:	20001ef0 	.word	0x20001ef0
 8019378:	20001f14 	.word	0x20001f14
 801937c:	0801922b 	.word	0x0801922b
 8019380:	2000005c 	.word	0x2000005c

08019384 <pifHcSr04_Trigger>:
		p_owner->_p_task = NULL;
	}
}

void pifHcSr04_Trigger(PifHcSr04* p_owner)
{
 8019384:	b580      	push	{r7, lr}
 8019386:	b082      	sub	sp, #8
 8019388:	af00      	add	r7, sp, #0
 801938a:	6078      	str	r0, [r7, #4]
	(*p_owner->act_trigger)(ON);
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	2001      	movs	r0, #1
 8019392:	4798      	blx	r3
	pif_Delay1us(10);
 8019394:	200a      	movs	r0, #10
 8019396:	f7f8 fb15 	bl	80119c4 <pif_Delay1us>
	(*p_owner->act_trigger)(OFF);
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	2000      	movs	r0, #0
 80193a0:	4798      	blx	r3
	p_owner->__state = HSS_TRIGGER;
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	2201      	movs	r2, #1
 80193a6:	751a      	strb	r2, [r3, #20]
}
 80193a8:	bf00      	nop
 80193aa:	3708      	adds	r7, #8
 80193ac:	46bd      	mov	sp, r7
 80193ae:	bd80      	pop	{r7, pc}

080193b0 <pifHcSr04_StartTrigger>:

BOOL pifHcSr04_StartTrigger(PifHcSr04* p_owner, uint16_t period)
{
 80193b0:	b480      	push	{r7}
 80193b2:	b083      	sub	sp, #12
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
 80193b8:	460b      	mov	r3, r1
 80193ba:	807b      	strh	r3, [r7, #2]
	if (!p_owner || !period) {
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d002      	beq.n	80193c8 <pifHcSr04_StartTrigger+0x18>
 80193c2:	887b      	ldrh	r3, [r7, #2]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d104      	bne.n	80193d2 <pifHcSr04_StartTrigger+0x22>
		pif_error = E_INVALID_PARAM;
 80193c8:	4b09      	ldr	r3, [pc, #36]	; (80193f0 <pifHcSr04_StartTrigger+0x40>)
 80193ca:	2201      	movs	r2, #1
 80193cc:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 80193ce:	2300      	movs	r3, #0
 80193d0:	e007      	b.n	80193e2 <pifHcSr04_StartTrigger+0x32>
	}

	p_owner->__period = period;
 80193d2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	82da      	strh	r2, [r3, #22]
	p_owner->__timer = 0;
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	2200      	movs	r2, #0
 80193de:	831a      	strh	r2, [r3, #24]
	return TRUE;
 80193e0:	2301      	movs	r3, #1
}
 80193e2:	4618      	mov	r0, r3
 80193e4:	370c      	adds	r7, #12
 80193e6:	46bd      	mov	sp, r7
 80193e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ec:	4770      	bx	lr
 80193ee:	bf00      	nop
 80193f0:	20001ef0 	.word	0x20001ef0
 80193f4:	00000000 	.word	0x00000000

080193f8 <pifHcSr04_SetTemperature>:
{
	p_owner->__period = -1;
}

void pifHcSr04_SetTemperature(PifHcSr04* p_owner, float temperature)
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b082      	sub	sp, #8
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]
 8019400:	ed87 0a00 	vstr	s0, [r7]
	p_owner->_transform_const = 2.0 / ((331.6 + 0.6 * temperature) / 10000.0);		// 2 : 왕복, 10000 : m/s -> cm/ms
 8019404:	6838      	ldr	r0, [r7, #0]
 8019406:	f7e7 f85d 	bl	80004c4 <__aeabi_f2d>
 801940a:	a317      	add	r3, pc, #92	; (adr r3, 8019468 <pifHcSr04_SetTemperature+0x70>)
 801940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019410:	f7e7 f8b0 	bl	8000574 <__aeabi_dmul>
 8019414:	4602      	mov	r2, r0
 8019416:	460b      	mov	r3, r1
 8019418:	4610      	mov	r0, r2
 801941a:	4619      	mov	r1, r3
 801941c:	a314      	add	r3, pc, #80	; (adr r3, 8019470 <pifHcSr04_SetTemperature+0x78>)
 801941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019422:	f7e6 fef1 	bl	8000208 <__adddf3>
 8019426:	4602      	mov	r2, r0
 8019428:	460b      	mov	r3, r1
 801942a:	4610      	mov	r0, r2
 801942c:	4619      	mov	r1, r3
 801942e:	a312      	add	r3, pc, #72	; (adr r3, 8019478 <pifHcSr04_SetTemperature+0x80>)
 8019430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019434:	f7e7 f9c8 	bl	80007c8 <__aeabi_ddiv>
 8019438:	4602      	mov	r2, r0
 801943a:	460b      	mov	r3, r1
 801943c:	f04f 0000 	mov.w	r0, #0
 8019440:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8019444:	f7e7 f9c0 	bl	80007c8 <__aeabi_ddiv>
 8019448:	4602      	mov	r2, r0
 801944a:	460b      	mov	r3, r1
 801944c:	4610      	mov	r0, r2
 801944e:	4619      	mov	r1, r3
 8019450:	f7e7 fb72 	bl	8000b38 <__aeabi_d2f>
 8019454:	4602      	mov	r2, r0
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	611a      	str	r2, [r3, #16]
}
 801945a:	bf00      	nop
 801945c:	3708      	adds	r7, #8
 801945e:	46bd      	mov	sp, r7
 8019460:	bd80      	pop	{r7, pc}
 8019462:	bf00      	nop
 8019464:	f3af 8000 	nop.w
 8019468:	33333333 	.word	0x33333333
 801946c:	3fe33333 	.word	0x3fe33333
 8019470:	9999999a 	.word	0x9999999a
 8019474:	4074b999 	.word	0x4074b999
 8019478:	00000000 	.word	0x00000000
 801947c:	40c38800 	.word	0x40c38800

08019480 <pifHcSr04_sigReceiveEcho>:

void pifHcSr04_sigReceiveEcho(PifHcSr04* p_owner, SWITCH state)
{
 8019480:	b580      	push	{r7, lr}
 8019482:	b082      	sub	sp, #8
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]
 8019488:	460b      	mov	r3, r1
 801948a:	70fb      	strb	r3, [r7, #3]
	switch (p_owner->__state) {
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	7d1b      	ldrb	r3, [r3, #20]
 8019490:	2b01      	cmp	r3, #1
 8019492:	d002      	beq.n	801949a <pifHcSr04_sigReceiveEcho+0x1a>
 8019494:	2b02      	cmp	r3, #2
 8019496:	d00d      	beq.n	80194b4 <pifHcSr04_sigReceiveEcho+0x34>
			p_owner->__state = HSS_LOW;
		}
		break;

	default:
		break;
 8019498:	e02c      	b.n	80194f4 <pifHcSr04_sigReceiveEcho+0x74>
		if (state) {
 801949a:	78fb      	ldrb	r3, [r7, #3]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d026      	beq.n	80194ee <pifHcSr04_sigReceiveEcho+0x6e>
			p_owner->__tigger_time_us = (*pif_act_timer1us)();
 80194a0:	4b16      	ldr	r3, [pc, #88]	; (80194fc <pifHcSr04_sigReceiveEcho+0x7c>)
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	4798      	blx	r3
 80194a6:	4602      	mov	r2, r0
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	61da      	str	r2, [r3, #28]
			p_owner->__state = HSS_HIGH;
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	2202      	movs	r2, #2
 80194b0:	751a      	strb	r2, [r3, #20]
		break;
 80194b2:	e01c      	b.n	80194ee <pifHcSr04_sigReceiveEcho+0x6e>
		if (!state) {
 80194b4:	78fb      	ldrb	r3, [r7, #3]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d11b      	bne.n	80194f2 <pifHcSr04_sigReceiveEcho+0x72>
			p_owner->__distance = ((*pif_act_timer1us)() - p_owner->__tigger_time_us) / p_owner->_transform_const;
 80194ba:	4b10      	ldr	r3, [pc, #64]	; (80194fc <pifHcSr04_sigReceiveEcho+0x7c>)
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	4798      	blx	r3
 80194c0:	4602      	mov	r2, r0
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	69db      	ldr	r3, [r3, #28]
 80194c6:	1ad3      	subs	r3, r2, r3
 80194c8:	ee07 3a90 	vmov	s15, r3
 80194cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	ed93 7a04 	vldr	s14, [r3, #16]
 80194d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80194da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80194de:	ee17 2a90 	vmov	r2, s15
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	621a      	str	r2, [r3, #32]
			p_owner->__state = HSS_LOW;
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	2203      	movs	r2, #3
 80194ea:	751a      	strb	r2, [r3, #20]
		break;
 80194ec:	e001      	b.n	80194f2 <pifHcSr04_sigReceiveEcho+0x72>
		break;
 80194ee:	bf00      	nop
 80194f0:	e000      	b.n	80194f4 <pifHcSr04_sigReceiveEcho+0x74>
		break;
 80194f2:	bf00      	nop
	}
}
 80194f4:	bf00      	nop
 80194f6:	3708      	adds	r7, #8
 80194f8:	46bd      	mov	sp, r7
 80194fa:	bd80      	pop	{r7, pc}
 80194fc:	20001f14 	.word	0x20001f14

08019500 <_changeGain>:
#include "core/pif_log.h"
#include "sensor/pif_hmc5883.h"


static void _changeGain(PifImuSensor* p_imu_sensor, PifHmc5883Gain gain)
{
 8019500:	b480      	push	{r7}
 8019502:	b083      	sub	sp, #12
 8019504:	af00      	add	r7, sp, #0
 8019506:	6078      	str	r0, [r7, #4]
 8019508:	460b      	mov	r3, r1
 801950a:	70fb      	strb	r3, [r7, #3]
	switch (gain) {
 801950c:	78fb      	ldrb	r3, [r7, #3]
 801950e:	2b07      	cmp	r3, #7
 8019510:	d839      	bhi.n	8019586 <_changeGain+0x86>
 8019512:	a201      	add	r2, pc, #4	; (adr r2, 8019518 <_changeGain+0x18>)
 8019514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019518:	08019539 	.word	0x08019539
 801951c:	08019543 	.word	0x08019543
 8019520:	0801954d 	.word	0x0801954d
 8019524:	08019557 	.word	0x08019557
 8019528:	08019561 	.word	0x08019561
 801952c:	0801956b 	.word	0x0801956b
 8019530:	08019575 	.word	0x08019575
 8019534:	0801957f 	.word	0x0801957f
	case HMC5883_GAIN_0_88GA:	p_imu_sensor->_mag_gain = 1370; break;
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	f240 525a 	movw	r2, #1370	; 0x55a
 801953e:	825a      	strh	r2, [r3, #18]
 8019540:	e021      	b.n	8019586 <_changeGain+0x86>
	case HMC5883_GAIN_1_3GA:	p_imu_sensor->_mag_gain = 1090; break;
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	f240 4242 	movw	r2, #1090	; 0x442
 8019548:	825a      	strh	r2, [r3, #18]
 801954a:	e01c      	b.n	8019586 <_changeGain+0x86>
	case HMC5883_GAIN_1_9GA:	p_imu_sensor->_mag_gain = 820; break;
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	f44f 724d 	mov.w	r2, #820	; 0x334
 8019552:	825a      	strh	r2, [r3, #18]
 8019554:	e017      	b.n	8019586 <_changeGain+0x86>
	case HMC5883_GAIN_2_5GA:	p_imu_sensor->_mag_gain = 660; break;
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	f44f 7225 	mov.w	r2, #660	; 0x294
 801955c:	825a      	strh	r2, [r3, #18]
 801955e:	e012      	b.n	8019586 <_changeGain+0x86>
	case HMC5883_GAIN_4GA:		p_imu_sensor->_mag_gain = 440; break;
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8019566:	825a      	strh	r2, [r3, #18]
 8019568:	e00d      	b.n	8019586 <_changeGain+0x86>
	case HMC5883_GAIN_4_7GA:	p_imu_sensor->_mag_gain = 390; break;
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8019570:	825a      	strh	r2, [r3, #18]
 8019572:	e008      	b.n	8019586 <_changeGain+0x86>
	case HMC5883_GAIN_5_6GA:	p_imu_sensor->_mag_gain = 330; break;
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801957a:	825a      	strh	r2, [r3, #18]
 801957c:	e003      	b.n	8019586 <_changeGain+0x86>
	case HMC5883_GAIN_8_1GA:	p_imu_sensor->_mag_gain = 230; break;
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	22e6      	movs	r2, #230	; 0xe6
 8019582:	825a      	strh	r2, [r3, #18]
 8019584:	bf00      	nop
	}
}
 8019586:	bf00      	nop
 8019588:	370c      	adds	r7, #12
 801958a:	46bd      	mov	sp, r7
 801958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019590:	4770      	bx	lr
 8019592:	bf00      	nop

08019594 <pifHmc5883_Init>:

BOOL pifHmc5883_Init(PifHmc5883* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor)
{
 8019594:	b590      	push	{r4, r7, lr}
 8019596:	b08d      	sub	sp, #52	; 0x34
 8019598:	af02      	add	r7, sp, #8
 801959a:	60f8      	str	r0, [r7, #12]
 801959c:	607a      	str	r2, [r7, #4]
 801959e:	603b      	str	r3, [r7, #0]
 80195a0:	460b      	mov	r3, r1
 80195a2:	817b      	strh	r3, [r7, #10]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "HMC5883 Ident: ";
 80195a4:	4b54      	ldr	r3, [pc, #336]	; (80196f8 <pifHmc5883_Init+0x164>)
 80195a6:	f107 0418 	add.w	r4, r7, #24
 80195aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80195ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data[4];

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d005      	beq.n	80195c2 <pifHmc5883_Init+0x2e>
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d002      	beq.n	80195c2 <pifHmc5883_Init+0x2e>
 80195bc:	683b      	ldr	r3, [r7, #0]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d104      	bne.n	80195cc <pifHmc5883_Init+0x38>
		pif_error = E_INVALID_PARAM;
 80195c2:	4b4e      	ldr	r3, [pc, #312]	; (80196fc <pifHmc5883_Init+0x168>)
 80195c4:	2201      	movs	r2, #1
 80195c6:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 80195c8:	2300      	movs	r3, #0
 80195ca:	e091      	b.n	80196f0 <pifHmc5883_Init+0x15c>
	}

	memset(p_owner, 0, sizeof(PifHmc5883));
 80195cc:	2218      	movs	r2, #24
 80195ce:	2100      	movs	r1, #0
 80195d0:	68f8      	ldr	r0, [r7, #12]
 80195d2:	f009 fe5b 	bl	802328c <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 80195d6:	6878      	ldr	r0, [r7, #4]
 80195d8:	f7f9 f99c 	bl	8012914 <pifI2cPort_AddDevice>
 80195dc:	4602      	mov	r2, r0
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	611a      	str	r2, [r3, #16]
    if (!p_owner->_p_i2c) return FALSE;
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	691b      	ldr	r3, [r3, #16]
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d101      	bne.n	80195ee <pifHmc5883_Init+0x5a>
 80195ea:	2300      	movs	r3, #0
 80195ec:	e080      	b.n	80196f0 <pifHmc5883_Init+0x15c>

    p_owner->_p_i2c->addr = HMC5883_I2C_ADDR;
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	691b      	ldr	r3, [r3, #16]
 80195f2:	221e      	movs	r2, #30
 80195f4:	701a      	strb	r2, [r3, #0]

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	6918      	ldr	r0, [r3, #16]
 80195fa:	f107 0214 	add.w	r2, r7, #20
 80195fe:	2303      	movs	r3, #3
 8019600:	210a      	movs	r1, #10
 8019602:	f7f9 faa3 	bl	8012b4c <pifI2cDevice_ReadRegBytes>
 8019606:	4603      	mov	r3, r0
 8019608:	2b00      	cmp	r3, #0
 801960a:	d06a      	beq.n	80196e2 <pifHmc5883_Init+0x14e>
	if (data[0] != 'H') {
 801960c:	7d3b      	ldrb	r3, [r7, #20]
 801960e:	2b48      	cmp	r3, #72	; 0x48
 8019610:	d003      	beq.n	801961a <pifHmc5883_Init+0x86>
		pif_error = E_INVALID_ID;
 8019612:	4b3a      	ldr	r3, [pc, #232]	; (80196fc <pifHmc5883_Init+0x168>)
 8019614:	2211      	movs	r2, #17
 8019616:	701a      	strb	r2, [r3, #0]
		goto fail;
 8019618:	e066      	b.n	80196e8 <pifHmc5883_Init+0x154>
	}
#ifndef __PIF_NO_LOG__	
    if (data[0] < 32 || data[1] < 32 || data[2] < 32) {
 801961a:	7d3b      	ldrb	r3, [r7, #20]
 801961c:	2b1f      	cmp	r3, #31
 801961e:	d905      	bls.n	801962c <pifHmc5883_Init+0x98>
 8019620:	7d7b      	ldrb	r3, [r7, #21]
 8019622:	2b1f      	cmp	r3, #31
 8019624:	d902      	bls.n	801962c <pifHmc5883_Init+0x98>
 8019626:	7dbb      	ldrb	r3, [r7, #22]
 8019628:	2b1f      	cmp	r3, #31
 801962a:	d80e      	bhi.n	801964a <pifHmc5883_Init+0xb6>
    	pifLog_Printf(LT_INFO, "%s%2Xh %2Xh %2Xh", ident, data[0], data[1], data[2]);
 801962c:	7d3b      	ldrb	r3, [r7, #20]
 801962e:	4618      	mov	r0, r3
 8019630:	7d7b      	ldrb	r3, [r7, #21]
 8019632:	7dba      	ldrb	r2, [r7, #22]
 8019634:	4611      	mov	r1, r2
 8019636:	f107 0218 	add.w	r2, r7, #24
 801963a:	9101      	str	r1, [sp, #4]
 801963c:	9300      	str	r3, [sp, #0]
 801963e:	4603      	mov	r3, r0
 8019640:	492f      	ldr	r1, [pc, #188]	; (8019700 <pifHmc5883_Init+0x16c>)
 8019642:	2002      	movs	r0, #2
 8019644:	f7fa f8fc 	bl	8013840 <pifLog_Printf>
 8019648:	e00d      	b.n	8019666 <pifHmc5883_Init+0xd2>
    }
    else {
    	pifLog_Printf(LT_INFO, "%s%c%c%c", ident, data[0], data[1], data[2]);
 801964a:	7d3b      	ldrb	r3, [r7, #20]
 801964c:	4618      	mov	r0, r3
 801964e:	7d7b      	ldrb	r3, [r7, #21]
 8019650:	7dba      	ldrb	r2, [r7, #22]
 8019652:	4611      	mov	r1, r2
 8019654:	f107 0218 	add.w	r2, r7, #24
 8019658:	9101      	str	r1, [sp, #4]
 801965a:	9300      	str	r3, [sp, #0]
 801965c:	4603      	mov	r3, r0
 801965e:	4929      	ldr	r1, [pc, #164]	; (8019704 <pifHmc5883_Init+0x170>)
 8019660:	2002      	movs	r0, #2
 8019662:	f7fa f8ed 	bl	8013840 <pifLog_Printf>
    }
#endif

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	6918      	ldr	r0, [r3, #16]
 801966a:	f107 0314 	add.w	r3, r7, #20
 801966e:	f240 5203 	movw	r2, #1283	; 0x503
 8019672:	2101      	movs	r1, #1
 8019674:	f7f9 fa7f 	bl	8012b76 <pifI2cDevice_ReadRegBit8>
 8019678:	4603      	mov	r3, r0
 801967a:	2b00      	cmp	r3, #0
 801967c:	d033      	beq.n	80196e6 <pifHmc5883_Init+0x152>
    _changeGain(p_imu_sensor, (PifHmc5883Gain)data);
 801967e:	f107 0314 	add.w	r3, r7, #20
 8019682:	b2db      	uxtb	r3, r3
 8019684:	4619      	mov	r1, r3
 8019686:	6838      	ldr	r0, [r7, #0]
 8019688:	f7ff ff3a 	bl	8019500 <_changeGain>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801968c:	897b      	ldrh	r3, [r7, #10]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d106      	bne.n	80196a0 <pifHmc5883_Init+0x10c>
 8019692:	4b1d      	ldr	r3, [pc, #116]	; (8019708 <pifHmc5883_Init+0x174>)
 8019694:	881b      	ldrh	r3, [r3, #0]
 8019696:	1c5a      	adds	r2, r3, #1
 8019698:	b291      	uxth	r1, r2
 801969a:	4a1b      	ldr	r2, [pc, #108]	; (8019708 <pifHmc5883_Init+0x174>)
 801969c:	8011      	strh	r1, [r2, #0]
 801969e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	897a      	ldrh	r2, [r7, #10]
 80196a4:	819a      	strh	r2, [r3, #12]
	p_owner->scale[AXIS_X] = 1.0f;
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80196ac:	601a      	str	r2, [r3, #0]
	p_owner->scale[AXIS_Y] = 1.0f;
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80196b4:	605a      	str	r2, [r3, #4]
	p_owner->scale[AXIS_Z] = 1.0f;
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80196bc:	609a      	str	r2, [r3, #8]
	p_owner->__p_imu_sensor = p_imu_sensor;
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	683a      	ldr	r2, [r7, #0]
 80196c2:	615a      	str	r2, [r3, #20]

	p_imu_sensor->_measure |= IMU_MEASURE_MAGNETO;
 80196c4:	683b      	ldr	r3, [r7, #0]
 80196c6:	781b      	ldrb	r3, [r3, #0]
 80196c8:	f043 0304 	orr.w	r3, r3, #4
 80196cc:	b2da      	uxtb	r2, r3
 80196ce:	683b      	ldr	r3, [r7, #0]
 80196d0:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifHmc5883_ReadMag;
 80196d2:	683b      	ldr	r3, [r7, #0]
 80196d4:	4a0d      	ldr	r2, [pc, #52]	; (801970c <pifHmc5883_Init+0x178>)
 80196d6:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 80196d8:	683b      	ldr	r3, [r7, #0]
 80196da:	68fa      	ldr	r2, [r7, #12]
 80196dc:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 80196de:	2301      	movs	r3, #1
 80196e0:	e006      	b.n	80196f0 <pifHmc5883_Init+0x15c>
    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 80196e2:	bf00      	nop
 80196e4:	e000      	b.n	80196e8 <pifHmc5883_Init+0x154>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 80196e6:	bf00      	nop

fail:
	pifHmc5883_Clear(p_owner);
 80196e8:	68f8      	ldr	r0, [r7, #12]
 80196ea:	f000 f811 	bl	8019710 <pifHmc5883_Clear>
	return FALSE;
 80196ee:	2300      	movs	r3, #0
}
 80196f0:	4618      	mov	r0, r3
 80196f2:	372c      	adds	r7, #44	; 0x2c
 80196f4:	46bd      	mov	sp, r7
 80196f6:	bd90      	pop	{r4, r7, pc}
 80196f8:	08027e4c 	.word	0x08027e4c
 80196fc:	20001ef0 	.word	0x20001ef0
 8019700:	08027e2c 	.word	0x08027e2c
 8019704:	08027e40 	.word	0x08027e40
 8019708:	2000005c 	.word	0x2000005c
 801970c:	0801977f 	.word	0x0801977f

08019710 <pifHmc5883_Clear>:

void pifHmc5883_Clear(PifHmc5883* p_owner)
{
 8019710:	b580      	push	{r7, lr}
 8019712:	b082      	sub	sp, #8
 8019714:	af00      	add	r7, sp, #0
 8019716:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	691b      	ldr	r3, [r3, #16]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d00b      	beq.n	8019738 <pifHmc5883_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	691b      	ldr	r3, [r3, #16]
 8019724:	685a      	ldr	r2, [r3, #4]
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	691b      	ldr	r3, [r3, #16]
 801972a:	4619      	mov	r1, r3
 801972c:	4610      	mov	r0, r2
 801972e:	f7f9 f915 	bl	801295c <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	2200      	movs	r2, #0
 8019736:	611a      	str	r2, [r3, #16]
	}
}
 8019738:	bf00      	nop
 801973a:	3708      	adds	r7, #8
 801973c:	46bd      	mov	sp, r7
 801973e:	bd80      	pop	{r7, pc}

08019740 <pifHmc5883_SetGain>:

BOOL pifHmc5883_SetGain(PifHmc5883* p_owner, PifHmc5883Gain gain)
{
 8019740:	b580      	push	{r7, lr}
 8019742:	b082      	sub	sp, #8
 8019744:	af00      	add	r7, sp, #0
 8019746:	6078      	str	r0, [r7, #4]
 8019748:	460b      	mov	r3, r1
 801974a:	70fb      	strb	r3, [r7, #3]
    if (!pifI2cDevice_WriteRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, gain)) return FALSE;
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	6918      	ldr	r0, [r3, #16]
 8019750:	78fb      	ldrb	r3, [r7, #3]
 8019752:	f240 5203 	movw	r2, #1283	; 0x503
 8019756:	2101      	movs	r1, #1
 8019758:	f7f9 fb04 	bl	8012d64 <pifI2cDevice_WriteRegBit8>
 801975c:	4603      	mov	r3, r0
 801975e:	2b00      	cmp	r3, #0
 8019760:	d101      	bne.n	8019766 <pifHmc5883_SetGain+0x26>
 8019762:	2300      	movs	r3, #0
 8019764:	e007      	b.n	8019776 <pifHmc5883_SetGain+0x36>
	_changeGain(p_owner->__p_imu_sensor, gain);
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	695b      	ldr	r3, [r3, #20]
 801976a:	78fa      	ldrb	r2, [r7, #3]
 801976c:	4611      	mov	r1, r2
 801976e:	4618      	mov	r0, r3
 8019770:	f7ff fec6 	bl	8019500 <_changeGain>
    return TRUE;
 8019774:	2301      	movs	r3, #1
}
 8019776:	4618      	mov	r0, r3
 8019778:	3708      	adds	r7, #8
 801977a:	46bd      	mov	sp, r7
 801977c:	bd80      	pop	{r7, pc}

0801977e <pifHmc5883_ReadMag>:

BOOL pifHmc5883_ReadMag(PifHmc5883* p_owner, int16_t* p_mag)
{
 801977e:	b580      	push	{r7, lr}
 8019780:	b084      	sub	sp, #16
 8019782:	af00      	add	r7, sp, #0
 8019784:	6078      	str	r0, [r7, #4]
 8019786:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, HMC5883_REG_STATUS, data)) return FALSE;
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	691b      	ldr	r3, [r3, #16]
 801978c:	f107 0208 	add.w	r2, r7, #8
 8019790:	2109      	movs	r1, #9
 8019792:	4618      	mov	r0, r3
 8019794:	f7f9 f9a2 	bl	8012adc <pifI2cDevice_ReadRegByte>
 8019798:	4603      	mov	r3, r0
 801979a:	2b00      	cmp	r3, #0
 801979c:	d101      	bne.n	80197a2 <pifHmc5883_ReadMag+0x24>
 801979e:	2300      	movs	r3, #0
 80197a0:	e061      	b.n	8019866 <pifHmc5883_ReadMag+0xe8>
	if (!(data[0] & 1)) return FALSE;
 80197a2:	7a3b      	ldrb	r3, [r7, #8]
 80197a4:	f003 0301 	and.w	r3, r3, #1
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d101      	bne.n	80197b0 <pifHmc5883_ReadMag+0x32>
 80197ac:	2300      	movs	r3, #0
 80197ae:	e05a      	b.n	8019866 <pifHmc5883_ReadMag+0xe8>

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_OUT_X_M, data, 6)) return FALSE;
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	6918      	ldr	r0, [r3, #16]
 80197b4:	f107 0208 	add.w	r2, r7, #8
 80197b8:	2306      	movs	r3, #6
 80197ba:	2103      	movs	r1, #3
 80197bc:	f7f9 f9c6 	bl	8012b4c <pifI2cDevice_ReadRegBytes>
 80197c0:	4603      	mov	r3, r0
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d101      	bne.n	80197ca <pifHmc5883_ReadMag+0x4c>
 80197c6:	2300      	movs	r3, #0
 80197c8:	e04d      	b.n	8019866 <pifHmc5883_ReadMag+0xe8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->scale[AXIS_X];
 80197ca:	7a3b      	ldrb	r3, [r7, #8]
 80197cc:	b29b      	uxth	r3, r3
 80197ce:	021b      	lsls	r3, r3, #8
 80197d0:	b29a      	uxth	r2, r3
 80197d2:	7a7b      	ldrb	r3, [r7, #9]
 80197d4:	b29b      	uxth	r3, r3
 80197d6:	4413      	add	r3, r2
 80197d8:	b29b      	uxth	r3, r3
 80197da:	b21b      	sxth	r3, r3
 80197dc:	ee07 3a90 	vmov	s15, r3
 80197e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	edd3 7a00 	vldr	s15, [r3]
 80197ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80197ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80197f2:	ee17 3a90 	vmov	r3, s15
 80197f6:	b21a      	sxth	r2, r3
 80197f8:	683b      	ldr	r3, [r7, #0]
 80197fa:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->scale[AXIS_Z];
 80197fc:	7abb      	ldrb	r3, [r7, #10]
 80197fe:	b29b      	uxth	r3, r3
 8019800:	021b      	lsls	r3, r3, #8
 8019802:	b29a      	uxth	r2, r3
 8019804:	7afb      	ldrb	r3, [r7, #11]
 8019806:	b29b      	uxth	r3, r3
 8019808:	4413      	add	r3, r2
 801980a:	b29b      	uxth	r3, r3
 801980c:	b21b      	sxth	r3, r3
 801980e:	ee07 3a90 	vmov	s15, r3
 8019812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	edd3 7a02 	vldr	s15, [r3, #8]
 801981c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019820:	683b      	ldr	r3, [r7, #0]
 8019822:	3304      	adds	r3, #4
 8019824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019828:	ee17 2a90 	vmov	r2, s15
 801982c:	b212      	sxth	r2, r2
 801982e:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->scale[AXIS_Y];
 8019830:	7b3b      	ldrb	r3, [r7, #12]
 8019832:	b29b      	uxth	r3, r3
 8019834:	021b      	lsls	r3, r3, #8
 8019836:	b29a      	uxth	r2, r3
 8019838:	7b7b      	ldrb	r3, [r7, #13]
 801983a:	b29b      	uxth	r3, r3
 801983c:	4413      	add	r3, r2
 801983e:	b29b      	uxth	r3, r3
 8019840:	b21b      	sxth	r3, r3
 8019842:	ee07 3a90 	vmov	s15, r3
 8019846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	edd3 7a01 	vldr	s15, [r3, #4]
 8019850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019854:	683b      	ldr	r3, [r7, #0]
 8019856:	3302      	adds	r3, #2
 8019858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801985c:	ee17 2a90 	vmov	r2, s15
 8019860:	b212      	sxth	r2, r2
 8019862:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8019864:	2301      	movs	r3, #1
}
 8019866:	4618      	mov	r0, r3
 8019868:	3710      	adds	r7, #16
 801986a:	46bd      	mov	sp, r7
 801986c:	bd80      	pop	{r7, pc}

0801986e <_alignBoard>:

#include <math.h>


static void _alignBoard(PifImuSensor* p_owner, int16_t *vec)
{
 801986e:	b580      	push	{r7, lr}
 8019870:	b084      	sub	sp, #16
 8019872:	af00      	add	r7, sp, #0
 8019874:	6078      	str	r0, [r7, #4]
 8019876:	6039      	str	r1, [r7, #0]
    int16_t x = vec[AXIS_X];
 8019878:	683b      	ldr	r3, [r7, #0]
 801987a:	881b      	ldrh	r3, [r3, #0]
 801987c:	81fb      	strh	r3, [r7, #14]
    int16_t y = vec[AXIS_Y];
 801987e:	683b      	ldr	r3, [r7, #0]
 8019880:	885b      	ldrh	r3, [r3, #2]
 8019882:	81bb      	strh	r3, [r7, #12]
    int16_t z = vec[AXIS_Z];
 8019884:	683b      	ldr	r3, [r7, #0]
 8019886:	889b      	ldrh	r3, [r3, #4]
 8019888:	817b      	strh	r3, [r7, #10]

    vec[AXIS_X] = lrintf(p_owner->__board_rotation[0][0] * x + p_owner->__board_rotation[1][0] * y + p_owner->__board_rotation[2][0] * z);
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8019890:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019894:	ee07 3a90 	vmov	s15, r3
 8019898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801989c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80198a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80198aa:	ee07 3a90 	vmov	s15, r3
 80198ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80198b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80198c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80198c4:	ee07 3a90 	vmov	s15, r3
 80198c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80198d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80198d4:	eeb0 0a67 	vmov.f32	s0, s15
 80198d8:	f009 fffa 	bl	80238d0 <lrintf>
 80198dc:	4603      	mov	r3, r0
 80198de:	b21a      	sxth	r2, r3
 80198e0:	683b      	ldr	r3, [r7, #0]
 80198e2:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Y] = lrintf(p_owner->__board_rotation[0][1] * x + p_owner->__board_rotation[1][1] * y + p_owner->__board_rotation[2][1] * z);
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80198ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80198ee:	ee07 3a90 	vmov	s15, r3
 80198f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8019900:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8019904:	ee07 3a90 	vmov	s15, r3
 8019908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801990c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019910:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 801991a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801991e:	ee07 3a90 	vmov	s15, r3
 8019922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801992a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801992e:	eeb0 0a67 	vmov.f32	s0, s15
 8019932:	f009 ffcd 	bl	80238d0 <lrintf>
 8019936:	4602      	mov	r2, r0
 8019938:	683b      	ldr	r3, [r7, #0]
 801993a:	3302      	adds	r3, #2
 801993c:	b212      	sxth	r2, r2
 801993e:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Z] = lrintf(p_owner->__board_rotation[0][2] * x + p_owner->__board_rotation[1][2] * y + p_owner->__board_rotation[2][2] * z);
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8019946:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801994a:	ee07 3a90 	vmov	s15, r3
 801994e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 801995c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8019960:	ee07 3a90 	vmov	s15, r3
 8019964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801996c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8019976:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801997a:	ee07 3a90 	vmov	s15, r3
 801997e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019986:	ee77 7a27 	vadd.f32	s15, s14, s15
 801998a:	eeb0 0a67 	vmov.f32	s0, s15
 801998e:	f009 ff9f 	bl	80238d0 <lrintf>
 8019992:	4602      	mov	r2, r0
 8019994:	683b      	ldr	r3, [r7, #0]
 8019996:	3304      	adds	r3, #4
 8019998:	b212      	sxth	r2, r2
 801999a:	801a      	strh	r2, [r3, #0]
}
 801999c:	bf00      	nop
 801999e:	3710      	adds	r7, #16
 80199a0:	46bd      	mov	sp, r7
 80199a2:	bd80      	pop	{r7, pc}

080199a4 <_alignSensors>:

static void _alignSensors(PifImuSensor* p_owner, int16_t* src, int16_t* dest, uint8_t rotation)
{
 80199a4:	b580      	push	{r7, lr}
 80199a6:	b084      	sub	sp, #16
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	60f8      	str	r0, [r7, #12]
 80199ac:	60b9      	str	r1, [r7, #8]
 80199ae:	607a      	str	r2, [r7, #4]
 80199b0:	70fb      	strb	r3, [r7, #3]
    switch (rotation) {
 80199b2:	78fb      	ldrb	r3, [r7, #3]
 80199b4:	3b02      	subs	r3, #2
 80199b6:	2b06      	cmp	r3, #6
 80199b8:	f200 80c8 	bhi.w	8019b4c <_alignSensors+0x1a8>
 80199bc:	a201      	add	r2, pc, #4	; (adr r2, 80199c4 <_alignSensors+0x20>)
 80199be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199c2:	bf00      	nop
 80199c4:	080199e1 	.word	0x080199e1
 80199c8:	08019a0d 	.word	0x08019a0d
 80199cc:	08019a43 	.word	0x08019a43
 80199d0:	08019a71 	.word	0x08019a71
 80199d4:	08019aa7 	.word	0x08019aa7
 80199d8:	08019ad5 	.word	0x08019ad5
 80199dc:	08019b0d 	.word	0x08019b0d
        case IMUS_ALIGN_CW90_DEG:
            dest[AXIS_X] = src[AXIS_Y];
 80199e0:	68bb      	ldr	r3, [r7, #8]
 80199e2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 80199ea:	68bb      	ldr	r3, [r7, #8]
 80199ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80199f0:	b29b      	uxth	r3, r3
 80199f2:	425b      	negs	r3, r3
 80199f4:	b29a      	uxth	r2, r3
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	3302      	adds	r3, #2
 80199fa:	b212      	sxth	r2, r2
 80199fc:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	3304      	adds	r3, #4
 8019a02:	68ba      	ldr	r2, [r7, #8]
 8019a04:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019a08:	801a      	strh	r2, [r3, #0]
            break;
 8019a0a:	e0b1      	b.n	8019b70 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW180_DEG:
            dest[AXIS_X] = -src[AXIS_X];
 8019a0c:	68bb      	ldr	r3, [r7, #8]
 8019a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a12:	b29b      	uxth	r3, r3
 8019a14:	425b      	negs	r3, r3
 8019a16:	b29b      	uxth	r3, r3
 8019a18:	b21a      	sxth	r2, r3
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 8019a1e:	68bb      	ldr	r3, [r7, #8]
 8019a20:	3302      	adds	r3, #2
 8019a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a26:	b29b      	uxth	r3, r3
 8019a28:	425b      	negs	r3, r3
 8019a2a:	b29a      	uxth	r2, r3
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	3302      	adds	r3, #2
 8019a30:	b212      	sxth	r2, r2
 8019a32:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	3304      	adds	r3, #4
 8019a38:	68ba      	ldr	r2, [r7, #8]
 8019a3a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019a3e:	801a      	strh	r2, [r3, #0]
            break;
 8019a40:	e096      	b.n	8019b70 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW270_DEG:
            dest[AXIS_X] = -src[AXIS_Y];
 8019a42:	68bb      	ldr	r3, [r7, #8]
 8019a44:	3302      	adds	r3, #2
 8019a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a4a:	b29b      	uxth	r3, r3
 8019a4c:	425b      	negs	r3, r3
 8019a4e:	b29b      	uxth	r3, r3
 8019a50:	b21a      	sxth	r2, r3
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	3302      	adds	r3, #2
 8019a5a:	68ba      	ldr	r2, [r7, #8]
 8019a5c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019a60:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	3304      	adds	r3, #4
 8019a66:	68ba      	ldr	r2, [r7, #8]
 8019a68:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019a6c:	801a      	strh	r2, [r3, #0]
            break;
 8019a6e:	e07f      	b.n	8019b70 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW0_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_X];
 8019a70:	68bb      	ldr	r3, [r7, #8]
 8019a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a76:	b29b      	uxth	r3, r3
 8019a78:	425b      	negs	r3, r3
 8019a7a:	b29b      	uxth	r3, r3
 8019a7c:	b21a      	sxth	r2, r3
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	3302      	adds	r3, #2
 8019a86:	68ba      	ldr	r2, [r7, #8]
 8019a88:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019a8c:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019a8e:	68bb      	ldr	r3, [r7, #8]
 8019a90:	3304      	adds	r3, #4
 8019a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a96:	b29b      	uxth	r3, r3
 8019a98:	425b      	negs	r3, r3
 8019a9a:	b29a      	uxth	r2, r3
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	3304      	adds	r3, #4
 8019aa0:	b212      	sxth	r2, r2
 8019aa2:	801a      	strh	r2, [r3, #0]
            break;
 8019aa4:	e064      	b.n	8019b70 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW90_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_Y];
 8019aa6:	68bb      	ldr	r3, [r7, #8]
 8019aa8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	3302      	adds	r3, #2
 8019ab4:	68ba      	ldr	r2, [r7, #8]
 8019ab6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019aba:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019abc:	68bb      	ldr	r3, [r7, #8]
 8019abe:	3304      	adds	r3, #4
 8019ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ac4:	b29b      	uxth	r3, r3
 8019ac6:	425b      	negs	r3, r3
 8019ac8:	b29a      	uxth	r2, r3
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	3304      	adds	r3, #4
 8019ace:	b212      	sxth	r2, r2
 8019ad0:	801a      	strh	r2, [r3, #0]
            break;
 8019ad2:	e04d      	b.n	8019b70 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW180_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_X];
 8019ad4:	68bb      	ldr	r3, [r7, #8]
 8019ad6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 8019ade:	68bb      	ldr	r3, [r7, #8]
 8019ae0:	3302      	adds	r3, #2
 8019ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ae6:	b29b      	uxth	r3, r3
 8019ae8:	425b      	negs	r3, r3
 8019aea:	b29a      	uxth	r2, r3
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	3302      	adds	r3, #2
 8019af0:	b212      	sxth	r2, r2
 8019af2:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019af4:	68bb      	ldr	r3, [r7, #8]
 8019af6:	3304      	adds	r3, #4
 8019af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019afc:	b29b      	uxth	r3, r3
 8019afe:	425b      	negs	r3, r3
 8019b00:	b29a      	uxth	r2, r3
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	3304      	adds	r3, #4
 8019b06:	b212      	sxth	r2, r2
 8019b08:	801a      	strh	r2, [r3, #0]
            break;
 8019b0a:	e031      	b.n	8019b70 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW270_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_Y];
 8019b0c:	68bb      	ldr	r3, [r7, #8]
 8019b0e:	3302      	adds	r3, #2
 8019b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b14:	b29b      	uxth	r3, r3
 8019b16:	425b      	negs	r3, r3
 8019b18:	b29b      	uxth	r3, r3
 8019b1a:	b21a      	sxth	r2, r3
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 8019b20:	68bb      	ldr	r3, [r7, #8]
 8019b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b26:	b29b      	uxth	r3, r3
 8019b28:	425b      	negs	r3, r3
 8019b2a:	b29a      	uxth	r2, r3
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	3302      	adds	r3, #2
 8019b30:	b212      	sxth	r2, r2
 8019b32:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019b34:	68bb      	ldr	r3, [r7, #8]
 8019b36:	3304      	adds	r3, #4
 8019b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b3c:	b29b      	uxth	r3, r3
 8019b3e:	425b      	negs	r3, r3
 8019b40:	b29a      	uxth	r2, r3
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	3304      	adds	r3, #4
 8019b46:	b212      	sxth	r2, r2
 8019b48:	801a      	strh	r2, [r3, #0]
            break;
 8019b4a:	e011      	b.n	8019b70 <_alignSensors+0x1cc>
        default:	// IMUS_ALIGN_CW0_DEG:
            dest[AXIS_X] = src[AXIS_X];
 8019b4c:	68bb      	ldr	r3, [r7, #8]
 8019b4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	3302      	adds	r3, #2
 8019b5a:	68ba      	ldr	r2, [r7, #8]
 8019b5c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019b60:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	3304      	adds	r3, #4
 8019b66:	68ba      	ldr	r2, [r7, #8]
 8019b68:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019b6c:	801a      	strh	r2, [r3, #0]
            break;
 8019b6e:	bf00      	nop
    }

    if (p_owner->__board_alignment)
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d003      	beq.n	8019b82 <_alignSensors+0x1de>
        _alignBoard(p_owner, dest);
 8019b7a:	6879      	ldr	r1, [r7, #4]
 8019b7c:	68f8      	ldr	r0, [r7, #12]
 8019b7e:	f7ff fe76 	bl	801986e <_alignBoard>
}
 8019b82:	bf00      	nop
 8019b84:	3710      	adds	r7, #16
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bd80      	pop	{r7, pc}
 8019b8a:	bf00      	nop

08019b8c <pifImuSensor_Init>:

void pifImuSensor_Init(PifImuSensor* p_owner)
{
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	b082      	sub	sp, #8
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	6078      	str	r0, [r7, #4]
	memset(p_owner, 0, sizeof(PifImuSensor));
 8019b94:	2278      	movs	r2, #120	; 0x78
 8019b96:	2100      	movs	r1, #0
 8019b98:	6878      	ldr	r0, [r7, #4]
 8019b9a:	f009 fb77 	bl	802328c <memset>
}
 8019b9e:	bf00      	nop
 8019ba0:	3708      	adds	r7, #8
 8019ba2:	46bd      	mov	sp, r7
 8019ba4:	bd80      	pop	{r7, pc}
	...

08019ba8 <pifImuSensor_InitBoardAlignment>:

void pifImuSensor_InitBoardAlignment(PifImuSensor* p_owner, int16_t board_align_roll, int16_t board_align_pitch, int16_t board_align_yaw)
{
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	b092      	sub	sp, #72	; 0x48
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	60f8      	str	r0, [r7, #12]
 8019bb0:	4608      	mov	r0, r1
 8019bb2:	4611      	mov	r1, r2
 8019bb4:	461a      	mov	r2, r3
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	817b      	strh	r3, [r7, #10]
 8019bba:	460b      	mov	r3, r1
 8019bbc:	813b      	strh	r3, [r7, #8]
 8019bbe:	4613      	mov	r3, r2
 8019bc0:	80fb      	strh	r3, [r7, #6]
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 8019bc2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d108      	bne.n	8019bdc <pifImuSensor_InitBoardAlignment+0x34>
 8019bca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d104      	bne.n	8019bdc <pifImuSensor_InitBoardAlignment+0x34>
 8019bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	f000 80fb 	beq.w	8019dd2 <pifImuSensor_InitBoardAlignment+0x22a>

    p_owner->__board_alignment = TRUE;
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	2201      	movs	r2, #1
 8019be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    // deg2rad
    roll = board_align_roll * M_PI / 180.0f;
 8019be4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019be8:	4618      	mov	r0, r3
 8019bea:	f7e6 fc59 	bl	80004a0 <__aeabi_i2d>
 8019bee:	a37c      	add	r3, pc, #496	; (adr r3, 8019de0 <pifImuSensor_InitBoardAlignment+0x238>)
 8019bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bf4:	f7e6 fcbe 	bl	8000574 <__aeabi_dmul>
 8019bf8:	4602      	mov	r2, r0
 8019bfa:	460b      	mov	r3, r1
 8019bfc:	4610      	mov	r0, r2
 8019bfe:	4619      	mov	r1, r3
 8019c00:	f04f 0200 	mov.w	r2, #0
 8019c04:	4b78      	ldr	r3, [pc, #480]	; (8019de8 <pifImuSensor_InitBoardAlignment+0x240>)
 8019c06:	f7e6 fddf 	bl	80007c8 <__aeabi_ddiv>
 8019c0a:	4602      	mov	r2, r0
 8019c0c:	460b      	mov	r3, r1
 8019c0e:	4610      	mov	r0, r2
 8019c10:	4619      	mov	r1, r3
 8019c12:	f7e6 ff91 	bl	8000b38 <__aeabi_d2f>
 8019c16:	4603      	mov	r3, r0
 8019c18:	647b      	str	r3, [r7, #68]	; 0x44
    pitch = board_align_pitch * M_PI / 180.0f;
 8019c1a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019c1e:	4618      	mov	r0, r3
 8019c20:	f7e6 fc3e 	bl	80004a0 <__aeabi_i2d>
 8019c24:	a36e      	add	r3, pc, #440	; (adr r3, 8019de0 <pifImuSensor_InitBoardAlignment+0x238>)
 8019c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c2a:	f7e6 fca3 	bl	8000574 <__aeabi_dmul>
 8019c2e:	4602      	mov	r2, r0
 8019c30:	460b      	mov	r3, r1
 8019c32:	4610      	mov	r0, r2
 8019c34:	4619      	mov	r1, r3
 8019c36:	f04f 0200 	mov.w	r2, #0
 8019c3a:	4b6b      	ldr	r3, [pc, #428]	; (8019de8 <pifImuSensor_InitBoardAlignment+0x240>)
 8019c3c:	f7e6 fdc4 	bl	80007c8 <__aeabi_ddiv>
 8019c40:	4602      	mov	r2, r0
 8019c42:	460b      	mov	r3, r1
 8019c44:	4610      	mov	r0, r2
 8019c46:	4619      	mov	r1, r3
 8019c48:	f7e6 ff76 	bl	8000b38 <__aeabi_d2f>
 8019c4c:	4603      	mov	r3, r0
 8019c4e:	643b      	str	r3, [r7, #64]	; 0x40
    yaw = board_align_yaw * M_PI / 180.0f;
 8019c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019c54:	4618      	mov	r0, r3
 8019c56:	f7e6 fc23 	bl	80004a0 <__aeabi_i2d>
 8019c5a:	a361      	add	r3, pc, #388	; (adr r3, 8019de0 <pifImuSensor_InitBoardAlignment+0x238>)
 8019c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c60:	f7e6 fc88 	bl	8000574 <__aeabi_dmul>
 8019c64:	4602      	mov	r2, r0
 8019c66:	460b      	mov	r3, r1
 8019c68:	4610      	mov	r0, r2
 8019c6a:	4619      	mov	r1, r3
 8019c6c:	f04f 0200 	mov.w	r2, #0
 8019c70:	4b5d      	ldr	r3, [pc, #372]	; (8019de8 <pifImuSensor_InitBoardAlignment+0x240>)
 8019c72:	f7e6 fda9 	bl	80007c8 <__aeabi_ddiv>
 8019c76:	4602      	mov	r2, r0
 8019c78:	460b      	mov	r3, r1
 8019c7a:	4610      	mov	r0, r2
 8019c7c:	4619      	mov	r1, r3
 8019c7e:	f7e6 ff5b 	bl	8000b38 <__aeabi_d2f>
 8019c82:	4603      	mov	r3, r0
 8019c84:	63fb      	str	r3, [r7, #60]	; 0x3c

    cosx = cosf(roll);
 8019c86:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8019c8a:	f009 fddd 	bl	8023848 <cosf>
 8019c8e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    sinx = sinf(roll);
 8019c92:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8019c96:	f009 fe5b 	bl	8023950 <sinf>
 8019c9a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    cosy = cosf(pitch);
 8019c9e:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8019ca2:	f009 fdd1 	bl	8023848 <cosf>
 8019ca6:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    siny = sinf(pitch);
 8019caa:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8019cae:	f009 fe4f 	bl	8023950 <sinf>
 8019cb2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    cosz = cosf(yaw);
 8019cb6:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8019cba:	f009 fdc5 	bl	8023848 <cosf>
 8019cbe:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinz = sinf(yaw);
 8019cc2:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8019cc6:	f009 fe43 	bl	8023950 <sinf>
 8019cca:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    coszcosx = cosz * cosx;
 8019cce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019cd2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019cda:	edc7 7a08 	vstr	s15, [r7, #32]
    coszcosy = cosz * cosy;
 8019cde:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019ce2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019cea:	edc7 7a07 	vstr	s15, [r7, #28]
    sinzcosx = sinz * cosx;
 8019cee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019cf2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019cfa:	edc7 7a06 	vstr	s15, [r7, #24]
    coszsinx = sinx * cosz;
 8019cfe:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019d02:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8019d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d0a:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzsinx = sinx * sinz;
 8019d0e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019d12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d1a:	edc7 7a04 	vstr	s15, [r7, #16]

    // define rotation matrix
    p_owner->__board_rotation[0][0] = coszcosy;
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	69fa      	ldr	r2, [r7, #28]
 8019d22:	655a      	str	r2, [r3, #84]	; 0x54
    p_owner->__board_rotation[0][1] = -cosy * sinz;
 8019d24:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019d28:	eeb1 7a67 	vneg.f32	s14, s15
 8019d2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    p_owner->__board_rotation[0][2] = siny;
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019d3e:	65da      	str	r2, [r3, #92]	; 0x5c

    p_owner->__board_rotation[1][0] = sinzcosx + (coszsinx * siny);
 8019d40:	ed97 7a05 	vldr	s14, [r7, #20]
 8019d44:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019d4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8019d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d54:	68fb      	ldr	r3, [r7, #12]
 8019d56:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    p_owner->__board_rotation[1][1] = coszcosx - (sinzsinx * siny);
 8019d5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8019d5e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d66:	ed97 7a08 	vldr	s14, [r7, #32]
 8019d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    p_owner->__board_rotation[1][2] = -sinx * cosy;
 8019d74:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019d78:	eeb1 7a67 	vneg.f32	s14, s15
 8019d7c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

    p_owner->__board_rotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8019d8a:	ed97 7a08 	vldr	s14, [r7, #32]
 8019d8e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d96:	ed97 7a04 	vldr	s14, [r7, #16]
 8019d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    p_owner->__board_rotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8019da4:	ed97 7a06 	vldr	s14, [r7, #24]
 8019da8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019dac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019db0:	edd7 7a05 	vldr	s15, [r7, #20]
 8019db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019db8:	68fb      	ldr	r3, [r7, #12]
 8019dba:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    p_owner->__board_rotation[2][2] = cosy * cosx;
 8019dbe:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019dc2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 8019dd0:	e000      	b.n	8019dd4 <pifImuSensor_InitBoardAlignment+0x22c>
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 8019dd2:	bf00      	nop
}
 8019dd4:	3748      	adds	r7, #72	; 0x48
 8019dd6:	46bd      	mov	sp, r7
 8019dd8:	bd80      	pop	{r7, pc}
 8019dda:	bf00      	nop
 8019ddc:	f3af 8000 	nop.w
 8019de0:	54442d18 	.word	0x54442d18
 8019de4:	400921fb 	.word	0x400921fb
 8019de8:	40668000 	.word	0x40668000

08019dec <pifImuSensor_SetGyroAlign>:

void pifImuSensor_SetGyroAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8019dec:	b480      	push	{r7}
 8019dee:	b083      	sub	sp, #12
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	6078      	str	r0, [r7, #4]
 8019df4:	460b      	mov	r3, r1
 8019df6:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8019df8:	78fb      	ldrb	r3, [r7, #3]
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d002      	beq.n	8019e04 <pifImuSensor_SetGyroAlign+0x18>
        p_owner->__gyro_info.align = align;
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	78fa      	ldrb	r2, [r7, #3]
 8019e02:	751a      	strb	r2, [r3, #20]
}
 8019e04:	bf00      	nop
 8019e06:	370c      	adds	r7, #12
 8019e08:	46bd      	mov	sp, r7
 8019e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0e:	4770      	bx	lr

08019e10 <pifImuSensor_ReadGyro>:

BOOL pifImuSensor_ReadGyro(PifImuSensor* p_owner, int16_t* p_gyro)
{
 8019e10:	b580      	push	{r7, lr}
 8019e12:	b084      	sub	sp, #16
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	6078      	str	r0, [r7, #4]
 8019e18:	6039      	str	r1, [r7, #0]
	int16_t gyro[3];

	if (p_owner->_measure & IMU_MEASURE_GYROSCOPE) {
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	781b      	ldrb	r3, [r3, #0]
 8019e1e:	f003 0301 	and.w	r3, r3, #1
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d016      	beq.n	8019e54 <pifImuSensor_ReadGyro+0x44>
		if (!(*p_owner->__gyro_info.read)(p_owner->__gyro_info.p_issuer, gyro)) return FALSE;
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	699b      	ldr	r3, [r3, #24]
 8019e2a:	687a      	ldr	r2, [r7, #4]
 8019e2c:	69d2      	ldr	r2, [r2, #28]
 8019e2e:	f107 0108 	add.w	r1, r7, #8
 8019e32:	4610      	mov	r0, r2
 8019e34:	4798      	blx	r3
 8019e36:	4603      	mov	r3, r0
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d101      	bne.n	8019e40 <pifImuSensor_ReadGyro+0x30>
 8019e3c:	2300      	movs	r3, #0
 8019e3e:	e00a      	b.n	8019e56 <pifImuSensor_ReadGyro+0x46>

		_alignSensors(p_owner, gyro, p_gyro, p_owner->__gyro_info.align);
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	7d1b      	ldrb	r3, [r3, #20]
 8019e44:	f107 0108 	add.w	r1, r7, #8
 8019e48:	683a      	ldr	r2, [r7, #0]
 8019e4a:	6878      	ldr	r0, [r7, #4]
 8019e4c:	f7ff fdaa 	bl	80199a4 <_alignSensors>
		return TRUE;
 8019e50:	2301      	movs	r3, #1
 8019e52:	e000      	b.n	8019e56 <pifImuSensor_ReadGyro+0x46>
	}
	return FALSE;
 8019e54:	2300      	movs	r3, #0
}
 8019e56:	4618      	mov	r0, r3
 8019e58:	3710      	adds	r7, #16
 8019e5a:	46bd      	mov	sp, r7
 8019e5c:	bd80      	pop	{r7, pc}

08019e5e <pifImuSensor_SetAccelAlign>:
	}
	return TRUE;
}

void pifImuSensor_SetAccelAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8019e5e:	b480      	push	{r7}
 8019e60:	b083      	sub	sp, #12
 8019e62:	af00      	add	r7, sp, #0
 8019e64:	6078      	str	r0, [r7, #4]
 8019e66:	460b      	mov	r3, r1
 8019e68:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8019e6a:	78fb      	ldrb	r3, [r7, #3]
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d003      	beq.n	8019e78 <pifImuSensor_SetAccelAlign+0x1a>
        p_owner->__accel_info.align = align;
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	78fa      	ldrb	r2, [r7, #3]
 8019e74:	f883 2020 	strb.w	r2, [r3, #32]
}
 8019e78:	bf00      	nop
 8019e7a:	370c      	adds	r7, #12
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e82:	4770      	bx	lr

08019e84 <pifImuSensor_ReadAccel>:

BOOL pifImuSensor_ReadAccel(PifImuSensor* p_owner, int16_t* p_accel)
{
 8019e84:	b580      	push	{r7, lr}
 8019e86:	b084      	sub	sp, #16
 8019e88:	af00      	add	r7, sp, #0
 8019e8a:	6078      	str	r0, [r7, #4]
 8019e8c:	6039      	str	r1, [r7, #0]
	int16_t accel[3];

	if (p_owner->_measure & IMU_MEASURE_ACCELERO) {
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	781b      	ldrb	r3, [r3, #0]
 8019e92:	f003 0302 	and.w	r3, r3, #2
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d017      	beq.n	8019eca <pifImuSensor_ReadAccel+0x46>
		if (!(*p_owner->__accel_info.read)(p_owner->__accel_info.p_issuer, accel)) return FALSE;
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e9e:	687a      	ldr	r2, [r7, #4]
 8019ea0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8019ea2:	f107 0108 	add.w	r1, r7, #8
 8019ea6:	4610      	mov	r0, r2
 8019ea8:	4798      	blx	r3
 8019eaa:	4603      	mov	r3, r0
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d101      	bne.n	8019eb4 <pifImuSensor_ReadAccel+0x30>
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	e00b      	b.n	8019ecc <pifImuSensor_ReadAccel+0x48>

		_alignSensors(p_owner, accel, p_accel, p_owner->__accel_info.align);
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019eba:	f107 0108 	add.w	r1, r7, #8
 8019ebe:	683a      	ldr	r2, [r7, #0]
 8019ec0:	6878      	ldr	r0, [r7, #4]
 8019ec2:	f7ff fd6f 	bl	80199a4 <_alignSensors>
		return TRUE;
 8019ec6:	2301      	movs	r3, #1
 8019ec8:	e000      	b.n	8019ecc <pifImuSensor_ReadAccel+0x48>
	}
	return FALSE;
 8019eca:	2300      	movs	r3, #0
}
 8019ecc:	4618      	mov	r0, r3
 8019ece:	3710      	adds	r7, #16
 8019ed0:	46bd      	mov	sp, r7
 8019ed2:	bd80      	pop	{r7, pc}

08019ed4 <pifImuSensor_SetMagAlign>:
	p_accel[AXIS_Z] = 9.80665f * accel[AXIS_Z] / p_owner->_accel_gain;
	return TRUE;
}

void pifImuSensor_SetMagAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8019ed4:	b480      	push	{r7}
 8019ed6:	b083      	sub	sp, #12
 8019ed8:	af00      	add	r7, sp, #0
 8019eda:	6078      	str	r0, [r7, #4]
 8019edc:	460b      	mov	r3, r1
 8019ede:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8019ee0:	78fb      	ldrb	r3, [r7, #3]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d003      	beq.n	8019eee <pifImuSensor_SetMagAlign+0x1a>
        p_owner->__mag_info.align = align;
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	78fa      	ldrb	r2, [r7, #3]
 8019eea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8019eee:	bf00      	nop
 8019ef0:	370c      	adds	r7, #12
 8019ef2:	46bd      	mov	sp, r7
 8019ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef8:	4770      	bx	lr

08019efa <pifImuSensor_ReadMag>:

BOOL pifImuSensor_ReadMag(PifImuSensor* p_owner, int16_t* p_mag)
{
 8019efa:	b580      	push	{r7, lr}
 8019efc:	b084      	sub	sp, #16
 8019efe:	af00      	add	r7, sp, #0
 8019f00:	6078      	str	r0, [r7, #4]
 8019f02:	6039      	str	r1, [r7, #0]
	int16_t mag[3];

	if (p_owner->_measure & IMU_MEASURE_MAGNETO) {
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	781b      	ldrb	r3, [r3, #0]
 8019f08:	f003 0304 	and.w	r3, r3, #4
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d017      	beq.n	8019f40 <pifImuSensor_ReadMag+0x46>
		if (!(*p_owner->__mag_info.read)(p_owner->__mag_info.p_issuer, mag)) return FALSE;
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f14:	687a      	ldr	r2, [r7, #4]
 8019f16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8019f18:	f107 0108 	add.w	r1, r7, #8
 8019f1c:	4610      	mov	r0, r2
 8019f1e:	4798      	blx	r3
 8019f20:	4603      	mov	r3, r0
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d101      	bne.n	8019f2a <pifImuSensor_ReadMag+0x30>
 8019f26:	2300      	movs	r3, #0
 8019f28:	e00b      	b.n	8019f42 <pifImuSensor_ReadMag+0x48>

		_alignSensors(p_owner, mag, p_mag, p_owner->__mag_info.align);
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019f30:	f107 0108 	add.w	r1, r7, #8
 8019f34:	683a      	ldr	r2, [r7, #0]
 8019f36:	6878      	ldr	r0, [r7, #4]
 8019f38:	f7ff fd34 	bl	80199a4 <_alignSensors>
		return TRUE;
 8019f3c:	2301      	movs	r3, #1
 8019f3e:	e000      	b.n	8019f42 <pifImuSensor_ReadMag+0x48>
	}
	return FALSE;
 8019f40:	2300      	movs	r3, #0
}
 8019f42:	4618      	mov	r0, r3
 8019f44:	3710      	adds	r7, #16
 8019f46:	46bd      	mov	sp, r7
 8019f48:	bd80      	pop	{r7, pc}
 8019f4a:	0000      	movs	r0, r0
 8019f4c:	0000      	movs	r0, r0
	...

08019f50 <_changeFsSel>:

#include <math.h>


static BOOL _changeFsSel(PifImuSensor* p_imu_sensor, PifMpu60x0FsSel fs_sel)
{
 8019f50:	b580      	push	{r7, lr}
 8019f52:	b082      	sub	sp, #8
 8019f54:	af00      	add	r7, sp, #0
 8019f56:	6078      	str	r0, [r7, #4]
 8019f58:	460b      	mov	r3, r1
 8019f5a:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d101      	bne.n	8019f66 <_changeFsSel+0x16>
 8019f62:	2300      	movs	r3, #0
 8019f64:	e013      	b.n	8019f8e <_changeFsSel+0x3e>
	p_imu_sensor->_gyro_gain = 131.0 / (1 << fs_sel);
 8019f66:	78fb      	ldrb	r3, [r7, #3]
 8019f68:	2201      	movs	r2, #1
 8019f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8019f6e:	4618      	mov	r0, r3
 8019f70:	f7e6 fa96 	bl	80004a0 <__aeabi_i2d>
 8019f74:	4602      	mov	r2, r0
 8019f76:	460b      	mov	r3, r1
 8019f78:	a107      	add	r1, pc, #28	; (adr r1, 8019f98 <_changeFsSel+0x48>)
 8019f7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f7e:	f7e6 fc23 	bl	80007c8 <__aeabi_ddiv>
 8019f82:	4602      	mov	r2, r0
 8019f84:	460b      	mov	r3, r1
 8019f86:	6879      	ldr	r1, [r7, #4]
 8019f88:	e9c1 2302 	strd	r2, r3, [r1, #8]
	return TRUE;
 8019f8c:	2301      	movs	r3, #1
}
 8019f8e:	4618      	mov	r0, r3
 8019f90:	3708      	adds	r7, #8
 8019f92:	46bd      	mov	sp, r7
 8019f94:	bd80      	pop	{r7, pc}
 8019f96:	bf00      	nop
 8019f98:	00000000 	.word	0x00000000
 8019f9c:	40606000 	.word	0x40606000

08019fa0 <_changeAfsSel>:

static BOOL _changeAfsSel(PifImuSensor* p_imu_sensor, PifMpu60x0AfsSel afs_sel)
{
 8019fa0:	b480      	push	{r7}
 8019fa2:	b083      	sub	sp, #12
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	6078      	str	r0, [r7, #4]
 8019fa8:	460b      	mov	r3, r1
 8019faa:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d101      	bne.n	8019fb6 <_changeAfsSel+0x16>
 8019fb2:	2300      	movs	r3, #0
 8019fb4:	e008      	b.n	8019fc8 <_changeAfsSel+0x28>
	p_imu_sensor->_accel_gain = 16384 >> afs_sel;
 8019fb6:	78fb      	ldrb	r3, [r7, #3]
 8019fb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8019fbc:	fa42 f303 	asr.w	r3, r2, r3
 8019fc0:	b29a      	uxth	r2, r3
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	821a      	strh	r2, [r3, #16]
	return TRUE;
 8019fc6:	2301      	movs	r3, #1
}
 8019fc8:	4618      	mov	r0, r3
 8019fca:	370c      	adds	r7, #12
 8019fcc:	46bd      	mov	sp, r7
 8019fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fd2:	4770      	bx	lr

08019fd4 <pifMpu60x0_Init>:

BOOL pifMpu60x0_Init(PifMpu60x0* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr, PifImuSensor* p_imu_sensor)
{
 8019fd4:	b590      	push	{r4, r7, lr}
 8019fd6:	b08b      	sub	sp, #44	; 0x2c
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	60f8      	str	r0, [r7, #12]
 8019fdc:	607a      	str	r2, [r7, #4]
 8019fde:	461a      	mov	r2, r3
 8019fe0:	460b      	mov	r3, r1
 8019fe2:	817b      	strh	r3, [r7, #10]
 8019fe4:	4613      	mov	r3, r2
 8019fe6:	727b      	strb	r3, [r7, #9]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "MPU60X0 Ident: ";
 8019fe8:	4b75      	ldr	r3, [pc, #468]	; (801a1c0 <pifMpu60x0_Init+0x1ec>)
 8019fea:	f107 0418 	add.w	r4, r7, #24
 8019fee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data;
	PifMpu60x0PwrMgmt1 pwr_mgmt_1;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d005      	beq.n	801a006 <pifMpu60x0_Init+0x32>
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d002      	beq.n	801a006 <pifMpu60x0_Init+0x32>
 801a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a002:	2b00      	cmp	r3, #0
 801a004:	d104      	bne.n	801a010 <pifMpu60x0_Init+0x3c>
		pif_error = E_INVALID_PARAM;
 801a006:	4b6f      	ldr	r3, [pc, #444]	; (801a1c4 <pifMpu60x0_Init+0x1f0>)
 801a008:	2201      	movs	r2, #1
 801a00a:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801a00c:	2300      	movs	r3, #0
 801a00e:	e0d3      	b.n	801a1b8 <pifMpu60x0_Init+0x1e4>
	}

	memset(p_owner, 0, sizeof(PifMpu60x0));
 801a010:	2210      	movs	r2, #16
 801a012:	2100      	movs	r1, #0
 801a014:	68f8      	ldr	r0, [r7, #12]
 801a016:	f009 f939 	bl	802328c <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 801a01a:	6878      	ldr	r0, [r7, #4]
 801a01c:	f7f8 fc7a 	bl	8012914 <pifI2cPort_AddDevice>
 801a020:	4602      	mov	r2, r0
 801a022:	68fb      	ldr	r3, [r7, #12]
 801a024:	609a      	str	r2, [r3, #8]
    if (!p_owner->_p_i2c) return FALSE;
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	689b      	ldr	r3, [r3, #8]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d101      	bne.n	801a032 <pifMpu60x0_Init+0x5e>
 801a02e:	2300      	movs	r3, #0
 801a030:	e0c2      	b.n	801a1b8 <pifMpu60x0_Init+0x1e4>

    p_owner->_p_i2c->addr = addr;
 801a032:	68fb      	ldr	r3, [r7, #12]
 801a034:	689b      	ldr	r3, [r3, #8]
 801a036:	7a7a      	ldrb	r2, [r7, #9]
 801a038:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	689b      	ldr	r3, [r3, #8]
 801a03e:	f107 0217 	add.w	r2, r7, #23
 801a042:	2175      	movs	r1, #117	; 0x75
 801a044:	4618      	mov	r0, r3
 801a046:	f7f8 fd49 	bl	8012adc <pifI2cDevice_ReadRegByte>
 801a04a:	4603      	mov	r3, r0
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	f000 80a4 	beq.w	801a19a <pifMpu60x0_Init+0x1c6>
	if (data != addr) {
 801a052:	7dfb      	ldrb	r3, [r7, #23]
 801a054:	7a7a      	ldrb	r2, [r7, #9]
 801a056:	429a      	cmp	r2, r3
 801a058:	d003      	beq.n	801a062 <pifMpu60x0_Init+0x8e>
		pif_error = E_INVALID_ID;
 801a05a:	4b5a      	ldr	r3, [pc, #360]	; (801a1c4 <pifMpu60x0_Init+0x1f0>)
 801a05c:	2211      	movs	r2, #17
 801a05e:	701a      	strb	r2, [r3, #0]
		goto fail;
 801a060:	e0a6      	b.n	801a1b0 <pifMpu60x0_Init+0x1dc>
	}
#ifndef __PIF_NO_LOG__	
	if (data < 32) {
 801a062:	7dfb      	ldrb	r3, [r7, #23]
 801a064:	2b1f      	cmp	r3, #31
 801a066:	d809      	bhi.n	801a07c <pifMpu60x0_Init+0xa8>
		pifLog_Printf(LT_INFO, "%s%Xh", ident, data >> 1);
 801a068:	7dfb      	ldrb	r3, [r7, #23]
 801a06a:	085b      	lsrs	r3, r3, #1
 801a06c:	b2db      	uxtb	r3, r3
 801a06e:	f107 0218 	add.w	r2, r7, #24
 801a072:	4955      	ldr	r1, [pc, #340]	; (801a1c8 <pifMpu60x0_Init+0x1f4>)
 801a074:	2002      	movs	r0, #2
 801a076:	f7f9 fbe3 	bl	8013840 <pifLog_Printf>
 801a07a:	e008      	b.n	801a08e <pifMpu60x0_Init+0xba>
	}
	else {
		pifLog_Printf(LT_INFO, "%s%c", ident, data >> 1);
 801a07c:	7dfb      	ldrb	r3, [r7, #23]
 801a07e:	085b      	lsrs	r3, r3, #1
 801a080:	b2db      	uxtb	r3, r3
 801a082:	f107 0218 	add.w	r2, r7, #24
 801a086:	4951      	ldr	r1, [pc, #324]	; (801a1cc <pifMpu60x0_Init+0x1f8>)
 801a088:	2002      	movs	r0, #2
 801a08a:	f7f9 fbd9 	bl	8013840 <pifLog_Printf>
	}
#endif

   	pwr_mgmt_1.byte = 0;
 801a08e:	2300      	movs	r3, #0
 801a090:	753b      	strb	r3, [r7, #20]
	pwr_mgmt_1.bit.device_reset = TRUE;
 801a092:	7d3b      	ldrb	r3, [r7, #20]
 801a094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a098:	753b      	strb	r3, [r7, #20]
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	689b      	ldr	r3, [r3, #8]
 801a09e:	7d3a      	ldrb	r2, [r7, #20]
 801a0a0:	216b      	movs	r1, #107	; 0x6b
 801a0a2:	4618      	mov	r0, r3
 801a0a4:	f7f8 fe48 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 801a0a8:	4603      	mov	r3, r0
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d077      	beq.n	801a19e <pifMpu60x0_Init+0x1ca>
	pifTaskManager_YieldMs(100);
 801a0ae:	2064      	movs	r0, #100	; 0x64
 801a0b0:	f7fa fdfa 	bl	8014ca8 <pifTaskManager_YieldMs>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	6898      	ldr	r0, [r3, #8]
 801a0b8:	f107 0317 	add.w	r3, r7, #23
 801a0bc:	f240 3202 	movw	r2, #770	; 0x302
 801a0c0:	211b      	movs	r1, #27
 801a0c2:	f7f8 fd58 	bl	8012b76 <pifI2cDevice_ReadRegBit8>
 801a0c6:	4603      	mov	r3, r0
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d06a      	beq.n	801a1a2 <pifMpu60x0_Init+0x1ce>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 801a0cc:	7dfb      	ldrb	r3, [r7, #23]
 801a0ce:	4619      	mov	r1, r3
 801a0d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a0d2:	f7ff ff3d 	bl	8019f50 <_changeFsSel>
 801a0d6:	4603      	mov	r3, r0
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d064      	beq.n	801a1a6 <pifMpu60x0_Init+0x1d2>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	6898      	ldr	r0, [r3, #8]
 801a0e0:	f107 0317 	add.w	r3, r7, #23
 801a0e4:	f240 3202 	movw	r2, #770	; 0x302
 801a0e8:	211c      	movs	r1, #28
 801a0ea:	f7f8 fd44 	bl	8012b76 <pifI2cDevice_ReadRegBit8>
 801a0ee:	4603      	mov	r3, r0
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d05a      	beq.n	801a1aa <pifMpu60x0_Init+0x1d6>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 801a0f4:	7dfb      	ldrb	r3, [r7, #23]
 801a0f6:	4619      	mov	r1, r3
 801a0f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a0fa:	f7ff ff51 	bl	8019fa0 <_changeAfsSel>
 801a0fe:	4603      	mov	r3, r0
 801a100:	2b00      	cmp	r3, #0
 801a102:	d054      	beq.n	801a1ae <pifMpu60x0_Init+0x1da>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801a104:	897b      	ldrh	r3, [r7, #10]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d106      	bne.n	801a118 <pifMpu60x0_Init+0x144>
 801a10a:	4b31      	ldr	r3, [pc, #196]	; (801a1d0 <pifMpu60x0_Init+0x1fc>)
 801a10c:	881b      	ldrh	r3, [r3, #0]
 801a10e:	1c5a      	adds	r2, r3, #1
 801a110:	b291      	uxth	r1, r2
 801a112:	4a2f      	ldr	r2, [pc, #188]	; (801a1d0 <pifMpu60x0_Init+0x1fc>)
 801a114:	8011      	strh	r1, [r2, #0]
 801a116:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	897a      	ldrh	r2, [r7, #10]
 801a11c:	809a      	strh	r2, [r3, #4]
	p_owner->temp_scale = 1;
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	2201      	movs	r2, #1
 801a122:	709a      	strb	r2, [r3, #2]
	p_owner->__p_imu_sensor = p_imu_sensor;
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a128:	60da      	str	r2, [r3, #12]

	p_imu_sensor->_measure |= IMU_MEASURE_GYROSCOPE | IMU_MEASURE_ACCELERO;
 801a12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a12c:	781b      	ldrb	r3, [r3, #0]
 801a12e:	f043 0303 	orr.w	r3, r3, #3
 801a132:	b2da      	uxtb	r2, r3
 801a134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a136:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__gyro_info.align = IMUS_ALIGN_CW0_DEG;
 801a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a13a:	2201      	movs	r2, #1
 801a13c:	751a      	strb	r2, [r3, #20]
	p_imu_sensor->__gyro_info.read = (PifImuSensorRead)pifMpu60x0_ReadGyro;
 801a13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a140:	4a24      	ldr	r2, [pc, #144]	; (801a1d4 <pifMpu60x0_Init+0x200>)
 801a142:	619a      	str	r2, [r3, #24]
	p_imu_sensor->__gyro_info.p_issuer = p_owner;
 801a144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a146:	68fa      	ldr	r2, [r7, #12]
 801a148:	61da      	str	r2, [r3, #28]

	p_imu_sensor->__accel_info.align = IMUS_ALIGN_CW0_DEG;
 801a14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a14c:	2201      	movs	r2, #1
 801a14e:	f883 2020 	strb.w	r2, [r3, #32]
	p_imu_sensor->__accel_info.read = (PifImuSensorRead)pifMpu60x0_ReadAccel;
 801a152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a154:	4a20      	ldr	r2, [pc, #128]	; (801a1d8 <pifMpu60x0_Init+0x204>)
 801a156:	625a      	str	r2, [r3, #36]	; 0x24
	p_imu_sensor->__accel_info.p_issuer = p_owner;
 801a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a15a:	68fa      	ldr	r2, [r7, #12]
 801a15c:	629a      	str	r2, [r3, #40]	; 0x28

    // Reset calibrate values
    p_imu_sensor->__delta_gyro[AXIS_X] = 0;
 801a15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a160:	2200      	movs	r2, #0
 801a162:	871a      	strh	r2, [r3, #56]	; 0x38
    p_imu_sensor->__delta_gyro[AXIS_Y] = 0;
 801a164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a166:	2200      	movs	r2, #0
 801a168:	875a      	strh	r2, [r3, #58]	; 0x3a
    p_imu_sensor->__delta_gyro[AXIS_Z] = 0;
 801a16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a16c:	2200      	movs	r2, #0
 801a16e:	879a      	strh	r2, [r3, #60]	; 0x3c
    p_imu_sensor->__use_calibrate = FALSE;
 801a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a172:	2200      	movs	r2, #0
 801a174:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    // Reset threshold values
    p_imu_sensor->__threshold_gyro[AXIS_X] = 0;
 801a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a17a:	2200      	movs	r2, #0
 801a17c:	87da      	strh	r2, [r3, #62]	; 0x3e
    p_imu_sensor->__threshold_gyro[AXIS_Y] = 0;
 801a17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a180:	2200      	movs	r2, #0
 801a182:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    p_imu_sensor->__threshold_gyro[AXIS_Z] = 0;
 801a186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a188:	2200      	movs	r2, #0
 801a18a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    p_imu_sensor->__actual_threshold = 0;
 801a18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a190:	f04f 0200 	mov.w	r2, #0
 801a194:	64da      	str	r2, [r3, #76]	; 0x4c
    return TRUE;
 801a196:	2301      	movs	r3, #1
 801a198:	e00e      	b.n	801a1b8 <pifMpu60x0_Init+0x1e4>
	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 801a19a:	bf00      	nop
 801a19c:	e008      	b.n	801a1b0 <pifMpu60x0_Init+0x1dc>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 801a19e:	bf00      	nop
 801a1a0:	e006      	b.n	801a1b0 <pifMpu60x0_Init+0x1dc>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 801a1a2:	bf00      	nop
 801a1a4:	e004      	b.n	801a1b0 <pifMpu60x0_Init+0x1dc>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 801a1a6:	bf00      	nop
 801a1a8:	e002      	b.n	801a1b0 <pifMpu60x0_Init+0x1dc>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 801a1aa:	bf00      	nop
 801a1ac:	e000      	b.n	801a1b0 <pifMpu60x0_Init+0x1dc>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 801a1ae:	bf00      	nop

fail:
	pifMpu60x0_Clear(p_owner);
 801a1b0:	68f8      	ldr	r0, [r7, #12]
 801a1b2:	f000 f813 	bl	801a1dc <pifMpu60x0_Clear>
	return FALSE;
 801a1b6:	2300      	movs	r3, #0
}
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	372c      	adds	r7, #44	; 0x2c
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bd90      	pop	{r4, r7, pc}
 801a1c0:	08027e6c 	.word	0x08027e6c
 801a1c4:	20001ef0 	.word	0x20001ef0
 801a1c8:	08027e5c 	.word	0x08027e5c
 801a1cc:	08027e64 	.word	0x08027e64
 801a1d0:	2000005c 	.word	0x2000005c
 801a1d4:	0801a28d 	.word	0x0801a28d
 801a1d8:	0801a353 	.word	0x0801a353

0801a1dc <pifMpu60x0_Clear>:

void pifMpu60x0_Clear(PifMpu60x0* p_owner)
{
 801a1dc:	b580      	push	{r7, lr}
 801a1de:	b082      	sub	sp, #8
 801a1e0:	af00      	add	r7, sp, #0
 801a1e2:	6078      	str	r0, [r7, #4]
    if (p_owner->_p_i2c) {
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	689b      	ldr	r3, [r3, #8]
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d00b      	beq.n	801a204 <pifMpu60x0_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	689b      	ldr	r3, [r3, #8]
 801a1f0:	685a      	ldr	r2, [r3, #4]
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	689b      	ldr	r3, [r3, #8]
 801a1f6:	4619      	mov	r1, r3
 801a1f8:	4610      	mov	r0, r2
 801a1fa:	f7f8 fbaf 	bl	801295c <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	2200      	movs	r2, #0
 801a202:	609a      	str	r2, [r3, #8]
    }
}
 801a204:	bf00      	nop
 801a206:	3708      	adds	r7, #8
 801a208:	46bd      	mov	sp, r7
 801a20a:	bd80      	pop	{r7, pc}

0801a20c <pifMpu60x0_SetGyroConfig>:

BOOL pifMpu60x0_SetGyroConfig(PifMpu60x0* p_owner, PifMpu60x0GyroConfig gyro_config)
{
 801a20c:	b580      	push	{r7, lr}
 801a20e:	b082      	sub	sp, #8
 801a210:	af00      	add	r7, sp, #0
 801a212:	6078      	str	r0, [r7, #4]
 801a214:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, gyro_config.byte)) return FALSE;
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	689b      	ldr	r3, [r3, #8]
 801a21a:	783a      	ldrb	r2, [r7, #0]
 801a21c:	211b      	movs	r1, #27
 801a21e:	4618      	mov	r0, r3
 801a220:	f7f8 fd8a 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 801a224:	4603      	mov	r3, r0
 801a226:	2b00      	cmp	r3, #0
 801a228:	d101      	bne.n	801a22e <pifMpu60x0_SetGyroConfig+0x22>
 801a22a:	2300      	movs	r3, #0
 801a22c:	e00a      	b.n	801a244 <pifMpu60x0_SetGyroConfig+0x38>
    _changeFsSel(p_owner->__p_imu_sensor, gyro_config.bit.fs_sel);
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	68da      	ldr	r2, [r3, #12]
 801a232:	783b      	ldrb	r3, [r7, #0]
 801a234:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801a238:	b2db      	uxtb	r3, r3
 801a23a:	4619      	mov	r1, r3
 801a23c:	4610      	mov	r0, r2
 801a23e:	f7ff fe87 	bl	8019f50 <_changeFsSel>
	return TRUE;
 801a242:	2301      	movs	r3, #1
}
 801a244:	4618      	mov	r0, r3
 801a246:	3708      	adds	r7, #8
 801a248:	46bd      	mov	sp, r7
 801a24a:	bd80      	pop	{r7, pc}

0801a24c <pifMpu60x0_SetAccelConfig>:
    _changeFsSel(p_owner->__p_imu_sensor, fs_sel);
	return TRUE;
}

BOOL pifMpu60x0_SetAccelConfig(PifMpu60x0* p_owner, PifMpu60x0AccelConfig accel_config)
{
 801a24c:	b580      	push	{r7, lr}
 801a24e:	b082      	sub	sp, #8
 801a250:	af00      	add	r7, sp, #0
 801a252:	6078      	str	r0, [r7, #4]
 801a254:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, accel_config.byte)) return FALSE;
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	689b      	ldr	r3, [r3, #8]
 801a25a:	783a      	ldrb	r2, [r7, #0]
 801a25c:	211c      	movs	r1, #28
 801a25e:	4618      	mov	r0, r3
 801a260:	f7f8 fd6a 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 801a264:	4603      	mov	r3, r0
 801a266:	2b00      	cmp	r3, #0
 801a268:	d101      	bne.n	801a26e <pifMpu60x0_SetAccelConfig+0x22>
 801a26a:	2300      	movs	r3, #0
 801a26c:	e00a      	b.n	801a284 <pifMpu60x0_SetAccelConfig+0x38>
    _changeAfsSel(p_owner->__p_imu_sensor, accel_config.bit.afs_sel);
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	68da      	ldr	r2, [r3, #12]
 801a272:	783b      	ldrb	r3, [r7, #0]
 801a274:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801a278:	b2db      	uxtb	r3, r3
 801a27a:	4619      	mov	r1, r3
 801a27c:	4610      	mov	r0, r2
 801a27e:	f7ff fe8f 	bl	8019fa0 <_changeAfsSel>
	return TRUE;
 801a282:	2301      	movs	r3, #1
}
 801a284:	4618      	mov	r0, r3
 801a286:	3708      	adds	r7, #8
 801a288:	46bd      	mov	sp, r7
 801a28a:	bd80      	pop	{r7, pc}

0801a28c <pifMpu60x0_ReadGyro>:
    _changeAfsSel(p_owner->__p_imu_sensor, afs_sel);
	return TRUE;
}

BOOL pifMpu60x0_ReadGyro(PifMpu60x0* p_owner, int16_t* p_gyro)
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b084      	sub	sp, #16
 801a290:	af00      	add	r7, sp, #0
 801a292:	6078      	str	r0, [r7, #4]
 801a294:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_GYRO_XOUT_H, data, 6)) return FALSE;
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	6898      	ldr	r0, [r3, #8]
 801a29a:	f107 0208 	add.w	r2, r7, #8
 801a29e:	2306      	movs	r3, #6
 801a2a0:	2143      	movs	r1, #67	; 0x43
 801a2a2:	f7f8 fc53 	bl	8012b4c <pifI2cDevice_ReadRegBytes>
 801a2a6:	4603      	mov	r3, r0
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d101      	bne.n	801a2b0 <pifMpu60x0_ReadGyro+0x24>
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	e04c      	b.n	801a34a <pifMpu60x0_ReadGyro+0xbe>

	p_gyro[AXIS_X] = (data[0] << 8) + data[1];
 801a2b0:	7a3b      	ldrb	r3, [r7, #8]
 801a2b2:	b29b      	uxth	r3, r3
 801a2b4:	021b      	lsls	r3, r3, #8
 801a2b6:	b29a      	uxth	r2, r3
 801a2b8:	7a7b      	ldrb	r3, [r7, #9]
 801a2ba:	b29b      	uxth	r3, r3
 801a2bc:	4413      	add	r3, r2
 801a2be:	b29b      	uxth	r3, r3
 801a2c0:	b21a      	sxth	r2, r3
 801a2c2:	683b      	ldr	r3, [r7, #0]
 801a2c4:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Y] = (data[2] << 8) + data[3];
 801a2c6:	7abb      	ldrb	r3, [r7, #10]
 801a2c8:	b29b      	uxth	r3, r3
 801a2ca:	021b      	lsls	r3, r3, #8
 801a2cc:	b29a      	uxth	r2, r3
 801a2ce:	7afb      	ldrb	r3, [r7, #11]
 801a2d0:	b29b      	uxth	r3, r3
 801a2d2:	4413      	add	r3, r2
 801a2d4:	b29a      	uxth	r2, r3
 801a2d6:	683b      	ldr	r3, [r7, #0]
 801a2d8:	3302      	adds	r3, #2
 801a2da:	b212      	sxth	r2, r2
 801a2dc:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Z] = (data[4] << 8) + data[5];
 801a2de:	7b3b      	ldrb	r3, [r7, #12]
 801a2e0:	b29b      	uxth	r3, r3
 801a2e2:	021b      	lsls	r3, r3, #8
 801a2e4:	b29a      	uxth	r2, r3
 801a2e6:	7b7b      	ldrb	r3, [r7, #13]
 801a2e8:	b29b      	uxth	r3, r3
 801a2ea:	4413      	add	r3, r2
 801a2ec:	b29a      	uxth	r2, r3
 801a2ee:	683b      	ldr	r3, [r7, #0]
 801a2f0:	3304      	adds	r3, #4
 801a2f2:	b212      	sxth	r2, r2
 801a2f4:	801a      	strh	r2, [r3, #0]
	if (p_owner->gyro_scale > 0) {
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	781b      	ldrb	r3, [r3, #0]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d024      	beq.n	801a348 <pifMpu60x0_ReadGyro+0xbc>
		p_gyro[AXIS_X] /= p_owner->gyro_scale;
 801a2fe:	683b      	ldr	r3, [r7, #0]
 801a300:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a304:	461a      	mov	r2, r3
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	781b      	ldrb	r3, [r3, #0]
 801a30a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a30e:	b21a      	sxth	r2, r3
 801a310:	683b      	ldr	r3, [r7, #0]
 801a312:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Y] /= p_owner->gyro_scale;
 801a314:	683b      	ldr	r3, [r7, #0]
 801a316:	3302      	adds	r3, #2
 801a318:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a31c:	461a      	mov	r2, r3
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	781b      	ldrb	r3, [r3, #0]
 801a322:	fb92 f2f3 	sdiv	r2, r2, r3
 801a326:	683b      	ldr	r3, [r7, #0]
 801a328:	3302      	adds	r3, #2
 801a32a:	b212      	sxth	r2, r2
 801a32c:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Z] /= p_owner->gyro_scale;
 801a32e:	683b      	ldr	r3, [r7, #0]
 801a330:	3304      	adds	r3, #4
 801a332:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a336:	461a      	mov	r2, r3
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	781b      	ldrb	r3, [r3, #0]
 801a33c:	fb92 f2f3 	sdiv	r2, r2, r3
 801a340:	683b      	ldr	r3, [r7, #0]
 801a342:	3304      	adds	r3, #4
 801a344:	b212      	sxth	r2, r2
 801a346:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 801a348:	2301      	movs	r3, #1
}
 801a34a:	4618      	mov	r0, r3
 801a34c:	3710      	adds	r7, #16
 801a34e:	46bd      	mov	sp, r7
 801a350:	bd80      	pop	{r7, pc}

0801a352 <pifMpu60x0_ReadAccel>:

BOOL pifMpu60x0_ReadAccel(PifMpu60x0* p_owner, int16_t* p_accel)
{
 801a352:	b580      	push	{r7, lr}
 801a354:	b084      	sub	sp, #16
 801a356:	af00      	add	r7, sp, #0
 801a358:	6078      	str	r0, [r7, #4]
 801a35a:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_ACCEL_XOUT_H, data, 6)) return FALSE;
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	6898      	ldr	r0, [r3, #8]
 801a360:	f107 0208 	add.w	r2, r7, #8
 801a364:	2306      	movs	r3, #6
 801a366:	213b      	movs	r1, #59	; 0x3b
 801a368:	f7f8 fbf0 	bl	8012b4c <pifI2cDevice_ReadRegBytes>
 801a36c:	4603      	mov	r3, r0
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d101      	bne.n	801a376 <pifMpu60x0_ReadAccel+0x24>
 801a372:	2300      	movs	r3, #0
 801a374:	e04c      	b.n	801a410 <pifMpu60x0_ReadAccel+0xbe>

	p_accel[AXIS_X] = (data[0] << 8) + data[1];
 801a376:	7a3b      	ldrb	r3, [r7, #8]
 801a378:	b29b      	uxth	r3, r3
 801a37a:	021b      	lsls	r3, r3, #8
 801a37c:	b29a      	uxth	r2, r3
 801a37e:	7a7b      	ldrb	r3, [r7, #9]
 801a380:	b29b      	uxth	r3, r3
 801a382:	4413      	add	r3, r2
 801a384:	b29b      	uxth	r3, r3
 801a386:	b21a      	sxth	r2, r3
 801a388:	683b      	ldr	r3, [r7, #0]
 801a38a:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Y] = (data[2] << 8) + data[3];
 801a38c:	7abb      	ldrb	r3, [r7, #10]
 801a38e:	b29b      	uxth	r3, r3
 801a390:	021b      	lsls	r3, r3, #8
 801a392:	b29a      	uxth	r2, r3
 801a394:	7afb      	ldrb	r3, [r7, #11]
 801a396:	b29b      	uxth	r3, r3
 801a398:	4413      	add	r3, r2
 801a39a:	b29a      	uxth	r2, r3
 801a39c:	683b      	ldr	r3, [r7, #0]
 801a39e:	3302      	adds	r3, #2
 801a3a0:	b212      	sxth	r2, r2
 801a3a2:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Z] = (data[4] << 8) + data[5];
 801a3a4:	7b3b      	ldrb	r3, [r7, #12]
 801a3a6:	b29b      	uxth	r3, r3
 801a3a8:	021b      	lsls	r3, r3, #8
 801a3aa:	b29a      	uxth	r2, r3
 801a3ac:	7b7b      	ldrb	r3, [r7, #13]
 801a3ae:	b29b      	uxth	r3, r3
 801a3b0:	4413      	add	r3, r2
 801a3b2:	b29a      	uxth	r2, r3
 801a3b4:	683b      	ldr	r3, [r7, #0]
 801a3b6:	3304      	adds	r3, #4
 801a3b8:	b212      	sxth	r2, r2
 801a3ba:	801a      	strh	r2, [r3, #0]
	if (p_owner->accel_scale > 0) {
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	785b      	ldrb	r3, [r3, #1]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d024      	beq.n	801a40e <pifMpu60x0_ReadAccel+0xbc>
		p_accel[AXIS_X] /= p_owner->accel_scale;
 801a3c4:	683b      	ldr	r3, [r7, #0]
 801a3c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a3ca:	461a      	mov	r2, r3
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	785b      	ldrb	r3, [r3, #1]
 801a3d0:	fb92 f3f3 	sdiv	r3, r2, r3
 801a3d4:	b21a      	sxth	r2, r3
 801a3d6:	683b      	ldr	r3, [r7, #0]
 801a3d8:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Y] /= p_owner->accel_scale;
 801a3da:	683b      	ldr	r3, [r7, #0]
 801a3dc:	3302      	adds	r3, #2
 801a3de:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a3e2:	461a      	mov	r2, r3
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	785b      	ldrb	r3, [r3, #1]
 801a3e8:	fb92 f2f3 	sdiv	r2, r2, r3
 801a3ec:	683b      	ldr	r3, [r7, #0]
 801a3ee:	3302      	adds	r3, #2
 801a3f0:	b212      	sxth	r2, r2
 801a3f2:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Z] /= p_owner->accel_scale;
 801a3f4:	683b      	ldr	r3, [r7, #0]
 801a3f6:	3304      	adds	r3, #4
 801a3f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a3fc:	461a      	mov	r2, r3
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	785b      	ldrb	r3, [r3, #1]
 801a402:	fb92 f2f3 	sdiv	r2, r2, r3
 801a406:	683b      	ldr	r3, [r7, #0]
 801a408:	3304      	adds	r3, #4
 801a40a:	b212      	sxth	r2, r2
 801a40c:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 801a40e:	2301      	movs	r3, #1
}
 801a410:	4618      	mov	r0, r3
 801a412:	3710      	adds	r7, #16
 801a414:	46bd      	mov	sp, r7
 801a416:	bd80      	pop	{r7, pc}

0801a418 <_checkPromCrc>:

#include <math.h>


static BOOL _checkPromCrc(PifMs5611* p_owner)
{
 801a418:	b480      	push	{r7}
 801a41a:	b087      	sub	sp, #28
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
    int32_t i, j;
    uint32_t res = 0;
 801a420:	2300      	movs	r3, #0
 801a422:	60fb      	str	r3, [r7, #12]
    uint8_t zero = 1;
 801a424:	2301      	movs	r3, #1
 801a426:	72fb      	strb	r3, [r7, #11]
    uint8_t crc = p_owner->_prom[7] & 0xF;
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	8adb      	ldrh	r3, [r3, #22]
 801a42c:	b2db      	uxtb	r3, r3
 801a42e:	f003 030f 	and.w	r3, r3, #15
 801a432:	72bb      	strb	r3, [r7, #10]
    p_owner->_prom[7] &= 0xFF00;
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	8adb      	ldrh	r3, [r3, #22]
 801a438:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801a43c:	b29a      	uxth	r2, r3
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	82da      	strh	r2, [r3, #22]

    for (i = 0; i < 8; i++) {
 801a442:	2300      	movs	r3, #0
 801a444:	617b      	str	r3, [r7, #20]
 801a446:	e00b      	b.n	801a460 <_checkPromCrc+0x48>
        if (p_owner->_prom[i] != 0)
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	697a      	ldr	r2, [r7, #20]
 801a44c:	3204      	adds	r2, #4
 801a44e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a452:	2b00      	cmp	r3, #0
 801a454:	d001      	beq.n	801a45a <_checkPromCrc+0x42>
            zero = 0;
 801a456:	2300      	movs	r3, #0
 801a458:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < 8; i++) {
 801a45a:	697b      	ldr	r3, [r7, #20]
 801a45c:	3301      	adds	r3, #1
 801a45e:	617b      	str	r3, [r7, #20]
 801a460:	697b      	ldr	r3, [r7, #20]
 801a462:	2b07      	cmp	r3, #7
 801a464:	ddf0      	ble.n	801a448 <_checkPromCrc+0x30>
    }
    if (zero)
 801a466:	7afb      	ldrb	r3, [r7, #11]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d001      	beq.n	801a470 <_checkPromCrc+0x58>
        return FALSE;
 801a46c:	2300      	movs	r3, #0
 801a46e:	e04b      	b.n	801a508 <_checkPromCrc+0xf0>

    for (i = 0; i < 16; i++) {
 801a470:	2300      	movs	r3, #0
 801a472:	617b      	str	r3, [r7, #20]
 801a474:	e033      	b.n	801a4de <_checkPromCrc+0xc6>
        if (i & 1)
 801a476:	697b      	ldr	r3, [r7, #20]
 801a478:	f003 0301 	and.w	r3, r3, #1
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d00a      	beq.n	801a496 <_checkPromCrc+0x7e>
            res ^= ((p_owner->_prom[i >> 1]) & 0x00FF);
 801a480:	697b      	ldr	r3, [r7, #20]
 801a482:	105a      	asrs	r2, r3, #1
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	3204      	adds	r2, #4
 801a488:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a48c:	b2db      	uxtb	r3, r3
 801a48e:	68fa      	ldr	r2, [r7, #12]
 801a490:	4053      	eors	r3, r2
 801a492:	60fb      	str	r3, [r7, #12]
 801a494:	e00b      	b.n	801a4ae <_checkPromCrc+0x96>
        else
            res ^= (p_owner->_prom[i >> 1] >> 8);
 801a496:	697b      	ldr	r3, [r7, #20]
 801a498:	105a      	asrs	r2, r3, #1
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	3204      	adds	r2, #4
 801a49e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a4a2:	0a1b      	lsrs	r3, r3, #8
 801a4a4:	b29b      	uxth	r3, r3
 801a4a6:	461a      	mov	r2, r3
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	4053      	eors	r3, r2
 801a4ac:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 801a4ae:	2308      	movs	r3, #8
 801a4b0:	613b      	str	r3, [r7, #16]
 801a4b2:	e00e      	b.n	801a4d2 <_checkPromCrc+0xba>
            if (res & 0x8000)
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d003      	beq.n	801a4c6 <_checkPromCrc+0xae>
                res ^= 0x1800;
 801a4be:	68fb      	ldr	r3, [r7, #12]
 801a4c0:	f483 53c0 	eor.w	r3, r3, #6144	; 0x1800
 801a4c4:	60fb      	str	r3, [r7, #12]
            res <<= 1;
 801a4c6:	68fb      	ldr	r3, [r7, #12]
 801a4c8:	005b      	lsls	r3, r3, #1
 801a4ca:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 801a4cc:	693b      	ldr	r3, [r7, #16]
 801a4ce:	3b01      	subs	r3, #1
 801a4d0:	613b      	str	r3, [r7, #16]
 801a4d2:	693b      	ldr	r3, [r7, #16]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	dced      	bgt.n	801a4b4 <_checkPromCrc+0x9c>
    for (i = 0; i < 16; i++) {
 801a4d8:	697b      	ldr	r3, [r7, #20]
 801a4da:	3301      	adds	r3, #1
 801a4dc:	617b      	str	r3, [r7, #20]
 801a4de:	697b      	ldr	r3, [r7, #20]
 801a4e0:	2b0f      	cmp	r3, #15
 801a4e2:	ddc8      	ble.n	801a476 <_checkPromCrc+0x5e>
        }
    }
    p_owner->_prom[7] |= crc;
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	8ada      	ldrh	r2, [r3, #22]
 801a4e8:	7abb      	ldrb	r3, [r7, #10]
 801a4ea:	b29b      	uxth	r3, r3
 801a4ec:	4313      	orrs	r3, r2
 801a4ee:	b29a      	uxth	r2, r3
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	82da      	strh	r2, [r3, #22]
    if (crc == ((res >> 12) & 0xF))
 801a4f4:	7aba      	ldrb	r2, [r7, #10]
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	0b1b      	lsrs	r3, r3, #12
 801a4fa:	f003 030f 	and.w	r3, r3, #15
 801a4fe:	429a      	cmp	r2, r3
 801a500:	d101      	bne.n	801a506 <_checkPromCrc+0xee>
        return TRUE;
 801a502:	2301      	movs	r3, #1
 801a504:	e000      	b.n	801a508 <_checkPromCrc+0xf0>

    return FALSE;
 801a506:	2300      	movs	r3, #0
}
 801a508:	4618      	mov	r0, r3
 801a50a:	371c      	adds	r7, #28
 801a50c:	46bd      	mov	sp, r7
 801a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a512:	4770      	bx	lr

0801a514 <_calcurateBarometric>:

static void _calcurateBarometric(PifMs5611* p_owner, int32_t* p_pressure, float* p_temperature)
{
 801a514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a518:	b0d2      	sub	sp, #328	; 0x148
 801a51a:	af00      	add	r7, sp, #0
 801a51c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 801a520:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 801a524:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
	int32_t dT;
	int64_t temp;
	int64_t off, sens;
	int64_t delt;

	dT = (int64_t)p_owner->__D2 - ((int64_t)p_owner->_prom[5] * 256);
 801a528:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a52c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a52e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a532:	8a5b      	ldrh	r3, [r3, #18]
 801a534:	021b      	lsls	r3, r3, #8
 801a536:	1ad3      	subs	r3, r2, r3
 801a538:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	temp = 2000 + ((dT * (int64_t)p_owner->_prom[6]) >> 23);
 801a53c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a540:	17da      	asrs	r2, r3, #31
 801a542:	469a      	mov	sl, r3
 801a544:	4693      	mov	fp, r2
 801a546:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a54a:	8a9b      	ldrh	r3, [r3, #20]
 801a54c:	b29b      	uxth	r3, r3
 801a54e:	2200      	movs	r2, #0
 801a550:	4698      	mov	r8, r3
 801a552:	4691      	mov	r9, r2
 801a554:	fb08 f20b 	mul.w	r2, r8, fp
 801a558:	fb0a f309 	mul.w	r3, sl, r9
 801a55c:	4413      	add	r3, r2
 801a55e:	fbaa 4508 	umull	r4, r5, sl, r8
 801a562:	442b      	add	r3, r5
 801a564:	461d      	mov	r5, r3
 801a566:	f04f 0200 	mov.w	r2, #0
 801a56a:	f04f 0300 	mov.w	r3, #0
 801a56e:	0de2      	lsrs	r2, r4, #23
 801a570:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 801a574:	15eb      	asrs	r3, r5, #23
 801a576:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 801a57a:	6739      	str	r1, [r7, #112]	; 0x70
 801a57c:	f143 0300 	adc.w	r3, r3, #0
 801a580:	677b      	str	r3, [r7, #116]	; 0x74
 801a582:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 801a586:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

	off = ((int64_t)p_owner->_prom[2] << 16) + (((int64_t)p_owner->_prom[4] * dT) >> 7);
 801a58a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a58e:	899b      	ldrh	r3, [r3, #12]
 801a590:	b29b      	uxth	r3, r3
 801a592:	2200      	movs	r2, #0
 801a594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801a598:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801a59c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801a5a0:	460b      	mov	r3, r1
 801a5a2:	0c1b      	lsrs	r3, r3, #16
 801a5a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801a5a8:	460b      	mov	r3, r1
 801a5aa:	041b      	lsls	r3, r3, #16
 801a5ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801a5b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a5b4:	8a1b      	ldrh	r3, [r3, #16]
 801a5b6:	b29b      	uxth	r3, r3
 801a5b8:	2200      	movs	r2, #0
 801a5ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801a5be:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 801a5c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a5c6:	17da      	asrs	r2, r3, #31
 801a5c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801a5cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801a5d0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 801a5d4:	462b      	mov	r3, r5
 801a5d6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 801a5da:	4642      	mov	r2, r8
 801a5dc:	fb02 f203 	mul.w	r2, r2, r3
 801a5e0:	464b      	mov	r3, r9
 801a5e2:	4621      	mov	r1, r4
 801a5e4:	fb01 f303 	mul.w	r3, r1, r3
 801a5e8:	4413      	add	r3, r2
 801a5ea:	4622      	mov	r2, r4
 801a5ec:	4641      	mov	r1, r8
 801a5ee:	fba2 1201 	umull	r1, r2, r2, r1
 801a5f2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 801a5f6:	460a      	mov	r2, r1
 801a5f8:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 801a5fc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a600:	4413      	add	r3, r2
 801a602:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801a606:	f04f 0200 	mov.w	r2, #0
 801a60a:	f04f 0300 	mov.w	r3, #0
 801a60e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 801a612:	4621      	mov	r1, r4
 801a614:	09ca      	lsrs	r2, r1, #7
 801a616:	4629      	mov	r1, r5
 801a618:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 801a61c:	4629      	mov	r1, r5
 801a61e:	11cb      	asrs	r3, r1, #7
 801a620:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 801a624:	4621      	mov	r1, r4
 801a626:	1889      	adds	r1, r1, r2
 801a628:	66b9      	str	r1, [r7, #104]	; 0x68
 801a62a:	4629      	mov	r1, r5
 801a62c:	eb43 0101 	adc.w	r1, r3, r1
 801a630:	66f9      	str	r1, [r7, #108]	; 0x6c
 801a632:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 801a636:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	sens = ((int64_t)p_owner->_prom[1] << 15) + (((int64_t)p_owner->_prom[3] * dT) >> 8);
 801a63a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a63e:	895b      	ldrh	r3, [r3, #10]
 801a640:	b29b      	uxth	r3, r3
 801a642:	2200      	movs	r2, #0
 801a644:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801a648:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801a64c:	f04f 0000 	mov.w	r0, #0
 801a650:	f04f 0100 	mov.w	r1, #0
 801a654:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 801a658:	462b      	mov	r3, r5
 801a65a:	03d9      	lsls	r1, r3, #15
 801a65c:	4623      	mov	r3, r4
 801a65e:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 801a662:	4623      	mov	r3, r4
 801a664:	03d8      	lsls	r0, r3, #15
 801a666:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a66a:	89db      	ldrh	r3, [r3, #14]
 801a66c:	b29b      	uxth	r3, r3
 801a66e:	2200      	movs	r2, #0
 801a670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801a674:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801a678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a67c:	17da      	asrs	r2, r3, #31
 801a67e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801a682:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801a686:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 801a68a:	464b      	mov	r3, r9
 801a68c:	e9d7 ab2a 	ldrd	sl, fp, [r7, #168]	; 0xa8
 801a690:	4652      	mov	r2, sl
 801a692:	fb02 f203 	mul.w	r2, r2, r3
 801a696:	465b      	mov	r3, fp
 801a698:	4644      	mov	r4, r8
 801a69a:	fb04 f303 	mul.w	r3, r4, r3
 801a69e:	4413      	add	r3, r2
 801a6a0:	4642      	mov	r2, r8
 801a6a2:	4654      	mov	r4, sl
 801a6a4:	fba2 4204 	umull	r4, r2, r2, r4
 801a6a8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 801a6ac:	4622      	mov	r2, r4
 801a6ae:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 801a6b2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801a6b6:	4413      	add	r3, r2
 801a6b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801a6bc:	f04f 0200 	mov.w	r2, #0
 801a6c0:	f04f 0300 	mov.w	r3, #0
 801a6c4:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 801a6c8:	4644      	mov	r4, r8
 801a6ca:	0a22      	lsrs	r2, r4, #8
 801a6cc:	464c      	mov	r4, r9
 801a6ce:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 801a6d2:	464c      	mov	r4, r9
 801a6d4:	1223      	asrs	r3, r4, #8
 801a6d6:	1884      	adds	r4, r0, r2
 801a6d8:	663c      	str	r4, [r7, #96]	; 0x60
 801a6da:	eb41 0303 	adc.w	r3, r1, r3
 801a6de:	667b      	str	r3, [r7, #100]	; 0x64
 801a6e0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 801a6e4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

	if (temp < 2000) {
 801a6e8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a6ec:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 801a6f0:	f173 0300 	sbcs.w	r3, r3, #0
 801a6f4:	f280 8150 	bge.w	801a998 <_calcurateBarometric+0x484>
		temp -= ((int64_t)dT * dT) / 2147483648L;
 801a6f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a6fc:	17da      	asrs	r2, r3, #31
 801a6fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801a702:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801a706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a70a:	17da      	asrs	r2, r3, #31
 801a70c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801a710:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801a714:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 801a718:	462b      	mov	r3, r5
 801a71a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 801a71e:	4642      	mov	r2, r8
 801a720:	fb02 f203 	mul.w	r2, r2, r3
 801a724:	464b      	mov	r3, r9
 801a726:	4621      	mov	r1, r4
 801a728:	fb01 f303 	mul.w	r3, r1, r3
 801a72c:	4413      	add	r3, r2
 801a72e:	4622      	mov	r2, r4
 801a730:	4641      	mov	r1, r8
 801a732:	fba2 1201 	umull	r1, r2, r2, r1
 801a736:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 801a73a:	460a      	mov	r2, r1
 801a73c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 801a740:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801a744:	4413      	add	r3, r2
 801a746:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801a74a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801a74e:	2b00      	cmp	r3, #0
 801a750:	da08      	bge.n	801a764 <_calcurateBarometric+0x250>
 801a752:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a756:	1851      	adds	r1, r2, r1
 801a758:	65b9      	str	r1, [r7, #88]	; 0x58
 801a75a:	f143 0300 	adc.w	r3, r3, #0
 801a75e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801a760:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801a764:	f04f 0000 	mov.w	r0, #0
 801a768:	f04f 0100 	mov.w	r1, #0
 801a76c:	0fd0      	lsrs	r0, r2, #31
 801a76e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801a772:	17d9      	asrs	r1, r3, #31
 801a774:	2300      	movs	r3, #0
 801a776:	4242      	negs	r2, r0
 801a778:	653a      	str	r2, [r7, #80]	; 0x50
 801a77a:	eb63 0301 	sbc.w	r3, r3, r1
 801a77e:	657b      	str	r3, [r7, #84]	; 0x54
 801a780:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801a784:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a788:	1814      	adds	r4, r2, r0
 801a78a:	64bc      	str	r4, [r7, #72]	; 0x48
 801a78c:	414b      	adcs	r3, r1
 801a78e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a790:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 801a794:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

		delt = temp - 2000;
 801a798:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a79c:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 801a7a0:	6439      	str	r1, [r7, #64]	; 0x40
 801a7a2:	f143 33ff 	adc.w	r3, r3, #4294967295
 801a7a6:	647b      	str	r3, [r7, #68]	; 0x44
 801a7a8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 801a7ac:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		delt = 5 * delt * delt;
 801a7b0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a7b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a7b8:	fb03 f102 	mul.w	r1, r3, r2
 801a7bc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a7c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a7c4:	fb02 f303 	mul.w	r3, r2, r3
 801a7c8:	18ca      	adds	r2, r1, r3
 801a7ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a7ce:	fba3 1303 	umull	r1, r3, r3, r3
 801a7d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801a7d6:	460b      	mov	r3, r1
 801a7d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801a7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a7e0:	18d3      	adds	r3, r2, r3
 801a7e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801a7e6:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 801a7ea:	4622      	mov	r2, r4
 801a7ec:	462b      	mov	r3, r5
 801a7ee:	f04f 0000 	mov.w	r0, #0
 801a7f2:	f04f 0100 	mov.w	r1, #0
 801a7f6:	0099      	lsls	r1, r3, #2
 801a7f8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801a7fc:	0090      	lsls	r0, r2, #2
 801a7fe:	4602      	mov	r2, r0
 801a800:	460b      	mov	r3, r1
 801a802:	4621      	mov	r1, r4
 801a804:	1851      	adds	r1, r2, r1
 801a806:	63b9      	str	r1, [r7, #56]	; 0x38
 801a808:	4629      	mov	r1, r5
 801a80a:	eb43 0101 	adc.w	r1, r3, r1
 801a80e:	63f9      	str	r1, [r7, #60]	; 0x3c
 801a810:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801a814:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		off -= delt >> 1;
 801a818:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801a81c:	f04f 0000 	mov.w	r0, #0
 801a820:	f04f 0100 	mov.w	r1, #0
 801a824:	0850      	lsrs	r0, r2, #1
 801a826:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 801a82a:	1059      	asrs	r1, r3, #1
 801a82c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801a830:	1a14      	subs	r4, r2, r0
 801a832:	633c      	str	r4, [r7, #48]	; 0x30
 801a834:	eb63 0301 	sbc.w	r3, r3, r1
 801a838:	637b      	str	r3, [r7, #52]	; 0x34
 801a83a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801a83e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		sens -= delt >> 2;
 801a842:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801a846:	f04f 0000 	mov.w	r0, #0
 801a84a:	f04f 0100 	mov.w	r1, #0
 801a84e:	0890      	lsrs	r0, r2, #2
 801a850:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 801a854:	1099      	asrs	r1, r3, #2
 801a856:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 801a85a:	1a14      	subs	r4, r2, r0
 801a85c:	62bc      	str	r4, [r7, #40]	; 0x28
 801a85e:	eb63 0301 	sbc.w	r3, r3, r1
 801a862:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a864:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801a868:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

		if (temp < -1500) {
 801a86c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a870:	4979      	ldr	r1, [pc, #484]	; (801aa58 <_calcurateBarometric+0x544>)
 801a872:	428a      	cmp	r2, r1
 801a874:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 801a878:	f280 808e 	bge.w	801a998 <_calcurateBarometric+0x484>
			delt = temp + 1500;
 801a87c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a880:	f240 51dc 	movw	r1, #1500	; 0x5dc
 801a884:	1851      	adds	r1, r2, r1
 801a886:	6239      	str	r1, [r7, #32]
 801a888:	f143 0300 	adc.w	r3, r3, #0
 801a88c:	627b      	str	r3, [r7, #36]	; 0x24
 801a88e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801a892:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			delt = delt * delt;
 801a896:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a89a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a89e:	fb03 f102 	mul.w	r1, r3, r2
 801a8a2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a8a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a8aa:	fb02 f303 	mul.w	r3, r2, r3
 801a8ae:	18ca      	adds	r2, r1, r3
 801a8b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a8b4:	fba3 1303 	umull	r1, r3, r3, r3
 801a8b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801a8bc:	460b      	mov	r3, r1
 801a8be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801a8c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a8c6:	18d3      	adds	r3, r2, r3
 801a8c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801a8cc:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 801a8d0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 801a8d4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			off -= 7 * delt;
 801a8d8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801a8dc:	4614      	mov	r4, r2
 801a8de:	461d      	mov	r5, r3
 801a8e0:	f04f 0000 	mov.w	r0, #0
 801a8e4:	f04f 0100 	mov.w	r1, #0
 801a8e8:	00d9      	lsls	r1, r3, #3
 801a8ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801a8ee:	00d0      	lsls	r0, r2, #3
 801a8f0:	1a23      	subs	r3, r4, r0
 801a8f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801a8f6:	eb65 0301 	sbc.w	r3, r5, r1
 801a8fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a8fe:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801a902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801a906:	4621      	mov	r1, r4
 801a908:	1851      	adds	r1, r2, r1
 801a90a:	61b9      	str	r1, [r7, #24]
 801a90c:	4629      	mov	r1, r5
 801a90e:	eb43 0101 	adc.w	r1, r3, r1
 801a912:	61f9      	str	r1, [r7, #28]
 801a914:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801a918:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			sens -= (11 * delt) >> 1;
 801a91c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 801a920:	4602      	mov	r2, r0
 801a922:	460b      	mov	r3, r1
 801a924:	1894      	adds	r4, r2, r2
 801a926:	613c      	str	r4, [r7, #16]
 801a928:	415b      	adcs	r3, r3
 801a92a:	617b      	str	r3, [r7, #20]
 801a92c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a930:	1814      	adds	r4, r2, r0
 801a932:	60bc      	str	r4, [r7, #8]
 801a934:	414b      	adcs	r3, r1
 801a936:	60fb      	str	r3, [r7, #12]
 801a938:	f04f 0200 	mov.w	r2, #0
 801a93c:	f04f 0300 	mov.w	r3, #0
 801a940:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 801a944:	464c      	mov	r4, r9
 801a946:	00a3      	lsls	r3, r4, #2
 801a948:	4644      	mov	r4, r8
 801a94a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 801a94e:	4644      	mov	r4, r8
 801a950:	00a2      	lsls	r2, r4, #2
 801a952:	4614      	mov	r4, r2
 801a954:	461d      	mov	r5, r3
 801a956:	4623      	mov	r3, r4
 801a958:	1a1b      	subs	r3, r3, r0
 801a95a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801a95e:	462b      	mov	r3, r5
 801a960:	eb63 0301 	sbc.w	r3, r3, r1
 801a964:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a968:	f04f 0200 	mov.w	r2, #0
 801a96c:	f04f 0300 	mov.w	r3, #0
 801a970:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 801a974:	4621      	mov	r1, r4
 801a976:	084a      	lsrs	r2, r1, #1
 801a978:	4629      	mov	r1, r5
 801a97a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801a97e:	4629      	mov	r1, r5
 801a980:	104b      	asrs	r3, r1, #1
 801a982:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 801a986:	1a84      	subs	r4, r0, r2
 801a988:	603c      	str	r4, [r7, #0]
 801a98a:	eb61 0303 	sbc.w	r3, r1, r3
 801a98e:	607b      	str	r3, [r7, #4]
 801a990:	e9d7 3400 	ldrd	r3, r4, [r7]
 801a994:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		}
	}

    *p_temperature = temp / 100;
 801a998:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801a99c:	f04f 0264 	mov.w	r2, #100	; 0x64
 801a9a0:	f04f 0300 	mov.w	r3, #0
 801a9a4:	f7e6 fa26 	bl	8000df4 <__aeabi_ldivmod>
 801a9a8:	4602      	mov	r2, r0
 801a9aa:	460b      	mov	r3, r1
 801a9ac:	4610      	mov	r0, r2
 801a9ae:	4619      	mov	r1, r3
 801a9b0:	f7e6 f9e2 	bl	8000d78 <__aeabi_l2f>
 801a9b4:	4602      	mov	r2, r0
 801a9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801a9ba:	601a      	str	r2, [r3, #0]
	*p_pressure = ((((int64_t)p_owner->__D1 * sens) >> 21) - off) >> 15;
 801a9bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9c2:	2200      	movs	r2, #0
 801a9c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801a9c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801a9cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801a9d0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801a9d4:	462a      	mov	r2, r5
 801a9d6:	fb02 f203 	mul.w	r2, r2, r3
 801a9da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801a9de:	4621      	mov	r1, r4
 801a9e0:	fb01 f303 	mul.w	r3, r1, r3
 801a9e4:	4413      	add	r3, r2
 801a9e6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801a9ea:	4621      	mov	r1, r4
 801a9ec:	fba2 1201 	umull	r1, r2, r2, r1
 801a9f0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801a9f4:	460a      	mov	r2, r1
 801a9f6:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801a9fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801a9fe:	4413      	add	r3, r2
 801aa00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801aa04:	f04f 0200 	mov.w	r2, #0
 801aa08:	f04f 0300 	mov.w	r3, #0
 801aa0c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801aa10:	4621      	mov	r1, r4
 801aa12:	0d4a      	lsrs	r2, r1, #21
 801aa14:	4629      	mov	r1, r5
 801aa16:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 801aa1a:	4629      	mov	r1, r5
 801aa1c:	154b      	asrs	r3, r1, #21
 801aa1e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801aa22:	1a14      	subs	r4, r2, r0
 801aa24:	67bc      	str	r4, [r7, #120]	; 0x78
 801aa26:	eb63 0301 	sbc.w	r3, r3, r1
 801aa2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801aa2c:	f04f 0200 	mov.w	r2, #0
 801aa30:	f04f 0300 	mov.w	r3, #0
 801aa34:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801aa38:	4621      	mov	r1, r4
 801aa3a:	0bca      	lsrs	r2, r1, #15
 801aa3c:	4629      	mov	r1, r5
 801aa3e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 801aa42:	4629      	mov	r1, r5
 801aa44:	13cb      	asrs	r3, r1, #15
 801aa46:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801aa4a:	601a      	str	r2, [r3, #0]
}
 801aa4c:	bf00      	nop
 801aa4e:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 801aa52:	46bd      	mov	sp, r7
 801aa54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801aa58:	fffffa24 	.word	0xfffffa24

0801aa5c <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 801aa5c:	b580      	push	{r7, lr}
 801aa5e:	b08a      	sub	sp, #40	; 0x28
 801aa60:	af02      	add	r7, sp, #8
 801aa62:	6078      	str	r0, [r7, #4]
	PifMs5611* p_owner = p_task->_p_client;
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	68db      	ldr	r3, [r3, #12]
 801aa68:	61bb      	str	r3, [r7, #24]
	uint8_t value[3];
	uint16_t delay = 1;
 801aa6a:	2301      	movs	r3, #1
 801aa6c:	83fb      	strh	r3, [r7, #30]
	static uint32_t start_time;
	int32_t pressure;
	float temperature;

	switch (p_owner->__state) {
 801aa6e:	69bb      	ldr	r3, [r7, #24]
 801aa70:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801aa74:	3b01      	subs	r3, #1
 801aa76:	2b04      	cmp	r3, #4
 801aa78:	f200 80b1 	bhi.w	801abde <_doTask+0x182>
 801aa7c:	a201      	add	r2, pc, #4	; (adr r2, 801aa84 <_doTask+0x28>)
 801aa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aa82:	bf00      	nop
 801aa84:	0801aa99 	.word	0x0801aa99
 801aa88:	0801aadb 	.word	0x0801aadb
 801aa8c:	0801ab11 	.word	0x0801ab11
 801aa90:	0801ab4b 	.word	0x0801ab4b
 801aa94:	0801ab81 	.word	0x0801ab81
	case MS5611_STATE_TEMPERATURE_START:
		start_time = pif_cumulative_timer1ms;
 801aa98:	4b54      	ldr	r3, [pc, #336]	; (801abec <_doTask+0x190>)
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	4a54      	ldr	r2, [pc, #336]	; (801abf0 <_doTask+0x194>)
 801aa9e:	6013      	str	r3, [r2, #0]
		value[0] = MS5611_REG_CONV_D2 + p_owner->_over_sampling_rate;
 801aaa0:	69bb      	ldr	r3, [r7, #24]
 801aaa2:	8b1b      	ldrh	r3, [r3, #24]
 801aaa4:	b2db      	uxtb	r3, r3
 801aaa6:	3350      	adds	r3, #80	; 0x50
 801aaa8:	b2db      	uxtb	r3, r3
 801aaaa:	753b      	strb	r3, [r7, #20]
		if (!pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) return 1;
 801aaac:	69bb      	ldr	r3, [r7, #24]
 801aaae:	6858      	ldr	r0, [r3, #4]
 801aab0:	f107 0314 	add.w	r3, r7, #20
 801aab4:	2201      	movs	r2, #1
 801aab6:	9200      	str	r2, [sp, #0]
 801aab8:	2200      	movs	r2, #0
 801aaba:	2100      	movs	r1, #0
 801aabc:	f7f8 f890 	bl	8012be0 <pifI2cDevice_Write>
 801aac0:	4603      	mov	r3, r0
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d101      	bne.n	801aaca <_doTask+0x6e>
 801aac6:	2301      	movs	r3, #1
 801aac8:	e08b      	b.n	801abe2 <_doTask+0x186>
		p_owner->__state = MS5611_STATE_TEMPERATURE_WAIT;
 801aaca:	69bb      	ldr	r3, [r7, #24]
 801aacc:	2202      	movs	r2, #2
 801aace:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		delay = p_owner->_conversion_time;
 801aad2:	69bb      	ldr	r3, [r7, #24]
 801aad4:	7e9b      	ldrb	r3, [r3, #26]
 801aad6:	83fb      	strh	r3, [r7, #30]
		break;
 801aad8:	e082      	b.n	801abe0 <_doTask+0x184>

	case MS5611_STATE_TEMPERATURE_WAIT:
		if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) return 1;
 801aada:	69bb      	ldr	r3, [r7, #24]
 801aadc:	6858      	ldr	r0, [r3, #4]
 801aade:	f107 0214 	add.w	r2, r7, #20
 801aae2:	2303      	movs	r3, #3
 801aae4:	2100      	movs	r1, #0
 801aae6:	f7f8 f831 	bl	8012b4c <pifI2cDevice_ReadRegBytes>
 801aaea:	4603      	mov	r3, r0
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d101      	bne.n	801aaf4 <_doTask+0x98>
 801aaf0:	2301      	movs	r3, #1
 801aaf2:	e076      	b.n	801abe2 <_doTask+0x186>
		p_owner->__D2 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801aaf4:	7d3b      	ldrb	r3, [r7, #20]
 801aaf6:	041b      	lsls	r3, r3, #16
 801aaf8:	7d7a      	ldrb	r2, [r7, #21]
 801aafa:	0212      	lsls	r2, r2, #8
 801aafc:	4413      	add	r3, r2
 801aafe:	7dba      	ldrb	r2, [r7, #22]
 801ab00:	441a      	add	r2, r3
 801ab02:	69bb      	ldr	r3, [r7, #24]
 801ab04:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__state = MS5611_STATE_PRESSURE_START;
 801ab06:	69bb      	ldr	r3, [r7, #24]
 801ab08:	2203      	movs	r2, #3
 801ab0a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 801ab0e:	e067      	b.n	801abe0 <_doTask+0x184>

	case MS5611_STATE_PRESSURE_START:
		value[0] = MS5611_REG_CONV_D1 + p_owner->_over_sampling_rate;
 801ab10:	69bb      	ldr	r3, [r7, #24]
 801ab12:	8b1b      	ldrh	r3, [r3, #24]
 801ab14:	b2db      	uxtb	r3, r3
 801ab16:	3340      	adds	r3, #64	; 0x40
 801ab18:	b2db      	uxtb	r3, r3
 801ab1a:	753b      	strb	r3, [r7, #20]
		if (!pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) return 1;
 801ab1c:	69bb      	ldr	r3, [r7, #24]
 801ab1e:	6858      	ldr	r0, [r3, #4]
 801ab20:	f107 0314 	add.w	r3, r7, #20
 801ab24:	2201      	movs	r2, #1
 801ab26:	9200      	str	r2, [sp, #0]
 801ab28:	2200      	movs	r2, #0
 801ab2a:	2100      	movs	r1, #0
 801ab2c:	f7f8 f858 	bl	8012be0 <pifI2cDevice_Write>
 801ab30:	4603      	mov	r3, r0
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d101      	bne.n	801ab3a <_doTask+0xde>
 801ab36:	2301      	movs	r3, #1
 801ab38:	e053      	b.n	801abe2 <_doTask+0x186>
		p_owner->__state = MS5611_STATE_PRESSURE_WAIT;
 801ab3a:	69bb      	ldr	r3, [r7, #24]
 801ab3c:	2204      	movs	r2, #4
 801ab3e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		delay = p_owner->_conversion_time;
 801ab42:	69bb      	ldr	r3, [r7, #24]
 801ab44:	7e9b      	ldrb	r3, [r3, #26]
 801ab46:	83fb      	strh	r3, [r7, #30]
		break;
 801ab48:	e04a      	b.n	801abe0 <_doTask+0x184>

	case MS5611_STATE_PRESSURE_WAIT:
		if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) return 1;
 801ab4a:	69bb      	ldr	r3, [r7, #24]
 801ab4c:	6858      	ldr	r0, [r3, #4]
 801ab4e:	f107 0214 	add.w	r2, r7, #20
 801ab52:	2303      	movs	r3, #3
 801ab54:	2100      	movs	r1, #0
 801ab56:	f7f7 fff9 	bl	8012b4c <pifI2cDevice_ReadRegBytes>
 801ab5a:	4603      	mov	r3, r0
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d101      	bne.n	801ab64 <_doTask+0x108>
 801ab60:	2301      	movs	r3, #1
 801ab62:	e03e      	b.n	801abe2 <_doTask+0x186>
		p_owner->__D1 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801ab64:	7d3b      	ldrb	r3, [r7, #20]
 801ab66:	041b      	lsls	r3, r3, #16
 801ab68:	7d7a      	ldrb	r2, [r7, #21]
 801ab6a:	0212      	lsls	r2, r2, #8
 801ab6c:	4413      	add	r3, r2
 801ab6e:	7dba      	ldrb	r2, [r7, #22]
 801ab70:	441a      	add	r2, r3
 801ab72:	69bb      	ldr	r3, [r7, #24]
 801ab74:	625a      	str	r2, [r3, #36]	; 0x24
		p_owner->__state = MS5611_STATE_CALCURATE;
 801ab76:	69bb      	ldr	r3, [r7, #24]
 801ab78:	2205      	movs	r2, #5
 801ab7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 801ab7e:	e02f      	b.n	801abe0 <_doTask+0x184>

	case MS5611_STATE_CALCURATE:
		_calcurateBarometric(p_owner, &pressure, &temperature);
 801ab80:	f107 020c 	add.w	r2, r7, #12
 801ab84:	f107 0310 	add.w	r3, r7, #16
 801ab88:	4619      	mov	r1, r3
 801ab8a:	69b8      	ldr	r0, [r7, #24]
 801ab8c:	f7ff fcc2 	bl	801a514 <_calcurateBarometric>
		if (p_owner->__evt_read) (*p_owner->__evt_read)(pressure, temperature);
 801ab90:	69bb      	ldr	r3, [r7, #24]
 801ab92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d008      	beq.n	801abaa <_doTask+0x14e>
 801ab98:	69bb      	ldr	r3, [r7, #24]
 801ab9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab9c:	693a      	ldr	r2, [r7, #16]
 801ab9e:	edd7 7a03 	vldr	s15, [r7, #12]
 801aba2:	eeb0 0a67 	vmov.f32	s0, s15
 801aba6:	4610      	mov	r0, r2
 801aba8:	4798      	blx	r3
		if (pif_cumulative_timer1ms - start_time < p_owner->__read_period) {
 801abaa:	4b10      	ldr	r3, [pc, #64]	; (801abec <_doTask+0x190>)
 801abac:	681a      	ldr	r2, [r3, #0]
 801abae:	4b10      	ldr	r3, [pc, #64]	; (801abf0 <_doTask+0x194>)
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	1ad3      	subs	r3, r2, r3
 801abb4:	69ba      	ldr	r2, [r7, #24]
 801abb6:	8c12      	ldrh	r2, [r2, #32]
 801abb8:	4293      	cmp	r3, r2
 801abba:	d20b      	bcs.n	801abd4 <_doTask+0x178>
			delay = p_owner->__read_period - (pif_cumulative_timer1ms - start_time);
 801abbc:	69bb      	ldr	r3, [r7, #24]
 801abbe:	8c1a      	ldrh	r2, [r3, #32]
 801abc0:	4b0b      	ldr	r3, [pc, #44]	; (801abf0 <_doTask+0x194>)
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	b299      	uxth	r1, r3
 801abc6:	4b09      	ldr	r3, [pc, #36]	; (801abec <_doTask+0x190>)
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	b29b      	uxth	r3, r3
 801abcc:	1acb      	subs	r3, r1, r3
 801abce:	b29b      	uxth	r3, r3
 801abd0:	4413      	add	r3, r2
 801abd2:	83fb      	strh	r3, [r7, #30]
		}
		p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801abd4:	69bb      	ldr	r3, [r7, #24]
 801abd6:	2201      	movs	r2, #1
 801abd8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 801abdc:	e000      	b.n	801abe0 <_doTask+0x184>

	default:
		break;
 801abde:	bf00      	nop
	}
	return delay;
 801abe0:	8bfb      	ldrh	r3, [r7, #30]
}
 801abe2:	4618      	mov	r0, r3
 801abe4:	3720      	adds	r7, #32
 801abe6:	46bd      	mov	sp, r7
 801abe8:	bd80      	pop	{r7, pc}
 801abea:	bf00      	nop
 801abec:	20001f08 	.word	0x20001f08
 801abf0:	20002090 	.word	0x20002090

0801abf4 <pifMs5611_Init>:

BOOL pifMs5611_Init(PifMs5611* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr)
{
 801abf4:	b580      	push	{r7, lr}
 801abf6:	b086      	sub	sp, #24
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	60f8      	str	r0, [r7, #12]
 801abfc:	607a      	str	r2, [r7, #4]
 801abfe:	461a      	mov	r2, r3
 801ac00:	460b      	mov	r3, r1
 801ac02:	817b      	strh	r3, [r7, #10]
 801ac04:	4613      	mov	r3, r2
 801ac06:	727b      	strb	r3, [r7, #9]
	int i;

	if (!p_owner || !p_i2c) {
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d002      	beq.n	801ac14 <pifMs5611_Init+0x20>
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	d104      	bne.n	801ac1e <pifMs5611_Init+0x2a>
		pif_error = E_INVALID_PARAM;
 801ac14:	4b33      	ldr	r3, [pc, #204]	; (801ace4 <pifMs5611_Init+0xf0>)
 801ac16:	2201      	movs	r2, #1
 801ac18:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801ac1a:	2300      	movs	r3, #0
 801ac1c:	e05e      	b.n	801acdc <pifMs5611_Init+0xe8>
	}

	memset(p_owner, 0, sizeof(PifMs5611));
 801ac1e:	2230      	movs	r2, #48	; 0x30
 801ac20:	2100      	movs	r1, #0
 801ac22:	68f8      	ldr	r0, [r7, #12]
 801ac24:	f008 fb32 	bl	802328c <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 801ac28:	6878      	ldr	r0, [r7, #4]
 801ac2a:	f7f7 fe73 	bl	8012914 <pifI2cPort_AddDevice>
 801ac2e:	4602      	mov	r2, r0
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801ac34:	68fb      	ldr	r3, [r7, #12]
 801ac36:	685b      	ldr	r3, [r3, #4]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d101      	bne.n	801ac40 <pifMs5611_Init+0x4c>
 801ac3c:	2300      	movs	r3, #0
 801ac3e:	e04d      	b.n	801acdc <pifMs5611_Init+0xe8>

    p_owner->_p_i2c->addr = addr;
 801ac40:	68fb      	ldr	r3, [r7, #12]
 801ac42:	685b      	ldr	r3, [r3, #4]
 801ac44:	7a7a      	ldrb	r2, [r7, #9]
 801ac46:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	685b      	ldr	r3, [r3, #4]
 801ac4c:	2200      	movs	r2, #0
 801ac4e:	211e      	movs	r1, #30
 801ac50:	4618      	mov	r0, r3
 801ac52:	f7f8 f871 	bl	8012d38 <pifI2cDevice_WriteRegByte>
 801ac56:	4603      	mov	r3, r0
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d036      	beq.n	801acca <pifMs5611_Init+0xd6>
	pifTaskManager_YieldMs(100);
 801ac5c:	2064      	movs	r0, #100	; 0x64
 801ac5e:	f7fa f823 	bl	8014ca8 <pifTaskManager_YieldMs>

	for (i = 0; i < 8; i++) {
 801ac62:	2300      	movs	r3, #0
 801ac64:	617b      	str	r3, [r7, #20]
 801ac66:	e014      	b.n	801ac92 <pifMs5611_Init+0x9e>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	6858      	ldr	r0, [r3, #4]
 801ac6c:	697b      	ldr	r3, [r7, #20]
 801ac6e:	3350      	adds	r3, #80	; 0x50
 801ac70:	b2db      	uxtb	r3, r3
 801ac72:	005b      	lsls	r3, r3, #1
 801ac74:	b2d9      	uxtb	r1, r3
 801ac76:	697b      	ldr	r3, [r7, #20]
 801ac78:	3304      	adds	r3, #4
 801ac7a:	005b      	lsls	r3, r3, #1
 801ac7c:	68fa      	ldr	r2, [r7, #12]
 801ac7e:	4413      	add	r3, r2
 801ac80:	461a      	mov	r2, r3
 801ac82:	f7f7 ff3f 	bl	8012b04 <pifI2cDevice_ReadRegWord>
 801ac86:	4603      	mov	r3, r0
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d020      	beq.n	801acce <pifMs5611_Init+0xda>
	for (i = 0; i < 8; i++) {
 801ac8c:	697b      	ldr	r3, [r7, #20]
 801ac8e:	3301      	adds	r3, #1
 801ac90:	617b      	str	r3, [r7, #20]
 801ac92:	697b      	ldr	r3, [r7, #20]
 801ac94:	2b07      	cmp	r3, #7
 801ac96:	dde7      	ble.n	801ac68 <pifMs5611_Init+0x74>
	}
	if (!_checkPromCrc(p_owner)) goto fail;
 801ac98:	68f8      	ldr	r0, [r7, #12]
 801ac9a:	f7ff fbbd 	bl	801a418 <_checkPromCrc>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d016      	beq.n	801acd2 <pifMs5611_Init+0xde>

    pifMs5611_SetOverSamplingRate(p_owner, MS5611_OSR_1024);
 801aca4:	2104      	movs	r1, #4
 801aca6:	68f8      	ldr	r0, [r7, #12]
 801aca8:	f000 f844 	bl	801ad34 <pifMs5611_SetOverSamplingRate>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801acac:	897b      	ldrh	r3, [r7, #10]
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d106      	bne.n	801acc0 <pifMs5611_Init+0xcc>
 801acb2:	4b0d      	ldr	r3, [pc, #52]	; (801ace8 <pifMs5611_Init+0xf4>)
 801acb4:	881b      	ldrh	r3, [r3, #0]
 801acb6:	1c5a      	adds	r2, r3, #1
 801acb8:	b291      	uxth	r1, r2
 801acba:	4a0b      	ldr	r2, [pc, #44]	; (801ace8 <pifMs5611_Init+0xf4>)
 801acbc:	8011      	strh	r1, [r2, #0]
 801acbe:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801acc0:	68fb      	ldr	r3, [r7, #12]
 801acc2:	897a      	ldrh	r2, [r7, #10]
 801acc4:	801a      	strh	r2, [r3, #0]
    return TRUE;
 801acc6:	2301      	movs	r3, #1
 801acc8:	e008      	b.n	801acdc <pifMs5611_Init+0xe8>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801acca:	bf00      	nop
 801accc:	e002      	b.n	801acd4 <pifMs5611_Init+0xe0>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801acce:	bf00      	nop
 801acd0:	e000      	b.n	801acd4 <pifMs5611_Init+0xe0>
	if (!_checkPromCrc(p_owner)) goto fail;
 801acd2:	bf00      	nop

fail:
	pifMs5611_Clear(p_owner);
 801acd4:	68f8      	ldr	r0, [r7, #12]
 801acd6:	f000 f809 	bl	801acec <pifMs5611_Clear>
	return FALSE;
 801acda:	2300      	movs	r3, #0
}
 801acdc:	4618      	mov	r0, r3
 801acde:	3718      	adds	r7, #24
 801ace0:	46bd      	mov	sp, r7
 801ace2:	bd80      	pop	{r7, pc}
 801ace4:	20001ef0 	.word	0x20001ef0
 801ace8:	2000005c 	.word	0x2000005c

0801acec <pifMs5611_Clear>:

void pifMs5611_Clear(PifMs5611* p_owner)
{
 801acec:	b580      	push	{r7, lr}
 801acee:	b082      	sub	sp, #8
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	69db      	ldr	r3, [r3, #28]
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d007      	beq.n	801ad0c <pifMs5611_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	69db      	ldr	r3, [r3, #28]
 801ad00:	4618      	mov	r0, r3
 801ad02:	f7f9 fdf9 	bl	80148f8 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	2200      	movs	r2, #0
 801ad0a:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_i2c) {
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	685b      	ldr	r3, [r3, #4]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d00b      	beq.n	801ad2c <pifMs5611_Clear+0x40>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	685b      	ldr	r3, [r3, #4]
 801ad18:	685a      	ldr	r2, [r3, #4]
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	685b      	ldr	r3, [r3, #4]
 801ad1e:	4619      	mov	r1, r3
 801ad20:	4610      	mov	r0, r2
 801ad22:	f7f7 fe1b 	bl	801295c <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	2200      	movs	r2, #0
 801ad2a:	605a      	str	r2, [r3, #4]
	}
}
 801ad2c:	bf00      	nop
 801ad2e:	3708      	adds	r7, #8
 801ad30:	46bd      	mov	sp, r7
 801ad32:	bd80      	pop	{r7, pc}

0801ad34 <pifMs5611_SetOverSamplingRate>:

void pifMs5611_SetOverSamplingRate(PifMs5611* p_owner, uint16_t osr)
{
 801ad34:	b480      	push	{r7}
 801ad36:	b083      	sub	sp, #12
 801ad38:	af00      	add	r7, sp, #0
 801ad3a:	6078      	str	r0, [r7, #4]
 801ad3c:	460b      	mov	r3, r1
 801ad3e:	807b      	strh	r3, [r7, #2]
	p_owner->_over_sampling_rate = osr;
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	887a      	ldrh	r2, [r7, #2]
 801ad44:	831a      	strh	r2, [r3, #24]
	switch (osr) {
 801ad46:	887b      	ldrh	r3, [r7, #2]
 801ad48:	2b08      	cmp	r3, #8
 801ad4a:	d829      	bhi.n	801ada0 <pifMs5611_SetOverSamplingRate+0x6c>
 801ad4c:	a201      	add	r2, pc, #4	; (adr r2, 801ad54 <pifMs5611_SetOverSamplingRate+0x20>)
 801ad4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad52:	bf00      	nop
 801ad54:	0801ad79 	.word	0x0801ad79
 801ad58:	0801ada1 	.word	0x0801ada1
 801ad5c:	0801ad81 	.word	0x0801ad81
 801ad60:	0801ada1 	.word	0x0801ada1
 801ad64:	0801ad89 	.word	0x0801ad89
 801ad68:	0801ada1 	.word	0x0801ada1
 801ad6c:	0801ad91 	.word	0x0801ad91
 801ad70:	0801ada1 	.word	0x0801ada1
 801ad74:	0801ad99 	.word	0x0801ad99
	case MS5611_OSR_256: p_owner->_conversion_time = 1 + 1; break;
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	2202      	movs	r2, #2
 801ad7c:	769a      	strb	r2, [r3, #26]
 801ad7e:	e00f      	b.n	801ada0 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_512: p_owner->_conversion_time = 2 + 1; break;
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	2203      	movs	r2, #3
 801ad84:	769a      	strb	r2, [r3, #26]
 801ad86:	e00b      	b.n	801ada0 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_1024: p_owner->_conversion_time = 3 + 1; break;
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	2204      	movs	r2, #4
 801ad8c:	769a      	strb	r2, [r3, #26]
 801ad8e:	e007      	b.n	801ada0 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_2048: p_owner->_conversion_time = 5 + 1; break;
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	2206      	movs	r2, #6
 801ad94:	769a      	strb	r2, [r3, #26]
 801ad96:	e003      	b.n	801ada0 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_4096: p_owner->_conversion_time = 10 + 1; break;
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	220b      	movs	r2, #11
 801ad9c:	769a      	strb	r2, [r3, #26]
 801ad9e:	bf00      	nop
	}
}
 801ada0:	bf00      	nop
 801ada2:	370c      	adds	r7, #12
 801ada4:	46bd      	mov	sp, r7
 801ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adaa:	4770      	bx	lr

0801adac <pifMs5611_AddTaskForReading>:
	_calcurateBarometric(p_owner, p_pressure, p_temperature);
	return TRUE;
}

BOOL pifMs5611_AddTaskForReading(PifMs5611* p_owner, uint16_t read_period, PifEvtMs5611Read evt_read)
{
 801adac:	b580      	push	{r7, lr}
 801adae:	b086      	sub	sp, #24
 801adb0:	af02      	add	r7, sp, #8
 801adb2:	60f8      	str	r0, [r7, #12]
 801adb4:	460b      	mov	r3, r1
 801adb6:	607a      	str	r2, [r7, #4]
 801adb8:	817b      	strh	r3, [r7, #10]
	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, 10, _doTask, p_owner, FALSE);
 801adba:	2300      	movs	r3, #0
 801adbc:	9300      	str	r3, [sp, #0]
 801adbe:	68fb      	ldr	r3, [r7, #12]
 801adc0:	4a0e      	ldr	r2, [pc, #56]	; (801adfc <pifMs5611_AddTaskForReading+0x50>)
 801adc2:	210a      	movs	r1, #10
 801adc4:	2004      	movs	r0, #4
 801adc6:	f7f9 fd33 	bl	8014830 <pifTaskManager_Add>
 801adca:	4602      	mov	r2, r0
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	61da      	str	r2, [r3, #28]
    if (!p_owner->_p_task) return FALSE;
 801add0:	68fb      	ldr	r3, [r7, #12]
 801add2:	69db      	ldr	r3, [r3, #28]
 801add4:	2b00      	cmp	r3, #0
 801add6:	d101      	bne.n	801addc <pifMs5611_AddTaskForReading+0x30>
 801add8:	2300      	movs	r3, #0
 801adda:	e00a      	b.n	801adf2 <pifMs5611_AddTaskForReading+0x46>

    p_owner->__read_period = read_period;
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	897a      	ldrh	r2, [r7, #10]
 801ade0:	841a      	strh	r2, [r3, #32]
    p_owner->__evt_read = evt_read;
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	687a      	ldr	r2, [r7, #4]
 801ade6:	62da      	str	r2, [r3, #44]	; 0x2c
    p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	2201      	movs	r2, #1
 801adec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    return TRUE;
 801adf0:	2301      	movs	r3, #1
}
 801adf2:	4618      	mov	r0, r3
 801adf4:	3710      	adds	r7, #16
 801adf6:	46bd      	mov	sp, r7
 801adf8:	bd80      	pop	{r7, pc}
 801adfa:	bf00      	nop
 801adfc:	0801aa5d 	.word	0x0801aa5d

0801ae00 <_doTask>:
#include "sound/pif_buzzer.h"


static uint16_t _doTask(PifTask* p_task)
{
 801ae00:	b580      	push	{r7, lr}
 801ae02:	b086      	sub	sp, #24
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
	PifBuzzer* p_owner = (PifBuzzer*)p_task->_p_client;
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	68db      	ldr	r3, [r3, #12]
 801ae0c:	613b      	str	r3, [r7, #16]
	uint8_t repeat;
	uint16_t sound_10ms, delay = 0;
 801ae0e:	2300      	movs	r3, #0
 801ae10:	82fb      	strh	r3, [r7, #22]

	sound_10ms = p_owner->__p_sound_10ms[p_owner->__pos];
 801ae12:	693b      	ldr	r3, [r7, #16]
 801ae14:	691b      	ldr	r3, [r3, #16]
 801ae16:	693a      	ldr	r2, [r7, #16]
 801ae18:	7d12      	ldrb	r2, [r2, #20]
 801ae1a:	4413      	add	r3, r2
 801ae1c:	781b      	ldrb	r3, [r3, #0]
 801ae1e:	81fb      	strh	r3, [r7, #14]
	switch (p_owner->_state) {
 801ae20:	693b      	ldr	r3, [r7, #16]
 801ae22:	7b1b      	ldrb	r3, [r3, #12]
 801ae24:	3b01      	subs	r3, #1
 801ae26:	2b03      	cmp	r3, #3
 801ae28:	d87f      	bhi.n	801af2a <_doTask+0x12a>
 801ae2a:	a201      	add	r2, pc, #4	; (adr r2, 801ae30 <_doTask+0x30>)
 801ae2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae30:	0801ae41 	.word	0x0801ae41
 801ae34:	0801ae63 	.word	0x0801ae63
 801ae38:	0801ae85 	.word	0x0801ae85
 801ae3c:	0801aef7 	.word	0x0801aef7
	case BS_START:
		(*p_owner->__act_action)(p_owner->_id, ON);
 801ae40:	693b      	ldr	r3, [r7, #16]
 801ae42:	699b      	ldr	r3, [r3, #24]
 801ae44:	693a      	ldr	r2, [r7, #16]
 801ae46:	8892      	ldrh	r2, [r2, #4]
 801ae48:	2101      	movs	r1, #1
 801ae4a:	4610      	mov	r0, r2
 801ae4c:	4798      	blx	r3
		p_owner->__pos++;
 801ae4e:	693b      	ldr	r3, [r7, #16]
 801ae50:	7d1b      	ldrb	r3, [r3, #20]
 801ae52:	3301      	adds	r3, #1
 801ae54:	b2da      	uxtb	r2, r3
 801ae56:	693b      	ldr	r3, [r7, #16]
 801ae58:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_ON;
 801ae5a:	693b      	ldr	r3, [r7, #16]
 801ae5c:	2202      	movs	r2, #2
 801ae5e:	731a      	strb	r2, [r3, #12]
		break;
 801ae60:	e064      	b.n	801af2c <_doTask+0x12c>

	case BS_ON:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801ae62:	693b      	ldr	r3, [r7, #16]
 801ae64:	699b      	ldr	r3, [r3, #24]
 801ae66:	693a      	ldr	r2, [r7, #16]
 801ae68:	8892      	ldrh	r2, [r2, #4]
 801ae6a:	2100      	movs	r1, #0
 801ae6c:	4610      	mov	r0, r2
 801ae6e:	4798      	blx	r3
		p_owner->__pos++;
 801ae70:	693b      	ldr	r3, [r7, #16]
 801ae72:	7d1b      	ldrb	r3, [r3, #20]
 801ae74:	3301      	adds	r3, #1
 801ae76:	b2da      	uxtb	r2, r3
 801ae78:	693b      	ldr	r3, [r7, #16]
 801ae7a:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_OFF;
 801ae7c:	693b      	ldr	r3, [r7, #16]
 801ae7e:	2203      	movs	r2, #3
 801ae80:	731a      	strb	r2, [r3, #12]
		break;
 801ae82:	e053      	b.n	801af2c <_doTask+0x12c>

	case BS_OFF:
		if (sound_10ms < 0xF0) {
 801ae84:	89fb      	ldrh	r3, [r7, #14]
 801ae86:	2bef      	cmp	r3, #239	; 0xef
 801ae88:	d810      	bhi.n	801aeac <_doTask+0xac>
			(*p_owner->__act_action)(p_owner->_id, ON);
 801ae8a:	693b      	ldr	r3, [r7, #16]
 801ae8c:	699b      	ldr	r3, [r3, #24]
 801ae8e:	693a      	ldr	r2, [r7, #16]
 801ae90:	8892      	ldrh	r2, [r2, #4]
 801ae92:	2101      	movs	r1, #1
 801ae94:	4610      	mov	r0, r2
 801ae96:	4798      	blx	r3
			p_owner->__pos++;
 801ae98:	693b      	ldr	r3, [r7, #16]
 801ae9a:	7d1b      	ldrb	r3, [r3, #20]
 801ae9c:	3301      	adds	r3, #1
 801ae9e:	b2da      	uxtb	r2, r3
 801aea0:	693b      	ldr	r3, [r7, #16]
 801aea2:	751a      	strb	r2, [r3, #20]
			p_owner->_state = BS_ON;
 801aea4:	693b      	ldr	r3, [r7, #16]
 801aea6:	2202      	movs	r2, #2
 801aea8:	731a      	strb	r2, [r3, #12]
			else {
				p_owner->_state = BS_STOP;
			}
			delay = 1;
		}
		break;
 801aeaa:	e03f      	b.n	801af2c <_doTask+0x12c>
		else if (sound_10ms == 0xF0) {
 801aeac:	89fb      	ldrh	r3, [r7, #14]
 801aeae:	2bf0      	cmp	r3, #240	; 0xf0
 801aeb0:	d105      	bne.n	801aebe <_doTask+0xbe>
			p_owner->_state = BS_STOP;
 801aeb2:	693b      	ldr	r3, [r7, #16]
 801aeb4:	2204      	movs	r2, #4
 801aeb6:	731a      	strb	r2, [r3, #12]
			delay = 1;
 801aeb8:	2301      	movs	r3, #1
 801aeba:	82fb      	strh	r3, [r7, #22]
		break;
 801aebc:	e036      	b.n	801af2c <_doTask+0x12c>
			repeat = sound_10ms - 0xF0;
 801aebe:	89fb      	ldrh	r3, [r7, #14]
 801aec0:	b2db      	uxtb	r3, r3
 801aec2:	3310      	adds	r3, #16
 801aec4:	737b      	strb	r3, [r7, #13]
			if (p_owner->__repeat < repeat) {
 801aec6:	693b      	ldr	r3, [r7, #16]
 801aec8:	7d5b      	ldrb	r3, [r3, #21]
 801aeca:	7b7a      	ldrb	r2, [r7, #13]
 801aecc:	429a      	cmp	r2, r3
 801aece:	d90c      	bls.n	801aeea <_doTask+0xea>
				p_owner->__pos = 0;
 801aed0:	693b      	ldr	r3, [r7, #16]
 801aed2:	2200      	movs	r2, #0
 801aed4:	751a      	strb	r2, [r3, #20]
				p_owner->__repeat++;
 801aed6:	693b      	ldr	r3, [r7, #16]
 801aed8:	7d5b      	ldrb	r3, [r3, #21]
 801aeda:	3301      	adds	r3, #1
 801aedc:	b2da      	uxtb	r2, r3
 801aede:	693b      	ldr	r3, [r7, #16]
 801aee0:	755a      	strb	r2, [r3, #21]
				p_owner->_state = BS_START;
 801aee2:	693b      	ldr	r3, [r7, #16]
 801aee4:	2201      	movs	r2, #1
 801aee6:	731a      	strb	r2, [r3, #12]
 801aee8:	e002      	b.n	801aef0 <_doTask+0xf0>
				p_owner->_state = BS_STOP;
 801aeea:	693b      	ldr	r3, [r7, #16]
 801aeec:	2204      	movs	r2, #4
 801aeee:	731a      	strb	r2, [r3, #12]
			delay = 1;
 801aef0:	2301      	movs	r3, #1
 801aef2:	82fb      	strh	r3, [r7, #22]
		break;
 801aef4:	e01a      	b.n	801af2c <_doTask+0x12c>

	case BS_STOP:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801aef6:	693b      	ldr	r3, [r7, #16]
 801aef8:	699b      	ldr	r3, [r3, #24]
 801aefa:	693a      	ldr	r2, [r7, #16]
 801aefc:	8892      	ldrh	r2, [r2, #4]
 801aefe:	2100      	movs	r1, #0
 801af00:	4610      	mov	r0, r2
 801af02:	4798      	blx	r3
		p_owner->_state = BS_IDLE;
 801af04:	693b      	ldr	r3, [r7, #16]
 801af06:	2200      	movs	r2, #0
 801af08:	731a      	strb	r2, [r3, #12]
		if (p_owner->evt_finish) (*p_owner->evt_finish)(p_owner->_id);
 801af0a:	693b      	ldr	r3, [r7, #16]
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d005      	beq.n	801af1e <_doTask+0x11e>
 801af12:	693b      	ldr	r3, [r7, #16]
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	693a      	ldr	r2, [r7, #16]
 801af18:	8892      	ldrh	r2, [r2, #4]
 801af1a:	4610      	mov	r0, r2
 801af1c:	4798      	blx	r3
		delay = 1;
 801af1e:	2301      	movs	r3, #1
 801af20:	82fb      	strh	r3, [r7, #22]
		p_task->pause = TRUE;
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	2201      	movs	r2, #1
 801af26:	701a      	strb	r2, [r3, #0]
		break;
 801af28:	e000      	b.n	801af2c <_doTask+0x12c>

	default:
		break;
 801af2a:	bf00      	nop
	}
	return delay ? delay : sound_10ms * 10;
 801af2c:	8afb      	ldrh	r3, [r7, #22]
 801af2e:	2b00      	cmp	r3, #0
 801af30:	d106      	bne.n	801af40 <_doTask+0x140>
 801af32:	89fb      	ldrh	r3, [r7, #14]
 801af34:	461a      	mov	r2, r3
 801af36:	0092      	lsls	r2, r2, #2
 801af38:	4413      	add	r3, r2
 801af3a:	005b      	lsls	r3, r3, #1
 801af3c:	b29b      	uxth	r3, r3
 801af3e:	e000      	b.n	801af42 <_doTask+0x142>
 801af40:	8afb      	ldrh	r3, [r7, #22]
}
 801af42:	4618      	mov	r0, r3
 801af44:	3718      	adds	r7, #24
 801af46:	46bd      	mov	sp, r7
 801af48:	bd80      	pop	{r7, pc}
 801af4a:	bf00      	nop

0801af4c <pifBuzzer_Init>:

BOOL pifBuzzer_Init(PifBuzzer* p_owner, PifId id, PifActBuzzerAction act_action)
{
 801af4c:	b580      	push	{r7, lr}
 801af4e:	b086      	sub	sp, #24
 801af50:	af02      	add	r7, sp, #8
 801af52:	60f8      	str	r0, [r7, #12]
 801af54:	460b      	mov	r3, r1
 801af56:	607a      	str	r2, [r7, #4]
 801af58:	817b      	strh	r3, [r7, #10]
	if (!p_owner || !act_action) {
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d002      	beq.n	801af66 <pifBuzzer_Init+0x1a>
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	2b00      	cmp	r3, #0
 801af64:	d104      	bne.n	801af70 <pifBuzzer_Init+0x24>
		pif_error = E_INVALID_PARAM;
 801af66:	4b18      	ldr	r3, [pc, #96]	; (801afc8 <pifBuzzer_Init+0x7c>)
 801af68:	2201      	movs	r2, #1
 801af6a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801af6c:	2300      	movs	r3, #0
 801af6e:	e026      	b.n	801afbe <pifBuzzer_Init+0x72>
	}

	memset(p_owner, 0, sizeof(PifBuzzer));
 801af70:	221c      	movs	r2, #28
 801af72:	2100      	movs	r1, #0
 801af74:	68f8      	ldr	r0, [r7, #12]
 801af76:	f008 f989 	bl	802328c <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, 1, _doTask, p_owner, FALSE);
 801af7a:	2300      	movs	r3, #0
 801af7c:	9300      	str	r3, [sp, #0]
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	4a12      	ldr	r2, [pc, #72]	; (801afcc <pifBuzzer_Init+0x80>)
 801af82:	2101      	movs	r1, #1
 801af84:	2004      	movs	r0, #4
 801af86:	f7f9 fc53 	bl	8014830 <pifTaskManager_Add>
 801af8a:	4602      	mov	r2, r0
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	609a      	str	r2, [r3, #8]
	if (!p_owner->_p_task) return FALSE;
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	689b      	ldr	r3, [r3, #8]
 801af94:	2b00      	cmp	r3, #0
 801af96:	d101      	bne.n	801af9c <pifBuzzer_Init+0x50>
 801af98:	2300      	movs	r3, #0
 801af9a:	e010      	b.n	801afbe <pifBuzzer_Init+0x72>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801af9c:	897b      	ldrh	r3, [r7, #10]
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d106      	bne.n	801afb0 <pifBuzzer_Init+0x64>
 801afa2:	4b0b      	ldr	r3, [pc, #44]	; (801afd0 <pifBuzzer_Init+0x84>)
 801afa4:	881b      	ldrh	r3, [r3, #0]
 801afa6:	1c5a      	adds	r2, r3, #1
 801afa8:	b291      	uxth	r1, r2
 801afaa:	4a09      	ldr	r2, [pc, #36]	; (801afd0 <pifBuzzer_Init+0x84>)
 801afac:	8011      	strh	r1, [r2, #0]
 801afae:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801afb0:	68fb      	ldr	r3, [r7, #12]
 801afb2:	897a      	ldrh	r2, [r7, #10]
 801afb4:	809a      	strh	r2, [r3, #4]
    p_owner->__act_action = act_action;
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	687a      	ldr	r2, [r7, #4]
 801afba:	619a      	str	r2, [r3, #24]
    return TRUE;
 801afbc:	2301      	movs	r3, #1
}
 801afbe:	4618      	mov	r0, r3
 801afc0:	3710      	adds	r7, #16
 801afc2:	46bd      	mov	sp, r7
 801afc4:	bd80      	pop	{r7, pc}
 801afc6:	bf00      	nop
 801afc8:	20001ef0 	.word	0x20001ef0
 801afcc:	0801ae01 	.word	0x0801ae01
 801afd0:	2000005c 	.word	0x2000005c

0801afd4 <pifBuzzer_Start>:
		p_owner->_p_task = NULL;
	}
}

BOOL pifBuzzer_Start(PifBuzzer* p_owner, const uint8_t* p_sound_10ms)
{
 801afd4:	b480      	push	{r7}
 801afd6:	b083      	sub	sp, #12
 801afd8:	af00      	add	r7, sp, #0
 801afda:	6078      	str	r0, [r7, #4]
 801afdc:	6039      	str	r1, [r7, #0]
	if (!p_owner->_p_task) return FALSE;
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	689b      	ldr	r3, [r3, #8]
 801afe2:	2b00      	cmp	r3, #0
 801afe4:	d101      	bne.n	801afea <pifBuzzer_Start+0x16>
 801afe6:	2300      	movs	r3, #0
 801afe8:	e010      	b.n	801b00c <pifBuzzer_Start+0x38>

	p_owner->__p_sound_10ms = p_sound_10ms;
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	683a      	ldr	r2, [r7, #0]
 801afee:	611a      	str	r2, [r3, #16]
	p_owner->__pos = 0;
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	2200      	movs	r2, #0
 801aff4:	751a      	strb	r2, [r3, #20]
	p_owner->__repeat = 0;
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	2200      	movs	r2, #0
 801affa:	755a      	strb	r2, [r3, #21]
	p_owner->_state = BS_START;
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	2201      	movs	r2, #1
 801b000:	731a      	strb	r2, [r3, #12]
	p_owner->_p_task->pause = FALSE;
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	689b      	ldr	r3, [r3, #8]
 801b006:	2200      	movs	r2, #0
 801b008:	701a      	strb	r2, [r3, #0]
	return TRUE;
 801b00a:	2301      	movs	r3, #1
}
 801b00c:	4618      	mov	r0, r3
 801b00e:	370c      	adds	r7, #12
 801b010:	46bd      	mov	sp, r7
 801b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b016:	4770      	bx	lr

0801b018 <pifBuzzer_Stop>:

void pifBuzzer_Stop(PifBuzzer* p_owner)
{
 801b018:	b480      	push	{r7}
 801b01a:	b083      	sub	sp, #12
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
	p_owner->_state = BS_STOP;
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	2204      	movs	r2, #4
 801b024:	731a      	strb	r2, [r3, #12]
}
 801b026:	bf00      	nop
 801b028:	370c      	adds	r7, #12
 801b02a:	46bd      	mov	sp, r7
 801b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b030:	4770      	bx	lr

0801b032 <_actStorageI2c_Read_1>:
#include "core/pif_task.h"
#include "storage/pif_storage.h"


static BOOL _actStorageI2c_Read_1(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 801b032:	b580      	push	{r7, lr}
 801b034:	b086      	sub	sp, #24
 801b036:	af02      	add	r7, sp, #8
 801b038:	60f8      	str	r0, [r7, #12]
 801b03a:	60b9      	str	r1, [r7, #8]
 801b03c:	607a      	str	r2, [r7, #4]
 801b03e:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 8);
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	7a19      	ldrb	r1, [r3, #8]
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	0a1b      	lsrs	r3, r3, #8
 801b048:	b2da      	uxtb	r2, r3
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	685b      	ldr	r3, [r3, #4]
 801b04e:	430a      	orrs	r2, r1
 801b050:	b2d2      	uxtb	r2, r2
 801b052:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFF, 1, dst, size)) return FALSE;
 801b054:	68fb      	ldr	r3, [r7, #12]
 801b056:	6858      	ldr	r0, [r3, #4]
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	b2d9      	uxtb	r1, r3
 801b05c:	683b      	ldr	r3, [r7, #0]
 801b05e:	9300      	str	r3, [sp, #0]
 801b060:	68bb      	ldr	r3, [r7, #8]
 801b062:	2201      	movs	r2, #1
 801b064:	f7f7 fc8e 	bl	8012984 <pifI2cDevice_Read>
 801b068:	4603      	mov	r3, r0
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d101      	bne.n	801b072 <_actStorageI2c_Read_1+0x40>
 801b06e:	2300      	movs	r3, #0
 801b070:	e000      	b.n	801b074 <_actStorageI2c_Read_1+0x42>
	return TRUE;
 801b072:	2301      	movs	r3, #1
}
 801b074:	4618      	mov	r0, r3
 801b076:	3710      	adds	r7, #16
 801b078:	46bd      	mov	sp, r7
 801b07a:	bd80      	pop	{r7, pc}

0801b07c <_actStorageI2c_Write_1>:

static BOOL _actStorageI2c_Write_1(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801b07c:	b580      	push	{r7, lr}
 801b07e:	b086      	sub	sp, #24
 801b080:	af02      	add	r7, sp, #8
 801b082:	60f8      	str	r0, [r7, #12]
 801b084:	60b9      	str	r1, [r7, #8]
 801b086:	607a      	str	r2, [r7, #4]
 801b088:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 8);
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	7a19      	ldrb	r1, [r3, #8]
 801b08e:	68bb      	ldr	r3, [r7, #8]
 801b090:	0a1b      	lsrs	r3, r3, #8
 801b092:	b2da      	uxtb	r2, r3
 801b094:	68fb      	ldr	r3, [r7, #12]
 801b096:	685b      	ldr	r3, [r3, #4]
 801b098:	430a      	orrs	r2, r1
 801b09a:	b2d2      	uxtb	r2, r2
 801b09c:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFF, 1, src, size)) return FALSE;
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	6858      	ldr	r0, [r3, #4]
 801b0a2:	68bb      	ldr	r3, [r7, #8]
 801b0a4:	b2d9      	uxtb	r1, r3
 801b0a6:	683b      	ldr	r3, [r7, #0]
 801b0a8:	9300      	str	r3, [sp, #0]
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	2201      	movs	r2, #1
 801b0ae:	f7f7 fd97 	bl	8012be0 <pifI2cDevice_Write>
 801b0b2:	4603      	mov	r3, r0
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d101      	bne.n	801b0bc <_actStorageI2c_Write_1+0x40>
 801b0b8:	2300      	movs	r3, #0
 801b0ba:	e009      	b.n	801b0d0 <_actStorageI2c_Write_1+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	7a5b      	ldrb	r3, [r3, #9]
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d004      	beq.n	801b0ce <_actStorageI2c_Write_1+0x52>
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	7a5b      	ldrb	r3, [r3, #9]
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f7f9 fded 	bl	8014ca8 <pifTaskManager_YieldMs>
	return TRUE;
 801b0ce:	2301      	movs	r3, #1
}
 801b0d0:	4618      	mov	r0, r3
 801b0d2:	3710      	adds	r7, #16
 801b0d4:	46bd      	mov	sp, r7
 801b0d6:	bd80      	pop	{r7, pc}

0801b0d8 <_actStorageI2c_Read_2>:

static BOOL _actStorageI2c_Read_2(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 801b0d8:	b580      	push	{r7, lr}
 801b0da:	b086      	sub	sp, #24
 801b0dc:	af02      	add	r7, sp, #8
 801b0de:	60f8      	str	r0, [r7, #12]
 801b0e0:	60b9      	str	r1, [r7, #8]
 801b0e2:	607a      	str	r2, [r7, #4]
 801b0e4:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 16);
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	7a19      	ldrb	r1, [r3, #8]
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	0c1b      	lsrs	r3, r3, #16
 801b0ee:	b2da      	uxtb	r2, r3
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	685b      	ldr	r3, [r3, #4]
 801b0f4:	430a      	orrs	r2, r1
 801b0f6:	b2d2      	uxtb	r2, r2
 801b0f8:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFFFF, 2, dst, size)) return FALSE;
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	6858      	ldr	r0, [r3, #4]
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	b299      	uxth	r1, r3
 801b102:	683b      	ldr	r3, [r7, #0]
 801b104:	9300      	str	r3, [sp, #0]
 801b106:	68bb      	ldr	r3, [r7, #8]
 801b108:	2202      	movs	r2, #2
 801b10a:	f7f7 fc3b 	bl	8012984 <pifI2cDevice_Read>
 801b10e:	4603      	mov	r3, r0
 801b110:	2b00      	cmp	r3, #0
 801b112:	d101      	bne.n	801b118 <_actStorageI2c_Read_2+0x40>
 801b114:	2300      	movs	r3, #0
 801b116:	e000      	b.n	801b11a <_actStorageI2c_Read_2+0x42>
	return TRUE;
 801b118:	2301      	movs	r3, #1
}
 801b11a:	4618      	mov	r0, r3
 801b11c:	3710      	adds	r7, #16
 801b11e:	46bd      	mov	sp, r7
 801b120:	bd80      	pop	{r7, pc}

0801b122 <_actStorageI2c_Write_2>:

static BOOL _actStorageI2c_Write_2(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801b122:	b580      	push	{r7, lr}
 801b124:	b086      	sub	sp, #24
 801b126:	af02      	add	r7, sp, #8
 801b128:	60f8      	str	r0, [r7, #12]
 801b12a:	60b9      	str	r1, [r7, #8]
 801b12c:	607a      	str	r2, [r7, #4]
 801b12e:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 16);
 801b130:	68fb      	ldr	r3, [r7, #12]
 801b132:	7a19      	ldrb	r1, [r3, #8]
 801b134:	68bb      	ldr	r3, [r7, #8]
 801b136:	0c1b      	lsrs	r3, r3, #16
 801b138:	b2da      	uxtb	r2, r3
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	685b      	ldr	r3, [r3, #4]
 801b13e:	430a      	orrs	r2, r1
 801b140:	b2d2      	uxtb	r2, r2
 801b142:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFFFF, 2, src, size)) return FALSE;
 801b144:	68fb      	ldr	r3, [r7, #12]
 801b146:	6858      	ldr	r0, [r3, #4]
 801b148:	68bb      	ldr	r3, [r7, #8]
 801b14a:	b299      	uxth	r1, r3
 801b14c:	683b      	ldr	r3, [r7, #0]
 801b14e:	9300      	str	r3, [sp, #0]
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	2202      	movs	r2, #2
 801b154:	f7f7 fd44 	bl	8012be0 <pifI2cDevice_Write>
 801b158:	4603      	mov	r3, r0
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d101      	bne.n	801b162 <_actStorageI2c_Write_2+0x40>
 801b15e:	2300      	movs	r3, #0
 801b160:	e009      	b.n	801b176 <_actStorageI2c_Write_2+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 801b162:	68fb      	ldr	r3, [r7, #12]
 801b164:	7a5b      	ldrb	r3, [r3, #9]
 801b166:	2b00      	cmp	r3, #0
 801b168:	d004      	beq.n	801b174 <_actStorageI2c_Write_2+0x52>
 801b16a:	68fb      	ldr	r3, [r7, #12]
 801b16c:	7a5b      	ldrb	r3, [r3, #9]
 801b16e:	4618      	mov	r0, r3
 801b170:	f7f9 fd9a 	bl	8014ca8 <pifTaskManager_YieldMs>
	return TRUE;
 801b174:	2301      	movs	r3, #1
}
 801b176:	4618      	mov	r0, r3
 801b178:	3710      	adds	r7, #16
 801b17a:	46bd      	mov	sp, r7
 801b17c:	bd80      	pop	{r7, pc}
	...

0801b180 <pifStorage_AttachI2c>:
	p_owner->__act_write = act_write;
	return TRUE;
}

BOOL pifStorage_AttachI2c(PifStorage* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801b180:	b580      	push	{r7, lr}
 801b182:	b084      	sub	sp, #16
 801b184:	af00      	add	r7, sp, #0
 801b186:	60f8      	str	r0, [r7, #12]
 801b188:	60b9      	str	r1, [r7, #8]
 801b18a:	4611      	mov	r1, r2
 801b18c:	461a      	mov	r2, r3
 801b18e:	460b      	mov	r3, r1
 801b190:	71fb      	strb	r3, [r7, #7]
 801b192:	4613      	mov	r3, r2
 801b194:	71bb      	strb	r3, [r7, #6]
    if (!p_owner || !p_port) {
 801b196:	68fb      	ldr	r3, [r7, #12]
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d002      	beq.n	801b1a2 <pifStorage_AttachI2c+0x22>
 801b19c:	68bb      	ldr	r3, [r7, #8]
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d104      	bne.n	801b1ac <pifStorage_AttachI2c+0x2c>
    	pif_error = E_INVALID_PARAM;
 801b1a2:	4b1c      	ldr	r3, [pc, #112]	; (801b214 <pifStorage_AttachI2c+0x94>)
 801b1a4:	2201      	movs	r2, #1
 801b1a6:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b1a8:	2300      	movs	r3, #0
 801b1aa:	e02f      	b.n	801b20c <pifStorage_AttachI2c+0x8c>
    }

	p_owner->_p_i2c = pifI2cPort_AddDevice(p_port);
 801b1ac:	68b8      	ldr	r0, [r7, #8]
 801b1ae:	f7f7 fbb1 	bl	8012914 <pifI2cPort_AddDevice>
 801b1b2:	4602      	mov	r2, r0
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	685b      	ldr	r3, [r3, #4]
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d101      	bne.n	801b1c4 <pifStorage_AttachI2c+0x44>
 801b1c0:	2300      	movs	r3, #0
 801b1c2:	e023      	b.n	801b20c <pifStorage_AttachI2c+0x8c>

    p_owner->__addr = addr;
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	79fa      	ldrb	r2, [r7, #7]
 801b1c8:	721a      	strb	r2, [r3, #8]
    p_owner->_p_i2c->addr = addr;
 801b1ca:	68fb      	ldr	r3, [r7, #12]
 801b1cc:	685b      	ldr	r3, [r3, #4]
 801b1ce:	79fa      	ldrb	r2, [r7, #7]
 801b1d0:	701a      	strb	r2, [r3, #0]
    p_owner->__write_delay_ms = write_delay_ms;
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	7e3a      	ldrb	r2, [r7, #24]
 801b1d6:	725a      	strb	r2, [r3, #9]

    switch (i_addr_size) {
 801b1d8:	79bb      	ldrb	r3, [r7, #6]
 801b1da:	2b01      	cmp	r3, #1
 801b1dc:	d007      	beq.n	801b1ee <pifStorage_AttachI2c+0x6e>
 801b1de:	2b02      	cmp	r3, #2
 801b1e0:	d00c      	beq.n	801b1fc <pifStorage_AttachI2c+0x7c>
		p_owner->__act_read = _actStorageI2c_Read_2;
		p_owner->__act_write = _actStorageI2c_Write_2;
    	break;

    default:
    	goto fail;
 801b1e2:	bf00      	nop
    }
	return TRUE;

fail:
	pifStorage_DetachI2c(p_owner);
 801b1e4:	68f8      	ldr	r0, [r7, #12]
 801b1e6:	f000 f81f 	bl	801b228 <pifStorage_DetachI2c>
	return FALSE;
 801b1ea:	2300      	movs	r3, #0
 801b1ec:	e00e      	b.n	801b20c <pifStorage_AttachI2c+0x8c>
		p_owner->__act_read = _actStorageI2c_Read_1;
 801b1ee:	68fb      	ldr	r3, [r7, #12]
 801b1f0:	4a09      	ldr	r2, [pc, #36]	; (801b218 <pifStorage_AttachI2c+0x98>)
 801b1f2:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_1;
 801b1f4:	68fb      	ldr	r3, [r7, #12]
 801b1f6:	4a09      	ldr	r2, [pc, #36]	; (801b21c <pifStorage_AttachI2c+0x9c>)
 801b1f8:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 801b1fa:	e006      	b.n	801b20a <pifStorage_AttachI2c+0x8a>
		p_owner->__act_read = _actStorageI2c_Read_2;
 801b1fc:	68fb      	ldr	r3, [r7, #12]
 801b1fe:	4a08      	ldr	r2, [pc, #32]	; (801b220 <pifStorage_AttachI2c+0xa0>)
 801b200:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_2;
 801b202:	68fb      	ldr	r3, [r7, #12]
 801b204:	4a07      	ldr	r2, [pc, #28]	; (801b224 <pifStorage_AttachI2c+0xa4>)
 801b206:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 801b208:	bf00      	nop
	return TRUE;
 801b20a:	2301      	movs	r3, #1
}
 801b20c:	4618      	mov	r0, r3
 801b20e:	3710      	adds	r7, #16
 801b210:	46bd      	mov	sp, r7
 801b212:	bd80      	pop	{r7, pc}
 801b214:	20001ef0 	.word	0x20001ef0
 801b218:	0801b033 	.word	0x0801b033
 801b21c:	0801b07d 	.word	0x0801b07d
 801b220:	0801b0d9 	.word	0x0801b0d9
 801b224:	0801b123 	.word	0x0801b123

0801b228 <pifStorage_DetachI2c>:

void pifStorage_DetachI2c(PifStorage* p_owner)
{
 801b228:	b580      	push	{r7, lr}
 801b22a:	b082      	sub	sp, #8
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	685b      	ldr	r3, [r3, #4]
 801b234:	2b00      	cmp	r3, #0
 801b236:	d00b      	beq.n	801b250 <pifStorage_DetachI2c+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	685b      	ldr	r3, [r3, #4]
 801b23c:	685a      	ldr	r2, [r3, #4]
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	685b      	ldr	r3, [r3, #4]
 801b242:	4619      	mov	r1, r3
 801b244:	4610      	mov	r0, r2
 801b246:	f7f7 fb89 	bl	801295c <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	2200      	movs	r2, #0
 801b24e:	605a      	str	r2, [r3, #4]
	}
	p_owner->__act_read = NULL;
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	2200      	movs	r2, #0
 801b254:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__act_write = NULL;
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	2200      	movs	r2, #0
 801b25a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801b25c:	bf00      	nop
 801b25e:	3708      	adds	r7, #8
 801b260:	46bd      	mov	sp, r7
 801b262:	bd80      	pop	{r7, pc}

0801b264 <pifStorage_IsFormat>:

#ifdef __PIF_NO_USE_INLINE__

BOOL pifStorage_IsFormat(PifStorage* p_owner)
{
 801b264:	b580      	push	{r7, lr}
 801b266:	b082      	sub	sp, #8
 801b268:	af00      	add	r7, sp, #0
 801b26a:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_is_format)(p_owner);
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	68db      	ldr	r3, [r3, #12]
 801b270:	6878      	ldr	r0, [r7, #4]
 801b272:	4798      	blx	r3
 801b274:	4603      	mov	r3, r0
}
 801b276:	4618      	mov	r0, r3
 801b278:	3708      	adds	r7, #8
 801b27a:	46bd      	mov	sp, r7
 801b27c:	bd80      	pop	{r7, pc}

0801b27e <pifStorage_Format>:

BOOL pifStorage_Format(PifStorage* p_owner)
{
 801b27e:	b580      	push	{r7, lr}
 801b280:	b082      	sub	sp, #8
 801b282:	af00      	add	r7, sp, #0
 801b284:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_format)(p_owner);
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	691b      	ldr	r3, [r3, #16]
 801b28a:	6878      	ldr	r0, [r7, #4]
 801b28c:	4798      	blx	r3
 801b28e:	4603      	mov	r3, r0
}
 801b290:	4618      	mov	r0, r3
 801b292:	3708      	adds	r7, #8
 801b294:	46bd      	mov	sp, r7
 801b296:	bd80      	pop	{r7, pc}

0801b298 <pifStorage_Create>:

PifStorageDataInfoP pifStorage_Create(PifStorage* p_owner, uint16_t id, uint16_t size)
{
 801b298:	b580      	push	{r7, lr}
 801b29a:	b082      	sub	sp, #8
 801b29c:	af00      	add	r7, sp, #0
 801b29e:	6078      	str	r0, [r7, #4]
 801b2a0:	460b      	mov	r3, r1
 801b2a2:	807b      	strh	r3, [r7, #2]
 801b2a4:	4613      	mov	r3, r2
 801b2a6:	803b      	strh	r3, [r7, #0]
	return (*p_owner->__fn_create)(p_owner, id, size);
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	695b      	ldr	r3, [r3, #20]
 801b2ac:	883a      	ldrh	r2, [r7, #0]
 801b2ae:	8879      	ldrh	r1, [r7, #2]
 801b2b0:	6878      	ldr	r0, [r7, #4]
 801b2b2:	4798      	blx	r3
 801b2b4:	4603      	mov	r3, r0
}
 801b2b6:	4618      	mov	r0, r3
 801b2b8:	3708      	adds	r7, #8
 801b2ba:	46bd      	mov	sp, r7
 801b2bc:	bd80      	pop	{r7, pc}

0801b2be <pifStorage_Open>:
{
	return (*p_owner->__fn_delete)(p_owner, id);
}

PifStorageDataInfoP pifStorage_Open(PifStorage* p_owner, uint16_t id)
{
 801b2be:	b580      	push	{r7, lr}
 801b2c0:	b082      	sub	sp, #8
 801b2c2:	af00      	add	r7, sp, #0
 801b2c4:	6078      	str	r0, [r7, #4]
 801b2c6:	460b      	mov	r3, r1
 801b2c8:	807b      	strh	r3, [r7, #2]
	return (*p_owner->__fn_open)(p_owner, id);
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	69db      	ldr	r3, [r3, #28]
 801b2ce:	887a      	ldrh	r2, [r7, #2]
 801b2d0:	4611      	mov	r1, r2
 801b2d2:	6878      	ldr	r0, [r7, #4]
 801b2d4:	4798      	blx	r3
 801b2d6:	4603      	mov	r3, r0
}
 801b2d8:	4618      	mov	r0, r3
 801b2da:	3708      	adds	r7, #8
 801b2dc:	46bd      	mov	sp, r7
 801b2de:	bd80      	pop	{r7, pc}

0801b2e0 <pifStorage_Read>:

BOOL pifStorage_Read(PifStorage* p_owner, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801b2e0:	b590      	push	{r4, r7, lr}
 801b2e2:	b085      	sub	sp, #20
 801b2e4:	af00      	add	r7, sp, #0
 801b2e6:	60f8      	str	r0, [r7, #12]
 801b2e8:	60b9      	str	r1, [r7, #8]
 801b2ea:	607a      	str	r2, [r7, #4]
 801b2ec:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_read)(p_owner, p_dst, p_src, size);
 801b2ee:	68fb      	ldr	r3, [r7, #12]
 801b2f0:	6a1c      	ldr	r4, [r3, #32]
 801b2f2:	683b      	ldr	r3, [r7, #0]
 801b2f4:	687a      	ldr	r2, [r7, #4]
 801b2f6:	68b9      	ldr	r1, [r7, #8]
 801b2f8:	68f8      	ldr	r0, [r7, #12]
 801b2fa:	47a0      	blx	r4
 801b2fc:	4603      	mov	r3, r0
}
 801b2fe:	4618      	mov	r0, r3
 801b300:	3714      	adds	r7, #20
 801b302:	46bd      	mov	sp, r7
 801b304:	bd90      	pop	{r4, r7, pc}

0801b306 <pifStorage_Write>:

BOOL pifStorage_Write(PifStorage* p_owner, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801b306:	b590      	push	{r4, r7, lr}
 801b308:	b085      	sub	sp, #20
 801b30a:	af00      	add	r7, sp, #0
 801b30c:	60f8      	str	r0, [r7, #12]
 801b30e:	60b9      	str	r1, [r7, #8]
 801b310:	607a      	str	r2, [r7, #4]
 801b312:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_write)(p_owner, p_dst, p_src, size);
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801b318:	683b      	ldr	r3, [r7, #0]
 801b31a:	687a      	ldr	r2, [r7, #4]
 801b31c:	68b9      	ldr	r1, [r7, #8]
 801b31e:	68f8      	ldr	r0, [r7, #12]
 801b320:	47a0      	blx	r4
 801b322:	4603      	mov	r3, r0
}
 801b324:	4618      	mov	r0, r3
 801b326:	3714      	adds	r7, #20
 801b328:	46bd      	mov	sp, r7
 801b32a:	bd90      	pop	{r4, r7, pc}

0801b32c <_getNewDataNode>:

#define DATA_NODE_NULL	0xFFFF


static uint16_t _getNewDataNode(PifStorageVar* p_owner)
{
 801b32c:	b480      	push	{r7}
 801b32e:	b085      	sub	sp, #20
 801b330:	af00      	add	r7, sp, #0
 801b332:	6078      	str	r0, [r7, #4]
	uint16_t node;

	node = p_owner->_p_info->free_node;
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b338:	899b      	ldrh	r3, [r3, #12]
 801b33a:	81fb      	strh	r3, [r7, #14]
	if (node == DATA_NODE_NULL) {
 801b33c:	89fb      	ldrh	r3, [r7, #14]
 801b33e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b342:	4293      	cmp	r3, r2
 801b344:	d105      	bne.n	801b352 <_getNewDataNode+0x26>
		pif_error = E_OVERFLOW_BUFFER;
 801b346:	4b0c      	ldr	r3, [pc, #48]	; (801b378 <_getNewDataNode+0x4c>)
 801b348:	2204      	movs	r2, #4
 801b34a:	701a      	strb	r2, [r3, #0]
		return DATA_NODE_NULL;
 801b34c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b350:	e00c      	b.n	801b36c <_getNewDataNode+0x40>
	}

	p_owner->_p_info->free_node = p_owner->__p_data_info[node].next_node;
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b356:	89fa      	ldrh	r2, [r7, #14]
 801b358:	4613      	mov	r3, r2
 801b35a:	005b      	lsls	r3, r3, #1
 801b35c:	4413      	add	r3, r2
 801b35e:	009b      	lsls	r3, r3, #2
 801b360:	18ca      	adds	r2, r1, r3
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b366:	88d2      	ldrh	r2, [r2, #6]
 801b368:	819a      	strh	r2, [r3, #12]
	return node;
 801b36a:	89fb      	ldrh	r3, [r7, #14]
}
 801b36c:	4618      	mov	r0, r3
 801b36e:	3714      	adds	r7, #20
 801b370:	46bd      	mov	sp, r7
 801b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b376:	4770      	bx	lr
 801b378:	20001ef0 	.word	0x20001ef0

0801b37c <_readData>:

static BOOL _readData(PifStorageVar* p_owner, uint8_t* dst, uint32_t src, size_t size, uint16_t sector_size)
{
 801b37c:	b590      	push	{r4, r7, lr}
 801b37e:	b087      	sub	sp, #28
 801b380:	af00      	add	r7, sp, #0
 801b382:	60f8      	str	r0, [r7, #12]
 801b384:	60b9      	str	r1, [r7, #8]
 801b386:	607a      	str	r2, [r7, #4]
 801b388:	603b      	str	r3, [r7, #0]
	uint32_t ptr, len;

	ptr = 0;
 801b38a:	2300      	movs	r3, #0
 801b38c:	617b      	str	r3, [r7, #20]
	while (size) {
 801b38e:	e01d      	b.n	801b3cc <_readData+0x50>
		len = size > sector_size ? sector_size : size;
 801b390:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801b392:	683a      	ldr	r2, [r7, #0]
 801b394:	4293      	cmp	r3, r2
 801b396:	bf28      	it	cs
 801b398:	4613      	movcs	r3, r2
 801b39a:	613b      	str	r3, [r7, #16]
		if (!(*p_owner->parent.__act_read)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801b3a0:	68f8      	ldr	r0, [r7, #12]
 801b3a2:	68ba      	ldr	r2, [r7, #8]
 801b3a4:	697b      	ldr	r3, [r7, #20]
 801b3a6:	18d1      	adds	r1, r2, r3
 801b3a8:	687a      	ldr	r2, [r7, #4]
 801b3aa:	697b      	ldr	r3, [r7, #20]
 801b3ac:	441a      	add	r2, r3
 801b3ae:	693b      	ldr	r3, [r7, #16]
 801b3b0:	47a0      	blx	r4
 801b3b2:	4603      	mov	r3, r0
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d101      	bne.n	801b3bc <_readData+0x40>
 801b3b8:	2300      	movs	r3, #0
 801b3ba:	e00b      	b.n	801b3d4 <_readData+0x58>

		ptr += len;
 801b3bc:	697a      	ldr	r2, [r7, #20]
 801b3be:	693b      	ldr	r3, [r7, #16]
 801b3c0:	4413      	add	r3, r2
 801b3c2:	617b      	str	r3, [r7, #20]
		size -= len;
 801b3c4:	683a      	ldr	r2, [r7, #0]
 801b3c6:	693b      	ldr	r3, [r7, #16]
 801b3c8:	1ad3      	subs	r3, r2, r3
 801b3ca:	603b      	str	r3, [r7, #0]
	while (size) {
 801b3cc:	683b      	ldr	r3, [r7, #0]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d1de      	bne.n	801b390 <_readData+0x14>
	}
	return TRUE;
 801b3d2:	2301      	movs	r3, #1
}
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	371c      	adds	r7, #28
 801b3d8:	46bd      	mov	sp, r7
 801b3da:	bd90      	pop	{r4, r7, pc}

0801b3dc <_writeData>:

static BOOL _writeData(PifStorageVar* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801b3dc:	b590      	push	{r4, r7, lr}
 801b3de:	b089      	sub	sp, #36	; 0x24
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	60f8      	str	r0, [r7, #12]
 801b3e4:	60b9      	str	r1, [r7, #8]
 801b3e6:	607a      	str	r2, [r7, #4]
 801b3e8:	603b      	str	r3, [r7, #0]
	uint16_t sector_size = p_owner->_p_info->sector_size;
 801b3ea:	68fb      	ldr	r3, [r7, #12]
 801b3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b3ee:	88db      	ldrh	r3, [r3, #6]
 801b3f0:	837b      	strh	r3, [r7, #26]
	uint32_t ptr, len;

	ptr = 0;
 801b3f2:	2300      	movs	r3, #0
 801b3f4:	61fb      	str	r3, [r7, #28]
	while (size) {
 801b3f6:	e01d      	b.n	801b434 <_writeData+0x58>
		len = size > sector_size ? sector_size : size;
 801b3f8:	8b7b      	ldrh	r3, [r7, #26]
 801b3fa:	683a      	ldr	r2, [r7, #0]
 801b3fc:	4293      	cmp	r3, r2
 801b3fe:	bf28      	it	cs
 801b400:	4613      	movcs	r3, r2
 801b402:	617b      	str	r3, [r7, #20]
		if (!(*p_owner->parent.__act_write)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801b408:	68f8      	ldr	r0, [r7, #12]
 801b40a:	68ba      	ldr	r2, [r7, #8]
 801b40c:	69fb      	ldr	r3, [r7, #28]
 801b40e:	18d1      	adds	r1, r2, r3
 801b410:	687a      	ldr	r2, [r7, #4]
 801b412:	69fb      	ldr	r3, [r7, #28]
 801b414:	441a      	add	r2, r3
 801b416:	697b      	ldr	r3, [r7, #20]
 801b418:	47a0      	blx	r4
 801b41a:	4603      	mov	r3, r0
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d101      	bne.n	801b424 <_writeData+0x48>
 801b420:	2300      	movs	r3, #0
 801b422:	e00b      	b.n	801b43c <_writeData+0x60>

		ptr += len;
 801b424:	69fa      	ldr	r2, [r7, #28]
 801b426:	697b      	ldr	r3, [r7, #20]
 801b428:	4413      	add	r3, r2
 801b42a:	61fb      	str	r3, [r7, #28]
		size -= len;
 801b42c:	683a      	ldr	r2, [r7, #0]
 801b42e:	697b      	ldr	r3, [r7, #20]
 801b430:	1ad3      	subs	r3, r2, r3
 801b432:	603b      	str	r3, [r7, #0]
	while (size) {
 801b434:	683b      	ldr	r3, [r7, #0]
 801b436:	2b00      	cmp	r3, #0
 801b438:	d1de      	bne.n	801b3f8 <_writeData+0x1c>
	}
	return TRUE;
 801b43a:	2301      	movs	r3, #1
}
 801b43c:	4618      	mov	r0, r3
 801b43e:	3724      	adds	r7, #36	; 0x24
 801b440:	46bd      	mov	sp, r7
 801b442:	bd90      	pop	{r4, r7, pc}

0801b444 <pifStorageVar_Init>:

BOOL pifStorageVar_Init(PifStorageVar* p_owner, PifId id)
{
 801b444:	b580      	push	{r7, lr}
 801b446:	b082      	sub	sp, #8
 801b448:	af00      	add	r7, sp, #0
 801b44a:	6078      	str	r0, [r7, #4]
 801b44c:	460b      	mov	r3, r1
 801b44e:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	2b00      	cmp	r3, #0
 801b454:	d104      	bne.n	801b460 <pifStorageVar_Init+0x1c>
    	pif_error = E_INVALID_PARAM;
 801b456:	4b18      	ldr	r3, [pc, #96]	; (801b4b8 <pifStorageVar_Init+0x74>)
 801b458:	2201      	movs	r2, #1
 801b45a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b45c:	2300      	movs	r3, #0
 801b45e:	e027      	b.n	801b4b0 <pifStorageVar_Init+0x6c>
    }

	memset(p_owner, 0, sizeof(PifStorageVar));
 801b460:	2248      	movs	r2, #72	; 0x48
 801b462:	2100      	movs	r1, #0
 801b464:	6878      	ldr	r0, [r7, #4]
 801b466:	f007 ff11 	bl	802328c <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801b46a:	887b      	ldrh	r3, [r7, #2]
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d106      	bne.n	801b47e <pifStorageVar_Init+0x3a>
 801b470:	4b12      	ldr	r3, [pc, #72]	; (801b4bc <pifStorageVar_Init+0x78>)
 801b472:	881b      	ldrh	r3, [r3, #0]
 801b474:	1c5a      	adds	r2, r3, #1
 801b476:	b291      	uxth	r1, r2
 801b478:	4a10      	ldr	r2, [pc, #64]	; (801b4bc <pifStorageVar_Init+0x78>)
 801b47a:	8011      	strh	r1, [r2, #0]
 801b47c:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	887a      	ldrh	r2, [r7, #2]
 801b482:	801a      	strh	r2, [r3, #0]

	p_owner->parent.__fn_is_format = pifStorageVar_IsFormat;
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	4a0e      	ldr	r2, [pc, #56]	; (801b4c0 <pifStorageVar_Init+0x7c>)
 801b488:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = pifStorageVar_Format;
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	4a0d      	ldr	r2, [pc, #52]	; (801b4c4 <pifStorageVar_Init+0x80>)
 801b48e:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = pifStorageVar_Create;
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	4a0d      	ldr	r2, [pc, #52]	; (801b4c8 <pifStorageVar_Init+0x84>)
 801b494:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = pifStorageVar_Delete;
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	4a0c      	ldr	r2, [pc, #48]	; (801b4cc <pifStorageVar_Init+0x88>)
 801b49a:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = pifStorageVar_Open;
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	4a0c      	ldr	r2, [pc, #48]	; (801b4d0 <pifStorageVar_Init+0x8c>)
 801b4a0:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = pifStorageVar_Read;
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	4a0b      	ldr	r2, [pc, #44]	; (801b4d4 <pifStorageVar_Init+0x90>)
 801b4a6:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = pifStorageVar_Write;
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	4a0b      	ldr	r2, [pc, #44]	; (801b4d8 <pifStorageVar_Init+0x94>)
 801b4ac:	625a      	str	r2, [r3, #36]	; 0x24
	return TRUE;
 801b4ae:	2301      	movs	r3, #1
}
 801b4b0:	4618      	mov	r0, r3
 801b4b2:	3708      	adds	r7, #8
 801b4b4:	46bd      	mov	sp, r7
 801b4b6:	bd80      	pop	{r7, pc}
 801b4b8:	20001ef0 	.word	0x20001ef0
 801b4bc:	2000005c 	.word	0x2000005c
 801b4c0:	0801b707 	.word	0x0801b707
 801b4c4:	0801b721 	.word	0x0801b721
 801b4c8:	0801b8c1 	.word	0x0801b8c1
 801b4cc:	0801bb6d 	.word	0x0801bb6d
 801b4d0:	0801bc89 	.word	0x0801bc89
 801b4d4:	0801bd1d 	.word	0x0801bd1d
 801b4d8:	0801bd75 	.word	0x0801bd75

0801b4dc <pifStorageVar_Clear>:

void pifStorageVar_Clear(PifStorageVar* p_owner)
{
 801b4dc:	b580      	push	{r7, lr}
 801b4de:	b082      	sub	sp, #8
 801b4e0:	af00      	add	r7, sp, #0
 801b4e2:	6078      	str	r0, [r7, #4]
    if (p_owner->__p_info_buffer) {
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d007      	beq.n	801b4fc <pifStorageVar_Clear+0x20>
        free(p_owner->__p_info_buffer);
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4f0:	4618      	mov	r0, r3
 801b4f2:	f007 feb5 	bl	8023260 <free>
        p_owner->__p_info_buffer = NULL;
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	2200      	movs	r2, #0
 801b4fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
	p_owner->parent.__fn_is_format = NULL;
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	2200      	movs	r2, #0
 801b500:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = NULL;
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	2200      	movs	r2, #0
 801b506:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = NULL;
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	2200      	movs	r2, #0
 801b50c:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = NULL;
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	2200      	movs	r2, #0
 801b512:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = NULL;
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	2200      	movs	r2, #0
 801b518:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = NULL;
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	2200      	movs	r2, #0
 801b51e:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = NULL;
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	2200      	movs	r2, #0
 801b524:	625a      	str	r2, [r3, #36]	; 0x24
}
 801b526:	bf00      	nop
 801b528:	3708      	adds	r7, #8
 801b52a:	46bd      	mov	sp, r7
 801b52c:	bd80      	pop	{r7, pc}
	...

0801b530 <pifStorageVar_SetMedia>:

BOOL pifStorageVar_SetMedia(PifStorageVar* p_owner, uint16_t sector_size, uint32_t storage_volume, uint8_t data_info_count)
{
 801b530:	b590      	push	{r4, r7, lr}
 801b532:	b089      	sub	sp, #36	; 0x24
 801b534:	af02      	add	r7, sp, #8
 801b536:	60f8      	str	r0, [r7, #12]
 801b538:	607a      	str	r2, [r7, #4]
 801b53a:	461a      	mov	r2, r3
 801b53c:	460b      	mov	r3, r1
 801b53e:	817b      	strh	r3, [r7, #10]
 801b540:	4613      	mov	r3, r2
 801b542:	727b      	strb	r3, [r7, #9]
    PifStorageVarInfo* p_info;

    if (!p_owner || sector_size < 16 || !storage_volume || !data_info_count) {
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	2b00      	cmp	r3, #0
 801b548:	d008      	beq.n	801b55c <pifStorageVar_SetMedia+0x2c>
 801b54a:	897b      	ldrh	r3, [r7, #10]
 801b54c:	2b0f      	cmp	r3, #15
 801b54e:	d905      	bls.n	801b55c <pifStorageVar_SetMedia+0x2c>
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	2b00      	cmp	r3, #0
 801b554:	d002      	beq.n	801b55c <pifStorageVar_SetMedia+0x2c>
 801b556:	7a7b      	ldrb	r3, [r7, #9]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d104      	bne.n	801b566 <pifStorageVar_SetMedia+0x36>
    	pif_error = E_INVALID_PARAM;
 801b55c:	4b5c      	ldr	r3, [pc, #368]	; (801b6d0 <pifStorageVar_SetMedia+0x1a0>)
 801b55e:	2201      	movs	r2, #1
 801b560:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b562:	2300      	movs	r3, #0
 801b564:	e0af      	b.n	801b6c6 <pifStorageVar_SetMedia+0x196>
    }

    uint32_t max_sector_count = storage_volume / sector_size;
 801b566:	897b      	ldrh	r3, [r7, #10]
 801b568:	687a      	ldr	r2, [r7, #4]
 801b56a:	fbb2 f3f3 	udiv	r3, r2, r3
 801b56e:	617b      	str	r3, [r7, #20]
    if (!max_sector_count || max_sector_count > 65535) {
 801b570:	697b      	ldr	r3, [r7, #20]
 801b572:	2b00      	cmp	r3, #0
 801b574:	d003      	beq.n	801b57e <pifStorageVar_SetMedia+0x4e>
 801b576:	697b      	ldr	r3, [r7, #20]
 801b578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b57c:	d304      	bcc.n	801b588 <pifStorageVar_SetMedia+0x58>
    	pif_error = E_INVALID_PARAM;
 801b57e:	4b54      	ldr	r3, [pc, #336]	; (801b6d0 <pifStorageVar_SetMedia+0x1a0>)
 801b580:	2201      	movs	r2, #1
 801b582:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b584:	2300      	movs	r3, #0
 801b586:	e09e      	b.n	801b6c6 <pifStorageVar_SetMedia+0x196>
    }

	p_owner->__info_sectors = (sizeof(PifStorageVarInfo) + sizeof(PifStorageVarDataInfo) * data_info_count + sector_size - 1) / sector_size;
 801b588:	7a7a      	ldrb	r2, [r7, #9]
 801b58a:	4613      	mov	r3, r2
 801b58c:	005b      	lsls	r3, r3, #1
 801b58e:	4413      	add	r3, r2
 801b590:	009b      	lsls	r3, r3, #2
 801b592:	461a      	mov	r2, r3
 801b594:	897b      	ldrh	r3, [r7, #10]
 801b596:	4413      	add	r3, r2
 801b598:	f103 020f 	add.w	r2, r3, #15
 801b59c:	897b      	ldrh	r3, [r7, #10]
 801b59e:	fbb2 f3f3 	udiv	r3, r2, r3
 801b5a2:	b29a      	uxth	r2, r3
 801b5a4:	68fb      	ldr	r3, [r7, #12]
 801b5a6:	879a      	strh	r2, [r3, #60]	; 0x3c
	p_owner->__info_bytes = p_owner->__info_sectors * sector_size;
 801b5a8:	68fb      	ldr	r3, [r7, #12]
 801b5aa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b5ac:	461a      	mov	r2, r3
 801b5ae:	897b      	ldrh	r3, [r7, #10]
 801b5b0:	fb02 f303 	mul.w	r3, r2, r3
 801b5b4:	461a      	mov	r2, r3
 801b5b6:	68fb      	ldr	r3, [r7, #12]
 801b5b8:	639a      	str	r2, [r3, #56]	; 0x38

    p_owner->__p_info_buffer = calloc(1, p_owner->__info_bytes);
 801b5ba:	68fb      	ldr	r3, [r7, #12]
 801b5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b5be:	4619      	mov	r1, r3
 801b5c0:	2001      	movs	r0, #1
 801b5c2:	f007 fe13 	bl	80231ec <calloc>
 801b5c6:	4603      	mov	r3, r0
 801b5c8:	461a      	mov	r2, r3
 801b5ca:	68fb      	ldr	r3, [r7, #12]
 801b5cc:	641a      	str	r2, [r3, #64]	; 0x40
    if (!p_owner->__p_info_buffer) {
 801b5ce:	68fb      	ldr	r3, [r7, #12]
 801b5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d104      	bne.n	801b5e0 <pifStorageVar_SetMedia+0xb0>
		pif_error = E_OUT_OF_HEAP;
 801b5d6:	4b3e      	ldr	r3, [pc, #248]	; (801b6d0 <pifStorageVar_SetMedia+0x1a0>)
 801b5d8:	2203      	movs	r2, #3
 801b5da:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801b5dc:	2300      	movs	r3, #0
 801b5de:	e072      	b.n	801b6c6 <pifStorageVar_SetMedia+0x196>
	}

    if (!_readData(p_owner, p_owner->__p_info_buffer, 0, p_owner->__info_bytes, sector_size)) {
 801b5e0:	68fb      	ldr	r3, [r7, #12]
 801b5e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801b5e4:	68fb      	ldr	r3, [r7, #12]
 801b5e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b5e8:	897b      	ldrh	r3, [r7, #10]
 801b5ea:	9300      	str	r3, [sp, #0]
 801b5ec:	4613      	mov	r3, r2
 801b5ee:	2200      	movs	r2, #0
 801b5f0:	68f8      	ldr	r0, [r7, #12]
 801b5f2:	f7ff fec3 	bl	801b37c <_readData>
 801b5f6:	4603      	mov	r3, r0
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d108      	bne.n	801b60e <pifStorageVar_SetMedia+0xde>
    	pif_error = E_ACCESS_FAILED;
 801b5fc:	4b34      	ldr	r3, [pc, #208]	; (801b6d0 <pifStorageVar_SetMedia+0x1a0>)
 801b5fe:	220d      	movs	r2, #13
 801b600:	701a      	strb	r2, [r3, #0]
    	goto fail;
 801b602:	bf00      	nop
	p_info->sector_size = sector_size;
	p_info->max_sector_count = max_sector_count;
	return TRUE;

fail:
	if (p_owner->__p_info_buffer) {
 801b604:	68fb      	ldr	r3, [r7, #12]
 801b606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b608:	2b00      	cmp	r3, #0
 801b60a:	d05b      	beq.n	801b6c4 <pifStorageVar_SetMedia+0x194>
 801b60c:	e052      	b.n	801b6b4 <pifStorageVar_SetMedia+0x184>
    p_owner->_p_info = (PifStorageVarInfo*)p_owner->__p_info_buffer;
 801b60e:	68fb      	ldr	r3, [r7, #12]
 801b610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__p_data_info = (PifStorageVarDataInfo*)(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo));
 801b616:	68fb      	ldr	r3, [r7, #12]
 801b618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b61a:	f103 0210 	add.w	r2, r3, #16
 801b61e:	68fb      	ldr	r3, [r7, #12]
 801b620:	645a      	str	r2, [r3, #68]	; 0x44
    p_info = p_owner->_p_info;
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b626:	613b      	str	r3, [r7, #16]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801b628:	693b      	ldr	r3, [r7, #16]
 801b62a:	781b      	ldrb	r3, [r3, #0]
 801b62c:	2b70      	cmp	r3, #112	; 0x70
 801b62e:	d121      	bne.n	801b674 <pifStorageVar_SetMedia+0x144>
 801b630:	693b      	ldr	r3, [r7, #16]
 801b632:	785b      	ldrb	r3, [r3, #1]
 801b634:	2b69      	cmp	r3, #105	; 0x69
 801b636:	d11d      	bne.n	801b674 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801b638:	693b      	ldr	r3, [r7, #16]
 801b63a:	789b      	ldrb	r3, [r3, #2]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801b63c:	2b66      	cmp	r3, #102	; 0x66
 801b63e:	d119      	bne.n	801b674 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801b640:	693b      	ldr	r3, [r7, #16]
 801b642:	78db      	ldrb	r3, [r3, #3]
 801b644:	2b73      	cmp	r3, #115	; 0x73
 801b646:	d115      	bne.n	801b674 <pifStorageVar_SetMedia+0x144>
    if (p_info->data_info_count != data_info_count) {
 801b648:	693b      	ldr	r3, [r7, #16]
 801b64a:	795b      	ldrb	r3, [r3, #5]
 801b64c:	7a7a      	ldrb	r2, [r7, #9]
 801b64e:	429a      	cmp	r2, r3
 801b650:	d112      	bne.n	801b678 <pifStorageVar_SetMedia+0x148>
    if (p_info->crc_16 != pifCrc16(p_owner->__p_info_buffer, sizeof(PifStorageVarInfo) - 6)) {
 801b652:	693b      	ldr	r3, [r7, #16]
 801b654:	89dc      	ldrh	r4, [r3, #14]
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b65a:	210a      	movs	r1, #10
 801b65c:	4618      	mov	r0, r3
 801b65e:	f7f6 fe5c 	bl	801231a <pifCrc16>
 801b662:	4603      	mov	r3, r0
 801b664:	429c      	cmp	r4, r3
 801b666:	d109      	bne.n	801b67c <pifStorageVar_SetMedia+0x14c>
	p_owner->__is_format = TRUE;
 801b668:	68fb      	ldr	r3, [r7, #12]
 801b66a:	2201      	movs	r2, #1
 801b66c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801b670:	2301      	movs	r3, #1
 801b672:	e028      	b.n	801b6c6 <pifStorageVar_SetMedia+0x196>
        goto set;
 801b674:	bf00      	nop
 801b676:	e002      	b.n	801b67e <pifStorageVar_SetMedia+0x14e>
        goto set;
 801b678:	bf00      	nop
 801b67a:	e000      	b.n	801b67e <pifStorageVar_SetMedia+0x14e>
        goto set;
 801b67c:	bf00      	nop
	p_info->magin_code[0] = 'p';
 801b67e:	693b      	ldr	r3, [r7, #16]
 801b680:	2270      	movs	r2, #112	; 0x70
 801b682:	701a      	strb	r2, [r3, #0]
	p_info->magin_code[1] = 'i';
 801b684:	693b      	ldr	r3, [r7, #16]
 801b686:	2269      	movs	r2, #105	; 0x69
 801b688:	705a      	strb	r2, [r3, #1]
	p_info->magin_code[2] = 'f';
 801b68a:	693b      	ldr	r3, [r7, #16]
 801b68c:	2266      	movs	r2, #102	; 0x66
 801b68e:	709a      	strb	r2, [r3, #2]
	p_info->magin_code[3] = 's';
 801b690:	693b      	ldr	r3, [r7, #16]
 801b692:	2273      	movs	r2, #115	; 0x73
 801b694:	70da      	strb	r2, [r3, #3]
	p_info->verion = 1;
 801b696:	693b      	ldr	r3, [r7, #16]
 801b698:	2201      	movs	r2, #1
 801b69a:	711a      	strb	r2, [r3, #4]
	p_info->data_info_count = data_info_count;
 801b69c:	693b      	ldr	r3, [r7, #16]
 801b69e:	7a7a      	ldrb	r2, [r7, #9]
 801b6a0:	715a      	strb	r2, [r3, #5]
	p_info->sector_size = sector_size;
 801b6a2:	693b      	ldr	r3, [r7, #16]
 801b6a4:	897a      	ldrh	r2, [r7, #10]
 801b6a6:	80da      	strh	r2, [r3, #6]
	p_info->max_sector_count = max_sector_count;
 801b6a8:	697b      	ldr	r3, [r7, #20]
 801b6aa:	b29a      	uxth	r2, r3
 801b6ac:	693b      	ldr	r3, [r7, #16]
 801b6ae:	811a      	strh	r2, [r3, #8]
	return TRUE;
 801b6b0:	2301      	movs	r3, #1
 801b6b2:	e008      	b.n	801b6c6 <pifStorageVar_SetMedia+0x196>
		free(p_owner->__p_info_buffer);
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6b8:	4618      	mov	r0, r3
 801b6ba:	f007 fdd1 	bl	8023260 <free>
		p_owner->__p_info_buffer = NULL;
 801b6be:	68fb      	ldr	r3, [r7, #12]
 801b6c0:	2200      	movs	r2, #0
 801b6c2:	641a      	str	r2, [r3, #64]	; 0x40
	}
    return FALSE;
 801b6c4:	2300      	movs	r3, #0
}
 801b6c6:	4618      	mov	r0, r3
 801b6c8:	371c      	adds	r7, #28
 801b6ca:	46bd      	mov	sp, r7
 801b6cc:	bd90      	pop	{r4, r7, pc}
 801b6ce:	bf00      	nop
 801b6d0:	20001ef0 	.word	0x20001ef0

0801b6d4 <pifStorageVar_AttachI2c>:
{
	return pifStorage_AttachActStorage(&p_owner->parent, act_read, act_write);
}

BOOL pifStorageVar_AttachI2c(PifStorageVar* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b086      	sub	sp, #24
 801b6d8:	af02      	add	r7, sp, #8
 801b6da:	60f8      	str	r0, [r7, #12]
 801b6dc:	60b9      	str	r1, [r7, #8]
 801b6de:	4611      	mov	r1, r2
 801b6e0:	461a      	mov	r2, r3
 801b6e2:	460b      	mov	r3, r1
 801b6e4:	71fb      	strb	r3, [r7, #7]
 801b6e6:	4613      	mov	r3, r2
 801b6e8:	71bb      	strb	r3, [r7, #6]
	return pifStorage_AttachI2c(&p_owner->parent, p_port, addr, i_addr_size, write_delay_ms);
 801b6ea:	68f8      	ldr	r0, [r7, #12]
 801b6ec:	79b9      	ldrb	r1, [r7, #6]
 801b6ee:	79fa      	ldrb	r2, [r7, #7]
 801b6f0:	7e3b      	ldrb	r3, [r7, #24]
 801b6f2:	9300      	str	r3, [sp, #0]
 801b6f4:	460b      	mov	r3, r1
 801b6f6:	68b9      	ldr	r1, [r7, #8]
 801b6f8:	f7ff fd42 	bl	801b180 <pifStorage_AttachI2c>
 801b6fc:	4603      	mov	r3, r0
}
 801b6fe:	4618      	mov	r0, r3
 801b700:	3710      	adds	r7, #16
 801b702:	46bd      	mov	sp, r7
 801b704:	bd80      	pop	{r7, pc}

0801b706 <pifStorageVar_IsFormat>:

#endif

BOOL pifStorageVar_IsFormat(PifStorage* p_parent)
{
 801b706:	b480      	push	{r7}
 801b708:	b083      	sub	sp, #12
 801b70a:	af00      	add	r7, sp, #0
 801b70c:	6078      	str	r0, [r7, #4]
	return ((PifStorageVar*)p_parent)->__is_format;
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801b714:	4618      	mov	r0, r3
 801b716:	370c      	adds	r7, #12
 801b718:	46bd      	mov	sp, r7
 801b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b71e:	4770      	bx	lr

0801b720 <pifStorageVar_Format>:

BOOL pifStorageVar_Format(PifStorage* p_parent)
{
 801b720:	b590      	push	{r4, r7, lr}
 801b722:	b08d      	sub	sp, #52	; 0x34
 801b724:	af00      	add	r7, sp, #0
 801b726:	6078      	str	r0, [r7, #4]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	627b      	str	r3, [r7, #36]	; 0x24
    PifStorageVarInfo* p_info = p_owner->_p_info;
 801b72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b730:	623b      	str	r3, [r7, #32]
    PifStorageVarDataInfo* p_data_info;
    uint8_t ptr, remain, k, len, data[16];

    if (!p_owner) {
 801b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b734:	2b00      	cmp	r3, #0
 801b736:	d104      	bne.n	801b742 <pifStorageVar_Format+0x22>
    	pif_error = E_INVALID_PARAM;
 801b738:	4b60      	ldr	r3, [pc, #384]	; (801b8bc <pifStorageVar_Format+0x19c>)
 801b73a:	2201      	movs	r2, #1
 801b73c:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b73e:	2300      	movs	r3, #0
 801b740:	e0b8      	b.n	801b8b4 <pifStorageVar_Format+0x194>
    }

	p_info->first_node = DATA_NODE_NULL;
 801b742:	6a3b      	ldr	r3, [r7, #32]
 801b744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b748:	815a      	strh	r2, [r3, #10]
	p_info->free_node = 0;
 801b74a:	6a3b      	ldr	r3, [r7, #32]
 801b74c:	2200      	movs	r2, #0
 801b74e:	819a      	strh	r2, [r3, #12]
    p_info->crc_16 = pifCrc16((uint8_t*)p_info, sizeof(PifStorageVarInfo) - 6);
 801b750:	210a      	movs	r1, #10
 801b752:	6a38      	ldr	r0, [r7, #32]
 801b754:	f7f6 fde1 	bl	801231a <pifCrc16>
 801b758:	4603      	mov	r3, r0
 801b75a:	461a      	mov	r2, r3
 801b75c:	6a3b      	ldr	r3, [r7, #32]
 801b75e:	81da      	strh	r2, [r3, #14]

    memset(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo), 0xFF, p_owner->__info_bytes - sizeof(PifStorageVarInfo));
 801b760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b764:	f103 0010 	add.w	r0, r3, #16
 801b768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b76c:	3b10      	subs	r3, #16
 801b76e:	461a      	mov	r2, r3
 801b770:	21ff      	movs	r1, #255	; 0xff
 801b772:	f007 fd8b 	bl	802328c <memset>

    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801b776:	2300      	movs	r3, #0
 801b778:	62bb      	str	r3, [r7, #40]	; 0x28
 801b77a:	e019      	b.n	801b7b0 <pifStorageVar_Format+0x90>
    	p_data_info = &p_owner->__p_data_info[i];
 801b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b77e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b782:	4613      	mov	r3, r2
 801b784:	005b      	lsls	r3, r3, #1
 801b786:	4413      	add	r3, r2
 801b788:	009b      	lsls	r3, r3, #2
 801b78a:	440b      	add	r3, r1
 801b78c:	61fb      	str	r3, [r7, #28]
    	p_data_info->next_node = i + 1;
 801b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b790:	b29b      	uxth	r3, r3
 801b792:	3301      	adds	r3, #1
 801b794:	b29a      	uxth	r2, r3
 801b796:	69fb      	ldr	r3, [r7, #28]
 801b798:	80da      	strh	r2, [r3, #6]
    	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801b79a:	2106      	movs	r1, #6
 801b79c:	69f8      	ldr	r0, [r7, #28]
 801b79e:	f7f6 fdbc 	bl	801231a <pifCrc16>
 801b7a2:	4603      	mov	r3, r0
 801b7a4:	461a      	mov	r2, r3
 801b7a6:	69fb      	ldr	r3, [r7, #28]
 801b7a8:	815a      	strh	r2, [r3, #10]
    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801b7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7ac:	3301      	adds	r3, #1
 801b7ae:	62bb      	str	r3, [r7, #40]	; 0x28
 801b7b0:	6a3b      	ldr	r3, [r7, #32]
 801b7b2:	795b      	ldrb	r3, [r3, #5]
 801b7b4:	3b01      	subs	r3, #1
 801b7b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b7b8:	429a      	cmp	r2, r3
 801b7ba:	dbdf      	blt.n	801b77c <pifStorageVar_Format+0x5c>
	}
	p_data_info = &p_owner->__p_data_info[p_info->data_info_count - 1];
 801b7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b7c0:	6a3b      	ldr	r3, [r7, #32]
 801b7c2:	795b      	ldrb	r3, [r3, #5]
 801b7c4:	4619      	mov	r1, r3
 801b7c6:	460b      	mov	r3, r1
 801b7c8:	005b      	lsls	r3, r3, #1
 801b7ca:	440b      	add	r3, r1
 801b7cc:	009b      	lsls	r3, r3, #2
 801b7ce:	3b0c      	subs	r3, #12
 801b7d0:	4413      	add	r3, r2
 801b7d2:	61fb      	str	r3, [r7, #28]
	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801b7d4:	2106      	movs	r1, #6
 801b7d6:	69f8      	ldr	r0, [r7, #28]
 801b7d8:	f7f6 fd9f 	bl	801231a <pifCrc16>
 801b7dc:	4603      	mov	r3, r0
 801b7de:	461a      	mov	r2, r3
 801b7e0:	69fb      	ldr	r3, [r7, #28]
 801b7e2:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801b7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b7ec:	2100      	movs	r1, #0
 801b7ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b7f0:	f7ff fdf4 	bl	801b3dc <_writeData>
 801b7f4:	4603      	mov	r3, r0
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d104      	bne.n	801b804 <pifStorageVar_Format+0xe4>
    	pif_error = E_ACCESS_FAILED;
 801b7fa:	4b30      	ldr	r3, [pc, #192]	; (801b8bc <pifStorageVar_Format+0x19c>)
 801b7fc:	220d      	movs	r2, #13
 801b7fe:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801b800:	2300      	movs	r3, #0
 801b802:	e057      	b.n	801b8b4 <pifStorageVar_Format+0x194>
    }

    ptr = 0;
 801b804:	2300      	movs	r3, #0
 801b806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    remain = p_owner->__info_bytes;
 801b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b80e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801b812:	e046      	b.n	801b8a2 <pifStorageVar_Format+0x182>
    	len = remain > 16 ? 16 : remain;
 801b814:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b818:	2b10      	cmp	r3, #16
 801b81a:	bf28      	it	cs
 801b81c:	2310      	movcs	r3, #16
 801b81e:	76fb      	strb	r3, [r7, #27]
        if (!(*p_owner->parent.__act_read)(p_parent, data, ptr, len)) {
 801b820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b822:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801b824:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b828:	7efb      	ldrb	r3, [r7, #27]
 801b82a:	f107 0108 	add.w	r1, r7, #8
 801b82e:	6878      	ldr	r0, [r7, #4]
 801b830:	47a0      	blx	r4
 801b832:	4603      	mov	r3, r0
 801b834:	2b00      	cmp	r3, #0
 801b836:	d104      	bne.n	801b842 <pifStorageVar_Format+0x122>
        	pif_error = E_ACCESS_FAILED;
 801b838:	4b20      	ldr	r3, [pc, #128]	; (801b8bc <pifStorageVar_Format+0x19c>)
 801b83a:	220d      	movs	r2, #13
 801b83c:	701a      	strb	r2, [r3, #0]
            return FALSE;
 801b83e:	2300      	movs	r3, #0
 801b840:	e038      	b.n	801b8b4 <pifStorageVar_Format+0x194>
        }
        for (k = 0; k < len; k++) {
 801b842:	2300      	movs	r3, #0
 801b844:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801b848:	e01a      	b.n	801b880 <pifStorageVar_Format+0x160>
        	if (p_owner->__p_info_buffer[ptr + k] != data[k]) {
 801b84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b84e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 801b852:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801b856:	440a      	add	r2, r1
 801b858:	4413      	add	r3, r2
 801b85a:	781a      	ldrb	r2, [r3, #0]
 801b85c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801b860:	3330      	adds	r3, #48	; 0x30
 801b862:	443b      	add	r3, r7
 801b864:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801b868:	429a      	cmp	r2, r3
 801b86a:	d004      	beq.n	801b876 <pifStorageVar_Format+0x156>
            	pif_error = E_IS_NOT_FORMATED;
 801b86c:	4b13      	ldr	r3, [pc, #76]	; (801b8bc <pifStorageVar_Format+0x19c>)
 801b86e:	220f      	movs	r2, #15
 801b870:	701a      	strb	r2, [r3, #0]
        		return FALSE;
 801b872:	2300      	movs	r3, #0
 801b874:	e01e      	b.n	801b8b4 <pifStorageVar_Format+0x194>
        for (k = 0; k < len; k++) {
 801b876:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801b87a:	3301      	adds	r3, #1
 801b87c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801b880:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801b884:	7efb      	ldrb	r3, [r7, #27]
 801b886:	429a      	cmp	r2, r3
 801b888:	d3df      	bcc.n	801b84a <pifStorageVar_Format+0x12a>
        	}
        }
        ptr += len;
 801b88a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b88e:	7efb      	ldrb	r3, [r7, #27]
 801b890:	4413      	add	r3, r2
 801b892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        remain -= len;
 801b896:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801b89a:	7efb      	ldrb	r3, [r7, #27]
 801b89c:	1ad3      	subs	r3, r2, r3
 801b89e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801b8a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d1b4      	bne.n	801b814 <pifStorageVar_Format+0xf4>
    }

    p_owner->__is_format = TRUE;
 801b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8ac:	2201      	movs	r2, #1
 801b8ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801b8b2:	2301      	movs	r3, #1
}
 801b8b4:	4618      	mov	r0, r3
 801b8b6:	3734      	adds	r7, #52	; 0x34
 801b8b8:	46bd      	mov	sp, r7
 801b8ba:	bd90      	pop	{r4, r7, pc}
 801b8bc:	20001ef0 	.word	0x20001ef0

0801b8c0 <pifStorageVar_Create>:

PifStorageDataInfoP pifStorageVar_Create(PifStorage* p_parent, uint16_t id, uint16_t size)
{
 801b8c0:	b580      	push	{r7, lr}
 801b8c2:	b08a      	sub	sp, #40	; 0x28
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
 801b8c8:	460b      	mov	r3, r1
 801b8ca:	807b      	strh	r3, [r7, #2]
 801b8cc:	4613      	mov	r3, r2
 801b8ce:	803b      	strh	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	61fb      	str	r3, [r7, #28]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801b8d4:	69fb      	ldr	r3, [r7, #28]
 801b8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b8d8:	61bb      	str	r3, [r7, #24]
	PifStorageVarDataInfo* p_cur_data;
	PifStorageVarDataInfo* p_new_data;
	uint16_t cur_node, new_node, last, sector_size = p_info->sector_size;
 801b8da:	69bb      	ldr	r3, [r7, #24]
 801b8dc:	88db      	ldrh	r3, [r3, #6]
 801b8de:	82fb      	strh	r3, [r7, #22]
	uint16_t sectors = (size + sector_size - 1) / sector_size;
 801b8e0:	883a      	ldrh	r2, [r7, #0]
 801b8e2:	8afb      	ldrh	r3, [r7, #22]
 801b8e4:	4413      	add	r3, r2
 801b8e6:	1e5a      	subs	r2, r3, #1
 801b8e8:	8afb      	ldrh	r3, [r7, #22]
 801b8ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8ee:	82bb      	strh	r3, [r7, #20]

    if (!p_owner || id == 0xFF) {
 801b8f0:	69fb      	ldr	r3, [r7, #28]
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d002      	beq.n	801b8fc <pifStorageVar_Create+0x3c>
 801b8f6:	887b      	ldrh	r3, [r7, #2]
 801b8f8:	2bff      	cmp	r3, #255	; 0xff
 801b8fa:	d104      	bne.n	801b906 <pifStorageVar_Create+0x46>
    	pif_error = E_INVALID_PARAM;
 801b8fc:	4b9a      	ldr	r3, [pc, #616]	; (801bb68 <pifStorageVar_Create+0x2a8>)
 801b8fe:	2201      	movs	r2, #1
 801b900:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801b902:	2300      	movs	r3, #0
 801b904:	e12b      	b.n	801bb5e <pifStorageVar_Create+0x29e>
    }

	if (!p_owner->__is_format) {
 801b906:	69fb      	ldr	r3, [r7, #28]
 801b908:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d104      	bne.n	801b91a <pifStorageVar_Create+0x5a>
		pif_error = E_IS_NOT_FORMATED;
 801b910:	4b95      	ldr	r3, [pc, #596]	; (801bb68 <pifStorageVar_Create+0x2a8>)
 801b912:	220f      	movs	r2, #15
 801b914:	701a      	strb	r2, [r3, #0]
		return NULL;
 801b916:	2300      	movs	r3, #0
 801b918:	e121      	b.n	801bb5e <pifStorageVar_Create+0x29e>
	}

	if (p_info->first_node == DATA_NODE_NULL) {
 801b91a:	69bb      	ldr	r3, [r7, #24]
 801b91c:	895b      	ldrh	r3, [r3, #10]
 801b91e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b922:	4293      	cmp	r3, r2
 801b924:	d127      	bne.n	801b976 <pifStorageVar_Create+0xb6>
		if (sectors > p_owner->_p_info->max_sector_count) {
 801b926:	69fb      	ldr	r3, [r7, #28]
 801b928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b92a:	891b      	ldrh	r3, [r3, #8]
 801b92c:	8aba      	ldrh	r2, [r7, #20]
 801b92e:	429a      	cmp	r2, r3
 801b930:	d904      	bls.n	801b93c <pifStorageVar_Create+0x7c>
			pif_error = E_OVERFLOW_BUFFER;
 801b932:	4b8d      	ldr	r3, [pc, #564]	; (801bb68 <pifStorageVar_Create+0x2a8>)
 801b934:	2204      	movs	r2, #4
 801b936:	701a      	strb	r2, [r3, #0]
			return NULL;
 801b938:	2300      	movs	r3, #0
 801b93a:	e110      	b.n	801bb5e <pifStorageVar_Create+0x29e>
		}

		last = p_owner->__info_sectors;
 801b93c:	69fb      	ldr	r3, [r7, #28]
 801b93e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b940:	843b      	strh	r3, [r7, #32]

		new_node = _getNewDataNode(p_owner);
 801b942:	69f8      	ldr	r0, [r7, #28]
 801b944:	f7ff fcf2 	bl	801b32c <_getNewDataNode>
 801b948:	4603      	mov	r3, r0
 801b94a:	81fb      	strh	r3, [r7, #14]

		p_new_data = &p_owner->__p_data_info[new_node];
 801b94c:	69fb      	ldr	r3, [r7, #28]
 801b94e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b950:	89fa      	ldrh	r2, [r7, #14]
 801b952:	4613      	mov	r3, r2
 801b954:	005b      	lsls	r3, r3, #1
 801b956:	4413      	add	r3, r2
 801b958:	009b      	lsls	r3, r3, #2
 801b95a:	440b      	add	r3, r1
 801b95c:	627b      	str	r3, [r7, #36]	; 0x24
		p_new_data->next_node = p_info->first_node;
 801b95e:	69bb      	ldr	r3, [r7, #24]
 801b960:	895a      	ldrh	r2, [r3, #10]
 801b962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b964:	80da      	strh	r2, [r3, #6]
		p_new_data->prev_node = DATA_NODE_NULL;
 801b966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b96c:	811a      	strh	r2, [r3, #8]

		p_info->first_node = new_node;
 801b96e:	69bb      	ldr	r3, [r7, #24]
 801b970:	89fa      	ldrh	r2, [r7, #14]
 801b972:	815a      	strh	r2, [r3, #10]
		goto save;
 801b974:	e0d1      	b.n	801bb1a <pifStorageVar_Create+0x25a>
	}
	else {
		cur_node = p_info->first_node;
 801b976:	69bb      	ldr	r3, [r7, #24]
 801b978:	895b      	ldrh	r3, [r3, #10]
 801b97a:	847b      	strh	r3, [r7, #34]	; 0x22
		p_cur_data = &p_owner->__p_data_info[cur_node];
 801b97c:	69fb      	ldr	r3, [r7, #28]
 801b97e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b980:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b982:	4613      	mov	r3, r2
 801b984:	005b      	lsls	r3, r3, #1
 801b986:	4413      	add	r3, r2
 801b988:	009b      	lsls	r3, r3, #2
 801b98a:	440b      	add	r3, r1
 801b98c:	613b      	str	r3, [r7, #16]
		last = p_owner->__info_sectors;
 801b98e:	69fb      	ldr	r3, [r7, #28]
 801b990:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b992:	843b      	strh	r3, [r7, #32]
		if (p_cur_data->first_sector != last) {
 801b994:	693b      	ldr	r3, [r7, #16]
 801b996:	889b      	ldrh	r3, [r3, #4]
 801b998:	8c3a      	ldrh	r2, [r7, #32]
 801b99a:	429a      	cmp	r2, r3
 801b99c:	f000 80b2 	beq.w	801bb04 <pifStorageVar_Create+0x244>
			if (p_cur_data->first_sector - last >= sectors) {
 801b9a0:	693b      	ldr	r3, [r7, #16]
 801b9a2:	889b      	ldrh	r3, [r3, #4]
 801b9a4:	461a      	mov	r2, r3
 801b9a6:	8c3b      	ldrh	r3, [r7, #32]
 801b9a8:	1ad2      	subs	r2, r2, r3
 801b9aa:	8abb      	ldrh	r3, [r7, #20]
 801b9ac:	429a      	cmp	r2, r3
 801b9ae:	f2c0 80a9 	blt.w	801bb04 <pifStorageVar_Create+0x244>
				new_node = _getNewDataNode(p_owner);
 801b9b2:	69f8      	ldr	r0, [r7, #28]
 801b9b4:	f7ff fcba 	bl	801b32c <_getNewDataNode>
 801b9b8:	4603      	mov	r3, r0
 801b9ba:	81fb      	strh	r3, [r7, #14]
				if (new_node == DATA_NODE_NULL) return NULL;
 801b9bc:	89fb      	ldrh	r3, [r7, #14]
 801b9be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b9c2:	4293      	cmp	r3, r2
 801b9c4:	d101      	bne.n	801b9ca <pifStorageVar_Create+0x10a>
 801b9c6:	2300      	movs	r3, #0
 801b9c8:	e0c9      	b.n	801bb5e <pifStorageVar_Create+0x29e>

				p_new_data = &p_owner->__p_data_info[new_node];
 801b9ca:	69fb      	ldr	r3, [r7, #28]
 801b9cc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b9ce:	89fa      	ldrh	r2, [r7, #14]
 801b9d0:	4613      	mov	r3, r2
 801b9d2:	005b      	lsls	r3, r3, #1
 801b9d4:	4413      	add	r3, r2
 801b9d6:	009b      	lsls	r3, r3, #2
 801b9d8:	440b      	add	r3, r1
 801b9da:	627b      	str	r3, [r7, #36]	; 0x24
				p_new_data->next_node = p_info->first_node;
 801b9dc:	69bb      	ldr	r3, [r7, #24]
 801b9de:	895a      	ldrh	r2, [r3, #10]
 801b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9e2:	80da      	strh	r2, [r3, #6]
				p_new_data->prev_node = DATA_NODE_NULL;
 801b9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b9ea:	811a      	strh	r2, [r3, #8]

				p_info->first_node = new_node;
 801b9ec:	69bb      	ldr	r3, [r7, #24]
 801b9ee:	89fa      	ldrh	r2, [r7, #14]
 801b9f0:	815a      	strh	r2, [r3, #10]
				p_cur_data->prev_node = new_node;
 801b9f2:	693b      	ldr	r3, [r7, #16]
 801b9f4:	89fa      	ldrh	r2, [r7, #14]
 801b9f6:	811a      	strh	r2, [r3, #8]
				goto save;
 801b9f8:	e08f      	b.n	801bb1a <pifStorageVar_Create+0x25a>
			}
		}
		while (cur_node != DATA_NODE_NULL) {
			p_cur_data = &p_owner->__p_data_info[cur_node];
 801b9fa:	69fb      	ldr	r3, [r7, #28]
 801b9fc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b9fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ba00:	4613      	mov	r3, r2
 801ba02:	005b      	lsls	r3, r3, #1
 801ba04:	4413      	add	r3, r2
 801ba06:	009b      	lsls	r3, r3, #2
 801ba08:	440b      	add	r3, r1
 801ba0a:	613b      	str	r3, [r7, #16]
			last = p_cur_data->first_sector + (p_cur_data->size + sector_size - 1) / sector_size;
 801ba0c:	693b      	ldr	r3, [r7, #16]
 801ba0e:	889a      	ldrh	r2, [r3, #4]
 801ba10:	693b      	ldr	r3, [r7, #16]
 801ba12:	885b      	ldrh	r3, [r3, #2]
 801ba14:	4619      	mov	r1, r3
 801ba16:	8afb      	ldrh	r3, [r7, #22]
 801ba18:	440b      	add	r3, r1
 801ba1a:	1e59      	subs	r1, r3, #1
 801ba1c:	8afb      	ldrh	r3, [r7, #22]
 801ba1e:	fb91 f3f3 	sdiv	r3, r1, r3
 801ba22:	b29b      	uxth	r3, r3
 801ba24:	4413      	add	r3, r2
 801ba26:	843b      	strh	r3, [r7, #32]
			if (p_cur_data->next_node == DATA_NODE_NULL) {
 801ba28:	693b      	ldr	r3, [r7, #16]
 801ba2a:	88db      	ldrh	r3, [r3, #6]
 801ba2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba30:	4293      	cmp	r3, r2
 801ba32:	d127      	bne.n	801ba84 <pifStorageVar_Create+0x1c4>
				if (p_info->max_sector_count - last >= sectors) {
 801ba34:	69bb      	ldr	r3, [r7, #24]
 801ba36:	891b      	ldrh	r3, [r3, #8]
 801ba38:	461a      	mov	r2, r3
 801ba3a:	8c3b      	ldrh	r3, [r7, #32]
 801ba3c:	1ad2      	subs	r2, r2, r3
 801ba3e:	8abb      	ldrh	r3, [r7, #20]
 801ba40:	429a      	cmp	r2, r3
 801ba42:	db5c      	blt.n	801bafe <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801ba44:	69f8      	ldr	r0, [r7, #28]
 801ba46:	f7ff fc71 	bl	801b32c <_getNewDataNode>
 801ba4a:	4603      	mov	r3, r0
 801ba4c:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801ba4e:	89fb      	ldrh	r3, [r7, #14]
 801ba50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba54:	4293      	cmp	r3, r2
 801ba56:	d101      	bne.n	801ba5c <pifStorageVar_Create+0x19c>
 801ba58:	2300      	movs	r3, #0
 801ba5a:	e080      	b.n	801bb5e <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801ba5c:	69fb      	ldr	r3, [r7, #28]
 801ba5e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801ba60:	89fa      	ldrh	r2, [r7, #14]
 801ba62:	4613      	mov	r3, r2
 801ba64:	005b      	lsls	r3, r3, #1
 801ba66:	4413      	add	r3, r2
 801ba68:	009b      	lsls	r3, r3, #2
 801ba6a:	440b      	add	r3, r1
 801ba6c:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801ba6e:	693b      	ldr	r3, [r7, #16]
 801ba70:	88da      	ldrh	r2, [r3, #6]
 801ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba74:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801ba76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba78:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ba7a:	811a      	strh	r2, [r3, #8]

					p_cur_data->next_node = new_node;
 801ba7c:	693b      	ldr	r3, [r7, #16]
 801ba7e:	89fa      	ldrh	r2, [r7, #14]
 801ba80:	80da      	strh	r2, [r3, #6]
					goto save;
 801ba82:	e04a      	b.n	801bb1a <pifStorageVar_Create+0x25a>
				}
			}
			else {
				if (p_owner->__p_data_info[p_cur_data->next_node].first_sector - last >= sectors) {
 801ba84:	69fb      	ldr	r3, [r7, #28]
 801ba86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ba88:	693b      	ldr	r3, [r7, #16]
 801ba8a:	88db      	ldrh	r3, [r3, #6]
 801ba8c:	4619      	mov	r1, r3
 801ba8e:	460b      	mov	r3, r1
 801ba90:	005b      	lsls	r3, r3, #1
 801ba92:	440b      	add	r3, r1
 801ba94:	009b      	lsls	r3, r3, #2
 801ba96:	4413      	add	r3, r2
 801ba98:	889b      	ldrh	r3, [r3, #4]
 801ba9a:	461a      	mov	r2, r3
 801ba9c:	8c3b      	ldrh	r3, [r7, #32]
 801ba9e:	1ad2      	subs	r2, r2, r3
 801baa0:	8abb      	ldrh	r3, [r7, #20]
 801baa2:	429a      	cmp	r2, r3
 801baa4:	db2b      	blt.n	801bafe <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801baa6:	69f8      	ldr	r0, [r7, #28]
 801baa8:	f7ff fc40 	bl	801b32c <_getNewDataNode>
 801baac:	4603      	mov	r3, r0
 801baae:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801bab0:	89fb      	ldrh	r3, [r7, #14]
 801bab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bab6:	4293      	cmp	r3, r2
 801bab8:	d101      	bne.n	801babe <pifStorageVar_Create+0x1fe>
 801baba:	2300      	movs	r3, #0
 801babc:	e04f      	b.n	801bb5e <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801babe:	69fb      	ldr	r3, [r7, #28]
 801bac0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801bac2:	89fa      	ldrh	r2, [r7, #14]
 801bac4:	4613      	mov	r3, r2
 801bac6:	005b      	lsls	r3, r3, #1
 801bac8:	4413      	add	r3, r2
 801baca:	009b      	lsls	r3, r3, #2
 801bacc:	440b      	add	r3, r1
 801bace:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801bad0:	693b      	ldr	r3, [r7, #16]
 801bad2:	88da      	ldrh	r2, [r3, #6]
 801bad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bad6:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801bad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bada:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801badc:	811a      	strh	r2, [r3, #8]

					p_owner->__p_data_info[p_cur_data->next_node].prev_node = new_node;
 801bade:	69fb      	ldr	r3, [r7, #28]
 801bae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bae2:	693b      	ldr	r3, [r7, #16]
 801bae4:	88db      	ldrh	r3, [r3, #6]
 801bae6:	4619      	mov	r1, r3
 801bae8:	460b      	mov	r3, r1
 801baea:	005b      	lsls	r3, r3, #1
 801baec:	440b      	add	r3, r1
 801baee:	009b      	lsls	r3, r3, #2
 801baf0:	4413      	add	r3, r2
 801baf2:	89fa      	ldrh	r2, [r7, #14]
 801baf4:	811a      	strh	r2, [r3, #8]
					p_cur_data->next_node = new_node;
 801baf6:	693b      	ldr	r3, [r7, #16]
 801baf8:	89fa      	ldrh	r2, [r7, #14]
 801bafa:	80da      	strh	r2, [r3, #6]
					goto save;
 801bafc:	e00d      	b.n	801bb1a <pifStorageVar_Create+0x25a>
				}
			}
			cur_node = p_cur_data->next_node;
 801bafe:	693b      	ldr	r3, [r7, #16]
 801bb00:	88db      	ldrh	r3, [r3, #6]
 801bb02:	847b      	strh	r3, [r7, #34]	; 0x22
		while (cur_node != DATA_NODE_NULL) {
 801bb04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bb06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb0a:	4293      	cmp	r3, r2
 801bb0c:	f47f af75 	bne.w	801b9fa <pifStorageVar_Create+0x13a>
		}
	}
	pif_error = E_OVERFLOW_BUFFER;
 801bb10:	4b15      	ldr	r3, [pc, #84]	; (801bb68 <pifStorageVar_Create+0x2a8>)
 801bb12:	2204      	movs	r2, #4
 801bb14:	701a      	strb	r2, [r3, #0]
	return NULL;
 801bb16:	2300      	movs	r3, #0
 801bb18:	e021      	b.n	801bb5e <pifStorageVar_Create+0x29e>

save:
	p_new_data->id = id;
 801bb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb1c:	887a      	ldrh	r2, [r7, #2]
 801bb1e:	801a      	strh	r2, [r3, #0]
	p_new_data->size = size;
 801bb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb22:	883a      	ldrh	r2, [r7, #0]
 801bb24:	805a      	strh	r2, [r3, #2]
	p_new_data->first_sector = last;
 801bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb28:	8c3a      	ldrh	r2, [r7, #32]
 801bb2a:	809a      	strh	r2, [r3, #4]
	p_new_data->crc_16 = pifCrc16((uint8_t*)p_new_data, sizeof(PifStorageVarDataInfo) - 6);
 801bb2c:	2106      	movs	r1, #6
 801bb2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bb30:	f7f6 fbf3 	bl	801231a <pifCrc16>
 801bb34:	4603      	mov	r3, r0
 801bb36:	461a      	mov	r2, r3
 801bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb3a:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801bb3c:	69fb      	ldr	r3, [r7, #28]
 801bb3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bb40:	69fb      	ldr	r3, [r7, #28]
 801bb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb44:	2100      	movs	r1, #0
 801bb46:	69f8      	ldr	r0, [r7, #28]
 801bb48:	f7ff fc48 	bl	801b3dc <_writeData>
 801bb4c:	4603      	mov	r3, r0
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d104      	bne.n	801bb5c <pifStorageVar_Create+0x29c>
    	pif_error = E_ACCESS_FAILED;
 801bb52:	4b05      	ldr	r3, [pc, #20]	; (801bb68 <pifStorageVar_Create+0x2a8>)
 801bb54:	220d      	movs	r2, #13
 801bb56:	701a      	strb	r2, [r3, #0]
        return NULL;
 801bb58:	2300      	movs	r3, #0
 801bb5a:	e000      	b.n	801bb5e <pifStorageVar_Create+0x29e>
    }
	return (PifStorageDataInfoP)p_new_data;
 801bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801bb5e:	4618      	mov	r0, r3
 801bb60:	3728      	adds	r7, #40	; 0x28
 801bb62:	46bd      	mov	sp, r7
 801bb64:	bd80      	pop	{r7, pc}
 801bb66:	bf00      	nop
 801bb68:	20001ef0 	.word	0x20001ef0

0801bb6c <pifStorageVar_Delete>:

BOOL pifStorageVar_Delete(PifStorage* p_parent, uint16_t id)
{
 801bb6c:	b580      	push	{r7, lr}
 801bb6e:	b086      	sub	sp, #24
 801bb70:	af00      	add	r7, sp, #0
 801bb72:	6078      	str	r0, [r7, #4]
 801bb74:	460b      	mov	r3, r1
 801bb76:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801bb7c:	693b      	ldr	r3, [r7, #16]
 801bb7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb80:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801bb82:	693b      	ldr	r3, [r7, #16]
 801bb84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d104      	bne.n	801bb96 <pifStorageVar_Delete+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801bb8c:	4b3d      	ldr	r3, [pc, #244]	; (801bc84 <pifStorageVar_Delete+0x118>)
 801bb8e:	220f      	movs	r2, #15
 801bb90:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801bb92:	2300      	movs	r3, #0
 801bb94:	e072      	b.n	801bc7c <pifStorageVar_Delete+0x110>
	}

	node = p_info->first_node;
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	895b      	ldrh	r3, [r3, #10]
 801bb9a:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801bb9c:	e065      	b.n	801bc6a <pifStorageVar_Delete+0xfe>
		p_data_info = &p_owner->__p_data_info[node];
 801bb9e:	693b      	ldr	r3, [r7, #16]
 801bba0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801bba2:	8afa      	ldrh	r2, [r7, #22]
 801bba4:	4613      	mov	r3, r2
 801bba6:	005b      	lsls	r3, r3, #1
 801bba8:	4413      	add	r3, r2
 801bbaa:	009b      	lsls	r3, r3, #2
 801bbac:	440b      	add	r3, r1
 801bbae:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801bbb0:	68bb      	ldr	r3, [r7, #8]
 801bbb2:	881b      	ldrh	r3, [r3, #0]
 801bbb4:	887a      	ldrh	r2, [r7, #2]
 801bbb6:	429a      	cmp	r2, r3
 801bbb8:	d154      	bne.n	801bc64 <pifStorageVar_Delete+0xf8>
			memset(p_data_info, 0xFF, sizeof(PifStorageVarDataInfo) - 6);
 801bbba:	2206      	movs	r2, #6
 801bbbc:	21ff      	movs	r1, #255	; 0xff
 801bbbe:	68b8      	ldr	r0, [r7, #8]
 801bbc0:	f007 fb64 	bl	802328c <memset>
			if (p_data_info->prev_node != DATA_NODE_NULL) {
 801bbc4:	68bb      	ldr	r3, [r7, #8]
 801bbc6:	891b      	ldrh	r3, [r3, #8]
 801bbc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bbcc:	4293      	cmp	r3, r2
 801bbce:	d00d      	beq.n	801bbec <pifStorageVar_Delete+0x80>
				p_owner->__p_data_info[p_data_info->prev_node].next_node = p_data_info->next_node;
 801bbd0:	693b      	ldr	r3, [r7, #16]
 801bbd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bbd4:	68bb      	ldr	r3, [r7, #8]
 801bbd6:	891b      	ldrh	r3, [r3, #8]
 801bbd8:	4619      	mov	r1, r3
 801bbda:	460b      	mov	r3, r1
 801bbdc:	005b      	lsls	r3, r3, #1
 801bbde:	440b      	add	r3, r1
 801bbe0:	009b      	lsls	r3, r3, #2
 801bbe2:	4413      	add	r3, r2
 801bbe4:	68ba      	ldr	r2, [r7, #8]
 801bbe6:	88d2      	ldrh	r2, [r2, #6]
 801bbe8:	80da      	strh	r2, [r3, #6]
 801bbea:	e003      	b.n	801bbf4 <pifStorageVar_Delete+0x88>
			}
			else {
				p_info->first_node = p_data_info->next_node;
 801bbec:	68bb      	ldr	r3, [r7, #8]
 801bbee:	88da      	ldrh	r2, [r3, #6]
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	815a      	strh	r2, [r3, #10]
			}
			if (p_data_info->next_node != DATA_NODE_NULL) {
 801bbf4:	68bb      	ldr	r3, [r7, #8]
 801bbf6:	88db      	ldrh	r3, [r3, #6]
 801bbf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bbfc:	4293      	cmp	r3, r2
 801bbfe:	d00c      	beq.n	801bc1a <pifStorageVar_Delete+0xae>
				p_owner->__p_data_info[p_data_info->next_node].prev_node = p_data_info->prev_node;
 801bc00:	693b      	ldr	r3, [r7, #16]
 801bc02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bc04:	68bb      	ldr	r3, [r7, #8]
 801bc06:	88db      	ldrh	r3, [r3, #6]
 801bc08:	4619      	mov	r1, r3
 801bc0a:	460b      	mov	r3, r1
 801bc0c:	005b      	lsls	r3, r3, #1
 801bc0e:	440b      	add	r3, r1
 801bc10:	009b      	lsls	r3, r3, #2
 801bc12:	4413      	add	r3, r2
 801bc14:	68ba      	ldr	r2, [r7, #8]
 801bc16:	8912      	ldrh	r2, [r2, #8]
 801bc18:	811a      	strh	r2, [r3, #8]
			}
			p_data_info->next_node = p_info->free_node;
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	899a      	ldrh	r2, [r3, #12]
 801bc1e:	68bb      	ldr	r3, [r7, #8]
 801bc20:	80da      	strh	r2, [r3, #6]
			p_data_info->prev_node = DATA_NODE_NULL;
 801bc22:	68bb      	ldr	r3, [r7, #8]
 801bc24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bc28:	811a      	strh	r2, [r3, #8]
			p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801bc2a:	2106      	movs	r1, #6
 801bc2c:	68b8      	ldr	r0, [r7, #8]
 801bc2e:	f7f6 fb74 	bl	801231a <pifCrc16>
 801bc32:	4603      	mov	r3, r0
 801bc34:	461a      	mov	r2, r3
 801bc36:	68bb      	ldr	r3, [r7, #8]
 801bc38:	815a      	strh	r2, [r3, #10]
			p_info->free_node = node;
 801bc3a:	68fb      	ldr	r3, [r7, #12]
 801bc3c:	8afa      	ldrh	r2, [r7, #22]
 801bc3e:	819a      	strh	r2, [r3, #12]

			if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801bc40:	693b      	ldr	r3, [r7, #16]
 801bc42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bc44:	693b      	ldr	r3, [r7, #16]
 801bc46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc48:	2100      	movs	r1, #0
 801bc4a:	6938      	ldr	r0, [r7, #16]
 801bc4c:	f7ff fbc6 	bl	801b3dc <_writeData>
 801bc50:	4603      	mov	r3, r0
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d104      	bne.n	801bc60 <pifStorageVar_Delete+0xf4>
		    	pif_error = E_ACCESS_FAILED;
 801bc56:	4b0b      	ldr	r3, [pc, #44]	; (801bc84 <pifStorageVar_Delete+0x118>)
 801bc58:	220d      	movs	r2, #13
 801bc5a:	701a      	strb	r2, [r3, #0]
				return FALSE;
 801bc5c:	2300      	movs	r3, #0
 801bc5e:	e00d      	b.n	801bc7c <pifStorageVar_Delete+0x110>
			}
			return TRUE;
 801bc60:	2301      	movs	r3, #1
 801bc62:	e00b      	b.n	801bc7c <pifStorageVar_Delete+0x110>
		}
		node = p_data_info->next_node;
 801bc64:	68bb      	ldr	r3, [r7, #8]
 801bc66:	88db      	ldrh	r3, [r3, #6]
 801bc68:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801bc6a:	8afb      	ldrh	r3, [r7, #22]
 801bc6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bc70:	4293      	cmp	r3, r2
 801bc72:	d194      	bne.n	801bb9e <pifStorageVar_Delete+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801bc74:	4b03      	ldr	r3, [pc, #12]	; (801bc84 <pifStorageVar_Delete+0x118>)
 801bc76:	220e      	movs	r2, #14
 801bc78:	701a      	strb	r2, [r3, #0]
	return FALSE;
 801bc7a:	2300      	movs	r3, #0
}
 801bc7c:	4618      	mov	r0, r3
 801bc7e:	3718      	adds	r7, #24
 801bc80:	46bd      	mov	sp, r7
 801bc82:	bd80      	pop	{r7, pc}
 801bc84:	20001ef0 	.word	0x20001ef0

0801bc88 <pifStorageVar_Open>:

PifStorageDataInfoP pifStorageVar_Open(PifStorage* p_parent, uint16_t id)
{
 801bc88:	b590      	push	{r4, r7, lr}
 801bc8a:	b087      	sub	sp, #28
 801bc8c:	af00      	add	r7, sp, #0
 801bc8e:	6078      	str	r0, [r7, #4]
 801bc90:	460b      	mov	r3, r1
 801bc92:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801bc98:	693b      	ldr	r3, [r7, #16]
 801bc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc9c:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801bc9e:	693b      	ldr	r3, [r7, #16]
 801bca0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d104      	bne.n	801bcb2 <pifStorageVar_Open+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801bca8:	4b1b      	ldr	r3, [pc, #108]	; (801bd18 <pifStorageVar_Open+0x90>)
 801bcaa:	220f      	movs	r2, #15
 801bcac:	701a      	strb	r2, [r3, #0]
		return NULL;
 801bcae:	2300      	movs	r3, #0
 801bcb0:	e02d      	b.n	801bd0e <pifStorageVar_Open+0x86>
	}

	node = p_info->first_node;
 801bcb2:	68fb      	ldr	r3, [r7, #12]
 801bcb4:	895b      	ldrh	r3, [r3, #10]
 801bcb6:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801bcb8:	e020      	b.n	801bcfc <pifStorageVar_Open+0x74>
		p_data_info = &p_owner->__p_data_info[node];
 801bcba:	693b      	ldr	r3, [r7, #16]
 801bcbc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801bcbe:	8afa      	ldrh	r2, [r7, #22]
 801bcc0:	4613      	mov	r3, r2
 801bcc2:	005b      	lsls	r3, r3, #1
 801bcc4:	4413      	add	r3, r2
 801bcc6:	009b      	lsls	r3, r3, #2
 801bcc8:	440b      	add	r3, r1
 801bcca:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801bccc:	68bb      	ldr	r3, [r7, #8]
 801bcce:	881b      	ldrh	r3, [r3, #0]
 801bcd0:	887a      	ldrh	r2, [r7, #2]
 801bcd2:	429a      	cmp	r2, r3
 801bcd4:	d10f      	bne.n	801bcf6 <pifStorageVar_Open+0x6e>
			if (p_data_info->crc_16 != pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6)) {
 801bcd6:	68bb      	ldr	r3, [r7, #8]
 801bcd8:	895c      	ldrh	r4, [r3, #10]
 801bcda:	2106      	movs	r1, #6
 801bcdc:	68b8      	ldr	r0, [r7, #8]
 801bcde:	f7f6 fb1c 	bl	801231a <pifCrc16>
 801bce2:	4603      	mov	r3, r0
 801bce4:	429c      	cmp	r4, r3
 801bce6:	d004      	beq.n	801bcf2 <pifStorageVar_Open+0x6a>
		        pif_error = E_MISMATCH_CRC;
 801bce8:	4b0b      	ldr	r3, [pc, #44]	; (801bd18 <pifStorageVar_Open+0x90>)
 801bcea:	220c      	movs	r2, #12
 801bcec:	701a      	strb	r2, [r3, #0]
				return NULL;
 801bcee:	2300      	movs	r3, #0
 801bcf0:	e00d      	b.n	801bd0e <pifStorageVar_Open+0x86>
			}
			return (PifStorageDataInfoP)p_data_info;
 801bcf2:	68bb      	ldr	r3, [r7, #8]
 801bcf4:	e00b      	b.n	801bd0e <pifStorageVar_Open+0x86>
		}
		node = p_data_info->next_node;
 801bcf6:	68bb      	ldr	r3, [r7, #8]
 801bcf8:	88db      	ldrh	r3, [r3, #6]
 801bcfa:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801bcfc:	8afb      	ldrh	r3, [r7, #22]
 801bcfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bd02:	4293      	cmp	r3, r2
 801bd04:	d1d9      	bne.n	801bcba <pifStorageVar_Open+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801bd06:	4b04      	ldr	r3, [pc, #16]	; (801bd18 <pifStorageVar_Open+0x90>)
 801bd08:	220e      	movs	r2, #14
 801bd0a:	701a      	strb	r2, [r3, #0]
	return NULL;
 801bd0c:	2300      	movs	r3, #0
}
 801bd0e:	4618      	mov	r0, r3
 801bd10:	371c      	adds	r7, #28
 801bd12:	46bd      	mov	sp, r7
 801bd14:	bd90      	pop	{r4, r7, pc}
 801bd16:	bf00      	nop
 801bd18:	20001ef0 	.word	0x20001ef0

0801bd1c <pifStorageVar_Read>:

BOOL pifStorageVar_Read(PifStorage* p_parent, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801bd1c:	b580      	push	{r7, lr}
 801bd1e:	b088      	sub	sp, #32
 801bd20:	af02      	add	r7, sp, #8
 801bd22:	60f8      	str	r0, [r7, #12]
 801bd24:	60b9      	str	r1, [r7, #8]
 801bd26:	607a      	str	r2, [r7, #4]
 801bd28:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801bd2a:	68fb      	ldr	r3, [r7, #12]
 801bd2c:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801bd2e:	697b      	ldr	r3, [r7, #20]
 801bd30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d104      	bne.n	801bd42 <pifStorageVar_Read+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801bd38:	4b0d      	ldr	r3, [pc, #52]	; (801bd70 <pifStorageVar_Read+0x54>)
 801bd3a:	220f      	movs	r2, #15
 801bd3c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801bd3e:	2300      	movs	r3, #0
 801bd40:	e012      	b.n	801bd68 <pifStorageVar_Read+0x4c>
	}

	return _readData(p_owner, p_dst, ((PifStorageVarDataInfo*)p_src)->first_sector * p_owner->_p_info->sector_size, size, p_owner->_p_info->sector_size);
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	889b      	ldrh	r3, [r3, #4]
 801bd46:	461a      	mov	r2, r3
 801bd48:	697b      	ldr	r3, [r7, #20]
 801bd4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd4c:	88db      	ldrh	r3, [r3, #6]
 801bd4e:	fb02 f303 	mul.w	r3, r2, r3
 801bd52:	461a      	mov	r2, r3
 801bd54:	697b      	ldr	r3, [r7, #20]
 801bd56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd58:	88db      	ldrh	r3, [r3, #6]
 801bd5a:	9300      	str	r3, [sp, #0]
 801bd5c:	683b      	ldr	r3, [r7, #0]
 801bd5e:	68b9      	ldr	r1, [r7, #8]
 801bd60:	6978      	ldr	r0, [r7, #20]
 801bd62:	f7ff fb0b 	bl	801b37c <_readData>
 801bd66:	4603      	mov	r3, r0
}
 801bd68:	4618      	mov	r0, r3
 801bd6a:	3718      	adds	r7, #24
 801bd6c:	46bd      	mov	sp, r7
 801bd6e:	bd80      	pop	{r7, pc}
 801bd70:	20001ef0 	.word	0x20001ef0

0801bd74 <pifStorageVar_Write>:

BOOL pifStorageVar_Write(PifStorage* p_parent, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801bd74:	b580      	push	{r7, lr}
 801bd76:	b086      	sub	sp, #24
 801bd78:	af00      	add	r7, sp, #0
 801bd7a:	60f8      	str	r0, [r7, #12]
 801bd7c:	60b9      	str	r1, [r7, #8]
 801bd7e:	607a      	str	r2, [r7, #4]
 801bd80:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801bd82:	68fb      	ldr	r3, [r7, #12]
 801bd84:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801bd86:	697b      	ldr	r3, [r7, #20]
 801bd88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d104      	bne.n	801bd9a <pifStorageVar_Write+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801bd90:	4b0b      	ldr	r3, [pc, #44]	; (801bdc0 <pifStorageVar_Write+0x4c>)
 801bd92:	220f      	movs	r2, #15
 801bd94:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801bd96:	2300      	movs	r3, #0
 801bd98:	e00e      	b.n	801bdb8 <pifStorageVar_Write+0x44>
	}

	return _writeData(p_owner, ((PifStorageVarDataInfo*)p_dst)->first_sector * p_owner->_p_info->sector_size, p_src, size);
 801bd9a:	68bb      	ldr	r3, [r7, #8]
 801bd9c:	889b      	ldrh	r3, [r3, #4]
 801bd9e:	461a      	mov	r2, r3
 801bda0:	697b      	ldr	r3, [r7, #20]
 801bda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bda4:	88db      	ldrh	r3, [r3, #6]
 801bda6:	fb02 f303 	mul.w	r3, r2, r3
 801bdaa:	4619      	mov	r1, r3
 801bdac:	683b      	ldr	r3, [r7, #0]
 801bdae:	687a      	ldr	r2, [r7, #4]
 801bdb0:	6978      	ldr	r0, [r7, #20]
 801bdb2:	f7ff fb13 	bl	801b3dc <_writeData>
 801bdb6:	4603      	mov	r3, r0
}
 801bdb8:	4618      	mov	r0, r3
 801bdba:	3718      	adds	r7, #24
 801bdbc:	46bd      	mov	sp, r7
 801bdbe:	bd80      	pop	{r7, pc}
 801bdc0:	20001ef0 	.word	0x20001ef0

0801bdc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801bdc4:	b580      	push	{r7, lr}
 801bdc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801bdc8:	4b0e      	ldr	r3, [pc, #56]	; (801be04 <HAL_Init+0x40>)
 801bdca:	681b      	ldr	r3, [r3, #0]
 801bdcc:	4a0d      	ldr	r2, [pc, #52]	; (801be04 <HAL_Init+0x40>)
 801bdce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bdd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801bdd4:	4b0b      	ldr	r3, [pc, #44]	; (801be04 <HAL_Init+0x40>)
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	4a0a      	ldr	r2, [pc, #40]	; (801be04 <HAL_Init+0x40>)
 801bdda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801bdde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801bde0:	4b08      	ldr	r3, [pc, #32]	; (801be04 <HAL_Init+0x40>)
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	4a07      	ldr	r2, [pc, #28]	; (801be04 <HAL_Init+0x40>)
 801bde6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bdea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801bdec:	2003      	movs	r0, #3
 801bdee:	f000 fd51 	bl	801c894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801bdf2:	2000      	movs	r0, #0
 801bdf4:	f000 f808 	bl	801be08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801bdf8:	f7e7 faa2 	bl	8003340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801bdfc:	2300      	movs	r3, #0
}
 801bdfe:	4618      	mov	r0, r3
 801be00:	bd80      	pop	{r7, pc}
 801be02:	bf00      	nop
 801be04:	40023c00 	.word	0x40023c00

0801be08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b082      	sub	sp, #8
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801be10:	4b12      	ldr	r3, [pc, #72]	; (801be5c <HAL_InitTick+0x54>)
 801be12:	681a      	ldr	r2, [r3, #0]
 801be14:	4b12      	ldr	r3, [pc, #72]	; (801be60 <HAL_InitTick+0x58>)
 801be16:	781b      	ldrb	r3, [r3, #0]
 801be18:	4619      	mov	r1, r3
 801be1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801be1e:	fbb3 f3f1 	udiv	r3, r3, r1
 801be22:	fbb2 f3f3 	udiv	r3, r2, r3
 801be26:	4618      	mov	r0, r3
 801be28:	f000 fd77 	bl	801c91a <HAL_SYSTICK_Config>
 801be2c:	4603      	mov	r3, r0
 801be2e:	2b00      	cmp	r3, #0
 801be30:	d001      	beq.n	801be36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801be32:	2301      	movs	r3, #1
 801be34:	e00e      	b.n	801be54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	2b0f      	cmp	r3, #15
 801be3a:	d80a      	bhi.n	801be52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801be3c:	2200      	movs	r2, #0
 801be3e:	6879      	ldr	r1, [r7, #4]
 801be40:	f04f 30ff 	mov.w	r0, #4294967295
 801be44:	f000 fd31 	bl	801c8aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801be48:	4a06      	ldr	r2, [pc, #24]	; (801be64 <HAL_InitTick+0x5c>)
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801be4e:	2300      	movs	r3, #0
 801be50:	e000      	b.n	801be54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801be52:	2301      	movs	r3, #1
}
 801be54:	4618      	mov	r0, r3
 801be56:	3708      	adds	r7, #8
 801be58:	46bd      	mov	sp, r7
 801be5a:	bd80      	pop	{r7, pc}
 801be5c:	20000020 	.word	0x20000020
 801be60:	20000094 	.word	0x20000094
 801be64:	20000090 	.word	0x20000090

0801be68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801be68:	b480      	push	{r7}
 801be6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801be6c:	4b06      	ldr	r3, [pc, #24]	; (801be88 <HAL_IncTick+0x20>)
 801be6e:	781b      	ldrb	r3, [r3, #0]
 801be70:	461a      	mov	r2, r3
 801be72:	4b06      	ldr	r3, [pc, #24]	; (801be8c <HAL_IncTick+0x24>)
 801be74:	681b      	ldr	r3, [r3, #0]
 801be76:	4413      	add	r3, r2
 801be78:	4a04      	ldr	r2, [pc, #16]	; (801be8c <HAL_IncTick+0x24>)
 801be7a:	6013      	str	r3, [r2, #0]
}
 801be7c:	bf00      	nop
 801be7e:	46bd      	mov	sp, r7
 801be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be84:	4770      	bx	lr
 801be86:	bf00      	nop
 801be88:	20000094 	.word	0x20000094
 801be8c:	20002094 	.word	0x20002094

0801be90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801be90:	b480      	push	{r7}
 801be92:	af00      	add	r7, sp, #0
  return uwTick;
 801be94:	4b03      	ldr	r3, [pc, #12]	; (801bea4 <HAL_GetTick+0x14>)
 801be96:	681b      	ldr	r3, [r3, #0]
}
 801be98:	4618      	mov	r0, r3
 801be9a:	46bd      	mov	sp, r7
 801be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bea0:	4770      	bx	lr
 801bea2:	bf00      	nop
 801bea4:	20002094 	.word	0x20002094

0801bea8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801bea8:	b580      	push	{r7, lr}
 801beaa:	b084      	sub	sp, #16
 801beac:	af00      	add	r7, sp, #0
 801beae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801beb0:	2300      	movs	r3, #0
 801beb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d101      	bne.n	801bebe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801beba:	2301      	movs	r3, #1
 801bebc:	e033      	b.n	801bf26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	d109      	bne.n	801beda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801bec6:	6878      	ldr	r0, [r7, #4]
 801bec8:	f7e7 fa62 	bl	8003390 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	2200      	movs	r2, #0
 801bed0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	2200      	movs	r2, #0
 801bed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bede:	f003 0310 	and.w	r3, r3, #16
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d118      	bne.n	801bf18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801beea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801beee:	f023 0302 	bic.w	r3, r3, #2
 801bef2:	f043 0202 	orr.w	r2, r3, #2
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801befa:	6878      	ldr	r0, [r7, #4]
 801befc:	f000 fa58 	bl	801c3b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	2200      	movs	r2, #0
 801bf04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf0a:	f023 0303 	bic.w	r3, r3, #3
 801bf0e:	f043 0201 	orr.w	r2, r3, #1
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	641a      	str	r2, [r3, #64]	; 0x40
 801bf16:	e001      	b.n	801bf1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801bf18:	2301      	movs	r3, #1
 801bf1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	2200      	movs	r2, #0
 801bf20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801bf24:	7bfb      	ldrb	r3, [r7, #15]
}
 801bf26:	4618      	mov	r0, r3
 801bf28:	3710      	adds	r7, #16
 801bf2a:	46bd      	mov	sp, r7
 801bf2c:	bd80      	pop	{r7, pc}
	...

0801bf30 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801bf30:	b580      	push	{r7, lr}
 801bf32:	b086      	sub	sp, #24
 801bf34:	af00      	add	r7, sp, #0
 801bf36:	60f8      	str	r0, [r7, #12]
 801bf38:	60b9      	str	r1, [r7, #8]
 801bf3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801bf3c:	2300      	movs	r3, #0
 801bf3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801bf40:	68fb      	ldr	r3, [r7, #12]
 801bf42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bf46:	2b01      	cmp	r3, #1
 801bf48:	d101      	bne.n	801bf4e <HAL_ADC_Start_DMA+0x1e>
 801bf4a:	2302      	movs	r3, #2
 801bf4c:	e0ce      	b.n	801c0ec <HAL_ADC_Start_DMA+0x1bc>
 801bf4e:	68fb      	ldr	r3, [r7, #12]
 801bf50:	2201      	movs	r2, #1
 801bf52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801bf56:	68fb      	ldr	r3, [r7, #12]
 801bf58:	681b      	ldr	r3, [r3, #0]
 801bf5a:	689b      	ldr	r3, [r3, #8]
 801bf5c:	f003 0301 	and.w	r3, r3, #1
 801bf60:	2b01      	cmp	r3, #1
 801bf62:	d018      	beq.n	801bf96 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801bf64:	68fb      	ldr	r3, [r7, #12]
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	689a      	ldr	r2, [r3, #8]
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	681b      	ldr	r3, [r3, #0]
 801bf6e:	f042 0201 	orr.w	r2, r2, #1
 801bf72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801bf74:	4b5f      	ldr	r3, [pc, #380]	; (801c0f4 <HAL_ADC_Start_DMA+0x1c4>)
 801bf76:	681b      	ldr	r3, [r3, #0]
 801bf78:	4a5f      	ldr	r2, [pc, #380]	; (801c0f8 <HAL_ADC_Start_DMA+0x1c8>)
 801bf7a:	fba2 2303 	umull	r2, r3, r2, r3
 801bf7e:	0c9a      	lsrs	r2, r3, #18
 801bf80:	4613      	mov	r3, r2
 801bf82:	005b      	lsls	r3, r3, #1
 801bf84:	4413      	add	r3, r2
 801bf86:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801bf88:	e002      	b.n	801bf90 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801bf8a:	693b      	ldr	r3, [r7, #16]
 801bf8c:	3b01      	subs	r3, #1
 801bf8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801bf90:	693b      	ldr	r3, [r7, #16]
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d1f9      	bne.n	801bf8a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 801bf96:	68fb      	ldr	r3, [r7, #12]
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	689b      	ldr	r3, [r3, #8]
 801bf9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bfa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bfa4:	d107      	bne.n	801bfb6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801bfa6:	68fb      	ldr	r3, [r7, #12]
 801bfa8:	681b      	ldr	r3, [r3, #0]
 801bfaa:	689a      	ldr	r2, [r3, #8]
 801bfac:	68fb      	ldr	r3, [r7, #12]
 801bfae:	681b      	ldr	r3, [r3, #0]
 801bfb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801bfb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801bfb6:	68fb      	ldr	r3, [r7, #12]
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	689b      	ldr	r3, [r3, #8]
 801bfbc:	f003 0301 	and.w	r3, r3, #1
 801bfc0:	2b01      	cmp	r3, #1
 801bfc2:	f040 8086 	bne.w	801c0d2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801bfc6:	68fb      	ldr	r3, [r7, #12]
 801bfc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801bfce:	f023 0301 	bic.w	r3, r3, #1
 801bfd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801bfd6:	68fb      	ldr	r3, [r7, #12]
 801bfd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	685b      	ldr	r3, [r3, #4]
 801bfe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d007      	beq.n	801bff8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801bfe8:	68fb      	ldr	r3, [r7, #12]
 801bfea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801bff0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801bff4:	68fb      	ldr	r3, [r7, #12]
 801bff6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801bff8:	68fb      	ldr	r3, [r7, #12]
 801bffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c004:	d106      	bne.n	801c014 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801c006:	68fb      	ldr	r3, [r7, #12]
 801c008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c00a:	f023 0206 	bic.w	r2, r3, #6
 801c00e:	68fb      	ldr	r3, [r7, #12]
 801c010:	645a      	str	r2, [r3, #68]	; 0x44
 801c012:	e002      	b.n	801c01a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	2200      	movs	r2, #0
 801c018:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	2200      	movs	r2, #0
 801c01e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801c022:	4b36      	ldr	r3, [pc, #216]	; (801c0fc <HAL_ADC_Start_DMA+0x1cc>)
 801c024:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c02a:	4a35      	ldr	r2, [pc, #212]	; (801c100 <HAL_ADC_Start_DMA+0x1d0>)
 801c02c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c032:	4a34      	ldr	r2, [pc, #208]	; (801c104 <HAL_ADC_Start_DMA+0x1d4>)
 801c034:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c03a:	4a33      	ldr	r2, [pc, #204]	; (801c108 <HAL_ADC_Start_DMA+0x1d8>)
 801c03c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801c046:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	681b      	ldr	r3, [r3, #0]
 801c04c:	685a      	ldr	r2, [r3, #4]
 801c04e:	68fb      	ldr	r3, [r7, #12]
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801c056:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801c058:	68fb      	ldr	r3, [r7, #12]
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	689a      	ldr	r2, [r3, #8]
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	681b      	ldr	r3, [r3, #0]
 801c062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c066:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	681b      	ldr	r3, [r3, #0]
 801c070:	334c      	adds	r3, #76	; 0x4c
 801c072:	4619      	mov	r1, r3
 801c074:	68ba      	ldr	r2, [r7, #8]
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	f000 fd0a 	bl	801ca90 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801c07c:	697b      	ldr	r3, [r7, #20]
 801c07e:	685b      	ldr	r3, [r3, #4]
 801c080:	f003 031f 	and.w	r3, r3, #31
 801c084:	2b00      	cmp	r3, #0
 801c086:	d10f      	bne.n	801c0a8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801c088:	68fb      	ldr	r3, [r7, #12]
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	689b      	ldr	r3, [r3, #8]
 801c08e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801c092:	2b00      	cmp	r3, #0
 801c094:	d129      	bne.n	801c0ea <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801c096:	68fb      	ldr	r3, [r7, #12]
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	689a      	ldr	r2, [r3, #8]
 801c09c:	68fb      	ldr	r3, [r7, #12]
 801c09e:	681b      	ldr	r3, [r3, #0]
 801c0a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801c0a4:	609a      	str	r2, [r3, #8]
 801c0a6:	e020      	b.n	801c0ea <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801c0a8:	68fb      	ldr	r3, [r7, #12]
 801c0aa:	681b      	ldr	r3, [r3, #0]
 801c0ac:	4a17      	ldr	r2, [pc, #92]	; (801c10c <HAL_ADC_Start_DMA+0x1dc>)
 801c0ae:	4293      	cmp	r3, r2
 801c0b0:	d11b      	bne.n	801c0ea <HAL_ADC_Start_DMA+0x1ba>
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	689b      	ldr	r3, [r3, #8]
 801c0b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d114      	bne.n	801c0ea <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	681b      	ldr	r3, [r3, #0]
 801c0c4:	689a      	ldr	r2, [r3, #8]
 801c0c6:	68fb      	ldr	r3, [r7, #12]
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801c0ce:	609a      	str	r2, [r3, #8]
 801c0d0:	e00b      	b.n	801c0ea <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0d6:	f043 0210 	orr.w	r2, r3, #16
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801c0de:	68fb      	ldr	r3, [r7, #12]
 801c0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0e2:	f043 0201 	orr.w	r2, r3, #1
 801c0e6:	68fb      	ldr	r3, [r7, #12]
 801c0e8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 801c0ea:	2300      	movs	r3, #0
}
 801c0ec:	4618      	mov	r0, r3
 801c0ee:	3718      	adds	r7, #24
 801c0f0:	46bd      	mov	sp, r7
 801c0f2:	bd80      	pop	{r7, pc}
 801c0f4:	20000020 	.word	0x20000020
 801c0f8:	431bde83 	.word	0x431bde83
 801c0fc:	40012300 	.word	0x40012300
 801c100:	0801c5a9 	.word	0x0801c5a9
 801c104:	0801c663 	.word	0x0801c663
 801c108:	0801c67f 	.word	0x0801c67f
 801c10c:	40012000 	.word	0x40012000

0801c110 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801c110:	b480      	push	{r7}
 801c112:	b083      	sub	sp, #12
 801c114:	af00      	add	r7, sp, #0
 801c116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801c118:	bf00      	nop
 801c11a:	370c      	adds	r7, #12
 801c11c:	46bd      	mov	sp, r7
 801c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c122:	4770      	bx	lr

0801c124 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801c124:	b480      	push	{r7}
 801c126:	b083      	sub	sp, #12
 801c128:	af00      	add	r7, sp, #0
 801c12a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 801c12c:	bf00      	nop
 801c12e:	370c      	adds	r7, #12
 801c130:	46bd      	mov	sp, r7
 801c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c136:	4770      	bx	lr

0801c138 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801c138:	b480      	push	{r7}
 801c13a:	b083      	sub	sp, #12
 801c13c:	af00      	add	r7, sp, #0
 801c13e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 801c140:	bf00      	nop
 801c142:	370c      	adds	r7, #12
 801c144:	46bd      	mov	sp, r7
 801c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c14a:	4770      	bx	lr

0801c14c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801c14c:	b480      	push	{r7}
 801c14e:	b085      	sub	sp, #20
 801c150:	af00      	add	r7, sp, #0
 801c152:	6078      	str	r0, [r7, #4]
 801c154:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801c156:	2300      	movs	r3, #0
 801c158:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c160:	2b01      	cmp	r3, #1
 801c162:	d101      	bne.n	801c168 <HAL_ADC_ConfigChannel+0x1c>
 801c164:	2302      	movs	r3, #2
 801c166:	e113      	b.n	801c390 <HAL_ADC_ConfigChannel+0x244>
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	2201      	movs	r2, #1
 801c16c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801c170:	683b      	ldr	r3, [r7, #0]
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	2b09      	cmp	r3, #9
 801c176:	d925      	bls.n	801c1c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	681b      	ldr	r3, [r3, #0]
 801c17c:	68d9      	ldr	r1, [r3, #12]
 801c17e:	683b      	ldr	r3, [r7, #0]
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	b29b      	uxth	r3, r3
 801c184:	461a      	mov	r2, r3
 801c186:	4613      	mov	r3, r2
 801c188:	005b      	lsls	r3, r3, #1
 801c18a:	4413      	add	r3, r2
 801c18c:	3b1e      	subs	r3, #30
 801c18e:	2207      	movs	r2, #7
 801c190:	fa02 f303 	lsl.w	r3, r2, r3
 801c194:	43da      	mvns	r2, r3
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	681b      	ldr	r3, [r3, #0]
 801c19a:	400a      	ands	r2, r1
 801c19c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	681b      	ldr	r3, [r3, #0]
 801c1a2:	68d9      	ldr	r1, [r3, #12]
 801c1a4:	683b      	ldr	r3, [r7, #0]
 801c1a6:	689a      	ldr	r2, [r3, #8]
 801c1a8:	683b      	ldr	r3, [r7, #0]
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	b29b      	uxth	r3, r3
 801c1ae:	4618      	mov	r0, r3
 801c1b0:	4603      	mov	r3, r0
 801c1b2:	005b      	lsls	r3, r3, #1
 801c1b4:	4403      	add	r3, r0
 801c1b6:	3b1e      	subs	r3, #30
 801c1b8:	409a      	lsls	r2, r3
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	430a      	orrs	r2, r1
 801c1c0:	60da      	str	r2, [r3, #12]
 801c1c2:	e022      	b.n	801c20a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	6919      	ldr	r1, [r3, #16]
 801c1ca:	683b      	ldr	r3, [r7, #0]
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	b29b      	uxth	r3, r3
 801c1d0:	461a      	mov	r2, r3
 801c1d2:	4613      	mov	r3, r2
 801c1d4:	005b      	lsls	r3, r3, #1
 801c1d6:	4413      	add	r3, r2
 801c1d8:	2207      	movs	r2, #7
 801c1da:	fa02 f303 	lsl.w	r3, r2, r3
 801c1de:	43da      	mvns	r2, r3
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	681b      	ldr	r3, [r3, #0]
 801c1e4:	400a      	ands	r2, r1
 801c1e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	6919      	ldr	r1, [r3, #16]
 801c1ee:	683b      	ldr	r3, [r7, #0]
 801c1f0:	689a      	ldr	r2, [r3, #8]
 801c1f2:	683b      	ldr	r3, [r7, #0]
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	b29b      	uxth	r3, r3
 801c1f8:	4618      	mov	r0, r3
 801c1fa:	4603      	mov	r3, r0
 801c1fc:	005b      	lsls	r3, r3, #1
 801c1fe:	4403      	add	r3, r0
 801c200:	409a      	lsls	r2, r3
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	430a      	orrs	r2, r1
 801c208:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801c20a:	683b      	ldr	r3, [r7, #0]
 801c20c:	685b      	ldr	r3, [r3, #4]
 801c20e:	2b06      	cmp	r3, #6
 801c210:	d824      	bhi.n	801c25c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	681b      	ldr	r3, [r3, #0]
 801c216:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801c218:	683b      	ldr	r3, [r7, #0]
 801c21a:	685a      	ldr	r2, [r3, #4]
 801c21c:	4613      	mov	r3, r2
 801c21e:	009b      	lsls	r3, r3, #2
 801c220:	4413      	add	r3, r2
 801c222:	3b05      	subs	r3, #5
 801c224:	221f      	movs	r2, #31
 801c226:	fa02 f303 	lsl.w	r3, r2, r3
 801c22a:	43da      	mvns	r2, r3
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	400a      	ands	r2, r1
 801c232:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801c23a:	683b      	ldr	r3, [r7, #0]
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	b29b      	uxth	r3, r3
 801c240:	4618      	mov	r0, r3
 801c242:	683b      	ldr	r3, [r7, #0]
 801c244:	685a      	ldr	r2, [r3, #4]
 801c246:	4613      	mov	r3, r2
 801c248:	009b      	lsls	r3, r3, #2
 801c24a:	4413      	add	r3, r2
 801c24c:	3b05      	subs	r3, #5
 801c24e:	fa00 f203 	lsl.w	r2, r0, r3
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	681b      	ldr	r3, [r3, #0]
 801c256:	430a      	orrs	r2, r1
 801c258:	635a      	str	r2, [r3, #52]	; 0x34
 801c25a:	e04c      	b.n	801c2f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801c25c:	683b      	ldr	r3, [r7, #0]
 801c25e:	685b      	ldr	r3, [r3, #4]
 801c260:	2b0c      	cmp	r3, #12
 801c262:	d824      	bhi.n	801c2ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801c26a:	683b      	ldr	r3, [r7, #0]
 801c26c:	685a      	ldr	r2, [r3, #4]
 801c26e:	4613      	mov	r3, r2
 801c270:	009b      	lsls	r3, r3, #2
 801c272:	4413      	add	r3, r2
 801c274:	3b23      	subs	r3, #35	; 0x23
 801c276:	221f      	movs	r2, #31
 801c278:	fa02 f303 	lsl.w	r3, r2, r3
 801c27c:	43da      	mvns	r2, r3
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	681b      	ldr	r3, [r3, #0]
 801c282:	400a      	ands	r2, r1
 801c284:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801c28c:	683b      	ldr	r3, [r7, #0]
 801c28e:	681b      	ldr	r3, [r3, #0]
 801c290:	b29b      	uxth	r3, r3
 801c292:	4618      	mov	r0, r3
 801c294:	683b      	ldr	r3, [r7, #0]
 801c296:	685a      	ldr	r2, [r3, #4]
 801c298:	4613      	mov	r3, r2
 801c29a:	009b      	lsls	r3, r3, #2
 801c29c:	4413      	add	r3, r2
 801c29e:	3b23      	subs	r3, #35	; 0x23
 801c2a0:	fa00 f203 	lsl.w	r2, r0, r3
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	430a      	orrs	r2, r1
 801c2aa:	631a      	str	r2, [r3, #48]	; 0x30
 801c2ac:	e023      	b.n	801c2f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	681b      	ldr	r3, [r3, #0]
 801c2b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c2b4:	683b      	ldr	r3, [r7, #0]
 801c2b6:	685a      	ldr	r2, [r3, #4]
 801c2b8:	4613      	mov	r3, r2
 801c2ba:	009b      	lsls	r3, r3, #2
 801c2bc:	4413      	add	r3, r2
 801c2be:	3b41      	subs	r3, #65	; 0x41
 801c2c0:	221f      	movs	r2, #31
 801c2c2:	fa02 f303 	lsl.w	r3, r2, r3
 801c2c6:	43da      	mvns	r2, r3
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	400a      	ands	r2, r1
 801c2ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c2d6:	683b      	ldr	r3, [r7, #0]
 801c2d8:	681b      	ldr	r3, [r3, #0]
 801c2da:	b29b      	uxth	r3, r3
 801c2dc:	4618      	mov	r0, r3
 801c2de:	683b      	ldr	r3, [r7, #0]
 801c2e0:	685a      	ldr	r2, [r3, #4]
 801c2e2:	4613      	mov	r3, r2
 801c2e4:	009b      	lsls	r3, r3, #2
 801c2e6:	4413      	add	r3, r2
 801c2e8:	3b41      	subs	r3, #65	; 0x41
 801c2ea:	fa00 f203 	lsl.w	r2, r0, r3
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	430a      	orrs	r2, r1
 801c2f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801c2f6:	4b29      	ldr	r3, [pc, #164]	; (801c39c <HAL_ADC_ConfigChannel+0x250>)
 801c2f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	681b      	ldr	r3, [r3, #0]
 801c2fe:	4a28      	ldr	r2, [pc, #160]	; (801c3a0 <HAL_ADC_ConfigChannel+0x254>)
 801c300:	4293      	cmp	r3, r2
 801c302:	d10f      	bne.n	801c324 <HAL_ADC_ConfigChannel+0x1d8>
 801c304:	683b      	ldr	r3, [r7, #0]
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	2b12      	cmp	r3, #18
 801c30a:	d10b      	bne.n	801c324 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801c30c:	68fb      	ldr	r3, [r7, #12]
 801c30e:	685b      	ldr	r3, [r3, #4]
 801c310:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801c318:	68fb      	ldr	r3, [r7, #12]
 801c31a:	685b      	ldr	r3, [r3, #4]
 801c31c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801c320:	68fb      	ldr	r3, [r7, #12]
 801c322:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	4a1d      	ldr	r2, [pc, #116]	; (801c3a0 <HAL_ADC_ConfigChannel+0x254>)
 801c32a:	4293      	cmp	r3, r2
 801c32c:	d12b      	bne.n	801c386 <HAL_ADC_ConfigChannel+0x23a>
 801c32e:	683b      	ldr	r3, [r7, #0]
 801c330:	681b      	ldr	r3, [r3, #0]
 801c332:	4a1c      	ldr	r2, [pc, #112]	; (801c3a4 <HAL_ADC_ConfigChannel+0x258>)
 801c334:	4293      	cmp	r3, r2
 801c336:	d003      	beq.n	801c340 <HAL_ADC_ConfigChannel+0x1f4>
 801c338:	683b      	ldr	r3, [r7, #0]
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	2b11      	cmp	r3, #17
 801c33e:	d122      	bne.n	801c386 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801c340:	68fb      	ldr	r3, [r7, #12]
 801c342:	685b      	ldr	r3, [r3, #4]
 801c344:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801c34c:	68fb      	ldr	r3, [r7, #12]
 801c34e:	685b      	ldr	r3, [r3, #4]
 801c350:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801c354:	68fb      	ldr	r3, [r7, #12]
 801c356:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801c358:	683b      	ldr	r3, [r7, #0]
 801c35a:	681b      	ldr	r3, [r3, #0]
 801c35c:	4a11      	ldr	r2, [pc, #68]	; (801c3a4 <HAL_ADC_ConfigChannel+0x258>)
 801c35e:	4293      	cmp	r3, r2
 801c360:	d111      	bne.n	801c386 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801c362:	4b11      	ldr	r3, [pc, #68]	; (801c3a8 <HAL_ADC_ConfigChannel+0x25c>)
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	4a11      	ldr	r2, [pc, #68]	; (801c3ac <HAL_ADC_ConfigChannel+0x260>)
 801c368:	fba2 2303 	umull	r2, r3, r2, r3
 801c36c:	0c9a      	lsrs	r2, r3, #18
 801c36e:	4613      	mov	r3, r2
 801c370:	009b      	lsls	r3, r3, #2
 801c372:	4413      	add	r3, r2
 801c374:	005b      	lsls	r3, r3, #1
 801c376:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801c378:	e002      	b.n	801c380 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801c37a:	68bb      	ldr	r3, [r7, #8]
 801c37c:	3b01      	subs	r3, #1
 801c37e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801c380:	68bb      	ldr	r3, [r7, #8]
 801c382:	2b00      	cmp	r3, #0
 801c384:	d1f9      	bne.n	801c37a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	2200      	movs	r2, #0
 801c38a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801c38e:	2300      	movs	r3, #0
}
 801c390:	4618      	mov	r0, r3
 801c392:	3714      	adds	r7, #20
 801c394:	46bd      	mov	sp, r7
 801c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c39a:	4770      	bx	lr
 801c39c:	40012300 	.word	0x40012300
 801c3a0:	40012000 	.word	0x40012000
 801c3a4:	10000012 	.word	0x10000012
 801c3a8:	20000020 	.word	0x20000020
 801c3ac:	431bde83 	.word	0x431bde83

0801c3b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801c3b0:	b480      	push	{r7}
 801c3b2:	b085      	sub	sp, #20
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801c3b8:	4b79      	ldr	r3, [pc, #484]	; (801c5a0 <ADC_Init+0x1f0>)
 801c3ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801c3bc:	68fb      	ldr	r3, [r7, #12]
 801c3be:	685b      	ldr	r3, [r3, #4]
 801c3c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801c3c8:	68fb      	ldr	r3, [r7, #12]
 801c3ca:	685a      	ldr	r2, [r3, #4]
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	685b      	ldr	r3, [r3, #4]
 801c3d0:	431a      	orrs	r2, r3
 801c3d2:	68fb      	ldr	r3, [r7, #12]
 801c3d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	685a      	ldr	r2, [r3, #4]
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c3e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	6859      	ldr	r1, [r3, #4]
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	691b      	ldr	r3, [r3, #16]
 801c3f0:	021a      	lsls	r2, r3, #8
 801c3f2:	687b      	ldr	r3, [r7, #4]
 801c3f4:	681b      	ldr	r3, [r3, #0]
 801c3f6:	430a      	orrs	r2, r1
 801c3f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	685a      	ldr	r2, [r3, #4]
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801c408:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	6859      	ldr	r1, [r3, #4]
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	689a      	ldr	r2, [r3, #8]
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	681b      	ldr	r3, [r3, #0]
 801c418:	430a      	orrs	r2, r1
 801c41a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	689a      	ldr	r2, [r3, #8]
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c42a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	6899      	ldr	r1, [r3, #8]
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	68da      	ldr	r2, [r3, #12]
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	430a      	orrs	r2, r1
 801c43c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c442:	4a58      	ldr	r2, [pc, #352]	; (801c5a4 <ADC_Init+0x1f4>)
 801c444:	4293      	cmp	r3, r2
 801c446:	d022      	beq.n	801c48e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	689a      	ldr	r2, [r3, #8]
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801c456:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	6899      	ldr	r1, [r3, #8]
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	681b      	ldr	r3, [r3, #0]
 801c466:	430a      	orrs	r2, r1
 801c468:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	689a      	ldr	r2, [r3, #8]
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801c478:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	6899      	ldr	r1, [r3, #8]
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	430a      	orrs	r2, r1
 801c48a:	609a      	str	r2, [r3, #8]
 801c48c:	e00f      	b.n	801c4ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	689a      	ldr	r2, [r3, #8]
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801c49c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	689a      	ldr	r2, [r3, #8]
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	681b      	ldr	r3, [r3, #0]
 801c4a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801c4ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	689a      	ldr	r2, [r3, #8]
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	f022 0202 	bic.w	r2, r2, #2
 801c4bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	6899      	ldr	r1, [r3, #8]
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	7e1b      	ldrb	r3, [r3, #24]
 801c4c8:	005a      	lsls	r2, r3, #1
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	430a      	orrs	r2, r1
 801c4d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d01b      	beq.n	801c514 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	685a      	ldr	r2, [r3, #4]
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	681b      	ldr	r3, [r3, #0]
 801c4e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c4ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	685a      	ldr	r2, [r3, #4]
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801c4fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	681b      	ldr	r3, [r3, #0]
 801c500:	6859      	ldr	r1, [r3, #4]
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c506:	3b01      	subs	r3, #1
 801c508:	035a      	lsls	r2, r3, #13
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	430a      	orrs	r2, r1
 801c510:	605a      	str	r2, [r3, #4]
 801c512:	e007      	b.n	801c524 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	681b      	ldr	r3, [r3, #0]
 801c518:	685a      	ldr	r2, [r3, #4]
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c522:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801c532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	69db      	ldr	r3, [r3, #28]
 801c53e:	3b01      	subs	r3, #1
 801c540:	051a      	lsls	r2, r3, #20
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	430a      	orrs	r2, r1
 801c548:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	681b      	ldr	r3, [r3, #0]
 801c54e:	689a      	ldr	r2, [r3, #8]
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801c558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	6899      	ldr	r1, [r3, #8]
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c566:	025a      	lsls	r2, r3, #9
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	681b      	ldr	r3, [r3, #0]
 801c56c:	430a      	orrs	r2, r1
 801c56e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	689a      	ldr	r2, [r3, #8]
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801c57e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	6899      	ldr	r1, [r3, #8]
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	695b      	ldr	r3, [r3, #20]
 801c58a:	029a      	lsls	r2, r3, #10
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	681b      	ldr	r3, [r3, #0]
 801c590:	430a      	orrs	r2, r1
 801c592:	609a      	str	r2, [r3, #8]
}
 801c594:	bf00      	nop
 801c596:	3714      	adds	r7, #20
 801c598:	46bd      	mov	sp, r7
 801c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c59e:	4770      	bx	lr
 801c5a0:	40012300 	.word	0x40012300
 801c5a4:	0f000001 	.word	0x0f000001

0801c5a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	b084      	sub	sp, #16
 801c5ac:	af00      	add	r7, sp, #0
 801c5ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	d13c      	bne.n	801c63c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801c5ce:	68fb      	ldr	r3, [r7, #12]
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	689b      	ldr	r3, [r3, #8]
 801c5d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d12b      	bne.n	801c634 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d127      	bne.n	801c634 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c5ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d006      	beq.n	801c600 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	689b      	ldr	r3, [r3, #8]
 801c5f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	d119      	bne.n	801c634 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	681b      	ldr	r3, [r3, #0]
 801c604:	685a      	ldr	r2, [r3, #4]
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	f022 0220 	bic.w	r2, r2, #32
 801c60e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c614:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801c618:	68fb      	ldr	r3, [r7, #12]
 801c61a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c624:	2b00      	cmp	r3, #0
 801c626:	d105      	bne.n	801c634 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c62c:	f043 0201 	orr.w	r2, r3, #1
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801c634:	68f8      	ldr	r0, [r7, #12]
 801c636:	f7ff fd6b 	bl	801c110 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801c63a:	e00e      	b.n	801c65a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c640:	f003 0310 	and.w	r3, r3, #16
 801c644:	2b00      	cmp	r3, #0
 801c646:	d003      	beq.n	801c650 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801c648:	68f8      	ldr	r0, [r7, #12]
 801c64a:	f7ff fd75 	bl	801c138 <HAL_ADC_ErrorCallback>
}
 801c64e:	e004      	b.n	801c65a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c656:	6878      	ldr	r0, [r7, #4]
 801c658:	4798      	blx	r3
}
 801c65a:	bf00      	nop
 801c65c:	3710      	adds	r7, #16
 801c65e:	46bd      	mov	sp, r7
 801c660:	bd80      	pop	{r7, pc}

0801c662 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801c662:	b580      	push	{r7, lr}
 801c664:	b084      	sub	sp, #16
 801c666:	af00      	add	r7, sp, #0
 801c668:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c66e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801c670:	68f8      	ldr	r0, [r7, #12]
 801c672:	f7ff fd57 	bl	801c124 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801c676:	bf00      	nop
 801c678:	3710      	adds	r7, #16
 801c67a:	46bd      	mov	sp, r7
 801c67c:	bd80      	pop	{r7, pc}

0801c67e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801c67e:	b580      	push	{r7, lr}
 801c680:	b084      	sub	sp, #16
 801c682:	af00      	add	r7, sp, #0
 801c684:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c68a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	2240      	movs	r2, #64	; 0x40
 801c690:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c696:	f043 0204 	orr.w	r2, r3, #4
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801c69e:	68f8      	ldr	r0, [r7, #12]
 801c6a0:	f7ff fd4a 	bl	801c138 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801c6a4:	bf00      	nop
 801c6a6:	3710      	adds	r7, #16
 801c6a8:	46bd      	mov	sp, r7
 801c6aa:	bd80      	pop	{r7, pc}

0801c6ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801c6ac:	b480      	push	{r7}
 801c6ae:	b085      	sub	sp, #20
 801c6b0:	af00      	add	r7, sp, #0
 801c6b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	f003 0307 	and.w	r3, r3, #7
 801c6ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801c6bc:	4b0c      	ldr	r3, [pc, #48]	; (801c6f0 <__NVIC_SetPriorityGrouping+0x44>)
 801c6be:	68db      	ldr	r3, [r3, #12]
 801c6c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801c6c2:	68ba      	ldr	r2, [r7, #8]
 801c6c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801c6c8:	4013      	ands	r3, r2
 801c6ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801c6cc:	68fb      	ldr	r3, [r7, #12]
 801c6ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801c6d0:	68bb      	ldr	r3, [r7, #8]
 801c6d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801c6d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801c6d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c6dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801c6de:	4a04      	ldr	r2, [pc, #16]	; (801c6f0 <__NVIC_SetPriorityGrouping+0x44>)
 801c6e0:	68bb      	ldr	r3, [r7, #8]
 801c6e2:	60d3      	str	r3, [r2, #12]
}
 801c6e4:	bf00      	nop
 801c6e6:	3714      	adds	r7, #20
 801c6e8:	46bd      	mov	sp, r7
 801c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6ee:	4770      	bx	lr
 801c6f0:	e000ed00 	.word	0xe000ed00

0801c6f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801c6f4:	b480      	push	{r7}
 801c6f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801c6f8:	4b04      	ldr	r3, [pc, #16]	; (801c70c <__NVIC_GetPriorityGrouping+0x18>)
 801c6fa:	68db      	ldr	r3, [r3, #12]
 801c6fc:	0a1b      	lsrs	r3, r3, #8
 801c6fe:	f003 0307 	and.w	r3, r3, #7
}
 801c702:	4618      	mov	r0, r3
 801c704:	46bd      	mov	sp, r7
 801c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c70a:	4770      	bx	lr
 801c70c:	e000ed00 	.word	0xe000ed00

0801c710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801c710:	b480      	push	{r7}
 801c712:	b083      	sub	sp, #12
 801c714:	af00      	add	r7, sp, #0
 801c716:	4603      	mov	r3, r0
 801c718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c71a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c71e:	2b00      	cmp	r3, #0
 801c720:	db0b      	blt.n	801c73a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c722:	79fb      	ldrb	r3, [r7, #7]
 801c724:	f003 021f 	and.w	r2, r3, #31
 801c728:	4907      	ldr	r1, [pc, #28]	; (801c748 <__NVIC_EnableIRQ+0x38>)
 801c72a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c72e:	095b      	lsrs	r3, r3, #5
 801c730:	2001      	movs	r0, #1
 801c732:	fa00 f202 	lsl.w	r2, r0, r2
 801c736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801c73a:	bf00      	nop
 801c73c:	370c      	adds	r7, #12
 801c73e:	46bd      	mov	sp, r7
 801c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c744:	4770      	bx	lr
 801c746:	bf00      	nop
 801c748:	e000e100 	.word	0xe000e100

0801c74c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801c74c:	b480      	push	{r7}
 801c74e:	b083      	sub	sp, #12
 801c750:	af00      	add	r7, sp, #0
 801c752:	4603      	mov	r3, r0
 801c754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	db12      	blt.n	801c784 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c75e:	79fb      	ldrb	r3, [r7, #7]
 801c760:	f003 021f 	and.w	r2, r3, #31
 801c764:	490a      	ldr	r1, [pc, #40]	; (801c790 <__NVIC_DisableIRQ+0x44>)
 801c766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c76a:	095b      	lsrs	r3, r3, #5
 801c76c:	2001      	movs	r0, #1
 801c76e:	fa00 f202 	lsl.w	r2, r0, r2
 801c772:	3320      	adds	r3, #32
 801c774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801c778:	f3bf 8f4f 	dsb	sy
}
 801c77c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801c77e:	f3bf 8f6f 	isb	sy
}
 801c782:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 801c784:	bf00      	nop
 801c786:	370c      	adds	r7, #12
 801c788:	46bd      	mov	sp, r7
 801c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c78e:	4770      	bx	lr
 801c790:	e000e100 	.word	0xe000e100

0801c794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801c794:	b480      	push	{r7}
 801c796:	b083      	sub	sp, #12
 801c798:	af00      	add	r7, sp, #0
 801c79a:	4603      	mov	r3, r0
 801c79c:	6039      	str	r1, [r7, #0]
 801c79e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c7a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	db0a      	blt.n	801c7be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c7a8:	683b      	ldr	r3, [r7, #0]
 801c7aa:	b2da      	uxtb	r2, r3
 801c7ac:	490c      	ldr	r1, [pc, #48]	; (801c7e0 <__NVIC_SetPriority+0x4c>)
 801c7ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c7b2:	0112      	lsls	r2, r2, #4
 801c7b4:	b2d2      	uxtb	r2, r2
 801c7b6:	440b      	add	r3, r1
 801c7b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801c7bc:	e00a      	b.n	801c7d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c7be:	683b      	ldr	r3, [r7, #0]
 801c7c0:	b2da      	uxtb	r2, r3
 801c7c2:	4908      	ldr	r1, [pc, #32]	; (801c7e4 <__NVIC_SetPriority+0x50>)
 801c7c4:	79fb      	ldrb	r3, [r7, #7]
 801c7c6:	f003 030f 	and.w	r3, r3, #15
 801c7ca:	3b04      	subs	r3, #4
 801c7cc:	0112      	lsls	r2, r2, #4
 801c7ce:	b2d2      	uxtb	r2, r2
 801c7d0:	440b      	add	r3, r1
 801c7d2:	761a      	strb	r2, [r3, #24]
}
 801c7d4:	bf00      	nop
 801c7d6:	370c      	adds	r7, #12
 801c7d8:	46bd      	mov	sp, r7
 801c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7de:	4770      	bx	lr
 801c7e0:	e000e100 	.word	0xe000e100
 801c7e4:	e000ed00 	.word	0xe000ed00

0801c7e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801c7e8:	b480      	push	{r7}
 801c7ea:	b089      	sub	sp, #36	; 0x24
 801c7ec:	af00      	add	r7, sp, #0
 801c7ee:	60f8      	str	r0, [r7, #12]
 801c7f0:	60b9      	str	r1, [r7, #8]
 801c7f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	f003 0307 	and.w	r3, r3, #7
 801c7fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801c7fc:	69fb      	ldr	r3, [r7, #28]
 801c7fe:	f1c3 0307 	rsb	r3, r3, #7
 801c802:	2b04      	cmp	r3, #4
 801c804:	bf28      	it	cs
 801c806:	2304      	movcs	r3, #4
 801c808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801c80a:	69fb      	ldr	r3, [r7, #28]
 801c80c:	3304      	adds	r3, #4
 801c80e:	2b06      	cmp	r3, #6
 801c810:	d902      	bls.n	801c818 <NVIC_EncodePriority+0x30>
 801c812:	69fb      	ldr	r3, [r7, #28]
 801c814:	3b03      	subs	r3, #3
 801c816:	e000      	b.n	801c81a <NVIC_EncodePriority+0x32>
 801c818:	2300      	movs	r3, #0
 801c81a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c81c:	f04f 32ff 	mov.w	r2, #4294967295
 801c820:	69bb      	ldr	r3, [r7, #24]
 801c822:	fa02 f303 	lsl.w	r3, r2, r3
 801c826:	43da      	mvns	r2, r3
 801c828:	68bb      	ldr	r3, [r7, #8]
 801c82a:	401a      	ands	r2, r3
 801c82c:	697b      	ldr	r3, [r7, #20]
 801c82e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801c830:	f04f 31ff 	mov.w	r1, #4294967295
 801c834:	697b      	ldr	r3, [r7, #20]
 801c836:	fa01 f303 	lsl.w	r3, r1, r3
 801c83a:	43d9      	mvns	r1, r3
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c840:	4313      	orrs	r3, r2
         );
}
 801c842:	4618      	mov	r0, r3
 801c844:	3724      	adds	r7, #36	; 0x24
 801c846:	46bd      	mov	sp, r7
 801c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c84c:	4770      	bx	lr
	...

0801c850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801c850:	b580      	push	{r7, lr}
 801c852:	b082      	sub	sp, #8
 801c854:	af00      	add	r7, sp, #0
 801c856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801c858:	687b      	ldr	r3, [r7, #4]
 801c85a:	3b01      	subs	r3, #1
 801c85c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801c860:	d301      	bcc.n	801c866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801c862:	2301      	movs	r3, #1
 801c864:	e00f      	b.n	801c886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801c866:	4a0a      	ldr	r2, [pc, #40]	; (801c890 <SysTick_Config+0x40>)
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	3b01      	subs	r3, #1
 801c86c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801c86e:	210f      	movs	r1, #15
 801c870:	f04f 30ff 	mov.w	r0, #4294967295
 801c874:	f7ff ff8e 	bl	801c794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801c878:	4b05      	ldr	r3, [pc, #20]	; (801c890 <SysTick_Config+0x40>)
 801c87a:	2200      	movs	r2, #0
 801c87c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801c87e:	4b04      	ldr	r3, [pc, #16]	; (801c890 <SysTick_Config+0x40>)
 801c880:	2207      	movs	r2, #7
 801c882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801c884:	2300      	movs	r3, #0
}
 801c886:	4618      	mov	r0, r3
 801c888:	3708      	adds	r7, #8
 801c88a:	46bd      	mov	sp, r7
 801c88c:	bd80      	pop	{r7, pc}
 801c88e:	bf00      	nop
 801c890:	e000e010 	.word	0xe000e010

0801c894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801c894:	b580      	push	{r7, lr}
 801c896:	b082      	sub	sp, #8
 801c898:	af00      	add	r7, sp, #0
 801c89a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801c89c:	6878      	ldr	r0, [r7, #4]
 801c89e:	f7ff ff05 	bl	801c6ac <__NVIC_SetPriorityGrouping>
}
 801c8a2:	bf00      	nop
 801c8a4:	3708      	adds	r7, #8
 801c8a6:	46bd      	mov	sp, r7
 801c8a8:	bd80      	pop	{r7, pc}

0801c8aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801c8aa:	b580      	push	{r7, lr}
 801c8ac:	b086      	sub	sp, #24
 801c8ae:	af00      	add	r7, sp, #0
 801c8b0:	4603      	mov	r3, r0
 801c8b2:	60b9      	str	r1, [r7, #8]
 801c8b4:	607a      	str	r2, [r7, #4]
 801c8b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801c8b8:	2300      	movs	r3, #0
 801c8ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801c8bc:	f7ff ff1a 	bl	801c6f4 <__NVIC_GetPriorityGrouping>
 801c8c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801c8c2:	687a      	ldr	r2, [r7, #4]
 801c8c4:	68b9      	ldr	r1, [r7, #8]
 801c8c6:	6978      	ldr	r0, [r7, #20]
 801c8c8:	f7ff ff8e 	bl	801c7e8 <NVIC_EncodePriority>
 801c8cc:	4602      	mov	r2, r0
 801c8ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c8d2:	4611      	mov	r1, r2
 801c8d4:	4618      	mov	r0, r3
 801c8d6:	f7ff ff5d 	bl	801c794 <__NVIC_SetPriority>
}
 801c8da:	bf00      	nop
 801c8dc:	3718      	adds	r7, #24
 801c8de:	46bd      	mov	sp, r7
 801c8e0:	bd80      	pop	{r7, pc}

0801c8e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801c8e2:	b580      	push	{r7, lr}
 801c8e4:	b082      	sub	sp, #8
 801c8e6:	af00      	add	r7, sp, #0
 801c8e8:	4603      	mov	r3, r0
 801c8ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801c8ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c8f0:	4618      	mov	r0, r3
 801c8f2:	f7ff ff0d 	bl	801c710 <__NVIC_EnableIRQ>
}
 801c8f6:	bf00      	nop
 801c8f8:	3708      	adds	r7, #8
 801c8fa:	46bd      	mov	sp, r7
 801c8fc:	bd80      	pop	{r7, pc}

0801c8fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801c8fe:	b580      	push	{r7, lr}
 801c900:	b082      	sub	sp, #8
 801c902:	af00      	add	r7, sp, #0
 801c904:	4603      	mov	r3, r0
 801c906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801c908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c90c:	4618      	mov	r0, r3
 801c90e:	f7ff ff1d 	bl	801c74c <__NVIC_DisableIRQ>
}
 801c912:	bf00      	nop
 801c914:	3708      	adds	r7, #8
 801c916:	46bd      	mov	sp, r7
 801c918:	bd80      	pop	{r7, pc}

0801c91a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801c91a:	b580      	push	{r7, lr}
 801c91c:	b082      	sub	sp, #8
 801c91e:	af00      	add	r7, sp, #0
 801c920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801c922:	6878      	ldr	r0, [r7, #4]
 801c924:	f7ff ff94 	bl	801c850 <SysTick_Config>
 801c928:	4603      	mov	r3, r0
}
 801c92a:	4618      	mov	r0, r3
 801c92c:	3708      	adds	r7, #8
 801c92e:	46bd      	mov	sp, r7
 801c930:	bd80      	pop	{r7, pc}
	...

0801c934 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801c934:	b580      	push	{r7, lr}
 801c936:	b086      	sub	sp, #24
 801c938:	af00      	add	r7, sp, #0
 801c93a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801c93c:	2300      	movs	r3, #0
 801c93e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801c940:	f7ff faa6 	bl	801be90 <HAL_GetTick>
 801c944:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801c946:	687b      	ldr	r3, [r7, #4]
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d101      	bne.n	801c950 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801c94c:	2301      	movs	r3, #1
 801c94e:	e099      	b.n	801ca84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	2202      	movs	r2, #2
 801c954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	2200      	movs	r2, #0
 801c95c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	681a      	ldr	r2, [r3, #0]
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	f022 0201 	bic.w	r2, r2, #1
 801c96e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c970:	e00f      	b.n	801c992 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801c972:	f7ff fa8d 	bl	801be90 <HAL_GetTick>
 801c976:	4602      	mov	r2, r0
 801c978:	693b      	ldr	r3, [r7, #16]
 801c97a:	1ad3      	subs	r3, r2, r3
 801c97c:	2b05      	cmp	r3, #5
 801c97e:	d908      	bls.n	801c992 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	2220      	movs	r2, #32
 801c984:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	2203      	movs	r2, #3
 801c98a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801c98e:	2303      	movs	r3, #3
 801c990:	e078      	b.n	801ca84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	681b      	ldr	r3, [r3, #0]
 801c998:	f003 0301 	and.w	r3, r3, #1
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d1e8      	bne.n	801c972 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	681b      	ldr	r3, [r3, #0]
 801c9a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801c9a8:	697a      	ldr	r2, [r7, #20]
 801c9aa:	4b38      	ldr	r3, [pc, #224]	; (801ca8c <HAL_DMA_Init+0x158>)
 801c9ac:	4013      	ands	r3, r2
 801c9ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	685a      	ldr	r2, [r3, #4]
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	689b      	ldr	r3, [r3, #8]
 801c9b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c9be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	691b      	ldr	r3, [r3, #16]
 801c9c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c9ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	699b      	ldr	r3, [r3, #24]
 801c9d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c9d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	6a1b      	ldr	r3, [r3, #32]
 801c9dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c9de:	697a      	ldr	r2, [r7, #20]
 801c9e0:	4313      	orrs	r3, r2
 801c9e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9e8:	2b04      	cmp	r3, #4
 801c9ea:	d107      	bne.n	801c9fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c9f4:	4313      	orrs	r3, r2
 801c9f6:	697a      	ldr	r2, [r7, #20]
 801c9f8:	4313      	orrs	r3, r2
 801c9fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	697a      	ldr	r2, [r7, #20]
 801ca02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	681b      	ldr	r3, [r3, #0]
 801ca08:	695b      	ldr	r3, [r3, #20]
 801ca0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801ca0c:	697b      	ldr	r3, [r7, #20]
 801ca0e:	f023 0307 	bic.w	r3, r3, #7
 801ca12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca18:	697a      	ldr	r2, [r7, #20]
 801ca1a:	4313      	orrs	r3, r2
 801ca1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca22:	2b04      	cmp	r3, #4
 801ca24:	d117      	bne.n	801ca56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca2a:	697a      	ldr	r2, [r7, #20]
 801ca2c:	4313      	orrs	r3, r2
 801ca2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d00e      	beq.n	801ca56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801ca38:	6878      	ldr	r0, [r7, #4]
 801ca3a:	f000 fb1b 	bl	801d074 <DMA_CheckFifoParam>
 801ca3e:	4603      	mov	r3, r0
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d008      	beq.n	801ca56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	2240      	movs	r2, #64	; 0x40
 801ca48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	2201      	movs	r2, #1
 801ca4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801ca52:	2301      	movs	r3, #1
 801ca54:	e016      	b.n	801ca84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	697a      	ldr	r2, [r7, #20]
 801ca5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801ca5e:	6878      	ldr	r0, [r7, #4]
 801ca60:	f000 fad2 	bl	801d008 <DMA_CalcBaseAndBitshift>
 801ca64:	4603      	mov	r3, r0
 801ca66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ca6c:	223f      	movs	r2, #63	; 0x3f
 801ca6e:	409a      	lsls	r2, r3
 801ca70:	68fb      	ldr	r3, [r7, #12]
 801ca72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	2200      	movs	r2, #0
 801ca78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	2201      	movs	r2, #1
 801ca7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801ca82:	2300      	movs	r3, #0
}
 801ca84:	4618      	mov	r0, r3
 801ca86:	3718      	adds	r7, #24
 801ca88:	46bd      	mov	sp, r7
 801ca8a:	bd80      	pop	{r7, pc}
 801ca8c:	f010803f 	.word	0xf010803f

0801ca90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801ca90:	b580      	push	{r7, lr}
 801ca92:	b086      	sub	sp, #24
 801ca94:	af00      	add	r7, sp, #0
 801ca96:	60f8      	str	r0, [r7, #12]
 801ca98:	60b9      	str	r1, [r7, #8]
 801ca9a:	607a      	str	r2, [r7, #4]
 801ca9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801ca9e:	2300      	movs	r3, #0
 801caa0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801caa2:	68fb      	ldr	r3, [r7, #12]
 801caa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801caa6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801caa8:	68fb      	ldr	r3, [r7, #12]
 801caaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801caae:	2b01      	cmp	r3, #1
 801cab0:	d101      	bne.n	801cab6 <HAL_DMA_Start_IT+0x26>
 801cab2:	2302      	movs	r3, #2
 801cab4:	e040      	b.n	801cb38 <HAL_DMA_Start_IT+0xa8>
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	2201      	movs	r2, #1
 801caba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cac4:	b2db      	uxtb	r3, r3
 801cac6:	2b01      	cmp	r3, #1
 801cac8:	d12f      	bne.n	801cb2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801caca:	68fb      	ldr	r3, [r7, #12]
 801cacc:	2202      	movs	r2, #2
 801cace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801cad2:	68fb      	ldr	r3, [r7, #12]
 801cad4:	2200      	movs	r2, #0
 801cad6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801cad8:	683b      	ldr	r3, [r7, #0]
 801cada:	687a      	ldr	r2, [r7, #4]
 801cadc:	68b9      	ldr	r1, [r7, #8]
 801cade:	68f8      	ldr	r0, [r7, #12]
 801cae0:	f000 fa64 	bl	801cfac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801cae4:	68fb      	ldr	r3, [r7, #12]
 801cae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cae8:	223f      	movs	r2, #63	; 0x3f
 801caea:	409a      	lsls	r2, r3
 801caec:	693b      	ldr	r3, [r7, #16]
 801caee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	681b      	ldr	r3, [r3, #0]
 801caf4:	681a      	ldr	r2, [r3, #0]
 801caf6:	68fb      	ldr	r3, [r7, #12]
 801caf8:	681b      	ldr	r3, [r3, #0]
 801cafa:	f042 0216 	orr.w	r2, r2, #22
 801cafe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801cb00:	68fb      	ldr	r3, [r7, #12]
 801cb02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	d007      	beq.n	801cb18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801cb08:	68fb      	ldr	r3, [r7, #12]
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	681a      	ldr	r2, [r3, #0]
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	f042 0208 	orr.w	r2, r2, #8
 801cb16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801cb18:	68fb      	ldr	r3, [r7, #12]
 801cb1a:	681b      	ldr	r3, [r3, #0]
 801cb1c:	681a      	ldr	r2, [r3, #0]
 801cb1e:	68fb      	ldr	r3, [r7, #12]
 801cb20:	681b      	ldr	r3, [r3, #0]
 801cb22:	f042 0201 	orr.w	r2, r2, #1
 801cb26:	601a      	str	r2, [r3, #0]
 801cb28:	e005      	b.n	801cb36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	2200      	movs	r2, #0
 801cb2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801cb32:	2302      	movs	r3, #2
 801cb34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801cb36:	7dfb      	ldrb	r3, [r7, #23]
}
 801cb38:	4618      	mov	r0, r3
 801cb3a:	3718      	adds	r7, #24
 801cb3c:	46bd      	mov	sp, r7
 801cb3e:	bd80      	pop	{r7, pc}

0801cb40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801cb40:	b580      	push	{r7, lr}
 801cb42:	b084      	sub	sp, #16
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801cb4e:	f7ff f99f 	bl	801be90 <HAL_GetTick>
 801cb52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cb5a:	b2db      	uxtb	r3, r3
 801cb5c:	2b02      	cmp	r3, #2
 801cb5e:	d008      	beq.n	801cb72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	2280      	movs	r2, #128	; 0x80
 801cb64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	2200      	movs	r2, #0
 801cb6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801cb6e:	2301      	movs	r3, #1
 801cb70:	e052      	b.n	801cc18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	681b      	ldr	r3, [r3, #0]
 801cb76:	681a      	ldr	r2, [r3, #0]
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	681b      	ldr	r3, [r3, #0]
 801cb7c:	f022 0216 	bic.w	r2, r2, #22
 801cb80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	681b      	ldr	r3, [r3, #0]
 801cb86:	695a      	ldr	r2, [r3, #20]
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801cb90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	d103      	bne.n	801cba2 <HAL_DMA_Abort+0x62>
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d007      	beq.n	801cbb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	681a      	ldr	r2, [r3, #0]
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	f022 0208 	bic.w	r2, r2, #8
 801cbb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	681a      	ldr	r2, [r3, #0]
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	681b      	ldr	r3, [r3, #0]
 801cbbc:	f022 0201 	bic.w	r2, r2, #1
 801cbc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801cbc2:	e013      	b.n	801cbec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801cbc4:	f7ff f964 	bl	801be90 <HAL_GetTick>
 801cbc8:	4602      	mov	r2, r0
 801cbca:	68bb      	ldr	r3, [r7, #8]
 801cbcc:	1ad3      	subs	r3, r2, r3
 801cbce:	2b05      	cmp	r3, #5
 801cbd0:	d90c      	bls.n	801cbec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	2220      	movs	r2, #32
 801cbd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	2203      	movs	r2, #3
 801cbdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801cbe0:	687b      	ldr	r3, [r7, #4]
 801cbe2:	2200      	movs	r2, #0
 801cbe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801cbe8:	2303      	movs	r3, #3
 801cbea:	e015      	b.n	801cc18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	681b      	ldr	r3, [r3, #0]
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	f003 0301 	and.w	r3, r3, #1
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	d1e4      	bne.n	801cbc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801cbfa:	687b      	ldr	r3, [r7, #4]
 801cbfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cbfe:	223f      	movs	r2, #63	; 0x3f
 801cc00:	409a      	lsls	r2, r3
 801cc02:	68fb      	ldr	r3, [r7, #12]
 801cc04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	2201      	movs	r2, #1
 801cc0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	2200      	movs	r2, #0
 801cc12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801cc16:	2300      	movs	r3, #0
}
 801cc18:	4618      	mov	r0, r3
 801cc1a:	3710      	adds	r7, #16
 801cc1c:	46bd      	mov	sp, r7
 801cc1e:	bd80      	pop	{r7, pc}

0801cc20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801cc20:	b480      	push	{r7}
 801cc22:	b083      	sub	sp, #12
 801cc24:	af00      	add	r7, sp, #0
 801cc26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cc2e:	b2db      	uxtb	r3, r3
 801cc30:	2b02      	cmp	r3, #2
 801cc32:	d004      	beq.n	801cc3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	2280      	movs	r2, #128	; 0x80
 801cc38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801cc3a:	2301      	movs	r3, #1
 801cc3c:	e00c      	b.n	801cc58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	2205      	movs	r2, #5
 801cc42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	681b      	ldr	r3, [r3, #0]
 801cc4a:	681a      	ldr	r2, [r3, #0]
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	f022 0201 	bic.w	r2, r2, #1
 801cc54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801cc56:	2300      	movs	r3, #0
}
 801cc58:	4618      	mov	r0, r3
 801cc5a:	370c      	adds	r7, #12
 801cc5c:	46bd      	mov	sp, r7
 801cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc62:	4770      	bx	lr

0801cc64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801cc64:	b580      	push	{r7, lr}
 801cc66:	b086      	sub	sp, #24
 801cc68:	af00      	add	r7, sp, #0
 801cc6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801cc6c:	2300      	movs	r3, #0
 801cc6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801cc70:	4b8e      	ldr	r3, [pc, #568]	; (801ceac <HAL_DMA_IRQHandler+0x248>)
 801cc72:	681b      	ldr	r3, [r3, #0]
 801cc74:	4a8e      	ldr	r2, [pc, #568]	; (801ceb0 <HAL_DMA_IRQHandler+0x24c>)
 801cc76:	fba2 2303 	umull	r2, r3, r2, r3
 801cc7a:	0a9b      	lsrs	r3, r3, #10
 801cc7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801cc7e:	687b      	ldr	r3, [r7, #4]
 801cc80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cc82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801cc84:	693b      	ldr	r3, [r7, #16]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cc8e:	2208      	movs	r2, #8
 801cc90:	409a      	lsls	r2, r3
 801cc92:	68fb      	ldr	r3, [r7, #12]
 801cc94:	4013      	ands	r3, r2
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d01a      	beq.n	801ccd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	681b      	ldr	r3, [r3, #0]
 801cc9e:	681b      	ldr	r3, [r3, #0]
 801cca0:	f003 0304 	and.w	r3, r3, #4
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d013      	beq.n	801ccd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	681a      	ldr	r2, [r3, #0]
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	681b      	ldr	r3, [r3, #0]
 801ccb2:	f022 0204 	bic.w	r2, r2, #4
 801ccb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ccbc:	2208      	movs	r2, #8
 801ccbe:	409a      	lsls	r2, r3
 801ccc0:	693b      	ldr	r3, [r7, #16]
 801ccc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ccc8:	f043 0201 	orr.w	r2, r3, #1
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ccd4:	2201      	movs	r2, #1
 801ccd6:	409a      	lsls	r2, r3
 801ccd8:	68fb      	ldr	r3, [r7, #12]
 801ccda:	4013      	ands	r3, r2
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d012      	beq.n	801cd06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	681b      	ldr	r3, [r3, #0]
 801cce4:	695b      	ldr	r3, [r3, #20]
 801cce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	d00b      	beq.n	801cd06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ccf2:	2201      	movs	r2, #1
 801ccf4:	409a      	lsls	r2, r3
 801ccf6:	693b      	ldr	r3, [r7, #16]
 801ccf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ccfe:	f043 0202 	orr.w	r2, r3, #2
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cd0a:	2204      	movs	r2, #4
 801cd0c:	409a      	lsls	r2, r3
 801cd0e:	68fb      	ldr	r3, [r7, #12]
 801cd10:	4013      	ands	r3, r2
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d012      	beq.n	801cd3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	681b      	ldr	r3, [r3, #0]
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	f003 0302 	and.w	r3, r3, #2
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d00b      	beq.n	801cd3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cd28:	2204      	movs	r2, #4
 801cd2a:	409a      	lsls	r2, r3
 801cd2c:	693b      	ldr	r3, [r7, #16]
 801cd2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd34:	f043 0204 	orr.w	r2, r3, #4
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cd40:	2210      	movs	r2, #16
 801cd42:	409a      	lsls	r2, r3
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	4013      	ands	r3, r2
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d043      	beq.n	801cdd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	681b      	ldr	r3, [r3, #0]
 801cd52:	f003 0308 	and.w	r3, r3, #8
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d03c      	beq.n	801cdd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cd5e:	2210      	movs	r2, #16
 801cd60:	409a      	lsls	r2, r3
 801cd62:	693b      	ldr	r3, [r7, #16]
 801cd64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	681b      	ldr	r3, [r3, #0]
 801cd6a:	681b      	ldr	r3, [r3, #0]
 801cd6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d018      	beq.n	801cda6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	681b      	ldr	r3, [r3, #0]
 801cd78:	681b      	ldr	r3, [r3, #0]
 801cd7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	d108      	bne.n	801cd94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d024      	beq.n	801cdd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cd8e:	6878      	ldr	r0, [r7, #4]
 801cd90:	4798      	blx	r3
 801cd92:	e01f      	b.n	801cdd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d01b      	beq.n	801cdd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801cd9c:	687b      	ldr	r3, [r7, #4]
 801cd9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cda0:	6878      	ldr	r0, [r7, #4]
 801cda2:	4798      	blx	r3
 801cda4:	e016      	b.n	801cdd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801cda6:	687b      	ldr	r3, [r7, #4]
 801cda8:	681b      	ldr	r3, [r3, #0]
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d107      	bne.n	801cdc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	681b      	ldr	r3, [r3, #0]
 801cdb8:	681a      	ldr	r2, [r3, #0]
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	f022 0208 	bic.w	r2, r2, #8
 801cdc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d003      	beq.n	801cdd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cdd0:	6878      	ldr	r0, [r7, #4]
 801cdd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cdd8:	2220      	movs	r2, #32
 801cdda:	409a      	lsls	r2, r3
 801cddc:	68fb      	ldr	r3, [r7, #12]
 801cdde:	4013      	ands	r3, r2
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	f000 808f 	beq.w	801cf04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	681b      	ldr	r3, [r3, #0]
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	f003 0310 	and.w	r3, r3, #16
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	f000 8087 	beq.w	801cf04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801cdf6:	687b      	ldr	r3, [r7, #4]
 801cdf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cdfa:	2220      	movs	r2, #32
 801cdfc:	409a      	lsls	r2, r3
 801cdfe:	693b      	ldr	r3, [r7, #16]
 801ce00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801ce08:	b2db      	uxtb	r3, r3
 801ce0a:	2b05      	cmp	r3, #5
 801ce0c:	d136      	bne.n	801ce7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801ce0e:	687b      	ldr	r3, [r7, #4]
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	681a      	ldr	r2, [r3, #0]
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	f022 0216 	bic.w	r2, r2, #22
 801ce1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	681b      	ldr	r3, [r3, #0]
 801ce22:	695a      	ldr	r2, [r3, #20]
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ce2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d103      	bne.n	801ce3e <HAL_DMA_IRQHandler+0x1da>
 801ce36:	687b      	ldr	r3, [r7, #4]
 801ce38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d007      	beq.n	801ce4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	681a      	ldr	r2, [r3, #0]
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	681b      	ldr	r3, [r3, #0]
 801ce48:	f022 0208 	bic.w	r2, r2, #8
 801ce4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ce52:	223f      	movs	r2, #63	; 0x3f
 801ce54:	409a      	lsls	r2, r3
 801ce56:	693b      	ldr	r3, [r7, #16]
 801ce58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801ce5a:	687b      	ldr	r3, [r7, #4]
 801ce5c:	2201      	movs	r2, #1
 801ce5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	2200      	movs	r2, #0
 801ce66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d07e      	beq.n	801cf70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ce76:	6878      	ldr	r0, [r7, #4]
 801ce78:	4798      	blx	r3
        }
        return;
 801ce7a:	e079      	b.n	801cf70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	681b      	ldr	r3, [r3, #0]
 801ce82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d01d      	beq.n	801cec6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	681b      	ldr	r3, [r3, #0]
 801ce90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d10d      	bne.n	801ceb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	d031      	beq.n	801cf04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cea4:	6878      	ldr	r0, [r7, #4]
 801cea6:	4798      	blx	r3
 801cea8:	e02c      	b.n	801cf04 <HAL_DMA_IRQHandler+0x2a0>
 801ceaa:	bf00      	nop
 801ceac:	20000020 	.word	0x20000020
 801ceb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	d023      	beq.n	801cf04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cec0:	6878      	ldr	r0, [r7, #4]
 801cec2:	4798      	blx	r3
 801cec4:	e01e      	b.n	801cf04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	681b      	ldr	r3, [r3, #0]
 801ceca:	681b      	ldr	r3, [r3, #0]
 801cecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	d10f      	bne.n	801cef4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	681a      	ldr	r2, [r3, #0]
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	f022 0210 	bic.w	r2, r2, #16
 801cee2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	2201      	movs	r2, #1
 801cee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	2200      	movs	r2, #0
 801cef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cef8:	2b00      	cmp	r3, #0
 801cefa:	d003      	beq.n	801cf04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cf00:	6878      	ldr	r0, [r7, #4]
 801cf02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d032      	beq.n	801cf72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf10:	f003 0301 	and.w	r3, r3, #1
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d022      	beq.n	801cf5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	2205      	movs	r2, #5
 801cf1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	681b      	ldr	r3, [r3, #0]
 801cf24:	681a      	ldr	r2, [r3, #0]
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	f022 0201 	bic.w	r2, r2, #1
 801cf2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801cf30:	68bb      	ldr	r3, [r7, #8]
 801cf32:	3301      	adds	r3, #1
 801cf34:	60bb      	str	r3, [r7, #8]
 801cf36:	697a      	ldr	r2, [r7, #20]
 801cf38:	429a      	cmp	r2, r3
 801cf3a:	d307      	bcc.n	801cf4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	681b      	ldr	r3, [r3, #0]
 801cf40:	681b      	ldr	r3, [r3, #0]
 801cf42:	f003 0301 	and.w	r3, r3, #1
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	d1f2      	bne.n	801cf30 <HAL_DMA_IRQHandler+0x2cc>
 801cf4a:	e000      	b.n	801cf4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 801cf4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	2201      	movs	r2, #1
 801cf52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	2200      	movs	r2, #0
 801cf5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d005      	beq.n	801cf72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cf6a:	6878      	ldr	r0, [r7, #4]
 801cf6c:	4798      	blx	r3
 801cf6e:	e000      	b.n	801cf72 <HAL_DMA_IRQHandler+0x30e>
        return;
 801cf70:	bf00      	nop
    }
  }
}
 801cf72:	3718      	adds	r7, #24
 801cf74:	46bd      	mov	sp, r7
 801cf76:	bd80      	pop	{r7, pc}

0801cf78 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801cf78:	b480      	push	{r7}
 801cf7a:	b083      	sub	sp, #12
 801cf7c:	af00      	add	r7, sp, #0
 801cf7e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cf86:	b2db      	uxtb	r3, r3
}
 801cf88:	4618      	mov	r0, r3
 801cf8a:	370c      	adds	r7, #12
 801cf8c:	46bd      	mov	sp, r7
 801cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf92:	4770      	bx	lr

0801cf94 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801cf94:	b480      	push	{r7}
 801cf96:	b083      	sub	sp, #12
 801cf98:	af00      	add	r7, sp, #0
 801cf9a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	370c      	adds	r7, #12
 801cfa4:	46bd      	mov	sp, r7
 801cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfaa:	4770      	bx	lr

0801cfac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801cfac:	b480      	push	{r7}
 801cfae:	b085      	sub	sp, #20
 801cfb0:	af00      	add	r7, sp, #0
 801cfb2:	60f8      	str	r0, [r7, #12]
 801cfb4:	60b9      	str	r1, [r7, #8]
 801cfb6:	607a      	str	r2, [r7, #4]
 801cfb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801cfba:	68fb      	ldr	r3, [r7, #12]
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	681a      	ldr	r2, [r3, #0]
 801cfc0:	68fb      	ldr	r3, [r7, #12]
 801cfc2:	681b      	ldr	r3, [r3, #0]
 801cfc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801cfc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801cfca:	68fb      	ldr	r3, [r7, #12]
 801cfcc:	681b      	ldr	r3, [r3, #0]
 801cfce:	683a      	ldr	r2, [r7, #0]
 801cfd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801cfd2:	68fb      	ldr	r3, [r7, #12]
 801cfd4:	689b      	ldr	r3, [r3, #8]
 801cfd6:	2b40      	cmp	r3, #64	; 0x40
 801cfd8:	d108      	bne.n	801cfec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801cfda:	68fb      	ldr	r3, [r7, #12]
 801cfdc:	681b      	ldr	r3, [r3, #0]
 801cfde:	687a      	ldr	r2, [r7, #4]
 801cfe0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801cfe2:	68fb      	ldr	r3, [r7, #12]
 801cfe4:	681b      	ldr	r3, [r3, #0]
 801cfe6:	68ba      	ldr	r2, [r7, #8]
 801cfe8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801cfea:	e007      	b.n	801cffc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801cfec:	68fb      	ldr	r3, [r7, #12]
 801cfee:	681b      	ldr	r3, [r3, #0]
 801cff0:	68ba      	ldr	r2, [r7, #8]
 801cff2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	681b      	ldr	r3, [r3, #0]
 801cff8:	687a      	ldr	r2, [r7, #4]
 801cffa:	60da      	str	r2, [r3, #12]
}
 801cffc:	bf00      	nop
 801cffe:	3714      	adds	r7, #20
 801d000:	46bd      	mov	sp, r7
 801d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d006:	4770      	bx	lr

0801d008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801d008:	b480      	push	{r7}
 801d00a:	b085      	sub	sp, #20
 801d00c:	af00      	add	r7, sp, #0
 801d00e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	b2db      	uxtb	r3, r3
 801d016:	3b10      	subs	r3, #16
 801d018:	4a14      	ldr	r2, [pc, #80]	; (801d06c <DMA_CalcBaseAndBitshift+0x64>)
 801d01a:	fba2 2303 	umull	r2, r3, r2, r3
 801d01e:	091b      	lsrs	r3, r3, #4
 801d020:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801d022:	4a13      	ldr	r2, [pc, #76]	; (801d070 <DMA_CalcBaseAndBitshift+0x68>)
 801d024:	68fb      	ldr	r3, [r7, #12]
 801d026:	4413      	add	r3, r2
 801d028:	781b      	ldrb	r3, [r3, #0]
 801d02a:	461a      	mov	r2, r3
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	2b03      	cmp	r3, #3
 801d034:	d909      	bls.n	801d04a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801d03e:	f023 0303 	bic.w	r3, r3, #3
 801d042:	1d1a      	adds	r2, r3, #4
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	659a      	str	r2, [r3, #88]	; 0x58
 801d048:	e007      	b.n	801d05a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801d052:	f023 0303 	bic.w	r3, r3, #3
 801d056:	687a      	ldr	r2, [r7, #4]
 801d058:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801d05e:	4618      	mov	r0, r3
 801d060:	3714      	adds	r7, #20
 801d062:	46bd      	mov	sp, r7
 801d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d068:	4770      	bx	lr
 801d06a:	bf00      	nop
 801d06c:	aaaaaaab 	.word	0xaaaaaaab
 801d070:	08029600 	.word	0x08029600

0801d074 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801d074:	b480      	push	{r7}
 801d076:	b085      	sub	sp, #20
 801d078:	af00      	add	r7, sp, #0
 801d07a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d07c:	2300      	movs	r3, #0
 801d07e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d084:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	699b      	ldr	r3, [r3, #24]
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	d11f      	bne.n	801d0ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801d08e:	68bb      	ldr	r3, [r7, #8]
 801d090:	2b03      	cmp	r3, #3
 801d092:	d856      	bhi.n	801d142 <DMA_CheckFifoParam+0xce>
 801d094:	a201      	add	r2, pc, #4	; (adr r2, 801d09c <DMA_CheckFifoParam+0x28>)
 801d096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d09a:	bf00      	nop
 801d09c:	0801d0ad 	.word	0x0801d0ad
 801d0a0:	0801d0bf 	.word	0x0801d0bf
 801d0a4:	0801d0ad 	.word	0x0801d0ad
 801d0a8:	0801d143 	.word	0x0801d143
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	d046      	beq.n	801d146 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801d0b8:	2301      	movs	r3, #1
 801d0ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d0bc:	e043      	b.n	801d146 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801d0be:	687b      	ldr	r3, [r7, #4]
 801d0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801d0c6:	d140      	bne.n	801d14a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801d0c8:	2301      	movs	r3, #1
 801d0ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d0cc:	e03d      	b.n	801d14a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	699b      	ldr	r3, [r3, #24]
 801d0d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d0d6:	d121      	bne.n	801d11c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801d0d8:	68bb      	ldr	r3, [r7, #8]
 801d0da:	2b03      	cmp	r3, #3
 801d0dc:	d837      	bhi.n	801d14e <DMA_CheckFifoParam+0xda>
 801d0de:	a201      	add	r2, pc, #4	; (adr r2, 801d0e4 <DMA_CheckFifoParam+0x70>)
 801d0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d0e4:	0801d0f5 	.word	0x0801d0f5
 801d0e8:	0801d0fb 	.word	0x0801d0fb
 801d0ec:	0801d0f5 	.word	0x0801d0f5
 801d0f0:	0801d10d 	.word	0x0801d10d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801d0f4:	2301      	movs	r3, #1
 801d0f6:	73fb      	strb	r3, [r7, #15]
      break;
 801d0f8:	e030      	b.n	801d15c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d102:	2b00      	cmp	r3, #0
 801d104:	d025      	beq.n	801d152 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801d106:	2301      	movs	r3, #1
 801d108:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d10a:	e022      	b.n	801d152 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d110:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801d114:	d11f      	bne.n	801d156 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801d116:	2301      	movs	r3, #1
 801d118:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801d11a:	e01c      	b.n	801d156 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801d11c:	68bb      	ldr	r3, [r7, #8]
 801d11e:	2b02      	cmp	r3, #2
 801d120:	d903      	bls.n	801d12a <DMA_CheckFifoParam+0xb6>
 801d122:	68bb      	ldr	r3, [r7, #8]
 801d124:	2b03      	cmp	r3, #3
 801d126:	d003      	beq.n	801d130 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801d128:	e018      	b.n	801d15c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801d12a:	2301      	movs	r3, #1
 801d12c:	73fb      	strb	r3, [r7, #15]
      break;
 801d12e:	e015      	b.n	801d15c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801d130:	687b      	ldr	r3, [r7, #4]
 801d132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d138:	2b00      	cmp	r3, #0
 801d13a:	d00e      	beq.n	801d15a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801d13c:	2301      	movs	r3, #1
 801d13e:	73fb      	strb	r3, [r7, #15]
      break;
 801d140:	e00b      	b.n	801d15a <DMA_CheckFifoParam+0xe6>
      break;
 801d142:	bf00      	nop
 801d144:	e00a      	b.n	801d15c <DMA_CheckFifoParam+0xe8>
      break;
 801d146:	bf00      	nop
 801d148:	e008      	b.n	801d15c <DMA_CheckFifoParam+0xe8>
      break;
 801d14a:	bf00      	nop
 801d14c:	e006      	b.n	801d15c <DMA_CheckFifoParam+0xe8>
      break;
 801d14e:	bf00      	nop
 801d150:	e004      	b.n	801d15c <DMA_CheckFifoParam+0xe8>
      break;
 801d152:	bf00      	nop
 801d154:	e002      	b.n	801d15c <DMA_CheckFifoParam+0xe8>
      break;   
 801d156:	bf00      	nop
 801d158:	e000      	b.n	801d15c <DMA_CheckFifoParam+0xe8>
      break;
 801d15a:	bf00      	nop
    }
  } 
  
  return status; 
 801d15c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d15e:	4618      	mov	r0, r3
 801d160:	3714      	adds	r7, #20
 801d162:	46bd      	mov	sp, r7
 801d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d168:	4770      	bx	lr
 801d16a:	bf00      	nop

0801d16c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801d16c:	b480      	push	{r7}
 801d16e:	b089      	sub	sp, #36	; 0x24
 801d170:	af00      	add	r7, sp, #0
 801d172:	6078      	str	r0, [r7, #4]
 801d174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801d176:	2300      	movs	r3, #0
 801d178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801d17a:	2300      	movs	r3, #0
 801d17c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801d17e:	2300      	movs	r3, #0
 801d180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d182:	2300      	movs	r3, #0
 801d184:	61fb      	str	r3, [r7, #28]
 801d186:	e159      	b.n	801d43c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801d188:	2201      	movs	r2, #1
 801d18a:	69fb      	ldr	r3, [r7, #28]
 801d18c:	fa02 f303 	lsl.w	r3, r2, r3
 801d190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801d192:	683b      	ldr	r3, [r7, #0]
 801d194:	681b      	ldr	r3, [r3, #0]
 801d196:	697a      	ldr	r2, [r7, #20]
 801d198:	4013      	ands	r3, r2
 801d19a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801d19c:	693a      	ldr	r2, [r7, #16]
 801d19e:	697b      	ldr	r3, [r7, #20]
 801d1a0:	429a      	cmp	r2, r3
 801d1a2:	f040 8148 	bne.w	801d436 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801d1a6:	683b      	ldr	r3, [r7, #0]
 801d1a8:	685b      	ldr	r3, [r3, #4]
 801d1aa:	f003 0303 	and.w	r3, r3, #3
 801d1ae:	2b01      	cmp	r3, #1
 801d1b0:	d005      	beq.n	801d1be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801d1b2:	683b      	ldr	r3, [r7, #0]
 801d1b4:	685b      	ldr	r3, [r3, #4]
 801d1b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801d1ba:	2b02      	cmp	r3, #2
 801d1bc:	d130      	bne.n	801d220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	689b      	ldr	r3, [r3, #8]
 801d1c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801d1c4:	69fb      	ldr	r3, [r7, #28]
 801d1c6:	005b      	lsls	r3, r3, #1
 801d1c8:	2203      	movs	r2, #3
 801d1ca:	fa02 f303 	lsl.w	r3, r2, r3
 801d1ce:	43db      	mvns	r3, r3
 801d1d0:	69ba      	ldr	r2, [r7, #24]
 801d1d2:	4013      	ands	r3, r2
 801d1d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801d1d6:	683b      	ldr	r3, [r7, #0]
 801d1d8:	68da      	ldr	r2, [r3, #12]
 801d1da:	69fb      	ldr	r3, [r7, #28]
 801d1dc:	005b      	lsls	r3, r3, #1
 801d1de:	fa02 f303 	lsl.w	r3, r2, r3
 801d1e2:	69ba      	ldr	r2, [r7, #24]
 801d1e4:	4313      	orrs	r3, r2
 801d1e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	69ba      	ldr	r2, [r7, #24]
 801d1ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801d1ee:	687b      	ldr	r3, [r7, #4]
 801d1f0:	685b      	ldr	r3, [r3, #4]
 801d1f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801d1f4:	2201      	movs	r2, #1
 801d1f6:	69fb      	ldr	r3, [r7, #28]
 801d1f8:	fa02 f303 	lsl.w	r3, r2, r3
 801d1fc:	43db      	mvns	r3, r3
 801d1fe:	69ba      	ldr	r2, [r7, #24]
 801d200:	4013      	ands	r3, r2
 801d202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801d204:	683b      	ldr	r3, [r7, #0]
 801d206:	685b      	ldr	r3, [r3, #4]
 801d208:	091b      	lsrs	r3, r3, #4
 801d20a:	f003 0201 	and.w	r2, r3, #1
 801d20e:	69fb      	ldr	r3, [r7, #28]
 801d210:	fa02 f303 	lsl.w	r3, r2, r3
 801d214:	69ba      	ldr	r2, [r7, #24]
 801d216:	4313      	orrs	r3, r2
 801d218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	69ba      	ldr	r2, [r7, #24]
 801d21e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801d220:	683b      	ldr	r3, [r7, #0]
 801d222:	685b      	ldr	r3, [r3, #4]
 801d224:	f003 0303 	and.w	r3, r3, #3
 801d228:	2b03      	cmp	r3, #3
 801d22a:	d017      	beq.n	801d25c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	68db      	ldr	r3, [r3, #12]
 801d230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801d232:	69fb      	ldr	r3, [r7, #28]
 801d234:	005b      	lsls	r3, r3, #1
 801d236:	2203      	movs	r2, #3
 801d238:	fa02 f303 	lsl.w	r3, r2, r3
 801d23c:	43db      	mvns	r3, r3
 801d23e:	69ba      	ldr	r2, [r7, #24]
 801d240:	4013      	ands	r3, r2
 801d242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801d244:	683b      	ldr	r3, [r7, #0]
 801d246:	689a      	ldr	r2, [r3, #8]
 801d248:	69fb      	ldr	r3, [r7, #28]
 801d24a:	005b      	lsls	r3, r3, #1
 801d24c:	fa02 f303 	lsl.w	r3, r2, r3
 801d250:	69ba      	ldr	r2, [r7, #24]
 801d252:	4313      	orrs	r3, r2
 801d254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	69ba      	ldr	r2, [r7, #24]
 801d25a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801d25c:	683b      	ldr	r3, [r7, #0]
 801d25e:	685b      	ldr	r3, [r3, #4]
 801d260:	f003 0303 	and.w	r3, r3, #3
 801d264:	2b02      	cmp	r3, #2
 801d266:	d123      	bne.n	801d2b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801d268:	69fb      	ldr	r3, [r7, #28]
 801d26a:	08da      	lsrs	r2, r3, #3
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	3208      	adds	r2, #8
 801d270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801d276:	69fb      	ldr	r3, [r7, #28]
 801d278:	f003 0307 	and.w	r3, r3, #7
 801d27c:	009b      	lsls	r3, r3, #2
 801d27e:	220f      	movs	r2, #15
 801d280:	fa02 f303 	lsl.w	r3, r2, r3
 801d284:	43db      	mvns	r3, r3
 801d286:	69ba      	ldr	r2, [r7, #24]
 801d288:	4013      	ands	r3, r2
 801d28a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801d28c:	683b      	ldr	r3, [r7, #0]
 801d28e:	691a      	ldr	r2, [r3, #16]
 801d290:	69fb      	ldr	r3, [r7, #28]
 801d292:	f003 0307 	and.w	r3, r3, #7
 801d296:	009b      	lsls	r3, r3, #2
 801d298:	fa02 f303 	lsl.w	r3, r2, r3
 801d29c:	69ba      	ldr	r2, [r7, #24]
 801d29e:	4313      	orrs	r3, r2
 801d2a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801d2a2:	69fb      	ldr	r3, [r7, #28]
 801d2a4:	08da      	lsrs	r2, r3, #3
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	3208      	adds	r2, #8
 801d2aa:	69b9      	ldr	r1, [r7, #24]
 801d2ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801d2b6:	69fb      	ldr	r3, [r7, #28]
 801d2b8:	005b      	lsls	r3, r3, #1
 801d2ba:	2203      	movs	r2, #3
 801d2bc:	fa02 f303 	lsl.w	r3, r2, r3
 801d2c0:	43db      	mvns	r3, r3
 801d2c2:	69ba      	ldr	r2, [r7, #24]
 801d2c4:	4013      	ands	r3, r2
 801d2c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801d2c8:	683b      	ldr	r3, [r7, #0]
 801d2ca:	685b      	ldr	r3, [r3, #4]
 801d2cc:	f003 0203 	and.w	r2, r3, #3
 801d2d0:	69fb      	ldr	r3, [r7, #28]
 801d2d2:	005b      	lsls	r3, r3, #1
 801d2d4:	fa02 f303 	lsl.w	r3, r2, r3
 801d2d8:	69ba      	ldr	r2, [r7, #24]
 801d2da:	4313      	orrs	r3, r2
 801d2dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801d2de:	687b      	ldr	r3, [r7, #4]
 801d2e0:	69ba      	ldr	r2, [r7, #24]
 801d2e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801d2e4:	683b      	ldr	r3, [r7, #0]
 801d2e6:	685b      	ldr	r3, [r3, #4]
 801d2e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	f000 80a2 	beq.w	801d436 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801d2f2:	2300      	movs	r3, #0
 801d2f4:	60fb      	str	r3, [r7, #12]
 801d2f6:	4b57      	ldr	r3, [pc, #348]	; (801d454 <HAL_GPIO_Init+0x2e8>)
 801d2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d2fa:	4a56      	ldr	r2, [pc, #344]	; (801d454 <HAL_GPIO_Init+0x2e8>)
 801d2fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d300:	6453      	str	r3, [r2, #68]	; 0x44
 801d302:	4b54      	ldr	r3, [pc, #336]	; (801d454 <HAL_GPIO_Init+0x2e8>)
 801d304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d30a:	60fb      	str	r3, [r7, #12]
 801d30c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801d30e:	4a52      	ldr	r2, [pc, #328]	; (801d458 <HAL_GPIO_Init+0x2ec>)
 801d310:	69fb      	ldr	r3, [r7, #28]
 801d312:	089b      	lsrs	r3, r3, #2
 801d314:	3302      	adds	r3, #2
 801d316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d31a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801d31c:	69fb      	ldr	r3, [r7, #28]
 801d31e:	f003 0303 	and.w	r3, r3, #3
 801d322:	009b      	lsls	r3, r3, #2
 801d324:	220f      	movs	r2, #15
 801d326:	fa02 f303 	lsl.w	r3, r2, r3
 801d32a:	43db      	mvns	r3, r3
 801d32c:	69ba      	ldr	r2, [r7, #24]
 801d32e:	4013      	ands	r3, r2
 801d330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	4a49      	ldr	r2, [pc, #292]	; (801d45c <HAL_GPIO_Init+0x2f0>)
 801d336:	4293      	cmp	r3, r2
 801d338:	d019      	beq.n	801d36e <HAL_GPIO_Init+0x202>
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	4a48      	ldr	r2, [pc, #288]	; (801d460 <HAL_GPIO_Init+0x2f4>)
 801d33e:	4293      	cmp	r3, r2
 801d340:	d013      	beq.n	801d36a <HAL_GPIO_Init+0x1fe>
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	4a47      	ldr	r2, [pc, #284]	; (801d464 <HAL_GPIO_Init+0x2f8>)
 801d346:	4293      	cmp	r3, r2
 801d348:	d00d      	beq.n	801d366 <HAL_GPIO_Init+0x1fa>
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	4a46      	ldr	r2, [pc, #280]	; (801d468 <HAL_GPIO_Init+0x2fc>)
 801d34e:	4293      	cmp	r3, r2
 801d350:	d007      	beq.n	801d362 <HAL_GPIO_Init+0x1f6>
 801d352:	687b      	ldr	r3, [r7, #4]
 801d354:	4a45      	ldr	r2, [pc, #276]	; (801d46c <HAL_GPIO_Init+0x300>)
 801d356:	4293      	cmp	r3, r2
 801d358:	d101      	bne.n	801d35e <HAL_GPIO_Init+0x1f2>
 801d35a:	2304      	movs	r3, #4
 801d35c:	e008      	b.n	801d370 <HAL_GPIO_Init+0x204>
 801d35e:	2307      	movs	r3, #7
 801d360:	e006      	b.n	801d370 <HAL_GPIO_Init+0x204>
 801d362:	2303      	movs	r3, #3
 801d364:	e004      	b.n	801d370 <HAL_GPIO_Init+0x204>
 801d366:	2302      	movs	r3, #2
 801d368:	e002      	b.n	801d370 <HAL_GPIO_Init+0x204>
 801d36a:	2301      	movs	r3, #1
 801d36c:	e000      	b.n	801d370 <HAL_GPIO_Init+0x204>
 801d36e:	2300      	movs	r3, #0
 801d370:	69fa      	ldr	r2, [r7, #28]
 801d372:	f002 0203 	and.w	r2, r2, #3
 801d376:	0092      	lsls	r2, r2, #2
 801d378:	4093      	lsls	r3, r2
 801d37a:	69ba      	ldr	r2, [r7, #24]
 801d37c:	4313      	orrs	r3, r2
 801d37e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801d380:	4935      	ldr	r1, [pc, #212]	; (801d458 <HAL_GPIO_Init+0x2ec>)
 801d382:	69fb      	ldr	r3, [r7, #28]
 801d384:	089b      	lsrs	r3, r3, #2
 801d386:	3302      	adds	r3, #2
 801d388:	69ba      	ldr	r2, [r7, #24]
 801d38a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801d38e:	4b38      	ldr	r3, [pc, #224]	; (801d470 <HAL_GPIO_Init+0x304>)
 801d390:	689b      	ldr	r3, [r3, #8]
 801d392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d394:	693b      	ldr	r3, [r7, #16]
 801d396:	43db      	mvns	r3, r3
 801d398:	69ba      	ldr	r2, [r7, #24]
 801d39a:	4013      	ands	r3, r2
 801d39c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801d39e:	683b      	ldr	r3, [r7, #0]
 801d3a0:	685b      	ldr	r3, [r3, #4]
 801d3a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d003      	beq.n	801d3b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801d3aa:	69ba      	ldr	r2, [r7, #24]
 801d3ac:	693b      	ldr	r3, [r7, #16]
 801d3ae:	4313      	orrs	r3, r2
 801d3b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801d3b2:	4a2f      	ldr	r2, [pc, #188]	; (801d470 <HAL_GPIO_Init+0x304>)
 801d3b4:	69bb      	ldr	r3, [r7, #24]
 801d3b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801d3b8:	4b2d      	ldr	r3, [pc, #180]	; (801d470 <HAL_GPIO_Init+0x304>)
 801d3ba:	68db      	ldr	r3, [r3, #12]
 801d3bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d3be:	693b      	ldr	r3, [r7, #16]
 801d3c0:	43db      	mvns	r3, r3
 801d3c2:	69ba      	ldr	r2, [r7, #24]
 801d3c4:	4013      	ands	r3, r2
 801d3c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801d3c8:	683b      	ldr	r3, [r7, #0]
 801d3ca:	685b      	ldr	r3, [r3, #4]
 801d3cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	d003      	beq.n	801d3dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801d3d4:	69ba      	ldr	r2, [r7, #24]
 801d3d6:	693b      	ldr	r3, [r7, #16]
 801d3d8:	4313      	orrs	r3, r2
 801d3da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801d3dc:	4a24      	ldr	r2, [pc, #144]	; (801d470 <HAL_GPIO_Init+0x304>)
 801d3de:	69bb      	ldr	r3, [r7, #24]
 801d3e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801d3e2:	4b23      	ldr	r3, [pc, #140]	; (801d470 <HAL_GPIO_Init+0x304>)
 801d3e4:	685b      	ldr	r3, [r3, #4]
 801d3e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d3e8:	693b      	ldr	r3, [r7, #16]
 801d3ea:	43db      	mvns	r3, r3
 801d3ec:	69ba      	ldr	r2, [r7, #24]
 801d3ee:	4013      	ands	r3, r2
 801d3f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801d3f2:	683b      	ldr	r3, [r7, #0]
 801d3f4:	685b      	ldr	r3, [r3, #4]
 801d3f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	d003      	beq.n	801d406 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801d3fe:	69ba      	ldr	r2, [r7, #24]
 801d400:	693b      	ldr	r3, [r7, #16]
 801d402:	4313      	orrs	r3, r2
 801d404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801d406:	4a1a      	ldr	r2, [pc, #104]	; (801d470 <HAL_GPIO_Init+0x304>)
 801d408:	69bb      	ldr	r3, [r7, #24]
 801d40a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801d40c:	4b18      	ldr	r3, [pc, #96]	; (801d470 <HAL_GPIO_Init+0x304>)
 801d40e:	681b      	ldr	r3, [r3, #0]
 801d410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d412:	693b      	ldr	r3, [r7, #16]
 801d414:	43db      	mvns	r3, r3
 801d416:	69ba      	ldr	r2, [r7, #24]
 801d418:	4013      	ands	r3, r2
 801d41a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801d41c:	683b      	ldr	r3, [r7, #0]
 801d41e:	685b      	ldr	r3, [r3, #4]
 801d420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d424:	2b00      	cmp	r3, #0
 801d426:	d003      	beq.n	801d430 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801d428:	69ba      	ldr	r2, [r7, #24]
 801d42a:	693b      	ldr	r3, [r7, #16]
 801d42c:	4313      	orrs	r3, r2
 801d42e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801d430:	4a0f      	ldr	r2, [pc, #60]	; (801d470 <HAL_GPIO_Init+0x304>)
 801d432:	69bb      	ldr	r3, [r7, #24]
 801d434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d436:	69fb      	ldr	r3, [r7, #28]
 801d438:	3301      	adds	r3, #1
 801d43a:	61fb      	str	r3, [r7, #28]
 801d43c:	69fb      	ldr	r3, [r7, #28]
 801d43e:	2b0f      	cmp	r3, #15
 801d440:	f67f aea2 	bls.w	801d188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801d444:	bf00      	nop
 801d446:	bf00      	nop
 801d448:	3724      	adds	r7, #36	; 0x24
 801d44a:	46bd      	mov	sp, r7
 801d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d450:	4770      	bx	lr
 801d452:	bf00      	nop
 801d454:	40023800 	.word	0x40023800
 801d458:	40013800 	.word	0x40013800
 801d45c:	40020000 	.word	0x40020000
 801d460:	40020400 	.word	0x40020400
 801d464:	40020800 	.word	0x40020800
 801d468:	40020c00 	.word	0x40020c00
 801d46c:	40021000 	.word	0x40021000
 801d470:	40013c00 	.word	0x40013c00

0801d474 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801d474:	b480      	push	{r7}
 801d476:	b087      	sub	sp, #28
 801d478:	af00      	add	r7, sp, #0
 801d47a:	6078      	str	r0, [r7, #4]
 801d47c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801d47e:	2300      	movs	r3, #0
 801d480:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801d482:	2300      	movs	r3, #0
 801d484:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801d486:	2300      	movs	r3, #0
 801d488:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d48a:	2300      	movs	r3, #0
 801d48c:	617b      	str	r3, [r7, #20]
 801d48e:	e0bb      	b.n	801d608 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801d490:	2201      	movs	r2, #1
 801d492:	697b      	ldr	r3, [r7, #20]
 801d494:	fa02 f303 	lsl.w	r3, r2, r3
 801d498:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801d49a:	683a      	ldr	r2, [r7, #0]
 801d49c:	693b      	ldr	r3, [r7, #16]
 801d49e:	4013      	ands	r3, r2
 801d4a0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801d4a2:	68fa      	ldr	r2, [r7, #12]
 801d4a4:	693b      	ldr	r3, [r7, #16]
 801d4a6:	429a      	cmp	r2, r3
 801d4a8:	f040 80ab 	bne.w	801d602 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801d4ac:	4a5c      	ldr	r2, [pc, #368]	; (801d620 <HAL_GPIO_DeInit+0x1ac>)
 801d4ae:	697b      	ldr	r3, [r7, #20]
 801d4b0:	089b      	lsrs	r3, r3, #2
 801d4b2:	3302      	adds	r3, #2
 801d4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d4b8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801d4ba:	697b      	ldr	r3, [r7, #20]
 801d4bc:	f003 0303 	and.w	r3, r3, #3
 801d4c0:	009b      	lsls	r3, r3, #2
 801d4c2:	220f      	movs	r2, #15
 801d4c4:	fa02 f303 	lsl.w	r3, r2, r3
 801d4c8:	68ba      	ldr	r2, [r7, #8]
 801d4ca:	4013      	ands	r3, r2
 801d4cc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	4a54      	ldr	r2, [pc, #336]	; (801d624 <HAL_GPIO_DeInit+0x1b0>)
 801d4d2:	4293      	cmp	r3, r2
 801d4d4:	d019      	beq.n	801d50a <HAL_GPIO_DeInit+0x96>
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	4a53      	ldr	r2, [pc, #332]	; (801d628 <HAL_GPIO_DeInit+0x1b4>)
 801d4da:	4293      	cmp	r3, r2
 801d4dc:	d013      	beq.n	801d506 <HAL_GPIO_DeInit+0x92>
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	4a52      	ldr	r2, [pc, #328]	; (801d62c <HAL_GPIO_DeInit+0x1b8>)
 801d4e2:	4293      	cmp	r3, r2
 801d4e4:	d00d      	beq.n	801d502 <HAL_GPIO_DeInit+0x8e>
 801d4e6:	687b      	ldr	r3, [r7, #4]
 801d4e8:	4a51      	ldr	r2, [pc, #324]	; (801d630 <HAL_GPIO_DeInit+0x1bc>)
 801d4ea:	4293      	cmp	r3, r2
 801d4ec:	d007      	beq.n	801d4fe <HAL_GPIO_DeInit+0x8a>
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	4a50      	ldr	r2, [pc, #320]	; (801d634 <HAL_GPIO_DeInit+0x1c0>)
 801d4f2:	4293      	cmp	r3, r2
 801d4f4:	d101      	bne.n	801d4fa <HAL_GPIO_DeInit+0x86>
 801d4f6:	2304      	movs	r3, #4
 801d4f8:	e008      	b.n	801d50c <HAL_GPIO_DeInit+0x98>
 801d4fa:	2307      	movs	r3, #7
 801d4fc:	e006      	b.n	801d50c <HAL_GPIO_DeInit+0x98>
 801d4fe:	2303      	movs	r3, #3
 801d500:	e004      	b.n	801d50c <HAL_GPIO_DeInit+0x98>
 801d502:	2302      	movs	r3, #2
 801d504:	e002      	b.n	801d50c <HAL_GPIO_DeInit+0x98>
 801d506:	2301      	movs	r3, #1
 801d508:	e000      	b.n	801d50c <HAL_GPIO_DeInit+0x98>
 801d50a:	2300      	movs	r3, #0
 801d50c:	697a      	ldr	r2, [r7, #20]
 801d50e:	f002 0203 	and.w	r2, r2, #3
 801d512:	0092      	lsls	r2, r2, #2
 801d514:	4093      	lsls	r3, r2
 801d516:	68ba      	ldr	r2, [r7, #8]
 801d518:	429a      	cmp	r2, r3
 801d51a:	d132      	bne.n	801d582 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801d51c:	4b46      	ldr	r3, [pc, #280]	; (801d638 <HAL_GPIO_DeInit+0x1c4>)
 801d51e:	681a      	ldr	r2, [r3, #0]
 801d520:	68fb      	ldr	r3, [r7, #12]
 801d522:	43db      	mvns	r3, r3
 801d524:	4944      	ldr	r1, [pc, #272]	; (801d638 <HAL_GPIO_DeInit+0x1c4>)
 801d526:	4013      	ands	r3, r2
 801d528:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801d52a:	4b43      	ldr	r3, [pc, #268]	; (801d638 <HAL_GPIO_DeInit+0x1c4>)
 801d52c:	685a      	ldr	r2, [r3, #4]
 801d52e:	68fb      	ldr	r3, [r7, #12]
 801d530:	43db      	mvns	r3, r3
 801d532:	4941      	ldr	r1, [pc, #260]	; (801d638 <HAL_GPIO_DeInit+0x1c4>)
 801d534:	4013      	ands	r3, r2
 801d536:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801d538:	4b3f      	ldr	r3, [pc, #252]	; (801d638 <HAL_GPIO_DeInit+0x1c4>)
 801d53a:	68da      	ldr	r2, [r3, #12]
 801d53c:	68fb      	ldr	r3, [r7, #12]
 801d53e:	43db      	mvns	r3, r3
 801d540:	493d      	ldr	r1, [pc, #244]	; (801d638 <HAL_GPIO_DeInit+0x1c4>)
 801d542:	4013      	ands	r3, r2
 801d544:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801d546:	4b3c      	ldr	r3, [pc, #240]	; (801d638 <HAL_GPIO_DeInit+0x1c4>)
 801d548:	689a      	ldr	r2, [r3, #8]
 801d54a:	68fb      	ldr	r3, [r7, #12]
 801d54c:	43db      	mvns	r3, r3
 801d54e:	493a      	ldr	r1, [pc, #232]	; (801d638 <HAL_GPIO_DeInit+0x1c4>)
 801d550:	4013      	ands	r3, r2
 801d552:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801d554:	697b      	ldr	r3, [r7, #20]
 801d556:	f003 0303 	and.w	r3, r3, #3
 801d55a:	009b      	lsls	r3, r3, #2
 801d55c:	220f      	movs	r2, #15
 801d55e:	fa02 f303 	lsl.w	r3, r2, r3
 801d562:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801d564:	4a2e      	ldr	r2, [pc, #184]	; (801d620 <HAL_GPIO_DeInit+0x1ac>)
 801d566:	697b      	ldr	r3, [r7, #20]
 801d568:	089b      	lsrs	r3, r3, #2
 801d56a:	3302      	adds	r3, #2
 801d56c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801d570:	68bb      	ldr	r3, [r7, #8]
 801d572:	43da      	mvns	r2, r3
 801d574:	482a      	ldr	r0, [pc, #168]	; (801d620 <HAL_GPIO_DeInit+0x1ac>)
 801d576:	697b      	ldr	r3, [r7, #20]
 801d578:	089b      	lsrs	r3, r3, #2
 801d57a:	400a      	ands	r2, r1
 801d57c:	3302      	adds	r3, #2
 801d57e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801d582:	687b      	ldr	r3, [r7, #4]
 801d584:	681a      	ldr	r2, [r3, #0]
 801d586:	697b      	ldr	r3, [r7, #20]
 801d588:	005b      	lsls	r3, r3, #1
 801d58a:	2103      	movs	r1, #3
 801d58c:	fa01 f303 	lsl.w	r3, r1, r3
 801d590:	43db      	mvns	r3, r3
 801d592:	401a      	ands	r2, r3
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801d598:	697b      	ldr	r3, [r7, #20]
 801d59a:	08da      	lsrs	r2, r3, #3
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	3208      	adds	r2, #8
 801d5a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d5a4:	697b      	ldr	r3, [r7, #20]
 801d5a6:	f003 0307 	and.w	r3, r3, #7
 801d5aa:	009b      	lsls	r3, r3, #2
 801d5ac:	220f      	movs	r2, #15
 801d5ae:	fa02 f303 	lsl.w	r3, r2, r3
 801d5b2:	43db      	mvns	r3, r3
 801d5b4:	697a      	ldr	r2, [r7, #20]
 801d5b6:	08d2      	lsrs	r2, r2, #3
 801d5b8:	4019      	ands	r1, r3
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	3208      	adds	r2, #8
 801d5be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	68da      	ldr	r2, [r3, #12]
 801d5c6:	697b      	ldr	r3, [r7, #20]
 801d5c8:	005b      	lsls	r3, r3, #1
 801d5ca:	2103      	movs	r1, #3
 801d5cc:	fa01 f303 	lsl.w	r3, r1, r3
 801d5d0:	43db      	mvns	r3, r3
 801d5d2:	401a      	ands	r2, r3
 801d5d4:	687b      	ldr	r3, [r7, #4]
 801d5d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801d5d8:	687b      	ldr	r3, [r7, #4]
 801d5da:	685a      	ldr	r2, [r3, #4]
 801d5dc:	2101      	movs	r1, #1
 801d5de:	697b      	ldr	r3, [r7, #20]
 801d5e0:	fa01 f303 	lsl.w	r3, r1, r3
 801d5e4:	43db      	mvns	r3, r3
 801d5e6:	401a      	ands	r2, r3
 801d5e8:	687b      	ldr	r3, [r7, #4]
 801d5ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	689a      	ldr	r2, [r3, #8]
 801d5f0:	697b      	ldr	r3, [r7, #20]
 801d5f2:	005b      	lsls	r3, r3, #1
 801d5f4:	2103      	movs	r1, #3
 801d5f6:	fa01 f303 	lsl.w	r3, r1, r3
 801d5fa:	43db      	mvns	r3, r3
 801d5fc:	401a      	ands	r2, r3
 801d5fe:	687b      	ldr	r3, [r7, #4]
 801d600:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d602:	697b      	ldr	r3, [r7, #20]
 801d604:	3301      	adds	r3, #1
 801d606:	617b      	str	r3, [r7, #20]
 801d608:	697b      	ldr	r3, [r7, #20]
 801d60a:	2b0f      	cmp	r3, #15
 801d60c:	f67f af40 	bls.w	801d490 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801d610:	bf00      	nop
 801d612:	bf00      	nop
 801d614:	371c      	adds	r7, #28
 801d616:	46bd      	mov	sp, r7
 801d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d61c:	4770      	bx	lr
 801d61e:	bf00      	nop
 801d620:	40013800 	.word	0x40013800
 801d624:	40020000 	.word	0x40020000
 801d628:	40020400 	.word	0x40020400
 801d62c:	40020800 	.word	0x40020800
 801d630:	40020c00 	.word	0x40020c00
 801d634:	40021000 	.word	0x40021000
 801d638:	40013c00 	.word	0x40013c00

0801d63c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801d63c:	b480      	push	{r7}
 801d63e:	b083      	sub	sp, #12
 801d640:	af00      	add	r7, sp, #0
 801d642:	6078      	str	r0, [r7, #4]
 801d644:	460b      	mov	r3, r1
 801d646:	807b      	strh	r3, [r7, #2]
 801d648:	4613      	mov	r3, r2
 801d64a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801d64c:	787b      	ldrb	r3, [r7, #1]
 801d64e:	2b00      	cmp	r3, #0
 801d650:	d003      	beq.n	801d65a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801d652:	887a      	ldrh	r2, [r7, #2]
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801d658:	e003      	b.n	801d662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801d65a:	887b      	ldrh	r3, [r7, #2]
 801d65c:	041a      	lsls	r2, r3, #16
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	619a      	str	r2, [r3, #24]
}
 801d662:	bf00      	nop
 801d664:	370c      	adds	r7, #12
 801d666:	46bd      	mov	sp, r7
 801d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d66c:	4770      	bx	lr
	...

0801d670 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801d670:	b580      	push	{r7, lr}
 801d672:	b082      	sub	sp, #8
 801d674:	af00      	add	r7, sp, #0
 801d676:	4603      	mov	r3, r0
 801d678:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801d67a:	4b08      	ldr	r3, [pc, #32]	; (801d69c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801d67c:	695a      	ldr	r2, [r3, #20]
 801d67e:	88fb      	ldrh	r3, [r7, #6]
 801d680:	4013      	ands	r3, r2
 801d682:	2b00      	cmp	r3, #0
 801d684:	d006      	beq.n	801d694 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801d686:	4a05      	ldr	r2, [pc, #20]	; (801d69c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801d688:	88fb      	ldrh	r3, [r7, #6]
 801d68a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801d68c:	88fb      	ldrh	r3, [r7, #6]
 801d68e:	4618      	mov	r0, r3
 801d690:	f7e4 fd59 	bl	8002146 <HAL_GPIO_EXTI_Callback>
  }
}
 801d694:	bf00      	nop
 801d696:	3708      	adds	r7, #8
 801d698:	46bd      	mov	sp, r7
 801d69a:	bd80      	pop	{r7, pc}
 801d69c:	40013c00 	.word	0x40013c00

0801d6a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801d6a0:	b580      	push	{r7, lr}
 801d6a2:	b084      	sub	sp, #16
 801d6a4:	af00      	add	r7, sp, #0
 801d6a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d101      	bne.n	801d6b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801d6ae:	2301      	movs	r3, #1
 801d6b0:	e12b      	b.n	801d90a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801d6b2:	687b      	ldr	r3, [r7, #4]
 801d6b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d6b8:	b2db      	uxtb	r3, r3
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d106      	bne.n	801d6cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	2200      	movs	r2, #0
 801d6c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801d6c6:	6878      	ldr	r0, [r7, #4]
 801d6c8:	f7e5 ff12 	bl	80034f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	2224      	movs	r2, #36	; 0x24
 801d6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	681b      	ldr	r3, [r3, #0]
 801d6d8:	681a      	ldr	r2, [r3, #0]
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	681b      	ldr	r3, [r3, #0]
 801d6de:	f022 0201 	bic.w	r2, r2, #1
 801d6e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	681b      	ldr	r3, [r3, #0]
 801d6e8:	681a      	ldr	r2, [r3, #0]
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	681b      	ldr	r3, [r3, #0]
 801d6ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801d6f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	681b      	ldr	r3, [r3, #0]
 801d6f8:	681a      	ldr	r2, [r3, #0]
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	681b      	ldr	r3, [r3, #0]
 801d6fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801d702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801d704:	f003 fb62 	bl	8020dcc <HAL_RCC_GetPCLK1Freq>
 801d708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801d70a:	687b      	ldr	r3, [r7, #4]
 801d70c:	685b      	ldr	r3, [r3, #4]
 801d70e:	4a81      	ldr	r2, [pc, #516]	; (801d914 <HAL_I2C_Init+0x274>)
 801d710:	4293      	cmp	r3, r2
 801d712:	d807      	bhi.n	801d724 <HAL_I2C_Init+0x84>
 801d714:	68fb      	ldr	r3, [r7, #12]
 801d716:	4a80      	ldr	r2, [pc, #512]	; (801d918 <HAL_I2C_Init+0x278>)
 801d718:	4293      	cmp	r3, r2
 801d71a:	bf94      	ite	ls
 801d71c:	2301      	movls	r3, #1
 801d71e:	2300      	movhi	r3, #0
 801d720:	b2db      	uxtb	r3, r3
 801d722:	e006      	b.n	801d732 <HAL_I2C_Init+0x92>
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	4a7d      	ldr	r2, [pc, #500]	; (801d91c <HAL_I2C_Init+0x27c>)
 801d728:	4293      	cmp	r3, r2
 801d72a:	bf94      	ite	ls
 801d72c:	2301      	movls	r3, #1
 801d72e:	2300      	movhi	r3, #0
 801d730:	b2db      	uxtb	r3, r3
 801d732:	2b00      	cmp	r3, #0
 801d734:	d001      	beq.n	801d73a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801d736:	2301      	movs	r3, #1
 801d738:	e0e7      	b.n	801d90a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801d73a:	68fb      	ldr	r3, [r7, #12]
 801d73c:	4a78      	ldr	r2, [pc, #480]	; (801d920 <HAL_I2C_Init+0x280>)
 801d73e:	fba2 2303 	umull	r2, r3, r2, r3
 801d742:	0c9b      	lsrs	r3, r3, #18
 801d744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801d746:	687b      	ldr	r3, [r7, #4]
 801d748:	681b      	ldr	r3, [r3, #0]
 801d74a:	685b      	ldr	r3, [r3, #4]
 801d74c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	681b      	ldr	r3, [r3, #0]
 801d754:	68ba      	ldr	r2, [r7, #8]
 801d756:	430a      	orrs	r2, r1
 801d758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801d75a:	687b      	ldr	r3, [r7, #4]
 801d75c:	681b      	ldr	r3, [r3, #0]
 801d75e:	6a1b      	ldr	r3, [r3, #32]
 801d760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	685b      	ldr	r3, [r3, #4]
 801d768:	4a6a      	ldr	r2, [pc, #424]	; (801d914 <HAL_I2C_Init+0x274>)
 801d76a:	4293      	cmp	r3, r2
 801d76c:	d802      	bhi.n	801d774 <HAL_I2C_Init+0xd4>
 801d76e:	68bb      	ldr	r3, [r7, #8]
 801d770:	3301      	adds	r3, #1
 801d772:	e009      	b.n	801d788 <HAL_I2C_Init+0xe8>
 801d774:	68bb      	ldr	r3, [r7, #8]
 801d776:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801d77a:	fb02 f303 	mul.w	r3, r2, r3
 801d77e:	4a69      	ldr	r2, [pc, #420]	; (801d924 <HAL_I2C_Init+0x284>)
 801d780:	fba2 2303 	umull	r2, r3, r2, r3
 801d784:	099b      	lsrs	r3, r3, #6
 801d786:	3301      	adds	r3, #1
 801d788:	687a      	ldr	r2, [r7, #4]
 801d78a:	6812      	ldr	r2, [r2, #0]
 801d78c:	430b      	orrs	r3, r1
 801d78e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	681b      	ldr	r3, [r3, #0]
 801d794:	69db      	ldr	r3, [r3, #28]
 801d796:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801d79a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	685b      	ldr	r3, [r3, #4]
 801d7a2:	495c      	ldr	r1, [pc, #368]	; (801d914 <HAL_I2C_Init+0x274>)
 801d7a4:	428b      	cmp	r3, r1
 801d7a6:	d819      	bhi.n	801d7dc <HAL_I2C_Init+0x13c>
 801d7a8:	68fb      	ldr	r3, [r7, #12]
 801d7aa:	1e59      	subs	r1, r3, #1
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	685b      	ldr	r3, [r3, #4]
 801d7b0:	005b      	lsls	r3, r3, #1
 801d7b2:	fbb1 f3f3 	udiv	r3, r1, r3
 801d7b6:	1c59      	adds	r1, r3, #1
 801d7b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 801d7bc:	400b      	ands	r3, r1
 801d7be:	2b00      	cmp	r3, #0
 801d7c0:	d00a      	beq.n	801d7d8 <HAL_I2C_Init+0x138>
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	1e59      	subs	r1, r3, #1
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	685b      	ldr	r3, [r3, #4]
 801d7ca:	005b      	lsls	r3, r3, #1
 801d7cc:	fbb1 f3f3 	udiv	r3, r1, r3
 801d7d0:	3301      	adds	r3, #1
 801d7d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d7d6:	e051      	b.n	801d87c <HAL_I2C_Init+0x1dc>
 801d7d8:	2304      	movs	r3, #4
 801d7da:	e04f      	b.n	801d87c <HAL_I2C_Init+0x1dc>
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	689b      	ldr	r3, [r3, #8]
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d111      	bne.n	801d808 <HAL_I2C_Init+0x168>
 801d7e4:	68fb      	ldr	r3, [r7, #12]
 801d7e6:	1e58      	subs	r0, r3, #1
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	6859      	ldr	r1, [r3, #4]
 801d7ec:	460b      	mov	r3, r1
 801d7ee:	005b      	lsls	r3, r3, #1
 801d7f0:	440b      	add	r3, r1
 801d7f2:	fbb0 f3f3 	udiv	r3, r0, r3
 801d7f6:	3301      	adds	r3, #1
 801d7f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d7fc:	2b00      	cmp	r3, #0
 801d7fe:	bf0c      	ite	eq
 801d800:	2301      	moveq	r3, #1
 801d802:	2300      	movne	r3, #0
 801d804:	b2db      	uxtb	r3, r3
 801d806:	e012      	b.n	801d82e <HAL_I2C_Init+0x18e>
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	1e58      	subs	r0, r3, #1
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	6859      	ldr	r1, [r3, #4]
 801d810:	460b      	mov	r3, r1
 801d812:	009b      	lsls	r3, r3, #2
 801d814:	440b      	add	r3, r1
 801d816:	0099      	lsls	r1, r3, #2
 801d818:	440b      	add	r3, r1
 801d81a:	fbb0 f3f3 	udiv	r3, r0, r3
 801d81e:	3301      	adds	r3, #1
 801d820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d824:	2b00      	cmp	r3, #0
 801d826:	bf0c      	ite	eq
 801d828:	2301      	moveq	r3, #1
 801d82a:	2300      	movne	r3, #0
 801d82c:	b2db      	uxtb	r3, r3
 801d82e:	2b00      	cmp	r3, #0
 801d830:	d001      	beq.n	801d836 <HAL_I2C_Init+0x196>
 801d832:	2301      	movs	r3, #1
 801d834:	e022      	b.n	801d87c <HAL_I2C_Init+0x1dc>
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	689b      	ldr	r3, [r3, #8]
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	d10e      	bne.n	801d85c <HAL_I2C_Init+0x1bc>
 801d83e:	68fb      	ldr	r3, [r7, #12]
 801d840:	1e58      	subs	r0, r3, #1
 801d842:	687b      	ldr	r3, [r7, #4]
 801d844:	6859      	ldr	r1, [r3, #4]
 801d846:	460b      	mov	r3, r1
 801d848:	005b      	lsls	r3, r3, #1
 801d84a:	440b      	add	r3, r1
 801d84c:	fbb0 f3f3 	udiv	r3, r0, r3
 801d850:	3301      	adds	r3, #1
 801d852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801d85a:	e00f      	b.n	801d87c <HAL_I2C_Init+0x1dc>
 801d85c:	68fb      	ldr	r3, [r7, #12]
 801d85e:	1e58      	subs	r0, r3, #1
 801d860:	687b      	ldr	r3, [r7, #4]
 801d862:	6859      	ldr	r1, [r3, #4]
 801d864:	460b      	mov	r3, r1
 801d866:	009b      	lsls	r3, r3, #2
 801d868:	440b      	add	r3, r1
 801d86a:	0099      	lsls	r1, r3, #2
 801d86c:	440b      	add	r3, r1
 801d86e:	fbb0 f3f3 	udiv	r3, r0, r3
 801d872:	3301      	adds	r3, #1
 801d874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801d87c:	6879      	ldr	r1, [r7, #4]
 801d87e:	6809      	ldr	r1, [r1, #0]
 801d880:	4313      	orrs	r3, r2
 801d882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	681b      	ldr	r3, [r3, #0]
 801d888:	681b      	ldr	r3, [r3, #0]
 801d88a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	69da      	ldr	r2, [r3, #28]
 801d892:	687b      	ldr	r3, [r7, #4]
 801d894:	6a1b      	ldr	r3, [r3, #32]
 801d896:	431a      	orrs	r2, r3
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	681b      	ldr	r3, [r3, #0]
 801d89c:	430a      	orrs	r2, r1
 801d89e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	681b      	ldr	r3, [r3, #0]
 801d8a4:	689b      	ldr	r3, [r3, #8]
 801d8a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801d8aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801d8ae:	687a      	ldr	r2, [r7, #4]
 801d8b0:	6911      	ldr	r1, [r2, #16]
 801d8b2:	687a      	ldr	r2, [r7, #4]
 801d8b4:	68d2      	ldr	r2, [r2, #12]
 801d8b6:	4311      	orrs	r1, r2
 801d8b8:	687a      	ldr	r2, [r7, #4]
 801d8ba:	6812      	ldr	r2, [r2, #0]
 801d8bc:	430b      	orrs	r3, r1
 801d8be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	681b      	ldr	r3, [r3, #0]
 801d8c4:	68db      	ldr	r3, [r3, #12]
 801d8c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	695a      	ldr	r2, [r3, #20]
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	699b      	ldr	r3, [r3, #24]
 801d8d2:	431a      	orrs	r2, r3
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	681b      	ldr	r3, [r3, #0]
 801d8d8:	430a      	orrs	r2, r1
 801d8da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	681a      	ldr	r2, [r3, #0]
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	f042 0201 	orr.w	r2, r2, #1
 801d8ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	2200      	movs	r2, #0
 801d8f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	2220      	movs	r2, #32
 801d8f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801d8fa:	687b      	ldr	r3, [r7, #4]
 801d8fc:	2200      	movs	r2, #0
 801d8fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	2200      	movs	r2, #0
 801d904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801d908:	2300      	movs	r3, #0
}
 801d90a:	4618      	mov	r0, r3
 801d90c:	3710      	adds	r7, #16
 801d90e:	46bd      	mov	sp, r7
 801d910:	bd80      	pop	{r7, pc}
 801d912:	bf00      	nop
 801d914:	000186a0 	.word	0x000186a0
 801d918:	001e847f 	.word	0x001e847f
 801d91c:	003d08ff 	.word	0x003d08ff
 801d920:	431bde83 	.word	0x431bde83
 801d924:	10624dd3 	.word	0x10624dd3

0801d928 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801d928:	b580      	push	{r7, lr}
 801d92a:	b086      	sub	sp, #24
 801d92c:	af00      	add	r7, sp, #0
 801d92e:	60f8      	str	r0, [r7, #12]
 801d930:	607a      	str	r2, [r7, #4]
 801d932:	461a      	mov	r2, r3
 801d934:	460b      	mov	r3, r1
 801d936:	817b      	strh	r3, [r7, #10]
 801d938:	4613      	mov	r3, r2
 801d93a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801d93c:	2300      	movs	r3, #0
 801d93e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d940:	68fb      	ldr	r3, [r7, #12]
 801d942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d946:	b2db      	uxtb	r3, r3
 801d948:	2b20      	cmp	r3, #32
 801d94a:	f040 810d 	bne.w	801db68 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801d94e:	4b89      	ldr	r3, [pc, #548]	; (801db74 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 801d950:	681b      	ldr	r3, [r3, #0]
 801d952:	08db      	lsrs	r3, r3, #3
 801d954:	4a88      	ldr	r2, [pc, #544]	; (801db78 <HAL_I2C_Master_Transmit_DMA+0x250>)
 801d956:	fba2 2303 	umull	r2, r3, r2, r3
 801d95a:	0a1a      	lsrs	r2, r3, #8
 801d95c:	4613      	mov	r3, r2
 801d95e:	009b      	lsls	r3, r3, #2
 801d960:	4413      	add	r3, r2
 801d962:	009a      	lsls	r2, r3, #2
 801d964:	4413      	add	r3, r2
 801d966:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801d968:	693b      	ldr	r3, [r7, #16]
 801d96a:	3b01      	subs	r3, #1
 801d96c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801d96e:	693b      	ldr	r3, [r7, #16]
 801d970:	2b00      	cmp	r3, #0
 801d972:	d116      	bne.n	801d9a2 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801d974:	68fb      	ldr	r3, [r7, #12]
 801d976:	2200      	movs	r2, #0
 801d978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	2220      	movs	r2, #32
 801d97e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d982:	68fb      	ldr	r3, [r7, #12]
 801d984:	2200      	movs	r2, #0
 801d986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d98e:	f043 0220 	orr.w	r2, r3, #32
 801d992:	68fb      	ldr	r3, [r7, #12]
 801d994:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	2200      	movs	r2, #0
 801d99a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d99e:	2301      	movs	r3, #1
 801d9a0:	e0e3      	b.n	801db6a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801d9a2:	68fb      	ldr	r3, [r7, #12]
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	699b      	ldr	r3, [r3, #24]
 801d9a8:	f003 0302 	and.w	r3, r3, #2
 801d9ac:	2b02      	cmp	r3, #2
 801d9ae:	d0db      	beq.n	801d968 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d9b0:	68fb      	ldr	r3, [r7, #12]
 801d9b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d9b6:	2b01      	cmp	r3, #1
 801d9b8:	d101      	bne.n	801d9be <HAL_I2C_Master_Transmit_DMA+0x96>
 801d9ba:	2302      	movs	r3, #2
 801d9bc:	e0d5      	b.n	801db6a <HAL_I2C_Master_Transmit_DMA+0x242>
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	2201      	movs	r2, #1
 801d9c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801d9c6:	68fb      	ldr	r3, [r7, #12]
 801d9c8:	681b      	ldr	r3, [r3, #0]
 801d9ca:	681b      	ldr	r3, [r3, #0]
 801d9cc:	f003 0301 	and.w	r3, r3, #1
 801d9d0:	2b01      	cmp	r3, #1
 801d9d2:	d007      	beq.n	801d9e4 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801d9d4:	68fb      	ldr	r3, [r7, #12]
 801d9d6:	681b      	ldr	r3, [r3, #0]
 801d9d8:	681a      	ldr	r2, [r3, #0]
 801d9da:	68fb      	ldr	r3, [r7, #12]
 801d9dc:	681b      	ldr	r3, [r3, #0]
 801d9de:	f042 0201 	orr.w	r2, r2, #1
 801d9e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801d9e4:	68fb      	ldr	r3, [r7, #12]
 801d9e6:	681b      	ldr	r3, [r3, #0]
 801d9e8:	681a      	ldr	r2, [r3, #0]
 801d9ea:	68fb      	ldr	r3, [r7, #12]
 801d9ec:	681b      	ldr	r3, [r3, #0]
 801d9ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d9f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801d9f4:	68fb      	ldr	r3, [r7, #12]
 801d9f6:	2221      	movs	r2, #33	; 0x21
 801d9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801d9fc:	68fb      	ldr	r3, [r7, #12]
 801d9fe:	2210      	movs	r2, #16
 801da00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801da04:	68fb      	ldr	r3, [r7, #12]
 801da06:	2200      	movs	r2, #0
 801da08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801da0a:	68fb      	ldr	r3, [r7, #12]
 801da0c:	687a      	ldr	r2, [r7, #4]
 801da0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801da10:	68fb      	ldr	r3, [r7, #12]
 801da12:	893a      	ldrh	r2, [r7, #8]
 801da14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801da16:	68fb      	ldr	r3, [r7, #12]
 801da18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801da1a:	b29a      	uxth	r2, r3
 801da1c:	68fb      	ldr	r3, [r7, #12]
 801da1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801da20:	68fb      	ldr	r3, [r7, #12]
 801da22:	4a56      	ldr	r2, [pc, #344]	; (801db7c <HAL_I2C_Master_Transmit_DMA+0x254>)
 801da24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801da26:	897a      	ldrh	r2, [r7, #10]
 801da28:	68fb      	ldr	r3, [r7, #12]
 801da2a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801da2c:	68fb      	ldr	r3, [r7, #12]
 801da2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801da30:	2b00      	cmp	r3, #0
 801da32:	d07b      	beq.n	801db2c <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 801da34:	68fb      	ldr	r3, [r7, #12]
 801da36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da38:	2b00      	cmp	r3, #0
 801da3a:	d02a      	beq.n	801da92 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801da3c:	68fb      	ldr	r3, [r7, #12]
 801da3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da40:	4a4f      	ldr	r2, [pc, #316]	; (801db80 <HAL_I2C_Master_Transmit_DMA+0x258>)
 801da42:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801da44:	68fb      	ldr	r3, [r7, #12]
 801da46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da48:	4a4e      	ldr	r2, [pc, #312]	; (801db84 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 801da4a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801da4c:	68fb      	ldr	r3, [r7, #12]
 801da4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da50:	2200      	movs	r2, #0
 801da52:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801da54:	68fb      	ldr	r3, [r7, #12]
 801da56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da58:	2200      	movs	r2, #0
 801da5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801da5c:	68fb      	ldr	r3, [r7, #12]
 801da5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da60:	2200      	movs	r2, #0
 801da62:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801da64:	68fb      	ldr	r3, [r7, #12]
 801da66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da68:	2200      	movs	r2, #0
 801da6a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801da6c:	68fb      	ldr	r3, [r7, #12]
 801da6e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da74:	4619      	mov	r1, r3
 801da76:	68fb      	ldr	r3, [r7, #12]
 801da78:	681b      	ldr	r3, [r3, #0]
 801da7a:	3310      	adds	r3, #16
 801da7c:	461a      	mov	r2, r3
 801da7e:	68fb      	ldr	r3, [r7, #12]
 801da80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801da82:	f7ff f805 	bl	801ca90 <HAL_DMA_Start_IT>
 801da86:	4603      	mov	r3, r0
 801da88:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801da8a:	7dfb      	ldrb	r3, [r7, #23]
 801da8c:	2b00      	cmp	r3, #0
 801da8e:	d139      	bne.n	801db04 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 801da90:	e013      	b.n	801daba <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801da92:	68fb      	ldr	r3, [r7, #12]
 801da94:	2220      	movs	r2, #32
 801da96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801da9a:	68fb      	ldr	r3, [r7, #12]
 801da9c:	2200      	movs	r2, #0
 801da9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801daa2:	68fb      	ldr	r3, [r7, #12]
 801daa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801daa6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801daaa:	68fb      	ldr	r3, [r7, #12]
 801daac:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801daae:	68fb      	ldr	r3, [r7, #12]
 801dab0:	2200      	movs	r2, #0
 801dab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801dab6:	2301      	movs	r3, #1
 801dab8:	e057      	b.n	801db6a <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801daba:	68fb      	ldr	r3, [r7, #12]
 801dabc:	2200      	movs	r2, #0
 801dabe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801dac2:	68fb      	ldr	r3, [r7, #12]
 801dac4:	681b      	ldr	r3, [r3, #0]
 801dac6:	685a      	ldr	r2, [r3, #4]
 801dac8:	68fb      	ldr	r3, [r7, #12]
 801daca:	681b      	ldr	r3, [r3, #0]
 801dacc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801dad0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801dad2:	68fb      	ldr	r3, [r7, #12]
 801dad4:	681b      	ldr	r3, [r3, #0]
 801dad6:	685a      	ldr	r2, [r3, #4]
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	681b      	ldr	r3, [r3, #0]
 801dadc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801dae0:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dae2:	68fb      	ldr	r3, [r7, #12]
 801dae4:	681b      	ldr	r3, [r3, #0]
 801dae6:	681a      	ldr	r2, [r3, #0]
 801dae8:	68fb      	ldr	r3, [r7, #12]
 801daea:	681b      	ldr	r3, [r3, #0]
 801daec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801daf0:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801daf2:	68fb      	ldr	r3, [r7, #12]
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	681a      	ldr	r2, [r3, #0]
 801daf8:	68fb      	ldr	r3, [r7, #12]
 801dafa:	681b      	ldr	r3, [r3, #0]
 801dafc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801db00:	601a      	str	r2, [r3, #0]
 801db02:	e02f      	b.n	801db64 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801db04:	68fb      	ldr	r3, [r7, #12]
 801db06:	2220      	movs	r2, #32
 801db08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801db0c:	68fb      	ldr	r3, [r7, #12]
 801db0e:	2200      	movs	r2, #0
 801db10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801db14:	68fb      	ldr	r3, [r7, #12]
 801db16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db18:	f043 0210 	orr.w	r2, r3, #16
 801db1c:	68fb      	ldr	r3, [r7, #12]
 801db1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	2200      	movs	r2, #0
 801db24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801db28:	2301      	movs	r3, #1
 801db2a:	e01e      	b.n	801db6a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801db2c:	68fb      	ldr	r3, [r7, #12]
 801db2e:	681b      	ldr	r3, [r3, #0]
 801db30:	681a      	ldr	r2, [r3, #0]
 801db32:	68fb      	ldr	r3, [r7, #12]
 801db34:	681b      	ldr	r3, [r3, #0]
 801db36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801db3a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801db3c:	68fb      	ldr	r3, [r7, #12]
 801db3e:	681b      	ldr	r3, [r3, #0]
 801db40:	681a      	ldr	r2, [r3, #0]
 801db42:	68fb      	ldr	r3, [r7, #12]
 801db44:	681b      	ldr	r3, [r3, #0]
 801db46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801db4a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801db4c:	68fb      	ldr	r3, [r7, #12]
 801db4e:	2200      	movs	r2, #0
 801db50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801db54:	68fb      	ldr	r3, [r7, #12]
 801db56:	681b      	ldr	r3, [r3, #0]
 801db58:	685a      	ldr	r2, [r3, #4]
 801db5a:	68fb      	ldr	r3, [r7, #12]
 801db5c:	681b      	ldr	r3, [r3, #0]
 801db5e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801db62:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 801db64:	2300      	movs	r3, #0
 801db66:	e000      	b.n	801db6a <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801db68:	2302      	movs	r3, #2
  }
}
 801db6a:	4618      	mov	r0, r3
 801db6c:	3718      	adds	r7, #24
 801db6e:	46bd      	mov	sp, r7
 801db70:	bd80      	pop	{r7, pc}
 801db72:	bf00      	nop
 801db74:	20000020 	.word	0x20000020
 801db78:	14f8b589 	.word	0x14f8b589
 801db7c:	ffff0000 	.word	0xffff0000
 801db80:	0801fe51 	.word	0x0801fe51
 801db84:	0801fffb 	.word	0x0801fffb

0801db88 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801db88:	b580      	push	{r7, lr}
 801db8a:	b086      	sub	sp, #24
 801db8c:	af00      	add	r7, sp, #0
 801db8e:	60f8      	str	r0, [r7, #12]
 801db90:	607a      	str	r2, [r7, #4]
 801db92:	461a      	mov	r2, r3
 801db94:	460b      	mov	r3, r1
 801db96:	817b      	strh	r3, [r7, #10]
 801db98:	4613      	mov	r3, r2
 801db9a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801db9c:	2300      	movs	r3, #0
 801db9e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801dba0:	68fb      	ldr	r3, [r7, #12]
 801dba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dba6:	b2db      	uxtb	r3, r3
 801dba8:	2b20      	cmp	r3, #32
 801dbaa:	f040 810d 	bne.w	801ddc8 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801dbae:	4b89      	ldr	r3, [pc, #548]	; (801ddd4 <HAL_I2C_Master_Receive_DMA+0x24c>)
 801dbb0:	681b      	ldr	r3, [r3, #0]
 801dbb2:	08db      	lsrs	r3, r3, #3
 801dbb4:	4a88      	ldr	r2, [pc, #544]	; (801ddd8 <HAL_I2C_Master_Receive_DMA+0x250>)
 801dbb6:	fba2 2303 	umull	r2, r3, r2, r3
 801dbba:	0a1a      	lsrs	r2, r3, #8
 801dbbc:	4613      	mov	r3, r2
 801dbbe:	009b      	lsls	r3, r3, #2
 801dbc0:	4413      	add	r3, r2
 801dbc2:	009a      	lsls	r2, r3, #2
 801dbc4:	4413      	add	r3, r2
 801dbc6:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801dbc8:	693b      	ldr	r3, [r7, #16]
 801dbca:	3b01      	subs	r3, #1
 801dbcc:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801dbce:	693b      	ldr	r3, [r7, #16]
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	d116      	bne.n	801dc02 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801dbd4:	68fb      	ldr	r3, [r7, #12]
 801dbd6:	2200      	movs	r2, #0
 801dbd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801dbda:	68fb      	ldr	r3, [r7, #12]
 801dbdc:	2220      	movs	r2, #32
 801dbde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801dbe2:	68fb      	ldr	r3, [r7, #12]
 801dbe4:	2200      	movs	r2, #0
 801dbe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801dbea:	68fb      	ldr	r3, [r7, #12]
 801dbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dbee:	f043 0220 	orr.w	r2, r3, #32
 801dbf2:	68fb      	ldr	r3, [r7, #12]
 801dbf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801dbf6:	68fb      	ldr	r3, [r7, #12]
 801dbf8:	2200      	movs	r2, #0
 801dbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801dbfe:	2301      	movs	r3, #1
 801dc00:	e0e3      	b.n	801ddca <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801dc02:	68fb      	ldr	r3, [r7, #12]
 801dc04:	681b      	ldr	r3, [r3, #0]
 801dc06:	699b      	ldr	r3, [r3, #24]
 801dc08:	f003 0302 	and.w	r3, r3, #2
 801dc0c:	2b02      	cmp	r3, #2
 801dc0e:	d0db      	beq.n	801dbc8 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801dc10:	68fb      	ldr	r3, [r7, #12]
 801dc12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801dc16:	2b01      	cmp	r3, #1
 801dc18:	d101      	bne.n	801dc1e <HAL_I2C_Master_Receive_DMA+0x96>
 801dc1a:	2302      	movs	r3, #2
 801dc1c:	e0d5      	b.n	801ddca <HAL_I2C_Master_Receive_DMA+0x242>
 801dc1e:	68fb      	ldr	r3, [r7, #12]
 801dc20:	2201      	movs	r2, #1
 801dc22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801dc26:	68fb      	ldr	r3, [r7, #12]
 801dc28:	681b      	ldr	r3, [r3, #0]
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	f003 0301 	and.w	r3, r3, #1
 801dc30:	2b01      	cmp	r3, #1
 801dc32:	d007      	beq.n	801dc44 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801dc34:	68fb      	ldr	r3, [r7, #12]
 801dc36:	681b      	ldr	r3, [r3, #0]
 801dc38:	681a      	ldr	r2, [r3, #0]
 801dc3a:	68fb      	ldr	r3, [r7, #12]
 801dc3c:	681b      	ldr	r3, [r3, #0]
 801dc3e:	f042 0201 	orr.w	r2, r2, #1
 801dc42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801dc44:	68fb      	ldr	r3, [r7, #12]
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	681a      	ldr	r2, [r3, #0]
 801dc4a:	68fb      	ldr	r3, [r7, #12]
 801dc4c:	681b      	ldr	r3, [r3, #0]
 801dc4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801dc52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801dc54:	68fb      	ldr	r3, [r7, #12]
 801dc56:	2222      	movs	r2, #34	; 0x22
 801dc58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801dc5c:	68fb      	ldr	r3, [r7, #12]
 801dc5e:	2210      	movs	r2, #16
 801dc60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801dc64:	68fb      	ldr	r3, [r7, #12]
 801dc66:	2200      	movs	r2, #0
 801dc68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801dc6a:	68fb      	ldr	r3, [r7, #12]
 801dc6c:	687a      	ldr	r2, [r7, #4]
 801dc6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801dc70:	68fb      	ldr	r3, [r7, #12]
 801dc72:	893a      	ldrh	r2, [r7, #8]
 801dc74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801dc76:	68fb      	ldr	r3, [r7, #12]
 801dc78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dc7a:	b29a      	uxth	r2, r3
 801dc7c:	68fb      	ldr	r3, [r7, #12]
 801dc7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801dc80:	68fb      	ldr	r3, [r7, #12]
 801dc82:	4a56      	ldr	r2, [pc, #344]	; (801dddc <HAL_I2C_Master_Receive_DMA+0x254>)
 801dc84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801dc86:	897a      	ldrh	r2, [r7, #10]
 801dc88:	68fb      	ldr	r3, [r7, #12]
 801dc8a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801dc8c:	68fb      	ldr	r3, [r7, #12]
 801dc8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	d07b      	beq.n	801dd8c <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 801dc94:	68fb      	ldr	r3, [r7, #12]
 801dc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc98:	2b00      	cmp	r3, #0
 801dc9a:	d02a      	beq.n	801dcf2 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801dc9c:	68fb      	ldr	r3, [r7, #12]
 801dc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dca0:	4a4f      	ldr	r2, [pc, #316]	; (801dde0 <HAL_I2C_Master_Receive_DMA+0x258>)
 801dca2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801dca4:	68fb      	ldr	r3, [r7, #12]
 801dca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dca8:	4a4e      	ldr	r2, [pc, #312]	; (801dde4 <HAL_I2C_Master_Receive_DMA+0x25c>)
 801dcaa:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801dcac:	68fb      	ldr	r3, [r7, #12]
 801dcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcb0:	2200      	movs	r2, #0
 801dcb2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcb8:	2200      	movs	r2, #0
 801dcba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801dcbc:	68fb      	ldr	r3, [r7, #12]
 801dcbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcc0:	2200      	movs	r2, #0
 801dcc2:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcc8:	2200      	movs	r2, #0
 801dcca:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801dccc:	68fb      	ldr	r3, [r7, #12]
 801dcce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	681b      	ldr	r3, [r3, #0]
 801dcd4:	3310      	adds	r3, #16
 801dcd6:	4619      	mov	r1, r3
 801dcd8:	68fb      	ldr	r3, [r7, #12]
 801dcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dcdc:	461a      	mov	r2, r3
 801dcde:	68fb      	ldr	r3, [r7, #12]
 801dce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dce2:	f7fe fed5 	bl	801ca90 <HAL_DMA_Start_IT>
 801dce6:	4603      	mov	r3, r0
 801dce8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801dcea:	7dfb      	ldrb	r3, [r7, #23]
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	d139      	bne.n	801dd64 <HAL_I2C_Master_Receive_DMA+0x1dc>
 801dcf0:	e013      	b.n	801dd1a <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801dcf2:	68fb      	ldr	r3, [r7, #12]
 801dcf4:	2220      	movs	r2, #32
 801dcf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801dcfa:	68fb      	ldr	r3, [r7, #12]
 801dcfc:	2200      	movs	r2, #0
 801dcfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801dd02:	68fb      	ldr	r3, [r7, #12]
 801dd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dd06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801dd0a:	68fb      	ldr	r3, [r7, #12]
 801dd0c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801dd0e:	68fb      	ldr	r3, [r7, #12]
 801dd10:	2200      	movs	r2, #0
 801dd12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801dd16:	2301      	movs	r3, #1
 801dd18:	e057      	b.n	801ddca <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dd1a:	68fb      	ldr	r3, [r7, #12]
 801dd1c:	681b      	ldr	r3, [r3, #0]
 801dd1e:	681a      	ldr	r2, [r3, #0]
 801dd20:	68fb      	ldr	r3, [r7, #12]
 801dd22:	681b      	ldr	r3, [r3, #0]
 801dd24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801dd28:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801dd2a:	68fb      	ldr	r3, [r7, #12]
 801dd2c:	681b      	ldr	r3, [r3, #0]
 801dd2e:	681a      	ldr	r2, [r3, #0]
 801dd30:	68fb      	ldr	r3, [r7, #12]
 801dd32:	681b      	ldr	r3, [r3, #0]
 801dd34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801dd38:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801dd3a:	68fb      	ldr	r3, [r7, #12]
 801dd3c:	2200      	movs	r2, #0
 801dd3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801dd42:	68fb      	ldr	r3, [r7, #12]
 801dd44:	681b      	ldr	r3, [r3, #0]
 801dd46:	685a      	ldr	r2, [r3, #4]
 801dd48:	68fb      	ldr	r3, [r7, #12]
 801dd4a:	681b      	ldr	r3, [r3, #0]
 801dd4c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801dd50:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	685a      	ldr	r2, [r3, #4]
 801dd58:	68fb      	ldr	r3, [r7, #12]
 801dd5a:	681b      	ldr	r3, [r3, #0]
 801dd5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801dd60:	605a      	str	r2, [r3, #4]
 801dd62:	e02f      	b.n	801ddc4 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801dd64:	68fb      	ldr	r3, [r7, #12]
 801dd66:	2220      	movs	r2, #32
 801dd68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801dd6c:	68fb      	ldr	r3, [r7, #12]
 801dd6e:	2200      	movs	r2, #0
 801dd70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801dd74:	68fb      	ldr	r3, [r7, #12]
 801dd76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dd78:	f043 0210 	orr.w	r2, r3, #16
 801dd7c:	68fb      	ldr	r3, [r7, #12]
 801dd7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801dd80:	68fb      	ldr	r3, [r7, #12]
 801dd82:	2200      	movs	r2, #0
 801dd84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801dd88:	2301      	movs	r3, #1
 801dd8a:	e01e      	b.n	801ddca <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801dd8c:	68fb      	ldr	r3, [r7, #12]
 801dd8e:	2200      	movs	r2, #0
 801dd90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	685a      	ldr	r2, [r3, #4]
 801dd9a:	68fb      	ldr	r3, [r7, #12]
 801dd9c:	681b      	ldr	r3, [r3, #0]
 801dd9e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801dda2:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	681a      	ldr	r2, [r3, #0]
 801ddaa:	68fb      	ldr	r3, [r7, #12]
 801ddac:	681b      	ldr	r3, [r3, #0]
 801ddae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ddb2:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801ddb4:	68fb      	ldr	r3, [r7, #12]
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	681a      	ldr	r2, [r3, #0]
 801ddba:	68fb      	ldr	r3, [r7, #12]
 801ddbc:	681b      	ldr	r3, [r3, #0]
 801ddbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ddc2:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 801ddc4:	2300      	movs	r3, #0
 801ddc6:	e000      	b.n	801ddca <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801ddc8:	2302      	movs	r3, #2
  }
}
 801ddca:	4618      	mov	r0, r3
 801ddcc:	3718      	adds	r7, #24
 801ddce:	46bd      	mov	sp, r7
 801ddd0:	bd80      	pop	{r7, pc}
 801ddd2:	bf00      	nop
 801ddd4:	20000020 	.word	0x20000020
 801ddd8:	14f8b589 	.word	0x14f8b589
 801dddc:	ffff0000 	.word	0xffff0000
 801dde0:	0801fe51 	.word	0x0801fe51
 801dde4:	0801fffb 	.word	0x0801fffb

0801dde8 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801dde8:	b580      	push	{r7, lr}
 801ddea:	b08a      	sub	sp, #40	; 0x28
 801ddec:	af02      	add	r7, sp, #8
 801ddee:	60f8      	str	r0, [r7, #12]
 801ddf0:	4608      	mov	r0, r1
 801ddf2:	4611      	mov	r1, r2
 801ddf4:	461a      	mov	r2, r3
 801ddf6:	4603      	mov	r3, r0
 801ddf8:	817b      	strh	r3, [r7, #10]
 801ddfa:	460b      	mov	r3, r1
 801ddfc:	813b      	strh	r3, [r7, #8]
 801ddfe:	4613      	mov	r3, r2
 801de00:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 801de02:	2300      	movs	r3, #0
 801de04:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801de06:	f7fe f843 	bl	801be90 <HAL_GetTick>
 801de0a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801de0c:	68fb      	ldr	r3, [r7, #12]
 801de0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801de12:	b2db      	uxtb	r3, r3
 801de14:	2b20      	cmp	r3, #32
 801de16:	f040 8145 	bne.w	801e0a4 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801de1a:	4b9d      	ldr	r3, [pc, #628]	; (801e090 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 801de1c:	681b      	ldr	r3, [r3, #0]
 801de1e:	08db      	lsrs	r3, r3, #3
 801de20:	4a9c      	ldr	r2, [pc, #624]	; (801e094 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 801de22:	fba2 2303 	umull	r2, r3, r2, r3
 801de26:	0a1a      	lsrs	r2, r3, #8
 801de28:	4613      	mov	r3, r2
 801de2a:	009b      	lsls	r3, r3, #2
 801de2c:	4413      	add	r3, r2
 801de2e:	009a      	lsls	r2, r3, #2
 801de30:	4413      	add	r3, r2
 801de32:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 801de34:	697b      	ldr	r3, [r7, #20]
 801de36:	3b01      	subs	r3, #1
 801de38:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801de3a:	697b      	ldr	r3, [r7, #20]
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d116      	bne.n	801de6e <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801de40:	68fb      	ldr	r3, [r7, #12]
 801de42:	2200      	movs	r2, #0
 801de44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801de46:	68fb      	ldr	r3, [r7, #12]
 801de48:	2220      	movs	r2, #32
 801de4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	2200      	movs	r2, #0
 801de52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801de56:	68fb      	ldr	r3, [r7, #12]
 801de58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de5a:	f043 0220 	orr.w	r2, r3, #32
 801de5e:	68fb      	ldr	r3, [r7, #12]
 801de60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801de62:	68fb      	ldr	r3, [r7, #12]
 801de64:	2200      	movs	r2, #0
 801de66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801de6a:	2301      	movs	r3, #1
 801de6c:	e11b      	b.n	801e0a6 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	699b      	ldr	r3, [r3, #24]
 801de74:	f003 0302 	and.w	r3, r3, #2
 801de78:	2b02      	cmp	r3, #2
 801de7a:	d0db      	beq.n	801de34 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801de7c:	68fb      	ldr	r3, [r7, #12]
 801de7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801de82:	2b01      	cmp	r3, #1
 801de84:	d101      	bne.n	801de8a <HAL_I2C_Mem_Write_DMA+0xa2>
 801de86:	2302      	movs	r3, #2
 801de88:	e10d      	b.n	801e0a6 <HAL_I2C_Mem_Write_DMA+0x2be>
 801de8a:	68fb      	ldr	r3, [r7, #12]
 801de8c:	2201      	movs	r2, #1
 801de8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801de92:	68fb      	ldr	r3, [r7, #12]
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	681b      	ldr	r3, [r3, #0]
 801de98:	f003 0301 	and.w	r3, r3, #1
 801de9c:	2b01      	cmp	r3, #1
 801de9e:	d007      	beq.n	801deb0 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801dea0:	68fb      	ldr	r3, [r7, #12]
 801dea2:	681b      	ldr	r3, [r3, #0]
 801dea4:	681a      	ldr	r2, [r3, #0]
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	681b      	ldr	r3, [r3, #0]
 801deaa:	f042 0201 	orr.w	r2, r2, #1
 801deae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801deb0:	68fb      	ldr	r3, [r7, #12]
 801deb2:	681b      	ldr	r3, [r3, #0]
 801deb4:	681a      	ldr	r2, [r3, #0]
 801deb6:	68fb      	ldr	r3, [r7, #12]
 801deb8:	681b      	ldr	r3, [r3, #0]
 801deba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801debe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801dec0:	68fb      	ldr	r3, [r7, #12]
 801dec2:	2221      	movs	r2, #33	; 0x21
 801dec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801dec8:	68fb      	ldr	r3, [r7, #12]
 801deca:	2240      	movs	r2, #64	; 0x40
 801decc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801ded0:	68fb      	ldr	r3, [r7, #12]
 801ded2:	2200      	movs	r2, #0
 801ded4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801ded6:	68fb      	ldr	r3, [r7, #12]
 801ded8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801deda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801dedc:	68fb      	ldr	r3, [r7, #12]
 801dede:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801dee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801dee2:	68fb      	ldr	r3, [r7, #12]
 801dee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dee6:	b29a      	uxth	r2, r3
 801dee8:	68fb      	ldr	r3, [r7, #12]
 801deea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	4a6a      	ldr	r2, [pc, #424]	; (801e098 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 801def0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801def2:	897a      	ldrh	r2, [r7, #10]
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801def8:	893a      	ldrh	r2, [r7, #8]
 801defa:	68fb      	ldr	r3, [r7, #12]
 801defc:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801defe:	88fa      	ldrh	r2, [r7, #6]
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801df04:	68fb      	ldr	r3, [r7, #12]
 801df06:	2200      	movs	r2, #0
 801df08:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801df0a:	68fb      	ldr	r3, [r7, #12]
 801df0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801df0e:	2b00      	cmp	r3, #0
 801df10:	f000 80a9 	beq.w	801e066 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 801df14:	68fb      	ldr	r3, [r7, #12]
 801df16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801df18:	2b00      	cmp	r3, #0
 801df1a:	d02a      	beq.n	801df72 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801df20:	4a5e      	ldr	r2, [pc, #376]	; (801e09c <HAL_I2C_Mem_Write_DMA+0x2b4>)
 801df22:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801df28:	4a5d      	ldr	r2, [pc, #372]	; (801e0a0 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 801df2a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801df2c:	68fb      	ldr	r3, [r7, #12]
 801df2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801df30:	2200      	movs	r2, #0
 801df32:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801df38:	2200      	movs	r2, #0
 801df3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801df3c:	68fb      	ldr	r3, [r7, #12]
 801df3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801df40:	2200      	movs	r2, #0
 801df42:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801df44:	68fb      	ldr	r3, [r7, #12]
 801df46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801df48:	2200      	movs	r2, #0
 801df4a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801df4c:	68fb      	ldr	r3, [r7, #12]
 801df4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801df50:	68fb      	ldr	r3, [r7, #12]
 801df52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df54:	4619      	mov	r1, r3
 801df56:	68fb      	ldr	r3, [r7, #12]
 801df58:	681b      	ldr	r3, [r3, #0]
 801df5a:	3310      	adds	r3, #16
 801df5c:	461a      	mov	r2, r3
 801df5e:	68fb      	ldr	r3, [r7, #12]
 801df60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801df62:	f7fe fd95 	bl	801ca90 <HAL_DMA_Start_IT>
 801df66:	4603      	mov	r3, r0
 801df68:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801df6a:	7efb      	ldrb	r3, [r7, #27]
 801df6c:	2b00      	cmp	r3, #0
 801df6e:	d166      	bne.n	801e03e <HAL_I2C_Mem_Write_DMA+0x256>
 801df70:	e013      	b.n	801df9a <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 801df72:	68fb      	ldr	r3, [r7, #12]
 801df74:	2220      	movs	r2, #32
 801df76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801df7a:	68fb      	ldr	r3, [r7, #12]
 801df7c:	2200      	movs	r2, #0
 801df7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801df82:	68fb      	ldr	r3, [r7, #12]
 801df84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df86:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801df8a:	68fb      	ldr	r3, [r7, #12]
 801df8c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	2200      	movs	r2, #0
 801df92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801df96:	2301      	movs	r3, #1
 801df98:	e085      	b.n	801e0a6 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801df9a:	88f8      	ldrh	r0, [r7, #6]
 801df9c:	893a      	ldrh	r2, [r7, #8]
 801df9e:	8979      	ldrh	r1, [r7, #10]
 801dfa0:	69fb      	ldr	r3, [r7, #28]
 801dfa2:	9301      	str	r3, [sp, #4]
 801dfa4:	2323      	movs	r3, #35	; 0x23
 801dfa6:	9300      	str	r3, [sp, #0]
 801dfa8:	4603      	mov	r3, r0
 801dfaa:	68f8      	ldr	r0, [r7, #12]
 801dfac:	f001 fdd2 	bl	801fb54 <I2C_RequestMemoryWrite>
 801dfb0:	4603      	mov	r3, r0
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d022      	beq.n	801dffc <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 801dfb6:	68fb      	ldr	r3, [r7, #12]
 801dfb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dfba:	4618      	mov	r0, r3
 801dfbc:	f7fe fe30 	bl	801cc20 <HAL_DMA_Abort_IT>
 801dfc0:	4603      	mov	r3, r0
 801dfc2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 801dfc4:	68fb      	ldr	r3, [r7, #12]
 801dfc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dfc8:	2200      	movs	r2, #0
 801dfca:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dfcc:	68fb      	ldr	r3, [r7, #12]
 801dfce:	681b      	ldr	r3, [r3, #0]
 801dfd0:	681a      	ldr	r2, [r3, #0]
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	681b      	ldr	r3, [r3, #0]
 801dfd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801dfda:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801dfdc:	68fb      	ldr	r3, [r7, #12]
 801dfde:	2200      	movs	r2, #0
 801dfe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801dfe2:	68fb      	ldr	r3, [r7, #12]
 801dfe4:	2200      	movs	r2, #0
 801dfe6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801dfe8:	68fb      	ldr	r3, [r7, #12]
 801dfea:	681b      	ldr	r3, [r3, #0]
 801dfec:	681a      	ldr	r2, [r3, #0]
 801dfee:	68fb      	ldr	r3, [r7, #12]
 801dff0:	681b      	ldr	r3, [r3, #0]
 801dff2:	f022 0201 	bic.w	r2, r2, #1
 801dff6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801dff8:	2301      	movs	r3, #1
 801dffa:	e054      	b.n	801e0a6 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dffc:	2300      	movs	r3, #0
 801dffe:	613b      	str	r3, [r7, #16]
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	681b      	ldr	r3, [r3, #0]
 801e004:	695b      	ldr	r3, [r3, #20]
 801e006:	613b      	str	r3, [r7, #16]
 801e008:	68fb      	ldr	r3, [r7, #12]
 801e00a:	681b      	ldr	r3, [r3, #0]
 801e00c:	699b      	ldr	r3, [r3, #24]
 801e00e:	613b      	str	r3, [r7, #16]
 801e010:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e012:	68fb      	ldr	r3, [r7, #12]
 801e014:	2200      	movs	r2, #0
 801e016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801e01a:	68fb      	ldr	r3, [r7, #12]
 801e01c:	681b      	ldr	r3, [r3, #0]
 801e01e:	685a      	ldr	r2, [r3, #4]
 801e020:	68fb      	ldr	r3, [r7, #12]
 801e022:	681b      	ldr	r3, [r3, #0]
 801e024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e028:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e02a:	68fb      	ldr	r3, [r7, #12]
 801e02c:	681b      	ldr	r3, [r3, #0]
 801e02e:	685a      	ldr	r2, [r3, #4]
 801e030:	68fb      	ldr	r3, [r7, #12]
 801e032:	681b      	ldr	r3, [r3, #0]
 801e034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e038:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 801e03a:	2300      	movs	r3, #0
 801e03c:	e033      	b.n	801e0a6 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801e03e:	68fb      	ldr	r3, [r7, #12]
 801e040:	2220      	movs	r2, #32
 801e042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e046:	68fb      	ldr	r3, [r7, #12]
 801e048:	2200      	movs	r2, #0
 801e04a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801e04e:	68fb      	ldr	r3, [r7, #12]
 801e050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e052:	f043 0210 	orr.w	r2, r3, #16
 801e056:	68fb      	ldr	r3, [r7, #12]
 801e058:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e05a:	68fb      	ldr	r3, [r7, #12]
 801e05c:	2200      	movs	r2, #0
 801e05e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801e062:	2301      	movs	r3, #1
 801e064:	e01f      	b.n	801e0a6 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	2220      	movs	r2, #32
 801e06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e06e:	68fb      	ldr	r3, [r7, #12]
 801e070:	2200      	movs	r2, #0
 801e072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 801e076:	68fb      	ldr	r3, [r7, #12]
 801e078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e07a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801e07e:	68fb      	ldr	r3, [r7, #12]
 801e080:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	2200      	movs	r2, #0
 801e086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801e08a:	2301      	movs	r3, #1
 801e08c:	e00b      	b.n	801e0a6 <HAL_I2C_Mem_Write_DMA+0x2be>
 801e08e:	bf00      	nop
 801e090:	20000020 	.word	0x20000020
 801e094:	14f8b589 	.word	0x14f8b589
 801e098:	ffff0000 	.word	0xffff0000
 801e09c:	0801fe51 	.word	0x0801fe51
 801e0a0:	0801fffb 	.word	0x0801fffb
    }
  }
  else
  {
    return HAL_BUSY;
 801e0a4:	2302      	movs	r3, #2
  }
}
 801e0a6:	4618      	mov	r0, r3
 801e0a8:	3720      	adds	r7, #32
 801e0aa:	46bd      	mov	sp, r7
 801e0ac:	bd80      	pop	{r7, pc}
 801e0ae:	bf00      	nop

0801e0b0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801e0b0:	b580      	push	{r7, lr}
 801e0b2:	b08c      	sub	sp, #48	; 0x30
 801e0b4:	af02      	add	r7, sp, #8
 801e0b6:	60f8      	str	r0, [r7, #12]
 801e0b8:	4608      	mov	r0, r1
 801e0ba:	4611      	mov	r1, r2
 801e0bc:	461a      	mov	r2, r3
 801e0be:	4603      	mov	r3, r0
 801e0c0:	817b      	strh	r3, [r7, #10]
 801e0c2:	460b      	mov	r3, r1
 801e0c4:	813b      	strh	r3, [r7, #8]
 801e0c6:	4613      	mov	r3, r2
 801e0c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801e0ca:	f7fd fee1 	bl	801be90 <HAL_GetTick>
 801e0ce:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 801e0d0:	2300      	movs	r3, #0
 801e0d2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801e0d4:	68fb      	ldr	r3, [r7, #12]
 801e0d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e0da:	b2db      	uxtb	r3, r3
 801e0dc:	2b20      	cmp	r3, #32
 801e0de:	f040 8176 	bne.w	801e3ce <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801e0e2:	4b95      	ldr	r3, [pc, #596]	; (801e338 <HAL_I2C_Mem_Read_DMA+0x288>)
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	08db      	lsrs	r3, r3, #3
 801e0e8:	4a94      	ldr	r2, [pc, #592]	; (801e33c <HAL_I2C_Mem_Read_DMA+0x28c>)
 801e0ea:	fba2 2303 	umull	r2, r3, r2, r3
 801e0ee:	0a1a      	lsrs	r2, r3, #8
 801e0f0:	4613      	mov	r3, r2
 801e0f2:	009b      	lsls	r3, r3, #2
 801e0f4:	4413      	add	r3, r2
 801e0f6:	009a      	lsls	r2, r3, #2
 801e0f8:	4413      	add	r3, r2
 801e0fa:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 801e0fc:	69fb      	ldr	r3, [r7, #28]
 801e0fe:	3b01      	subs	r3, #1
 801e100:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 801e102:	69fb      	ldr	r3, [r7, #28]
 801e104:	2b00      	cmp	r3, #0
 801e106:	d116      	bne.n	801e136 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801e108:	68fb      	ldr	r3, [r7, #12]
 801e10a:	2200      	movs	r2, #0
 801e10c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801e10e:	68fb      	ldr	r3, [r7, #12]
 801e110:	2220      	movs	r2, #32
 801e112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801e116:	68fb      	ldr	r3, [r7, #12]
 801e118:	2200      	movs	r2, #0
 801e11a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801e11e:	68fb      	ldr	r3, [r7, #12]
 801e120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e122:	f043 0220 	orr.w	r2, r3, #32
 801e126:	68fb      	ldr	r3, [r7, #12]
 801e128:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e12a:	68fb      	ldr	r3, [r7, #12]
 801e12c:	2200      	movs	r2, #0
 801e12e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801e132:	2301      	movs	r3, #1
 801e134:	e14c      	b.n	801e3d0 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801e136:	68fb      	ldr	r3, [r7, #12]
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	699b      	ldr	r3, [r3, #24]
 801e13c:	f003 0302 	and.w	r3, r3, #2
 801e140:	2b02      	cmp	r3, #2
 801e142:	d0db      	beq.n	801e0fc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801e144:	68fb      	ldr	r3, [r7, #12]
 801e146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e14a:	2b01      	cmp	r3, #1
 801e14c:	d101      	bne.n	801e152 <HAL_I2C_Mem_Read_DMA+0xa2>
 801e14e:	2302      	movs	r3, #2
 801e150:	e13e      	b.n	801e3d0 <HAL_I2C_Mem_Read_DMA+0x320>
 801e152:	68fb      	ldr	r3, [r7, #12]
 801e154:	2201      	movs	r2, #1
 801e156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801e15a:	68fb      	ldr	r3, [r7, #12]
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	681b      	ldr	r3, [r3, #0]
 801e160:	f003 0301 	and.w	r3, r3, #1
 801e164:	2b01      	cmp	r3, #1
 801e166:	d007      	beq.n	801e178 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801e168:	68fb      	ldr	r3, [r7, #12]
 801e16a:	681b      	ldr	r3, [r3, #0]
 801e16c:	681a      	ldr	r2, [r3, #0]
 801e16e:	68fb      	ldr	r3, [r7, #12]
 801e170:	681b      	ldr	r3, [r3, #0]
 801e172:	f042 0201 	orr.w	r2, r2, #1
 801e176:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801e178:	68fb      	ldr	r3, [r7, #12]
 801e17a:	681b      	ldr	r3, [r3, #0]
 801e17c:	681a      	ldr	r2, [r3, #0]
 801e17e:	68fb      	ldr	r3, [r7, #12]
 801e180:	681b      	ldr	r3, [r3, #0]
 801e182:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e186:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801e188:	68fb      	ldr	r3, [r7, #12]
 801e18a:	2222      	movs	r2, #34	; 0x22
 801e18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801e190:	68fb      	ldr	r3, [r7, #12]
 801e192:	2240      	movs	r2, #64	; 0x40
 801e194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801e198:	68fb      	ldr	r3, [r7, #12]
 801e19a:	2200      	movs	r2, #0
 801e19c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801e19e:	68fb      	ldr	r3, [r7, #12]
 801e1a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e1a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801e1a4:	68fb      	ldr	r3, [r7, #12]
 801e1a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801e1a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801e1aa:	68fb      	ldr	r3, [r7, #12]
 801e1ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e1ae:	b29a      	uxth	r2, r3
 801e1b0:	68fb      	ldr	r3, [r7, #12]
 801e1b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801e1b4:	68fb      	ldr	r3, [r7, #12]
 801e1b6:	4a62      	ldr	r2, [pc, #392]	; (801e340 <HAL_I2C_Mem_Read_DMA+0x290>)
 801e1b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801e1ba:	897a      	ldrh	r2, [r7, #10]
 801e1bc:	68fb      	ldr	r3, [r7, #12]
 801e1be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801e1c0:	893a      	ldrh	r2, [r7, #8]
 801e1c2:	68fb      	ldr	r3, [r7, #12]
 801e1c4:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801e1c6:	88fa      	ldrh	r2, [r7, #6]
 801e1c8:	68fb      	ldr	r3, [r7, #12]
 801e1ca:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801e1cc:	68fb      	ldr	r3, [r7, #12]
 801e1ce:	2200      	movs	r2, #0
 801e1d0:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801e1d2:	68fb      	ldr	r3, [r7, #12]
 801e1d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	f000 80cc 	beq.w	801e374 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d02d      	beq.n	801e240 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801e1e4:	68fb      	ldr	r3, [r7, #12]
 801e1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1e8:	4a56      	ldr	r2, [pc, #344]	; (801e344 <HAL_I2C_Mem_Read_DMA+0x294>)
 801e1ea:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801e1ec:	68fb      	ldr	r3, [r7, #12]
 801e1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1f0:	4a55      	ldr	r2, [pc, #340]	; (801e348 <HAL_I2C_Mem_Read_DMA+0x298>)
 801e1f2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801e1f4:	68fb      	ldr	r3, [r7, #12]
 801e1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1f8:	2200      	movs	r2, #0
 801e1fa:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801e1fc:	68fb      	ldr	r3, [r7, #12]
 801e1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e200:	2200      	movs	r2, #0
 801e202:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801e204:	68fb      	ldr	r3, [r7, #12]
 801e206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e208:	2200      	movs	r2, #0
 801e20a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801e20c:	68fb      	ldr	r3, [r7, #12]
 801e20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e210:	2200      	movs	r2, #0
 801e212:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801e214:	68fb      	ldr	r3, [r7, #12]
 801e216:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801e218:	68fb      	ldr	r3, [r7, #12]
 801e21a:	681b      	ldr	r3, [r3, #0]
 801e21c:	3310      	adds	r3, #16
 801e21e:	4619      	mov	r1, r3
 801e220:	68fb      	ldr	r3, [r7, #12]
 801e222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e224:	461a      	mov	r2, r3
 801e226:	68fb      	ldr	r3, [r7, #12]
 801e228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e22a:	f7fe fc31 	bl	801ca90 <HAL_DMA_Start_IT>
 801e22e:	4603      	mov	r3, r0
 801e230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801e234:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e238:	2b00      	cmp	r3, #0
 801e23a:	f040 8087 	bne.w	801e34c <HAL_I2C_Mem_Read_DMA+0x29c>
 801e23e:	e013      	b.n	801e268 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 801e240:	68fb      	ldr	r3, [r7, #12]
 801e242:	2220      	movs	r2, #32
 801e244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e248:	68fb      	ldr	r3, [r7, #12]
 801e24a:	2200      	movs	r2, #0
 801e24c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801e250:	68fb      	ldr	r3, [r7, #12]
 801e252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e254:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801e258:	68fb      	ldr	r3, [r7, #12]
 801e25a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801e25c:	68fb      	ldr	r3, [r7, #12]
 801e25e:	2200      	movs	r2, #0
 801e260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801e264:	2301      	movs	r3, #1
 801e266:	e0b3      	b.n	801e3d0 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801e268:	88f8      	ldrh	r0, [r7, #6]
 801e26a:	893a      	ldrh	r2, [r7, #8]
 801e26c:	8979      	ldrh	r1, [r7, #10]
 801e26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e270:	9301      	str	r3, [sp, #4]
 801e272:	2323      	movs	r3, #35	; 0x23
 801e274:	9300      	str	r3, [sp, #0]
 801e276:	4603      	mov	r3, r0
 801e278:	68f8      	ldr	r0, [r7, #12]
 801e27a:	f001 fd01 	bl	801fc80 <I2C_RequestMemoryRead>
 801e27e:	4603      	mov	r3, r0
 801e280:	2b00      	cmp	r3, #0
 801e282:	d023      	beq.n	801e2cc <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 801e284:	68fb      	ldr	r3, [r7, #12]
 801e286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e288:	4618      	mov	r0, r3
 801e28a:	f7fe fcc9 	bl	801cc20 <HAL_DMA_Abort_IT>
 801e28e:	4603      	mov	r3, r0
 801e290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 801e294:	68fb      	ldr	r3, [r7, #12]
 801e296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e298:	2200      	movs	r2, #0
 801e29a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e29c:	68fb      	ldr	r3, [r7, #12]
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	681a      	ldr	r2, [r3, #0]
 801e2a2:	68fb      	ldr	r3, [r7, #12]
 801e2a4:	681b      	ldr	r3, [r3, #0]
 801e2a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e2aa:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801e2ac:	68fb      	ldr	r3, [r7, #12]
 801e2ae:	2200      	movs	r2, #0
 801e2b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801e2b2:	68fb      	ldr	r3, [r7, #12]
 801e2b4:	2200      	movs	r2, #0
 801e2b6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801e2b8:	68fb      	ldr	r3, [r7, #12]
 801e2ba:	681b      	ldr	r3, [r3, #0]
 801e2bc:	681a      	ldr	r2, [r3, #0]
 801e2be:	68fb      	ldr	r3, [r7, #12]
 801e2c0:	681b      	ldr	r3, [r3, #0]
 801e2c2:	f022 0201 	bic.w	r2, r2, #1
 801e2c6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801e2c8:	2301      	movs	r3, #1
 801e2ca:	e081      	b.n	801e3d0 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 801e2cc:	68fb      	ldr	r3, [r7, #12]
 801e2ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e2d0:	2b01      	cmp	r3, #1
 801e2d2:	d108      	bne.n	801e2e6 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e2d4:	68fb      	ldr	r3, [r7, #12]
 801e2d6:	681b      	ldr	r3, [r3, #0]
 801e2d8:	681a      	ldr	r2, [r3, #0]
 801e2da:	68fb      	ldr	r3, [r7, #12]
 801e2dc:	681b      	ldr	r3, [r3, #0]
 801e2de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e2e2:	601a      	str	r2, [r3, #0]
 801e2e4:	e007      	b.n	801e2f6 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801e2e6:	68fb      	ldr	r3, [r7, #12]
 801e2e8:	681b      	ldr	r3, [r3, #0]
 801e2ea:	685a      	ldr	r2, [r3, #4]
 801e2ec:	68fb      	ldr	r3, [r7, #12]
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e2f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e2f6:	2300      	movs	r3, #0
 801e2f8:	61bb      	str	r3, [r7, #24]
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	681b      	ldr	r3, [r3, #0]
 801e2fe:	695b      	ldr	r3, [r3, #20]
 801e300:	61bb      	str	r3, [r7, #24]
 801e302:	68fb      	ldr	r3, [r7, #12]
 801e304:	681b      	ldr	r3, [r3, #0]
 801e306:	699b      	ldr	r3, [r3, #24]
 801e308:	61bb      	str	r3, [r7, #24]
 801e30a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e30c:	68fb      	ldr	r3, [r7, #12]
 801e30e:	2200      	movs	r2, #0
 801e310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801e314:	68fb      	ldr	r3, [r7, #12]
 801e316:	681b      	ldr	r3, [r3, #0]
 801e318:	685a      	ldr	r2, [r3, #4]
 801e31a:	68fb      	ldr	r3, [r7, #12]
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e322:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	685a      	ldr	r2, [r3, #4]
 801e32a:	68fb      	ldr	r3, [r7, #12]
 801e32c:	681b      	ldr	r3, [r3, #0]
 801e32e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e332:	605a      	str	r2, [r3, #4]
 801e334:	e049      	b.n	801e3ca <HAL_I2C_Mem_Read_DMA+0x31a>
 801e336:	bf00      	nop
 801e338:	20000020 	.word	0x20000020
 801e33c:	14f8b589 	.word	0x14f8b589
 801e340:	ffff0000 	.word	0xffff0000
 801e344:	0801fe51 	.word	0x0801fe51
 801e348:	0801fffb 	.word	0x0801fffb
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801e34c:	68fb      	ldr	r3, [r7, #12]
 801e34e:	2220      	movs	r2, #32
 801e350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e354:	68fb      	ldr	r3, [r7, #12]
 801e356:	2200      	movs	r2, #0
 801e358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801e35c:	68fb      	ldr	r3, [r7, #12]
 801e35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e360:	f043 0210 	orr.w	r2, r3, #16
 801e364:	68fb      	ldr	r3, [r7, #12]
 801e366:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e368:	68fb      	ldr	r3, [r7, #12]
 801e36a:	2200      	movs	r2, #0
 801e36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801e370:	2301      	movs	r3, #1
 801e372:	e02d      	b.n	801e3d0 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801e374:	88f8      	ldrh	r0, [r7, #6]
 801e376:	893a      	ldrh	r2, [r7, #8]
 801e378:	8979      	ldrh	r1, [r7, #10]
 801e37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e37c:	9301      	str	r3, [sp, #4]
 801e37e:	2323      	movs	r3, #35	; 0x23
 801e380:	9300      	str	r3, [sp, #0]
 801e382:	4603      	mov	r3, r0
 801e384:	68f8      	ldr	r0, [r7, #12]
 801e386:	f001 fc7b 	bl	801fc80 <I2C_RequestMemoryRead>
 801e38a:	4603      	mov	r3, r0
 801e38c:	2b00      	cmp	r3, #0
 801e38e:	d001      	beq.n	801e394 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 801e390:	2301      	movs	r3, #1
 801e392:	e01d      	b.n	801e3d0 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e394:	2300      	movs	r3, #0
 801e396:	617b      	str	r3, [r7, #20]
 801e398:	68fb      	ldr	r3, [r7, #12]
 801e39a:	681b      	ldr	r3, [r3, #0]
 801e39c:	695b      	ldr	r3, [r3, #20]
 801e39e:	617b      	str	r3, [r7, #20]
 801e3a0:	68fb      	ldr	r3, [r7, #12]
 801e3a2:	681b      	ldr	r3, [r3, #0]
 801e3a4:	699b      	ldr	r3, [r3, #24]
 801e3a6:	617b      	str	r3, [r7, #20]
 801e3a8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e3aa:	68fb      	ldr	r3, [r7, #12]
 801e3ac:	681b      	ldr	r3, [r3, #0]
 801e3ae:	681a      	ldr	r2, [r3, #0]
 801e3b0:	68fb      	ldr	r3, [r7, #12]
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e3b8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 801e3ba:	68fb      	ldr	r3, [r7, #12]
 801e3bc:	2220      	movs	r2, #32
 801e3be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801e3c2:	68fb      	ldr	r3, [r7, #12]
 801e3c4:	2200      	movs	r2, #0
 801e3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 801e3ca:	2300      	movs	r3, #0
 801e3cc:	e000      	b.n	801e3d0 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 801e3ce:	2302      	movs	r3, #2
  }
}
 801e3d0:	4618      	mov	r0, r3
 801e3d2:	3728      	adds	r7, #40	; 0x28
 801e3d4:	46bd      	mov	sp, r7
 801e3d6:	bd80      	pop	{r7, pc}

0801e3d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801e3d8:	b580      	push	{r7, lr}
 801e3da:	b088      	sub	sp, #32
 801e3dc:	af00      	add	r7, sp, #0
 801e3de:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 801e3e0:	2300      	movs	r3, #0
 801e3e2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801e3e4:	687b      	ldr	r3, [r7, #4]
 801e3e6:	681b      	ldr	r3, [r3, #0]
 801e3e8:	685b      	ldr	r3, [r3, #4]
 801e3ea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3f0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e3f8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e3fa:	687b      	ldr	r3, [r7, #4]
 801e3fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e400:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801e402:	7bfb      	ldrb	r3, [r7, #15]
 801e404:	2b10      	cmp	r3, #16
 801e406:	d003      	beq.n	801e410 <HAL_I2C_EV_IRQHandler+0x38>
 801e408:	7bfb      	ldrb	r3, [r7, #15]
 801e40a:	2b40      	cmp	r3, #64	; 0x40
 801e40c:	f040 80c1 	bne.w	801e592 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801e410:	687b      	ldr	r3, [r7, #4]
 801e412:	681b      	ldr	r3, [r3, #0]
 801e414:	699b      	ldr	r3, [r3, #24]
 801e416:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	681b      	ldr	r3, [r3, #0]
 801e41c:	695b      	ldr	r3, [r3, #20]
 801e41e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801e420:	69fb      	ldr	r3, [r7, #28]
 801e422:	f003 0301 	and.w	r3, r3, #1
 801e426:	2b00      	cmp	r3, #0
 801e428:	d10d      	bne.n	801e446 <HAL_I2C_EV_IRQHandler+0x6e>
 801e42a:	693b      	ldr	r3, [r7, #16]
 801e42c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801e430:	d003      	beq.n	801e43a <HAL_I2C_EV_IRQHandler+0x62>
 801e432:	693b      	ldr	r3, [r7, #16]
 801e434:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801e438:	d101      	bne.n	801e43e <HAL_I2C_EV_IRQHandler+0x66>
 801e43a:	2301      	movs	r3, #1
 801e43c:	e000      	b.n	801e440 <HAL_I2C_EV_IRQHandler+0x68>
 801e43e:	2300      	movs	r3, #0
 801e440:	2b01      	cmp	r3, #1
 801e442:	f000 8132 	beq.w	801e6aa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e446:	69fb      	ldr	r3, [r7, #28]
 801e448:	f003 0301 	and.w	r3, r3, #1
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d00c      	beq.n	801e46a <HAL_I2C_EV_IRQHandler+0x92>
 801e450:	697b      	ldr	r3, [r7, #20]
 801e452:	0a5b      	lsrs	r3, r3, #9
 801e454:	f003 0301 	and.w	r3, r3, #1
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d006      	beq.n	801e46a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801e45c:	6878      	ldr	r0, [r7, #4]
 801e45e:	f002 f82a 	bl	80204b6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801e462:	6878      	ldr	r0, [r7, #4]
 801e464:	f000 fd5b 	bl	801ef1e <I2C_Master_SB>
 801e468:	e092      	b.n	801e590 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e46a:	69fb      	ldr	r3, [r7, #28]
 801e46c:	08db      	lsrs	r3, r3, #3
 801e46e:	f003 0301 	and.w	r3, r3, #1
 801e472:	2b00      	cmp	r3, #0
 801e474:	d009      	beq.n	801e48a <HAL_I2C_EV_IRQHandler+0xb2>
 801e476:	697b      	ldr	r3, [r7, #20]
 801e478:	0a5b      	lsrs	r3, r3, #9
 801e47a:	f003 0301 	and.w	r3, r3, #1
 801e47e:	2b00      	cmp	r3, #0
 801e480:	d003      	beq.n	801e48a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801e482:	6878      	ldr	r0, [r7, #4]
 801e484:	f000 fdd1 	bl	801f02a <I2C_Master_ADD10>
 801e488:	e082      	b.n	801e590 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e48a:	69fb      	ldr	r3, [r7, #28]
 801e48c:	085b      	lsrs	r3, r3, #1
 801e48e:	f003 0301 	and.w	r3, r3, #1
 801e492:	2b00      	cmp	r3, #0
 801e494:	d009      	beq.n	801e4aa <HAL_I2C_EV_IRQHandler+0xd2>
 801e496:	697b      	ldr	r3, [r7, #20]
 801e498:	0a5b      	lsrs	r3, r3, #9
 801e49a:	f003 0301 	and.w	r3, r3, #1
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	d003      	beq.n	801e4aa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801e4a2:	6878      	ldr	r0, [r7, #4]
 801e4a4:	f000 fdeb 	bl	801f07e <I2C_Master_ADDR>
 801e4a8:	e072      	b.n	801e590 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801e4aa:	69bb      	ldr	r3, [r7, #24]
 801e4ac:	089b      	lsrs	r3, r3, #2
 801e4ae:	f003 0301 	and.w	r3, r3, #1
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	d03b      	beq.n	801e52e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	685b      	ldr	r3, [r3, #4]
 801e4bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e4c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e4c4:	f000 80f3 	beq.w	801e6ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e4c8:	69fb      	ldr	r3, [r7, #28]
 801e4ca:	09db      	lsrs	r3, r3, #7
 801e4cc:	f003 0301 	and.w	r3, r3, #1
 801e4d0:	2b00      	cmp	r3, #0
 801e4d2:	d00f      	beq.n	801e4f4 <HAL_I2C_EV_IRQHandler+0x11c>
 801e4d4:	697b      	ldr	r3, [r7, #20]
 801e4d6:	0a9b      	lsrs	r3, r3, #10
 801e4d8:	f003 0301 	and.w	r3, r3, #1
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	d009      	beq.n	801e4f4 <HAL_I2C_EV_IRQHandler+0x11c>
 801e4e0:	69fb      	ldr	r3, [r7, #28]
 801e4e2:	089b      	lsrs	r3, r3, #2
 801e4e4:	f003 0301 	and.w	r3, r3, #1
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d103      	bne.n	801e4f4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 801e4ec:	6878      	ldr	r0, [r7, #4]
 801e4ee:	f000 f9cb 	bl	801e888 <I2C_MasterTransmit_TXE>
 801e4f2:	e04d      	b.n	801e590 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e4f4:	69fb      	ldr	r3, [r7, #28]
 801e4f6:	089b      	lsrs	r3, r3, #2
 801e4f8:	f003 0301 	and.w	r3, r3, #1
 801e4fc:	2b00      	cmp	r3, #0
 801e4fe:	f000 80d6 	beq.w	801e6ae <HAL_I2C_EV_IRQHandler+0x2d6>
 801e502:	697b      	ldr	r3, [r7, #20]
 801e504:	0a5b      	lsrs	r3, r3, #9
 801e506:	f003 0301 	and.w	r3, r3, #1
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	f000 80cf 	beq.w	801e6ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801e510:	7bbb      	ldrb	r3, [r7, #14]
 801e512:	2b21      	cmp	r3, #33	; 0x21
 801e514:	d103      	bne.n	801e51e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801e516:	6878      	ldr	r0, [r7, #4]
 801e518:	f000 fa52 	bl	801e9c0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e51c:	e0c7      	b.n	801e6ae <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 801e51e:	7bfb      	ldrb	r3, [r7, #15]
 801e520:	2b40      	cmp	r3, #64	; 0x40
 801e522:	f040 80c4 	bne.w	801e6ae <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 801e526:	6878      	ldr	r0, [r7, #4]
 801e528:	f000 fac0 	bl	801eaac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e52c:	e0bf      	b.n	801e6ae <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	681b      	ldr	r3, [r3, #0]
 801e532:	685b      	ldr	r3, [r3, #4]
 801e534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e53c:	f000 80b7 	beq.w	801e6ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e540:	69fb      	ldr	r3, [r7, #28]
 801e542:	099b      	lsrs	r3, r3, #6
 801e544:	f003 0301 	and.w	r3, r3, #1
 801e548:	2b00      	cmp	r3, #0
 801e54a:	d00f      	beq.n	801e56c <HAL_I2C_EV_IRQHandler+0x194>
 801e54c:	697b      	ldr	r3, [r7, #20]
 801e54e:	0a9b      	lsrs	r3, r3, #10
 801e550:	f003 0301 	and.w	r3, r3, #1
 801e554:	2b00      	cmp	r3, #0
 801e556:	d009      	beq.n	801e56c <HAL_I2C_EV_IRQHandler+0x194>
 801e558:	69fb      	ldr	r3, [r7, #28]
 801e55a:	089b      	lsrs	r3, r3, #2
 801e55c:	f003 0301 	and.w	r3, r3, #1
 801e560:	2b00      	cmp	r3, #0
 801e562:	d103      	bne.n	801e56c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 801e564:	6878      	ldr	r0, [r7, #4]
 801e566:	f000 fb35 	bl	801ebd4 <I2C_MasterReceive_RXNE>
 801e56a:	e011      	b.n	801e590 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e56c:	69fb      	ldr	r3, [r7, #28]
 801e56e:	089b      	lsrs	r3, r3, #2
 801e570:	f003 0301 	and.w	r3, r3, #1
 801e574:	2b00      	cmp	r3, #0
 801e576:	f000 809a 	beq.w	801e6ae <HAL_I2C_EV_IRQHandler+0x2d6>
 801e57a:	697b      	ldr	r3, [r7, #20]
 801e57c:	0a5b      	lsrs	r3, r3, #9
 801e57e:	f003 0301 	and.w	r3, r3, #1
 801e582:	2b00      	cmp	r3, #0
 801e584:	f000 8093 	beq.w	801e6ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 801e588:	6878      	ldr	r0, [r7, #4]
 801e58a:	f000 fbde 	bl	801ed4a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e58e:	e08e      	b.n	801e6ae <HAL_I2C_EV_IRQHandler+0x2d6>
 801e590:	e08d      	b.n	801e6ae <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e596:	2b00      	cmp	r3, #0
 801e598:	d004      	beq.n	801e5a4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	695b      	ldr	r3, [r3, #20]
 801e5a0:	61fb      	str	r3, [r7, #28]
 801e5a2:	e007      	b.n	801e5b4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	699b      	ldr	r3, [r3, #24]
 801e5aa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	681b      	ldr	r3, [r3, #0]
 801e5b0:	695b      	ldr	r3, [r3, #20]
 801e5b2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e5b4:	69fb      	ldr	r3, [r7, #28]
 801e5b6:	085b      	lsrs	r3, r3, #1
 801e5b8:	f003 0301 	and.w	r3, r3, #1
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	d012      	beq.n	801e5e6 <HAL_I2C_EV_IRQHandler+0x20e>
 801e5c0:	697b      	ldr	r3, [r7, #20]
 801e5c2:	0a5b      	lsrs	r3, r3, #9
 801e5c4:	f003 0301 	and.w	r3, r3, #1
 801e5c8:	2b00      	cmp	r3, #0
 801e5ca:	d00c      	beq.n	801e5e6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801e5cc:	687b      	ldr	r3, [r7, #4]
 801e5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e5d0:	2b00      	cmp	r3, #0
 801e5d2:	d003      	beq.n	801e5dc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	681b      	ldr	r3, [r3, #0]
 801e5d8:	699b      	ldr	r3, [r3, #24]
 801e5da:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 801e5dc:	69b9      	ldr	r1, [r7, #24]
 801e5de:	6878      	ldr	r0, [r7, #4]
 801e5e0:	f000 ff9c 	bl	801f51c <I2C_Slave_ADDR>
 801e5e4:	e066      	b.n	801e6b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e5e6:	69fb      	ldr	r3, [r7, #28]
 801e5e8:	091b      	lsrs	r3, r3, #4
 801e5ea:	f003 0301 	and.w	r3, r3, #1
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d009      	beq.n	801e606 <HAL_I2C_EV_IRQHandler+0x22e>
 801e5f2:	697b      	ldr	r3, [r7, #20]
 801e5f4:	0a5b      	lsrs	r3, r3, #9
 801e5f6:	f003 0301 	and.w	r3, r3, #1
 801e5fa:	2b00      	cmp	r3, #0
 801e5fc:	d003      	beq.n	801e606 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 801e5fe:	6878      	ldr	r0, [r7, #4]
 801e600:	f000 ffd6 	bl	801f5b0 <I2C_Slave_STOPF>
 801e604:	e056      	b.n	801e6b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801e606:	7bbb      	ldrb	r3, [r7, #14]
 801e608:	2b21      	cmp	r3, #33	; 0x21
 801e60a:	d002      	beq.n	801e612 <HAL_I2C_EV_IRQHandler+0x23a>
 801e60c:	7bbb      	ldrb	r3, [r7, #14]
 801e60e:	2b29      	cmp	r3, #41	; 0x29
 801e610:	d125      	bne.n	801e65e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e612:	69fb      	ldr	r3, [r7, #28]
 801e614:	09db      	lsrs	r3, r3, #7
 801e616:	f003 0301 	and.w	r3, r3, #1
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	d00f      	beq.n	801e63e <HAL_I2C_EV_IRQHandler+0x266>
 801e61e:	697b      	ldr	r3, [r7, #20]
 801e620:	0a9b      	lsrs	r3, r3, #10
 801e622:	f003 0301 	and.w	r3, r3, #1
 801e626:	2b00      	cmp	r3, #0
 801e628:	d009      	beq.n	801e63e <HAL_I2C_EV_IRQHandler+0x266>
 801e62a:	69fb      	ldr	r3, [r7, #28]
 801e62c:	089b      	lsrs	r3, r3, #2
 801e62e:	f003 0301 	and.w	r3, r3, #1
 801e632:	2b00      	cmp	r3, #0
 801e634:	d103      	bne.n	801e63e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801e636:	6878      	ldr	r0, [r7, #4]
 801e638:	f000 feb2 	bl	801f3a0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e63c:	e039      	b.n	801e6b2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e63e:	69fb      	ldr	r3, [r7, #28]
 801e640:	089b      	lsrs	r3, r3, #2
 801e642:	f003 0301 	and.w	r3, r3, #1
 801e646:	2b00      	cmp	r3, #0
 801e648:	d033      	beq.n	801e6b2 <HAL_I2C_EV_IRQHandler+0x2da>
 801e64a:	697b      	ldr	r3, [r7, #20]
 801e64c:	0a5b      	lsrs	r3, r3, #9
 801e64e:	f003 0301 	and.w	r3, r3, #1
 801e652:	2b00      	cmp	r3, #0
 801e654:	d02d      	beq.n	801e6b2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801e656:	6878      	ldr	r0, [r7, #4]
 801e658:	f000 fedf 	bl	801f41a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e65c:	e029      	b.n	801e6b2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e65e:	69fb      	ldr	r3, [r7, #28]
 801e660:	099b      	lsrs	r3, r3, #6
 801e662:	f003 0301 	and.w	r3, r3, #1
 801e666:	2b00      	cmp	r3, #0
 801e668:	d00f      	beq.n	801e68a <HAL_I2C_EV_IRQHandler+0x2b2>
 801e66a:	697b      	ldr	r3, [r7, #20]
 801e66c:	0a9b      	lsrs	r3, r3, #10
 801e66e:	f003 0301 	and.w	r3, r3, #1
 801e672:	2b00      	cmp	r3, #0
 801e674:	d009      	beq.n	801e68a <HAL_I2C_EV_IRQHandler+0x2b2>
 801e676:	69fb      	ldr	r3, [r7, #28]
 801e678:	089b      	lsrs	r3, r3, #2
 801e67a:	f003 0301 	and.w	r3, r3, #1
 801e67e:	2b00      	cmp	r3, #0
 801e680:	d103      	bne.n	801e68a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801e682:	6878      	ldr	r0, [r7, #4]
 801e684:	f000 feea 	bl	801f45c <I2C_SlaveReceive_RXNE>
 801e688:	e014      	b.n	801e6b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e68a:	69fb      	ldr	r3, [r7, #28]
 801e68c:	089b      	lsrs	r3, r3, #2
 801e68e:	f003 0301 	and.w	r3, r3, #1
 801e692:	2b00      	cmp	r3, #0
 801e694:	d00e      	beq.n	801e6b4 <HAL_I2C_EV_IRQHandler+0x2dc>
 801e696:	697b      	ldr	r3, [r7, #20]
 801e698:	0a5b      	lsrs	r3, r3, #9
 801e69a:	f003 0301 	and.w	r3, r3, #1
 801e69e:	2b00      	cmp	r3, #0
 801e6a0:	d008      	beq.n	801e6b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801e6a2:	6878      	ldr	r0, [r7, #4]
 801e6a4:	f000 ff18 	bl	801f4d8 <I2C_SlaveReceive_BTF>
 801e6a8:	e004      	b.n	801e6b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 801e6aa:	bf00      	nop
 801e6ac:	e002      	b.n	801e6b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e6ae:	bf00      	nop
 801e6b0:	e000      	b.n	801e6b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e6b2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801e6b4:	3720      	adds	r7, #32
 801e6b6:	46bd      	mov	sp, r7
 801e6b8:	bd80      	pop	{r7, pc}

0801e6ba <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801e6ba:	b580      	push	{r7, lr}
 801e6bc:	b08a      	sub	sp, #40	; 0x28
 801e6be:	af00      	add	r7, sp, #0
 801e6c0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	681b      	ldr	r3, [r3, #0]
 801e6c6:	695b      	ldr	r3, [r3, #20]
 801e6c8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 801e6ca:	687b      	ldr	r3, [r7, #4]
 801e6cc:	681b      	ldr	r3, [r3, #0]
 801e6ce:	685b      	ldr	r3, [r3, #4]
 801e6d0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801e6d2:	2300      	movs	r3, #0
 801e6d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e6d6:	687b      	ldr	r3, [r7, #4]
 801e6d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e6dc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e6de:	6a3b      	ldr	r3, [r7, #32]
 801e6e0:	0a1b      	lsrs	r3, r3, #8
 801e6e2:	f003 0301 	and.w	r3, r3, #1
 801e6e6:	2b00      	cmp	r3, #0
 801e6e8:	d00e      	beq.n	801e708 <HAL_I2C_ER_IRQHandler+0x4e>
 801e6ea:	69fb      	ldr	r3, [r7, #28]
 801e6ec:	0a1b      	lsrs	r3, r3, #8
 801e6ee:	f003 0301 	and.w	r3, r3, #1
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	d008      	beq.n	801e708 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801e6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6f8:	f043 0301 	orr.w	r3, r3, #1
 801e6fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801e6fe:	687b      	ldr	r3, [r7, #4]
 801e700:	681b      	ldr	r3, [r3, #0]
 801e702:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801e706:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e708:	6a3b      	ldr	r3, [r7, #32]
 801e70a:	0a5b      	lsrs	r3, r3, #9
 801e70c:	f003 0301 	and.w	r3, r3, #1
 801e710:	2b00      	cmp	r3, #0
 801e712:	d00e      	beq.n	801e732 <HAL_I2C_ER_IRQHandler+0x78>
 801e714:	69fb      	ldr	r3, [r7, #28]
 801e716:	0a1b      	lsrs	r3, r3, #8
 801e718:	f003 0301 	and.w	r3, r3, #1
 801e71c:	2b00      	cmp	r3, #0
 801e71e:	d008      	beq.n	801e732 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 801e720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e722:	f043 0302 	orr.w	r3, r3, #2
 801e726:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801e728:	687b      	ldr	r3, [r7, #4]
 801e72a:	681b      	ldr	r3, [r3, #0]
 801e72c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 801e730:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e732:	6a3b      	ldr	r3, [r7, #32]
 801e734:	0a9b      	lsrs	r3, r3, #10
 801e736:	f003 0301 	and.w	r3, r3, #1
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	d03f      	beq.n	801e7be <HAL_I2C_ER_IRQHandler+0x104>
 801e73e:	69fb      	ldr	r3, [r7, #28]
 801e740:	0a1b      	lsrs	r3, r3, #8
 801e742:	f003 0301 	and.w	r3, r3, #1
 801e746:	2b00      	cmp	r3, #0
 801e748:	d039      	beq.n	801e7be <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801e74a:	7efb      	ldrb	r3, [r7, #27]
 801e74c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e752:	b29b      	uxth	r3, r3
 801e754:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e75c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801e75e:	687b      	ldr	r3, [r7, #4]
 801e760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e762:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801e764:	7ebb      	ldrb	r3, [r7, #26]
 801e766:	2b20      	cmp	r3, #32
 801e768:	d112      	bne.n	801e790 <HAL_I2C_ER_IRQHandler+0xd6>
 801e76a:	697b      	ldr	r3, [r7, #20]
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d10f      	bne.n	801e790 <HAL_I2C_ER_IRQHandler+0xd6>
 801e770:	7cfb      	ldrb	r3, [r7, #19]
 801e772:	2b21      	cmp	r3, #33	; 0x21
 801e774:	d008      	beq.n	801e788 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801e776:	7cfb      	ldrb	r3, [r7, #19]
 801e778:	2b29      	cmp	r3, #41	; 0x29
 801e77a:	d005      	beq.n	801e788 <HAL_I2C_ER_IRQHandler+0xce>
 801e77c:	7cfb      	ldrb	r3, [r7, #19]
 801e77e:	2b28      	cmp	r3, #40	; 0x28
 801e780:	d106      	bne.n	801e790 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801e782:	68fb      	ldr	r3, [r7, #12]
 801e784:	2b21      	cmp	r3, #33	; 0x21
 801e786:	d103      	bne.n	801e790 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 801e788:	6878      	ldr	r0, [r7, #4]
 801e78a:	f001 f841 	bl	801f810 <I2C_Slave_AF>
 801e78e:	e016      	b.n	801e7be <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801e790:	687b      	ldr	r3, [r7, #4]
 801e792:	681b      	ldr	r3, [r3, #0]
 801e794:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801e798:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801e79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e79c:	f043 0304 	orr.w	r3, r3, #4
 801e7a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801e7a2:	7efb      	ldrb	r3, [r7, #27]
 801e7a4:	2b10      	cmp	r3, #16
 801e7a6:	d002      	beq.n	801e7ae <HAL_I2C_ER_IRQHandler+0xf4>
 801e7a8:	7efb      	ldrb	r3, [r7, #27]
 801e7aa:	2b40      	cmp	r3, #64	; 0x40
 801e7ac:	d107      	bne.n	801e7be <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	681b      	ldr	r3, [r3, #0]
 801e7b2:	681a      	ldr	r2, [r3, #0]
 801e7b4:	687b      	ldr	r3, [r7, #4]
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e7bc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e7be:	6a3b      	ldr	r3, [r7, #32]
 801e7c0:	0adb      	lsrs	r3, r3, #11
 801e7c2:	f003 0301 	and.w	r3, r3, #1
 801e7c6:	2b00      	cmp	r3, #0
 801e7c8:	d00e      	beq.n	801e7e8 <HAL_I2C_ER_IRQHandler+0x12e>
 801e7ca:	69fb      	ldr	r3, [r7, #28]
 801e7cc:	0a1b      	lsrs	r3, r3, #8
 801e7ce:	f003 0301 	and.w	r3, r3, #1
 801e7d2:	2b00      	cmp	r3, #0
 801e7d4:	d008      	beq.n	801e7e8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801e7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7d8:	f043 0308 	orr.w	r3, r3, #8
 801e7dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801e7de:	687b      	ldr	r3, [r7, #4]
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 801e7e6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 801e7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7ea:	2b00      	cmp	r3, #0
 801e7ec:	d008      	beq.n	801e800 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 801e7ee:	687b      	ldr	r3, [r7, #4]
 801e7f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7f4:	431a      	orrs	r2, r3
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801e7fa:	6878      	ldr	r0, [r7, #4]
 801e7fc:	f001 f878 	bl	801f8f0 <I2C_ITError>
  }
}
 801e800:	bf00      	nop
 801e802:	3728      	adds	r7, #40	; 0x28
 801e804:	46bd      	mov	sp, r7
 801e806:	bd80      	pop	{r7, pc}

0801e808 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e808:	b480      	push	{r7}
 801e80a:	b083      	sub	sp, #12
 801e80c:	af00      	add	r7, sp, #0
 801e80e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801e810:	bf00      	nop
 801e812:	370c      	adds	r7, #12
 801e814:	46bd      	mov	sp, r7
 801e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e81a:	4770      	bx	lr

0801e81c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e81c:	b480      	push	{r7}
 801e81e:	b083      	sub	sp, #12
 801e820:	af00      	add	r7, sp, #0
 801e822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801e824:	bf00      	nop
 801e826:	370c      	adds	r7, #12
 801e828:	46bd      	mov	sp, r7
 801e82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e82e:	4770      	bx	lr

0801e830 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801e830:	b480      	push	{r7}
 801e832:	b083      	sub	sp, #12
 801e834:	af00      	add	r7, sp, #0
 801e836:	6078      	str	r0, [r7, #4]
 801e838:	460b      	mov	r3, r1
 801e83a:	70fb      	strb	r3, [r7, #3]
 801e83c:	4613      	mov	r3, r2
 801e83e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801e840:	bf00      	nop
 801e842:	370c      	adds	r7, #12
 801e844:	46bd      	mov	sp, r7
 801e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e84a:	4770      	bx	lr

0801e84c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e84c:	b480      	push	{r7}
 801e84e:	b083      	sub	sp, #12
 801e850:	af00      	add	r7, sp, #0
 801e852:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801e854:	bf00      	nop
 801e856:	370c      	adds	r7, #12
 801e858:	46bd      	mov	sp, r7
 801e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e85e:	4770      	bx	lr

0801e860 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801e860:	b480      	push	{r7}
 801e862:	b083      	sub	sp, #12
 801e864:	af00      	add	r7, sp, #0
 801e866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801e868:	bf00      	nop
 801e86a:	370c      	adds	r7, #12
 801e86c:	46bd      	mov	sp, r7
 801e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e872:	4770      	bx	lr

0801e874 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e874:	b480      	push	{r7}
 801e876:	b083      	sub	sp, #12
 801e878:	af00      	add	r7, sp, #0
 801e87a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801e87c:	bf00      	nop
 801e87e:	370c      	adds	r7, #12
 801e880:	46bd      	mov	sp, r7
 801e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e886:	4770      	bx	lr

0801e888 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801e888:	b580      	push	{r7, lr}
 801e88a:	b084      	sub	sp, #16
 801e88c:	af00      	add	r7, sp, #0
 801e88e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e896:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e898:	687b      	ldr	r3, [r7, #4]
 801e89a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e89e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801e8a0:	687b      	ldr	r3, [r7, #4]
 801e8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e8a4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801e8a6:	687b      	ldr	r3, [r7, #4]
 801e8a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e8aa:	2b00      	cmp	r3, #0
 801e8ac:	d150      	bne.n	801e950 <I2C_MasterTransmit_TXE+0xc8>
 801e8ae:	7bfb      	ldrb	r3, [r7, #15]
 801e8b0:	2b21      	cmp	r3, #33	; 0x21
 801e8b2:	d14d      	bne.n	801e950 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e8b4:	68bb      	ldr	r3, [r7, #8]
 801e8b6:	2b08      	cmp	r3, #8
 801e8b8:	d01d      	beq.n	801e8f6 <I2C_MasterTransmit_TXE+0x6e>
 801e8ba:	68bb      	ldr	r3, [r7, #8]
 801e8bc:	2b20      	cmp	r3, #32
 801e8be:	d01a      	beq.n	801e8f6 <I2C_MasterTransmit_TXE+0x6e>
 801e8c0:	68bb      	ldr	r3, [r7, #8]
 801e8c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801e8c6:	d016      	beq.n	801e8f6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e8c8:	687b      	ldr	r3, [r7, #4]
 801e8ca:	681b      	ldr	r3, [r3, #0]
 801e8cc:	685a      	ldr	r2, [r3, #4]
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	681b      	ldr	r3, [r3, #0]
 801e8d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e8d6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801e8d8:	687b      	ldr	r3, [r7, #4]
 801e8da:	2211      	movs	r2, #17
 801e8dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e8de:	687b      	ldr	r3, [r7, #4]
 801e8e0:	2200      	movs	r2, #0
 801e8e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801e8e6:	687b      	ldr	r3, [r7, #4]
 801e8e8:	2220      	movs	r2, #32
 801e8ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801e8ee:	6878      	ldr	r0, [r7, #4]
 801e8f0:	f7e3 f8e6 	bl	8001ac0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e8f4:	e060      	b.n	801e9b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e8f6:	687b      	ldr	r3, [r7, #4]
 801e8f8:	681b      	ldr	r3, [r3, #0]
 801e8fa:	685a      	ldr	r2, [r3, #4]
 801e8fc:	687b      	ldr	r3, [r7, #4]
 801e8fe:	681b      	ldr	r3, [r3, #0]
 801e900:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e904:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e906:	687b      	ldr	r3, [r7, #4]
 801e908:	681b      	ldr	r3, [r3, #0]
 801e90a:	681a      	ldr	r2, [r3, #0]
 801e90c:	687b      	ldr	r3, [r7, #4]
 801e90e:	681b      	ldr	r3, [r3, #0]
 801e910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e914:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801e916:	687b      	ldr	r3, [r7, #4]
 801e918:	2200      	movs	r2, #0
 801e91a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	2220      	movs	r2, #32
 801e920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e92a:	b2db      	uxtb	r3, r3
 801e92c:	2b40      	cmp	r3, #64	; 0x40
 801e92e:	d107      	bne.n	801e940 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	2200      	movs	r2, #0
 801e934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 801e938:	6878      	ldr	r0, [r7, #4]
 801e93a:	f7e3 f8ab 	bl	8001a94 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e93e:	e03b      	b.n	801e9b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	2200      	movs	r2, #0
 801e944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801e948:	6878      	ldr	r0, [r7, #4]
 801e94a:	f7e3 f8b9 	bl	8001ac0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e94e:	e033      	b.n	801e9b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801e950:	7bfb      	ldrb	r3, [r7, #15]
 801e952:	2b21      	cmp	r3, #33	; 0x21
 801e954:	d005      	beq.n	801e962 <I2C_MasterTransmit_TXE+0xda>
 801e956:	7bbb      	ldrb	r3, [r7, #14]
 801e958:	2b40      	cmp	r3, #64	; 0x40
 801e95a:	d12d      	bne.n	801e9b8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 801e95c:	7bfb      	ldrb	r3, [r7, #15]
 801e95e:	2b22      	cmp	r3, #34	; 0x22
 801e960:	d12a      	bne.n	801e9b8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801e962:	687b      	ldr	r3, [r7, #4]
 801e964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e966:	b29b      	uxth	r3, r3
 801e968:	2b00      	cmp	r3, #0
 801e96a:	d108      	bne.n	801e97e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e96c:	687b      	ldr	r3, [r7, #4]
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	685a      	ldr	r2, [r3, #4]
 801e972:	687b      	ldr	r3, [r7, #4]
 801e974:	681b      	ldr	r3, [r3, #0]
 801e976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e97a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801e97c:	e01c      	b.n	801e9b8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e97e:	687b      	ldr	r3, [r7, #4]
 801e980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e984:	b2db      	uxtb	r3, r3
 801e986:	2b40      	cmp	r3, #64	; 0x40
 801e988:	d103      	bne.n	801e992 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801e98a:	6878      	ldr	r0, [r7, #4]
 801e98c:	f000 f88e 	bl	801eaac <I2C_MemoryTransmit_TXE_BTF>
}
 801e990:	e012      	b.n	801e9b8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801e992:	687b      	ldr	r3, [r7, #4]
 801e994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e996:	781a      	ldrb	r2, [r3, #0]
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	681b      	ldr	r3, [r3, #0]
 801e99c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801e99e:	687b      	ldr	r3, [r7, #4]
 801e9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9a2:	1c5a      	adds	r2, r3, #1
 801e9a4:	687b      	ldr	r3, [r7, #4]
 801e9a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e9ac:	b29b      	uxth	r3, r3
 801e9ae:	3b01      	subs	r3, #1
 801e9b0:	b29a      	uxth	r2, r3
 801e9b2:	687b      	ldr	r3, [r7, #4]
 801e9b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801e9b6:	e7ff      	b.n	801e9b8 <I2C_MasterTransmit_TXE+0x130>
 801e9b8:	bf00      	nop
 801e9ba:	3710      	adds	r7, #16
 801e9bc:	46bd      	mov	sp, r7
 801e9be:	bd80      	pop	{r7, pc}

0801e9c0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801e9c0:	b580      	push	{r7, lr}
 801e9c2:	b084      	sub	sp, #16
 801e9c4:	af00      	add	r7, sp, #0
 801e9c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801e9c8:	687b      	ldr	r3, [r7, #4]
 801e9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e9cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801e9ce:	687b      	ldr	r3, [r7, #4]
 801e9d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e9d4:	b2db      	uxtb	r3, r3
 801e9d6:	2b21      	cmp	r3, #33	; 0x21
 801e9d8:	d164      	bne.n	801eaa4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e9de:	b29b      	uxth	r3, r3
 801e9e0:	2b00      	cmp	r3, #0
 801e9e2:	d012      	beq.n	801ea0a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801e9e4:	687b      	ldr	r3, [r7, #4]
 801e9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9e8:	781a      	ldrb	r2, [r3, #0]
 801e9ea:	687b      	ldr	r3, [r7, #4]
 801e9ec:	681b      	ldr	r3, [r3, #0]
 801e9ee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e9f0:	687b      	ldr	r3, [r7, #4]
 801e9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9f4:	1c5a      	adds	r2, r3, #1
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e9fe:	b29b      	uxth	r3, r3
 801ea00:	3b01      	subs	r3, #1
 801ea02:	b29a      	uxth	r2, r3
 801ea04:	687b      	ldr	r3, [r7, #4]
 801ea06:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801ea08:	e04c      	b.n	801eaa4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801ea0a:	68fb      	ldr	r3, [r7, #12]
 801ea0c:	2b08      	cmp	r3, #8
 801ea0e:	d01d      	beq.n	801ea4c <I2C_MasterTransmit_BTF+0x8c>
 801ea10:	68fb      	ldr	r3, [r7, #12]
 801ea12:	2b20      	cmp	r3, #32
 801ea14:	d01a      	beq.n	801ea4c <I2C_MasterTransmit_BTF+0x8c>
 801ea16:	68fb      	ldr	r3, [r7, #12]
 801ea18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801ea1c:	d016      	beq.n	801ea4c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ea1e:	687b      	ldr	r3, [r7, #4]
 801ea20:	681b      	ldr	r3, [r3, #0]
 801ea22:	685a      	ldr	r2, [r3, #4]
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	681b      	ldr	r3, [r3, #0]
 801ea28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ea2c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801ea2e:	687b      	ldr	r3, [r7, #4]
 801ea30:	2211      	movs	r2, #17
 801ea32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ea34:	687b      	ldr	r3, [r7, #4]
 801ea36:	2200      	movs	r2, #0
 801ea38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	2220      	movs	r2, #32
 801ea40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801ea44:	6878      	ldr	r0, [r7, #4]
 801ea46:	f7e3 f83b 	bl	8001ac0 <HAL_I2C_MasterTxCpltCallback>
}
 801ea4a:	e02b      	b.n	801eaa4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ea4c:	687b      	ldr	r3, [r7, #4]
 801ea4e:	681b      	ldr	r3, [r3, #0]
 801ea50:	685a      	ldr	r2, [r3, #4]
 801ea52:	687b      	ldr	r3, [r7, #4]
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ea5a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ea5c:	687b      	ldr	r3, [r7, #4]
 801ea5e:	681b      	ldr	r3, [r3, #0]
 801ea60:	681a      	ldr	r2, [r3, #0]
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	681b      	ldr	r3, [r3, #0]
 801ea66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ea6a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	2200      	movs	r2, #0
 801ea70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	2220      	movs	r2, #32
 801ea76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ea80:	b2db      	uxtb	r3, r3
 801ea82:	2b40      	cmp	r3, #64	; 0x40
 801ea84:	d107      	bne.n	801ea96 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801ea86:	687b      	ldr	r3, [r7, #4]
 801ea88:	2200      	movs	r2, #0
 801ea8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801ea8e:	6878      	ldr	r0, [r7, #4]
 801ea90:	f7e3 f800 	bl	8001a94 <HAL_I2C_MemTxCpltCallback>
}
 801ea94:	e006      	b.n	801eaa4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	2200      	movs	r2, #0
 801ea9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801ea9e:	6878      	ldr	r0, [r7, #4]
 801eaa0:	f7e3 f80e 	bl	8001ac0 <HAL_I2C_MasterTxCpltCallback>
}
 801eaa4:	bf00      	nop
 801eaa6:	3710      	adds	r7, #16
 801eaa8:	46bd      	mov	sp, r7
 801eaaa:	bd80      	pop	{r7, pc}

0801eaac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 801eaac:	b580      	push	{r7, lr}
 801eaae:	b084      	sub	sp, #16
 801eab0:	af00      	add	r7, sp, #0
 801eab2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801eab4:	687b      	ldr	r3, [r7, #4]
 801eab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801eaba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	d11d      	bne.n	801eb00 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801eac8:	2b01      	cmp	r3, #1
 801eaca:	d10b      	bne.n	801eae4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ead0:	b2da      	uxtb	r2, r3
 801ead2:	687b      	ldr	r3, [r7, #4]
 801ead4:	681b      	ldr	r3, [r3, #0]
 801ead6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eadc:	1c9a      	adds	r2, r3, #2
 801eade:	687b      	ldr	r3, [r7, #4]
 801eae0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801eae2:	e073      	b.n	801ebcc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 801eae4:	687b      	ldr	r3, [r7, #4]
 801eae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801eae8:	b29b      	uxth	r3, r3
 801eaea:	121b      	asrs	r3, r3, #8
 801eaec:	b2da      	uxtb	r2, r3
 801eaee:	687b      	ldr	r3, [r7, #4]
 801eaf0:	681b      	ldr	r3, [r3, #0]
 801eaf2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 801eaf4:	687b      	ldr	r3, [r7, #4]
 801eaf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eaf8:	1c5a      	adds	r2, r3, #1
 801eafa:	687b      	ldr	r3, [r7, #4]
 801eafc:	651a      	str	r2, [r3, #80]	; 0x50
}
 801eafe:	e065      	b.n	801ebcc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eb04:	2b01      	cmp	r3, #1
 801eb06:	d10b      	bne.n	801eb20 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801eb0c:	b2da      	uxtb	r2, r3
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eb18:	1c5a      	adds	r2, r3, #1
 801eb1a:	687b      	ldr	r3, [r7, #4]
 801eb1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801eb1e:	e055      	b.n	801ebcc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 801eb20:	687b      	ldr	r3, [r7, #4]
 801eb22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eb24:	2b02      	cmp	r3, #2
 801eb26:	d151      	bne.n	801ebcc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 801eb28:	7bfb      	ldrb	r3, [r7, #15]
 801eb2a:	2b22      	cmp	r3, #34	; 0x22
 801eb2c:	d10d      	bne.n	801eb4a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801eb2e:	687b      	ldr	r3, [r7, #4]
 801eb30:	681b      	ldr	r3, [r3, #0]
 801eb32:	681a      	ldr	r2, [r3, #0]
 801eb34:	687b      	ldr	r3, [r7, #4]
 801eb36:	681b      	ldr	r3, [r3, #0]
 801eb38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801eb3c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801eb3e:	687b      	ldr	r3, [r7, #4]
 801eb40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eb42:	1c5a      	adds	r2, r3, #1
 801eb44:	687b      	ldr	r3, [r7, #4]
 801eb46:	651a      	str	r2, [r3, #80]	; 0x50
}
 801eb48:	e040      	b.n	801ebcc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801eb4a:	687b      	ldr	r3, [r7, #4]
 801eb4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb4e:	b29b      	uxth	r3, r3
 801eb50:	2b00      	cmp	r3, #0
 801eb52:	d015      	beq.n	801eb80 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 801eb54:	7bfb      	ldrb	r3, [r7, #15]
 801eb56:	2b21      	cmp	r3, #33	; 0x21
 801eb58:	d112      	bne.n	801eb80 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb5e:	781a      	ldrb	r2, [r3, #0]
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	681b      	ldr	r3, [r3, #0]
 801eb64:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801eb66:	687b      	ldr	r3, [r7, #4]
 801eb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb6a:	1c5a      	adds	r2, r3, #1
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801eb70:	687b      	ldr	r3, [r7, #4]
 801eb72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb74:	b29b      	uxth	r3, r3
 801eb76:	3b01      	subs	r3, #1
 801eb78:	b29a      	uxth	r2, r3
 801eb7a:	687b      	ldr	r3, [r7, #4]
 801eb7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801eb7e:	e025      	b.n	801ebcc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801eb80:	687b      	ldr	r3, [r7, #4]
 801eb82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb84:	b29b      	uxth	r3, r3
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	d120      	bne.n	801ebcc <I2C_MemoryTransmit_TXE_BTF+0x120>
 801eb8a:	7bfb      	ldrb	r3, [r7, #15]
 801eb8c:	2b21      	cmp	r3, #33	; 0x21
 801eb8e:	d11d      	bne.n	801ebcc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	681b      	ldr	r3, [r3, #0]
 801eb94:	685a      	ldr	r2, [r3, #4]
 801eb96:	687b      	ldr	r3, [r7, #4]
 801eb98:	681b      	ldr	r3, [r3, #0]
 801eb9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801eb9e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	681b      	ldr	r3, [r3, #0]
 801eba4:	681a      	ldr	r2, [r3, #0]
 801eba6:	687b      	ldr	r3, [r7, #4]
 801eba8:	681b      	ldr	r3, [r3, #0]
 801ebaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ebae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	2200      	movs	r2, #0
 801ebb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801ebb6:	687b      	ldr	r3, [r7, #4]
 801ebb8:	2220      	movs	r2, #32
 801ebba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801ebbe:	687b      	ldr	r3, [r7, #4]
 801ebc0:	2200      	movs	r2, #0
 801ebc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 801ebc6:	6878      	ldr	r0, [r7, #4]
 801ebc8:	f7e2 ff64 	bl	8001a94 <HAL_I2C_MemTxCpltCallback>
}
 801ebcc:	bf00      	nop
 801ebce:	3710      	adds	r7, #16
 801ebd0:	46bd      	mov	sp, r7
 801ebd2:	bd80      	pop	{r7, pc}

0801ebd4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801ebd4:	b580      	push	{r7, lr}
 801ebd6:	b084      	sub	sp, #16
 801ebd8:	af00      	add	r7, sp, #0
 801ebda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ebe2:	b2db      	uxtb	r3, r3
 801ebe4:	2b22      	cmp	r3, #34	; 0x22
 801ebe6:	f040 80ac 	bne.w	801ed42 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801ebea:	687b      	ldr	r3, [r7, #4]
 801ebec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ebee:	b29b      	uxth	r3, r3
 801ebf0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801ebf2:	68fb      	ldr	r3, [r7, #12]
 801ebf4:	2b03      	cmp	r3, #3
 801ebf6:	d921      	bls.n	801ec3c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	681b      	ldr	r3, [r3, #0]
 801ebfc:	691a      	ldr	r2, [r3, #16]
 801ebfe:	687b      	ldr	r3, [r7, #4]
 801ec00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec02:	b2d2      	uxtb	r2, r2
 801ec04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801ec06:	687b      	ldr	r3, [r7, #4]
 801ec08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec0a:	1c5a      	adds	r2, r3, #1
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801ec10:	687b      	ldr	r3, [r7, #4]
 801ec12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ec14:	b29b      	uxth	r3, r3
 801ec16:	3b01      	subs	r3, #1
 801ec18:	b29a      	uxth	r2, r3
 801ec1a:	687b      	ldr	r3, [r7, #4]
 801ec1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801ec1e:	687b      	ldr	r3, [r7, #4]
 801ec20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ec22:	b29b      	uxth	r3, r3
 801ec24:	2b03      	cmp	r3, #3
 801ec26:	f040 808c 	bne.w	801ed42 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801ec2a:	687b      	ldr	r3, [r7, #4]
 801ec2c:	681b      	ldr	r3, [r3, #0]
 801ec2e:	685a      	ldr	r2, [r3, #4]
 801ec30:	687b      	ldr	r3, [r7, #4]
 801ec32:	681b      	ldr	r3, [r3, #0]
 801ec34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ec38:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 801ec3a:	e082      	b.n	801ed42 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec40:	2b02      	cmp	r3, #2
 801ec42:	d075      	beq.n	801ed30 <I2C_MasterReceive_RXNE+0x15c>
 801ec44:	68fb      	ldr	r3, [r7, #12]
 801ec46:	2b01      	cmp	r3, #1
 801ec48:	d002      	beq.n	801ec50 <I2C_MasterReceive_RXNE+0x7c>
 801ec4a:	68fb      	ldr	r3, [r7, #12]
 801ec4c:	2b00      	cmp	r3, #0
 801ec4e:	d16f      	bne.n	801ed30 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801ec50:	6878      	ldr	r0, [r7, #4]
 801ec52:	f001 fbcf 	bl	80203f4 <I2C_WaitOnSTOPRequestThroughIT>
 801ec56:	4603      	mov	r3, r0
 801ec58:	2b00      	cmp	r3, #0
 801ec5a:	d142      	bne.n	801ece2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	681b      	ldr	r3, [r3, #0]
 801ec60:	681a      	ldr	r2, [r3, #0]
 801ec62:	687b      	ldr	r3, [r7, #4]
 801ec64:	681b      	ldr	r3, [r3, #0]
 801ec66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ec6a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ec6c:	687b      	ldr	r3, [r7, #4]
 801ec6e:	681b      	ldr	r3, [r3, #0]
 801ec70:	685a      	ldr	r2, [r3, #4]
 801ec72:	687b      	ldr	r3, [r7, #4]
 801ec74:	681b      	ldr	r3, [r3, #0]
 801ec76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ec7a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	681b      	ldr	r3, [r3, #0]
 801ec80:	691a      	ldr	r2, [r3, #16]
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec86:	b2d2      	uxtb	r2, r2
 801ec88:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec8e:	1c5a      	adds	r2, r3, #1
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801ec94:	687b      	ldr	r3, [r7, #4]
 801ec96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ec98:	b29b      	uxth	r3, r3
 801ec9a:	3b01      	subs	r3, #1
 801ec9c:	b29a      	uxth	r2, r3
 801ec9e:	687b      	ldr	r3, [r7, #4]
 801eca0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	2220      	movs	r2, #32
 801eca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ecb0:	b2db      	uxtb	r3, r3
 801ecb2:	2b40      	cmp	r3, #64	; 0x40
 801ecb4:	d10a      	bne.n	801eccc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801ecb6:	687b      	ldr	r3, [r7, #4]
 801ecb8:	2200      	movs	r2, #0
 801ecba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	2200      	movs	r2, #0
 801ecc2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801ecc4:	6878      	ldr	r0, [r7, #4]
 801ecc6:	f7e2 feb9 	bl	8001a3c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801ecca:	e03a      	b.n	801ed42 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	2200      	movs	r2, #0
 801ecd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	2212      	movs	r2, #18
 801ecd8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801ecda:	6878      	ldr	r0, [r7, #4]
 801ecdc:	f7e2 fec4 	bl	8001a68 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801ece0:	e02f      	b.n	801ed42 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ece2:	687b      	ldr	r3, [r7, #4]
 801ece4:	681b      	ldr	r3, [r3, #0]
 801ece6:	685a      	ldr	r2, [r3, #4]
 801ece8:	687b      	ldr	r3, [r7, #4]
 801ecea:	681b      	ldr	r3, [r3, #0]
 801ecec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ecf0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	681b      	ldr	r3, [r3, #0]
 801ecf6:	691a      	ldr	r2, [r3, #16]
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecfc:	b2d2      	uxtb	r2, r2
 801ecfe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed04:	1c5a      	adds	r2, r3, #1
 801ed06:	687b      	ldr	r3, [r7, #4]
 801ed08:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed0e:	b29b      	uxth	r3, r3
 801ed10:	3b01      	subs	r3, #1
 801ed12:	b29a      	uxth	r2, r3
 801ed14:	687b      	ldr	r3, [r7, #4]
 801ed16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801ed18:	687b      	ldr	r3, [r7, #4]
 801ed1a:	2220      	movs	r2, #32
 801ed1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	2200      	movs	r2, #0
 801ed24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801ed28:	6878      	ldr	r0, [r7, #4]
 801ed2a:	f7ff fd99 	bl	801e860 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801ed2e:	e008      	b.n	801ed42 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801ed30:	687b      	ldr	r3, [r7, #4]
 801ed32:	681b      	ldr	r3, [r3, #0]
 801ed34:	685a      	ldr	r2, [r3, #4]
 801ed36:	687b      	ldr	r3, [r7, #4]
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ed3e:	605a      	str	r2, [r3, #4]
}
 801ed40:	e7ff      	b.n	801ed42 <I2C_MasterReceive_RXNE+0x16e>
 801ed42:	bf00      	nop
 801ed44:	3710      	adds	r7, #16
 801ed46:	46bd      	mov	sp, r7
 801ed48:	bd80      	pop	{r7, pc}

0801ed4a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801ed4a:	b580      	push	{r7, lr}
 801ed4c:	b084      	sub	sp, #16
 801ed4e:	af00      	add	r7, sp, #0
 801ed50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ed56:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801ed58:	687b      	ldr	r3, [r7, #4]
 801ed5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed5c:	b29b      	uxth	r3, r3
 801ed5e:	2b04      	cmp	r3, #4
 801ed60:	d11b      	bne.n	801ed9a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801ed62:	687b      	ldr	r3, [r7, #4]
 801ed64:	681b      	ldr	r3, [r3, #0]
 801ed66:	685a      	ldr	r2, [r3, #4]
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	681b      	ldr	r3, [r3, #0]
 801ed6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ed70:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	681b      	ldr	r3, [r3, #0]
 801ed76:	691a      	ldr	r2, [r3, #16]
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed7c:	b2d2      	uxtb	r2, r2
 801ed7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801ed80:	687b      	ldr	r3, [r7, #4]
 801ed82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed84:	1c5a      	adds	r2, r3, #1
 801ed86:	687b      	ldr	r3, [r7, #4]
 801ed88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801ed8a:	687b      	ldr	r3, [r7, #4]
 801ed8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed8e:	b29b      	uxth	r3, r3
 801ed90:	3b01      	subs	r3, #1
 801ed92:	b29a      	uxth	r2, r3
 801ed94:	687b      	ldr	r3, [r7, #4]
 801ed96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801ed98:	e0bd      	b.n	801ef16 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801ed9a:	687b      	ldr	r3, [r7, #4]
 801ed9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed9e:	b29b      	uxth	r3, r3
 801eda0:	2b03      	cmp	r3, #3
 801eda2:	d129      	bne.n	801edf8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	681b      	ldr	r3, [r3, #0]
 801eda8:	685a      	ldr	r2, [r3, #4]
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	681b      	ldr	r3, [r3, #0]
 801edae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801edb2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801edb4:	68fb      	ldr	r3, [r7, #12]
 801edb6:	2b04      	cmp	r3, #4
 801edb8:	d00a      	beq.n	801edd0 <I2C_MasterReceive_BTF+0x86>
 801edba:	68fb      	ldr	r3, [r7, #12]
 801edbc:	2b02      	cmp	r3, #2
 801edbe:	d007      	beq.n	801edd0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801edc0:	687b      	ldr	r3, [r7, #4]
 801edc2:	681b      	ldr	r3, [r3, #0]
 801edc4:	681a      	ldr	r2, [r3, #0]
 801edc6:	687b      	ldr	r3, [r7, #4]
 801edc8:	681b      	ldr	r3, [r3, #0]
 801edca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801edce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801edd0:	687b      	ldr	r3, [r7, #4]
 801edd2:	681b      	ldr	r3, [r3, #0]
 801edd4:	691a      	ldr	r2, [r3, #16]
 801edd6:	687b      	ldr	r3, [r7, #4]
 801edd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801edda:	b2d2      	uxtb	r2, r2
 801eddc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801edde:	687b      	ldr	r3, [r7, #4]
 801ede0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ede2:	1c5a      	adds	r2, r3, #1
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801edec:	b29b      	uxth	r3, r3
 801edee:	3b01      	subs	r3, #1
 801edf0:	b29a      	uxth	r2, r3
 801edf2:	687b      	ldr	r3, [r7, #4]
 801edf4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801edf6:	e08e      	b.n	801ef16 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801edfc:	b29b      	uxth	r3, r3
 801edfe:	2b02      	cmp	r3, #2
 801ee00:	d176      	bne.n	801eef0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801ee02:	68fb      	ldr	r3, [r7, #12]
 801ee04:	2b01      	cmp	r3, #1
 801ee06:	d002      	beq.n	801ee0e <I2C_MasterReceive_BTF+0xc4>
 801ee08:	68fb      	ldr	r3, [r7, #12]
 801ee0a:	2b10      	cmp	r3, #16
 801ee0c:	d108      	bne.n	801ee20 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ee0e:	687b      	ldr	r3, [r7, #4]
 801ee10:	681b      	ldr	r3, [r3, #0]
 801ee12:	681a      	ldr	r2, [r3, #0]
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	681b      	ldr	r3, [r3, #0]
 801ee18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ee1c:	601a      	str	r2, [r3, #0]
 801ee1e:	e019      	b.n	801ee54 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801ee20:	68fb      	ldr	r3, [r7, #12]
 801ee22:	2b04      	cmp	r3, #4
 801ee24:	d002      	beq.n	801ee2c <I2C_MasterReceive_BTF+0xe2>
 801ee26:	68fb      	ldr	r3, [r7, #12]
 801ee28:	2b02      	cmp	r3, #2
 801ee2a:	d108      	bne.n	801ee3e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	681b      	ldr	r3, [r3, #0]
 801ee30:	681a      	ldr	r2, [r3, #0]
 801ee32:	687b      	ldr	r3, [r7, #4]
 801ee34:	681b      	ldr	r3, [r3, #0]
 801ee36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ee3a:	601a      	str	r2, [r3, #0]
 801ee3c:	e00a      	b.n	801ee54 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801ee3e:	68fb      	ldr	r3, [r7, #12]
 801ee40:	2b10      	cmp	r3, #16
 801ee42:	d007      	beq.n	801ee54 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ee44:	687b      	ldr	r3, [r7, #4]
 801ee46:	681b      	ldr	r3, [r3, #0]
 801ee48:	681a      	ldr	r2, [r3, #0]
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	681b      	ldr	r3, [r3, #0]
 801ee4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ee52:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	681b      	ldr	r3, [r3, #0]
 801ee58:	691a      	ldr	r2, [r3, #16]
 801ee5a:	687b      	ldr	r3, [r7, #4]
 801ee5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee5e:	b2d2      	uxtb	r2, r2
 801ee60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801ee62:	687b      	ldr	r3, [r7, #4]
 801ee64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee66:	1c5a      	adds	r2, r3, #1
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ee70:	b29b      	uxth	r3, r3
 801ee72:	3b01      	subs	r3, #1
 801ee74:	b29a      	uxth	r2, r3
 801ee76:	687b      	ldr	r3, [r7, #4]
 801ee78:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ee7a:	687b      	ldr	r3, [r7, #4]
 801ee7c:	681b      	ldr	r3, [r3, #0]
 801ee7e:	691a      	ldr	r2, [r3, #16]
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee84:	b2d2      	uxtb	r2, r2
 801ee86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801ee88:	687b      	ldr	r3, [r7, #4]
 801ee8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee8c:	1c5a      	adds	r2, r3, #1
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801ee92:	687b      	ldr	r3, [r7, #4]
 801ee94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ee96:	b29b      	uxth	r3, r3
 801ee98:	3b01      	subs	r3, #1
 801ee9a:	b29a      	uxth	r2, r3
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	681b      	ldr	r3, [r3, #0]
 801eea4:	685a      	ldr	r2, [r3, #4]
 801eea6:	687b      	ldr	r3, [r7, #4]
 801eea8:	681b      	ldr	r3, [r3, #0]
 801eeaa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801eeae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801eeb0:	687b      	ldr	r3, [r7, #4]
 801eeb2:	2220      	movs	r2, #32
 801eeb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801eeb8:	687b      	ldr	r3, [r7, #4]
 801eeba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801eebe:	b2db      	uxtb	r3, r3
 801eec0:	2b40      	cmp	r3, #64	; 0x40
 801eec2:	d10a      	bne.n	801eeda <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	2200      	movs	r2, #0
 801eec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801eecc:	687b      	ldr	r3, [r7, #4]
 801eece:	2200      	movs	r2, #0
 801eed0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 801eed2:	6878      	ldr	r0, [r7, #4]
 801eed4:	f7e2 fdb2 	bl	8001a3c <HAL_I2C_MemRxCpltCallback>
}
 801eed8:	e01d      	b.n	801ef16 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	2200      	movs	r2, #0
 801eede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	2212      	movs	r2, #18
 801eee6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801eee8:	6878      	ldr	r0, [r7, #4]
 801eeea:	f7e2 fdbd 	bl	8001a68 <HAL_I2C_MasterRxCpltCallback>
}
 801eeee:	e012      	b.n	801ef16 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	681b      	ldr	r3, [r3, #0]
 801eef4:	691a      	ldr	r2, [r3, #16]
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eefa:	b2d2      	uxtb	r2, r2
 801eefc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801eefe:	687b      	ldr	r3, [r7, #4]
 801ef00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef02:	1c5a      	adds	r2, r3, #1
 801ef04:	687b      	ldr	r3, [r7, #4]
 801ef06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801ef08:	687b      	ldr	r3, [r7, #4]
 801ef0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ef0c:	b29b      	uxth	r3, r3
 801ef0e:	3b01      	subs	r3, #1
 801ef10:	b29a      	uxth	r2, r3
 801ef12:	687b      	ldr	r3, [r7, #4]
 801ef14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801ef16:	bf00      	nop
 801ef18:	3710      	adds	r7, #16
 801ef1a:	46bd      	mov	sp, r7
 801ef1c:	bd80      	pop	{r7, pc}

0801ef1e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801ef1e:	b480      	push	{r7}
 801ef20:	b083      	sub	sp, #12
 801ef22:	af00      	add	r7, sp, #0
 801ef24:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ef26:	687b      	ldr	r3, [r7, #4]
 801ef28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ef2c:	b2db      	uxtb	r3, r3
 801ef2e:	2b40      	cmp	r3, #64	; 0x40
 801ef30:	d117      	bne.n	801ef62 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801ef32:	687b      	ldr	r3, [r7, #4]
 801ef34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d109      	bne.n	801ef4e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ef3e:	b2db      	uxtb	r3, r3
 801ef40:	461a      	mov	r2, r3
 801ef42:	687b      	ldr	r3, [r7, #4]
 801ef44:	681b      	ldr	r3, [r3, #0]
 801ef46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801ef4a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801ef4c:	e067      	b.n	801f01e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ef52:	b2db      	uxtb	r3, r3
 801ef54:	f043 0301 	orr.w	r3, r3, #1
 801ef58:	b2da      	uxtb	r2, r3
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	681b      	ldr	r3, [r3, #0]
 801ef5e:	611a      	str	r2, [r3, #16]
}
 801ef60:	e05d      	b.n	801f01e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801ef62:	687b      	ldr	r3, [r7, #4]
 801ef64:	691b      	ldr	r3, [r3, #16]
 801ef66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801ef6a:	d133      	bne.n	801efd4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801ef6c:	687b      	ldr	r3, [r7, #4]
 801ef6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ef72:	b2db      	uxtb	r3, r3
 801ef74:	2b21      	cmp	r3, #33	; 0x21
 801ef76:	d109      	bne.n	801ef8c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801ef78:	687b      	ldr	r3, [r7, #4]
 801ef7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ef7c:	b2db      	uxtb	r3, r3
 801ef7e:	461a      	mov	r2, r3
 801ef80:	687b      	ldr	r3, [r7, #4]
 801ef82:	681b      	ldr	r3, [r3, #0]
 801ef84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801ef88:	611a      	str	r2, [r3, #16]
 801ef8a:	e008      	b.n	801ef9e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ef90:	b2db      	uxtb	r3, r3
 801ef92:	f043 0301 	orr.w	r3, r3, #1
 801ef96:	b2da      	uxtb	r2, r3
 801ef98:	687b      	ldr	r3, [r7, #4]
 801ef9a:	681b      	ldr	r3, [r3, #0]
 801ef9c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801ef9e:	687b      	ldr	r3, [r7, #4]
 801efa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	d004      	beq.n	801efb0 <I2C_Master_SB+0x92>
 801efa6:	687b      	ldr	r3, [r7, #4]
 801efa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801efaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801efac:	2b00      	cmp	r3, #0
 801efae:	d108      	bne.n	801efc2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801efb4:	2b00      	cmp	r3, #0
 801efb6:	d032      	beq.n	801f01e <I2C_Master_SB+0x100>
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801efbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801efbe:	2b00      	cmp	r3, #0
 801efc0:	d02d      	beq.n	801f01e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801efc2:	687b      	ldr	r3, [r7, #4]
 801efc4:	681b      	ldr	r3, [r3, #0]
 801efc6:	685a      	ldr	r2, [r3, #4]
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801efd0:	605a      	str	r2, [r3, #4]
}
 801efd2:	e024      	b.n	801f01e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801efd8:	2b00      	cmp	r3, #0
 801efda:	d10e      	bne.n	801effa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801efe0:	b29b      	uxth	r3, r3
 801efe2:	11db      	asrs	r3, r3, #7
 801efe4:	b2db      	uxtb	r3, r3
 801efe6:	f003 0306 	and.w	r3, r3, #6
 801efea:	b2db      	uxtb	r3, r3
 801efec:	f063 030f 	orn	r3, r3, #15
 801eff0:	b2da      	uxtb	r2, r3
 801eff2:	687b      	ldr	r3, [r7, #4]
 801eff4:	681b      	ldr	r3, [r3, #0]
 801eff6:	611a      	str	r2, [r3, #16]
}
 801eff8:	e011      	b.n	801f01e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801effa:	687b      	ldr	r3, [r7, #4]
 801effc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801effe:	2b01      	cmp	r3, #1
 801f000:	d10d      	bne.n	801f01e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801f002:	687b      	ldr	r3, [r7, #4]
 801f004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f006:	b29b      	uxth	r3, r3
 801f008:	11db      	asrs	r3, r3, #7
 801f00a:	b2db      	uxtb	r3, r3
 801f00c:	f003 0306 	and.w	r3, r3, #6
 801f010:	b2db      	uxtb	r3, r3
 801f012:	f063 030e 	orn	r3, r3, #14
 801f016:	b2da      	uxtb	r2, r3
 801f018:	687b      	ldr	r3, [r7, #4]
 801f01a:	681b      	ldr	r3, [r3, #0]
 801f01c:	611a      	str	r2, [r3, #16]
}
 801f01e:	bf00      	nop
 801f020:	370c      	adds	r7, #12
 801f022:	46bd      	mov	sp, r7
 801f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f028:	4770      	bx	lr

0801f02a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801f02a:	b480      	push	{r7}
 801f02c:	b083      	sub	sp, #12
 801f02e:	af00      	add	r7, sp, #0
 801f030:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801f032:	687b      	ldr	r3, [r7, #4]
 801f034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f036:	b2da      	uxtb	r2, r3
 801f038:	687b      	ldr	r3, [r7, #4]
 801f03a:	681b      	ldr	r3, [r3, #0]
 801f03c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f042:	2b00      	cmp	r3, #0
 801f044:	d004      	beq.n	801f050 <I2C_Master_ADD10+0x26>
 801f046:	687b      	ldr	r3, [r7, #4]
 801f048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f04a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f04c:	2b00      	cmp	r3, #0
 801f04e:	d108      	bne.n	801f062 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f054:	2b00      	cmp	r3, #0
 801f056:	d00c      	beq.n	801f072 <I2C_Master_ADD10+0x48>
 801f058:	687b      	ldr	r3, [r7, #4]
 801f05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f05e:	2b00      	cmp	r3, #0
 801f060:	d007      	beq.n	801f072 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f062:	687b      	ldr	r3, [r7, #4]
 801f064:	681b      	ldr	r3, [r3, #0]
 801f066:	685a      	ldr	r2, [r3, #4]
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	681b      	ldr	r3, [r3, #0]
 801f06c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f070:	605a      	str	r2, [r3, #4]
  }
}
 801f072:	bf00      	nop
 801f074:	370c      	adds	r7, #12
 801f076:	46bd      	mov	sp, r7
 801f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f07c:	4770      	bx	lr

0801f07e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 801f07e:	b480      	push	{r7}
 801f080:	b091      	sub	sp, #68	; 0x44
 801f082:	af00      	add	r7, sp, #0
 801f084:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801f086:	687b      	ldr	r3, [r7, #4]
 801f088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f08c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f094:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f09a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801f09c:	687b      	ldr	r3, [r7, #4]
 801f09e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f0a2:	b2db      	uxtb	r3, r3
 801f0a4:	2b22      	cmp	r3, #34	; 0x22
 801f0a6:	f040 8169 	bne.w	801f37c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 801f0aa:	687b      	ldr	r3, [r7, #4]
 801f0ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f0ae:	2b00      	cmp	r3, #0
 801f0b0:	d10f      	bne.n	801f0d2 <I2C_Master_ADDR+0x54>
 801f0b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801f0b6:	2b40      	cmp	r3, #64	; 0x40
 801f0b8:	d10b      	bne.n	801f0d2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f0ba:	2300      	movs	r3, #0
 801f0bc:	633b      	str	r3, [r7, #48]	; 0x30
 801f0be:	687b      	ldr	r3, [r7, #4]
 801f0c0:	681b      	ldr	r3, [r3, #0]
 801f0c2:	695b      	ldr	r3, [r3, #20]
 801f0c4:	633b      	str	r3, [r7, #48]	; 0x30
 801f0c6:	687b      	ldr	r3, [r7, #4]
 801f0c8:	681b      	ldr	r3, [r3, #0]
 801f0ca:	699b      	ldr	r3, [r3, #24]
 801f0cc:	633b      	str	r3, [r7, #48]	; 0x30
 801f0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f0d0:	e160      	b.n	801f394 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f0d6:	2b00      	cmp	r3, #0
 801f0d8:	d11d      	bne.n	801f116 <I2C_Master_ADDR+0x98>
 801f0da:	687b      	ldr	r3, [r7, #4]
 801f0dc:	691b      	ldr	r3, [r3, #16]
 801f0de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801f0e2:	d118      	bne.n	801f116 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f0e4:	2300      	movs	r3, #0
 801f0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	681b      	ldr	r3, [r3, #0]
 801f0ec:	695b      	ldr	r3, [r3, #20]
 801f0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	681b      	ldr	r3, [r3, #0]
 801f0f4:	699b      	ldr	r3, [r3, #24]
 801f0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	681b      	ldr	r3, [r3, #0]
 801f0fe:	681a      	ldr	r2, [r3, #0]
 801f100:	687b      	ldr	r3, [r7, #4]
 801f102:	681b      	ldr	r3, [r3, #0]
 801f104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f108:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801f10a:	687b      	ldr	r3, [r7, #4]
 801f10c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f10e:	1c5a      	adds	r2, r3, #1
 801f110:	687b      	ldr	r3, [r7, #4]
 801f112:	651a      	str	r2, [r3, #80]	; 0x50
 801f114:	e13e      	b.n	801f394 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801f116:	687b      	ldr	r3, [r7, #4]
 801f118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f11a:	b29b      	uxth	r3, r3
 801f11c:	2b00      	cmp	r3, #0
 801f11e:	d113      	bne.n	801f148 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f120:	2300      	movs	r3, #0
 801f122:	62bb      	str	r3, [r7, #40]	; 0x28
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	681b      	ldr	r3, [r3, #0]
 801f128:	695b      	ldr	r3, [r3, #20]
 801f12a:	62bb      	str	r3, [r7, #40]	; 0x28
 801f12c:	687b      	ldr	r3, [r7, #4]
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	699b      	ldr	r3, [r3, #24]
 801f132:	62bb      	str	r3, [r7, #40]	; 0x28
 801f134:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f136:	687b      	ldr	r3, [r7, #4]
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	681a      	ldr	r2, [r3, #0]
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	681b      	ldr	r3, [r3, #0]
 801f140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f144:	601a      	str	r2, [r3, #0]
 801f146:	e115      	b.n	801f374 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801f148:	687b      	ldr	r3, [r7, #4]
 801f14a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f14c:	b29b      	uxth	r3, r3
 801f14e:	2b01      	cmp	r3, #1
 801f150:	f040 808a 	bne.w	801f268 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801f154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f156:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f15a:	d137      	bne.n	801f1cc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f15c:	687b      	ldr	r3, [r7, #4]
 801f15e:	681b      	ldr	r3, [r3, #0]
 801f160:	681a      	ldr	r2, [r3, #0]
 801f162:	687b      	ldr	r3, [r7, #4]
 801f164:	681b      	ldr	r3, [r3, #0]
 801f166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f16a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801f16c:	687b      	ldr	r3, [r7, #4]
 801f16e:	681b      	ldr	r3, [r3, #0]
 801f170:	685b      	ldr	r3, [r3, #4]
 801f172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f17a:	d113      	bne.n	801f1a4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	681b      	ldr	r3, [r3, #0]
 801f180:	681a      	ldr	r2, [r3, #0]
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	681b      	ldr	r3, [r3, #0]
 801f186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f18a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f18c:	2300      	movs	r3, #0
 801f18e:	627b      	str	r3, [r7, #36]	; 0x24
 801f190:	687b      	ldr	r3, [r7, #4]
 801f192:	681b      	ldr	r3, [r3, #0]
 801f194:	695b      	ldr	r3, [r3, #20]
 801f196:	627b      	str	r3, [r7, #36]	; 0x24
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	681b      	ldr	r3, [r3, #0]
 801f19c:	699b      	ldr	r3, [r3, #24]
 801f19e:	627b      	str	r3, [r7, #36]	; 0x24
 801f1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1a2:	e0e7      	b.n	801f374 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f1a4:	2300      	movs	r3, #0
 801f1a6:	623b      	str	r3, [r7, #32]
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	681b      	ldr	r3, [r3, #0]
 801f1ac:	695b      	ldr	r3, [r3, #20]
 801f1ae:	623b      	str	r3, [r7, #32]
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	681b      	ldr	r3, [r3, #0]
 801f1b4:	699b      	ldr	r3, [r3, #24]
 801f1b6:	623b      	str	r3, [r7, #32]
 801f1b8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f1ba:	687b      	ldr	r3, [r7, #4]
 801f1bc:	681b      	ldr	r3, [r3, #0]
 801f1be:	681a      	ldr	r2, [r3, #0]
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f1c8:	601a      	str	r2, [r3, #0]
 801f1ca:	e0d3      	b.n	801f374 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801f1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1ce:	2b08      	cmp	r3, #8
 801f1d0:	d02e      	beq.n	801f230 <I2C_Master_ADDR+0x1b2>
 801f1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1d4:	2b20      	cmp	r3, #32
 801f1d6:	d02b      	beq.n	801f230 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 801f1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f1da:	2b12      	cmp	r3, #18
 801f1dc:	d102      	bne.n	801f1e4 <I2C_Master_ADDR+0x166>
 801f1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1e0:	2b01      	cmp	r3, #1
 801f1e2:	d125      	bne.n	801f230 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801f1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1e6:	2b04      	cmp	r3, #4
 801f1e8:	d00e      	beq.n	801f208 <I2C_Master_ADDR+0x18a>
 801f1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1ec:	2b02      	cmp	r3, #2
 801f1ee:	d00b      	beq.n	801f208 <I2C_Master_ADDR+0x18a>
 801f1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1f2:	2b10      	cmp	r3, #16
 801f1f4:	d008      	beq.n	801f208 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	681a      	ldr	r2, [r3, #0]
 801f1fc:	687b      	ldr	r3, [r7, #4]
 801f1fe:	681b      	ldr	r3, [r3, #0]
 801f200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f204:	601a      	str	r2, [r3, #0]
 801f206:	e007      	b.n	801f218 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f208:	687b      	ldr	r3, [r7, #4]
 801f20a:	681b      	ldr	r3, [r3, #0]
 801f20c:	681a      	ldr	r2, [r3, #0]
 801f20e:	687b      	ldr	r3, [r7, #4]
 801f210:	681b      	ldr	r3, [r3, #0]
 801f212:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f216:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f218:	2300      	movs	r3, #0
 801f21a:	61fb      	str	r3, [r7, #28]
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	695b      	ldr	r3, [r3, #20]
 801f222:	61fb      	str	r3, [r7, #28]
 801f224:	687b      	ldr	r3, [r7, #4]
 801f226:	681b      	ldr	r3, [r3, #0]
 801f228:	699b      	ldr	r3, [r3, #24]
 801f22a:	61fb      	str	r3, [r7, #28]
 801f22c:	69fb      	ldr	r3, [r7, #28]
 801f22e:	e0a1      	b.n	801f374 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	681b      	ldr	r3, [r3, #0]
 801f234:	681a      	ldr	r2, [r3, #0]
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	681b      	ldr	r3, [r3, #0]
 801f23a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f23e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f240:	2300      	movs	r3, #0
 801f242:	61bb      	str	r3, [r7, #24]
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	681b      	ldr	r3, [r3, #0]
 801f248:	695b      	ldr	r3, [r3, #20]
 801f24a:	61bb      	str	r3, [r7, #24]
 801f24c:	687b      	ldr	r3, [r7, #4]
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	699b      	ldr	r3, [r3, #24]
 801f252:	61bb      	str	r3, [r7, #24]
 801f254:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f256:	687b      	ldr	r3, [r7, #4]
 801f258:	681b      	ldr	r3, [r3, #0]
 801f25a:	681a      	ldr	r2, [r3, #0]
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	681b      	ldr	r3, [r3, #0]
 801f260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f264:	601a      	str	r2, [r3, #0]
 801f266:	e085      	b.n	801f374 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801f268:	687b      	ldr	r3, [r7, #4]
 801f26a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f26c:	b29b      	uxth	r3, r3
 801f26e:	2b02      	cmp	r3, #2
 801f270:	d14d      	bne.n	801f30e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801f272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f274:	2b04      	cmp	r3, #4
 801f276:	d016      	beq.n	801f2a6 <I2C_Master_ADDR+0x228>
 801f278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f27a:	2b02      	cmp	r3, #2
 801f27c:	d013      	beq.n	801f2a6 <I2C_Master_ADDR+0x228>
 801f27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f280:	2b10      	cmp	r3, #16
 801f282:	d010      	beq.n	801f2a6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	681b      	ldr	r3, [r3, #0]
 801f288:	681a      	ldr	r2, [r3, #0]
 801f28a:	687b      	ldr	r3, [r7, #4]
 801f28c:	681b      	ldr	r3, [r3, #0]
 801f28e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f292:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801f294:	687b      	ldr	r3, [r7, #4]
 801f296:	681b      	ldr	r3, [r3, #0]
 801f298:	681a      	ldr	r2, [r3, #0]
 801f29a:	687b      	ldr	r3, [r7, #4]
 801f29c:	681b      	ldr	r3, [r3, #0]
 801f29e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f2a2:	601a      	str	r2, [r3, #0]
 801f2a4:	e007      	b.n	801f2b6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f2a6:	687b      	ldr	r3, [r7, #4]
 801f2a8:	681b      	ldr	r3, [r3, #0]
 801f2aa:	681a      	ldr	r2, [r3, #0]
 801f2ac:	687b      	ldr	r3, [r7, #4]
 801f2ae:	681b      	ldr	r3, [r3, #0]
 801f2b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f2b4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801f2b6:	687b      	ldr	r3, [r7, #4]
 801f2b8:	681b      	ldr	r3, [r3, #0]
 801f2ba:	685b      	ldr	r3, [r3, #4]
 801f2bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f2c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f2c4:	d117      	bne.n	801f2f6 <I2C_Master_ADDR+0x278>
 801f2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f2c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f2cc:	d00b      	beq.n	801f2e6 <I2C_Master_ADDR+0x268>
 801f2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f2d0:	2b01      	cmp	r3, #1
 801f2d2:	d008      	beq.n	801f2e6 <I2C_Master_ADDR+0x268>
 801f2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f2d6:	2b08      	cmp	r3, #8
 801f2d8:	d005      	beq.n	801f2e6 <I2C_Master_ADDR+0x268>
 801f2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f2dc:	2b10      	cmp	r3, #16
 801f2de:	d002      	beq.n	801f2e6 <I2C_Master_ADDR+0x268>
 801f2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f2e2:	2b20      	cmp	r3, #32
 801f2e4:	d107      	bne.n	801f2f6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801f2e6:	687b      	ldr	r3, [r7, #4]
 801f2e8:	681b      	ldr	r3, [r3, #0]
 801f2ea:	685a      	ldr	r2, [r3, #4]
 801f2ec:	687b      	ldr	r3, [r7, #4]
 801f2ee:	681b      	ldr	r3, [r3, #0]
 801f2f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801f2f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f2f6:	2300      	movs	r3, #0
 801f2f8:	617b      	str	r3, [r7, #20]
 801f2fa:	687b      	ldr	r3, [r7, #4]
 801f2fc:	681b      	ldr	r3, [r3, #0]
 801f2fe:	695b      	ldr	r3, [r3, #20]
 801f300:	617b      	str	r3, [r7, #20]
 801f302:	687b      	ldr	r3, [r7, #4]
 801f304:	681b      	ldr	r3, [r3, #0]
 801f306:	699b      	ldr	r3, [r3, #24]
 801f308:	617b      	str	r3, [r7, #20]
 801f30a:	697b      	ldr	r3, [r7, #20]
 801f30c:	e032      	b.n	801f374 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f30e:	687b      	ldr	r3, [r7, #4]
 801f310:	681b      	ldr	r3, [r3, #0]
 801f312:	681a      	ldr	r2, [r3, #0]
 801f314:	687b      	ldr	r3, [r7, #4]
 801f316:	681b      	ldr	r3, [r3, #0]
 801f318:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f31c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801f31e:	687b      	ldr	r3, [r7, #4]
 801f320:	681b      	ldr	r3, [r3, #0]
 801f322:	685b      	ldr	r3, [r3, #4]
 801f324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f32c:	d117      	bne.n	801f35e <I2C_Master_ADDR+0x2e0>
 801f32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f334:	d00b      	beq.n	801f34e <I2C_Master_ADDR+0x2d0>
 801f336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f338:	2b01      	cmp	r3, #1
 801f33a:	d008      	beq.n	801f34e <I2C_Master_ADDR+0x2d0>
 801f33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f33e:	2b08      	cmp	r3, #8
 801f340:	d005      	beq.n	801f34e <I2C_Master_ADDR+0x2d0>
 801f342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f344:	2b10      	cmp	r3, #16
 801f346:	d002      	beq.n	801f34e <I2C_Master_ADDR+0x2d0>
 801f348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f34a:	2b20      	cmp	r3, #32
 801f34c:	d107      	bne.n	801f35e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	681b      	ldr	r3, [r3, #0]
 801f352:	685a      	ldr	r2, [r3, #4]
 801f354:	687b      	ldr	r3, [r7, #4]
 801f356:	681b      	ldr	r3, [r3, #0]
 801f358:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801f35c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f35e:	2300      	movs	r3, #0
 801f360:	613b      	str	r3, [r7, #16]
 801f362:	687b      	ldr	r3, [r7, #4]
 801f364:	681b      	ldr	r3, [r3, #0]
 801f366:	695b      	ldr	r3, [r3, #20]
 801f368:	613b      	str	r3, [r7, #16]
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	681b      	ldr	r3, [r3, #0]
 801f36e:	699b      	ldr	r3, [r3, #24]
 801f370:	613b      	str	r3, [r7, #16]
 801f372:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801f374:	687b      	ldr	r3, [r7, #4]
 801f376:	2200      	movs	r2, #0
 801f378:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801f37a:	e00b      	b.n	801f394 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f37c:	2300      	movs	r3, #0
 801f37e:	60fb      	str	r3, [r7, #12]
 801f380:	687b      	ldr	r3, [r7, #4]
 801f382:	681b      	ldr	r3, [r3, #0]
 801f384:	695b      	ldr	r3, [r3, #20]
 801f386:	60fb      	str	r3, [r7, #12]
 801f388:	687b      	ldr	r3, [r7, #4]
 801f38a:	681b      	ldr	r3, [r3, #0]
 801f38c:	699b      	ldr	r3, [r3, #24]
 801f38e:	60fb      	str	r3, [r7, #12]
 801f390:	68fb      	ldr	r3, [r7, #12]
}
 801f392:	e7ff      	b.n	801f394 <I2C_Master_ADDR+0x316>
 801f394:	bf00      	nop
 801f396:	3744      	adds	r7, #68	; 0x44
 801f398:	46bd      	mov	sp, r7
 801f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f39e:	4770      	bx	lr

0801f3a0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801f3a0:	b580      	push	{r7, lr}
 801f3a2:	b084      	sub	sp, #16
 801f3a4:	af00      	add	r7, sp, #0
 801f3a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f3ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801f3b0:	687b      	ldr	r3, [r7, #4]
 801f3b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f3b4:	b29b      	uxth	r3, r3
 801f3b6:	2b00      	cmp	r3, #0
 801f3b8:	d02b      	beq.n	801f412 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801f3ba:	687b      	ldr	r3, [r7, #4]
 801f3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3be:	781a      	ldrb	r2, [r3, #0]
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	681b      	ldr	r3, [r3, #0]
 801f3c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f3c6:	687b      	ldr	r3, [r7, #4]
 801f3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3ca:	1c5a      	adds	r2, r3, #1
 801f3cc:	687b      	ldr	r3, [r7, #4]
 801f3ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f3d0:	687b      	ldr	r3, [r7, #4]
 801f3d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f3d4:	b29b      	uxth	r3, r3
 801f3d6:	3b01      	subs	r3, #1
 801f3d8:	b29a      	uxth	r2, r3
 801f3da:	687b      	ldr	r3, [r7, #4]
 801f3dc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f3e2:	b29b      	uxth	r3, r3
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	d114      	bne.n	801f412 <I2C_SlaveTransmit_TXE+0x72>
 801f3e8:	7bfb      	ldrb	r3, [r7, #15]
 801f3ea:	2b29      	cmp	r3, #41	; 0x29
 801f3ec:	d111      	bne.n	801f412 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801f3ee:	687b      	ldr	r3, [r7, #4]
 801f3f0:	681b      	ldr	r3, [r3, #0]
 801f3f2:	685a      	ldr	r2, [r3, #4]
 801f3f4:	687b      	ldr	r3, [r7, #4]
 801f3f6:	681b      	ldr	r3, [r3, #0]
 801f3f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f3fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	2221      	movs	r2, #33	; 0x21
 801f402:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f404:	687b      	ldr	r3, [r7, #4]
 801f406:	2228      	movs	r2, #40	; 0x28
 801f408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801f40c:	6878      	ldr	r0, [r7, #4]
 801f40e:	f7ff f9fb 	bl	801e808 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801f412:	bf00      	nop
 801f414:	3710      	adds	r7, #16
 801f416:	46bd      	mov	sp, r7
 801f418:	bd80      	pop	{r7, pc}

0801f41a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801f41a:	b480      	push	{r7}
 801f41c:	b083      	sub	sp, #12
 801f41e:	af00      	add	r7, sp, #0
 801f420:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f426:	b29b      	uxth	r3, r3
 801f428:	2b00      	cmp	r3, #0
 801f42a:	d011      	beq.n	801f450 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f430:	781a      	ldrb	r2, [r3, #0]
 801f432:	687b      	ldr	r3, [r7, #4]
 801f434:	681b      	ldr	r3, [r3, #0]
 801f436:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f438:	687b      	ldr	r3, [r7, #4]
 801f43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f43c:	1c5a      	adds	r2, r3, #1
 801f43e:	687b      	ldr	r3, [r7, #4]
 801f440:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f442:	687b      	ldr	r3, [r7, #4]
 801f444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f446:	b29b      	uxth	r3, r3
 801f448:	3b01      	subs	r3, #1
 801f44a:	b29a      	uxth	r2, r3
 801f44c:	687b      	ldr	r3, [r7, #4]
 801f44e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801f450:	bf00      	nop
 801f452:	370c      	adds	r7, #12
 801f454:	46bd      	mov	sp, r7
 801f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f45a:	4770      	bx	lr

0801f45c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801f45c:	b580      	push	{r7, lr}
 801f45e:	b084      	sub	sp, #16
 801f460:	af00      	add	r7, sp, #0
 801f462:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f464:	687b      	ldr	r3, [r7, #4]
 801f466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f46a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f470:	b29b      	uxth	r3, r3
 801f472:	2b00      	cmp	r3, #0
 801f474:	d02c      	beq.n	801f4d0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f476:	687b      	ldr	r3, [r7, #4]
 801f478:	681b      	ldr	r3, [r3, #0]
 801f47a:	691a      	ldr	r2, [r3, #16]
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f480:	b2d2      	uxtb	r2, r2
 801f482:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f484:	687b      	ldr	r3, [r7, #4]
 801f486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f488:	1c5a      	adds	r2, r3, #1
 801f48a:	687b      	ldr	r3, [r7, #4]
 801f48c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f48e:	687b      	ldr	r3, [r7, #4]
 801f490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f492:	b29b      	uxth	r3, r3
 801f494:	3b01      	subs	r3, #1
 801f496:	b29a      	uxth	r2, r3
 801f498:	687b      	ldr	r3, [r7, #4]
 801f49a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f4a0:	b29b      	uxth	r3, r3
 801f4a2:	2b00      	cmp	r3, #0
 801f4a4:	d114      	bne.n	801f4d0 <I2C_SlaveReceive_RXNE+0x74>
 801f4a6:	7bfb      	ldrb	r3, [r7, #15]
 801f4a8:	2b2a      	cmp	r3, #42	; 0x2a
 801f4aa:	d111      	bne.n	801f4d0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	681b      	ldr	r3, [r3, #0]
 801f4b0:	685a      	ldr	r2, [r3, #4]
 801f4b2:	687b      	ldr	r3, [r7, #4]
 801f4b4:	681b      	ldr	r3, [r3, #0]
 801f4b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f4ba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801f4bc:	687b      	ldr	r3, [r7, #4]
 801f4be:	2222      	movs	r2, #34	; 0x22
 801f4c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f4c2:	687b      	ldr	r3, [r7, #4]
 801f4c4:	2228      	movs	r2, #40	; 0x28
 801f4c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f4ca:	6878      	ldr	r0, [r7, #4]
 801f4cc:	f7ff f9a6 	bl	801e81c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801f4d0:	bf00      	nop
 801f4d2:	3710      	adds	r7, #16
 801f4d4:	46bd      	mov	sp, r7
 801f4d6:	bd80      	pop	{r7, pc}

0801f4d8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801f4d8:	b480      	push	{r7}
 801f4da:	b083      	sub	sp, #12
 801f4dc:	af00      	add	r7, sp, #0
 801f4de:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f4e4:	b29b      	uxth	r3, r3
 801f4e6:	2b00      	cmp	r3, #0
 801f4e8:	d012      	beq.n	801f510 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	681b      	ldr	r3, [r3, #0]
 801f4ee:	691a      	ldr	r2, [r3, #16]
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4f4:	b2d2      	uxtb	r2, r2
 801f4f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f4f8:	687b      	ldr	r3, [r7, #4]
 801f4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4fc:	1c5a      	adds	r2, r3, #1
 801f4fe:	687b      	ldr	r3, [r7, #4]
 801f500:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f502:	687b      	ldr	r3, [r7, #4]
 801f504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f506:	b29b      	uxth	r3, r3
 801f508:	3b01      	subs	r3, #1
 801f50a:	b29a      	uxth	r2, r3
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801f510:	bf00      	nop
 801f512:	370c      	adds	r7, #12
 801f514:	46bd      	mov	sp, r7
 801f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f51a:	4770      	bx	lr

0801f51c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801f51c:	b580      	push	{r7, lr}
 801f51e:	b084      	sub	sp, #16
 801f520:	af00      	add	r7, sp, #0
 801f522:	6078      	str	r0, [r7, #4]
 801f524:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801f526:	2300      	movs	r3, #0
 801f528:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f530:	b2db      	uxtb	r3, r3
 801f532:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801f536:	2b28      	cmp	r3, #40	; 0x28
 801f538:	d127      	bne.n	801f58a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801f53a:	687b      	ldr	r3, [r7, #4]
 801f53c:	681b      	ldr	r3, [r3, #0]
 801f53e:	685a      	ldr	r2, [r3, #4]
 801f540:	687b      	ldr	r3, [r7, #4]
 801f542:	681b      	ldr	r3, [r3, #0]
 801f544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f548:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801f54a:	683b      	ldr	r3, [r7, #0]
 801f54c:	089b      	lsrs	r3, r3, #2
 801f54e:	f003 0301 	and.w	r3, r3, #1
 801f552:	2b00      	cmp	r3, #0
 801f554:	d101      	bne.n	801f55a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801f556:	2301      	movs	r3, #1
 801f558:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801f55a:	683b      	ldr	r3, [r7, #0]
 801f55c:	09db      	lsrs	r3, r3, #7
 801f55e:	f003 0301 	and.w	r3, r3, #1
 801f562:	2b00      	cmp	r3, #0
 801f564:	d103      	bne.n	801f56e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801f566:	687b      	ldr	r3, [r7, #4]
 801f568:	68db      	ldr	r3, [r3, #12]
 801f56a:	81bb      	strh	r3, [r7, #12]
 801f56c:	e002      	b.n	801f574 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801f56e:	687b      	ldr	r3, [r7, #4]
 801f570:	699b      	ldr	r3, [r3, #24]
 801f572:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801f574:	687b      	ldr	r3, [r7, #4]
 801f576:	2200      	movs	r2, #0
 801f578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801f57c:	89ba      	ldrh	r2, [r7, #12]
 801f57e:	7bfb      	ldrb	r3, [r7, #15]
 801f580:	4619      	mov	r1, r3
 801f582:	6878      	ldr	r0, [r7, #4]
 801f584:	f7ff f954 	bl	801e830 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801f588:	e00e      	b.n	801f5a8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f58a:	2300      	movs	r3, #0
 801f58c:	60bb      	str	r3, [r7, #8]
 801f58e:	687b      	ldr	r3, [r7, #4]
 801f590:	681b      	ldr	r3, [r3, #0]
 801f592:	695b      	ldr	r3, [r3, #20]
 801f594:	60bb      	str	r3, [r7, #8]
 801f596:	687b      	ldr	r3, [r7, #4]
 801f598:	681b      	ldr	r3, [r3, #0]
 801f59a:	699b      	ldr	r3, [r3, #24]
 801f59c:	60bb      	str	r3, [r7, #8]
 801f59e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 801f5a0:	687b      	ldr	r3, [r7, #4]
 801f5a2:	2200      	movs	r2, #0
 801f5a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801f5a8:	bf00      	nop
 801f5aa:	3710      	adds	r7, #16
 801f5ac:	46bd      	mov	sp, r7
 801f5ae:	bd80      	pop	{r7, pc}

0801f5b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 801f5b0:	b580      	push	{r7, lr}
 801f5b2:	b084      	sub	sp, #16
 801f5b4:	af00      	add	r7, sp, #0
 801f5b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f5b8:	687b      	ldr	r3, [r7, #4]
 801f5ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f5be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f5c0:	687b      	ldr	r3, [r7, #4]
 801f5c2:	681b      	ldr	r3, [r3, #0]
 801f5c4:	685a      	ldr	r2, [r3, #4]
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	681b      	ldr	r3, [r3, #0]
 801f5ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f5ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 801f5d0:	2300      	movs	r3, #0
 801f5d2:	60bb      	str	r3, [r7, #8]
 801f5d4:	687b      	ldr	r3, [r7, #4]
 801f5d6:	681b      	ldr	r3, [r3, #0]
 801f5d8:	695b      	ldr	r3, [r3, #20]
 801f5da:	60bb      	str	r3, [r7, #8]
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	681b      	ldr	r3, [r3, #0]
 801f5e0:	681a      	ldr	r2, [r3, #0]
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	681b      	ldr	r3, [r3, #0]
 801f5e6:	f042 0201 	orr.w	r2, r2, #1
 801f5ea:	601a      	str	r2, [r3, #0]
 801f5ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f5ee:	687b      	ldr	r3, [r7, #4]
 801f5f0:	681b      	ldr	r3, [r3, #0]
 801f5f2:	681a      	ldr	r2, [r3, #0]
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	681b      	ldr	r3, [r3, #0]
 801f5f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f5fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	681b      	ldr	r3, [r3, #0]
 801f602:	685b      	ldr	r3, [r3, #4]
 801f604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f60c:	d172      	bne.n	801f6f4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801f60e:	7bfb      	ldrb	r3, [r7, #15]
 801f610:	2b22      	cmp	r3, #34	; 0x22
 801f612:	d002      	beq.n	801f61a <I2C_Slave_STOPF+0x6a>
 801f614:	7bfb      	ldrb	r3, [r7, #15]
 801f616:	2b2a      	cmp	r3, #42	; 0x2a
 801f618:	d135      	bne.n	801f686 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f61e:	681b      	ldr	r3, [r3, #0]
 801f620:	685b      	ldr	r3, [r3, #4]
 801f622:	b29a      	uxth	r2, r3
 801f624:	687b      	ldr	r3, [r7, #4]
 801f626:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801f628:	687b      	ldr	r3, [r7, #4]
 801f62a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f62c:	b29b      	uxth	r3, r3
 801f62e:	2b00      	cmp	r3, #0
 801f630:	d005      	beq.n	801f63e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801f632:	687b      	ldr	r3, [r7, #4]
 801f634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f636:	f043 0204 	orr.w	r2, r3, #4
 801f63a:	687b      	ldr	r3, [r7, #4]
 801f63c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f63e:	687b      	ldr	r3, [r7, #4]
 801f640:	681b      	ldr	r3, [r3, #0]
 801f642:	685a      	ldr	r2, [r3, #4]
 801f644:	687b      	ldr	r3, [r7, #4]
 801f646:	681b      	ldr	r3, [r3, #0]
 801f648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f64c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801f64e:	687b      	ldr	r3, [r7, #4]
 801f650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f652:	4618      	mov	r0, r3
 801f654:	f7fd fc90 	bl	801cf78 <HAL_DMA_GetState>
 801f658:	4603      	mov	r3, r0
 801f65a:	2b01      	cmp	r3, #1
 801f65c:	d049      	beq.n	801f6f2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f662:	4a69      	ldr	r2, [pc, #420]	; (801f808 <I2C_Slave_STOPF+0x258>)
 801f664:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801f666:	687b      	ldr	r3, [r7, #4]
 801f668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f66a:	4618      	mov	r0, r3
 801f66c:	f7fd fad8 	bl	801cc20 <HAL_DMA_Abort_IT>
 801f670:	4603      	mov	r3, r0
 801f672:	2b00      	cmp	r3, #0
 801f674:	d03d      	beq.n	801f6f2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801f676:	687b      	ldr	r3, [r7, #4]
 801f678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f67a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f67c:	687a      	ldr	r2, [r7, #4]
 801f67e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801f680:	4610      	mov	r0, r2
 801f682:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801f684:	e035      	b.n	801f6f2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801f686:	687b      	ldr	r3, [r7, #4]
 801f688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f68a:	681b      	ldr	r3, [r3, #0]
 801f68c:	685b      	ldr	r3, [r3, #4]
 801f68e:	b29a      	uxth	r2, r3
 801f690:	687b      	ldr	r3, [r7, #4]
 801f692:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801f694:	687b      	ldr	r3, [r7, #4]
 801f696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f698:	b29b      	uxth	r3, r3
 801f69a:	2b00      	cmp	r3, #0
 801f69c:	d005      	beq.n	801f6aa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801f69e:	687b      	ldr	r3, [r7, #4]
 801f6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f6a2:	f043 0204 	orr.w	r2, r3, #4
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	681b      	ldr	r3, [r3, #0]
 801f6ae:	685a      	ldr	r2, [r3, #4]
 801f6b0:	687b      	ldr	r3, [r7, #4]
 801f6b2:	681b      	ldr	r3, [r3, #0]
 801f6b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f6b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f6be:	4618      	mov	r0, r3
 801f6c0:	f7fd fc5a 	bl	801cf78 <HAL_DMA_GetState>
 801f6c4:	4603      	mov	r3, r0
 801f6c6:	2b01      	cmp	r3, #1
 801f6c8:	d014      	beq.n	801f6f4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801f6ca:	687b      	ldr	r3, [r7, #4]
 801f6cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f6ce:	4a4e      	ldr	r2, [pc, #312]	; (801f808 <I2C_Slave_STOPF+0x258>)
 801f6d0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801f6d2:	687b      	ldr	r3, [r7, #4]
 801f6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f6d6:	4618      	mov	r0, r3
 801f6d8:	f7fd faa2 	bl	801cc20 <HAL_DMA_Abort_IT>
 801f6dc:	4603      	mov	r3, r0
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	d008      	beq.n	801f6f4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f6e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f6e8:	687a      	ldr	r2, [r7, #4]
 801f6ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801f6ec:	4610      	mov	r0, r2
 801f6ee:	4798      	blx	r3
 801f6f0:	e000      	b.n	801f6f4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801f6f2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801f6f4:	687b      	ldr	r3, [r7, #4]
 801f6f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f6f8:	b29b      	uxth	r3, r3
 801f6fa:	2b00      	cmp	r3, #0
 801f6fc:	d03e      	beq.n	801f77c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801f6fe:	687b      	ldr	r3, [r7, #4]
 801f700:	681b      	ldr	r3, [r3, #0]
 801f702:	695b      	ldr	r3, [r3, #20]
 801f704:	f003 0304 	and.w	r3, r3, #4
 801f708:	2b04      	cmp	r3, #4
 801f70a:	d112      	bne.n	801f732 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f70c:	687b      	ldr	r3, [r7, #4]
 801f70e:	681b      	ldr	r3, [r3, #0]
 801f710:	691a      	ldr	r2, [r3, #16]
 801f712:	687b      	ldr	r3, [r7, #4]
 801f714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f716:	b2d2      	uxtb	r2, r2
 801f718:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f71a:	687b      	ldr	r3, [r7, #4]
 801f71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f71e:	1c5a      	adds	r2, r3, #1
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f728:	b29b      	uxth	r3, r3
 801f72a:	3b01      	subs	r3, #1
 801f72c:	b29a      	uxth	r2, r3
 801f72e:	687b      	ldr	r3, [r7, #4]
 801f730:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	681b      	ldr	r3, [r3, #0]
 801f736:	695b      	ldr	r3, [r3, #20]
 801f738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f73c:	2b40      	cmp	r3, #64	; 0x40
 801f73e:	d112      	bne.n	801f766 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f740:	687b      	ldr	r3, [r7, #4]
 801f742:	681b      	ldr	r3, [r3, #0]
 801f744:	691a      	ldr	r2, [r3, #16]
 801f746:	687b      	ldr	r3, [r7, #4]
 801f748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f74a:	b2d2      	uxtb	r2, r2
 801f74c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f74e:	687b      	ldr	r3, [r7, #4]
 801f750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f752:	1c5a      	adds	r2, r3, #1
 801f754:	687b      	ldr	r3, [r7, #4]
 801f756:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f75c:	b29b      	uxth	r3, r3
 801f75e:	3b01      	subs	r3, #1
 801f760:	b29a      	uxth	r2, r3
 801f762:	687b      	ldr	r3, [r7, #4]
 801f764:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801f766:	687b      	ldr	r3, [r7, #4]
 801f768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f76a:	b29b      	uxth	r3, r3
 801f76c:	2b00      	cmp	r3, #0
 801f76e:	d005      	beq.n	801f77c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801f770:	687b      	ldr	r3, [r7, #4]
 801f772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f774:	f043 0204 	orr.w	r2, r3, #4
 801f778:	687b      	ldr	r3, [r7, #4]
 801f77a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801f77c:	687b      	ldr	r3, [r7, #4]
 801f77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f780:	2b00      	cmp	r3, #0
 801f782:	d003      	beq.n	801f78c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801f784:	6878      	ldr	r0, [r7, #4]
 801f786:	f000 f8b3 	bl	801f8f0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801f78a:	e039      	b.n	801f800 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801f78c:	7bfb      	ldrb	r3, [r7, #15]
 801f78e:	2b2a      	cmp	r3, #42	; 0x2a
 801f790:	d109      	bne.n	801f7a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801f792:	687b      	ldr	r3, [r7, #4]
 801f794:	2200      	movs	r2, #0
 801f796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f798:	687b      	ldr	r3, [r7, #4]
 801f79a:	2228      	movs	r2, #40	; 0x28
 801f79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f7a0:	6878      	ldr	r0, [r7, #4]
 801f7a2:	f7ff f83b 	bl	801e81c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801f7a6:	687b      	ldr	r3, [r7, #4]
 801f7a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f7ac:	b2db      	uxtb	r3, r3
 801f7ae:	2b28      	cmp	r3, #40	; 0x28
 801f7b0:	d111      	bne.n	801f7d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801f7b2:	687b      	ldr	r3, [r7, #4]
 801f7b4:	4a15      	ldr	r2, [pc, #84]	; (801f80c <I2C_Slave_STOPF+0x25c>)
 801f7b6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 801f7b8:	687b      	ldr	r3, [r7, #4]
 801f7ba:	2200      	movs	r2, #0
 801f7bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801f7be:	687b      	ldr	r3, [r7, #4]
 801f7c0:	2220      	movs	r2, #32
 801f7c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	2200      	movs	r2, #0
 801f7ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801f7ce:	6878      	ldr	r0, [r7, #4]
 801f7d0:	f7ff f83c 	bl	801e84c <HAL_I2C_ListenCpltCallback>
}
 801f7d4:	e014      	b.n	801f800 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801f7d6:	687b      	ldr	r3, [r7, #4]
 801f7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f7da:	2b22      	cmp	r3, #34	; 0x22
 801f7dc:	d002      	beq.n	801f7e4 <I2C_Slave_STOPF+0x234>
 801f7de:	7bfb      	ldrb	r3, [r7, #15]
 801f7e0:	2b22      	cmp	r3, #34	; 0x22
 801f7e2:	d10d      	bne.n	801f800 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 801f7e4:	687b      	ldr	r3, [r7, #4]
 801f7e6:	2200      	movs	r2, #0
 801f7e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801f7ea:	687b      	ldr	r3, [r7, #4]
 801f7ec:	2220      	movs	r2, #32
 801f7ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801f7f2:	687b      	ldr	r3, [r7, #4]
 801f7f4:	2200      	movs	r2, #0
 801f7f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f7fa:	6878      	ldr	r0, [r7, #4]
 801f7fc:	f7ff f80e 	bl	801e81c <HAL_I2C_SlaveRxCpltCallback>
}
 801f800:	bf00      	nop
 801f802:	3710      	adds	r7, #16
 801f804:	46bd      	mov	sp, r7
 801f806:	bd80      	pop	{r7, pc}
 801f808:	08020075 	.word	0x08020075
 801f80c:	ffff0000 	.word	0xffff0000

0801f810 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 801f810:	b580      	push	{r7, lr}
 801f812:	b084      	sub	sp, #16
 801f814:	af00      	add	r7, sp, #0
 801f816:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f818:	687b      	ldr	r3, [r7, #4]
 801f81a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f81e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801f820:	687b      	ldr	r3, [r7, #4]
 801f822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f824:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801f826:	68bb      	ldr	r3, [r7, #8]
 801f828:	2b08      	cmp	r3, #8
 801f82a:	d002      	beq.n	801f832 <I2C_Slave_AF+0x22>
 801f82c:	68bb      	ldr	r3, [r7, #8]
 801f82e:	2b20      	cmp	r3, #32
 801f830:	d129      	bne.n	801f886 <I2C_Slave_AF+0x76>
 801f832:	7bfb      	ldrb	r3, [r7, #15]
 801f834:	2b28      	cmp	r3, #40	; 0x28
 801f836:	d126      	bne.n	801f886 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801f838:	687b      	ldr	r3, [r7, #4]
 801f83a:	4a2c      	ldr	r2, [pc, #176]	; (801f8ec <I2C_Slave_AF+0xdc>)
 801f83c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f83e:	687b      	ldr	r3, [r7, #4]
 801f840:	681b      	ldr	r3, [r3, #0]
 801f842:	685a      	ldr	r2, [r3, #4]
 801f844:	687b      	ldr	r3, [r7, #4]
 801f846:	681b      	ldr	r3, [r3, #0]
 801f848:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f84c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f84e:	687b      	ldr	r3, [r7, #4]
 801f850:	681b      	ldr	r3, [r3, #0]
 801f852:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f856:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f858:	687b      	ldr	r3, [r7, #4]
 801f85a:	681b      	ldr	r3, [r3, #0]
 801f85c:	681a      	ldr	r2, [r3, #0]
 801f85e:	687b      	ldr	r3, [r7, #4]
 801f860:	681b      	ldr	r3, [r3, #0]
 801f862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f866:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 801f868:	687b      	ldr	r3, [r7, #4]
 801f86a:	2200      	movs	r2, #0
 801f86c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801f86e:	687b      	ldr	r3, [r7, #4]
 801f870:	2220      	movs	r2, #32
 801f872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	2200      	movs	r2, #0
 801f87a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801f87e:	6878      	ldr	r0, [r7, #4]
 801f880:	f7fe ffe4 	bl	801e84c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 801f884:	e02e      	b.n	801f8e4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801f886:	7bfb      	ldrb	r3, [r7, #15]
 801f888:	2b21      	cmp	r3, #33	; 0x21
 801f88a:	d126      	bne.n	801f8da <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	4a17      	ldr	r2, [pc, #92]	; (801f8ec <I2C_Slave_AF+0xdc>)
 801f890:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801f892:	687b      	ldr	r3, [r7, #4]
 801f894:	2221      	movs	r2, #33	; 0x21
 801f896:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801f898:	687b      	ldr	r3, [r7, #4]
 801f89a:	2220      	movs	r2, #32
 801f89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f8a0:	687b      	ldr	r3, [r7, #4]
 801f8a2:	2200      	movs	r2, #0
 801f8a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f8a8:	687b      	ldr	r3, [r7, #4]
 801f8aa:	681b      	ldr	r3, [r3, #0]
 801f8ac:	685a      	ldr	r2, [r3, #4]
 801f8ae:	687b      	ldr	r3, [r7, #4]
 801f8b0:	681b      	ldr	r3, [r3, #0]
 801f8b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f8b6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f8b8:	687b      	ldr	r3, [r7, #4]
 801f8ba:	681b      	ldr	r3, [r3, #0]
 801f8bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f8c0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f8c2:	687b      	ldr	r3, [r7, #4]
 801f8c4:	681b      	ldr	r3, [r3, #0]
 801f8c6:	681a      	ldr	r2, [r3, #0]
 801f8c8:	687b      	ldr	r3, [r7, #4]
 801f8ca:	681b      	ldr	r3, [r3, #0]
 801f8cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f8d0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801f8d2:	6878      	ldr	r0, [r7, #4]
 801f8d4:	f7fe ff98 	bl	801e808 <HAL_I2C_SlaveTxCpltCallback>
}
 801f8d8:	e004      	b.n	801f8e4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f8da:	687b      	ldr	r3, [r7, #4]
 801f8dc:	681b      	ldr	r3, [r3, #0]
 801f8de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f8e2:	615a      	str	r2, [r3, #20]
}
 801f8e4:	bf00      	nop
 801f8e6:	3710      	adds	r7, #16
 801f8e8:	46bd      	mov	sp, r7
 801f8ea:	bd80      	pop	{r7, pc}
 801f8ec:	ffff0000 	.word	0xffff0000

0801f8f0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 801f8f0:	b580      	push	{r7, lr}
 801f8f2:	b084      	sub	sp, #16
 801f8f4:	af00      	add	r7, sp, #0
 801f8f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f8f8:	687b      	ldr	r3, [r7, #4]
 801f8fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f8fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f906:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801f908:	7bbb      	ldrb	r3, [r7, #14]
 801f90a:	2b10      	cmp	r3, #16
 801f90c:	d002      	beq.n	801f914 <I2C_ITError+0x24>
 801f90e:	7bbb      	ldrb	r3, [r7, #14]
 801f910:	2b40      	cmp	r3, #64	; 0x40
 801f912:	d10a      	bne.n	801f92a <I2C_ITError+0x3a>
 801f914:	7bfb      	ldrb	r3, [r7, #15]
 801f916:	2b22      	cmp	r3, #34	; 0x22
 801f918:	d107      	bne.n	801f92a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801f91a:	687b      	ldr	r3, [r7, #4]
 801f91c:	681b      	ldr	r3, [r3, #0]
 801f91e:	681a      	ldr	r2, [r3, #0]
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	681b      	ldr	r3, [r3, #0]
 801f924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f928:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801f92a:	7bfb      	ldrb	r3, [r7, #15]
 801f92c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801f930:	2b28      	cmp	r3, #40	; 0x28
 801f932:	d107      	bne.n	801f944 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801f934:	687b      	ldr	r3, [r7, #4]
 801f936:	2200      	movs	r2, #0
 801f938:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801f93a:	687b      	ldr	r3, [r7, #4]
 801f93c:	2228      	movs	r2, #40	; 0x28
 801f93e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801f942:	e015      	b.n	801f970 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801f944:	687b      	ldr	r3, [r7, #4]
 801f946:	681b      	ldr	r3, [r3, #0]
 801f948:	685b      	ldr	r3, [r3, #4]
 801f94a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f94e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f952:	d00a      	beq.n	801f96a <I2C_ITError+0x7a>
 801f954:	7bfb      	ldrb	r3, [r7, #15]
 801f956:	2b60      	cmp	r3, #96	; 0x60
 801f958:	d007      	beq.n	801f96a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801f95a:	687b      	ldr	r3, [r7, #4]
 801f95c:	2220      	movs	r2, #32
 801f95e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801f962:	687b      	ldr	r3, [r7, #4]
 801f964:	2200      	movs	r2, #0
 801f966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801f96a:	687b      	ldr	r3, [r7, #4]
 801f96c:	2200      	movs	r2, #0
 801f96e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801f970:	687b      	ldr	r3, [r7, #4]
 801f972:	681b      	ldr	r3, [r3, #0]
 801f974:	685b      	ldr	r3, [r3, #4]
 801f976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f97a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f97e:	d162      	bne.n	801fa46 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 801f980:	687b      	ldr	r3, [r7, #4]
 801f982:	681b      	ldr	r3, [r3, #0]
 801f984:	685a      	ldr	r2, [r3, #4]
 801f986:	687b      	ldr	r3, [r7, #4]
 801f988:	681b      	ldr	r3, [r3, #0]
 801f98a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f98e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 801f990:	687b      	ldr	r3, [r7, #4]
 801f992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f998:	b2db      	uxtb	r3, r3
 801f99a:	2b01      	cmp	r3, #1
 801f99c:	d020      	beq.n	801f9e0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801f99e:	687b      	ldr	r3, [r7, #4]
 801f9a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f9a2:	4a6a      	ldr	r2, [pc, #424]	; (801fb4c <I2C_ITError+0x25c>)
 801f9a4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801f9a6:	687b      	ldr	r3, [r7, #4]
 801f9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f9aa:	4618      	mov	r0, r3
 801f9ac:	f7fd f938 	bl	801cc20 <HAL_DMA_Abort_IT>
 801f9b0:	4603      	mov	r3, r0
 801f9b2:	2b00      	cmp	r3, #0
 801f9b4:	f000 8089 	beq.w	801faca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801f9b8:	687b      	ldr	r3, [r7, #4]
 801f9ba:	681b      	ldr	r3, [r3, #0]
 801f9bc:	681a      	ldr	r2, [r3, #0]
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	681b      	ldr	r3, [r3, #0]
 801f9c2:	f022 0201 	bic.w	r2, r2, #1
 801f9c6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801f9c8:	687b      	ldr	r3, [r7, #4]
 801f9ca:	2220      	movs	r2, #32
 801f9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801f9d0:	687b      	ldr	r3, [r7, #4]
 801f9d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f9d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f9d6:	687a      	ldr	r2, [r7, #4]
 801f9d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801f9da:	4610      	mov	r0, r2
 801f9dc:	4798      	blx	r3
 801f9de:	e074      	b.n	801faca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801f9e0:	687b      	ldr	r3, [r7, #4]
 801f9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f9e4:	4a59      	ldr	r2, [pc, #356]	; (801fb4c <I2C_ITError+0x25c>)
 801f9e6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f9ec:	4618      	mov	r0, r3
 801f9ee:	f7fd f917 	bl	801cc20 <HAL_DMA_Abort_IT>
 801f9f2:	4603      	mov	r3, r0
 801f9f4:	2b00      	cmp	r3, #0
 801f9f6:	d068      	beq.n	801faca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f9f8:	687b      	ldr	r3, [r7, #4]
 801f9fa:	681b      	ldr	r3, [r3, #0]
 801f9fc:	695b      	ldr	r3, [r3, #20]
 801f9fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fa02:	2b40      	cmp	r3, #64	; 0x40
 801fa04:	d10b      	bne.n	801fa1e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801fa06:	687b      	ldr	r3, [r7, #4]
 801fa08:	681b      	ldr	r3, [r3, #0]
 801fa0a:	691a      	ldr	r2, [r3, #16]
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa10:	b2d2      	uxtb	r2, r2
 801fa12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801fa14:	687b      	ldr	r3, [r7, #4]
 801fa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa18:	1c5a      	adds	r2, r3, #1
 801fa1a:	687b      	ldr	r3, [r7, #4]
 801fa1c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	681b      	ldr	r3, [r3, #0]
 801fa22:	681a      	ldr	r2, [r3, #0]
 801fa24:	687b      	ldr	r3, [r7, #4]
 801fa26:	681b      	ldr	r3, [r3, #0]
 801fa28:	f022 0201 	bic.w	r2, r2, #1
 801fa2c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	2220      	movs	r2, #32
 801fa32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801fa36:	687b      	ldr	r3, [r7, #4]
 801fa38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fa3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fa3c:	687a      	ldr	r2, [r7, #4]
 801fa3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801fa40:	4610      	mov	r0, r2
 801fa42:	4798      	blx	r3
 801fa44:	e041      	b.n	801faca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801fa46:	687b      	ldr	r3, [r7, #4]
 801fa48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fa4c:	b2db      	uxtb	r3, r3
 801fa4e:	2b60      	cmp	r3, #96	; 0x60
 801fa50:	d125      	bne.n	801fa9e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801fa52:	687b      	ldr	r3, [r7, #4]
 801fa54:	2220      	movs	r2, #32
 801fa56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801fa5a:	687b      	ldr	r3, [r7, #4]
 801fa5c:	2200      	movs	r2, #0
 801fa5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801fa60:	687b      	ldr	r3, [r7, #4]
 801fa62:	681b      	ldr	r3, [r3, #0]
 801fa64:	695b      	ldr	r3, [r3, #20]
 801fa66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fa6a:	2b40      	cmp	r3, #64	; 0x40
 801fa6c:	d10b      	bne.n	801fa86 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801fa6e:	687b      	ldr	r3, [r7, #4]
 801fa70:	681b      	ldr	r3, [r3, #0]
 801fa72:	691a      	ldr	r2, [r3, #16]
 801fa74:	687b      	ldr	r3, [r7, #4]
 801fa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa78:	b2d2      	uxtb	r2, r2
 801fa7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801fa7c:	687b      	ldr	r3, [r7, #4]
 801fa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa80:	1c5a      	adds	r2, r3, #1
 801fa82:	687b      	ldr	r3, [r7, #4]
 801fa84:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801fa86:	687b      	ldr	r3, [r7, #4]
 801fa88:	681b      	ldr	r3, [r3, #0]
 801fa8a:	681a      	ldr	r2, [r3, #0]
 801fa8c:	687b      	ldr	r3, [r7, #4]
 801fa8e:	681b      	ldr	r3, [r3, #0]
 801fa90:	f022 0201 	bic.w	r2, r2, #1
 801fa94:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801fa96:	6878      	ldr	r0, [r7, #4]
 801fa98:	f7fe feec 	bl	801e874 <HAL_I2C_AbortCpltCallback>
 801fa9c:	e015      	b.n	801faca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801fa9e:	687b      	ldr	r3, [r7, #4]
 801faa0:	681b      	ldr	r3, [r3, #0]
 801faa2:	695b      	ldr	r3, [r3, #20]
 801faa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801faa8:	2b40      	cmp	r3, #64	; 0x40
 801faaa:	d10b      	bne.n	801fac4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801faac:	687b      	ldr	r3, [r7, #4]
 801faae:	681b      	ldr	r3, [r3, #0]
 801fab0:	691a      	ldr	r2, [r3, #16]
 801fab2:	687b      	ldr	r3, [r7, #4]
 801fab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fab6:	b2d2      	uxtb	r2, r2
 801fab8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801faba:	687b      	ldr	r3, [r7, #4]
 801fabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fabe:	1c5a      	adds	r2, r3, #1
 801fac0:	687b      	ldr	r3, [r7, #4]
 801fac2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801fac4:	6878      	ldr	r0, [r7, #4]
 801fac6:	f7fe fecb 	bl	801e860 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801faca:	687b      	ldr	r3, [r7, #4]
 801facc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801face:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801fad0:	68bb      	ldr	r3, [r7, #8]
 801fad2:	f003 0301 	and.w	r3, r3, #1
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	d10e      	bne.n	801faf8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801fada:	68bb      	ldr	r3, [r7, #8]
 801fadc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801fae0:	2b00      	cmp	r3, #0
 801fae2:	d109      	bne.n	801faf8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801fae4:	68bb      	ldr	r3, [r7, #8]
 801fae6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801faea:	2b00      	cmp	r3, #0
 801faec:	d104      	bne.n	801faf8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801faee:	68bb      	ldr	r3, [r7, #8]
 801faf0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801faf4:	2b00      	cmp	r3, #0
 801faf6:	d007      	beq.n	801fb08 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801faf8:	687b      	ldr	r3, [r7, #4]
 801fafa:	681b      	ldr	r3, [r3, #0]
 801fafc:	685a      	ldr	r2, [r3, #4]
 801fafe:	687b      	ldr	r3, [r7, #4]
 801fb00:	681b      	ldr	r3, [r3, #0]
 801fb02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801fb06:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801fb08:	687b      	ldr	r3, [r7, #4]
 801fb0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fb0e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 801fb10:	687b      	ldr	r3, [r7, #4]
 801fb12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fb14:	f003 0304 	and.w	r3, r3, #4
 801fb18:	2b04      	cmp	r3, #4
 801fb1a:	d113      	bne.n	801fb44 <I2C_ITError+0x254>
 801fb1c:	7bfb      	ldrb	r3, [r7, #15]
 801fb1e:	2b28      	cmp	r3, #40	; 0x28
 801fb20:	d110      	bne.n	801fb44 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801fb22:	687b      	ldr	r3, [r7, #4]
 801fb24:	4a0a      	ldr	r2, [pc, #40]	; (801fb50 <I2C_ITError+0x260>)
 801fb26:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 801fb28:	687b      	ldr	r3, [r7, #4]
 801fb2a:	2200      	movs	r2, #0
 801fb2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801fb2e:	687b      	ldr	r3, [r7, #4]
 801fb30:	2220      	movs	r2, #32
 801fb32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	2200      	movs	r2, #0
 801fb3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801fb3e:	6878      	ldr	r0, [r7, #4]
 801fb40:	f7fe fe84 	bl	801e84c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801fb44:	bf00      	nop
 801fb46:	3710      	adds	r7, #16
 801fb48:	46bd      	mov	sp, r7
 801fb4a:	bd80      	pop	{r7, pc}
 801fb4c:	08020075 	.word	0x08020075
 801fb50:	ffff0000 	.word	0xffff0000

0801fb54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801fb54:	b580      	push	{r7, lr}
 801fb56:	b088      	sub	sp, #32
 801fb58:	af02      	add	r7, sp, #8
 801fb5a:	60f8      	str	r0, [r7, #12]
 801fb5c:	4608      	mov	r0, r1
 801fb5e:	4611      	mov	r1, r2
 801fb60:	461a      	mov	r2, r3
 801fb62:	4603      	mov	r3, r0
 801fb64:	817b      	strh	r3, [r7, #10]
 801fb66:	460b      	mov	r3, r1
 801fb68:	813b      	strh	r3, [r7, #8]
 801fb6a:	4613      	mov	r3, r2
 801fb6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801fb6e:	68fb      	ldr	r3, [r7, #12]
 801fb70:	681b      	ldr	r3, [r3, #0]
 801fb72:	681a      	ldr	r2, [r3, #0]
 801fb74:	68fb      	ldr	r3, [r7, #12]
 801fb76:	681b      	ldr	r3, [r3, #0]
 801fb78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fb7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801fb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb80:	9300      	str	r3, [sp, #0]
 801fb82:	6a3b      	ldr	r3, [r7, #32]
 801fb84:	2200      	movs	r2, #0
 801fb86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801fb8a:	68f8      	ldr	r0, [r7, #12]
 801fb8c:	f000 fb1a 	bl	80201c4 <I2C_WaitOnFlagUntilTimeout>
 801fb90:	4603      	mov	r3, r0
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	d00d      	beq.n	801fbb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801fb96:	68fb      	ldr	r3, [r7, #12]
 801fb98:	681b      	ldr	r3, [r3, #0]
 801fb9a:	681b      	ldr	r3, [r3, #0]
 801fb9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fba4:	d103      	bne.n	801fbae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801fba6:	68fb      	ldr	r3, [r7, #12]
 801fba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801fbac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801fbae:	2303      	movs	r3, #3
 801fbb0:	e05f      	b.n	801fc72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801fbb2:	897b      	ldrh	r3, [r7, #10]
 801fbb4:	b2db      	uxtb	r3, r3
 801fbb6:	461a      	mov	r2, r3
 801fbb8:	68fb      	ldr	r3, [r7, #12]
 801fbba:	681b      	ldr	r3, [r3, #0]
 801fbbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801fbc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801fbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbc4:	6a3a      	ldr	r2, [r7, #32]
 801fbc6:	492d      	ldr	r1, [pc, #180]	; (801fc7c <I2C_RequestMemoryWrite+0x128>)
 801fbc8:	68f8      	ldr	r0, [r7, #12]
 801fbca:	f000 fb52 	bl	8020272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801fbce:	4603      	mov	r3, r0
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	d001      	beq.n	801fbd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801fbd4:	2301      	movs	r3, #1
 801fbd6:	e04c      	b.n	801fc72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801fbd8:	2300      	movs	r3, #0
 801fbda:	617b      	str	r3, [r7, #20]
 801fbdc:	68fb      	ldr	r3, [r7, #12]
 801fbde:	681b      	ldr	r3, [r3, #0]
 801fbe0:	695b      	ldr	r3, [r3, #20]
 801fbe2:	617b      	str	r3, [r7, #20]
 801fbe4:	68fb      	ldr	r3, [r7, #12]
 801fbe6:	681b      	ldr	r3, [r3, #0]
 801fbe8:	699b      	ldr	r3, [r3, #24]
 801fbea:	617b      	str	r3, [r7, #20]
 801fbec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fbee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fbf0:	6a39      	ldr	r1, [r7, #32]
 801fbf2:	68f8      	ldr	r0, [r7, #12]
 801fbf4:	f000 fbbc 	bl	8020370 <I2C_WaitOnTXEFlagUntilTimeout>
 801fbf8:	4603      	mov	r3, r0
 801fbfa:	2b00      	cmp	r3, #0
 801fbfc:	d00d      	beq.n	801fc1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fbfe:	68fb      	ldr	r3, [r7, #12]
 801fc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fc02:	2b04      	cmp	r3, #4
 801fc04:	d107      	bne.n	801fc16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fc06:	68fb      	ldr	r3, [r7, #12]
 801fc08:	681b      	ldr	r3, [r3, #0]
 801fc0a:	681a      	ldr	r2, [r3, #0]
 801fc0c:	68fb      	ldr	r3, [r7, #12]
 801fc0e:	681b      	ldr	r3, [r3, #0]
 801fc10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fc14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801fc16:	2301      	movs	r3, #1
 801fc18:	e02b      	b.n	801fc72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801fc1a:	88fb      	ldrh	r3, [r7, #6]
 801fc1c:	2b01      	cmp	r3, #1
 801fc1e:	d105      	bne.n	801fc2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801fc20:	893b      	ldrh	r3, [r7, #8]
 801fc22:	b2da      	uxtb	r2, r3
 801fc24:	68fb      	ldr	r3, [r7, #12]
 801fc26:	681b      	ldr	r3, [r3, #0]
 801fc28:	611a      	str	r2, [r3, #16]
 801fc2a:	e021      	b.n	801fc70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801fc2c:	893b      	ldrh	r3, [r7, #8]
 801fc2e:	0a1b      	lsrs	r3, r3, #8
 801fc30:	b29b      	uxth	r3, r3
 801fc32:	b2da      	uxtb	r2, r3
 801fc34:	68fb      	ldr	r3, [r7, #12]
 801fc36:	681b      	ldr	r3, [r3, #0]
 801fc38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fc3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fc3c:	6a39      	ldr	r1, [r7, #32]
 801fc3e:	68f8      	ldr	r0, [r7, #12]
 801fc40:	f000 fb96 	bl	8020370 <I2C_WaitOnTXEFlagUntilTimeout>
 801fc44:	4603      	mov	r3, r0
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d00d      	beq.n	801fc66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fc4a:	68fb      	ldr	r3, [r7, #12]
 801fc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fc4e:	2b04      	cmp	r3, #4
 801fc50:	d107      	bne.n	801fc62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fc52:	68fb      	ldr	r3, [r7, #12]
 801fc54:	681b      	ldr	r3, [r3, #0]
 801fc56:	681a      	ldr	r2, [r3, #0]
 801fc58:	68fb      	ldr	r3, [r7, #12]
 801fc5a:	681b      	ldr	r3, [r3, #0]
 801fc5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fc60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801fc62:	2301      	movs	r3, #1
 801fc64:	e005      	b.n	801fc72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801fc66:	893b      	ldrh	r3, [r7, #8]
 801fc68:	b2da      	uxtb	r2, r3
 801fc6a:	68fb      	ldr	r3, [r7, #12]
 801fc6c:	681b      	ldr	r3, [r3, #0]
 801fc6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801fc70:	2300      	movs	r3, #0
}
 801fc72:	4618      	mov	r0, r3
 801fc74:	3718      	adds	r7, #24
 801fc76:	46bd      	mov	sp, r7
 801fc78:	bd80      	pop	{r7, pc}
 801fc7a:	bf00      	nop
 801fc7c:	00010002 	.word	0x00010002

0801fc80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801fc80:	b580      	push	{r7, lr}
 801fc82:	b088      	sub	sp, #32
 801fc84:	af02      	add	r7, sp, #8
 801fc86:	60f8      	str	r0, [r7, #12]
 801fc88:	4608      	mov	r0, r1
 801fc8a:	4611      	mov	r1, r2
 801fc8c:	461a      	mov	r2, r3
 801fc8e:	4603      	mov	r3, r0
 801fc90:	817b      	strh	r3, [r7, #10]
 801fc92:	460b      	mov	r3, r1
 801fc94:	813b      	strh	r3, [r7, #8]
 801fc96:	4613      	mov	r3, r2
 801fc98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fc9a:	68fb      	ldr	r3, [r7, #12]
 801fc9c:	681b      	ldr	r3, [r3, #0]
 801fc9e:	681a      	ldr	r2, [r3, #0]
 801fca0:	68fb      	ldr	r3, [r7, #12]
 801fca2:	681b      	ldr	r3, [r3, #0]
 801fca4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801fca8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801fcaa:	68fb      	ldr	r3, [r7, #12]
 801fcac:	681b      	ldr	r3, [r3, #0]
 801fcae:	681a      	ldr	r2, [r3, #0]
 801fcb0:	68fb      	ldr	r3, [r7, #12]
 801fcb2:	681b      	ldr	r3, [r3, #0]
 801fcb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fcb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801fcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcbc:	9300      	str	r3, [sp, #0]
 801fcbe:	6a3b      	ldr	r3, [r7, #32]
 801fcc0:	2200      	movs	r2, #0
 801fcc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801fcc6:	68f8      	ldr	r0, [r7, #12]
 801fcc8:	f000 fa7c 	bl	80201c4 <I2C_WaitOnFlagUntilTimeout>
 801fccc:	4603      	mov	r3, r0
 801fcce:	2b00      	cmp	r3, #0
 801fcd0:	d00d      	beq.n	801fcee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801fcd2:	68fb      	ldr	r3, [r7, #12]
 801fcd4:	681b      	ldr	r3, [r3, #0]
 801fcd6:	681b      	ldr	r3, [r3, #0]
 801fcd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fcdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fce0:	d103      	bne.n	801fcea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801fce2:	68fb      	ldr	r3, [r7, #12]
 801fce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801fce8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801fcea:	2303      	movs	r3, #3
 801fcec:	e0aa      	b.n	801fe44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801fcee:	897b      	ldrh	r3, [r7, #10]
 801fcf0:	b2db      	uxtb	r3, r3
 801fcf2:	461a      	mov	r2, r3
 801fcf4:	68fb      	ldr	r3, [r7, #12]
 801fcf6:	681b      	ldr	r3, [r3, #0]
 801fcf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801fcfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801fcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd00:	6a3a      	ldr	r2, [r7, #32]
 801fd02:	4952      	ldr	r1, [pc, #328]	; (801fe4c <I2C_RequestMemoryRead+0x1cc>)
 801fd04:	68f8      	ldr	r0, [r7, #12]
 801fd06:	f000 fab4 	bl	8020272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801fd0a:	4603      	mov	r3, r0
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	d001      	beq.n	801fd14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 801fd10:	2301      	movs	r3, #1
 801fd12:	e097      	b.n	801fe44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801fd14:	2300      	movs	r3, #0
 801fd16:	617b      	str	r3, [r7, #20]
 801fd18:	68fb      	ldr	r3, [r7, #12]
 801fd1a:	681b      	ldr	r3, [r3, #0]
 801fd1c:	695b      	ldr	r3, [r3, #20]
 801fd1e:	617b      	str	r3, [r7, #20]
 801fd20:	68fb      	ldr	r3, [r7, #12]
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	699b      	ldr	r3, [r3, #24]
 801fd26:	617b      	str	r3, [r7, #20]
 801fd28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fd2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd2c:	6a39      	ldr	r1, [r7, #32]
 801fd2e:	68f8      	ldr	r0, [r7, #12]
 801fd30:	f000 fb1e 	bl	8020370 <I2C_WaitOnTXEFlagUntilTimeout>
 801fd34:	4603      	mov	r3, r0
 801fd36:	2b00      	cmp	r3, #0
 801fd38:	d00d      	beq.n	801fd56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fd3a:	68fb      	ldr	r3, [r7, #12]
 801fd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fd3e:	2b04      	cmp	r3, #4
 801fd40:	d107      	bne.n	801fd52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fd42:	68fb      	ldr	r3, [r7, #12]
 801fd44:	681b      	ldr	r3, [r3, #0]
 801fd46:	681a      	ldr	r2, [r3, #0]
 801fd48:	68fb      	ldr	r3, [r7, #12]
 801fd4a:	681b      	ldr	r3, [r3, #0]
 801fd4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fd50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801fd52:	2301      	movs	r3, #1
 801fd54:	e076      	b.n	801fe44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801fd56:	88fb      	ldrh	r3, [r7, #6]
 801fd58:	2b01      	cmp	r3, #1
 801fd5a:	d105      	bne.n	801fd68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801fd5c:	893b      	ldrh	r3, [r7, #8]
 801fd5e:	b2da      	uxtb	r2, r3
 801fd60:	68fb      	ldr	r3, [r7, #12]
 801fd62:	681b      	ldr	r3, [r3, #0]
 801fd64:	611a      	str	r2, [r3, #16]
 801fd66:	e021      	b.n	801fdac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801fd68:	893b      	ldrh	r3, [r7, #8]
 801fd6a:	0a1b      	lsrs	r3, r3, #8
 801fd6c:	b29b      	uxth	r3, r3
 801fd6e:	b2da      	uxtb	r2, r3
 801fd70:	68fb      	ldr	r3, [r7, #12]
 801fd72:	681b      	ldr	r3, [r3, #0]
 801fd74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fd76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd78:	6a39      	ldr	r1, [r7, #32]
 801fd7a:	68f8      	ldr	r0, [r7, #12]
 801fd7c:	f000 faf8 	bl	8020370 <I2C_WaitOnTXEFlagUntilTimeout>
 801fd80:	4603      	mov	r3, r0
 801fd82:	2b00      	cmp	r3, #0
 801fd84:	d00d      	beq.n	801fda2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fd86:	68fb      	ldr	r3, [r7, #12]
 801fd88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fd8a:	2b04      	cmp	r3, #4
 801fd8c:	d107      	bne.n	801fd9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fd8e:	68fb      	ldr	r3, [r7, #12]
 801fd90:	681b      	ldr	r3, [r3, #0]
 801fd92:	681a      	ldr	r2, [r3, #0]
 801fd94:	68fb      	ldr	r3, [r7, #12]
 801fd96:	681b      	ldr	r3, [r3, #0]
 801fd98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fd9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801fd9e:	2301      	movs	r3, #1
 801fda0:	e050      	b.n	801fe44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801fda2:	893b      	ldrh	r3, [r7, #8]
 801fda4:	b2da      	uxtb	r2, r3
 801fda6:	68fb      	ldr	r3, [r7, #12]
 801fda8:	681b      	ldr	r3, [r3, #0]
 801fdaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fdac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fdae:	6a39      	ldr	r1, [r7, #32]
 801fdb0:	68f8      	ldr	r0, [r7, #12]
 801fdb2:	f000 fadd 	bl	8020370 <I2C_WaitOnTXEFlagUntilTimeout>
 801fdb6:	4603      	mov	r3, r0
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d00d      	beq.n	801fdd8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fdbc:	68fb      	ldr	r3, [r7, #12]
 801fdbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fdc0:	2b04      	cmp	r3, #4
 801fdc2:	d107      	bne.n	801fdd4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fdc4:	68fb      	ldr	r3, [r7, #12]
 801fdc6:	681b      	ldr	r3, [r3, #0]
 801fdc8:	681a      	ldr	r2, [r3, #0]
 801fdca:	68fb      	ldr	r3, [r7, #12]
 801fdcc:	681b      	ldr	r3, [r3, #0]
 801fdce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fdd2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801fdd4:	2301      	movs	r3, #1
 801fdd6:	e035      	b.n	801fe44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801fdd8:	68fb      	ldr	r3, [r7, #12]
 801fdda:	681b      	ldr	r3, [r3, #0]
 801fddc:	681a      	ldr	r2, [r3, #0]
 801fdde:	68fb      	ldr	r3, [r7, #12]
 801fde0:	681b      	ldr	r3, [r3, #0]
 801fde2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fde6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801fde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fdea:	9300      	str	r3, [sp, #0]
 801fdec:	6a3b      	ldr	r3, [r7, #32]
 801fdee:	2200      	movs	r2, #0
 801fdf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801fdf4:	68f8      	ldr	r0, [r7, #12]
 801fdf6:	f000 f9e5 	bl	80201c4 <I2C_WaitOnFlagUntilTimeout>
 801fdfa:	4603      	mov	r3, r0
 801fdfc:	2b00      	cmp	r3, #0
 801fdfe:	d00d      	beq.n	801fe1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801fe00:	68fb      	ldr	r3, [r7, #12]
 801fe02:	681b      	ldr	r3, [r3, #0]
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fe0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fe0e:	d103      	bne.n	801fe18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801fe10:	68fb      	ldr	r3, [r7, #12]
 801fe12:	f44f 7200 	mov.w	r2, #512	; 0x200
 801fe16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801fe18:	2303      	movs	r3, #3
 801fe1a:	e013      	b.n	801fe44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801fe1c:	897b      	ldrh	r3, [r7, #10]
 801fe1e:	b2db      	uxtb	r3, r3
 801fe20:	f043 0301 	orr.w	r3, r3, #1
 801fe24:	b2da      	uxtb	r2, r3
 801fe26:	68fb      	ldr	r3, [r7, #12]
 801fe28:	681b      	ldr	r3, [r3, #0]
 801fe2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801fe2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe2e:	6a3a      	ldr	r2, [r7, #32]
 801fe30:	4906      	ldr	r1, [pc, #24]	; (801fe4c <I2C_RequestMemoryRead+0x1cc>)
 801fe32:	68f8      	ldr	r0, [r7, #12]
 801fe34:	f000 fa1d 	bl	8020272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801fe38:	4603      	mov	r3, r0
 801fe3a:	2b00      	cmp	r3, #0
 801fe3c:	d001      	beq.n	801fe42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 801fe3e:	2301      	movs	r3, #1
 801fe40:	e000      	b.n	801fe44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801fe42:	2300      	movs	r3, #0
}
 801fe44:	4618      	mov	r0, r3
 801fe46:	3718      	adds	r7, #24
 801fe48:	46bd      	mov	sp, r7
 801fe4a:	bd80      	pop	{r7, pc}
 801fe4c:	00010002 	.word	0x00010002

0801fe50 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 801fe50:	b580      	push	{r7, lr}
 801fe52:	b086      	sub	sp, #24
 801fe54:	af00      	add	r7, sp, #0
 801fe56:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801fe58:	687b      	ldr	r3, [r7, #4]
 801fe5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fe5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801fe5e:	697b      	ldr	r3, [r7, #20]
 801fe60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fe64:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801fe66:	697b      	ldr	r3, [r7, #20]
 801fe68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fe6c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801fe6e:	697b      	ldr	r3, [r7, #20]
 801fe70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe72:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801fe74:	697b      	ldr	r3, [r7, #20]
 801fe76:	681b      	ldr	r3, [r3, #0]
 801fe78:	685a      	ldr	r2, [r3, #4]
 801fe7a:	697b      	ldr	r3, [r7, #20]
 801fe7c:	681b      	ldr	r3, [r3, #0]
 801fe7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801fe82:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801fe84:	697b      	ldr	r3, [r7, #20]
 801fe86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	d003      	beq.n	801fe94 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801fe8c:	697b      	ldr	r3, [r7, #20]
 801fe8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fe90:	2200      	movs	r2, #0
 801fe92:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801fe94:	697b      	ldr	r3, [r7, #20]
 801fe96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	d003      	beq.n	801fea4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801fe9c:	697b      	ldr	r3, [r7, #20]
 801fe9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fea0:	2200      	movs	r2, #0
 801fea2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 801fea4:	7cfb      	ldrb	r3, [r7, #19]
 801fea6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801feaa:	2b21      	cmp	r3, #33	; 0x21
 801feac:	d007      	beq.n	801febe <I2C_DMAXferCplt+0x6e>
 801feae:	7cfb      	ldrb	r3, [r7, #19]
 801feb0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801feb4:	2b22      	cmp	r3, #34	; 0x22
 801feb6:	d131      	bne.n	801ff1c <I2C_DMAXferCplt+0xcc>
 801feb8:	7cbb      	ldrb	r3, [r7, #18]
 801feba:	2b20      	cmp	r3, #32
 801febc:	d12e      	bne.n	801ff1c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801febe:	697b      	ldr	r3, [r7, #20]
 801fec0:	681b      	ldr	r3, [r3, #0]
 801fec2:	685a      	ldr	r2, [r3, #4]
 801fec4:	697b      	ldr	r3, [r7, #20]
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801fecc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 801fece:	697b      	ldr	r3, [r7, #20]
 801fed0:	2200      	movs	r2, #0
 801fed2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801fed4:	7cfb      	ldrb	r3, [r7, #19]
 801fed6:	2b29      	cmp	r3, #41	; 0x29
 801fed8:	d10a      	bne.n	801fef0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801feda:	697b      	ldr	r3, [r7, #20]
 801fedc:	2221      	movs	r2, #33	; 0x21
 801fede:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801fee0:	697b      	ldr	r3, [r7, #20]
 801fee2:	2228      	movs	r2, #40	; 0x28
 801fee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801fee8:	6978      	ldr	r0, [r7, #20]
 801feea:	f7fe fc8d 	bl	801e808 <HAL_I2C_SlaveTxCpltCallback>
 801feee:	e00c      	b.n	801ff0a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801fef0:	7cfb      	ldrb	r3, [r7, #19]
 801fef2:	2b2a      	cmp	r3, #42	; 0x2a
 801fef4:	d109      	bne.n	801ff0a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801fef6:	697b      	ldr	r3, [r7, #20]
 801fef8:	2222      	movs	r2, #34	; 0x22
 801fefa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801fefc:	697b      	ldr	r3, [r7, #20]
 801fefe:	2228      	movs	r2, #40	; 0x28
 801ff00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801ff04:	6978      	ldr	r0, [r7, #20]
 801ff06:	f7fe fc89 	bl	801e81c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801ff0a:	697b      	ldr	r3, [r7, #20]
 801ff0c:	681b      	ldr	r3, [r3, #0]
 801ff0e:	685a      	ldr	r2, [r3, #4]
 801ff10:	697b      	ldr	r3, [r7, #20]
 801ff12:	681b      	ldr	r3, [r3, #0]
 801ff14:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801ff18:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801ff1a:	e06a      	b.n	801fff2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 801ff1c:	697b      	ldr	r3, [r7, #20]
 801ff1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ff22:	b2db      	uxtb	r3, r3
 801ff24:	2b00      	cmp	r3, #0
 801ff26:	d064      	beq.n	801fff2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 801ff28:	697b      	ldr	r3, [r7, #20]
 801ff2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ff2c:	b29b      	uxth	r3, r3
 801ff2e:	2b01      	cmp	r3, #1
 801ff30:	d107      	bne.n	801ff42 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ff32:	697b      	ldr	r3, [r7, #20]
 801ff34:	681b      	ldr	r3, [r3, #0]
 801ff36:	681a      	ldr	r2, [r3, #0]
 801ff38:	697b      	ldr	r3, [r7, #20]
 801ff3a:	681b      	ldr	r3, [r3, #0]
 801ff3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ff40:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801ff42:	697b      	ldr	r3, [r7, #20]
 801ff44:	681b      	ldr	r3, [r3, #0]
 801ff46:	685a      	ldr	r2, [r3, #4]
 801ff48:	697b      	ldr	r3, [r7, #20]
 801ff4a:	681b      	ldr	r3, [r3, #0]
 801ff4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801ff50:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801ff52:	68fb      	ldr	r3, [r7, #12]
 801ff54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801ff58:	d009      	beq.n	801ff6e <I2C_DMAXferCplt+0x11e>
 801ff5a:	68fb      	ldr	r3, [r7, #12]
 801ff5c:	2b08      	cmp	r3, #8
 801ff5e:	d006      	beq.n	801ff6e <I2C_DMAXferCplt+0x11e>
 801ff60:	68fb      	ldr	r3, [r7, #12]
 801ff62:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801ff66:	d002      	beq.n	801ff6e <I2C_DMAXferCplt+0x11e>
 801ff68:	68fb      	ldr	r3, [r7, #12]
 801ff6a:	2b20      	cmp	r3, #32
 801ff6c:	d107      	bne.n	801ff7e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ff6e:	697b      	ldr	r3, [r7, #20]
 801ff70:	681b      	ldr	r3, [r3, #0]
 801ff72:	681a      	ldr	r2, [r3, #0]
 801ff74:	697b      	ldr	r3, [r7, #20]
 801ff76:	681b      	ldr	r3, [r3, #0]
 801ff78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ff7c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801ff7e:	697b      	ldr	r3, [r7, #20]
 801ff80:	681b      	ldr	r3, [r3, #0]
 801ff82:	685a      	ldr	r2, [r3, #4]
 801ff84:	697b      	ldr	r3, [r7, #20]
 801ff86:	681b      	ldr	r3, [r3, #0]
 801ff88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801ff8c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801ff8e:	697b      	ldr	r3, [r7, #20]
 801ff90:	681b      	ldr	r3, [r3, #0]
 801ff92:	685a      	ldr	r2, [r3, #4]
 801ff94:	697b      	ldr	r3, [r7, #20]
 801ff96:	681b      	ldr	r3, [r3, #0]
 801ff98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ff9c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 801ff9e:	697b      	ldr	r3, [r7, #20]
 801ffa0:	2200      	movs	r2, #0
 801ffa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801ffa4:	697b      	ldr	r3, [r7, #20]
 801ffa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	d003      	beq.n	801ffb4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 801ffac:	6978      	ldr	r0, [r7, #20]
 801ffae:	f7fe fc57 	bl	801e860 <HAL_I2C_ErrorCallback>
}
 801ffb2:	e01e      	b.n	801fff2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 801ffb4:	697b      	ldr	r3, [r7, #20]
 801ffb6:	2220      	movs	r2, #32
 801ffb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ffbc:	697b      	ldr	r3, [r7, #20]
 801ffbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ffc2:	b2db      	uxtb	r3, r3
 801ffc4:	2b40      	cmp	r3, #64	; 0x40
 801ffc6:	d10a      	bne.n	801ffde <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ffc8:	697b      	ldr	r3, [r7, #20]
 801ffca:	2200      	movs	r2, #0
 801ffcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 801ffd0:	697b      	ldr	r3, [r7, #20]
 801ffd2:	2200      	movs	r2, #0
 801ffd4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 801ffd6:	6978      	ldr	r0, [r7, #20]
 801ffd8:	f7e1 fd30 	bl	8001a3c <HAL_I2C_MemRxCpltCallback>
}
 801ffdc:	e009      	b.n	801fff2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ffde:	697b      	ldr	r3, [r7, #20]
 801ffe0:	2200      	movs	r2, #0
 801ffe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801ffe6:	697b      	ldr	r3, [r7, #20]
 801ffe8:	2212      	movs	r2, #18
 801ffea:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 801ffec:	6978      	ldr	r0, [r7, #20]
 801ffee:	f7e1 fd3b 	bl	8001a68 <HAL_I2C_MasterRxCpltCallback>
}
 801fff2:	bf00      	nop
 801fff4:	3718      	adds	r7, #24
 801fff6:	46bd      	mov	sp, r7
 801fff8:	bd80      	pop	{r7, pc}

0801fffa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801fffa:	b580      	push	{r7, lr}
 801fffc:	b084      	sub	sp, #16
 801fffe:	af00      	add	r7, sp, #0
 8020000:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020006:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8020008:	68fb      	ldr	r3, [r7, #12]
 802000a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802000c:	2b00      	cmp	r3, #0
 802000e:	d003      	beq.n	8020018 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8020010:	68fb      	ldr	r3, [r7, #12]
 8020012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020014:	2200      	movs	r2, #0
 8020016:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8020018:	68fb      	ldr	r3, [r7, #12]
 802001a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802001c:	2b00      	cmp	r3, #0
 802001e:	d003      	beq.n	8020028 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8020020:	68fb      	ldr	r3, [r7, #12]
 8020022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020024:	2200      	movs	r2, #0
 8020026:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8020028:	6878      	ldr	r0, [r7, #4]
 802002a:	f7fc ffb3 	bl	801cf94 <HAL_DMA_GetError>
 802002e:	4603      	mov	r3, r0
 8020030:	2b02      	cmp	r3, #2
 8020032:	d01b      	beq.n	802006c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8020034:	68fb      	ldr	r3, [r7, #12]
 8020036:	681b      	ldr	r3, [r3, #0]
 8020038:	681a      	ldr	r2, [r3, #0]
 802003a:	68fb      	ldr	r3, [r7, #12]
 802003c:	681b      	ldr	r3, [r3, #0]
 802003e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020042:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8020044:	68fb      	ldr	r3, [r7, #12]
 8020046:	2200      	movs	r2, #0
 8020048:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 802004a:	68fb      	ldr	r3, [r7, #12]
 802004c:	2220      	movs	r2, #32
 802004e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8020052:	68fb      	ldr	r3, [r7, #12]
 8020054:	2200      	movs	r2, #0
 8020056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 802005a:	68fb      	ldr	r3, [r7, #12]
 802005c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802005e:	f043 0210 	orr.w	r2, r3, #16
 8020062:	68fb      	ldr	r3, [r7, #12]
 8020064:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8020066:	68f8      	ldr	r0, [r7, #12]
 8020068:	f7fe fbfa 	bl	801e860 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 802006c:	bf00      	nop
 802006e:	3710      	adds	r7, #16
 8020070:	46bd      	mov	sp, r7
 8020072:	bd80      	pop	{r7, pc}

08020074 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8020074:	b580      	push	{r7, lr}
 8020076:	b086      	sub	sp, #24
 8020078:	af00      	add	r7, sp, #0
 802007a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802007c:	2300      	movs	r3, #0
 802007e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8020080:	687b      	ldr	r3, [r7, #4]
 8020082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020084:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8020086:	697b      	ldr	r3, [r7, #20]
 8020088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802008c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 802008e:	4b4b      	ldr	r3, [pc, #300]	; (80201bc <I2C_DMAAbort+0x148>)
 8020090:	681b      	ldr	r3, [r3, #0]
 8020092:	08db      	lsrs	r3, r3, #3
 8020094:	4a4a      	ldr	r2, [pc, #296]	; (80201c0 <I2C_DMAAbort+0x14c>)
 8020096:	fba2 2303 	umull	r2, r3, r2, r3
 802009a:	0a1a      	lsrs	r2, r3, #8
 802009c:	4613      	mov	r3, r2
 802009e:	009b      	lsls	r3, r3, #2
 80200a0:	4413      	add	r3, r2
 80200a2:	00da      	lsls	r2, r3, #3
 80200a4:	1ad3      	subs	r3, r2, r3
 80200a6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80200a8:	68fb      	ldr	r3, [r7, #12]
 80200aa:	2b00      	cmp	r3, #0
 80200ac:	d106      	bne.n	80200bc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80200ae:	697b      	ldr	r3, [r7, #20]
 80200b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80200b2:	f043 0220 	orr.w	r2, r3, #32
 80200b6:	697b      	ldr	r3, [r7, #20]
 80200b8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80200ba:	e00a      	b.n	80200d2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80200bc:	68fb      	ldr	r3, [r7, #12]
 80200be:	3b01      	subs	r3, #1
 80200c0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80200c2:	697b      	ldr	r3, [r7, #20]
 80200c4:	681b      	ldr	r3, [r3, #0]
 80200c6:	681b      	ldr	r3, [r3, #0]
 80200c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80200cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80200d0:	d0ea      	beq.n	80200a8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80200d2:	697b      	ldr	r3, [r7, #20]
 80200d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80200d6:	2b00      	cmp	r3, #0
 80200d8:	d003      	beq.n	80200e2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80200da:	697b      	ldr	r3, [r7, #20]
 80200dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80200de:	2200      	movs	r2, #0
 80200e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80200e2:	697b      	ldr	r3, [r7, #20]
 80200e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80200e6:	2b00      	cmp	r3, #0
 80200e8:	d003      	beq.n	80200f2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80200ea:	697b      	ldr	r3, [r7, #20]
 80200ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80200ee:	2200      	movs	r2, #0
 80200f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80200f2:	697b      	ldr	r3, [r7, #20]
 80200f4:	681b      	ldr	r3, [r3, #0]
 80200f6:	681a      	ldr	r2, [r3, #0]
 80200f8:	697b      	ldr	r3, [r7, #20]
 80200fa:	681b      	ldr	r3, [r3, #0]
 80200fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020100:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8020102:	697b      	ldr	r3, [r7, #20]
 8020104:	2200      	movs	r2, #0
 8020106:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8020108:	697b      	ldr	r3, [r7, #20]
 802010a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802010c:	2b00      	cmp	r3, #0
 802010e:	d003      	beq.n	8020118 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8020110:	697b      	ldr	r3, [r7, #20]
 8020112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020114:	2200      	movs	r2, #0
 8020116:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8020118:	697b      	ldr	r3, [r7, #20]
 802011a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802011c:	2b00      	cmp	r3, #0
 802011e:	d003      	beq.n	8020128 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8020120:	697b      	ldr	r3, [r7, #20]
 8020122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020124:	2200      	movs	r2, #0
 8020126:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8020128:	697b      	ldr	r3, [r7, #20]
 802012a:	681b      	ldr	r3, [r3, #0]
 802012c:	681a      	ldr	r2, [r3, #0]
 802012e:	697b      	ldr	r3, [r7, #20]
 8020130:	681b      	ldr	r3, [r3, #0]
 8020132:	f022 0201 	bic.w	r2, r2, #1
 8020136:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8020138:	697b      	ldr	r3, [r7, #20]
 802013a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802013e:	b2db      	uxtb	r3, r3
 8020140:	2b60      	cmp	r3, #96	; 0x60
 8020142:	d10e      	bne.n	8020162 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8020144:	697b      	ldr	r3, [r7, #20]
 8020146:	2220      	movs	r2, #32
 8020148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 802014c:	697b      	ldr	r3, [r7, #20]
 802014e:	2200      	movs	r2, #0
 8020150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8020154:	697b      	ldr	r3, [r7, #20]
 8020156:	2200      	movs	r2, #0
 8020158:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 802015a:	6978      	ldr	r0, [r7, #20]
 802015c:	f7fe fb8a 	bl	801e874 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8020160:	e027      	b.n	80201b2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8020162:	7cfb      	ldrb	r3, [r7, #19]
 8020164:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8020168:	2b28      	cmp	r3, #40	; 0x28
 802016a:	d117      	bne.n	802019c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 802016c:	697b      	ldr	r3, [r7, #20]
 802016e:	681b      	ldr	r3, [r3, #0]
 8020170:	681a      	ldr	r2, [r3, #0]
 8020172:	697b      	ldr	r3, [r7, #20]
 8020174:	681b      	ldr	r3, [r3, #0]
 8020176:	f042 0201 	orr.w	r2, r2, #1
 802017a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802017c:	697b      	ldr	r3, [r7, #20]
 802017e:	681b      	ldr	r3, [r3, #0]
 8020180:	681a      	ldr	r2, [r3, #0]
 8020182:	697b      	ldr	r3, [r7, #20]
 8020184:	681b      	ldr	r3, [r3, #0]
 8020186:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802018a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 802018c:	697b      	ldr	r3, [r7, #20]
 802018e:	2200      	movs	r2, #0
 8020190:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8020192:	697b      	ldr	r3, [r7, #20]
 8020194:	2228      	movs	r2, #40	; 0x28
 8020196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 802019a:	e007      	b.n	80201ac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 802019c:	697b      	ldr	r3, [r7, #20]
 802019e:	2220      	movs	r2, #32
 80201a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80201a4:	697b      	ldr	r3, [r7, #20]
 80201a6:	2200      	movs	r2, #0
 80201a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80201ac:	6978      	ldr	r0, [r7, #20]
 80201ae:	f7fe fb57 	bl	801e860 <HAL_I2C_ErrorCallback>
}
 80201b2:	bf00      	nop
 80201b4:	3718      	adds	r7, #24
 80201b6:	46bd      	mov	sp, r7
 80201b8:	bd80      	pop	{r7, pc}
 80201ba:	bf00      	nop
 80201bc:	20000020 	.word	0x20000020
 80201c0:	14f8b589 	.word	0x14f8b589

080201c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80201c4:	b580      	push	{r7, lr}
 80201c6:	b084      	sub	sp, #16
 80201c8:	af00      	add	r7, sp, #0
 80201ca:	60f8      	str	r0, [r7, #12]
 80201cc:	60b9      	str	r1, [r7, #8]
 80201ce:	603b      	str	r3, [r7, #0]
 80201d0:	4613      	mov	r3, r2
 80201d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80201d4:	e025      	b.n	8020222 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80201d6:	683b      	ldr	r3, [r7, #0]
 80201d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80201dc:	d021      	beq.n	8020222 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80201de:	f7fb fe57 	bl	801be90 <HAL_GetTick>
 80201e2:	4602      	mov	r2, r0
 80201e4:	69bb      	ldr	r3, [r7, #24]
 80201e6:	1ad3      	subs	r3, r2, r3
 80201e8:	683a      	ldr	r2, [r7, #0]
 80201ea:	429a      	cmp	r2, r3
 80201ec:	d302      	bcc.n	80201f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80201ee:	683b      	ldr	r3, [r7, #0]
 80201f0:	2b00      	cmp	r3, #0
 80201f2:	d116      	bne.n	8020222 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80201f4:	68fb      	ldr	r3, [r7, #12]
 80201f6:	2200      	movs	r2, #0
 80201f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80201fa:	68fb      	ldr	r3, [r7, #12]
 80201fc:	2220      	movs	r2, #32
 80201fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8020202:	68fb      	ldr	r3, [r7, #12]
 8020204:	2200      	movs	r2, #0
 8020206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 802020a:	68fb      	ldr	r3, [r7, #12]
 802020c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802020e:	f043 0220 	orr.w	r2, r3, #32
 8020212:	68fb      	ldr	r3, [r7, #12]
 8020214:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8020216:	68fb      	ldr	r3, [r7, #12]
 8020218:	2200      	movs	r2, #0
 802021a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802021e:	2301      	movs	r3, #1
 8020220:	e023      	b.n	802026a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8020222:	68bb      	ldr	r3, [r7, #8]
 8020224:	0c1b      	lsrs	r3, r3, #16
 8020226:	b2db      	uxtb	r3, r3
 8020228:	2b01      	cmp	r3, #1
 802022a:	d10d      	bne.n	8020248 <I2C_WaitOnFlagUntilTimeout+0x84>
 802022c:	68fb      	ldr	r3, [r7, #12]
 802022e:	681b      	ldr	r3, [r3, #0]
 8020230:	695b      	ldr	r3, [r3, #20]
 8020232:	43da      	mvns	r2, r3
 8020234:	68bb      	ldr	r3, [r7, #8]
 8020236:	4013      	ands	r3, r2
 8020238:	b29b      	uxth	r3, r3
 802023a:	2b00      	cmp	r3, #0
 802023c:	bf0c      	ite	eq
 802023e:	2301      	moveq	r3, #1
 8020240:	2300      	movne	r3, #0
 8020242:	b2db      	uxtb	r3, r3
 8020244:	461a      	mov	r2, r3
 8020246:	e00c      	b.n	8020262 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8020248:	68fb      	ldr	r3, [r7, #12]
 802024a:	681b      	ldr	r3, [r3, #0]
 802024c:	699b      	ldr	r3, [r3, #24]
 802024e:	43da      	mvns	r2, r3
 8020250:	68bb      	ldr	r3, [r7, #8]
 8020252:	4013      	ands	r3, r2
 8020254:	b29b      	uxth	r3, r3
 8020256:	2b00      	cmp	r3, #0
 8020258:	bf0c      	ite	eq
 802025a:	2301      	moveq	r3, #1
 802025c:	2300      	movne	r3, #0
 802025e:	b2db      	uxtb	r3, r3
 8020260:	461a      	mov	r2, r3
 8020262:	79fb      	ldrb	r3, [r7, #7]
 8020264:	429a      	cmp	r2, r3
 8020266:	d0b6      	beq.n	80201d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8020268:	2300      	movs	r3, #0
}
 802026a:	4618      	mov	r0, r3
 802026c:	3710      	adds	r7, #16
 802026e:	46bd      	mov	sp, r7
 8020270:	bd80      	pop	{r7, pc}

08020272 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8020272:	b580      	push	{r7, lr}
 8020274:	b084      	sub	sp, #16
 8020276:	af00      	add	r7, sp, #0
 8020278:	60f8      	str	r0, [r7, #12]
 802027a:	60b9      	str	r1, [r7, #8]
 802027c:	607a      	str	r2, [r7, #4]
 802027e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8020280:	e051      	b.n	8020326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8020282:	68fb      	ldr	r3, [r7, #12]
 8020284:	681b      	ldr	r3, [r3, #0]
 8020286:	695b      	ldr	r3, [r3, #20]
 8020288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802028c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020290:	d123      	bne.n	80202da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8020292:	68fb      	ldr	r3, [r7, #12]
 8020294:	681b      	ldr	r3, [r3, #0]
 8020296:	681a      	ldr	r2, [r3, #0]
 8020298:	68fb      	ldr	r3, [r7, #12]
 802029a:	681b      	ldr	r3, [r3, #0]
 802029c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80202a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80202a2:	68fb      	ldr	r3, [r7, #12]
 80202a4:	681b      	ldr	r3, [r3, #0]
 80202a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80202aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80202ac:	68fb      	ldr	r3, [r7, #12]
 80202ae:	2200      	movs	r2, #0
 80202b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80202b2:	68fb      	ldr	r3, [r7, #12]
 80202b4:	2220      	movs	r2, #32
 80202b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80202ba:	68fb      	ldr	r3, [r7, #12]
 80202bc:	2200      	movs	r2, #0
 80202be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80202c2:	68fb      	ldr	r3, [r7, #12]
 80202c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80202c6:	f043 0204 	orr.w	r2, r3, #4
 80202ca:	68fb      	ldr	r3, [r7, #12]
 80202cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80202ce:	68fb      	ldr	r3, [r7, #12]
 80202d0:	2200      	movs	r2, #0
 80202d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80202d6:	2301      	movs	r3, #1
 80202d8:	e046      	b.n	8020368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80202e0:	d021      	beq.n	8020326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80202e2:	f7fb fdd5 	bl	801be90 <HAL_GetTick>
 80202e6:	4602      	mov	r2, r0
 80202e8:	683b      	ldr	r3, [r7, #0]
 80202ea:	1ad3      	subs	r3, r2, r3
 80202ec:	687a      	ldr	r2, [r7, #4]
 80202ee:	429a      	cmp	r2, r3
 80202f0:	d302      	bcc.n	80202f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80202f2:	687b      	ldr	r3, [r7, #4]
 80202f4:	2b00      	cmp	r3, #0
 80202f6:	d116      	bne.n	8020326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80202f8:	68fb      	ldr	r3, [r7, #12]
 80202fa:	2200      	movs	r2, #0
 80202fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80202fe:	68fb      	ldr	r3, [r7, #12]
 8020300:	2220      	movs	r2, #32
 8020302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8020306:	68fb      	ldr	r3, [r7, #12]
 8020308:	2200      	movs	r2, #0
 802030a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802030e:	68fb      	ldr	r3, [r7, #12]
 8020310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020312:	f043 0220 	orr.w	r2, r3, #32
 8020316:	68fb      	ldr	r3, [r7, #12]
 8020318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802031a:	68fb      	ldr	r3, [r7, #12]
 802031c:	2200      	movs	r2, #0
 802031e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8020322:	2301      	movs	r3, #1
 8020324:	e020      	b.n	8020368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8020326:	68bb      	ldr	r3, [r7, #8]
 8020328:	0c1b      	lsrs	r3, r3, #16
 802032a:	b2db      	uxtb	r3, r3
 802032c:	2b01      	cmp	r3, #1
 802032e:	d10c      	bne.n	802034a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8020330:	68fb      	ldr	r3, [r7, #12]
 8020332:	681b      	ldr	r3, [r3, #0]
 8020334:	695b      	ldr	r3, [r3, #20]
 8020336:	43da      	mvns	r2, r3
 8020338:	68bb      	ldr	r3, [r7, #8]
 802033a:	4013      	ands	r3, r2
 802033c:	b29b      	uxth	r3, r3
 802033e:	2b00      	cmp	r3, #0
 8020340:	bf14      	ite	ne
 8020342:	2301      	movne	r3, #1
 8020344:	2300      	moveq	r3, #0
 8020346:	b2db      	uxtb	r3, r3
 8020348:	e00b      	b.n	8020362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 802034a:	68fb      	ldr	r3, [r7, #12]
 802034c:	681b      	ldr	r3, [r3, #0]
 802034e:	699b      	ldr	r3, [r3, #24]
 8020350:	43da      	mvns	r2, r3
 8020352:	68bb      	ldr	r3, [r7, #8]
 8020354:	4013      	ands	r3, r2
 8020356:	b29b      	uxth	r3, r3
 8020358:	2b00      	cmp	r3, #0
 802035a:	bf14      	ite	ne
 802035c:	2301      	movne	r3, #1
 802035e:	2300      	moveq	r3, #0
 8020360:	b2db      	uxtb	r3, r3
 8020362:	2b00      	cmp	r3, #0
 8020364:	d18d      	bne.n	8020282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8020366:	2300      	movs	r3, #0
}
 8020368:	4618      	mov	r0, r3
 802036a:	3710      	adds	r7, #16
 802036c:	46bd      	mov	sp, r7
 802036e:	bd80      	pop	{r7, pc}

08020370 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8020370:	b580      	push	{r7, lr}
 8020372:	b084      	sub	sp, #16
 8020374:	af00      	add	r7, sp, #0
 8020376:	60f8      	str	r0, [r7, #12]
 8020378:	60b9      	str	r1, [r7, #8]
 802037a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802037c:	e02d      	b.n	80203da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 802037e:	68f8      	ldr	r0, [r7, #12]
 8020380:	f000 f86a 	bl	8020458 <I2C_IsAcknowledgeFailed>
 8020384:	4603      	mov	r3, r0
 8020386:	2b00      	cmp	r3, #0
 8020388:	d001      	beq.n	802038e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 802038a:	2301      	movs	r3, #1
 802038c:	e02d      	b.n	80203ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802038e:	68bb      	ldr	r3, [r7, #8]
 8020390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020394:	d021      	beq.n	80203da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020396:	f7fb fd7b 	bl	801be90 <HAL_GetTick>
 802039a:	4602      	mov	r2, r0
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	1ad3      	subs	r3, r2, r3
 80203a0:	68ba      	ldr	r2, [r7, #8]
 80203a2:	429a      	cmp	r2, r3
 80203a4:	d302      	bcc.n	80203ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80203a6:	68bb      	ldr	r3, [r7, #8]
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	d116      	bne.n	80203da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80203ac:	68fb      	ldr	r3, [r7, #12]
 80203ae:	2200      	movs	r2, #0
 80203b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80203b2:	68fb      	ldr	r3, [r7, #12]
 80203b4:	2220      	movs	r2, #32
 80203b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80203ba:	68fb      	ldr	r3, [r7, #12]
 80203bc:	2200      	movs	r2, #0
 80203be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80203c2:	68fb      	ldr	r3, [r7, #12]
 80203c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80203c6:	f043 0220 	orr.w	r2, r3, #32
 80203ca:	68fb      	ldr	r3, [r7, #12]
 80203cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80203ce:	68fb      	ldr	r3, [r7, #12]
 80203d0:	2200      	movs	r2, #0
 80203d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80203d6:	2301      	movs	r3, #1
 80203d8:	e007      	b.n	80203ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80203da:	68fb      	ldr	r3, [r7, #12]
 80203dc:	681b      	ldr	r3, [r3, #0]
 80203de:	695b      	ldr	r3, [r3, #20]
 80203e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80203e4:	2b80      	cmp	r3, #128	; 0x80
 80203e6:	d1ca      	bne.n	802037e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80203e8:	2300      	movs	r3, #0
}
 80203ea:	4618      	mov	r0, r3
 80203ec:	3710      	adds	r7, #16
 80203ee:	46bd      	mov	sp, r7
 80203f0:	bd80      	pop	{r7, pc}
	...

080203f4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80203f4:	b480      	push	{r7}
 80203f6:	b085      	sub	sp, #20
 80203f8:	af00      	add	r7, sp, #0
 80203fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80203fc:	2300      	movs	r3, #0
 80203fe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8020400:	4b13      	ldr	r3, [pc, #76]	; (8020450 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8020402:	681b      	ldr	r3, [r3, #0]
 8020404:	08db      	lsrs	r3, r3, #3
 8020406:	4a13      	ldr	r2, [pc, #76]	; (8020454 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8020408:	fba2 2303 	umull	r2, r3, r2, r3
 802040c:	0a1a      	lsrs	r2, r3, #8
 802040e:	4613      	mov	r3, r2
 8020410:	009b      	lsls	r3, r3, #2
 8020412:	4413      	add	r3, r2
 8020414:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8020416:	68fb      	ldr	r3, [r7, #12]
 8020418:	3b01      	subs	r3, #1
 802041a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 802041c:	68fb      	ldr	r3, [r7, #12]
 802041e:	2b00      	cmp	r3, #0
 8020420:	d107      	bne.n	8020432 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020426:	f043 0220 	orr.w	r2, r3, #32
 802042a:	687b      	ldr	r3, [r7, #4]
 802042c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 802042e:	2301      	movs	r3, #1
 8020430:	e008      	b.n	8020444 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8020432:	687b      	ldr	r3, [r7, #4]
 8020434:	681b      	ldr	r3, [r3, #0]
 8020436:	681b      	ldr	r3, [r3, #0]
 8020438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802043c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020440:	d0e9      	beq.n	8020416 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8020442:	2300      	movs	r3, #0
}
 8020444:	4618      	mov	r0, r3
 8020446:	3714      	adds	r7, #20
 8020448:	46bd      	mov	sp, r7
 802044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802044e:	4770      	bx	lr
 8020450:	20000020 	.word	0x20000020
 8020454:	14f8b589 	.word	0x14f8b589

08020458 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8020458:	b480      	push	{r7}
 802045a:	b083      	sub	sp, #12
 802045c:	af00      	add	r7, sp, #0
 802045e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8020460:	687b      	ldr	r3, [r7, #4]
 8020462:	681b      	ldr	r3, [r3, #0]
 8020464:	695b      	ldr	r3, [r3, #20]
 8020466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802046a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802046e:	d11b      	bne.n	80204a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8020470:	687b      	ldr	r3, [r7, #4]
 8020472:	681b      	ldr	r3, [r3, #0]
 8020474:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8020478:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 802047a:	687b      	ldr	r3, [r7, #4]
 802047c:	2200      	movs	r2, #0
 802047e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8020480:	687b      	ldr	r3, [r7, #4]
 8020482:	2220      	movs	r2, #32
 8020484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8020488:	687b      	ldr	r3, [r7, #4]
 802048a:	2200      	movs	r2, #0
 802048c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020494:	f043 0204 	orr.w	r2, r3, #4
 8020498:	687b      	ldr	r3, [r7, #4]
 802049a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	2200      	movs	r2, #0
 80204a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80204a4:	2301      	movs	r3, #1
 80204a6:	e000      	b.n	80204aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80204a8:	2300      	movs	r3, #0
}
 80204aa:	4618      	mov	r0, r3
 80204ac:	370c      	adds	r7, #12
 80204ae:	46bd      	mov	sp, r7
 80204b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204b4:	4770      	bx	lr

080204b6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80204b6:	b480      	push	{r7}
 80204b8:	b083      	sub	sp, #12
 80204ba:	af00      	add	r7, sp, #0
 80204bc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80204be:	687b      	ldr	r3, [r7, #4]
 80204c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80204c2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80204c6:	d103      	bne.n	80204d0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	2201      	movs	r2, #1
 80204cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80204ce:	e007      	b.n	80204e0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80204d0:	687b      	ldr	r3, [r7, #4]
 80204d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80204d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80204d8:	d102      	bne.n	80204e0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80204da:	687b      	ldr	r3, [r7, #4]
 80204dc:	2208      	movs	r2, #8
 80204de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80204e0:	bf00      	nop
 80204e2:	370c      	adds	r7, #12
 80204e4:	46bd      	mov	sp, r7
 80204e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204ea:	4770      	bx	lr

080204ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80204ec:	b580      	push	{r7, lr}
 80204ee:	b086      	sub	sp, #24
 80204f0:	af00      	add	r7, sp, #0
 80204f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80204f4:	687b      	ldr	r3, [r7, #4]
 80204f6:	2b00      	cmp	r3, #0
 80204f8:	d101      	bne.n	80204fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80204fa:	2301      	movs	r3, #1
 80204fc:	e267      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80204fe:	687b      	ldr	r3, [r7, #4]
 8020500:	681b      	ldr	r3, [r3, #0]
 8020502:	f003 0301 	and.w	r3, r3, #1
 8020506:	2b00      	cmp	r3, #0
 8020508:	d075      	beq.n	80205f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802050a:	4b88      	ldr	r3, [pc, #544]	; (802072c <HAL_RCC_OscConfig+0x240>)
 802050c:	689b      	ldr	r3, [r3, #8]
 802050e:	f003 030c 	and.w	r3, r3, #12
 8020512:	2b04      	cmp	r3, #4
 8020514:	d00c      	beq.n	8020530 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8020516:	4b85      	ldr	r3, [pc, #532]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020518:	689b      	ldr	r3, [r3, #8]
 802051a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802051e:	2b08      	cmp	r3, #8
 8020520:	d112      	bne.n	8020548 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8020522:	4b82      	ldr	r3, [pc, #520]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020524:	685b      	ldr	r3, [r3, #4]
 8020526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802052a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802052e:	d10b      	bne.n	8020548 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8020530:	4b7e      	ldr	r3, [pc, #504]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020532:	681b      	ldr	r3, [r3, #0]
 8020534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020538:	2b00      	cmp	r3, #0
 802053a:	d05b      	beq.n	80205f4 <HAL_RCC_OscConfig+0x108>
 802053c:	687b      	ldr	r3, [r7, #4]
 802053e:	685b      	ldr	r3, [r3, #4]
 8020540:	2b00      	cmp	r3, #0
 8020542:	d157      	bne.n	80205f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8020544:	2301      	movs	r3, #1
 8020546:	e242      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8020548:	687b      	ldr	r3, [r7, #4]
 802054a:	685b      	ldr	r3, [r3, #4]
 802054c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020550:	d106      	bne.n	8020560 <HAL_RCC_OscConfig+0x74>
 8020552:	4b76      	ldr	r3, [pc, #472]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020554:	681b      	ldr	r3, [r3, #0]
 8020556:	4a75      	ldr	r2, [pc, #468]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802055c:	6013      	str	r3, [r2, #0]
 802055e:	e01d      	b.n	802059c <HAL_RCC_OscConfig+0xb0>
 8020560:	687b      	ldr	r3, [r7, #4]
 8020562:	685b      	ldr	r3, [r3, #4]
 8020564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8020568:	d10c      	bne.n	8020584 <HAL_RCC_OscConfig+0x98>
 802056a:	4b70      	ldr	r3, [pc, #448]	; (802072c <HAL_RCC_OscConfig+0x240>)
 802056c:	681b      	ldr	r3, [r3, #0]
 802056e:	4a6f      	ldr	r2, [pc, #444]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8020574:	6013      	str	r3, [r2, #0]
 8020576:	4b6d      	ldr	r3, [pc, #436]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020578:	681b      	ldr	r3, [r3, #0]
 802057a:	4a6c      	ldr	r2, [pc, #432]	; (802072c <HAL_RCC_OscConfig+0x240>)
 802057c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020580:	6013      	str	r3, [r2, #0]
 8020582:	e00b      	b.n	802059c <HAL_RCC_OscConfig+0xb0>
 8020584:	4b69      	ldr	r3, [pc, #420]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020586:	681b      	ldr	r3, [r3, #0]
 8020588:	4a68      	ldr	r2, [pc, #416]	; (802072c <HAL_RCC_OscConfig+0x240>)
 802058a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802058e:	6013      	str	r3, [r2, #0]
 8020590:	4b66      	ldr	r3, [pc, #408]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020592:	681b      	ldr	r3, [r3, #0]
 8020594:	4a65      	ldr	r2, [pc, #404]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802059a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802059c:	687b      	ldr	r3, [r7, #4]
 802059e:	685b      	ldr	r3, [r3, #4]
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	d013      	beq.n	80205cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80205a4:	f7fb fc74 	bl	801be90 <HAL_GetTick>
 80205a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80205aa:	e008      	b.n	80205be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80205ac:	f7fb fc70 	bl	801be90 <HAL_GetTick>
 80205b0:	4602      	mov	r2, r0
 80205b2:	693b      	ldr	r3, [r7, #16]
 80205b4:	1ad3      	subs	r3, r2, r3
 80205b6:	2b64      	cmp	r3, #100	; 0x64
 80205b8:	d901      	bls.n	80205be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80205ba:	2303      	movs	r3, #3
 80205bc:	e207      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80205be:	4b5b      	ldr	r3, [pc, #364]	; (802072c <HAL_RCC_OscConfig+0x240>)
 80205c0:	681b      	ldr	r3, [r3, #0]
 80205c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80205c6:	2b00      	cmp	r3, #0
 80205c8:	d0f0      	beq.n	80205ac <HAL_RCC_OscConfig+0xc0>
 80205ca:	e014      	b.n	80205f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80205cc:	f7fb fc60 	bl	801be90 <HAL_GetTick>
 80205d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80205d2:	e008      	b.n	80205e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80205d4:	f7fb fc5c 	bl	801be90 <HAL_GetTick>
 80205d8:	4602      	mov	r2, r0
 80205da:	693b      	ldr	r3, [r7, #16]
 80205dc:	1ad3      	subs	r3, r2, r3
 80205de:	2b64      	cmp	r3, #100	; 0x64
 80205e0:	d901      	bls.n	80205e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80205e2:	2303      	movs	r3, #3
 80205e4:	e1f3      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80205e6:	4b51      	ldr	r3, [pc, #324]	; (802072c <HAL_RCC_OscConfig+0x240>)
 80205e8:	681b      	ldr	r3, [r3, #0]
 80205ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80205ee:	2b00      	cmp	r3, #0
 80205f0:	d1f0      	bne.n	80205d4 <HAL_RCC_OscConfig+0xe8>
 80205f2:	e000      	b.n	80205f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80205f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80205f6:	687b      	ldr	r3, [r7, #4]
 80205f8:	681b      	ldr	r3, [r3, #0]
 80205fa:	f003 0302 	and.w	r3, r3, #2
 80205fe:	2b00      	cmp	r3, #0
 8020600:	d063      	beq.n	80206ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8020602:	4b4a      	ldr	r3, [pc, #296]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020604:	689b      	ldr	r3, [r3, #8]
 8020606:	f003 030c 	and.w	r3, r3, #12
 802060a:	2b00      	cmp	r3, #0
 802060c:	d00b      	beq.n	8020626 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802060e:	4b47      	ldr	r3, [pc, #284]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020610:	689b      	ldr	r3, [r3, #8]
 8020612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8020616:	2b08      	cmp	r3, #8
 8020618:	d11c      	bne.n	8020654 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802061a:	4b44      	ldr	r3, [pc, #272]	; (802072c <HAL_RCC_OscConfig+0x240>)
 802061c:	685b      	ldr	r3, [r3, #4]
 802061e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020622:	2b00      	cmp	r3, #0
 8020624:	d116      	bne.n	8020654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8020626:	4b41      	ldr	r3, [pc, #260]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020628:	681b      	ldr	r3, [r3, #0]
 802062a:	f003 0302 	and.w	r3, r3, #2
 802062e:	2b00      	cmp	r3, #0
 8020630:	d005      	beq.n	802063e <HAL_RCC_OscConfig+0x152>
 8020632:	687b      	ldr	r3, [r7, #4]
 8020634:	68db      	ldr	r3, [r3, #12]
 8020636:	2b01      	cmp	r3, #1
 8020638:	d001      	beq.n	802063e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802063a:	2301      	movs	r3, #1
 802063c:	e1c7      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802063e:	4b3b      	ldr	r3, [pc, #236]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020640:	681b      	ldr	r3, [r3, #0]
 8020642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8020646:	687b      	ldr	r3, [r7, #4]
 8020648:	691b      	ldr	r3, [r3, #16]
 802064a:	00db      	lsls	r3, r3, #3
 802064c:	4937      	ldr	r1, [pc, #220]	; (802072c <HAL_RCC_OscConfig+0x240>)
 802064e:	4313      	orrs	r3, r2
 8020650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8020652:	e03a      	b.n	80206ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8020654:	687b      	ldr	r3, [r7, #4]
 8020656:	68db      	ldr	r3, [r3, #12]
 8020658:	2b00      	cmp	r3, #0
 802065a:	d020      	beq.n	802069e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 802065c:	4b34      	ldr	r3, [pc, #208]	; (8020730 <HAL_RCC_OscConfig+0x244>)
 802065e:	2201      	movs	r2, #1
 8020660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020662:	f7fb fc15 	bl	801be90 <HAL_GetTick>
 8020666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8020668:	e008      	b.n	802067c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802066a:	f7fb fc11 	bl	801be90 <HAL_GetTick>
 802066e:	4602      	mov	r2, r0
 8020670:	693b      	ldr	r3, [r7, #16]
 8020672:	1ad3      	subs	r3, r2, r3
 8020674:	2b02      	cmp	r3, #2
 8020676:	d901      	bls.n	802067c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8020678:	2303      	movs	r3, #3
 802067a:	e1a8      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802067c:	4b2b      	ldr	r3, [pc, #172]	; (802072c <HAL_RCC_OscConfig+0x240>)
 802067e:	681b      	ldr	r3, [r3, #0]
 8020680:	f003 0302 	and.w	r3, r3, #2
 8020684:	2b00      	cmp	r3, #0
 8020686:	d0f0      	beq.n	802066a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8020688:	4b28      	ldr	r3, [pc, #160]	; (802072c <HAL_RCC_OscConfig+0x240>)
 802068a:	681b      	ldr	r3, [r3, #0]
 802068c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	691b      	ldr	r3, [r3, #16]
 8020694:	00db      	lsls	r3, r3, #3
 8020696:	4925      	ldr	r1, [pc, #148]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020698:	4313      	orrs	r3, r2
 802069a:	600b      	str	r3, [r1, #0]
 802069c:	e015      	b.n	80206ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802069e:	4b24      	ldr	r3, [pc, #144]	; (8020730 <HAL_RCC_OscConfig+0x244>)
 80206a0:	2200      	movs	r2, #0
 80206a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80206a4:	f7fb fbf4 	bl	801be90 <HAL_GetTick>
 80206a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80206aa:	e008      	b.n	80206be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80206ac:	f7fb fbf0 	bl	801be90 <HAL_GetTick>
 80206b0:	4602      	mov	r2, r0
 80206b2:	693b      	ldr	r3, [r7, #16]
 80206b4:	1ad3      	subs	r3, r2, r3
 80206b6:	2b02      	cmp	r3, #2
 80206b8:	d901      	bls.n	80206be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80206ba:	2303      	movs	r3, #3
 80206bc:	e187      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80206be:	4b1b      	ldr	r3, [pc, #108]	; (802072c <HAL_RCC_OscConfig+0x240>)
 80206c0:	681b      	ldr	r3, [r3, #0]
 80206c2:	f003 0302 	and.w	r3, r3, #2
 80206c6:	2b00      	cmp	r3, #0
 80206c8:	d1f0      	bne.n	80206ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80206ca:	687b      	ldr	r3, [r7, #4]
 80206cc:	681b      	ldr	r3, [r3, #0]
 80206ce:	f003 0308 	and.w	r3, r3, #8
 80206d2:	2b00      	cmp	r3, #0
 80206d4:	d036      	beq.n	8020744 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80206d6:	687b      	ldr	r3, [r7, #4]
 80206d8:	695b      	ldr	r3, [r3, #20]
 80206da:	2b00      	cmp	r3, #0
 80206dc:	d016      	beq.n	802070c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80206de:	4b15      	ldr	r3, [pc, #84]	; (8020734 <HAL_RCC_OscConfig+0x248>)
 80206e0:	2201      	movs	r2, #1
 80206e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80206e4:	f7fb fbd4 	bl	801be90 <HAL_GetTick>
 80206e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80206ea:	e008      	b.n	80206fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80206ec:	f7fb fbd0 	bl	801be90 <HAL_GetTick>
 80206f0:	4602      	mov	r2, r0
 80206f2:	693b      	ldr	r3, [r7, #16]
 80206f4:	1ad3      	subs	r3, r2, r3
 80206f6:	2b02      	cmp	r3, #2
 80206f8:	d901      	bls.n	80206fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80206fa:	2303      	movs	r3, #3
 80206fc:	e167      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80206fe:	4b0b      	ldr	r3, [pc, #44]	; (802072c <HAL_RCC_OscConfig+0x240>)
 8020700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020702:	f003 0302 	and.w	r3, r3, #2
 8020706:	2b00      	cmp	r3, #0
 8020708:	d0f0      	beq.n	80206ec <HAL_RCC_OscConfig+0x200>
 802070a:	e01b      	b.n	8020744 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802070c:	4b09      	ldr	r3, [pc, #36]	; (8020734 <HAL_RCC_OscConfig+0x248>)
 802070e:	2200      	movs	r2, #0
 8020710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8020712:	f7fb fbbd 	bl	801be90 <HAL_GetTick>
 8020716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8020718:	e00e      	b.n	8020738 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802071a:	f7fb fbb9 	bl	801be90 <HAL_GetTick>
 802071e:	4602      	mov	r2, r0
 8020720:	693b      	ldr	r3, [r7, #16]
 8020722:	1ad3      	subs	r3, r2, r3
 8020724:	2b02      	cmp	r3, #2
 8020726:	d907      	bls.n	8020738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8020728:	2303      	movs	r3, #3
 802072a:	e150      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
 802072c:	40023800 	.word	0x40023800
 8020730:	42470000 	.word	0x42470000
 8020734:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8020738:	4b88      	ldr	r3, [pc, #544]	; (802095c <HAL_RCC_OscConfig+0x470>)
 802073a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802073c:	f003 0302 	and.w	r3, r3, #2
 8020740:	2b00      	cmp	r3, #0
 8020742:	d1ea      	bne.n	802071a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8020744:	687b      	ldr	r3, [r7, #4]
 8020746:	681b      	ldr	r3, [r3, #0]
 8020748:	f003 0304 	and.w	r3, r3, #4
 802074c:	2b00      	cmp	r3, #0
 802074e:	f000 8097 	beq.w	8020880 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8020752:	2300      	movs	r3, #0
 8020754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8020756:	4b81      	ldr	r3, [pc, #516]	; (802095c <HAL_RCC_OscConfig+0x470>)
 8020758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802075e:	2b00      	cmp	r3, #0
 8020760:	d10f      	bne.n	8020782 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8020762:	2300      	movs	r3, #0
 8020764:	60bb      	str	r3, [r7, #8]
 8020766:	4b7d      	ldr	r3, [pc, #500]	; (802095c <HAL_RCC_OscConfig+0x470>)
 8020768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802076a:	4a7c      	ldr	r2, [pc, #496]	; (802095c <HAL_RCC_OscConfig+0x470>)
 802076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020770:	6413      	str	r3, [r2, #64]	; 0x40
 8020772:	4b7a      	ldr	r3, [pc, #488]	; (802095c <HAL_RCC_OscConfig+0x470>)
 8020774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802077a:	60bb      	str	r3, [r7, #8]
 802077c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802077e:	2301      	movs	r3, #1
 8020780:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8020782:	4b77      	ldr	r3, [pc, #476]	; (8020960 <HAL_RCC_OscConfig+0x474>)
 8020784:	681b      	ldr	r3, [r3, #0]
 8020786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802078a:	2b00      	cmp	r3, #0
 802078c:	d118      	bne.n	80207c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802078e:	4b74      	ldr	r3, [pc, #464]	; (8020960 <HAL_RCC_OscConfig+0x474>)
 8020790:	681b      	ldr	r3, [r3, #0]
 8020792:	4a73      	ldr	r2, [pc, #460]	; (8020960 <HAL_RCC_OscConfig+0x474>)
 8020794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8020798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802079a:	f7fb fb79 	bl	801be90 <HAL_GetTick>
 802079e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80207a0:	e008      	b.n	80207b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80207a2:	f7fb fb75 	bl	801be90 <HAL_GetTick>
 80207a6:	4602      	mov	r2, r0
 80207a8:	693b      	ldr	r3, [r7, #16]
 80207aa:	1ad3      	subs	r3, r2, r3
 80207ac:	2b02      	cmp	r3, #2
 80207ae:	d901      	bls.n	80207b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80207b0:	2303      	movs	r3, #3
 80207b2:	e10c      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80207b4:	4b6a      	ldr	r3, [pc, #424]	; (8020960 <HAL_RCC_OscConfig+0x474>)
 80207b6:	681b      	ldr	r3, [r3, #0]
 80207b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80207bc:	2b00      	cmp	r3, #0
 80207be:	d0f0      	beq.n	80207a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80207c0:	687b      	ldr	r3, [r7, #4]
 80207c2:	689b      	ldr	r3, [r3, #8]
 80207c4:	2b01      	cmp	r3, #1
 80207c6:	d106      	bne.n	80207d6 <HAL_RCC_OscConfig+0x2ea>
 80207c8:	4b64      	ldr	r3, [pc, #400]	; (802095c <HAL_RCC_OscConfig+0x470>)
 80207ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80207cc:	4a63      	ldr	r2, [pc, #396]	; (802095c <HAL_RCC_OscConfig+0x470>)
 80207ce:	f043 0301 	orr.w	r3, r3, #1
 80207d2:	6713      	str	r3, [r2, #112]	; 0x70
 80207d4:	e01c      	b.n	8020810 <HAL_RCC_OscConfig+0x324>
 80207d6:	687b      	ldr	r3, [r7, #4]
 80207d8:	689b      	ldr	r3, [r3, #8]
 80207da:	2b05      	cmp	r3, #5
 80207dc:	d10c      	bne.n	80207f8 <HAL_RCC_OscConfig+0x30c>
 80207de:	4b5f      	ldr	r3, [pc, #380]	; (802095c <HAL_RCC_OscConfig+0x470>)
 80207e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80207e2:	4a5e      	ldr	r2, [pc, #376]	; (802095c <HAL_RCC_OscConfig+0x470>)
 80207e4:	f043 0304 	orr.w	r3, r3, #4
 80207e8:	6713      	str	r3, [r2, #112]	; 0x70
 80207ea:	4b5c      	ldr	r3, [pc, #368]	; (802095c <HAL_RCC_OscConfig+0x470>)
 80207ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80207ee:	4a5b      	ldr	r2, [pc, #364]	; (802095c <HAL_RCC_OscConfig+0x470>)
 80207f0:	f043 0301 	orr.w	r3, r3, #1
 80207f4:	6713      	str	r3, [r2, #112]	; 0x70
 80207f6:	e00b      	b.n	8020810 <HAL_RCC_OscConfig+0x324>
 80207f8:	4b58      	ldr	r3, [pc, #352]	; (802095c <HAL_RCC_OscConfig+0x470>)
 80207fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80207fc:	4a57      	ldr	r2, [pc, #348]	; (802095c <HAL_RCC_OscConfig+0x470>)
 80207fe:	f023 0301 	bic.w	r3, r3, #1
 8020802:	6713      	str	r3, [r2, #112]	; 0x70
 8020804:	4b55      	ldr	r3, [pc, #340]	; (802095c <HAL_RCC_OscConfig+0x470>)
 8020806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020808:	4a54      	ldr	r2, [pc, #336]	; (802095c <HAL_RCC_OscConfig+0x470>)
 802080a:	f023 0304 	bic.w	r3, r3, #4
 802080e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8020810:	687b      	ldr	r3, [r7, #4]
 8020812:	689b      	ldr	r3, [r3, #8]
 8020814:	2b00      	cmp	r3, #0
 8020816:	d015      	beq.n	8020844 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020818:	f7fb fb3a 	bl	801be90 <HAL_GetTick>
 802081c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802081e:	e00a      	b.n	8020836 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8020820:	f7fb fb36 	bl	801be90 <HAL_GetTick>
 8020824:	4602      	mov	r2, r0
 8020826:	693b      	ldr	r3, [r7, #16]
 8020828:	1ad3      	subs	r3, r2, r3
 802082a:	f241 3288 	movw	r2, #5000	; 0x1388
 802082e:	4293      	cmp	r3, r2
 8020830:	d901      	bls.n	8020836 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8020832:	2303      	movs	r3, #3
 8020834:	e0cb      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8020836:	4b49      	ldr	r3, [pc, #292]	; (802095c <HAL_RCC_OscConfig+0x470>)
 8020838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802083a:	f003 0302 	and.w	r3, r3, #2
 802083e:	2b00      	cmp	r3, #0
 8020840:	d0ee      	beq.n	8020820 <HAL_RCC_OscConfig+0x334>
 8020842:	e014      	b.n	802086e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8020844:	f7fb fb24 	bl	801be90 <HAL_GetTick>
 8020848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802084a:	e00a      	b.n	8020862 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802084c:	f7fb fb20 	bl	801be90 <HAL_GetTick>
 8020850:	4602      	mov	r2, r0
 8020852:	693b      	ldr	r3, [r7, #16]
 8020854:	1ad3      	subs	r3, r2, r3
 8020856:	f241 3288 	movw	r2, #5000	; 0x1388
 802085a:	4293      	cmp	r3, r2
 802085c:	d901      	bls.n	8020862 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 802085e:	2303      	movs	r3, #3
 8020860:	e0b5      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8020862:	4b3e      	ldr	r3, [pc, #248]	; (802095c <HAL_RCC_OscConfig+0x470>)
 8020864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020866:	f003 0302 	and.w	r3, r3, #2
 802086a:	2b00      	cmp	r3, #0
 802086c:	d1ee      	bne.n	802084c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802086e:	7dfb      	ldrb	r3, [r7, #23]
 8020870:	2b01      	cmp	r3, #1
 8020872:	d105      	bne.n	8020880 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8020874:	4b39      	ldr	r3, [pc, #228]	; (802095c <HAL_RCC_OscConfig+0x470>)
 8020876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020878:	4a38      	ldr	r2, [pc, #224]	; (802095c <HAL_RCC_OscConfig+0x470>)
 802087a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802087e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8020880:	687b      	ldr	r3, [r7, #4]
 8020882:	699b      	ldr	r3, [r3, #24]
 8020884:	2b00      	cmp	r3, #0
 8020886:	f000 80a1 	beq.w	80209cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802088a:	4b34      	ldr	r3, [pc, #208]	; (802095c <HAL_RCC_OscConfig+0x470>)
 802088c:	689b      	ldr	r3, [r3, #8]
 802088e:	f003 030c 	and.w	r3, r3, #12
 8020892:	2b08      	cmp	r3, #8
 8020894:	d05c      	beq.n	8020950 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8020896:	687b      	ldr	r3, [r7, #4]
 8020898:	699b      	ldr	r3, [r3, #24]
 802089a:	2b02      	cmp	r3, #2
 802089c:	d141      	bne.n	8020922 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802089e:	4b31      	ldr	r3, [pc, #196]	; (8020964 <HAL_RCC_OscConfig+0x478>)
 80208a0:	2200      	movs	r2, #0
 80208a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80208a4:	f7fb faf4 	bl	801be90 <HAL_GetTick>
 80208a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80208aa:	e008      	b.n	80208be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80208ac:	f7fb faf0 	bl	801be90 <HAL_GetTick>
 80208b0:	4602      	mov	r2, r0
 80208b2:	693b      	ldr	r3, [r7, #16]
 80208b4:	1ad3      	subs	r3, r2, r3
 80208b6:	2b02      	cmp	r3, #2
 80208b8:	d901      	bls.n	80208be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80208ba:	2303      	movs	r3, #3
 80208bc:	e087      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80208be:	4b27      	ldr	r3, [pc, #156]	; (802095c <HAL_RCC_OscConfig+0x470>)
 80208c0:	681b      	ldr	r3, [r3, #0]
 80208c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80208c6:	2b00      	cmp	r3, #0
 80208c8:	d1f0      	bne.n	80208ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80208ca:	687b      	ldr	r3, [r7, #4]
 80208cc:	69da      	ldr	r2, [r3, #28]
 80208ce:	687b      	ldr	r3, [r7, #4]
 80208d0:	6a1b      	ldr	r3, [r3, #32]
 80208d2:	431a      	orrs	r2, r3
 80208d4:	687b      	ldr	r3, [r7, #4]
 80208d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80208d8:	019b      	lsls	r3, r3, #6
 80208da:	431a      	orrs	r2, r3
 80208dc:	687b      	ldr	r3, [r7, #4]
 80208de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80208e0:	085b      	lsrs	r3, r3, #1
 80208e2:	3b01      	subs	r3, #1
 80208e4:	041b      	lsls	r3, r3, #16
 80208e6:	431a      	orrs	r2, r3
 80208e8:	687b      	ldr	r3, [r7, #4]
 80208ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80208ec:	061b      	lsls	r3, r3, #24
 80208ee:	491b      	ldr	r1, [pc, #108]	; (802095c <HAL_RCC_OscConfig+0x470>)
 80208f0:	4313      	orrs	r3, r2
 80208f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80208f4:	4b1b      	ldr	r3, [pc, #108]	; (8020964 <HAL_RCC_OscConfig+0x478>)
 80208f6:	2201      	movs	r2, #1
 80208f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80208fa:	f7fb fac9 	bl	801be90 <HAL_GetTick>
 80208fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8020900:	e008      	b.n	8020914 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8020902:	f7fb fac5 	bl	801be90 <HAL_GetTick>
 8020906:	4602      	mov	r2, r0
 8020908:	693b      	ldr	r3, [r7, #16]
 802090a:	1ad3      	subs	r3, r2, r3
 802090c:	2b02      	cmp	r3, #2
 802090e:	d901      	bls.n	8020914 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8020910:	2303      	movs	r3, #3
 8020912:	e05c      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8020914:	4b11      	ldr	r3, [pc, #68]	; (802095c <HAL_RCC_OscConfig+0x470>)
 8020916:	681b      	ldr	r3, [r3, #0]
 8020918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802091c:	2b00      	cmp	r3, #0
 802091e:	d0f0      	beq.n	8020902 <HAL_RCC_OscConfig+0x416>
 8020920:	e054      	b.n	80209cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8020922:	4b10      	ldr	r3, [pc, #64]	; (8020964 <HAL_RCC_OscConfig+0x478>)
 8020924:	2200      	movs	r2, #0
 8020926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020928:	f7fb fab2 	bl	801be90 <HAL_GetTick>
 802092c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802092e:	e008      	b.n	8020942 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8020930:	f7fb faae 	bl	801be90 <HAL_GetTick>
 8020934:	4602      	mov	r2, r0
 8020936:	693b      	ldr	r3, [r7, #16]
 8020938:	1ad3      	subs	r3, r2, r3
 802093a:	2b02      	cmp	r3, #2
 802093c:	d901      	bls.n	8020942 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 802093e:	2303      	movs	r3, #3
 8020940:	e045      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8020942:	4b06      	ldr	r3, [pc, #24]	; (802095c <HAL_RCC_OscConfig+0x470>)
 8020944:	681b      	ldr	r3, [r3, #0]
 8020946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802094a:	2b00      	cmp	r3, #0
 802094c:	d1f0      	bne.n	8020930 <HAL_RCC_OscConfig+0x444>
 802094e:	e03d      	b.n	80209cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8020950:	687b      	ldr	r3, [r7, #4]
 8020952:	699b      	ldr	r3, [r3, #24]
 8020954:	2b01      	cmp	r3, #1
 8020956:	d107      	bne.n	8020968 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8020958:	2301      	movs	r3, #1
 802095a:	e038      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
 802095c:	40023800 	.word	0x40023800
 8020960:	40007000 	.word	0x40007000
 8020964:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8020968:	4b1b      	ldr	r3, [pc, #108]	; (80209d8 <HAL_RCC_OscConfig+0x4ec>)
 802096a:	685b      	ldr	r3, [r3, #4]
 802096c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	699b      	ldr	r3, [r3, #24]
 8020972:	2b01      	cmp	r3, #1
 8020974:	d028      	beq.n	80209c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8020976:	68fb      	ldr	r3, [r7, #12]
 8020978:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 802097c:	687b      	ldr	r3, [r7, #4]
 802097e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8020980:	429a      	cmp	r2, r3
 8020982:	d121      	bne.n	80209c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8020984:	68fb      	ldr	r3, [r7, #12]
 8020986:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802098a:	687b      	ldr	r3, [r7, #4]
 802098c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802098e:	429a      	cmp	r2, r3
 8020990:	d11a      	bne.n	80209c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8020992:	68fa      	ldr	r2, [r7, #12]
 8020994:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8020998:	4013      	ands	r3, r2
 802099a:	687a      	ldr	r2, [r7, #4]
 802099c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802099e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80209a0:	4293      	cmp	r3, r2
 80209a2:	d111      	bne.n	80209c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80209a4:	68fb      	ldr	r3, [r7, #12]
 80209a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80209ae:	085b      	lsrs	r3, r3, #1
 80209b0:	3b01      	subs	r3, #1
 80209b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80209b4:	429a      	cmp	r2, r3
 80209b6:	d107      	bne.n	80209c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80209b8:	68fb      	ldr	r3, [r7, #12]
 80209ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80209c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80209c4:	429a      	cmp	r2, r3
 80209c6:	d001      	beq.n	80209cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80209c8:	2301      	movs	r3, #1
 80209ca:	e000      	b.n	80209ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80209cc:	2300      	movs	r3, #0
}
 80209ce:	4618      	mov	r0, r3
 80209d0:	3718      	adds	r7, #24
 80209d2:	46bd      	mov	sp, r7
 80209d4:	bd80      	pop	{r7, pc}
 80209d6:	bf00      	nop
 80209d8:	40023800 	.word	0x40023800

080209dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80209dc:	b580      	push	{r7, lr}
 80209de:	b084      	sub	sp, #16
 80209e0:	af00      	add	r7, sp, #0
 80209e2:	6078      	str	r0, [r7, #4]
 80209e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	2b00      	cmp	r3, #0
 80209ea:	d101      	bne.n	80209f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80209ec:	2301      	movs	r3, #1
 80209ee:	e0cc      	b.n	8020b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80209f0:	4b68      	ldr	r3, [pc, #416]	; (8020b94 <HAL_RCC_ClockConfig+0x1b8>)
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	f003 0307 	and.w	r3, r3, #7
 80209f8:	683a      	ldr	r2, [r7, #0]
 80209fa:	429a      	cmp	r2, r3
 80209fc:	d90c      	bls.n	8020a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80209fe:	4b65      	ldr	r3, [pc, #404]	; (8020b94 <HAL_RCC_ClockConfig+0x1b8>)
 8020a00:	683a      	ldr	r2, [r7, #0]
 8020a02:	b2d2      	uxtb	r2, r2
 8020a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8020a06:	4b63      	ldr	r3, [pc, #396]	; (8020b94 <HAL_RCC_ClockConfig+0x1b8>)
 8020a08:	681b      	ldr	r3, [r3, #0]
 8020a0a:	f003 0307 	and.w	r3, r3, #7
 8020a0e:	683a      	ldr	r2, [r7, #0]
 8020a10:	429a      	cmp	r2, r3
 8020a12:	d001      	beq.n	8020a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8020a14:	2301      	movs	r3, #1
 8020a16:	e0b8      	b.n	8020b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8020a18:	687b      	ldr	r3, [r7, #4]
 8020a1a:	681b      	ldr	r3, [r3, #0]
 8020a1c:	f003 0302 	and.w	r3, r3, #2
 8020a20:	2b00      	cmp	r3, #0
 8020a22:	d020      	beq.n	8020a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	681b      	ldr	r3, [r3, #0]
 8020a28:	f003 0304 	and.w	r3, r3, #4
 8020a2c:	2b00      	cmp	r3, #0
 8020a2e:	d005      	beq.n	8020a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8020a30:	4b59      	ldr	r3, [pc, #356]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020a32:	689b      	ldr	r3, [r3, #8]
 8020a34:	4a58      	ldr	r2, [pc, #352]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8020a3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8020a3c:	687b      	ldr	r3, [r7, #4]
 8020a3e:	681b      	ldr	r3, [r3, #0]
 8020a40:	f003 0308 	and.w	r3, r3, #8
 8020a44:	2b00      	cmp	r3, #0
 8020a46:	d005      	beq.n	8020a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8020a48:	4b53      	ldr	r3, [pc, #332]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020a4a:	689b      	ldr	r3, [r3, #8]
 8020a4c:	4a52      	ldr	r2, [pc, #328]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8020a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8020a54:	4b50      	ldr	r3, [pc, #320]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020a56:	689b      	ldr	r3, [r3, #8]
 8020a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8020a5c:	687b      	ldr	r3, [r7, #4]
 8020a5e:	689b      	ldr	r3, [r3, #8]
 8020a60:	494d      	ldr	r1, [pc, #308]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020a62:	4313      	orrs	r3, r2
 8020a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8020a66:	687b      	ldr	r3, [r7, #4]
 8020a68:	681b      	ldr	r3, [r3, #0]
 8020a6a:	f003 0301 	and.w	r3, r3, #1
 8020a6e:	2b00      	cmp	r3, #0
 8020a70:	d044      	beq.n	8020afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	685b      	ldr	r3, [r3, #4]
 8020a76:	2b01      	cmp	r3, #1
 8020a78:	d107      	bne.n	8020a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8020a7a:	4b47      	ldr	r3, [pc, #284]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020a7c:	681b      	ldr	r3, [r3, #0]
 8020a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020a82:	2b00      	cmp	r3, #0
 8020a84:	d119      	bne.n	8020aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8020a86:	2301      	movs	r3, #1
 8020a88:	e07f      	b.n	8020b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8020a8a:	687b      	ldr	r3, [r7, #4]
 8020a8c:	685b      	ldr	r3, [r3, #4]
 8020a8e:	2b02      	cmp	r3, #2
 8020a90:	d003      	beq.n	8020a9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8020a92:	687b      	ldr	r3, [r7, #4]
 8020a94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8020a96:	2b03      	cmp	r3, #3
 8020a98:	d107      	bne.n	8020aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8020a9a:	4b3f      	ldr	r3, [pc, #252]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020a9c:	681b      	ldr	r3, [r3, #0]
 8020a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020aa2:	2b00      	cmp	r3, #0
 8020aa4:	d109      	bne.n	8020aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8020aa6:	2301      	movs	r3, #1
 8020aa8:	e06f      	b.n	8020b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8020aaa:	4b3b      	ldr	r3, [pc, #236]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020aac:	681b      	ldr	r3, [r3, #0]
 8020aae:	f003 0302 	and.w	r3, r3, #2
 8020ab2:	2b00      	cmp	r3, #0
 8020ab4:	d101      	bne.n	8020aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8020ab6:	2301      	movs	r3, #1
 8020ab8:	e067      	b.n	8020b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8020aba:	4b37      	ldr	r3, [pc, #220]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020abc:	689b      	ldr	r3, [r3, #8]
 8020abe:	f023 0203 	bic.w	r2, r3, #3
 8020ac2:	687b      	ldr	r3, [r7, #4]
 8020ac4:	685b      	ldr	r3, [r3, #4]
 8020ac6:	4934      	ldr	r1, [pc, #208]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020ac8:	4313      	orrs	r3, r2
 8020aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8020acc:	f7fb f9e0 	bl	801be90 <HAL_GetTick>
 8020ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8020ad2:	e00a      	b.n	8020aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8020ad4:	f7fb f9dc 	bl	801be90 <HAL_GetTick>
 8020ad8:	4602      	mov	r2, r0
 8020ada:	68fb      	ldr	r3, [r7, #12]
 8020adc:	1ad3      	subs	r3, r2, r3
 8020ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8020ae2:	4293      	cmp	r3, r2
 8020ae4:	d901      	bls.n	8020aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8020ae6:	2303      	movs	r3, #3
 8020ae8:	e04f      	b.n	8020b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8020aea:	4b2b      	ldr	r3, [pc, #172]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020aec:	689b      	ldr	r3, [r3, #8]
 8020aee:	f003 020c 	and.w	r2, r3, #12
 8020af2:	687b      	ldr	r3, [r7, #4]
 8020af4:	685b      	ldr	r3, [r3, #4]
 8020af6:	009b      	lsls	r3, r3, #2
 8020af8:	429a      	cmp	r2, r3
 8020afa:	d1eb      	bne.n	8020ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8020afc:	4b25      	ldr	r3, [pc, #148]	; (8020b94 <HAL_RCC_ClockConfig+0x1b8>)
 8020afe:	681b      	ldr	r3, [r3, #0]
 8020b00:	f003 0307 	and.w	r3, r3, #7
 8020b04:	683a      	ldr	r2, [r7, #0]
 8020b06:	429a      	cmp	r2, r3
 8020b08:	d20c      	bcs.n	8020b24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8020b0a:	4b22      	ldr	r3, [pc, #136]	; (8020b94 <HAL_RCC_ClockConfig+0x1b8>)
 8020b0c:	683a      	ldr	r2, [r7, #0]
 8020b0e:	b2d2      	uxtb	r2, r2
 8020b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8020b12:	4b20      	ldr	r3, [pc, #128]	; (8020b94 <HAL_RCC_ClockConfig+0x1b8>)
 8020b14:	681b      	ldr	r3, [r3, #0]
 8020b16:	f003 0307 	and.w	r3, r3, #7
 8020b1a:	683a      	ldr	r2, [r7, #0]
 8020b1c:	429a      	cmp	r2, r3
 8020b1e:	d001      	beq.n	8020b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8020b20:	2301      	movs	r3, #1
 8020b22:	e032      	b.n	8020b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8020b24:	687b      	ldr	r3, [r7, #4]
 8020b26:	681b      	ldr	r3, [r3, #0]
 8020b28:	f003 0304 	and.w	r3, r3, #4
 8020b2c:	2b00      	cmp	r3, #0
 8020b2e:	d008      	beq.n	8020b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8020b30:	4b19      	ldr	r3, [pc, #100]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020b32:	689b      	ldr	r3, [r3, #8]
 8020b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8020b38:	687b      	ldr	r3, [r7, #4]
 8020b3a:	68db      	ldr	r3, [r3, #12]
 8020b3c:	4916      	ldr	r1, [pc, #88]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020b3e:	4313      	orrs	r3, r2
 8020b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8020b42:	687b      	ldr	r3, [r7, #4]
 8020b44:	681b      	ldr	r3, [r3, #0]
 8020b46:	f003 0308 	and.w	r3, r3, #8
 8020b4a:	2b00      	cmp	r3, #0
 8020b4c:	d009      	beq.n	8020b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8020b4e:	4b12      	ldr	r3, [pc, #72]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020b50:	689b      	ldr	r3, [r3, #8]
 8020b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8020b56:	687b      	ldr	r3, [r7, #4]
 8020b58:	691b      	ldr	r3, [r3, #16]
 8020b5a:	00db      	lsls	r3, r3, #3
 8020b5c:	490e      	ldr	r1, [pc, #56]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020b5e:	4313      	orrs	r3, r2
 8020b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8020b62:	f000 f821 	bl	8020ba8 <HAL_RCC_GetSysClockFreq>
 8020b66:	4602      	mov	r2, r0
 8020b68:	4b0b      	ldr	r3, [pc, #44]	; (8020b98 <HAL_RCC_ClockConfig+0x1bc>)
 8020b6a:	689b      	ldr	r3, [r3, #8]
 8020b6c:	091b      	lsrs	r3, r3, #4
 8020b6e:	f003 030f 	and.w	r3, r3, #15
 8020b72:	490a      	ldr	r1, [pc, #40]	; (8020b9c <HAL_RCC_ClockConfig+0x1c0>)
 8020b74:	5ccb      	ldrb	r3, [r1, r3]
 8020b76:	fa22 f303 	lsr.w	r3, r2, r3
 8020b7a:	4a09      	ldr	r2, [pc, #36]	; (8020ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8020b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8020b7e:	4b09      	ldr	r3, [pc, #36]	; (8020ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8020b80:	681b      	ldr	r3, [r3, #0]
 8020b82:	4618      	mov	r0, r3
 8020b84:	f7fb f940 	bl	801be08 <HAL_InitTick>

  return HAL_OK;
 8020b88:	2300      	movs	r3, #0
}
 8020b8a:	4618      	mov	r0, r3
 8020b8c:	3710      	adds	r7, #16
 8020b8e:	46bd      	mov	sp, r7
 8020b90:	bd80      	pop	{r7, pc}
 8020b92:	bf00      	nop
 8020b94:	40023c00 	.word	0x40023c00
 8020b98:	40023800 	.word	0x40023800
 8020b9c:	08027f2c 	.word	0x08027f2c
 8020ba0:	20000020 	.word	0x20000020
 8020ba4:	20000090 	.word	0x20000090

08020ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8020ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020bac:	b094      	sub	sp, #80	; 0x50
 8020bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8020bb0:	2300      	movs	r3, #0
 8020bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8020bb4:	2300      	movs	r3, #0
 8020bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020bb8:	2300      	movs	r3, #0
 8020bba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8020bbc:	2300      	movs	r3, #0
 8020bbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8020bc0:	4b79      	ldr	r3, [pc, #484]	; (8020da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8020bc2:	689b      	ldr	r3, [r3, #8]
 8020bc4:	f003 030c 	and.w	r3, r3, #12
 8020bc8:	2b08      	cmp	r3, #8
 8020bca:	d00d      	beq.n	8020be8 <HAL_RCC_GetSysClockFreq+0x40>
 8020bcc:	2b08      	cmp	r3, #8
 8020bce:	f200 80e1 	bhi.w	8020d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8020bd2:	2b00      	cmp	r3, #0
 8020bd4:	d002      	beq.n	8020bdc <HAL_RCC_GetSysClockFreq+0x34>
 8020bd6:	2b04      	cmp	r3, #4
 8020bd8:	d003      	beq.n	8020be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8020bda:	e0db      	b.n	8020d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8020bdc:	4b73      	ldr	r3, [pc, #460]	; (8020dac <HAL_RCC_GetSysClockFreq+0x204>)
 8020bde:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8020be0:	e0db      	b.n	8020d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8020be2:	4b73      	ldr	r3, [pc, #460]	; (8020db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8020be4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8020be6:	e0d8      	b.n	8020d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8020be8:	4b6f      	ldr	r3, [pc, #444]	; (8020da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8020bea:	685b      	ldr	r3, [r3, #4]
 8020bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8020bf0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8020bf2:	4b6d      	ldr	r3, [pc, #436]	; (8020da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8020bf4:	685b      	ldr	r3, [r3, #4]
 8020bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020bfa:	2b00      	cmp	r3, #0
 8020bfc:	d063      	beq.n	8020cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8020bfe:	4b6a      	ldr	r3, [pc, #424]	; (8020da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8020c00:	685b      	ldr	r3, [r3, #4]
 8020c02:	099b      	lsrs	r3, r3, #6
 8020c04:	2200      	movs	r2, #0
 8020c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8020c08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8020c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020c10:	633b      	str	r3, [r7, #48]	; 0x30
 8020c12:	2300      	movs	r3, #0
 8020c14:	637b      	str	r3, [r7, #52]	; 0x34
 8020c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8020c1a:	4622      	mov	r2, r4
 8020c1c:	462b      	mov	r3, r5
 8020c1e:	f04f 0000 	mov.w	r0, #0
 8020c22:	f04f 0100 	mov.w	r1, #0
 8020c26:	0159      	lsls	r1, r3, #5
 8020c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8020c2c:	0150      	lsls	r0, r2, #5
 8020c2e:	4602      	mov	r2, r0
 8020c30:	460b      	mov	r3, r1
 8020c32:	4621      	mov	r1, r4
 8020c34:	1a51      	subs	r1, r2, r1
 8020c36:	6139      	str	r1, [r7, #16]
 8020c38:	4629      	mov	r1, r5
 8020c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8020c3e:	617b      	str	r3, [r7, #20]
 8020c40:	f04f 0200 	mov.w	r2, #0
 8020c44:	f04f 0300 	mov.w	r3, #0
 8020c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8020c4c:	4659      	mov	r1, fp
 8020c4e:	018b      	lsls	r3, r1, #6
 8020c50:	4651      	mov	r1, sl
 8020c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8020c56:	4651      	mov	r1, sl
 8020c58:	018a      	lsls	r2, r1, #6
 8020c5a:	4651      	mov	r1, sl
 8020c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8020c60:	4659      	mov	r1, fp
 8020c62:	eb63 0901 	sbc.w	r9, r3, r1
 8020c66:	f04f 0200 	mov.w	r2, #0
 8020c6a:	f04f 0300 	mov.w	r3, #0
 8020c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8020c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8020c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8020c7a:	4690      	mov	r8, r2
 8020c7c:	4699      	mov	r9, r3
 8020c7e:	4623      	mov	r3, r4
 8020c80:	eb18 0303 	adds.w	r3, r8, r3
 8020c84:	60bb      	str	r3, [r7, #8]
 8020c86:	462b      	mov	r3, r5
 8020c88:	eb49 0303 	adc.w	r3, r9, r3
 8020c8c:	60fb      	str	r3, [r7, #12]
 8020c8e:	f04f 0200 	mov.w	r2, #0
 8020c92:	f04f 0300 	mov.w	r3, #0
 8020c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8020c9a:	4629      	mov	r1, r5
 8020c9c:	024b      	lsls	r3, r1, #9
 8020c9e:	4621      	mov	r1, r4
 8020ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8020ca4:	4621      	mov	r1, r4
 8020ca6:	024a      	lsls	r2, r1, #9
 8020ca8:	4610      	mov	r0, r2
 8020caa:	4619      	mov	r1, r3
 8020cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020cae:	2200      	movs	r2, #0
 8020cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8020cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8020cb8:	f7e0 f8ec 	bl	8000e94 <__aeabi_uldivmod>
 8020cbc:	4602      	mov	r2, r0
 8020cbe:	460b      	mov	r3, r1
 8020cc0:	4613      	mov	r3, r2
 8020cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020cc4:	e058      	b.n	8020d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8020cc6:	4b38      	ldr	r3, [pc, #224]	; (8020da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8020cc8:	685b      	ldr	r3, [r3, #4]
 8020cca:	099b      	lsrs	r3, r3, #6
 8020ccc:	2200      	movs	r2, #0
 8020cce:	4618      	mov	r0, r3
 8020cd0:	4611      	mov	r1, r2
 8020cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8020cd6:	623b      	str	r3, [r7, #32]
 8020cd8:	2300      	movs	r3, #0
 8020cda:	627b      	str	r3, [r7, #36]	; 0x24
 8020cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8020ce0:	4642      	mov	r2, r8
 8020ce2:	464b      	mov	r3, r9
 8020ce4:	f04f 0000 	mov.w	r0, #0
 8020ce8:	f04f 0100 	mov.w	r1, #0
 8020cec:	0159      	lsls	r1, r3, #5
 8020cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8020cf2:	0150      	lsls	r0, r2, #5
 8020cf4:	4602      	mov	r2, r0
 8020cf6:	460b      	mov	r3, r1
 8020cf8:	4641      	mov	r1, r8
 8020cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8020cfe:	4649      	mov	r1, r9
 8020d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8020d04:	f04f 0200 	mov.w	r2, #0
 8020d08:	f04f 0300 	mov.w	r3, #0
 8020d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8020d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8020d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8020d18:	ebb2 040a 	subs.w	r4, r2, sl
 8020d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8020d20:	f04f 0200 	mov.w	r2, #0
 8020d24:	f04f 0300 	mov.w	r3, #0
 8020d28:	00eb      	lsls	r3, r5, #3
 8020d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020d2e:	00e2      	lsls	r2, r4, #3
 8020d30:	4614      	mov	r4, r2
 8020d32:	461d      	mov	r5, r3
 8020d34:	4643      	mov	r3, r8
 8020d36:	18e3      	adds	r3, r4, r3
 8020d38:	603b      	str	r3, [r7, #0]
 8020d3a:	464b      	mov	r3, r9
 8020d3c:	eb45 0303 	adc.w	r3, r5, r3
 8020d40:	607b      	str	r3, [r7, #4]
 8020d42:	f04f 0200 	mov.w	r2, #0
 8020d46:	f04f 0300 	mov.w	r3, #0
 8020d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8020d4e:	4629      	mov	r1, r5
 8020d50:	028b      	lsls	r3, r1, #10
 8020d52:	4621      	mov	r1, r4
 8020d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8020d58:	4621      	mov	r1, r4
 8020d5a:	028a      	lsls	r2, r1, #10
 8020d5c:	4610      	mov	r0, r2
 8020d5e:	4619      	mov	r1, r3
 8020d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020d62:	2200      	movs	r2, #0
 8020d64:	61bb      	str	r3, [r7, #24]
 8020d66:	61fa      	str	r2, [r7, #28]
 8020d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020d6c:	f7e0 f892 	bl	8000e94 <__aeabi_uldivmod>
 8020d70:	4602      	mov	r2, r0
 8020d72:	460b      	mov	r3, r1
 8020d74:	4613      	mov	r3, r2
 8020d76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8020d78:	4b0b      	ldr	r3, [pc, #44]	; (8020da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8020d7a:	685b      	ldr	r3, [r3, #4]
 8020d7c:	0c1b      	lsrs	r3, r3, #16
 8020d7e:	f003 0303 	and.w	r3, r3, #3
 8020d82:	3301      	adds	r3, #1
 8020d84:	005b      	lsls	r3, r3, #1
 8020d86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8020d88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8020d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8020d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8020d92:	e002      	b.n	8020d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8020d94:	4b05      	ldr	r3, [pc, #20]	; (8020dac <HAL_RCC_GetSysClockFreq+0x204>)
 8020d96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8020d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8020d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8020d9c:	4618      	mov	r0, r3
 8020d9e:	3750      	adds	r7, #80	; 0x50
 8020da0:	46bd      	mov	sp, r7
 8020da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020da6:	bf00      	nop
 8020da8:	40023800 	.word	0x40023800
 8020dac:	00f42400 	.word	0x00f42400
 8020db0:	007a1200 	.word	0x007a1200

08020db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8020db4:	b480      	push	{r7}
 8020db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8020db8:	4b03      	ldr	r3, [pc, #12]	; (8020dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8020dba:	681b      	ldr	r3, [r3, #0]
}
 8020dbc:	4618      	mov	r0, r3
 8020dbe:	46bd      	mov	sp, r7
 8020dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dc4:	4770      	bx	lr
 8020dc6:	bf00      	nop
 8020dc8:	20000020 	.word	0x20000020

08020dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8020dcc:	b580      	push	{r7, lr}
 8020dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8020dd0:	f7ff fff0 	bl	8020db4 <HAL_RCC_GetHCLKFreq>
 8020dd4:	4602      	mov	r2, r0
 8020dd6:	4b05      	ldr	r3, [pc, #20]	; (8020dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8020dd8:	689b      	ldr	r3, [r3, #8]
 8020dda:	0a9b      	lsrs	r3, r3, #10
 8020ddc:	f003 0307 	and.w	r3, r3, #7
 8020de0:	4903      	ldr	r1, [pc, #12]	; (8020df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8020de2:	5ccb      	ldrb	r3, [r1, r3]
 8020de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020de8:	4618      	mov	r0, r3
 8020dea:	bd80      	pop	{r7, pc}
 8020dec:	40023800 	.word	0x40023800
 8020df0:	08027f3c 	.word	0x08027f3c

08020df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8020df4:	b580      	push	{r7, lr}
 8020df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8020df8:	f7ff ffdc 	bl	8020db4 <HAL_RCC_GetHCLKFreq>
 8020dfc:	4602      	mov	r2, r0
 8020dfe:	4b05      	ldr	r3, [pc, #20]	; (8020e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8020e00:	689b      	ldr	r3, [r3, #8]
 8020e02:	0b5b      	lsrs	r3, r3, #13
 8020e04:	f003 0307 	and.w	r3, r3, #7
 8020e08:	4903      	ldr	r1, [pc, #12]	; (8020e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8020e0a:	5ccb      	ldrb	r3, [r1, r3]
 8020e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020e10:	4618      	mov	r0, r3
 8020e12:	bd80      	pop	{r7, pc}
 8020e14:	40023800 	.word	0x40023800
 8020e18:	08027f3c 	.word	0x08027f3c

08020e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8020e1c:	b580      	push	{r7, lr}
 8020e1e:	b082      	sub	sp, #8
 8020e20:	af00      	add	r7, sp, #0
 8020e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020e24:	687b      	ldr	r3, [r7, #4]
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	d101      	bne.n	8020e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8020e2a:	2301      	movs	r3, #1
 8020e2c:	e041      	b.n	8020eb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020e34:	b2db      	uxtb	r3, r3
 8020e36:	2b00      	cmp	r3, #0
 8020e38:	d106      	bne.n	8020e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020e3a:	687b      	ldr	r3, [r7, #4]
 8020e3c:	2200      	movs	r2, #0
 8020e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8020e42:	6878      	ldr	r0, [r7, #4]
 8020e44:	f7e2 fc10 	bl	8003668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020e48:	687b      	ldr	r3, [r7, #4]
 8020e4a:	2202      	movs	r2, #2
 8020e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8020e50:	687b      	ldr	r3, [r7, #4]
 8020e52:	681a      	ldr	r2, [r3, #0]
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	3304      	adds	r3, #4
 8020e58:	4619      	mov	r1, r3
 8020e5a:	4610      	mov	r0, r2
 8020e5c:	f000 fd14 	bl	8021888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	2201      	movs	r2, #1
 8020e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020e68:	687b      	ldr	r3, [r7, #4]
 8020e6a:	2201      	movs	r2, #1
 8020e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020e70:	687b      	ldr	r3, [r7, #4]
 8020e72:	2201      	movs	r2, #1
 8020e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020e78:	687b      	ldr	r3, [r7, #4]
 8020e7a:	2201      	movs	r2, #1
 8020e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	2201      	movs	r2, #1
 8020e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020e88:	687b      	ldr	r3, [r7, #4]
 8020e8a:	2201      	movs	r2, #1
 8020e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	2201      	movs	r2, #1
 8020e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8020e98:	687b      	ldr	r3, [r7, #4]
 8020e9a:	2201      	movs	r2, #1
 8020e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020ea0:	687b      	ldr	r3, [r7, #4]
 8020ea2:	2201      	movs	r2, #1
 8020ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020ea8:	687b      	ldr	r3, [r7, #4]
 8020eaa:	2201      	movs	r2, #1
 8020eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8020eb0:	2300      	movs	r3, #0
}
 8020eb2:	4618      	mov	r0, r3
 8020eb4:	3708      	adds	r7, #8
 8020eb6:	46bd      	mov	sp, r7
 8020eb8:	bd80      	pop	{r7, pc}

08020eba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8020eba:	b580      	push	{r7, lr}
 8020ebc:	b082      	sub	sp, #8
 8020ebe:	af00      	add	r7, sp, #0
 8020ec0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020ec2:	687b      	ldr	r3, [r7, #4]
 8020ec4:	2b00      	cmp	r3, #0
 8020ec6:	d101      	bne.n	8020ecc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8020ec8:	2301      	movs	r3, #1
 8020eca:	e041      	b.n	8020f50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8020ecc:	687b      	ldr	r3, [r7, #4]
 8020ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020ed2:	b2db      	uxtb	r3, r3
 8020ed4:	2b00      	cmp	r3, #0
 8020ed6:	d106      	bne.n	8020ee6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	2200      	movs	r2, #0
 8020edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8020ee0:	6878      	ldr	r0, [r7, #4]
 8020ee2:	f000 f839 	bl	8020f58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	2202      	movs	r2, #2
 8020eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8020eee:	687b      	ldr	r3, [r7, #4]
 8020ef0:	681a      	ldr	r2, [r3, #0]
 8020ef2:	687b      	ldr	r3, [r7, #4]
 8020ef4:	3304      	adds	r3, #4
 8020ef6:	4619      	mov	r1, r3
 8020ef8:	4610      	mov	r0, r2
 8020efa:	f000 fcc5 	bl	8021888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8020efe:	687b      	ldr	r3, [r7, #4]
 8020f00:	2201      	movs	r2, #1
 8020f02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020f06:	687b      	ldr	r3, [r7, #4]
 8020f08:	2201      	movs	r2, #1
 8020f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020f0e:	687b      	ldr	r3, [r7, #4]
 8020f10:	2201      	movs	r2, #1
 8020f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020f16:	687b      	ldr	r3, [r7, #4]
 8020f18:	2201      	movs	r2, #1
 8020f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020f1e:	687b      	ldr	r3, [r7, #4]
 8020f20:	2201      	movs	r2, #1
 8020f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020f26:	687b      	ldr	r3, [r7, #4]
 8020f28:	2201      	movs	r2, #1
 8020f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8020f2e:	687b      	ldr	r3, [r7, #4]
 8020f30:	2201      	movs	r2, #1
 8020f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8020f36:	687b      	ldr	r3, [r7, #4]
 8020f38:	2201      	movs	r2, #1
 8020f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020f3e:	687b      	ldr	r3, [r7, #4]
 8020f40:	2201      	movs	r2, #1
 8020f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020f46:	687b      	ldr	r3, [r7, #4]
 8020f48:	2201      	movs	r2, #1
 8020f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8020f4e:	2300      	movs	r3, #0
}
 8020f50:	4618      	mov	r0, r3
 8020f52:	3708      	adds	r7, #8
 8020f54:	46bd      	mov	sp, r7
 8020f56:	bd80      	pop	{r7, pc}

08020f58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8020f58:	b480      	push	{r7}
 8020f5a:	b083      	sub	sp, #12
 8020f5c:	af00      	add	r7, sp, #0
 8020f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8020f60:	bf00      	nop
 8020f62:	370c      	adds	r7, #12
 8020f64:	46bd      	mov	sp, r7
 8020f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f6a:	4770      	bx	lr

08020f6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8020f6c:	b580      	push	{r7, lr}
 8020f6e:	b084      	sub	sp, #16
 8020f70:	af00      	add	r7, sp, #0
 8020f72:	6078      	str	r0, [r7, #4]
 8020f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8020f76:	683b      	ldr	r3, [r7, #0]
 8020f78:	2b00      	cmp	r3, #0
 8020f7a:	d109      	bne.n	8020f90 <HAL_TIM_PWM_Start+0x24>
 8020f7c:	687b      	ldr	r3, [r7, #4]
 8020f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8020f82:	b2db      	uxtb	r3, r3
 8020f84:	2b01      	cmp	r3, #1
 8020f86:	bf14      	ite	ne
 8020f88:	2301      	movne	r3, #1
 8020f8a:	2300      	moveq	r3, #0
 8020f8c:	b2db      	uxtb	r3, r3
 8020f8e:	e022      	b.n	8020fd6 <HAL_TIM_PWM_Start+0x6a>
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	2b04      	cmp	r3, #4
 8020f94:	d109      	bne.n	8020faa <HAL_TIM_PWM_Start+0x3e>
 8020f96:	687b      	ldr	r3, [r7, #4]
 8020f98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8020f9c:	b2db      	uxtb	r3, r3
 8020f9e:	2b01      	cmp	r3, #1
 8020fa0:	bf14      	ite	ne
 8020fa2:	2301      	movne	r3, #1
 8020fa4:	2300      	moveq	r3, #0
 8020fa6:	b2db      	uxtb	r3, r3
 8020fa8:	e015      	b.n	8020fd6 <HAL_TIM_PWM_Start+0x6a>
 8020faa:	683b      	ldr	r3, [r7, #0]
 8020fac:	2b08      	cmp	r3, #8
 8020fae:	d109      	bne.n	8020fc4 <HAL_TIM_PWM_Start+0x58>
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8020fb6:	b2db      	uxtb	r3, r3
 8020fb8:	2b01      	cmp	r3, #1
 8020fba:	bf14      	ite	ne
 8020fbc:	2301      	movne	r3, #1
 8020fbe:	2300      	moveq	r3, #0
 8020fc0:	b2db      	uxtb	r3, r3
 8020fc2:	e008      	b.n	8020fd6 <HAL_TIM_PWM_Start+0x6a>
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8020fca:	b2db      	uxtb	r3, r3
 8020fcc:	2b01      	cmp	r3, #1
 8020fce:	bf14      	ite	ne
 8020fd0:	2301      	movne	r3, #1
 8020fd2:	2300      	moveq	r3, #0
 8020fd4:	b2db      	uxtb	r3, r3
 8020fd6:	2b00      	cmp	r3, #0
 8020fd8:	d001      	beq.n	8020fde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8020fda:	2301      	movs	r3, #1
 8020fdc:	e068      	b.n	80210b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8020fde:	683b      	ldr	r3, [r7, #0]
 8020fe0:	2b00      	cmp	r3, #0
 8020fe2:	d104      	bne.n	8020fee <HAL_TIM_PWM_Start+0x82>
 8020fe4:	687b      	ldr	r3, [r7, #4]
 8020fe6:	2202      	movs	r2, #2
 8020fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020fec:	e013      	b.n	8021016 <HAL_TIM_PWM_Start+0xaa>
 8020fee:	683b      	ldr	r3, [r7, #0]
 8020ff0:	2b04      	cmp	r3, #4
 8020ff2:	d104      	bne.n	8020ffe <HAL_TIM_PWM_Start+0x92>
 8020ff4:	687b      	ldr	r3, [r7, #4]
 8020ff6:	2202      	movs	r2, #2
 8020ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020ffc:	e00b      	b.n	8021016 <HAL_TIM_PWM_Start+0xaa>
 8020ffe:	683b      	ldr	r3, [r7, #0]
 8021000:	2b08      	cmp	r3, #8
 8021002:	d104      	bne.n	802100e <HAL_TIM_PWM_Start+0xa2>
 8021004:	687b      	ldr	r3, [r7, #4]
 8021006:	2202      	movs	r2, #2
 8021008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802100c:	e003      	b.n	8021016 <HAL_TIM_PWM_Start+0xaa>
 802100e:	687b      	ldr	r3, [r7, #4]
 8021010:	2202      	movs	r2, #2
 8021012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8021016:	687b      	ldr	r3, [r7, #4]
 8021018:	681b      	ldr	r3, [r3, #0]
 802101a:	2201      	movs	r2, #1
 802101c:	6839      	ldr	r1, [r7, #0]
 802101e:	4618      	mov	r0, r3
 8021020:	f000 fed8 	bl	8021dd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8021024:	687b      	ldr	r3, [r7, #4]
 8021026:	681b      	ldr	r3, [r3, #0]
 8021028:	4a23      	ldr	r2, [pc, #140]	; (80210b8 <HAL_TIM_PWM_Start+0x14c>)
 802102a:	4293      	cmp	r3, r2
 802102c:	d107      	bne.n	802103e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 802102e:	687b      	ldr	r3, [r7, #4]
 8021030:	681b      	ldr	r3, [r3, #0]
 8021032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8021034:	687b      	ldr	r3, [r7, #4]
 8021036:	681b      	ldr	r3, [r3, #0]
 8021038:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802103c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802103e:	687b      	ldr	r3, [r7, #4]
 8021040:	681b      	ldr	r3, [r3, #0]
 8021042:	4a1d      	ldr	r2, [pc, #116]	; (80210b8 <HAL_TIM_PWM_Start+0x14c>)
 8021044:	4293      	cmp	r3, r2
 8021046:	d018      	beq.n	802107a <HAL_TIM_PWM_Start+0x10e>
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	681b      	ldr	r3, [r3, #0]
 802104c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021050:	d013      	beq.n	802107a <HAL_TIM_PWM_Start+0x10e>
 8021052:	687b      	ldr	r3, [r7, #4]
 8021054:	681b      	ldr	r3, [r3, #0]
 8021056:	4a19      	ldr	r2, [pc, #100]	; (80210bc <HAL_TIM_PWM_Start+0x150>)
 8021058:	4293      	cmp	r3, r2
 802105a:	d00e      	beq.n	802107a <HAL_TIM_PWM_Start+0x10e>
 802105c:	687b      	ldr	r3, [r7, #4]
 802105e:	681b      	ldr	r3, [r3, #0]
 8021060:	4a17      	ldr	r2, [pc, #92]	; (80210c0 <HAL_TIM_PWM_Start+0x154>)
 8021062:	4293      	cmp	r3, r2
 8021064:	d009      	beq.n	802107a <HAL_TIM_PWM_Start+0x10e>
 8021066:	687b      	ldr	r3, [r7, #4]
 8021068:	681b      	ldr	r3, [r3, #0]
 802106a:	4a16      	ldr	r2, [pc, #88]	; (80210c4 <HAL_TIM_PWM_Start+0x158>)
 802106c:	4293      	cmp	r3, r2
 802106e:	d004      	beq.n	802107a <HAL_TIM_PWM_Start+0x10e>
 8021070:	687b      	ldr	r3, [r7, #4]
 8021072:	681b      	ldr	r3, [r3, #0]
 8021074:	4a14      	ldr	r2, [pc, #80]	; (80210c8 <HAL_TIM_PWM_Start+0x15c>)
 8021076:	4293      	cmp	r3, r2
 8021078:	d111      	bne.n	802109e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802107a:	687b      	ldr	r3, [r7, #4]
 802107c:	681b      	ldr	r3, [r3, #0]
 802107e:	689b      	ldr	r3, [r3, #8]
 8021080:	f003 0307 	and.w	r3, r3, #7
 8021084:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8021086:	68fb      	ldr	r3, [r7, #12]
 8021088:	2b06      	cmp	r3, #6
 802108a:	d010      	beq.n	80210ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 802108c:	687b      	ldr	r3, [r7, #4]
 802108e:	681b      	ldr	r3, [r3, #0]
 8021090:	681a      	ldr	r2, [r3, #0]
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	681b      	ldr	r3, [r3, #0]
 8021096:	f042 0201 	orr.w	r2, r2, #1
 802109a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802109c:	e007      	b.n	80210ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802109e:	687b      	ldr	r3, [r7, #4]
 80210a0:	681b      	ldr	r3, [r3, #0]
 80210a2:	681a      	ldr	r2, [r3, #0]
 80210a4:	687b      	ldr	r3, [r7, #4]
 80210a6:	681b      	ldr	r3, [r3, #0]
 80210a8:	f042 0201 	orr.w	r2, r2, #1
 80210ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80210ae:	2300      	movs	r3, #0
}
 80210b0:	4618      	mov	r0, r3
 80210b2:	3710      	adds	r7, #16
 80210b4:	46bd      	mov	sp, r7
 80210b6:	bd80      	pop	{r7, pc}
 80210b8:	40010000 	.word	0x40010000
 80210bc:	40000400 	.word	0x40000400
 80210c0:	40000800 	.word	0x40000800
 80210c4:	40000c00 	.word	0x40000c00
 80210c8:	40014000 	.word	0x40014000

080210cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80210cc:	b580      	push	{r7, lr}
 80210ce:	b084      	sub	sp, #16
 80210d0:	af00      	add	r7, sp, #0
 80210d2:	6078      	str	r0, [r7, #4]
 80210d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80210d6:	2300      	movs	r3, #0
 80210d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80210da:	683b      	ldr	r3, [r7, #0]
 80210dc:	2b00      	cmp	r3, #0
 80210de:	d104      	bne.n	80210ea <HAL_TIM_IC_Start_IT+0x1e>
 80210e0:	687b      	ldr	r3, [r7, #4]
 80210e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80210e6:	b2db      	uxtb	r3, r3
 80210e8:	e013      	b.n	8021112 <HAL_TIM_IC_Start_IT+0x46>
 80210ea:	683b      	ldr	r3, [r7, #0]
 80210ec:	2b04      	cmp	r3, #4
 80210ee:	d104      	bne.n	80210fa <HAL_TIM_IC_Start_IT+0x2e>
 80210f0:	687b      	ldr	r3, [r7, #4]
 80210f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80210f6:	b2db      	uxtb	r3, r3
 80210f8:	e00b      	b.n	8021112 <HAL_TIM_IC_Start_IT+0x46>
 80210fa:	683b      	ldr	r3, [r7, #0]
 80210fc:	2b08      	cmp	r3, #8
 80210fe:	d104      	bne.n	802110a <HAL_TIM_IC_Start_IT+0x3e>
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8021106:	b2db      	uxtb	r3, r3
 8021108:	e003      	b.n	8021112 <HAL_TIM_IC_Start_IT+0x46>
 802110a:	687b      	ldr	r3, [r7, #4]
 802110c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8021110:	b2db      	uxtb	r3, r3
 8021112:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8021114:	683b      	ldr	r3, [r7, #0]
 8021116:	2b00      	cmp	r3, #0
 8021118:	d104      	bne.n	8021124 <HAL_TIM_IC_Start_IT+0x58>
 802111a:	687b      	ldr	r3, [r7, #4]
 802111c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8021120:	b2db      	uxtb	r3, r3
 8021122:	e013      	b.n	802114c <HAL_TIM_IC_Start_IT+0x80>
 8021124:	683b      	ldr	r3, [r7, #0]
 8021126:	2b04      	cmp	r3, #4
 8021128:	d104      	bne.n	8021134 <HAL_TIM_IC_Start_IT+0x68>
 802112a:	687b      	ldr	r3, [r7, #4]
 802112c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8021130:	b2db      	uxtb	r3, r3
 8021132:	e00b      	b.n	802114c <HAL_TIM_IC_Start_IT+0x80>
 8021134:	683b      	ldr	r3, [r7, #0]
 8021136:	2b08      	cmp	r3, #8
 8021138:	d104      	bne.n	8021144 <HAL_TIM_IC_Start_IT+0x78>
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021140:	b2db      	uxtb	r3, r3
 8021142:	e003      	b.n	802114c <HAL_TIM_IC_Start_IT+0x80>
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802114a:	b2db      	uxtb	r3, r3
 802114c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 802114e:	7bbb      	ldrb	r3, [r7, #14]
 8021150:	2b01      	cmp	r3, #1
 8021152:	d102      	bne.n	802115a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8021154:	7b7b      	ldrb	r3, [r7, #13]
 8021156:	2b01      	cmp	r3, #1
 8021158:	d001      	beq.n	802115e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 802115a:	2301      	movs	r3, #1
 802115c:	e0c2      	b.n	80212e4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 802115e:	683b      	ldr	r3, [r7, #0]
 8021160:	2b00      	cmp	r3, #0
 8021162:	d104      	bne.n	802116e <HAL_TIM_IC_Start_IT+0xa2>
 8021164:	687b      	ldr	r3, [r7, #4]
 8021166:	2202      	movs	r2, #2
 8021168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802116c:	e013      	b.n	8021196 <HAL_TIM_IC_Start_IT+0xca>
 802116e:	683b      	ldr	r3, [r7, #0]
 8021170:	2b04      	cmp	r3, #4
 8021172:	d104      	bne.n	802117e <HAL_TIM_IC_Start_IT+0xb2>
 8021174:	687b      	ldr	r3, [r7, #4]
 8021176:	2202      	movs	r2, #2
 8021178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 802117c:	e00b      	b.n	8021196 <HAL_TIM_IC_Start_IT+0xca>
 802117e:	683b      	ldr	r3, [r7, #0]
 8021180:	2b08      	cmp	r3, #8
 8021182:	d104      	bne.n	802118e <HAL_TIM_IC_Start_IT+0xc2>
 8021184:	687b      	ldr	r3, [r7, #4]
 8021186:	2202      	movs	r2, #2
 8021188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802118c:	e003      	b.n	8021196 <HAL_TIM_IC_Start_IT+0xca>
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	2202      	movs	r2, #2
 8021192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8021196:	683b      	ldr	r3, [r7, #0]
 8021198:	2b00      	cmp	r3, #0
 802119a:	d104      	bne.n	80211a6 <HAL_TIM_IC_Start_IT+0xda>
 802119c:	687b      	ldr	r3, [r7, #4]
 802119e:	2202      	movs	r2, #2
 80211a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80211a4:	e013      	b.n	80211ce <HAL_TIM_IC_Start_IT+0x102>
 80211a6:	683b      	ldr	r3, [r7, #0]
 80211a8:	2b04      	cmp	r3, #4
 80211aa:	d104      	bne.n	80211b6 <HAL_TIM_IC_Start_IT+0xea>
 80211ac:	687b      	ldr	r3, [r7, #4]
 80211ae:	2202      	movs	r2, #2
 80211b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80211b4:	e00b      	b.n	80211ce <HAL_TIM_IC_Start_IT+0x102>
 80211b6:	683b      	ldr	r3, [r7, #0]
 80211b8:	2b08      	cmp	r3, #8
 80211ba:	d104      	bne.n	80211c6 <HAL_TIM_IC_Start_IT+0xfa>
 80211bc:	687b      	ldr	r3, [r7, #4]
 80211be:	2202      	movs	r2, #2
 80211c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80211c4:	e003      	b.n	80211ce <HAL_TIM_IC_Start_IT+0x102>
 80211c6:	687b      	ldr	r3, [r7, #4]
 80211c8:	2202      	movs	r2, #2
 80211ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80211ce:	683b      	ldr	r3, [r7, #0]
 80211d0:	2b0c      	cmp	r3, #12
 80211d2:	d841      	bhi.n	8021258 <HAL_TIM_IC_Start_IT+0x18c>
 80211d4:	a201      	add	r2, pc, #4	; (adr r2, 80211dc <HAL_TIM_IC_Start_IT+0x110>)
 80211d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80211da:	bf00      	nop
 80211dc:	08021211 	.word	0x08021211
 80211e0:	08021259 	.word	0x08021259
 80211e4:	08021259 	.word	0x08021259
 80211e8:	08021259 	.word	0x08021259
 80211ec:	08021223 	.word	0x08021223
 80211f0:	08021259 	.word	0x08021259
 80211f4:	08021259 	.word	0x08021259
 80211f8:	08021259 	.word	0x08021259
 80211fc:	08021235 	.word	0x08021235
 8021200:	08021259 	.word	0x08021259
 8021204:	08021259 	.word	0x08021259
 8021208:	08021259 	.word	0x08021259
 802120c:	08021247 	.word	0x08021247
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	681b      	ldr	r3, [r3, #0]
 8021214:	68da      	ldr	r2, [r3, #12]
 8021216:	687b      	ldr	r3, [r7, #4]
 8021218:	681b      	ldr	r3, [r3, #0]
 802121a:	f042 0202 	orr.w	r2, r2, #2
 802121e:	60da      	str	r2, [r3, #12]
      break;
 8021220:	e01d      	b.n	802125e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8021222:	687b      	ldr	r3, [r7, #4]
 8021224:	681b      	ldr	r3, [r3, #0]
 8021226:	68da      	ldr	r2, [r3, #12]
 8021228:	687b      	ldr	r3, [r7, #4]
 802122a:	681b      	ldr	r3, [r3, #0]
 802122c:	f042 0204 	orr.w	r2, r2, #4
 8021230:	60da      	str	r2, [r3, #12]
      break;
 8021232:	e014      	b.n	802125e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8021234:	687b      	ldr	r3, [r7, #4]
 8021236:	681b      	ldr	r3, [r3, #0]
 8021238:	68da      	ldr	r2, [r3, #12]
 802123a:	687b      	ldr	r3, [r7, #4]
 802123c:	681b      	ldr	r3, [r3, #0]
 802123e:	f042 0208 	orr.w	r2, r2, #8
 8021242:	60da      	str	r2, [r3, #12]
      break;
 8021244:	e00b      	b.n	802125e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8021246:	687b      	ldr	r3, [r7, #4]
 8021248:	681b      	ldr	r3, [r3, #0]
 802124a:	68da      	ldr	r2, [r3, #12]
 802124c:	687b      	ldr	r3, [r7, #4]
 802124e:	681b      	ldr	r3, [r3, #0]
 8021250:	f042 0210 	orr.w	r2, r2, #16
 8021254:	60da      	str	r2, [r3, #12]
      break;
 8021256:	e002      	b.n	802125e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8021258:	2301      	movs	r3, #1
 802125a:	73fb      	strb	r3, [r7, #15]
      break;
 802125c:	bf00      	nop
  }

  if (status == HAL_OK)
 802125e:	7bfb      	ldrb	r3, [r7, #15]
 8021260:	2b00      	cmp	r3, #0
 8021262:	d13e      	bne.n	80212e2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8021264:	687b      	ldr	r3, [r7, #4]
 8021266:	681b      	ldr	r3, [r3, #0]
 8021268:	2201      	movs	r2, #1
 802126a:	6839      	ldr	r1, [r7, #0]
 802126c:	4618      	mov	r0, r3
 802126e:	f000 fdb1 	bl	8021dd4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8021272:	687b      	ldr	r3, [r7, #4]
 8021274:	681b      	ldr	r3, [r3, #0]
 8021276:	4a1d      	ldr	r2, [pc, #116]	; (80212ec <HAL_TIM_IC_Start_IT+0x220>)
 8021278:	4293      	cmp	r3, r2
 802127a:	d018      	beq.n	80212ae <HAL_TIM_IC_Start_IT+0x1e2>
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	681b      	ldr	r3, [r3, #0]
 8021280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021284:	d013      	beq.n	80212ae <HAL_TIM_IC_Start_IT+0x1e2>
 8021286:	687b      	ldr	r3, [r7, #4]
 8021288:	681b      	ldr	r3, [r3, #0]
 802128a:	4a19      	ldr	r2, [pc, #100]	; (80212f0 <HAL_TIM_IC_Start_IT+0x224>)
 802128c:	4293      	cmp	r3, r2
 802128e:	d00e      	beq.n	80212ae <HAL_TIM_IC_Start_IT+0x1e2>
 8021290:	687b      	ldr	r3, [r7, #4]
 8021292:	681b      	ldr	r3, [r3, #0]
 8021294:	4a17      	ldr	r2, [pc, #92]	; (80212f4 <HAL_TIM_IC_Start_IT+0x228>)
 8021296:	4293      	cmp	r3, r2
 8021298:	d009      	beq.n	80212ae <HAL_TIM_IC_Start_IT+0x1e2>
 802129a:	687b      	ldr	r3, [r7, #4]
 802129c:	681b      	ldr	r3, [r3, #0]
 802129e:	4a16      	ldr	r2, [pc, #88]	; (80212f8 <HAL_TIM_IC_Start_IT+0x22c>)
 80212a0:	4293      	cmp	r3, r2
 80212a2:	d004      	beq.n	80212ae <HAL_TIM_IC_Start_IT+0x1e2>
 80212a4:	687b      	ldr	r3, [r7, #4]
 80212a6:	681b      	ldr	r3, [r3, #0]
 80212a8:	4a14      	ldr	r2, [pc, #80]	; (80212fc <HAL_TIM_IC_Start_IT+0x230>)
 80212aa:	4293      	cmp	r3, r2
 80212ac:	d111      	bne.n	80212d2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80212ae:	687b      	ldr	r3, [r7, #4]
 80212b0:	681b      	ldr	r3, [r3, #0]
 80212b2:	689b      	ldr	r3, [r3, #8]
 80212b4:	f003 0307 	and.w	r3, r3, #7
 80212b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80212ba:	68bb      	ldr	r3, [r7, #8]
 80212bc:	2b06      	cmp	r3, #6
 80212be:	d010      	beq.n	80212e2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	681b      	ldr	r3, [r3, #0]
 80212c4:	681a      	ldr	r2, [r3, #0]
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	681b      	ldr	r3, [r3, #0]
 80212ca:	f042 0201 	orr.w	r2, r2, #1
 80212ce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80212d0:	e007      	b.n	80212e2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80212d2:	687b      	ldr	r3, [r7, #4]
 80212d4:	681b      	ldr	r3, [r3, #0]
 80212d6:	681a      	ldr	r2, [r3, #0]
 80212d8:	687b      	ldr	r3, [r7, #4]
 80212da:	681b      	ldr	r3, [r3, #0]
 80212dc:	f042 0201 	orr.w	r2, r2, #1
 80212e0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80212e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80212e4:	4618      	mov	r0, r3
 80212e6:	3710      	adds	r7, #16
 80212e8:	46bd      	mov	sp, r7
 80212ea:	bd80      	pop	{r7, pc}
 80212ec:	40010000 	.word	0x40010000
 80212f0:	40000400 	.word	0x40000400
 80212f4:	40000800 	.word	0x40000800
 80212f8:	40000c00 	.word	0x40000c00
 80212fc:	40014000 	.word	0x40014000

08021300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8021300:	b580      	push	{r7, lr}
 8021302:	b082      	sub	sp, #8
 8021304:	af00      	add	r7, sp, #0
 8021306:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8021308:	687b      	ldr	r3, [r7, #4]
 802130a:	681b      	ldr	r3, [r3, #0]
 802130c:	691b      	ldr	r3, [r3, #16]
 802130e:	f003 0302 	and.w	r3, r3, #2
 8021312:	2b02      	cmp	r3, #2
 8021314:	d122      	bne.n	802135c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8021316:	687b      	ldr	r3, [r7, #4]
 8021318:	681b      	ldr	r3, [r3, #0]
 802131a:	68db      	ldr	r3, [r3, #12]
 802131c:	f003 0302 	and.w	r3, r3, #2
 8021320:	2b02      	cmp	r3, #2
 8021322:	d11b      	bne.n	802135c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8021324:	687b      	ldr	r3, [r7, #4]
 8021326:	681b      	ldr	r3, [r3, #0]
 8021328:	f06f 0202 	mvn.w	r2, #2
 802132c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802132e:	687b      	ldr	r3, [r7, #4]
 8021330:	2201      	movs	r2, #1
 8021332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8021334:	687b      	ldr	r3, [r7, #4]
 8021336:	681b      	ldr	r3, [r3, #0]
 8021338:	699b      	ldr	r3, [r3, #24]
 802133a:	f003 0303 	and.w	r3, r3, #3
 802133e:	2b00      	cmp	r3, #0
 8021340:	d003      	beq.n	802134a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8021342:	6878      	ldr	r0, [r7, #4]
 8021344:	f000 fa81 	bl	802184a <HAL_TIM_IC_CaptureCallback>
 8021348:	e005      	b.n	8021356 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802134a:	6878      	ldr	r0, [r7, #4]
 802134c:	f000 fa73 	bl	8021836 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021350:	6878      	ldr	r0, [r7, #4]
 8021352:	f000 fa84 	bl	802185e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8021356:	687b      	ldr	r3, [r7, #4]
 8021358:	2200      	movs	r2, #0
 802135a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802135c:	687b      	ldr	r3, [r7, #4]
 802135e:	681b      	ldr	r3, [r3, #0]
 8021360:	691b      	ldr	r3, [r3, #16]
 8021362:	f003 0304 	and.w	r3, r3, #4
 8021366:	2b04      	cmp	r3, #4
 8021368:	d122      	bne.n	80213b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802136a:	687b      	ldr	r3, [r7, #4]
 802136c:	681b      	ldr	r3, [r3, #0]
 802136e:	68db      	ldr	r3, [r3, #12]
 8021370:	f003 0304 	and.w	r3, r3, #4
 8021374:	2b04      	cmp	r3, #4
 8021376:	d11b      	bne.n	80213b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8021378:	687b      	ldr	r3, [r7, #4]
 802137a:	681b      	ldr	r3, [r3, #0]
 802137c:	f06f 0204 	mvn.w	r2, #4
 8021380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8021382:	687b      	ldr	r3, [r7, #4]
 8021384:	2202      	movs	r2, #2
 8021386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	681b      	ldr	r3, [r3, #0]
 802138c:	699b      	ldr	r3, [r3, #24]
 802138e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8021392:	2b00      	cmp	r3, #0
 8021394:	d003      	beq.n	802139e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8021396:	6878      	ldr	r0, [r7, #4]
 8021398:	f000 fa57 	bl	802184a <HAL_TIM_IC_CaptureCallback>
 802139c:	e005      	b.n	80213aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802139e:	6878      	ldr	r0, [r7, #4]
 80213a0:	f000 fa49 	bl	8021836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80213a4:	6878      	ldr	r0, [r7, #4]
 80213a6:	f000 fa5a 	bl	802185e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80213aa:	687b      	ldr	r3, [r7, #4]
 80213ac:	2200      	movs	r2, #0
 80213ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80213b0:	687b      	ldr	r3, [r7, #4]
 80213b2:	681b      	ldr	r3, [r3, #0]
 80213b4:	691b      	ldr	r3, [r3, #16]
 80213b6:	f003 0308 	and.w	r3, r3, #8
 80213ba:	2b08      	cmp	r3, #8
 80213bc:	d122      	bne.n	8021404 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80213be:	687b      	ldr	r3, [r7, #4]
 80213c0:	681b      	ldr	r3, [r3, #0]
 80213c2:	68db      	ldr	r3, [r3, #12]
 80213c4:	f003 0308 	and.w	r3, r3, #8
 80213c8:	2b08      	cmp	r3, #8
 80213ca:	d11b      	bne.n	8021404 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80213cc:	687b      	ldr	r3, [r7, #4]
 80213ce:	681b      	ldr	r3, [r3, #0]
 80213d0:	f06f 0208 	mvn.w	r2, #8
 80213d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80213d6:	687b      	ldr	r3, [r7, #4]
 80213d8:	2204      	movs	r2, #4
 80213da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80213dc:	687b      	ldr	r3, [r7, #4]
 80213de:	681b      	ldr	r3, [r3, #0]
 80213e0:	69db      	ldr	r3, [r3, #28]
 80213e2:	f003 0303 	and.w	r3, r3, #3
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	d003      	beq.n	80213f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80213ea:	6878      	ldr	r0, [r7, #4]
 80213ec:	f000 fa2d 	bl	802184a <HAL_TIM_IC_CaptureCallback>
 80213f0:	e005      	b.n	80213fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80213f2:	6878      	ldr	r0, [r7, #4]
 80213f4:	f000 fa1f 	bl	8021836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80213f8:	6878      	ldr	r0, [r7, #4]
 80213fa:	f000 fa30 	bl	802185e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80213fe:	687b      	ldr	r3, [r7, #4]
 8021400:	2200      	movs	r2, #0
 8021402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8021404:	687b      	ldr	r3, [r7, #4]
 8021406:	681b      	ldr	r3, [r3, #0]
 8021408:	691b      	ldr	r3, [r3, #16]
 802140a:	f003 0310 	and.w	r3, r3, #16
 802140e:	2b10      	cmp	r3, #16
 8021410:	d122      	bne.n	8021458 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8021412:	687b      	ldr	r3, [r7, #4]
 8021414:	681b      	ldr	r3, [r3, #0]
 8021416:	68db      	ldr	r3, [r3, #12]
 8021418:	f003 0310 	and.w	r3, r3, #16
 802141c:	2b10      	cmp	r3, #16
 802141e:	d11b      	bne.n	8021458 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8021420:	687b      	ldr	r3, [r7, #4]
 8021422:	681b      	ldr	r3, [r3, #0]
 8021424:	f06f 0210 	mvn.w	r2, #16
 8021428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802142a:	687b      	ldr	r3, [r7, #4]
 802142c:	2208      	movs	r2, #8
 802142e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8021430:	687b      	ldr	r3, [r7, #4]
 8021432:	681b      	ldr	r3, [r3, #0]
 8021434:	69db      	ldr	r3, [r3, #28]
 8021436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802143a:	2b00      	cmp	r3, #0
 802143c:	d003      	beq.n	8021446 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802143e:	6878      	ldr	r0, [r7, #4]
 8021440:	f000 fa03 	bl	802184a <HAL_TIM_IC_CaptureCallback>
 8021444:	e005      	b.n	8021452 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8021446:	6878      	ldr	r0, [r7, #4]
 8021448:	f000 f9f5 	bl	8021836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802144c:	6878      	ldr	r0, [r7, #4]
 802144e:	f000 fa06 	bl	802185e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8021452:	687b      	ldr	r3, [r7, #4]
 8021454:	2200      	movs	r2, #0
 8021456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8021458:	687b      	ldr	r3, [r7, #4]
 802145a:	681b      	ldr	r3, [r3, #0]
 802145c:	691b      	ldr	r3, [r3, #16]
 802145e:	f003 0301 	and.w	r3, r3, #1
 8021462:	2b01      	cmp	r3, #1
 8021464:	d10e      	bne.n	8021484 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8021466:	687b      	ldr	r3, [r7, #4]
 8021468:	681b      	ldr	r3, [r3, #0]
 802146a:	68db      	ldr	r3, [r3, #12]
 802146c:	f003 0301 	and.w	r3, r3, #1
 8021470:	2b01      	cmp	r3, #1
 8021472:	d107      	bne.n	8021484 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8021474:	687b      	ldr	r3, [r7, #4]
 8021476:	681b      	ldr	r3, [r3, #0]
 8021478:	f06f 0201 	mvn.w	r2, #1
 802147c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802147e:	6878      	ldr	r0, [r7, #4]
 8021480:	f000 f9cf 	bl	8021822 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8021484:	687b      	ldr	r3, [r7, #4]
 8021486:	681b      	ldr	r3, [r3, #0]
 8021488:	691b      	ldr	r3, [r3, #16]
 802148a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802148e:	2b80      	cmp	r3, #128	; 0x80
 8021490:	d10e      	bne.n	80214b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8021492:	687b      	ldr	r3, [r7, #4]
 8021494:	681b      	ldr	r3, [r3, #0]
 8021496:	68db      	ldr	r3, [r3, #12]
 8021498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802149c:	2b80      	cmp	r3, #128	; 0x80
 802149e:	d107      	bne.n	80214b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80214a0:	687b      	ldr	r3, [r7, #4]
 80214a2:	681b      	ldr	r3, [r3, #0]
 80214a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80214a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80214aa:	6878      	ldr	r0, [r7, #4]
 80214ac:	f000 fd30 	bl	8021f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80214b0:	687b      	ldr	r3, [r7, #4]
 80214b2:	681b      	ldr	r3, [r3, #0]
 80214b4:	691b      	ldr	r3, [r3, #16]
 80214b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80214ba:	2b40      	cmp	r3, #64	; 0x40
 80214bc:	d10e      	bne.n	80214dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80214be:	687b      	ldr	r3, [r7, #4]
 80214c0:	681b      	ldr	r3, [r3, #0]
 80214c2:	68db      	ldr	r3, [r3, #12]
 80214c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80214c8:	2b40      	cmp	r3, #64	; 0x40
 80214ca:	d107      	bne.n	80214dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80214cc:	687b      	ldr	r3, [r7, #4]
 80214ce:	681b      	ldr	r3, [r3, #0]
 80214d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80214d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80214d6:	6878      	ldr	r0, [r7, #4]
 80214d8:	f000 f9cb 	bl	8021872 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80214dc:	687b      	ldr	r3, [r7, #4]
 80214de:	681b      	ldr	r3, [r3, #0]
 80214e0:	691b      	ldr	r3, [r3, #16]
 80214e2:	f003 0320 	and.w	r3, r3, #32
 80214e6:	2b20      	cmp	r3, #32
 80214e8:	d10e      	bne.n	8021508 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80214ea:	687b      	ldr	r3, [r7, #4]
 80214ec:	681b      	ldr	r3, [r3, #0]
 80214ee:	68db      	ldr	r3, [r3, #12]
 80214f0:	f003 0320 	and.w	r3, r3, #32
 80214f4:	2b20      	cmp	r3, #32
 80214f6:	d107      	bne.n	8021508 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	681b      	ldr	r3, [r3, #0]
 80214fc:	f06f 0220 	mvn.w	r2, #32
 8021500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8021502:	6878      	ldr	r0, [r7, #4]
 8021504:	f000 fcfa 	bl	8021efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8021508:	bf00      	nop
 802150a:	3708      	adds	r7, #8
 802150c:	46bd      	mov	sp, r7
 802150e:	bd80      	pop	{r7, pc}

08021510 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8021510:	b580      	push	{r7, lr}
 8021512:	b086      	sub	sp, #24
 8021514:	af00      	add	r7, sp, #0
 8021516:	60f8      	str	r0, [r7, #12]
 8021518:	60b9      	str	r1, [r7, #8]
 802151a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802151c:	2300      	movs	r3, #0
 802151e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8021520:	68fb      	ldr	r3, [r7, #12]
 8021522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021526:	2b01      	cmp	r3, #1
 8021528:	d101      	bne.n	802152e <HAL_TIM_PWM_ConfigChannel+0x1e>
 802152a:	2302      	movs	r3, #2
 802152c:	e0ae      	b.n	802168c <HAL_TIM_PWM_ConfigChannel+0x17c>
 802152e:	68fb      	ldr	r3, [r7, #12]
 8021530:	2201      	movs	r2, #1
 8021532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8021536:	687b      	ldr	r3, [r7, #4]
 8021538:	2b0c      	cmp	r3, #12
 802153a:	f200 809f 	bhi.w	802167c <HAL_TIM_PWM_ConfigChannel+0x16c>
 802153e:	a201      	add	r2, pc, #4	; (adr r2, 8021544 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8021540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021544:	08021579 	.word	0x08021579
 8021548:	0802167d 	.word	0x0802167d
 802154c:	0802167d 	.word	0x0802167d
 8021550:	0802167d 	.word	0x0802167d
 8021554:	080215b9 	.word	0x080215b9
 8021558:	0802167d 	.word	0x0802167d
 802155c:	0802167d 	.word	0x0802167d
 8021560:	0802167d 	.word	0x0802167d
 8021564:	080215fb 	.word	0x080215fb
 8021568:	0802167d 	.word	0x0802167d
 802156c:	0802167d 	.word	0x0802167d
 8021570:	0802167d 	.word	0x0802167d
 8021574:	0802163b 	.word	0x0802163b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8021578:	68fb      	ldr	r3, [r7, #12]
 802157a:	681b      	ldr	r3, [r3, #0]
 802157c:	68b9      	ldr	r1, [r7, #8]
 802157e:	4618      	mov	r0, r3
 8021580:	f000 fa02 	bl	8021988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8021584:	68fb      	ldr	r3, [r7, #12]
 8021586:	681b      	ldr	r3, [r3, #0]
 8021588:	699a      	ldr	r2, [r3, #24]
 802158a:	68fb      	ldr	r3, [r7, #12]
 802158c:	681b      	ldr	r3, [r3, #0]
 802158e:	f042 0208 	orr.w	r2, r2, #8
 8021592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8021594:	68fb      	ldr	r3, [r7, #12]
 8021596:	681b      	ldr	r3, [r3, #0]
 8021598:	699a      	ldr	r2, [r3, #24]
 802159a:	68fb      	ldr	r3, [r7, #12]
 802159c:	681b      	ldr	r3, [r3, #0]
 802159e:	f022 0204 	bic.w	r2, r2, #4
 80215a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80215a4:	68fb      	ldr	r3, [r7, #12]
 80215a6:	681b      	ldr	r3, [r3, #0]
 80215a8:	6999      	ldr	r1, [r3, #24]
 80215aa:	68bb      	ldr	r3, [r7, #8]
 80215ac:	691a      	ldr	r2, [r3, #16]
 80215ae:	68fb      	ldr	r3, [r7, #12]
 80215b0:	681b      	ldr	r3, [r3, #0]
 80215b2:	430a      	orrs	r2, r1
 80215b4:	619a      	str	r2, [r3, #24]
      break;
 80215b6:	e064      	b.n	8021682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80215b8:	68fb      	ldr	r3, [r7, #12]
 80215ba:	681b      	ldr	r3, [r3, #0]
 80215bc:	68b9      	ldr	r1, [r7, #8]
 80215be:	4618      	mov	r0, r3
 80215c0:	f000 fa48 	bl	8021a54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80215c4:	68fb      	ldr	r3, [r7, #12]
 80215c6:	681b      	ldr	r3, [r3, #0]
 80215c8:	699a      	ldr	r2, [r3, #24]
 80215ca:	68fb      	ldr	r3, [r7, #12]
 80215cc:	681b      	ldr	r3, [r3, #0]
 80215ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80215d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80215d4:	68fb      	ldr	r3, [r7, #12]
 80215d6:	681b      	ldr	r3, [r3, #0]
 80215d8:	699a      	ldr	r2, [r3, #24]
 80215da:	68fb      	ldr	r3, [r7, #12]
 80215dc:	681b      	ldr	r3, [r3, #0]
 80215de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80215e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80215e4:	68fb      	ldr	r3, [r7, #12]
 80215e6:	681b      	ldr	r3, [r3, #0]
 80215e8:	6999      	ldr	r1, [r3, #24]
 80215ea:	68bb      	ldr	r3, [r7, #8]
 80215ec:	691b      	ldr	r3, [r3, #16]
 80215ee:	021a      	lsls	r2, r3, #8
 80215f0:	68fb      	ldr	r3, [r7, #12]
 80215f2:	681b      	ldr	r3, [r3, #0]
 80215f4:	430a      	orrs	r2, r1
 80215f6:	619a      	str	r2, [r3, #24]
      break;
 80215f8:	e043      	b.n	8021682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80215fa:	68fb      	ldr	r3, [r7, #12]
 80215fc:	681b      	ldr	r3, [r3, #0]
 80215fe:	68b9      	ldr	r1, [r7, #8]
 8021600:	4618      	mov	r0, r3
 8021602:	f000 fa93 	bl	8021b2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8021606:	68fb      	ldr	r3, [r7, #12]
 8021608:	681b      	ldr	r3, [r3, #0]
 802160a:	69da      	ldr	r2, [r3, #28]
 802160c:	68fb      	ldr	r3, [r7, #12]
 802160e:	681b      	ldr	r3, [r3, #0]
 8021610:	f042 0208 	orr.w	r2, r2, #8
 8021614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8021616:	68fb      	ldr	r3, [r7, #12]
 8021618:	681b      	ldr	r3, [r3, #0]
 802161a:	69da      	ldr	r2, [r3, #28]
 802161c:	68fb      	ldr	r3, [r7, #12]
 802161e:	681b      	ldr	r3, [r3, #0]
 8021620:	f022 0204 	bic.w	r2, r2, #4
 8021624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8021626:	68fb      	ldr	r3, [r7, #12]
 8021628:	681b      	ldr	r3, [r3, #0]
 802162a:	69d9      	ldr	r1, [r3, #28]
 802162c:	68bb      	ldr	r3, [r7, #8]
 802162e:	691a      	ldr	r2, [r3, #16]
 8021630:	68fb      	ldr	r3, [r7, #12]
 8021632:	681b      	ldr	r3, [r3, #0]
 8021634:	430a      	orrs	r2, r1
 8021636:	61da      	str	r2, [r3, #28]
      break;
 8021638:	e023      	b.n	8021682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802163a:	68fb      	ldr	r3, [r7, #12]
 802163c:	681b      	ldr	r3, [r3, #0]
 802163e:	68b9      	ldr	r1, [r7, #8]
 8021640:	4618      	mov	r0, r3
 8021642:	f000 fadd 	bl	8021c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8021646:	68fb      	ldr	r3, [r7, #12]
 8021648:	681b      	ldr	r3, [r3, #0]
 802164a:	69da      	ldr	r2, [r3, #28]
 802164c:	68fb      	ldr	r3, [r7, #12]
 802164e:	681b      	ldr	r3, [r3, #0]
 8021650:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8021654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8021656:	68fb      	ldr	r3, [r7, #12]
 8021658:	681b      	ldr	r3, [r3, #0]
 802165a:	69da      	ldr	r2, [r3, #28]
 802165c:	68fb      	ldr	r3, [r7, #12]
 802165e:	681b      	ldr	r3, [r3, #0]
 8021660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8021664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8021666:	68fb      	ldr	r3, [r7, #12]
 8021668:	681b      	ldr	r3, [r3, #0]
 802166a:	69d9      	ldr	r1, [r3, #28]
 802166c:	68bb      	ldr	r3, [r7, #8]
 802166e:	691b      	ldr	r3, [r3, #16]
 8021670:	021a      	lsls	r2, r3, #8
 8021672:	68fb      	ldr	r3, [r7, #12]
 8021674:	681b      	ldr	r3, [r3, #0]
 8021676:	430a      	orrs	r2, r1
 8021678:	61da      	str	r2, [r3, #28]
      break;
 802167a:	e002      	b.n	8021682 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 802167c:	2301      	movs	r3, #1
 802167e:	75fb      	strb	r3, [r7, #23]
      break;
 8021680:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8021682:	68fb      	ldr	r3, [r7, #12]
 8021684:	2200      	movs	r2, #0
 8021686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 802168a:	7dfb      	ldrb	r3, [r7, #23]
}
 802168c:	4618      	mov	r0, r3
 802168e:	3718      	adds	r7, #24
 8021690:	46bd      	mov	sp, r7
 8021692:	bd80      	pop	{r7, pc}

08021694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8021694:	b580      	push	{r7, lr}
 8021696:	b084      	sub	sp, #16
 8021698:	af00      	add	r7, sp, #0
 802169a:	6078      	str	r0, [r7, #4]
 802169c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802169e:	2300      	movs	r3, #0
 80216a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80216a2:	687b      	ldr	r3, [r7, #4]
 80216a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80216a8:	2b01      	cmp	r3, #1
 80216aa:	d101      	bne.n	80216b0 <HAL_TIM_ConfigClockSource+0x1c>
 80216ac:	2302      	movs	r3, #2
 80216ae:	e0b4      	b.n	802181a <HAL_TIM_ConfigClockSource+0x186>
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	2201      	movs	r2, #1
 80216b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80216b8:	687b      	ldr	r3, [r7, #4]
 80216ba:	2202      	movs	r2, #2
 80216bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80216c0:	687b      	ldr	r3, [r7, #4]
 80216c2:	681b      	ldr	r3, [r3, #0]
 80216c4:	689b      	ldr	r3, [r3, #8]
 80216c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80216c8:	68bb      	ldr	r3, [r7, #8]
 80216ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80216ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80216d0:	68bb      	ldr	r3, [r7, #8]
 80216d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80216d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80216d8:	687b      	ldr	r3, [r7, #4]
 80216da:	681b      	ldr	r3, [r3, #0]
 80216dc:	68ba      	ldr	r2, [r7, #8]
 80216de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80216e0:	683b      	ldr	r3, [r7, #0]
 80216e2:	681b      	ldr	r3, [r3, #0]
 80216e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80216e8:	d03e      	beq.n	8021768 <HAL_TIM_ConfigClockSource+0xd4>
 80216ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80216ee:	f200 8087 	bhi.w	8021800 <HAL_TIM_ConfigClockSource+0x16c>
 80216f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80216f6:	f000 8086 	beq.w	8021806 <HAL_TIM_ConfigClockSource+0x172>
 80216fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80216fe:	d87f      	bhi.n	8021800 <HAL_TIM_ConfigClockSource+0x16c>
 8021700:	2b70      	cmp	r3, #112	; 0x70
 8021702:	d01a      	beq.n	802173a <HAL_TIM_ConfigClockSource+0xa6>
 8021704:	2b70      	cmp	r3, #112	; 0x70
 8021706:	d87b      	bhi.n	8021800 <HAL_TIM_ConfigClockSource+0x16c>
 8021708:	2b60      	cmp	r3, #96	; 0x60
 802170a:	d050      	beq.n	80217ae <HAL_TIM_ConfigClockSource+0x11a>
 802170c:	2b60      	cmp	r3, #96	; 0x60
 802170e:	d877      	bhi.n	8021800 <HAL_TIM_ConfigClockSource+0x16c>
 8021710:	2b50      	cmp	r3, #80	; 0x50
 8021712:	d03c      	beq.n	802178e <HAL_TIM_ConfigClockSource+0xfa>
 8021714:	2b50      	cmp	r3, #80	; 0x50
 8021716:	d873      	bhi.n	8021800 <HAL_TIM_ConfigClockSource+0x16c>
 8021718:	2b40      	cmp	r3, #64	; 0x40
 802171a:	d058      	beq.n	80217ce <HAL_TIM_ConfigClockSource+0x13a>
 802171c:	2b40      	cmp	r3, #64	; 0x40
 802171e:	d86f      	bhi.n	8021800 <HAL_TIM_ConfigClockSource+0x16c>
 8021720:	2b30      	cmp	r3, #48	; 0x30
 8021722:	d064      	beq.n	80217ee <HAL_TIM_ConfigClockSource+0x15a>
 8021724:	2b30      	cmp	r3, #48	; 0x30
 8021726:	d86b      	bhi.n	8021800 <HAL_TIM_ConfigClockSource+0x16c>
 8021728:	2b20      	cmp	r3, #32
 802172a:	d060      	beq.n	80217ee <HAL_TIM_ConfigClockSource+0x15a>
 802172c:	2b20      	cmp	r3, #32
 802172e:	d867      	bhi.n	8021800 <HAL_TIM_ConfigClockSource+0x16c>
 8021730:	2b00      	cmp	r3, #0
 8021732:	d05c      	beq.n	80217ee <HAL_TIM_ConfigClockSource+0x15a>
 8021734:	2b10      	cmp	r3, #16
 8021736:	d05a      	beq.n	80217ee <HAL_TIM_ConfigClockSource+0x15a>
 8021738:	e062      	b.n	8021800 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802173a:	687b      	ldr	r3, [r7, #4]
 802173c:	6818      	ldr	r0, [r3, #0]
 802173e:	683b      	ldr	r3, [r7, #0]
 8021740:	6899      	ldr	r1, [r3, #8]
 8021742:	683b      	ldr	r3, [r7, #0]
 8021744:	685a      	ldr	r2, [r3, #4]
 8021746:	683b      	ldr	r3, [r7, #0]
 8021748:	68db      	ldr	r3, [r3, #12]
 802174a:	f000 fb23 	bl	8021d94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 802174e:	687b      	ldr	r3, [r7, #4]
 8021750:	681b      	ldr	r3, [r3, #0]
 8021752:	689b      	ldr	r3, [r3, #8]
 8021754:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8021756:	68bb      	ldr	r3, [r7, #8]
 8021758:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 802175c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 802175e:	687b      	ldr	r3, [r7, #4]
 8021760:	681b      	ldr	r3, [r3, #0]
 8021762:	68ba      	ldr	r2, [r7, #8]
 8021764:	609a      	str	r2, [r3, #8]
      break;
 8021766:	e04f      	b.n	8021808 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8021768:	687b      	ldr	r3, [r7, #4]
 802176a:	6818      	ldr	r0, [r3, #0]
 802176c:	683b      	ldr	r3, [r7, #0]
 802176e:	6899      	ldr	r1, [r3, #8]
 8021770:	683b      	ldr	r3, [r7, #0]
 8021772:	685a      	ldr	r2, [r3, #4]
 8021774:	683b      	ldr	r3, [r7, #0]
 8021776:	68db      	ldr	r3, [r3, #12]
 8021778:	f000 fb0c 	bl	8021d94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802177c:	687b      	ldr	r3, [r7, #4]
 802177e:	681b      	ldr	r3, [r3, #0]
 8021780:	689a      	ldr	r2, [r3, #8]
 8021782:	687b      	ldr	r3, [r7, #4]
 8021784:	681b      	ldr	r3, [r3, #0]
 8021786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802178a:	609a      	str	r2, [r3, #8]
      break;
 802178c:	e03c      	b.n	8021808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802178e:	687b      	ldr	r3, [r7, #4]
 8021790:	6818      	ldr	r0, [r3, #0]
 8021792:	683b      	ldr	r3, [r7, #0]
 8021794:	6859      	ldr	r1, [r3, #4]
 8021796:	683b      	ldr	r3, [r7, #0]
 8021798:	68db      	ldr	r3, [r3, #12]
 802179a:	461a      	mov	r2, r3
 802179c:	f000 fa80 	bl	8021ca0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80217a0:	687b      	ldr	r3, [r7, #4]
 80217a2:	681b      	ldr	r3, [r3, #0]
 80217a4:	2150      	movs	r1, #80	; 0x50
 80217a6:	4618      	mov	r0, r3
 80217a8:	f000 fad9 	bl	8021d5e <TIM_ITRx_SetConfig>
      break;
 80217ac:	e02c      	b.n	8021808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80217ae:	687b      	ldr	r3, [r7, #4]
 80217b0:	6818      	ldr	r0, [r3, #0]
 80217b2:	683b      	ldr	r3, [r7, #0]
 80217b4:	6859      	ldr	r1, [r3, #4]
 80217b6:	683b      	ldr	r3, [r7, #0]
 80217b8:	68db      	ldr	r3, [r3, #12]
 80217ba:	461a      	mov	r2, r3
 80217bc:	f000 fa9f 	bl	8021cfe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80217c0:	687b      	ldr	r3, [r7, #4]
 80217c2:	681b      	ldr	r3, [r3, #0]
 80217c4:	2160      	movs	r1, #96	; 0x60
 80217c6:	4618      	mov	r0, r3
 80217c8:	f000 fac9 	bl	8021d5e <TIM_ITRx_SetConfig>
      break;
 80217cc:	e01c      	b.n	8021808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80217ce:	687b      	ldr	r3, [r7, #4]
 80217d0:	6818      	ldr	r0, [r3, #0]
 80217d2:	683b      	ldr	r3, [r7, #0]
 80217d4:	6859      	ldr	r1, [r3, #4]
 80217d6:	683b      	ldr	r3, [r7, #0]
 80217d8:	68db      	ldr	r3, [r3, #12]
 80217da:	461a      	mov	r2, r3
 80217dc:	f000 fa60 	bl	8021ca0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80217e0:	687b      	ldr	r3, [r7, #4]
 80217e2:	681b      	ldr	r3, [r3, #0]
 80217e4:	2140      	movs	r1, #64	; 0x40
 80217e6:	4618      	mov	r0, r3
 80217e8:	f000 fab9 	bl	8021d5e <TIM_ITRx_SetConfig>
      break;
 80217ec:	e00c      	b.n	8021808 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80217ee:	687b      	ldr	r3, [r7, #4]
 80217f0:	681a      	ldr	r2, [r3, #0]
 80217f2:	683b      	ldr	r3, [r7, #0]
 80217f4:	681b      	ldr	r3, [r3, #0]
 80217f6:	4619      	mov	r1, r3
 80217f8:	4610      	mov	r0, r2
 80217fa:	f000 fab0 	bl	8021d5e <TIM_ITRx_SetConfig>
      break;
 80217fe:	e003      	b.n	8021808 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8021800:	2301      	movs	r3, #1
 8021802:	73fb      	strb	r3, [r7, #15]
      break;
 8021804:	e000      	b.n	8021808 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8021806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8021808:	687b      	ldr	r3, [r7, #4]
 802180a:	2201      	movs	r2, #1
 802180c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8021810:	687b      	ldr	r3, [r7, #4]
 8021812:	2200      	movs	r2, #0
 8021814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8021818:	7bfb      	ldrb	r3, [r7, #15]
}
 802181a:	4618      	mov	r0, r3
 802181c:	3710      	adds	r7, #16
 802181e:	46bd      	mov	sp, r7
 8021820:	bd80      	pop	{r7, pc}

08021822 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021822:	b480      	push	{r7}
 8021824:	b083      	sub	sp, #12
 8021826:	af00      	add	r7, sp, #0
 8021828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 802182a:	bf00      	nop
 802182c:	370c      	adds	r7, #12
 802182e:	46bd      	mov	sp, r7
 8021830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021834:	4770      	bx	lr

08021836 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021836:	b480      	push	{r7}
 8021838:	b083      	sub	sp, #12
 802183a:	af00      	add	r7, sp, #0
 802183c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802183e:	bf00      	nop
 8021840:	370c      	adds	r7, #12
 8021842:	46bd      	mov	sp, r7
 8021844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021848:	4770      	bx	lr

0802184a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802184a:	b480      	push	{r7}
 802184c:	b083      	sub	sp, #12
 802184e:	af00      	add	r7, sp, #0
 8021850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8021852:	bf00      	nop
 8021854:	370c      	adds	r7, #12
 8021856:	46bd      	mov	sp, r7
 8021858:	f85d 7b04 	ldr.w	r7, [sp], #4
 802185c:	4770      	bx	lr

0802185e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802185e:	b480      	push	{r7}
 8021860:	b083      	sub	sp, #12
 8021862:	af00      	add	r7, sp, #0
 8021864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8021866:	bf00      	nop
 8021868:	370c      	adds	r7, #12
 802186a:	46bd      	mov	sp, r7
 802186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021870:	4770      	bx	lr

08021872 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8021872:	b480      	push	{r7}
 8021874:	b083      	sub	sp, #12
 8021876:	af00      	add	r7, sp, #0
 8021878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802187a:	bf00      	nop
 802187c:	370c      	adds	r7, #12
 802187e:	46bd      	mov	sp, r7
 8021880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021884:	4770      	bx	lr
	...

08021888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8021888:	b480      	push	{r7}
 802188a:	b085      	sub	sp, #20
 802188c:	af00      	add	r7, sp, #0
 802188e:	6078      	str	r0, [r7, #4]
 8021890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8021892:	687b      	ldr	r3, [r7, #4]
 8021894:	681b      	ldr	r3, [r3, #0]
 8021896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8021898:	687b      	ldr	r3, [r7, #4]
 802189a:	4a34      	ldr	r2, [pc, #208]	; (802196c <TIM_Base_SetConfig+0xe4>)
 802189c:	4293      	cmp	r3, r2
 802189e:	d00f      	beq.n	80218c0 <TIM_Base_SetConfig+0x38>
 80218a0:	687b      	ldr	r3, [r7, #4]
 80218a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80218a6:	d00b      	beq.n	80218c0 <TIM_Base_SetConfig+0x38>
 80218a8:	687b      	ldr	r3, [r7, #4]
 80218aa:	4a31      	ldr	r2, [pc, #196]	; (8021970 <TIM_Base_SetConfig+0xe8>)
 80218ac:	4293      	cmp	r3, r2
 80218ae:	d007      	beq.n	80218c0 <TIM_Base_SetConfig+0x38>
 80218b0:	687b      	ldr	r3, [r7, #4]
 80218b2:	4a30      	ldr	r2, [pc, #192]	; (8021974 <TIM_Base_SetConfig+0xec>)
 80218b4:	4293      	cmp	r3, r2
 80218b6:	d003      	beq.n	80218c0 <TIM_Base_SetConfig+0x38>
 80218b8:	687b      	ldr	r3, [r7, #4]
 80218ba:	4a2f      	ldr	r2, [pc, #188]	; (8021978 <TIM_Base_SetConfig+0xf0>)
 80218bc:	4293      	cmp	r3, r2
 80218be:	d108      	bne.n	80218d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80218c0:	68fb      	ldr	r3, [r7, #12]
 80218c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80218c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80218c8:	683b      	ldr	r3, [r7, #0]
 80218ca:	685b      	ldr	r3, [r3, #4]
 80218cc:	68fa      	ldr	r2, [r7, #12]
 80218ce:	4313      	orrs	r3, r2
 80218d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80218d2:	687b      	ldr	r3, [r7, #4]
 80218d4:	4a25      	ldr	r2, [pc, #148]	; (802196c <TIM_Base_SetConfig+0xe4>)
 80218d6:	4293      	cmp	r3, r2
 80218d8:	d01b      	beq.n	8021912 <TIM_Base_SetConfig+0x8a>
 80218da:	687b      	ldr	r3, [r7, #4]
 80218dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80218e0:	d017      	beq.n	8021912 <TIM_Base_SetConfig+0x8a>
 80218e2:	687b      	ldr	r3, [r7, #4]
 80218e4:	4a22      	ldr	r2, [pc, #136]	; (8021970 <TIM_Base_SetConfig+0xe8>)
 80218e6:	4293      	cmp	r3, r2
 80218e8:	d013      	beq.n	8021912 <TIM_Base_SetConfig+0x8a>
 80218ea:	687b      	ldr	r3, [r7, #4]
 80218ec:	4a21      	ldr	r2, [pc, #132]	; (8021974 <TIM_Base_SetConfig+0xec>)
 80218ee:	4293      	cmp	r3, r2
 80218f0:	d00f      	beq.n	8021912 <TIM_Base_SetConfig+0x8a>
 80218f2:	687b      	ldr	r3, [r7, #4]
 80218f4:	4a20      	ldr	r2, [pc, #128]	; (8021978 <TIM_Base_SetConfig+0xf0>)
 80218f6:	4293      	cmp	r3, r2
 80218f8:	d00b      	beq.n	8021912 <TIM_Base_SetConfig+0x8a>
 80218fa:	687b      	ldr	r3, [r7, #4]
 80218fc:	4a1f      	ldr	r2, [pc, #124]	; (802197c <TIM_Base_SetConfig+0xf4>)
 80218fe:	4293      	cmp	r3, r2
 8021900:	d007      	beq.n	8021912 <TIM_Base_SetConfig+0x8a>
 8021902:	687b      	ldr	r3, [r7, #4]
 8021904:	4a1e      	ldr	r2, [pc, #120]	; (8021980 <TIM_Base_SetConfig+0xf8>)
 8021906:	4293      	cmp	r3, r2
 8021908:	d003      	beq.n	8021912 <TIM_Base_SetConfig+0x8a>
 802190a:	687b      	ldr	r3, [r7, #4]
 802190c:	4a1d      	ldr	r2, [pc, #116]	; (8021984 <TIM_Base_SetConfig+0xfc>)
 802190e:	4293      	cmp	r3, r2
 8021910:	d108      	bne.n	8021924 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8021912:	68fb      	ldr	r3, [r7, #12]
 8021914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8021918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802191a:	683b      	ldr	r3, [r7, #0]
 802191c:	68db      	ldr	r3, [r3, #12]
 802191e:	68fa      	ldr	r2, [r7, #12]
 8021920:	4313      	orrs	r3, r2
 8021922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8021924:	68fb      	ldr	r3, [r7, #12]
 8021926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802192a:	683b      	ldr	r3, [r7, #0]
 802192c:	695b      	ldr	r3, [r3, #20]
 802192e:	4313      	orrs	r3, r2
 8021930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8021932:	687b      	ldr	r3, [r7, #4]
 8021934:	68fa      	ldr	r2, [r7, #12]
 8021936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8021938:	683b      	ldr	r3, [r7, #0]
 802193a:	689a      	ldr	r2, [r3, #8]
 802193c:	687b      	ldr	r3, [r7, #4]
 802193e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8021940:	683b      	ldr	r3, [r7, #0]
 8021942:	681a      	ldr	r2, [r3, #0]
 8021944:	687b      	ldr	r3, [r7, #4]
 8021946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8021948:	687b      	ldr	r3, [r7, #4]
 802194a:	4a08      	ldr	r2, [pc, #32]	; (802196c <TIM_Base_SetConfig+0xe4>)
 802194c:	4293      	cmp	r3, r2
 802194e:	d103      	bne.n	8021958 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8021950:	683b      	ldr	r3, [r7, #0]
 8021952:	691a      	ldr	r2, [r3, #16]
 8021954:	687b      	ldr	r3, [r7, #4]
 8021956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8021958:	687b      	ldr	r3, [r7, #4]
 802195a:	2201      	movs	r2, #1
 802195c:	615a      	str	r2, [r3, #20]
}
 802195e:	bf00      	nop
 8021960:	3714      	adds	r7, #20
 8021962:	46bd      	mov	sp, r7
 8021964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021968:	4770      	bx	lr
 802196a:	bf00      	nop
 802196c:	40010000 	.word	0x40010000
 8021970:	40000400 	.word	0x40000400
 8021974:	40000800 	.word	0x40000800
 8021978:	40000c00 	.word	0x40000c00
 802197c:	40014000 	.word	0x40014000
 8021980:	40014400 	.word	0x40014400
 8021984:	40014800 	.word	0x40014800

08021988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021988:	b480      	push	{r7}
 802198a:	b087      	sub	sp, #28
 802198c:	af00      	add	r7, sp, #0
 802198e:	6078      	str	r0, [r7, #4]
 8021990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8021992:	687b      	ldr	r3, [r7, #4]
 8021994:	6a1b      	ldr	r3, [r3, #32]
 8021996:	f023 0201 	bic.w	r2, r3, #1
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802199e:	687b      	ldr	r3, [r7, #4]
 80219a0:	6a1b      	ldr	r3, [r3, #32]
 80219a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	685b      	ldr	r3, [r3, #4]
 80219a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80219aa:	687b      	ldr	r3, [r7, #4]
 80219ac:	699b      	ldr	r3, [r3, #24]
 80219ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80219b0:	68fb      	ldr	r3, [r7, #12]
 80219b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80219b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80219b8:	68fb      	ldr	r3, [r7, #12]
 80219ba:	f023 0303 	bic.w	r3, r3, #3
 80219be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80219c0:	683b      	ldr	r3, [r7, #0]
 80219c2:	681b      	ldr	r3, [r3, #0]
 80219c4:	68fa      	ldr	r2, [r7, #12]
 80219c6:	4313      	orrs	r3, r2
 80219c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80219ca:	697b      	ldr	r3, [r7, #20]
 80219cc:	f023 0302 	bic.w	r3, r3, #2
 80219d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80219d2:	683b      	ldr	r3, [r7, #0]
 80219d4:	689b      	ldr	r3, [r3, #8]
 80219d6:	697a      	ldr	r2, [r7, #20]
 80219d8:	4313      	orrs	r3, r2
 80219da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80219dc:	687b      	ldr	r3, [r7, #4]
 80219de:	4a1c      	ldr	r2, [pc, #112]	; (8021a50 <TIM_OC1_SetConfig+0xc8>)
 80219e0:	4293      	cmp	r3, r2
 80219e2:	d10c      	bne.n	80219fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80219e4:	697b      	ldr	r3, [r7, #20]
 80219e6:	f023 0308 	bic.w	r3, r3, #8
 80219ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80219ec:	683b      	ldr	r3, [r7, #0]
 80219ee:	68db      	ldr	r3, [r3, #12]
 80219f0:	697a      	ldr	r2, [r7, #20]
 80219f2:	4313      	orrs	r3, r2
 80219f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80219f6:	697b      	ldr	r3, [r7, #20]
 80219f8:	f023 0304 	bic.w	r3, r3, #4
 80219fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80219fe:	687b      	ldr	r3, [r7, #4]
 8021a00:	4a13      	ldr	r2, [pc, #76]	; (8021a50 <TIM_OC1_SetConfig+0xc8>)
 8021a02:	4293      	cmp	r3, r2
 8021a04:	d111      	bne.n	8021a2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8021a06:	693b      	ldr	r3, [r7, #16]
 8021a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8021a0e:	693b      	ldr	r3, [r7, #16]
 8021a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8021a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8021a16:	683b      	ldr	r3, [r7, #0]
 8021a18:	695b      	ldr	r3, [r3, #20]
 8021a1a:	693a      	ldr	r2, [r7, #16]
 8021a1c:	4313      	orrs	r3, r2
 8021a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8021a20:	683b      	ldr	r3, [r7, #0]
 8021a22:	699b      	ldr	r3, [r3, #24]
 8021a24:	693a      	ldr	r2, [r7, #16]
 8021a26:	4313      	orrs	r3, r2
 8021a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	693a      	ldr	r2, [r7, #16]
 8021a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8021a30:	687b      	ldr	r3, [r7, #4]
 8021a32:	68fa      	ldr	r2, [r7, #12]
 8021a34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8021a36:	683b      	ldr	r3, [r7, #0]
 8021a38:	685a      	ldr	r2, [r3, #4]
 8021a3a:	687b      	ldr	r3, [r7, #4]
 8021a3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021a3e:	687b      	ldr	r3, [r7, #4]
 8021a40:	697a      	ldr	r2, [r7, #20]
 8021a42:	621a      	str	r2, [r3, #32]
}
 8021a44:	bf00      	nop
 8021a46:	371c      	adds	r7, #28
 8021a48:	46bd      	mov	sp, r7
 8021a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a4e:	4770      	bx	lr
 8021a50:	40010000 	.word	0x40010000

08021a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021a54:	b480      	push	{r7}
 8021a56:	b087      	sub	sp, #28
 8021a58:	af00      	add	r7, sp, #0
 8021a5a:	6078      	str	r0, [r7, #4]
 8021a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8021a5e:	687b      	ldr	r3, [r7, #4]
 8021a60:	6a1b      	ldr	r3, [r3, #32]
 8021a62:	f023 0210 	bic.w	r2, r3, #16
 8021a66:	687b      	ldr	r3, [r7, #4]
 8021a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8021a6a:	687b      	ldr	r3, [r7, #4]
 8021a6c:	6a1b      	ldr	r3, [r3, #32]
 8021a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021a70:	687b      	ldr	r3, [r7, #4]
 8021a72:	685b      	ldr	r3, [r3, #4]
 8021a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8021a76:	687b      	ldr	r3, [r7, #4]
 8021a78:	699b      	ldr	r3, [r3, #24]
 8021a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8021a7c:	68fb      	ldr	r3, [r7, #12]
 8021a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8021a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8021a84:	68fb      	ldr	r3, [r7, #12]
 8021a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8021a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8021a8c:	683b      	ldr	r3, [r7, #0]
 8021a8e:	681b      	ldr	r3, [r3, #0]
 8021a90:	021b      	lsls	r3, r3, #8
 8021a92:	68fa      	ldr	r2, [r7, #12]
 8021a94:	4313      	orrs	r3, r2
 8021a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8021a98:	697b      	ldr	r3, [r7, #20]
 8021a9a:	f023 0320 	bic.w	r3, r3, #32
 8021a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8021aa0:	683b      	ldr	r3, [r7, #0]
 8021aa2:	689b      	ldr	r3, [r3, #8]
 8021aa4:	011b      	lsls	r3, r3, #4
 8021aa6:	697a      	ldr	r2, [r7, #20]
 8021aa8:	4313      	orrs	r3, r2
 8021aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8021aac:	687b      	ldr	r3, [r7, #4]
 8021aae:	4a1e      	ldr	r2, [pc, #120]	; (8021b28 <TIM_OC2_SetConfig+0xd4>)
 8021ab0:	4293      	cmp	r3, r2
 8021ab2:	d10d      	bne.n	8021ad0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8021ab4:	697b      	ldr	r3, [r7, #20]
 8021ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8021abc:	683b      	ldr	r3, [r7, #0]
 8021abe:	68db      	ldr	r3, [r3, #12]
 8021ac0:	011b      	lsls	r3, r3, #4
 8021ac2:	697a      	ldr	r2, [r7, #20]
 8021ac4:	4313      	orrs	r3, r2
 8021ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8021ac8:	697b      	ldr	r3, [r7, #20]
 8021aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021ace:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021ad0:	687b      	ldr	r3, [r7, #4]
 8021ad2:	4a15      	ldr	r2, [pc, #84]	; (8021b28 <TIM_OC2_SetConfig+0xd4>)
 8021ad4:	4293      	cmp	r3, r2
 8021ad6:	d113      	bne.n	8021b00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8021ad8:	693b      	ldr	r3, [r7, #16]
 8021ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8021ade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8021ae0:	693b      	ldr	r3, [r7, #16]
 8021ae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8021ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8021ae8:	683b      	ldr	r3, [r7, #0]
 8021aea:	695b      	ldr	r3, [r3, #20]
 8021aec:	009b      	lsls	r3, r3, #2
 8021aee:	693a      	ldr	r2, [r7, #16]
 8021af0:	4313      	orrs	r3, r2
 8021af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8021af4:	683b      	ldr	r3, [r7, #0]
 8021af6:	699b      	ldr	r3, [r3, #24]
 8021af8:	009b      	lsls	r3, r3, #2
 8021afa:	693a      	ldr	r2, [r7, #16]
 8021afc:	4313      	orrs	r3, r2
 8021afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021b00:	687b      	ldr	r3, [r7, #4]
 8021b02:	693a      	ldr	r2, [r7, #16]
 8021b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8021b06:	687b      	ldr	r3, [r7, #4]
 8021b08:	68fa      	ldr	r2, [r7, #12]
 8021b0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8021b0c:	683b      	ldr	r3, [r7, #0]
 8021b0e:	685a      	ldr	r2, [r3, #4]
 8021b10:	687b      	ldr	r3, [r7, #4]
 8021b12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	697a      	ldr	r2, [r7, #20]
 8021b18:	621a      	str	r2, [r3, #32]
}
 8021b1a:	bf00      	nop
 8021b1c:	371c      	adds	r7, #28
 8021b1e:	46bd      	mov	sp, r7
 8021b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b24:	4770      	bx	lr
 8021b26:	bf00      	nop
 8021b28:	40010000 	.word	0x40010000

08021b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021b2c:	b480      	push	{r7}
 8021b2e:	b087      	sub	sp, #28
 8021b30:	af00      	add	r7, sp, #0
 8021b32:	6078      	str	r0, [r7, #4]
 8021b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8021b36:	687b      	ldr	r3, [r7, #4]
 8021b38:	6a1b      	ldr	r3, [r3, #32]
 8021b3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8021b3e:	687b      	ldr	r3, [r7, #4]
 8021b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8021b42:	687b      	ldr	r3, [r7, #4]
 8021b44:	6a1b      	ldr	r3, [r3, #32]
 8021b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021b48:	687b      	ldr	r3, [r7, #4]
 8021b4a:	685b      	ldr	r3, [r3, #4]
 8021b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8021b4e:	687b      	ldr	r3, [r7, #4]
 8021b50:	69db      	ldr	r3, [r3, #28]
 8021b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8021b54:	68fb      	ldr	r3, [r7, #12]
 8021b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8021b5c:	68fb      	ldr	r3, [r7, #12]
 8021b5e:	f023 0303 	bic.w	r3, r3, #3
 8021b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8021b64:	683b      	ldr	r3, [r7, #0]
 8021b66:	681b      	ldr	r3, [r3, #0]
 8021b68:	68fa      	ldr	r2, [r7, #12]
 8021b6a:	4313      	orrs	r3, r2
 8021b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8021b6e:	697b      	ldr	r3, [r7, #20]
 8021b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8021b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8021b76:	683b      	ldr	r3, [r7, #0]
 8021b78:	689b      	ldr	r3, [r3, #8]
 8021b7a:	021b      	lsls	r3, r3, #8
 8021b7c:	697a      	ldr	r2, [r7, #20]
 8021b7e:	4313      	orrs	r3, r2
 8021b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8021b82:	687b      	ldr	r3, [r7, #4]
 8021b84:	4a1d      	ldr	r2, [pc, #116]	; (8021bfc <TIM_OC3_SetConfig+0xd0>)
 8021b86:	4293      	cmp	r3, r2
 8021b88:	d10d      	bne.n	8021ba6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8021b8a:	697b      	ldr	r3, [r7, #20]
 8021b8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8021b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8021b92:	683b      	ldr	r3, [r7, #0]
 8021b94:	68db      	ldr	r3, [r3, #12]
 8021b96:	021b      	lsls	r3, r3, #8
 8021b98:	697a      	ldr	r2, [r7, #20]
 8021b9a:	4313      	orrs	r3, r2
 8021b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8021b9e:	697b      	ldr	r3, [r7, #20]
 8021ba0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8021ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	4a14      	ldr	r2, [pc, #80]	; (8021bfc <TIM_OC3_SetConfig+0xd0>)
 8021baa:	4293      	cmp	r3, r2
 8021bac:	d113      	bne.n	8021bd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8021bae:	693b      	ldr	r3, [r7, #16]
 8021bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8021bb6:	693b      	ldr	r3, [r7, #16]
 8021bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8021bbe:	683b      	ldr	r3, [r7, #0]
 8021bc0:	695b      	ldr	r3, [r3, #20]
 8021bc2:	011b      	lsls	r3, r3, #4
 8021bc4:	693a      	ldr	r2, [r7, #16]
 8021bc6:	4313      	orrs	r3, r2
 8021bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8021bca:	683b      	ldr	r3, [r7, #0]
 8021bcc:	699b      	ldr	r3, [r3, #24]
 8021bce:	011b      	lsls	r3, r3, #4
 8021bd0:	693a      	ldr	r2, [r7, #16]
 8021bd2:	4313      	orrs	r3, r2
 8021bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021bd6:	687b      	ldr	r3, [r7, #4]
 8021bd8:	693a      	ldr	r2, [r7, #16]
 8021bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8021bdc:	687b      	ldr	r3, [r7, #4]
 8021bde:	68fa      	ldr	r2, [r7, #12]
 8021be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8021be2:	683b      	ldr	r3, [r7, #0]
 8021be4:	685a      	ldr	r2, [r3, #4]
 8021be6:	687b      	ldr	r3, [r7, #4]
 8021be8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021bea:	687b      	ldr	r3, [r7, #4]
 8021bec:	697a      	ldr	r2, [r7, #20]
 8021bee:	621a      	str	r2, [r3, #32]
}
 8021bf0:	bf00      	nop
 8021bf2:	371c      	adds	r7, #28
 8021bf4:	46bd      	mov	sp, r7
 8021bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bfa:	4770      	bx	lr
 8021bfc:	40010000 	.word	0x40010000

08021c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021c00:	b480      	push	{r7}
 8021c02:	b087      	sub	sp, #28
 8021c04:	af00      	add	r7, sp, #0
 8021c06:	6078      	str	r0, [r7, #4]
 8021c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8021c0a:	687b      	ldr	r3, [r7, #4]
 8021c0c:	6a1b      	ldr	r3, [r3, #32]
 8021c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8021c12:	687b      	ldr	r3, [r7, #4]
 8021c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8021c16:	687b      	ldr	r3, [r7, #4]
 8021c18:	6a1b      	ldr	r3, [r3, #32]
 8021c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021c1c:	687b      	ldr	r3, [r7, #4]
 8021c1e:	685b      	ldr	r3, [r3, #4]
 8021c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	69db      	ldr	r3, [r3, #28]
 8021c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8021c28:	68fb      	ldr	r3, [r7, #12]
 8021c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8021c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8021c30:	68fb      	ldr	r3, [r7, #12]
 8021c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8021c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8021c38:	683b      	ldr	r3, [r7, #0]
 8021c3a:	681b      	ldr	r3, [r3, #0]
 8021c3c:	021b      	lsls	r3, r3, #8
 8021c3e:	68fa      	ldr	r2, [r7, #12]
 8021c40:	4313      	orrs	r3, r2
 8021c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8021c44:	693b      	ldr	r3, [r7, #16]
 8021c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8021c4c:	683b      	ldr	r3, [r7, #0]
 8021c4e:	689b      	ldr	r3, [r3, #8]
 8021c50:	031b      	lsls	r3, r3, #12
 8021c52:	693a      	ldr	r2, [r7, #16]
 8021c54:	4313      	orrs	r3, r2
 8021c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021c58:	687b      	ldr	r3, [r7, #4]
 8021c5a:	4a10      	ldr	r2, [pc, #64]	; (8021c9c <TIM_OC4_SetConfig+0x9c>)
 8021c5c:	4293      	cmp	r3, r2
 8021c5e:	d109      	bne.n	8021c74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8021c60:	697b      	ldr	r3, [r7, #20]
 8021c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8021c66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8021c68:	683b      	ldr	r3, [r7, #0]
 8021c6a:	695b      	ldr	r3, [r3, #20]
 8021c6c:	019b      	lsls	r3, r3, #6
 8021c6e:	697a      	ldr	r2, [r7, #20]
 8021c70:	4313      	orrs	r3, r2
 8021c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021c74:	687b      	ldr	r3, [r7, #4]
 8021c76:	697a      	ldr	r2, [r7, #20]
 8021c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8021c7a:	687b      	ldr	r3, [r7, #4]
 8021c7c:	68fa      	ldr	r2, [r7, #12]
 8021c7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8021c80:	683b      	ldr	r3, [r7, #0]
 8021c82:	685a      	ldr	r2, [r3, #4]
 8021c84:	687b      	ldr	r3, [r7, #4]
 8021c86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021c88:	687b      	ldr	r3, [r7, #4]
 8021c8a:	693a      	ldr	r2, [r7, #16]
 8021c8c:	621a      	str	r2, [r3, #32]
}
 8021c8e:	bf00      	nop
 8021c90:	371c      	adds	r7, #28
 8021c92:	46bd      	mov	sp, r7
 8021c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c98:	4770      	bx	lr
 8021c9a:	bf00      	nop
 8021c9c:	40010000 	.word	0x40010000

08021ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8021ca0:	b480      	push	{r7}
 8021ca2:	b087      	sub	sp, #28
 8021ca4:	af00      	add	r7, sp, #0
 8021ca6:	60f8      	str	r0, [r7, #12]
 8021ca8:	60b9      	str	r1, [r7, #8]
 8021caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8021cac:	68fb      	ldr	r3, [r7, #12]
 8021cae:	6a1b      	ldr	r3, [r3, #32]
 8021cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8021cb2:	68fb      	ldr	r3, [r7, #12]
 8021cb4:	6a1b      	ldr	r3, [r3, #32]
 8021cb6:	f023 0201 	bic.w	r2, r3, #1
 8021cba:	68fb      	ldr	r3, [r7, #12]
 8021cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8021cbe:	68fb      	ldr	r3, [r7, #12]
 8021cc0:	699b      	ldr	r3, [r3, #24]
 8021cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8021cc4:	693b      	ldr	r3, [r7, #16]
 8021cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8021ccc:	687b      	ldr	r3, [r7, #4]
 8021cce:	011b      	lsls	r3, r3, #4
 8021cd0:	693a      	ldr	r2, [r7, #16]
 8021cd2:	4313      	orrs	r3, r2
 8021cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8021cd6:	697b      	ldr	r3, [r7, #20]
 8021cd8:	f023 030a 	bic.w	r3, r3, #10
 8021cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8021cde:	697a      	ldr	r2, [r7, #20]
 8021ce0:	68bb      	ldr	r3, [r7, #8]
 8021ce2:	4313      	orrs	r3, r2
 8021ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8021ce6:	68fb      	ldr	r3, [r7, #12]
 8021ce8:	693a      	ldr	r2, [r7, #16]
 8021cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021cec:	68fb      	ldr	r3, [r7, #12]
 8021cee:	697a      	ldr	r2, [r7, #20]
 8021cf0:	621a      	str	r2, [r3, #32]
}
 8021cf2:	bf00      	nop
 8021cf4:	371c      	adds	r7, #28
 8021cf6:	46bd      	mov	sp, r7
 8021cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cfc:	4770      	bx	lr

08021cfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8021cfe:	b480      	push	{r7}
 8021d00:	b087      	sub	sp, #28
 8021d02:	af00      	add	r7, sp, #0
 8021d04:	60f8      	str	r0, [r7, #12]
 8021d06:	60b9      	str	r1, [r7, #8]
 8021d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8021d0a:	68fb      	ldr	r3, [r7, #12]
 8021d0c:	6a1b      	ldr	r3, [r3, #32]
 8021d0e:	f023 0210 	bic.w	r2, r3, #16
 8021d12:	68fb      	ldr	r3, [r7, #12]
 8021d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8021d16:	68fb      	ldr	r3, [r7, #12]
 8021d18:	699b      	ldr	r3, [r3, #24]
 8021d1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8021d1c:	68fb      	ldr	r3, [r7, #12]
 8021d1e:	6a1b      	ldr	r3, [r3, #32]
 8021d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8021d22:	697b      	ldr	r3, [r7, #20]
 8021d24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8021d28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8021d2a:	687b      	ldr	r3, [r7, #4]
 8021d2c:	031b      	lsls	r3, r3, #12
 8021d2e:	697a      	ldr	r2, [r7, #20]
 8021d30:	4313      	orrs	r3, r2
 8021d32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8021d34:	693b      	ldr	r3, [r7, #16]
 8021d36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8021d3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8021d3c:	68bb      	ldr	r3, [r7, #8]
 8021d3e:	011b      	lsls	r3, r3, #4
 8021d40:	693a      	ldr	r2, [r7, #16]
 8021d42:	4313      	orrs	r3, r2
 8021d44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8021d46:	68fb      	ldr	r3, [r7, #12]
 8021d48:	697a      	ldr	r2, [r7, #20]
 8021d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021d4c:	68fb      	ldr	r3, [r7, #12]
 8021d4e:	693a      	ldr	r2, [r7, #16]
 8021d50:	621a      	str	r2, [r3, #32]
}
 8021d52:	bf00      	nop
 8021d54:	371c      	adds	r7, #28
 8021d56:	46bd      	mov	sp, r7
 8021d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d5c:	4770      	bx	lr

08021d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8021d5e:	b480      	push	{r7}
 8021d60:	b085      	sub	sp, #20
 8021d62:	af00      	add	r7, sp, #0
 8021d64:	6078      	str	r0, [r7, #4]
 8021d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8021d68:	687b      	ldr	r3, [r7, #4]
 8021d6a:	689b      	ldr	r3, [r3, #8]
 8021d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8021d6e:	68fb      	ldr	r3, [r7, #12]
 8021d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8021d76:	683a      	ldr	r2, [r7, #0]
 8021d78:	68fb      	ldr	r3, [r7, #12]
 8021d7a:	4313      	orrs	r3, r2
 8021d7c:	f043 0307 	orr.w	r3, r3, #7
 8021d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021d82:	687b      	ldr	r3, [r7, #4]
 8021d84:	68fa      	ldr	r2, [r7, #12]
 8021d86:	609a      	str	r2, [r3, #8]
}
 8021d88:	bf00      	nop
 8021d8a:	3714      	adds	r7, #20
 8021d8c:	46bd      	mov	sp, r7
 8021d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d92:	4770      	bx	lr

08021d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8021d94:	b480      	push	{r7}
 8021d96:	b087      	sub	sp, #28
 8021d98:	af00      	add	r7, sp, #0
 8021d9a:	60f8      	str	r0, [r7, #12]
 8021d9c:	60b9      	str	r1, [r7, #8]
 8021d9e:	607a      	str	r2, [r7, #4]
 8021da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8021da2:	68fb      	ldr	r3, [r7, #12]
 8021da4:	689b      	ldr	r3, [r3, #8]
 8021da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8021da8:	697b      	ldr	r3, [r7, #20]
 8021daa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8021db0:	683b      	ldr	r3, [r7, #0]
 8021db2:	021a      	lsls	r2, r3, #8
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	431a      	orrs	r2, r3
 8021db8:	68bb      	ldr	r3, [r7, #8]
 8021dba:	4313      	orrs	r3, r2
 8021dbc:	697a      	ldr	r2, [r7, #20]
 8021dbe:	4313      	orrs	r3, r2
 8021dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021dc2:	68fb      	ldr	r3, [r7, #12]
 8021dc4:	697a      	ldr	r2, [r7, #20]
 8021dc6:	609a      	str	r2, [r3, #8]
}
 8021dc8:	bf00      	nop
 8021dca:	371c      	adds	r7, #28
 8021dcc:	46bd      	mov	sp, r7
 8021dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dd2:	4770      	bx	lr

08021dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8021dd4:	b480      	push	{r7}
 8021dd6:	b087      	sub	sp, #28
 8021dd8:	af00      	add	r7, sp, #0
 8021dda:	60f8      	str	r0, [r7, #12]
 8021ddc:	60b9      	str	r1, [r7, #8]
 8021dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8021de0:	68bb      	ldr	r3, [r7, #8]
 8021de2:	f003 031f 	and.w	r3, r3, #31
 8021de6:	2201      	movs	r2, #1
 8021de8:	fa02 f303 	lsl.w	r3, r2, r3
 8021dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8021dee:	68fb      	ldr	r3, [r7, #12]
 8021df0:	6a1a      	ldr	r2, [r3, #32]
 8021df2:	697b      	ldr	r3, [r7, #20]
 8021df4:	43db      	mvns	r3, r3
 8021df6:	401a      	ands	r2, r3
 8021df8:	68fb      	ldr	r3, [r7, #12]
 8021dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8021dfc:	68fb      	ldr	r3, [r7, #12]
 8021dfe:	6a1a      	ldr	r2, [r3, #32]
 8021e00:	68bb      	ldr	r3, [r7, #8]
 8021e02:	f003 031f 	and.w	r3, r3, #31
 8021e06:	6879      	ldr	r1, [r7, #4]
 8021e08:	fa01 f303 	lsl.w	r3, r1, r3
 8021e0c:	431a      	orrs	r2, r3
 8021e0e:	68fb      	ldr	r3, [r7, #12]
 8021e10:	621a      	str	r2, [r3, #32]
}
 8021e12:	bf00      	nop
 8021e14:	371c      	adds	r7, #28
 8021e16:	46bd      	mov	sp, r7
 8021e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e1c:	4770      	bx	lr
	...

08021e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8021e20:	b480      	push	{r7}
 8021e22:	b085      	sub	sp, #20
 8021e24:	af00      	add	r7, sp, #0
 8021e26:	6078      	str	r0, [r7, #4]
 8021e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8021e2a:	687b      	ldr	r3, [r7, #4]
 8021e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021e30:	2b01      	cmp	r3, #1
 8021e32:	d101      	bne.n	8021e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8021e34:	2302      	movs	r3, #2
 8021e36:	e050      	b.n	8021eda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8021e38:	687b      	ldr	r3, [r7, #4]
 8021e3a:	2201      	movs	r2, #1
 8021e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	2202      	movs	r2, #2
 8021e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8021e48:	687b      	ldr	r3, [r7, #4]
 8021e4a:	681b      	ldr	r3, [r3, #0]
 8021e4c:	685b      	ldr	r3, [r3, #4]
 8021e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8021e50:	687b      	ldr	r3, [r7, #4]
 8021e52:	681b      	ldr	r3, [r3, #0]
 8021e54:	689b      	ldr	r3, [r3, #8]
 8021e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8021e58:	68fb      	ldr	r3, [r7, #12]
 8021e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8021e60:	683b      	ldr	r3, [r7, #0]
 8021e62:	681b      	ldr	r3, [r3, #0]
 8021e64:	68fa      	ldr	r2, [r7, #12]
 8021e66:	4313      	orrs	r3, r2
 8021e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8021e6a:	687b      	ldr	r3, [r7, #4]
 8021e6c:	681b      	ldr	r3, [r3, #0]
 8021e6e:	68fa      	ldr	r2, [r7, #12]
 8021e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8021e72:	687b      	ldr	r3, [r7, #4]
 8021e74:	681b      	ldr	r3, [r3, #0]
 8021e76:	4a1c      	ldr	r2, [pc, #112]	; (8021ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8021e78:	4293      	cmp	r3, r2
 8021e7a:	d018      	beq.n	8021eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021e7c:	687b      	ldr	r3, [r7, #4]
 8021e7e:	681b      	ldr	r3, [r3, #0]
 8021e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021e84:	d013      	beq.n	8021eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021e86:	687b      	ldr	r3, [r7, #4]
 8021e88:	681b      	ldr	r3, [r3, #0]
 8021e8a:	4a18      	ldr	r2, [pc, #96]	; (8021eec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8021e8c:	4293      	cmp	r3, r2
 8021e8e:	d00e      	beq.n	8021eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021e90:	687b      	ldr	r3, [r7, #4]
 8021e92:	681b      	ldr	r3, [r3, #0]
 8021e94:	4a16      	ldr	r2, [pc, #88]	; (8021ef0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8021e96:	4293      	cmp	r3, r2
 8021e98:	d009      	beq.n	8021eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021e9a:	687b      	ldr	r3, [r7, #4]
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	4a15      	ldr	r2, [pc, #84]	; (8021ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8021ea0:	4293      	cmp	r3, r2
 8021ea2:	d004      	beq.n	8021eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021ea4:	687b      	ldr	r3, [r7, #4]
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	4a13      	ldr	r2, [pc, #76]	; (8021ef8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8021eaa:	4293      	cmp	r3, r2
 8021eac:	d10c      	bne.n	8021ec8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8021eae:	68bb      	ldr	r3, [r7, #8]
 8021eb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8021eb6:	683b      	ldr	r3, [r7, #0]
 8021eb8:	685b      	ldr	r3, [r3, #4]
 8021eba:	68ba      	ldr	r2, [r7, #8]
 8021ebc:	4313      	orrs	r3, r2
 8021ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8021ec0:	687b      	ldr	r3, [r7, #4]
 8021ec2:	681b      	ldr	r3, [r3, #0]
 8021ec4:	68ba      	ldr	r2, [r7, #8]
 8021ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8021ec8:	687b      	ldr	r3, [r7, #4]
 8021eca:	2201      	movs	r2, #1
 8021ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8021ed0:	687b      	ldr	r3, [r7, #4]
 8021ed2:	2200      	movs	r2, #0
 8021ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8021ed8:	2300      	movs	r3, #0
}
 8021eda:	4618      	mov	r0, r3
 8021edc:	3714      	adds	r7, #20
 8021ede:	46bd      	mov	sp, r7
 8021ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ee4:	4770      	bx	lr
 8021ee6:	bf00      	nop
 8021ee8:	40010000 	.word	0x40010000
 8021eec:	40000400 	.word	0x40000400
 8021ef0:	40000800 	.word	0x40000800
 8021ef4:	40000c00 	.word	0x40000c00
 8021ef8:	40014000 	.word	0x40014000

08021efc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8021efc:	b480      	push	{r7}
 8021efe:	b083      	sub	sp, #12
 8021f00:	af00      	add	r7, sp, #0
 8021f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8021f04:	bf00      	nop
 8021f06:	370c      	adds	r7, #12
 8021f08:	46bd      	mov	sp, r7
 8021f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f0e:	4770      	bx	lr

08021f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8021f10:	b480      	push	{r7}
 8021f12:	b083      	sub	sp, #12
 8021f14:	af00      	add	r7, sp, #0
 8021f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8021f18:	bf00      	nop
 8021f1a:	370c      	adds	r7, #12
 8021f1c:	46bd      	mov	sp, r7
 8021f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f22:	4770      	bx	lr

08021f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021f24:	b580      	push	{r7, lr}
 8021f26:	b082      	sub	sp, #8
 8021f28:	af00      	add	r7, sp, #0
 8021f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021f2c:	687b      	ldr	r3, [r7, #4]
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	d101      	bne.n	8021f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8021f32:	2301      	movs	r3, #1
 8021f34:	e03f      	b.n	8021fb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8021f36:	687b      	ldr	r3, [r7, #4]
 8021f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021f3c:	b2db      	uxtb	r3, r3
 8021f3e:	2b00      	cmp	r3, #0
 8021f40:	d106      	bne.n	8021f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021f42:	687b      	ldr	r3, [r7, #4]
 8021f44:	2200      	movs	r2, #0
 8021f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8021f4a:	6878      	ldr	r0, [r7, #4]
 8021f4c:	f7e1 fc22 	bl	8003794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	2224      	movs	r2, #36	; 0x24
 8021f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8021f58:	687b      	ldr	r3, [r7, #4]
 8021f5a:	681b      	ldr	r3, [r3, #0]
 8021f5c:	68da      	ldr	r2, [r3, #12]
 8021f5e:	687b      	ldr	r3, [r7, #4]
 8021f60:	681b      	ldr	r3, [r3, #0]
 8021f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8021f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8021f68:	6878      	ldr	r0, [r7, #4]
 8021f6a:	f000 fec7 	bl	8022cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8021f6e:	687b      	ldr	r3, [r7, #4]
 8021f70:	681b      	ldr	r3, [r3, #0]
 8021f72:	691a      	ldr	r2, [r3, #16]
 8021f74:	687b      	ldr	r3, [r7, #4]
 8021f76:	681b      	ldr	r3, [r3, #0]
 8021f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8021f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8021f7e:	687b      	ldr	r3, [r7, #4]
 8021f80:	681b      	ldr	r3, [r3, #0]
 8021f82:	695a      	ldr	r2, [r3, #20]
 8021f84:	687b      	ldr	r3, [r7, #4]
 8021f86:	681b      	ldr	r3, [r3, #0]
 8021f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8021f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8021f8e:	687b      	ldr	r3, [r7, #4]
 8021f90:	681b      	ldr	r3, [r3, #0]
 8021f92:	68da      	ldr	r2, [r3, #12]
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	681b      	ldr	r3, [r3, #0]
 8021f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8021f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021f9e:	687b      	ldr	r3, [r7, #4]
 8021fa0:	2200      	movs	r2, #0
 8021fa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8021fa4:	687b      	ldr	r3, [r7, #4]
 8021fa6:	2220      	movs	r2, #32
 8021fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8021fac:	687b      	ldr	r3, [r7, #4]
 8021fae:	2220      	movs	r2, #32
 8021fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8021fb4:	2300      	movs	r3, #0
}
 8021fb6:	4618      	mov	r0, r3
 8021fb8:	3708      	adds	r7, #8
 8021fba:	46bd      	mov	sp, r7
 8021fbc:	bd80      	pop	{r7, pc}

08021fbe <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8021fbe:	b580      	push	{r7, lr}
 8021fc0:	b082      	sub	sp, #8
 8021fc2:	af00      	add	r7, sp, #0
 8021fc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021fc6:	687b      	ldr	r3, [r7, #4]
 8021fc8:	2b00      	cmp	r3, #0
 8021fca:	d101      	bne.n	8021fd0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8021fcc:	2301      	movs	r3, #1
 8021fce:	e021      	b.n	8022014 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8021fd0:	687b      	ldr	r3, [r7, #4]
 8021fd2:	2224      	movs	r2, #36	; 0x24
 8021fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8021fd8:	687b      	ldr	r3, [r7, #4]
 8021fda:	681b      	ldr	r3, [r3, #0]
 8021fdc:	68da      	ldr	r2, [r3, #12]
 8021fde:	687b      	ldr	r3, [r7, #4]
 8021fe0:	681b      	ldr	r3, [r3, #0]
 8021fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8021fe6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8021fe8:	6878      	ldr	r0, [r7, #4]
 8021fea:	f7e1 fc9d 	bl	8003928 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021fee:	687b      	ldr	r3, [r7, #4]
 8021ff0:	2200      	movs	r2, #0
 8021ff2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8021ff4:	687b      	ldr	r3, [r7, #4]
 8021ff6:	2200      	movs	r2, #0
 8021ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	2200      	movs	r2, #0
 8022000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022004:	687b      	ldr	r3, [r7, #4]
 8022006:	2200      	movs	r2, #0
 8022008:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 802200a:	687b      	ldr	r3, [r7, #4]
 802200c:	2200      	movs	r2, #0
 802200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8022012:	2300      	movs	r3, #0
}
 8022014:	4618      	mov	r0, r3
 8022016:	3708      	adds	r7, #8
 8022018:	46bd      	mov	sp, r7
 802201a:	bd80      	pop	{r7, pc}

0802201c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 802201c:	b480      	push	{r7}
 802201e:	b085      	sub	sp, #20
 8022020:	af00      	add	r7, sp, #0
 8022022:	60f8      	str	r0, [r7, #12]
 8022024:	60b9      	str	r1, [r7, #8]
 8022026:	4613      	mov	r3, r2
 8022028:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802202a:	68fb      	ldr	r3, [r7, #12]
 802202c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022030:	b2db      	uxtb	r3, r3
 8022032:	2b20      	cmp	r3, #32
 8022034:	d130      	bne.n	8022098 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8022036:	68bb      	ldr	r3, [r7, #8]
 8022038:	2b00      	cmp	r3, #0
 802203a:	d002      	beq.n	8022042 <HAL_UART_Transmit_IT+0x26>
 802203c:	88fb      	ldrh	r3, [r7, #6]
 802203e:	2b00      	cmp	r3, #0
 8022040:	d101      	bne.n	8022046 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8022042:	2301      	movs	r3, #1
 8022044:	e029      	b.n	802209a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8022046:	68fb      	ldr	r3, [r7, #12]
 8022048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802204c:	2b01      	cmp	r3, #1
 802204e:	d101      	bne.n	8022054 <HAL_UART_Transmit_IT+0x38>
 8022050:	2302      	movs	r3, #2
 8022052:	e022      	b.n	802209a <HAL_UART_Transmit_IT+0x7e>
 8022054:	68fb      	ldr	r3, [r7, #12]
 8022056:	2201      	movs	r2, #1
 8022058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 802205c:	68fb      	ldr	r3, [r7, #12]
 802205e:	68ba      	ldr	r2, [r7, #8]
 8022060:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8022062:	68fb      	ldr	r3, [r7, #12]
 8022064:	88fa      	ldrh	r2, [r7, #6]
 8022066:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8022068:	68fb      	ldr	r3, [r7, #12]
 802206a:	88fa      	ldrh	r2, [r7, #6]
 802206c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802206e:	68fb      	ldr	r3, [r7, #12]
 8022070:	2200      	movs	r2, #0
 8022072:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8022074:	68fb      	ldr	r3, [r7, #12]
 8022076:	2221      	movs	r2, #33	; 0x21
 8022078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802207c:	68fb      	ldr	r3, [r7, #12]
 802207e:	2200      	movs	r2, #0
 8022080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8022084:	68fb      	ldr	r3, [r7, #12]
 8022086:	681b      	ldr	r3, [r3, #0]
 8022088:	68da      	ldr	r2, [r3, #12]
 802208a:	68fb      	ldr	r3, [r7, #12]
 802208c:	681b      	ldr	r3, [r3, #0]
 802208e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8022092:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8022094:	2300      	movs	r3, #0
 8022096:	e000      	b.n	802209a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8022098:	2302      	movs	r3, #2
  }
}
 802209a:	4618      	mov	r0, r3
 802209c:	3714      	adds	r7, #20
 802209e:	46bd      	mov	sp, r7
 80220a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220a4:	4770      	bx	lr

080220a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80220a6:	b580      	push	{r7, lr}
 80220a8:	b084      	sub	sp, #16
 80220aa:	af00      	add	r7, sp, #0
 80220ac:	60f8      	str	r0, [r7, #12]
 80220ae:	60b9      	str	r1, [r7, #8]
 80220b0:	4613      	mov	r3, r2
 80220b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80220b4:	68fb      	ldr	r3, [r7, #12]
 80220b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80220ba:	b2db      	uxtb	r3, r3
 80220bc:	2b20      	cmp	r3, #32
 80220be:	d11d      	bne.n	80220fc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80220c0:	68bb      	ldr	r3, [r7, #8]
 80220c2:	2b00      	cmp	r3, #0
 80220c4:	d002      	beq.n	80220cc <HAL_UART_Receive_IT+0x26>
 80220c6:	88fb      	ldrh	r3, [r7, #6]
 80220c8:	2b00      	cmp	r3, #0
 80220ca:	d101      	bne.n	80220d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80220cc:	2301      	movs	r3, #1
 80220ce:	e016      	b.n	80220fe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80220d0:	68fb      	ldr	r3, [r7, #12]
 80220d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80220d6:	2b01      	cmp	r3, #1
 80220d8:	d101      	bne.n	80220de <HAL_UART_Receive_IT+0x38>
 80220da:	2302      	movs	r3, #2
 80220dc:	e00f      	b.n	80220fe <HAL_UART_Receive_IT+0x58>
 80220de:	68fb      	ldr	r3, [r7, #12]
 80220e0:	2201      	movs	r2, #1
 80220e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80220e6:	68fb      	ldr	r3, [r7, #12]
 80220e8:	2200      	movs	r2, #0
 80220ea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80220ec:	88fb      	ldrh	r3, [r7, #6]
 80220ee:	461a      	mov	r2, r3
 80220f0:	68b9      	ldr	r1, [r7, #8]
 80220f2:	68f8      	ldr	r0, [r7, #12]
 80220f4:	f000 fbca 	bl	802288c <UART_Start_Receive_IT>
 80220f8:	4603      	mov	r3, r0
 80220fa:	e000      	b.n	80220fe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80220fc:	2302      	movs	r3, #2
  }
}
 80220fe:	4618      	mov	r0, r3
 8022100:	3710      	adds	r7, #16
 8022102:	46bd      	mov	sp, r7
 8022104:	bd80      	pop	{r7, pc}
	...

08022108 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8022108:	b580      	push	{r7, lr}
 802210a:	b0a2      	sub	sp, #136	; 0x88
 802210c:	af00      	add	r7, sp, #0
 802210e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8022110:	2301      	movs	r3, #1
 8022112:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8022116:	687b      	ldr	r3, [r7, #4]
 8022118:	681b      	ldr	r3, [r3, #0]
 802211a:	330c      	adds	r3, #12
 802211c:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802211e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022120:	e853 3f00 	ldrex	r3, [r3]
 8022124:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8022126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022128:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 802212c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8022130:	687b      	ldr	r3, [r7, #4]
 8022132:	681b      	ldr	r3, [r3, #0]
 8022134:	330c      	adds	r3, #12
 8022136:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802213a:	66fa      	str	r2, [r7, #108]	; 0x6c
 802213c:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802213e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8022140:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8022142:	e841 2300 	strex	r3, r2, [r1]
 8022146:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8022148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802214a:	2b00      	cmp	r3, #0
 802214c:	d1e3      	bne.n	8022116 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802214e:	687b      	ldr	r3, [r7, #4]
 8022150:	681b      	ldr	r3, [r3, #0]
 8022152:	3314      	adds	r3, #20
 8022154:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022158:	e853 3f00 	ldrex	r3, [r3]
 802215c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802215e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8022160:	f023 0301 	bic.w	r3, r3, #1
 8022164:	67fb      	str	r3, [r7, #124]	; 0x7c
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	681b      	ldr	r3, [r3, #0]
 802216a:	3314      	adds	r3, #20
 802216c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 802216e:	65ba      	str	r2, [r7, #88]	; 0x58
 8022170:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022172:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8022174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022176:	e841 2300 	strex	r3, r2, [r1]
 802217a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802217c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802217e:	2b00      	cmp	r3, #0
 8022180:	d1e5      	bne.n	802214e <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022182:	687b      	ldr	r3, [r7, #4]
 8022184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022186:	2b01      	cmp	r3, #1
 8022188:	d119      	bne.n	80221be <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 802218a:	687b      	ldr	r3, [r7, #4]
 802218c:	681b      	ldr	r3, [r3, #0]
 802218e:	330c      	adds	r3, #12
 8022190:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022194:	e853 3f00 	ldrex	r3, [r3]
 8022198:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802219a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802219c:	f023 0310 	bic.w	r3, r3, #16
 80221a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80221a2:	687b      	ldr	r3, [r7, #4]
 80221a4:	681b      	ldr	r3, [r3, #0]
 80221a6:	330c      	adds	r3, #12
 80221a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80221aa:	647a      	str	r2, [r7, #68]	; 0x44
 80221ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80221ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80221b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80221b2:	e841 2300 	strex	r3, r2, [r1]
 80221b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80221b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80221ba:	2b00      	cmp	r3, #0
 80221bc:	d1e5      	bne.n	802218a <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80221be:	687b      	ldr	r3, [r7, #4]
 80221c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80221c2:	2b00      	cmp	r3, #0
 80221c4:	d00f      	beq.n	80221e6 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80221c6:	687b      	ldr	r3, [r7, #4]
 80221c8:	681b      	ldr	r3, [r3, #0]
 80221ca:	695b      	ldr	r3, [r3, #20]
 80221cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80221d0:	2b80      	cmp	r3, #128	; 0x80
 80221d2:	d104      	bne.n	80221de <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80221d4:	687b      	ldr	r3, [r7, #4]
 80221d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80221d8:	4a53      	ldr	r2, [pc, #332]	; (8022328 <HAL_UART_Abort_IT+0x220>)
 80221da:	651a      	str	r2, [r3, #80]	; 0x50
 80221dc:	e003      	b.n	80221e6 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80221de:	687b      	ldr	r3, [r7, #4]
 80221e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80221e2:	2200      	movs	r2, #0
 80221e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80221e6:	687b      	ldr	r3, [r7, #4]
 80221e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	d00f      	beq.n	802220e <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80221ee:	687b      	ldr	r3, [r7, #4]
 80221f0:	681b      	ldr	r3, [r3, #0]
 80221f2:	695b      	ldr	r3, [r3, #20]
 80221f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80221f8:	2b40      	cmp	r3, #64	; 0x40
 80221fa:	d104      	bne.n	8022206 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80221fc:	687b      	ldr	r3, [r7, #4]
 80221fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022200:	4a4a      	ldr	r2, [pc, #296]	; (802232c <HAL_UART_Abort_IT+0x224>)
 8022202:	651a      	str	r2, [r3, #80]	; 0x50
 8022204:	e003      	b.n	802220e <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8022206:	687b      	ldr	r3, [r7, #4]
 8022208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802220a:	2200      	movs	r2, #0
 802220c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 802220e:	687b      	ldr	r3, [r7, #4]
 8022210:	681b      	ldr	r3, [r3, #0]
 8022212:	695b      	ldr	r3, [r3, #20]
 8022214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022218:	2b80      	cmp	r3, #128	; 0x80
 802221a:	d12d      	bne.n	8022278 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 802221c:	687b      	ldr	r3, [r7, #4]
 802221e:	681b      	ldr	r3, [r3, #0]
 8022220:	3314      	adds	r3, #20
 8022222:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022226:	e853 3f00 	ldrex	r3, [r3]
 802222a:	623b      	str	r3, [r7, #32]
   return(result);
 802222c:	6a3b      	ldr	r3, [r7, #32]
 802222e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8022232:	677b      	str	r3, [r7, #116]	; 0x74
 8022234:	687b      	ldr	r3, [r7, #4]
 8022236:	681b      	ldr	r3, [r3, #0]
 8022238:	3314      	adds	r3, #20
 802223a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802223c:	633a      	str	r2, [r7, #48]	; 0x30
 802223e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022244:	e841 2300 	strex	r3, r2, [r1]
 8022248:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802224c:	2b00      	cmp	r3, #0
 802224e:	d1e5      	bne.n	802221c <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8022250:	687b      	ldr	r3, [r7, #4]
 8022252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022254:	2b00      	cmp	r3, #0
 8022256:	d00f      	beq.n	8022278 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8022258:	687b      	ldr	r3, [r7, #4]
 802225a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802225c:	4618      	mov	r0, r3
 802225e:	f7fa fcdf 	bl	801cc20 <HAL_DMA_Abort_IT>
 8022262:	4603      	mov	r3, r0
 8022264:	2b00      	cmp	r3, #0
 8022266:	d004      	beq.n	8022272 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8022268:	687b      	ldr	r3, [r7, #4]
 802226a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802226c:	2200      	movs	r2, #0
 802226e:	651a      	str	r2, [r3, #80]	; 0x50
 8022270:	e002      	b.n	8022278 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8022272:	2300      	movs	r3, #0
 8022274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022278:	687b      	ldr	r3, [r7, #4]
 802227a:	681b      	ldr	r3, [r3, #0]
 802227c:	695b      	ldr	r3, [r3, #20]
 802227e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022282:	2b40      	cmp	r3, #64	; 0x40
 8022284:	d130      	bne.n	80222e8 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8022286:	687b      	ldr	r3, [r7, #4]
 8022288:	681b      	ldr	r3, [r3, #0]
 802228a:	3314      	adds	r3, #20
 802228c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802228e:	693b      	ldr	r3, [r7, #16]
 8022290:	e853 3f00 	ldrex	r3, [r3]
 8022294:	60fb      	str	r3, [r7, #12]
   return(result);
 8022296:	68fb      	ldr	r3, [r7, #12]
 8022298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802229c:	673b      	str	r3, [r7, #112]	; 0x70
 802229e:	687b      	ldr	r3, [r7, #4]
 80222a0:	681b      	ldr	r3, [r3, #0]
 80222a2:	3314      	adds	r3, #20
 80222a4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80222a6:	61fa      	str	r2, [r7, #28]
 80222a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80222aa:	69b9      	ldr	r1, [r7, #24]
 80222ac:	69fa      	ldr	r2, [r7, #28]
 80222ae:	e841 2300 	strex	r3, r2, [r1]
 80222b2:	617b      	str	r3, [r7, #20]
   return(result);
 80222b4:	697b      	ldr	r3, [r7, #20]
 80222b6:	2b00      	cmp	r3, #0
 80222b8:	d1e5      	bne.n	8022286 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80222ba:	687b      	ldr	r3, [r7, #4]
 80222bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80222be:	2b00      	cmp	r3, #0
 80222c0:	d012      	beq.n	80222e8 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80222c2:	687b      	ldr	r3, [r7, #4]
 80222c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80222c6:	4618      	mov	r0, r3
 80222c8:	f7fa fcaa 	bl	801cc20 <HAL_DMA_Abort_IT>
 80222cc:	4603      	mov	r3, r0
 80222ce:	2b00      	cmp	r3, #0
 80222d0:	d007      	beq.n	80222e2 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80222d2:	687b      	ldr	r3, [r7, #4]
 80222d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80222d6:	2200      	movs	r2, #0
 80222d8:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 80222da:	2301      	movs	r3, #1
 80222dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80222e0:	e002      	b.n	80222e8 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80222e2:	2300      	movs	r3, #0
 80222e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80222e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80222ec:	2b01      	cmp	r3, #1
 80222ee:	d116      	bne.n	802231e <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80222f0:	687b      	ldr	r3, [r7, #4]
 80222f2:	2200      	movs	r2, #0
 80222f4:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80222f6:	687b      	ldr	r3, [r7, #4]
 80222f8:	2200      	movs	r2, #0
 80222fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80222fc:	687b      	ldr	r3, [r7, #4]
 80222fe:	2200      	movs	r2, #0
 8022300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8022302:	687b      	ldr	r3, [r7, #4]
 8022304:	2220      	movs	r2, #32
 8022306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 802230a:	687b      	ldr	r3, [r7, #4]
 802230c:	2220      	movs	r2, #32
 802230e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022312:	687b      	ldr	r3, [r7, #4]
 8022314:	2200      	movs	r2, #0
 8022316:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8022318:	6878      	ldr	r0, [r7, #4]
 802231a:	f000 faa1 	bl	8022860 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 802231e:	2300      	movs	r3, #0
}
 8022320:	4618      	mov	r0, r3
 8022322:	3788      	adds	r7, #136	; 0x88
 8022324:	46bd      	mov	sp, r7
 8022326:	bd80      	pop	{r7, pc}
 8022328:	080229f7 	.word	0x080229f7
 802232c:	08022a57 	.word	0x08022a57

08022330 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8022330:	b580      	push	{r7, lr}
 8022332:	b0ba      	sub	sp, #232	; 0xe8
 8022334:	af00      	add	r7, sp, #0
 8022336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8022338:	687b      	ldr	r3, [r7, #4]
 802233a:	681b      	ldr	r3, [r3, #0]
 802233c:	681b      	ldr	r3, [r3, #0]
 802233e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8022342:	687b      	ldr	r3, [r7, #4]
 8022344:	681b      	ldr	r3, [r3, #0]
 8022346:	68db      	ldr	r3, [r3, #12]
 8022348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802234c:	687b      	ldr	r3, [r7, #4]
 802234e:	681b      	ldr	r3, [r3, #0]
 8022350:	695b      	ldr	r3, [r3, #20]
 8022352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8022356:	2300      	movs	r3, #0
 8022358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 802235c:	2300      	movs	r3, #0
 802235e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8022362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022366:	f003 030f 	and.w	r3, r3, #15
 802236a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 802236e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8022372:	2b00      	cmp	r3, #0
 8022374:	d10f      	bne.n	8022396 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8022376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802237a:	f003 0320 	and.w	r3, r3, #32
 802237e:	2b00      	cmp	r3, #0
 8022380:	d009      	beq.n	8022396 <HAL_UART_IRQHandler+0x66>
 8022382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022386:	f003 0320 	and.w	r3, r3, #32
 802238a:	2b00      	cmp	r3, #0
 802238c:	d003      	beq.n	8022396 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 802238e:	6878      	ldr	r0, [r7, #4]
 8022390:	f000 fbf9 	bl	8022b86 <UART_Receive_IT>
      return;
 8022394:	e256      	b.n	8022844 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8022396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802239a:	2b00      	cmp	r3, #0
 802239c:	f000 80de 	beq.w	802255c <HAL_UART_IRQHandler+0x22c>
 80223a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80223a4:	f003 0301 	and.w	r3, r3, #1
 80223a8:	2b00      	cmp	r3, #0
 80223aa:	d106      	bne.n	80223ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80223ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80223b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80223b4:	2b00      	cmp	r3, #0
 80223b6:	f000 80d1 	beq.w	802255c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80223ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80223be:	f003 0301 	and.w	r3, r3, #1
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	d00b      	beq.n	80223de <HAL_UART_IRQHandler+0xae>
 80223c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80223ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80223ce:	2b00      	cmp	r3, #0
 80223d0:	d005      	beq.n	80223de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80223d2:	687b      	ldr	r3, [r7, #4]
 80223d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80223d6:	f043 0201 	orr.w	r2, r3, #1
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80223de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80223e2:	f003 0304 	and.w	r3, r3, #4
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	d00b      	beq.n	8022402 <HAL_UART_IRQHandler+0xd2>
 80223ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80223ee:	f003 0301 	and.w	r3, r3, #1
 80223f2:	2b00      	cmp	r3, #0
 80223f4:	d005      	beq.n	8022402 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80223f6:	687b      	ldr	r3, [r7, #4]
 80223f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80223fa:	f043 0202 	orr.w	r2, r3, #2
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8022402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022406:	f003 0302 	and.w	r3, r3, #2
 802240a:	2b00      	cmp	r3, #0
 802240c:	d00b      	beq.n	8022426 <HAL_UART_IRQHandler+0xf6>
 802240e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8022412:	f003 0301 	and.w	r3, r3, #1
 8022416:	2b00      	cmp	r3, #0
 8022418:	d005      	beq.n	8022426 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802241a:	687b      	ldr	r3, [r7, #4]
 802241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802241e:	f043 0204 	orr.w	r2, r3, #4
 8022422:	687b      	ldr	r3, [r7, #4]
 8022424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8022426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802242a:	f003 0308 	and.w	r3, r3, #8
 802242e:	2b00      	cmp	r3, #0
 8022430:	d011      	beq.n	8022456 <HAL_UART_IRQHandler+0x126>
 8022432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022436:	f003 0320 	and.w	r3, r3, #32
 802243a:	2b00      	cmp	r3, #0
 802243c:	d105      	bne.n	802244a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 802243e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8022442:	f003 0301 	and.w	r3, r3, #1
 8022446:	2b00      	cmp	r3, #0
 8022448:	d005      	beq.n	8022456 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802244e:	f043 0208 	orr.w	r2, r3, #8
 8022452:	687b      	ldr	r3, [r7, #4]
 8022454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8022456:	687b      	ldr	r3, [r7, #4]
 8022458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802245a:	2b00      	cmp	r3, #0
 802245c:	f000 81ed 	beq.w	802283a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8022460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022464:	f003 0320 	and.w	r3, r3, #32
 8022468:	2b00      	cmp	r3, #0
 802246a:	d008      	beq.n	802247e <HAL_UART_IRQHandler+0x14e>
 802246c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022470:	f003 0320 	and.w	r3, r3, #32
 8022474:	2b00      	cmp	r3, #0
 8022476:	d002      	beq.n	802247e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8022478:	6878      	ldr	r0, [r7, #4]
 802247a:	f000 fb84 	bl	8022b86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802247e:	687b      	ldr	r3, [r7, #4]
 8022480:	681b      	ldr	r3, [r3, #0]
 8022482:	695b      	ldr	r3, [r3, #20]
 8022484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022488:	2b40      	cmp	r3, #64	; 0x40
 802248a:	bf0c      	ite	eq
 802248c:	2301      	moveq	r3, #1
 802248e:	2300      	movne	r3, #0
 8022490:	b2db      	uxtb	r3, r3
 8022492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8022496:	687b      	ldr	r3, [r7, #4]
 8022498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802249a:	f003 0308 	and.w	r3, r3, #8
 802249e:	2b00      	cmp	r3, #0
 80224a0:	d103      	bne.n	80224aa <HAL_UART_IRQHandler+0x17a>
 80224a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80224a6:	2b00      	cmp	r3, #0
 80224a8:	d04f      	beq.n	802254a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80224aa:	6878      	ldr	r0, [r7, #4]
 80224ac:	f000 fa2c 	bl	8022908 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80224b0:	687b      	ldr	r3, [r7, #4]
 80224b2:	681b      	ldr	r3, [r3, #0]
 80224b4:	695b      	ldr	r3, [r3, #20]
 80224b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80224ba:	2b40      	cmp	r3, #64	; 0x40
 80224bc:	d141      	bne.n	8022542 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80224be:	687b      	ldr	r3, [r7, #4]
 80224c0:	681b      	ldr	r3, [r3, #0]
 80224c2:	3314      	adds	r3, #20
 80224c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80224c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80224cc:	e853 3f00 	ldrex	r3, [r3]
 80224d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80224d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80224d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80224dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	681b      	ldr	r3, [r3, #0]
 80224e4:	3314      	adds	r3, #20
 80224e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80224ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80224ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80224f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80224f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80224fa:	e841 2300 	strex	r3, r2, [r1]
 80224fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8022502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8022506:	2b00      	cmp	r3, #0
 8022508:	d1d9      	bne.n	80224be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802250e:	2b00      	cmp	r3, #0
 8022510:	d013      	beq.n	802253a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022516:	4a7d      	ldr	r2, [pc, #500]	; (802270c <HAL_UART_IRQHandler+0x3dc>)
 8022518:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802251e:	4618      	mov	r0, r3
 8022520:	f7fa fb7e 	bl	801cc20 <HAL_DMA_Abort_IT>
 8022524:	4603      	mov	r3, r0
 8022526:	2b00      	cmp	r3, #0
 8022528:	d016      	beq.n	8022558 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802252a:	687b      	ldr	r3, [r7, #4]
 802252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802252e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022530:	687a      	ldr	r2, [r7, #4]
 8022532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8022534:	4610      	mov	r0, r2
 8022536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022538:	e00e      	b.n	8022558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 802253a:	6878      	ldr	r0, [r7, #4]
 802253c:	f000 f986 	bl	802284c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022540:	e00a      	b.n	8022558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8022542:	6878      	ldr	r0, [r7, #4]
 8022544:	f000 f982 	bl	802284c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022548:	e006      	b.n	8022558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 802254a:	6878      	ldr	r0, [r7, #4]
 802254c:	f000 f97e 	bl	802284c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022550:	687b      	ldr	r3, [r7, #4]
 8022552:	2200      	movs	r2, #0
 8022554:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8022556:	e170      	b.n	802283a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022558:	bf00      	nop
    return;
 802255a:	e16e      	b.n	802283a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802255c:	687b      	ldr	r3, [r7, #4]
 802255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022560:	2b01      	cmp	r3, #1
 8022562:	f040 814a 	bne.w	80227fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8022566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802256a:	f003 0310 	and.w	r3, r3, #16
 802256e:	2b00      	cmp	r3, #0
 8022570:	f000 8143 	beq.w	80227fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8022574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022578:	f003 0310 	and.w	r3, r3, #16
 802257c:	2b00      	cmp	r3, #0
 802257e:	f000 813c 	beq.w	80227fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8022582:	2300      	movs	r3, #0
 8022584:	60bb      	str	r3, [r7, #8]
 8022586:	687b      	ldr	r3, [r7, #4]
 8022588:	681b      	ldr	r3, [r3, #0]
 802258a:	681b      	ldr	r3, [r3, #0]
 802258c:	60bb      	str	r3, [r7, #8]
 802258e:	687b      	ldr	r3, [r7, #4]
 8022590:	681b      	ldr	r3, [r3, #0]
 8022592:	685b      	ldr	r3, [r3, #4]
 8022594:	60bb      	str	r3, [r7, #8]
 8022596:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022598:	687b      	ldr	r3, [r7, #4]
 802259a:	681b      	ldr	r3, [r3, #0]
 802259c:	695b      	ldr	r3, [r3, #20]
 802259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80225a2:	2b40      	cmp	r3, #64	; 0x40
 80225a4:	f040 80b4 	bne.w	8022710 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80225ac:	681b      	ldr	r3, [r3, #0]
 80225ae:	685b      	ldr	r3, [r3, #4]
 80225b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80225b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80225b8:	2b00      	cmp	r3, #0
 80225ba:	f000 8140 	beq.w	802283e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80225be:	687b      	ldr	r3, [r7, #4]
 80225c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80225c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80225c6:	429a      	cmp	r2, r3
 80225c8:	f080 8139 	bcs.w	802283e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80225cc:	687b      	ldr	r3, [r7, #4]
 80225ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80225d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80225d4:	687b      	ldr	r3, [r7, #4]
 80225d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80225d8:	69db      	ldr	r3, [r3, #28]
 80225da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80225de:	f000 8088 	beq.w	80226f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80225e2:	687b      	ldr	r3, [r7, #4]
 80225e4:	681b      	ldr	r3, [r3, #0]
 80225e6:	330c      	adds	r3, #12
 80225e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80225ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80225f0:	e853 3f00 	ldrex	r3, [r3]
 80225f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80225f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80225fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8022600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8022604:	687b      	ldr	r3, [r7, #4]
 8022606:	681b      	ldr	r3, [r3, #0]
 8022608:	330c      	adds	r3, #12
 802260a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802260e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8022612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022616:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802261a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802261e:	e841 2300 	strex	r3, r2, [r1]
 8022622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8022626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802262a:	2b00      	cmp	r3, #0
 802262c:	d1d9      	bne.n	80225e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802262e:	687b      	ldr	r3, [r7, #4]
 8022630:	681b      	ldr	r3, [r3, #0]
 8022632:	3314      	adds	r3, #20
 8022634:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022638:	e853 3f00 	ldrex	r3, [r3]
 802263c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 802263e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8022640:	f023 0301 	bic.w	r3, r3, #1
 8022644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8022648:	687b      	ldr	r3, [r7, #4]
 802264a:	681b      	ldr	r3, [r3, #0]
 802264c:	3314      	adds	r3, #20
 802264e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8022652:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8022656:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022658:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 802265a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802265e:	e841 2300 	strex	r3, r2, [r1]
 8022662:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8022664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8022666:	2b00      	cmp	r3, #0
 8022668:	d1e1      	bne.n	802262e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	681b      	ldr	r3, [r3, #0]
 802266e:	3314      	adds	r3, #20
 8022670:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022674:	e853 3f00 	ldrex	r3, [r3]
 8022678:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 802267a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802267c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8022684:	687b      	ldr	r3, [r7, #4]
 8022686:	681b      	ldr	r3, [r3, #0]
 8022688:	3314      	adds	r3, #20
 802268a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 802268e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8022690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8022694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8022696:	e841 2300 	strex	r3, r2, [r1]
 802269a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 802269c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802269e:	2b00      	cmp	r3, #0
 80226a0:	d1e3      	bne.n	802266a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80226a2:	687b      	ldr	r3, [r7, #4]
 80226a4:	2220      	movs	r2, #32
 80226a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80226aa:	687b      	ldr	r3, [r7, #4]
 80226ac:	2200      	movs	r2, #0
 80226ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80226b0:	687b      	ldr	r3, [r7, #4]
 80226b2:	681b      	ldr	r3, [r3, #0]
 80226b4:	330c      	adds	r3, #12
 80226b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80226b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80226ba:	e853 3f00 	ldrex	r3, [r3]
 80226be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80226c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80226c2:	f023 0310 	bic.w	r3, r3, #16
 80226c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80226ca:	687b      	ldr	r3, [r7, #4]
 80226cc:	681b      	ldr	r3, [r3, #0]
 80226ce:	330c      	adds	r3, #12
 80226d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80226d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80226d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80226d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80226da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80226dc:	e841 2300 	strex	r3, r2, [r1]
 80226e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80226e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80226e4:	2b00      	cmp	r3, #0
 80226e6:	d1e3      	bne.n	80226b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80226e8:	687b      	ldr	r3, [r7, #4]
 80226ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80226ec:	4618      	mov	r0, r3
 80226ee:	f7fa fa27 	bl	801cb40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80226f2:	687b      	ldr	r3, [r7, #4]
 80226f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80226f6:	687b      	ldr	r3, [r7, #4]
 80226f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80226fa:	b29b      	uxth	r3, r3
 80226fc:	1ad3      	subs	r3, r2, r3
 80226fe:	b29b      	uxth	r3, r3
 8022700:	4619      	mov	r1, r3
 8022702:	6878      	ldr	r0, [r7, #4]
 8022704:	f000 f8b6 	bl	8022874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8022708:	e099      	b.n	802283e <HAL_UART_IRQHandler+0x50e>
 802270a:	bf00      	nop
 802270c:	080229cf 	.word	0x080229cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8022710:	687b      	ldr	r3, [r7, #4]
 8022712:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8022714:	687b      	ldr	r3, [r7, #4]
 8022716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022718:	b29b      	uxth	r3, r3
 802271a:	1ad3      	subs	r3, r2, r3
 802271c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8022720:	687b      	ldr	r3, [r7, #4]
 8022722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022724:	b29b      	uxth	r3, r3
 8022726:	2b00      	cmp	r3, #0
 8022728:	f000 808b 	beq.w	8022842 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 802272c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8022730:	2b00      	cmp	r3, #0
 8022732:	f000 8086 	beq.w	8022842 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	681b      	ldr	r3, [r3, #0]
 802273a:	330c      	adds	r3, #12
 802273c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022740:	e853 3f00 	ldrex	r3, [r3]
 8022744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8022746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802274c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8022750:	687b      	ldr	r3, [r7, #4]
 8022752:	681b      	ldr	r3, [r3, #0]
 8022754:	330c      	adds	r3, #12
 8022756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 802275a:	647a      	str	r2, [r7, #68]	; 0x44
 802275c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802275e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8022760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8022762:	e841 2300 	strex	r3, r2, [r1]
 8022766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8022768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802276a:	2b00      	cmp	r3, #0
 802276c:	d1e3      	bne.n	8022736 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802276e:	687b      	ldr	r3, [r7, #4]
 8022770:	681b      	ldr	r3, [r3, #0]
 8022772:	3314      	adds	r3, #20
 8022774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022778:	e853 3f00 	ldrex	r3, [r3]
 802277c:	623b      	str	r3, [r7, #32]
   return(result);
 802277e:	6a3b      	ldr	r3, [r7, #32]
 8022780:	f023 0301 	bic.w	r3, r3, #1
 8022784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8022788:	687b      	ldr	r3, [r7, #4]
 802278a:	681b      	ldr	r3, [r3, #0]
 802278c:	3314      	adds	r3, #20
 802278e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8022792:	633a      	str	r2, [r7, #48]	; 0x30
 8022794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802279a:	e841 2300 	strex	r3, r2, [r1]
 802279e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80227a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80227a2:	2b00      	cmp	r3, #0
 80227a4:	d1e3      	bne.n	802276e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80227a6:	687b      	ldr	r3, [r7, #4]
 80227a8:	2220      	movs	r2, #32
 80227aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80227ae:	687b      	ldr	r3, [r7, #4]
 80227b0:	2200      	movs	r2, #0
 80227b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80227b4:	687b      	ldr	r3, [r7, #4]
 80227b6:	681b      	ldr	r3, [r3, #0]
 80227b8:	330c      	adds	r3, #12
 80227ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80227bc:	693b      	ldr	r3, [r7, #16]
 80227be:	e853 3f00 	ldrex	r3, [r3]
 80227c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80227c4:	68fb      	ldr	r3, [r7, #12]
 80227c6:	f023 0310 	bic.w	r3, r3, #16
 80227ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80227ce:	687b      	ldr	r3, [r7, #4]
 80227d0:	681b      	ldr	r3, [r3, #0]
 80227d2:	330c      	adds	r3, #12
 80227d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80227d8:	61fa      	str	r2, [r7, #28]
 80227da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80227dc:	69b9      	ldr	r1, [r7, #24]
 80227de:	69fa      	ldr	r2, [r7, #28]
 80227e0:	e841 2300 	strex	r3, r2, [r1]
 80227e4:	617b      	str	r3, [r7, #20]
   return(result);
 80227e6:	697b      	ldr	r3, [r7, #20]
 80227e8:	2b00      	cmp	r3, #0
 80227ea:	d1e3      	bne.n	80227b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80227ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80227f0:	4619      	mov	r1, r3
 80227f2:	6878      	ldr	r0, [r7, #4]
 80227f4:	f000 f83e 	bl	8022874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80227f8:	e023      	b.n	8022842 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80227fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80227fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022802:	2b00      	cmp	r3, #0
 8022804:	d009      	beq.n	802281a <HAL_UART_IRQHandler+0x4ea>
 8022806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802280e:	2b00      	cmp	r3, #0
 8022810:	d003      	beq.n	802281a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8022812:	6878      	ldr	r0, [r7, #4]
 8022814:	f000 f94f 	bl	8022ab6 <UART_Transmit_IT>
    return;
 8022818:	e014      	b.n	8022844 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802281a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802281e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022822:	2b00      	cmp	r3, #0
 8022824:	d00e      	beq.n	8022844 <HAL_UART_IRQHandler+0x514>
 8022826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802282e:	2b00      	cmp	r3, #0
 8022830:	d008      	beq.n	8022844 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8022832:	6878      	ldr	r0, [r7, #4]
 8022834:	f000 f98f 	bl	8022b56 <UART_EndTransmit_IT>
    return;
 8022838:	e004      	b.n	8022844 <HAL_UART_IRQHandler+0x514>
    return;
 802283a:	bf00      	nop
 802283c:	e002      	b.n	8022844 <HAL_UART_IRQHandler+0x514>
      return;
 802283e:	bf00      	nop
 8022840:	e000      	b.n	8022844 <HAL_UART_IRQHandler+0x514>
      return;
 8022842:	bf00      	nop
  }
}
 8022844:	37e8      	adds	r7, #232	; 0xe8
 8022846:	46bd      	mov	sp, r7
 8022848:	bd80      	pop	{r7, pc}
 802284a:	bf00      	nop

0802284c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802284c:	b480      	push	{r7}
 802284e:	b083      	sub	sp, #12
 8022850:	af00      	add	r7, sp, #0
 8022852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8022854:	bf00      	nop
 8022856:	370c      	adds	r7, #12
 8022858:	46bd      	mov	sp, r7
 802285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802285e:	4770      	bx	lr

08022860 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8022860:	b480      	push	{r7}
 8022862:	b083      	sub	sp, #12
 8022864:	af00      	add	r7, sp, #0
 8022866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8022868:	bf00      	nop
 802286a:	370c      	adds	r7, #12
 802286c:	46bd      	mov	sp, r7
 802286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022872:	4770      	bx	lr

08022874 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8022874:	b480      	push	{r7}
 8022876:	b083      	sub	sp, #12
 8022878:	af00      	add	r7, sp, #0
 802287a:	6078      	str	r0, [r7, #4]
 802287c:	460b      	mov	r3, r1
 802287e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8022880:	bf00      	nop
 8022882:	370c      	adds	r7, #12
 8022884:	46bd      	mov	sp, r7
 8022886:	f85d 7b04 	ldr.w	r7, [sp], #4
 802288a:	4770      	bx	lr

0802288c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802288c:	b480      	push	{r7}
 802288e:	b085      	sub	sp, #20
 8022890:	af00      	add	r7, sp, #0
 8022892:	60f8      	str	r0, [r7, #12]
 8022894:	60b9      	str	r1, [r7, #8]
 8022896:	4613      	mov	r3, r2
 8022898:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 802289a:	68fb      	ldr	r3, [r7, #12]
 802289c:	68ba      	ldr	r2, [r7, #8]
 802289e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80228a0:	68fb      	ldr	r3, [r7, #12]
 80228a2:	88fa      	ldrh	r2, [r7, #6]
 80228a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80228a6:	68fb      	ldr	r3, [r7, #12]
 80228a8:	88fa      	ldrh	r2, [r7, #6]
 80228aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80228ac:	68fb      	ldr	r3, [r7, #12]
 80228ae:	2200      	movs	r2, #0
 80228b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80228b2:	68fb      	ldr	r3, [r7, #12]
 80228b4:	2222      	movs	r2, #34	; 0x22
 80228b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80228ba:	68fb      	ldr	r3, [r7, #12]
 80228bc:	2200      	movs	r2, #0
 80228be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80228c2:	68fb      	ldr	r3, [r7, #12]
 80228c4:	691b      	ldr	r3, [r3, #16]
 80228c6:	2b00      	cmp	r3, #0
 80228c8:	d007      	beq.n	80228da <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80228ca:	68fb      	ldr	r3, [r7, #12]
 80228cc:	681b      	ldr	r3, [r3, #0]
 80228ce:	68da      	ldr	r2, [r3, #12]
 80228d0:	68fb      	ldr	r3, [r7, #12]
 80228d2:	681b      	ldr	r3, [r3, #0]
 80228d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80228d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80228da:	68fb      	ldr	r3, [r7, #12]
 80228dc:	681b      	ldr	r3, [r3, #0]
 80228de:	695a      	ldr	r2, [r3, #20]
 80228e0:	68fb      	ldr	r3, [r7, #12]
 80228e2:	681b      	ldr	r3, [r3, #0]
 80228e4:	f042 0201 	orr.w	r2, r2, #1
 80228e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80228ea:	68fb      	ldr	r3, [r7, #12]
 80228ec:	681b      	ldr	r3, [r3, #0]
 80228ee:	68da      	ldr	r2, [r3, #12]
 80228f0:	68fb      	ldr	r3, [r7, #12]
 80228f2:	681b      	ldr	r3, [r3, #0]
 80228f4:	f042 0220 	orr.w	r2, r2, #32
 80228f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80228fa:	2300      	movs	r3, #0
}
 80228fc:	4618      	mov	r0, r3
 80228fe:	3714      	adds	r7, #20
 8022900:	46bd      	mov	sp, r7
 8022902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022906:	4770      	bx	lr

08022908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8022908:	b480      	push	{r7}
 802290a:	b095      	sub	sp, #84	; 0x54
 802290c:	af00      	add	r7, sp, #0
 802290e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	681b      	ldr	r3, [r3, #0]
 8022914:	330c      	adds	r3, #12
 8022916:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802291a:	e853 3f00 	ldrex	r3, [r3]
 802291e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8022920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022922:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8022926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022928:	687b      	ldr	r3, [r7, #4]
 802292a:	681b      	ldr	r3, [r3, #0]
 802292c:	330c      	adds	r3, #12
 802292e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8022930:	643a      	str	r2, [r7, #64]	; 0x40
 8022932:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022934:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8022936:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8022938:	e841 2300 	strex	r3, r2, [r1]
 802293c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022940:	2b00      	cmp	r3, #0
 8022942:	d1e5      	bne.n	8022910 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022944:	687b      	ldr	r3, [r7, #4]
 8022946:	681b      	ldr	r3, [r3, #0]
 8022948:	3314      	adds	r3, #20
 802294a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802294c:	6a3b      	ldr	r3, [r7, #32]
 802294e:	e853 3f00 	ldrex	r3, [r3]
 8022952:	61fb      	str	r3, [r7, #28]
   return(result);
 8022954:	69fb      	ldr	r3, [r7, #28]
 8022956:	f023 0301 	bic.w	r3, r3, #1
 802295a:	64bb      	str	r3, [r7, #72]	; 0x48
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	681b      	ldr	r3, [r3, #0]
 8022960:	3314      	adds	r3, #20
 8022962:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8022964:	62fa      	str	r2, [r7, #44]	; 0x2c
 8022966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802296a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802296c:	e841 2300 	strex	r3, r2, [r1]
 8022970:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8022972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022974:	2b00      	cmp	r3, #0
 8022976:	d1e5      	bne.n	8022944 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022978:	687b      	ldr	r3, [r7, #4]
 802297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802297c:	2b01      	cmp	r3, #1
 802297e:	d119      	bne.n	80229b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	681b      	ldr	r3, [r3, #0]
 8022984:	330c      	adds	r3, #12
 8022986:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022988:	68fb      	ldr	r3, [r7, #12]
 802298a:	e853 3f00 	ldrex	r3, [r3]
 802298e:	60bb      	str	r3, [r7, #8]
   return(result);
 8022990:	68bb      	ldr	r3, [r7, #8]
 8022992:	f023 0310 	bic.w	r3, r3, #16
 8022996:	647b      	str	r3, [r7, #68]	; 0x44
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	681b      	ldr	r3, [r3, #0]
 802299c:	330c      	adds	r3, #12
 802299e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80229a0:	61ba      	str	r2, [r7, #24]
 80229a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80229a4:	6979      	ldr	r1, [r7, #20]
 80229a6:	69ba      	ldr	r2, [r7, #24]
 80229a8:	e841 2300 	strex	r3, r2, [r1]
 80229ac:	613b      	str	r3, [r7, #16]
   return(result);
 80229ae:	693b      	ldr	r3, [r7, #16]
 80229b0:	2b00      	cmp	r3, #0
 80229b2:	d1e5      	bne.n	8022980 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80229b4:	687b      	ldr	r3, [r7, #4]
 80229b6:	2220      	movs	r2, #32
 80229b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80229bc:	687b      	ldr	r3, [r7, #4]
 80229be:	2200      	movs	r2, #0
 80229c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80229c2:	bf00      	nop
 80229c4:	3754      	adds	r7, #84	; 0x54
 80229c6:	46bd      	mov	sp, r7
 80229c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229cc:	4770      	bx	lr

080229ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80229ce:	b580      	push	{r7, lr}
 80229d0:	b084      	sub	sp, #16
 80229d2:	af00      	add	r7, sp, #0
 80229d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80229da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80229dc:	68fb      	ldr	r3, [r7, #12]
 80229de:	2200      	movs	r2, #0
 80229e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80229e2:	68fb      	ldr	r3, [r7, #12]
 80229e4:	2200      	movs	r2, #0
 80229e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80229e8:	68f8      	ldr	r0, [r7, #12]
 80229ea:	f7ff ff2f 	bl	802284c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80229ee:	bf00      	nop
 80229f0:	3710      	adds	r7, #16
 80229f2:	46bd      	mov	sp, r7
 80229f4:	bd80      	pop	{r7, pc}

080229f6 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80229f6:	b580      	push	{r7, lr}
 80229f8:	b084      	sub	sp, #16
 80229fa:	af00      	add	r7, sp, #0
 80229fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80229fe:	687b      	ldr	r3, [r7, #4]
 8022a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a02:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8022a04:	68fb      	ldr	r3, [r7, #12]
 8022a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022a08:	2200      	movs	r2, #0
 8022a0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8022a0c:	68fb      	ldr	r3, [r7, #12]
 8022a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a10:	2b00      	cmp	r3, #0
 8022a12:	d004      	beq.n	8022a1e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8022a14:	68fb      	ldr	r3, [r7, #12]
 8022a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	d117      	bne.n	8022a4e <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8022a1e:	68fb      	ldr	r3, [r7, #12]
 8022a20:	2200      	movs	r2, #0
 8022a22:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8022a24:	68fb      	ldr	r3, [r7, #12]
 8022a26:	2200      	movs	r2, #0
 8022a28:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022a2a:	68fb      	ldr	r3, [r7, #12]
 8022a2c:	2200      	movs	r2, #0
 8022a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8022a30:	68fb      	ldr	r3, [r7, #12]
 8022a32:	2220      	movs	r2, #32
 8022a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8022a38:	68fb      	ldr	r3, [r7, #12]
 8022a3a:	2220      	movs	r2, #32
 8022a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022a40:	68fb      	ldr	r3, [r7, #12]
 8022a42:	2200      	movs	r2, #0
 8022a44:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8022a46:	68f8      	ldr	r0, [r7, #12]
 8022a48:	f7ff ff0a 	bl	8022860 <HAL_UART_AbortCpltCallback>
 8022a4c:	e000      	b.n	8022a50 <UART_DMATxAbortCallback+0x5a>
      return;
 8022a4e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022a50:	3710      	adds	r7, #16
 8022a52:	46bd      	mov	sp, r7
 8022a54:	bd80      	pop	{r7, pc}

08022a56 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8022a56:	b580      	push	{r7, lr}
 8022a58:	b084      	sub	sp, #16
 8022a5a:	af00      	add	r7, sp, #0
 8022a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8022a5e:	687b      	ldr	r3, [r7, #4]
 8022a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a62:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8022a64:	68fb      	ldr	r3, [r7, #12]
 8022a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a68:	2200      	movs	r2, #0
 8022a6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8022a6c:	68fb      	ldr	r3, [r7, #12]
 8022a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022a70:	2b00      	cmp	r3, #0
 8022a72:	d004      	beq.n	8022a7e <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8022a74:	68fb      	ldr	r3, [r7, #12]
 8022a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022a7a:	2b00      	cmp	r3, #0
 8022a7c:	d117      	bne.n	8022aae <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8022a7e:	68fb      	ldr	r3, [r7, #12]
 8022a80:	2200      	movs	r2, #0
 8022a82:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8022a84:	68fb      	ldr	r3, [r7, #12]
 8022a86:	2200      	movs	r2, #0
 8022a88:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022a8a:	68fb      	ldr	r3, [r7, #12]
 8022a8c:	2200      	movs	r2, #0
 8022a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8022a90:	68fb      	ldr	r3, [r7, #12]
 8022a92:	2220      	movs	r2, #32
 8022a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8022a98:	68fb      	ldr	r3, [r7, #12]
 8022a9a:	2220      	movs	r2, #32
 8022a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022aa0:	68fb      	ldr	r3, [r7, #12]
 8022aa2:	2200      	movs	r2, #0
 8022aa4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8022aa6:	68f8      	ldr	r0, [r7, #12]
 8022aa8:	f7ff feda 	bl	8022860 <HAL_UART_AbortCpltCallback>
 8022aac:	e000      	b.n	8022ab0 <UART_DMARxAbortCallback+0x5a>
      return;
 8022aae:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022ab0:	3710      	adds	r7, #16
 8022ab2:	46bd      	mov	sp, r7
 8022ab4:	bd80      	pop	{r7, pc}

08022ab6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8022ab6:	b480      	push	{r7}
 8022ab8:	b085      	sub	sp, #20
 8022aba:	af00      	add	r7, sp, #0
 8022abc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8022abe:	687b      	ldr	r3, [r7, #4]
 8022ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022ac4:	b2db      	uxtb	r3, r3
 8022ac6:	2b21      	cmp	r3, #33	; 0x21
 8022ac8:	d13e      	bne.n	8022b48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022aca:	687b      	ldr	r3, [r7, #4]
 8022acc:	689b      	ldr	r3, [r3, #8]
 8022ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022ad2:	d114      	bne.n	8022afe <UART_Transmit_IT+0x48>
 8022ad4:	687b      	ldr	r3, [r7, #4]
 8022ad6:	691b      	ldr	r3, [r3, #16]
 8022ad8:	2b00      	cmp	r3, #0
 8022ada:	d110      	bne.n	8022afe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8022adc:	687b      	ldr	r3, [r7, #4]
 8022ade:	6a1b      	ldr	r3, [r3, #32]
 8022ae0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8022ae2:	68fb      	ldr	r3, [r7, #12]
 8022ae4:	881b      	ldrh	r3, [r3, #0]
 8022ae6:	461a      	mov	r2, r3
 8022ae8:	687b      	ldr	r3, [r7, #4]
 8022aea:	681b      	ldr	r3, [r3, #0]
 8022aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8022af0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8022af2:	687b      	ldr	r3, [r7, #4]
 8022af4:	6a1b      	ldr	r3, [r3, #32]
 8022af6:	1c9a      	adds	r2, r3, #2
 8022af8:	687b      	ldr	r3, [r7, #4]
 8022afa:	621a      	str	r2, [r3, #32]
 8022afc:	e008      	b.n	8022b10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8022afe:	687b      	ldr	r3, [r7, #4]
 8022b00:	6a1b      	ldr	r3, [r3, #32]
 8022b02:	1c59      	adds	r1, r3, #1
 8022b04:	687a      	ldr	r2, [r7, #4]
 8022b06:	6211      	str	r1, [r2, #32]
 8022b08:	781a      	ldrb	r2, [r3, #0]
 8022b0a:	687b      	ldr	r3, [r7, #4]
 8022b0c:	681b      	ldr	r3, [r3, #0]
 8022b0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8022b10:	687b      	ldr	r3, [r7, #4]
 8022b12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8022b14:	b29b      	uxth	r3, r3
 8022b16:	3b01      	subs	r3, #1
 8022b18:	b29b      	uxth	r3, r3
 8022b1a:	687a      	ldr	r2, [r7, #4]
 8022b1c:	4619      	mov	r1, r3
 8022b1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8022b20:	2b00      	cmp	r3, #0
 8022b22:	d10f      	bne.n	8022b44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8022b24:	687b      	ldr	r3, [r7, #4]
 8022b26:	681b      	ldr	r3, [r3, #0]
 8022b28:	68da      	ldr	r2, [r3, #12]
 8022b2a:	687b      	ldr	r3, [r7, #4]
 8022b2c:	681b      	ldr	r3, [r3, #0]
 8022b2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022b32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8022b34:	687b      	ldr	r3, [r7, #4]
 8022b36:	681b      	ldr	r3, [r3, #0]
 8022b38:	68da      	ldr	r2, [r3, #12]
 8022b3a:	687b      	ldr	r3, [r7, #4]
 8022b3c:	681b      	ldr	r3, [r3, #0]
 8022b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8022b42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8022b44:	2300      	movs	r3, #0
 8022b46:	e000      	b.n	8022b4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8022b48:	2302      	movs	r3, #2
  }
}
 8022b4a:	4618      	mov	r0, r3
 8022b4c:	3714      	adds	r7, #20
 8022b4e:	46bd      	mov	sp, r7
 8022b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b54:	4770      	bx	lr

08022b56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8022b56:	b580      	push	{r7, lr}
 8022b58:	b082      	sub	sp, #8
 8022b5a:	af00      	add	r7, sp, #0
 8022b5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8022b5e:	687b      	ldr	r3, [r7, #4]
 8022b60:	681b      	ldr	r3, [r3, #0]
 8022b62:	68da      	ldr	r2, [r3, #12]
 8022b64:	687b      	ldr	r3, [r7, #4]
 8022b66:	681b      	ldr	r3, [r3, #0]
 8022b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022b6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8022b6e:	687b      	ldr	r3, [r7, #4]
 8022b70:	2220      	movs	r2, #32
 8022b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8022b76:	6878      	ldr	r0, [r7, #4]
 8022b78:	f7df fc66 	bl	8002448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8022b7c:	2300      	movs	r3, #0
}
 8022b7e:	4618      	mov	r0, r3
 8022b80:	3708      	adds	r7, #8
 8022b82:	46bd      	mov	sp, r7
 8022b84:	bd80      	pop	{r7, pc}

08022b86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8022b86:	b580      	push	{r7, lr}
 8022b88:	b08c      	sub	sp, #48	; 0x30
 8022b8a:	af00      	add	r7, sp, #0
 8022b8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8022b8e:	687b      	ldr	r3, [r7, #4]
 8022b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8022b94:	b2db      	uxtb	r3, r3
 8022b96:	2b22      	cmp	r3, #34	; 0x22
 8022b98:	f040 80ab 	bne.w	8022cf2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022b9c:	687b      	ldr	r3, [r7, #4]
 8022b9e:	689b      	ldr	r3, [r3, #8]
 8022ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022ba4:	d117      	bne.n	8022bd6 <UART_Receive_IT+0x50>
 8022ba6:	687b      	ldr	r3, [r7, #4]
 8022ba8:	691b      	ldr	r3, [r3, #16]
 8022baa:	2b00      	cmp	r3, #0
 8022bac:	d113      	bne.n	8022bd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8022bae:	2300      	movs	r3, #0
 8022bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8022bb2:	687b      	ldr	r3, [r7, #4]
 8022bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022bb6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8022bb8:	687b      	ldr	r3, [r7, #4]
 8022bba:	681b      	ldr	r3, [r3, #0]
 8022bbc:	685b      	ldr	r3, [r3, #4]
 8022bbe:	b29b      	uxth	r3, r3
 8022bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022bc4:	b29a      	uxth	r2, r3
 8022bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022bc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8022bca:	687b      	ldr	r3, [r7, #4]
 8022bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022bce:	1c9a      	adds	r2, r3, #2
 8022bd0:	687b      	ldr	r3, [r7, #4]
 8022bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8022bd4:	e026      	b.n	8022c24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8022bd6:	687b      	ldr	r3, [r7, #4]
 8022bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022bda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8022bdc:	2300      	movs	r3, #0
 8022bde:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8022be0:	687b      	ldr	r3, [r7, #4]
 8022be2:	689b      	ldr	r3, [r3, #8]
 8022be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022be8:	d007      	beq.n	8022bfa <UART_Receive_IT+0x74>
 8022bea:	687b      	ldr	r3, [r7, #4]
 8022bec:	689b      	ldr	r3, [r3, #8]
 8022bee:	2b00      	cmp	r3, #0
 8022bf0:	d10a      	bne.n	8022c08 <UART_Receive_IT+0x82>
 8022bf2:	687b      	ldr	r3, [r7, #4]
 8022bf4:	691b      	ldr	r3, [r3, #16]
 8022bf6:	2b00      	cmp	r3, #0
 8022bf8:	d106      	bne.n	8022c08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8022bfa:	687b      	ldr	r3, [r7, #4]
 8022bfc:	681b      	ldr	r3, [r3, #0]
 8022bfe:	685b      	ldr	r3, [r3, #4]
 8022c00:	b2da      	uxtb	r2, r3
 8022c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c04:	701a      	strb	r2, [r3, #0]
 8022c06:	e008      	b.n	8022c1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8022c08:	687b      	ldr	r3, [r7, #4]
 8022c0a:	681b      	ldr	r3, [r3, #0]
 8022c0c:	685b      	ldr	r3, [r3, #4]
 8022c0e:	b2db      	uxtb	r3, r3
 8022c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022c14:	b2da      	uxtb	r2, r3
 8022c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022c1e:	1c5a      	adds	r2, r3, #1
 8022c20:	687b      	ldr	r3, [r7, #4]
 8022c22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8022c24:	687b      	ldr	r3, [r7, #4]
 8022c26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022c28:	b29b      	uxth	r3, r3
 8022c2a:	3b01      	subs	r3, #1
 8022c2c:	b29b      	uxth	r3, r3
 8022c2e:	687a      	ldr	r2, [r7, #4]
 8022c30:	4619      	mov	r1, r3
 8022c32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8022c34:	2b00      	cmp	r3, #0
 8022c36:	d15a      	bne.n	8022cee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8022c38:	687b      	ldr	r3, [r7, #4]
 8022c3a:	681b      	ldr	r3, [r3, #0]
 8022c3c:	68da      	ldr	r2, [r3, #12]
 8022c3e:	687b      	ldr	r3, [r7, #4]
 8022c40:	681b      	ldr	r3, [r3, #0]
 8022c42:	f022 0220 	bic.w	r2, r2, #32
 8022c46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8022c48:	687b      	ldr	r3, [r7, #4]
 8022c4a:	681b      	ldr	r3, [r3, #0]
 8022c4c:	68da      	ldr	r2, [r3, #12]
 8022c4e:	687b      	ldr	r3, [r7, #4]
 8022c50:	681b      	ldr	r3, [r3, #0]
 8022c52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8022c56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8022c58:	687b      	ldr	r3, [r7, #4]
 8022c5a:	681b      	ldr	r3, [r3, #0]
 8022c5c:	695a      	ldr	r2, [r3, #20]
 8022c5e:	687b      	ldr	r3, [r7, #4]
 8022c60:	681b      	ldr	r3, [r3, #0]
 8022c62:	f022 0201 	bic.w	r2, r2, #1
 8022c66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8022c68:	687b      	ldr	r3, [r7, #4]
 8022c6a:	2220      	movs	r2, #32
 8022c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022c70:	687b      	ldr	r3, [r7, #4]
 8022c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c74:	2b01      	cmp	r3, #1
 8022c76:	d135      	bne.n	8022ce4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022c78:	687b      	ldr	r3, [r7, #4]
 8022c7a:	2200      	movs	r2, #0
 8022c7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022c7e:	687b      	ldr	r3, [r7, #4]
 8022c80:	681b      	ldr	r3, [r3, #0]
 8022c82:	330c      	adds	r3, #12
 8022c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022c86:	697b      	ldr	r3, [r7, #20]
 8022c88:	e853 3f00 	ldrex	r3, [r3]
 8022c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8022c8e:	693b      	ldr	r3, [r7, #16]
 8022c90:	f023 0310 	bic.w	r3, r3, #16
 8022c94:	627b      	str	r3, [r7, #36]	; 0x24
 8022c96:	687b      	ldr	r3, [r7, #4]
 8022c98:	681b      	ldr	r3, [r3, #0]
 8022c9a:	330c      	adds	r3, #12
 8022c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022c9e:	623a      	str	r2, [r7, #32]
 8022ca0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022ca2:	69f9      	ldr	r1, [r7, #28]
 8022ca4:	6a3a      	ldr	r2, [r7, #32]
 8022ca6:	e841 2300 	strex	r3, r2, [r1]
 8022caa:	61bb      	str	r3, [r7, #24]
   return(result);
 8022cac:	69bb      	ldr	r3, [r7, #24]
 8022cae:	2b00      	cmp	r3, #0
 8022cb0:	d1e5      	bne.n	8022c7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8022cb2:	687b      	ldr	r3, [r7, #4]
 8022cb4:	681b      	ldr	r3, [r3, #0]
 8022cb6:	681b      	ldr	r3, [r3, #0]
 8022cb8:	f003 0310 	and.w	r3, r3, #16
 8022cbc:	2b10      	cmp	r3, #16
 8022cbe:	d10a      	bne.n	8022cd6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8022cc0:	2300      	movs	r3, #0
 8022cc2:	60fb      	str	r3, [r7, #12]
 8022cc4:	687b      	ldr	r3, [r7, #4]
 8022cc6:	681b      	ldr	r3, [r3, #0]
 8022cc8:	681b      	ldr	r3, [r3, #0]
 8022cca:	60fb      	str	r3, [r7, #12]
 8022ccc:	687b      	ldr	r3, [r7, #4]
 8022cce:	681b      	ldr	r3, [r3, #0]
 8022cd0:	685b      	ldr	r3, [r3, #4]
 8022cd2:	60fb      	str	r3, [r7, #12]
 8022cd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8022cd6:	687b      	ldr	r3, [r7, #4]
 8022cd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8022cda:	4619      	mov	r1, r3
 8022cdc:	6878      	ldr	r0, [r7, #4]
 8022cde:	f7ff fdc9 	bl	8022874 <HAL_UARTEx_RxEventCallback>
 8022ce2:	e002      	b.n	8022cea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8022ce4:	6878      	ldr	r0, [r7, #4]
 8022ce6:	f7df fc0b 	bl	8002500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8022cea:	2300      	movs	r3, #0
 8022cec:	e002      	b.n	8022cf4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8022cee:	2300      	movs	r3, #0
 8022cf0:	e000      	b.n	8022cf4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8022cf2:	2302      	movs	r3, #2
  }
}
 8022cf4:	4618      	mov	r0, r3
 8022cf6:	3730      	adds	r7, #48	; 0x30
 8022cf8:	46bd      	mov	sp, r7
 8022cfa:	bd80      	pop	{r7, pc}

08022cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022d00:	b0c0      	sub	sp, #256	; 0x100
 8022d02:	af00      	add	r7, sp, #0
 8022d04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d0c:	681b      	ldr	r3, [r3, #0]
 8022d0e:	691b      	ldr	r3, [r3, #16]
 8022d10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8022d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d18:	68d9      	ldr	r1, [r3, #12]
 8022d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d1e:	681a      	ldr	r2, [r3, #0]
 8022d20:	ea40 0301 	orr.w	r3, r0, r1
 8022d24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d2a:	689a      	ldr	r2, [r3, #8]
 8022d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d30:	691b      	ldr	r3, [r3, #16]
 8022d32:	431a      	orrs	r2, r3
 8022d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d38:	695b      	ldr	r3, [r3, #20]
 8022d3a:	431a      	orrs	r2, r3
 8022d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d40:	69db      	ldr	r3, [r3, #28]
 8022d42:	4313      	orrs	r3, r2
 8022d44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8022d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d4c:	681b      	ldr	r3, [r3, #0]
 8022d4e:	68db      	ldr	r3, [r3, #12]
 8022d50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8022d54:	f021 010c 	bic.w	r1, r1, #12
 8022d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d5c:	681a      	ldr	r2, [r3, #0]
 8022d5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8022d62:	430b      	orrs	r3, r1
 8022d64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8022d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d6a:	681b      	ldr	r3, [r3, #0]
 8022d6c:	695b      	ldr	r3, [r3, #20]
 8022d6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8022d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d76:	6999      	ldr	r1, [r3, #24]
 8022d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d7c:	681a      	ldr	r2, [r3, #0]
 8022d7e:	ea40 0301 	orr.w	r3, r0, r1
 8022d82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8022d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d88:	681a      	ldr	r2, [r3, #0]
 8022d8a:	4b8f      	ldr	r3, [pc, #572]	; (8022fc8 <UART_SetConfig+0x2cc>)
 8022d8c:	429a      	cmp	r2, r3
 8022d8e:	d005      	beq.n	8022d9c <UART_SetConfig+0xa0>
 8022d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d94:	681a      	ldr	r2, [r3, #0]
 8022d96:	4b8d      	ldr	r3, [pc, #564]	; (8022fcc <UART_SetConfig+0x2d0>)
 8022d98:	429a      	cmp	r2, r3
 8022d9a:	d104      	bne.n	8022da6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8022d9c:	f7fe f82a 	bl	8020df4 <HAL_RCC_GetPCLK2Freq>
 8022da0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8022da4:	e003      	b.n	8022dae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8022da6:	f7fe f811 	bl	8020dcc <HAL_RCC_GetPCLK1Freq>
 8022daa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022db2:	69db      	ldr	r3, [r3, #28]
 8022db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022db8:	f040 810c 	bne.w	8022fd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8022dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022dc0:	2200      	movs	r2, #0
 8022dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8022dc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8022dca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8022dce:	4622      	mov	r2, r4
 8022dd0:	462b      	mov	r3, r5
 8022dd2:	1891      	adds	r1, r2, r2
 8022dd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8022dd6:	415b      	adcs	r3, r3
 8022dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8022dda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8022dde:	4621      	mov	r1, r4
 8022de0:	eb12 0801 	adds.w	r8, r2, r1
 8022de4:	4629      	mov	r1, r5
 8022de6:	eb43 0901 	adc.w	r9, r3, r1
 8022dea:	f04f 0200 	mov.w	r2, #0
 8022dee:	f04f 0300 	mov.w	r3, #0
 8022df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8022df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8022dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8022dfe:	4690      	mov	r8, r2
 8022e00:	4699      	mov	r9, r3
 8022e02:	4623      	mov	r3, r4
 8022e04:	eb18 0303 	adds.w	r3, r8, r3
 8022e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8022e0c:	462b      	mov	r3, r5
 8022e0e:	eb49 0303 	adc.w	r3, r9, r3
 8022e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8022e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022e1a:	685b      	ldr	r3, [r3, #4]
 8022e1c:	2200      	movs	r2, #0
 8022e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8022e22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8022e26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8022e2a:	460b      	mov	r3, r1
 8022e2c:	18db      	adds	r3, r3, r3
 8022e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8022e30:	4613      	mov	r3, r2
 8022e32:	eb42 0303 	adc.w	r3, r2, r3
 8022e36:	657b      	str	r3, [r7, #84]	; 0x54
 8022e38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8022e3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8022e40:	f7de f828 	bl	8000e94 <__aeabi_uldivmod>
 8022e44:	4602      	mov	r2, r0
 8022e46:	460b      	mov	r3, r1
 8022e48:	4b61      	ldr	r3, [pc, #388]	; (8022fd0 <UART_SetConfig+0x2d4>)
 8022e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8022e4e:	095b      	lsrs	r3, r3, #5
 8022e50:	011c      	lsls	r4, r3, #4
 8022e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022e56:	2200      	movs	r2, #0
 8022e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8022e5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8022e60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8022e64:	4642      	mov	r2, r8
 8022e66:	464b      	mov	r3, r9
 8022e68:	1891      	adds	r1, r2, r2
 8022e6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8022e6c:	415b      	adcs	r3, r3
 8022e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022e70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8022e74:	4641      	mov	r1, r8
 8022e76:	eb12 0a01 	adds.w	sl, r2, r1
 8022e7a:	4649      	mov	r1, r9
 8022e7c:	eb43 0b01 	adc.w	fp, r3, r1
 8022e80:	f04f 0200 	mov.w	r2, #0
 8022e84:	f04f 0300 	mov.w	r3, #0
 8022e88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8022e8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8022e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8022e94:	4692      	mov	sl, r2
 8022e96:	469b      	mov	fp, r3
 8022e98:	4643      	mov	r3, r8
 8022e9a:	eb1a 0303 	adds.w	r3, sl, r3
 8022e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8022ea2:	464b      	mov	r3, r9
 8022ea4:	eb4b 0303 	adc.w	r3, fp, r3
 8022ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8022eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022eb0:	685b      	ldr	r3, [r3, #4]
 8022eb2:	2200      	movs	r2, #0
 8022eb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8022eb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8022ebc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8022ec0:	460b      	mov	r3, r1
 8022ec2:	18db      	adds	r3, r3, r3
 8022ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8022ec6:	4613      	mov	r3, r2
 8022ec8:	eb42 0303 	adc.w	r3, r2, r3
 8022ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8022ece:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8022ed2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8022ed6:	f7dd ffdd 	bl	8000e94 <__aeabi_uldivmod>
 8022eda:	4602      	mov	r2, r0
 8022edc:	460b      	mov	r3, r1
 8022ede:	4611      	mov	r1, r2
 8022ee0:	4b3b      	ldr	r3, [pc, #236]	; (8022fd0 <UART_SetConfig+0x2d4>)
 8022ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8022ee6:	095b      	lsrs	r3, r3, #5
 8022ee8:	2264      	movs	r2, #100	; 0x64
 8022eea:	fb02 f303 	mul.w	r3, r2, r3
 8022eee:	1acb      	subs	r3, r1, r3
 8022ef0:	00db      	lsls	r3, r3, #3
 8022ef2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8022ef6:	4b36      	ldr	r3, [pc, #216]	; (8022fd0 <UART_SetConfig+0x2d4>)
 8022ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8022efc:	095b      	lsrs	r3, r3, #5
 8022efe:	005b      	lsls	r3, r3, #1
 8022f00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8022f04:	441c      	add	r4, r3
 8022f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022f0a:	2200      	movs	r2, #0
 8022f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8022f10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8022f14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8022f18:	4642      	mov	r2, r8
 8022f1a:	464b      	mov	r3, r9
 8022f1c:	1891      	adds	r1, r2, r2
 8022f1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8022f20:	415b      	adcs	r3, r3
 8022f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8022f28:	4641      	mov	r1, r8
 8022f2a:	1851      	adds	r1, r2, r1
 8022f2c:	6339      	str	r1, [r7, #48]	; 0x30
 8022f2e:	4649      	mov	r1, r9
 8022f30:	414b      	adcs	r3, r1
 8022f32:	637b      	str	r3, [r7, #52]	; 0x34
 8022f34:	f04f 0200 	mov.w	r2, #0
 8022f38:	f04f 0300 	mov.w	r3, #0
 8022f3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8022f40:	4659      	mov	r1, fp
 8022f42:	00cb      	lsls	r3, r1, #3
 8022f44:	4651      	mov	r1, sl
 8022f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8022f4a:	4651      	mov	r1, sl
 8022f4c:	00ca      	lsls	r2, r1, #3
 8022f4e:	4610      	mov	r0, r2
 8022f50:	4619      	mov	r1, r3
 8022f52:	4603      	mov	r3, r0
 8022f54:	4642      	mov	r2, r8
 8022f56:	189b      	adds	r3, r3, r2
 8022f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8022f5c:	464b      	mov	r3, r9
 8022f5e:	460a      	mov	r2, r1
 8022f60:	eb42 0303 	adc.w	r3, r2, r3
 8022f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8022f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022f6c:	685b      	ldr	r3, [r3, #4]
 8022f6e:	2200      	movs	r2, #0
 8022f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8022f74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8022f78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8022f7c:	460b      	mov	r3, r1
 8022f7e:	18db      	adds	r3, r3, r3
 8022f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8022f82:	4613      	mov	r3, r2
 8022f84:	eb42 0303 	adc.w	r3, r2, r3
 8022f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8022f8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8022f92:	f7dd ff7f 	bl	8000e94 <__aeabi_uldivmod>
 8022f96:	4602      	mov	r2, r0
 8022f98:	460b      	mov	r3, r1
 8022f9a:	4b0d      	ldr	r3, [pc, #52]	; (8022fd0 <UART_SetConfig+0x2d4>)
 8022f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8022fa0:	095b      	lsrs	r3, r3, #5
 8022fa2:	2164      	movs	r1, #100	; 0x64
 8022fa4:	fb01 f303 	mul.w	r3, r1, r3
 8022fa8:	1ad3      	subs	r3, r2, r3
 8022faa:	00db      	lsls	r3, r3, #3
 8022fac:	3332      	adds	r3, #50	; 0x32
 8022fae:	4a08      	ldr	r2, [pc, #32]	; (8022fd0 <UART_SetConfig+0x2d4>)
 8022fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8022fb4:	095b      	lsrs	r3, r3, #5
 8022fb6:	f003 0207 	and.w	r2, r3, #7
 8022fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022fbe:	681b      	ldr	r3, [r3, #0]
 8022fc0:	4422      	add	r2, r4
 8022fc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8022fc4:	e105      	b.n	80231d2 <UART_SetConfig+0x4d6>
 8022fc6:	bf00      	nop
 8022fc8:	40011000 	.word	0x40011000
 8022fcc:	40011400 	.word	0x40011400
 8022fd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8022fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022fd8:	2200      	movs	r2, #0
 8022fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8022fde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8022fe2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8022fe6:	4642      	mov	r2, r8
 8022fe8:	464b      	mov	r3, r9
 8022fea:	1891      	adds	r1, r2, r2
 8022fec:	6239      	str	r1, [r7, #32]
 8022fee:	415b      	adcs	r3, r3
 8022ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8022ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022ff6:	4641      	mov	r1, r8
 8022ff8:	1854      	adds	r4, r2, r1
 8022ffa:	4649      	mov	r1, r9
 8022ffc:	eb43 0501 	adc.w	r5, r3, r1
 8023000:	f04f 0200 	mov.w	r2, #0
 8023004:	f04f 0300 	mov.w	r3, #0
 8023008:	00eb      	lsls	r3, r5, #3
 802300a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802300e:	00e2      	lsls	r2, r4, #3
 8023010:	4614      	mov	r4, r2
 8023012:	461d      	mov	r5, r3
 8023014:	4643      	mov	r3, r8
 8023016:	18e3      	adds	r3, r4, r3
 8023018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802301c:	464b      	mov	r3, r9
 802301e:	eb45 0303 	adc.w	r3, r5, r3
 8023022:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8023026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802302a:	685b      	ldr	r3, [r3, #4]
 802302c:	2200      	movs	r2, #0
 802302e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8023032:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8023036:	f04f 0200 	mov.w	r2, #0
 802303a:	f04f 0300 	mov.w	r3, #0
 802303e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8023042:	4629      	mov	r1, r5
 8023044:	008b      	lsls	r3, r1, #2
 8023046:	4621      	mov	r1, r4
 8023048:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802304c:	4621      	mov	r1, r4
 802304e:	008a      	lsls	r2, r1, #2
 8023050:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8023054:	f7dd ff1e 	bl	8000e94 <__aeabi_uldivmod>
 8023058:	4602      	mov	r2, r0
 802305a:	460b      	mov	r3, r1
 802305c:	4b60      	ldr	r3, [pc, #384]	; (80231e0 <UART_SetConfig+0x4e4>)
 802305e:	fba3 2302 	umull	r2, r3, r3, r2
 8023062:	095b      	lsrs	r3, r3, #5
 8023064:	011c      	lsls	r4, r3, #4
 8023066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802306a:	2200      	movs	r2, #0
 802306c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8023070:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8023074:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8023078:	4642      	mov	r2, r8
 802307a:	464b      	mov	r3, r9
 802307c:	1891      	adds	r1, r2, r2
 802307e:	61b9      	str	r1, [r7, #24]
 8023080:	415b      	adcs	r3, r3
 8023082:	61fb      	str	r3, [r7, #28]
 8023084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8023088:	4641      	mov	r1, r8
 802308a:	1851      	adds	r1, r2, r1
 802308c:	6139      	str	r1, [r7, #16]
 802308e:	4649      	mov	r1, r9
 8023090:	414b      	adcs	r3, r1
 8023092:	617b      	str	r3, [r7, #20]
 8023094:	f04f 0200 	mov.w	r2, #0
 8023098:	f04f 0300 	mov.w	r3, #0
 802309c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80230a0:	4659      	mov	r1, fp
 80230a2:	00cb      	lsls	r3, r1, #3
 80230a4:	4651      	mov	r1, sl
 80230a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80230aa:	4651      	mov	r1, sl
 80230ac:	00ca      	lsls	r2, r1, #3
 80230ae:	4610      	mov	r0, r2
 80230b0:	4619      	mov	r1, r3
 80230b2:	4603      	mov	r3, r0
 80230b4:	4642      	mov	r2, r8
 80230b6:	189b      	adds	r3, r3, r2
 80230b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80230bc:	464b      	mov	r3, r9
 80230be:	460a      	mov	r2, r1
 80230c0:	eb42 0303 	adc.w	r3, r2, r3
 80230c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80230c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80230cc:	685b      	ldr	r3, [r3, #4]
 80230ce:	2200      	movs	r2, #0
 80230d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80230d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80230d4:	f04f 0200 	mov.w	r2, #0
 80230d8:	f04f 0300 	mov.w	r3, #0
 80230dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80230e0:	4649      	mov	r1, r9
 80230e2:	008b      	lsls	r3, r1, #2
 80230e4:	4641      	mov	r1, r8
 80230e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80230ea:	4641      	mov	r1, r8
 80230ec:	008a      	lsls	r2, r1, #2
 80230ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80230f2:	f7dd fecf 	bl	8000e94 <__aeabi_uldivmod>
 80230f6:	4602      	mov	r2, r0
 80230f8:	460b      	mov	r3, r1
 80230fa:	4b39      	ldr	r3, [pc, #228]	; (80231e0 <UART_SetConfig+0x4e4>)
 80230fc:	fba3 1302 	umull	r1, r3, r3, r2
 8023100:	095b      	lsrs	r3, r3, #5
 8023102:	2164      	movs	r1, #100	; 0x64
 8023104:	fb01 f303 	mul.w	r3, r1, r3
 8023108:	1ad3      	subs	r3, r2, r3
 802310a:	011b      	lsls	r3, r3, #4
 802310c:	3332      	adds	r3, #50	; 0x32
 802310e:	4a34      	ldr	r2, [pc, #208]	; (80231e0 <UART_SetConfig+0x4e4>)
 8023110:	fba2 2303 	umull	r2, r3, r2, r3
 8023114:	095b      	lsrs	r3, r3, #5
 8023116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802311a:	441c      	add	r4, r3
 802311c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8023120:	2200      	movs	r2, #0
 8023122:	673b      	str	r3, [r7, #112]	; 0x70
 8023124:	677a      	str	r2, [r7, #116]	; 0x74
 8023126:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 802312a:	4642      	mov	r2, r8
 802312c:	464b      	mov	r3, r9
 802312e:	1891      	adds	r1, r2, r2
 8023130:	60b9      	str	r1, [r7, #8]
 8023132:	415b      	adcs	r3, r3
 8023134:	60fb      	str	r3, [r7, #12]
 8023136:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802313a:	4641      	mov	r1, r8
 802313c:	1851      	adds	r1, r2, r1
 802313e:	6039      	str	r1, [r7, #0]
 8023140:	4649      	mov	r1, r9
 8023142:	414b      	adcs	r3, r1
 8023144:	607b      	str	r3, [r7, #4]
 8023146:	f04f 0200 	mov.w	r2, #0
 802314a:	f04f 0300 	mov.w	r3, #0
 802314e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8023152:	4659      	mov	r1, fp
 8023154:	00cb      	lsls	r3, r1, #3
 8023156:	4651      	mov	r1, sl
 8023158:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802315c:	4651      	mov	r1, sl
 802315e:	00ca      	lsls	r2, r1, #3
 8023160:	4610      	mov	r0, r2
 8023162:	4619      	mov	r1, r3
 8023164:	4603      	mov	r3, r0
 8023166:	4642      	mov	r2, r8
 8023168:	189b      	adds	r3, r3, r2
 802316a:	66bb      	str	r3, [r7, #104]	; 0x68
 802316c:	464b      	mov	r3, r9
 802316e:	460a      	mov	r2, r1
 8023170:	eb42 0303 	adc.w	r3, r2, r3
 8023174:	66fb      	str	r3, [r7, #108]	; 0x6c
 8023176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802317a:	685b      	ldr	r3, [r3, #4]
 802317c:	2200      	movs	r2, #0
 802317e:	663b      	str	r3, [r7, #96]	; 0x60
 8023180:	667a      	str	r2, [r7, #100]	; 0x64
 8023182:	f04f 0200 	mov.w	r2, #0
 8023186:	f04f 0300 	mov.w	r3, #0
 802318a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 802318e:	4649      	mov	r1, r9
 8023190:	008b      	lsls	r3, r1, #2
 8023192:	4641      	mov	r1, r8
 8023194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8023198:	4641      	mov	r1, r8
 802319a:	008a      	lsls	r2, r1, #2
 802319c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80231a0:	f7dd fe78 	bl	8000e94 <__aeabi_uldivmod>
 80231a4:	4602      	mov	r2, r0
 80231a6:	460b      	mov	r3, r1
 80231a8:	4b0d      	ldr	r3, [pc, #52]	; (80231e0 <UART_SetConfig+0x4e4>)
 80231aa:	fba3 1302 	umull	r1, r3, r3, r2
 80231ae:	095b      	lsrs	r3, r3, #5
 80231b0:	2164      	movs	r1, #100	; 0x64
 80231b2:	fb01 f303 	mul.w	r3, r1, r3
 80231b6:	1ad3      	subs	r3, r2, r3
 80231b8:	011b      	lsls	r3, r3, #4
 80231ba:	3332      	adds	r3, #50	; 0x32
 80231bc:	4a08      	ldr	r2, [pc, #32]	; (80231e0 <UART_SetConfig+0x4e4>)
 80231be:	fba2 2303 	umull	r2, r3, r2, r3
 80231c2:	095b      	lsrs	r3, r3, #5
 80231c4:	f003 020f 	and.w	r2, r3, #15
 80231c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80231cc:	681b      	ldr	r3, [r3, #0]
 80231ce:	4422      	add	r2, r4
 80231d0:	609a      	str	r2, [r3, #8]
}
 80231d2:	bf00      	nop
 80231d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80231d8:	46bd      	mov	sp, r7
 80231da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80231de:	bf00      	nop
 80231e0:	51eb851f 	.word	0x51eb851f

080231e4 <atoi>:
 80231e4:	220a      	movs	r2, #10
 80231e6:	2100      	movs	r1, #0
 80231e8:	f000 ba6a 	b.w	80236c0 <strtol>

080231ec <calloc>:
 80231ec:	4b02      	ldr	r3, [pc, #8]	; (80231f8 <calloc+0xc>)
 80231ee:	460a      	mov	r2, r1
 80231f0:	4601      	mov	r1, r0
 80231f2:	6818      	ldr	r0, [r3, #0]
 80231f4:	f000 b852 	b.w	802329c <_calloc_r>
 80231f8:	20000098 	.word	0x20000098

080231fc <__errno>:
 80231fc:	4b01      	ldr	r3, [pc, #4]	; (8023204 <__errno+0x8>)
 80231fe:	6818      	ldr	r0, [r3, #0]
 8023200:	4770      	bx	lr
 8023202:	bf00      	nop
 8023204:	20000098 	.word	0x20000098

08023208 <__libc_init_array>:
 8023208:	b570      	push	{r4, r5, r6, lr}
 802320a:	4d0d      	ldr	r5, [pc, #52]	; (8023240 <__libc_init_array+0x38>)
 802320c:	4c0d      	ldr	r4, [pc, #52]	; (8023244 <__libc_init_array+0x3c>)
 802320e:	1b64      	subs	r4, r4, r5
 8023210:	10a4      	asrs	r4, r4, #2
 8023212:	2600      	movs	r6, #0
 8023214:	42a6      	cmp	r6, r4
 8023216:	d109      	bne.n	802322c <__libc_init_array+0x24>
 8023218:	4d0b      	ldr	r5, [pc, #44]	; (8023248 <__libc_init_array+0x40>)
 802321a:	4c0c      	ldr	r4, [pc, #48]	; (802324c <__libc_init_array+0x44>)
 802321c:	f002 ff00 	bl	8026020 <_init>
 8023220:	1b64      	subs	r4, r4, r5
 8023222:	10a4      	asrs	r4, r4, #2
 8023224:	2600      	movs	r6, #0
 8023226:	42a6      	cmp	r6, r4
 8023228:	d105      	bne.n	8023236 <__libc_init_array+0x2e>
 802322a:	bd70      	pop	{r4, r5, r6, pc}
 802322c:	f855 3b04 	ldr.w	r3, [r5], #4
 8023230:	4798      	blx	r3
 8023232:	3601      	adds	r6, #1
 8023234:	e7ee      	b.n	8023214 <__libc_init_array+0xc>
 8023236:	f855 3b04 	ldr.w	r3, [r5], #4
 802323a:	4798      	blx	r3
 802323c:	3601      	adds	r6, #1
 802323e:	e7f2      	b.n	8023226 <__libc_init_array+0x1e>
 8023240:	08029d18 	.word	0x08029d18
 8023244:	08029d18 	.word	0x08029d18
 8023248:	08029d18 	.word	0x08029d18
 802324c:	08029d1c 	.word	0x08029d1c

08023250 <malloc>:
 8023250:	4b02      	ldr	r3, [pc, #8]	; (802325c <malloc+0xc>)
 8023252:	4601      	mov	r1, r0
 8023254:	6818      	ldr	r0, [r3, #0]
 8023256:	f000 b8a3 	b.w	80233a0 <_malloc_r>
 802325a:	bf00      	nop
 802325c:	20000098 	.word	0x20000098

08023260 <free>:
 8023260:	4b02      	ldr	r3, [pc, #8]	; (802326c <free+0xc>)
 8023262:	4601      	mov	r1, r0
 8023264:	6818      	ldr	r0, [r3, #0]
 8023266:	f000 b82f 	b.w	80232c8 <_free_r>
 802326a:	bf00      	nop
 802326c:	20000098 	.word	0x20000098

08023270 <memcpy>:
 8023270:	440a      	add	r2, r1
 8023272:	4291      	cmp	r1, r2
 8023274:	f100 33ff 	add.w	r3, r0, #4294967295
 8023278:	d100      	bne.n	802327c <memcpy+0xc>
 802327a:	4770      	bx	lr
 802327c:	b510      	push	{r4, lr}
 802327e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023286:	4291      	cmp	r1, r2
 8023288:	d1f9      	bne.n	802327e <memcpy+0xe>
 802328a:	bd10      	pop	{r4, pc}

0802328c <memset>:
 802328c:	4402      	add	r2, r0
 802328e:	4603      	mov	r3, r0
 8023290:	4293      	cmp	r3, r2
 8023292:	d100      	bne.n	8023296 <memset+0xa>
 8023294:	4770      	bx	lr
 8023296:	f803 1b01 	strb.w	r1, [r3], #1
 802329a:	e7f9      	b.n	8023290 <memset+0x4>

0802329c <_calloc_r>:
 802329c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802329e:	fba1 2402 	umull	r2, r4, r1, r2
 80232a2:	b94c      	cbnz	r4, 80232b8 <_calloc_r+0x1c>
 80232a4:	4611      	mov	r1, r2
 80232a6:	9201      	str	r2, [sp, #4]
 80232a8:	f000 f87a 	bl	80233a0 <_malloc_r>
 80232ac:	9a01      	ldr	r2, [sp, #4]
 80232ae:	4605      	mov	r5, r0
 80232b0:	b930      	cbnz	r0, 80232c0 <_calloc_r+0x24>
 80232b2:	4628      	mov	r0, r5
 80232b4:	b003      	add	sp, #12
 80232b6:	bd30      	pop	{r4, r5, pc}
 80232b8:	220c      	movs	r2, #12
 80232ba:	6002      	str	r2, [r0, #0]
 80232bc:	2500      	movs	r5, #0
 80232be:	e7f8      	b.n	80232b2 <_calloc_r+0x16>
 80232c0:	4621      	mov	r1, r4
 80232c2:	f7ff ffe3 	bl	802328c <memset>
 80232c6:	e7f4      	b.n	80232b2 <_calloc_r+0x16>

080232c8 <_free_r>:
 80232c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80232ca:	2900      	cmp	r1, #0
 80232cc:	d044      	beq.n	8023358 <_free_r+0x90>
 80232ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80232d2:	9001      	str	r0, [sp, #4]
 80232d4:	2b00      	cmp	r3, #0
 80232d6:	f1a1 0404 	sub.w	r4, r1, #4
 80232da:	bfb8      	it	lt
 80232dc:	18e4      	addlt	r4, r4, r3
 80232de:	f000 f9f9 	bl	80236d4 <__malloc_lock>
 80232e2:	4a1e      	ldr	r2, [pc, #120]	; (802335c <_free_r+0x94>)
 80232e4:	9801      	ldr	r0, [sp, #4]
 80232e6:	6813      	ldr	r3, [r2, #0]
 80232e8:	b933      	cbnz	r3, 80232f8 <_free_r+0x30>
 80232ea:	6063      	str	r3, [r4, #4]
 80232ec:	6014      	str	r4, [r2, #0]
 80232ee:	b003      	add	sp, #12
 80232f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80232f4:	f000 b9f4 	b.w	80236e0 <__malloc_unlock>
 80232f8:	42a3      	cmp	r3, r4
 80232fa:	d908      	bls.n	802330e <_free_r+0x46>
 80232fc:	6825      	ldr	r5, [r4, #0]
 80232fe:	1961      	adds	r1, r4, r5
 8023300:	428b      	cmp	r3, r1
 8023302:	bf01      	itttt	eq
 8023304:	6819      	ldreq	r1, [r3, #0]
 8023306:	685b      	ldreq	r3, [r3, #4]
 8023308:	1949      	addeq	r1, r1, r5
 802330a:	6021      	streq	r1, [r4, #0]
 802330c:	e7ed      	b.n	80232ea <_free_r+0x22>
 802330e:	461a      	mov	r2, r3
 8023310:	685b      	ldr	r3, [r3, #4]
 8023312:	b10b      	cbz	r3, 8023318 <_free_r+0x50>
 8023314:	42a3      	cmp	r3, r4
 8023316:	d9fa      	bls.n	802330e <_free_r+0x46>
 8023318:	6811      	ldr	r1, [r2, #0]
 802331a:	1855      	adds	r5, r2, r1
 802331c:	42a5      	cmp	r5, r4
 802331e:	d10b      	bne.n	8023338 <_free_r+0x70>
 8023320:	6824      	ldr	r4, [r4, #0]
 8023322:	4421      	add	r1, r4
 8023324:	1854      	adds	r4, r2, r1
 8023326:	42a3      	cmp	r3, r4
 8023328:	6011      	str	r1, [r2, #0]
 802332a:	d1e0      	bne.n	80232ee <_free_r+0x26>
 802332c:	681c      	ldr	r4, [r3, #0]
 802332e:	685b      	ldr	r3, [r3, #4]
 8023330:	6053      	str	r3, [r2, #4]
 8023332:	4421      	add	r1, r4
 8023334:	6011      	str	r1, [r2, #0]
 8023336:	e7da      	b.n	80232ee <_free_r+0x26>
 8023338:	d902      	bls.n	8023340 <_free_r+0x78>
 802333a:	230c      	movs	r3, #12
 802333c:	6003      	str	r3, [r0, #0]
 802333e:	e7d6      	b.n	80232ee <_free_r+0x26>
 8023340:	6825      	ldr	r5, [r4, #0]
 8023342:	1961      	adds	r1, r4, r5
 8023344:	428b      	cmp	r3, r1
 8023346:	bf04      	itt	eq
 8023348:	6819      	ldreq	r1, [r3, #0]
 802334a:	685b      	ldreq	r3, [r3, #4]
 802334c:	6063      	str	r3, [r4, #4]
 802334e:	bf04      	itt	eq
 8023350:	1949      	addeq	r1, r1, r5
 8023352:	6021      	streq	r1, [r4, #0]
 8023354:	6054      	str	r4, [r2, #4]
 8023356:	e7ca      	b.n	80232ee <_free_r+0x26>
 8023358:	b003      	add	sp, #12
 802335a:	bd30      	pop	{r4, r5, pc}
 802335c:	20002098 	.word	0x20002098

08023360 <sbrk_aligned>:
 8023360:	b570      	push	{r4, r5, r6, lr}
 8023362:	4e0e      	ldr	r6, [pc, #56]	; (802339c <sbrk_aligned+0x3c>)
 8023364:	460c      	mov	r4, r1
 8023366:	6831      	ldr	r1, [r6, #0]
 8023368:	4605      	mov	r5, r0
 802336a:	b911      	cbnz	r1, 8023372 <sbrk_aligned+0x12>
 802336c:	f000 f88c 	bl	8023488 <_sbrk_r>
 8023370:	6030      	str	r0, [r6, #0]
 8023372:	4621      	mov	r1, r4
 8023374:	4628      	mov	r0, r5
 8023376:	f000 f887 	bl	8023488 <_sbrk_r>
 802337a:	1c43      	adds	r3, r0, #1
 802337c:	d00a      	beq.n	8023394 <sbrk_aligned+0x34>
 802337e:	1cc4      	adds	r4, r0, #3
 8023380:	f024 0403 	bic.w	r4, r4, #3
 8023384:	42a0      	cmp	r0, r4
 8023386:	d007      	beq.n	8023398 <sbrk_aligned+0x38>
 8023388:	1a21      	subs	r1, r4, r0
 802338a:	4628      	mov	r0, r5
 802338c:	f000 f87c 	bl	8023488 <_sbrk_r>
 8023390:	3001      	adds	r0, #1
 8023392:	d101      	bne.n	8023398 <sbrk_aligned+0x38>
 8023394:	f04f 34ff 	mov.w	r4, #4294967295
 8023398:	4620      	mov	r0, r4
 802339a:	bd70      	pop	{r4, r5, r6, pc}
 802339c:	2000209c 	.word	0x2000209c

080233a0 <_malloc_r>:
 80233a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80233a4:	1ccd      	adds	r5, r1, #3
 80233a6:	f025 0503 	bic.w	r5, r5, #3
 80233aa:	3508      	adds	r5, #8
 80233ac:	2d0c      	cmp	r5, #12
 80233ae:	bf38      	it	cc
 80233b0:	250c      	movcc	r5, #12
 80233b2:	2d00      	cmp	r5, #0
 80233b4:	4607      	mov	r7, r0
 80233b6:	db01      	blt.n	80233bc <_malloc_r+0x1c>
 80233b8:	42a9      	cmp	r1, r5
 80233ba:	d905      	bls.n	80233c8 <_malloc_r+0x28>
 80233bc:	230c      	movs	r3, #12
 80233be:	603b      	str	r3, [r7, #0]
 80233c0:	2600      	movs	r6, #0
 80233c2:	4630      	mov	r0, r6
 80233c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80233c8:	4e2e      	ldr	r6, [pc, #184]	; (8023484 <_malloc_r+0xe4>)
 80233ca:	f000 f983 	bl	80236d4 <__malloc_lock>
 80233ce:	6833      	ldr	r3, [r6, #0]
 80233d0:	461c      	mov	r4, r3
 80233d2:	bb34      	cbnz	r4, 8023422 <_malloc_r+0x82>
 80233d4:	4629      	mov	r1, r5
 80233d6:	4638      	mov	r0, r7
 80233d8:	f7ff ffc2 	bl	8023360 <sbrk_aligned>
 80233dc:	1c43      	adds	r3, r0, #1
 80233de:	4604      	mov	r4, r0
 80233e0:	d14d      	bne.n	802347e <_malloc_r+0xde>
 80233e2:	6834      	ldr	r4, [r6, #0]
 80233e4:	4626      	mov	r6, r4
 80233e6:	2e00      	cmp	r6, #0
 80233e8:	d140      	bne.n	802346c <_malloc_r+0xcc>
 80233ea:	6823      	ldr	r3, [r4, #0]
 80233ec:	4631      	mov	r1, r6
 80233ee:	4638      	mov	r0, r7
 80233f0:	eb04 0803 	add.w	r8, r4, r3
 80233f4:	f000 f848 	bl	8023488 <_sbrk_r>
 80233f8:	4580      	cmp	r8, r0
 80233fa:	d13a      	bne.n	8023472 <_malloc_r+0xd2>
 80233fc:	6821      	ldr	r1, [r4, #0]
 80233fe:	3503      	adds	r5, #3
 8023400:	1a6d      	subs	r5, r5, r1
 8023402:	f025 0503 	bic.w	r5, r5, #3
 8023406:	3508      	adds	r5, #8
 8023408:	2d0c      	cmp	r5, #12
 802340a:	bf38      	it	cc
 802340c:	250c      	movcc	r5, #12
 802340e:	4629      	mov	r1, r5
 8023410:	4638      	mov	r0, r7
 8023412:	f7ff ffa5 	bl	8023360 <sbrk_aligned>
 8023416:	3001      	adds	r0, #1
 8023418:	d02b      	beq.n	8023472 <_malloc_r+0xd2>
 802341a:	6823      	ldr	r3, [r4, #0]
 802341c:	442b      	add	r3, r5
 802341e:	6023      	str	r3, [r4, #0]
 8023420:	e00e      	b.n	8023440 <_malloc_r+0xa0>
 8023422:	6822      	ldr	r2, [r4, #0]
 8023424:	1b52      	subs	r2, r2, r5
 8023426:	d41e      	bmi.n	8023466 <_malloc_r+0xc6>
 8023428:	2a0b      	cmp	r2, #11
 802342a:	d916      	bls.n	802345a <_malloc_r+0xba>
 802342c:	1961      	adds	r1, r4, r5
 802342e:	42a3      	cmp	r3, r4
 8023430:	6025      	str	r5, [r4, #0]
 8023432:	bf18      	it	ne
 8023434:	6059      	strne	r1, [r3, #4]
 8023436:	6863      	ldr	r3, [r4, #4]
 8023438:	bf08      	it	eq
 802343a:	6031      	streq	r1, [r6, #0]
 802343c:	5162      	str	r2, [r4, r5]
 802343e:	604b      	str	r3, [r1, #4]
 8023440:	4638      	mov	r0, r7
 8023442:	f104 060b 	add.w	r6, r4, #11
 8023446:	f000 f94b 	bl	80236e0 <__malloc_unlock>
 802344a:	f026 0607 	bic.w	r6, r6, #7
 802344e:	1d23      	adds	r3, r4, #4
 8023450:	1af2      	subs	r2, r6, r3
 8023452:	d0b6      	beq.n	80233c2 <_malloc_r+0x22>
 8023454:	1b9b      	subs	r3, r3, r6
 8023456:	50a3      	str	r3, [r4, r2]
 8023458:	e7b3      	b.n	80233c2 <_malloc_r+0x22>
 802345a:	6862      	ldr	r2, [r4, #4]
 802345c:	42a3      	cmp	r3, r4
 802345e:	bf0c      	ite	eq
 8023460:	6032      	streq	r2, [r6, #0]
 8023462:	605a      	strne	r2, [r3, #4]
 8023464:	e7ec      	b.n	8023440 <_malloc_r+0xa0>
 8023466:	4623      	mov	r3, r4
 8023468:	6864      	ldr	r4, [r4, #4]
 802346a:	e7b2      	b.n	80233d2 <_malloc_r+0x32>
 802346c:	4634      	mov	r4, r6
 802346e:	6876      	ldr	r6, [r6, #4]
 8023470:	e7b9      	b.n	80233e6 <_malloc_r+0x46>
 8023472:	230c      	movs	r3, #12
 8023474:	603b      	str	r3, [r7, #0]
 8023476:	4638      	mov	r0, r7
 8023478:	f000 f932 	bl	80236e0 <__malloc_unlock>
 802347c:	e7a1      	b.n	80233c2 <_malloc_r+0x22>
 802347e:	6025      	str	r5, [r4, #0]
 8023480:	e7de      	b.n	8023440 <_malloc_r+0xa0>
 8023482:	bf00      	nop
 8023484:	20002098 	.word	0x20002098

08023488 <_sbrk_r>:
 8023488:	b538      	push	{r3, r4, r5, lr}
 802348a:	4d06      	ldr	r5, [pc, #24]	; (80234a4 <_sbrk_r+0x1c>)
 802348c:	2300      	movs	r3, #0
 802348e:	4604      	mov	r4, r0
 8023490:	4608      	mov	r0, r1
 8023492:	602b      	str	r3, [r5, #0]
 8023494:	f7e0 fb34 	bl	8003b00 <_sbrk>
 8023498:	1c43      	adds	r3, r0, #1
 802349a:	d102      	bne.n	80234a2 <_sbrk_r+0x1a>
 802349c:	682b      	ldr	r3, [r5, #0]
 802349e:	b103      	cbz	r3, 80234a2 <_sbrk_r+0x1a>
 80234a0:	6023      	str	r3, [r4, #0]
 80234a2:	bd38      	pop	{r3, r4, r5, pc}
 80234a4:	200020a0 	.word	0x200020a0

080234a8 <strcasecmp>:
 80234a8:	b530      	push	{r4, r5, lr}
 80234aa:	4d0b      	ldr	r5, [pc, #44]	; (80234d8 <strcasecmp+0x30>)
 80234ac:	4604      	mov	r4, r0
 80234ae:	f814 3b01 	ldrb.w	r3, [r4], #1
 80234b2:	5d5a      	ldrb	r2, [r3, r5]
 80234b4:	f002 0203 	and.w	r2, r2, #3
 80234b8:	2a01      	cmp	r2, #1
 80234ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80234be:	5ca8      	ldrb	r0, [r5, r2]
 80234c0:	f000 0003 	and.w	r0, r0, #3
 80234c4:	bf08      	it	eq
 80234c6:	3320      	addeq	r3, #32
 80234c8:	2801      	cmp	r0, #1
 80234ca:	bf08      	it	eq
 80234cc:	3220      	addeq	r2, #32
 80234ce:	1a98      	subs	r0, r3, r2
 80234d0:	d101      	bne.n	80234d6 <strcasecmp+0x2e>
 80234d2:	2a00      	cmp	r2, #0
 80234d4:	d1eb      	bne.n	80234ae <strcasecmp+0x6>
 80234d6:	bd30      	pop	{r4, r5, pc}
 80234d8:	08029609 	.word	0x08029609

080234dc <strcat>:
 80234dc:	b510      	push	{r4, lr}
 80234de:	4602      	mov	r2, r0
 80234e0:	7814      	ldrb	r4, [r2, #0]
 80234e2:	4613      	mov	r3, r2
 80234e4:	3201      	adds	r2, #1
 80234e6:	2c00      	cmp	r4, #0
 80234e8:	d1fa      	bne.n	80234e0 <strcat+0x4>
 80234ea:	3b01      	subs	r3, #1
 80234ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80234f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80234f4:	2a00      	cmp	r2, #0
 80234f6:	d1f9      	bne.n	80234ec <strcat+0x10>
 80234f8:	bd10      	pop	{r4, pc}

080234fa <strchr>:
 80234fa:	b2c9      	uxtb	r1, r1
 80234fc:	4603      	mov	r3, r0
 80234fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023502:	b11a      	cbz	r2, 802350c <strchr+0x12>
 8023504:	428a      	cmp	r2, r1
 8023506:	d1f9      	bne.n	80234fc <strchr+0x2>
 8023508:	4618      	mov	r0, r3
 802350a:	4770      	bx	lr
 802350c:	2900      	cmp	r1, #0
 802350e:	bf18      	it	ne
 8023510:	2300      	movne	r3, #0
 8023512:	e7f9      	b.n	8023508 <strchr+0xe>

08023514 <strcpy>:
 8023514:	4603      	mov	r3, r0
 8023516:	f811 2b01 	ldrb.w	r2, [r1], #1
 802351a:	f803 2b01 	strb.w	r2, [r3], #1
 802351e:	2a00      	cmp	r2, #0
 8023520:	d1f9      	bne.n	8023516 <strcpy+0x2>
 8023522:	4770      	bx	lr

08023524 <strncasecmp>:
 8023524:	b570      	push	{r4, r5, r6, lr}
 8023526:	4e0f      	ldr	r6, [pc, #60]	; (8023564 <strncasecmp+0x40>)
 8023528:	4604      	mov	r4, r0
 802352a:	440a      	add	r2, r1
 802352c:	428a      	cmp	r2, r1
 802352e:	d101      	bne.n	8023534 <strncasecmp+0x10>
 8023530:	2000      	movs	r0, #0
 8023532:	e013      	b.n	802355c <strncasecmp+0x38>
 8023534:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023538:	5d98      	ldrb	r0, [r3, r6]
 802353a:	f000 0003 	and.w	r0, r0, #3
 802353e:	2801      	cmp	r0, #1
 8023540:	f811 0b01 	ldrb.w	r0, [r1], #1
 8023544:	5c35      	ldrb	r5, [r6, r0]
 8023546:	f005 0503 	and.w	r5, r5, #3
 802354a:	bf08      	it	eq
 802354c:	3320      	addeq	r3, #32
 802354e:	2d01      	cmp	r5, #1
 8023550:	bf08      	it	eq
 8023552:	3020      	addeq	r0, #32
 8023554:	1a1b      	subs	r3, r3, r0
 8023556:	d102      	bne.n	802355e <strncasecmp+0x3a>
 8023558:	2800      	cmp	r0, #0
 802355a:	d1e7      	bne.n	802352c <strncasecmp+0x8>
 802355c:	bd70      	pop	{r4, r5, r6, pc}
 802355e:	4618      	mov	r0, r3
 8023560:	e7fc      	b.n	802355c <strncasecmp+0x38>
 8023562:	bf00      	nop
 8023564:	08029609 	.word	0x08029609

08023568 <strncpy>:
 8023568:	b510      	push	{r4, lr}
 802356a:	3901      	subs	r1, #1
 802356c:	4603      	mov	r3, r0
 802356e:	b132      	cbz	r2, 802357e <strncpy+0x16>
 8023570:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023574:	f803 4b01 	strb.w	r4, [r3], #1
 8023578:	3a01      	subs	r2, #1
 802357a:	2c00      	cmp	r4, #0
 802357c:	d1f7      	bne.n	802356e <strncpy+0x6>
 802357e:	441a      	add	r2, r3
 8023580:	2100      	movs	r1, #0
 8023582:	4293      	cmp	r3, r2
 8023584:	d100      	bne.n	8023588 <strncpy+0x20>
 8023586:	bd10      	pop	{r4, pc}
 8023588:	f803 1b01 	strb.w	r1, [r3], #1
 802358c:	e7f9      	b.n	8023582 <strncpy+0x1a>

0802358e <strstr>:
 802358e:	780a      	ldrb	r2, [r1, #0]
 8023590:	b570      	push	{r4, r5, r6, lr}
 8023592:	b96a      	cbnz	r2, 80235b0 <strstr+0x22>
 8023594:	bd70      	pop	{r4, r5, r6, pc}
 8023596:	429a      	cmp	r2, r3
 8023598:	d109      	bne.n	80235ae <strstr+0x20>
 802359a:	460c      	mov	r4, r1
 802359c:	4605      	mov	r5, r0
 802359e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80235a2:	2b00      	cmp	r3, #0
 80235a4:	d0f6      	beq.n	8023594 <strstr+0x6>
 80235a6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80235aa:	429e      	cmp	r6, r3
 80235ac:	d0f7      	beq.n	802359e <strstr+0x10>
 80235ae:	3001      	adds	r0, #1
 80235b0:	7803      	ldrb	r3, [r0, #0]
 80235b2:	2b00      	cmp	r3, #0
 80235b4:	d1ef      	bne.n	8023596 <strstr+0x8>
 80235b6:	4618      	mov	r0, r3
 80235b8:	e7ec      	b.n	8023594 <strstr+0x6>
	...

080235bc <_strtol_l.constprop.0>:
 80235bc:	2b01      	cmp	r3, #1
 80235be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80235c2:	d001      	beq.n	80235c8 <_strtol_l.constprop.0+0xc>
 80235c4:	2b24      	cmp	r3, #36	; 0x24
 80235c6:	d906      	bls.n	80235d6 <_strtol_l.constprop.0+0x1a>
 80235c8:	f7ff fe18 	bl	80231fc <__errno>
 80235cc:	2316      	movs	r3, #22
 80235ce:	6003      	str	r3, [r0, #0]
 80235d0:	2000      	movs	r0, #0
 80235d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80236bc <_strtol_l.constprop.0+0x100>
 80235da:	460d      	mov	r5, r1
 80235dc:	462e      	mov	r6, r5
 80235de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80235e2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80235e6:	f017 0708 	ands.w	r7, r7, #8
 80235ea:	d1f7      	bne.n	80235dc <_strtol_l.constprop.0+0x20>
 80235ec:	2c2d      	cmp	r4, #45	; 0x2d
 80235ee:	d132      	bne.n	8023656 <_strtol_l.constprop.0+0x9a>
 80235f0:	782c      	ldrb	r4, [r5, #0]
 80235f2:	2701      	movs	r7, #1
 80235f4:	1cb5      	adds	r5, r6, #2
 80235f6:	2b00      	cmp	r3, #0
 80235f8:	d05b      	beq.n	80236b2 <_strtol_l.constprop.0+0xf6>
 80235fa:	2b10      	cmp	r3, #16
 80235fc:	d109      	bne.n	8023612 <_strtol_l.constprop.0+0x56>
 80235fe:	2c30      	cmp	r4, #48	; 0x30
 8023600:	d107      	bne.n	8023612 <_strtol_l.constprop.0+0x56>
 8023602:	782c      	ldrb	r4, [r5, #0]
 8023604:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8023608:	2c58      	cmp	r4, #88	; 0x58
 802360a:	d14d      	bne.n	80236a8 <_strtol_l.constprop.0+0xec>
 802360c:	786c      	ldrb	r4, [r5, #1]
 802360e:	2310      	movs	r3, #16
 8023610:	3502      	adds	r5, #2
 8023612:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8023616:	f108 38ff 	add.w	r8, r8, #4294967295
 802361a:	f04f 0c00 	mov.w	ip, #0
 802361e:	fbb8 f9f3 	udiv	r9, r8, r3
 8023622:	4666      	mov	r6, ip
 8023624:	fb03 8a19 	mls	sl, r3, r9, r8
 8023628:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 802362c:	f1be 0f09 	cmp.w	lr, #9
 8023630:	d816      	bhi.n	8023660 <_strtol_l.constprop.0+0xa4>
 8023632:	4674      	mov	r4, lr
 8023634:	42a3      	cmp	r3, r4
 8023636:	dd24      	ble.n	8023682 <_strtol_l.constprop.0+0xc6>
 8023638:	f1bc 0f00 	cmp.w	ip, #0
 802363c:	db1e      	blt.n	802367c <_strtol_l.constprop.0+0xc0>
 802363e:	45b1      	cmp	r9, r6
 8023640:	d31c      	bcc.n	802367c <_strtol_l.constprop.0+0xc0>
 8023642:	d101      	bne.n	8023648 <_strtol_l.constprop.0+0x8c>
 8023644:	45a2      	cmp	sl, r4
 8023646:	db19      	blt.n	802367c <_strtol_l.constprop.0+0xc0>
 8023648:	fb06 4603 	mla	r6, r6, r3, r4
 802364c:	f04f 0c01 	mov.w	ip, #1
 8023650:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023654:	e7e8      	b.n	8023628 <_strtol_l.constprop.0+0x6c>
 8023656:	2c2b      	cmp	r4, #43	; 0x2b
 8023658:	bf04      	itt	eq
 802365a:	782c      	ldrbeq	r4, [r5, #0]
 802365c:	1cb5      	addeq	r5, r6, #2
 802365e:	e7ca      	b.n	80235f6 <_strtol_l.constprop.0+0x3a>
 8023660:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8023664:	f1be 0f19 	cmp.w	lr, #25
 8023668:	d801      	bhi.n	802366e <_strtol_l.constprop.0+0xb2>
 802366a:	3c37      	subs	r4, #55	; 0x37
 802366c:	e7e2      	b.n	8023634 <_strtol_l.constprop.0+0x78>
 802366e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8023672:	f1be 0f19 	cmp.w	lr, #25
 8023676:	d804      	bhi.n	8023682 <_strtol_l.constprop.0+0xc6>
 8023678:	3c57      	subs	r4, #87	; 0x57
 802367a:	e7db      	b.n	8023634 <_strtol_l.constprop.0+0x78>
 802367c:	f04f 3cff 	mov.w	ip, #4294967295
 8023680:	e7e6      	b.n	8023650 <_strtol_l.constprop.0+0x94>
 8023682:	f1bc 0f00 	cmp.w	ip, #0
 8023686:	da05      	bge.n	8023694 <_strtol_l.constprop.0+0xd8>
 8023688:	2322      	movs	r3, #34	; 0x22
 802368a:	6003      	str	r3, [r0, #0]
 802368c:	4646      	mov	r6, r8
 802368e:	b942      	cbnz	r2, 80236a2 <_strtol_l.constprop.0+0xe6>
 8023690:	4630      	mov	r0, r6
 8023692:	e79e      	b.n	80235d2 <_strtol_l.constprop.0+0x16>
 8023694:	b107      	cbz	r7, 8023698 <_strtol_l.constprop.0+0xdc>
 8023696:	4276      	negs	r6, r6
 8023698:	2a00      	cmp	r2, #0
 802369a:	d0f9      	beq.n	8023690 <_strtol_l.constprop.0+0xd4>
 802369c:	f1bc 0f00 	cmp.w	ip, #0
 80236a0:	d000      	beq.n	80236a4 <_strtol_l.constprop.0+0xe8>
 80236a2:	1e69      	subs	r1, r5, #1
 80236a4:	6011      	str	r1, [r2, #0]
 80236a6:	e7f3      	b.n	8023690 <_strtol_l.constprop.0+0xd4>
 80236a8:	2430      	movs	r4, #48	; 0x30
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	d1b1      	bne.n	8023612 <_strtol_l.constprop.0+0x56>
 80236ae:	2308      	movs	r3, #8
 80236b0:	e7af      	b.n	8023612 <_strtol_l.constprop.0+0x56>
 80236b2:	2c30      	cmp	r4, #48	; 0x30
 80236b4:	d0a5      	beq.n	8023602 <_strtol_l.constprop.0+0x46>
 80236b6:	230a      	movs	r3, #10
 80236b8:	e7ab      	b.n	8023612 <_strtol_l.constprop.0+0x56>
 80236ba:	bf00      	nop
 80236bc:	08029609 	.word	0x08029609

080236c0 <strtol>:
 80236c0:	4613      	mov	r3, r2
 80236c2:	460a      	mov	r2, r1
 80236c4:	4601      	mov	r1, r0
 80236c6:	4802      	ldr	r0, [pc, #8]	; (80236d0 <strtol+0x10>)
 80236c8:	6800      	ldr	r0, [r0, #0]
 80236ca:	f7ff bf77 	b.w	80235bc <_strtol_l.constprop.0>
 80236ce:	bf00      	nop
 80236d0:	20000098 	.word	0x20000098

080236d4 <__malloc_lock>:
 80236d4:	4801      	ldr	r0, [pc, #4]	; (80236dc <__malloc_lock+0x8>)
 80236d6:	f000 b809 	b.w	80236ec <__retarget_lock_acquire_recursive>
 80236da:	bf00      	nop
 80236dc:	200020a4 	.word	0x200020a4

080236e0 <__malloc_unlock>:
 80236e0:	4801      	ldr	r0, [pc, #4]	; (80236e8 <__malloc_unlock+0x8>)
 80236e2:	f000 b804 	b.w	80236ee <__retarget_lock_release_recursive>
 80236e6:	bf00      	nop
 80236e8:	200020a4 	.word	0x200020a4

080236ec <__retarget_lock_acquire_recursive>:
 80236ec:	4770      	bx	lr

080236ee <__retarget_lock_release_recursive>:
 80236ee:	4770      	bx	lr

080236f0 <cos>:
 80236f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80236f2:	ec53 2b10 	vmov	r2, r3, d0
 80236f6:	4826      	ldr	r0, [pc, #152]	; (8023790 <cos+0xa0>)
 80236f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80236fc:	4281      	cmp	r1, r0
 80236fe:	dc06      	bgt.n	802370e <cos+0x1e>
 8023700:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8023788 <cos+0x98>
 8023704:	b005      	add	sp, #20
 8023706:	f85d eb04 	ldr.w	lr, [sp], #4
 802370a:	f001 b9c1 	b.w	8024a90 <__kernel_cos>
 802370e:	4821      	ldr	r0, [pc, #132]	; (8023794 <cos+0xa4>)
 8023710:	4281      	cmp	r1, r0
 8023712:	dd09      	ble.n	8023728 <cos+0x38>
 8023714:	ee10 0a10 	vmov	r0, s0
 8023718:	4619      	mov	r1, r3
 802371a:	f7dc fd73 	bl	8000204 <__aeabi_dsub>
 802371e:	ec41 0b10 	vmov	d0, r0, r1
 8023722:	b005      	add	sp, #20
 8023724:	f85d fb04 	ldr.w	pc, [sp], #4
 8023728:	4668      	mov	r0, sp
 802372a:	f000 f9fd 	bl	8023b28 <__ieee754_rem_pio2>
 802372e:	f000 0003 	and.w	r0, r0, #3
 8023732:	2801      	cmp	r0, #1
 8023734:	d00b      	beq.n	802374e <cos+0x5e>
 8023736:	2802      	cmp	r0, #2
 8023738:	d016      	beq.n	8023768 <cos+0x78>
 802373a:	b9e0      	cbnz	r0, 8023776 <cos+0x86>
 802373c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023740:	ed9d 0b00 	vldr	d0, [sp]
 8023744:	f001 f9a4 	bl	8024a90 <__kernel_cos>
 8023748:	ec51 0b10 	vmov	r0, r1, d0
 802374c:	e7e7      	b.n	802371e <cos+0x2e>
 802374e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023752:	ed9d 0b00 	vldr	d0, [sp]
 8023756:	f001 fdb3 	bl	80252c0 <__kernel_sin>
 802375a:	ec53 2b10 	vmov	r2, r3, d0
 802375e:	ee10 0a10 	vmov	r0, s0
 8023762:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023766:	e7da      	b.n	802371e <cos+0x2e>
 8023768:	ed9d 1b02 	vldr	d1, [sp, #8]
 802376c:	ed9d 0b00 	vldr	d0, [sp]
 8023770:	f001 f98e 	bl	8024a90 <__kernel_cos>
 8023774:	e7f1      	b.n	802375a <cos+0x6a>
 8023776:	ed9d 1b02 	vldr	d1, [sp, #8]
 802377a:	ed9d 0b00 	vldr	d0, [sp]
 802377e:	2001      	movs	r0, #1
 8023780:	f001 fd9e 	bl	80252c0 <__kernel_sin>
 8023784:	e7e0      	b.n	8023748 <cos+0x58>
 8023786:	bf00      	nop
	...
 8023790:	3fe921fb 	.word	0x3fe921fb
 8023794:	7fefffff 	.word	0x7fefffff

08023798 <sin>:
 8023798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802379a:	ec53 2b10 	vmov	r2, r3, d0
 802379e:	4828      	ldr	r0, [pc, #160]	; (8023840 <sin+0xa8>)
 80237a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80237a4:	4281      	cmp	r1, r0
 80237a6:	dc07      	bgt.n	80237b8 <sin+0x20>
 80237a8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8023838 <sin+0xa0>
 80237ac:	2000      	movs	r0, #0
 80237ae:	b005      	add	sp, #20
 80237b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80237b4:	f001 bd84 	b.w	80252c0 <__kernel_sin>
 80237b8:	4822      	ldr	r0, [pc, #136]	; (8023844 <sin+0xac>)
 80237ba:	4281      	cmp	r1, r0
 80237bc:	dd09      	ble.n	80237d2 <sin+0x3a>
 80237be:	ee10 0a10 	vmov	r0, s0
 80237c2:	4619      	mov	r1, r3
 80237c4:	f7dc fd1e 	bl	8000204 <__aeabi_dsub>
 80237c8:	ec41 0b10 	vmov	d0, r0, r1
 80237cc:	b005      	add	sp, #20
 80237ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80237d2:	4668      	mov	r0, sp
 80237d4:	f000 f9a8 	bl	8023b28 <__ieee754_rem_pio2>
 80237d8:	f000 0003 	and.w	r0, r0, #3
 80237dc:	2801      	cmp	r0, #1
 80237de:	d00c      	beq.n	80237fa <sin+0x62>
 80237e0:	2802      	cmp	r0, #2
 80237e2:	d011      	beq.n	8023808 <sin+0x70>
 80237e4:	b9f0      	cbnz	r0, 8023824 <sin+0x8c>
 80237e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80237ea:	ed9d 0b00 	vldr	d0, [sp]
 80237ee:	2001      	movs	r0, #1
 80237f0:	f001 fd66 	bl	80252c0 <__kernel_sin>
 80237f4:	ec51 0b10 	vmov	r0, r1, d0
 80237f8:	e7e6      	b.n	80237c8 <sin+0x30>
 80237fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80237fe:	ed9d 0b00 	vldr	d0, [sp]
 8023802:	f001 f945 	bl	8024a90 <__kernel_cos>
 8023806:	e7f5      	b.n	80237f4 <sin+0x5c>
 8023808:	ed9d 1b02 	vldr	d1, [sp, #8]
 802380c:	ed9d 0b00 	vldr	d0, [sp]
 8023810:	2001      	movs	r0, #1
 8023812:	f001 fd55 	bl	80252c0 <__kernel_sin>
 8023816:	ec53 2b10 	vmov	r2, r3, d0
 802381a:	ee10 0a10 	vmov	r0, s0
 802381e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023822:	e7d1      	b.n	80237c8 <sin+0x30>
 8023824:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023828:	ed9d 0b00 	vldr	d0, [sp]
 802382c:	f001 f930 	bl	8024a90 <__kernel_cos>
 8023830:	e7f1      	b.n	8023816 <sin+0x7e>
 8023832:	bf00      	nop
 8023834:	f3af 8000 	nop.w
	...
 8023840:	3fe921fb 	.word	0x3fe921fb
 8023844:	7fefffff 	.word	0x7fefffff

08023848 <cosf>:
 8023848:	ee10 3a10 	vmov	r3, s0
 802384c:	b507      	push	{r0, r1, r2, lr}
 802384e:	4a1e      	ldr	r2, [pc, #120]	; (80238c8 <cosf+0x80>)
 8023850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023854:	4293      	cmp	r3, r2
 8023856:	dc06      	bgt.n	8023866 <cosf+0x1e>
 8023858:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80238cc <cosf+0x84>
 802385c:	b003      	add	sp, #12
 802385e:	f85d eb04 	ldr.w	lr, [sp], #4
 8023862:	f001 bdeb 	b.w	802543c <__kernel_cosf>
 8023866:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802386a:	db04      	blt.n	8023876 <cosf+0x2e>
 802386c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8023870:	b003      	add	sp, #12
 8023872:	f85d fb04 	ldr.w	pc, [sp], #4
 8023876:	4668      	mov	r0, sp
 8023878:	f000 ffc8 	bl	802480c <__ieee754_rem_pio2f>
 802387c:	f000 0003 	and.w	r0, r0, #3
 8023880:	2801      	cmp	r0, #1
 8023882:	d009      	beq.n	8023898 <cosf+0x50>
 8023884:	2802      	cmp	r0, #2
 8023886:	d010      	beq.n	80238aa <cosf+0x62>
 8023888:	b9b0      	cbnz	r0, 80238b8 <cosf+0x70>
 802388a:	eddd 0a01 	vldr	s1, [sp, #4]
 802388e:	ed9d 0a00 	vldr	s0, [sp]
 8023892:	f001 fdd3 	bl	802543c <__kernel_cosf>
 8023896:	e7eb      	b.n	8023870 <cosf+0x28>
 8023898:	eddd 0a01 	vldr	s1, [sp, #4]
 802389c:	ed9d 0a00 	vldr	s0, [sp]
 80238a0:	f002 f8a2 	bl	80259e8 <__kernel_sinf>
 80238a4:	eeb1 0a40 	vneg.f32	s0, s0
 80238a8:	e7e2      	b.n	8023870 <cosf+0x28>
 80238aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80238ae:	ed9d 0a00 	vldr	s0, [sp]
 80238b2:	f001 fdc3 	bl	802543c <__kernel_cosf>
 80238b6:	e7f5      	b.n	80238a4 <cosf+0x5c>
 80238b8:	eddd 0a01 	vldr	s1, [sp, #4]
 80238bc:	ed9d 0a00 	vldr	s0, [sp]
 80238c0:	2001      	movs	r0, #1
 80238c2:	f002 f891 	bl	80259e8 <__kernel_sinf>
 80238c6:	e7d3      	b.n	8023870 <cosf+0x28>
 80238c8:	3f490fd8 	.word	0x3f490fd8
 80238cc:	00000000 	.word	0x00000000

080238d0 <lrintf>:
 80238d0:	ee10 3a10 	vmov	r3, s0
 80238d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80238d8:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 80238dc:	281e      	cmp	r0, #30
 80238de:	b082      	sub	sp, #8
 80238e0:	dc2e      	bgt.n	8023940 <lrintf+0x70>
 80238e2:	1c41      	adds	r1, r0, #1
 80238e4:	da02      	bge.n	80238ec <lrintf+0x1c>
 80238e6:	2000      	movs	r0, #0
 80238e8:	b002      	add	sp, #8
 80238ea:	4770      	bx	lr
 80238ec:	2816      	cmp	r0, #22
 80238ee:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 80238f2:	dd09      	ble.n	8023908 <lrintf+0x38>
 80238f4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80238f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80238fc:	3a96      	subs	r2, #150	; 0x96
 80238fe:	4090      	lsls	r0, r2
 8023900:	2900      	cmp	r1, #0
 8023902:	d0f1      	beq.n	80238e8 <lrintf+0x18>
 8023904:	4240      	negs	r0, r0
 8023906:	e7ef      	b.n	80238e8 <lrintf+0x18>
 8023908:	4b10      	ldr	r3, [pc, #64]	; (802394c <lrintf+0x7c>)
 802390a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802390e:	ed93 7a00 	vldr	s14, [r3]
 8023912:	ee37 0a00 	vadd.f32	s0, s14, s0
 8023916:	ed8d 0a01 	vstr	s0, [sp, #4]
 802391a:	eddd 7a01 	vldr	s15, [sp, #4]
 802391e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023922:	ee17 3a90 	vmov	r3, s15
 8023926:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802392a:	d0dc      	beq.n	80238e6 <lrintf+0x16>
 802392c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8023930:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8023934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8023938:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 802393c:	40d8      	lsrs	r0, r3
 802393e:	e7df      	b.n	8023900 <lrintf+0x30>
 8023940:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8023944:	ee17 0a90 	vmov	r0, s15
 8023948:	e7ce      	b.n	80238e8 <lrintf+0x18>
 802394a:	bf00      	nop
 802394c:	0802970c 	.word	0x0802970c

08023950 <sinf>:
 8023950:	ee10 3a10 	vmov	r3, s0
 8023954:	b507      	push	{r0, r1, r2, lr}
 8023956:	4a1f      	ldr	r2, [pc, #124]	; (80239d4 <sinf+0x84>)
 8023958:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802395c:	4293      	cmp	r3, r2
 802395e:	dc07      	bgt.n	8023970 <sinf+0x20>
 8023960:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80239d8 <sinf+0x88>
 8023964:	2000      	movs	r0, #0
 8023966:	b003      	add	sp, #12
 8023968:	f85d eb04 	ldr.w	lr, [sp], #4
 802396c:	f002 b83c 	b.w	80259e8 <__kernel_sinf>
 8023970:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023974:	db04      	blt.n	8023980 <sinf+0x30>
 8023976:	ee30 0a40 	vsub.f32	s0, s0, s0
 802397a:	b003      	add	sp, #12
 802397c:	f85d fb04 	ldr.w	pc, [sp], #4
 8023980:	4668      	mov	r0, sp
 8023982:	f000 ff43 	bl	802480c <__ieee754_rem_pio2f>
 8023986:	f000 0003 	and.w	r0, r0, #3
 802398a:	2801      	cmp	r0, #1
 802398c:	d00a      	beq.n	80239a4 <sinf+0x54>
 802398e:	2802      	cmp	r0, #2
 8023990:	d00f      	beq.n	80239b2 <sinf+0x62>
 8023992:	b9c0      	cbnz	r0, 80239c6 <sinf+0x76>
 8023994:	eddd 0a01 	vldr	s1, [sp, #4]
 8023998:	ed9d 0a00 	vldr	s0, [sp]
 802399c:	2001      	movs	r0, #1
 802399e:	f002 f823 	bl	80259e8 <__kernel_sinf>
 80239a2:	e7ea      	b.n	802397a <sinf+0x2a>
 80239a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80239a8:	ed9d 0a00 	vldr	s0, [sp]
 80239ac:	f001 fd46 	bl	802543c <__kernel_cosf>
 80239b0:	e7e3      	b.n	802397a <sinf+0x2a>
 80239b2:	eddd 0a01 	vldr	s1, [sp, #4]
 80239b6:	ed9d 0a00 	vldr	s0, [sp]
 80239ba:	2001      	movs	r0, #1
 80239bc:	f002 f814 	bl	80259e8 <__kernel_sinf>
 80239c0:	eeb1 0a40 	vneg.f32	s0, s0
 80239c4:	e7d9      	b.n	802397a <sinf+0x2a>
 80239c6:	eddd 0a01 	vldr	s1, [sp, #4]
 80239ca:	ed9d 0a00 	vldr	s0, [sp]
 80239ce:	f001 fd35 	bl	802543c <__kernel_cosf>
 80239d2:	e7f5      	b.n	80239c0 <sinf+0x70>
 80239d4:	3f490fd8 	.word	0x3f490fd8
 80239d8:	00000000 	.word	0x00000000

080239dc <acosf>:
 80239dc:	b508      	push	{r3, lr}
 80239de:	ed2d 8b02 	vpush	{d8}
 80239e2:	eeb0 8a40 	vmov.f32	s16, s0
 80239e6:	f000 faab 	bl	8023f40 <__ieee754_acosf>
 80239ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80239ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80239f2:	eef0 8a40 	vmov.f32	s17, s0
 80239f6:	d615      	bvs.n	8023a24 <acosf+0x48>
 80239f8:	eeb0 0a48 	vmov.f32	s0, s16
 80239fc:	f002 fa42 	bl	8025e84 <fabsf>
 8023a00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023a04:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a0c:	dd0a      	ble.n	8023a24 <acosf+0x48>
 8023a0e:	f7ff fbf5 	bl	80231fc <__errno>
 8023a12:	ecbd 8b02 	vpop	{d8}
 8023a16:	2321      	movs	r3, #33	; 0x21
 8023a18:	6003      	str	r3, [r0, #0]
 8023a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8023a1e:	4804      	ldr	r0, [pc, #16]	; (8023a30 <acosf+0x54>)
 8023a20:	f002 ba86 	b.w	8025f30 <nanf>
 8023a24:	eeb0 0a68 	vmov.f32	s0, s17
 8023a28:	ecbd 8b02 	vpop	{d8}
 8023a2c:	bd08      	pop	{r3, pc}
 8023a2e:	bf00      	nop
 8023a30:	08029714 	.word	0x08029714

08023a34 <atan2f>:
 8023a34:	f000 bb7c 	b.w	8024130 <__ieee754_atan2f>

08023a38 <powf>:
 8023a38:	b508      	push	{r3, lr}
 8023a3a:	ed2d 8b04 	vpush	{d8-d9}
 8023a3e:	eeb0 8a60 	vmov.f32	s16, s1
 8023a42:	eeb0 9a40 	vmov.f32	s18, s0
 8023a46:	f000 fc13 	bl	8024270 <__ieee754_powf>
 8023a4a:	eeb4 8a48 	vcmp.f32	s16, s16
 8023a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a52:	eef0 8a40 	vmov.f32	s17, s0
 8023a56:	d63e      	bvs.n	8023ad6 <powf+0x9e>
 8023a58:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8023a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a60:	d112      	bne.n	8023a88 <powf+0x50>
 8023a62:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8023a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a6a:	d039      	beq.n	8023ae0 <powf+0xa8>
 8023a6c:	eeb0 0a48 	vmov.f32	s0, s16
 8023a70:	f002 fa0f 	bl	8025e92 <finitef>
 8023a74:	b378      	cbz	r0, 8023ad6 <powf+0x9e>
 8023a76:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8023a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a7e:	d52a      	bpl.n	8023ad6 <powf+0x9e>
 8023a80:	f7ff fbbc 	bl	80231fc <__errno>
 8023a84:	2322      	movs	r3, #34	; 0x22
 8023a86:	e014      	b.n	8023ab2 <powf+0x7a>
 8023a88:	f002 fa03 	bl	8025e92 <finitef>
 8023a8c:	b998      	cbnz	r0, 8023ab6 <powf+0x7e>
 8023a8e:	eeb0 0a49 	vmov.f32	s0, s18
 8023a92:	f002 f9fe 	bl	8025e92 <finitef>
 8023a96:	b170      	cbz	r0, 8023ab6 <powf+0x7e>
 8023a98:	eeb0 0a48 	vmov.f32	s0, s16
 8023a9c:	f002 f9f9 	bl	8025e92 <finitef>
 8023aa0:	b148      	cbz	r0, 8023ab6 <powf+0x7e>
 8023aa2:	eef4 8a68 	vcmp.f32	s17, s17
 8023aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023aaa:	d7e9      	bvc.n	8023a80 <powf+0x48>
 8023aac:	f7ff fba6 	bl	80231fc <__errno>
 8023ab0:	2321      	movs	r3, #33	; 0x21
 8023ab2:	6003      	str	r3, [r0, #0]
 8023ab4:	e00f      	b.n	8023ad6 <powf+0x9e>
 8023ab6:	eef5 8a40 	vcmp.f32	s17, #0.0
 8023aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023abe:	d10a      	bne.n	8023ad6 <powf+0x9e>
 8023ac0:	eeb0 0a49 	vmov.f32	s0, s18
 8023ac4:	f002 f9e5 	bl	8025e92 <finitef>
 8023ac8:	b128      	cbz	r0, 8023ad6 <powf+0x9e>
 8023aca:	eeb0 0a48 	vmov.f32	s0, s16
 8023ace:	f002 f9e0 	bl	8025e92 <finitef>
 8023ad2:	2800      	cmp	r0, #0
 8023ad4:	d1d4      	bne.n	8023a80 <powf+0x48>
 8023ad6:	eeb0 0a68 	vmov.f32	s0, s17
 8023ada:	ecbd 8b04 	vpop	{d8-d9}
 8023ade:	bd08      	pop	{r3, pc}
 8023ae0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8023ae4:	e7f7      	b.n	8023ad6 <powf+0x9e>
	...

08023ae8 <sqrtf>:
 8023ae8:	b508      	push	{r3, lr}
 8023aea:	ed2d 8b02 	vpush	{d8}
 8023aee:	eeb0 8a40 	vmov.f32	s16, s0
 8023af2:	f000 ffc7 	bl	8024a84 <__ieee754_sqrtf>
 8023af6:	eeb4 8a48 	vcmp.f32	s16, s16
 8023afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023afe:	d60c      	bvs.n	8023b1a <sqrtf+0x32>
 8023b00:	eddf 8a07 	vldr	s17, [pc, #28]	; 8023b20 <sqrtf+0x38>
 8023b04:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8023b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b0c:	d505      	bpl.n	8023b1a <sqrtf+0x32>
 8023b0e:	f7ff fb75 	bl	80231fc <__errno>
 8023b12:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8023b16:	2321      	movs	r3, #33	; 0x21
 8023b18:	6003      	str	r3, [r0, #0]
 8023b1a:	ecbd 8b02 	vpop	{d8}
 8023b1e:	bd08      	pop	{r3, pc}
	...

08023b28 <__ieee754_rem_pio2>:
 8023b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b2c:	ed2d 8b02 	vpush	{d8}
 8023b30:	ec55 4b10 	vmov	r4, r5, d0
 8023b34:	4bca      	ldr	r3, [pc, #808]	; (8023e60 <__ieee754_rem_pio2+0x338>)
 8023b36:	b08b      	sub	sp, #44	; 0x2c
 8023b38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8023b3c:	4598      	cmp	r8, r3
 8023b3e:	4682      	mov	sl, r0
 8023b40:	9502      	str	r5, [sp, #8]
 8023b42:	dc08      	bgt.n	8023b56 <__ieee754_rem_pio2+0x2e>
 8023b44:	2200      	movs	r2, #0
 8023b46:	2300      	movs	r3, #0
 8023b48:	ed80 0b00 	vstr	d0, [r0]
 8023b4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8023b50:	f04f 0b00 	mov.w	fp, #0
 8023b54:	e028      	b.n	8023ba8 <__ieee754_rem_pio2+0x80>
 8023b56:	4bc3      	ldr	r3, [pc, #780]	; (8023e64 <__ieee754_rem_pio2+0x33c>)
 8023b58:	4598      	cmp	r8, r3
 8023b5a:	dc78      	bgt.n	8023c4e <__ieee754_rem_pio2+0x126>
 8023b5c:	9b02      	ldr	r3, [sp, #8]
 8023b5e:	4ec2      	ldr	r6, [pc, #776]	; (8023e68 <__ieee754_rem_pio2+0x340>)
 8023b60:	2b00      	cmp	r3, #0
 8023b62:	ee10 0a10 	vmov	r0, s0
 8023b66:	a3b0      	add	r3, pc, #704	; (adr r3, 8023e28 <__ieee754_rem_pio2+0x300>)
 8023b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b6c:	4629      	mov	r1, r5
 8023b6e:	dd39      	ble.n	8023be4 <__ieee754_rem_pio2+0xbc>
 8023b70:	f7dc fb48 	bl	8000204 <__aeabi_dsub>
 8023b74:	45b0      	cmp	r8, r6
 8023b76:	4604      	mov	r4, r0
 8023b78:	460d      	mov	r5, r1
 8023b7a:	d01b      	beq.n	8023bb4 <__ieee754_rem_pio2+0x8c>
 8023b7c:	a3ac      	add	r3, pc, #688	; (adr r3, 8023e30 <__ieee754_rem_pio2+0x308>)
 8023b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b82:	f7dc fb3f 	bl	8000204 <__aeabi_dsub>
 8023b86:	4602      	mov	r2, r0
 8023b88:	460b      	mov	r3, r1
 8023b8a:	e9ca 2300 	strd	r2, r3, [sl]
 8023b8e:	4620      	mov	r0, r4
 8023b90:	4629      	mov	r1, r5
 8023b92:	f7dc fb37 	bl	8000204 <__aeabi_dsub>
 8023b96:	a3a6      	add	r3, pc, #664	; (adr r3, 8023e30 <__ieee754_rem_pio2+0x308>)
 8023b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b9c:	f7dc fb32 	bl	8000204 <__aeabi_dsub>
 8023ba0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023ba4:	f04f 0b01 	mov.w	fp, #1
 8023ba8:	4658      	mov	r0, fp
 8023baa:	b00b      	add	sp, #44	; 0x2c
 8023bac:	ecbd 8b02 	vpop	{d8}
 8023bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bb4:	a3a0      	add	r3, pc, #640	; (adr r3, 8023e38 <__ieee754_rem_pio2+0x310>)
 8023bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bba:	f7dc fb23 	bl	8000204 <__aeabi_dsub>
 8023bbe:	a3a0      	add	r3, pc, #640	; (adr r3, 8023e40 <__ieee754_rem_pio2+0x318>)
 8023bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bc4:	4604      	mov	r4, r0
 8023bc6:	460d      	mov	r5, r1
 8023bc8:	f7dc fb1c 	bl	8000204 <__aeabi_dsub>
 8023bcc:	4602      	mov	r2, r0
 8023bce:	460b      	mov	r3, r1
 8023bd0:	e9ca 2300 	strd	r2, r3, [sl]
 8023bd4:	4620      	mov	r0, r4
 8023bd6:	4629      	mov	r1, r5
 8023bd8:	f7dc fb14 	bl	8000204 <__aeabi_dsub>
 8023bdc:	a398      	add	r3, pc, #608	; (adr r3, 8023e40 <__ieee754_rem_pio2+0x318>)
 8023bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023be2:	e7db      	b.n	8023b9c <__ieee754_rem_pio2+0x74>
 8023be4:	f7dc fb10 	bl	8000208 <__adddf3>
 8023be8:	45b0      	cmp	r8, r6
 8023bea:	4604      	mov	r4, r0
 8023bec:	460d      	mov	r5, r1
 8023bee:	d016      	beq.n	8023c1e <__ieee754_rem_pio2+0xf6>
 8023bf0:	a38f      	add	r3, pc, #572	; (adr r3, 8023e30 <__ieee754_rem_pio2+0x308>)
 8023bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bf6:	f7dc fb07 	bl	8000208 <__adddf3>
 8023bfa:	4602      	mov	r2, r0
 8023bfc:	460b      	mov	r3, r1
 8023bfe:	e9ca 2300 	strd	r2, r3, [sl]
 8023c02:	4620      	mov	r0, r4
 8023c04:	4629      	mov	r1, r5
 8023c06:	f7dc fafd 	bl	8000204 <__aeabi_dsub>
 8023c0a:	a389      	add	r3, pc, #548	; (adr r3, 8023e30 <__ieee754_rem_pio2+0x308>)
 8023c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c10:	f7dc fafa 	bl	8000208 <__adddf3>
 8023c14:	f04f 3bff 	mov.w	fp, #4294967295
 8023c18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023c1c:	e7c4      	b.n	8023ba8 <__ieee754_rem_pio2+0x80>
 8023c1e:	a386      	add	r3, pc, #536	; (adr r3, 8023e38 <__ieee754_rem_pio2+0x310>)
 8023c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c24:	f7dc faf0 	bl	8000208 <__adddf3>
 8023c28:	a385      	add	r3, pc, #532	; (adr r3, 8023e40 <__ieee754_rem_pio2+0x318>)
 8023c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c2e:	4604      	mov	r4, r0
 8023c30:	460d      	mov	r5, r1
 8023c32:	f7dc fae9 	bl	8000208 <__adddf3>
 8023c36:	4602      	mov	r2, r0
 8023c38:	460b      	mov	r3, r1
 8023c3a:	e9ca 2300 	strd	r2, r3, [sl]
 8023c3e:	4620      	mov	r0, r4
 8023c40:	4629      	mov	r1, r5
 8023c42:	f7dc fadf 	bl	8000204 <__aeabi_dsub>
 8023c46:	a37e      	add	r3, pc, #504	; (adr r3, 8023e40 <__ieee754_rem_pio2+0x318>)
 8023c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c4c:	e7e0      	b.n	8023c10 <__ieee754_rem_pio2+0xe8>
 8023c4e:	4b87      	ldr	r3, [pc, #540]	; (8023e6c <__ieee754_rem_pio2+0x344>)
 8023c50:	4598      	cmp	r8, r3
 8023c52:	f300 80d9 	bgt.w	8023e08 <__ieee754_rem_pio2+0x2e0>
 8023c56:	f001 ff31 	bl	8025abc <fabs>
 8023c5a:	ec55 4b10 	vmov	r4, r5, d0
 8023c5e:	ee10 0a10 	vmov	r0, s0
 8023c62:	a379      	add	r3, pc, #484	; (adr r3, 8023e48 <__ieee754_rem_pio2+0x320>)
 8023c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c68:	4629      	mov	r1, r5
 8023c6a:	f7dc fc83 	bl	8000574 <__aeabi_dmul>
 8023c6e:	4b80      	ldr	r3, [pc, #512]	; (8023e70 <__ieee754_rem_pio2+0x348>)
 8023c70:	2200      	movs	r2, #0
 8023c72:	f7dc fac9 	bl	8000208 <__adddf3>
 8023c76:	f7dc ff17 	bl	8000aa8 <__aeabi_d2iz>
 8023c7a:	4683      	mov	fp, r0
 8023c7c:	f7dc fc10 	bl	80004a0 <__aeabi_i2d>
 8023c80:	4602      	mov	r2, r0
 8023c82:	460b      	mov	r3, r1
 8023c84:	ec43 2b18 	vmov	d8, r2, r3
 8023c88:	a367      	add	r3, pc, #412	; (adr r3, 8023e28 <__ieee754_rem_pio2+0x300>)
 8023c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c8e:	f7dc fc71 	bl	8000574 <__aeabi_dmul>
 8023c92:	4602      	mov	r2, r0
 8023c94:	460b      	mov	r3, r1
 8023c96:	4620      	mov	r0, r4
 8023c98:	4629      	mov	r1, r5
 8023c9a:	f7dc fab3 	bl	8000204 <__aeabi_dsub>
 8023c9e:	a364      	add	r3, pc, #400	; (adr r3, 8023e30 <__ieee754_rem_pio2+0x308>)
 8023ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ca4:	4606      	mov	r6, r0
 8023ca6:	460f      	mov	r7, r1
 8023ca8:	ec51 0b18 	vmov	r0, r1, d8
 8023cac:	f7dc fc62 	bl	8000574 <__aeabi_dmul>
 8023cb0:	f1bb 0f1f 	cmp.w	fp, #31
 8023cb4:	4604      	mov	r4, r0
 8023cb6:	460d      	mov	r5, r1
 8023cb8:	dc0d      	bgt.n	8023cd6 <__ieee754_rem_pio2+0x1ae>
 8023cba:	4b6e      	ldr	r3, [pc, #440]	; (8023e74 <__ieee754_rem_pio2+0x34c>)
 8023cbc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023cc4:	4543      	cmp	r3, r8
 8023cc6:	d006      	beq.n	8023cd6 <__ieee754_rem_pio2+0x1ae>
 8023cc8:	4622      	mov	r2, r4
 8023cca:	462b      	mov	r3, r5
 8023ccc:	4630      	mov	r0, r6
 8023cce:	4639      	mov	r1, r7
 8023cd0:	f7dc fa98 	bl	8000204 <__aeabi_dsub>
 8023cd4:	e00f      	b.n	8023cf6 <__ieee754_rem_pio2+0x1ce>
 8023cd6:	462b      	mov	r3, r5
 8023cd8:	4622      	mov	r2, r4
 8023cda:	4630      	mov	r0, r6
 8023cdc:	4639      	mov	r1, r7
 8023cde:	f7dc fa91 	bl	8000204 <__aeabi_dsub>
 8023ce2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8023ce6:	9303      	str	r3, [sp, #12]
 8023ce8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023cec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8023cf0:	f1b8 0f10 	cmp.w	r8, #16
 8023cf4:	dc02      	bgt.n	8023cfc <__ieee754_rem_pio2+0x1d4>
 8023cf6:	e9ca 0100 	strd	r0, r1, [sl]
 8023cfa:	e039      	b.n	8023d70 <__ieee754_rem_pio2+0x248>
 8023cfc:	a34e      	add	r3, pc, #312	; (adr r3, 8023e38 <__ieee754_rem_pio2+0x310>)
 8023cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d02:	ec51 0b18 	vmov	r0, r1, d8
 8023d06:	f7dc fc35 	bl	8000574 <__aeabi_dmul>
 8023d0a:	4604      	mov	r4, r0
 8023d0c:	460d      	mov	r5, r1
 8023d0e:	4602      	mov	r2, r0
 8023d10:	460b      	mov	r3, r1
 8023d12:	4630      	mov	r0, r6
 8023d14:	4639      	mov	r1, r7
 8023d16:	f7dc fa75 	bl	8000204 <__aeabi_dsub>
 8023d1a:	4602      	mov	r2, r0
 8023d1c:	460b      	mov	r3, r1
 8023d1e:	4680      	mov	r8, r0
 8023d20:	4689      	mov	r9, r1
 8023d22:	4630      	mov	r0, r6
 8023d24:	4639      	mov	r1, r7
 8023d26:	f7dc fa6d 	bl	8000204 <__aeabi_dsub>
 8023d2a:	4622      	mov	r2, r4
 8023d2c:	462b      	mov	r3, r5
 8023d2e:	f7dc fa69 	bl	8000204 <__aeabi_dsub>
 8023d32:	a343      	add	r3, pc, #268	; (adr r3, 8023e40 <__ieee754_rem_pio2+0x318>)
 8023d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d38:	4604      	mov	r4, r0
 8023d3a:	460d      	mov	r5, r1
 8023d3c:	ec51 0b18 	vmov	r0, r1, d8
 8023d40:	f7dc fc18 	bl	8000574 <__aeabi_dmul>
 8023d44:	4622      	mov	r2, r4
 8023d46:	462b      	mov	r3, r5
 8023d48:	f7dc fa5c 	bl	8000204 <__aeabi_dsub>
 8023d4c:	4602      	mov	r2, r0
 8023d4e:	460b      	mov	r3, r1
 8023d50:	4604      	mov	r4, r0
 8023d52:	460d      	mov	r5, r1
 8023d54:	4640      	mov	r0, r8
 8023d56:	4649      	mov	r1, r9
 8023d58:	f7dc fa54 	bl	8000204 <__aeabi_dsub>
 8023d5c:	9a03      	ldr	r2, [sp, #12]
 8023d5e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023d62:	1ad3      	subs	r3, r2, r3
 8023d64:	2b31      	cmp	r3, #49	; 0x31
 8023d66:	dc24      	bgt.n	8023db2 <__ieee754_rem_pio2+0x28a>
 8023d68:	e9ca 0100 	strd	r0, r1, [sl]
 8023d6c:	4646      	mov	r6, r8
 8023d6e:	464f      	mov	r7, r9
 8023d70:	e9da 8900 	ldrd	r8, r9, [sl]
 8023d74:	4630      	mov	r0, r6
 8023d76:	4642      	mov	r2, r8
 8023d78:	464b      	mov	r3, r9
 8023d7a:	4639      	mov	r1, r7
 8023d7c:	f7dc fa42 	bl	8000204 <__aeabi_dsub>
 8023d80:	462b      	mov	r3, r5
 8023d82:	4622      	mov	r2, r4
 8023d84:	f7dc fa3e 	bl	8000204 <__aeabi_dsub>
 8023d88:	9b02      	ldr	r3, [sp, #8]
 8023d8a:	2b00      	cmp	r3, #0
 8023d8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023d90:	f6bf af0a 	bge.w	8023ba8 <__ieee754_rem_pio2+0x80>
 8023d94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8023d98:	f8ca 3004 	str.w	r3, [sl, #4]
 8023d9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023da0:	f8ca 8000 	str.w	r8, [sl]
 8023da4:	f8ca 0008 	str.w	r0, [sl, #8]
 8023da8:	f8ca 300c 	str.w	r3, [sl, #12]
 8023dac:	f1cb 0b00 	rsb	fp, fp, #0
 8023db0:	e6fa      	b.n	8023ba8 <__ieee754_rem_pio2+0x80>
 8023db2:	a327      	add	r3, pc, #156	; (adr r3, 8023e50 <__ieee754_rem_pio2+0x328>)
 8023db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023db8:	ec51 0b18 	vmov	r0, r1, d8
 8023dbc:	f7dc fbda 	bl	8000574 <__aeabi_dmul>
 8023dc0:	4604      	mov	r4, r0
 8023dc2:	460d      	mov	r5, r1
 8023dc4:	4602      	mov	r2, r0
 8023dc6:	460b      	mov	r3, r1
 8023dc8:	4640      	mov	r0, r8
 8023dca:	4649      	mov	r1, r9
 8023dcc:	f7dc fa1a 	bl	8000204 <__aeabi_dsub>
 8023dd0:	4602      	mov	r2, r0
 8023dd2:	460b      	mov	r3, r1
 8023dd4:	4606      	mov	r6, r0
 8023dd6:	460f      	mov	r7, r1
 8023dd8:	4640      	mov	r0, r8
 8023dda:	4649      	mov	r1, r9
 8023ddc:	f7dc fa12 	bl	8000204 <__aeabi_dsub>
 8023de0:	4622      	mov	r2, r4
 8023de2:	462b      	mov	r3, r5
 8023de4:	f7dc fa0e 	bl	8000204 <__aeabi_dsub>
 8023de8:	a31b      	add	r3, pc, #108	; (adr r3, 8023e58 <__ieee754_rem_pio2+0x330>)
 8023dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dee:	4604      	mov	r4, r0
 8023df0:	460d      	mov	r5, r1
 8023df2:	ec51 0b18 	vmov	r0, r1, d8
 8023df6:	f7dc fbbd 	bl	8000574 <__aeabi_dmul>
 8023dfa:	4622      	mov	r2, r4
 8023dfc:	462b      	mov	r3, r5
 8023dfe:	f7dc fa01 	bl	8000204 <__aeabi_dsub>
 8023e02:	4604      	mov	r4, r0
 8023e04:	460d      	mov	r5, r1
 8023e06:	e75f      	b.n	8023cc8 <__ieee754_rem_pio2+0x1a0>
 8023e08:	4b1b      	ldr	r3, [pc, #108]	; (8023e78 <__ieee754_rem_pio2+0x350>)
 8023e0a:	4598      	cmp	r8, r3
 8023e0c:	dd36      	ble.n	8023e7c <__ieee754_rem_pio2+0x354>
 8023e0e:	ee10 2a10 	vmov	r2, s0
 8023e12:	462b      	mov	r3, r5
 8023e14:	4620      	mov	r0, r4
 8023e16:	4629      	mov	r1, r5
 8023e18:	f7dc f9f4 	bl	8000204 <__aeabi_dsub>
 8023e1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023e20:	e9ca 0100 	strd	r0, r1, [sl]
 8023e24:	e694      	b.n	8023b50 <__ieee754_rem_pio2+0x28>
 8023e26:	bf00      	nop
 8023e28:	54400000 	.word	0x54400000
 8023e2c:	3ff921fb 	.word	0x3ff921fb
 8023e30:	1a626331 	.word	0x1a626331
 8023e34:	3dd0b461 	.word	0x3dd0b461
 8023e38:	1a600000 	.word	0x1a600000
 8023e3c:	3dd0b461 	.word	0x3dd0b461
 8023e40:	2e037073 	.word	0x2e037073
 8023e44:	3ba3198a 	.word	0x3ba3198a
 8023e48:	6dc9c883 	.word	0x6dc9c883
 8023e4c:	3fe45f30 	.word	0x3fe45f30
 8023e50:	2e000000 	.word	0x2e000000
 8023e54:	3ba3198a 	.word	0x3ba3198a
 8023e58:	252049c1 	.word	0x252049c1
 8023e5c:	397b839a 	.word	0x397b839a
 8023e60:	3fe921fb 	.word	0x3fe921fb
 8023e64:	4002d97b 	.word	0x4002d97b
 8023e68:	3ff921fb 	.word	0x3ff921fb
 8023e6c:	413921fb 	.word	0x413921fb
 8023e70:	3fe00000 	.word	0x3fe00000
 8023e74:	08029718 	.word	0x08029718
 8023e78:	7fefffff 	.word	0x7fefffff
 8023e7c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8023e80:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8023e84:	ee10 0a10 	vmov	r0, s0
 8023e88:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8023e8c:	ee10 6a10 	vmov	r6, s0
 8023e90:	460f      	mov	r7, r1
 8023e92:	f7dc fe09 	bl	8000aa8 <__aeabi_d2iz>
 8023e96:	f7dc fb03 	bl	80004a0 <__aeabi_i2d>
 8023e9a:	4602      	mov	r2, r0
 8023e9c:	460b      	mov	r3, r1
 8023e9e:	4630      	mov	r0, r6
 8023ea0:	4639      	mov	r1, r7
 8023ea2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023ea6:	f7dc f9ad 	bl	8000204 <__aeabi_dsub>
 8023eaa:	4b23      	ldr	r3, [pc, #140]	; (8023f38 <__ieee754_rem_pio2+0x410>)
 8023eac:	2200      	movs	r2, #0
 8023eae:	f7dc fb61 	bl	8000574 <__aeabi_dmul>
 8023eb2:	460f      	mov	r7, r1
 8023eb4:	4606      	mov	r6, r0
 8023eb6:	f7dc fdf7 	bl	8000aa8 <__aeabi_d2iz>
 8023eba:	f7dc faf1 	bl	80004a0 <__aeabi_i2d>
 8023ebe:	4602      	mov	r2, r0
 8023ec0:	460b      	mov	r3, r1
 8023ec2:	4630      	mov	r0, r6
 8023ec4:	4639      	mov	r1, r7
 8023ec6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023eca:	f7dc f99b 	bl	8000204 <__aeabi_dsub>
 8023ece:	4b1a      	ldr	r3, [pc, #104]	; (8023f38 <__ieee754_rem_pio2+0x410>)
 8023ed0:	2200      	movs	r2, #0
 8023ed2:	f7dc fb4f 	bl	8000574 <__aeabi_dmul>
 8023ed6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023eda:	ad04      	add	r5, sp, #16
 8023edc:	f04f 0803 	mov.w	r8, #3
 8023ee0:	46a9      	mov	r9, r5
 8023ee2:	2600      	movs	r6, #0
 8023ee4:	2700      	movs	r7, #0
 8023ee6:	4632      	mov	r2, r6
 8023ee8:	463b      	mov	r3, r7
 8023eea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8023eee:	46c3      	mov	fp, r8
 8023ef0:	3d08      	subs	r5, #8
 8023ef2:	f108 38ff 	add.w	r8, r8, #4294967295
 8023ef6:	f7dc fda5 	bl	8000a44 <__aeabi_dcmpeq>
 8023efa:	2800      	cmp	r0, #0
 8023efc:	d1f3      	bne.n	8023ee6 <__ieee754_rem_pio2+0x3be>
 8023efe:	4b0f      	ldr	r3, [pc, #60]	; (8023f3c <__ieee754_rem_pio2+0x414>)
 8023f00:	9301      	str	r3, [sp, #4]
 8023f02:	2302      	movs	r3, #2
 8023f04:	9300      	str	r3, [sp, #0]
 8023f06:	4622      	mov	r2, r4
 8023f08:	465b      	mov	r3, fp
 8023f0a:	4651      	mov	r1, sl
 8023f0c:	4648      	mov	r0, r9
 8023f0e:	f000 fe87 	bl	8024c20 <__kernel_rem_pio2>
 8023f12:	9b02      	ldr	r3, [sp, #8]
 8023f14:	2b00      	cmp	r3, #0
 8023f16:	4683      	mov	fp, r0
 8023f18:	f6bf ae46 	bge.w	8023ba8 <__ieee754_rem_pio2+0x80>
 8023f1c:	e9da 2100 	ldrd	r2, r1, [sl]
 8023f20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023f24:	e9ca 2300 	strd	r2, r3, [sl]
 8023f28:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8023f2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023f30:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8023f34:	e73a      	b.n	8023dac <__ieee754_rem_pio2+0x284>
 8023f36:	bf00      	nop
 8023f38:	41700000 	.word	0x41700000
 8023f3c:	08029798 	.word	0x08029798

08023f40 <__ieee754_acosf>:
 8023f40:	b508      	push	{r3, lr}
 8023f42:	ee10 3a10 	vmov	r3, s0
 8023f46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8023f4a:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8023f4e:	ed2d 8b0c 	vpush	{d8-d13}
 8023f52:	d10a      	bne.n	8023f6a <__ieee754_acosf+0x2a>
 8023f54:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80240ec <__ieee754_acosf+0x1ac>
 8023f58:	ed9f 8a65 	vldr	s16, [pc, #404]	; 80240f0 <__ieee754_acosf+0x1b0>
 8023f5c:	2b00      	cmp	r3, #0
 8023f5e:	bfd8      	it	le
 8023f60:	eeb0 0a48 	vmovle.f32	s0, s16
 8023f64:	ecbd 8b0c 	vpop	{d8-d13}
 8023f68:	bd08      	pop	{r3, pc}
 8023f6a:	dd04      	ble.n	8023f76 <__ieee754_acosf+0x36>
 8023f6c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8023f70:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8023f74:	e7f6      	b.n	8023f64 <__ieee754_acosf+0x24>
 8023f76:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8023f7a:	da3c      	bge.n	8023ff6 <__ieee754_acosf+0xb6>
 8023f7c:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8023f80:	f340 80b1 	ble.w	80240e6 <__ieee754_acosf+0x1a6>
 8023f84:	ee60 7a00 	vmul.f32	s15, s0, s0
 8023f88:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80240f4 <__ieee754_acosf+0x1b4>
 8023f8c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80240f8 <__ieee754_acosf+0x1b8>
 8023f90:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 80240fc <__ieee754_acosf+0x1bc>
 8023f94:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8024100 <__ieee754_acosf+0x1c0>
 8023f98:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8023f9c:	eddf 6a59 	vldr	s13, [pc, #356]	; 8024104 <__ieee754_acosf+0x1c4>
 8023fa0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8023fa4:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8024108 <__ieee754_acosf+0x1c8>
 8023fa8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8023fac:	eddf 6a57 	vldr	s13, [pc, #348]	; 802410c <__ieee754_acosf+0x1cc>
 8023fb0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8023fb4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8024110 <__ieee754_acosf+0x1d0>
 8023fb8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8023fbc:	eddf 6a55 	vldr	s13, [pc, #340]	; 8024114 <__ieee754_acosf+0x1d4>
 8023fc0:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8023fc4:	eddf 6a54 	vldr	s13, [pc, #336]	; 8024118 <__ieee754_acosf+0x1d8>
 8023fc8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8023fcc:	ed9f 6a53 	vldr	s12, [pc, #332]	; 802411c <__ieee754_acosf+0x1dc>
 8023fd0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8023fd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023fd8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8023fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8023fe4:	eea0 8a67 	vfms.f32	s16, s0, s15
 8023fe8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8024120 <__ieee754_acosf+0x1e0>
 8023fec:	ee30 0a48 	vsub.f32	s0, s0, s16
 8023ff0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8023ff4:	e7b6      	b.n	8023f64 <__ieee754_acosf+0x24>
 8023ff6:	2b00      	cmp	r3, #0
 8023ff8:	eddf da3e 	vldr	s27, [pc, #248]	; 80240f4 <__ieee754_acosf+0x1b4>
 8023ffc:	eddf ca3e 	vldr	s25, [pc, #248]	; 80240f8 <__ieee754_acosf+0x1b8>
 8024000:	ed9f ca40 	vldr	s24, [pc, #256]	; 8024104 <__ieee754_acosf+0x1c4>
 8024004:	eddf ba40 	vldr	s23, [pc, #256]	; 8024108 <__ieee754_acosf+0x1c8>
 8024008:	ed9f ba40 	vldr	s22, [pc, #256]	; 802410c <__ieee754_acosf+0x1cc>
 802400c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8024110 <__ieee754_acosf+0x1d0>
 8024010:	ed9f da40 	vldr	s26, [pc, #256]	; 8024114 <__ieee754_acosf+0x1d4>
 8024014:	eddf aa39 	vldr	s21, [pc, #228]	; 80240fc <__ieee754_acosf+0x1bc>
 8024018:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8024118 <__ieee754_acosf+0x1d8>
 802401c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 802411c <__ieee754_acosf+0x1dc>
 8024020:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8024024:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8024028:	da28      	bge.n	802407c <__ieee754_acosf+0x13c>
 802402a:	ee30 0a09 	vadd.f32	s0, s0, s18
 802402e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024032:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8024036:	eee0 aa0d 	vfma.f32	s21, s0, s26
 802403a:	eeac ca80 	vfma.f32	s24, s25, s0
 802403e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8024042:	eeec ba00 	vfma.f32	s23, s24, s0
 8024046:	eeea 9a00 	vfma.f32	s19, s20, s0
 802404a:	eeab ba80 	vfma.f32	s22, s23, s0
 802404e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8024052:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8024056:	ee68 8a80 	vmul.f32	s17, s17, s0
 802405a:	f000 fd13 	bl	8024a84 <__ieee754_sqrtf>
 802405e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8024062:	eddf 7a30 	vldr	s15, [pc, #192]	; 8024124 <__ieee754_acosf+0x1e4>
 8024066:	eee0 7a07 	vfma.f32	s15, s0, s14
 802406a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802406e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8024072:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8024128 <__ieee754_acosf+0x1e8>
 8024076:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802407a:	e773      	b.n	8023f64 <__ieee754_acosf+0x24>
 802407c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8024080:	ee28 8a27 	vmul.f32	s16, s16, s15
 8024084:	eeb0 0a48 	vmov.f32	s0, s16
 8024088:	f000 fcfc 	bl	8024a84 <__ieee754_sqrtf>
 802408c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8024090:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8024094:	eeac ca88 	vfma.f32	s24, s25, s16
 8024098:	eeaa aa88 	vfma.f32	s20, s21, s16
 802409c:	eeec ba08 	vfma.f32	s23, s24, s16
 80240a0:	ee10 3a10 	vmov	r3, s0
 80240a4:	eeab ba88 	vfma.f32	s22, s23, s16
 80240a8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80240ac:	f023 030f 	bic.w	r3, r3, #15
 80240b0:	eeea 9a08 	vfma.f32	s19, s20, s16
 80240b4:	ee07 3a90 	vmov	s15, r3
 80240b8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80240bc:	eeb0 6a48 	vmov.f32	s12, s16
 80240c0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80240c4:	eea9 9a88 	vfma.f32	s18, s19, s16
 80240c8:	ee70 6a27 	vadd.f32	s13, s0, s15
 80240cc:	ee68 8a88 	vmul.f32	s17, s17, s16
 80240d0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80240d4:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80240d8:	eea0 7a26 	vfma.f32	s14, s0, s13
 80240dc:	ee37 0a87 	vadd.f32	s0, s15, s14
 80240e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80240e4:	e73e      	b.n	8023f64 <__ieee754_acosf+0x24>
 80240e6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 802412c <__ieee754_acosf+0x1ec>
 80240ea:	e73b      	b.n	8023f64 <__ieee754_acosf+0x24>
 80240ec:	00000000 	.word	0x00000000
 80240f0:	40490fdb 	.word	0x40490fdb
 80240f4:	3811ef08 	.word	0x3811ef08
 80240f8:	3a4f7f04 	.word	0x3a4f7f04
 80240fc:	bf303361 	.word	0xbf303361
 8024100:	33a22168 	.word	0x33a22168
 8024104:	bd241146 	.word	0xbd241146
 8024108:	3e4e0aa8 	.word	0x3e4e0aa8
 802410c:	bea6b090 	.word	0xbea6b090
 8024110:	3e2aaaab 	.word	0x3e2aaaab
 8024114:	3d9dc62e 	.word	0x3d9dc62e
 8024118:	4001572d 	.word	0x4001572d
 802411c:	c019d139 	.word	0xc019d139
 8024120:	3fc90fda 	.word	0x3fc90fda
 8024124:	b3a22168 	.word	0xb3a22168
 8024128:	40490fda 	.word	0x40490fda
 802412c:	3fc90fdb 	.word	0x3fc90fdb

08024130 <__ieee754_atan2f>:
 8024130:	ee10 2a90 	vmov	r2, s1
 8024134:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8024138:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802413c:	b510      	push	{r4, lr}
 802413e:	eef0 7a40 	vmov.f32	s15, s0
 8024142:	dc06      	bgt.n	8024152 <__ieee754_atan2f+0x22>
 8024144:	ee10 0a10 	vmov	r0, s0
 8024148:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 802414c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8024150:	dd04      	ble.n	802415c <__ieee754_atan2f+0x2c>
 8024152:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8024156:	eeb0 0a67 	vmov.f32	s0, s15
 802415a:	bd10      	pop	{r4, pc}
 802415c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8024160:	d103      	bne.n	802416a <__ieee754_atan2f+0x3a>
 8024162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024166:	f001 bdb9 	b.w	8025cdc <atanf>
 802416a:	1794      	asrs	r4, r2, #30
 802416c:	f004 0402 	and.w	r4, r4, #2
 8024170:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8024174:	b943      	cbnz	r3, 8024188 <__ieee754_atan2f+0x58>
 8024176:	2c02      	cmp	r4, #2
 8024178:	d05e      	beq.n	8024238 <__ieee754_atan2f+0x108>
 802417a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 802424c <__ieee754_atan2f+0x11c>
 802417e:	2c03      	cmp	r4, #3
 8024180:	bf08      	it	eq
 8024182:	eef0 7a47 	vmoveq.f32	s15, s14
 8024186:	e7e6      	b.n	8024156 <__ieee754_atan2f+0x26>
 8024188:	b941      	cbnz	r1, 802419c <__ieee754_atan2f+0x6c>
 802418a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8024250 <__ieee754_atan2f+0x120>
 802418e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8024254 <__ieee754_atan2f+0x124>
 8024192:	2800      	cmp	r0, #0
 8024194:	bfb8      	it	lt
 8024196:	eef0 7a40 	vmovlt.f32	s15, s0
 802419a:	e7dc      	b.n	8024156 <__ieee754_atan2f+0x26>
 802419c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80241a0:	d110      	bne.n	80241c4 <__ieee754_atan2f+0x94>
 80241a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80241a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80241aa:	d107      	bne.n	80241bc <__ieee754_atan2f+0x8c>
 80241ac:	2c02      	cmp	r4, #2
 80241ae:	d846      	bhi.n	802423e <__ieee754_atan2f+0x10e>
 80241b0:	4b29      	ldr	r3, [pc, #164]	; (8024258 <__ieee754_atan2f+0x128>)
 80241b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80241b6:	edd4 7a00 	vldr	s15, [r4]
 80241ba:	e7cc      	b.n	8024156 <__ieee754_atan2f+0x26>
 80241bc:	2c02      	cmp	r4, #2
 80241be:	d841      	bhi.n	8024244 <__ieee754_atan2f+0x114>
 80241c0:	4b26      	ldr	r3, [pc, #152]	; (802425c <__ieee754_atan2f+0x12c>)
 80241c2:	e7f6      	b.n	80241b2 <__ieee754_atan2f+0x82>
 80241c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80241c8:	d0df      	beq.n	802418a <__ieee754_atan2f+0x5a>
 80241ca:	1a5b      	subs	r3, r3, r1
 80241cc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80241d0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80241d4:	da1a      	bge.n	802420c <__ieee754_atan2f+0xdc>
 80241d6:	2a00      	cmp	r2, #0
 80241d8:	da01      	bge.n	80241de <__ieee754_atan2f+0xae>
 80241da:	313c      	adds	r1, #60	; 0x3c
 80241dc:	db19      	blt.n	8024212 <__ieee754_atan2f+0xe2>
 80241de:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80241e2:	f001 fe4f 	bl	8025e84 <fabsf>
 80241e6:	f001 fd79 	bl	8025cdc <atanf>
 80241ea:	eef0 7a40 	vmov.f32	s15, s0
 80241ee:	2c01      	cmp	r4, #1
 80241f0:	d012      	beq.n	8024218 <__ieee754_atan2f+0xe8>
 80241f2:	2c02      	cmp	r4, #2
 80241f4:	d017      	beq.n	8024226 <__ieee754_atan2f+0xf6>
 80241f6:	2c00      	cmp	r4, #0
 80241f8:	d0ad      	beq.n	8024156 <__ieee754_atan2f+0x26>
 80241fa:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8024260 <__ieee754_atan2f+0x130>
 80241fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8024202:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8024264 <__ieee754_atan2f+0x134>
 8024206:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802420a:	e7a4      	b.n	8024156 <__ieee754_atan2f+0x26>
 802420c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8024250 <__ieee754_atan2f+0x120>
 8024210:	e7ed      	b.n	80241ee <__ieee754_atan2f+0xbe>
 8024212:	eddf 7a15 	vldr	s15, [pc, #84]	; 8024268 <__ieee754_atan2f+0x138>
 8024216:	e7ea      	b.n	80241ee <__ieee754_atan2f+0xbe>
 8024218:	ee17 3a90 	vmov	r3, s15
 802421c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024220:	ee07 3a90 	vmov	s15, r3
 8024224:	e797      	b.n	8024156 <__ieee754_atan2f+0x26>
 8024226:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8024260 <__ieee754_atan2f+0x130>
 802422a:	ee77 7a80 	vadd.f32	s15, s15, s0
 802422e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8024264 <__ieee754_atan2f+0x134>
 8024232:	ee70 7a67 	vsub.f32	s15, s0, s15
 8024236:	e78e      	b.n	8024156 <__ieee754_atan2f+0x26>
 8024238:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8024264 <__ieee754_atan2f+0x134>
 802423c:	e78b      	b.n	8024156 <__ieee754_atan2f+0x26>
 802423e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 802426c <__ieee754_atan2f+0x13c>
 8024242:	e788      	b.n	8024156 <__ieee754_atan2f+0x26>
 8024244:	eddf 7a08 	vldr	s15, [pc, #32]	; 8024268 <__ieee754_atan2f+0x138>
 8024248:	e785      	b.n	8024156 <__ieee754_atan2f+0x26>
 802424a:	bf00      	nop
 802424c:	c0490fdb 	.word	0xc0490fdb
 8024250:	3fc90fdb 	.word	0x3fc90fdb
 8024254:	bfc90fdb 	.word	0xbfc90fdb
 8024258:	080298a0 	.word	0x080298a0
 802425c:	080298ac 	.word	0x080298ac
 8024260:	33bbbd2e 	.word	0x33bbbd2e
 8024264:	40490fdb 	.word	0x40490fdb
 8024268:	00000000 	.word	0x00000000
 802426c:	3f490fdb 	.word	0x3f490fdb

08024270 <__ieee754_powf>:
 8024270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024274:	ee10 4a90 	vmov	r4, s1
 8024278:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 802427c:	ed2d 8b02 	vpush	{d8}
 8024280:	ee10 6a10 	vmov	r6, s0
 8024284:	eeb0 8a40 	vmov.f32	s16, s0
 8024288:	eef0 8a60 	vmov.f32	s17, s1
 802428c:	d10c      	bne.n	80242a8 <__ieee754_powf+0x38>
 802428e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8024292:	0076      	lsls	r6, r6, #1
 8024294:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8024298:	f240 8296 	bls.w	80247c8 <__ieee754_powf+0x558>
 802429c:	ee38 0a28 	vadd.f32	s0, s16, s17
 80242a0:	ecbd 8b02 	vpop	{d8}
 80242a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80242a8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80242ac:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80242b0:	dcf4      	bgt.n	802429c <__ieee754_powf+0x2c>
 80242b2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80242b6:	dd08      	ble.n	80242ca <__ieee754_powf+0x5a>
 80242b8:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80242bc:	d1ee      	bne.n	802429c <__ieee754_powf+0x2c>
 80242be:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80242c2:	0064      	lsls	r4, r4, #1
 80242c4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80242c8:	e7e6      	b.n	8024298 <__ieee754_powf+0x28>
 80242ca:	2e00      	cmp	r6, #0
 80242cc:	da20      	bge.n	8024310 <__ieee754_powf+0xa0>
 80242ce:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80242d2:	da2d      	bge.n	8024330 <__ieee754_powf+0xc0>
 80242d4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80242d8:	f2c0 827f 	blt.w	80247da <__ieee754_powf+0x56a>
 80242dc:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80242e0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80242e4:	fa48 f703 	asr.w	r7, r8, r3
 80242e8:	fa07 f303 	lsl.w	r3, r7, r3
 80242ec:	4543      	cmp	r3, r8
 80242ee:	f040 8274 	bne.w	80247da <__ieee754_powf+0x56a>
 80242f2:	f007 0701 	and.w	r7, r7, #1
 80242f6:	f1c7 0702 	rsb	r7, r7, #2
 80242fa:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80242fe:	d11f      	bne.n	8024340 <__ieee754_powf+0xd0>
 8024300:	2c00      	cmp	r4, #0
 8024302:	f280 8267 	bge.w	80247d4 <__ieee754_powf+0x564>
 8024306:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802430a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 802430e:	e7c7      	b.n	80242a0 <__ieee754_powf+0x30>
 8024310:	2700      	movs	r7, #0
 8024312:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8024316:	d1f0      	bne.n	80242fa <__ieee754_powf+0x8a>
 8024318:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 802431c:	f000 8254 	beq.w	80247c8 <__ieee754_powf+0x558>
 8024320:	dd08      	ble.n	8024334 <__ieee754_powf+0xc4>
 8024322:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 802462c <__ieee754_powf+0x3bc>
 8024326:	2c00      	cmp	r4, #0
 8024328:	bfa8      	it	ge
 802432a:	eeb0 0a68 	vmovge.f32	s0, s17
 802432e:	e7b7      	b.n	80242a0 <__ieee754_powf+0x30>
 8024330:	2702      	movs	r7, #2
 8024332:	e7ee      	b.n	8024312 <__ieee754_powf+0xa2>
 8024334:	2c00      	cmp	r4, #0
 8024336:	f280 824a 	bge.w	80247ce <__ieee754_powf+0x55e>
 802433a:	eeb1 0a68 	vneg.f32	s0, s17
 802433e:	e7af      	b.n	80242a0 <__ieee754_powf+0x30>
 8024340:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8024344:	d102      	bne.n	802434c <__ieee754_powf+0xdc>
 8024346:	ee28 0a08 	vmul.f32	s0, s16, s16
 802434a:	e7a9      	b.n	80242a0 <__ieee754_powf+0x30>
 802434c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8024350:	eeb0 0a48 	vmov.f32	s0, s16
 8024354:	d107      	bne.n	8024366 <__ieee754_powf+0xf6>
 8024356:	2e00      	cmp	r6, #0
 8024358:	db05      	blt.n	8024366 <__ieee754_powf+0xf6>
 802435a:	ecbd 8b02 	vpop	{d8}
 802435e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024362:	f000 bb8f 	b.w	8024a84 <__ieee754_sqrtf>
 8024366:	f001 fd8d 	bl	8025e84 <fabsf>
 802436a:	b125      	cbz	r5, 8024376 <__ieee754_powf+0x106>
 802436c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8024370:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8024374:	d116      	bne.n	80243a4 <__ieee754_powf+0x134>
 8024376:	2c00      	cmp	r4, #0
 8024378:	bfbc      	itt	lt
 802437a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 802437e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8024382:	2e00      	cmp	r6, #0
 8024384:	da8c      	bge.n	80242a0 <__ieee754_powf+0x30>
 8024386:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 802438a:	ea55 0307 	orrs.w	r3, r5, r7
 802438e:	d104      	bne.n	802439a <__ieee754_powf+0x12a>
 8024390:	ee70 7a40 	vsub.f32	s15, s0, s0
 8024394:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8024398:	e782      	b.n	80242a0 <__ieee754_powf+0x30>
 802439a:	2f01      	cmp	r7, #1
 802439c:	d180      	bne.n	80242a0 <__ieee754_powf+0x30>
 802439e:	eeb1 0a40 	vneg.f32	s0, s0
 80243a2:	e77d      	b.n	80242a0 <__ieee754_powf+0x30>
 80243a4:	0ff0      	lsrs	r0, r6, #31
 80243a6:	3801      	subs	r0, #1
 80243a8:	ea57 0300 	orrs.w	r3, r7, r0
 80243ac:	d104      	bne.n	80243b8 <__ieee754_powf+0x148>
 80243ae:	ee38 8a48 	vsub.f32	s16, s16, s16
 80243b2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80243b6:	e773      	b.n	80242a0 <__ieee754_powf+0x30>
 80243b8:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80243bc:	dd74      	ble.n	80244a8 <__ieee754_powf+0x238>
 80243be:	4b9c      	ldr	r3, [pc, #624]	; (8024630 <__ieee754_powf+0x3c0>)
 80243c0:	429d      	cmp	r5, r3
 80243c2:	dc08      	bgt.n	80243d6 <__ieee754_powf+0x166>
 80243c4:	2c00      	cmp	r4, #0
 80243c6:	da0b      	bge.n	80243e0 <__ieee754_powf+0x170>
 80243c8:	2000      	movs	r0, #0
 80243ca:	ecbd 8b02 	vpop	{d8}
 80243ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80243d2:	f001 bb6d 	b.w	8025ab0 <__math_oflowf>
 80243d6:	4b97      	ldr	r3, [pc, #604]	; (8024634 <__ieee754_powf+0x3c4>)
 80243d8:	429d      	cmp	r5, r3
 80243da:	dd08      	ble.n	80243ee <__ieee754_powf+0x17e>
 80243dc:	2c00      	cmp	r4, #0
 80243de:	dcf3      	bgt.n	80243c8 <__ieee754_powf+0x158>
 80243e0:	2000      	movs	r0, #0
 80243e2:	ecbd 8b02 	vpop	{d8}
 80243e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80243ea:	f001 bb5b 	b.w	8025aa4 <__math_uflowf>
 80243ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80243f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80243f6:	eddf 6a90 	vldr	s13, [pc, #576]	; 8024638 <__ieee754_powf+0x3c8>
 80243fa:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80243fe:	eee0 6a67 	vfms.f32	s13, s0, s15
 8024402:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8024406:	eee6 7ac0 	vfms.f32	s15, s13, s0
 802440a:	ee20 7a00 	vmul.f32	s14, s0, s0
 802440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024412:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 802463c <__ieee754_powf+0x3cc>
 8024416:	ee67 7a67 	vnmul.f32	s15, s14, s15
 802441a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8024640 <__ieee754_powf+0x3d0>
 802441e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8024422:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8024644 <__ieee754_powf+0x3d4>
 8024426:	eef0 6a67 	vmov.f32	s13, s15
 802442a:	eee0 6a07 	vfma.f32	s13, s0, s14
 802442e:	ee16 3a90 	vmov	r3, s13
 8024432:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8024436:	f023 030f 	bic.w	r3, r3, #15
 802443a:	ee00 3a90 	vmov	s1, r3
 802443e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8024442:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8024446:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 802444a:	f024 040f 	bic.w	r4, r4, #15
 802444e:	ee07 4a10 	vmov	s14, r4
 8024452:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8024456:	ee38 7ac7 	vsub.f32	s14, s17, s14
 802445a:	ee07 3a90 	vmov	s15, r3
 802445e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8024462:	3f01      	subs	r7, #1
 8024464:	ea57 0200 	orrs.w	r2, r7, r0
 8024468:	ee07 4a10 	vmov	s14, r4
 802446c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024470:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8024474:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8024478:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 802447c:	ee17 4a10 	vmov	r4, s14
 8024480:	bf08      	it	eq
 8024482:	eeb0 8a40 	vmoveq.f32	s16, s0
 8024486:	2c00      	cmp	r4, #0
 8024488:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802448c:	f340 817e 	ble.w	802478c <__ieee754_powf+0x51c>
 8024490:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8024494:	f340 80f8 	ble.w	8024688 <__ieee754_powf+0x418>
 8024498:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802449c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244a0:	bf4c      	ite	mi
 80244a2:	2001      	movmi	r0, #1
 80244a4:	2000      	movpl	r0, #0
 80244a6:	e790      	b.n	80243ca <__ieee754_powf+0x15a>
 80244a8:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80244ac:	bf01      	itttt	eq
 80244ae:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8024648 <__ieee754_powf+0x3d8>
 80244b2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80244b6:	f06f 0217 	mvneq.w	r2, #23
 80244ba:	ee17 5a90 	vmoveq	r5, s15
 80244be:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80244c2:	bf18      	it	ne
 80244c4:	2200      	movne	r2, #0
 80244c6:	3b7f      	subs	r3, #127	; 0x7f
 80244c8:	4413      	add	r3, r2
 80244ca:	4a60      	ldr	r2, [pc, #384]	; (802464c <__ieee754_powf+0x3dc>)
 80244cc:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80244d0:	4295      	cmp	r5, r2
 80244d2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80244d6:	dd06      	ble.n	80244e6 <__ieee754_powf+0x276>
 80244d8:	4a5d      	ldr	r2, [pc, #372]	; (8024650 <__ieee754_powf+0x3e0>)
 80244da:	4295      	cmp	r5, r2
 80244dc:	f340 80a4 	ble.w	8024628 <__ieee754_powf+0x3b8>
 80244e0:	3301      	adds	r3, #1
 80244e2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80244e6:	2500      	movs	r5, #0
 80244e8:	4a5a      	ldr	r2, [pc, #360]	; (8024654 <__ieee754_powf+0x3e4>)
 80244ea:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80244ee:	ee07 1a90 	vmov	s15, r1
 80244f2:	ed92 7a00 	vldr	s14, [r2]
 80244f6:	4a58      	ldr	r2, [pc, #352]	; (8024658 <__ieee754_powf+0x3e8>)
 80244f8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80244fc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8024500:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8024504:	1049      	asrs	r1, r1, #1
 8024506:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 802450a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 802450e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8024512:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8024516:	ee06 1a10 	vmov	s12, r1
 802451a:	ee65 4a26 	vmul.f32	s9, s10, s13
 802451e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8024522:	ee14 6a90 	vmov	r6, s9
 8024526:	4016      	ands	r6, r2
 8024528:	ee05 6a90 	vmov	s11, r6
 802452c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8024530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024534:	ed9f 7a49 	vldr	s14, [pc, #292]	; 802465c <__ieee754_powf+0x3ec>
 8024538:	eea5 5ae7 	vfms.f32	s10, s11, s15
 802453c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8024540:	ee25 6a26 	vmul.f32	s12, s10, s13
 8024544:	eddf 6a46 	vldr	s13, [pc, #280]	; 8024660 <__ieee754_powf+0x3f0>
 8024548:	eea7 7aa6 	vfma.f32	s14, s15, s13
 802454c:	eddf 6a45 	vldr	s13, [pc, #276]	; 8024664 <__ieee754_powf+0x3f4>
 8024550:	eee7 6a27 	vfma.f32	s13, s14, s15
 8024554:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8024638 <__ieee754_powf+0x3c8>
 8024558:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802455c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8024668 <__ieee754_powf+0x3f8>
 8024560:	eee7 6a27 	vfma.f32	s13, s14, s15
 8024564:	ed9f 7a41 	vldr	s14, [pc, #260]	; 802466c <__ieee754_powf+0x3fc>
 8024568:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802456c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8024570:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8024574:	ee66 6a86 	vmul.f32	s13, s13, s12
 8024578:	eee5 6a07 	vfma.f32	s13, s10, s14
 802457c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8024580:	eef0 7a45 	vmov.f32	s15, s10
 8024584:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8024588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802458c:	ee17 1a90 	vmov	r1, s15
 8024590:	4011      	ands	r1, r2
 8024592:	ee07 1a90 	vmov	s15, r1
 8024596:	ee37 7ac5 	vsub.f32	s14, s15, s10
 802459a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 802459e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80245a2:	ee27 7a24 	vmul.f32	s14, s14, s9
 80245a6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80245aa:	eeb0 6a47 	vmov.f32	s12, s14
 80245ae:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80245b2:	ee16 1a10 	vmov	r1, s12
 80245b6:	4011      	ands	r1, r2
 80245b8:	ee06 1a90 	vmov	s13, r1
 80245bc:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80245c0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8024670 <__ieee754_powf+0x400>
 80245c4:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8024674 <__ieee754_powf+0x404>
 80245c8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80245cc:	ee06 1a10 	vmov	s12, r1
 80245d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80245d4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8024678 <__ieee754_powf+0x408>
 80245d8:	4928      	ldr	r1, [pc, #160]	; (802467c <__ieee754_powf+0x40c>)
 80245da:	eea6 7a27 	vfma.f32	s14, s12, s15
 80245de:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80245e2:	edd1 7a00 	vldr	s15, [r1]
 80245e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80245ea:	ee07 3a90 	vmov	s15, r3
 80245ee:	4b24      	ldr	r3, [pc, #144]	; (8024680 <__ieee754_powf+0x410>)
 80245f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80245f4:	eef0 7a47 	vmov.f32	s15, s14
 80245f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80245fc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8024600:	edd5 0a00 	vldr	s1, [r5]
 8024604:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8024608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802460c:	ee17 3a90 	vmov	r3, s15
 8024610:	4013      	ands	r3, r2
 8024612:	ee07 3a90 	vmov	s15, r3
 8024616:	ee77 6ae6 	vsub.f32	s13, s15, s13
 802461a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 802461e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8024622:	ee77 7a66 	vsub.f32	s15, s14, s13
 8024626:	e70e      	b.n	8024446 <__ieee754_powf+0x1d6>
 8024628:	2501      	movs	r5, #1
 802462a:	e75d      	b.n	80244e8 <__ieee754_powf+0x278>
 802462c:	00000000 	.word	0x00000000
 8024630:	3f7ffff3 	.word	0x3f7ffff3
 8024634:	3f800007 	.word	0x3f800007
 8024638:	3eaaaaab 	.word	0x3eaaaaab
 802463c:	3fb8aa3b 	.word	0x3fb8aa3b
 8024640:	36eca570 	.word	0x36eca570
 8024644:	3fb8aa00 	.word	0x3fb8aa00
 8024648:	4b800000 	.word	0x4b800000
 802464c:	001cc471 	.word	0x001cc471
 8024650:	005db3d6 	.word	0x005db3d6
 8024654:	080298b8 	.word	0x080298b8
 8024658:	fffff000 	.word	0xfffff000
 802465c:	3e6c3255 	.word	0x3e6c3255
 8024660:	3e53f142 	.word	0x3e53f142
 8024664:	3e8ba305 	.word	0x3e8ba305
 8024668:	3edb6db7 	.word	0x3edb6db7
 802466c:	3f19999a 	.word	0x3f19999a
 8024670:	3f76384f 	.word	0x3f76384f
 8024674:	3f763800 	.word	0x3f763800
 8024678:	369dc3a0 	.word	0x369dc3a0
 802467c:	080298c8 	.word	0x080298c8
 8024680:	080298c0 	.word	0x080298c0
 8024684:	3338aa3c 	.word	0x3338aa3c
 8024688:	f040 8095 	bne.w	80247b6 <__ieee754_powf+0x546>
 802468c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8024684 <__ieee754_powf+0x414>
 8024690:	ee37 7a67 	vsub.f32	s14, s14, s15
 8024694:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8024698:	eef4 6ac7 	vcmpe.f32	s13, s14
 802469c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246a0:	f73f aefa 	bgt.w	8024498 <__ieee754_powf+0x228>
 80246a4:	15db      	asrs	r3, r3, #23
 80246a6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80246aa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80246ae:	4103      	asrs	r3, r0
 80246b0:	4423      	add	r3, r4
 80246b2:	494b      	ldr	r1, [pc, #300]	; (80247e0 <__ieee754_powf+0x570>)
 80246b4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80246b8:	3a7f      	subs	r2, #127	; 0x7f
 80246ba:	4111      	asrs	r1, r2
 80246bc:	ea23 0101 	bic.w	r1, r3, r1
 80246c0:	ee07 1a10 	vmov	s14, r1
 80246c4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80246c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80246cc:	f1c2 0217 	rsb	r2, r2, #23
 80246d0:	4110      	asrs	r0, r2
 80246d2:	2c00      	cmp	r4, #0
 80246d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80246d8:	bfb8      	it	lt
 80246da:	4240      	neglt	r0, r0
 80246dc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80246e0:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80247e4 <__ieee754_powf+0x574>
 80246e4:	eddf 6a40 	vldr	s13, [pc, #256]	; 80247e8 <__ieee754_powf+0x578>
 80246e8:	ee17 3a10 	vmov	r3, s14
 80246ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80246f0:	f023 030f 	bic.w	r3, r3, #15
 80246f4:	ee07 3a10 	vmov	s14, r3
 80246f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80246fc:	ee27 0a00 	vmul.f32	s0, s14, s0
 8024700:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8024704:	eddf 7a39 	vldr	s15, [pc, #228]	; 80247ec <__ieee754_powf+0x57c>
 8024708:	eea0 0aa7 	vfma.f32	s0, s1, s15
 802470c:	eef0 7a40 	vmov.f32	s15, s0
 8024710:	eee7 7a26 	vfma.f32	s15, s14, s13
 8024714:	eeb0 6a67 	vmov.f32	s12, s15
 8024718:	eea7 6a66 	vfms.f32	s12, s14, s13
 802471c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8024720:	ee30 0a46 	vsub.f32	s0, s0, s12
 8024724:	eddf 6a32 	vldr	s13, [pc, #200]	; 80247f0 <__ieee754_powf+0x580>
 8024728:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80247f4 <__ieee754_powf+0x584>
 802472c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8024730:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80247f8 <__ieee754_powf+0x588>
 8024734:	eea6 6a87 	vfma.f32	s12, s13, s14
 8024738:	eddf 6a30 	vldr	s13, [pc, #192]	; 80247fc <__ieee754_powf+0x58c>
 802473c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8024740:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8024800 <__ieee754_powf+0x590>
 8024744:	eea6 6a87 	vfma.f32	s12, s13, s14
 8024748:	eef0 6a67 	vmov.f32	s13, s15
 802474c:	eee6 6a47 	vfms.f32	s13, s12, s14
 8024750:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8024754:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8024758:	ee76 6ac7 	vsub.f32	s13, s13, s14
 802475c:	eea7 0a80 	vfma.f32	s0, s15, s0
 8024760:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8024764:	ee37 0a40 	vsub.f32	s0, s14, s0
 8024768:	ee70 7a67 	vsub.f32	s15, s0, s15
 802476c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024770:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024774:	ee10 3a10 	vmov	r3, s0
 8024778:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 802477c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8024780:	da1f      	bge.n	80247c2 <__ieee754_powf+0x552>
 8024782:	f001 fbdb 	bl	8025f3c <scalbnf>
 8024786:	ee20 0a08 	vmul.f32	s0, s0, s16
 802478a:	e589      	b.n	80242a0 <__ieee754_powf+0x30>
 802478c:	4a1d      	ldr	r2, [pc, #116]	; (8024804 <__ieee754_powf+0x594>)
 802478e:	4293      	cmp	r3, r2
 8024790:	dd07      	ble.n	80247a2 <__ieee754_powf+0x532>
 8024792:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8024796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802479a:	bf4c      	ite	mi
 802479c:	2001      	movmi	r0, #1
 802479e:	2000      	movpl	r0, #0
 80247a0:	e61f      	b.n	80243e2 <__ieee754_powf+0x172>
 80247a2:	d108      	bne.n	80247b6 <__ieee754_powf+0x546>
 80247a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80247a8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80247ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247b0:	f6ff af78 	blt.w	80246a4 <__ieee754_powf+0x434>
 80247b4:	e7ed      	b.n	8024792 <__ieee754_powf+0x522>
 80247b6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80247ba:	f73f af73 	bgt.w	80246a4 <__ieee754_powf+0x434>
 80247be:	2000      	movs	r0, #0
 80247c0:	e78c      	b.n	80246dc <__ieee754_powf+0x46c>
 80247c2:	ee00 3a10 	vmov	s0, r3
 80247c6:	e7de      	b.n	8024786 <__ieee754_powf+0x516>
 80247c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80247cc:	e568      	b.n	80242a0 <__ieee754_powf+0x30>
 80247ce:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8024808 <__ieee754_powf+0x598>
 80247d2:	e565      	b.n	80242a0 <__ieee754_powf+0x30>
 80247d4:	eeb0 0a48 	vmov.f32	s0, s16
 80247d8:	e562      	b.n	80242a0 <__ieee754_powf+0x30>
 80247da:	2700      	movs	r7, #0
 80247dc:	e58d      	b.n	80242fa <__ieee754_powf+0x8a>
 80247de:	bf00      	nop
 80247e0:	007fffff 	.word	0x007fffff
 80247e4:	35bfbe8c 	.word	0x35bfbe8c
 80247e8:	3f317200 	.word	0x3f317200
 80247ec:	3f317218 	.word	0x3f317218
 80247f0:	b5ddea0e 	.word	0xb5ddea0e
 80247f4:	3331bb4c 	.word	0x3331bb4c
 80247f8:	388ab355 	.word	0x388ab355
 80247fc:	bb360b61 	.word	0xbb360b61
 8024800:	3e2aaaab 	.word	0x3e2aaaab
 8024804:	43160000 	.word	0x43160000
 8024808:	00000000 	.word	0x00000000

0802480c <__ieee754_rem_pio2f>:
 802480c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802480e:	ee10 6a10 	vmov	r6, s0
 8024812:	4b8e      	ldr	r3, [pc, #568]	; (8024a4c <__ieee754_rem_pio2f+0x240>)
 8024814:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8024818:	429d      	cmp	r5, r3
 802481a:	b087      	sub	sp, #28
 802481c:	eef0 7a40 	vmov.f32	s15, s0
 8024820:	4604      	mov	r4, r0
 8024822:	dc05      	bgt.n	8024830 <__ieee754_rem_pio2f+0x24>
 8024824:	2300      	movs	r3, #0
 8024826:	ed80 0a00 	vstr	s0, [r0]
 802482a:	6043      	str	r3, [r0, #4]
 802482c:	2000      	movs	r0, #0
 802482e:	e01a      	b.n	8024866 <__ieee754_rem_pio2f+0x5a>
 8024830:	4b87      	ldr	r3, [pc, #540]	; (8024a50 <__ieee754_rem_pio2f+0x244>)
 8024832:	429d      	cmp	r5, r3
 8024834:	dc46      	bgt.n	80248c4 <__ieee754_rem_pio2f+0xb8>
 8024836:	2e00      	cmp	r6, #0
 8024838:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8024a54 <__ieee754_rem_pio2f+0x248>
 802483c:	4b86      	ldr	r3, [pc, #536]	; (8024a58 <__ieee754_rem_pio2f+0x24c>)
 802483e:	f025 050f 	bic.w	r5, r5, #15
 8024842:	dd1f      	ble.n	8024884 <__ieee754_rem_pio2f+0x78>
 8024844:	429d      	cmp	r5, r3
 8024846:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802484a:	d00e      	beq.n	802486a <__ieee754_rem_pio2f+0x5e>
 802484c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8024a5c <__ieee754_rem_pio2f+0x250>
 8024850:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8024854:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8024858:	ed80 0a00 	vstr	s0, [r0]
 802485c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024860:	2001      	movs	r0, #1
 8024862:	edc4 7a01 	vstr	s15, [r4, #4]
 8024866:	b007      	add	sp, #28
 8024868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802486a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8024a60 <__ieee754_rem_pio2f+0x254>
 802486e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8024a64 <__ieee754_rem_pio2f+0x258>
 8024872:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8024876:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802487a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802487e:	edc0 6a00 	vstr	s13, [r0]
 8024882:	e7eb      	b.n	802485c <__ieee754_rem_pio2f+0x50>
 8024884:	429d      	cmp	r5, r3
 8024886:	ee77 7a80 	vadd.f32	s15, s15, s0
 802488a:	d00e      	beq.n	80248aa <__ieee754_rem_pio2f+0x9e>
 802488c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8024a5c <__ieee754_rem_pio2f+0x250>
 8024890:	ee37 0a87 	vadd.f32	s0, s15, s14
 8024894:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8024898:	ed80 0a00 	vstr	s0, [r0]
 802489c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80248a0:	f04f 30ff 	mov.w	r0, #4294967295
 80248a4:	edc4 7a01 	vstr	s15, [r4, #4]
 80248a8:	e7dd      	b.n	8024866 <__ieee754_rem_pio2f+0x5a>
 80248aa:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8024a60 <__ieee754_rem_pio2f+0x254>
 80248ae:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8024a64 <__ieee754_rem_pio2f+0x258>
 80248b2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80248b6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80248ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80248be:	edc0 6a00 	vstr	s13, [r0]
 80248c2:	e7eb      	b.n	802489c <__ieee754_rem_pio2f+0x90>
 80248c4:	4b68      	ldr	r3, [pc, #416]	; (8024a68 <__ieee754_rem_pio2f+0x25c>)
 80248c6:	429d      	cmp	r5, r3
 80248c8:	dc72      	bgt.n	80249b0 <__ieee754_rem_pio2f+0x1a4>
 80248ca:	f001 fadb 	bl	8025e84 <fabsf>
 80248ce:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8024a6c <__ieee754_rem_pio2f+0x260>
 80248d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80248d6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80248da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80248de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80248e2:	ee17 0a90 	vmov	r0, s15
 80248e6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8024a54 <__ieee754_rem_pio2f+0x248>
 80248ea:	eea7 0a67 	vfms.f32	s0, s14, s15
 80248ee:	281f      	cmp	r0, #31
 80248f0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8024a5c <__ieee754_rem_pio2f+0x250>
 80248f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80248f8:	eeb1 6a47 	vneg.f32	s12, s14
 80248fc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8024900:	ee16 2a90 	vmov	r2, s13
 8024904:	dc1c      	bgt.n	8024940 <__ieee754_rem_pio2f+0x134>
 8024906:	495a      	ldr	r1, [pc, #360]	; (8024a70 <__ieee754_rem_pio2f+0x264>)
 8024908:	1e47      	subs	r7, r0, #1
 802490a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802490e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024912:	428b      	cmp	r3, r1
 8024914:	d014      	beq.n	8024940 <__ieee754_rem_pio2f+0x134>
 8024916:	6022      	str	r2, [r4, #0]
 8024918:	ed94 7a00 	vldr	s14, [r4]
 802491c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8024920:	2e00      	cmp	r6, #0
 8024922:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024926:	ed84 0a01 	vstr	s0, [r4, #4]
 802492a:	da9c      	bge.n	8024866 <__ieee754_rem_pio2f+0x5a>
 802492c:	eeb1 7a47 	vneg.f32	s14, s14
 8024930:	eeb1 0a40 	vneg.f32	s0, s0
 8024934:	ed84 7a00 	vstr	s14, [r4]
 8024938:	ed84 0a01 	vstr	s0, [r4, #4]
 802493c:	4240      	negs	r0, r0
 802493e:	e792      	b.n	8024866 <__ieee754_rem_pio2f+0x5a>
 8024940:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8024944:	15eb      	asrs	r3, r5, #23
 8024946:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 802494a:	2d08      	cmp	r5, #8
 802494c:	dde3      	ble.n	8024916 <__ieee754_rem_pio2f+0x10a>
 802494e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8024a60 <__ieee754_rem_pio2f+0x254>
 8024952:	eddf 5a44 	vldr	s11, [pc, #272]	; 8024a64 <__ieee754_rem_pio2f+0x258>
 8024956:	eef0 6a40 	vmov.f32	s13, s0
 802495a:	eee6 6a27 	vfma.f32	s13, s12, s15
 802495e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8024962:	eea6 0a27 	vfma.f32	s0, s12, s15
 8024966:	eef0 7a40 	vmov.f32	s15, s0
 802496a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802496e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8024972:	ee15 2a90 	vmov	r2, s11
 8024976:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802497a:	1a5b      	subs	r3, r3, r1
 802497c:	2b19      	cmp	r3, #25
 802497e:	dc04      	bgt.n	802498a <__ieee754_rem_pio2f+0x17e>
 8024980:	edc4 5a00 	vstr	s11, [r4]
 8024984:	eeb0 0a66 	vmov.f32	s0, s13
 8024988:	e7c6      	b.n	8024918 <__ieee754_rem_pio2f+0x10c>
 802498a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8024a74 <__ieee754_rem_pio2f+0x268>
 802498e:	eeb0 0a66 	vmov.f32	s0, s13
 8024992:	eea6 0a25 	vfma.f32	s0, s12, s11
 8024996:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802499a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8024a78 <__ieee754_rem_pio2f+0x26c>
 802499e:	eee6 7a25 	vfma.f32	s15, s12, s11
 80249a2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80249a6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80249aa:	ed84 7a00 	vstr	s14, [r4]
 80249ae:	e7b3      	b.n	8024918 <__ieee754_rem_pio2f+0x10c>
 80249b0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80249b4:	db06      	blt.n	80249c4 <__ieee754_rem_pio2f+0x1b8>
 80249b6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80249ba:	edc0 7a01 	vstr	s15, [r0, #4]
 80249be:	edc0 7a00 	vstr	s15, [r0]
 80249c2:	e733      	b.n	802482c <__ieee754_rem_pio2f+0x20>
 80249c4:	15ea      	asrs	r2, r5, #23
 80249c6:	3a86      	subs	r2, #134	; 0x86
 80249c8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80249cc:	ee07 3a90 	vmov	s15, r3
 80249d0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80249d4:	eddf 6a29 	vldr	s13, [pc, #164]	; 8024a7c <__ieee754_rem_pio2f+0x270>
 80249d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80249dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80249e0:	ed8d 7a03 	vstr	s14, [sp, #12]
 80249e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80249e8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80249ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80249f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80249f4:	ed8d 7a04 	vstr	s14, [sp, #16]
 80249f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80249fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8024a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a04:	edcd 7a05 	vstr	s15, [sp, #20]
 8024a08:	d11e      	bne.n	8024a48 <__ieee754_rem_pio2f+0x23c>
 8024a0a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8024a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a12:	bf14      	ite	ne
 8024a14:	2302      	movne	r3, #2
 8024a16:	2301      	moveq	r3, #1
 8024a18:	4919      	ldr	r1, [pc, #100]	; (8024a80 <__ieee754_rem_pio2f+0x274>)
 8024a1a:	9101      	str	r1, [sp, #4]
 8024a1c:	2102      	movs	r1, #2
 8024a1e:	9100      	str	r1, [sp, #0]
 8024a20:	a803      	add	r0, sp, #12
 8024a22:	4621      	mov	r1, r4
 8024a24:	f000 fd6a 	bl	80254fc <__kernel_rem_pio2f>
 8024a28:	2e00      	cmp	r6, #0
 8024a2a:	f6bf af1c 	bge.w	8024866 <__ieee754_rem_pio2f+0x5a>
 8024a2e:	edd4 7a00 	vldr	s15, [r4]
 8024a32:	eef1 7a67 	vneg.f32	s15, s15
 8024a36:	edc4 7a00 	vstr	s15, [r4]
 8024a3a:	edd4 7a01 	vldr	s15, [r4, #4]
 8024a3e:	eef1 7a67 	vneg.f32	s15, s15
 8024a42:	edc4 7a01 	vstr	s15, [r4, #4]
 8024a46:	e779      	b.n	802493c <__ieee754_rem_pio2f+0x130>
 8024a48:	2303      	movs	r3, #3
 8024a4a:	e7e5      	b.n	8024a18 <__ieee754_rem_pio2f+0x20c>
 8024a4c:	3f490fd8 	.word	0x3f490fd8
 8024a50:	4016cbe3 	.word	0x4016cbe3
 8024a54:	3fc90f80 	.word	0x3fc90f80
 8024a58:	3fc90fd0 	.word	0x3fc90fd0
 8024a5c:	37354443 	.word	0x37354443
 8024a60:	37354400 	.word	0x37354400
 8024a64:	2e85a308 	.word	0x2e85a308
 8024a68:	43490f80 	.word	0x43490f80
 8024a6c:	3f22f984 	.word	0x3f22f984
 8024a70:	080298d0 	.word	0x080298d0
 8024a74:	2e85a300 	.word	0x2e85a300
 8024a78:	248d3132 	.word	0x248d3132
 8024a7c:	43800000 	.word	0x43800000
 8024a80:	08029950 	.word	0x08029950

08024a84 <__ieee754_sqrtf>:
 8024a84:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8024a88:	4770      	bx	lr
 8024a8a:	0000      	movs	r0, r0
 8024a8c:	0000      	movs	r0, r0
	...

08024a90 <__kernel_cos>:
 8024a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a94:	ec57 6b10 	vmov	r6, r7, d0
 8024a98:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8024a9c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8024aa0:	ed8d 1b00 	vstr	d1, [sp]
 8024aa4:	da07      	bge.n	8024ab6 <__kernel_cos+0x26>
 8024aa6:	ee10 0a10 	vmov	r0, s0
 8024aaa:	4639      	mov	r1, r7
 8024aac:	f7db fffc 	bl	8000aa8 <__aeabi_d2iz>
 8024ab0:	2800      	cmp	r0, #0
 8024ab2:	f000 8088 	beq.w	8024bc6 <__kernel_cos+0x136>
 8024ab6:	4632      	mov	r2, r6
 8024ab8:	463b      	mov	r3, r7
 8024aba:	4630      	mov	r0, r6
 8024abc:	4639      	mov	r1, r7
 8024abe:	f7db fd59 	bl	8000574 <__aeabi_dmul>
 8024ac2:	4b51      	ldr	r3, [pc, #324]	; (8024c08 <__kernel_cos+0x178>)
 8024ac4:	2200      	movs	r2, #0
 8024ac6:	4604      	mov	r4, r0
 8024ac8:	460d      	mov	r5, r1
 8024aca:	f7db fd53 	bl	8000574 <__aeabi_dmul>
 8024ace:	a340      	add	r3, pc, #256	; (adr r3, 8024bd0 <__kernel_cos+0x140>)
 8024ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ad4:	4682      	mov	sl, r0
 8024ad6:	468b      	mov	fp, r1
 8024ad8:	4620      	mov	r0, r4
 8024ada:	4629      	mov	r1, r5
 8024adc:	f7db fd4a 	bl	8000574 <__aeabi_dmul>
 8024ae0:	a33d      	add	r3, pc, #244	; (adr r3, 8024bd8 <__kernel_cos+0x148>)
 8024ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ae6:	f7db fb8f 	bl	8000208 <__adddf3>
 8024aea:	4622      	mov	r2, r4
 8024aec:	462b      	mov	r3, r5
 8024aee:	f7db fd41 	bl	8000574 <__aeabi_dmul>
 8024af2:	a33b      	add	r3, pc, #236	; (adr r3, 8024be0 <__kernel_cos+0x150>)
 8024af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024af8:	f7db fb84 	bl	8000204 <__aeabi_dsub>
 8024afc:	4622      	mov	r2, r4
 8024afe:	462b      	mov	r3, r5
 8024b00:	f7db fd38 	bl	8000574 <__aeabi_dmul>
 8024b04:	a338      	add	r3, pc, #224	; (adr r3, 8024be8 <__kernel_cos+0x158>)
 8024b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b0a:	f7db fb7d 	bl	8000208 <__adddf3>
 8024b0e:	4622      	mov	r2, r4
 8024b10:	462b      	mov	r3, r5
 8024b12:	f7db fd2f 	bl	8000574 <__aeabi_dmul>
 8024b16:	a336      	add	r3, pc, #216	; (adr r3, 8024bf0 <__kernel_cos+0x160>)
 8024b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b1c:	f7db fb72 	bl	8000204 <__aeabi_dsub>
 8024b20:	4622      	mov	r2, r4
 8024b22:	462b      	mov	r3, r5
 8024b24:	f7db fd26 	bl	8000574 <__aeabi_dmul>
 8024b28:	a333      	add	r3, pc, #204	; (adr r3, 8024bf8 <__kernel_cos+0x168>)
 8024b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b2e:	f7db fb6b 	bl	8000208 <__adddf3>
 8024b32:	4622      	mov	r2, r4
 8024b34:	462b      	mov	r3, r5
 8024b36:	f7db fd1d 	bl	8000574 <__aeabi_dmul>
 8024b3a:	4622      	mov	r2, r4
 8024b3c:	462b      	mov	r3, r5
 8024b3e:	f7db fd19 	bl	8000574 <__aeabi_dmul>
 8024b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024b46:	4604      	mov	r4, r0
 8024b48:	460d      	mov	r5, r1
 8024b4a:	4630      	mov	r0, r6
 8024b4c:	4639      	mov	r1, r7
 8024b4e:	f7db fd11 	bl	8000574 <__aeabi_dmul>
 8024b52:	460b      	mov	r3, r1
 8024b54:	4602      	mov	r2, r0
 8024b56:	4629      	mov	r1, r5
 8024b58:	4620      	mov	r0, r4
 8024b5a:	f7db fb53 	bl	8000204 <__aeabi_dsub>
 8024b5e:	4b2b      	ldr	r3, [pc, #172]	; (8024c0c <__kernel_cos+0x17c>)
 8024b60:	4598      	cmp	r8, r3
 8024b62:	4606      	mov	r6, r0
 8024b64:	460f      	mov	r7, r1
 8024b66:	dc10      	bgt.n	8024b8a <__kernel_cos+0xfa>
 8024b68:	4602      	mov	r2, r0
 8024b6a:	460b      	mov	r3, r1
 8024b6c:	4650      	mov	r0, sl
 8024b6e:	4659      	mov	r1, fp
 8024b70:	f7db fb48 	bl	8000204 <__aeabi_dsub>
 8024b74:	460b      	mov	r3, r1
 8024b76:	4926      	ldr	r1, [pc, #152]	; (8024c10 <__kernel_cos+0x180>)
 8024b78:	4602      	mov	r2, r0
 8024b7a:	2000      	movs	r0, #0
 8024b7c:	f7db fb42 	bl	8000204 <__aeabi_dsub>
 8024b80:	ec41 0b10 	vmov	d0, r0, r1
 8024b84:	b003      	add	sp, #12
 8024b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b8a:	4b22      	ldr	r3, [pc, #136]	; (8024c14 <__kernel_cos+0x184>)
 8024b8c:	4920      	ldr	r1, [pc, #128]	; (8024c10 <__kernel_cos+0x180>)
 8024b8e:	4598      	cmp	r8, r3
 8024b90:	bfcc      	ite	gt
 8024b92:	4d21      	ldrgt	r5, [pc, #132]	; (8024c18 <__kernel_cos+0x188>)
 8024b94:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8024b98:	2400      	movs	r4, #0
 8024b9a:	4622      	mov	r2, r4
 8024b9c:	462b      	mov	r3, r5
 8024b9e:	2000      	movs	r0, #0
 8024ba0:	f7db fb30 	bl	8000204 <__aeabi_dsub>
 8024ba4:	4622      	mov	r2, r4
 8024ba6:	4680      	mov	r8, r0
 8024ba8:	4689      	mov	r9, r1
 8024baa:	462b      	mov	r3, r5
 8024bac:	4650      	mov	r0, sl
 8024bae:	4659      	mov	r1, fp
 8024bb0:	f7db fb28 	bl	8000204 <__aeabi_dsub>
 8024bb4:	4632      	mov	r2, r6
 8024bb6:	463b      	mov	r3, r7
 8024bb8:	f7db fb24 	bl	8000204 <__aeabi_dsub>
 8024bbc:	4602      	mov	r2, r0
 8024bbe:	460b      	mov	r3, r1
 8024bc0:	4640      	mov	r0, r8
 8024bc2:	4649      	mov	r1, r9
 8024bc4:	e7da      	b.n	8024b7c <__kernel_cos+0xec>
 8024bc6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8024c00 <__kernel_cos+0x170>
 8024bca:	e7db      	b.n	8024b84 <__kernel_cos+0xf4>
 8024bcc:	f3af 8000 	nop.w
 8024bd0:	be8838d4 	.word	0xbe8838d4
 8024bd4:	bda8fae9 	.word	0xbda8fae9
 8024bd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8024bdc:	3e21ee9e 	.word	0x3e21ee9e
 8024be0:	809c52ad 	.word	0x809c52ad
 8024be4:	3e927e4f 	.word	0x3e927e4f
 8024be8:	19cb1590 	.word	0x19cb1590
 8024bec:	3efa01a0 	.word	0x3efa01a0
 8024bf0:	16c15177 	.word	0x16c15177
 8024bf4:	3f56c16c 	.word	0x3f56c16c
 8024bf8:	5555554c 	.word	0x5555554c
 8024bfc:	3fa55555 	.word	0x3fa55555
 8024c00:	00000000 	.word	0x00000000
 8024c04:	3ff00000 	.word	0x3ff00000
 8024c08:	3fe00000 	.word	0x3fe00000
 8024c0c:	3fd33332 	.word	0x3fd33332
 8024c10:	3ff00000 	.word	0x3ff00000
 8024c14:	3fe90000 	.word	0x3fe90000
 8024c18:	3fd20000 	.word	0x3fd20000
 8024c1c:	00000000 	.word	0x00000000

08024c20 <__kernel_rem_pio2>:
 8024c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c24:	ed2d 8b02 	vpush	{d8}
 8024c28:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8024c2c:	f112 0f14 	cmn.w	r2, #20
 8024c30:	9308      	str	r3, [sp, #32]
 8024c32:	9101      	str	r1, [sp, #4]
 8024c34:	4bc4      	ldr	r3, [pc, #784]	; (8024f48 <__kernel_rem_pio2+0x328>)
 8024c36:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8024c38:	900b      	str	r0, [sp, #44]	; 0x2c
 8024c3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8024c3e:	9302      	str	r3, [sp, #8]
 8024c40:	9b08      	ldr	r3, [sp, #32]
 8024c42:	f103 33ff 	add.w	r3, r3, #4294967295
 8024c46:	bfa8      	it	ge
 8024c48:	1ed4      	subge	r4, r2, #3
 8024c4a:	9306      	str	r3, [sp, #24]
 8024c4c:	bfb2      	itee	lt
 8024c4e:	2400      	movlt	r4, #0
 8024c50:	2318      	movge	r3, #24
 8024c52:	fb94 f4f3 	sdivge	r4, r4, r3
 8024c56:	f06f 0317 	mvn.w	r3, #23
 8024c5a:	fb04 3303 	mla	r3, r4, r3, r3
 8024c5e:	eb03 0a02 	add.w	sl, r3, r2
 8024c62:	9b02      	ldr	r3, [sp, #8]
 8024c64:	9a06      	ldr	r2, [sp, #24]
 8024c66:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8024f38 <__kernel_rem_pio2+0x318>
 8024c6a:	eb03 0802 	add.w	r8, r3, r2
 8024c6e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024c70:	1aa7      	subs	r7, r4, r2
 8024c72:	ae22      	add	r6, sp, #136	; 0x88
 8024c74:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8024c78:	2500      	movs	r5, #0
 8024c7a:	4545      	cmp	r5, r8
 8024c7c:	dd13      	ble.n	8024ca6 <__kernel_rem_pio2+0x86>
 8024c7e:	9b08      	ldr	r3, [sp, #32]
 8024c80:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8024f38 <__kernel_rem_pio2+0x318>
 8024c84:	aa22      	add	r2, sp, #136	; 0x88
 8024c86:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8024c8a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8024c8e:	f04f 0800 	mov.w	r8, #0
 8024c92:	9b02      	ldr	r3, [sp, #8]
 8024c94:	4598      	cmp	r8, r3
 8024c96:	dc2f      	bgt.n	8024cf8 <__kernel_rem_pio2+0xd8>
 8024c98:	ed8d 8b04 	vstr	d8, [sp, #16]
 8024c9c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8024ca0:	462f      	mov	r7, r5
 8024ca2:	2600      	movs	r6, #0
 8024ca4:	e01b      	b.n	8024cde <__kernel_rem_pio2+0xbe>
 8024ca6:	42ef      	cmn	r7, r5
 8024ca8:	d407      	bmi.n	8024cba <__kernel_rem_pio2+0x9a>
 8024caa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8024cae:	f7db fbf7 	bl	80004a0 <__aeabi_i2d>
 8024cb2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8024cb6:	3501      	adds	r5, #1
 8024cb8:	e7df      	b.n	8024c7a <__kernel_rem_pio2+0x5a>
 8024cba:	ec51 0b18 	vmov	r0, r1, d8
 8024cbe:	e7f8      	b.n	8024cb2 <__kernel_rem_pio2+0x92>
 8024cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024cc4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8024cc8:	f7db fc54 	bl	8000574 <__aeabi_dmul>
 8024ccc:	4602      	mov	r2, r0
 8024cce:	460b      	mov	r3, r1
 8024cd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024cd4:	f7db fa98 	bl	8000208 <__adddf3>
 8024cd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024cdc:	3601      	adds	r6, #1
 8024cde:	9b06      	ldr	r3, [sp, #24]
 8024ce0:	429e      	cmp	r6, r3
 8024ce2:	f1a7 0708 	sub.w	r7, r7, #8
 8024ce6:	ddeb      	ble.n	8024cc0 <__kernel_rem_pio2+0xa0>
 8024ce8:	ed9d 7b04 	vldr	d7, [sp, #16]
 8024cec:	f108 0801 	add.w	r8, r8, #1
 8024cf0:	ecab 7b02 	vstmia	fp!, {d7}
 8024cf4:	3508      	adds	r5, #8
 8024cf6:	e7cc      	b.n	8024c92 <__kernel_rem_pio2+0x72>
 8024cf8:	9b02      	ldr	r3, [sp, #8]
 8024cfa:	aa0e      	add	r2, sp, #56	; 0x38
 8024cfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024d00:	930d      	str	r3, [sp, #52]	; 0x34
 8024d02:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024d04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024d08:	9c02      	ldr	r4, [sp, #8]
 8024d0a:	930c      	str	r3, [sp, #48]	; 0x30
 8024d0c:	00e3      	lsls	r3, r4, #3
 8024d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8024d10:	ab9a      	add	r3, sp, #616	; 0x268
 8024d12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8024d16:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8024d1a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8024d1e:	ab72      	add	r3, sp, #456	; 0x1c8
 8024d20:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8024d24:	46c3      	mov	fp, r8
 8024d26:	46a1      	mov	r9, r4
 8024d28:	f1b9 0f00 	cmp.w	r9, #0
 8024d2c:	f1a5 0508 	sub.w	r5, r5, #8
 8024d30:	dc77      	bgt.n	8024e22 <__kernel_rem_pio2+0x202>
 8024d32:	ec47 6b10 	vmov	d0, r6, r7
 8024d36:	4650      	mov	r0, sl
 8024d38:	f000 ff4a 	bl	8025bd0 <scalbn>
 8024d3c:	ec57 6b10 	vmov	r6, r7, d0
 8024d40:	2200      	movs	r2, #0
 8024d42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8024d46:	ee10 0a10 	vmov	r0, s0
 8024d4a:	4639      	mov	r1, r7
 8024d4c:	f7db fc12 	bl	8000574 <__aeabi_dmul>
 8024d50:	ec41 0b10 	vmov	d0, r0, r1
 8024d54:	f000 febc 	bl	8025ad0 <floor>
 8024d58:	4b7c      	ldr	r3, [pc, #496]	; (8024f4c <__kernel_rem_pio2+0x32c>)
 8024d5a:	ec51 0b10 	vmov	r0, r1, d0
 8024d5e:	2200      	movs	r2, #0
 8024d60:	f7db fc08 	bl	8000574 <__aeabi_dmul>
 8024d64:	4602      	mov	r2, r0
 8024d66:	460b      	mov	r3, r1
 8024d68:	4630      	mov	r0, r6
 8024d6a:	4639      	mov	r1, r7
 8024d6c:	f7db fa4a 	bl	8000204 <__aeabi_dsub>
 8024d70:	460f      	mov	r7, r1
 8024d72:	4606      	mov	r6, r0
 8024d74:	f7db fe98 	bl	8000aa8 <__aeabi_d2iz>
 8024d78:	9004      	str	r0, [sp, #16]
 8024d7a:	f7db fb91 	bl	80004a0 <__aeabi_i2d>
 8024d7e:	4602      	mov	r2, r0
 8024d80:	460b      	mov	r3, r1
 8024d82:	4630      	mov	r0, r6
 8024d84:	4639      	mov	r1, r7
 8024d86:	f7db fa3d 	bl	8000204 <__aeabi_dsub>
 8024d8a:	f1ba 0f00 	cmp.w	sl, #0
 8024d8e:	4606      	mov	r6, r0
 8024d90:	460f      	mov	r7, r1
 8024d92:	dd6d      	ble.n	8024e70 <__kernel_rem_pio2+0x250>
 8024d94:	1e62      	subs	r2, r4, #1
 8024d96:	ab0e      	add	r3, sp, #56	; 0x38
 8024d98:	9d04      	ldr	r5, [sp, #16]
 8024d9a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024d9e:	f1ca 0118 	rsb	r1, sl, #24
 8024da2:	fa40 f301 	asr.w	r3, r0, r1
 8024da6:	441d      	add	r5, r3
 8024da8:	408b      	lsls	r3, r1
 8024daa:	1ac0      	subs	r0, r0, r3
 8024dac:	ab0e      	add	r3, sp, #56	; 0x38
 8024dae:	9504      	str	r5, [sp, #16]
 8024db0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8024db4:	f1ca 0317 	rsb	r3, sl, #23
 8024db8:	fa40 fb03 	asr.w	fp, r0, r3
 8024dbc:	f1bb 0f00 	cmp.w	fp, #0
 8024dc0:	dd65      	ble.n	8024e8e <__kernel_rem_pio2+0x26e>
 8024dc2:	9b04      	ldr	r3, [sp, #16]
 8024dc4:	2200      	movs	r2, #0
 8024dc6:	3301      	adds	r3, #1
 8024dc8:	9304      	str	r3, [sp, #16]
 8024dca:	4615      	mov	r5, r2
 8024dcc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8024dd0:	4294      	cmp	r4, r2
 8024dd2:	f300 809c 	bgt.w	8024f0e <__kernel_rem_pio2+0x2ee>
 8024dd6:	f1ba 0f00 	cmp.w	sl, #0
 8024dda:	dd07      	ble.n	8024dec <__kernel_rem_pio2+0x1cc>
 8024ddc:	f1ba 0f01 	cmp.w	sl, #1
 8024de0:	f000 80c0 	beq.w	8024f64 <__kernel_rem_pio2+0x344>
 8024de4:	f1ba 0f02 	cmp.w	sl, #2
 8024de8:	f000 80c6 	beq.w	8024f78 <__kernel_rem_pio2+0x358>
 8024dec:	f1bb 0f02 	cmp.w	fp, #2
 8024df0:	d14d      	bne.n	8024e8e <__kernel_rem_pio2+0x26e>
 8024df2:	4632      	mov	r2, r6
 8024df4:	463b      	mov	r3, r7
 8024df6:	4956      	ldr	r1, [pc, #344]	; (8024f50 <__kernel_rem_pio2+0x330>)
 8024df8:	2000      	movs	r0, #0
 8024dfa:	f7db fa03 	bl	8000204 <__aeabi_dsub>
 8024dfe:	4606      	mov	r6, r0
 8024e00:	460f      	mov	r7, r1
 8024e02:	2d00      	cmp	r5, #0
 8024e04:	d043      	beq.n	8024e8e <__kernel_rem_pio2+0x26e>
 8024e06:	4650      	mov	r0, sl
 8024e08:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8024f40 <__kernel_rem_pio2+0x320>
 8024e0c:	f000 fee0 	bl	8025bd0 <scalbn>
 8024e10:	4630      	mov	r0, r6
 8024e12:	4639      	mov	r1, r7
 8024e14:	ec53 2b10 	vmov	r2, r3, d0
 8024e18:	f7db f9f4 	bl	8000204 <__aeabi_dsub>
 8024e1c:	4606      	mov	r6, r0
 8024e1e:	460f      	mov	r7, r1
 8024e20:	e035      	b.n	8024e8e <__kernel_rem_pio2+0x26e>
 8024e22:	4b4c      	ldr	r3, [pc, #304]	; (8024f54 <__kernel_rem_pio2+0x334>)
 8024e24:	2200      	movs	r2, #0
 8024e26:	4630      	mov	r0, r6
 8024e28:	4639      	mov	r1, r7
 8024e2a:	f7db fba3 	bl	8000574 <__aeabi_dmul>
 8024e2e:	f7db fe3b 	bl	8000aa8 <__aeabi_d2iz>
 8024e32:	f7db fb35 	bl	80004a0 <__aeabi_i2d>
 8024e36:	4602      	mov	r2, r0
 8024e38:	460b      	mov	r3, r1
 8024e3a:	ec43 2b18 	vmov	d8, r2, r3
 8024e3e:	4b46      	ldr	r3, [pc, #280]	; (8024f58 <__kernel_rem_pio2+0x338>)
 8024e40:	2200      	movs	r2, #0
 8024e42:	f7db fb97 	bl	8000574 <__aeabi_dmul>
 8024e46:	4602      	mov	r2, r0
 8024e48:	460b      	mov	r3, r1
 8024e4a:	4630      	mov	r0, r6
 8024e4c:	4639      	mov	r1, r7
 8024e4e:	f7db f9d9 	bl	8000204 <__aeabi_dsub>
 8024e52:	f7db fe29 	bl	8000aa8 <__aeabi_d2iz>
 8024e56:	e9d5 2300 	ldrd	r2, r3, [r5]
 8024e5a:	f84b 0b04 	str.w	r0, [fp], #4
 8024e5e:	ec51 0b18 	vmov	r0, r1, d8
 8024e62:	f7db f9d1 	bl	8000208 <__adddf3>
 8024e66:	f109 39ff 	add.w	r9, r9, #4294967295
 8024e6a:	4606      	mov	r6, r0
 8024e6c:	460f      	mov	r7, r1
 8024e6e:	e75b      	b.n	8024d28 <__kernel_rem_pio2+0x108>
 8024e70:	d106      	bne.n	8024e80 <__kernel_rem_pio2+0x260>
 8024e72:	1e63      	subs	r3, r4, #1
 8024e74:	aa0e      	add	r2, sp, #56	; 0x38
 8024e76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8024e7a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8024e7e:	e79d      	b.n	8024dbc <__kernel_rem_pio2+0x19c>
 8024e80:	4b36      	ldr	r3, [pc, #216]	; (8024f5c <__kernel_rem_pio2+0x33c>)
 8024e82:	2200      	movs	r2, #0
 8024e84:	f7db fdfc 	bl	8000a80 <__aeabi_dcmpge>
 8024e88:	2800      	cmp	r0, #0
 8024e8a:	d13d      	bne.n	8024f08 <__kernel_rem_pio2+0x2e8>
 8024e8c:	4683      	mov	fp, r0
 8024e8e:	2200      	movs	r2, #0
 8024e90:	2300      	movs	r3, #0
 8024e92:	4630      	mov	r0, r6
 8024e94:	4639      	mov	r1, r7
 8024e96:	f7db fdd5 	bl	8000a44 <__aeabi_dcmpeq>
 8024e9a:	2800      	cmp	r0, #0
 8024e9c:	f000 80c0 	beq.w	8025020 <__kernel_rem_pio2+0x400>
 8024ea0:	1e65      	subs	r5, r4, #1
 8024ea2:	462b      	mov	r3, r5
 8024ea4:	2200      	movs	r2, #0
 8024ea6:	9902      	ldr	r1, [sp, #8]
 8024ea8:	428b      	cmp	r3, r1
 8024eaa:	da6c      	bge.n	8024f86 <__kernel_rem_pio2+0x366>
 8024eac:	2a00      	cmp	r2, #0
 8024eae:	f000 8089 	beq.w	8024fc4 <__kernel_rem_pio2+0x3a4>
 8024eb2:	ab0e      	add	r3, sp, #56	; 0x38
 8024eb4:	f1aa 0a18 	sub.w	sl, sl, #24
 8024eb8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024ebc:	2b00      	cmp	r3, #0
 8024ebe:	f000 80ad 	beq.w	802501c <__kernel_rem_pio2+0x3fc>
 8024ec2:	4650      	mov	r0, sl
 8024ec4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8024f40 <__kernel_rem_pio2+0x320>
 8024ec8:	f000 fe82 	bl	8025bd0 <scalbn>
 8024ecc:	ab9a      	add	r3, sp, #616	; 0x268
 8024ece:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024ed2:	ec57 6b10 	vmov	r6, r7, d0
 8024ed6:	00ec      	lsls	r4, r5, #3
 8024ed8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8024edc:	46aa      	mov	sl, r5
 8024ede:	f1ba 0f00 	cmp.w	sl, #0
 8024ee2:	f280 80d6 	bge.w	8025092 <__kernel_rem_pio2+0x472>
 8024ee6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8024f38 <__kernel_rem_pio2+0x318>
 8024eea:	462e      	mov	r6, r5
 8024eec:	2e00      	cmp	r6, #0
 8024eee:	f2c0 8104 	blt.w	80250fa <__kernel_rem_pio2+0x4da>
 8024ef2:	ab72      	add	r3, sp, #456	; 0x1c8
 8024ef4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8024ef8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8024f60 <__kernel_rem_pio2+0x340>
 8024efc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8024f00:	f04f 0800 	mov.w	r8, #0
 8024f04:	1baf      	subs	r7, r5, r6
 8024f06:	e0ea      	b.n	80250de <__kernel_rem_pio2+0x4be>
 8024f08:	f04f 0b02 	mov.w	fp, #2
 8024f0c:	e759      	b.n	8024dc2 <__kernel_rem_pio2+0x1a2>
 8024f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8024f12:	b955      	cbnz	r5, 8024f2a <__kernel_rem_pio2+0x30a>
 8024f14:	b123      	cbz	r3, 8024f20 <__kernel_rem_pio2+0x300>
 8024f16:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8024f1a:	f8c8 3000 	str.w	r3, [r8]
 8024f1e:	2301      	movs	r3, #1
 8024f20:	3201      	adds	r2, #1
 8024f22:	f108 0804 	add.w	r8, r8, #4
 8024f26:	461d      	mov	r5, r3
 8024f28:	e752      	b.n	8024dd0 <__kernel_rem_pio2+0x1b0>
 8024f2a:	1acb      	subs	r3, r1, r3
 8024f2c:	f8c8 3000 	str.w	r3, [r8]
 8024f30:	462b      	mov	r3, r5
 8024f32:	e7f5      	b.n	8024f20 <__kernel_rem_pio2+0x300>
 8024f34:	f3af 8000 	nop.w
	...
 8024f44:	3ff00000 	.word	0x3ff00000
 8024f48:	08029ca8 	.word	0x08029ca8
 8024f4c:	40200000 	.word	0x40200000
 8024f50:	3ff00000 	.word	0x3ff00000
 8024f54:	3e700000 	.word	0x3e700000
 8024f58:	41700000 	.word	0x41700000
 8024f5c:	3fe00000 	.word	0x3fe00000
 8024f60:	08029c68 	.word	0x08029c68
 8024f64:	1e62      	subs	r2, r4, #1
 8024f66:	ab0e      	add	r3, sp, #56	; 0x38
 8024f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024f6c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8024f70:	a90e      	add	r1, sp, #56	; 0x38
 8024f72:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8024f76:	e739      	b.n	8024dec <__kernel_rem_pio2+0x1cc>
 8024f78:	1e62      	subs	r2, r4, #1
 8024f7a:	ab0e      	add	r3, sp, #56	; 0x38
 8024f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024f80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8024f84:	e7f4      	b.n	8024f70 <__kernel_rem_pio2+0x350>
 8024f86:	a90e      	add	r1, sp, #56	; 0x38
 8024f88:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8024f8c:	3b01      	subs	r3, #1
 8024f8e:	430a      	orrs	r2, r1
 8024f90:	e789      	b.n	8024ea6 <__kernel_rem_pio2+0x286>
 8024f92:	3301      	adds	r3, #1
 8024f94:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8024f98:	2900      	cmp	r1, #0
 8024f9a:	d0fa      	beq.n	8024f92 <__kernel_rem_pio2+0x372>
 8024f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024f9e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8024fa2:	446a      	add	r2, sp
 8024fa4:	3a98      	subs	r2, #152	; 0x98
 8024fa6:	920a      	str	r2, [sp, #40]	; 0x28
 8024fa8:	9a08      	ldr	r2, [sp, #32]
 8024faa:	18e3      	adds	r3, r4, r3
 8024fac:	18a5      	adds	r5, r4, r2
 8024fae:	aa22      	add	r2, sp, #136	; 0x88
 8024fb0:	f104 0801 	add.w	r8, r4, #1
 8024fb4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8024fb8:	9304      	str	r3, [sp, #16]
 8024fba:	9b04      	ldr	r3, [sp, #16]
 8024fbc:	4543      	cmp	r3, r8
 8024fbe:	da04      	bge.n	8024fca <__kernel_rem_pio2+0x3aa>
 8024fc0:	461c      	mov	r4, r3
 8024fc2:	e6a3      	b.n	8024d0c <__kernel_rem_pio2+0xec>
 8024fc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024fc6:	2301      	movs	r3, #1
 8024fc8:	e7e4      	b.n	8024f94 <__kernel_rem_pio2+0x374>
 8024fca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024fcc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8024fd0:	f7db fa66 	bl	80004a0 <__aeabi_i2d>
 8024fd4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8024fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024fda:	46ab      	mov	fp, r5
 8024fdc:	461c      	mov	r4, r3
 8024fde:	f04f 0900 	mov.w	r9, #0
 8024fe2:	2600      	movs	r6, #0
 8024fe4:	2700      	movs	r7, #0
 8024fe6:	9b06      	ldr	r3, [sp, #24]
 8024fe8:	4599      	cmp	r9, r3
 8024fea:	dd06      	ble.n	8024ffa <__kernel_rem_pio2+0x3da>
 8024fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024fee:	e8e3 6702 	strd	r6, r7, [r3], #8
 8024ff2:	f108 0801 	add.w	r8, r8, #1
 8024ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8024ff8:	e7df      	b.n	8024fba <__kernel_rem_pio2+0x39a>
 8024ffa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8024ffe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8025002:	f7db fab7 	bl	8000574 <__aeabi_dmul>
 8025006:	4602      	mov	r2, r0
 8025008:	460b      	mov	r3, r1
 802500a:	4630      	mov	r0, r6
 802500c:	4639      	mov	r1, r7
 802500e:	f7db f8fb 	bl	8000208 <__adddf3>
 8025012:	f109 0901 	add.w	r9, r9, #1
 8025016:	4606      	mov	r6, r0
 8025018:	460f      	mov	r7, r1
 802501a:	e7e4      	b.n	8024fe6 <__kernel_rem_pio2+0x3c6>
 802501c:	3d01      	subs	r5, #1
 802501e:	e748      	b.n	8024eb2 <__kernel_rem_pio2+0x292>
 8025020:	ec47 6b10 	vmov	d0, r6, r7
 8025024:	f1ca 0000 	rsb	r0, sl, #0
 8025028:	f000 fdd2 	bl	8025bd0 <scalbn>
 802502c:	ec57 6b10 	vmov	r6, r7, d0
 8025030:	4ba0      	ldr	r3, [pc, #640]	; (80252b4 <__kernel_rem_pio2+0x694>)
 8025032:	ee10 0a10 	vmov	r0, s0
 8025036:	2200      	movs	r2, #0
 8025038:	4639      	mov	r1, r7
 802503a:	f7db fd21 	bl	8000a80 <__aeabi_dcmpge>
 802503e:	b1f8      	cbz	r0, 8025080 <__kernel_rem_pio2+0x460>
 8025040:	4b9d      	ldr	r3, [pc, #628]	; (80252b8 <__kernel_rem_pio2+0x698>)
 8025042:	2200      	movs	r2, #0
 8025044:	4630      	mov	r0, r6
 8025046:	4639      	mov	r1, r7
 8025048:	f7db fa94 	bl	8000574 <__aeabi_dmul>
 802504c:	f7db fd2c 	bl	8000aa8 <__aeabi_d2iz>
 8025050:	4680      	mov	r8, r0
 8025052:	f7db fa25 	bl	80004a0 <__aeabi_i2d>
 8025056:	4b97      	ldr	r3, [pc, #604]	; (80252b4 <__kernel_rem_pio2+0x694>)
 8025058:	2200      	movs	r2, #0
 802505a:	f7db fa8b 	bl	8000574 <__aeabi_dmul>
 802505e:	460b      	mov	r3, r1
 8025060:	4602      	mov	r2, r0
 8025062:	4639      	mov	r1, r7
 8025064:	4630      	mov	r0, r6
 8025066:	f7db f8cd 	bl	8000204 <__aeabi_dsub>
 802506a:	f7db fd1d 	bl	8000aa8 <__aeabi_d2iz>
 802506e:	1c65      	adds	r5, r4, #1
 8025070:	ab0e      	add	r3, sp, #56	; 0x38
 8025072:	f10a 0a18 	add.w	sl, sl, #24
 8025076:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 802507a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 802507e:	e720      	b.n	8024ec2 <__kernel_rem_pio2+0x2a2>
 8025080:	4630      	mov	r0, r6
 8025082:	4639      	mov	r1, r7
 8025084:	f7db fd10 	bl	8000aa8 <__aeabi_d2iz>
 8025088:	ab0e      	add	r3, sp, #56	; 0x38
 802508a:	4625      	mov	r5, r4
 802508c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8025090:	e717      	b.n	8024ec2 <__kernel_rem_pio2+0x2a2>
 8025092:	ab0e      	add	r3, sp, #56	; 0x38
 8025094:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8025098:	f7db fa02 	bl	80004a0 <__aeabi_i2d>
 802509c:	4632      	mov	r2, r6
 802509e:	463b      	mov	r3, r7
 80250a0:	f7db fa68 	bl	8000574 <__aeabi_dmul>
 80250a4:	4b84      	ldr	r3, [pc, #528]	; (80252b8 <__kernel_rem_pio2+0x698>)
 80250a6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80250aa:	2200      	movs	r2, #0
 80250ac:	4630      	mov	r0, r6
 80250ae:	4639      	mov	r1, r7
 80250b0:	f7db fa60 	bl	8000574 <__aeabi_dmul>
 80250b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80250b8:	4606      	mov	r6, r0
 80250ba:	460f      	mov	r7, r1
 80250bc:	e70f      	b.n	8024ede <__kernel_rem_pio2+0x2be>
 80250be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80250c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80250c6:	f7db fa55 	bl	8000574 <__aeabi_dmul>
 80250ca:	4602      	mov	r2, r0
 80250cc:	460b      	mov	r3, r1
 80250ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80250d2:	f7db f899 	bl	8000208 <__adddf3>
 80250d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80250da:	f108 0801 	add.w	r8, r8, #1
 80250de:	9b02      	ldr	r3, [sp, #8]
 80250e0:	4598      	cmp	r8, r3
 80250e2:	dc01      	bgt.n	80250e8 <__kernel_rem_pio2+0x4c8>
 80250e4:	45b8      	cmp	r8, r7
 80250e6:	ddea      	ble.n	80250be <__kernel_rem_pio2+0x49e>
 80250e8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80250ec:	ab4a      	add	r3, sp, #296	; 0x128
 80250ee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80250f2:	ed87 7b00 	vstr	d7, [r7]
 80250f6:	3e01      	subs	r6, #1
 80250f8:	e6f8      	b.n	8024eec <__kernel_rem_pio2+0x2cc>
 80250fa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80250fc:	2b02      	cmp	r3, #2
 80250fe:	dc0b      	bgt.n	8025118 <__kernel_rem_pio2+0x4f8>
 8025100:	2b00      	cmp	r3, #0
 8025102:	dc35      	bgt.n	8025170 <__kernel_rem_pio2+0x550>
 8025104:	d059      	beq.n	80251ba <__kernel_rem_pio2+0x59a>
 8025106:	9b04      	ldr	r3, [sp, #16]
 8025108:	f003 0007 	and.w	r0, r3, #7
 802510c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8025110:	ecbd 8b02 	vpop	{d8}
 8025114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025118:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 802511a:	2b03      	cmp	r3, #3
 802511c:	d1f3      	bne.n	8025106 <__kernel_rem_pio2+0x4e6>
 802511e:	ab4a      	add	r3, sp, #296	; 0x128
 8025120:	4423      	add	r3, r4
 8025122:	9306      	str	r3, [sp, #24]
 8025124:	461c      	mov	r4, r3
 8025126:	469a      	mov	sl, r3
 8025128:	9502      	str	r5, [sp, #8]
 802512a:	9b02      	ldr	r3, [sp, #8]
 802512c:	2b00      	cmp	r3, #0
 802512e:	f1aa 0a08 	sub.w	sl, sl, #8
 8025132:	dc6b      	bgt.n	802520c <__kernel_rem_pio2+0x5ec>
 8025134:	46aa      	mov	sl, r5
 8025136:	f1ba 0f01 	cmp.w	sl, #1
 802513a:	f1a4 0408 	sub.w	r4, r4, #8
 802513e:	f300 8085 	bgt.w	802524c <__kernel_rem_pio2+0x62c>
 8025142:	9c06      	ldr	r4, [sp, #24]
 8025144:	2000      	movs	r0, #0
 8025146:	3408      	adds	r4, #8
 8025148:	2100      	movs	r1, #0
 802514a:	2d01      	cmp	r5, #1
 802514c:	f300 809d 	bgt.w	802528a <__kernel_rem_pio2+0x66a>
 8025150:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8025154:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8025158:	f1bb 0f00 	cmp.w	fp, #0
 802515c:	f040 809b 	bne.w	8025296 <__kernel_rem_pio2+0x676>
 8025160:	9b01      	ldr	r3, [sp, #4]
 8025162:	e9c3 5600 	strd	r5, r6, [r3]
 8025166:	e9c3 7802 	strd	r7, r8, [r3, #8]
 802516a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 802516e:	e7ca      	b.n	8025106 <__kernel_rem_pio2+0x4e6>
 8025170:	3408      	adds	r4, #8
 8025172:	ab4a      	add	r3, sp, #296	; 0x128
 8025174:	441c      	add	r4, r3
 8025176:	462e      	mov	r6, r5
 8025178:	2000      	movs	r0, #0
 802517a:	2100      	movs	r1, #0
 802517c:	2e00      	cmp	r6, #0
 802517e:	da36      	bge.n	80251ee <__kernel_rem_pio2+0x5ce>
 8025180:	f1bb 0f00 	cmp.w	fp, #0
 8025184:	d039      	beq.n	80251fa <__kernel_rem_pio2+0x5da>
 8025186:	4602      	mov	r2, r0
 8025188:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802518c:	9c01      	ldr	r4, [sp, #4]
 802518e:	e9c4 2300 	strd	r2, r3, [r4]
 8025192:	4602      	mov	r2, r0
 8025194:	460b      	mov	r3, r1
 8025196:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 802519a:	f7db f833 	bl	8000204 <__aeabi_dsub>
 802519e:	ae4c      	add	r6, sp, #304	; 0x130
 80251a0:	2401      	movs	r4, #1
 80251a2:	42a5      	cmp	r5, r4
 80251a4:	da2c      	bge.n	8025200 <__kernel_rem_pio2+0x5e0>
 80251a6:	f1bb 0f00 	cmp.w	fp, #0
 80251aa:	d002      	beq.n	80251b2 <__kernel_rem_pio2+0x592>
 80251ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80251b0:	4619      	mov	r1, r3
 80251b2:	9b01      	ldr	r3, [sp, #4]
 80251b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80251b8:	e7a5      	b.n	8025106 <__kernel_rem_pio2+0x4e6>
 80251ba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80251be:	eb0d 0403 	add.w	r4, sp, r3
 80251c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80251c6:	2000      	movs	r0, #0
 80251c8:	2100      	movs	r1, #0
 80251ca:	2d00      	cmp	r5, #0
 80251cc:	da09      	bge.n	80251e2 <__kernel_rem_pio2+0x5c2>
 80251ce:	f1bb 0f00 	cmp.w	fp, #0
 80251d2:	d002      	beq.n	80251da <__kernel_rem_pio2+0x5ba>
 80251d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80251d8:	4619      	mov	r1, r3
 80251da:	9b01      	ldr	r3, [sp, #4]
 80251dc:	e9c3 0100 	strd	r0, r1, [r3]
 80251e0:	e791      	b.n	8025106 <__kernel_rem_pio2+0x4e6>
 80251e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80251e6:	f7db f80f 	bl	8000208 <__adddf3>
 80251ea:	3d01      	subs	r5, #1
 80251ec:	e7ed      	b.n	80251ca <__kernel_rem_pio2+0x5aa>
 80251ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80251f2:	f7db f809 	bl	8000208 <__adddf3>
 80251f6:	3e01      	subs	r6, #1
 80251f8:	e7c0      	b.n	802517c <__kernel_rem_pio2+0x55c>
 80251fa:	4602      	mov	r2, r0
 80251fc:	460b      	mov	r3, r1
 80251fe:	e7c5      	b.n	802518c <__kernel_rem_pio2+0x56c>
 8025200:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8025204:	f7db f800 	bl	8000208 <__adddf3>
 8025208:	3401      	adds	r4, #1
 802520a:	e7ca      	b.n	80251a2 <__kernel_rem_pio2+0x582>
 802520c:	e9da 8900 	ldrd	r8, r9, [sl]
 8025210:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8025214:	9b02      	ldr	r3, [sp, #8]
 8025216:	3b01      	subs	r3, #1
 8025218:	9302      	str	r3, [sp, #8]
 802521a:	4632      	mov	r2, r6
 802521c:	463b      	mov	r3, r7
 802521e:	4640      	mov	r0, r8
 8025220:	4649      	mov	r1, r9
 8025222:	f7da fff1 	bl	8000208 <__adddf3>
 8025226:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802522a:	4602      	mov	r2, r0
 802522c:	460b      	mov	r3, r1
 802522e:	4640      	mov	r0, r8
 8025230:	4649      	mov	r1, r9
 8025232:	f7da ffe7 	bl	8000204 <__aeabi_dsub>
 8025236:	4632      	mov	r2, r6
 8025238:	463b      	mov	r3, r7
 802523a:	f7da ffe5 	bl	8000208 <__adddf3>
 802523e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8025242:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8025246:	ed8a 7b00 	vstr	d7, [sl]
 802524a:	e76e      	b.n	802512a <__kernel_rem_pio2+0x50a>
 802524c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8025250:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8025254:	4640      	mov	r0, r8
 8025256:	4632      	mov	r2, r6
 8025258:	463b      	mov	r3, r7
 802525a:	4649      	mov	r1, r9
 802525c:	f7da ffd4 	bl	8000208 <__adddf3>
 8025260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025264:	4602      	mov	r2, r0
 8025266:	460b      	mov	r3, r1
 8025268:	4640      	mov	r0, r8
 802526a:	4649      	mov	r1, r9
 802526c:	f7da ffca 	bl	8000204 <__aeabi_dsub>
 8025270:	4632      	mov	r2, r6
 8025272:	463b      	mov	r3, r7
 8025274:	f7da ffc8 	bl	8000208 <__adddf3>
 8025278:	ed9d 7b02 	vldr	d7, [sp, #8]
 802527c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8025280:	ed84 7b00 	vstr	d7, [r4]
 8025284:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025288:	e755      	b.n	8025136 <__kernel_rem_pio2+0x516>
 802528a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802528e:	f7da ffbb 	bl	8000208 <__adddf3>
 8025292:	3d01      	subs	r5, #1
 8025294:	e759      	b.n	802514a <__kernel_rem_pio2+0x52a>
 8025296:	9b01      	ldr	r3, [sp, #4]
 8025298:	9a01      	ldr	r2, [sp, #4]
 802529a:	601d      	str	r5, [r3, #0]
 802529c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80252a0:	605c      	str	r4, [r3, #4]
 80252a2:	609f      	str	r7, [r3, #8]
 80252a4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80252a8:	60d3      	str	r3, [r2, #12]
 80252aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80252ae:	6110      	str	r0, [r2, #16]
 80252b0:	6153      	str	r3, [r2, #20]
 80252b2:	e728      	b.n	8025106 <__kernel_rem_pio2+0x4e6>
 80252b4:	41700000 	.word	0x41700000
 80252b8:	3e700000 	.word	0x3e700000
 80252bc:	00000000 	.word	0x00000000

080252c0 <__kernel_sin>:
 80252c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252c4:	ed2d 8b04 	vpush	{d8-d9}
 80252c8:	eeb0 8a41 	vmov.f32	s16, s2
 80252cc:	eef0 8a61 	vmov.f32	s17, s3
 80252d0:	ec55 4b10 	vmov	r4, r5, d0
 80252d4:	b083      	sub	sp, #12
 80252d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80252da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80252de:	9001      	str	r0, [sp, #4]
 80252e0:	da06      	bge.n	80252f0 <__kernel_sin+0x30>
 80252e2:	ee10 0a10 	vmov	r0, s0
 80252e6:	4629      	mov	r1, r5
 80252e8:	f7db fbde 	bl	8000aa8 <__aeabi_d2iz>
 80252ec:	2800      	cmp	r0, #0
 80252ee:	d051      	beq.n	8025394 <__kernel_sin+0xd4>
 80252f0:	4622      	mov	r2, r4
 80252f2:	462b      	mov	r3, r5
 80252f4:	4620      	mov	r0, r4
 80252f6:	4629      	mov	r1, r5
 80252f8:	f7db f93c 	bl	8000574 <__aeabi_dmul>
 80252fc:	4682      	mov	sl, r0
 80252fe:	468b      	mov	fp, r1
 8025300:	4602      	mov	r2, r0
 8025302:	460b      	mov	r3, r1
 8025304:	4620      	mov	r0, r4
 8025306:	4629      	mov	r1, r5
 8025308:	f7db f934 	bl	8000574 <__aeabi_dmul>
 802530c:	a341      	add	r3, pc, #260	; (adr r3, 8025414 <__kernel_sin+0x154>)
 802530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025312:	4680      	mov	r8, r0
 8025314:	4689      	mov	r9, r1
 8025316:	4650      	mov	r0, sl
 8025318:	4659      	mov	r1, fp
 802531a:	f7db f92b 	bl	8000574 <__aeabi_dmul>
 802531e:	a33f      	add	r3, pc, #252	; (adr r3, 802541c <__kernel_sin+0x15c>)
 8025320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025324:	f7da ff6e 	bl	8000204 <__aeabi_dsub>
 8025328:	4652      	mov	r2, sl
 802532a:	465b      	mov	r3, fp
 802532c:	f7db f922 	bl	8000574 <__aeabi_dmul>
 8025330:	a33c      	add	r3, pc, #240	; (adr r3, 8025424 <__kernel_sin+0x164>)
 8025332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025336:	f7da ff67 	bl	8000208 <__adddf3>
 802533a:	4652      	mov	r2, sl
 802533c:	465b      	mov	r3, fp
 802533e:	f7db f919 	bl	8000574 <__aeabi_dmul>
 8025342:	a33a      	add	r3, pc, #232	; (adr r3, 802542c <__kernel_sin+0x16c>)
 8025344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025348:	f7da ff5c 	bl	8000204 <__aeabi_dsub>
 802534c:	4652      	mov	r2, sl
 802534e:	465b      	mov	r3, fp
 8025350:	f7db f910 	bl	8000574 <__aeabi_dmul>
 8025354:	a337      	add	r3, pc, #220	; (adr r3, 8025434 <__kernel_sin+0x174>)
 8025356:	e9d3 2300 	ldrd	r2, r3, [r3]
 802535a:	f7da ff55 	bl	8000208 <__adddf3>
 802535e:	9b01      	ldr	r3, [sp, #4]
 8025360:	4606      	mov	r6, r0
 8025362:	460f      	mov	r7, r1
 8025364:	b9eb      	cbnz	r3, 80253a2 <__kernel_sin+0xe2>
 8025366:	4602      	mov	r2, r0
 8025368:	460b      	mov	r3, r1
 802536a:	4650      	mov	r0, sl
 802536c:	4659      	mov	r1, fp
 802536e:	f7db f901 	bl	8000574 <__aeabi_dmul>
 8025372:	a325      	add	r3, pc, #148	; (adr r3, 8025408 <__kernel_sin+0x148>)
 8025374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025378:	f7da ff44 	bl	8000204 <__aeabi_dsub>
 802537c:	4642      	mov	r2, r8
 802537e:	464b      	mov	r3, r9
 8025380:	f7db f8f8 	bl	8000574 <__aeabi_dmul>
 8025384:	4602      	mov	r2, r0
 8025386:	460b      	mov	r3, r1
 8025388:	4620      	mov	r0, r4
 802538a:	4629      	mov	r1, r5
 802538c:	f7da ff3c 	bl	8000208 <__adddf3>
 8025390:	4604      	mov	r4, r0
 8025392:	460d      	mov	r5, r1
 8025394:	ec45 4b10 	vmov	d0, r4, r5
 8025398:	b003      	add	sp, #12
 802539a:	ecbd 8b04 	vpop	{d8-d9}
 802539e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253a2:	4b1b      	ldr	r3, [pc, #108]	; (8025410 <__kernel_sin+0x150>)
 80253a4:	ec51 0b18 	vmov	r0, r1, d8
 80253a8:	2200      	movs	r2, #0
 80253aa:	f7db f8e3 	bl	8000574 <__aeabi_dmul>
 80253ae:	4632      	mov	r2, r6
 80253b0:	ec41 0b19 	vmov	d9, r0, r1
 80253b4:	463b      	mov	r3, r7
 80253b6:	4640      	mov	r0, r8
 80253b8:	4649      	mov	r1, r9
 80253ba:	f7db f8db 	bl	8000574 <__aeabi_dmul>
 80253be:	4602      	mov	r2, r0
 80253c0:	460b      	mov	r3, r1
 80253c2:	ec51 0b19 	vmov	r0, r1, d9
 80253c6:	f7da ff1d 	bl	8000204 <__aeabi_dsub>
 80253ca:	4652      	mov	r2, sl
 80253cc:	465b      	mov	r3, fp
 80253ce:	f7db f8d1 	bl	8000574 <__aeabi_dmul>
 80253d2:	ec53 2b18 	vmov	r2, r3, d8
 80253d6:	f7da ff15 	bl	8000204 <__aeabi_dsub>
 80253da:	a30b      	add	r3, pc, #44	; (adr r3, 8025408 <__kernel_sin+0x148>)
 80253dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253e0:	4606      	mov	r6, r0
 80253e2:	460f      	mov	r7, r1
 80253e4:	4640      	mov	r0, r8
 80253e6:	4649      	mov	r1, r9
 80253e8:	f7db f8c4 	bl	8000574 <__aeabi_dmul>
 80253ec:	4602      	mov	r2, r0
 80253ee:	460b      	mov	r3, r1
 80253f0:	4630      	mov	r0, r6
 80253f2:	4639      	mov	r1, r7
 80253f4:	f7da ff08 	bl	8000208 <__adddf3>
 80253f8:	4602      	mov	r2, r0
 80253fa:	460b      	mov	r3, r1
 80253fc:	4620      	mov	r0, r4
 80253fe:	4629      	mov	r1, r5
 8025400:	f7da ff00 	bl	8000204 <__aeabi_dsub>
 8025404:	e7c4      	b.n	8025390 <__kernel_sin+0xd0>
 8025406:	bf00      	nop
 8025408:	55555549 	.word	0x55555549
 802540c:	3fc55555 	.word	0x3fc55555
 8025410:	3fe00000 	.word	0x3fe00000
 8025414:	5acfd57c 	.word	0x5acfd57c
 8025418:	3de5d93a 	.word	0x3de5d93a
 802541c:	8a2b9ceb 	.word	0x8a2b9ceb
 8025420:	3e5ae5e6 	.word	0x3e5ae5e6
 8025424:	57b1fe7d 	.word	0x57b1fe7d
 8025428:	3ec71de3 	.word	0x3ec71de3
 802542c:	19c161d5 	.word	0x19c161d5
 8025430:	3f2a01a0 	.word	0x3f2a01a0
 8025434:	1110f8a6 	.word	0x1110f8a6
 8025438:	3f811111 	.word	0x3f811111

0802543c <__kernel_cosf>:
 802543c:	ee10 3a10 	vmov	r3, s0
 8025440:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025444:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8025448:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 802544c:	da05      	bge.n	802545a <__kernel_cosf+0x1e>
 802544e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8025452:	ee17 2a90 	vmov	r2, s15
 8025456:	2a00      	cmp	r2, #0
 8025458:	d03d      	beq.n	80254d6 <__kernel_cosf+0x9a>
 802545a:	ee60 5a00 	vmul.f32	s11, s0, s0
 802545e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80254dc <__kernel_cosf+0xa0>
 8025462:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80254e0 <__kernel_cosf+0xa4>
 8025466:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80254e4 <__kernel_cosf+0xa8>
 802546a:	4a1f      	ldr	r2, [pc, #124]	; (80254e8 <__kernel_cosf+0xac>)
 802546c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8025470:	4293      	cmp	r3, r2
 8025472:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80254ec <__kernel_cosf+0xb0>
 8025476:	eee7 7a25 	vfma.f32	s15, s14, s11
 802547a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80254f0 <__kernel_cosf+0xb4>
 802547e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8025482:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80254f4 <__kernel_cosf+0xb8>
 8025486:	eee7 7a25 	vfma.f32	s15, s14, s11
 802548a:	eeb0 7a66 	vmov.f32	s14, s13
 802548e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8025492:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8025496:	ee65 7aa6 	vmul.f32	s15, s11, s13
 802549a:	ee67 6a25 	vmul.f32	s13, s14, s11
 802549e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80254a2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80254a6:	dc04      	bgt.n	80254b2 <__kernel_cosf+0x76>
 80254a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80254ac:	ee36 0a47 	vsub.f32	s0, s12, s14
 80254b0:	4770      	bx	lr
 80254b2:	4a11      	ldr	r2, [pc, #68]	; (80254f8 <__kernel_cosf+0xbc>)
 80254b4:	4293      	cmp	r3, r2
 80254b6:	bfda      	itte	le
 80254b8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80254bc:	ee06 3a90 	vmovle	s13, r3
 80254c0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80254c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80254c8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80254cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80254d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80254d4:	4770      	bx	lr
 80254d6:	eeb0 0a46 	vmov.f32	s0, s12
 80254da:	4770      	bx	lr
 80254dc:	ad47d74e 	.word	0xad47d74e
 80254e0:	310f74f6 	.word	0x310f74f6
 80254e4:	3d2aaaab 	.word	0x3d2aaaab
 80254e8:	3e999999 	.word	0x3e999999
 80254ec:	b493f27c 	.word	0xb493f27c
 80254f0:	37d00d01 	.word	0x37d00d01
 80254f4:	bab60b61 	.word	0xbab60b61
 80254f8:	3f480000 	.word	0x3f480000

080254fc <__kernel_rem_pio2f>:
 80254fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025500:	ed2d 8b04 	vpush	{d8-d9}
 8025504:	b0d9      	sub	sp, #356	; 0x164
 8025506:	4688      	mov	r8, r1
 8025508:	9002      	str	r0, [sp, #8]
 802550a:	49bb      	ldr	r1, [pc, #748]	; (80257f8 <__kernel_rem_pio2f+0x2fc>)
 802550c:	9866      	ldr	r0, [sp, #408]	; 0x198
 802550e:	9301      	str	r3, [sp, #4]
 8025510:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8025514:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8025518:	1e59      	subs	r1, r3, #1
 802551a:	1d13      	adds	r3, r2, #4
 802551c:	db27      	blt.n	802556e <__kernel_rem_pio2f+0x72>
 802551e:	f1b2 0b03 	subs.w	fp, r2, #3
 8025522:	bf48      	it	mi
 8025524:	f102 0b04 	addmi.w	fp, r2, #4
 8025528:	ea4f 00eb 	mov.w	r0, fp, asr #3
 802552c:	1c45      	adds	r5, r0, #1
 802552e:	00ec      	lsls	r4, r5, #3
 8025530:	1a47      	subs	r7, r0, r1
 8025532:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8025808 <__kernel_rem_pio2f+0x30c>
 8025536:	9403      	str	r4, [sp, #12]
 8025538:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 802553c:	eb0a 0c01 	add.w	ip, sl, r1
 8025540:	ae1c      	add	r6, sp, #112	; 0x70
 8025542:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8025546:	2400      	movs	r4, #0
 8025548:	4564      	cmp	r4, ip
 802554a:	dd12      	ble.n	8025572 <__kernel_rem_pio2f+0x76>
 802554c:	9b01      	ldr	r3, [sp, #4]
 802554e:	ac1c      	add	r4, sp, #112	; 0x70
 8025550:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8025554:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8025558:	f04f 0c00 	mov.w	ip, #0
 802555c:	45d4      	cmp	ip, sl
 802555e:	dc27      	bgt.n	80255b0 <__kernel_rem_pio2f+0xb4>
 8025560:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8025564:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8025808 <__kernel_rem_pio2f+0x30c>
 8025568:	4627      	mov	r7, r4
 802556a:	2600      	movs	r6, #0
 802556c:	e016      	b.n	802559c <__kernel_rem_pio2f+0xa0>
 802556e:	2000      	movs	r0, #0
 8025570:	e7dc      	b.n	802552c <__kernel_rem_pio2f+0x30>
 8025572:	42e7      	cmn	r7, r4
 8025574:	bf5d      	ittte	pl
 8025576:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 802557a:	ee07 3a90 	vmovpl	s15, r3
 802557e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8025582:	eef0 7a47 	vmovmi.f32	s15, s14
 8025586:	ece6 7a01 	vstmia	r6!, {s15}
 802558a:	3401      	adds	r4, #1
 802558c:	e7dc      	b.n	8025548 <__kernel_rem_pio2f+0x4c>
 802558e:	ecf9 6a01 	vldmia	r9!, {s13}
 8025592:	ed97 7a00 	vldr	s14, [r7]
 8025596:	eee6 7a87 	vfma.f32	s15, s13, s14
 802559a:	3601      	adds	r6, #1
 802559c:	428e      	cmp	r6, r1
 802559e:	f1a7 0704 	sub.w	r7, r7, #4
 80255a2:	ddf4      	ble.n	802558e <__kernel_rem_pio2f+0x92>
 80255a4:	eceb 7a01 	vstmia	fp!, {s15}
 80255a8:	f10c 0c01 	add.w	ip, ip, #1
 80255ac:	3404      	adds	r4, #4
 80255ae:	e7d5      	b.n	802555c <__kernel_rem_pio2f+0x60>
 80255b0:	ab08      	add	r3, sp, #32
 80255b2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80255b6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8025804 <__kernel_rem_pio2f+0x308>
 80255ba:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8025800 <__kernel_rem_pio2f+0x304>
 80255be:	9304      	str	r3, [sp, #16]
 80255c0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80255c4:	4656      	mov	r6, sl
 80255c6:	00b3      	lsls	r3, r6, #2
 80255c8:	9305      	str	r3, [sp, #20]
 80255ca:	ab58      	add	r3, sp, #352	; 0x160
 80255cc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80255d0:	ac08      	add	r4, sp, #32
 80255d2:	ab44      	add	r3, sp, #272	; 0x110
 80255d4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80255d8:	46a4      	mov	ip, r4
 80255da:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80255de:	4637      	mov	r7, r6
 80255e0:	2f00      	cmp	r7, #0
 80255e2:	f1a0 0004 	sub.w	r0, r0, #4
 80255e6:	dc4f      	bgt.n	8025688 <__kernel_rem_pio2f+0x18c>
 80255e8:	4628      	mov	r0, r5
 80255ea:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80255ee:	f000 fca5 	bl	8025f3c <scalbnf>
 80255f2:	eeb0 8a40 	vmov.f32	s16, s0
 80255f6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80255fa:	ee28 0a00 	vmul.f32	s0, s16, s0
 80255fe:	f000 fc55 	bl	8025eac <floorf>
 8025602:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8025606:	eea0 8a67 	vfms.f32	s16, s0, s15
 802560a:	2d00      	cmp	r5, #0
 802560c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8025610:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8025614:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8025618:	ee17 9a90 	vmov	r9, s15
 802561c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8025620:	dd44      	ble.n	80256ac <__kernel_rem_pio2f+0x1b0>
 8025622:	f106 3cff 	add.w	ip, r6, #4294967295
 8025626:	ab08      	add	r3, sp, #32
 8025628:	f1c5 0e08 	rsb	lr, r5, #8
 802562c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8025630:	fa47 f00e 	asr.w	r0, r7, lr
 8025634:	4481      	add	r9, r0
 8025636:	fa00 f00e 	lsl.w	r0, r0, lr
 802563a:	1a3f      	subs	r7, r7, r0
 802563c:	f1c5 0007 	rsb	r0, r5, #7
 8025640:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8025644:	4107      	asrs	r7, r0
 8025646:	2f00      	cmp	r7, #0
 8025648:	dd3f      	ble.n	80256ca <__kernel_rem_pio2f+0x1ce>
 802564a:	f04f 0e00 	mov.w	lr, #0
 802564e:	f109 0901 	add.w	r9, r9, #1
 8025652:	4673      	mov	r3, lr
 8025654:	4576      	cmp	r6, lr
 8025656:	dc6b      	bgt.n	8025730 <__kernel_rem_pio2f+0x234>
 8025658:	2d00      	cmp	r5, #0
 802565a:	dd04      	ble.n	8025666 <__kernel_rem_pio2f+0x16a>
 802565c:	2d01      	cmp	r5, #1
 802565e:	d078      	beq.n	8025752 <__kernel_rem_pio2f+0x256>
 8025660:	2d02      	cmp	r5, #2
 8025662:	f000 8081 	beq.w	8025768 <__kernel_rem_pio2f+0x26c>
 8025666:	2f02      	cmp	r7, #2
 8025668:	d12f      	bne.n	80256ca <__kernel_rem_pio2f+0x1ce>
 802566a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802566e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8025672:	b353      	cbz	r3, 80256ca <__kernel_rem_pio2f+0x1ce>
 8025674:	4628      	mov	r0, r5
 8025676:	e9cd 1206 	strd	r1, r2, [sp, #24]
 802567a:	f000 fc5f 	bl	8025f3c <scalbnf>
 802567e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8025682:	ee38 8a40 	vsub.f32	s16, s16, s0
 8025686:	e020      	b.n	80256ca <__kernel_rem_pio2f+0x1ce>
 8025688:	ee60 7a28 	vmul.f32	s15, s0, s17
 802568c:	3f01      	subs	r7, #1
 802568e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025696:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802569a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802569e:	ecac 0a01 	vstmia	ip!, {s0}
 80256a2:	ed90 0a00 	vldr	s0, [r0]
 80256a6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80256aa:	e799      	b.n	80255e0 <__kernel_rem_pio2f+0xe4>
 80256ac:	d105      	bne.n	80256ba <__kernel_rem_pio2f+0x1be>
 80256ae:	1e70      	subs	r0, r6, #1
 80256b0:	ab08      	add	r3, sp, #32
 80256b2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80256b6:	11ff      	asrs	r7, r7, #7
 80256b8:	e7c5      	b.n	8025646 <__kernel_rem_pio2f+0x14a>
 80256ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80256be:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80256c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80256c6:	da31      	bge.n	802572c <__kernel_rem_pio2f+0x230>
 80256c8:	2700      	movs	r7, #0
 80256ca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80256ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80256d2:	f040 809b 	bne.w	802580c <__kernel_rem_pio2f+0x310>
 80256d6:	1e74      	subs	r4, r6, #1
 80256d8:	46a4      	mov	ip, r4
 80256da:	2000      	movs	r0, #0
 80256dc:	45d4      	cmp	ip, sl
 80256de:	da4a      	bge.n	8025776 <__kernel_rem_pio2f+0x27a>
 80256e0:	2800      	cmp	r0, #0
 80256e2:	d07a      	beq.n	80257da <__kernel_rem_pio2f+0x2de>
 80256e4:	ab08      	add	r3, sp, #32
 80256e6:	3d08      	subs	r5, #8
 80256e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80256ec:	2b00      	cmp	r3, #0
 80256ee:	f000 8081 	beq.w	80257f4 <__kernel_rem_pio2f+0x2f8>
 80256f2:	4628      	mov	r0, r5
 80256f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80256f8:	00a5      	lsls	r5, r4, #2
 80256fa:	f000 fc1f 	bl	8025f3c <scalbnf>
 80256fe:	aa44      	add	r2, sp, #272	; 0x110
 8025700:	1d2b      	adds	r3, r5, #4
 8025702:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8025804 <__kernel_rem_pio2f+0x308>
 8025706:	18d1      	adds	r1, r2, r3
 8025708:	4622      	mov	r2, r4
 802570a:	2a00      	cmp	r2, #0
 802570c:	f280 80ae 	bge.w	802586c <__kernel_rem_pio2f+0x370>
 8025710:	4622      	mov	r2, r4
 8025712:	2a00      	cmp	r2, #0
 8025714:	f2c0 80cc 	blt.w	80258b0 <__kernel_rem_pio2f+0x3b4>
 8025718:	a944      	add	r1, sp, #272	; 0x110
 802571a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 802571e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80257fc <__kernel_rem_pio2f+0x300>
 8025722:	eddf 7a39 	vldr	s15, [pc, #228]	; 8025808 <__kernel_rem_pio2f+0x30c>
 8025726:	2000      	movs	r0, #0
 8025728:	1aa1      	subs	r1, r4, r2
 802572a:	e0b6      	b.n	802589a <__kernel_rem_pio2f+0x39e>
 802572c:	2702      	movs	r7, #2
 802572e:	e78c      	b.n	802564a <__kernel_rem_pio2f+0x14e>
 8025730:	6820      	ldr	r0, [r4, #0]
 8025732:	b94b      	cbnz	r3, 8025748 <__kernel_rem_pio2f+0x24c>
 8025734:	b118      	cbz	r0, 802573e <__kernel_rem_pio2f+0x242>
 8025736:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802573a:	6020      	str	r0, [r4, #0]
 802573c:	2001      	movs	r0, #1
 802573e:	f10e 0e01 	add.w	lr, lr, #1
 8025742:	3404      	adds	r4, #4
 8025744:	4603      	mov	r3, r0
 8025746:	e785      	b.n	8025654 <__kernel_rem_pio2f+0x158>
 8025748:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 802574c:	6020      	str	r0, [r4, #0]
 802574e:	4618      	mov	r0, r3
 8025750:	e7f5      	b.n	802573e <__kernel_rem_pio2f+0x242>
 8025752:	1e74      	subs	r4, r6, #1
 8025754:	a808      	add	r0, sp, #32
 8025756:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 802575a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 802575e:	f10d 0c20 	add.w	ip, sp, #32
 8025762:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8025766:	e77e      	b.n	8025666 <__kernel_rem_pio2f+0x16a>
 8025768:	1e74      	subs	r4, r6, #1
 802576a:	a808      	add	r0, sp, #32
 802576c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8025770:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8025774:	e7f3      	b.n	802575e <__kernel_rem_pio2f+0x262>
 8025776:	ab08      	add	r3, sp, #32
 8025778:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802577c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025780:	4318      	orrs	r0, r3
 8025782:	e7ab      	b.n	80256dc <__kernel_rem_pio2f+0x1e0>
 8025784:	f10c 0c01 	add.w	ip, ip, #1
 8025788:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 802578c:	2c00      	cmp	r4, #0
 802578e:	d0f9      	beq.n	8025784 <__kernel_rem_pio2f+0x288>
 8025790:	9b05      	ldr	r3, [sp, #20]
 8025792:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8025796:	eb0d 0003 	add.w	r0, sp, r3
 802579a:	9b01      	ldr	r3, [sp, #4]
 802579c:	18f4      	adds	r4, r6, r3
 802579e:	ab1c      	add	r3, sp, #112	; 0x70
 80257a0:	1c77      	adds	r7, r6, #1
 80257a2:	384c      	subs	r0, #76	; 0x4c
 80257a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80257a8:	4466      	add	r6, ip
 80257aa:	42be      	cmp	r6, r7
 80257ac:	f6ff af0b 	blt.w	80255c6 <__kernel_rem_pio2f+0xca>
 80257b0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80257b4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80257b8:	ee07 3a90 	vmov	s15, r3
 80257bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80257c0:	f04f 0c00 	mov.w	ip, #0
 80257c4:	ece4 7a01 	vstmia	r4!, {s15}
 80257c8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8025808 <__kernel_rem_pio2f+0x30c>
 80257cc:	46a1      	mov	r9, r4
 80257ce:	458c      	cmp	ip, r1
 80257d0:	dd07      	ble.n	80257e2 <__kernel_rem_pio2f+0x2e6>
 80257d2:	ece0 7a01 	vstmia	r0!, {s15}
 80257d6:	3701      	adds	r7, #1
 80257d8:	e7e7      	b.n	80257aa <__kernel_rem_pio2f+0x2ae>
 80257da:	9804      	ldr	r0, [sp, #16]
 80257dc:	f04f 0c01 	mov.w	ip, #1
 80257e0:	e7d2      	b.n	8025788 <__kernel_rem_pio2f+0x28c>
 80257e2:	ecfe 6a01 	vldmia	lr!, {s13}
 80257e6:	ed39 7a01 	vldmdb	r9!, {s14}
 80257ea:	f10c 0c01 	add.w	ip, ip, #1
 80257ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 80257f2:	e7ec      	b.n	80257ce <__kernel_rem_pio2f+0x2d2>
 80257f4:	3c01      	subs	r4, #1
 80257f6:	e775      	b.n	80256e4 <__kernel_rem_pio2f+0x1e8>
 80257f8:	08029ce4 	.word	0x08029ce4
 80257fc:	08029cb8 	.word	0x08029cb8
 8025800:	43800000 	.word	0x43800000
 8025804:	3b800000 	.word	0x3b800000
 8025808:	00000000 	.word	0x00000000
 802580c:	9b03      	ldr	r3, [sp, #12]
 802580e:	eeb0 0a48 	vmov.f32	s0, s16
 8025812:	1a98      	subs	r0, r3, r2
 8025814:	f000 fb92 	bl	8025f3c <scalbnf>
 8025818:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8025800 <__kernel_rem_pio2f+0x304>
 802581c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8025820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025824:	db19      	blt.n	802585a <__kernel_rem_pio2f+0x35e>
 8025826:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8025804 <__kernel_rem_pio2f+0x308>
 802582a:	ee60 7a27 	vmul.f32	s15, s0, s15
 802582e:	aa08      	add	r2, sp, #32
 8025830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025834:	1c74      	adds	r4, r6, #1
 8025836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802583a:	3508      	adds	r5, #8
 802583c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8025840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025844:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8025848:	ee10 3a10 	vmov	r3, s0
 802584c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8025850:	ee17 3a90 	vmov	r3, s15
 8025854:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8025858:	e74b      	b.n	80256f2 <__kernel_rem_pio2f+0x1f6>
 802585a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802585e:	aa08      	add	r2, sp, #32
 8025860:	ee10 3a10 	vmov	r3, s0
 8025864:	4634      	mov	r4, r6
 8025866:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802586a:	e742      	b.n	80256f2 <__kernel_rem_pio2f+0x1f6>
 802586c:	a808      	add	r0, sp, #32
 802586e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8025872:	9001      	str	r0, [sp, #4]
 8025874:	ee07 0a90 	vmov	s15, r0
 8025878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802587c:	3a01      	subs	r2, #1
 802587e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8025882:	ee20 0a07 	vmul.f32	s0, s0, s14
 8025886:	ed61 7a01 	vstmdb	r1!, {s15}
 802588a:	e73e      	b.n	802570a <__kernel_rem_pio2f+0x20e>
 802588c:	ecfc 6a01 	vldmia	ip!, {s13}
 8025890:	ecb6 7a01 	vldmia	r6!, {s14}
 8025894:	eee6 7a87 	vfma.f32	s15, s13, s14
 8025898:	3001      	adds	r0, #1
 802589a:	4550      	cmp	r0, sl
 802589c:	dc01      	bgt.n	80258a2 <__kernel_rem_pio2f+0x3a6>
 802589e:	4288      	cmp	r0, r1
 80258a0:	ddf4      	ble.n	802588c <__kernel_rem_pio2f+0x390>
 80258a2:	a858      	add	r0, sp, #352	; 0x160
 80258a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80258a8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80258ac:	3a01      	subs	r2, #1
 80258ae:	e730      	b.n	8025712 <__kernel_rem_pio2f+0x216>
 80258b0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80258b2:	2a02      	cmp	r2, #2
 80258b4:	dc09      	bgt.n	80258ca <__kernel_rem_pio2f+0x3ce>
 80258b6:	2a00      	cmp	r2, #0
 80258b8:	dc2a      	bgt.n	8025910 <__kernel_rem_pio2f+0x414>
 80258ba:	d043      	beq.n	8025944 <__kernel_rem_pio2f+0x448>
 80258bc:	f009 0007 	and.w	r0, r9, #7
 80258c0:	b059      	add	sp, #356	; 0x164
 80258c2:	ecbd 8b04 	vpop	{d8-d9}
 80258c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80258ca:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80258cc:	2b03      	cmp	r3, #3
 80258ce:	d1f5      	bne.n	80258bc <__kernel_rem_pio2f+0x3c0>
 80258d0:	ab30      	add	r3, sp, #192	; 0xc0
 80258d2:	442b      	add	r3, r5
 80258d4:	461a      	mov	r2, r3
 80258d6:	4619      	mov	r1, r3
 80258d8:	4620      	mov	r0, r4
 80258da:	2800      	cmp	r0, #0
 80258dc:	f1a1 0104 	sub.w	r1, r1, #4
 80258e0:	dc51      	bgt.n	8025986 <__kernel_rem_pio2f+0x48a>
 80258e2:	4621      	mov	r1, r4
 80258e4:	2901      	cmp	r1, #1
 80258e6:	f1a2 0204 	sub.w	r2, r2, #4
 80258ea:	dc5c      	bgt.n	80259a6 <__kernel_rem_pio2f+0x4aa>
 80258ec:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8025808 <__kernel_rem_pio2f+0x30c>
 80258f0:	3304      	adds	r3, #4
 80258f2:	2c01      	cmp	r4, #1
 80258f4:	dc67      	bgt.n	80259c6 <__kernel_rem_pio2f+0x4ca>
 80258f6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80258fa:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80258fe:	2f00      	cmp	r7, #0
 8025900:	d167      	bne.n	80259d2 <__kernel_rem_pio2f+0x4d6>
 8025902:	edc8 6a00 	vstr	s13, [r8]
 8025906:	ed88 7a01 	vstr	s14, [r8, #4]
 802590a:	edc8 7a02 	vstr	s15, [r8, #8]
 802590e:	e7d5      	b.n	80258bc <__kernel_rem_pio2f+0x3c0>
 8025910:	aa30      	add	r2, sp, #192	; 0xc0
 8025912:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8025808 <__kernel_rem_pio2f+0x30c>
 8025916:	4413      	add	r3, r2
 8025918:	4622      	mov	r2, r4
 802591a:	2a00      	cmp	r2, #0
 802591c:	da24      	bge.n	8025968 <__kernel_rem_pio2f+0x46c>
 802591e:	b34f      	cbz	r7, 8025974 <__kernel_rem_pio2f+0x478>
 8025920:	eef1 7a47 	vneg.f32	s15, s14
 8025924:	edc8 7a00 	vstr	s15, [r8]
 8025928:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 802592c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025930:	aa31      	add	r2, sp, #196	; 0xc4
 8025932:	2301      	movs	r3, #1
 8025934:	429c      	cmp	r4, r3
 8025936:	da20      	bge.n	802597a <__kernel_rem_pio2f+0x47e>
 8025938:	b10f      	cbz	r7, 802593e <__kernel_rem_pio2f+0x442>
 802593a:	eef1 7a67 	vneg.f32	s15, s15
 802593e:	edc8 7a01 	vstr	s15, [r8, #4]
 8025942:	e7bb      	b.n	80258bc <__kernel_rem_pio2f+0x3c0>
 8025944:	aa30      	add	r2, sp, #192	; 0xc0
 8025946:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8025808 <__kernel_rem_pio2f+0x30c>
 802594a:	4413      	add	r3, r2
 802594c:	2c00      	cmp	r4, #0
 802594e:	da05      	bge.n	802595c <__kernel_rem_pio2f+0x460>
 8025950:	b10f      	cbz	r7, 8025956 <__kernel_rem_pio2f+0x45a>
 8025952:	eef1 7a67 	vneg.f32	s15, s15
 8025956:	edc8 7a00 	vstr	s15, [r8]
 802595a:	e7af      	b.n	80258bc <__kernel_rem_pio2f+0x3c0>
 802595c:	ed33 7a01 	vldmdb	r3!, {s14}
 8025960:	3c01      	subs	r4, #1
 8025962:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025966:	e7f1      	b.n	802594c <__kernel_rem_pio2f+0x450>
 8025968:	ed73 7a01 	vldmdb	r3!, {s15}
 802596c:	3a01      	subs	r2, #1
 802596e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8025972:	e7d2      	b.n	802591a <__kernel_rem_pio2f+0x41e>
 8025974:	eef0 7a47 	vmov.f32	s15, s14
 8025978:	e7d4      	b.n	8025924 <__kernel_rem_pio2f+0x428>
 802597a:	ecb2 7a01 	vldmia	r2!, {s14}
 802597e:	3301      	adds	r3, #1
 8025980:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025984:	e7d6      	b.n	8025934 <__kernel_rem_pio2f+0x438>
 8025986:	edd1 7a00 	vldr	s15, [r1]
 802598a:	edd1 6a01 	vldr	s13, [r1, #4]
 802598e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8025992:	3801      	subs	r0, #1
 8025994:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025998:	ed81 7a00 	vstr	s14, [r1]
 802599c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80259a0:	edc1 7a01 	vstr	s15, [r1, #4]
 80259a4:	e799      	b.n	80258da <__kernel_rem_pio2f+0x3de>
 80259a6:	edd2 7a00 	vldr	s15, [r2]
 80259aa:	edd2 6a01 	vldr	s13, [r2, #4]
 80259ae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80259b2:	3901      	subs	r1, #1
 80259b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80259b8:	ed82 7a00 	vstr	s14, [r2]
 80259bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80259c0:	edc2 7a01 	vstr	s15, [r2, #4]
 80259c4:	e78e      	b.n	80258e4 <__kernel_rem_pio2f+0x3e8>
 80259c6:	ed33 7a01 	vldmdb	r3!, {s14}
 80259ca:	3c01      	subs	r4, #1
 80259cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80259d0:	e78f      	b.n	80258f2 <__kernel_rem_pio2f+0x3f6>
 80259d2:	eef1 6a66 	vneg.f32	s13, s13
 80259d6:	eeb1 7a47 	vneg.f32	s14, s14
 80259da:	edc8 6a00 	vstr	s13, [r8]
 80259de:	ed88 7a01 	vstr	s14, [r8, #4]
 80259e2:	eef1 7a67 	vneg.f32	s15, s15
 80259e6:	e790      	b.n	802590a <__kernel_rem_pio2f+0x40e>

080259e8 <__kernel_sinf>:
 80259e8:	ee10 3a10 	vmov	r3, s0
 80259ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80259f0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80259f4:	da04      	bge.n	8025a00 <__kernel_sinf+0x18>
 80259f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80259fa:	ee17 3a90 	vmov	r3, s15
 80259fe:	b35b      	cbz	r3, 8025a58 <__kernel_sinf+0x70>
 8025a00:	ee20 7a00 	vmul.f32	s14, s0, s0
 8025a04:	eddf 7a15 	vldr	s15, [pc, #84]	; 8025a5c <__kernel_sinf+0x74>
 8025a08:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8025a60 <__kernel_sinf+0x78>
 8025a0c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8025a10:	eddf 7a14 	vldr	s15, [pc, #80]	; 8025a64 <__kernel_sinf+0x7c>
 8025a14:	eee6 7a07 	vfma.f32	s15, s12, s14
 8025a18:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8025a68 <__kernel_sinf+0x80>
 8025a1c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8025a20:	eddf 7a12 	vldr	s15, [pc, #72]	; 8025a6c <__kernel_sinf+0x84>
 8025a24:	ee60 6a07 	vmul.f32	s13, s0, s14
 8025a28:	eee6 7a07 	vfma.f32	s15, s12, s14
 8025a2c:	b930      	cbnz	r0, 8025a3c <__kernel_sinf+0x54>
 8025a2e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8025a70 <__kernel_sinf+0x88>
 8025a32:	eea7 6a27 	vfma.f32	s12, s14, s15
 8025a36:	eea6 0a26 	vfma.f32	s0, s12, s13
 8025a3a:	4770      	bx	lr
 8025a3c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8025a40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8025a44:	eee0 7a86 	vfma.f32	s15, s1, s12
 8025a48:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8025a4c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8025a74 <__kernel_sinf+0x8c>
 8025a50:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8025a54:	ee30 0a60 	vsub.f32	s0, s0, s1
 8025a58:	4770      	bx	lr
 8025a5a:	bf00      	nop
 8025a5c:	2f2ec9d3 	.word	0x2f2ec9d3
 8025a60:	b2d72f34 	.word	0xb2d72f34
 8025a64:	3638ef1b 	.word	0x3638ef1b
 8025a68:	b9500d01 	.word	0xb9500d01
 8025a6c:	3c088889 	.word	0x3c088889
 8025a70:	be2aaaab 	.word	0xbe2aaaab
 8025a74:	3e2aaaab 	.word	0x3e2aaaab

08025a78 <with_errnof>:
 8025a78:	b513      	push	{r0, r1, r4, lr}
 8025a7a:	4604      	mov	r4, r0
 8025a7c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8025a80:	f7fd fbbc 	bl	80231fc <__errno>
 8025a84:	ed9d 0a01 	vldr	s0, [sp, #4]
 8025a88:	6004      	str	r4, [r0, #0]
 8025a8a:	b002      	add	sp, #8
 8025a8c:	bd10      	pop	{r4, pc}

08025a8e <xflowf>:
 8025a8e:	b130      	cbz	r0, 8025a9e <xflowf+0x10>
 8025a90:	eef1 7a40 	vneg.f32	s15, s0
 8025a94:	ee27 0a80 	vmul.f32	s0, s15, s0
 8025a98:	2022      	movs	r0, #34	; 0x22
 8025a9a:	f7ff bfed 	b.w	8025a78 <with_errnof>
 8025a9e:	eef0 7a40 	vmov.f32	s15, s0
 8025aa2:	e7f7      	b.n	8025a94 <xflowf+0x6>

08025aa4 <__math_uflowf>:
 8025aa4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025aac <__math_uflowf+0x8>
 8025aa8:	f7ff bff1 	b.w	8025a8e <xflowf>
 8025aac:	10000000 	.word	0x10000000

08025ab0 <__math_oflowf>:
 8025ab0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025ab8 <__math_oflowf+0x8>
 8025ab4:	f7ff bfeb 	b.w	8025a8e <xflowf>
 8025ab8:	70000000 	.word	0x70000000

08025abc <fabs>:
 8025abc:	ec51 0b10 	vmov	r0, r1, d0
 8025ac0:	ee10 2a10 	vmov	r2, s0
 8025ac4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025ac8:	ec43 2b10 	vmov	d0, r2, r3
 8025acc:	4770      	bx	lr
	...

08025ad0 <floor>:
 8025ad0:	ec51 0b10 	vmov	r0, r1, d0
 8025ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025ad8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8025adc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8025ae0:	2e13      	cmp	r6, #19
 8025ae2:	ee10 5a10 	vmov	r5, s0
 8025ae6:	ee10 8a10 	vmov	r8, s0
 8025aea:	460c      	mov	r4, r1
 8025aec:	dc32      	bgt.n	8025b54 <floor+0x84>
 8025aee:	2e00      	cmp	r6, #0
 8025af0:	da14      	bge.n	8025b1c <floor+0x4c>
 8025af2:	a333      	add	r3, pc, #204	; (adr r3, 8025bc0 <floor+0xf0>)
 8025af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025af8:	f7da fb86 	bl	8000208 <__adddf3>
 8025afc:	2200      	movs	r2, #0
 8025afe:	2300      	movs	r3, #0
 8025b00:	f7da ffc8 	bl	8000a94 <__aeabi_dcmpgt>
 8025b04:	b138      	cbz	r0, 8025b16 <floor+0x46>
 8025b06:	2c00      	cmp	r4, #0
 8025b08:	da57      	bge.n	8025bba <floor+0xea>
 8025b0a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8025b0e:	431d      	orrs	r5, r3
 8025b10:	d001      	beq.n	8025b16 <floor+0x46>
 8025b12:	4c2d      	ldr	r4, [pc, #180]	; (8025bc8 <floor+0xf8>)
 8025b14:	2500      	movs	r5, #0
 8025b16:	4621      	mov	r1, r4
 8025b18:	4628      	mov	r0, r5
 8025b1a:	e025      	b.n	8025b68 <floor+0x98>
 8025b1c:	4f2b      	ldr	r7, [pc, #172]	; (8025bcc <floor+0xfc>)
 8025b1e:	4137      	asrs	r7, r6
 8025b20:	ea01 0307 	and.w	r3, r1, r7
 8025b24:	4303      	orrs	r3, r0
 8025b26:	d01f      	beq.n	8025b68 <floor+0x98>
 8025b28:	a325      	add	r3, pc, #148	; (adr r3, 8025bc0 <floor+0xf0>)
 8025b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b2e:	f7da fb6b 	bl	8000208 <__adddf3>
 8025b32:	2200      	movs	r2, #0
 8025b34:	2300      	movs	r3, #0
 8025b36:	f7da ffad 	bl	8000a94 <__aeabi_dcmpgt>
 8025b3a:	2800      	cmp	r0, #0
 8025b3c:	d0eb      	beq.n	8025b16 <floor+0x46>
 8025b3e:	2c00      	cmp	r4, #0
 8025b40:	bfbe      	ittt	lt
 8025b42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8025b46:	fa43 f606 	asrlt.w	r6, r3, r6
 8025b4a:	19a4      	addlt	r4, r4, r6
 8025b4c:	ea24 0407 	bic.w	r4, r4, r7
 8025b50:	2500      	movs	r5, #0
 8025b52:	e7e0      	b.n	8025b16 <floor+0x46>
 8025b54:	2e33      	cmp	r6, #51	; 0x33
 8025b56:	dd0b      	ble.n	8025b70 <floor+0xa0>
 8025b58:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8025b5c:	d104      	bne.n	8025b68 <floor+0x98>
 8025b5e:	ee10 2a10 	vmov	r2, s0
 8025b62:	460b      	mov	r3, r1
 8025b64:	f7da fb50 	bl	8000208 <__adddf3>
 8025b68:	ec41 0b10 	vmov	d0, r0, r1
 8025b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025b70:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8025b74:	f04f 33ff 	mov.w	r3, #4294967295
 8025b78:	fa23 f707 	lsr.w	r7, r3, r7
 8025b7c:	4207      	tst	r7, r0
 8025b7e:	d0f3      	beq.n	8025b68 <floor+0x98>
 8025b80:	a30f      	add	r3, pc, #60	; (adr r3, 8025bc0 <floor+0xf0>)
 8025b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b86:	f7da fb3f 	bl	8000208 <__adddf3>
 8025b8a:	2200      	movs	r2, #0
 8025b8c:	2300      	movs	r3, #0
 8025b8e:	f7da ff81 	bl	8000a94 <__aeabi_dcmpgt>
 8025b92:	2800      	cmp	r0, #0
 8025b94:	d0bf      	beq.n	8025b16 <floor+0x46>
 8025b96:	2c00      	cmp	r4, #0
 8025b98:	da02      	bge.n	8025ba0 <floor+0xd0>
 8025b9a:	2e14      	cmp	r6, #20
 8025b9c:	d103      	bne.n	8025ba6 <floor+0xd6>
 8025b9e:	3401      	adds	r4, #1
 8025ba0:	ea25 0507 	bic.w	r5, r5, r7
 8025ba4:	e7b7      	b.n	8025b16 <floor+0x46>
 8025ba6:	2301      	movs	r3, #1
 8025ba8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8025bac:	fa03 f606 	lsl.w	r6, r3, r6
 8025bb0:	4435      	add	r5, r6
 8025bb2:	4545      	cmp	r5, r8
 8025bb4:	bf38      	it	cc
 8025bb6:	18e4      	addcc	r4, r4, r3
 8025bb8:	e7f2      	b.n	8025ba0 <floor+0xd0>
 8025bba:	2500      	movs	r5, #0
 8025bbc:	462c      	mov	r4, r5
 8025bbe:	e7aa      	b.n	8025b16 <floor+0x46>
 8025bc0:	8800759c 	.word	0x8800759c
 8025bc4:	7e37e43c 	.word	0x7e37e43c
 8025bc8:	bff00000 	.word	0xbff00000
 8025bcc:	000fffff 	.word	0x000fffff

08025bd0 <scalbn>:
 8025bd0:	b570      	push	{r4, r5, r6, lr}
 8025bd2:	ec55 4b10 	vmov	r4, r5, d0
 8025bd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8025bda:	4606      	mov	r6, r0
 8025bdc:	462b      	mov	r3, r5
 8025bde:	b99a      	cbnz	r2, 8025c08 <scalbn+0x38>
 8025be0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8025be4:	4323      	orrs	r3, r4
 8025be6:	d036      	beq.n	8025c56 <scalbn+0x86>
 8025be8:	4b39      	ldr	r3, [pc, #228]	; (8025cd0 <scalbn+0x100>)
 8025bea:	4629      	mov	r1, r5
 8025bec:	ee10 0a10 	vmov	r0, s0
 8025bf0:	2200      	movs	r2, #0
 8025bf2:	f7da fcbf 	bl	8000574 <__aeabi_dmul>
 8025bf6:	4b37      	ldr	r3, [pc, #220]	; (8025cd4 <scalbn+0x104>)
 8025bf8:	429e      	cmp	r6, r3
 8025bfa:	4604      	mov	r4, r0
 8025bfc:	460d      	mov	r5, r1
 8025bfe:	da10      	bge.n	8025c22 <scalbn+0x52>
 8025c00:	a32b      	add	r3, pc, #172	; (adr r3, 8025cb0 <scalbn+0xe0>)
 8025c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c06:	e03a      	b.n	8025c7e <scalbn+0xae>
 8025c08:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8025c0c:	428a      	cmp	r2, r1
 8025c0e:	d10c      	bne.n	8025c2a <scalbn+0x5a>
 8025c10:	ee10 2a10 	vmov	r2, s0
 8025c14:	4620      	mov	r0, r4
 8025c16:	4629      	mov	r1, r5
 8025c18:	f7da faf6 	bl	8000208 <__adddf3>
 8025c1c:	4604      	mov	r4, r0
 8025c1e:	460d      	mov	r5, r1
 8025c20:	e019      	b.n	8025c56 <scalbn+0x86>
 8025c22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8025c26:	460b      	mov	r3, r1
 8025c28:	3a36      	subs	r2, #54	; 0x36
 8025c2a:	4432      	add	r2, r6
 8025c2c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8025c30:	428a      	cmp	r2, r1
 8025c32:	dd08      	ble.n	8025c46 <scalbn+0x76>
 8025c34:	2d00      	cmp	r5, #0
 8025c36:	a120      	add	r1, pc, #128	; (adr r1, 8025cb8 <scalbn+0xe8>)
 8025c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025c3c:	da1c      	bge.n	8025c78 <scalbn+0xa8>
 8025c3e:	a120      	add	r1, pc, #128	; (adr r1, 8025cc0 <scalbn+0xf0>)
 8025c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025c44:	e018      	b.n	8025c78 <scalbn+0xa8>
 8025c46:	2a00      	cmp	r2, #0
 8025c48:	dd08      	ble.n	8025c5c <scalbn+0x8c>
 8025c4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025c4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025c52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025c56:	ec45 4b10 	vmov	d0, r4, r5
 8025c5a:	bd70      	pop	{r4, r5, r6, pc}
 8025c5c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8025c60:	da19      	bge.n	8025c96 <scalbn+0xc6>
 8025c62:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025c66:	429e      	cmp	r6, r3
 8025c68:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8025c6c:	dd0a      	ble.n	8025c84 <scalbn+0xb4>
 8025c6e:	a112      	add	r1, pc, #72	; (adr r1, 8025cb8 <scalbn+0xe8>)
 8025c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025c74:	2b00      	cmp	r3, #0
 8025c76:	d1e2      	bne.n	8025c3e <scalbn+0x6e>
 8025c78:	a30f      	add	r3, pc, #60	; (adr r3, 8025cb8 <scalbn+0xe8>)
 8025c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c7e:	f7da fc79 	bl	8000574 <__aeabi_dmul>
 8025c82:	e7cb      	b.n	8025c1c <scalbn+0x4c>
 8025c84:	a10a      	add	r1, pc, #40	; (adr r1, 8025cb0 <scalbn+0xe0>)
 8025c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025c8a:	2b00      	cmp	r3, #0
 8025c8c:	d0b8      	beq.n	8025c00 <scalbn+0x30>
 8025c8e:	a10e      	add	r1, pc, #56	; (adr r1, 8025cc8 <scalbn+0xf8>)
 8025c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025c94:	e7b4      	b.n	8025c00 <scalbn+0x30>
 8025c96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025c9a:	3236      	adds	r2, #54	; 0x36
 8025c9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025ca0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8025ca4:	4620      	mov	r0, r4
 8025ca6:	4b0c      	ldr	r3, [pc, #48]	; (8025cd8 <scalbn+0x108>)
 8025ca8:	2200      	movs	r2, #0
 8025caa:	e7e8      	b.n	8025c7e <scalbn+0xae>
 8025cac:	f3af 8000 	nop.w
 8025cb0:	c2f8f359 	.word	0xc2f8f359
 8025cb4:	01a56e1f 	.word	0x01a56e1f
 8025cb8:	8800759c 	.word	0x8800759c
 8025cbc:	7e37e43c 	.word	0x7e37e43c
 8025cc0:	8800759c 	.word	0x8800759c
 8025cc4:	fe37e43c 	.word	0xfe37e43c
 8025cc8:	c2f8f359 	.word	0xc2f8f359
 8025ccc:	81a56e1f 	.word	0x81a56e1f
 8025cd0:	43500000 	.word	0x43500000
 8025cd4:	ffff3cb0 	.word	0xffff3cb0
 8025cd8:	3c900000 	.word	0x3c900000

08025cdc <atanf>:
 8025cdc:	b538      	push	{r3, r4, r5, lr}
 8025cde:	ee10 5a10 	vmov	r5, s0
 8025ce2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8025ce6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8025cea:	eef0 7a40 	vmov.f32	s15, s0
 8025cee:	db10      	blt.n	8025d12 <atanf+0x36>
 8025cf0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8025cf4:	dd04      	ble.n	8025d00 <atanf+0x24>
 8025cf6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8025cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8025cfe:	bd38      	pop	{r3, r4, r5, pc}
 8025d00:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8025e38 <atanf+0x15c>
 8025d04:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8025e3c <atanf+0x160>
 8025d08:	2d00      	cmp	r5, #0
 8025d0a:	bfd8      	it	le
 8025d0c:	eef0 7a40 	vmovle.f32	s15, s0
 8025d10:	e7f3      	b.n	8025cfa <atanf+0x1e>
 8025d12:	4b4b      	ldr	r3, [pc, #300]	; (8025e40 <atanf+0x164>)
 8025d14:	429c      	cmp	r4, r3
 8025d16:	dc10      	bgt.n	8025d3a <atanf+0x5e>
 8025d18:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8025d1c:	da0a      	bge.n	8025d34 <atanf+0x58>
 8025d1e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8025e44 <atanf+0x168>
 8025d22:	ee30 7a07 	vadd.f32	s14, s0, s14
 8025d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8025d2a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8025d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d32:	dce2      	bgt.n	8025cfa <atanf+0x1e>
 8025d34:	f04f 33ff 	mov.w	r3, #4294967295
 8025d38:	e013      	b.n	8025d62 <atanf+0x86>
 8025d3a:	f000 f8a3 	bl	8025e84 <fabsf>
 8025d3e:	4b42      	ldr	r3, [pc, #264]	; (8025e48 <atanf+0x16c>)
 8025d40:	429c      	cmp	r4, r3
 8025d42:	dc4f      	bgt.n	8025de4 <atanf+0x108>
 8025d44:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8025d48:	429c      	cmp	r4, r3
 8025d4a:	dc41      	bgt.n	8025dd0 <atanf+0xf4>
 8025d4c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8025d50:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8025d54:	eea0 7a27 	vfma.f32	s14, s0, s15
 8025d58:	2300      	movs	r3, #0
 8025d5a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025d5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025d62:	1c5a      	adds	r2, r3, #1
 8025d64:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8025d68:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8025e4c <atanf+0x170>
 8025d6c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8025e50 <atanf+0x174>
 8025d70:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8025e54 <atanf+0x178>
 8025d74:	ee66 6a06 	vmul.f32	s13, s12, s12
 8025d78:	eee6 5a87 	vfma.f32	s11, s13, s14
 8025d7c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8025e58 <atanf+0x17c>
 8025d80:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025d84:	eddf 5a35 	vldr	s11, [pc, #212]	; 8025e5c <atanf+0x180>
 8025d88:	eee7 5a26 	vfma.f32	s11, s14, s13
 8025d8c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8025e60 <atanf+0x184>
 8025d90:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025d94:	eddf 5a33 	vldr	s11, [pc, #204]	; 8025e64 <atanf+0x188>
 8025d98:	eee7 5a26 	vfma.f32	s11, s14, s13
 8025d9c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8025e68 <atanf+0x18c>
 8025da0:	eea6 5a87 	vfma.f32	s10, s13, s14
 8025da4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8025e6c <atanf+0x190>
 8025da8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8025dac:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8025e70 <atanf+0x194>
 8025db0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8025db4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8025e74 <atanf+0x198>
 8025db8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8025dbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8025dc0:	eea5 7a86 	vfma.f32	s14, s11, s12
 8025dc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8025dc8:	d121      	bne.n	8025e0e <atanf+0x132>
 8025dca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025dce:	e794      	b.n	8025cfa <atanf+0x1e>
 8025dd0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8025dd4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8025dd8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025ddc:	2301      	movs	r3, #1
 8025dde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025de2:	e7be      	b.n	8025d62 <atanf+0x86>
 8025de4:	4b24      	ldr	r3, [pc, #144]	; (8025e78 <atanf+0x19c>)
 8025de6:	429c      	cmp	r4, r3
 8025de8:	dc0b      	bgt.n	8025e02 <atanf+0x126>
 8025dea:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8025dee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025df2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8025df6:	2302      	movs	r3, #2
 8025df8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8025dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025e00:	e7af      	b.n	8025d62 <atanf+0x86>
 8025e02:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8025e06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025e0a:	2303      	movs	r3, #3
 8025e0c:	e7a9      	b.n	8025d62 <atanf+0x86>
 8025e0e:	4a1b      	ldr	r2, [pc, #108]	; (8025e7c <atanf+0x1a0>)
 8025e10:	491b      	ldr	r1, [pc, #108]	; (8025e80 <atanf+0x1a4>)
 8025e12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8025e16:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8025e1a:	ed93 0a00 	vldr	s0, [r3]
 8025e1e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8025e22:	ed92 0a00 	vldr	s0, [r2]
 8025e26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025e2a:	2d00      	cmp	r5, #0
 8025e2c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8025e30:	bfb8      	it	lt
 8025e32:	eef1 7a67 	vneglt.f32	s15, s15
 8025e36:	e760      	b.n	8025cfa <atanf+0x1e>
 8025e38:	3fc90fdb 	.word	0x3fc90fdb
 8025e3c:	bfc90fdb 	.word	0xbfc90fdb
 8025e40:	3edfffff 	.word	0x3edfffff
 8025e44:	7149f2ca 	.word	0x7149f2ca
 8025e48:	3f97ffff 	.word	0x3f97ffff
 8025e4c:	3c8569d7 	.word	0x3c8569d7
 8025e50:	3d4bda59 	.word	0x3d4bda59
 8025e54:	bd6ef16b 	.word	0xbd6ef16b
 8025e58:	3d886b35 	.word	0x3d886b35
 8025e5c:	3dba2e6e 	.word	0x3dba2e6e
 8025e60:	3e124925 	.word	0x3e124925
 8025e64:	3eaaaaab 	.word	0x3eaaaaab
 8025e68:	bd15a221 	.word	0xbd15a221
 8025e6c:	bd9d8795 	.word	0xbd9d8795
 8025e70:	bde38e38 	.word	0xbde38e38
 8025e74:	be4ccccd 	.word	0xbe4ccccd
 8025e78:	401bffff 	.word	0x401bffff
 8025e7c:	08029cf0 	.word	0x08029cf0
 8025e80:	08029d00 	.word	0x08029d00

08025e84 <fabsf>:
 8025e84:	ee10 3a10 	vmov	r3, s0
 8025e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025e8c:	ee00 3a10 	vmov	s0, r3
 8025e90:	4770      	bx	lr

08025e92 <finitef>:
 8025e92:	b082      	sub	sp, #8
 8025e94:	ed8d 0a01 	vstr	s0, [sp, #4]
 8025e98:	9801      	ldr	r0, [sp, #4]
 8025e9a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025e9e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8025ea2:	bfac      	ite	ge
 8025ea4:	2000      	movge	r0, #0
 8025ea6:	2001      	movlt	r0, #1
 8025ea8:	b002      	add	sp, #8
 8025eaa:	4770      	bx	lr

08025eac <floorf>:
 8025eac:	ee10 3a10 	vmov	r3, s0
 8025eb0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8025eb4:	3a7f      	subs	r2, #127	; 0x7f
 8025eb6:	2a16      	cmp	r2, #22
 8025eb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8025ebc:	dc2a      	bgt.n	8025f14 <floorf+0x68>
 8025ebe:	2a00      	cmp	r2, #0
 8025ec0:	da11      	bge.n	8025ee6 <floorf+0x3a>
 8025ec2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8025f24 <floorf+0x78>
 8025ec6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025eca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ed2:	dd05      	ble.n	8025ee0 <floorf+0x34>
 8025ed4:	2b00      	cmp	r3, #0
 8025ed6:	da23      	bge.n	8025f20 <floorf+0x74>
 8025ed8:	4a13      	ldr	r2, [pc, #76]	; (8025f28 <floorf+0x7c>)
 8025eda:	2900      	cmp	r1, #0
 8025edc:	bf18      	it	ne
 8025ede:	4613      	movne	r3, r2
 8025ee0:	ee00 3a10 	vmov	s0, r3
 8025ee4:	4770      	bx	lr
 8025ee6:	4911      	ldr	r1, [pc, #68]	; (8025f2c <floorf+0x80>)
 8025ee8:	4111      	asrs	r1, r2
 8025eea:	420b      	tst	r3, r1
 8025eec:	d0fa      	beq.n	8025ee4 <floorf+0x38>
 8025eee:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8025f24 <floorf+0x78>
 8025ef2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025ef6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025efe:	ddef      	ble.n	8025ee0 <floorf+0x34>
 8025f00:	2b00      	cmp	r3, #0
 8025f02:	bfbe      	ittt	lt
 8025f04:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8025f08:	fa40 f202 	asrlt.w	r2, r0, r2
 8025f0c:	189b      	addlt	r3, r3, r2
 8025f0e:	ea23 0301 	bic.w	r3, r3, r1
 8025f12:	e7e5      	b.n	8025ee0 <floorf+0x34>
 8025f14:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8025f18:	d3e4      	bcc.n	8025ee4 <floorf+0x38>
 8025f1a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025f1e:	4770      	bx	lr
 8025f20:	2300      	movs	r3, #0
 8025f22:	e7dd      	b.n	8025ee0 <floorf+0x34>
 8025f24:	7149f2ca 	.word	0x7149f2ca
 8025f28:	bf800000 	.word	0xbf800000
 8025f2c:	007fffff 	.word	0x007fffff

08025f30 <nanf>:
 8025f30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025f38 <nanf+0x8>
 8025f34:	4770      	bx	lr
 8025f36:	bf00      	nop
 8025f38:	7fc00000 	.word	0x7fc00000

08025f3c <scalbnf>:
 8025f3c:	ee10 3a10 	vmov	r3, s0
 8025f40:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8025f44:	d025      	beq.n	8025f92 <scalbnf+0x56>
 8025f46:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8025f4a:	d302      	bcc.n	8025f52 <scalbnf+0x16>
 8025f4c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025f50:	4770      	bx	lr
 8025f52:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8025f56:	d122      	bne.n	8025f9e <scalbnf+0x62>
 8025f58:	4b2a      	ldr	r3, [pc, #168]	; (8026004 <scalbnf+0xc8>)
 8025f5a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8026008 <scalbnf+0xcc>
 8025f5e:	4298      	cmp	r0, r3
 8025f60:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025f64:	db16      	blt.n	8025f94 <scalbnf+0x58>
 8025f66:	ee10 3a10 	vmov	r3, s0
 8025f6a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8025f6e:	3a19      	subs	r2, #25
 8025f70:	4402      	add	r2, r0
 8025f72:	2afe      	cmp	r2, #254	; 0xfe
 8025f74:	dd15      	ble.n	8025fa2 <scalbnf+0x66>
 8025f76:	ee10 3a10 	vmov	r3, s0
 8025f7a:	eddf 7a24 	vldr	s15, [pc, #144]	; 802600c <scalbnf+0xd0>
 8025f7e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8026010 <scalbnf+0xd4>
 8025f82:	2b00      	cmp	r3, #0
 8025f84:	eeb0 7a67 	vmov.f32	s14, s15
 8025f88:	bfb8      	it	lt
 8025f8a:	eef0 7a66 	vmovlt.f32	s15, s13
 8025f8e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8025f92:	4770      	bx	lr
 8025f94:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8026014 <scalbnf+0xd8>
 8025f98:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025f9c:	4770      	bx	lr
 8025f9e:	0dd2      	lsrs	r2, r2, #23
 8025fa0:	e7e6      	b.n	8025f70 <scalbnf+0x34>
 8025fa2:	2a00      	cmp	r2, #0
 8025fa4:	dd06      	ble.n	8025fb4 <scalbnf+0x78>
 8025fa6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025faa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8025fae:	ee00 3a10 	vmov	s0, r3
 8025fb2:	4770      	bx	lr
 8025fb4:	f112 0f16 	cmn.w	r2, #22
 8025fb8:	da1a      	bge.n	8025ff0 <scalbnf+0xb4>
 8025fba:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025fbe:	4298      	cmp	r0, r3
 8025fc0:	ee10 3a10 	vmov	r3, s0
 8025fc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8025fc8:	dd0a      	ble.n	8025fe0 <scalbnf+0xa4>
 8025fca:	ed9f 0a10 	vldr	s0, [pc, #64]	; 802600c <scalbnf+0xd0>
 8025fce:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8026010 <scalbnf+0xd4>
 8025fd2:	eef0 7a40 	vmov.f32	s15, s0
 8025fd6:	2b00      	cmp	r3, #0
 8025fd8:	bf18      	it	ne
 8025fda:	eeb0 0a47 	vmovne.f32	s0, s14
 8025fde:	e7db      	b.n	8025f98 <scalbnf+0x5c>
 8025fe0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8026014 <scalbnf+0xd8>
 8025fe4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8026018 <scalbnf+0xdc>
 8025fe8:	eef0 7a40 	vmov.f32	s15, s0
 8025fec:	2b00      	cmp	r3, #0
 8025fee:	e7f3      	b.n	8025fd8 <scalbnf+0x9c>
 8025ff0:	3219      	adds	r2, #25
 8025ff2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025ff6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8025ffa:	eddf 7a08 	vldr	s15, [pc, #32]	; 802601c <scalbnf+0xe0>
 8025ffe:	ee07 3a10 	vmov	s14, r3
 8026002:	e7c4      	b.n	8025f8e <scalbnf+0x52>
 8026004:	ffff3cb0 	.word	0xffff3cb0
 8026008:	4c000000 	.word	0x4c000000
 802600c:	7149f2ca 	.word	0x7149f2ca
 8026010:	f149f2ca 	.word	0xf149f2ca
 8026014:	0da24260 	.word	0x0da24260
 8026018:	8da24260 	.word	0x8da24260
 802601c:	33000000 	.word	0x33000000

08026020 <_init>:
 8026020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026022:	bf00      	nop
 8026024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026026:	bc08      	pop	{r3}
 8026028:	469e      	mov	lr, r3
 802602a:	4770      	bx	lr

0802602c <_fini>:
 802602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802602e:	bf00      	nop
 8026030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026032:	bc08      	pop	{r3}
 8026034:	469e      	mov	lr, r3
 8026036:	4770      	bx	lr
