
baseflight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000256b0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f88  08025848  08025848  00035848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080297d0  080297d0  000401bc  2**0
                  CONTENTS
  4 .ARM          00000008  080297d0  080297d0  000397d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080297d8  080297d8  000401bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080297d8  080297d8  000397d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080297dc  080297dc  000397dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001bc  20000000  080297e0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c1c  200001c0  0802999c  000401c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001ddc  0802999c  00041ddc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044c3f  00000000  00000000  000401ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009a3f  00000000  00000000  00084e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026f8  00000000  00000000  0008e870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023c8  00000000  00000000  00090f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b24  00000000  00000000  00093330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035cdf  00000000  00000000  000b3e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9c67  00000000  00000000  000e9b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019379a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad04  00000000  00000000  001937ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001c0 	.word	0x200001c0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08025830 	.word	0x08025830

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001c4 	.word	0x200001c4
 80001d4:	08025830 	.word	0x08025830

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2iz>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d215      	bcs.n	8000aca <__aeabi_d2iz+0x36>
 8000a9e:	d511      	bpl.n	8000ac4 <__aeabi_d2iz+0x30>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d912      	bls.n	8000ad0 <__aeabi_d2iz+0x3c>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d105      	bne.n	8000adc <__aeabi_d2iz+0x48>
 8000ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2uiz>:
 8000ae4:	004a      	lsls	r2, r1, #1
 8000ae6:	d211      	bcs.n	8000b0c <__aeabi_d2uiz+0x28>
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d211      	bcs.n	8000b12 <__aeabi_d2uiz+0x2e>
 8000aee:	d50d      	bpl.n	8000b0c <__aeabi_d2uiz+0x28>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d40e      	bmi.n	8000b18 <__aeabi_d2uiz+0x34>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_d2uiz+0x3a>
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_ldivmod>:
 8000de0:	b97b      	cbnz	r3, 8000e02 <__aeabi_ldivmod+0x22>
 8000de2:	b972      	cbnz	r2, 8000e02 <__aeabi_ldivmod+0x22>
 8000de4:	2900      	cmp	r1, #0
 8000de6:	bfbe      	ittt	lt
 8000de8:	2000      	movlt	r0, #0
 8000dea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000dee:	e006      	blt.n	8000dfe <__aeabi_ldivmod+0x1e>
 8000df0:	bf08      	it	eq
 8000df2:	2800      	cmpeq	r0, #0
 8000df4:	bf1c      	itt	ne
 8000df6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000dfa:	f04f 30ff 	movne.w	r0, #4294967295
 8000dfe:	f000 b9bf 	b.w	8001180 <__aeabi_idiv0>
 8000e02:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e06:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0a:	2900      	cmp	r1, #0
 8000e0c:	db09      	blt.n	8000e22 <__aeabi_ldivmod+0x42>
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db1a      	blt.n	8000e48 <__aeabi_ldivmod+0x68>
 8000e12:	f000 f84d 	bl	8000eb0 <__udivmoddi4>
 8000e16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e1e:	b004      	add	sp, #16
 8000e20:	4770      	bx	lr
 8000e22:	4240      	negs	r0, r0
 8000e24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db1b      	blt.n	8000e64 <__aeabi_ldivmod+0x84>
 8000e2c:	f000 f840 	bl	8000eb0 <__udivmoddi4>
 8000e30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e38:	b004      	add	sp, #16
 8000e3a:	4240      	negs	r0, r0
 8000e3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e40:	4252      	negs	r2, r2
 8000e42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e46:	4770      	bx	lr
 8000e48:	4252      	negs	r2, r2
 8000e4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e4e:	f000 f82f 	bl	8000eb0 <__udivmoddi4>
 8000e52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5a:	b004      	add	sp, #16
 8000e5c:	4240      	negs	r0, r0
 8000e5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e62:	4770      	bx	lr
 8000e64:	4252      	negs	r2, r2
 8000e66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e6a:	f000 f821 	bl	8000eb0 <__udivmoddi4>
 8000e6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e76:	b004      	add	sp, #16
 8000e78:	4252      	negs	r2, r2
 8000e7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_uldivmod>:
 8000e80:	b953      	cbnz	r3, 8000e98 <__aeabi_uldivmod+0x18>
 8000e82:	b94a      	cbnz	r2, 8000e98 <__aeabi_uldivmod+0x18>
 8000e84:	2900      	cmp	r1, #0
 8000e86:	bf08      	it	eq
 8000e88:	2800      	cmpeq	r0, #0
 8000e8a:	bf1c      	itt	ne
 8000e8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e90:	f04f 30ff 	movne.w	r0, #4294967295
 8000e94:	f000 b974 	b.w	8001180 <__aeabi_idiv0>
 8000e98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea0:	f000 f806 	bl	8000eb0 <__udivmoddi4>
 8000ea4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eac:	b004      	add	sp, #16
 8000eae:	4770      	bx	lr

08000eb0 <__udivmoddi4>:
 8000eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb4:	9d08      	ldr	r5, [sp, #32]
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	468e      	mov	lr, r1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d14d      	bne.n	8000f5a <__udivmoddi4+0xaa>
 8000ebe:	428a      	cmp	r2, r1
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	d969      	bls.n	8000f98 <__udivmoddi4+0xe8>
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	b152      	cbz	r2, 8000ee0 <__udivmoddi4+0x30>
 8000eca:	fa01 f302 	lsl.w	r3, r1, r2
 8000ece:	f1c2 0120 	rsb	r1, r2, #32
 8000ed2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ed6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eda:	ea41 0e03 	orr.w	lr, r1, r3
 8000ede:	4094      	lsls	r4, r2
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	0c21      	lsrs	r1, r4, #16
 8000ee6:	fbbe f6f8 	udiv	r6, lr, r8
 8000eea:	fa1f f78c 	uxth.w	r7, ip
 8000eee:	fb08 e316 	mls	r3, r8, r6, lr
 8000ef2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ef6:	fb06 f107 	mul.w	r1, r6, r7
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d90a      	bls.n	8000f14 <__udivmoddi4+0x64>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f06:	f080 811f 	bcs.w	8001148 <__udivmoddi4+0x298>
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	f240 811c 	bls.w	8001148 <__udivmoddi4+0x298>
 8000f10:	3e02      	subs	r6, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb00 f707 	mul.w	r7, r0, r7
 8000f28:	42a7      	cmp	r7, r4
 8000f2a:	d90a      	bls.n	8000f42 <__udivmoddi4+0x92>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f34:	f080 810a 	bcs.w	800114c <__udivmoddi4+0x29c>
 8000f38:	42a7      	cmp	r7, r4
 8000f3a:	f240 8107 	bls.w	800114c <__udivmoddi4+0x29c>
 8000f3e:	4464      	add	r4, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f46:	1be4      	subs	r4, r4, r7
 8000f48:	2600      	movs	r6, #0
 8000f4a:	b11d      	cbz	r5, 8000f54 <__udivmoddi4+0xa4>
 8000f4c:	40d4      	lsrs	r4, r2
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e9c5 4300 	strd	r4, r3, [r5]
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d909      	bls.n	8000f72 <__udivmoddi4+0xc2>
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	f000 80ef 	beq.w	8001142 <__udivmoddi4+0x292>
 8000f64:	2600      	movs	r6, #0
 8000f66:	e9c5 0100 	strd	r0, r1, [r5]
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	4631      	mov	r1, r6
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	fab3 f683 	clz	r6, r3
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d14a      	bne.n	8001010 <__udivmoddi4+0x160>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d302      	bcc.n	8000f84 <__udivmoddi4+0xd4>
 8000f7e:	4282      	cmp	r2, r0
 8000f80:	f200 80f9 	bhi.w	8001176 <__udivmoddi4+0x2c6>
 8000f84:	1a84      	subs	r4, r0, r2
 8000f86:	eb61 0303 	sbc.w	r3, r1, r3
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	2d00      	cmp	r5, #0
 8000f90:	d0e0      	beq.n	8000f54 <__udivmoddi4+0xa4>
 8000f92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f96:	e7dd      	b.n	8000f54 <__udivmoddi4+0xa4>
 8000f98:	b902      	cbnz	r2, 8000f9c <__udivmoddi4+0xec>
 8000f9a:	deff      	udf	#255	; 0xff
 8000f9c:	fab2 f282 	clz	r2, r2
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	f040 8092 	bne.w	80010ca <__udivmoddi4+0x21a>
 8000fa6:	eba1 010c 	sub.w	r1, r1, ip
 8000faa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fae:	fa1f fe8c 	uxth.w	lr, ip
 8000fb2:	2601      	movs	r6, #1
 8000fb4:	0c20      	lsrs	r0, r4, #16
 8000fb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fba:	fb07 1113 	mls	r1, r7, r3, r1
 8000fbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fc2:	fb0e f003 	mul.w	r0, lr, r3
 8000fc6:	4288      	cmp	r0, r1
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x12c>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fd2:	d202      	bcs.n	8000fda <__udivmoddi4+0x12a>
 8000fd4:	4288      	cmp	r0, r1
 8000fd6:	f200 80cb 	bhi.w	8001170 <__udivmoddi4+0x2c0>
 8000fda:	4643      	mov	r3, r8
 8000fdc:	1a09      	subs	r1, r1, r0
 8000fde:	b2a4      	uxth	r4, r4
 8000fe0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fe4:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fec:	fb0e fe00 	mul.w	lr, lr, r0
 8000ff0:	45a6      	cmp	lr, r4
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x156>
 8000ff4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffc:	d202      	bcs.n	8001004 <__udivmoddi4+0x154>
 8000ffe:	45a6      	cmp	lr, r4
 8001000:	f200 80bb 	bhi.w	800117a <__udivmoddi4+0x2ca>
 8001004:	4608      	mov	r0, r1
 8001006:	eba4 040e 	sub.w	r4, r4, lr
 800100a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800100e:	e79c      	b.n	8000f4a <__udivmoddi4+0x9a>
 8001010:	f1c6 0720 	rsb	r7, r6, #32
 8001014:	40b3      	lsls	r3, r6
 8001016:	fa22 fc07 	lsr.w	ip, r2, r7
 800101a:	ea4c 0c03 	orr.w	ip, ip, r3
 800101e:	fa20 f407 	lsr.w	r4, r0, r7
 8001022:	fa01 f306 	lsl.w	r3, r1, r6
 8001026:	431c      	orrs	r4, r3
 8001028:	40f9      	lsrs	r1, r7
 800102a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800102e:	fa00 f306 	lsl.w	r3, r0, r6
 8001032:	fbb1 f8f9 	udiv	r8, r1, r9
 8001036:	0c20      	lsrs	r0, r4, #16
 8001038:	fa1f fe8c 	uxth.w	lr, ip
 800103c:	fb09 1118 	mls	r1, r9, r8, r1
 8001040:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001044:	fb08 f00e 	mul.w	r0, r8, lr
 8001048:	4288      	cmp	r0, r1
 800104a:	fa02 f206 	lsl.w	r2, r2, r6
 800104e:	d90b      	bls.n	8001068 <__udivmoddi4+0x1b8>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f108 3aff 	add.w	sl, r8, #4294967295
 8001058:	f080 8088 	bcs.w	800116c <__udivmoddi4+0x2bc>
 800105c:	4288      	cmp	r0, r1
 800105e:	f240 8085 	bls.w	800116c <__udivmoddi4+0x2bc>
 8001062:	f1a8 0802 	sub.w	r8, r8, #2
 8001066:	4461      	add	r1, ip
 8001068:	1a09      	subs	r1, r1, r0
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb1 f0f9 	udiv	r0, r1, r9
 8001070:	fb09 1110 	mls	r1, r9, r0, r1
 8001074:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001078:	fb00 fe0e 	mul.w	lr, r0, lr
 800107c:	458e      	cmp	lr, r1
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x1e2>
 8001080:	eb1c 0101 	adds.w	r1, ip, r1
 8001084:	f100 34ff 	add.w	r4, r0, #4294967295
 8001088:	d26c      	bcs.n	8001164 <__udivmoddi4+0x2b4>
 800108a:	458e      	cmp	lr, r1
 800108c:	d96a      	bls.n	8001164 <__udivmoddi4+0x2b4>
 800108e:	3802      	subs	r0, #2
 8001090:	4461      	add	r1, ip
 8001092:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001096:	fba0 9402 	umull	r9, r4, r0, r2
 800109a:	eba1 010e 	sub.w	r1, r1, lr
 800109e:	42a1      	cmp	r1, r4
 80010a0:	46c8      	mov	r8, r9
 80010a2:	46a6      	mov	lr, r4
 80010a4:	d356      	bcc.n	8001154 <__udivmoddi4+0x2a4>
 80010a6:	d053      	beq.n	8001150 <__udivmoddi4+0x2a0>
 80010a8:	b15d      	cbz	r5, 80010c2 <__udivmoddi4+0x212>
 80010aa:	ebb3 0208 	subs.w	r2, r3, r8
 80010ae:	eb61 010e 	sbc.w	r1, r1, lr
 80010b2:	fa01 f707 	lsl.w	r7, r1, r7
 80010b6:	fa22 f306 	lsr.w	r3, r2, r6
 80010ba:	40f1      	lsrs	r1, r6
 80010bc:	431f      	orrs	r7, r3
 80010be:	e9c5 7100 	strd	r7, r1, [r5]
 80010c2:	2600      	movs	r6, #0
 80010c4:	4631      	mov	r1, r6
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	f1c2 0320 	rsb	r3, r2, #32
 80010ce:	40d8      	lsrs	r0, r3
 80010d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010d4:	fa21 f303 	lsr.w	r3, r1, r3
 80010d8:	4091      	lsls	r1, r2
 80010da:	4301      	orrs	r1, r0
 80010dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010e0:	fa1f fe8c 	uxth.w	lr, ip
 80010e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80010e8:	fb07 3610 	mls	r6, r7, r0, r3
 80010ec:	0c0b      	lsrs	r3, r1, #16
 80010ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010f2:	fb00 f60e 	mul.w	r6, r0, lr
 80010f6:	429e      	cmp	r6, r3
 80010f8:	fa04 f402 	lsl.w	r4, r4, r2
 80010fc:	d908      	bls.n	8001110 <__udivmoddi4+0x260>
 80010fe:	eb1c 0303 	adds.w	r3, ip, r3
 8001102:	f100 38ff 	add.w	r8, r0, #4294967295
 8001106:	d22f      	bcs.n	8001168 <__udivmoddi4+0x2b8>
 8001108:	429e      	cmp	r6, r3
 800110a:	d92d      	bls.n	8001168 <__udivmoddi4+0x2b8>
 800110c:	3802      	subs	r0, #2
 800110e:	4463      	add	r3, ip
 8001110:	1b9b      	subs	r3, r3, r6
 8001112:	b289      	uxth	r1, r1
 8001114:	fbb3 f6f7 	udiv	r6, r3, r7
 8001118:	fb07 3316 	mls	r3, r7, r6, r3
 800111c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001120:	fb06 f30e 	mul.w	r3, r6, lr
 8001124:	428b      	cmp	r3, r1
 8001126:	d908      	bls.n	800113a <__udivmoddi4+0x28a>
 8001128:	eb1c 0101 	adds.w	r1, ip, r1
 800112c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001130:	d216      	bcs.n	8001160 <__udivmoddi4+0x2b0>
 8001132:	428b      	cmp	r3, r1
 8001134:	d914      	bls.n	8001160 <__udivmoddi4+0x2b0>
 8001136:	3e02      	subs	r6, #2
 8001138:	4461      	add	r1, ip
 800113a:	1ac9      	subs	r1, r1, r3
 800113c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001140:	e738      	b.n	8000fb4 <__udivmoddi4+0x104>
 8001142:	462e      	mov	r6, r5
 8001144:	4628      	mov	r0, r5
 8001146:	e705      	b.n	8000f54 <__udivmoddi4+0xa4>
 8001148:	4606      	mov	r6, r0
 800114a:	e6e3      	b.n	8000f14 <__udivmoddi4+0x64>
 800114c:	4618      	mov	r0, r3
 800114e:	e6f8      	b.n	8000f42 <__udivmoddi4+0x92>
 8001150:	454b      	cmp	r3, r9
 8001152:	d2a9      	bcs.n	80010a8 <__udivmoddi4+0x1f8>
 8001154:	ebb9 0802 	subs.w	r8, r9, r2
 8001158:	eb64 0e0c 	sbc.w	lr, r4, ip
 800115c:	3801      	subs	r0, #1
 800115e:	e7a3      	b.n	80010a8 <__udivmoddi4+0x1f8>
 8001160:	4646      	mov	r6, r8
 8001162:	e7ea      	b.n	800113a <__udivmoddi4+0x28a>
 8001164:	4620      	mov	r0, r4
 8001166:	e794      	b.n	8001092 <__udivmoddi4+0x1e2>
 8001168:	4640      	mov	r0, r8
 800116a:	e7d1      	b.n	8001110 <__udivmoddi4+0x260>
 800116c:	46d0      	mov	r8, sl
 800116e:	e77b      	b.n	8001068 <__udivmoddi4+0x1b8>
 8001170:	3b02      	subs	r3, #2
 8001172:	4461      	add	r1, ip
 8001174:	e732      	b.n	8000fdc <__udivmoddi4+0x12c>
 8001176:	4630      	mov	r0, r6
 8001178:	e709      	b.n	8000f8e <__udivmoddi4+0xde>
 800117a:	4464      	add	r4, ip
 800117c:	3802      	subs	r0, #2
 800117e:	e742      	b.n	8001006 <__udivmoddi4+0x156>

08001180 <__aeabi_idiv0>:
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <adcInit>:

static uint32_t adcValues[ADC_CHANNEL_MAX];


void adcInit(drv_adc_config_t *init)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    extern ADC_HandleTypeDef hadc1;

    // Start ADC
    HAL_ADC_Start_DMA(&hadc1, adcValues, ADC_CHANNEL_MAX);
 800118c:	2204      	movs	r2, #4
 800118e:	4904      	ldr	r1, [pc, #16]	; (80011a0 <adcInit+0x1c>)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <adcInit+0x20>)
 8001192:	f01a fad3 	bl	801b73c <HAL_ADC_Start_DMA>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001dc 	.word	0x200001dc
 80011a4:	200004c4 	.word	0x200004c4

080011a8 <actGetAdcChannel>:

uint16_t actGetAdcChannel(uint8_t channel)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
    return adcValues[channel];
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <actGetAdcChannel+0x20>)
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	b29b      	uxth	r3, r3
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	200001dc 	.word	0x200001dc

080011cc <actGetBatteryVoltage>:

float actGetBatteryVoltage()
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	return (adcValues[ADC_BATTERY] * 3.3f) / 4095;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <actGetBatteryVoltage+0x30>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011dc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001200 <actGetBatteryVoltage+0x34>
 80011e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001204 <actGetBatteryVoltage+0x38>
 80011e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80011f0:	eeb0 0a67 	vmov.f32	s0, s15
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	200001dc 	.word	0x200001dc
 8001200:	40533333 	.word	0x40533333
 8001204:	457ff000 	.word	0x457ff000

08001208 <actGetBatteryCurrent>:

uint32_t actGetBatteryCurrent()
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	return 5000 * adcValues[ADC_EXTERNAL_CURRENT] / 4095;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <actGetBatteryCurrent+0x28>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f241 3288 	movw	r2, #5000	; 0x1388
 8001214:	fb03 f202 	mul.w	r2, r3, r2
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <actGetBatteryCurrent+0x2c>)
 800121a:	fba3 1302 	umull	r1, r3, r3, r2
 800121e:	1ad2      	subs	r2, r2, r3
 8001220:	0852      	lsrs	r2, r2, #1
 8001222:	4413      	add	r3, r2
 8001224:	0adb      	lsrs	r3, r3, #11
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	200001dc 	.word	0x200001dc
 8001234:	00100101 	.word	0x00100101

08001238 <gy86Detect>:
// sync this with AccelSensors enum from board.h
static const char* hw_Names[] = { "MPU6500", "HMC5883L", "MS5611" };


bool gy86Detect(sensorSet_t *p_sensor_set, void* p_param)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	PifGy86Param param;

    (void)p_param;

    if (!pifGy86_Detect(&g_i2c_port)) {
 8001242:	4845      	ldr	r0, [pc, #276]	; (8001358 <gy86Detect+0x120>)
 8001244:	f017 f851 	bl	80182ea <pifGy86_Detect>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d105      	bne.n	800125a <gy86Detect+0x22>
        pifLog_Printf(LT_ERROR, "GY-86: Not found");
 800124e:	4943      	ldr	r1, [pc, #268]	; (800135c <gy86Detect+0x124>)
 8001250:	2004      	movs	r0, #4
 8001252:	f012 f8a7 	bl	80133a4 <pifLog_Printf>
        return false;
 8001256:	2300      	movs	r3, #0
 8001258:	e07a      	b.n	8001350 <gy86Detect+0x118>
    }

    // Set acc_1G. Modified once by mpu6050CheckRevision for old (hopefully nonexistent outside of clones) parts
    p_sensor_set->acc.acc_1G = 512 * 8;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001260:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98

    // 16.4 dps/lsb scalefactor for all Invensense devices
    p_sensor_set->gyro.scale = (4.0f / 16.4f) * (M_PI / 180.0f) * 0.000001f;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a3e      	ldr	r2, [pc, #248]	; (8001360 <gy86Detect+0x128>)
 8001268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    memset(&param, 0, sizeof(PifGy86Param));
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	2218      	movs	r2, #24
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f021 fc0f 	bl	8022a98 <memset>

    param.mpu60x0.clksel = MPU60X0_CLKSEL_PLL_ZGYRO;
 800127a:	2303      	movs	r3, #3
 800127c:	733b      	strb	r3, [r7, #12]
    // default lpf is 42Hz, 255 is special case of nolpf
    if (p_sensor_set->gyro.lpf == 255)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001284:	2bff      	cmp	r3, #255	; 0xff
 8001286:	d102      	bne.n	800128e <gy86Detect+0x56>
    	param.mpu60x0.dlpf_cfg = MPU60X0_DLPF_CFG_A260HZ_G256HZ;
 8001288:	2300      	movs	r3, #0
 800128a:	727b      	strb	r3, [r7, #9]
 800128c:	e029      	b.n	80012e2 <gy86Detect+0xaa>
    else if (p_sensor_set->gyro.lpf >= 188)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001294:	2bbb      	cmp	r3, #187	; 0xbb
 8001296:	d902      	bls.n	800129e <gy86Detect+0x66>
    	param.mpu60x0.dlpf_cfg = MPU60X0_DLPF_CFG_A184HZ_G188HZ;
 8001298:	2301      	movs	r3, #1
 800129a:	727b      	strb	r3, [r7, #9]
 800129c:	e021      	b.n	80012e2 <gy86Detect+0xaa>
    else if (p_sensor_set->gyro.lpf >= 98)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80012a4:	2b61      	cmp	r3, #97	; 0x61
 80012a6:	d902      	bls.n	80012ae <gy86Detect+0x76>
    	param.mpu60x0.dlpf_cfg = MPU60X0_DLPF_CFG_A94HZ_G98HZ;
 80012a8:	2302      	movs	r3, #2
 80012aa:	727b      	strb	r3, [r7, #9]
 80012ac:	e019      	b.n	80012e2 <gy86Detect+0xaa>
    else if (p_sensor_set->gyro.lpf >= 42)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80012b4:	2b29      	cmp	r3, #41	; 0x29
 80012b6:	d902      	bls.n	80012be <gy86Detect+0x86>
    	param.mpu60x0.dlpf_cfg = MPU60X0_DLPF_CFG_A44HZ_G42HZ;
 80012b8:	2303      	movs	r3, #3
 80012ba:	727b      	strb	r3, [r7, #9]
 80012bc:	e011      	b.n	80012e2 <gy86Detect+0xaa>
    else if (p_sensor_set->gyro.lpf >= 20)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80012c4:	2b13      	cmp	r3, #19
 80012c6:	d902      	bls.n	80012ce <gy86Detect+0x96>
    	param.mpu60x0.dlpf_cfg = MPU60X0_DLPF_CFG_A21HZ_G20HZ;
 80012c8:	2304      	movs	r3, #4
 80012ca:	727b      	strb	r3, [r7, #9]
 80012cc:	e009      	b.n	80012e2 <gy86Detect+0xaa>
    else if (p_sensor_set->gyro.lpf >= 10)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	d902      	bls.n	80012de <gy86Detect+0xa6>
    	param.mpu60x0.dlpf_cfg = MPU60X0_DLPF_CFG_A10HZ_G10HZ;
 80012d8:	2305      	movs	r3, #5
 80012da:	727b      	strb	r3, [r7, #9]
 80012dc:	e001      	b.n	80012e2 <gy86Detect+0xaa>
    else
    	param.mpu60x0.dlpf_cfg = MPU60X0_DLPF_CFG_A5HZ_G5HZ;
 80012de:	2306      	movs	r3, #6
 80012e0:	727b      	strb	r3, [r7, #9]
    param.mpu60x0.fs_sel = MPU60X0_FS_SEL_2000DPS;
 80012e2:	2303      	movs	r3, #3
 80012e4:	72bb      	strb	r3, [r7, #10]
    param.mpu60x0.afs_sel = MPU60X0_AFS_SEL_8G;
 80012e6:	2302      	movs	r3, #2
 80012e8:	72fb      	strb	r3, [r7, #11]
    param.mpu60x0_i2c_mst_clk = MPU60X0_I2C_MST_CLK_400KHZ;
 80012ea:	230d      	movs	r3, #13
 80012ec:	737b      	strb	r3, [r7, #13]

    param.hmc5883.gain = HMC5883_GAIN_1_3GA;
 80012ee:	2301      	movs	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
    param.hmc5883.samples = HMC5883_SAMPLES_8;
 80012f2:	2303      	movs	r3, #3
 80012f4:	747b      	strb	r3, [r7, #17]
    param.hmc5883.data_rate = HMC5883_DATARATE_75HZ;
 80012f6:	2306      	movs	r3, #6
 80012f8:	73bb      	strb	r3, [r7, #14]
    param.hmc5883.mode = HMC5883_MODE_CONTINOUS;
 80012fa:	2300      	movs	r3, #0
 80012fc:	743b      	strb	r3, [r7, #16]

#ifdef BARO
    param.ms5611.disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 80012fe:	2301      	movs	r3, #1
 8001300:	773b      	strb	r3, [r7, #28]
    param.ms5611.osr = MS5611_OSR_4096;
 8001302:	2308      	movs	r3, #8
 8001304:	753b      	strb	r3, [r7, #20]
    param.ms5611.read_period = 25;												// 25ms
 8001306:	2319      	movs	r3, #25
 8001308:	82fb      	strh	r3, [r7, #22]
    param.ms5611.evt_read = p_sensor_set->baro.evt_read;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001310:	61bb      	str	r3, [r7, #24]
#endif

    // initialize the device
    if (!mpu6050Init(p_sensor_set, &param)) return false;
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	4619      	mov	r1, r3
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f825 	bl	8001368 <mpu6050Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <gy86Detect+0xf0>
 8001324:	2300      	movs	r3, #0
 8001326:	e013      	b.n	8001350 <gy86Detect+0x118>

    p_sensor_set->gyro.hardware = hw_Names[0];
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <gy86Detect+0x12c>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	675a      	str	r2, [r3, #116]	; 0x74
    p_sensor_set->acc.hardware = hw_Names[0];
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <gy86Detect+0x12c>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    p_sensor_set->mag.hardware = hw_Names[1];
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <gy86Detect+0x12c>)
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    p_sensor_set->baro.hardware = hw_Names[2];
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <gy86Detect+0x12c>)
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    return true;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200014f8 	.word	0x200014f8
 800135c:	08025864 	.word	0x08025864
 8001360:	31924418 	.word	0x31924418
 8001364:	20000000 	.word	0x20000000

08001368 <mpu6050Init>:

static BOOL mpu6050Init(sensorSet_t *p_sensor_set, PifGy86Param* p_param)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af02      	add	r7, sp, #8
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
    if (!pifGy86_Init(&s_gy86, PIF_ID_AUTO, &g_i2c_port, p_param, &p_sensor_set->imu_sensor)) return FALSE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <mpu6050Init+0x68>)
 800137a:	2100      	movs	r1, #0
 800137c:	4815      	ldr	r0, [pc, #84]	; (80013d4 <mpu6050Init+0x6c>)
 800137e:	f016 ffc7 	bl	8018310 <pifGy86_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <mpu6050Init+0x24>
 8001388:	2300      	movs	r3, #0
 800138a:	e01c      	b.n	80013c6 <mpu6050Init+0x5e>
    s_gy86._mpu6050.gyro_scale = 4;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <mpu6050Init+0x6c>)
 800138e:	2204      	movs	r2, #4
 8001390:	711a      	strb	r2, [r3, #4]
    s_gy86._mpu6050.temp_scale = 100;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <mpu6050Init+0x6c>)
 8001394:	2264      	movs	r2, #100	; 0x64
 8001396:	719a      	strb	r2, [r3, #6]

    p_sensor_set->acc.init = mpuAccInit;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <mpu6050Init+0x70>)
 800139c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    p_sensor_set->acc.read = mpuAccRead;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <mpu6050Init+0x74>)
 80013a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    p_sensor_set->gyro.init = mpuGyroInit;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <mpu6050Init+0x78>)
 80013ac:	679a      	str	r2, [r3, #120]	; 0x78
    p_sensor_set->gyro.read = mpuGyroRead;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <mpu6050Init+0x7c>)
 80013b2:	67da      	str	r2, [r3, #124]	; 0x7c
    p_sensor_set->mag.init = hmc5883lInit;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <mpu6050Init+0x80>)
 80013b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    p_sensor_set->mag.read = hmc5883lRead;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <mpu6050Init+0x84>)
 80013c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    return TRUE;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200014f8 	.word	0x200014f8
 80013d4:	200001ec 	.word	0x200001ec
 80013d8:	080013f1 	.word	0x080013f1
 80013dc:	08001413 	.word	0x08001413
 80013e0:	08001431 	.word	0x08001431
 80013e4:	08001453 	.word	0x08001453
 80013e8:	08001471 	.word	0x08001471
 80013ec:	080014a1 	.word	0x080014a1

080013f0 <mpuAccInit>:

static BOOL mpuAccInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
    pifImuSensor_SetAccelAlign(&p_sensor_set->imu_sensor, align);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	78fa      	ldrb	r2, [r7, #3]
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f018 f843 	bl	801948e <pifImuSensor_SetAccelAlign>
    return TRUE;
 8001408:	2301      	movs	r3, #1
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <mpuAccRead>:

static BOOL mpuAccRead(sensorSet_t *p_sensor_set, float *accData)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
    return pifImuSensor_ReadRawAccel(&p_sensor_set->imu_sensor, accData);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6839      	ldr	r1, [r7, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f018 f846 	bl	80194b2 <pifImuSensor_ReadRawAccel>
 8001426:	4603      	mov	r3, r0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <mpuGyroInit>:

static BOOL mpuGyroInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]
    pifImuSensor_SetGyroAlign(&p_sensor_set->imu_sensor, align);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	78fa      	ldrb	r2, [r7, #3]
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f017 ffd2 	bl	80193ec <pifImuSensor_SetGyroAlign>
    return TRUE;
 8001448:	2301      	movs	r3, #1
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <mpuGyroRead>:

static BOOL mpuGyroRead(sensorSet_t *p_sensor_set, float *gyroData)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
	return pifImuSensor_ReadRawGyro(&p_sensor_set->imu_sensor, gyroData);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f017 ffd5 	bl	8019410 <pifImuSensor_ReadRawGyro>
 8001466:	4603      	mov	r3, r0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <hmc5883lInit>:

static BOOL hmc5883lInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
    pifImuSensor_SetMagAlign(&p_sensor_set->imu_sensor, align);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	78fa      	ldrb	r2, [r7, #3]
 8001480:	4611      	mov	r1, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f018 f854 	bl	8019530 <pifImuSensor_SetMagAlign>

    s_gy86._ms5611._p_task->pause = FALSE;
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <hmc5883lInit+0x2c>)
 800148a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148c:	2200      	movs	r2, #0
 800148e:	711a      	strb	r2, [r3, #4]
    return TRUE;
 8001490:	2301      	movs	r3, #1
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200001ec 	.word	0x200001ec

080014a0 <hmc5883lRead>:

static BOOL hmc5883lRead(sensorSet_t *p_sensor_set, float *magData)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
    // During calibration, magGain is 1.0, so the read returns normal non-calibrated values.
    // After calibration is done, magGain is set to calculated gain values.
	return pifImuSensor_ReadRawMag(&p_sensor_set->imu_sensor, magData);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6839      	ldr	r1, [r7, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f018 f851 	bl	8019556 <pifImuSensor_ReadRawMag>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <_actHcSr04Trigger>:

static sonarDistanceFuncPtr funcSonarDistance;


static void _actHcSr04Trigger(SWITCH state)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SONAR_TRIGGER_GPIO_Port, SONAR_TRIGGER_Pin, state);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	461a      	mov	r2, r3
 80014ce:	2101      	movs	r1, #1
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <_actHcSr04Trigger+0x24>)
 80014d2:	f01b fcb9 	bl	801ce48 <HAL_GPIO_WritePin>
    s_echo_state = 0;
 80014d6:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <_actHcSr04Trigger+0x28>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40020800 	.word	0x40020800
 80014e8:	20000270 	.word	0x20000270

080014ec <hcsr04Echo>:

void hcsr04Echo()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	s_echo_state ^= 1;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <hcsr04Echo+0x24>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	f083 0301 	eor.w	r3, r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <hcsr04Echo+0x24>)
 80014fc:	701a      	strb	r2, [r3, #0]
	pifHcSr04_sigReceiveEcho(&s_hcsr04, s_echo_state);
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <hcsr04Echo+0x24>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	4619      	mov	r1, r3
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <hcsr04Echo+0x28>)
 8001506:	f017 f995 	bl	8018834 <pifHcSr04_sigReceiveEcho>
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000270 	.word	0x20000270
 8001514:	20000250 	.word	0x20000250

08001518 <_evtHcSr04Distance>:

static void _evtHcSr04Distance(int32_t distance)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    float temp = (*funcSonarDistance)(distance);
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <_evtHcSr04Distance+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	4798      	blx	r3
 8001528:	ed87 0a03 	vstr	s0, [r7, #12]
    static float pretemp = 0;

    if (temp != pretemp) {
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <_evtHcSr04Distance+0x44>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	ed97 7a03 	vldr	s14, [r7, #12]
 8001536:	eeb4 7a67 	vcmp.f32	s14, s15
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	d007      	beq.n	8001550 <_evtHcSr04Distance+0x38>
        pifHcSr04_SetTemperature(&s_hcsr04, temp);
 8001540:	ed97 0a03 	vldr	s0, [r7, #12]
 8001544:	4806      	ldr	r0, [pc, #24]	; (8001560 <_evtHcSr04Distance+0x48>)
 8001546:	f017 f94d 	bl	80187e4 <pifHcSr04_SetTemperature>
        pretemp = temp;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <_evtHcSr04Distance+0x44>)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6013      	str	r3, [r2, #0]
    }
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000274 	.word	0x20000274
 800155c:	20000278 	.word	0x20000278
 8001560:	20000250 	.word	0x20000250

08001564 <hcsr04Init>:

BOOL hcsr04Init(uint16_t period, sonarDistanceFuncPtr func)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	80fb      	strh	r3, [r7, #6]
	if (!pifHcSr04_Init(&s_hcsr04, PIF_ID_AUTO)) return FALSE;
 8001570:	2100      	movs	r1, #0
 8001572:	4810      	ldr	r0, [pc, #64]	; (80015b4 <hcsr04Init+0x50>)
 8001574:	f017 f8aa 	bl	80186cc <pifHcSr04_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <hcsr04Init+0x1e>
 800157e:	2300      	movs	r3, #0
 8001580:	e013      	b.n	80015aa <hcsr04Init+0x46>
	s_hcsr04.act_trigger = _actHcSr04Trigger;
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <hcsr04Init+0x50>)
 8001584:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <hcsr04Init+0x54>)
 8001586:	601a      	str	r2, [r3, #0]
	s_hcsr04.evt_read = _evtHcSr04Distance;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <hcsr04Init+0x50>)
 800158a:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <hcsr04Init+0x58>)
 800158c:	605a      	str	r2, [r3, #4]
	if (!pifHcSr04_StartTrigger(&s_hcsr04, period)) return FALSE;
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	4619      	mov	r1, r3
 8001592:	4808      	ldr	r0, [pc, #32]	; (80015b4 <hcsr04Init+0x50>)
 8001594:	f017 f902 	bl	801879c <pifHcSr04_StartTrigger>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <hcsr04Init+0x3e>
 800159e:	2300      	movs	r3, #0
 80015a0:	e003      	b.n	80015aa <hcsr04Init+0x46>

	funcSonarDistance = func;
 80015a2:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <hcsr04Init+0x5c>)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	6013      	str	r3, [r2, #0]
    return TRUE;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000250 	.word	0x20000250
 80015b8:	080014c1 	.word	0x080014c1
 80015bc:	08001519 	.word	0x08001519
 80015c0:	20000274 	.word	0x20000274

080015c4 <actI2cRead>:
#endif

#ifdef USE_I2C_DMA

PifI2cReturn actI2cRead(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4603      	mov	r3, r0
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	4613      	mov	r3, r2
 80015d4:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 80015d6:	7bbb      	ldrb	r3, [r7, #14]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d019      	beq.n	8001610 <actI2cRead+0x4c>
		return (HAL_I2C_Mem_Read_DMA(&hi2c1, (addr << 1) | 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	b299      	uxth	r1, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	7bbb      	ldrb	r3, [r7, #14]
 80015f0:	b298      	uxth	r0, r3
 80015f2:	8b3b      	ldrh	r3, [r7, #24]
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	4603      	mov	r3, r0
 80015fc:	480f      	ldr	r0, [pc, #60]	; (800163c <actI2cRead+0x78>)
 80015fe:	f01c f95d 	bl	801d8bc <HAL_I2C_Mem_Read_DMA>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <actI2cRead+0x48>
 8001608:	2300      	movs	r3, #0
 800160a:	e013      	b.n	8001634 <actI2cRead+0x70>
 800160c:	2302      	movs	r3, #2
 800160e:	e011      	b.n	8001634 <actI2cRead+0x70>
	}
	else {
		return (HAL_I2C_Master_Receive_DMA(&hi2c1, (addr << 1) | 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	b21b      	sxth	r3, r3
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	b21b      	sxth	r3, r3
 800161c:	b299      	uxth	r1, r3
 800161e:	8b3b      	ldrh	r3, [r7, #24]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <actI2cRead+0x78>)
 8001624:	f01b feb6 	bl	801d394 <HAL_I2C_Master_Receive_DMA>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <actI2cRead+0x6e>
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <actI2cRead+0x70>
 8001632:	2302      	movs	r3, #2
	}
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000056c 	.word	0x2000056c

08001640 <actI2cWrite>:

PifI2cReturn actI2cWrite(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af02      	add	r7, sp, #8
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4603      	mov	r3, r0
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	4613      	mov	r3, r2
 8001650:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 8001652:	7bbb      	ldrb	r3, [r7, #14]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d016      	beq.n	8001686 <actI2cWrite+0x46>
		return (HAL_I2C_Mem_Write_DMA(&hi2c1, addr << 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	b29b      	uxth	r3, r3
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	b299      	uxth	r1, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	b29a      	uxth	r2, r3
 8001664:	7bbb      	ldrb	r3, [r7, #14]
 8001666:	b298      	uxth	r0, r3
 8001668:	8b3b      	ldrh	r3, [r7, #24]
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4603      	mov	r3, r0
 8001672:	480e      	ldr	r0, [pc, #56]	; (80016ac <actI2cWrite+0x6c>)
 8001674:	f01b ffbe 	bl	801d5f4 <HAL_I2C_Mem_Write_DMA>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <actI2cWrite+0x42>
 800167e:	2300      	movs	r3, #0
 8001680:	e010      	b.n	80016a4 <actI2cWrite+0x64>
 8001682:	2302      	movs	r3, #2
 8001684:	e00e      	b.n	80016a4 <actI2cWrite+0x64>
	}
	else {
		return (HAL_I2C_Master_Transmit_DMA(&hi2c1, addr << 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	b29b      	uxth	r3, r3
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	b299      	uxth	r1, r3
 800168e:	8b3b      	ldrh	r3, [r7, #24]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <actI2cWrite+0x6c>)
 8001694:	f01b fd4e 	bl	801d134 <HAL_I2C_Master_Transmit_DMA>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <actI2cWrite+0x62>
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <actI2cWrite+0x64>
 80016a2:	2302      	movs	r3, #2
	}
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000056c 	.word	0x2000056c

080016b0 <HAL_I2C_MemRxCpltCallback>:
#endif

#if defined(USE_I2C_INTERRUPT) || defined(USE_I2C_DMA)

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <HAL_I2C_MemRxCpltCallback+0x24>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d103      	bne.n	80016ca <HAL_I2C_MemRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 80016c2:	2101      	movs	r1, #1
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <HAL_I2C_MemRxCpltCallback+0x28>)
 80016c6:	f010 ff23 	bl	8012510 <pifI2cPort_sigEndTransfer>
	}
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40005400 	.word	0x40005400
 80016d8:	200014f8 	.word	0x200014f8

080016dc <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a05      	ldr	r2, [pc, #20]	; (8001700 <HAL_I2C_MasterRxCpltCallback+0x24>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d103      	bne.n	80016f6 <HAL_I2C_MasterRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 80016ee:	2101      	movs	r1, #1
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <HAL_I2C_MasterRxCpltCallback+0x28>)
 80016f2:	f010 ff0d 	bl	8012510 <pifI2cPort_sigEndTransfer>
	}
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40005400 	.word	0x40005400
 8001704:	200014f8 	.word	0x200014f8

08001708 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_I2C_MemTxCpltCallback+0x24>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d103      	bne.n	8001722 <HAL_I2C_MemTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 800171a:	2101      	movs	r1, #1
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <HAL_I2C_MemTxCpltCallback+0x28>)
 800171e:	f010 fef7 	bl	8012510 <pifI2cPort_sigEndTransfer>
	}
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40005400 	.word	0x40005400
 8001730:	200014f8 	.word	0x200014f8

08001734 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a05      	ldr	r2, [pc, #20]	; (8001758 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d103      	bne.n	800174e <HAL_I2C_MasterTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001746:	2101      	movs	r1, #1
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <HAL_I2C_MasterTxCpltCallback+0x28>)
 800174a:	f010 fee1 	bl	8012510 <pifI2cPort_sigEndTransfer>
	}
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40005400 	.word	0x40005400
 800175c:	200014f8 	.word	0x200014f8

08001760 <i2cInit>:

#endif

BOOL i2cInit()
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
    if (!pifI2cPort_Init(&g_i2c_port, PIF_ID_AUTO, 5, EEPROM_PAGE_SIZE)) return FALSE;
 8001764:	2340      	movs	r3, #64	; 0x40
 8001766:	2205      	movs	r2, #5
 8001768:	2100      	movs	r1, #0
 800176a:	4808      	ldr	r0, [pc, #32]	; (800178c <i2cInit+0x2c>)
 800176c:	f010 fbce 	bl	8011f0c <pifI2cPort_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <i2cInit+0x1a>
 8001776:	2300      	movs	r3, #0
 8001778:	e006      	b.n	8001788 <i2cInit+0x28>
    g_i2c_port.act_read = actI2cRead;
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <i2cInit+0x2c>)
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <i2cInit+0x30>)
 800177e:	605a      	str	r2, [r3, #4]
    g_i2c_port.act_write = actI2cWrite;
 8001780:	4b02      	ldr	r3, [pc, #8]	; (800178c <i2cInit+0x2c>)
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <i2cInit+0x34>)
 8001784:	609a      	str	r2, [r3, #8]
    return TRUE;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200014f8 	.word	0x200014f8
 8001790:	080015c5 	.word	0x080015c5
 8001794:	08001641 	.word	0x08001641

08001798 <failsafeCheck>:

#define PWM_TIMER_MHZ 1
#define PWM_TIMER_8_MHZ 8

static void failsafeCheck(uint8_t channel, uint16_t pulse)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
    static uint8_t goodPulses;

    if (channel < 4 && pulse > failsafeThreshold)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d811      	bhi.n	80017d2 <failsafeCheck+0x3a>
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <failsafeCheck+0x78>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	88ba      	ldrh	r2, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d90c      	bls.n	80017d2 <failsafeCheck+0x3a>
        goodPulses |= (1 << channel);       // if signal is valid - mark channel as OK
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	2201      	movs	r2, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	b25a      	sxtb	r2, r3
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <failsafeCheck+0x7c>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <failsafeCheck+0x7c>)
 80017d0:	701a      	strb	r2, [r3, #0]
    if (goodPulses == 0x0F) {               // If first four chanells have good pulses, clear FailSafe counter
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <failsafeCheck+0x7c>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	d114      	bne.n	8001804 <failsafeCheck+0x6c>
        goodPulses = 0;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <failsafeCheck+0x7c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
        if (failsafeCnt > 20)
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <failsafeCheck+0x80>)
 80017e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e6:	2b14      	cmp	r3, #20
 80017e8:	dd09      	ble.n	80017fe <failsafeCheck+0x66>
            failsafeCnt -= 20;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <failsafeCheck+0x80>)
 80017ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	3b14      	subs	r3, #20
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <failsafeCheck+0x80>)
 80017fa:	801a      	strh	r2, [r3, #0]
        else
            failsafeCnt = 0;
    }
}
 80017fc:	e002      	b.n	8001804 <failsafeCheck+0x6c>
            failsafeCnt = 0;
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <failsafeCheck+0x80>)
 8001800:	2200      	movs	r2, #0
 8001802:	801a      	strh	r2, [r3, #0]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	2000000c 	.word	0x2000000c
 8001814:	20000381 	.word	0x20000381
 8001818:	20001728 	.word	0x20001728

0800181c <pwmReadRc>:

void pwmReadRc()
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
	uint16_t value = pifRcPpm_sigTick(&s_rc.ppm, (*pif_act_timer1us)());
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <pwmReadRc+0x3c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4798      	blx	r3
 8001828:	4603      	mov	r3, r0
 800182a:	4619      	mov	r1, r3
 800182c:	480b      	ldr	r0, [pc, #44]	; (800185c <pwmReadRc+0x40>)
 800182e:	f016 fc74 	bl	801811a <pifRcPpm_sigTick>
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
    if (value) {
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <pwmReadRc+0x32>
        failsafeCheck(s_rc.ppm._channel, value);
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <pwmReadRc+0x40>)
 800183e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	88fa      	ldrh	r2, [r7, #6]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ffa5 	bl	8001798 <failsafeCheck>
    }
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20001c34 	.word	0x20001c34
 800185c:	2000027c 	.word	0x2000027c

08001860 <_evtRcReceive>:

static void _evtRcReceive(PifRc* p_owner, uint16_t* p_channel, PifIssuerP p_issuer)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
    PifTask* p_task = (PifTask*)p_issuer;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	613b      	str	r3, [r7, #16]
    int i;

	for (i = 0; i < p_owner->_channel_count; i++) {
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	e00b      	b.n	800188e <_evtRcReceive+0x2e>
		captures[i] = p_channel[i];
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	4413      	add	r3, r2
 800187e:	8819      	ldrh	r1, [r3, #0]
 8001880:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <_evtRcReceive+0x48>)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < p_owner->_channel_count; i++) {
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3301      	adds	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	789b      	ldrb	r3, [r3, #2]
 8001892:	461a      	mov	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	4293      	cmp	r3, r2
 8001898:	dbed      	blt.n	8001876 <_evtRcReceive+0x16>
	}
    pifTask_SetTrigger(p_task);
 800189a:	6938      	ldr	r0, [r7, #16]
 800189c:	f012 fe1c 	bl	80144d8 <pifTask_SetTrigger>
}
 80018a0:	bf00      	nop
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000308 	.word	0x20000308

080018ac <pwmWriteStandard>:

static void pwmWriteStandard(uint8_t index, uint16_t value)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	460a      	mov	r2, r1
 80018b6:	71fb      	strb	r3, [r7, #7]
 80018b8:	4613      	mov	r3, r2
 80018ba:	80bb      	strh	r3, [r7, #4]
	switch (motors[index]->port) {
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <pwmWriteStandard+0x8c>)
 80018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c4:	78db      	ldrb	r3, [r3, #3]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d830      	bhi.n	800192c <pwmWriteStandard+0x80>
 80018ca:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <pwmWriteStandard+0x24>)
 80018cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d0:	08001905 	.word	0x08001905
 80018d4:	0800192d 	.word	0x0800192d
 80018d8:	0800192d 	.word	0x0800192d
 80018dc:	0800192d 	.word	0x0800192d
 80018e0:	0800190f 	.word	0x0800190f
 80018e4:	0800192d 	.word	0x0800192d
 80018e8:	0800192d 	.word	0x0800192d
 80018ec:	0800192d 	.word	0x0800192d
 80018f0:	08001919 	.word	0x08001919
 80018f4:	0800192d 	.word	0x0800192d
 80018f8:	0800192d 	.word	0x0800192d
 80018fc:	0800192d 	.word	0x0800192d
 8001900:	08001923 	.word	0x08001923
	case TIM_CHANNEL_1:	htim3.Instance->CCR1 = value; break;
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <pwmWriteStandard+0x90>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	88ba      	ldrh	r2, [r7, #4]
 800190a:	635a      	str	r2, [r3, #52]	; 0x34
 800190c:	e00e      	b.n	800192c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_2:	htim3.Instance->CCR2 = value; break;
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <pwmWriteStandard+0x90>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	88ba      	ldrh	r2, [r7, #4]
 8001914:	639a      	str	r2, [r3, #56]	; 0x38
 8001916:	e009      	b.n	800192c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_3:	htim3.Instance->CCR3 = value; break;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <pwmWriteStandard+0x90>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	88ba      	ldrh	r2, [r7, #4]
 800191e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001920:	e004      	b.n	800192c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_4:	htim3.Instance->CCR4 = value; break;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <pwmWriteStandard+0x90>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	88ba      	ldrh	r2, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	; 0x40
 800192a:	bf00      	nop
	}
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	20000328 	.word	0x20000328
 800193c:	2000071c 	.word	0x2000071c

08001940 <pwmInit>:

bool pwmInit(drv_pwm_config_t *init)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    const hardwareMaps_t *setup;
    uint16_t period;
    pwmPortData_t *p;

    // to avoid importing cfg/mcfg
    failsafeThreshold = init->failsafeThreshold;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	8a5a      	ldrh	r2, [r3, #18]
 8001950:	4b8c      	ldr	r3, [pc, #560]	; (8001b84 <pwmInit+0x244>)
 8001952:	801a      	strh	r2, [r3, #0]
    // pwm filtering on input
    pwmFilter = init->pwmFilter;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	79da      	ldrb	r2, [r3, #7]
 8001958:	4b8b      	ldr	r3, [pc, #556]	; (8001b88 <pwmInit+0x248>)
 800195a:	701a      	strb	r2, [r3, #0]

    syncPWM = init->syncPWM;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7d1a      	ldrb	r2, [r3, #20]
 8001960:	4b8a      	ldr	r3, [pc, #552]	; (8001b8c <pwmInit+0x24c>)
 8001962:	701a      	strb	r2, [r3, #0]

    // this is pretty hacky shit, but it will do for now. array of 4 config maps, [ multiPWM multiPPM airPWM airPPM ]
    if (init->airplane)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	799b      	ldrb	r3, [r3, #6]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <pwmInit+0x30>
        i = 2; // switch to air hardware config
 800196c:	2302      	movs	r3, #2
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    if (init->usePPM)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	785b      	ldrb	r3, [r3, #1]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <pwmInit+0x3e>
        i++; // next index is for PPM
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	3301      	adds	r3, #1
 800197c:	627b      	str	r3, [r7, #36]	; 0x24

    setup = hardwareMaps[i];
 800197e:	4a84      	ldr	r2, [pc, #528]	; (8001b90 <pwmInit+0x250>)
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < MAX_PORTS; i++) {
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
 800198c:	e0ae      	b.n	8001aec <pwmInit+0x1ac>
        uint8_t pwm = setup[i].pwm;
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4413      	add	r3, r2
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	75fb      	strb	r3, [r7, #23]
        uint8_t type = setup[i].type;
 800199e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4413      	add	r3, r2
 80019aa:	785b      	ldrb	r3, [r3, #1]
 80019ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (pwm == 0xFF) // terminator
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	f000 809f 	beq.w	8001af6 <pwmInit+0x1b6>
            break;

        // hacks to allow current functionality
        if ((type & (TYPE_IP | TYPE_IW)) && !init->enableInput)
 80019b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d009      	beq.n	80019d8 <pwmInit+0x98>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	f083 0301 	eor.w	r3, r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <pwmInit+0x98>
        	type = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (type & TYPE_IP) {
 80019d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d008      	beq.n	80019f6 <pwmInit+0xb6>
            p = &pwmPorts[pwm];
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4a6a      	ldr	r2, [pc, #424]	; (8001b94 <pwmInit+0x254>)
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
            numInputs = 8;
 80019ee:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <pwmInit+0x258>)
 80019f0:	2208      	movs	r2, #8
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	e077      	b.n	8001ae6 <pwmInit+0x1a6>
        } else if (type & TYPE_IW) {
 80019f6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019fa:	f003 0320 	and.w	r3, r3, #32
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d171      	bne.n	8001ae6 <pwmInit+0x1a6>
				attachInterrupt(setup[i].port, _isrPulseWidth8, CHANGE);
				break;
			}
			numInputs++;
*/
        } else if (type & TYPE_M) {
 8001a02:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d04e      	beq.n	8001aac <pwmInit+0x16c>
            uint32_t hz, mhz;

            if (init->motorPwmRate > 500 || init->fastPWM)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	895b      	ldrh	r3, [r3, #10]
 8001a12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a16:	d803      	bhi.n	8001a20 <pwmInit+0xe0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7d5b      	ldrb	r3, [r3, #21]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <pwmInit+0xe6>
                mhz = PWM_TIMER_8_MHZ;
 8001a20:	2308      	movs	r3, #8
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	e001      	b.n	8001a2a <pwmInit+0xea>
            else
                mhz = PWM_TIMER_MHZ;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]

            hz = mhz * 1000000;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	4a5b      	ldr	r2, [pc, #364]	; (8001b9c <pwmInit+0x25c>)
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	613b      	str	r3, [r7, #16]

            if (init->fastPWM)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7d5b      	ldrb	r3, [r3, #21]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <pwmInit+0x10a>
                period = hz / 4000;
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4a58      	ldr	r2, [pc, #352]	; (8001ba0 <pwmInit+0x260>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	847b      	strh	r3, [r7, #34]	; 0x22
 8001a48:	e006      	b.n	8001a58 <pwmInit+0x118>
            else
                period = hz / init->motorPwmRate;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	895b      	ldrh	r3, [r3, #10]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a56:	847b      	strh	r3, [r7, #34]	; 0x22

            pwmPorts[pwm].period = period;
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	494e      	ldr	r1, [pc, #312]	; (8001b94 <pwmInit+0x254>)
 8001a5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001a5e:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
            pwmPorts[pwm].port = setup[i].port;
 8001a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	441a      	add	r2, r3
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	7891      	ldrb	r1, [r2, #2]
 8001a72:	4a48      	ldr	r2, [pc, #288]	; (8001b94 <pwmInit+0x254>)
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	460a      	mov	r2, r1
 8001a7a:	70da      	strb	r2, [r3, #3]
            HAL_TIM_PWM_Start(&htim3, pwmPorts[pwm].port);
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	4a45      	ldr	r2, [pc, #276]	; (8001b94 <pwmInit+0x254>)
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	78db      	ldrb	r3, [r3, #3]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4846      	ldr	r0, [pc, #280]	; (8001ba4 <pwmInit+0x264>)
 8001a8a:	f01e fe75 	bl	8020778 <HAL_TIM_PWM_Start>
            motors[numMotors++] = &pwmPorts[pwm];
 8001a8e:	7dfa      	ldrb	r2, [r7, #23]
 8001a90:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <pwmInit+0x268>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	1c59      	adds	r1, r3, #1
 8001a96:	b2c8      	uxtb	r0, r1
 8001a98:	4943      	ldr	r1, [pc, #268]	; (8001ba8 <pwmInit+0x268>)
 8001a9a:	7008      	strb	r0, [r1, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	0093      	lsls	r3, r2, #2
 8001aa0:	4a3c      	ldr	r2, [pc, #240]	; (8001b94 <pwmInit+0x254>)
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a41      	ldr	r2, [pc, #260]	; (8001bac <pwmInit+0x26c>)
 8001aa6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001aaa:	e01c      	b.n	8001ae6 <pwmInit+0x1a6>
        } else if (type & TYPE_S) {
 8001aac:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da18      	bge.n	8001ae6 <pwmInit+0x1a6>
        	pwmPorts[pwm].period = 1000000 / init->servoPwmRate;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	899b      	ldrh	r3, [r3, #12]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <pwmInit+0x25c>)
 8001abc:	fb93 f2f2 	sdiv	r2, r3, r2
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	b291      	uxth	r1, r2
 8001ac4:	4a33      	ldr	r2, [pc, #204]	; (8001b94 <pwmInit+0x254>)
 8001ac6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
            servos[numServos++] = &pwmPorts[pwm];
 8001aca:	7dfa      	ldrb	r2, [r7, #23]
 8001acc:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <pwmInit+0x270>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	1c59      	adds	r1, r3, #1
 8001ad2:	b2c8      	uxtb	r0, r1
 8001ad4:	4936      	ldr	r1, [pc, #216]	; (8001bb0 <pwmInit+0x270>)
 8001ad6:	7008      	strb	r0, [r1, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	0093      	lsls	r3, r2, #2
 8001adc:	4a2d      	ldr	r2, [pc, #180]	; (8001b94 <pwmInit+0x254>)
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a34      	ldr	r2, [pc, #208]	; (8001bb4 <pwmInit+0x274>)
 8001ae2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (i = 0; i < MAX_PORTS; i++) {
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	3301      	adds	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	2b0d      	cmp	r3, #13
 8001af0:	f77f af4d 	ble.w	800198e <pwmInit+0x4e>
 8001af4:	e000      	b.n	8001af8 <pwmInit+0x1b8>
            break;
 8001af6:	bf00      	nop
        }
    }

    if (init->enableInput) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d035      	beq.n	8001b6c <pwmInit+0x22c>
		if (init->usePPM) {
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	785b      	ldrb	r3, [r3, #1]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d019      	beq.n	8001b3c <pwmInit+0x1fc>
			if (pifRcPpm_Init(&s_rc.ppm, PIF_ID_AUTO, numInputs, 2700)) {
 8001b08:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <pwmInit+0x258>)
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	f640 238c 	movw	r3, #2700	; 0xa8c
 8001b10:	2100      	movs	r1, #0
 8001b12:	4829      	ldr	r0, [pc, #164]	; (8001bb8 <pwmInit+0x278>)
 8001b14:	f016 fa8e 	bl	8018034 <pifRcPpm_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d026      	beq.n	8001b6c <pwmInit+0x22c>
				pifRcPpm_SetValidRange(&s_rc.ppm, PULSE_MIN, PULSE_MAX);
 8001b1e:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001b22:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001b26:	4824      	ldr	r0, [pc, #144]	; (8001bb8 <pwmInit+0x278>)
 8001b28:	f016 fad6 	bl	80180d8 <pifRcPpm_SetValidRange>
				pifRc_AttachEvtReceive(&s_rc.ppm.parent, _evtRcReceive, g_task_compute_rc);
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <pwmInit+0x27c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4923      	ldr	r1, [pc, #140]	; (8001bc0 <pwmInit+0x280>)
 8001b34:	4820      	ldr	r0, [pc, #128]	; (8001bb8 <pwmInit+0x278>)
 8001b36:	f016 f9a1 	bl	8017e7c <pifRc_AttachEvtReceive>
 8001b3a:	e017      	b.n	8001b6c <pwmInit+0x22c>
			}
		}
		else {
			if (pifRcPwm_Init(&s_rc.pwm, PIF_ID_AUTO, numInputs)) {
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <pwmInit+0x258>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	2100      	movs	r1, #0
 8001b44:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <pwmInit+0x278>)
 8001b46:	f016 fb35 	bl	80181b4 <pifRcPwm_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00d      	beq.n	8001b6c <pwmInit+0x22c>
				pifRcPwm_SetValidRange(&s_rc.pwm, PULSE_MIN, PULSE_MAX);
 8001b50:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001b54:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001b58:	4817      	ldr	r0, [pc, #92]	; (8001bb8 <pwmInit+0x278>)
 8001b5a:	f016 fba5 	bl	80182a8 <pifRcPwm_SetValidRange>
				pifRc_AttachEvtReceive(&s_rc.pwm.parent, _evtRcReceive, g_task_compute_rc);
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <pwmInit+0x27c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	4916      	ldr	r1, [pc, #88]	; (8001bc0 <pwmInit+0x280>)
 8001b66:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <pwmInit+0x278>)
 8001b68:	f016 f988 	bl	8017e7c <pifRc_AttachEvtReceive>
			}
		}
    }

    // determine motor writer function
    pwmWritePtr = pwmWriteStandard;
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <pwmInit+0x284>)
 8001b6e:	4a16      	ldr	r2, [pc, #88]	; (8001bc8 <pwmInit+0x288>)
 8001b70:	601a      	str	r2, [r3, #0]

    // set return values in init struct
    init->numServos = numServos;
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <pwmInit+0x270>)
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	759a      	strb	r2, [r3, #22]

    return false;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3728      	adds	r7, #40	; 0x28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000000c 	.word	0x2000000c
 8001b88:	2000037f 	.word	0x2000037f
 8001b8c:	20000380 	.word	0x20000380
 8001b90:	0802796c 	.word	0x0802796c
 8001b94:	200002d0 	.word	0x200002d0
 8001b98:	2000037e 	.word	0x2000037e
 8001b9c:	000f4240 	.word	0x000f4240
 8001ba0:	10624dd3 	.word	0x10624dd3
 8001ba4:	2000071c 	.word	0x2000071c
 8001ba8:	2000037c 	.word	0x2000037c
 8001bac:	20000328 	.word	0x20000328
 8001bb0:	2000037d 	.word	0x2000037d
 8001bb4:	20000358 	.word	0x20000358
 8001bb8:	2000027c 	.word	0x2000027c
 8001bbc:	20001550 	.word	0x20001550
 8001bc0:	08001861 	.word	0x08001861
 8001bc4:	20000378 	.word	0x20000378
 8001bc8:	080018ad 	.word	0x080018ad

08001bcc <actPwmWriteMotor>:

void actPwmWriteMotor(uint8_t index, uint16_t value)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	71fb      	strb	r3, [r7, #7]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	80bb      	strh	r3, [r7, #4]
    if (index < numMotors)
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <actPwmWriteMotor+0x30>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	79fa      	ldrb	r2, [r7, #7]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d205      	bcs.n	8001bf2 <actPwmWriteMotor+0x26>
        pwmWritePtr(index, value);
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <actPwmWriteMotor+0x34>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	88b9      	ldrh	r1, [r7, #4]
 8001bec:	79fa      	ldrb	r2, [r7, #7]
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4798      	blx	r3
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	2000037c 	.word	0x2000037c
 8001c00:	20000378 	.word	0x20000378

08001c04 <actPwmWriteServo>:

void actPwmWriteServo(uint8_t index, uint16_t value)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	4613      	mov	r3, r2
 8001c12:	80bb      	strh	r3, [r7, #4]
//    if (index < numServos)
//    	analogWrite(servos[index]->port, value);
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <actPwmRead>:

uint16_t actPwmRead(uint8_t channel)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
    return captures[channel];
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <actPwmRead+0x20>)
 8001c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000308 	.word	0x20000308

08001c44 <systemInit>:
	PifStorageVar s_storage;
#endif


void systemInit(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
#ifdef BUZZER
    actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001c4e:	f000 f8ad 	bl	8001dac <actBuzzerAction>
#endif
    actLed0State(OFF);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f000 f852 	bl	8001cfc <actLed0State>
    actLed1State(OFF);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f000 f87b 	bl	8001d54 <actLed1State>
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <failureMode>:

void failureMode(uint8_t mode)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
#ifndef __PIF_NO_LOG__
    pifLog_SendAndExit();
 8001c6c:	f011 fc62 	bl	8013534 <pifLog_SendAndExit>
#endif
    actLed1State(OFF);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f000 f86f 	bl	8001d54 <actLed1State>
    actLed0State(ON);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f000 f840 	bl	8001cfc <actLed0State>
    while (1) {
        actLed1Toggle();
 8001c7c:	f000 f880 	bl	8001d80 <actLed1Toggle>
        actLed0Toggle();
 8001c80:	f000 f852 	bl	8001d28 <actLed0Toggle>
        pif_Delay1ms(475 * mode - 2);
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	0052      	lsls	r2, r2, #1
 8001c8c:	441a      	add	r2, r3
 8001c8e:	0152      	lsls	r2, r2, #5
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	0091      	lsls	r1, r2, #2
 8001c96:	461a      	mov	r2, r3
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b02      	subs	r3, #2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00f f9d4 	bl	8011050 <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 8001ca8:	2101      	movs	r1, #1
 8001caa:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001cae:	f000 f87d 	bl	8001dac <actBuzzerAction>
        pif_Delay1ms(25);
 8001cb2:	2019      	movs	r0, #25
 8001cb4:	f00f f9cc 	bl	8011050 <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001cbe:	f000 f875 	bl	8001dac <actBuzzerAction>
        actLed1Toggle();
 8001cc2:	e7db      	b.n	8001c7c <failureMode+0x1a>

08001cc4 <systemReset>:
    }
}

void systemReset(bool toBootloader)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
	pifLog_Printf(LT_INFO, "System Rebooting %d...", toBootloader);
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <systemReset+0x2c>)
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	f011 fb65 	bl	80133a4 <pifLog_Printf>
	pif_Delay1ms(2000);
 8001cda:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cde:	f00f f9b7 	bl	8011050 <pif_Delay1ms>
//	__DSB;
	SCB->AIRCR = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk);//software reset
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <systemReset+0x30>)
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <systemReset+0x34>)
 8001ce6:	60da      	str	r2, [r3, #12]
	//RSTC->RSTC_CR = RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
	//NVIC_SystemReset();
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	08025878 	.word	0x08025878
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	05fa0004 	.word	0x05fa0004

08001cfc <actLed0State>:

static BOOL len0_state = OFF;

void actLed0State(BOOL state)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
#ifdef LED0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, state);
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2110      	movs	r1, #16
 8001d0c:	4804      	ldr	r0, [pc, #16]	; (8001d20 <actLed0State+0x24>)
 8001d0e:	f01b f89b 	bl	801ce48 <HAL_GPIO_WritePin>
    len0_state = state;
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <actLed0State+0x28>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40020800 	.word	0x40020800
 8001d24:	200003cc 	.word	0x200003cc

08001d28 <actLed0Toggle>:

void actLed0Toggle()
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
#ifdef LED0
	len0_state ^= 1;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <actLed0Toggle+0x24>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	f083 0301 	eor.w	r3, r3, #1
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <actLed0Toggle+0x24>)
 8001d38:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, len0_state);
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <actLed0Toggle+0x24>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2110      	movs	r1, #16
 8001d42:	4803      	ldr	r0, [pc, #12]	; (8001d50 <actLed0Toggle+0x28>)
 8001d44:	f01b f880 	bl	801ce48 <HAL_GPIO_WritePin>
#endif
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200003cc 	.word	0x200003cc
 8001d50:	40020800 	.word	0x40020800

08001d54 <actLed1State>:

static BOOL len1_state = OFF;

void actLed1State(BOOL state)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
#ifdef LED1
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	461a      	mov	r2, r3
 8001d62:	2104      	movs	r1, #4
 8001d64:	4804      	ldr	r0, [pc, #16]	; (8001d78 <actLed1State+0x24>)
 8001d66:	f01b f86f 	bl	801ce48 <HAL_GPIO_WritePin>
    len1_state = state;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <actLed1State+0x28>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	200003cd 	.word	0x200003cd

08001d80 <actLed1Toggle>:

void actLed1Toggle()
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
#ifdef LED1
	len1_state ^= 1;
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <actLed1Toggle+0x24>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	f083 0301 	eor.w	r3, r3, #1
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <actLed1Toggle+0x24>)
 8001d90:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, len1_state);
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <actLed1Toggle+0x24>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	2104      	movs	r1, #4
 8001d9a:	4803      	ldr	r0, [pc, #12]	; (8001da8 <actLed1Toggle+0x28>)
 8001d9c:	f01b f854 	bl	801ce48 <HAL_GPIO_WritePin>
#endif
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200003cd 	.word	0x200003cd
 8001da8:	40020400 	.word	0x40020400

08001dac <actBuzzerAction>:

void actBuzzerAction(PifId id, BOOL action)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	460a      	mov	r2, r1
 8001db6:	80fb      	strh	r3, [r7, #6]
 8001db8:	4613      	mov	r3, r2
 8001dba:	717b      	strb	r3, [r7, #5]
	(void)id;

#ifdef BUZZER
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, action);
 8001dbc:	797b      	ldrb	r3, [r7, #5]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2120      	movs	r1, #32
 8001dc2:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <actBuzzerAction+0x24>)
 8001dc4:	f01b f840 	bl	801ce48 <HAL_GPIO_WritePin>
#else
    (void)action;
#endif
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40020800 	.word	0x40020800

08001dd4 <HAL_GPIO_EXTI_Callback>:
    (void)state;
#endif
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80fb      	strh	r3, [r7, #6]
	extern void hcsr04Echo();

    switch (GPIO_Pin) {
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d005      	beq.n	8001df0 <HAL_GPIO_EXTI_Callback+0x1c>
 8001de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001de8:	d105      	bne.n	8001df6 <HAL_GPIO_EXTI_Callback+0x22>
    case RC_PPM_Pin:
    	pwmReadRc();
 8001dea:	f7ff fd17 	bl	800181c <pwmReadRc>
		break;
 8001dee:	e002      	b.n	8001df6 <HAL_GPIO_EXTI_Callback+0x22>

    case SONAR_ECHO_Pin:
    	hcsr04Echo();
 8001df0:	f7ff fb7c 	bl	80014ec <hcsr04Echo>
    	break;
 8001df4:	bf00      	nop
    }
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <storageInit>:
}

#endif

PifStorage* storageInit()
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af02      	add	r7, sp, #8
	if (!pifStorageFix_Init(&s_storage, PIF_ID_AUTO)) return NULL;
	if (!pifStorageFix_AttachActStorage(&s_storage, actStorageRead, actStorageWrite)) goto fail;
	if (!pifStorageFix_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME)) goto fail;
#endif
#ifdef STORAGE_EEPROM
	if (!pifStorageVar_Init(&s_storage, PIF_ID_AUTO)) return NULL;
 8001e06:	2100      	movs	r1, #0
 8001e08:	4822      	ldr	r0, [pc, #136]	; (8001e94 <storageInit+0x94>)
 8001e0a:	f018 ff21 	bl	801ac50 <pifStorageVar_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <storageInit+0x18>
 8001e14:	2300      	movs	r3, #0
 8001e16:	e039      	b.n	8001e8c <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 8001e18:	230a      	movs	r3, #10
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	2250      	movs	r2, #80	; 0x50
 8001e20:	491d      	ldr	r1, [pc, #116]	; (8001e98 <storageInit+0x98>)
 8001e22:	481c      	ldr	r0, [pc, #112]	; (8001e94 <storageInit+0x94>)
 8001e24:	f019 f85c 	bl	801aee0 <pifStorageVar_AttachI2c>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d027      	beq.n	8001e7e <storageInit+0x7e>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 8001e2e:	2308      	movs	r3, #8
 8001e30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e34:	2140      	movs	r1, #64	; 0x40
 8001e36:	4817      	ldr	r0, [pc, #92]	; (8001e94 <storageInit+0x94>)
 8001e38:	f018 ff80 	bl	801ad3c <pifStorageVar_SetMedia>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01f      	beq.n	8001e82 <storageInit+0x82>
	if (!pifStorageVar_IsFormat(&s_storage.parent)) {
 8001e42:	4814      	ldr	r0, [pc, #80]	; (8001e94 <storageInit+0x94>)
 8001e44:	f019 f865 	bl	801af12 <pifStorageVar_IsFormat>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d115      	bne.n	8001e7a <storageInit+0x7a>
		pifLog_Printf(LT_INFO, "Storage Init : EC=%d", pif_error);
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <storageInit+0x9c>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	4912      	ldr	r1, [pc, #72]	; (8001ea0 <storageInit+0xa0>)
 8001e56:	2002      	movs	r0, #2
 8001e58:	f011 faa4 	bl	80133a4 <pifLog_Printf>
		if (!pifStorage_Format(&s_storage.parent)) {
 8001e5c:	480d      	ldr	r0, [pc, #52]	; (8001e94 <storageInit+0x94>)
 8001e5e:	f018 fe14 	bl	801aa8a <pifStorage_Format>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d104      	bne.n	8001e72 <storageInit+0x72>
			pifLog_Printf(LT_INFO, "Storage format failed");
 8001e68:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <storageInit+0xa4>)
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	f011 fa9a 	bl	80133a4 <pifLog_Printf>
			goto fail;
 8001e70:	e008      	b.n	8001e84 <storageInit+0x84>
		}
		else {
			pifLog_Printf(LT_INFO, "Storage format");
 8001e72:	490d      	ldr	r1, [pc, #52]	; (8001ea8 <storageInit+0xa8>)
 8001e74:	2002      	movs	r0, #2
 8001e76:	f011 fa95 	bl	80133a4 <pifLog_Printf>
		}
	}
#endif
	return &s_storage.parent;
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <storageInit+0x94>)
 8001e7c:	e006      	b.n	8001e8c <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 8001e7e:	bf00      	nop
 8001e80:	e000      	b.n	8001e84 <storageInit+0x84>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 8001e82:	bf00      	nop
fail:
#ifdef STORAGE_FLASH
	pifStorageFix_Clear(&s_storage);
#endif
#ifdef STORAGE_EEPROM
	pifStorageVar_Clear(&s_storage);
 8001e84:	4803      	ldr	r0, [pc, #12]	; (8001e94 <storageInit+0x94>)
 8001e86:	f018 ff2f 	bl	801ace8 <pifStorageVar_Clear>
#endif
	return NULL;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000384 	.word	0x20000384
 8001e98:	200014f8 	.word	0x200014f8
 8001e9c:	20001c0d 	.word	0x20001c0d
 8001ea0:	08025890 	.word	0x08025890
 8001ea4:	080258a8 	.word	0x080258a8
 8001ea8:	080258c0 	.word	0x080258c0

08001eac <actUartSetBaudRate>:
#endif
static uartPort_t uartPort[3];


static BOOL actUartSetBaudRate(PifComm* p_comm, uint32_t baudrate)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	8a1b      	ldrh	r3, [r3, #16]
 8001eba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ebe:	019b      	lsls	r3, r3, #6
 8001ec0:	4a11      	ldr	r2, [pc, #68]	; (8001f08 <actUartSetBaudRate+0x5c>)
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]

	if (p_uart->p_huart->Init.BaudRate == baudrate) return TRUE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d101      	bne.n	8001ed6 <actUartSetBaudRate+0x2a>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e013      	b.n	8001efe <actUartSetBaudRate+0x52>

	HAL_UART_DeInit(p_uart->p_huart);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eda:	4618      	mov	r0, r3
 8001edc:	f01f fc75 	bl	80217ca <HAL_UART_DeInit>
	p_uart->p_huart->Init.BaudRate = baudrate;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(p_uart->p_huart) != HAL_OK) {
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	4618      	mov	r0, r3
 8001eee:	f01f fc1f 	bl	8021730 <HAL_UART_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <actUartSetBaudRate+0x50>
		return FALSE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e000      	b.n	8001efe <actUartSetBaudRate+0x52>
	}
	return TRUE;
 8001efc:	2301      	movs	r3, #1
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000404 	.word	0x20000404

08001f0c <actUartStartTransfer>:

static BOOL actUartStartTransfer(PifComm* p_comm)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	8a1b      	ldrh	r3, [r3, #16]
 8001f18:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f1c:	019b      	lsls	r3, r3, #6
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <actUartStartTransfer+0x5c>)
 8001f20:	4413      	add	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]

	p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2208      	movs	r2, #8
 8001f28:	879a      	strh	r2, [r3, #60]	; 0x3c
	state = pifComm_StartGetTxData(p_comm, &p_data, &p_uart->tx_frame_size);
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	4619      	mov	r1, r3
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f00f ff22 	bl	8011d80 <pifComm_StartGetTxData>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 8001f40:	7cfb      	ldrb	r3, [r7, #19]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <actUartStartTransfer+0x52>
		HAL_UART_Transmit_IT(p_uart->p_huart, p_data, p_uart->tx_frame_size);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f4e:	68f9      	ldr	r1, [r7, #12]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001f54:	461a      	mov	r2, r3
 8001f56:	f01f fc67 	bl	8021828 <HAL_UART_Transmit_IT>
		return TRUE;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <actUartStartTransfer+0x54>
	}
	return FALSE;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000404 	.word	0x20000404

08001f6c <actLogStartTransfer>:

#ifndef __PIF_NO_LOG__

static BOOL actLogStartTransfer(PifComm* p_comm)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	uint8_t *p_data, state;

	s_usLogTx = 0;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <actLogStartTransfer+0x48>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	801a      	strh	r2, [r3, #0]
	state = pifComm_StartGetTxData(p_comm, &p_data, &s_usLogTx);
 8001f7a:	f107 0308 	add.w	r3, r7, #8
 8001f7e:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <actLogStartTransfer+0x48>)
 8001f80:	4619      	mov	r1, r3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f00f fefc 	bl	8011d80 <pifComm_StartGetTxData>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	73fb      	strb	r3, [r7, #15]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d008      	beq.n	8001fa8 <actLogStartTransfer+0x3c>
		HAL_UART_Transmit_IT(&huart2, p_data, s_usLogTx);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <actLogStartTransfer+0x48>)
 8001f9a:	8812      	ldrh	r2, [r2, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <actLogStartTransfer+0x4c>)
 8001fa0:	f01f fc42 	bl	8021828 <HAL_UART_Transmit_IT>
		return TRUE;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <actLogStartTransfer+0x3e>
	}
	return FALSE;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000400 	.word	0x20000400
 8001fb8:	200007a8 	.word	0x200007a8

08001fbc <logOpen>:

BOOL logOpen()
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af02      	add	r7, sp, #8
	pifLog_Init();
 8001fc2:	f011 f903 	bl	80131cc <pifLog_Init>

	if (!pifComm_Init(&s_comm_log, PIF_ID_AUTO)) return FALSE;
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4816      	ldr	r0, [pc, #88]	; (8002024 <logOpen+0x68>)
 8001fca:	f00f fdc3 	bl	8011b54 <pifComm_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <logOpen+0x1c>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e022      	b.n	800201e <logOpen+0x62>
	if (!pifComm_AttachTask(&s_comm_log, TM_PERIOD_MS, 1, TRUE, "C-Log")) return FALSE;			// 1ms
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <logOpen+0x6c>)
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	2301      	movs	r3, #1
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	4810      	ldr	r0, [pc, #64]	; (8002024 <logOpen+0x68>)
 8001fe4:	f00f ff60 	bl	8011ea8 <pifComm_AttachTask>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <logOpen+0x36>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e015      	b.n	800201e <logOpen+0x62>
	if (!pifComm_AllocTxBuffer(&s_comm_log, 256)) return FALSE;
 8001ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff6:	480b      	ldr	r0, [pc, #44]	; (8002024 <logOpen+0x68>)
 8001ff8:	f00f fe40 	bl	8011c7c <pifComm_AllocTxBuffer>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <logOpen+0x4a>
 8002002:	2300      	movs	r3, #0
 8002004:	e00b      	b.n	800201e <logOpen+0x62>
	s_comm_log.act_start_transfer = actLogStartTransfer;
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <logOpen+0x68>)
 8002008:	4a08      	ldr	r2, [pc, #32]	; (800202c <logOpen+0x70>)
 800200a:	60da      	str	r2, [r3, #12]

	if (!pifLog_AttachComm(&s_comm_log)) return FALSE;
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <logOpen+0x68>)
 800200e:	f011 fa57 	bl	80134c0 <pifLog_AttachComm>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <logOpen+0x60>
 8002018:	2300      	movs	r3, #0
 800201a:	e000      	b.n	800201e <logOpen+0x62>
	return TRUE;
 800201c:	2301      	movs	r3, #1
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200003d0 	.word	0x200003d0
 8002028:	080258e8 	.word	0x080258e8
 800202c:	08001f6d 	.word	0x08001f6d

08002030 <uartOpen>:

#endif

serialPort_t *uartOpen(int port, uint32_t baudRate, portMode_t mode, uint8_t period)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08c      	sub	sp, #48	; 0x30
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	4611      	mov	r1, r2
 800203c:	461a      	mov	r2, r3
 800203e:	460b      	mov	r3, r1
 8002040:	71fb      	strb	r3, [r7, #7]
 8002042:	4613      	mov	r3, r2
 8002044:	71bb      	strb	r3, [r7, #6]
    uartPort_t *s = NULL;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t rx_size = 16;
 800204a:	2310      	movs	r3, #16
 800204c:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t tmp;
	const char* names[] = { "Comm-1", "Comm-2", "Comm-3" };
 800204e:	4a47      	ldr	r2, [pc, #284]	; (800216c <uartOpen+0x13c>)
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	ca07      	ldmia	r2, {r0, r1, r2}
 8002056:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if (port == UART_PORT_1) {
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <uartOpen+0x3c>
        s = &uartPort[0];
 8002060:	4b43      	ldr	r3, [pc, #268]	; (8002170 <uartOpen+0x140>)
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
        s->p_huart = &huart1;
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	4a43      	ldr	r2, [pc, #268]	; (8002174 <uartOpen+0x144>)
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
 800206a:	e00a      	b.n	8002082 <uartOpen+0x52>
    else if (port == UART_PORT_2) {
        s = &uartPort[1];
        s->p_huart = &huart2;
    }
#endif
    else if (port == UART_PORT_3) {
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d105      	bne.n	800207e <uartOpen+0x4e>
        s = &uartPort[2];
 8002072:	4b41      	ldr	r3, [pc, #260]	; (8002178 <uartOpen+0x148>)
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
        s->p_huart = &huart6;
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	4a40      	ldr	r2, [pc, #256]	; (800217c <uartOpen+0x14c>)
 800207a:	639a      	str	r2, [r3, #56]	; 0x38
 800207c:	e001      	b.n	8002082 <uartOpen+0x52>
    }
    else return NULL;
 800207e:	2300      	movs	r3, #0
 8002080:	e06f      	b.n	8002162 <uartOpen+0x132>

    tmp = period * 115200 / 10000;
 8002082:	79bb      	ldrb	r3, [r7, #6]
 8002084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	4a3c      	ldr	r2, [pc, #240]	; (8002180 <uartOpen+0x150>)
 800208e:	fb82 1203 	smull	r1, r2, r2, r3
 8002092:	1312      	asrs	r2, r2, #12
 8002094:	17db      	asrs	r3, r3, #31
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	843b      	strh	r3, [r7, #32]
    while (tmp >= rx_size) rx_size <<= 1;
 800209a:	e002      	b.n	80020a2 <uartOpen+0x72>
 800209c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	847b      	strh	r3, [r7, #34]	; 0x22
 80020a2:	8c3a      	ldrh	r2, [r7, #32]
 80020a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d2f8      	bcs.n	800209c <uartOpen+0x6c>
	s->init = TRUE;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	if (!pifComm_Init(&s->port.comm, PIF_ID_UART(port - 1))) return FALSE;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	1d1a      	adds	r2, r3, #4
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	33ff      	adds	r3, #255	; 0xff
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4619      	mov	r1, r3
 80020c0:	4610      	mov	r0, r2
 80020c2:	f00f fd47 	bl	8011b54 <pifComm_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <uartOpen+0xa0>
 80020cc:	2300      	movs	r3, #0
 80020ce:	e048      	b.n	8002162 <uartOpen+0x132>
	if (!pifComm_AttachTask(&s->port.comm, TM_PERIOD_MS, period, TRUE, names[port - 1])) return FALSE;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	1d18      	adds	r0, r3, #4
 80020d4:	79bb      	ldrb	r3, [r7, #6]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3b01      	subs	r3, #1
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	3328      	adds	r3, #40	; 0x28
 80020e0:	443b      	add	r3, r7
 80020e2:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	2102      	movs	r1, #2
 80020ec:	f00f fedc 	bl	8011ea8 <pifComm_AttachTask>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <uartOpen+0xca>
 80020f6:	2300      	movs	r3, #0
 80020f8:	e033      	b.n	8002162 <uartOpen+0x132>
	if (!pifComm_AllocRxBuffer(&s->port.comm, rx_size, rx_size / 2)) return FALSE;
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	1d18      	adds	r0, r3, #4
 80020fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002100:	085b      	lsrs	r3, r3, #1
 8002102:	b29b      	uxth	r3, r3
 8002104:	b2da      	uxtb	r2, r3
 8002106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002108:	4619      	mov	r1, r3
 800210a:	f00f fd73 	bl	8011bf4 <pifComm_AllocRxBuffer>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <uartOpen+0xe8>
 8002114:	2300      	movs	r3, #0
 8002116:	e024      	b.n	8002162 <uartOpen+0x132>
	if (!pifComm_AllocTxBuffer(&s->port.comm, 64)) return FALSE;
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	3304      	adds	r3, #4
 800211c:	2140      	movs	r1, #64	; 0x40
 800211e:	4618      	mov	r0, r3
 8002120:	f00f fdac 	bl	8011c7c <pifComm_AllocTxBuffer>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <uartOpen+0xfe>
 800212a:	2300      	movs	r3, #0
 800212c:	e019      	b.n	8002162 <uartOpen+0x132>
	s->port.comm.act_set_baudrate = actUartSetBaudRate;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	4a14      	ldr	r2, [pc, #80]	; (8002184 <uartOpen+0x154>)
 8002132:	605a      	str	r2, [r3, #4]
	s->port.comm.act_start_transfer = actUartStartTransfer;
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	4a14      	ldr	r2, [pc, #80]	; (8002188 <uartOpen+0x158>)
 8002138:	611a      	str	r2, [r3, #16]

    // callback for IRQ-based RX ONLY
    if (!serialSetBaudRate(&s->port, baudRate)) {
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f8f0 	bl	8002324 <serialSetBaudRate>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <uartOpen+0x128>
    	pifComm_Clear(&s->port.comm);
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	3304      	adds	r3, #4
 800214e:	4618      	mov	r0, r3
 8002150:	f00f fd2a 	bl	8011ba8 <pifComm_Clear>
    	return FALSE;
 8002154:	2300      	movs	r3, #0
 8002156:	e004      	b.n	8002162 <uartOpen+0x132>
    }

	s->init = FALSE;
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    return (serialPort_t *)s;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002162:	4618      	mov	r0, r3
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	080258f0 	.word	0x080258f0
 8002170:	20000404 	.word	0x20000404
 8002174:	20000764 	.word	0x20000764
 8002178:	20000484 	.word	0x20000484
 800217c:	200007ec 	.word	0x200007ec
 8002180:	68db8bad 	.word	0x68db8bad
 8002184:	08001ead 	.word	0x08001ead
 8002188:	08001f0d 	.word	0x08001f0d

0800218c <HAL_UART_TxCpltCallback>:

// Handlers

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a39      	ldr	r2, [pc, #228]	; (8002280 <HAL_UART_TxCpltCallback+0xf4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d102      	bne.n	80021a4 <HAL_UART_TxCpltCallback+0x18>
		p_uart = &uartPort[0];
 800219e:	4b39      	ldr	r3, [pc, #228]	; (8002284 <HAL_UART_TxCpltCallback+0xf8>)
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e035      	b.n	8002210 <HAL_UART_TxCpltCallback+0x84>
	}
	else if (huart->Instance == USART2) {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a37      	ldr	r2, [pc, #220]	; (8002288 <HAL_UART_TxCpltCallback+0xfc>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d129      	bne.n	8002202 <HAL_UART_TxCpltCallback+0x76>
#ifndef __PIF_NO_LOG__
		state = pifComm_EndGetTxData(&s_comm_log, s_usLogTx);
 80021ae:	4b37      	ldr	r3, [pc, #220]	; (800228c <HAL_UART_TxCpltCallback+0x100>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	4619      	mov	r1, r3
 80021b4:	4836      	ldr	r0, [pc, #216]	; (8002290 <HAL_UART_TxCpltCallback+0x104>)
 80021b6:	f00f fe1b 	bl	8011df0 <pifComm_EndGetTxData>
 80021ba:	4603      	mov	r3, r0
 80021bc:	74fb      	strb	r3, [r7, #19]
		if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 80021be:	7cfb      	ldrb	r3, [r7, #19]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_UART_TxCpltCallback+0x44>
			pifComm_FinishTransfer(&s_comm_log);
 80021c8:	4831      	ldr	r0, [pc, #196]	; (8002290 <HAL_UART_TxCpltCallback+0x104>)
 80021ca:	f00f fe2a 	bl	8011e22 <pifComm_FinishTransfer>
			state = pifComm_StartGetTxData(&s_comm_log, &p_data, &s_usLogTx);
			if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
			}
		}
		return;
 80021ce:	e050      	b.n	8002272 <HAL_UART_TxCpltCallback+0xe6>
			s_usLogTx = 0;
 80021d0:	4b2e      	ldr	r3, [pc, #184]	; (800228c <HAL_UART_TxCpltCallback+0x100>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	801a      	strh	r2, [r3, #0]
			state = pifComm_StartGetTxData(&s_comm_log, &p_data, &s_usLogTx);
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	4a2c      	ldr	r2, [pc, #176]	; (800228c <HAL_UART_TxCpltCallback+0x100>)
 80021dc:	4619      	mov	r1, r3
 80021de:	482c      	ldr	r0, [pc, #176]	; (8002290 <HAL_UART_TxCpltCallback+0x104>)
 80021e0:	f00f fdce 	bl	8011d80 <pifComm_StartGetTxData>
 80021e4:	4603      	mov	r3, r0
 80021e6:	74fb      	strb	r3, [r7, #19]
			if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d03f      	beq.n	8002272 <HAL_UART_TxCpltCallback+0xe6>
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4a25      	ldr	r2, [pc, #148]	; (800228c <HAL_UART_TxCpltCallback+0x100>)
 80021f6:	8812      	ldrh	r2, [r2, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f01f fb14 	bl	8021828 <HAL_UART_Transmit_IT>
		return;
 8002200:	e037      	b.n	8002272 <HAL_UART_TxCpltCallback+0xe6>
#else
		p_uart = &uartPort[1];
#endif
	}
	else if (huart->Instance == USART6) {
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a23      	ldr	r2, [pc, #140]	; (8002294 <HAL_UART_TxCpltCallback+0x108>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d134      	bne.n	8002276 <HAL_UART_TxCpltCallback+0xea>
		p_uart = &uartPort[2];
 800220c:	4b22      	ldr	r3, [pc, #136]	; (8002298 <HAL_UART_TxCpltCallback+0x10c>)
 800220e:	617b      	str	r3, [r7, #20]
	}
	else return;

	state = pifComm_EndGetTxData(&p_uart->port.comm, p_uart->tx_frame_size);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	1d1a      	adds	r2, r3, #4
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f00f fde8 	bl	8011df0 <pifComm_EndGetTxData>
 8002220:	4603      	mov	r3, r0
 8002222:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_UART_TxCpltCallback+0xae>
		pifComm_FinishTransfer(&p_uart->port.comm);
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3304      	adds	r3, #4
 8002232:	4618      	mov	r0, r3
 8002234:	f00f fdf5 	bl	8011e22 <pifComm_FinishTransfer>
 8002238:	e01e      	b.n	8002278 <HAL_UART_TxCpltCallback+0xec>
	}
	else {
		p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2208      	movs	r2, #8
 800223e:	879a      	strh	r2, [r3, #60]	; 0x3c
		state = pifComm_StartGetTxData(&p_uart->port.comm, &p_data, &p_uart->tx_frame_size);
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	1d18      	adds	r0, r3, #4
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800224a:	f107 030c 	add.w	r3, r7, #12
 800224e:	4619      	mov	r1, r3
 8002250:	f00f fd96 	bl	8011d80 <pifComm_StartGetTxData>
 8002254:	4603      	mov	r3, r0
 8002256:	74fb      	strb	r3, [r7, #19]
		if (state & 1) {
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_UART_TxCpltCallback+0xec>
			HAL_UART_Transmit_IT(huart, p_data, p_uart->tx_frame_size);
 8002262:	68f9      	ldr	r1, [r7, #12]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002268:	461a      	mov	r2, r3
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f01f fadc 	bl	8021828 <HAL_UART_Transmit_IT>
 8002270:	e002      	b.n	8002278 <HAL_UART_TxCpltCallback+0xec>
		return;
 8002272:	bf00      	nop
 8002274:	e000      	b.n	8002278 <HAL_UART_TxCpltCallback+0xec>
	else return;
 8002276:	bf00      	nop
		}
	}
}
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40011000 	.word	0x40011000
 8002284:	20000404 	.word	0x20000404
 8002288:	40004400 	.word	0x40004400
 800228c:	20000400 	.word	0x20000400
 8002290:	200003d0 	.word	0x200003d0
 8002294:	40011400 	.word	0x40011400
 8002298:	20000484 	.word	0x20000484

0800229c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a18      	ldr	r2, [pc, #96]	; (800230c <HAL_UART_RxCpltCallback+0x70>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d102      	bne.n	80022b4 <HAL_UART_RxCpltCallback+0x18>
		p_uart = &uartPort[0];
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_UART_RxCpltCallback+0x74>)
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	e00e      	b.n	80022d2 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART2) {
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a16      	ldr	r2, [pc, #88]	; (8002314 <HAL_UART_RxCpltCallback+0x78>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d102      	bne.n	80022c4 <HAL_UART_RxCpltCallback+0x28>
		p_uart = &uartPort[1];
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <HAL_UART_RxCpltCallback+0x7c>)
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e006      	b.n	80022d2 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART6) {
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <HAL_UART_RxCpltCallback+0x80>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d117      	bne.n	80022fe <HAL_UART_RxCpltCallback+0x62>
		p_uart = &uartPort[2];
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_UART_RxCpltCallback+0x84>)
 80022d0:	60fb      	str	r3, [r7, #12]
	}
	else return;

	if (p_uart->init) return;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d112      	bne.n	8002302 <HAL_UART_RxCpltCallback+0x66>

	pifComm_PutRxByte(&p_uart->port.comm, p_uart->rx_frame);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1d1a      	adds	r2, r3, #4
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022e6:	4619      	mov	r1, r3
 80022e8:	4610      	mov	r0, r2
 80022ea:	f00f fd1c 	bl	8011d26 <pifComm_PutRxByte>
	HAL_UART_Receive_IT(huart, &p_uart->rx_frame, 1);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	333e      	adds	r3, #62	; 0x3e
 80022f2:	2201      	movs	r2, #1
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f01f fadb 	bl	80218b2 <HAL_UART_Receive_IT>
 80022fc:	e002      	b.n	8002304 <HAL_UART_RxCpltCallback+0x68>
	else return;
 80022fe:	bf00      	nop
 8002300:	e000      	b.n	8002304 <HAL_UART_RxCpltCallback+0x68>
	if (p_uart->init) return;
 8002302:	bf00      	nop
}
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40011000 	.word	0x40011000
 8002310:	20000404 	.word	0x20000404
 8002314:	40004400 	.word	0x40004400
 8002318:	20000444 	.word	0x20000444
 800231c:	40011400 	.word	0x40011400
 8002320:	20000484 	.word	0x20000484

08002324 <serialSetBaudRate>:

BOOL serialSetBaudRate(serialPort_t* instance, uint32_t baudRate)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
   	return (*instance->comm.act_set_baudrate)(&instance->comm, baudRate);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	3204      	adds	r2, #4
 8002336:	6839      	ldr	r1, [r7, #0]
 8002338:	4610      	mov	r0, r2
 800233a:	4798      	blx	r3
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <serialStartReceiveFunc>:

BOOL serialStartReceiveFunc(PifComm* p_comm)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8a1b      	ldrh	r3, [r3, #16]
 8002354:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002358:	019b      	lsls	r3, r3, #6
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <serialStartReceiveFunc+0x3c>)
 800235c:	4413      	add	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]

	if (HAL_UART_Receive_IT(p_uart->p_huart, &p_uart->rx_frame, 1) != HAL_OK) return FALSE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	333e      	adds	r3, #62	; 0x3e
 8002368:	2201      	movs	r2, #1
 800236a:	4619      	mov	r1, r3
 800236c:	f01f faa1 	bl	80218b2 <HAL_UART_Receive_IT>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <serialStartReceiveFunc+0x32>
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <serialStartReceiveFunc+0x34>
	return TRUE;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000404 	.word	0x20000404

08002388 <serialStopReceiveFunc>:

BOOL serialStopReceiveFunc(PifComm* p_comm)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	8a1b      	ldrh	r3, [r3, #16]
 8002394:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002398:	019b      	lsls	r3, r3, #6
 800239a:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <serialStopReceiveFunc+0x2c>)
 800239c:	4413      	add	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]

	HAL_UART_Abort_IT(p_uart->p_huart);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	4618      	mov	r0, r3
 80023a6:	f01f fab5 	bl	8021914 <HAL_UART_Abort_IT>
	return TRUE;
 80023aa:	2301      	movs	r3, #1
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000404 	.word	0x20000404

080023b8 <micros>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t micros()
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT;
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <micros+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	200006d4 	.word	0x200006d4

080023d0 <featureDefault>:

static void featureDefault(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
    featureSet(FEATURE_VBAT);
 80023d4:	2002      	movs	r0, #2
 80023d6:	f004 fced 	bl	8006db4 <featureSet>
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <actTaskSignal>:

#ifndef __PIF_NO_LOG__

void actTaskSignal(BOOL state)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, state);
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	461a      	mov	r2, r3
 80023ee:	2120      	movs	r1, #32
 80023f0:	4803      	ldr	r0, [pc, #12]	; (8002400 <actTaskSignal+0x20>)
 80023f2:	f01a fd29 	bl	801ce48 <HAL_GPIO_WritePin>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40020000 	.word	0x40020000

08002404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b08f      	sub	sp, #60	; 0x3c
 8002408:	af02      	add	r7, sp, #8
#else
	#define FAIL { goto fail; }
#endif
    drv_pwm_config_t pwm_params;
    drv_adc_config_t adc_params;
    bool sensorsOK = false;
 800240a:	2300      	movs	r3, #0
 800240c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002410:	f019 f8de 	bl	801b5d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002414:	f000 fb36 	bl	8002a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002418:	f000 fe1c 	bl	8003054 <MX_GPIO_Init>
  MX_DMA_Init();
 800241c:	f000 fddc 	bl	8002fd8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002420:	f000 fd86 	bl	8002f30 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002424:	f000 fc14 	bl	8002c50 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002428:	f000 fcba 	bl	8002da0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800242c:	f000 fd56 	bl	8002edc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002430:	f000 fda8 	bl	8002f84 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8002434:	f000 fb90 	bl	8002b58 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002438:	f000 fc66 	bl	8002d08 <MX_TIM2_Init>
  MX_I2C2_Init();
 800243c:	f000 fc36 	bl	8002cac <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002440:	2100      	movs	r1, #0
 8002442:	4896      	ldr	r0, [pc, #600]	; (800269c <main+0x298>)
 8002444:	f01e fa48 	bl	80208d8 <HAL_TIM_IC_Start_IT>

    pif_Init(micros);
 8002448:	4895      	ldr	r0, [pc, #596]	; (80026a0 <main+0x29c>)
 800244a:	f00e fd2d 	bl	8010ea8 <pif_Init>

    if (!pifTaskManager_Init(20)) FAIL;
 800244e:	2014      	movs	r0, #20
 8002450:	f012 f8a2 	bl	8014598 <pifTaskManager_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <main+0x5c>
 800245a:	23af      	movs	r3, #175	; 0xaf
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
 800245e:	e2f7      	b.n	8002a50 <main+0x64c>

#ifdef __PIF_DEBUG__
    pif_act_task_signal = actTaskSignal;
 8002460:	4b90      	ldr	r3, [pc, #576]	; (80026a4 <main+0x2a0>)
 8002462:	4a91      	ldr	r2, [pc, #580]	; (80026a8 <main+0x2a4>)
 8002464:	601a      	str	r2, [r3, #0]
#endif

#ifndef __PIF_NO_LOG__
    logOpen();
 8002466:	f7ff fda9 	bl	8001fbc <logOpen>
#endif

    if (!pifTimerManager_Init(&g_timer_1ms, PIF_ID_AUTO, 1000, 3)) FAIL;		        // 1000us
 800246a:	2303      	movs	r3, #3
 800246c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002470:	2100      	movs	r1, #0
 8002472:	488e      	ldr	r0, [pc, #568]	; (80026ac <main+0x2a8>)
 8002474:	f012 fcc6 	bl	8014e04 <pifTimerManager_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <main+0x80>
 800247e:	23b9      	movs	r3, #185	; 0xb9
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
 8002482:	e2e5      	b.n	8002a50 <main+0x64c>

#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Start Baseflight: %d\n", sizeof(master_t));
 8002484:	f240 526c 	movw	r2, #1388	; 0x56c
 8002488:	4989      	ldr	r1, [pc, #548]	; (80026b0 <main+0x2ac>)
 800248a:	2002      	movs	r0, #2
 800248c:	f010 ff8a 	bl	80133a4 <pifLog_Printf>
#endif

    if (!buzzerInit()) FAIL;
 8002490:	f001 fc8c 	bl	8003dac <buzzerInit>
 8002494:	4603      	mov	r3, r0
 8002496:	f083 0301 	eor.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <main+0xa2>
 80024a0:	23bf      	movs	r3, #191	; 0xbf
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024a4:	e2d4      	b.n	8002a50 <main+0x64c>

    // make sure (at compile time) that config struct doesn't overflow allocated flash pages
    ct_assert(sizeof(mcfg) < STORAGE_VOLUME);

    g_featureDefault = featureDefault;
 80024a6:	4b83      	ldr	r3, [pc, #524]	; (80026b4 <main+0x2b0>)
 80024a8:	4a83      	ldr	r2, [pc, #524]	; (80026b8 <main+0x2b4>)
 80024aa:	601a      	str	r2, [r3, #0]

    if (!i2cInit()) FAIL;
 80024ac:	f7ff f958 	bl	8001760 <i2cInit>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <main+0xb8>
 80024b6:	23c6      	movs	r3, #198	; 0xc6
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ba:	e2c9      	b.n	8002a50 <main+0x64c>

    if (!initEEPROM(storageInit())) FAIL;
 80024bc:	f7ff fca0 	bl	8001e00 <storageInit>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 febe 	bl	8006244 <initEEPROM>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f083 0301 	eor.w	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <main+0xd6>
 80024d4:	23c8      	movs	r3, #200	; 0xc8
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d8:	e2ba      	b.n	8002a50 <main+0x64c>
    if (!checkFirstTime(false)) FAIL;
 80024da:	2000      	movs	r0, #0
 80024dc:	f004 f8f4 	bl	80066c8 <checkFirstTime>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f083 0301 	eor.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <main+0xee>
 80024ec:	23c9      	movs	r3, #201	; 0xc9
 80024ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f0:	e2ae      	b.n	8002a50 <main+0x64c>
    readEEPROM();
 80024f2:	f003 ff53 	bl	800639c <readEEPROM>

    systemInit();
 80024f6:	f7ff fba5 	bl	8001c44 <systemInit>

    // sleep for 100ms
    pif_Delay1ms(100);
 80024fa:	2064      	movs	r0, #100	; 0x64
 80024fc:	f00e fda8 	bl	8011050 <pif_Delay1ms>

    activateConfig();
 8002500:	f003 ff96 	bl	8006430 <activateConfig>

    // configure rssi ADC
    if (mcfg.rssi_adc_channel > 0 && (mcfg.rssi_adc_channel == 1 || mcfg.rssi_adc_channel == 9 || mcfg.rssi_adc_channel == 5) && mcfg.rssi_adc_channel != mcfg.power_adc_channel)
 8002504:	4b6d      	ldr	r3, [pc, #436]	; (80026bc <main+0x2b8>)
 8002506:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d01b      	beq.n	8002546 <main+0x142>
 800250e:	4b6b      	ldr	r3, [pc, #428]	; (80026bc <main+0x2b8>)
 8002510:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002514:	2b01      	cmp	r3, #1
 8002516:	d009      	beq.n	800252c <main+0x128>
 8002518:	4b68      	ldr	r3, [pc, #416]	; (80026bc <main+0x2b8>)
 800251a:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800251e:	2b09      	cmp	r3, #9
 8002520:	d004      	beq.n	800252c <main+0x128>
 8002522:	4b66      	ldr	r3, [pc, #408]	; (80026bc <main+0x2b8>)
 8002524:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002528:	2b05      	cmp	r3, #5
 800252a:	d10c      	bne.n	8002546 <main+0x142>
 800252c:	4b63      	ldr	r3, [pc, #396]	; (80026bc <main+0x2b8>)
 800252e:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
 8002532:	4b62      	ldr	r3, [pc, #392]	; (80026bc <main+0x2b8>)
 8002534:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8002538:	429a      	cmp	r2, r3
 800253a:	d004      	beq.n	8002546 <main+0x142>
        adc_params.rssiAdcChannel = mcfg.rssi_adc_channel;
 800253c:	4b5f      	ldr	r3, [pc, #380]	; (80026bc <main+0x2b8>)
 800253e:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002542:	717b      	strb	r3, [r7, #5]
 8002544:	e005      	b.n	8002552 <main+0x14e>
    else {
        adc_params.rssiAdcChannel = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	717b      	strb	r3, [r7, #5]
        mcfg.rssi_adc_channel = 0;
 800254a:	4b5c      	ldr	r3, [pc, #368]	; (80026bc <main+0x2b8>)
 800254c:	2200      	movs	r2, #0
 800254e:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
    }

    adcInit(&adc_params);
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe fe15 	bl	8001184 <adcInit>
    // Check battery type/voltage
    if (feature(FEATURE_VBAT))
 800255a:	2002      	movs	r0, #2
 800255c:	f004 fc14 	bl	8006d88 <feature>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <main+0x166>
        batteryInit();
 8002566:	f00b ff99 	bl	800e49c <batteryInit>
    initBoardAlignment();
 800256a:	f001 fac5 	bl	8003af8 <initBoardAlignment>

    // drop out any sensors that don't seem to work, init all the others. halt if gyro is dead.
    sensorsOK = sensorsAutodetect(gyro_detect, acc_detect, baro_detect, mag_detect);
 800256e:	4b54      	ldr	r3, [pc, #336]	; (80026c0 <main+0x2bc>)
 8002570:	6819      	ldr	r1, [r3, #0]
 8002572:	4b54      	ldr	r3, [pc, #336]	; (80026c4 <main+0x2c0>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b54      	ldr	r3, [pc, #336]	; (80026c8 <main+0x2c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4854      	ldr	r0, [pc, #336]	; (80026cc <main+0x2c8>)
 800257c:	f00b fe2c 	bl	800e1d8 <sensorsAutodetect>
 8002580:	4603      	mov	r3, r0
 8002582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Sensor: %lxh(%d)", sensorsMask(), sensorsOK);
 8002586:	f004 fbf3 	bl	8006d70 <sensorsMask>
 800258a:	4602      	mov	r2, r0
 800258c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002590:	494f      	ldr	r1, [pc, #316]	; (80026d0 <main+0x2cc>)
 8002592:	2002      	movs	r0, #2
 8002594:	f010 ff06 	bl	80133a4 <pifLog_Printf>
#endif

    // if gyro was not detected due to whatever reason, we give up now.
    if (!sensorsOK)
 8002598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800259c:	f083 0301 	eor.w	r3, r3, #1
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <main+0x1a8>
        failureMode(3);
 80025a6:	2003      	movs	r0, #3
 80025a8:	f7ff fb5b 	bl	8001c62 <failureMode>

    actLed1State(ON);
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7ff fbd1 	bl	8001d54 <actLed1State>
    actLed0State(OFF);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7ff fba2 	bl	8001cfc <actLed0State>
    for (i = 0; i < 10; i++) {
 80025b8:	2300      	movs	r3, #0
 80025ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80025be:	e018      	b.n	80025f2 <main+0x1ee>
        actLed1Toggle();
 80025c0:	f7ff fbde 	bl	8001d80 <actLed1Toggle>
        actLed0Toggle();
 80025c4:	f7ff fbb0 	bl	8001d28 <actLed0Toggle>
        pifTaskManager_YieldMs(25);
 80025c8:	2019      	movs	r0, #25
 80025ca:	f012 fb33 	bl	8014c34 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 80025ce:	2101      	movs	r1, #1
 80025d0:	f44f 7098 	mov.w	r0, #304	; 0x130
 80025d4:	f7ff fbea 	bl	8001dac <actBuzzerAction>
        pifTaskManager_YieldMs(25);
 80025d8:	2019      	movs	r0, #25
 80025da:	f012 fb2b 	bl	8014c34 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 80025de:	2100      	movs	r1, #0
 80025e0:	f44f 7098 	mov.w	r0, #304	; 0x130
 80025e4:	f7ff fbe2 	bl	8001dac <actBuzzerAction>
    for (i = 0; i < 10; i++) {
 80025e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025ec:	3301      	adds	r3, #1
 80025ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80025f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025f6:	2b09      	cmp	r3, #9
 80025f8:	d9e2      	bls.n	80025c0 <main+0x1bc>
    }
    actLed0State(OFF);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff fb7e 	bl	8001cfc <actLed0State>
    actLed1State(OFF);
 8002600:	2000      	movs	r0, #0
 8002602:	f7ff fba7 	bl	8001d54 <actLed1State>

    imuInit(); // Mag is initialized inside imuInit
 8002606:	f007 f87b 	bl	8009700 <imuInit>
    mixerInit(); // this will set core.useServo var depending on mixer type
 800260a:	f008 fb61 	bl	800acd0 <mixerInit>

#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Serial: %lu", mcfg.serial_baudrate);
 800260e:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <main+0x2b8>)
 8002610:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002614:	461a      	mov	r2, r3
 8002616:	492f      	ldr	r1, [pc, #188]	; (80026d4 <main+0x2d0>)
 8002618:	2002      	movs	r0, #2
 800261a:	f010 fec3 	bl	80133a4 <pifLog_Printf>
    serialInit(UART_PORT_1, mcfg.serial_baudrate, UART_PORT_NONE);
 800261e:	4b27      	ldr	r3, [pc, #156]	; (80026bc <main+0x2b8>)
 8002620:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002624:	2200      	movs	r2, #0
 8002626:	4619      	mov	r1, r3
 8002628:	2001      	movs	r0, #1
 800262a:	f00c fded 	bl	800f208 <serialInit>
#else
    serialInit(UART_PORT_1, mcfg.serial_baudrate, feature(FEATURE_SERIALRX) ? UART_PORT_NONE : UART_PORT_2);
#endif

    g_task_compute_rc = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskComputeRc, NULL, FALSE);
 800262e:	2300      	movs	r3, #0
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2300      	movs	r3, #0
 8002634:	4a28      	ldr	r2, [pc, #160]	; (80026d8 <main+0x2d4>)
 8002636:	2100      	movs	r1, #0
 8002638:	2007      	movs	r0, #7
 800263a:	f011 ffd3 	bl	80145e4 <pifTaskManager_Add>
 800263e:	4603      	mov	r3, r0
 8002640:	4a26      	ldr	r2, [pc, #152]	; (80026dc <main+0x2d8>)
 8002642:	6013      	str	r3, [r2, #0]
    if (!g_task_compute_rc) FAIL;
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <main+0x2d8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <main+0x250>
 800264c:	f240 1303 	movw	r3, #259	; 0x103
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
 8002652:	e1fd      	b.n	8002a50 <main+0x64c>
    g_task_compute_rc->name = "RC";
 8002654:	4b21      	ldr	r3, [pc, #132]	; (80026dc <main+0x2d8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a21      	ldr	r2, [pc, #132]	; (80026e0 <main+0x2dc>)
 800265a:	601a      	str	r2, [r3, #0]

    // when using airplane/wing mixer, servo/motor outputs are remapped
    if (mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <main+0x2b8>)
 800265e:	795b      	ldrb	r3, [r3, #5]
 8002660:	2b0e      	cmp	r3, #14
 8002662:	d007      	beq.n	8002674 <main+0x270>
 8002664:	4b15      	ldr	r3, [pc, #84]	; (80026bc <main+0x2b8>)
 8002666:	795b      	ldrb	r3, [r3, #5]
 8002668:	2b08      	cmp	r3, #8
 800266a:	d003      	beq.n	8002674 <main+0x270>
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <main+0x2b8>)
 800266e:	795b      	ldrb	r3, [r3, #5]
 8002670:	2b18      	cmp	r3, #24
 8002672:	d102      	bne.n	800267a <main+0x276>
        pwm_params.airplane = true;
 8002674:	2301      	movs	r3, #1
 8002676:	73bb      	strb	r3, [r7, #14]
 8002678:	e001      	b.n	800267e <main+0x27a>
    else
        pwm_params.airplane = false;
 800267a:	2300      	movs	r3, #0
 800267c:	73bb      	strb	r3, [r7, #14]
    pwm_params.useUART = feature(FEATURE_GPS) || feature(FEATURE_SERIALRX); // spektrum/sbus support uses UART too
 800267e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002682:	f004 fb81 	bl	8006d88 <feature>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <main+0x294>
 800268c:	2008      	movs	r0, #8
 800268e:	f004 fb7b 	bl	8006d88 <feature>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d025      	beq.n	80026e4 <main+0x2e0>
 8002698:	2301      	movs	r3, #1
 800269a:	e024      	b.n	80026e6 <main+0x2e2>
 800269c:	200006d4 	.word	0x200006d4
 80026a0:	080023b9 	.word	0x080023b9
 80026a4:	20001cc0 	.word	0x20001cc0
 80026a8:	080023e1 	.word	0x080023e1
 80026ac:	20001528 	.word	0x20001528
 80026b0:	080258fc 	.word	0x080258fc
 80026b4:	200016dc 	.word	0x200016dc
 80026b8:	080023d1 	.word	0x080023d1
 80026bc:	200008e8 	.word	0x200008e8
 80026c0:	20000848 	.word	0x20000848
 80026c4:	2000084c 	.word	0x2000084c
 80026c8:	20000850 	.word	0x20000850
 80026cc:	20000010 	.word	0x20000010
 80026d0:	08025914 	.word	0x08025914
 80026d4:	08025928 	.word	0x08025928
 80026d8:	0800cfb5 	.word	0x0800cfb5
 80026dc:	20001550 	.word	0x20001550
 80026e0:	08025934 	.word	0x08025934
 80026e4:	2300      	movs	r3, #0
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	72bb      	strb	r3, [r7, #10]
    pwm_params.useSoftSerial = false;
 80026ee:	2300      	movs	r3, #0
 80026f0:	72fb      	strb	r3, [r7, #11]
    pwm_params.usePPM = feature(FEATURE_PPM);
 80026f2:	2001      	movs	r0, #1
 80026f4:	f004 fb48 	bl	8006d88 <feature>
 80026f8:	4603      	mov	r3, r0
 80026fa:	727b      	strb	r3, [r7, #9]
    pwm_params.enableInput = !feature(FEATURE_SERIALRX); // disable inputs if using spektrum
 80026fc:	2008      	movs	r0, #8
 80026fe:	f004 fb43 	bl	8006d88 <feature>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf14      	ite	ne
 8002708:	2301      	movne	r3, #1
 800270a:	2300      	moveq	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	f083 0301 	eor.w	r3, r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	723b      	strb	r3, [r7, #8]
    pwm_params.useServos = core.useServo;
 800271c:	4baa      	ldr	r3, [pc, #680]	; (80029c8 <main+0x5c4>)
 800271e:	7d5b      	ldrb	r3, [r3, #21]
 8002720:	733b      	strb	r3, [r7, #12]
    pwm_params.extraServos = cfg.gimbal_flags & GIMBAL_FORWARDAUX;
 8002722:	4baa      	ldr	r3, [pc, #680]	; (80029cc <main+0x5c8>)
 8002724:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf14      	ite	ne
 8002730:	2301      	movne	r3, #1
 8002732:	2300      	moveq	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	737b      	strb	r3, [r7, #13]
    pwm_params.motorPwmRate = mcfg.motor_pwm_rate;
 8002738:	4ba5      	ldr	r3, [pc, #660]	; (80029d0 <main+0x5cc>)
 800273a:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 800273e:	827b      	strh	r3, [r7, #18]
    pwm_params.servoPwmRate = mcfg.servo_pwm_rate;
 8002740:	4ba3      	ldr	r3, [pc, #652]	; (80029d0 <main+0x5cc>)
 8002742:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8002746:	82bb      	strh	r3, [r7, #20]
    pwm_params.pwmFilter = mcfg.pwm_filter;
 8002748:	4ba1      	ldr	r3, [pc, #644]	; (80029d0 <main+0x5cc>)
 800274a:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 800274e:	73fb      	strb	r3, [r7, #15]
    pwm_params.idlePulse = PULSE_1MS; // standard PWM for brushless ESC (default, overridden below)
 8002750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002754:	82fb      	strh	r3, [r7, #22]
    if (feature(FEATURE_3D))
 8002756:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800275a:	f004 fb15 	bl	8006d88 <feature>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <main+0x368>
        pwm_params.idlePulse = mcfg.neutral3d;
 8002764:	4b9a      	ldr	r3, [pc, #616]	; (80029d0 <main+0x5cc>)
 8002766:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800276a:	82fb      	strh	r3, [r7, #22]
    if (pwm_params.motorPwmRate > 500)
 800276c:	8a7b      	ldrh	r3, [r7, #18]
 800276e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002772:	d901      	bls.n	8002778 <main+0x374>
        pwm_params.idlePulse = 0; // brushed motors
 8002774:	2300      	movs	r3, #0
 8002776:	82fb      	strh	r3, [r7, #22]
    pwm_params.syncPWM = feature(FEATURE_SYNCPWM);
 8002778:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800277c:	f004 fb04 	bl	8006d88 <feature>
 8002780:	4603      	mov	r3, r0
 8002782:	773b      	strb	r3, [r7, #28]
    pwm_params.fastPWM = feature(FEATURE_FASTPWM);
 8002784:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002788:	f004 fafe 	bl	8006d88 <feature>
 800278c:	4603      	mov	r3, r0
 800278e:	777b      	strb	r3, [r7, #29]
    pwm_params.servoCenterPulse = mcfg.midrc;
 8002790:	4b8f      	ldr	r3, [pc, #572]	; (80029d0 <main+0x5cc>)
 8002792:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8002796:	833b      	strh	r3, [r7, #24]
    pwm_params.failsafeThreshold = cfg.failsafe_detect_threshold;
 8002798:	4b8c      	ldr	r3, [pc, #560]	; (80029cc <main+0x5c8>)
 800279a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800279e:	837b      	strh	r3, [r7, #26]
    switch (mcfg.power_adc_channel) {
 80027a0:	4b8b      	ldr	r3, [pc, #556]	; (80029d0 <main+0x5cc>)
 80027a2:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d002      	beq.n	80027b0 <main+0x3ac>
 80027aa:	2b09      	cmp	r3, #9
 80027ac:	d003      	beq.n	80027b6 <main+0x3b2>
 80027ae:	e005      	b.n	80027bc <main+0x3b8>
        case 1:
            pwm_params.adcChannel = PWM2;
 80027b0:	2301      	movs	r3, #1
 80027b2:	743b      	strb	r3, [r7, #16]
            break;
 80027b4:	e005      	b.n	80027c2 <main+0x3be>
        case 9:
            pwm_params.adcChannel = PWM8;
 80027b6:	2307      	movs	r3, #7
 80027b8:	743b      	strb	r3, [r7, #16]
            break;
 80027ba:	e002      	b.n	80027c2 <main+0x3be>
        default:
            pwm_params.adcChannel = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	743b      	strb	r3, [r7, #16]
            break;
 80027c0:	bf00      	nop
    }

    pwmInit(&pwm_params);
 80027c2:	f107 0308 	add.w	r3, r7, #8
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff f8ba 	bl	8001940 <pwmInit>
    core.numServos = pwm_params.numServos;
 80027cc:	7fba      	ldrb	r2, [r7, #30]
 80027ce:	4b7e      	ldr	r3, [pc, #504]	; (80029c8 <main+0x5c4>)
 80027d0:	759a      	strb	r2, [r3, #22]

    // configure PWM/CPPM read function and max number of channels. spektrum or sbus below will override both of these, if enabled
    for (i = 0; i < RC_CHANS; i++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80027d8:	e00b      	b.n	80027f2 <main+0x3ee>
        rcData[i] = 1502;
 80027da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027de:	4a7d      	ldr	r2, [pc, #500]	; (80029d4 <main+0x5d0>)
 80027e0:	f240 51de 	movw	r1, #1502	; 0x5de
 80027e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < RC_CHANS; i++)
 80027e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027ec:	3301      	adds	r3, #1
 80027ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80027f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027f6:	2b11      	cmp	r3, #17
 80027f8:	d9ef      	bls.n	80027da <main+0x3d6>
    rcReadRawFunc = pwmReadRawRC;
 80027fa:	4b77      	ldr	r3, [pc, #476]	; (80029d8 <main+0x5d4>)
 80027fc:	4a77      	ldr	r2, [pc, #476]	; (80029dc <main+0x5d8>)
 80027fe:	601a      	str	r2, [r3, #0]
    }
#endif

    // Optional GPS - available in both PPM, PWM and serialRX input mode, in PWM input, reduces number of available channels by 2.
    // gpsInit will return if FEATURE_GPS is not enabled.
    if (feature(FEATURE_GPS)) {
 8002800:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002804:	f004 fac0 	bl	8006d88 <feature>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d007      	beq.n	800281e <main+0x41a>
        gpsInit(UART_PORT_3, mcfg.gps_baudrate);
 800280e:	4b70      	ldr	r3, [pc, #448]	; (80029d0 <main+0x5cc>)
 8002810:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8002814:	b2db      	uxtb	r3, r3
 8002816:	4619      	mov	r1, r3
 8002818:	2003      	movs	r0, #3
 800281a:	f005 fae5 	bl	8007de8 <gpsInit>
    }

#ifdef SONAR
    // sonar stuff only works with PPM
    if (feature(FEATURE_SONAR)) {
 800281e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002822:	f004 fab1 	bl	8006d88 <feature>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <main+0x430>
//      Sonar_init(hcsr04Init, SF_NONE);
//      Sonar_init(hcsr04Init, SF_AVERAGE);
        Sonar_init(hcsr04Init, SF_NOISE_CANCEL);
 800282c:	2102      	movs	r1, #2
 800282e:	486c      	ldr	r0, [pc, #432]	; (80029e0 <main+0x5dc>)
 8002830:	f00c fc54 	bl	800f0dc <Sonar_init>
    }
#endif

    core.numAuxChannels = constrain((mcfg.rc_channel_count - 4), 4, 8);
 8002834:	4b66      	ldr	r3, [pc, #408]	; (80029d0 <main+0x5cc>)
 8002836:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800283a:	3b04      	subs	r3, #4
 800283c:	2208      	movs	r2, #8
 800283e:	2104      	movs	r1, #4
 8002840:	4618      	mov	r0, r3
 8002842:	f001 f93d 	bl	8003ac0 <constrain>
 8002846:	4603      	mov	r3, r0
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4b5f      	ldr	r3, [pc, #380]	; (80029c8 <main+0x5c4>)
 800284c:	751a      	strb	r2, [r3, #20]
#ifdef TELEMETRY
    if (feature(FEATURE_TELEMETRY))
        initTelemetry();
#endif

    if (mcfg.mixerConfiguration == MULTITYPE_GIMBAL)
 800284e:	4b60      	ldr	r3, [pc, #384]	; (80029d0 <main+0x5cc>)
 8002850:	795b      	ldrb	r3, [r3, #5]
 8002852:	2b05      	cmp	r3, #5
 8002854:	d103      	bne.n	800285e <main+0x45a>
        calibratingA = CALIBRATING_ACC_CYCLES;
 8002856:	4b63      	ldr	r3, [pc, #396]	; (80029e4 <main+0x5e0>)
 8002858:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800285c:	801a      	strh	r2, [r3, #0]
    calibratingG = CALIBRATING_GYRO_CYCLES;
 800285e:	4b62      	ldr	r3, [pc, #392]	; (80029e8 <main+0x5e4>)
 8002860:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002864:	801a      	strh	r2, [r3, #0]
    calibratingB = CALIBRATING_BARO_CYCLES;             // 10 seconds init_delay + 200 * 25 ms = 15 seconds before ground pressure settles
 8002866:	4b61      	ldr	r3, [pc, #388]	; (80029ec <main+0x5e8>)
 8002868:	22c8      	movs	r2, #200	; 0xc8
 800286a:	801a      	strh	r2, [r3, #0]
    f.SMALL_ANGLE = 1;
 800286c:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <main+0x5ec>)
 800286e:	2201      	movs	r2, #1
 8002870:	735a      	strb	r2, [r3, #13]

    p_task = pifTaskManager_Add(TM_PERIOD_MS, 10, taskLoop, NULL, TRUE);         								// 1ms
 8002872:	2301      	movs	r3, #1
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2300      	movs	r3, #0
 8002878:	4a5e      	ldr	r2, [pc, #376]	; (80029f4 <main+0x5f0>)
 800287a:	210a      	movs	r1, #10
 800287c:	2002      	movs	r0, #2
 800287e:	f011 feb1 	bl	80145e4 <pifTaskManager_Add>
 8002882:	6238      	str	r0, [r7, #32]
    if (!p_task) FAIL;
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <main+0x48e>
 800288a:	f240 1367 	movw	r3, #359	; 0x167
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002890:	e0de      	b.n	8002a50 <main+0x64c>
    p_task->name = "Loop";
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	4a58      	ldr	r2, [pc, #352]	; (80029f8 <main+0x5f4>)
 8002896:	601a      	str	r2, [r3, #0]

    if (mcfg.looptime) {
 8002898:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <main+0x5cc>)
 800289a:	899b      	ldrh	r3, [r3, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00c      	beq.n	80028ba <main+0x4b6>
    	g_task_compute_imu = pifTaskManager_Add(TM_PERIOD_US, mcfg.looptime, taskComputeImu, NULL, TRUE);
 80028a0:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <main+0x5cc>)
 80028a2:	8999      	ldrh	r1, [r3, #12]
 80028a4:	2301      	movs	r3, #1
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2300      	movs	r3, #0
 80028aa:	4a54      	ldr	r2, [pc, #336]	; (80029fc <main+0x5f8>)
 80028ac:	2003      	movs	r0, #3
 80028ae:	f011 fe99 	bl	80145e4 <pifTaskManager_Add>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4a52      	ldr	r2, [pc, #328]	; (8002a00 <main+0x5fc>)
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e00a      	b.n	80028d0 <main+0x4cc>
    }
    else {
    	g_task_compute_imu = pifTaskManager_Add(TM_ALWAYS, 0, taskComputeImu, NULL, TRUE);
 80028ba:	2301      	movs	r3, #1
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2300      	movs	r3, #0
 80028c0:	4a4e      	ldr	r2, [pc, #312]	; (80029fc <main+0x5f8>)
 80028c2:	2100      	movs	r1, #0
 80028c4:	2001      	movs	r0, #1
 80028c6:	f011 fe8d 	bl	80145e4 <pifTaskManager_Add>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4a4c      	ldr	r2, [pc, #304]	; (8002a00 <main+0x5fc>)
 80028ce:	6013      	str	r3, [r2, #0]
    }
    if (!g_task_compute_imu) FAIL;
 80028d0:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <main+0x5fc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d103      	bne.n	80028e0 <main+0x4dc>
 80028d8:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80028dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028de:	e0b7      	b.n	8002a50 <main+0x64c>
    g_task_compute_imu->name = "IMU";
 80028e0:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <main+0x5fc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a47      	ldr	r2, [pc, #284]	; (8002a04 <main+0x600>)
 80028e6:	601a      	str	r2, [r3, #0]
    g_task_compute_imu->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 80028e8:	4b45      	ldr	r3, [pc, #276]	; (8002a00 <main+0x5fc>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2201      	movs	r2, #1
 80028ee:	715a      	strb	r2, [r3, #5]

#ifdef MAG
    if (sensors(SENSOR_MAG)) {
 80028f0:	2008      	movs	r0, #8
 80028f2:	f004 fa01 	bl	8006cf8 <sensors>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01e      	beq.n	800293a <main+0x536>
        sensor_set.mag.p_task = pifTaskManager_Add(TM_PERIOD_MS, 100, taskMagGetAdc, NULL, TRUE);             // 100ms
 80028fc:	2301      	movs	r3, #1
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2300      	movs	r3, #0
 8002902:	4a41      	ldr	r2, [pc, #260]	; (8002a08 <main+0x604>)
 8002904:	2164      	movs	r1, #100	; 0x64
 8002906:	2002      	movs	r0, #2
 8002908:	f011 fe6c 	bl	80145e4 <pifTaskManager_Add>
 800290c:	4603      	mov	r3, r0
 800290e:	4a3f      	ldr	r2, [pc, #252]	; (8002a0c <main+0x608>)
 8002910:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
        if (!sensor_set.mag.p_task) FAIL;
 8002914:	4b3d      	ldr	r3, [pc, #244]	; (8002a0c <main+0x608>)
 8002916:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d103      	bne.n	8002926 <main+0x522>
 800291e:	f240 1377 	movw	r3, #375	; 0x177
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
 8002924:	e094      	b.n	8002a50 <main+0x64c>
        sensor_set.mag.p_task->name = "Mag";
 8002926:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <main+0x608>)
 8002928:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800292c:	4a38      	ldr	r2, [pc, #224]	; (8002a10 <main+0x60c>)
 800292e:	601a      	str	r2, [r3, #0]
        sensor_set.mag.p_task->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002930:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <main+0x608>)
 8002932:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002936:	2201      	movs	r2, #1
 8002938:	715a      	strb	r2, [r3, #5]
    }
#endif

#ifdef BARO
    if (sensors(SENSOR_BARO)) {
 800293a:	2004      	movs	r0, #4
 800293c:	f004 f9dc 	bl	8006cf8 <sensors>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d019      	beq.n	800297a <main+0x576>
        sensor_set.baro.p_task = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskGetEstimatedAltitude, NULL, FALSE);
 8002946:	2300      	movs	r3, #0
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2300      	movs	r3, #0
 800294c:	4a31      	ldr	r2, [pc, #196]	; (8002a14 <main+0x610>)
 800294e:	2100      	movs	r1, #0
 8002950:	2007      	movs	r0, #7
 8002952:	f011 fe47 	bl	80145e4 <pifTaskManager_Add>
 8002956:	4603      	mov	r3, r0
 8002958:	4a2c      	ldr	r2, [pc, #176]	; (8002a0c <main+0x608>)
 800295a:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
        if (!sensor_set.baro.p_task) FAIL;
 800295e:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <main+0x608>)
 8002960:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002964:	2b00      	cmp	r3, #0
 8002966:	d103      	bne.n	8002970 <main+0x56c>
 8002968:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
 800296e:	e06f      	b.n	8002a50 <main+0x64c>
        sensor_set.baro.p_task->name = "Baro";
 8002970:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <main+0x608>)
 8002972:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002976:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <main+0x614>)
 8002978:	601a      	str	r2, [r3, #0]
    }
#endif

#ifdef GPS
    g_task_gps = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskGpsNewData, NULL, FALSE);
 800297a:	2300      	movs	r3, #0
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2300      	movs	r3, #0
 8002980:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <main+0x618>)
 8002982:	2100      	movs	r1, #0
 8002984:	2007      	movs	r0, #7
 8002986:	f011 fe2d 	bl	80145e4 <pifTaskManager_Add>
 800298a:	4603      	mov	r3, r0
 800298c:	4a24      	ldr	r2, [pc, #144]	; (8002a20 <main+0x61c>)
 800298e:	6013      	str	r3, [r2, #0]
    if (!g_task_gps) FAIL;
 8002990:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <main+0x61c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d103      	bne.n	80029a0 <main+0x59c>
 8002998:	f240 1387 	movw	r3, #391	; 0x187
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
 800299e:	e057      	b.n	8002a50 <main+0x64c>
    g_task_gps->name = "GPS";
 80029a0:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <main+0x61c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1f      	ldr	r2, [pc, #124]	; (8002a24 <main+0x620>)
 80029a6:	601a      	str	r2, [r3, #0]
#endif

    p_task = pifTaskManager_Add(TM_PERIOD_MS, 50, taskLedState, NULL, TRUE);									// 50ms
 80029a8:	2301      	movs	r3, #1
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2300      	movs	r3, #0
 80029ae:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <main+0x624>)
 80029b0:	2132      	movs	r1, #50	; 0x32
 80029b2:	2002      	movs	r0, #2
 80029b4:	f011 fe16 	bl	80145e4 <pifTaskManager_Add>
 80029b8:	6238      	str	r0, [r7, #32]
    if (!p_task) FAIL;
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d135      	bne.n	8002a2c <main+0x628>
 80029c0:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c6:	e043      	b.n	8002a50 <main+0x64c>
 80029c8:	20000830 	.word	0x20000830
 80029cc:	20000e54 	.word	0x20000e54
 80029d0:	200008e8 	.word	0x200008e8
 80029d4:	2000172c 	.word	0x2000172c
 80029d8:	20001784 	.word	0x20001784
 80029dc:	0800c78d 	.word	0x0800c78d
 80029e0:	08001565 	.word	0x08001565
 80029e4:	200019ba 	.word	0x200019ba
 80029e8:	200019be 	.word	0x200019be
 80029ec:	200019bc 	.word	0x200019bc
 80029f0:	200016f4 	.word	0x200016f4
 80029f4:	0800db85 	.word	0x0800db85
 80029f8:	08025938 	.word	0x08025938
 80029fc:	0800dbed 	.word	0x0800dbed
 8002a00:	2000154c 	.word	0x2000154c
 8002a04:	08025940 	.word	0x08025940
 8002a08:	0800ede5 	.word	0x0800ede5
 8002a0c:	2000005c 	.word	0x2000005c
 8002a10:	08025944 	.word	0x08025944
 8002a14:	0800a551 	.word	0x0800a551
 8002a18:	08025948 	.word	0x08025948
 8002a1c:	08008735 	.word	0x08008735
 8002a20:	20001554 	.word	0x20001554
 8002a24:	08025950 	.word	0x08025950
 8002a28:	0800c4d1 	.word	0x0800c4d1
    p_task->name = "Loop";
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <main+0x66c>)
 8002a30:	601a      	str	r2, [r3, #0]

#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_INFO, "Task=%d Timer1ms=%d\n", pifTaskManager_Count(),
 8002a32:	f011 fe77 	bl	8014724 <pifTaskManager_Count>
 8002a36:	4604      	mov	r4, r0
 8002a38:	480e      	ldr	r0, [pc, #56]	; (8002a74 <main+0x670>)
 8002a3a:	f012 fa80 	bl	8014f3e <pifTimerManager_Count>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4622      	mov	r2, r4
 8002a42:	490d      	ldr	r1, [pc, #52]	; (8002a78 <main+0x674>)
 8002a44:	2002      	movs	r0, #2
 8002a46:	f010 fcad 	bl	80133a4 <pifLog_Printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pifTaskManager_Loop();
 8002a4a:	f011 fe75 	bl	8014738 <pifTaskManager_Loop>
 8002a4e:	e7fc      	b.n	8002a4a <main+0x646>
  }
  return 0;

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "Error=%Xh Line=%u", pif_error, line);
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <main+0x678>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	4909      	ldr	r1, [pc, #36]	; (8002a80 <main+0x67c>)
 8002a5a:	2004      	movs	r0, #4
 8002a5c:	f010 fca2 	bl	80133a4 <pifLog_Printf>
	pifLog_SendAndExit();
 8002a60:	f010 fd68 	bl	8013534 <pifLog_SendAndExit>
#endif
  return -1;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295
  /* USER CODE END 3 */
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3734      	adds	r7, #52	; 0x34
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd90      	pop	{r4, r7, pc}
 8002a70:	08025938 	.word	0x08025938
 8002a74:	20001528 	.word	0x20001528
 8002a78:	08025954 	.word	0x08025954
 8002a7c:	20001c0d 	.word	0x20001c0d
 8002a80:	0802596c 	.word	0x0802596c

08002a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b094      	sub	sp, #80	; 0x50
 8002a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a8a:	f107 0320 	add.w	r3, r7, #32
 8002a8e:	2230      	movs	r2, #48	; 0x30
 8002a90:	2100      	movs	r1, #0
 8002a92:	4618      	mov	r0, r3
 8002a94:	f020 f800 	bl	8022a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a98:	f107 030c 	add.w	r3, r7, #12
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	4b28      	ldr	r3, [pc, #160]	; (8002b50 <SystemClock_Config+0xcc>)
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <SystemClock_Config+0xcc>)
 8002ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab8:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <SystemClock_Config+0xcc>)
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <SystemClock_Config+0xd0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a21      	ldr	r2, [pc, #132]	; (8002b54 <SystemClock_Config+0xd0>)
 8002ace:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <SystemClock_Config+0xd0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 13;
 8002ae8:	230d      	movs	r3, #13
 8002aea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aec:	2302      	movs	r3, #2
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002af0:	2300      	movs	r3, #0
 8002af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002af4:	2310      	movs	r3, #16
 8002af6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002af8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002afc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002afe:	2304      	movs	r3, #4
 8002b00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b02:	2304      	movs	r3, #4
 8002b04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b06:	f107 0320 	add.w	r3, r7, #32
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f01d f8f4 	bl	801fcf8 <HAL_RCC_OscConfig>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002b16:	f000 fb5f 	bl	80031d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b1a:	230f      	movs	r3, #15
 8002b1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b30:	f107 030c 	add.w	r3, r7, #12
 8002b34:	2102      	movs	r1, #2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f01d fb56 	bl	80201e8 <HAL_RCC_ClockConfig>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002b42:	f000 fb49 	bl	80031d8 <Error_Handler>
  }
}
 8002b46:	bf00      	nop
 8002b48:	3750      	adds	r7, #80	; 0x50
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40007000 	.word	0x40007000

08002b58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b5e:	463b      	mov	r3, r7
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b6a:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002b6c:	4a36      	ldr	r2, [pc, #216]	; (8002c48 <MX_ADC1_Init+0xf0>)
 8002b6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b70:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002b72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b78:	4b32      	ldr	r3, [pc, #200]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002b7e:	4b31      	ldr	r3, [pc, #196]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b84:	4b2f      	ldr	r3, [pc, #188]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b8a:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b92:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002b9a:	4a2c      	ldr	r2, [pc, #176]	; (8002c4c <MX_ADC1_Init+0xf4>)
 8002b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b9e:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002ba4:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002baa:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bb2:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bb8:	4822      	ldr	r0, [pc, #136]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002bba:	f018 fd7b 	bl	801b6b4 <HAL_ADC_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002bc4:	f000 fb08 	bl	80031d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002bc8:	2306      	movs	r3, #6
 8002bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	481a      	ldr	r0, [pc, #104]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002bda:	f018 febd 	bl	801b958 <HAL_ADC_ConfigChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002be4:	f000 faf8 	bl	80031d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002be8:	2309      	movs	r3, #9
 8002bea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002bec:	2302      	movs	r3, #2
 8002bee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4813      	ldr	r0, [pc, #76]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002bf6:	f018 feaf 	bl	801b958 <HAL_ADC_ConfigChannel>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002c00:	f000 faea 	bl	80031d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002c04:	2307      	movs	r3, #7
 8002c06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c0c:	463b      	mov	r3, r7
 8002c0e:	4619      	mov	r1, r3
 8002c10:	480c      	ldr	r0, [pc, #48]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002c12:	f018 fea1 	bl	801b958 <HAL_ADC_ConfigChannel>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002c1c:	f000 fadc 	bl	80031d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002c20:	230c      	movs	r3, #12
 8002c22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002c24:	2304      	movs	r3, #4
 8002c26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c28:	463b      	mov	r3, r7
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4805      	ldr	r0, [pc, #20]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002c2e:	f018 fe93 	bl	801b958 <HAL_ADC_ConfigChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002c38:	f000 face 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	200004c4 	.word	0x200004c4
 8002c48:	40012000 	.word	0x40012000
 8002c4c:	0f000001 	.word	0x0f000001

08002c50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c54:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <MX_I2C1_Init+0x50>)
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <MX_I2C1_Init+0x54>)
 8002c58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <MX_I2C1_Init+0x50>)
 8002c5c:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <MX_I2C1_Init+0x58>)
 8002c5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <MX_I2C1_Init+0x50>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <MX_I2C1_Init+0x50>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <MX_I2C1_Init+0x50>)
 8002c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <MX_I2C1_Init+0x50>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <MX_I2C1_Init+0x50>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <MX_I2C1_Init+0x50>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <MX_I2C1_Init+0x50>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c8c:	4804      	ldr	r0, [pc, #16]	; (8002ca0 <MX_I2C1_Init+0x50>)
 8002c8e:	f01a f90d 	bl	801ceac <HAL_I2C_Init>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c98:	f000 fa9e 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	2000056c 	.word	0x2000056c
 8002ca4:	40005400 	.word	0x40005400
 8002ca8:	00061a80 	.word	0x00061a80

08002cac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002cb0:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <MX_I2C2_Init+0x50>)
 8002cb2:	4a13      	ldr	r2, [pc, #76]	; (8002d00 <MX_I2C2_Init+0x54>)
 8002cb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_I2C2_Init+0x50>)
 8002cb8:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <MX_I2C2_Init+0x58>)
 8002cba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <MX_I2C2_Init+0x50>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <MX_I2C2_Init+0x50>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <MX_I2C2_Init+0x50>)
 8002cca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <MX_I2C2_Init+0x50>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <MX_I2C2_Init+0x50>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cdc:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <MX_I2C2_Init+0x50>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <MX_I2C2_Init+0x50>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002ce8:	4804      	ldr	r0, [pc, #16]	; (8002cfc <MX_I2C2_Init+0x50>)
 8002cea:	f01a f8df 	bl	801ceac <HAL_I2C_Init>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002cf4:	f000 fa70 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002cf8:	bf00      	nop
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	200005c0 	.word	0x200005c0
 8002d00:	40005800 	.word	0x40005800
 8002d04:	000186a0 	.word	0x000186a0

08002d08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d0e:	f107 0308 	add.w	r3, r7, #8
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	609a      	str	r2, [r3, #8]
 8002d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d1c:	463b      	mov	r3, r7
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <MX_TIM2_Init+0x94>)
 8002d26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <MX_TIM2_Init+0x94>)
 8002d2e:	2253      	movs	r2, #83	; 0x53
 8002d30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d32:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <MX_TIM2_Init+0x94>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002d38:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <MX_TIM2_Init+0x94>)
 8002d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d40:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <MX_TIM2_Init+0x94>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <MX_TIM2_Init+0x94>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d4c:	4813      	ldr	r0, [pc, #76]	; (8002d9c <MX_TIM2_Init+0x94>)
 8002d4e:	f01d fc6b 	bl	8020628 <HAL_TIM_Base_Init>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d58:	f000 fa3e 	bl	80031d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d62:	f107 0308 	add.w	r3, r7, #8
 8002d66:	4619      	mov	r1, r3
 8002d68:	480c      	ldr	r0, [pc, #48]	; (8002d9c <MX_TIM2_Init+0x94>)
 8002d6a:	f01e f899 	bl	8020ea0 <HAL_TIM_ConfigClockSource>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d74:	f000 fa30 	bl	80031d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d80:	463b      	mov	r3, r7
 8002d82:	4619      	mov	r1, r3
 8002d84:	4805      	ldr	r0, [pc, #20]	; (8002d9c <MX_TIM2_Init+0x94>)
 8002d86:	f01e fc51 	bl	802162c <HAL_TIMEx_MasterConfigSynchronization>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d90:	f000 fa22 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d94:	bf00      	nop
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	200006d4 	.word	0x200006d4

08002da0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08e      	sub	sp, #56	; 0x38
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002da6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	609a      	str	r2, [r3, #8]
 8002db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db4:	f107 0320 	add.w	r3, r7, #32
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
 8002dcc:	615a      	str	r2, [r3, #20]
 8002dce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dd0:	4b40      	ldr	r3, [pc, #256]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002dd2:	4a41      	ldr	r2, [pc, #260]	; (8002ed8 <MX_TIM3_Init+0x138>)
 8002dd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002dd8:	2253      	movs	r2, #83	; 0x53
 8002dda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ddc:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 8002de2:	4b3c      	ldr	r3, [pc, #240]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002de4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002de8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dea:	4b3a      	ldr	r3, [pc, #232]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df0:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002df6:	4837      	ldr	r0, [pc, #220]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002df8:	f01d fc16 	bl	8020628 <HAL_TIM_Base_Init>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002e02:	f000 f9e9 	bl	80031d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e10:	4619      	mov	r1, r3
 8002e12:	4830      	ldr	r0, [pc, #192]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002e14:	f01e f844 	bl	8020ea0 <HAL_TIM_ConfigClockSource>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002e1e:	f000 f9db 	bl	80031d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e22:	482c      	ldr	r0, [pc, #176]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002e24:	f01d fc4f 	bl	80206c6 <HAL_TIM_PWM_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002e2e:	f000 f9d3 	bl	80031d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e3a:	f107 0320 	add.w	r3, r7, #32
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4824      	ldr	r0, [pc, #144]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002e42:	f01e fbf3 	bl	802162c <HAL_TIMEx_MasterConfigSynchronization>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002e4c:	f000 f9c4 	bl	80031d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e50:	2360      	movs	r3, #96	; 0x60
 8002e52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e62:	1d3b      	adds	r3, r7, #4
 8002e64:	2200      	movs	r2, #0
 8002e66:	4619      	mov	r1, r3
 8002e68:	481a      	ldr	r0, [pc, #104]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002e6a:	f01d ff57 	bl	8020d1c <HAL_TIM_PWM_ConfigChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002e74:	f000 f9b0 	bl	80031d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4815      	ldr	r0, [pc, #84]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002e80:	f01d ff4c 	bl	8020d1c <HAL_TIM_PWM_ConfigChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002e8a:	f000 f9a5 	bl	80031d8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	2208      	movs	r2, #8
 8002e96:	4619      	mov	r1, r3
 8002e98:	480e      	ldr	r0, [pc, #56]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002e9a:	f01d ff3f 	bl	8020d1c <HAL_TIM_PWM_ConfigChannel>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8002ea4:	f000 f998 	bl	80031d8 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 8002ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	220c      	movs	r2, #12
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4807      	ldr	r0, [pc, #28]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002eb6:	f01d ff31 	bl	8020d1c <HAL_TIM_PWM_ConfigChannel>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 8002ec0:	f000 f98a 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ec4:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <MX_TIM3_Init+0x134>)
 8002ec6:	f000 fba3 	bl	8003610 <HAL_TIM_MspPostInit>

}
 8002eca:	bf00      	nop
 8002ecc:	3738      	adds	r7, #56	; 0x38
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	2000071c 	.word	0x2000071c
 8002ed8:	40000400 	.word	0x40000400

08002edc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002ee2:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <MX_USART1_UART_Init+0x50>)
 8002ee4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002eec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002f02:	220c      	movs	r2, #12
 8002f04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f12:	4805      	ldr	r0, [pc, #20]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002f14:	f01e fc0c 	bl	8021730 <HAL_UART_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f1e:	f000 f95b 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000764 	.word	0x20000764
 8002f2c:	40011000 	.word	0x40011000

08002f30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f36:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <MX_USART2_UART_Init+0x50>)
 8002f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f42:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f56:	220c      	movs	r2, #12
 8002f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5a:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f66:	4805      	ldr	r0, [pc, #20]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f68:	f01e fbe2 	bl	8021730 <HAL_UART_Init>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f72:	f000 f931 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200007a8 	.word	0x200007a8
 8002f80:	40004400 	.word	0x40004400

08002f84 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <MX_USART6_UART_Init+0x4c>)
 8002f8a:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <MX_USART6_UART_Init+0x50>)
 8002f8c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <MX_USART6_UART_Init+0x4c>)
 8002f90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f94:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <MX_USART6_UART_Init+0x4c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <MX_USART6_UART_Init+0x4c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <MX_USART6_UART_Init+0x4c>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <MX_USART6_UART_Init+0x4c>)
 8002faa:	220c      	movs	r2, #12
 8002fac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <MX_USART6_UART_Init+0x4c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <MX_USART6_UART_Init+0x4c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002fba:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <MX_USART6_UART_Init+0x4c>)
 8002fbc:	f01e fbb8 	bl	8021730 <HAL_UART_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002fc6:	f000 f907 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	200007ec 	.word	0x200007ec
 8002fd4:	40011400 	.word	0x40011400

08002fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <MX_DMA_Init+0x78>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a1a      	ldr	r2, [pc, #104]	; (8003050 <MX_DMA_Init+0x78>)
 8002fe8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b18      	ldr	r3, [pc, #96]	; (8003050 <MX_DMA_Init+0x78>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff6:	607b      	str	r3, [r7, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	4b14      	ldr	r3, [pc, #80]	; (8003050 <MX_DMA_Init+0x78>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a13      	ldr	r2, [pc, #76]	; (8003050 <MX_DMA_Init+0x78>)
 8003004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <MX_DMA_Init+0x78>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	2100      	movs	r1, #0
 800301a:	200b      	movs	r0, #11
 800301c:	f019 f84b 	bl	801c0b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003020:	200b      	movs	r0, #11
 8003022:	f019 f864 	bl	801c0ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003026:	2200      	movs	r2, #0
 8003028:	2100      	movs	r1, #0
 800302a:	200c      	movs	r0, #12
 800302c:	f019 f843 	bl	801c0b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003030:	200c      	movs	r0, #12
 8003032:	f019 f85c 	bl	801c0ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	2038      	movs	r0, #56	; 0x38
 800303c:	f019 f83b 	bl	801c0b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003040:	2038      	movs	r0, #56	; 0x38
 8003042:	f019 f854 	bl	801c0ee <HAL_NVIC_EnableIRQ>

}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305a:	f107 0314 	add.w	r3, r7, #20
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	60da      	str	r2, [r3, #12]
 8003068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	4b56      	ldr	r3, [pc, #344]	; (80031c8 <MX_GPIO_Init+0x174>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	4a55      	ldr	r2, [pc, #340]	; (80031c8 <MX_GPIO_Init+0x174>)
 8003074:	f043 0304 	orr.w	r3, r3, #4
 8003078:	6313      	str	r3, [r2, #48]	; 0x30
 800307a:	4b53      	ldr	r3, [pc, #332]	; (80031c8 <MX_GPIO_Init+0x174>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	4b4f      	ldr	r3, [pc, #316]	; (80031c8 <MX_GPIO_Init+0x174>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	4a4e      	ldr	r2, [pc, #312]	; (80031c8 <MX_GPIO_Init+0x174>)
 8003090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003094:	6313      	str	r3, [r2, #48]	; 0x30
 8003096:	4b4c      	ldr	r3, [pc, #304]	; (80031c8 <MX_GPIO_Init+0x174>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	4b48      	ldr	r3, [pc, #288]	; (80031c8 <MX_GPIO_Init+0x174>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	4a47      	ldr	r2, [pc, #284]	; (80031c8 <MX_GPIO_Init+0x174>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	6313      	str	r3, [r2, #48]	; 0x30
 80030b2:	4b45      	ldr	r3, [pc, #276]	; (80031c8 <MX_GPIO_Init+0x174>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	4b41      	ldr	r3, [pc, #260]	; (80031c8 <MX_GPIO_Init+0x174>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	4a40      	ldr	r2, [pc, #256]	; (80031c8 <MX_GPIO_Init+0x174>)
 80030c8:	f043 0302 	orr.w	r3, r3, #2
 80030cc:	6313      	str	r3, [r2, #48]	; 0x30
 80030ce:	4b3e      	ldr	r3, [pc, #248]	; (80031c8 <MX_GPIO_Init+0x174>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	607b      	str	r3, [r7, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80030da:	2200      	movs	r2, #0
 80030dc:	2131      	movs	r1, #49	; 0x31
 80030de:	483b      	ldr	r0, [pc, #236]	; (80031cc <MX_GPIO_Init+0x178>)
 80030e0:	f019 feb2 	bl	801ce48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2120      	movs	r1, #32
 80030e8:	4839      	ldr	r0, [pc, #228]	; (80031d0 <MX_GPIO_Init+0x17c>)
 80030ea:	f019 fead 	bl	801ce48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80030ee:	2200      	movs	r2, #0
 80030f0:	2104      	movs	r1, #4
 80030f2:	4838      	ldr	r0, [pc, #224]	; (80031d4 <MX_GPIO_Init+0x180>)
 80030f4:	f019 fea8 	bl	801ce48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80030f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	4619      	mov	r1, r3
 800310e:	482f      	ldr	r0, [pc, #188]	; (80031cc <MX_GPIO_Init+0x178>)
 8003110:	f019 fc32 	bl	801c978 <HAL_GPIO_Init>

  /*Configure GPIO pins : SONAR_TRIGGER_Pin LD1_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin;
 8003114:	2331      	movs	r3, #49	; 0x31
 8003116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003118:	2301      	movs	r3, #1
 800311a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003120:	2300      	movs	r3, #0
 8003122:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	4619      	mov	r1, r3
 800312a:	4828      	ldr	r0, [pc, #160]	; (80031cc <MX_GPIO_Init+0x178>)
 800312c:	f019 fc24 	bl	801c978 <HAL_GPIO_Init>

  /*Configure GPIO pin : SONAR_ECHO_Pin */
  GPIO_InitStruct.Pin = SONAR_ECHO_Pin;
 8003130:	2302      	movs	r3, #2
 8003132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003134:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SONAR_ECHO_GPIO_Port, &GPIO_InitStruct);
 800313e:	f107 0314 	add.w	r3, r7, #20
 8003142:	4619      	mov	r1, r3
 8003144:	4821      	ldr	r0, [pc, #132]	; (80031cc <MX_GPIO_Init+0x178>)
 8003146:	f019 fc17 	bl	801c978 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800314a:	2320      	movs	r3, #32
 800314c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314e:	2301      	movs	r3, #1
 8003150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	2300      	movs	r3, #0
 8003158:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	4619      	mov	r1, r3
 8003160:	481b      	ldr	r0, [pc, #108]	; (80031d0 <MX_GPIO_Init+0x17c>)
 8003162:	f019 fc09 	bl	801c978 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003166:	2304      	movs	r3, #4
 8003168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316a:	2301      	movs	r3, #1
 800316c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	2300      	movs	r3, #0
 8003174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003176:	f107 0314 	add.w	r3, r7, #20
 800317a:	4619      	mov	r1, r3
 800317c:	4815      	ldr	r0, [pc, #84]	; (80031d4 <MX_GPIO_Init+0x180>)
 800317e:	f019 fbfb 	bl	801c978 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC_PPM_Pin */
  GPIO_InitStruct.Pin = RC_PPM_Pin;
 8003182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003188:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800318c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC_PPM_GPIO_Port, &GPIO_InitStruct);
 8003192:	f107 0314 	add.w	r3, r7, #20
 8003196:	4619      	mov	r1, r3
 8003198:	480c      	ldr	r0, [pc, #48]	; (80031cc <MX_GPIO_Init+0x178>)
 800319a:	f019 fbed 	bl	801c978 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	2100      	movs	r1, #0
 80031a2:	2007      	movs	r0, #7
 80031a4:	f018 ff87 	bl	801c0b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031a8:	2007      	movs	r0, #7
 80031aa:	f018 ffa0 	bl	801c0ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2100      	movs	r1, #0
 80031b2:	2028      	movs	r0, #40	; 0x28
 80031b4:	f018 ff7f 	bl	801c0b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031b8:	2028      	movs	r0, #40	; 0x28
 80031ba:	f018 ff98 	bl	801c0ee <HAL_NVIC_EnableIRQ>

}
 80031be:	bf00      	nop
 80031c0:	3728      	adds	r7, #40	; 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40020800 	.word	0x40020800
 80031d0:	40020000 	.word	0x40020000
 80031d4:	40020400 	.word	0x40020400

080031d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031dc:	b672      	cpsid	i
}
 80031de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031e0:	e7fe      	b.n	80031e0 <Error_Handler+0x8>
	...

080031e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_MspInit+0x4c>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <HAL_MspInit+0x4c>)
 80031f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f8:	6453      	str	r3, [r2, #68]	; 0x44
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_MspInit+0x4c>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_MspInit+0x4c>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a08      	ldr	r2, [pc, #32]	; (8003230 <HAL_MspInit+0x4c>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	6413      	str	r3, [r2, #64]	; 0x40
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_MspInit+0x4c>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003222:	2007      	movs	r0, #7
 8003224:	f018 ff3c 	bl	801c0a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40023800 	.word	0x40023800

08003234 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08c      	sub	sp, #48	; 0x30
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 031c 	add.w	r3, r7, #28
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a49      	ldr	r2, [pc, #292]	; (8003378 <HAL_ADC_MspInit+0x144>)
 8003252:	4293      	cmp	r3, r2
 8003254:	f040 808c 	bne.w	8003370 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	4b47      	ldr	r3, [pc, #284]	; (800337c <HAL_ADC_MspInit+0x148>)
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	4a46      	ldr	r2, [pc, #280]	; (800337c <HAL_ADC_MspInit+0x148>)
 8003262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003266:	6453      	str	r3, [r2, #68]	; 0x44
 8003268:	4b44      	ldr	r3, [pc, #272]	; (800337c <HAL_ADC_MspInit+0x148>)
 800326a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	61bb      	str	r3, [r7, #24]
 8003272:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	4b40      	ldr	r3, [pc, #256]	; (800337c <HAL_ADC_MspInit+0x148>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	4a3f      	ldr	r2, [pc, #252]	; (800337c <HAL_ADC_MspInit+0x148>)
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	6313      	str	r3, [r2, #48]	; 0x30
 8003284:	4b3d      	ldr	r3, [pc, #244]	; (800337c <HAL_ADC_MspInit+0x148>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	4b39      	ldr	r3, [pc, #228]	; (800337c <HAL_ADC_MspInit+0x148>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	4a38      	ldr	r2, [pc, #224]	; (800337c <HAL_ADC_MspInit+0x148>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6313      	str	r3, [r2, #48]	; 0x30
 80032a0:	4b36      	ldr	r3, [pc, #216]	; (800337c <HAL_ADC_MspInit+0x148>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	4b32      	ldr	r3, [pc, #200]	; (800337c <HAL_ADC_MspInit+0x148>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	4a31      	ldr	r2, [pc, #196]	; (800337c <HAL_ADC_MspInit+0x148>)
 80032b6:	f043 0302 	orr.w	r3, r3, #2
 80032ba:	6313      	str	r3, [r2, #48]	; 0x30
 80032bc:	4b2f      	ldr	r3, [pc, #188]	; (800337c <HAL_ADC_MspInit+0x148>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RSSI_Pin;
 80032c8:	2304      	movs	r3, #4
 80032ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032cc:	2303      	movs	r3, #3
 80032ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 80032d4:	f107 031c 	add.w	r3, r7, #28
 80032d8:	4619      	mov	r1, r3
 80032da:	4829      	ldr	r0, [pc, #164]	; (8003380 <HAL_ADC_MspInit+0x14c>)
 80032dc:	f019 fb4c 	bl	801c978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_IN_Pin|CURRENT_IN_Pin;
 80032e0:	23c0      	movs	r3, #192	; 0xc0
 80032e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032e4:	2303      	movs	r3, #3
 80032e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ec:	f107 031c 	add.w	r3, r7, #28
 80032f0:	4619      	mov	r1, r3
 80032f2:	4824      	ldr	r0, [pc, #144]	; (8003384 <HAL_ADC_MspInit+0x150>)
 80032f4:	f019 fb40 	bl	801c978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXTERNAL_PAD_Pin;
 80032f8:	2302      	movs	r3, #2
 80032fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032fc:	2303      	movs	r3, #3
 80032fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXTERNAL_PAD_GPIO_Port, &GPIO_InitStruct);
 8003304:	f107 031c 	add.w	r3, r7, #28
 8003308:	4619      	mov	r1, r3
 800330a:	481f      	ldr	r0, [pc, #124]	; (8003388 <HAL_ADC_MspInit+0x154>)
 800330c:	f019 fb34 	bl	801c978 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003310:	4b1e      	ldr	r3, [pc, #120]	; (800338c <HAL_ADC_MspInit+0x158>)
 8003312:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <HAL_ADC_MspInit+0x15c>)
 8003314:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_ADC_MspInit+0x158>)
 8003318:	2200      	movs	r2, #0
 800331a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800331c:	4b1b      	ldr	r3, [pc, #108]	; (800338c <HAL_ADC_MspInit+0x158>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HAL_ADC_MspInit+0x158>)
 8003324:	2200      	movs	r2, #0
 8003326:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003328:	4b18      	ldr	r3, [pc, #96]	; (800338c <HAL_ADC_MspInit+0x158>)
 800332a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800332e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003330:	4b16      	ldr	r3, [pc, #88]	; (800338c <HAL_ADC_MspInit+0x158>)
 8003332:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003336:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003338:	4b14      	ldr	r3, [pc, #80]	; (800338c <HAL_ADC_MspInit+0x158>)
 800333a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800333e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_ADC_MspInit+0x158>)
 8003342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003346:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003348:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_ADC_MspInit+0x158>)
 800334a:	2200      	movs	r2, #0
 800334c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800334e:	4b0f      	ldr	r3, [pc, #60]	; (800338c <HAL_ADC_MspInit+0x158>)
 8003350:	2200      	movs	r2, #0
 8003352:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003354:	480d      	ldr	r0, [pc, #52]	; (800338c <HAL_ADC_MspInit+0x158>)
 8003356:	f018 fef3 	bl	801c140 <HAL_DMA_Init>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003360:	f7ff ff3a 	bl	80031d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a09      	ldr	r2, [pc, #36]	; (800338c <HAL_ADC_MspInit+0x158>)
 8003368:	639a      	str	r2, [r3, #56]	; 0x38
 800336a:	4a08      	ldr	r2, [pc, #32]	; (800338c <HAL_ADC_MspInit+0x158>)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003370:	bf00      	nop
 8003372:	3730      	adds	r7, #48	; 0x30
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40012000 	.word	0x40012000
 800337c:	40023800 	.word	0x40023800
 8003380:	40020800 	.word	0x40020800
 8003384:	40020000 	.word	0x40020000
 8003388:	40020400 	.word	0x40020400
 800338c:	2000050c 	.word	0x2000050c
 8003390:	40026410 	.word	0x40026410

08003394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08c      	sub	sp, #48	; 0x30
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 031c 	add.w	r3, r7, #28
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a71      	ldr	r2, [pc, #452]	; (8003578 <HAL_I2C_MspInit+0x1e4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	f040 8098 	bne.w	80034e8 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b8:	2300      	movs	r3, #0
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	4b6f      	ldr	r3, [pc, #444]	; (800357c <HAL_I2C_MspInit+0x1e8>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	4a6e      	ldr	r2, [pc, #440]	; (800357c <HAL_I2C_MspInit+0x1e8>)
 80033c2:	f043 0302 	orr.w	r3, r3, #2
 80033c6:	6313      	str	r3, [r2, #48]	; 0x30
 80033c8:	4b6c      	ldr	r3, [pc, #432]	; (800357c <HAL_I2C_MspInit+0x1e8>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033d4:	23c0      	movs	r3, #192	; 0xc0
 80033d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033d8:	2312      	movs	r3, #18
 80033da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e0:	2303      	movs	r3, #3
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033e4:	2304      	movs	r3, #4
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e8:	f107 031c 	add.w	r3, r7, #28
 80033ec:	4619      	mov	r1, r3
 80033ee:	4864      	ldr	r0, [pc, #400]	; (8003580 <HAL_I2C_MspInit+0x1ec>)
 80033f0:	f019 fac2 	bl	801c978 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	4b60      	ldr	r3, [pc, #384]	; (800357c <HAL_I2C_MspInit+0x1e8>)
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	4a5f      	ldr	r2, [pc, #380]	; (800357c <HAL_I2C_MspInit+0x1e8>)
 80033fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003402:	6413      	str	r3, [r2, #64]	; 0x40
 8003404:	4b5d      	ldr	r3, [pc, #372]	; (800357c <HAL_I2C_MspInit+0x1e8>)
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003410:	4b5c      	ldr	r3, [pc, #368]	; (8003584 <HAL_I2C_MspInit+0x1f0>)
 8003412:	4a5d      	ldr	r2, [pc, #372]	; (8003588 <HAL_I2C_MspInit+0x1f4>)
 8003414:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003416:	4b5b      	ldr	r3, [pc, #364]	; (8003584 <HAL_I2C_MspInit+0x1f0>)
 8003418:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800341c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800341e:	4b59      	ldr	r3, [pc, #356]	; (8003584 <HAL_I2C_MspInit+0x1f0>)
 8003420:	2200      	movs	r2, #0
 8003422:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003424:	4b57      	ldr	r3, [pc, #348]	; (8003584 <HAL_I2C_MspInit+0x1f0>)
 8003426:	2200      	movs	r2, #0
 8003428:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800342a:	4b56      	ldr	r3, [pc, #344]	; (8003584 <HAL_I2C_MspInit+0x1f0>)
 800342c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003430:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003432:	4b54      	ldr	r3, [pc, #336]	; (8003584 <HAL_I2C_MspInit+0x1f0>)
 8003434:	2200      	movs	r2, #0
 8003436:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003438:	4b52      	ldr	r3, [pc, #328]	; (8003584 <HAL_I2C_MspInit+0x1f0>)
 800343a:	2200      	movs	r2, #0
 800343c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800343e:	4b51      	ldr	r3, [pc, #324]	; (8003584 <HAL_I2C_MspInit+0x1f0>)
 8003440:	2200      	movs	r2, #0
 8003442:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003444:	4b4f      	ldr	r3, [pc, #316]	; (8003584 <HAL_I2C_MspInit+0x1f0>)
 8003446:	2200      	movs	r2, #0
 8003448:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800344a:	4b4e      	ldr	r3, [pc, #312]	; (8003584 <HAL_I2C_MspInit+0x1f0>)
 800344c:	2200      	movs	r2, #0
 800344e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003450:	484c      	ldr	r0, [pc, #304]	; (8003584 <HAL_I2C_MspInit+0x1f0>)
 8003452:	f018 fe75 	bl	801c140 <HAL_DMA_Init>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800345c:	f7ff febc 	bl	80031d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a48      	ldr	r2, [pc, #288]	; (8003584 <HAL_I2C_MspInit+0x1f0>)
 8003464:	639a      	str	r2, [r3, #56]	; 0x38
 8003466:	4a47      	ldr	r2, [pc, #284]	; (8003584 <HAL_I2C_MspInit+0x1f0>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800346c:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_I2C_MspInit+0x1f8>)
 800346e:	4a48      	ldr	r2, [pc, #288]	; (8003590 <HAL_I2C_MspInit+0x1fc>)
 8003470:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8003472:	4b46      	ldr	r3, [pc, #280]	; (800358c <HAL_I2C_MspInit+0x1f8>)
 8003474:	2200      	movs	r2, #0
 8003476:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003478:	4b44      	ldr	r3, [pc, #272]	; (800358c <HAL_I2C_MspInit+0x1f8>)
 800347a:	2240      	movs	r2, #64	; 0x40
 800347c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800347e:	4b43      	ldr	r3, [pc, #268]	; (800358c <HAL_I2C_MspInit+0x1f8>)
 8003480:	2200      	movs	r2, #0
 8003482:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003484:	4b41      	ldr	r3, [pc, #260]	; (800358c <HAL_I2C_MspInit+0x1f8>)
 8003486:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800348a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800348c:	4b3f      	ldr	r3, [pc, #252]	; (800358c <HAL_I2C_MspInit+0x1f8>)
 800348e:	2200      	movs	r2, #0
 8003490:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003492:	4b3e      	ldr	r3, [pc, #248]	; (800358c <HAL_I2C_MspInit+0x1f8>)
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003498:	4b3c      	ldr	r3, [pc, #240]	; (800358c <HAL_I2C_MspInit+0x1f8>)
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800349e:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_I2C_MspInit+0x1f8>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034a4:	4b39      	ldr	r3, [pc, #228]	; (800358c <HAL_I2C_MspInit+0x1f8>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80034aa:	4838      	ldr	r0, [pc, #224]	; (800358c <HAL_I2C_MspInit+0x1f8>)
 80034ac:	f018 fe48 	bl	801c140 <HAL_DMA_Init>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80034b6:	f7ff fe8f 	bl	80031d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a33      	ldr	r2, [pc, #204]	; (800358c <HAL_I2C_MspInit+0x1f8>)
 80034be:	635a      	str	r2, [r3, #52]	; 0x34
 80034c0:	4a32      	ldr	r2, [pc, #200]	; (800358c <HAL_I2C_MspInit+0x1f8>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80034c6:	2200      	movs	r2, #0
 80034c8:	2100      	movs	r1, #0
 80034ca:	201f      	movs	r0, #31
 80034cc:	f018 fdf3 	bl	801c0b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80034d0:	201f      	movs	r0, #31
 80034d2:	f018 fe0c 	bl	801c0ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80034d6:	2200      	movs	r2, #0
 80034d8:	2100      	movs	r1, #0
 80034da:	2020      	movs	r0, #32
 80034dc:	f018 fdeb 	bl	801c0b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80034e0:	2020      	movs	r0, #32
 80034e2:	f018 fe04 	bl	801c0ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80034e6:	e042      	b.n	800356e <HAL_I2C_MspInit+0x1da>
  else if(hi2c->Instance==I2C2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a29      	ldr	r2, [pc, #164]	; (8003594 <HAL_I2C_MspInit+0x200>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d13d      	bne.n	800356e <HAL_I2C_MspInit+0x1da>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	4b21      	ldr	r3, [pc, #132]	; (800357c <HAL_I2C_MspInit+0x1e8>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	4a20      	ldr	r2, [pc, #128]	; (800357c <HAL_I2C_MspInit+0x1e8>)
 80034fc:	f043 0302 	orr.w	r3, r3, #2
 8003500:	6313      	str	r3, [r2, #48]	; 0x30
 8003502:	4b1e      	ldr	r3, [pc, #120]	; (800357c <HAL_I2C_MspInit+0x1e8>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800350e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003514:	2312      	movs	r3, #18
 8003516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351c:	2303      	movs	r3, #3
 800351e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003520:	2304      	movs	r3, #4
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003524:	f107 031c 	add.w	r3, r7, #28
 8003528:	4619      	mov	r1, r3
 800352a:	4815      	ldr	r0, [pc, #84]	; (8003580 <HAL_I2C_MspInit+0x1ec>)
 800352c:	f019 fa24 	bl	801c978 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003536:	2312      	movs	r3, #18
 8003538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353e:	2303      	movs	r3, #3
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003542:	2309      	movs	r3, #9
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003546:	f107 031c 	add.w	r3, r7, #28
 800354a:	4619      	mov	r1, r3
 800354c:	480c      	ldr	r0, [pc, #48]	; (8003580 <HAL_I2C_MspInit+0x1ec>)
 800354e:	f019 fa13 	bl	801c978 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_I2C_MspInit+0x1e8>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a08      	ldr	r2, [pc, #32]	; (800357c <HAL_I2C_MspInit+0x1e8>)
 800355c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003560:	6413      	str	r3, [r2, #64]	; 0x40
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_I2C_MspInit+0x1e8>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
}
 800356e:	bf00      	nop
 8003570:	3730      	adds	r7, #48	; 0x30
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40005400 	.word	0x40005400
 800357c:	40023800 	.word	0x40023800
 8003580:	40020400 	.word	0x40020400
 8003584:	20000614 	.word	0x20000614
 8003588:	40026010 	.word	0x40026010
 800358c:	20000674 	.word	0x20000674
 8003590:	40026028 	.word	0x40026028
 8003594:	40005800 	.word	0x40005800

08003598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a8:	d10e      	bne.n	80035c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_TIM_Base_MspInit+0x70>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	4a15      	ldr	r2, [pc, #84]	; (8003608 <HAL_TIM_Base_MspInit+0x70>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <HAL_TIM_Base_MspInit+0x70>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035c6:	e01a      	b.n	80035fe <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a0f      	ldr	r2, [pc, #60]	; (800360c <HAL_TIM_Base_MspInit+0x74>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d115      	bne.n	80035fe <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <HAL_TIM_Base_MspInit+0x70>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <HAL_TIM_Base_MspInit+0x70>)
 80035dc:	f043 0302 	orr.w	r3, r3, #2
 80035e0:	6413      	str	r3, [r2, #64]	; 0x40
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_TIM_Base_MspInit+0x70>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80035ee:	2200      	movs	r2, #0
 80035f0:	2100      	movs	r1, #0
 80035f2:	201d      	movs	r0, #29
 80035f4:	f018 fd5f 	bl	801c0b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035f8:	201d      	movs	r0, #29
 80035fa:	f018 fd78 	bl	801c0ee <HAL_NVIC_EnableIRQ>
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800
 800360c:	40000400 	.word	0x40000400

08003610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	; 0x28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a21      	ldr	r2, [pc, #132]	; (80036b4 <HAL_TIM_MspPostInit+0xa4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d13c      	bne.n	80036ac <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <HAL_TIM_MspPostInit+0xa8>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	4a1f      	ldr	r2, [pc, #124]	; (80036b8 <HAL_TIM_MspPostInit+0xa8>)
 800363c:	f043 0302 	orr.w	r3, r3, #2
 8003640:	6313      	str	r3, [r2, #48]	; 0x30
 8003642:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <HAL_TIM_MspPostInit+0xa8>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_TIM_MspPostInit+0xa8>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <HAL_TIM_MspPostInit+0xa8>)
 8003658:	f043 0304 	orr.w	r3, r3, #4
 800365c:	6313      	str	r3, [r2, #48]	; 0x30
 800365e:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <HAL_TIM_MspPostInit+0xa8>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800366a:	2301      	movs	r3, #1
 800366c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366e:	2302      	movs	r3, #2
 8003670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003676:	2300      	movs	r3, #0
 8003678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800367a:	2302      	movs	r3, #2
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800367e:	f107 0314 	add.w	r3, r7, #20
 8003682:	4619      	mov	r1, r3
 8003684:	480d      	ldr	r0, [pc, #52]	; (80036bc <HAL_TIM_MspPostInit+0xac>)
 8003686:	f019 f977 	bl	801c978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800368a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800368e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003690:	2302      	movs	r3, #2
 8003692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003698:	2300      	movs	r3, #0
 800369a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800369c:	2302      	movs	r3, #2
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036a0:	f107 0314 	add.w	r3, r7, #20
 80036a4:	4619      	mov	r1, r3
 80036a6:	4806      	ldr	r0, [pc, #24]	; (80036c0 <HAL_TIM_MspPostInit+0xb0>)
 80036a8:	f019 f966 	bl	801c978 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036ac:	bf00      	nop
 80036ae:	3728      	adds	r7, #40	; 0x28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40020400 	.word	0x40020400
 80036c0:	40020800 	.word	0x40020800

080036c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08e      	sub	sp, #56	; 0x38
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a58      	ldr	r2, [pc, #352]	; (8003844 <HAL_UART_MspInit+0x180>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d135      	bne.n	8003752 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	623b      	str	r3, [r7, #32]
 80036ea:	4b57      	ldr	r3, [pc, #348]	; (8003848 <HAL_UART_MspInit+0x184>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	4a56      	ldr	r2, [pc, #344]	; (8003848 <HAL_UART_MspInit+0x184>)
 80036f0:	f043 0310 	orr.w	r3, r3, #16
 80036f4:	6453      	str	r3, [r2, #68]	; 0x44
 80036f6:	4b54      	ldr	r3, [pc, #336]	; (8003848 <HAL_UART_MspInit+0x184>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	623b      	str	r3, [r7, #32]
 8003700:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	4b50      	ldr	r3, [pc, #320]	; (8003848 <HAL_UART_MspInit+0x184>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	4a4f      	ldr	r2, [pc, #316]	; (8003848 <HAL_UART_MspInit+0x184>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <HAL_UART_MspInit+0x184>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800371e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003724:	2302      	movs	r3, #2
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372c:	2303      	movs	r3, #3
 800372e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003730:	2307      	movs	r3, #7
 8003732:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003738:	4619      	mov	r1, r3
 800373a:	4844      	ldr	r0, [pc, #272]	; (800384c <HAL_UART_MspInit+0x188>)
 800373c:	f019 f91c 	bl	801c978 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003740:	2200      	movs	r2, #0
 8003742:	2100      	movs	r1, #0
 8003744:	2025      	movs	r0, #37	; 0x25
 8003746:	f018 fcb6 	bl	801c0b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800374a:	2025      	movs	r0, #37	; 0x25
 800374c:	f018 fccf 	bl	801c0ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003750:	e073      	b.n	800383a <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a3e      	ldr	r2, [pc, #248]	; (8003850 <HAL_UART_MspInit+0x18c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d134      	bne.n	80037c6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800375c:	2300      	movs	r3, #0
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	4b39      	ldr	r3, [pc, #228]	; (8003848 <HAL_UART_MspInit+0x184>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	4a38      	ldr	r2, [pc, #224]	; (8003848 <HAL_UART_MspInit+0x184>)
 8003766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376a:	6413      	str	r3, [r2, #64]	; 0x40
 800376c:	4b36      	ldr	r3, [pc, #216]	; (8003848 <HAL_UART_MspInit+0x184>)
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	4b32      	ldr	r3, [pc, #200]	; (8003848 <HAL_UART_MspInit+0x184>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	4a31      	ldr	r2, [pc, #196]	; (8003848 <HAL_UART_MspInit+0x184>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6313      	str	r3, [r2, #48]	; 0x30
 8003788:	4b2f      	ldr	r3, [pc, #188]	; (8003848 <HAL_UART_MspInit+0x184>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003794:	230c      	movs	r3, #12
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003798:	2302      	movs	r3, #2
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a0:	2303      	movs	r3, #3
 80037a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037a4:	2307      	movs	r3, #7
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ac:	4619      	mov	r1, r3
 80037ae:	4827      	ldr	r0, [pc, #156]	; (800384c <HAL_UART_MspInit+0x188>)
 80037b0:	f019 f8e2 	bl	801c978 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037b4:	2200      	movs	r2, #0
 80037b6:	2100      	movs	r1, #0
 80037b8:	2026      	movs	r0, #38	; 0x26
 80037ba:	f018 fc7c 	bl	801c0b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037be:	2026      	movs	r0, #38	; 0x26
 80037c0:	f018 fc95 	bl	801c0ee <HAL_NVIC_EnableIRQ>
}
 80037c4:	e039      	b.n	800383a <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a22      	ldr	r2, [pc, #136]	; (8003854 <HAL_UART_MspInit+0x190>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d134      	bne.n	800383a <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <HAL_UART_MspInit+0x184>)
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	4a1b      	ldr	r2, [pc, #108]	; (8003848 <HAL_UART_MspInit+0x184>)
 80037da:	f043 0320 	orr.w	r3, r3, #32
 80037de:	6453      	str	r3, [r2, #68]	; 0x44
 80037e0:	4b19      	ldr	r3, [pc, #100]	; (8003848 <HAL_UART_MspInit+0x184>)
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	4b15      	ldr	r3, [pc, #84]	; (8003848 <HAL_UART_MspInit+0x184>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	4a14      	ldr	r2, [pc, #80]	; (8003848 <HAL_UART_MspInit+0x184>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6313      	str	r3, [r2, #48]	; 0x30
 80037fc:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_UART_MspInit+0x184>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003808:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380e:	2302      	movs	r3, #2
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003812:	2300      	movs	r3, #0
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003816:	2303      	movs	r3, #3
 8003818:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800381a:	2308      	movs	r3, #8
 800381c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003822:	4619      	mov	r1, r3
 8003824:	4809      	ldr	r0, [pc, #36]	; (800384c <HAL_UART_MspInit+0x188>)
 8003826:	f019 f8a7 	bl	801c978 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800382a:	2200      	movs	r2, #0
 800382c:	2100      	movs	r1, #0
 800382e:	2047      	movs	r0, #71	; 0x47
 8003830:	f018 fc41 	bl	801c0b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003834:	2047      	movs	r0, #71	; 0x47
 8003836:	f018 fc5a 	bl	801c0ee <HAL_NVIC_EnableIRQ>
}
 800383a:	bf00      	nop
 800383c:	3738      	adds	r7, #56	; 0x38
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40011000 	.word	0x40011000
 8003848:	40023800 	.word	0x40023800
 800384c:	40020000 	.word	0x40020000
 8003850:	40004400 	.word	0x40004400
 8003854:	40011400 	.word	0x40011400

08003858 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <HAL_UART_MspDeInit+0x84>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d10e      	bne.n	8003888 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800386a:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <HAL_UART_MspDeInit+0x88>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4a1c      	ldr	r2, [pc, #112]	; (80038e0 <HAL_UART_MspDeInit+0x88>)
 8003870:	f023 0310 	bic.w	r3, r3, #16
 8003874:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003876:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800387a:	481a      	ldr	r0, [pc, #104]	; (80038e4 <HAL_UART_MspDeInit+0x8c>)
 800387c:	f019 fa00 	bl	801cc80 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003880:	2025      	movs	r0, #37	; 0x25
 8003882:	f018 fc42 	bl	801c10a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8003886:	e025      	b.n	80038d4 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <HAL_UART_MspDeInit+0x90>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d10d      	bne.n	80038ae <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003892:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <HAL_UART_MspDeInit+0x88>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	4a12      	ldr	r2, [pc, #72]	; (80038e0 <HAL_UART_MspDeInit+0x88>)
 8003898:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800389c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 800389e:	210c      	movs	r1, #12
 80038a0:	4810      	ldr	r0, [pc, #64]	; (80038e4 <HAL_UART_MspDeInit+0x8c>)
 80038a2:	f019 f9ed 	bl	801cc80 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80038a6:	2026      	movs	r0, #38	; 0x26
 80038a8:	f018 fc2f 	bl	801c10a <HAL_NVIC_DisableIRQ>
}
 80038ac:	e012      	b.n	80038d4 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART6)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a0e      	ldr	r2, [pc, #56]	; (80038ec <HAL_UART_MspDeInit+0x94>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d10d      	bne.n	80038d4 <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART6_CLK_DISABLE();
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_UART_MspDeInit+0x88>)
 80038ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038bc:	4a08      	ldr	r2, [pc, #32]	; (80038e0 <HAL_UART_MspDeInit+0x88>)
 80038be:	f023 0320 	bic.w	r3, r3, #32
 80038c2:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 80038c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80038c8:	4806      	ldr	r0, [pc, #24]	; (80038e4 <HAL_UART_MspDeInit+0x8c>)
 80038ca:	f019 f9d9 	bl	801cc80 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80038ce:	2047      	movs	r0, #71	; 0x47
 80038d0:	f018 fc1b 	bl	801c10a <HAL_NVIC_DisableIRQ>
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40011000 	.word	0x40011000
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40020000 	.word	0x40020000
 80038e8:	40004400 	.word	0x40004400
 80038ec:	40011400 	.word	0x40011400

080038f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038f4:	e7fe      	b.n	80038f4 <NMI_Handler+0x4>

080038f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038fa:	e7fe      	b.n	80038fa <HardFault_Handler+0x4>

080038fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003900:	e7fe      	b.n	8003900 <MemManage_Handler+0x4>

08003902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003906:	e7fe      	b.n	8003906 <BusFault_Handler+0x4>

08003908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800390c:	e7fe      	b.n	800390c <UsageFault_Handler+0x4>

0800390e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800390e:	b480      	push	{r7}
 8003910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800392a:	b480      	push	{r7}
 800392c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800392e:	bf00      	nop
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  pif_sigTimer1ms();
 800393c:	f00d facc 	bl	8010ed8 <pif_sigTimer1ms>
  pifTimerManager_sigTick(&g_timer_1ms);
 8003940:	4803      	ldr	r0, [pc, #12]	; (8003950 <SysTick_Handler+0x18>)
 8003942:	f011 fb60 	bl	8015006 <pifTimerManager_sigTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003946:	f017 fe95 	bl	801b674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20001528 	.word	0x20001528

08003954 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SONAR_ECHO_Pin);
 8003958:	2002      	movs	r0, #2
 800395a:	f019 fa8f 	bl	801ce7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003968:	4802      	ldr	r0, [pc, #8]	; (8003974 <DMA1_Stream0_IRQHandler+0x10>)
 800396a:	f018 fd81 	bl	801c470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000614 	.word	0x20000614

08003978 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800397c:	4802      	ldr	r0, [pc, #8]	; (8003988 <DMA1_Stream1_IRQHandler+0x10>)
 800397e:	f018 fd77 	bl	801c470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000674 	.word	0x20000674

0800398c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003990:	4802      	ldr	r0, [pc, #8]	; (800399c <TIM3_IRQHandler+0x10>)
 8003992:	f01d f8bb 	bl	8020b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	2000071c 	.word	0x2000071c

080039a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80039a4:	4802      	ldr	r0, [pc, #8]	; (80039b0 <I2C1_EV_IRQHandler+0x10>)
 80039a6:	f01a f91d 	bl	801dbe4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	2000056c 	.word	0x2000056c

080039b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <I2C1_ER_IRQHandler+0x10>)
 80039ba:	f01a fa84 	bl	801dec6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000056c 	.word	0x2000056c

080039c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <USART1_IRQHandler+0x10>)
 80039ce:	f01e f8b5 	bl	8021b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000764 	.word	0x20000764

080039dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039e0:	4802      	ldr	r0, [pc, #8]	; (80039ec <USART2_IRQHandler+0x10>)
 80039e2:	f01e f8ab 	bl	8021b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	200007a8 	.word	0x200007a8

080039f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RC_PPM_Pin);
 80039f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80039f8:	f019 fa40 	bl	801ce7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80039fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a00:	f019 fa3c 	bl	801ce7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a04:	bf00      	nop
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <DMA2_Stream0_IRQHandler+0x10>)
 8003a0e:	f018 fd2f 	bl	801c470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	2000050c 	.word	0x2000050c

08003a1c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003a20:	4802      	ldr	r0, [pc, #8]	; (8003a2c <USART6_IRQHandler+0x10>)
 8003a22:	f01e f88b 	bl	8021b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	200007ec 	.word	0x200007ec

08003a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <_sbrk+0x5c>)
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <_sbrk+0x60>)
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a44:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <_sbrk+0x64>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <_sbrk+0x64>)
 8003a4e:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <_sbrk+0x68>)
 8003a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <_sbrk+0x64>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d207      	bcs.n	8003a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a60:	f01e ffd2 	bl	8022a08 <__errno>
 8003a64:	4603      	mov	r3, r0
 8003a66:	220c      	movs	r2, #12
 8003a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6e:	e009      	b.n	8003a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <_sbrk+0x64>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <_sbrk+0x64>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <_sbrk+0x64>)
 8003a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a82:	68fb      	ldr	r3, [r7, #12]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20020000 	.word	0x20020000
 8003a90:	00000400 	.word	0x00000400
 8003a94:	20000854 	.word	0x20000854
 8003a98:	20001de0 	.word	0x20001de0

08003a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <SystemInit+0x20>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	4a05      	ldr	r2, [pc, #20]	; (8003abc <SystemInit+0x20>)
 8003aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <constrain>:

static bool standardBoardAlignment = true;     // board orientation correction
static float boardRotation[3][3];              // matrix

int constrain(int amt, int low, int high)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	da01      	bge.n	8003ad8 <constrain+0x18>
        return low;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	e006      	b.n	8003ae6 <constrain+0x26>
    else if (amt > high)
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	dd01      	ble.n	8003ae4 <constrain+0x24>
        return high;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	e000      	b.n	8003ae6 <constrain+0x26>
    else
        return amt;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	0000      	movs	r0, r0
 8003af4:	0000      	movs	r0, r0
	...

08003af8 <initBoardAlignment>:

void initBoardAlignment(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08e      	sub	sp, #56	; 0x38
 8003afc:	af00      	add	r7, sp, #0
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!mcfg.board_align_roll && !mcfg.board_align_pitch && !mcfg.board_align_yaw)
 8003afe:	4b8a      	ldr	r3, [pc, #552]	; (8003d28 <initBoardAlignment+0x230>)
 8003b00:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10a      	bne.n	8003b1e <initBoardAlignment+0x26>
 8003b08:	4b87      	ldr	r3, [pc, #540]	; (8003d28 <initBoardAlignment+0x230>)
 8003b0a:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d105      	bne.n	8003b1e <initBoardAlignment+0x26>
 8003b12:	4b85      	ldr	r3, [pc, #532]	; (8003d28 <initBoardAlignment+0x230>)
 8003b14:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80fd 	beq.w	8003d18 <initBoardAlignment+0x220>
        return;

    standardBoardAlignment = false;
 8003b1e:	4b83      	ldr	r3, [pc, #524]	; (8003d2c <initBoardAlignment+0x234>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]

    // deg2rad
    roll = mcfg.board_align_roll * M_PI / 180.0f;
 8003b24:	4b80      	ldr	r3, [pc, #512]	; (8003d28 <initBoardAlignment+0x230>)
 8003b26:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fc fcae 	bl	800048c <__aeabi_i2d>
 8003b30:	a37b      	add	r3, pc, #492	; (adr r3, 8003d20 <initBoardAlignment+0x228>)
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	f7fc fd13 	bl	8000560 <__aeabi_dmul>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	4b7a      	ldr	r3, [pc, #488]	; (8003d30 <initBoardAlignment+0x238>)
 8003b48:	f7fc fe34 	bl	80007b4 <__aeabi_ddiv>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	f7fc ffe6 	bl	8000b24 <__aeabi_d2f>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
    pitch = mcfg.board_align_pitch * M_PI / 180.0f;
 8003b5c:	4b72      	ldr	r3, [pc, #456]	; (8003d28 <initBoardAlignment+0x230>)
 8003b5e:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fc92 	bl	800048c <__aeabi_i2d>
 8003b68:	a36d      	add	r3, pc, #436	; (adr r3, 8003d20 <initBoardAlignment+0x228>)
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f7fc fcf7 	bl	8000560 <__aeabi_dmul>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4610      	mov	r0, r2
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	4b6c      	ldr	r3, [pc, #432]	; (8003d30 <initBoardAlignment+0x238>)
 8003b80:	f7fc fe18 	bl	80007b4 <__aeabi_ddiv>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f7fc ffca 	bl	8000b24 <__aeabi_d2f>
 8003b90:	4603      	mov	r3, r0
 8003b92:	633b      	str	r3, [r7, #48]	; 0x30
    yaw = mcfg.board_align_yaw * M_PI / 180.0f;
 8003b94:	4b64      	ldr	r3, [pc, #400]	; (8003d28 <initBoardAlignment+0x230>)
 8003b96:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fc fc76 	bl	800048c <__aeabi_i2d>
 8003ba0:	a35f      	add	r3, pc, #380	; (adr r3, 8003d20 <initBoardAlignment+0x228>)
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	f7fc fcdb 	bl	8000560 <__aeabi_dmul>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	4b5e      	ldr	r3, [pc, #376]	; (8003d30 <initBoardAlignment+0x238>)
 8003bb8:	f7fc fdfc 	bl	80007b4 <__aeabi_ddiv>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f7fc ffae 	bl	8000b24 <__aeabi_d2f>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c

    cosx = cosf(roll);
 8003bcc:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003bd0:	f01f fa42 	bl	8023058 <cosf>
 8003bd4:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinx = sinf(roll);
 8003bd8:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003bdc:	f01f fac0 	bl	8023160 <sinf>
 8003be0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    cosy = cosf(pitch);
 8003be4:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003be8:	f01f fa36 	bl	8023058 <cosf>
 8003bec:	ed87 0a08 	vstr	s0, [r7, #32]
    siny = sinf(pitch);
 8003bf0:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003bf4:	f01f fab4 	bl	8023160 <sinf>
 8003bf8:	ed87 0a07 	vstr	s0, [r7, #28]
    cosz = cosf(yaw);
 8003bfc:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003c00:	f01f fa2a 	bl	8023058 <cosf>
 8003c04:	ed87 0a06 	vstr	s0, [r7, #24]
    sinz = sinf(yaw);
 8003c08:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003c0c:	f01f faa8 	bl	8023160 <sinf>
 8003c10:	ed87 0a05 	vstr	s0, [r7, #20]

    coszcosx = cosz * cosx;
 8003c14:	ed97 7a06 	vldr	s14, [r7, #24]
 8003c18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c20:	edc7 7a04 	vstr	s15, [r7, #16]
    coszcosy = cosz * cosy;
 8003c24:	ed97 7a06 	vldr	s14, [r7, #24]
 8003c28:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c30:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzcosx = sinz * cosx;
 8003c34:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c40:	edc7 7a02 	vstr	s15, [r7, #8]
    coszsinx = sinx * cosz;
 8003c44:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003c48:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c50:	edc7 7a01 	vstr	s15, [r7, #4]
    sinzsinx = sinx * sinz;
 8003c54:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003c58:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c60:	edc7 7a00 	vstr	s15, [r7]

    // define rotation matrix
    boardRotation[0][0] = coszcosy;
 8003c64:	4a33      	ldr	r2, [pc, #204]	; (8003d34 <initBoardAlignment+0x23c>)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6013      	str	r3, [r2, #0]
    boardRotation[0][1] = -cosy * sinz;
 8003c6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c6e:	eeb1 7a67 	vneg.f32	s14, s15
 8003c72:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7a:	4b2e      	ldr	r3, [pc, #184]	; (8003d34 <initBoardAlignment+0x23c>)
 8003c7c:	edc3 7a01 	vstr	s15, [r3, #4]
    boardRotation[0][2] = siny;
 8003c80:	4a2c      	ldr	r2, [pc, #176]	; (8003d34 <initBoardAlignment+0x23c>)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	6093      	str	r3, [r2, #8]

    boardRotation[1][0] = sinzcosx + (coszsinx * siny);
 8003c86:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c92:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9a:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <initBoardAlignment+0x23c>)
 8003c9c:	edc3 7a03 	vstr	s15, [r3, #12]
    boardRotation[1][1] = coszcosx - (sinzsinx * siny);
 8003ca0:	ed97 7a00 	vldr	s14, [r7]
 8003ca4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cac:	ed97 7a04 	vldr	s14, [r7, #16]
 8003cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cb4:	4b1f      	ldr	r3, [pc, #124]	; (8003d34 <initBoardAlignment+0x23c>)
 8003cb6:	edc3 7a04 	vstr	s15, [r3, #16]
    boardRotation[1][2] = -sinx * cosy;
 8003cba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003cbe:	eeb1 7a67 	vneg.f32	s14, s15
 8003cc2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cca:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <initBoardAlignment+0x23c>)
 8003ccc:	edc3 7a05 	vstr	s15, [r3, #20]

    boardRotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8003cd0:	ed97 7a04 	vldr	s14, [r7, #16]
 8003cd4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cdc:	ed97 7a00 	vldr	s14, [r7]
 8003ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ce4:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <initBoardAlignment+0x23c>)
 8003ce6:	edc3 7a06 	vstr	s15, [r3, #24]
    boardRotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8003cea:	ed97 7a02 	vldr	s14, [r7, #8]
 8003cee:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <initBoardAlignment+0x23c>)
 8003d00:	edc3 7a07 	vstr	s15, [r3, #28]
    boardRotation[2][2] = cosy * cosx;
 8003d04:	ed97 7a08 	vldr	s14, [r7, #32]
 8003d08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d10:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <initBoardAlignment+0x23c>)
 8003d12:	edc3 7a08 	vstr	s15, [r3, #32]
 8003d16:	e000      	b.n	8003d1a <initBoardAlignment+0x222>
        return;
 8003d18:	bf00      	nop
}
 8003d1a:	3738      	adds	r7, #56	; 0x38
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	54442d18 	.word	0x54442d18
 8003d24:	400921fb 	.word	0x400921fb
 8003d28:	200008e8 	.word	0x200008e8
 8003d2c:	20000024 	.word	0x20000024
 8003d30:	40668000 	.word	0x40668000
 8003d34:	20000858 	.word	0x20000858

08003d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d3c:	480d      	ldr	r0, [pc, #52]	; (8003d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d3e:	490e      	ldr	r1, [pc, #56]	; (8003d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d40:	4a0e      	ldr	r2, [pc, #56]	; (8003d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d44:	e002      	b.n	8003d4c <LoopCopyDataInit>

08003d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d4a:	3304      	adds	r3, #4

08003d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d50:	d3f9      	bcc.n	8003d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d52:	4a0b      	ldr	r2, [pc, #44]	; (8003d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d54:	4c0b      	ldr	r4, [pc, #44]	; (8003d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d58:	e001      	b.n	8003d5e <LoopFillZerobss>

08003d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d5c:	3204      	adds	r2, #4

08003d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d60:	d3fb      	bcc.n	8003d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d62:	f7ff fe9b 	bl	8003a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d66:	f01e fe55 	bl	8022a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d6a:	f7fe fb4b 	bl	8002404 <main>
  bx  lr    
 8003d6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d78:	200001bc 	.word	0x200001bc
  ldr r2, =_sidata
 8003d7c:	080297e0 	.word	0x080297e0
  ldr r2, =_sbss
 8003d80:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8003d84:	20001ddc 	.word	0x20001ddc

08003d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d88:	e7fe      	b.n	8003d88 <ADC_IRQHandler>
	...

08003d8c <_evtBuzzerFinish>:
static uint8_t readyBeepDone = 0;

PifBuzzer s_buzzer;

static void _evtBuzzerFinish(PifId id)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	80fb      	strh	r3, [r7, #6]
	(void)id;

    buzzerMode = BUZZER_STOPPED;
 8003d96:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <_evtBuzzerFinish+0x1c>)
 8003d98:	220d      	movs	r2, #13
 8003d9a:	701a      	strb	r2, [r3, #0]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	20000025 	.word	0x20000025

08003dac <buzzerInit>:

bool buzzerInit()
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
    if (!pifBuzzer_Init(&s_buzzer, PIF_ID_BUZZER, actBuzzerAction)) return false;
 8003db0:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <buzzerInit+0x28>)
 8003db2:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003db6:	4808      	ldr	r0, [pc, #32]	; (8003dd8 <buzzerInit+0x2c>)
 8003db8:	f016 fcca 	bl	801a750 <pifBuzzer_Init>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <buzzerInit+0x1a>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e003      	b.n	8003dce <buzzerInit+0x22>
    s_buzzer.evt_finish = _evtBuzzerFinish;
 8003dc6:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <buzzerInit+0x2c>)
 8003dc8:	4a04      	ldr	r2, [pc, #16]	; (8003ddc <buzzerInit+0x30>)
 8003dca:	601a      	str	r2, [r3, #0]
    return true;
 8003dcc:	2301      	movs	r3, #1
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	08001dad 	.word	0x08001dad
 8003dd8:	20000894 	.word	0x20000894
 8003ddc:	08003d8d 	.word	0x08003d8d

08003de0 <buzzer>:

/* Buzzer -function is used to activate/deactive buzzer.
 * Parameter defines the used sequence.
 */
void buzzer(uint8_t mode)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	71fb      	strb	r3, [r7, #7]
#ifdef GPS
    uint8_t i = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	73fb      	strb	r3, [r7, #15]
#endif

    // Just return if same or higher priority sound is active.
    if (buzzerMode <= mode)
 8003dee:	4b62      	ldr	r3, [pc, #392]	; (8003f78 <buzzer+0x198>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	79fa      	ldrb	r2, [r7, #7]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	f080 80b7 	bcs.w	8003f68 <buzzer+0x188>
        return;

    switch (mode) {
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	f200 80b5 	bhi.w	8003f6c <buzzer+0x18c>
 8003e02:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <buzzer+0x28>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003e3d 	.word	0x08003e3d
 8003e0c:	08003ebb 	.word	0x08003ebb
 8003e10:	08003eab 	.word	0x08003eab
 8003e14:	08003e9b 	.word	0x08003e9b
 8003e18:	08003ecb 	.word	0x08003ecb
 8003e1c:	08003e6b 	.word	0x08003e6b
 8003e20:	08003e6b 	.word	0x08003e6b
 8003e24:	08003edb 	.word	0x08003edb
 8003e28:	08003eeb 	.word	0x08003eeb
 8003e2c:	08003ecb 	.word	0x08003ecb
 8003e30:	08003e7b 	.word	0x08003e7b
 8003e34:	08003e8b 	.word	0x08003e8b
 8003e38:	08003e4b 	.word	0x08003e4b
        case BUZZER_STOP:
            buzzerMode = BUZZER_STOPPED;
 8003e3c:	4b4e      	ldr	r3, [pc, #312]	; (8003f78 <buzzer+0x198>)
 8003e3e:	220d      	movs	r2, #13
 8003e40:	701a      	strb	r2, [r3, #0]
            pifBuzzer_Stop(&s_buzzer);
 8003e42:	484e      	ldr	r0, [pc, #312]	; (8003f7c <buzzer+0x19c>)
 8003e44:	f016 fcf0 	bl	801a828 <pifBuzzer_Stop>
            break;
 8003e48:	e093      	b.n	8003f72 <buzzer+0x192>
        case BUZZER_READY_BEEP:
            if (readyBeepDone)
 8003e4a:	4b4d      	ldr	r3, [pc, #308]	; (8003f80 <buzzer+0x1a0>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f040 808e 	bne.w	8003f70 <buzzer+0x190>
                return;
            pifBuzzer_Start(&s_buzzer, buzz_readyBeep);
 8003e54:	494b      	ldr	r1, [pc, #300]	; (8003f84 <buzzer+0x1a4>)
 8003e56:	4849      	ldr	r0, [pc, #292]	; (8003f7c <buzzer+0x19c>)
 8003e58:	f016 fcc4 	bl	801a7e4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003e5c:	4a46      	ldr	r2, [pc, #280]	; (8003f78 <buzzer+0x198>)
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	7013      	strb	r3, [r2, #0]
            readyBeepDone = 1;
 8003e62:	4b47      	ldr	r3, [pc, #284]	; (8003f80 <buzzer+0x1a0>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	701a      	strb	r2, [r3, #0]
            break;
 8003e68:	e083      	b.n	8003f72 <buzzer+0x192>
        case BUZZER_ARMING:
        case BUZZER_DISARMING:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeepFast);
 8003e6a:	4947      	ldr	r1, [pc, #284]	; (8003f88 <buzzer+0x1a8>)
 8003e6c:	4843      	ldr	r0, [pc, #268]	; (8003f7c <buzzer+0x19c>)
 8003e6e:	f016 fcb9 	bl	801a7e4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003e72:	4a41      	ldr	r2, [pc, #260]	; (8003f78 <buzzer+0x198>)
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	7013      	strb	r3, [r2, #0]
            break;
 8003e78:	e07b      	b.n	8003f72 <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION:
            pifBuzzer_Start(&s_buzzer, buzz_2shortBeeps);
 8003e7a:	4944      	ldr	r1, [pc, #272]	; (8003f8c <buzzer+0x1ac>)
 8003e7c:	483f      	ldr	r0, [pc, #252]	; (8003f7c <buzzer+0x19c>)
 8003e7e:	f016 fcb1 	bl	801a7e4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003e82:	4a3d      	ldr	r2, [pc, #244]	; (8003f78 <buzzer+0x198>)
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	7013      	strb	r3, [r2, #0]
            break;
 8003e88:	e073      	b.n	8003f72 <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION_FAIL:
            pifBuzzer_Start(&s_buzzer, buzz_3shortBeeps);
 8003e8a:	4941      	ldr	r1, [pc, #260]	; (8003f90 <buzzer+0x1b0>)
 8003e8c:	483b      	ldr	r0, [pc, #236]	; (8003f7c <buzzer+0x19c>)
 8003e8e:	f016 fca9 	bl	801a7e4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003e92:	4a39      	ldr	r2, [pc, #228]	; (8003f78 <buzzer+0x198>)
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	7013      	strb	r3, [r2, #0]
            break;
 8003e98:	e06b      	b.n	8003f72 <buzzer+0x192>
        case BUZZER_TX_LOST_ARMED:
            pifBuzzer_Start(&s_buzzer, buzz_sos);
 8003e9a:	493e      	ldr	r1, [pc, #248]	; (8003f94 <buzzer+0x1b4>)
 8003e9c:	4837      	ldr	r0, [pc, #220]	; (8003f7c <buzzer+0x19c>)
 8003e9e:	f016 fca1 	bl	801a7e4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003ea2:	4a35      	ldr	r2, [pc, #212]	; (8003f78 <buzzer+0x198>)
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	7013      	strb	r3, [r2, #0]
            break;
 8003ea8:	e063      	b.n	8003f72 <buzzer+0x192>
        case BUZZER_BAT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_longBeep);
 8003eaa:	493b      	ldr	r1, [pc, #236]	; (8003f98 <buzzer+0x1b8>)
 8003eac:	4833      	ldr	r0, [pc, #204]	; (8003f7c <buzzer+0x19c>)
 8003eae:	f016 fc99 	bl	801a7e4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003eb2:	4a31      	ldr	r2, [pc, #196]	; (8003f78 <buzzer+0x198>)
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	7013      	strb	r3, [r2, #0]
            break;
 8003eb8:	e05b      	b.n	8003f72 <buzzer+0x192>
        case BUZZER_BAT_CRIT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_BatteryBeep);
 8003eba:	4938      	ldr	r1, [pc, #224]	; (8003f9c <buzzer+0x1bc>)
 8003ebc:	482f      	ldr	r0, [pc, #188]	; (8003f7c <buzzer+0x19c>)
 8003ebe:	f016 fc91 	bl	801a7e4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003ec2:	4a2d      	ldr	r2, [pc, #180]	; (8003f78 <buzzer+0x198>)
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	7013      	strb	r3, [r2, #0]
            break;
 8003ec8:	e053      	b.n	8003f72 <buzzer+0x192>
        case BUZZER_ARMED:
        case BUZZER_TX_LOST:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeep);
 8003eca:	4935      	ldr	r1, [pc, #212]	; (8003fa0 <buzzer+0x1c0>)
 8003ecc:	482b      	ldr	r0, [pc, #172]	; (8003f7c <buzzer+0x19c>)
 8003ece:	f016 fc89 	bl	801a7e4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003ed2:	4a29      	ldr	r2, [pc, #164]	; (8003f78 <buzzer+0x198>)
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	7013      	strb	r3, [r2, #0]
            break;
 8003ed8:	e04b      	b.n	8003f72 <buzzer+0x192>
        case BUZZER_ARMING_GPS_FIX:
            pifBuzzer_Start(&s_buzzer, buzz_armed);
 8003eda:	4932      	ldr	r1, [pc, #200]	; (8003fa4 <buzzer+0x1c4>)
 8003edc:	4827      	ldr	r0, [pc, #156]	; (8003f7c <buzzer+0x19c>)
 8003ede:	f016 fc81 	bl	801a7e4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003ee2:	4a25      	ldr	r2, [pc, #148]	; (8003f78 <buzzer+0x198>)
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	7013      	strb	r3, [r2, #0]
            break;
 8003ee8:	e043      	b.n	8003f72 <buzzer+0x192>
        case BUZZER_TX_SET:
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5) {
 8003eea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003eee:	f002 ff4b 	bl	8006d88 <feature>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d02f      	beq.n	8003f58 <buzzer+0x178>
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <buzzer+0x1c8>)
 8003efa:	7adb      	ldrb	r3, [r3, #11]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d02b      	beq.n	8003f58 <buzzer+0x178>
 8003f00:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <buzzer+0x1cc>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d927      	bls.n	8003f58 <buzzer+0x178>
                do {
                    buzz_countSats[i] = 5;
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <buzzer+0x1d0>)
 8003f0c:	2105      	movs	r1, #5
 8003f0e:	54d1      	strb	r1, [r2, r3]
                    buzz_countSats[i + 1] = 15;
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	3301      	adds	r3, #1
 8003f14:	4a26      	ldr	r2, [pc, #152]	; (8003fb0 <buzzer+0x1d0>)
 8003f16:	210f      	movs	r1, #15
 8003f18:	54d1      	strb	r1, [r2, r3]
                    i += 2;
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	3302      	adds	r3, #2
 8003f1e:	73fb      	strb	r3, [r7, #15]
                } while (i < 20 && GPS_numSat > i / 2);
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	2b13      	cmp	r3, #19
 8003f24:	d806      	bhi.n	8003f34 <buzzer+0x154>
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	085b      	lsrs	r3, r3, #1
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <buzzer+0x1cc>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d3e9      	bcc.n	8003f08 <buzzer+0x128>
                buzz_countSats[i + 1] = 100;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	3301      	adds	r3, #1
 8003f38:	4a1d      	ldr	r2, [pc, #116]	; (8003fb0 <buzzer+0x1d0>)
 8003f3a:	2164      	movs	r1, #100	; 0x64
 8003f3c:	54d1      	strb	r1, [r2, r3]
                buzz_countSats[i + 2] = 0xF0;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	3302      	adds	r3, #2
 8003f42:	4a1b      	ldr	r2, [pc, #108]	; (8003fb0 <buzzer+0x1d0>)
 8003f44:	21f0      	movs	r1, #240	; 0xf0
 8003f46:	54d1      	strb	r1, [r2, r3]
                pifBuzzer_Start(&s_buzzer, buzz_countSats);
 8003f48:	4919      	ldr	r1, [pc, #100]	; (8003fb0 <buzzer+0x1d0>)
 8003f4a:	480c      	ldr	r0, [pc, #48]	; (8003f7c <buzzer+0x19c>)
 8003f4c:	f016 fc4a 	bl	801a7e4 <pifBuzzer_Start>
                buzzerMode = mode;
 8003f50:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <buzzer+0x198>)
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	7013      	strb	r3, [r2, #0]
                break;
 8003f56:	e00c      	b.n	8003f72 <buzzer+0x192>
            }
#endif
            pifBuzzer_Start(&s_buzzer, buzz_shortBeep);
 8003f58:	4916      	ldr	r1, [pc, #88]	; (8003fb4 <buzzer+0x1d4>)
 8003f5a:	4808      	ldr	r0, [pc, #32]	; (8003f7c <buzzer+0x19c>)
 8003f5c:	f016 fc42 	bl	801a7e4 <pifBuzzer_Start>
            buzzerMode = mode;
 8003f60:	4a05      	ldr	r2, [pc, #20]	; (8003f78 <buzzer+0x198>)
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	7013      	strb	r3, [r2, #0]
            break;
 8003f66:	e004      	b.n	8003f72 <buzzer+0x192>
        return;
 8003f68:	bf00      	nop
 8003f6a:	e002      	b.n	8003f72 <buzzer+0x192>

        default:
            return;
 8003f6c:	bf00      	nop
 8003f6e:	e000      	b.n	8003f72 <buzzer+0x192>
                return;
 8003f70:	bf00      	nop
    }
}
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000025 	.word	0x20000025
 8003f7c:	20000894 	.word	0x20000894
 8003f80:	20000892 	.word	0x20000892
 8003f84:	080279d8 	.word	0x080279d8
 8003f88:	080279ac 	.word	0x080279ac
 8003f8c:	080279e8 	.word	0x080279e8
 8003f90:	080279f0 	.word	0x080279f0
 8003f94:	080279b8 	.word	0x080279b8
 8003f98:	080279b4 	.word	0x080279b4
 8003f9c:	080279a8 	.word	0x080279a8
 8003fa0:	080279b0 	.word	0x080279b0
 8003fa4:	080279cc 	.word	0x080279cc
 8003fa8:	200016f4 	.word	0x200016f4
 8003fac:	200017d8 	.word	0x200017d8
 8003fb0:	2000087c 	.word	0x2000087c
 8003fb4:	080279a4 	.word	0x080279a4

08003fb8 <buzzerUpdate>:

/* buzzerUpdate -function is used in loop. It will update buzzer state
 * when the time is correct.
 */
void buzzerUpdate(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
    // If beeper option from AUX switch has been selected
    if (rcOptions[BOXBEEPERON]) {
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <buzzerUpdate+0x20>)
 8003fbe:	7b5b      	ldrb	r3, [r3, #13]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <buzzerUpdate+0x1a>
        if (buzzerMode > BUZZER_TX_SET)
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <buzzerUpdate+0x24>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d902      	bls.n	8003fd2 <buzzerUpdate+0x1a>
            buzzer(BUZZER_TX_SET);
 8003fcc:	2008      	movs	r0, #8
 8003fce:	f7ff ff07 	bl	8003de0 <buzzer>
    }
}
 8003fd2:	bf00      	nop
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20001794 	.word	0x20001794
 8003fdc:	20000025 	.word	0x20000025

08003fe0 <i2a>:
**           range errors on the radix default it to base10
** Code from http://groups.google.com/group/comp.lang.c/msg/66552ef8b04fe1ab?pli=1
*/

static char *i2a(unsigned i, char *a, unsigned r)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
    if (i / r > 0)
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d309      	bcc.n	8004008 <i2a+0x28>
        a = i2a(i / r, a, r);
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff ffed 	bl	8003fe0 <i2a>
 8004006:	60b8      	str	r0, [r7, #8]
    *a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i % r];
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	fb01 f202 	mul.w	r2, r1, r2
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <i2a+0x4c>)
 800401a:	5cd2      	ldrb	r2, [r2, r3]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	701a      	strb	r2, [r3, #0]
    return a + 1;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	3301      	adds	r3, #1
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	08026674 	.word	0x08026674

08004030 <itoa>:

char *itoa(int i, char *a, int r)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
    if ((r < 2) || (r > 36))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b01      	cmp	r3, #1
 8004040:	dd02      	ble.n	8004048 <itoa+0x18>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b24      	cmp	r3, #36	; 0x24
 8004046:	dd01      	ble.n	800404c <itoa+0x1c>
        r = 10;
 8004048:	230a      	movs	r3, #10
 800404a:	607b      	str	r3, [r7, #4]
    if (i < 0) {
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	da0e      	bge.n	8004070 <itoa+0x40>
        *a = '-';
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	222d      	movs	r2, #45	; 0x2d
 8004056:	701a      	strb	r2, [r3, #0]
        *i2a(-(unsigned)i, a + 1, r) = 0;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4258      	negs	r0, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	3301      	adds	r3, #1
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	4619      	mov	r1, r3
 8004064:	f7ff ffbc 	bl	8003fe0 <i2a>
 8004068:	4603      	mov	r3, r0
 800406a:	2200      	movs	r2, #0
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e008      	b.n	8004082 <itoa+0x52>
    } else
        *i2a(i, a, r) = 0;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff ffb2 	bl	8003fe0 <i2a>
 800407c:	4603      	mov	r3, r0
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
    return a;
 8004082:	68bb      	ldr	r3, [r7, #8]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <_atof>:
// 09-May-2009 Tom Van Baak (tvb) www.LeapSecond.com
//
#define white_space(c) ((c) == ' ' || (c) == '\t')
#define valid_digit(c) ((c) >= '0' && (c) <= '9')
static float _atof(const char *p)
{
 800408c:	b480      	push	{r7}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
    int frac = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	61fb      	str	r3, [r7, #28]
    float sign, value, scale;

    // Skip leading white space, if any.
    while (white_space(*p)) {
 8004098:	e002      	b.n	80040a0 <_atof+0x14>
        p += 1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3301      	adds	r3, #1
 800409e:	607b      	str	r3, [r7, #4]
    while (white_space(*p)) {
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d0f8      	beq.n	800409a <_atof+0xe>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b09      	cmp	r3, #9
 80040ae:	d0f4      	beq.n	800409a <_atof+0xe>
    }

    // Get sign, if any.
    sign = 1.0f;
 80040b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80040b4:	61bb      	str	r3, [r7, #24]
    if (*p == '-') {
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b2d      	cmp	r3, #45	; 0x2d
 80040bc:	d105      	bne.n	80040ca <_atof+0x3e>
        sign = -1.0f;
 80040be:	4b6a      	ldr	r3, [pc, #424]	; (8004268 <_atof+0x1dc>)
 80040c0:	61bb      	str	r3, [r7, #24]
        p += 1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3301      	adds	r3, #1
 80040c6:	607b      	str	r3, [r7, #4]
 80040c8:	e006      	b.n	80040d8 <_atof+0x4c>

    } else if (*p == '+') {
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b2b      	cmp	r3, #43	; 0x2b
 80040d0:	d102      	bne.n	80040d8 <_atof+0x4c>
        p += 1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3301      	adds	r3, #1
 80040d6:	607b      	str	r3, [r7, #4]
    }

    // Get digits before decimal point or exponent, if any.
    value = 0.0f;
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
    while (valid_digit(*p)) {
 80040de:	e013      	b.n	8004108 <_atof+0x7c>
        value = value * 10.0f + (*p - '0');
 80040e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80040e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	3b30      	subs	r3, #48	; 0x30
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040fe:	edc7 7a05 	vstr	s15, [r7, #20]
        p += 1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3301      	adds	r3, #1
 8004106:	607b      	str	r3, [r7, #4]
    while (valid_digit(*p)) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b2f      	cmp	r3, #47	; 0x2f
 800410e:	d903      	bls.n	8004118 <_atof+0x8c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b39      	cmp	r3, #57	; 0x39
 8004116:	d9e3      	bls.n	80040e0 <_atof+0x54>
    }

    // Get digits after decimal point, if any.
    if (*p == '.') {
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b2e      	cmp	r3, #46	; 0x2e
 800411e:	d129      	bne.n	8004174 <_atof+0xe8>
        float pow10 = 10.0f;
 8004120:	4b52      	ldr	r3, [pc, #328]	; (800426c <_atof+0x1e0>)
 8004122:	60fb      	str	r3, [r7, #12]
        p += 1;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3301      	adds	r3, #1
 8004128:	607b      	str	r3, [r7, #4]

        while (valid_digit(*p)) {
 800412a:	e01b      	b.n	8004164 <_atof+0xd8>
            value += (*p - '0') / pow10;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	3b30      	subs	r3, #48	; 0x30
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800413a:	ed97 7a03 	vldr	s14, [r7, #12]
 800413e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004142:	ed97 7a05 	vldr	s14, [r7, #20]
 8004146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800414a:	edc7 7a05 	vstr	s15, [r7, #20]
            pow10 *= 10.0f;
 800414e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004152:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800415a:	edc7 7a03 	vstr	s15, [r7, #12]
            p += 1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3301      	adds	r3, #1
 8004162:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b2f      	cmp	r3, #47	; 0x2f
 800416a:	d903      	bls.n	8004174 <_atof+0xe8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b39      	cmp	r3, #57	; 0x39
 8004172:	d9db      	bls.n	800412c <_atof+0xa0>
        }
    }

    // Handle exponent, if any.
    scale = 1.0f;
 8004174:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004178:	613b      	str	r3, [r7, #16]
    if ((*p == 'e') || (*p == 'E')) {
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b65      	cmp	r3, #101	; 0x65
 8004180:	d003      	beq.n	800418a <_atof+0xfe>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b45      	cmp	r3, #69	; 0x45
 8004188:	d153      	bne.n	8004232 <_atof+0x1a6>
        unsigned int expon;
        p += 1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3301      	adds	r3, #1
 800418e:	607b      	str	r3, [r7, #4]

        // Get sign of exponent, if any.
        frac = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
        if (*p == '-') {
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b2d      	cmp	r3, #45	; 0x2d
 800419a:	d105      	bne.n	80041a8 <_atof+0x11c>
            frac = 1;
 800419c:	2301      	movs	r3, #1
 800419e:	61fb      	str	r3, [r7, #28]
            p += 1;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3301      	adds	r3, #1
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	e006      	b.n	80041b6 <_atof+0x12a>

        } else if (*p == '+') {
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b2b      	cmp	r3, #43	; 0x2b
 80041ae:	d102      	bne.n	80041b6 <_atof+0x12a>
            p += 1;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3301      	adds	r3, #1
 80041b4:	607b      	str	r3, [r7, #4]
        }

        // Get digits of exponent, if any.
        expon = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60bb      	str	r3, [r7, #8]
        while (valid_digit(*p)) {
 80041ba:	e00d      	b.n	80041d8 <_atof+0x14c>
            expon = expon * 10 + (*p - '0');
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	461a      	mov	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	4413      	add	r3, r2
 80041ce:	3b30      	subs	r3, #48	; 0x30
 80041d0:	60bb      	str	r3, [r7, #8]
            p += 1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3301      	adds	r3, #1
 80041d6:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b2f      	cmp	r3, #47	; 0x2f
 80041de:	d903      	bls.n	80041e8 <_atof+0x15c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b39      	cmp	r3, #57	; 0x39
 80041e6:	d9e9      	bls.n	80041bc <_atof+0x130>
        }
        if (expon > 308)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80041ee:	d90e      	bls.n	800420e <_atof+0x182>
            expon = 308;
 80041f0:	f44f 739a 	mov.w	r3, #308	; 0x134
 80041f4:	60bb      	str	r3, [r7, #8]

        // Calculate scaling factor.
        // while (expon >= 50) { scale *= 1E50f; expon -= 50; }
        while (expon >=  8) {
 80041f6:	e00a      	b.n	800420e <_atof+0x182>
            scale *= 1E8f;
 80041f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80041fc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004270 <_atof+0x1e4>
 8004200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004204:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  8;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	3b08      	subs	r3, #8
 800420c:	60bb      	str	r3, [r7, #8]
        while (expon >=  8) {
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b07      	cmp	r3, #7
 8004212:	d8f1      	bhi.n	80041f8 <_atof+0x16c>
        }
        while (expon >   0) {
 8004214:	e00a      	b.n	800422c <_atof+0x1a0>
            scale *= 10.0f;
 8004216:	edd7 7a04 	vldr	s15, [r7, #16]
 800421a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800421e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004222:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  1;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	3b01      	subs	r3, #1
 800422a:	60bb      	str	r3, [r7, #8]
        while (expon >   0) {
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f1      	bne.n	8004216 <_atof+0x18a>
        }
    }

    // Return signed and scaled floating point result.
    return sign * (frac ? (value / scale) : (value * scale));
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d006      	beq.n	8004246 <_atof+0x1ba>
 8004238:	edd7 6a05 	vldr	s13, [r7, #20]
 800423c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004244:	e005      	b.n	8004252 <_atof+0x1c6>
 8004246:	ed97 7a05 	vldr	s14, [r7, #20]
 800424a:	edd7 7a04 	vldr	s15, [r7, #16]
 800424e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004252:	ed97 7a06 	vldr	s14, [r7, #24]
 8004256:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800425a:	eeb0 0a67 	vmov.f32	s0, s15
 800425e:	3724      	adds	r7, #36	; 0x24
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	bf800000 	.word	0xbf800000
 800426c:	41200000 	.word	0x41200000
 8004270:	4cbebc20 	.word	0x4cbebc20

08004274 <ftoa>:

///////////////////////////////////////////////////////////////////////////////
// FTOA
///////////////////////////////////////////////////////////////////////////////
static char *ftoa(float x, char *floatString)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08c      	sub	sp, #48	; 0x30
 8004278:	af00      	add	r7, sp, #0
 800427a:	ed87 0a01 	vstr	s0, [r7, #4]
 800427e:	6038      	str	r0, [r7, #0]
    int32_t value;
    char intString1[12];
    char intString2[12] = { 0, };
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	f107 0310 	add.w	r3, r7, #16
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	605a      	str	r2, [r3, #4]
    char *decimalPoint = ".";
 800428e:	4b54      	ldr	r3, [pc, #336]	; (80043e0 <ftoa+0x16c>)
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t dpLocation;

    if (x > 0)                  // Rounding for x.xxx display format
 8004292:	edd7 7a01 	vldr	s15, [r7, #4]
 8004296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800429a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429e:	dd08      	ble.n	80042b2 <ftoa+0x3e>
        x += 0.0005f;
 80042a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80042a4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80043e4 <ftoa+0x170>
 80042a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80042b0:	e007      	b.n	80042c2 <ftoa+0x4e>
    else
        x -= 0.0005f;
 80042b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80042b6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80043e4 <ftoa+0x170>
 80042ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042be:	edc7 7a01 	vstr	s15, [r7, #4]

    value = (int32_t)(x * 1000.0f);    // Convert float * 1000 to an integer
 80042c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80042c6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80043e8 <ftoa+0x174>
 80042ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042d2:	ee17 3a90 	vmov	r3, s15
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28

    itoa(abs(value), intString1, 10);   // Create string from abs of integer value
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bfb8      	it	lt
 80042de:	425b      	neglt	r3, r3
 80042e0:	f107 0118 	add.w	r1, r7, #24
 80042e4:	220a      	movs	r2, #10
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fea2 	bl	8004030 <itoa>

    if (value >= 0)
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	db02      	blt.n	80042f8 <ftoa+0x84>
        intString2[0] = ' ';    // Positive number, add a pad space
 80042f2:	2320      	movs	r3, #32
 80042f4:	733b      	strb	r3, [r7, #12]
 80042f6:	e001      	b.n	80042fc <ftoa+0x88>
    else
        intString2[0] = '-';    // Negative number, add a negative sign
 80042f8:	232d      	movs	r3, #45	; 0x2d
 80042fa:	733b      	strb	r3, [r7, #12]

    if (strlen(intString1) == 1) {
 80042fc:	f107 0318 	add.w	r3, r7, #24
 8004300:	4618      	mov	r0, r3
 8004302:	f7fb ff69 	bl	80001d8 <strlen>
 8004306:	4603      	mov	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	d10e      	bne.n	800432a <ftoa+0xb6>
        intString2[1] = '0';
 800430c:	2330      	movs	r3, #48	; 0x30
 800430e:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 8004310:	2330      	movs	r3, #48	; 0x30
 8004312:	73bb      	strb	r3, [r7, #14]
        intString2[3] = '0';
 8004314:	2330      	movs	r3, #48	; 0x30
 8004316:	73fb      	strb	r3, [r7, #15]
        strcat(intString2, intString1);
 8004318:	f107 0218 	add.w	r2, r7, #24
 800431c:	f107 030c 	add.w	r3, r7, #12
 8004320:	4611      	mov	r1, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f01e fce0 	bl	8022ce8 <strcat>
 8004328:	e02f      	b.n	800438a <ftoa+0x116>
    } else if (strlen(intString1) == 2) {
 800432a:	f107 0318 	add.w	r3, r7, #24
 800432e:	4618      	mov	r0, r3
 8004330:	f7fb ff52 	bl	80001d8 <strlen>
 8004334:	4603      	mov	r3, r0
 8004336:	2b02      	cmp	r3, #2
 8004338:	d10c      	bne.n	8004354 <ftoa+0xe0>
        intString2[1] = '0';
 800433a:	2330      	movs	r3, #48	; 0x30
 800433c:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 800433e:	2330      	movs	r3, #48	; 0x30
 8004340:	73bb      	strb	r3, [r7, #14]
        strcat(intString2, intString1);
 8004342:	f107 0218 	add.w	r2, r7, #24
 8004346:	f107 030c 	add.w	r3, r7, #12
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f01e fccb 	bl	8022ce8 <strcat>
 8004352:	e01a      	b.n	800438a <ftoa+0x116>
    } else if (strlen(intString1) == 3) {
 8004354:	f107 0318 	add.w	r3, r7, #24
 8004358:	4618      	mov	r0, r3
 800435a:	f7fb ff3d 	bl	80001d8 <strlen>
 800435e:	4603      	mov	r3, r0
 8004360:	2b03      	cmp	r3, #3
 8004362:	d10a      	bne.n	800437a <ftoa+0x106>
        intString2[1] = '0';
 8004364:	2330      	movs	r3, #48	; 0x30
 8004366:	737b      	strb	r3, [r7, #13]
        strcat(intString2, intString1);
 8004368:	f107 0218 	add.w	r2, r7, #24
 800436c:	f107 030c 	add.w	r3, r7, #12
 8004370:	4611      	mov	r1, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f01e fcb8 	bl	8022ce8 <strcat>
 8004378:	e007      	b.n	800438a <ftoa+0x116>
    } else {
        strcat(intString2, intString1);
 800437a:	f107 0218 	add.w	r2, r7, #24
 800437e:	f107 030c 	add.w	r3, r7, #12
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f01e fcaf 	bl	8022ce8 <strcat>
    }

    dpLocation = strlen(intString2) - 3;
 800438a:	f107 030c 	add.w	r3, r7, #12
 800438e:	4618      	mov	r0, r3
 8004390:	f7fb ff22 	bl	80001d8 <strlen>
 8004394:	4603      	mov	r3, r0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	3b03      	subs	r3, #3
 800439a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    strncpy(floatString, intString2, dpLocation);
 800439e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80043a2:	f107 030c 	add.w	r3, r7, #12
 80043a6:	4619      	mov	r1, r3
 80043a8:	6838      	ldr	r0, [r7, #0]
 80043aa:	f01e fce3 	bl	8022d74 <strncpy>
    floatString[dpLocation] = '\0';
 80043ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	4413      	add	r3, r2
 80043b6:	2200      	movs	r2, #0
 80043b8:	701a      	strb	r2, [r3, #0]
    strcat(floatString, decimalPoint);
 80043ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043bc:	6838      	ldr	r0, [r7, #0]
 80043be:	f01e fc93 	bl	8022ce8 <strcat>
    strcat(floatString, intString2 + dpLocation);
 80043c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043c6:	f107 020c 	add.w	r2, r7, #12
 80043ca:	4413      	add	r3, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	6838      	ldr	r0, [r7, #0]
 80043d0:	f01e fc8a 	bl	8022ce8 <strcat>

    return floatString;
 80043d4:	683b      	ldr	r3, [r7, #0]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3730      	adds	r7, #48	; 0x30
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	0802669c 	.word	0x0802669c
 80043e4:	3a03126f 	.word	0x3a03126f
 80043e8:	447a0000 	.word	0x447a0000

080043ec <cliAux>:

static int cliAux(int argc, char *argv[])
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
    int i, val = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]

    if (argc == 0) {
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d114      	bne.n	800442a <cliAux+0x3e>
        // print out aux channel settings
        for (i = 0; i < CHECKBOXITEMS; i++)
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	e00d      	b.n	8004422 <cliAux+0x36>
            pifLog_Printf(LT_NONE, "aux %u %u\r\n", i, cfg.activate[i]);
 8004406:	4a1d      	ldr	r2, [pc, #116]	; (800447c <cliAux+0x90>)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3312      	adds	r3, #18
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	491a      	ldr	r1, [pc, #104]	; (8004480 <cliAux+0x94>)
 8004416:	2000      	movs	r0, #0
 8004418:	f00e ffc4 	bl	80133a4 <pifLog_Printf>
        for (i = 0; i < CHECKBOXITEMS; i++)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3301      	adds	r3, #1
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b18      	cmp	r3, #24
 8004426:	ddee      	ble.n	8004406 <cliAux+0x1a>
 8004428:	e023      	b.n	8004472 <cliAux+0x86>
    } else if (argc > 1) {
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b01      	cmp	r3, #1
 800442e:	dd1d      	ble.n	800446c <cliAux+0x80>
        i = atoi(argv[0]);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f01e fadb 	bl	80229f0 <atoi>
 800443a:	60f8      	str	r0, [r7, #12]
        if (i < CHECKBOXITEMS) {
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b18      	cmp	r3, #24
 8004440:	dc0e      	bgt.n	8004460 <cliAux+0x74>
            val = atoi(argv[1]);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	3304      	adds	r3, #4
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f01e fad1 	bl	80229f0 <atoi>
 800444e:	60b8      	str	r0, [r7, #8]
            cfg.activate[i] = val;
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	490a      	ldr	r1, [pc, #40]	; (800447c <cliAux+0x90>)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3312      	adds	r3, #18
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	e008      	b.n	8004472 <cliAux+0x86>
        } else {
            pifLog_Printf(LT_NONE, "Invalid Feature index: must be < %u\r\n", CHECKBOXITEMS);
 8004460:	2219      	movs	r2, #25
 8004462:	4908      	ldr	r1, [pc, #32]	; (8004484 <cliAux+0x98>)
 8004464:	2000      	movs	r0, #0
 8004466:	f00e ff9d 	bl	80133a4 <pifLog_Printf>
 800446a:	e002      	b.n	8004472 <cliAux+0x86>
        }
    } else {
    	return PIF_LOG_CMD_TOO_FEW_ARGS;
 800446c:	f06f 0302 	mvn.w	r3, #2
 8004470:	e000      	b.n	8004474 <cliAux+0x88>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000e54 	.word	0x20000e54
 8004480:	080266a0 	.word	0x080266a0
 8004484:	080266ac 	.word	0x080266ac

08004488 <cliCMix>:

static int cliCMix(int argc, char *argv[])
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08c      	sub	sp, #48	; 0x30
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
    int i, check = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
    int num_motors = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
    char buf[16];
    float mixsum[3];

    if (argc == 0) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f040 80d8 	bne.w	8004652 <cliCMix+0x1ca>
        pifLog_Print(LT_NONE, "Custom mixer: \r\nMotor\tThr\tRoll\tPitch\tYaw\r\n");
 80044a2:	4999      	ldr	r1, [pc, #612]	; (8004708 <cliCMix+0x280>)
 80044a4:	2000      	movs	r0, #0
 80044a6:	f00e feef 	bl	8013288 <pifLog_Print>
        for (i = 0; i < MAX_MOTORS; i++) {
 80044aa:	2300      	movs	r3, #0
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ae:	e069      	b.n	8004584 <cliCMix+0xfc>
            if (mcfg.customMixer[i].throttle == 0.0f)
 80044b0:	4a96      	ldr	r2, [pc, #600]	; (800470c <cliCMix+0x284>)
 80044b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b4:	3301      	adds	r3, #1
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	4413      	add	r3, r2
 80044ba:	edd3 7a00 	vldr	s15, [r3]
 80044be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c6:	d061      	beq.n	800458c <cliCMix+0x104>
                break;
            num_motors++;
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	3301      	adds	r3, #1
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 80044ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d0:	3301      	adds	r3, #1
 80044d2:	461a      	mov	r2, r3
 80044d4:	498e      	ldr	r1, [pc, #568]	; (8004710 <cliCMix+0x288>)
 80044d6:	2000      	movs	r0, #0
 80044d8:	f00e ff64 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].throttle, buf));
 80044dc:	4a8b      	ldr	r2, [pc, #556]	; (800470c <cliCMix+0x284>)
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	3301      	adds	r3, #1
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	4413      	add	r3, r2
 80044e6:	edd3 7a00 	vldr	s15, [r3]
 80044ea:	f107 0314 	add.w	r3, r7, #20
 80044ee:	4618      	mov	r0, r3
 80044f0:	eeb0 0a67 	vmov.f32	s0, s15
 80044f4:	f7ff febe 	bl	8004274 <ftoa>
 80044f8:	4603      	mov	r3, r0
 80044fa:	461a      	mov	r2, r3
 80044fc:	4985      	ldr	r1, [pc, #532]	; (8004714 <cliCMix+0x28c>)
 80044fe:	2000      	movs	r0, #0
 8004500:	f00e ff50 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].roll, buf));
 8004504:	4a81      	ldr	r2, [pc, #516]	; (800470c <cliCMix+0x284>)
 8004506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004508:	3301      	adds	r3, #1
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	4413      	add	r3, r2
 800450e:	3304      	adds	r3, #4
 8004510:	edd3 7a00 	vldr	s15, [r3]
 8004514:	f107 0314 	add.w	r3, r7, #20
 8004518:	4618      	mov	r0, r3
 800451a:	eeb0 0a67 	vmov.f32	s0, s15
 800451e:	f7ff fea9 	bl	8004274 <ftoa>
 8004522:	4603      	mov	r3, r0
 8004524:	461a      	mov	r2, r3
 8004526:	497b      	ldr	r1, [pc, #492]	; (8004714 <cliCMix+0x28c>)
 8004528:	2000      	movs	r0, #0
 800452a:	f00e ff3b 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].pitch, buf));
 800452e:	4a77      	ldr	r2, [pc, #476]	; (800470c <cliCMix+0x284>)
 8004530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	4413      	add	r3, r2
 8004536:	3318      	adds	r3, #24
 8004538:	edd3 7a00 	vldr	s15, [r3]
 800453c:	f107 0314 	add.w	r3, r7, #20
 8004540:	4618      	mov	r0, r3
 8004542:	eeb0 0a67 	vmov.f32	s0, s15
 8004546:	f7ff fe95 	bl	8004274 <ftoa>
 800454a:	4603      	mov	r3, r0
 800454c:	461a      	mov	r2, r3
 800454e:	4971      	ldr	r1, [pc, #452]	; (8004714 <cliCMix+0x28c>)
 8004550:	2000      	movs	r0, #0
 8004552:	f00e ff27 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(mcfg.customMixer[i].yaw, buf));
 8004556:	4a6d      	ldr	r2, [pc, #436]	; (800470c <cliCMix+0x284>)
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	4413      	add	r3, r2
 800455e:	331c      	adds	r3, #28
 8004560:	edd3 7a00 	vldr	s15, [r3]
 8004564:	f107 0314 	add.w	r3, r7, #20
 8004568:	4618      	mov	r0, r3
 800456a:	eeb0 0a67 	vmov.f32	s0, s15
 800456e:	f7ff fe81 	bl	8004274 <ftoa>
 8004572:	4603      	mov	r3, r0
 8004574:	461a      	mov	r2, r3
 8004576:	4968      	ldr	r1, [pc, #416]	; (8004718 <cliCMix+0x290>)
 8004578:	2000      	movs	r0, #0
 800457a:	f00e ff13 	bl	80133a4 <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 800457e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004580:	3301      	adds	r3, #1
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	2b0b      	cmp	r3, #11
 8004588:	dd92      	ble.n	80044b0 <cliCMix+0x28>
 800458a:	e000      	b.n	800458e <cliCMix+0x106>
                break;
 800458c:	bf00      	nop
        }
        mixsum[0] = mixsum[1] = mixsum[2] = 0.0f;
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < num_motors; i++) {
 800459c:	2300      	movs	r3, #0
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045a0:	e02a      	b.n	80045f8 <cliCMix+0x170>
            mixsum[0] += mcfg.customMixer[i].roll;
 80045a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80045a6:	4a59      	ldr	r2, [pc, #356]	; (800470c <cliCMix+0x284>)
 80045a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045aa:	3301      	adds	r3, #1
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	4413      	add	r3, r2
 80045b0:	3304      	adds	r3, #4
 80045b2:	edd3 7a00 	vldr	s15, [r3]
 80045b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ba:	edc7 7a02 	vstr	s15, [r7, #8]
            mixsum[1] += mcfg.customMixer[i].pitch;
 80045be:	ed97 7a03 	vldr	s14, [r7, #12]
 80045c2:	4a52      	ldr	r2, [pc, #328]	; (800470c <cliCMix+0x284>)
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	4413      	add	r3, r2
 80045ca:	3318      	adds	r3, #24
 80045cc:	edd3 7a00 	vldr	s15, [r3]
 80045d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d4:	edc7 7a03 	vstr	s15, [r7, #12]
            mixsum[2] += mcfg.customMixer[i].yaw;
 80045d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80045dc:	4a4b      	ldr	r2, [pc, #300]	; (800470c <cliCMix+0x284>)
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	4413      	add	r3, r2
 80045e4:	331c      	adds	r3, #28
 80045e6:	edd3 7a00 	vldr	s15, [r3]
 80045ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ee:	edc7 7a04 	vstr	s15, [r7, #16]
        for (i = 0; i < num_motors; i++) {
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	3301      	adds	r3, #1
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	429a      	cmp	r2, r3
 80045fe:	dbd0      	blt.n	80045a2 <cliCMix+0x11a>
        }
        pifLog_Print(LT_NONE, "Sanity check:\t");
 8004600:	4946      	ldr	r1, [pc, #280]	; (800471c <cliCMix+0x294>)
 8004602:	2000      	movs	r0, #0
 8004604:	f00e fe40 	bl	8013288 <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004608:	2300      	movs	r3, #0
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800460c:	e019      	b.n	8004642 <cliCMix+0x1ba>
            pifLog_Print(LT_NONE, fabsf(mixsum[i]) > 0.01f ? "NG\t" : "OK\t");
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	3330      	adds	r3, #48	; 0x30
 8004614:	443b      	add	r3, r7
 8004616:	3b28      	subs	r3, #40	; 0x28
 8004618:	edd3 7a00 	vldr	s15, [r3]
 800461c:	eef0 7ae7 	vabs.f32	s15, s15
 8004620:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004720 <cliCMix+0x298>
 8004624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462c:	dd01      	ble.n	8004632 <cliCMix+0x1aa>
 800462e:	4b3d      	ldr	r3, [pc, #244]	; (8004724 <cliCMix+0x29c>)
 8004630:	e000      	b.n	8004634 <cliCMix+0x1ac>
 8004632:	4b3d      	ldr	r3, [pc, #244]	; (8004728 <cliCMix+0x2a0>)
 8004634:	4619      	mov	r1, r3
 8004636:	2000      	movs	r0, #0
 8004638:	f00e fe26 	bl	8013288 <pifLog_Print>
        for (i = 0; i < 3; i++)
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	3301      	adds	r3, #1
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	2b02      	cmp	r3, #2
 8004646:	dde2      	ble.n	800460e <cliCMix+0x186>
        pifLog_Print(LT_NONE, "\r\n");
 8004648:	4938      	ldr	r1, [pc, #224]	; (800472c <cliCMix+0x2a4>)
 800464a:	2000      	movs	r0, #0
 800464c:	f00e fe1c 	bl	8013288 <pifLog_Print>
 8004650:	e0eb      	b.n	800482a <cliCMix+0x3a2>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4936      	ldr	r1, [pc, #216]	; (8004730 <cliCMix+0x2a8>)
 8004658:	4618      	mov	r0, r3
 800465a:	f01e fb2b 	bl	8022cb4 <strcasecmp>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d111      	bne.n	8004688 <cliCMix+0x200>
        // erase custom mixer
        for (i = 0; i < MAX_MOTORS; i++)
 8004664:	2300      	movs	r3, #0
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004668:	e00a      	b.n	8004680 <cliCMix+0x1f8>
            mcfg.customMixer[i].throttle = 0.0f;
 800466a:	4a28      	ldr	r2, [pc, #160]	; (800470c <cliCMix+0x284>)
 800466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466e:	3301      	adds	r3, #1
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	4413      	add	r3, r2
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++)
 800467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467c:	3301      	adds	r3, #1
 800467e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004682:	2b0b      	cmp	r3, #11
 8004684:	ddf1      	ble.n	800466a <cliCMix+0x1e2>
 8004686:	e0d0      	b.n	800482a <cliCMix+0x3a2>
    } else if (strcasecmp(argv[0], "load") == 0) {
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4929      	ldr	r1, [pc, #164]	; (8004734 <cliCMix+0x2ac>)
 800468e:	4618      	mov	r0, r3
 8004690:	f01e fb10 	bl	8022cb4 <strcasecmp>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d154      	bne.n	8004744 <cliCMix+0x2bc>
        if (argc > 1) {
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b01      	cmp	r3, #1
 800469e:	dd2f      	ble.n	8004700 <cliCMix+0x278>
            for (i = 0; ; i++) {
 80046a0:	2300      	movs	r3, #0
 80046a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 80046a4:	4a24      	ldr	r2, [pc, #144]	; (8004738 <cliCMix+0x2b0>)
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <cliCMix+0x232>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 80046b0:	4922      	ldr	r1, [pc, #136]	; (800473c <cliCMix+0x2b4>)
 80046b2:	2000      	movs	r0, #0
 80046b4:	f00e fde8 	bl	8013288 <pifLog_Print>
                    break;
 80046b8:	e0b7      	b.n	800482a <cliCMix+0x3a2>
                }
                if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	3304      	adds	r3, #4
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	491d      	ldr	r1, [pc, #116]	; (8004738 <cliCMix+0x2b0>)
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80046c8:	4619      	mov	r1, r3
 80046ca:	4610      	mov	r0, r2
 80046cc:	f01e faf2 	bl	8022cb4 <strcasecmp>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d110      	bne.n	80046f8 <cliCMix+0x270>
                    mixerLoadMix(i);
 80046d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046d8:	f006 fcc8 	bl	800b06c <mixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 80046dc:	4a16      	ldr	r2, [pc, #88]	; (8004738 <cliCMix+0x2b0>)
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e4:	461a      	mov	r2, r3
 80046e6:	4916      	ldr	r1, [pc, #88]	; (8004740 <cliCMix+0x2b8>)
 80046e8:	2000      	movs	r0, #0
 80046ea:	f00e fe5b 	bl	80133a4 <pifLog_Printf>
                    cliCMix(1, NULL);
 80046ee:	2100      	movs	r1, #0
 80046f0:	2001      	movs	r0, #1
 80046f2:	f7ff fec9 	bl	8004488 <cliCMix>
                    break;
 80046f6:	e098      	b.n	800482a <cliCMix+0x3a2>
            for (i = 0; ; i++) {
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	3301      	adds	r3, #1
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 80046fe:	e7d1      	b.n	80046a4 <cliCMix+0x21c>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004700:	f06f 0302 	mvn.w	r3, #2
 8004704:	e092      	b.n	800482c <cliCMix+0x3a4>
 8004706:	bf00      	nop
 8004708:	080266d4 	.word	0x080266d4
 800470c:	200008e8 	.word	0x200008e8
 8004710:	08026700 	.word	0x08026700
 8004714:	08026708 	.word	0x08026708
 8004718:	0802670c 	.word	0x0802670c
 800471c:	08026714 	.word	0x08026714
 8004720:	3c23d70a 	.word	0x3c23d70a
 8004724:	08026724 	.word	0x08026724
 8004728:	08026728 	.word	0x08026728
 800472c:	0802672c 	.word	0x0802672c
 8004730:	08026730 	.word	0x08026730
 8004734:	08026738 	.word	0x08026738
 8004738:	080279f8 	.word	0x080279f8
 800473c:	08026740 	.word	0x08026740
 8004740:	08026758 	.word	0x08026758
        }
    } else {
        i = atoi(argv[0]); // get motor number
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f01e f951 	bl	80229f0 <atoi>
 800474e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (--i < MAX_MOTORS) {
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	3b01      	subs	r3, #1
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	2b0b      	cmp	r3, #11
 800475a:	dc61      	bgt.n	8004820 <cliCMix+0x398>
            if (argc > 1) {
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b01      	cmp	r3, #1
 8004760:	dd11      	ble.n	8004786 <cliCMix+0x2fe>
                mcfg.customMixer[i].throttle = _atof(argv[1]);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	3304      	adds	r3, #4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fc8f 	bl	800408c <_atof>
 800476e:	eef0 7a40 	vmov.f32	s15, s0
 8004772:	4a30      	ldr	r2, [pc, #192]	; (8004834 <cliCMix+0x3ac>)
 8004774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004776:	3301      	adds	r3, #1
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	4413      	add	r3, r2
 800477c:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	3301      	adds	r3, #1
 8004784:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 2) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b02      	cmp	r3, #2
 800478a:	dd12      	ble.n	80047b2 <cliCMix+0x32a>
                mcfg.customMixer[i].roll = _atof(argv[2]);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	3308      	adds	r3, #8
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fc7a 	bl	800408c <_atof>
 8004798:	eef0 7a40 	vmov.f32	s15, s0
 800479c:	4a25      	ldr	r2, [pc, #148]	; (8004834 <cliCMix+0x3ac>)
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	3301      	adds	r3, #1
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	4413      	add	r3, r2
 80047a6:	3304      	adds	r3, #4
 80047a8:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	3301      	adds	r3, #1
 80047b0:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 3) {
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	dd11      	ble.n	80047dc <cliCMix+0x354>
                mcfg.customMixer[i].pitch = _atof(argv[3]);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	330c      	adds	r3, #12
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fc64 	bl	800408c <_atof>
 80047c4:	eef0 7a40 	vmov.f32	s15, s0
 80047c8:	4a1a      	ldr	r2, [pc, #104]	; (8004834 <cliCMix+0x3ac>)
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	4413      	add	r3, r2
 80047d0:	3318      	adds	r3, #24
 80047d2:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	3301      	adds	r3, #1
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 4) {
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b04      	cmp	r3, #4
 80047e0:	dd11      	ble.n	8004806 <cliCMix+0x37e>
                mcfg.customMixer[i].yaw = _atof(argv[4]);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	3310      	adds	r3, #16
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff fc4f 	bl	800408c <_atof>
 80047ee:	eef0 7a40 	vmov.f32	s15, s0
 80047f2:	4a10      	ldr	r2, [pc, #64]	; (8004834 <cliCMix+0x3ac>)
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	4413      	add	r3, r2
 80047fa:	331c      	adds	r3, #28
 80047fc:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	3301      	adds	r3, #1
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (check != 4) {
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	2b04      	cmp	r3, #4
 800480a:	d004      	beq.n	8004816 <cliCMix+0x38e>
                pifLog_Print(LT_NONE, "Wrong number of arguments, needs idx thr roll pitch yaw\r\n");
 800480c:	490a      	ldr	r1, [pc, #40]	; (8004838 <cliCMix+0x3b0>)
 800480e:	2000      	movs	r0, #0
 8004810:	f00e fd3a 	bl	8013288 <pifLog_Print>
 8004814:	e009      	b.n	800482a <cliCMix+0x3a2>
            } else {
                cliCMix(1, NULL);
 8004816:	2100      	movs	r1, #0
 8004818:	2001      	movs	r0, #1
 800481a:	f7ff fe35 	bl	8004488 <cliCMix>
 800481e:	e004      	b.n	800482a <cliCMix+0x3a2>
            }
        } else {
            pifLog_Printf(LT_NONE, "Motor number must be between 1 and %d\r\n", MAX_MOTORS);
 8004820:	220c      	movs	r2, #12
 8004822:	4906      	ldr	r1, [pc, #24]	; (800483c <cliCMix+0x3b4>)
 8004824:	2000      	movs	r0, #0
 8004826:	f00e fdbd 	bl	80133a4 <pifLog_Printf>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3730      	adds	r7, #48	; 0x30
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	200008e8 	.word	0x200008e8
 8004838:	0802676c 	.word	0x0802676c
 800483c:	080267a8 	.word	0x080267a8

08004840 <cliServo>:

static int cliServo(int argc, char *argv[])
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08c      	sub	sp, #48	; 0x30
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 800484a:	4aa0      	ldr	r2, [pc, #640]	; (8004acc <cliServo+0x28c>)
 800484c:	f107 0320 	add.w	r3, r7, #32
 8004850:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004854:	e883 0003 	stmia.w	r3, {r0, r1}

    if (argc == 0) {
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d15c      	bne.n	8004918 <cliServo+0xd8>
        pifLog_Print(LT_NONE, "servo servo_number\tmin\tmiddle\tmax\trate\r\n");
 800485e:	499c      	ldr	r1, [pc, #624]	; (8004ad0 <cliServo+0x290>)
 8004860:	2000      	movs	r0, #0
 8004862:	f00e fd11 	bl	8013288 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004866:	2300      	movs	r3, #0
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800486a:	e049      	b.n	8004900 <cliServo+0xc0>
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	3301      	adds	r3, #1
 8004870:	461a      	mov	r2, r3
 8004872:	4998      	ldr	r1, [pc, #608]	; (8004ad4 <cliServo+0x294>)
 8004874:	2000      	movs	r0, #0
 8004876:	f00e fd95 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].min);
 800487a:	4997      	ldr	r1, [pc, #604]	; (8004ad8 <cliServo+0x298>)
 800487c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	440b      	add	r3, r1
 8004888:	33b8      	adds	r3, #184	; 0xb8
 800488a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800488e:	461a      	mov	r2, r3
 8004890:	4992      	ldr	r1, [pc, #584]	; (8004adc <cliServo+0x29c>)
 8004892:	2000      	movs	r0, #0
 8004894:	f00e fd86 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].middle);
 8004898:	498f      	ldr	r1, [pc, #572]	; (8004ad8 <cliServo+0x298>)
 800489a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	440b      	add	r3, r1
 80048a6:	33bc      	adds	r3, #188	; 0xbc
 80048a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048ac:	461a      	mov	r2, r3
 80048ae:	498b      	ldr	r1, [pc, #556]	; (8004adc <cliServo+0x29c>)
 80048b0:	2000      	movs	r0, #0
 80048b2:	f00e fd77 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].max);
 80048b6:	4988      	ldr	r1, [pc, #544]	; (8004ad8 <cliServo+0x298>)
 80048b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	440b      	add	r3, r1
 80048c4:	33ba      	adds	r3, #186	; 0xba
 80048c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048ca:	461a      	mov	r2, r3
 80048cc:	4983      	ldr	r1, [pc, #524]	; (8004adc <cliServo+0x29c>)
 80048ce:	2000      	movs	r0, #0
 80048d0:	f00e fd68 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].rate);
 80048d4:	4980      	ldr	r1, [pc, #512]	; (8004ad8 <cliServo+0x298>)
 80048d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048d8:	4613      	mov	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	440b      	add	r3, r1
 80048e2:	33be      	adds	r3, #190	; 0xbe
 80048e4:	f993 3000 	ldrsb.w	r3, [r3]
 80048e8:	461a      	mov	r2, r3
 80048ea:	497c      	ldr	r1, [pc, #496]	; (8004adc <cliServo+0x29c>)
 80048ec:	2000      	movs	r0, #0
 80048ee:	f00e fd59 	bl	80133a4 <pifLog_Printf>
            pifLog_Print(LT_NONE, "\r\n");
 80048f2:	497b      	ldr	r1, [pc, #492]	; (8004ae0 <cliServo+0x2a0>)
 80048f4:	2000      	movs	r0, #0
 80048f6:	f00e fcc7 	bl	8013288 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	3301      	adds	r3, #1
 80048fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	2b07      	cmp	r3, #7
 8004904:	ddb2      	ble.n	800486c <cliServo+0x2c>
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004906:	4976      	ldr	r1, [pc, #472]	; (8004ae0 <cliServo+0x2a0>)
 8004908:	2000      	movs	r0, #0
 800490a:	f00e fcbd 	bl	8013288 <pifLog_Print>
        pifLog_Print(LT_NONE, "Reset servos: servo reset\r\n");
 800490e:	4975      	ldr	r1, [pc, #468]	; (8004ae4 <cliServo+0x2a4>)
 8004910:	2000      	movs	r0, #0
 8004912:	f00e fcb9 	bl	8013288 <pifLog_Print>
 8004916:	e0d4      	b.n	8004ac2 <cliServo+0x282>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4972      	ldr	r1, [pc, #456]	; (8004ae8 <cliServo+0x2a8>)
 800491e:	4618      	mov	r0, r3
 8004920:	f01e f9c8 	bl	8022cb4 <strcasecmp>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d13a      	bne.n	80049a0 <cliServo+0x160>
        // erase servo config
        for (i = 0; i < MAX_SERVOS; i++) {
 800492a:	2300      	movs	r3, #0
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800492e:	e033      	b.n	8004998 <cliServo+0x158>
            cfg.servoConf[i].min = 1020;
 8004930:	4969      	ldr	r1, [pc, #420]	; (8004ad8 <cliServo+0x298>)
 8004932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	440b      	add	r3, r1
 800493e:	33b8      	adds	r3, #184	; 0xb8
 8004940:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8004944:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = 2000;
 8004946:	4964      	ldr	r1, [pc, #400]	; (8004ad8 <cliServo+0x298>)
 8004948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	440b      	add	r3, r1
 8004954:	33ba      	adds	r3, #186	; 0xba
 8004956:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800495a:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = 1500;
 800495c:	495e      	ldr	r1, [pc, #376]	; (8004ad8 <cliServo+0x298>)
 800495e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	440b      	add	r3, r1
 800496a:	33bc      	adds	r3, #188	; 0xbc
 800496c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004970:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = servoRates[i];
 8004972:	f107 0220 	add.w	r2, r7, #32
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	4413      	add	r3, r2
 800497a:	f993 0000 	ldrsb.w	r0, [r3]
 800497e:	4956      	ldr	r1, [pc, #344]	; (8004ad8 <cliServo+0x298>)
 8004980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	440b      	add	r3, r1
 800498c:	33be      	adds	r3, #190	; 0xbe
 800498e:	4602      	mov	r2, r0
 8004990:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	3301      	adds	r3, #1
 8004996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	2b07      	cmp	r3, #7
 800499c:	ddc8      	ble.n	8004930 <cliServo+0xf0>
 800499e:	e090      	b.n	8004ac2 <cliServo+0x282>
        }
    } else {
        enum {SERVO = 0, MIN, MIDDLE, MAX, RATE, ARGS_COUNT};
        int args[ARGS_COUNT], check = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28

        while (check < argc && check < ARGS_COUNT) {
 80049a4:	e011      	b.n	80049ca <cliServo+0x18a>
            args[check] = atoi(argv[check]);
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	4413      	add	r3, r2
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f01e f81d 	bl	80229f0 <atoi>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	3330      	adds	r3, #48	; 0x30
 80049be:	443b      	add	r3, r7
 80049c0:	f843 2c24 	str.w	r2, [r3, #-36]
            check++;
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	3301      	adds	r3, #1
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
        while (check < argc && check < ARGS_COUNT) {
 80049ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	da02      	bge.n	80049d8 <cliServo+0x198>
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	dde6      	ble.n	80049a6 <cliServo+0x166>
        }

        if (check != ARGS_COUNT) {
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d005      	beq.n	80049ea <cliServo+0x1aa>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs servo_number min middle max rate\r\n");
 80049de:	4943      	ldr	r1, [pc, #268]	; (8004aec <cliServo+0x2ac>)
 80049e0:	2000      	movs	r0, #0
 80049e2:	f00e fc51 	bl	8013288 <pifLog_Print>
        	return PIF_LOG_CMD_NO_ERROR;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e06c      	b.n	8004ac4 <cliServo+0x284>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	dd60      	ble.n	8004ab2 <cliServo+0x272>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	dc5d      	bgt.n	8004ab2 <cliServo+0x272>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 80049f6:	693b      	ldr	r3, [r7, #16]
        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 80049f8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80049fc:	db59      	blt.n	8004ab2 <cliServo+0x272>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f640 0234 	movw	r2, #2100	; 0x834
 8004a04:	4293      	cmp	r3, r2
 8004a06:	dc54      	bgt.n	8004ab2 <cliServo+0x272>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004a08:	69bb      	ldr	r3, [r7, #24]
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004a0a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004a0e:	db50      	blt.n	8004ab2 <cliServo+0x272>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	f640 0234 	movw	r2, #2100	; 0x834
 8004a16:	4293      	cmp	r3, r2
 8004a18:	dc4b      	bgt.n	8004ab2 <cliServo+0x272>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004a1a:	697b      	ldr	r3, [r7, #20]
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004a1c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004a20:	db47      	blt.n	8004ab2 <cliServo+0x272>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f640 0234 	movw	r2, #2100	; 0x834
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	dc42      	bgt.n	8004ab2 <cliServo+0x272>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004a2c:	69fb      	ldr	r3, [r7, #28]
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004a2e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004a32:	db3e      	blt.n	8004ab2 <cliServo+0x272>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	2b64      	cmp	r3, #100	; 0x64
 8004a38:	dc3b      	bgt.n	8004ab2 <cliServo+0x272>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	697b      	ldr	r3, [r7, #20]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	dc37      	bgt.n	8004ab2 <cliServo+0x272>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	dc33      	bgt.n	8004ab2 <cliServo+0x272>
            args[SERVO]--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
            cfg.servoConf[args[SERVO]].min = args[MIN];
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	b218      	sxth	r0, r3
 8004a56:	4920      	ldr	r1, [pc, #128]	; (8004ad8 <cliServo+0x298>)
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	440b      	add	r3, r1
 8004a62:	33b8      	adds	r3, #184	; 0xb8
 8004a64:	4602      	mov	r2, r0
 8004a66:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].max = args[MAX];
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	b218      	sxth	r0, r3
 8004a6e:	491a      	ldr	r1, [pc, #104]	; (8004ad8 <cliServo+0x298>)
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	440b      	add	r3, r1
 8004a7a:	33ba      	adds	r3, #186	; 0xba
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].middle = args[MIDDLE];
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	b218      	sxth	r0, r3
 8004a86:	4914      	ldr	r1, [pc, #80]	; (8004ad8 <cliServo+0x298>)
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	440b      	add	r3, r1
 8004a92:	33bc      	adds	r3, #188	; 0xbc
 8004a94:	4602      	mov	r2, r0
 8004a96:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].rate = args[RATE];
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	b258      	sxtb	r0, r3
 8004a9e:	490e      	ldr	r1, [pc, #56]	; (8004ad8 <cliServo+0x298>)
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	440b      	add	r3, r1
 8004aaa:	33be      	adds	r3, #190	; 0xbe
 8004aac:	4602      	mov	r2, r0
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e003      	b.n	8004aba <cliServo+0x27a>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments, range for min, max and middle [900,2100], min <= middle <= max, range for rate [-100,100]\r\n");
 8004ab2:	490f      	ldr	r1, [pc, #60]	; (8004af0 <cliServo+0x2b0>)
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	f00e fbe7 	bl	8013288 <pifLog_Print>
        cliServo(1, NULL);
 8004aba:	2100      	movs	r1, #0
 8004abc:	2001      	movs	r0, #1
 8004abe:	f7ff febf 	bl	8004840 <cliServo>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3730      	adds	r7, #48	; 0x30
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	080268e4 	.word	0x080268e4
 8004ad0:	080267d0 	.word	0x080267d0
 8004ad4:	08026700 	.word	0x08026700
 8004ad8:	20000e54 	.word	0x20000e54
 8004adc:	080267fc 	.word	0x080267fc
 8004ae0:	0802672c 	.word	0x0802672c
 8004ae4:	08026800 	.word	0x08026800
 8004ae8:	08026730 	.word	0x08026730
 8004aec:	0802681c 	.word	0x0802681c
 8004af0:	08026868 	.word	0x08026868

08004af4 <cliServoMix>:

static int cliServoMix(int argc, char *argv[])
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b090      	sub	sp, #64	; 0x40
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
    int i;
    int args[8], check = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	63bb      	str	r3, [r7, #56]	; 0x38

    if (argc == 0) {
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f040 808a 	bne.w	8004c1e <cliServoMix+0x12a>
        pifLog_Print(LT_NONE, "Custom servo mixer: \r\nchange mixer: smix rule\ttarget_channel\tinput_channel\trate\tspeed\t\tmin\tmax\tbox\r\n");
 8004b0a:	49aa      	ldr	r1, [pc, #680]	; (8004db4 <cliServoMix+0x2c0>)
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	f00e fbbb 	bl	8013288 <pifLog_Print>
        pifLog_Print(LT_NONE, "reset mixer: smix reset\r\nload mixer: smix load\r\nchange direction of channel: smix direction\r\n");
 8004b12:	49a9      	ldr	r1, [pc, #676]	; (8004db8 <cliServoMix+0x2c4>)
 8004b14:	2000      	movs	r0, #0
 8004b16:	f00e fbb7 	bl	8013288 <pifLog_Print>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b1e:	e074      	b.n	8004c0a <cliServoMix+0x116>
            if (mcfg.customServoMixer[i].rate == 0)
 8004b20:	49a6      	ldr	r1, [pc, #664]	; (8004dbc <cliServoMix+0x2c8>)
 8004b22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b24:	4613      	mov	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	33d2      	adds	r3, #210	; 0xd2
 8004b2e:	f993 3000 	ldrsb.w	r3, [r3]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d06d      	beq.n	8004c12 <cliServoMix+0x11e>
                break;
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b38:	3301      	adds	r3, #1
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	49a0      	ldr	r1, [pc, #640]	; (8004dc0 <cliServoMix+0x2cc>)
 8004b3e:	2000      	movs	r0, #0
 8004b40:	f00e fc30 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].targetChannel + 1);
 8004b44:	499d      	ldr	r1, [pc, #628]	; (8004dbc <cliServoMix+0x2c8>)
 8004b46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b48:	4613      	mov	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	440b      	add	r3, r1
 8004b50:	33d0      	adds	r3, #208	; 0xd0
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	3301      	adds	r3, #1
 8004b56:	461a      	mov	r2, r3
 8004b58:	499a      	ldr	r1, [pc, #616]	; (8004dc4 <cliServoMix+0x2d0>)
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	f00e fc22 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].fromChannel + 1);
 8004b60:	4996      	ldr	r1, [pc, #600]	; (8004dbc <cliServoMix+0x2c8>)
 8004b62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b64:	4613      	mov	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	33d1      	adds	r3, #209	; 0xd1
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	3301      	adds	r3, #1
 8004b72:	461a      	mov	r2, r3
 8004b74:	4993      	ldr	r1, [pc, #588]	; (8004dc4 <cliServoMix+0x2d0>)
 8004b76:	2000      	movs	r0, #0
 8004b78:	f00e fc14 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].rate);
 8004b7c:	498f      	ldr	r1, [pc, #572]	; (8004dbc <cliServoMix+0x2c8>)
 8004b7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b80:	4613      	mov	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	440b      	add	r3, r1
 8004b88:	33d2      	adds	r3, #210	; 0xd2
 8004b8a:	f993 3000 	ldrsb.w	r3, [r3]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	498c      	ldr	r1, [pc, #560]	; (8004dc4 <cliServoMix+0x2d0>)
 8004b92:	2000      	movs	r0, #0
 8004b94:	f00e fc06 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].speed);
 8004b98:	4988      	ldr	r1, [pc, #544]	; (8004dbc <cliServoMix+0x2c8>)
 8004b9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	33d3      	adds	r3, #211	; 0xd3
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4986      	ldr	r1, [pc, #536]	; (8004dc4 <cliServoMix+0x2d0>)
 8004bac:	2000      	movs	r0, #0
 8004bae:	f00e fbf9 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].min);
 8004bb2:	4982      	ldr	r1, [pc, #520]	; (8004dbc <cliServoMix+0x2c8>)
 8004bb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	33d4      	adds	r3, #212	; 0xd4
 8004bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	497f      	ldr	r1, [pc, #508]	; (8004dc4 <cliServoMix+0x2d0>)
 8004bc8:	2000      	movs	r0, #0
 8004bca:	f00e fbeb 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].max);
 8004bce:	497b      	ldr	r1, [pc, #492]	; (8004dbc <cliServoMix+0x2c8>)
 8004bd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	440b      	add	r3, r1
 8004bda:	33d5      	adds	r3, #213	; 0xd5
 8004bdc:	f993 3000 	ldrsb.w	r3, [r3]
 8004be0:	461a      	mov	r2, r3
 8004be2:	4978      	ldr	r1, [pc, #480]	; (8004dc4 <cliServoMix+0x2d0>)
 8004be4:	2000      	movs	r0, #0
 8004be6:	f00e fbdd 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 8004bea:	4974      	ldr	r1, [pc, #464]	; (8004dbc <cliServoMix+0x2c8>)
 8004bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bee:	4613      	mov	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	33d6      	adds	r3, #214	; 0xd6
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4972      	ldr	r1, [pc, #456]	; (8004dc8 <cliServoMix+0x2d4>)
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f00e fbd0 	bl	80133a4 <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c06:	3301      	adds	r3, #1
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0c:	2b0f      	cmp	r3, #15
 8004c0e:	dd87      	ble.n	8004b20 <cliServoMix+0x2c>
 8004c10:	e000      	b.n	8004c14 <cliServoMix+0x120>
                break;
 8004c12:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004c14:	496d      	ldr	r1, [pc, #436]	; (8004dcc <cliServoMix+0x2d8>)
 8004c16:	2000      	movs	r0, #0
 8004c18:	f00e fb36 	bl	8013288 <pifLog_Print>
 8004c1c:	e235      	b.n	800508a <cliServoMix+0x596>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	496b      	ldr	r1, [pc, #428]	; (8004dd0 <cliServoMix+0x2dc>)
 8004c24:	4618      	mov	r0, r3
 8004c26:	f01e f845 	bl	8022cb4 <strcasecmp>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d118      	bne.n	8004c62 <cliServoMix+0x16e>
        // erase custom mixer
        memset(mcfg.customServoMixer, 0, sizeof(mcfg.customServoMixer));
 8004c30:	2270      	movs	r2, #112	; 0x70
 8004c32:	2100      	movs	r1, #0
 8004c34:	4867      	ldr	r0, [pc, #412]	; (8004dd4 <cliServoMix+0x2e0>)
 8004c36:	f01d ff2f 	bl	8022a98 <memset>
        for (i = 0; i < MAX_SERVOS; i++)
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c3e:	e00c      	b.n	8004c5a <cliServoMix+0x166>
            cfg.servoConf[i].direction = 0;
 8004c40:	4965      	ldr	r1, [pc, #404]	; (8004dd8 <cliServoMix+0x2e4>)
 8004c42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	440b      	add	r3, r1
 8004c4e:	33c0      	adds	r3, #192	; 0xc0
 8004c50:	2200      	movs	r2, #0
 8004c52:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++)
 8004c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c56:	3301      	adds	r3, #1
 8004c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5c:	2b07      	cmp	r3, #7
 8004c5e:	ddef      	ble.n	8004c40 <cliServoMix+0x14c>
 8004c60:	e213      	b.n	800508a <cliServoMix+0x596>
    } else if (strcasecmp(argv[0], "load") == 0) {
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	495d      	ldr	r1, [pc, #372]	; (8004ddc <cliServoMix+0x2e8>)
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f01e f823 	bl	8022cb4 <strcasecmp>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d135      	bne.n	8004ce0 <cliServoMix+0x1ec>
        if (argc > 1) {
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	dd2f      	ble.n	8004cda <cliServoMix+0x1e6>
            for (i = 0; ; i++) {
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004c7e:	4a58      	ldr	r2, [pc, #352]	; (8004de0 <cliServoMix+0x2ec>)
 8004c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d104      	bne.n	8004c94 <cliServoMix+0x1a0>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8004c8a:	4956      	ldr	r1, [pc, #344]	; (8004de4 <cliServoMix+0x2f0>)
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f00e fafb 	bl	8013288 <pifLog_Print>
                    break;
 8004c92:	e1fa      	b.n	800508a <cliServoMix+0x596>
                }
                if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	3304      	adds	r3, #4
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	4951      	ldr	r1, [pc, #324]	; (8004de0 <cliServoMix+0x2ec>)
 8004c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f01e f805 	bl	8022cb4 <strcasecmp>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d110      	bne.n	8004cd2 <cliServoMix+0x1de>
                    servoMixerLoadMix(i);
 8004cb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004cb2:	f006 f963 	bl	800af7c <servoMixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 8004cb6:	4a4a      	ldr	r2, [pc, #296]	; (8004de0 <cliServoMix+0x2ec>)
 8004cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4949      	ldr	r1, [pc, #292]	; (8004de8 <cliServoMix+0x2f4>)
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f00e fb6e 	bl	80133a4 <pifLog_Printf>
                    cliServoMix(1, NULL);
 8004cc8:	2100      	movs	r1, #0
 8004cca:	2001      	movs	r0, #1
 8004ccc:	f7ff ff12 	bl	8004af4 <cliServoMix>
                    break;
 8004cd0:	e1db      	b.n	800508a <cliServoMix+0x596>
            for (i = 0; ; i++) {
 8004cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004cd8:	e7d1      	b.n	8004c7e <cliServoMix+0x18a>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004cda:	f06f 0302 	mvn.w	r3, #2
 8004cde:	e1d5      	b.n	800508c <cliServoMix+0x598>
        }
    } else if (strcasecmp(argv[0], "direction") == 0) {
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4941      	ldr	r1, [pc, #260]	; (8004dec <cliServoMix+0x2f8>)
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f01d ffe4 	bl	8022cb4 <strcasecmp>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 8126 	bne.w	8004f40 <cliServoMix+0x44c>
        enum {SERVO = 0, INPUT_, DIRECTION, ARGS_COUNT};
        int servoIndex, channel;
        char* smix_dir[2] = { "smix", "direction" };
 8004cf4:	4a3e      	ldr	r2, [pc, #248]	; (8004df0 <cliServoMix+0x2fc>)
 8004cf6:	f107 0308 	add.w	r3, r7, #8
 8004cfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cfe:	e883 0003 	stmia.w	r3, {r0, r1}

        if (argc == 1) {
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	f040 8095 	bne.w	8004e34 <cliServoMix+0x340>
            pifLog_Print(LT_NONE, "change the direction a servo reacts to a input channel: \r\nservo input -1|1\r\n");
 8004d0a:	493a      	ldr	r1, [pc, #232]	; (8004df4 <cliServoMix+0x300>)
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f00e fabb 	bl	8013288 <pifLog_Print>
            pifLog_Print(LT_NONE, "s");
 8004d12:	4939      	ldr	r1, [pc, #228]	; (8004df8 <cliServoMix+0x304>)
 8004d14:	2000      	movs	r0, #0
 8004d16:	f00e fab7 	bl	8013288 <pifLog_Print>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d1e:	e009      	b.n	8004d34 <cliServoMix+0x240>
                pifLog_Printf(LT_NONE, "\ti%d", channel + 1);
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	3301      	adds	r3, #1
 8004d24:	461a      	mov	r2, r3
 8004d26:	4935      	ldr	r1, [pc, #212]	; (8004dfc <cliServoMix+0x308>)
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f00e fb3b 	bl	80133a4 <pifLog_Printf>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	3301      	adds	r3, #1
 8004d32:	633b      	str	r3, [r7, #48]	; 0x30
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	2b0b      	cmp	r3, #11
 8004d38:	ddf2      	ble.n	8004d20 <cliServoMix+0x22c>
            pifLog_Print(LT_NONE, "\r\n");
 8004d3a:	4924      	ldr	r1, [pc, #144]	; (8004dcc <cliServoMix+0x2d8>)
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	f00e faa3 	bl	8013288 <pifLog_Print>

            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004d42:	2300      	movs	r3, #0
 8004d44:	637b      	str	r3, [r7, #52]	; 0x34
 8004d46:	e02f      	b.n	8004da8 <cliServoMix+0x2b4>
                pifLog_Printf(LT_NONE, "%d", servoIndex + 1);
 8004d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	492c      	ldr	r1, [pc, #176]	; (8004e00 <cliServoMix+0x30c>)
 8004d50:	2000      	movs	r0, #0
 8004d52:	f00e fb27 	bl	80133a4 <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004d56:	2300      	movs	r3, #0
 8004d58:	633b      	str	r3, [r7, #48]	; 0x30
 8004d5a:	e01b      	b.n	8004d94 <cliServoMix+0x2a0>
                    pifLog_Printf(LT_NONE, "\t%s  ", (cfg.servoConf[servoIndex].direction & (1 << channel)) ? "r" : "n");
 8004d5c:	491e      	ldr	r1, [pc, #120]	; (8004dd8 <cliServoMix+0x2e4>)
 8004d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	440b      	add	r3, r1
 8004d6a:	33c0      	adds	r3, #192	; 0xc0
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	fa42 f303 	asr.w	r3, r2, r3
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <cliServoMix+0x28e>
 8004d7e:	4b21      	ldr	r3, [pc, #132]	; (8004e04 <cliServoMix+0x310>)
 8004d80:	e000      	b.n	8004d84 <cliServoMix+0x290>
 8004d82:	4b21      	ldr	r3, [pc, #132]	; (8004e08 <cliServoMix+0x314>)
 8004d84:	461a      	mov	r2, r3
 8004d86:	4921      	ldr	r1, [pc, #132]	; (8004e0c <cliServoMix+0x318>)
 8004d88:	2000      	movs	r0, #0
 8004d8a:	f00e fb0b 	bl	80133a4 <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	3301      	adds	r3, #1
 8004d92:	633b      	str	r3, [r7, #48]	; 0x30
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	2b0b      	cmp	r3, #11
 8004d98:	dde0      	ble.n	8004d5c <cliServoMix+0x268>
                pifLog_Print(LT_NONE, "\r\n");
 8004d9a:	490c      	ldr	r1, [pc, #48]	; (8004dcc <cliServoMix+0x2d8>)
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	f00e fa73 	bl	8013288 <pifLog_Print>
            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da4:	3301      	adds	r3, #1
 8004da6:	637b      	str	r3, [r7, #52]	; 0x34
 8004da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004daa:	2b07      	cmp	r3, #7
 8004dac:	ddcc      	ble.n	8004d48 <cliServoMix+0x254>
            }
            return PIF_LOG_CMD_NO_ERROR;
 8004dae:	2300      	movs	r3, #0
 8004db0:	e16c      	b.n	800508c <cliServoMix+0x598>
 8004db2:	bf00      	nop
 8004db4:	080268ec 	.word	0x080268ec
 8004db8:	08026954 	.word	0x08026954
 8004dbc:	200008e8 	.word	0x200008e8
 8004dc0:	08026700 	.word	0x08026700
 8004dc4:	080267fc 	.word	0x080267fc
 8004dc8:	080269b4 	.word	0x080269b4
 8004dcc:	0802672c 	.word	0x0802672c
 8004dd0:	08026730 	.word	0x08026730
 8004dd4:	200009b8 	.word	0x200009b8
 8004dd8:	20000e54 	.word	0x20000e54
 8004ddc:	08026738 	.word	0x08026738
 8004de0:	080279f8 	.word	0x080279f8
 8004de4:	08026740 	.word	0x08026740
 8004de8:	08026758 	.word	0x08026758
 8004dec:	08025988 	.word	0x08025988
 8004df0:	08026af0 	.word	0x08026af0
 8004df4:	080269bc 	.word	0x080269bc
 8004df8:	08026a0c 	.word	0x08026a0c
 8004dfc:	08026a10 	.word	0x08026a10
 8004e00:	08026a18 	.word	0x08026a18
 8004e04:	08026a1c 	.word	0x08026a1c
 8004e08:	08026a20 	.word	0x08026a20
 8004e0c:	08026a24 	.word	0x08026a24
        }

        while (check < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check]);
 8004e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	4413      	add	r3, r2
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f01d fde8 	bl	80229f0 <atoi>
 8004e20:	4602      	mov	r2, r0
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	3340      	adds	r3, #64	; 0x40
 8004e28:	443b      	add	r3, r7
 8004e2a:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	3301      	adds	r3, #1
 8004e32:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check < argc && check < ARGS_COUNT) {
 8004e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	da02      	bge.n	8004e42 <cliServoMix+0x34e>
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	dde6      	ble.n	8004e10 <cliServoMix+0x31c>
        }

        if (check != ARGS_COUNT) {
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d005      	beq.n	8004e54 <cliServoMix+0x360>
            pifLog_Print(LT_NONE, "Wrong number of arguments, needs servo input direction\r\n");
 8004e48:	4992      	ldr	r1, [pc, #584]	; (8005094 <cliServoMix+0x5a0>)
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f00e fa1c 	bl	8013288 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8004e50:	2300      	movs	r3, #0
 8004e52:	e11b      	b.n	800508c <cliServoMix+0x598>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS && args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS && (args[DIRECTION] == -1 || args[DIRECTION] == 1)) {
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	dd55      	ble.n	8004f06 <cliServoMix+0x412>
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	dc52      	bgt.n	8004f06 <cliServoMix+0x412>
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	dd4f      	ble.n	8004f06 <cliServoMix+0x412>
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b0c      	cmp	r3, #12
 8004e6a:	dc4c      	bgt.n	8004f06 <cliServoMix+0x412>
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d002      	beq.n	8004e7a <cliServoMix+0x386>
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d145      	bne.n	8004f06 <cliServoMix+0x412>
            args[SERVO] -= 1;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	613b      	str	r3, [r7, #16]
            args[INPUT_] -= 1;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	617b      	str	r3, [r7, #20]
            if (args[DIRECTION] == -1)
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8c:	d11c      	bne.n	8004ec8 <cliServoMix+0x3d4>
                cfg.servoConf[args[SERVO]].direction |= 1 << args[INPUT_];
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4981      	ldr	r1, [pc, #516]	; (8005098 <cliServoMix+0x5a4>)
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	440b      	add	r3, r1
 8004e9c:	33c0      	adds	r3, #192	; 0xc0
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b21a      	sxth	r2, r3
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eaa:	b21b      	sxth	r3, r3
 8004eac:	4313      	orrs	r3, r2
 8004eae:	b21b      	sxth	r3, r3
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	b298      	uxth	r0, r3
 8004eb4:	4978      	ldr	r1, [pc, #480]	; (8005098 <cliServoMix+0x5a4>)
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	440b      	add	r3, r1
 8004ec0:	33c0      	adds	r3, #192	; 0xc0
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 8004ec6:	e022      	b.n	8004f0e <cliServoMix+0x41a>
            else
                cfg.servoConf[args[SERVO]].direction &= ~(1 << args[INPUT_]);
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4973      	ldr	r1, [pc, #460]	; (8005098 <cliServoMix+0x5a4>)
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	440b      	add	r3, r1
 8004ed6:	33c0      	adds	r3, #192	; 0xc0
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b21a      	sxth	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2101      	movs	r1, #1
 8004ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee4:	b21b      	sxth	r3, r3
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	b21b      	sxth	r3, r3
 8004eea:	4013      	ands	r3, r2
 8004eec:	b21b      	sxth	r3, r3
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	b298      	uxth	r0, r3
 8004ef2:	4969      	ldr	r1, [pc, #420]	; (8005098 <cliServoMix+0x5a4>)
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	440b      	add	r3, r1
 8004efe:	33c0      	adds	r3, #192	; 0xc0
 8004f00:	4602      	mov	r2, r0
 8004f02:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 8004f04:	e003      	b.n	8004f0e <cliServoMix+0x41a>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 8004f06:	4965      	ldr	r1, [pc, #404]	; (800509c <cliServoMix+0x5a8>)
 8004f08:	2000      	movs	r0, #0
 8004f0a:	f00e f9bd 	bl	8013288 <pifLog_Print>

        cliServoMix(2, smix_dir);
 8004f0e:	f107 0308 	add.w	r3, r7, #8
 8004f12:	4619      	mov	r1, r3
 8004f14:	2002      	movs	r0, #2
 8004f16:	f7ff fded 	bl	8004af4 <cliServoMix>
 8004f1a:	e0b6      	b.n	800508a <cliServoMix+0x596>
    } else {
        enum {RULE = 0, TARGET, INPUT_, RATE, SPEED, MIN, MAX, BOX, ARGS_COUNT};
        while (check < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check]);
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	4413      	add	r3, r2
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f01d fd62 	bl	80229f0 <atoi>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	3340      	adds	r3, #64	; 0x40
 8004f34:	443b      	add	r3, r7
 8004f36:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check < argc && check < ARGS_COUNT) {
 8004f40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	da02      	bge.n	8004f4e <cliServoMix+0x45a>
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	2b07      	cmp	r3, #7
 8004f4c:	dde6      	ble.n	8004f1c <cliServoMix+0x428>
        }

        if (check != ARGS_COUNT) {
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d005      	beq.n	8004f60 <cliServoMix+0x46c>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs rule target_channel input_channel rate speed min max box\r\n");
 8004f54:	4952      	ldr	r1, [pc, #328]	; (80050a0 <cliServoMix+0x5ac>)
 8004f56:	2000      	movs	r0, #0
 8004f58:	f00e f996 	bl	8013288 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e095      	b.n	800508c <cliServoMix+0x598>
        }

        i = args[RULE] - 1;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (i >= 0 && i < MAX_SERVO_RULES &&
 8004f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f2c0 808a 	blt.w	8005082 <cliServoMix+0x58e>
 8004f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f70:	2b0f      	cmp	r3, #15
 8004f72:	f300 8086 	bgt.w	8005082 <cliServoMix+0x58e>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 8004f76:	697b      	ldr	r3, [r7, #20]
        if (i >= 0 && i < MAX_SERVO_RULES &&
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f340 8082 	ble.w	8005082 <cliServoMix+0x58e>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	dc7e      	bgt.n	8005082 <cliServoMix+0x58e>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 8004f84:	69bb      	ldr	r3, [r7, #24]
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	dd7b      	ble.n	8005082 <cliServoMix+0x58e>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b0c      	cmp	r3, #12
 8004f8e:	dc78      	bgt.n	8005082 <cliServoMix+0x58e>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004f90:	69fb      	ldr	r3, [r7, #28]
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 8004f92:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004f96:	db74      	blt.n	8005082 <cliServoMix+0x58e>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	2b64      	cmp	r3, #100	; 0x64
 8004f9c:	dc71      	bgt.n	8005082 <cliServoMix+0x58e>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	db6e      	blt.n	8005082 <cliServoMix+0x58e>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	2bff      	cmp	r3, #255	; 0xff
 8004fa8:	dc6b      	bgt.n	8005082 <cliServoMix+0x58e>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	db68      	blt.n	8005082 <cliServoMix+0x58e>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	2b64      	cmp	r3, #100	; 0x64
 8004fb4:	dc65      	bgt.n	8005082 <cliServoMix+0x58e>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
            args[MIN] >= 0 && args[MIN] <= 100 &&
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	db62      	blt.n	8005082 <cliServoMix+0x58e>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	2b64      	cmp	r3, #100	; 0x64
 8004fc0:	dc5f      	bgt.n	8005082 <cliServoMix+0x58e>
 8004fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	da5b      	bge.n	8005082 <cliServoMix+0x58e>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	db58      	blt.n	8005082 <cliServoMix+0x58e>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	dc55      	bgt.n	8005082 <cliServoMix+0x58e>
            mcfg.customServoMixer[i].targetChannel = args[TARGET] - 1;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b2d8      	uxtb	r0, r3
 8004fde:	4931      	ldr	r1, [pc, #196]	; (80050a4 <cliServoMix+0x5b0>)
 8004fe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	440b      	add	r3, r1
 8004fea:	33d0      	adds	r3, #208	; 0xd0
 8004fec:	4602      	mov	r2, r0
 8004fee:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = args[INPUT_] - 1;
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b2d8      	uxtb	r0, r3
 8004ff8:	492a      	ldr	r1, [pc, #168]	; (80050a4 <cliServoMix+0x5b0>)
 8004ffa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	440b      	add	r3, r1
 8005004:	33d1      	adds	r3, #209	; 0xd1
 8005006:	4602      	mov	r2, r0
 8005008:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = args[RATE];
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	b258      	sxtb	r0, r3
 800500e:	4925      	ldr	r1, [pc, #148]	; (80050a4 <cliServoMix+0x5b0>)
 8005010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005012:	4613      	mov	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	440b      	add	r3, r1
 800501a:	33d2      	adds	r3, #210	; 0xd2
 800501c:	4602      	mov	r2, r0
 800501e:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = args[SPEED];
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	b2d8      	uxtb	r0, r3
 8005024:	491f      	ldr	r1, [pc, #124]	; (80050a4 <cliServoMix+0x5b0>)
 8005026:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005028:	4613      	mov	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	440b      	add	r3, r1
 8005030:	33d3      	adds	r3, #211	; 0xd3
 8005032:	4602      	mov	r2, r0
 8005034:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = args[MIN];
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	b258      	sxtb	r0, r3
 800503a:	491a      	ldr	r1, [pc, #104]	; (80050a4 <cliServoMix+0x5b0>)
 800503c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800503e:	4613      	mov	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	440b      	add	r3, r1
 8005046:	33d4      	adds	r3, #212	; 0xd4
 8005048:	4602      	mov	r2, r0
 800504a:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = args[MAX];
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	b258      	sxtb	r0, r3
 8005050:	4914      	ldr	r1, [pc, #80]	; (80050a4 <cliServoMix+0x5b0>)
 8005052:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005054:	4613      	mov	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	440b      	add	r3, r1
 800505c:	33d5      	adds	r3, #213	; 0xd5
 800505e:	4602      	mov	r2, r0
 8005060:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = args[BOX];
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	b2d8      	uxtb	r0, r3
 8005066:	490f      	ldr	r1, [pc, #60]	; (80050a4 <cliServoMix+0x5b0>)
 8005068:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800506a:	4613      	mov	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	440b      	add	r3, r1
 8005072:	33d6      	adds	r3, #214	; 0xd6
 8005074:	4602      	mov	r2, r0
 8005076:	701a      	strb	r2, [r3, #0]
            cliServoMix(1, NULL);
 8005078:	2100      	movs	r1, #0
 800507a:	2001      	movs	r0, #1
 800507c:	f7ff fd3a 	bl	8004af4 <cliServoMix>
 8005080:	e003      	b.n	800508a <cliServoMix+0x596>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 8005082:	4906      	ldr	r1, [pc, #24]	; (800509c <cliServoMix+0x5a8>)
 8005084:	2000      	movs	r0, #0
 8005086:	f00e f8ff 	bl	8013288 <pifLog_Print>
    }
	return PIF_LOG_CMD_NO_ERROR;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3740      	adds	r7, #64	; 0x40
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	08026a2c 	.word	0x08026a2c
 8005098:	20000e54 	.word	0x20000e54
 800509c:	08026a68 	.word	0x08026a68
 80050a0:	08026a8c 	.word	0x08026a8c
 80050a4:	200008e8 	.word	0x200008e8

080050a8 <cliDefaults>:

static int cliDefaults(int argc, char *argv[])
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Resetting to defaults...\r\n");
 80050b2:	490b      	ldr	r1, [pc, #44]	; (80050e0 <cliDefaults+0x38>)
 80050b4:	2000      	movs	r0, #0
 80050b6:	f00e f8e7 	bl	8013288 <pifLog_Print>
    checkFirstTime(true);
 80050ba:	2001      	movs	r0, #1
 80050bc:	f001 fb04 	bl	80066c8 <checkFirstTime>
    pifLog_Print(LT_NONE, "Rebooting...");
 80050c0:	4908      	ldr	r1, [pc, #32]	; (80050e4 <cliDefaults+0x3c>)
 80050c2:	2000      	movs	r0, #0
 80050c4:	f00e f8e0 	bl	8013288 <pifLog_Print>
    pif_Delay1ms(10);
 80050c8:	200a      	movs	r0, #10
 80050ca:	f00b ffc1 	bl	8011050 <pif_Delay1ms>
    systemReset(false);
 80050ce:	2000      	movs	r0, #0
 80050d0:	f7fc fdf8 	bl	8001cc4 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	08026af8 	.word	0x08026af8
 80050e4:	08026b14 	.word	0x08026b14

080050e8 <cliDump>:

static int cliDump(int argc, char *argv[])
{
 80050e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ea:	b093      	sub	sp, #76	; 0x4c
 80050ec:	af04      	add	r7, sp, #16
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
    char buf[16];
    float thr, roll, pitch, yaw;
    uint32_t mask;
    const clivalue_t *setval;

    cliVersion(1, NULL);
 80050f2:	2100      	movs	r1, #0
 80050f4:	2001      	movs	r0, #1
 80050f6:	f001 f85d 	bl	80061b4 <cliVersion>
    pifLog_Print(LT_NONE, "Current Config: Copy everything below here...\r\n");
 80050fa:	49bc      	ldr	r1, [pc, #752]	; (80053ec <cliDump+0x304>)
 80050fc:	2000      	movs	r0, #0
 80050fe:	f00e f8c3 	bl	8013288 <pifLog_Print>

    // print out aux switches
    cliAux(1, NULL);
 8005102:	2100      	movs	r1, #0
 8005104:	2001      	movs	r0, #1
 8005106:	f7ff f971 	bl	80043ec <cliAux>

    // print out current motor mix
    pifLog_Printf(LT_NONE, "mixer %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 800510a:	4bb9      	ldr	r3, [pc, #740]	; (80053f0 <cliDump+0x308>)
 800510c:	795b      	ldrb	r3, [r3, #5]
 800510e:	3b01      	subs	r3, #1
 8005110:	4ab8      	ldr	r2, [pc, #736]	; (80053f4 <cliDump+0x30c>)
 8005112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005116:	461a      	mov	r2, r3
 8005118:	49b7      	ldr	r1, [pc, #732]	; (80053f8 <cliDump+0x310>)
 800511a:	2000      	movs	r0, #0
 800511c:	f00e f942 	bl	80133a4 <pifLog_Printf>

    // print custom mix if exists
    if (mcfg.customMixer[0].throttle != 0.0f) {
 8005120:	4bb3      	ldr	r3, [pc, #716]	; (80053f0 <cliDump+0x308>)
 8005122:	edd3 7a04 	vldr	s15, [r3, #16]
 8005126:	eef5 7a40 	vcmp.f32	s15, #0.0
 800512a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512e:	f000 80a4 	beq.w	800527a <cliDump+0x192>
        for (i = 0; i < MAX_MOTORS; i++) {
 8005132:	2300      	movs	r3, #0
 8005134:	637b      	str	r3, [r7, #52]	; 0x34
 8005136:	e093      	b.n	8005260 <cliDump+0x178>
            if (mcfg.customMixer[i].throttle == 0.0f)
 8005138:	4aad      	ldr	r2, [pc, #692]	; (80053f0 <cliDump+0x308>)
 800513a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513c:	3301      	adds	r3, #1
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	4413      	add	r3, r2
 8005142:	edd3 7a00 	vldr	s15, [r3]
 8005146:	eef5 7a40 	vcmp.f32	s15, #0.0
 800514a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514e:	f000 808c 	beq.w	800526a <cliDump+0x182>
                break;
            thr = mcfg.customMixer[i].throttle;
 8005152:	4aa7      	ldr	r2, [pc, #668]	; (80053f0 <cliDump+0x308>)
 8005154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005156:	3301      	adds	r3, #1
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	4413      	add	r3, r2
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
            roll = mcfg.customMixer[i].roll;
 8005160:	4aa3      	ldr	r2, [pc, #652]	; (80053f0 <cliDump+0x308>)
 8005162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005164:	3301      	adds	r3, #1
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	4413      	add	r3, r2
 800516a:	3304      	adds	r3, #4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
            pitch = mcfg.customMixer[i].pitch;
 8005170:	4a9f      	ldr	r2, [pc, #636]	; (80053f0 <cliDump+0x308>)
 8005172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	4413      	add	r3, r2
 8005178:	3318      	adds	r3, #24
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
            yaw = mcfg.customMixer[i].yaw;
 800517e:	4a9c      	ldr	r2, [pc, #624]	; (80053f0 <cliDump+0x308>)
 8005180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	4413      	add	r3, r2
 8005186:	331c      	adds	r3, #28
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	623b      	str	r3, [r7, #32]
            pifLog_Printf(LT_NONE, "cmix %d", i + 1);
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	3301      	adds	r3, #1
 8005190:	461a      	mov	r2, r3
 8005192:	499a      	ldr	r1, [pc, #616]	; (80053fc <cliDump+0x314>)
 8005194:	2000      	movs	r0, #0
 8005196:	f00e f905 	bl	80133a4 <pifLog_Printf>
            if (thr < 0)
 800519a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800519e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a6:	d503      	bpl.n	80051b0 <cliDump+0xc8>
                pifLog_Print(LT_NONE, " ");
 80051a8:	4995      	ldr	r1, [pc, #596]	; (8005400 <cliDump+0x318>)
 80051aa:	2000      	movs	r0, #0
 80051ac:	f00e f86c 	bl	8013288 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(thr, buf));
 80051b0:	f107 0308 	add.w	r3, r7, #8
 80051b4:	4618      	mov	r0, r3
 80051b6:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80051ba:	f7ff f85b 	bl	8004274 <ftoa>
 80051be:	4603      	mov	r3, r0
 80051c0:	461a      	mov	r2, r3
 80051c2:	4990      	ldr	r1, [pc, #576]	; (8005404 <cliDump+0x31c>)
 80051c4:	2000      	movs	r0, #0
 80051c6:	f00e f8ed 	bl	80133a4 <pifLog_Printf>
            if (roll < 0)
 80051ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80051ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d6:	d503      	bpl.n	80051e0 <cliDump+0xf8>
                pifLog_Print(LT_NONE, " ");
 80051d8:	4989      	ldr	r1, [pc, #548]	; (8005400 <cliDump+0x318>)
 80051da:	2000      	movs	r0, #0
 80051dc:	f00e f854 	bl	8013288 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(roll, buf));
 80051e0:	f107 0308 	add.w	r3, r7, #8
 80051e4:	4618      	mov	r0, r3
 80051e6:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80051ea:	f7ff f843 	bl	8004274 <ftoa>
 80051ee:	4603      	mov	r3, r0
 80051f0:	461a      	mov	r2, r3
 80051f2:	4984      	ldr	r1, [pc, #528]	; (8005404 <cliDump+0x31c>)
 80051f4:	2000      	movs	r0, #0
 80051f6:	f00e f8d5 	bl	80133a4 <pifLog_Printf>
            if (pitch < 0)
 80051fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80051fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005206:	d503      	bpl.n	8005210 <cliDump+0x128>
                pifLog_Print(LT_NONE, " ");
 8005208:	497d      	ldr	r1, [pc, #500]	; (8005400 <cliDump+0x318>)
 800520a:	2000      	movs	r0, #0
 800520c:	f00e f83c 	bl	8013288 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(pitch, buf));
 8005210:	f107 0308 	add.w	r3, r7, #8
 8005214:	4618      	mov	r0, r3
 8005216:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800521a:	f7ff f82b 	bl	8004274 <ftoa>
 800521e:	4603      	mov	r3, r0
 8005220:	461a      	mov	r2, r3
 8005222:	4978      	ldr	r1, [pc, #480]	; (8005404 <cliDump+0x31c>)
 8005224:	2000      	movs	r0, #0
 8005226:	f00e f8bd 	bl	80133a4 <pifLog_Printf>
            if (yaw < 0)
 800522a:	edd7 7a08 	vldr	s15, [r7, #32]
 800522e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005236:	d503      	bpl.n	8005240 <cliDump+0x158>
                pifLog_Print(LT_NONE, " ");
 8005238:	4971      	ldr	r1, [pc, #452]	; (8005400 <cliDump+0x318>)
 800523a:	2000      	movs	r0, #0
 800523c:	f00e f824 	bl	8013288 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(yaw, buf));
 8005240:	f107 0308 	add.w	r3, r7, #8
 8005244:	4618      	mov	r0, r3
 8005246:	ed97 0a08 	vldr	s0, [r7, #32]
 800524a:	f7ff f813 	bl	8004274 <ftoa>
 800524e:	4603      	mov	r3, r0
 8005250:	461a      	mov	r2, r3
 8005252:	496d      	ldr	r1, [pc, #436]	; (8005408 <cliDump+0x320>)
 8005254:	2000      	movs	r0, #0
 8005256:	f00e f8a5 	bl	80133a4 <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525c:	3301      	adds	r3, #1
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
 8005260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005262:	2b0b      	cmp	r3, #11
 8005264:	f67f af68 	bls.w	8005138 <cliDump+0x50>
 8005268:	e000      	b.n	800526c <cliDump+0x184>
                break;
 800526a:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "cmix %d 0 0 0 0\r\n", i + 1);
 800526c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526e:	3301      	adds	r3, #1
 8005270:	461a      	mov	r2, r3
 8005272:	4966      	ldr	r1, [pc, #408]	; (800540c <cliDump+0x324>)
 8005274:	2000      	movs	r0, #0
 8005276:	f00e f895 	bl	80133a4 <pifLog_Printf>
    }

    // print custom servo mixer if exists
    if (mcfg.customServoMixer[0].rate != 0) {
 800527a:	4b5d      	ldr	r3, [pc, #372]	; (80053f0 <cliDump+0x308>)
 800527c:	f993 30d2 	ldrsb.w	r3, [r3, #210]	; 0xd2
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 8084 	beq.w	800538e <cliDump+0x2a6>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8005286:	2300      	movs	r3, #0
 8005288:	637b      	str	r3, [r7, #52]	; 0x34
 800528a:	e074      	b.n	8005376 <cliDump+0x28e>
            if (mcfg.customServoMixer[i].rate == 0)
 800528c:	4958      	ldr	r1, [pc, #352]	; (80053f0 <cliDump+0x308>)
 800528e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	440b      	add	r3, r1
 8005298:	33d2      	adds	r3, #210	; 0xd2
 800529a:	f993 3000 	ldrsb.w	r3, [r3]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d06d      	beq.n	800537e <cliDump+0x296>
                break;
            pifLog_Printf(LT_NONE, "smix %d ", i + 1);
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	3301      	adds	r3, #1
 80052a6:	461a      	mov	r2, r3
 80052a8:	4959      	ldr	r1, [pc, #356]	; (8005410 <cliDump+0x328>)
 80052aa:	2000      	movs	r0, #0
 80052ac:	f00e f87a 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].targetChannel + 1);
 80052b0:	494f      	ldr	r1, [pc, #316]	; (80053f0 <cliDump+0x308>)
 80052b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052b4:	4613      	mov	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	440b      	add	r3, r1
 80052bc:	33d0      	adds	r3, #208	; 0xd0
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	3301      	adds	r3, #1
 80052c2:	461a      	mov	r2, r3
 80052c4:	4953      	ldr	r1, [pc, #332]	; (8005414 <cliDump+0x32c>)
 80052c6:	2000      	movs	r0, #0
 80052c8:	f00e f86c 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].fromChannel + 1);
 80052cc:	4948      	ldr	r1, [pc, #288]	; (80053f0 <cliDump+0x308>)
 80052ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d0:	4613      	mov	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	440b      	add	r3, r1
 80052d8:	33d1      	adds	r3, #209	; 0xd1
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	461a      	mov	r2, r3
 80052e0:	494c      	ldr	r1, [pc, #304]	; (8005414 <cliDump+0x32c>)
 80052e2:	2000      	movs	r0, #0
 80052e4:	f00e f85e 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].rate);
 80052e8:	4941      	ldr	r1, [pc, #260]	; (80053f0 <cliDump+0x308>)
 80052ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052ec:	4613      	mov	r3, r2
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	1a9b      	subs	r3, r3, r2
 80052f2:	440b      	add	r3, r1
 80052f4:	33d2      	adds	r3, #210	; 0xd2
 80052f6:	f993 3000 	ldrsb.w	r3, [r3]
 80052fa:	461a      	mov	r2, r3
 80052fc:	4945      	ldr	r1, [pc, #276]	; (8005414 <cliDump+0x32c>)
 80052fe:	2000      	movs	r0, #0
 8005300:	f00e f850 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].speed);
 8005304:	493a      	ldr	r1, [pc, #232]	; (80053f0 <cliDump+0x308>)
 8005306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005308:	4613      	mov	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	440b      	add	r3, r1
 8005310:	33d3      	adds	r3, #211	; 0xd3
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	493f      	ldr	r1, [pc, #252]	; (8005414 <cliDump+0x32c>)
 8005318:	2000      	movs	r0, #0
 800531a:	f00e f843 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].min);
 800531e:	4934      	ldr	r1, [pc, #208]	; (80053f0 <cliDump+0x308>)
 8005320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	1a9b      	subs	r3, r3, r2
 8005328:	440b      	add	r3, r1
 800532a:	33d4      	adds	r3, #212	; 0xd4
 800532c:	f993 3000 	ldrsb.w	r3, [r3]
 8005330:	461a      	mov	r2, r3
 8005332:	4938      	ldr	r1, [pc, #224]	; (8005414 <cliDump+0x32c>)
 8005334:	2000      	movs	r0, #0
 8005336:	f00e f835 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].max);
 800533a:	492d      	ldr	r1, [pc, #180]	; (80053f0 <cliDump+0x308>)
 800533c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800533e:	4613      	mov	r3, r2
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	440b      	add	r3, r1
 8005346:	33d5      	adds	r3, #213	; 0xd5
 8005348:	f993 3000 	ldrsb.w	r3, [r3]
 800534c:	461a      	mov	r2, r3
 800534e:	4931      	ldr	r1, [pc, #196]	; (8005414 <cliDump+0x32c>)
 8005350:	2000      	movs	r0, #0
 8005352:	f00e f827 	bl	80133a4 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 8005356:	4926      	ldr	r1, [pc, #152]	; (80053f0 <cliDump+0x308>)
 8005358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800535a:	4613      	mov	r3, r2
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	440b      	add	r3, r1
 8005362:	33d6      	adds	r3, #214	; 0xd6
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	492b      	ldr	r1, [pc, #172]	; (8005418 <cliDump+0x330>)
 800536a:	2000      	movs	r0, #0
 800536c:	f00e f81a 	bl	80133a4 <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8005370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005372:	3301      	adds	r3, #1
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
 8005376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005378:	2b0f      	cmp	r3, #15
 800537a:	d987      	bls.n	800528c <cliDump+0x1a4>
 800537c:	e000      	b.n	8005380 <cliDump+0x298>
                break;
 800537e:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "smix %d 0 0 0 0\r\n", i + 1);
 8005380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005382:	3301      	adds	r3, #1
 8005384:	461a      	mov	r2, r3
 8005386:	4925      	ldr	r1, [pc, #148]	; (800541c <cliDump+0x334>)
 8005388:	2000      	movs	r0, #0
 800538a:	f00e f80b 	bl	80133a4 <pifLog_Printf>
    }

    // print servo directions
    for (i = 0; i < MAX_SERVOS; i++)
 800538e:	2300      	movs	r3, #0
 8005390:	637b      	str	r3, [r7, #52]	; 0x34
 8005392:	e024      	b.n	80053de <cliDump+0x2f6>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 8005394:	2300      	movs	r3, #0
 8005396:	633b      	str	r3, [r7, #48]	; 0x30
 8005398:	e01b      	b.n	80053d2 <cliDump+0x2ea>
            if (cfg.servoConf[i].direction & (1 << channel))
 800539a:	4921      	ldr	r1, [pc, #132]	; (8005420 <cliDump+0x338>)
 800539c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	440b      	add	r3, r1
 80053a8:	33c0      	adds	r3, #192	; 0xc0
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	fa42 f303 	asr.w	r3, r2, r3
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d007      	beq.n	80053cc <cliDump+0x2e4>
                pifLog_Printf(LT_NONE, "smix direction %d %d -1\r\n", i + 1 , channel + 1);
 80053bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	3301      	adds	r3, #1
 80053c4:	4917      	ldr	r1, [pc, #92]	; (8005424 <cliDump+0x33c>)
 80053c6:	2000      	movs	r0, #0
 80053c8:	f00d ffec 	bl	80133a4 <pifLog_Printf>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	3301      	adds	r3, #1
 80053d0:	633b      	str	r3, [r7, #48]	; 0x30
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	2b0b      	cmp	r3, #11
 80053d6:	d9e0      	bls.n	800539a <cliDump+0x2b2>
    for (i = 0; i < MAX_SERVOS; i++)
 80053d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053da:	3301      	adds	r3, #1
 80053dc:	637b      	str	r3, [r7, #52]	; 0x34
 80053de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e0:	2b07      	cmp	r3, #7
 80053e2:	d9d7      	bls.n	8005394 <cliDump+0x2ac>

    // print servo config
    for (i = 0; i < MAX_SERVOS; i++)
 80053e4:	2300      	movs	r3, #0
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
 80053e8:	e057      	b.n	800549a <cliDump+0x3b2>
 80053ea:	bf00      	nop
 80053ec:	08026b24 	.word	0x08026b24
 80053f0:	200008e8 	.word	0x200008e8
 80053f4:	080279f8 	.word	0x080279f8
 80053f8:	08026b54 	.word	0x08026b54
 80053fc:	08026b60 	.word	0x08026b60
 8005400:	08026b68 	.word	0x08026b68
 8005404:	08026b6c 	.word	0x08026b6c
 8005408:	0802670c 	.word	0x0802670c
 800540c:	08026b70 	.word	0x08026b70
 8005410:	08026b84 	.word	0x08026b84
 8005414:	08026b90 	.word	0x08026b90
 8005418:	080269b4 	.word	0x080269b4
 800541c:	08026b94 	.word	0x08026b94
 8005420:	20000e54 	.word	0x20000e54
 8005424:	08026ba8 	.word	0x08026ba8
        pifLog_Printf(LT_NONE, "servo %d %d %d %d %d\r\n", i + 1, cfg.servoConf[i].min, cfg.servoConf[i].middle, cfg.servoConf[i].max, cfg.servoConf[i].rate);
 8005428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542a:	1c59      	adds	r1, r3, #1
 800542c:	4863      	ldr	r0, [pc, #396]	; (80055bc <cliDump+0x4d4>)
 800542e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4403      	add	r3, r0
 800543a:	33b8      	adds	r3, #184	; 0xb8
 800543c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005440:	461e      	mov	r6, r3
 8005442:	485e      	ldr	r0, [pc, #376]	; (80055bc <cliDump+0x4d4>)
 8005444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	4403      	add	r3, r0
 8005450:	33bc      	adds	r3, #188	; 0xbc
 8005452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005456:	461c      	mov	r4, r3
 8005458:	4858      	ldr	r0, [pc, #352]	; (80055bc <cliDump+0x4d4>)
 800545a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4403      	add	r3, r0
 8005466:	33ba      	adds	r3, #186	; 0xba
 8005468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800546c:	461d      	mov	r5, r3
 800546e:	4853      	ldr	r0, [pc, #332]	; (80055bc <cliDump+0x4d4>)
 8005470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	4403      	add	r3, r0
 800547c:	33be      	adds	r3, #190	; 0xbe
 800547e:	f993 3000 	ldrsb.w	r3, [r3]
 8005482:	9302      	str	r3, [sp, #8]
 8005484:	9501      	str	r5, [sp, #4]
 8005486:	9400      	str	r4, [sp, #0]
 8005488:	4633      	mov	r3, r6
 800548a:	460a      	mov	r2, r1
 800548c:	494c      	ldr	r1, [pc, #304]	; (80055c0 <cliDump+0x4d8>)
 800548e:	2000      	movs	r0, #0
 8005490:	f00d ff88 	bl	80133a4 <pifLog_Printf>
    for (i = 0; i < MAX_SERVOS; i++)
 8005494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005496:	3301      	adds	r3, #1
 8005498:	637b      	str	r3, [r7, #52]	; 0x34
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549c:	2b07      	cmp	r3, #7
 800549e:	d9c3      	bls.n	8005428 <cliDump+0x340>

    // print enabled features
    mask = featureMask();
 80054a0:	f001 fcba 	bl	8006e18 <featureMask>
 80054a4:	61f8      	str	r0, [r7, #28]
    for (i = 0; ; i++) { // disable all feature first
 80054a6:	2300      	movs	r3, #0
 80054a8:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80054aa:	4a46      	ldr	r2, [pc, #280]	; (80055c4 <cliDump+0x4dc>)
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00c      	beq.n	80054d0 <cliDump+0x3e8>
            break;
        pifLog_Printf(LT_NONE, "feature -%s\r\n", featureNames[i]);
 80054b6:	4a43      	ldr	r2, [pc, #268]	; (80055c4 <cliDump+0x4dc>)
 80054b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054be:	461a      	mov	r2, r3
 80054c0:	4941      	ldr	r1, [pc, #260]	; (80055c8 <cliDump+0x4e0>)
 80054c2:	2000      	movs	r0, #0
 80054c4:	f00d ff6e 	bl	80133a4 <pifLog_Printf>
    for (i = 0; ; i++) { // disable all feature first
 80054c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ca:	3301      	adds	r3, #1
 80054cc:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80054ce:	e7ec      	b.n	80054aa <cliDump+0x3c2>
            break;
 80054d0:	bf00      	nop
    }
    for (i = 0; ; i++) {  // reenable what we want.
 80054d2:	2300      	movs	r3, #0
 80054d4:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80054d6:	4a3b      	ldr	r2, [pc, #236]	; (80055c4 <cliDump+0x4dc>)
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d015      	beq.n	800550e <cliDump+0x426>
            break;
        if (mask & (1 << i))
 80054e2:	2201      	movs	r2, #1
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <cliDump+0x41e>
            pifLog_Printf(LT_NONE, "feature %s\r\n", featureNames[i]);
 80054f4:	4a33      	ldr	r2, [pc, #204]	; (80055c4 <cliDump+0x4dc>)
 80054f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fc:	461a      	mov	r2, r3
 80054fe:	4933      	ldr	r1, [pc, #204]	; (80055cc <cliDump+0x4e4>)
 8005500:	2000      	movs	r0, #0
 8005502:	f00d ff4f 	bl	80133a4 <pifLog_Printf>
    for (i = 0; ; i++) {  // reenable what we want.
 8005506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005508:	3301      	adds	r3, #1
 800550a:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 800550c:	e7e3      	b.n	80054d6 <cliDump+0x3ee>
            break;
 800550e:	bf00      	nop
    }

    // print RC MAPPING
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005510:	2300      	movs	r3, #0
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
 8005514:	e012      	b.n	800553c <cliDump+0x454>
        buf[mcfg.rcmap[i]] = rcChannelLetters[i];
 8005516:	4a2e      	ldr	r2, [pc, #184]	; (80055d0 <cliDump+0x4e8>)
 8005518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551a:	4413      	add	r3, r2
 800551c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	4619      	mov	r1, r3
 8005524:	4a2b      	ldr	r2, [pc, #172]	; (80055d4 <cliDump+0x4ec>)
 8005526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005528:	4413      	add	r3, r2
 800552a:	781a      	ldrb	r2, [r3, #0]
 800552c:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8005530:	443b      	add	r3, r7
 8005532:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	3301      	adds	r3, #1
 800553a:	637b      	str	r3, [r7, #52]	; 0x34
 800553c:	4b24      	ldr	r3, [pc, #144]	; (80055d0 <cliDump+0x4e8>)
 800553e:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005542:	461a      	mov	r2, r3
 8005544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005546:	4293      	cmp	r3, r2
 8005548:	d3e5      	bcc.n	8005516 <cliDump+0x42e>
    buf[i] = '\0';
 800554a:	f107 0208 	add.w	r2, r7, #8
 800554e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005550:	4413      	add	r3, r2
 8005552:	2200      	movs	r2, #0
 8005554:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "map %s\r\n", buf);
 8005556:	f107 0308 	add.w	r3, r7, #8
 800555a:	461a      	mov	r2, r3
 800555c:	491e      	ldr	r1, [pc, #120]	; (80055d8 <cliDump+0x4f0>)
 800555e:	2000      	movs	r0, #0
 8005560:	f00d ff20 	bl	80133a4 <pifLog_Printf>

    // print settings
    for (i = 0; i < VALUE_COUNT; i++) {
 8005564:	2300      	movs	r3, #0
 8005566:	637b      	str	r3, [r7, #52]	; 0x34
 8005568:	e01f      	b.n	80055aa <cliDump+0x4c2>
        setval = &valueTable[i];
 800556a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4a19      	ldr	r2, [pc, #100]	; (80055dc <cliDump+0x4f4>)
 8005576:	4413      	add	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]
        pifLog_Printf(LT_NONE, "set %s = ", valueTable[i].name);
 800557a:	4918      	ldr	r1, [pc, #96]	; (80055dc <cliDump+0x4f4>)
 800557c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	4914      	ldr	r1, [pc, #80]	; (80055e0 <cliDump+0x4f8>)
 800558e:	2000      	movs	r0, #0
 8005590:	f00d ff08 	bl	80133a4 <pifLog_Printf>
        cliPrintVar(setval, 0);
 8005594:	2100      	movs	r1, #0
 8005596:	69b8      	ldr	r0, [r7, #24]
 8005598:	f000 fb4a 	bl	8005c30 <cliPrintVar>
        pifLog_Print(LT_NONE, "\r\n");
 800559c:	4911      	ldr	r1, [pc, #68]	; (80055e4 <cliDump+0x4fc>)
 800559e:	2000      	movs	r0, #0
 80055a0:	f00d fe72 	bl	8013288 <pifLog_Print>
    for (i = 0; i < VALUE_COUNT; i++) {
 80055a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a6:	3301      	adds	r3, #1
 80055a8:	637b      	str	r3, [r7, #52]	; 0x34
 80055aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ac:	2b8e      	cmp	r3, #142	; 0x8e
 80055ae:	d9dc      	bls.n	800556a <cliDump+0x482>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	373c      	adds	r7, #60	; 0x3c
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000e54 	.word	0x20000e54
 80055c0:	08026bc4 	.word	0x08026bc4
 80055c4:	08027a5c 	.word	0x08027a5c
 80055c8:	08026bdc 	.word	0x08026bdc
 80055cc:	08026bec 	.word	0x08026bec
 80055d0:	200008e8 	.word	0x200008e8
 80055d4:	08028754 	.word	0x08028754
 80055d8:	08026bfc 	.word	0x08026bfc
 80055dc:	08027c28 	.word	0x08027c28
 80055e0:	08026c08 	.word	0x08026c08
 80055e4:	0802672c 	.word	0x0802672c

080055e8 <cliExit>:

static int cliExit(int argc, char *argv[])
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
    pifLog_Print(LT_NONE, "\r\nLeaving CLI mode...\r\n");
 80055f2:	490c      	ldr	r1, [pc, #48]	; (8005624 <cliExit+0x3c>)
 80055f4:	2000      	movs	r0, #0
 80055f6:	f00d fe47 	bl	8013288 <pifLog_Print>
    *cliBuffer = '\0';
 80055fa:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <cliExit+0x40>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]
    bufferIndex = 0;
 8005600:	4b0a      	ldr	r3, [pc, #40]	; (800562c <cliExit+0x44>)
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
    cliMode = 0;
 8005606:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <cliExit+0x48>)
 8005608:	2200      	movs	r2, #0
 800560a:	701a      	strb	r2, [r3, #0]
    // incase some idiot leaves a motor running during motortest, clear it here
    mixerResetMotors();
 800560c:	f005 fc8c 	bl	800af28 <mixerResetMotors>
    // save and reboot... I think this makes the most sense
    cliSave(argc, argv);
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 faec 	bl	8005bf0 <cliSave>
	return PIF_LOG_CMD_NO_ERROR;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	08026c14 	.word	0x08026c14
 8005628:	200008b4 	.word	0x200008b4
 800562c:	200008e4 	.word	0x200008e4
 8005630:	200008b0 	.word	0x200008b0

08005634 <cliFeature>:

static int cliFeature(int argc, char *argv[])
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t mask;

    mask = featureMask();
 800563e:	f001 fbeb 	bl	8006e18 <featureMask>
 8005642:	60f8      	str	r0, [r7, #12]

    if (argc == 0) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d127      	bne.n	800569a <cliFeature+0x66>
        pifLog_Print(LT_NONE, "Enabled features: ");
 800564a:	4950      	ldr	r1, [pc, #320]	; (800578c <cliFeature+0x158>)
 800564c:	2000      	movs	r0, #0
 800564e:	f00d fe1b 	bl	8013288 <pifLog_Print>
        for (i = 0; ; i++) {
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 8005656:	4a4e      	ldr	r2, [pc, #312]	; (8005790 <cliFeature+0x15c>)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d015      	beq.n	800568e <cliFeature+0x5a>
                break;
            if (mask & (1 << i))
 8005662:	2201      	movs	r2, #1
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	461a      	mov	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4013      	ands	r3, r2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <cliFeature+0x52>
                pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 8005674:	4a46      	ldr	r2, [pc, #280]	; (8005790 <cliFeature+0x15c>)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800567c:	461a      	mov	r2, r3
 800567e:	4945      	ldr	r1, [pc, #276]	; (8005794 <cliFeature+0x160>)
 8005680:	2000      	movs	r0, #0
 8005682:	f00d fe8f 	bl	80133a4 <pifLog_Printf>
        for (i = 0; ; i++) {
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	3301      	adds	r3, #1
 800568a:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 800568c:	e7e3      	b.n	8005656 <cliFeature+0x22>
                break;
 800568e:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005690:	4941      	ldr	r1, [pc, #260]	; (8005798 <cliFeature+0x164>)
 8005692:	2000      	movs	r0, #0
 8005694:	f00d fdf8 	bl	8013288 <pifLog_Print>
 8005698:	e073      	b.n	8005782 <cliFeature+0x14e>
    } else if (strcasecmp(argv[0], "list") == 0) {
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	493f      	ldr	r1, [pc, #252]	; (800579c <cliFeature+0x168>)
 80056a0:	4618      	mov	r0, r3
 80056a2:	f01d fb07 	bl	8022cb4 <strcasecmp>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d11e      	bne.n	80056ea <cliFeature+0xb6>
        pifLog_Print(LT_NONE, "Available features: ");
 80056ac:	493c      	ldr	r1, [pc, #240]	; (80057a0 <cliFeature+0x16c>)
 80056ae:	2000      	movs	r0, #0
 80056b0:	f00d fdea 	bl	8013288 <pifLog_Print>
        for (i = 0; ; i++) {
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80056b8:	4a35      	ldr	r2, [pc, #212]	; (8005790 <cliFeature+0x15c>)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00c      	beq.n	80056de <cliFeature+0xaa>
                break;
            pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 80056c4:	4a32      	ldr	r2, [pc, #200]	; (8005790 <cliFeature+0x15c>)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056cc:	461a      	mov	r2, r3
 80056ce:	4931      	ldr	r1, [pc, #196]	; (8005794 <cliFeature+0x160>)
 80056d0:	2000      	movs	r0, #0
 80056d2:	f00d fe67 	bl	80133a4 <pifLog_Printf>
        for (i = 0; ; i++) {
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	3301      	adds	r3, #1
 80056da:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80056dc:	e7ec      	b.n	80056b8 <cliFeature+0x84>
                break;
 80056de:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 80056e0:	492d      	ldr	r1, [pc, #180]	; (8005798 <cliFeature+0x164>)
 80056e2:	2000      	movs	r0, #0
 80056e4:	f00d fdd0 	bl	8013288 <pifLog_Print>
 80056e8:	e04b      	b.n	8005782 <cliFeature+0x14e>
    } else {
        bool remove = false;
 80056ea:	2300      	movs	r3, #0
 80056ec:	74fb      	strb	r3, [r7, #19]
        if (argv[0][0] == '-') {
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b2d      	cmp	r3, #45	; 0x2d
 80056f6:	d101      	bne.n	80056fc <cliFeature+0xc8>
            // remove feature
            remove = true;
 80056f8:	2301      	movs	r3, #1
 80056fa:	74fb      	strb	r3, [r7, #19]
        }

        for (i = 0; ; i++) {
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 8005700:	4a23      	ldr	r2, [pc, #140]	; (8005790 <cliFeature+0x15c>)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <cliFeature+0xe2>
                pifLog_Print(LT_NONE, "Invalid feature name...\r\n");
 800570c:	4925      	ldr	r1, [pc, #148]	; (80057a4 <cliFeature+0x170>)
 800570e:	2000      	movs	r0, #0
 8005710:	f00d fdba 	bl	8013288 <pifLog_Print>
                break;
 8005714:	e035      	b.n	8005782 <cliFeature+0x14e>
            }
            if (strcasecmp(argv[0] + 1, featureNames[i]) == 0) {
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	491c      	ldr	r1, [pc, #112]	; (8005790 <cliFeature+0x15c>)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f01d fac4 	bl	8022cb4 <strcasecmp>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d123      	bne.n	800577a <cliFeature+0x146>
                if (remove) {
 8005732:	7cfb      	ldrb	r3, [r7, #19]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00b      	beq.n	8005750 <cliFeature+0x11c>
                    featureClear(1 << i);
 8005738:	2201      	movs	r2, #1
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	4618      	mov	r0, r3
 8005742:	f001 fb49 	bl	8006dd8 <featureClear>
                    pifLog_Print(LT_NONE, "Disabled ");
 8005746:	4918      	ldr	r1, [pc, #96]	; (80057a8 <cliFeature+0x174>)
 8005748:	2000      	movs	r0, #0
 800574a:	f00d fd9d 	bl	8013288 <pifLog_Print>
 800574e:	e00a      	b.n	8005766 <cliFeature+0x132>
                } else {
                    featureSet(1 << i);
 8005750:	2201      	movs	r2, #1
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	4618      	mov	r0, r3
 800575a:	f001 fb2b 	bl	8006db4 <featureSet>
                    pifLog_Print(LT_NONE, "Enabled ");
 800575e:	4913      	ldr	r1, [pc, #76]	; (80057ac <cliFeature+0x178>)
 8005760:	2000      	movs	r0, #0
 8005762:	f00d fd91 	bl	8013288 <pifLog_Print>
                }
                pifLog_Printf(LT_NONE, "%s\r\n", featureNames[i]);
 8005766:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <cliFeature+0x15c>)
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800576e:	461a      	mov	r2, r3
 8005770:	490f      	ldr	r1, [pc, #60]	; (80057b0 <cliFeature+0x17c>)
 8005772:	2000      	movs	r0, #0
 8005774:	f00d fe16 	bl	80133a4 <pifLog_Printf>
                break;
 8005778:	e003      	b.n	8005782 <cliFeature+0x14e>
        for (i = 0; ; i++) {
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	3301      	adds	r3, #1
 800577e:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 8005780:	e7be      	b.n	8005700 <cliFeature+0xcc>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	08026c2c 	.word	0x08026c2c
 8005790:	08027a5c 	.word	0x08027a5c
 8005794:	08026c40 	.word	0x08026c40
 8005798:	0802672c 	.word	0x0802672c
 800579c:	08026c44 	.word	0x08026c44
 80057a0:	08026c4c 	.word	0x08026c4c
 80057a4:	08026c64 	.word	0x08026c64
 80057a8:	08026c80 	.word	0x08026c80
 80057ac:	08026c8c 	.word	0x08026c8c
 80057b0:	0802670c 	.word	0x0802670c

080057b4 <cliGpsPassthrough>:

#ifdef GPS
static int cliGpsPassthrough(int argc, char *argv[])
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;

    switch (gpsSetPassthrough()) {
 80057be:	f003 fafd 	bl	8008dbc <gpsSetPassthrough>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <cliGpsPassthrough+0x1a>
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d005      	beq.n	80057d8 <cliGpsPassthrough+0x24>
 80057cc:	e009      	b.n	80057e2 <cliGpsPassthrough+0x2e>
    case 0:
        pifLog_Print(LT_NONE, "Disabling GPS passthrough...\r\n");
 80057ce:	490a      	ldr	r1, [pc, #40]	; (80057f8 <cliGpsPassthrough+0x44>)
 80057d0:	2000      	movs	r0, #0
 80057d2:	f00d fd59 	bl	8013288 <pifLog_Print>
        break;
 80057d6:	e009      	b.n	80057ec <cliGpsPassthrough+0x38>

    case 1:
        pifLog_Print(LT_NONE, "Enabling GPS passthrough...\r\n");
 80057d8:	4908      	ldr	r1, [pc, #32]	; (80057fc <cliGpsPassthrough+0x48>)
 80057da:	2000      	movs	r0, #0
 80057dc:	f00d fd54 	bl	8013288 <pifLog_Print>
        break;
 80057e0:	e004      	b.n	80057ec <cliGpsPassthrough+0x38>

    default:
        pifLog_Print(LT_NONE, "Error: Enable and plug in GPS first\r\n");
 80057e2:	4907      	ldr	r1, [pc, #28]	; (8005800 <cliGpsPassthrough+0x4c>)
 80057e4:	2000      	movs	r0, #0
 80057e6:	f00d fd4f 	bl	8013288 <pifLog_Print>
        break;
 80057ea:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	08026c98 	.word	0x08026c98
 80057fc:	08026cb8 	.word	0x08026cb8
 8005800:	08026cd8 	.word	0x08026cd8

08005804 <cliMap>:
#endif

static int cliMap(int argc, char *argv[])
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
    uint32_t len;
    uint32_t i;
    char out[9];

    if (argc < 1) return PIF_LOG_CMD_TOO_FEW_ARGS;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	dc02      	bgt.n	800581a <cliMap+0x16>
 8005814:	f06f 0302 	mvn.w	r3, #2
 8005818:	e096      	b.n	8005948 <cliMap+0x144>

    len = strlen(argv[0]);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f7fa fcda 	bl	80001d8 <strlen>
 8005824:	61b8      	str	r0, [r7, #24]

    if (len == mcfg.rc_channel_count) {
 8005826:	4b4a      	ldr	r3, [pc, #296]	; (8005950 <cliMap+0x14c>)
 8005828:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800582c:	461a      	mov	r2, r3
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	4293      	cmp	r3, r2
 8005832:	d15a      	bne.n	80058ea <cliMap+0xe6>
        // uppercase it
        for (i = 0; i < mcfg.rc_channel_count; i++)
 8005834:	2300      	movs	r3, #0
 8005836:	61fb      	str	r3, [r7, #28]
 8005838:	e01b      	b.n	8005872 <cliMap+0x6e>
            argv[0][i] = toupper((unsigned char)argv[0][i]);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	75fb      	strb	r3, [r7, #23]
 8005846:	7dfb      	ldrb	r3, [r7, #23]
 8005848:	3301      	adds	r3, #1
 800584a:	4a42      	ldr	r2, [pc, #264]	; (8005954 <cliMap+0x150>)
 800584c:	4413      	add	r3, r2
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d102      	bne.n	800585e <cliMap+0x5a>
 8005858:	7dfb      	ldrb	r3, [r7, #23]
 800585a:	3b20      	subs	r3, #32
 800585c:	e000      	b.n	8005860 <cliMap+0x5c>
 800585e:	7dfb      	ldrb	r3, [r7, #23]
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	6811      	ldr	r1, [r2, #0]
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	440a      	add	r2, r1
 8005868:	b2db      	uxtb	r3, r3
 800586a:	7013      	strb	r3, [r2, #0]
        for (i = 0; i < mcfg.rc_channel_count; i++)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	3301      	adds	r3, #1
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	4b37      	ldr	r3, [pc, #220]	; (8005950 <cliMap+0x14c>)
 8005874:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005878:	461a      	mov	r2, r3
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4293      	cmp	r3, r2
 800587e:	d3dc      	bcc.n	800583a <cliMap+0x36>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005880:	2300      	movs	r3, #0
 8005882:	61fb      	str	r3, [r7, #28]
 8005884:	e025      	b.n	80058d2 <cliMap+0xce>
            if (strchr(rcChannelLetters, argv[0][i]) && !strchr(argv[0] + i + 1, argv[0][i]))
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4413      	add	r3, r2
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	4619      	mov	r1, r3
 8005892:	4831      	ldr	r0, [pc, #196]	; (8005958 <cliMap+0x154>)
 8005894:	f01d fa37 	bl	8022d06 <strchr>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d013      	beq.n	80058c6 <cliMap+0xc2>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	3301      	adds	r3, #1
 80058a6:	18d0      	adds	r0, r2, r3
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	4619      	mov	r1, r3
 80058b4:	f01d fa27 	bl	8022d06 <strchr>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d103      	bne.n	80058c6 <cliMap+0xc2>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	3301      	adds	r3, #1
 80058c2:	61fb      	str	r3, [r7, #28]
 80058c4:	e005      	b.n	80058d2 <cliMap+0xce>
                continue;
            pifLog_Print(LT_NONE, "Must be any order of AETR1234\r\n");
 80058c6:	4925      	ldr	r1, [pc, #148]	; (800595c <cliMap+0x158>)
 80058c8:	2000      	movs	r0, #0
 80058ca:	f00d fcdd 	bl	8013288 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 80058ce:	2300      	movs	r3, #0
 80058d0:	e03a      	b.n	8005948 <cliMap+0x144>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 80058d2:	4b1f      	ldr	r3, [pc, #124]	; (8005950 <cliMap+0x14c>)
 80058d4:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 80058d8:	461a      	mov	r2, r3
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	4293      	cmp	r3, r2
 80058de:	d3d2      	bcc.n	8005886 <cliMap+0x82>
        }
        parseRcChannels(argv[0]);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fcc3 	bl	8006270 <parseRcChannels>
    }
    pifLog_Print(LT_NONE, "Current assignment: ");
 80058ea:	491d      	ldr	r1, [pc, #116]	; (8005960 <cliMap+0x15c>)
 80058ec:	2000      	movs	r0, #0
 80058ee:	f00d fccb 	bl	8013288 <pifLog_Print>
    for (i = 0; i < mcfg.rc_channel_count; i++)
 80058f2:	2300      	movs	r3, #0
 80058f4:	61fb      	str	r3, [r7, #28]
 80058f6:	e012      	b.n	800591e <cliMap+0x11a>
        out[mcfg.rcmap[i]] = rcChannelLetters[i];
 80058f8:	4a15      	ldr	r2, [pc, #84]	; (8005950 <cliMap+0x14c>)
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	4619      	mov	r1, r3
 8005906:	4a14      	ldr	r2, [pc, #80]	; (8005958 <cliMap+0x154>)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	4413      	add	r3, r2
 800590c:	781a      	ldrb	r2, [r3, #0]
 800590e:	f101 0320 	add.w	r3, r1, #32
 8005912:	443b      	add	r3, r7
 8005914:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	3301      	adds	r3, #1
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <cliMap+0x14c>)
 8005920:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005924:	461a      	mov	r2, r3
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	4293      	cmp	r3, r2
 800592a:	d3e5      	bcc.n	80058f8 <cliMap+0xf4>
    out[i] = '\0';
 800592c:	f107 020c 	add.w	r2, r7, #12
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	4413      	add	r3, r2
 8005934:	2200      	movs	r2, #0
 8005936:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "%s\r\n", out);
 8005938:	f107 030c 	add.w	r3, r7, #12
 800593c:	461a      	mov	r2, r3
 800593e:	4909      	ldr	r1, [pc, #36]	; (8005964 <cliMap+0x160>)
 8005940:	2000      	movs	r0, #0
 8005942:	f00d fd2f 	bl	80133a4 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	200008e8 	.word	0x200008e8
 8005954:	080290c4 	.word	0x080290c4
 8005958:	08028754 	.word	0x08028754
 800595c:	08026d00 	.word	0x08026d00
 8005960:	08026d20 	.word	0x08026d20
 8005964:	0802670c 	.word	0x0802670c

08005968 <cliMixer>:

static int cliMixer(int argc, char *argv[])
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 0) {
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10c      	bne.n	8005992 <cliMixer+0x2a>
        pifLog_Printf(LT_NONE, "Current mixer: %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005978:	4b46      	ldr	r3, [pc, #280]	; (8005a94 <cliMixer+0x12c>)
 800597a:	795b      	ldrb	r3, [r3, #5]
 800597c:	3b01      	subs	r3, #1
 800597e:	4a46      	ldr	r2, [pc, #280]	; (8005a98 <cliMixer+0x130>)
 8005980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005984:	461a      	mov	r2, r3
 8005986:	4945      	ldr	r1, [pc, #276]	; (8005a9c <cliMixer+0x134>)
 8005988:	2000      	movs	r0, #0
 800598a:	f00d fd0b 	bl	80133a4 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 800598e:	2300      	movs	r3, #0
 8005990:	e07b      	b.n	8005a8a <cliMixer+0x122>
    } else if (strcasecmp(argv[0], "list") == 0) {
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4942      	ldr	r1, [pc, #264]	; (8005aa0 <cliMixer+0x138>)
 8005998:	4618      	mov	r0, r3
 800599a:	f01d f98b 	bl	8022cb4 <strcasecmp>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d11f      	bne.n	80059e4 <cliMixer+0x7c>
        pifLog_Print(LT_NONE, "Available mixers: ");
 80059a4:	493f      	ldr	r1, [pc, #252]	; (8005aa4 <cliMixer+0x13c>)
 80059a6:	2000      	movs	r0, #0
 80059a8:	f00d fc6e 	bl	8013288 <pifLog_Print>
        for (i = 0; ; i++) {
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 80059b0:	4a39      	ldr	r2, [pc, #228]	; (8005a98 <cliMixer+0x130>)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00c      	beq.n	80059d6 <cliMixer+0x6e>
                break;
            pifLog_Printf(LT_NONE, "%s ", mixerNames[i]);
 80059bc:	4a36      	ldr	r2, [pc, #216]	; (8005a98 <cliMixer+0x130>)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c4:	461a      	mov	r2, r3
 80059c6:	4938      	ldr	r1, [pc, #224]	; (8005aa8 <cliMixer+0x140>)
 80059c8:	2000      	movs	r0, #0
 80059ca:	f00d fceb 	bl	80133a4 <pifLog_Printf>
        for (i = 0; ; i++) {
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3301      	adds	r3, #1
 80059d2:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 80059d4:	e7ec      	b.n	80059b0 <cliMixer+0x48>
                break;
 80059d6:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 80059d8:	4934      	ldr	r1, [pc, #208]	; (8005aac <cliMixer+0x144>)
 80059da:	2000      	movs	r0, #0
 80059dc:	f00d fc54 	bl	8013288 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 80059e0:	2300      	movs	r3, #0
 80059e2:	e052      	b.n	8005a8a <cliMixer+0x122>
    }

    for (i = 0; ; i++) {
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 80059e8:	4a2b      	ldr	r2, [pc, #172]	; (8005a98 <cliMixer+0x130>)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d105      	bne.n	8005a00 <cliMixer+0x98>
            pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 80059f4:	492e      	ldr	r1, [pc, #184]	; (8005ab0 <cliMixer+0x148>)
 80059f6:	2000      	movs	r0, #0
 80059f8:	f00d fc46 	bl	8013288 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 80059fc:	2300      	movs	r3, #0
 80059fe:	e044      	b.n	8005a8a <cliMixer+0x122>
        }
        if (strcasecmp(argv[0], mixerNames[i]) == 0) {
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4924      	ldr	r1, [pc, #144]	; (8005a98 <cliMixer+0x130>)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	f01d f950 	bl	8022cb4 <strcasecmp>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d131      	bne.n	8005a7e <cliMixer+0x116>
            mcfg.mixerConfiguration = i + 1;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	3301      	adds	r3, #1
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <cliMixer+0x12c>)
 8005a24:	715a      	strb	r2, [r3, #5]
            pifLog_Printf(LT_NONE, "Mixer set to %s\r\n", mixerNames[i]);
 8005a26:	4a1c      	ldr	r2, [pc, #112]	; (8005a98 <cliMixer+0x130>)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4920      	ldr	r1, [pc, #128]	; (8005ab4 <cliMixer+0x14c>)
 8005a32:	2000      	movs	r0, #0
 8005a34:	f00d fcb6 	bl	80133a4 <pifLog_Printf>

            // Presets for planes. Not functional with current reset
            // Really Ugly Hack
            if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE) {
 8005a38:	4b16      	ldr	r3, [pc, #88]	; (8005a94 <cliMixer+0x12c>)
 8005a3a:	795b      	ldrb	r3, [r3, #5]
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d003      	beq.n	8005a48 <cliMixer+0xe0>
 8005a40:	4b14      	ldr	r3, [pc, #80]	; (8005a94 <cliMixer+0x12c>)
 8005a42:	795b      	ldrb	r3, [r3, #5]
 8005a44:	2b0e      	cmp	r3, #14
 8005a46:	d11e      	bne.n	8005a86 <cliMixer+0x11e>
                cfg.dynThrPID = 90;
 8005a48:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <cliMixer+0x150>)
 8005a4a:	225a      	movs	r2, #90	; 0x5a
 8005a4c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                cfg.rcExpo8 = 0;
 8005a50:	4b19      	ldr	r3, [pc, #100]	; (8005ab8 <cliMixer+0x150>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2020 	strb.w	r2, [r3, #32]
                cfg.P8[PIDALT] = 30;
 8005a58:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <cliMixer+0x150>)
 8005a5a:	221e      	movs	r2, #30
 8005a5c:	711a      	strb	r2, [r3, #4]
                cfg.I8[PIDALT] = 20;
 8005a5e:	4b16      	ldr	r3, [pc, #88]	; (8005ab8 <cliMixer+0x150>)
 8005a60:	2214      	movs	r2, #20
 8005a62:	739a      	strb	r2, [r3, #14]
                cfg.D8[PIDALT] = 45;
 8005a64:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <cliMixer+0x150>)
 8005a66:	222d      	movs	r2, #45	; 0x2d
 8005a68:	761a      	strb	r2, [r3, #24]
                cfg.P8[PIDNAVR] = 30;
 8005a6a:	4b13      	ldr	r3, [pc, #76]	; (8005ab8 <cliMixer+0x150>)
 8005a6c:	221e      	movs	r2, #30
 8005a6e:	71da      	strb	r2, [r3, #7]
                cfg.I8[PIDNAVR] = 20;
 8005a70:	4b11      	ldr	r3, [pc, #68]	; (8005ab8 <cliMixer+0x150>)
 8005a72:	2214      	movs	r2, #20
 8005a74:	745a      	strb	r2, [r3, #17]
                cfg.D8[PIDNAVR] = 45;
 8005a76:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <cliMixer+0x150>)
 8005a78:	222d      	movs	r2, #45	; 0x2d
 8005a7a:	76da      	strb	r2, [r3, #27]
            }
            break;
 8005a7c:	e003      	b.n	8005a86 <cliMixer+0x11e>
    for (i = 0; ; i++) {
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3301      	adds	r3, #1
 8005a82:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005a84:	e7b0      	b.n	80059e8 <cliMixer+0x80>
            break;
 8005a86:	bf00      	nop
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	200008e8 	.word	0x200008e8
 8005a98:	080279f8 	.word	0x080279f8
 8005a9c:	08026d38 	.word	0x08026d38
 8005aa0:	08026c44 	.word	0x08026c44
 8005aa4:	08026d4c 	.word	0x08026d4c
 8005aa8:	08026c40 	.word	0x08026c40
 8005aac:	0802672c 	.word	0x0802672c
 8005ab0:	08026740 	.word	0x08026740
 8005ab4:	08026d60 	.word	0x08026d60
 8005ab8:	20000e54 	.word	0x20000e54

08005abc <cliMotor>:

static int cliMotor(int argc, char *argv[])
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
    int motor_index = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
    int motor_value = 0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60bb      	str	r3, [r7, #8]

    if (argc == 0) {
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d105      	bne.n	8005ae0 <cliMotor+0x24>
        pifLog_Print(LT_NONE, "Usage:\r\nmotor index [value] - show [or set] motor value\r\n");
 8005ad4:	4926      	ldr	r1, [pc, #152]	; (8005b70 <cliMotor+0xb4>)
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	f00d fbd6 	bl	8013288 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005adc:	2300      	movs	r3, #0
 8005ade:	e042      	b.n	8005b66 <cliMotor+0xaa>
    }

    if (argc < 2) {
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	dc0a      	bgt.n	8005afc <cliMotor+0x40>
        pifLog_Printf(LT_NONE, "Motor %d is set at %d\r\n", motor_index, motor_disarmed[motor_index]);
 8005ae6:	4a23      	ldr	r2, [pc, #140]	; (8005b74 <cliMotor+0xb8>)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4921      	ldr	r1, [pc, #132]	; (8005b78 <cliMotor+0xbc>)
 8005af2:	2000      	movs	r0, #0
 8005af4:	f00d fc56 	bl	80133a4 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005af8:	2300      	movs	r3, #0
 8005afa:	e034      	b.n	8005b66 <cliMotor+0xaa>
    }

    motor_index = atoi(argv[0]);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f01c ff75 	bl	80229f0 <atoi>
 8005b06:	60f8      	str	r0, [r7, #12]
    motor_value = atoi(argv[1]);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f01c ff6e 	bl	80229f0 <atoi>
 8005b14:	60b8      	str	r0, [r7, #8]

    if (motor_index < 0 || motor_index >= MAX_MOTORS) {
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	db02      	blt.n	8005b22 <cliMotor+0x66>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b0b      	cmp	r3, #11
 8005b20:	dd06      	ble.n	8005b30 <cliMotor+0x74>
        pifLog_Printf(LT_NONE, "No such motor, use a number [0, %d]\r\n", MAX_MOTORS);
 8005b22:	220c      	movs	r2, #12
 8005b24:	4915      	ldr	r1, [pc, #84]	; (8005b7c <cliMotor+0xc0>)
 8005b26:	2000      	movs	r0, #0
 8005b28:	f00d fc3c 	bl	80133a4 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e01a      	b.n	8005b66 <cliMotor+0xaa>
    }

    if (motor_value < 1000 || motor_value > 2000) {
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b36:	db03      	blt.n	8005b40 <cliMotor+0x84>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005b3e:	dd05      	ble.n	8005b4c <cliMotor+0x90>
        pifLog_Print(LT_NONE, "Invalid motor value, 1000..2000\r\n");
 8005b40:	490f      	ldr	r1, [pc, #60]	; (8005b80 <cliMotor+0xc4>)
 8005b42:	2000      	movs	r0, #0
 8005b44:	f00d fba0 	bl	8013288 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e00c      	b.n	8005b66 <cliMotor+0xaa>
    }

    pifLog_Printf(LT_NONE, "Setting motor %d to %d\r\n", motor_index, motor_value);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	490c      	ldr	r1, [pc, #48]	; (8005b84 <cliMotor+0xc8>)
 8005b52:	2000      	movs	r0, #0
 8005b54:	f00d fc26 	bl	80133a4 <pifLog_Printf>
    motor_disarmed[motor_index] = motor_value;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	b219      	sxth	r1, r3
 8005b5c:	4a05      	ldr	r2, [pc, #20]	; (8005b74 <cliMotor+0xb8>)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	return PIF_LOG_CMD_NO_ERROR;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	08026d74 	.word	0x08026d74
 8005b74:	20001574 	.word	0x20001574
 8005b78:	08026db0 	.word	0x08026db0
 8005b7c:	08026dc8 	.word	0x08026dc8
 8005b80:	08026df0 	.word	0x08026df0
 8005b84:	08026e14 	.word	0x08026e14

08005b88 <cliProfile>:

static int cliProfile(int argc, char *argv[])
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 0) {
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d108      	bne.n	8005baa <cliProfile+0x22>
        pifLog_Printf(LT_NONE, "Current profile: %d\r\n", mcfg.current_profile);
 8005b98:	4b13      	ldr	r3, [pc, #76]	; (8005be8 <cliProfile+0x60>)
 8005b9a:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	4912      	ldr	r1, [pc, #72]	; (8005bec <cliProfile+0x64>)
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	f00d fbfe 	bl	80133a4 <pifLog_Printf>
 8005ba8:	e018      	b.n	8005bdc <cliProfile+0x54>
    } else {
        i = atoi(argv[0]);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f01c ff1e 	bl	80229f0 <atoi>
 8005bb4:	60f8      	str	r0, [r7, #12]
        if (i >= 0 && i <= 2) {
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	db0f      	blt.n	8005bdc <cliProfile+0x54>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	dc0c      	bgt.n	8005bdc <cliProfile+0x54>
            mcfg.current_profile = i;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <cliProfile+0x60>)
 8005bc8:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            writeEEPROM(0, false);
 8005bcc:	2100      	movs	r1, #0
 8005bce:	2000      	movs	r0, #0
 8005bd0:	f000 fcf8 	bl	80065c4 <writeEEPROM>
            cliProfile(1, NULL);
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	f7ff ffd6 	bl	8005b88 <cliProfile>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	200008e8 	.word	0x200008e8
 8005bec:	08026e30 	.word	0x08026e30

08005bf0 <cliSave>:

static int cliSave(int argc, char *argv[])
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Saving...");
 8005bfa:	490b      	ldr	r1, [pc, #44]	; (8005c28 <cliSave+0x38>)
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	f00d fb43 	bl	8013288 <pifLog_Print>
    writeEEPROM(0, true);
 8005c02:	2101      	movs	r1, #1
 8005c04:	2000      	movs	r0, #0
 8005c06:	f000 fcdd 	bl	80065c4 <writeEEPROM>
    pifLog_Print(LT_NONE, "\r\nRebooting...");
 8005c0a:	4908      	ldr	r1, [pc, #32]	; (8005c2c <cliSave+0x3c>)
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	f00d fb3b 	bl	8013288 <pifLog_Print>
    pif_Delay1ms(10);
 8005c12:	200a      	movs	r0, #10
 8005c14:	f00b fa1c 	bl	8011050 <pif_Delay1ms>
    systemReset(false);
 8005c18:	2000      	movs	r0, #0
 8005c1a:	f7fc f853 	bl	8001cc4 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	08026e48 	.word	0x08026e48
 8005c2c:	08026e54 	.word	0x08026e54

08005c30 <cliPrintVar>:

static void cliPrintVar(const clivalue_t *var, uint32_t full)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
    int32_t value = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
    char buf[8];

    switch (var->type) {
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	791b      	ldrb	r3, [r3, #4]
 8005c42:	2b05      	cmp	r3, #5
 8005c44:	d864      	bhi.n	8005d10 <cliPrintVar+0xe0>
 8005c46:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <cliPrintVar+0x1c>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005c65 	.word	0x08005c65
 8005c50:	08005c6f 	.word	0x08005c6f
 8005c54:	08005c7b 	.word	0x08005c7b
 8005c58:	08005c85 	.word	0x08005c85
 8005c5c:	08005c91 	.word	0x08005c91
 8005c60:	08005c9b 	.word	0x08005c9b
        case VAR_UINT8:
            value = *(uint8_t *)var->ptr;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	617b      	str	r3, [r7, #20]
            break;
 8005c6c:	e050      	b.n	8005d10 <cliPrintVar+0xe0>

        case VAR_INT8:
            value = *(int8_t *)var->ptr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f993 3000 	ldrsb.w	r3, [r3]
 8005c76:	617b      	str	r3, [r7, #20]
            break;
 8005c78:	e04a      	b.n	8005d10 <cliPrintVar+0xe0>

        case VAR_UINT16:
            value = *(uint16_t *)var->ptr;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	617b      	str	r3, [r7, #20]
            break;
 8005c82:	e045      	b.n	8005d10 <cliPrintVar+0xe0>

        case VAR_INT16:
            value = *(int16_t *)var->ptr;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c8c:	617b      	str	r3, [r7, #20]
            break;
 8005c8e:	e03f      	b.n	8005d10 <cliPrintVar+0xe0>

        case VAR_UINT32:
            value = *(uint32_t *)var->ptr;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	617b      	str	r3, [r7, #20]
            break;
 8005c98:	e03a      	b.n	8005d10 <cliPrintVar+0xe0>

        case VAR_FLOAT:
            pifLog_Printf(LT_NONE, "%s", ftoa(*(float *)var->ptr, buf));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	edd3 7a00 	vldr	s15, [r3]
 8005ca2:	f107 030c 	add.w	r3, r7, #12
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8005cac:	f7fe fae2 	bl	8004274 <ftoa>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	4921      	ldr	r1, [pc, #132]	; (8005d3c <cliPrintVar+0x10c>)
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	f00d fb74 	bl	80133a4 <pifLog_Printf>
            if (full) {
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d037      	beq.n	8005d32 <cliPrintVar+0x102>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->min, buf));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cce:	f107 030c 	add.w	r3, r7, #12
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8005cd8:	f7fe facc 	bl	8004274 <ftoa>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	461a      	mov	r2, r3
 8005ce0:	4917      	ldr	r1, [pc, #92]	; (8005d40 <cliPrintVar+0x110>)
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	f00d fb5e 	bl	80133a4 <pifLog_Printf>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->max, buf));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	ee07 3a90 	vmov	s15, r3
 8005cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cf4:	f107 030c 	add.w	r3, r7, #12
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8005cfe:	f7fe fab9 	bl	8004274 <ftoa>
 8005d02:	4603      	mov	r3, r0
 8005d04:	461a      	mov	r2, r3
 8005d06:	490e      	ldr	r1, [pc, #56]	; (8005d40 <cliPrintVar+0x110>)
 8005d08:	2000      	movs	r0, #0
 8005d0a:	f00d fb4b 	bl	80133a4 <pifLog_Printf>
 8005d0e:	e011      	b.n	8005d34 <cliPrintVar+0x104>
            }
            return; // return from case for float only
    }
    pifLog_Printf(LT_NONE, "%d", value);
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	490c      	ldr	r1, [pc, #48]	; (8005d44 <cliPrintVar+0x114>)
 8005d14:	2000      	movs	r0, #0
 8005d16:	f00d fb45 	bl	80133a4 <pifLog_Printf>
    if (full)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d009      	beq.n	8005d34 <cliPrintVar+0x104>
        pifLog_Printf(LT_NONE, " %d %d", var->min, var->max);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	4907      	ldr	r1, [pc, #28]	; (8005d48 <cliPrintVar+0x118>)
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	f00d fb3a 	bl	80133a4 <pifLog_Printf>
 8005d30:	e000      	b.n	8005d34 <cliPrintVar+0x104>
            return; // return from case for float only
 8005d32:	bf00      	nop
}
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	08026b6c 	.word	0x08026b6c
 8005d40:	08026e64 	.word	0x08026e64
 8005d44:	08026a18 	.word	0x08026a18
 8005d48:	08026e68 	.word	0x08026e68

08005d4c <cliSetVar>:

static void cliSetVar(const clivalue_t *var, const int_float_value_t value)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
    switch (var->type) {
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	791b      	ldrb	r3, [r3, #4]
 8005d5a:	2b05      	cmp	r3, #5
 8005d5c:	d824      	bhi.n	8005da8 <cliSetVar+0x5c>
 8005d5e:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <cliSetVar+0x18>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005d7d 	.word	0x08005d7d
 8005d68:	08005d7d 	.word	0x08005d7d
 8005d6c:	08005d89 	.word	0x08005d89
 8005d70:	08005d89 	.word	0x08005d89
 8005d74:	08005d95 	.word	0x08005d95
 8005d78:	08005d9f 	.word	0x08005d9f
        case VAR_UINT8:
        case VAR_INT8:
            *(char *)var->ptr = (char)value.int_value;
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]
            break;
 8005d86:	e00f      	b.n	8005da8 <cliSetVar+0x5c>

        case VAR_UINT16:
        case VAR_INT16:
            *(short *)var->ptr = (short)value.int_value;
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	b212      	sxth	r2, r2
 8005d90:	801a      	strh	r2, [r3, #0]
            break;
 8005d92:	e009      	b.n	8005da8 <cliSetVar+0x5c>

        case VAR_UINT32:
            *(int *)var->ptr = (int)value.int_value;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	601a      	str	r2, [r3, #0]
            break;
 8005d9c:	e004      	b.n	8005da8 <cliSetVar+0x5c>

        case VAR_FLOAT:
            *(float *)var->ptr = (float)value.float_value;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	601a      	str	r2, [r3, #0]
            break;
 8005da6:	bf00      	nop
    }
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <cliSet>:

static int cliSet(int argc, char *argv[])
{
 8005db4:	b5b0      	push	{r4, r5, r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
    uint32_t i;
    const clivalue_t *val;
    char *eqptr = NULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61bb      	str	r3, [r7, #24]
    int32_t value = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
    float valuef = 0;
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	613b      	str	r3, [r7, #16]

    if (argc == 0 || (argc == 1 && argv[0][0] == '*')) {
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d007      	beq.n	8005de2 <cliSet+0x2e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d135      	bne.n	8005e44 <cliSet+0x90>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b2a      	cmp	r3, #42	; 0x2a
 8005de0:	d130      	bne.n	8005e44 <cliSet+0x90>
        pifLog_Print(LT_NONE, "Current settings: \r\n");
 8005de2:	4987      	ldr	r1, [pc, #540]	; (8006000 <cliSet+0x24c>)
 8005de4:	2000      	movs	r0, #0
 8005de6:	f00d fa4f 	bl	8013288 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8005dea:	2300      	movs	r3, #0
 8005dec:	61fb      	str	r3, [r7, #28]
 8005dee:	e025      	b.n	8005e3c <cliSet+0x88>
            val = &valueTable[i];
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4a82      	ldr	r2, [pc, #520]	; (8006004 <cliSet+0x250>)
 8005dfc:	4413      	add	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
            pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 8005e00:	4980      	ldr	r1, [pc, #512]	; (8006004 <cliSet+0x250>)
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	497d      	ldr	r1, [pc, #500]	; (8006008 <cliSet+0x254>)
 8005e14:	2000      	movs	r0, #0
 8005e16:	f00d fac5 	bl	80133a4 <pifLog_Printf>
            cliPrintVar(val, strlen(argv[0])); // when len is 1 (when * is passed as argument), it will print min/max values as well, for gui
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fa f9da 	bl	80001d8 <strlen>
 8005e24:	4603      	mov	r3, r0
 8005e26:	4619      	mov	r1, r3
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f7ff ff01 	bl	8005c30 <cliPrintVar>
            pifLog_Print(LT_NONE, "\r\n");
 8005e2e:	4977      	ldr	r1, [pc, #476]	; (800600c <cliSet+0x258>)
 8005e30:	2000      	movs	r0, #0
 8005e32:	f00d fa29 	bl	8013288 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	61fb      	str	r3, [r7, #28]
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	2b8e      	cmp	r3, #142	; 0x8e
 8005e40:	d9d6      	bls.n	8005df0 <cliSet+0x3c>
    if (argc == 0 || (argc == 1 && argv[0][0] == '*')) {
 8005e42:	e0d7      	b.n	8005ff4 <cliSet+0x240>
        }
    } else if ((eqptr = strstr(argv[0], "=")) != NULL) {
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	213d      	movs	r1, #61	; 0x3d
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f01c ff5b 	bl	8022d06 <strchr>
 8005e50:	61b8      	str	r0, [r7, #24]
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8096 	beq.w	8005f86 <cliSet+0x1d2>
        // has equal, set var
        eqptr++;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	61bb      	str	r3, [r7, #24]
        value = atoi(eqptr);
 8005e60:	69b8      	ldr	r0, [r7, #24]
 8005e62:	f01c fdc5 	bl	80229f0 <atoi>
 8005e66:	6178      	str	r0, [r7, #20]
        valuef = _atof(eqptr);
 8005e68:	69b8      	ldr	r0, [r7, #24]
 8005e6a:	f7fe f90f 	bl	800408c <_atof>
 8005e6e:	ed87 0a04 	vstr	s0, [r7, #16]
        for (i = 0; i < VALUE_COUNT; i++) {
 8005e72:	2300      	movs	r3, #0
 8005e74:	61fb      	str	r3, [r7, #28]
 8005e76:	e07c      	b.n	8005f72 <cliSet+0x1be>
            val = &valueTable[i];
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4a60      	ldr	r2, [pc, #384]	; (8006004 <cliSet+0x250>)
 8005e84:	4413      	add	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
            if (strncasecmp(argv[0], valueTable[i].name, strlen(valueTable[i].name)) == 0) {
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681c      	ldr	r4, [r3, #0]
 8005e8c:	495d      	ldr	r1, [pc, #372]	; (8006004 <cliSet+0x250>)
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	681d      	ldr	r5, [r3, #0]
 8005e9c:	4959      	ldr	r1, [pc, #356]	; (8006004 <cliSet+0x250>)
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fa f993 	bl	80001d8 <strlen>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f01c ff39 	bl	8022d30 <strncasecmp>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d153      	bne.n	8005f6c <cliSet+0x1b8>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 8005ec4:	494f      	ldr	r1, [pc, #316]	; (8006004 <cliSet+0x250>)
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	330c      	adds	r3, #12
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ede:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eea:	db39      	blt.n	8005f60 <cliSet+0x1ac>
 8005eec:	4945      	ldr	r1, [pc, #276]	; (8006004 <cliSet+0x250>)
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	3310      	adds	r3, #16
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f06:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f12:	d825      	bhi.n	8005f60 <cliSet+0x1ac>
                    int_float_value_t tmp;
                    if (valueTable[i].type == VAR_FLOAT)
 8005f14:	493b      	ldr	r1, [pc, #236]	; (8006004 <cliSet+0x250>)
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	3304      	adds	r3, #4
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d102      	bne.n	8005f30 <cliSet+0x17c>
                        tmp.float_value = valuef;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	60bb      	str	r3, [r7, #8]
 8005f2e:	e001      	b.n	8005f34 <cliSet+0x180>
                    else
                        tmp.int_value = value;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	60bb      	str	r3, [r7, #8]
                    cliSetVar(val, tmp);
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7ff ff08 	bl	8005d4c <cliSetVar>
                    pifLog_Printf(LT_NONE, "%s set to ", valueTable[i].name);
 8005f3c:	4931      	ldr	r1, [pc, #196]	; (8006004 <cliSet+0x250>)
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	440b      	add	r3, r1
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4930      	ldr	r1, [pc, #192]	; (8006010 <cliSet+0x25c>)
 8005f50:	2000      	movs	r0, #0
 8005f52:	f00d fa27 	bl	80133a4 <pifLog_Printf>
                    cliPrintVar(val, 0);
 8005f56:	2100      	movs	r1, #0
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f7ff fe69 	bl	8005c30 <cliPrintVar>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 8005f5e:	e003      	b.n	8005f68 <cliSet+0x1b4>
                } else {
                    pifLog_Print(LT_NONE, "ERR: Value assignment out of range\r\n");
 8005f60:	492c      	ldr	r1, [pc, #176]	; (8006014 <cliSet+0x260>)
 8005f62:	2000      	movs	r0, #0
 8005f64:	f00d f990 	bl	8013288 <pifLog_Print>
                }
                return PIF_LOG_CMD_NO_ERROR;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e044      	b.n	8005ff6 <cliSet+0x242>
        for (i = 0; i < VALUE_COUNT; i++) {
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	61fb      	str	r3, [r7, #28]
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	2b8e      	cmp	r3, #142	; 0x8e
 8005f76:	f67f af7f 	bls.w	8005e78 <cliSet+0xc4>
            }
        }
        pifLog_Print(LT_NONE, "ERR: Unknown variable name\r\n");
 8005f7a:	4927      	ldr	r1, [pc, #156]	; (8006018 <cliSet+0x264>)
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	f00d f983 	bl	8013288 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005f82:	2300      	movs	r3, #0
 8005f84:	e037      	b.n	8005ff6 <cliSet+0x242>
    } else {
        // no equals, check for matching variables.
        for (i = 0; i < VALUE_COUNT; i++) {
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	e030      	b.n	8005fee <cliSet+0x23a>
            if (strstr(valueTable[i].name, argv[0])) {
 8005f8c:	491d      	ldr	r1, [pc, #116]	; (8006004 <cliSet+0x250>)
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	f01c fef9 	bl	8022d9a <strstr>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01c      	beq.n	8005fe8 <cliSet+0x234>
                val = &valueTable[i];
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4a12      	ldr	r2, [pc, #72]	; (8006004 <cliSet+0x250>)
 8005fba:	4413      	add	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
                pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 8005fbe:	4911      	ldr	r1, [pc, #68]	; (8006004 <cliSet+0x250>)
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	490d      	ldr	r1, [pc, #52]	; (8006008 <cliSet+0x254>)
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	f00d f9e6 	bl	80133a4 <pifLog_Printf>
                cliPrintVar(val, 0);
 8005fd8:	2100      	movs	r1, #0
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f7ff fe28 	bl	8005c30 <cliPrintVar>
                pifLog_Print(LT_NONE, "\r\n");
 8005fe0:	490a      	ldr	r1, [pc, #40]	; (800600c <cliSet+0x258>)
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	f00d f950 	bl	8013288 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	3301      	adds	r3, #1
 8005fec:	61fb      	str	r3, [r7, #28]
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	2b8e      	cmp	r3, #142	; 0x8e
 8005ff2:	d9cb      	bls.n	8005f8c <cliSet+0x1d8>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3720      	adds	r7, #32
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ffe:	bf00      	nop
 8006000:	08026e70 	.word	0x08026e70
 8006004:	08027c28 	.word	0x08027c28
 8006008:	08026e88 	.word	0x08026e88
 800600c:	0802672c 	.word	0x0802672c
 8006010:	08026e90 	.word	0x08026e90
 8006014:	08026e9c 	.word	0x08026e9c
 8006018:	08026ec4 	.word	0x08026ec4

0800601c <cliStatus>:

static int cliStatus(int argc, char *argv[])
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af02      	add	r7, sp, #8
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    uint8_t i;
    uint32_t mask;

    pifLog_Printf(LT_NONE, "System Uptime: %ld seconds, Voltage: %d * 0.1V (%dS battery)\r\n",
 8006026:	4b4d      	ldr	r3, [pc, #308]	; (800615c <cliStatus+0x140>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a4d      	ldr	r2, [pc, #308]	; (8006160 <cliStatus+0x144>)
 800602c:	fba2 2303 	umull	r2, r3, r2, r3
 8006030:	099a      	lsrs	r2, r3, #6
 8006032:	4b4c      	ldr	r3, [pc, #304]	; (8006164 <cliStatus+0x148>)
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	4619      	mov	r1, r3
 8006038:	4b4b      	ldr	r3, [pc, #300]	; (8006168 <cliStatus+0x14c>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	460b      	mov	r3, r1
 8006040:	494a      	ldr	r1, [pc, #296]	; (800616c <cliStatus+0x150>)
 8006042:	2000      	movs	r0, #0
 8006044:	f00d f9ae 	bl	80133a4 <pifLog_Printf>
           pif_cumulative_timer1ms / 1000, vbat, batteryCellCount);
    mask = sensorsMask();
 8006048:	f000 fe92 	bl	8006d70 <sensorsMask>
 800604c:	60b8      	str	r0, [r7, #8]

    pifLog_Printf(LT_NONE, "Hardware: %s @ %ldMHz, detected sensors: ", g_board_name, (g_core_clock / 1000000));
 800604e:	4b48      	ldr	r3, [pc, #288]	; (8006170 <cliStatus+0x154>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a48      	ldr	r2, [pc, #288]	; (8006174 <cliStatus+0x158>)
 8006054:	fba2 2303 	umull	r2, r3, r2, r3
 8006058:	0c9b      	lsrs	r3, r3, #18
 800605a:	4a47      	ldr	r2, [pc, #284]	; (8006178 <cliStatus+0x15c>)
 800605c:	4947      	ldr	r1, [pc, #284]	; (800617c <cliStatus+0x160>)
 800605e:	2000      	movs	r0, #0
 8006060:	f00d f9a0 	bl	80133a4 <pifLog_Printf>
    for (i = 0; ; i++) {
 8006064:	2300      	movs	r3, #0
 8006066:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	4a45      	ldr	r2, [pc, #276]	; (8006180 <cliStatus+0x164>)
 800606c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d015      	beq.n	80060a0 <cliStatus+0x84>
            break;
        if (mask & (1 << i))
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	2201      	movs	r2, #1
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	461a      	mov	r2, r3
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4013      	ands	r3, r2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d008      	beq.n	8006098 <cliStatus+0x7c>
            pifLog_Printf(LT_NONE, "%s ", sensorNames[i]);
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	4a3d      	ldr	r2, [pc, #244]	; (8006180 <cliStatus+0x164>)
 800608a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800608e:	461a      	mov	r2, r3
 8006090:	493c      	ldr	r1, [pc, #240]	; (8006184 <cliStatus+0x168>)
 8006092:	2000      	movs	r0, #0
 8006094:	f00d f986 	bl	80133a4 <pifLog_Printf>
    for (i = 0; ; i++) {
 8006098:	7bfb      	ldrb	r3, [r7, #15]
 800609a:	3301      	adds	r3, #1
 800609c:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 800609e:	e7e3      	b.n	8006068 <cliStatus+0x4c>
            break;
 80060a0:	bf00      	nop
    }
    pifLog_Print(LT_NONE, "\r\n");
 80060a2:	4939      	ldr	r1, [pc, #228]	; (8006188 <cliStatus+0x16c>)
 80060a4:	2000      	movs	r0, #0
 80060a6:	f00d f8ef 	bl	8013288 <pifLog_Print>
    if (sensors(SENSOR_GYRO))
 80060aa:	2001      	movs	r0, #1
 80060ac:	f000 fe24 	bl	8006cf8 <sensors>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d006      	beq.n	80060c4 <cliStatus+0xa8>
        pifLog_Printf(LT_NONE, "GYRO_HW: %s ", sensor_set.gyro.hardware);
 80060b6:	4b35      	ldr	r3, [pc, #212]	; (800618c <cliStatus+0x170>)
 80060b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ba:	461a      	mov	r2, r3
 80060bc:	4934      	ldr	r1, [pc, #208]	; (8006190 <cliStatus+0x174>)
 80060be:	2000      	movs	r0, #0
 80060c0:	f00d f970 	bl	80133a4 <pifLog_Printf>
    if (sensors(SENSOR_ACC))
 80060c4:	2002      	movs	r0, #2
 80060c6:	f000 fe17 	bl	8006cf8 <sensors>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <cliStatus+0xc4>
        pifLog_Printf(LT_NONE, "ACC_HW: %s ", sensor_set.acc.hardware);
 80060d0:	4b2e      	ldr	r3, [pc, #184]	; (800618c <cliStatus+0x170>)
 80060d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060d6:	461a      	mov	r2, r3
 80060d8:	492e      	ldr	r1, [pc, #184]	; (8006194 <cliStatus+0x178>)
 80060da:	2000      	movs	r0, #0
 80060dc:	f00d f962 	bl	80133a4 <pifLog_Printf>
    if (sensors(SENSOR_MAG))
 80060e0:	2008      	movs	r0, #8
 80060e2:	f000 fe09 	bl	8006cf8 <sensors>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <cliStatus+0xe0>
        pifLog_Printf(LT_NONE, ", MAG_HW: %s ", sensor_set.mag.hardware);
 80060ec:	4b27      	ldr	r3, [pc, #156]	; (800618c <cliStatus+0x170>)
 80060ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060f2:	461a      	mov	r2, r3
 80060f4:	4928      	ldr	r1, [pc, #160]	; (8006198 <cliStatus+0x17c>)
 80060f6:	2000      	movs	r0, #0
 80060f8:	f00d f954 	bl	80133a4 <pifLog_Printf>
    if (sensors(SENSOR_BARO))
 80060fc:	2004      	movs	r0, #4
 80060fe:	f000 fdfb 	bl	8006cf8 <sensors>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <cliStatus+0xfc>
        pifLog_Printf(LT_NONE, ", BARO_HW: %s ", sensor_set.baro.hardware);
 8006108:	4b20      	ldr	r3, [pc, #128]	; (800618c <cliStatus+0x170>)
 800610a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800610e:	461a      	mov	r2, r3
 8006110:	4922      	ldr	r1, [pc, #136]	; (800619c <cliStatus+0x180>)
 8006112:	2000      	movs	r0, #0
 8006114:	f00d f946 	bl	80133a4 <pifLog_Printf>
    pifLog_Print(LT_NONE, "\r\n");
 8006118:	491b      	ldr	r1, [pc, #108]	; (8006188 <cliStatus+0x16c>)
 800611a:	2000      	movs	r0, #0
 800611c:	f00d f8b4 	bl	8013288 <pifLog_Print>

    pifLog_Printf(LT_NONE, "Cycle Time: %d, I2C Errors: %d, config size: %d\r\n", cycleTime, g_i2c_port.error_count, sizeof(master_t));
 8006120:	4b1f      	ldr	r3, [pc, #124]	; (80061a0 <cliStatus+0x184>)
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	461a      	mov	r2, r3
 8006126:	4b1f      	ldr	r3, [pc, #124]	; (80061a4 <cliStatus+0x188>)
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	4619      	mov	r1, r3
 800612c:	f240 536c 	movw	r3, #1388	; 0x56c
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	460b      	mov	r3, r1
 8006134:	491c      	ldr	r1, [pc, #112]	; (80061a8 <cliStatus+0x18c>)
 8006136:	2000      	movs	r0, #0
 8006138:	f00d f934 	bl	80133a4 <pifLog_Printf>

   	pifLog_Printf(LT_NONE, "PIF Timer 1ms count=%d\n", pifTimerManager_Count(&g_timer_1ms));
 800613c:	481b      	ldr	r0, [pc, #108]	; (80061ac <cliStatus+0x190>)
 800613e:	f00e fefe 	bl	8014f3e <pifTimerManager_Count>
 8006142:	4603      	mov	r3, r0
 8006144:	461a      	mov	r2, r3
 8006146:	491a      	ldr	r1, [pc, #104]	; (80061b0 <cliStatus+0x194>)
 8006148:	2000      	movs	r0, #0
 800614a:	f00d f92b 	bl	80133a4 <pifLog_Printf>

    cliStatusCallback();
 800614e:	f000 f871 	bl	8006234 <cliStatusCallback>

	return PIF_LOG_CMD_NO_ERROR;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20001c24 	.word	0x20001c24
 8006160:	10624dd3 	.word	0x10624dd3
 8006164:	20001718 	.word	0x20001718
 8006168:	20000054 	.word	0x20000054
 800616c:	08026ee4 	.word	0x08026ee4
 8006170:	200016e4 	.word	0x200016e4
 8006174:	431bde83 	.word	0x431bde83
 8006178:	0802797c 	.word	0x0802797c
 800617c:	08026f24 	.word	0x08026f24
 8006180:	08027aa8 	.word	0x08027aa8
 8006184:	08026c40 	.word	0x08026c40
 8006188:	0802672c 	.word	0x0802672c
 800618c:	2000005c 	.word	0x2000005c
 8006190:	08026f50 	.word	0x08026f50
 8006194:	08026f60 	.word	0x08026f60
 8006198:	08026f6c 	.word	0x08026f6c
 800619c:	08026f7c 	.word	0x08026f7c
 80061a0:	20001714 	.word	0x20001714
 80061a4:	200014f8 	.word	0x200014f8
 80061a8:	08026f8c 	.word	0x08026f8c
 80061ac:	20001528 	.word	0x20001528
 80061b0:	08026fc0 	.word	0x08026fc0

080061b4 <cliVersion>:

static int cliVersion(int argc, char *argv[])
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Printf(LT_NONE, "Afro32 CLI version 2.3 " __DATE__ " / " __TIME__);
 80061be:	4904      	ldr	r1, [pc, #16]	; (80061d0 <cliVersion+0x1c>)
 80061c0:	2000      	movs	r0, #0
 80061c2:	f00d f8ef 	bl	80133a4 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	08026fd8 	.word	0x08026fd8

080061d4 <cliInit>:

BOOL cliInit(PifComm* p_comm)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
    if (!cliMode) {
 80061dc:	4b11      	ldr	r3, [pc, #68]	; (8006224 <cliInit+0x50>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d119      	bne.n	8006218 <cliInit+0x44>
        cliMode = 1;
 80061e4:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <cliInit+0x50>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	701a      	strb	r2, [r3, #0]

#ifndef __PIF_NO_LOG__
        pifLog_DetachComm();
 80061ea:	f00d f98f 	bl	801350c <pifLog_DetachComm>
#else
        pifLog_Init();
#endif
        if (!pifLog_AttachComm(p_comm)) return FALSE;
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f00d f966 	bl	80134c0 <pifLog_AttachComm>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <cliInit+0x2a>
 80061fa:	2300      	movs	r3, #0
 80061fc:	e00d      	b.n	800621a <cliInit+0x46>
        if (!pifLog_UseCommand(c_psCmdTable, "\r\n# ")) return FALSE;
 80061fe:	490a      	ldr	r1, [pc, #40]	; (8006228 <cliInit+0x54>)
 8006200:	480a      	ldr	r0, [pc, #40]	; (800622c <cliInit+0x58>)
 8006202:	f00d f80d 	bl	8013220 <pifLog_UseCommand>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <cliInit+0x3c>
 800620c:	2300      	movs	r3, #0
 800620e:	e004      	b.n	800621a <cliInit+0x46>
        pifLog_Print(LT_NONE, "\r\nEntering CLI Mode, type 'exit' to return, or 'help'\r\n");
 8006210:	4907      	ldr	r1, [pc, #28]	; (8006230 <cliInit+0x5c>)
 8006212:	2000      	movs	r0, #0
 8006214:	f00d f838 	bl	8013288 <pifLog_Print>
    }
    return TRUE;
 8006218:	2301      	movs	r3, #1
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	200008b0 	.word	0x200008b0
 8006228:	08027008 	.word	0x08027008
 800622c:	08027ac8 	.word	0x08027ac8
 8006230:	08027010 	.word	0x08027010

08006234 <cliStatusCallback>:

PIF_WEAK void cliStatusCallback()
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0

}
 8006238:	bf00      	nop
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <initEEPROM>:
static void resetConf(void);

static PifStorage* p_storage;

bool initEEPROM(PifStorage* p_sto)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
	if (p_sto) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <initEEPROM+0x18>
		p_storage = p_sto;
 8006252:	4a06      	ldr	r2, [pc, #24]	; (800626c <initEEPROM+0x28>)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6013      	str	r3, [r2, #0]
		return TRUE;
 8006258:	2301      	movs	r3, #1
 800625a:	e000      	b.n	800625e <initEEPROM+0x1a>
	}
	return FALSE;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	20000f90 	.word	0x20000f90

08006270 <parseRcChannels>:

void parseRcChannels(const char *input)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
    const char *c, *s;

    for (c = input; *c; c++) {
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	e018      	b.n	80062b0 <parseRcChannels+0x40>
        s = strchr(rcChannelLetters, *c);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	4619      	mov	r1, r3
 8006284:	480f      	ldr	r0, [pc, #60]	; (80062c4 <parseRcChannels+0x54>)
 8006286:	f01c fd3e 	bl	8022d06 <strchr>
 800628a:	60b8      	str	r0, [r7, #8]
        if (s)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00b      	beq.n	80062aa <parseRcChannels+0x3a>
            mcfg.rcmap[s - rcChannelLetters] = c - input;
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	1ad1      	subs	r1, r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4a0a      	ldr	r2, [pc, #40]	; (80062c4 <parseRcChannels+0x54>)
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	b2c9      	uxtb	r1, r1
 80062a0:	4a09      	ldr	r2, [pc, #36]	; (80062c8 <parseRcChannels+0x58>)
 80062a2:	4413      	add	r3, r2
 80062a4:	460a      	mov	r2, r1
 80062a6:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
    for (c = input; *c; c++) {
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e2      	bne.n	800627e <parseRcChannels+0xe>
    }
}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	08028754 	.word	0x08028754
 80062c8:	200008e8 	.word	0x200008e8

080062cc <validEEPROM>:

static uint8_t validEEPROM(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
    master_t *temp = NULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	607b      	str	r3, [r7, #4]
    const uint8_t *p;
    uint8_t chk = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	72fb      	strb	r3, [r7, #11]
	PifStorageDataInfoP p_data_info;

    temp = malloc(sizeof(master_t));
 80062da:	f240 506c 	movw	r0, #1388	; 0x56c
 80062de:	f01c fbbd 	bl	8022a5c <malloc>
 80062e2:	4603      	mov	r3, r0
 80062e4:	607b      	str	r3, [r7, #4]
    if (!temp) return 0;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <validEEPROM+0x24>
 80062ec:	2300      	movs	r3, #0
 80062ee:	e04e      	b.n	800638e <validEEPROM+0xc2>

    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 80062f0:	4b29      	ldr	r3, [pc, #164]	; (8006398 <validEEPROM+0xcc>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	214c      	movs	r1, #76	; 0x4c
 80062f6:	4618      	mov	r0, r3
 80062f8:	f014 fbe7 	bl	801aaca <pifStorage_Open>
 80062fc:	6038      	str	r0, [r7, #0]
    if (!p_data_info) goto fail;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d037      	beq.n	8006374 <validEEPROM+0xa8>

    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 8006304:	4b24      	ldr	r3, [pc, #144]	; (8006398 <validEEPROM+0xcc>)
 8006306:	6818      	ldr	r0, [r3, #0]
 8006308:	f240 536c 	movw	r3, #1388	; 0x56c
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	f014 fbec 	bl	801aaec <pifStorage_Read>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d02e      	beq.n	8006378 <validEEPROM+0xac>

    // check version number
    if (EEPROM_CONF_VERSION != temp->version)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	224c      	movs	r2, #76	; 0x4c
 8006320:	4293      	cmp	r3, r2
 8006322:	d12b      	bne.n	800637c <validEEPROM+0xb0>
        goto fail;

    // check size and magic numbers
    if (temp->size != sizeof(master_t) || temp->magic_be != 0xBE || temp->magic_ef != 0xEF)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	885b      	ldrh	r3, [r3, #2]
 8006328:	f240 526c 	movw	r2, #1388	; 0x56c
 800632c:	4293      	cmp	r3, r2
 800632e:	d127      	bne.n	8006380 <validEEPROM+0xb4>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	791b      	ldrb	r3, [r3, #4]
 8006334:	2bbe      	cmp	r3, #190	; 0xbe
 8006336:	d123      	bne.n	8006380 <validEEPROM+0xb4>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 356a 	ldrb.w	r3, [r3, #1386]	; 0x56a
 800633e:	2bef      	cmp	r3, #239	; 0xef
 8006340:	d11e      	bne.n	8006380 <validEEPROM+0xb4>
        goto fail;

    // verify integrity of temporary copy
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	e007      	b.n	8006358 <validEEPROM+0x8c>
        chk ^= *p;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	781a      	ldrb	r2, [r3, #0]
 800634c:	7afb      	ldrb	r3, [r7, #11]
 800634e:	4053      	eors	r3, r2
 8006350:	72fb      	strb	r3, [r7, #11]
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	429a      	cmp	r2, r3
 8006362:	d3f1      	bcc.n	8006348 <validEEPROM+0x7c>

    // checksum failed
    if (chk != 0)
 8006364:	7afb      	ldrb	r3, [r7, #11]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10c      	bne.n	8006384 <validEEPROM+0xb8>
        goto fail;

    free(temp);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f01c fb7e 	bl	8022a6c <free>

    // looks good, let's roll!
    return 1;
 8006370:	2301      	movs	r3, #1
 8006372:	e00c      	b.n	800638e <validEEPROM+0xc2>
    if (!p_data_info) goto fail;
 8006374:	bf00      	nop
 8006376:	e006      	b.n	8006386 <validEEPROM+0xba>
    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 8006378:	bf00      	nop
 800637a:	e004      	b.n	8006386 <validEEPROM+0xba>
        goto fail;
 800637c:	bf00      	nop
 800637e:	e002      	b.n	8006386 <validEEPROM+0xba>
        goto fail;
 8006380:	bf00      	nop
 8006382:	e000      	b.n	8006386 <validEEPROM+0xba>
        goto fail;
 8006384:	bf00      	nop

fail:
    free(temp);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f01c fb70 	bl	8022a6c <free>
    return 0;    
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000f90 	.word	0x20000f90

0800639c <readEEPROM>:

void readEEPROM(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
	PifStorageDataInfoP p_data_info;

    // Sanity check
    if (!validEEPROM()) goto fail;
 80063a2:	f7ff ff93 	bl	80062cc <validEEPROM>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d030      	beq.n	800640e <readEEPROM+0x72>

    // Read flash
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 80063ac:	4b1d      	ldr	r3, [pc, #116]	; (8006424 <readEEPROM+0x88>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	214c      	movs	r1, #76	; 0x4c
 80063b2:	4618      	mov	r0, r3
 80063b4:	f014 fb89 	bl	801aaca <pifStorage_Open>
 80063b8:	6078      	str	r0, [r7, #4]
    if (!p_data_info) goto fail;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d028      	beq.n	8006412 <readEEPROM+0x76>

    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 80063c0:	4b18      	ldr	r3, [pc, #96]	; (8006424 <readEEPROM+0x88>)
 80063c2:	6818      	ldr	r0, [r3, #0]
 80063c4:	f240 536c 	movw	r3, #1388	; 0x56c
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	4917      	ldr	r1, [pc, #92]	; (8006428 <readEEPROM+0x8c>)
 80063cc:	f014 fb8e 	bl	801aaec <pifStorage_Read>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d01f      	beq.n	8006416 <readEEPROM+0x7a>

    // Copy current profile
    if (mcfg.current_profile > 2) // sanity check
 80063d6:	4b14      	ldr	r3, [pc, #80]	; (8006428 <readEEPROM+0x8c>)
 80063d8:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d903      	bls.n	80063e8 <readEEPROM+0x4c>
        mcfg.current_profile = 0;
 80063e0:	4b11      	ldr	r3, [pc, #68]	; (8006428 <readEEPROM+0x8c>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    memcpy(&cfg, &mcfg.profile[mcfg.current_profile], sizeof(config_t));
 80063e8:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <readEEPROM+0x8c>)
 80063ea:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 80063ee:	461a      	mov	r2, r3
 80063f0:	f44f 739c 	mov.w	r3, #312	; 0x138
 80063f4:	fb02 f303 	mul.w	r3, r2, r3
 80063f8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80063fc:	4a0a      	ldr	r2, [pc, #40]	; (8006428 <readEEPROM+0x8c>)
 80063fe:	4413      	add	r3, r2
 8006400:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006404:	4619      	mov	r1, r3
 8006406:	4809      	ldr	r0, [pc, #36]	; (800642c <readEEPROM+0x90>)
 8006408:	f01c fb38 	bl	8022a7c <memcpy>
    return;
 800640c:	e007      	b.n	800641e <readEEPROM+0x82>
    if (!validEEPROM()) goto fail;
 800640e:	bf00      	nop
 8006410:	e002      	b.n	8006418 <readEEPROM+0x7c>
    if (!p_data_info) goto fail;
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <readEEPROM+0x7c>
    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 8006416:	bf00      	nop

fail:    
    failureMode(10);
 8006418:	200a      	movs	r0, #10
 800641a:	f7fb fc22 	bl	8001c62 <failureMode>
}
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	20000f90 	.word	0x20000f90
 8006428:	200008e8 	.word	0x200008e8
 800642c:	20000e54 	.word	0x20000e54

08006430 <activateConfig>:

void activateConfig(void)
{
 8006430:	b5b0      	push	{r4, r5, r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 8006436:	2300      	movs	r3, #0
 8006438:	71fb      	strb	r3, [r7, #7]
 800643a:	e021      	b.n	8006480 <activateConfig+0x50>
        lookupPitchRollRC[i] = (2500 + cfg.rcExpo8 * (i * i - 25)) * i * (int32_t)cfg.rcRate8 / 2500;
 800643c:	4b56      	ldr	r3, [pc, #344]	; (8006598 <activateConfig+0x168>)
 800643e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006442:	4619      	mov	r1, r3
 8006444:	79fb      	ldrb	r3, [r7, #7]
 8006446:	79fa      	ldrb	r2, [r7, #7]
 8006448:	fb02 f303 	mul.w	r3, r2, r3
 800644c:	3b19      	subs	r3, #25
 800644e:	fb01 f303 	mul.w	r3, r1, r3
 8006452:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8006456:	79fa      	ldrb	r2, [r7, #7]
 8006458:	fb02 f303 	mul.w	r3, r2, r3
 800645c:	4a4e      	ldr	r2, [pc, #312]	; (8006598 <activateConfig+0x168>)
 800645e:	7fd2      	ldrb	r2, [r2, #31]
 8006460:	fb02 f303 	mul.w	r3, r2, r3
 8006464:	4a4d      	ldr	r2, [pc, #308]	; (800659c <activateConfig+0x16c>)
 8006466:	fb82 1203 	smull	r1, r2, r2, r3
 800646a:	1292      	asrs	r2, r2, #10
 800646c:	17db      	asrs	r3, r3, #31
 800646e:	1ad2      	subs	r2, r2, r3
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	b211      	sxth	r1, r2
 8006474:	4a4a      	ldr	r2, [pc, #296]	; (80065a0 <activateConfig+0x170>)
 8006476:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	3301      	adds	r3, #1
 800647e:	71fb      	strb	r3, [r7, #7]
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	2b06      	cmp	r3, #6
 8006484:	d9da      	bls.n	800643c <activateConfig+0xc>

    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 8006486:	2300      	movs	r3, #0
 8006488:	71fb      	strb	r3, [r7, #7]
 800648a:	e076      	b.n	800657a <activateConfig+0x14a>
        int16_t tmp = 10 * i - cfg.thrMid8;
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	b29b      	uxth	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	0092      	lsls	r2, r2, #2
 8006494:	4413      	add	r3, r2
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	b29a      	uxth	r2, r3
 800649a:	4b3f      	ldr	r3, [pc, #252]	; (8006598 <activateConfig+0x168>)
 800649c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	80bb      	strh	r3, [r7, #4]
        uint8_t y = 1;
 80064a8:	2301      	movs	r3, #1
 80064aa:	71bb      	strb	r3, [r7, #6]
        if (tmp > 0)
 80064ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	dd05      	ble.n	80064c0 <activateConfig+0x90>
            y = 100 - cfg.thrMid8;
 80064b4:	4b38      	ldr	r3, [pc, #224]	; (8006598 <activateConfig+0x168>)
 80064b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064ba:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80064be:	71bb      	strb	r3, [r7, #6]
        if (tmp < 0)
 80064c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	da03      	bge.n	80064d0 <activateConfig+0xa0>
            y = cfg.thrMid8;
 80064c8:	4b33      	ldr	r3, [pc, #204]	; (8006598 <activateConfig+0x168>)
 80064ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064ce:	71bb      	strb	r3, [r7, #6]
        lookupThrottleRC[i] = 10 * cfg.thrMid8 + tmp * (100 - cfg.thrExpo8 + (int32_t)cfg.thrExpo8 * (tmp * tmp) / (y * y)) / 10;
 80064d0:	4b31      	ldr	r3, [pc, #196]	; (8006598 <activateConfig+0x168>)
 80064d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	0092      	lsls	r2, r2, #2
 80064dc:	4413      	add	r3, r2
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064e6:	492c      	ldr	r1, [pc, #176]	; (8006598 <activateConfig+0x168>)
 80064e8:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80064ec:	f1c1 0064 	rsb	r0, r1, #100	; 0x64
 80064f0:	4929      	ldr	r1, [pc, #164]	; (8006598 <activateConfig+0x168>)
 80064f2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80064f6:	460d      	mov	r5, r1
 80064f8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80064fc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006500:	fb04 f101 	mul.w	r1, r4, r1
 8006504:	fb01 f405 	mul.w	r4, r1, r5
 8006508:	79b9      	ldrb	r1, [r7, #6]
 800650a:	79bd      	ldrb	r5, [r7, #6]
 800650c:	fb05 f101 	mul.w	r1, r5, r1
 8006510:	fb94 f1f1 	sdiv	r1, r4, r1
 8006514:	4401      	add	r1, r0
 8006516:	fb01 f303 	mul.w	r3, r1, r3
 800651a:	4922      	ldr	r1, [pc, #136]	; (80065a4 <activateConfig+0x174>)
 800651c:	fb81 0103 	smull	r0, r1, r1, r3
 8006520:	1089      	asrs	r1, r1, #2
 8006522:	17db      	asrs	r3, r3, #31
 8006524:	1acb      	subs	r3, r1, r3
 8006526:	b29b      	uxth	r3, r3
 8006528:	4413      	add	r3, r2
 800652a:	b29a      	uxth	r2, r3
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	b211      	sxth	r1, r2
 8006530:	4a1d      	ldr	r2, [pc, #116]	; (80065a8 <activateConfig+0x178>)
 8006532:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        lookupThrottleRC[i] = mcfg.minthrottle + (int32_t)(mcfg.maxthrottle - mcfg.minthrottle) * lookupThrottleRC[i] / 1000; // [MINTHROTTLE;MAXTHROTTLE]
 8006536:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <activateConfig+0x17c>)
 8006538:	f8b3 2140 	ldrh.w	r2, [r3, #320]	; 0x140
 800653c:	4b1b      	ldr	r3, [pc, #108]	; (80065ac <activateConfig+0x17c>)
 800653e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8006542:	4619      	mov	r1, r3
 8006544:	4b19      	ldr	r3, [pc, #100]	; (80065ac <activateConfig+0x17c>)
 8006546:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800654a:	1acb      	subs	r3, r1, r3
 800654c:	79f9      	ldrb	r1, [r7, #7]
 800654e:	4816      	ldr	r0, [pc, #88]	; (80065a8 <activateConfig+0x178>)
 8006550:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 8006554:	fb01 f303 	mul.w	r3, r1, r3
 8006558:	4915      	ldr	r1, [pc, #84]	; (80065b0 <activateConfig+0x180>)
 800655a:	fb81 0103 	smull	r0, r1, r1, r3
 800655e:	1189      	asrs	r1, r1, #6
 8006560:	17db      	asrs	r3, r3, #31
 8006562:	1acb      	subs	r3, r1, r3
 8006564:	b29b      	uxth	r3, r3
 8006566:	4413      	add	r3, r2
 8006568:	b29a      	uxth	r2, r3
 800656a:	79fb      	ldrb	r3, [r7, #7]
 800656c:	b211      	sxth	r1, r2
 800656e:	4a0e      	ldr	r2, [pc, #56]	; (80065a8 <activateConfig+0x178>)
 8006570:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	3301      	adds	r3, #1
 8006578:	71fb      	strb	r3, [r7, #7]
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	2b0b      	cmp	r3, #11
 800657e:	d985      	bls.n	800648c <activateConfig+0x5c>
    }

    setPIDController(cfg.pidController);
 8006580:	4b05      	ldr	r3, [pc, #20]	; (8006598 <activateConfig+0x168>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f006 fcf9 	bl	800cf7c <setPIDController>
#ifdef GPS
    gpsSetPIDs();
 800658a:	f002 fb4f 	bl	8008c2c <gpsSetPIDs>
#endif
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bdb0      	pop	{r4, r5, r7, pc}
 8006596:	bf00      	nop
 8006598:	20000e54 	.word	0x20000e54
 800659c:	68db8bad 	.word	0x68db8bad
 80065a0:	20001758 	.word	0x20001758
 80065a4:	66666667 	.word	0x66666667
 80065a8:	20001768 	.word	0x20001768
 80065ac:	200008e8 	.word	0x200008e8
 80065b0:	10624dd3 	.word	0x10624dd3

080065b4 <loadAndActivateConfig>:

void loadAndActivateConfig(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
    readEEPROM();
 80065b8:	f7ff fef0 	bl	800639c <readEEPROM>
    activateConfig();
 80065bc:	f7ff ff38 	bl	8006430 <activateConfig>
}
 80065c0:	bf00      	nop
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <writeEEPROM>:

void writeEEPROM(uint8_t b, uint8_t updateProfile)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	460a      	mov	r2, r1
 80065ce:	71fb      	strb	r3, [r7, #7]
 80065d0:	4613      	mov	r3, r2
 80065d2:	71bb      	strb	r3, [r7, #6]
    bool status = false;
 80065d4:	2300      	movs	r3, #0
 80065d6:	75fb      	strb	r3, [r7, #23]
    uint8_t chk = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	75bb      	strb	r3, [r7, #22]
    const uint8_t *p;
	PifStorageDataInfoP p_data_info;

    // prepare checksum/version constants
    mcfg.version = EEPROM_CONF_VERSION;
 80065dc:	224c      	movs	r2, #76	; 0x4c
 80065de:	4b36      	ldr	r3, [pc, #216]	; (80066b8 <writeEEPROM+0xf4>)
 80065e0:	701a      	strb	r2, [r3, #0]
    mcfg.size = sizeof(master_t);
 80065e2:	4b35      	ldr	r3, [pc, #212]	; (80066b8 <writeEEPROM+0xf4>)
 80065e4:	f240 526c 	movw	r2, #1388	; 0x56c
 80065e8:	805a      	strh	r2, [r3, #2]
    mcfg.magic_be = 0xBE;
 80065ea:	4b33      	ldr	r3, [pc, #204]	; (80066b8 <writeEEPROM+0xf4>)
 80065ec:	22be      	movs	r2, #190	; 0xbe
 80065ee:	711a      	strb	r2, [r3, #4]
    mcfg.magic_ef = 0xEF;
 80065f0:	4b31      	ldr	r3, [pc, #196]	; (80066b8 <writeEEPROM+0xf4>)
 80065f2:	22ef      	movs	r2, #239	; 0xef
 80065f4:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
    mcfg.chk = 0;
 80065f8:	4b2f      	ldr	r3, [pc, #188]	; (80066b8 <writeEEPROM+0xf4>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b

    // when updateProfile = true, we copy contents of cfg to global configuration. when false, only profile number is updated, and then that profile is loaded on readEEPROM()
    if (updateProfile) {
 8006600:	79bb      	ldrb	r3, [r7, #6]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d011      	beq.n	800662a <writeEEPROM+0x66>
        // copy current in-memory profile to stored configuration
        memcpy(&mcfg.profile[mcfg.current_profile], &cfg, sizeof(config_t));
 8006606:	4b2c      	ldr	r3, [pc, #176]	; (80066b8 <writeEEPROM+0xf4>)
 8006608:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800660c:	461a      	mov	r2, r3
 800660e:	f44f 739c 	mov.w	r3, #312	; 0x138
 8006612:	fb02 f303 	mul.w	r3, r2, r3
 8006616:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800661a:	4a27      	ldr	r2, [pc, #156]	; (80066b8 <writeEEPROM+0xf4>)
 800661c:	4413      	add	r3, r2
 800661e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006622:	4926      	ldr	r1, [pc, #152]	; (80066bc <writeEEPROM+0xf8>)
 8006624:	4618      	mov	r0, r3
 8006626:	f01c fa29 	bl	8022a7c <memcpy>
    }

    // recalculate checksum before writing
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 800662a:	4b23      	ldr	r3, [pc, #140]	; (80066b8 <writeEEPROM+0xf4>)
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	e007      	b.n	8006640 <writeEEPROM+0x7c>
        chk ^= *p;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	781a      	ldrb	r2, [r3, #0]
 8006634:	7dbb      	ldrb	r3, [r7, #22]
 8006636:	4053      	eors	r3, r2
 8006638:	75bb      	strb	r3, [r7, #22]
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	3301      	adds	r3, #1
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	4a1f      	ldr	r2, [pc, #124]	; (80066c0 <writeEEPROM+0xfc>)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	4293      	cmp	r3, r2
 8006646:	d3f3      	bcc.n	8006630 <writeEEPROM+0x6c>
    mcfg.chk = chk;
 8006648:	4a1b      	ldr	r2, [pc, #108]	; (80066b8 <writeEEPROM+0xf4>)
 800664a:	7dbb      	ldrb	r3, [r7, #22]
 800664c:	f882 356b 	strb.w	r3, [r2, #1387]	; 0x56b

    // write it
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 8006650:	4b1c      	ldr	r3, [pc, #112]	; (80066c4 <writeEEPROM+0x100>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	214c      	movs	r1, #76	; 0x4c
 8006656:	4618      	mov	r0, r3
 8006658:	f014 fa37 	bl	801aaca <pifStorage_Open>
 800665c:	60f8      	str	r0, [r7, #12]
    if (p_data_info) {
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00c      	beq.n	800667e <writeEEPROM+0xba>
        if (pifStorage_Write(p_storage, p_data_info, (uint8_t*)&mcfg, sizeof(master_t))) status = true;
 8006664:	4b17      	ldr	r3, [pc, #92]	; (80066c4 <writeEEPROM+0x100>)
 8006666:	6818      	ldr	r0, [r3, #0]
 8006668:	f240 536c 	movw	r3, #1388	; 0x56c
 800666c:	4a12      	ldr	r2, [pc, #72]	; (80066b8 <writeEEPROM+0xf4>)
 800666e:	68f9      	ldr	r1, [r7, #12]
 8006670:	f014 fa4f 	bl	801ab12 <pifStorage_Write>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <writeEEPROM+0xba>
 800667a:	2301      	movs	r3, #1
 800667c:	75fb      	strb	r3, [r7, #23]
    }

    // Flash write failed - just die now
    if (!status || !validEEPROM()) {
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	f083 0301 	eor.w	r3, r3, #1
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d104      	bne.n	8006694 <writeEEPROM+0xd0>
 800668a:	f7ff fe1f 	bl	80062cc <validEEPROM>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d102      	bne.n	800669a <writeEEPROM+0xd6>
        failureMode(10);
 8006694:	200a      	movs	r0, #10
 8006696:	f7fb fae4 	bl	8001c62 <failureMode>
    }

    // re-read written data
    loadAndActivateConfig();
 800669a:	f7ff ff8b 	bl	80065b4 <loadAndActivateConfig>
    if (b)
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d004      	beq.n	80066ae <writeEEPROM+0xea>
        blinkLED(15, 20, 1);
 80066a4:	2201      	movs	r2, #1
 80066a6:	2114      	movs	r1, #20
 80066a8:	200f      	movs	r0, #15
 80066aa:	f005 fc33 	bl	800bf14 <blinkLED>
}
 80066ae:	bf00      	nop
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	200008e8 	.word	0x200008e8
 80066bc:	20000e54 	.word	0x20000e54
 80066c0:	20000e54 	.word	0x20000e54
 80066c4:	20000f90 	.word	0x20000f90

080066c8 <checkFirstTime>:

bool checkFirstTime(bool reset)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	71fb      	strb	r3, [r7, #7]
    bool alloc = true;
 80066d2:	2301      	movs	r3, #1
 80066d4:	73fb      	strb	r3, [r7, #15]

	if (!pifStorage_IsFormat(p_storage)) {
 80066d6:	4b24      	ldr	r3, [pc, #144]	; (8006768 <checkFirstTime+0xa0>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f014 f9c8 	bl	801aa70 <pifStorage_IsFormat>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10c      	bne.n	8006700 <checkFirstTime+0x38>
		if (!pifStorage_Format(p_storage)) return false;
 80066e6:	4b20      	ldr	r3, [pc, #128]	; (8006768 <checkFirstTime+0xa0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f014 f9cd 	bl	801aa8a <pifStorage_Format>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <checkFirstTime+0x32>
 80066f6:	2300      	movs	r3, #0
 80066f8:	e032      	b.n	8006760 <checkFirstTime+0x98>
        alloc = false;
 80066fa:	2300      	movs	r3, #0
 80066fc:	73fb      	strb	r3, [r7, #15]
 80066fe:	e00b      	b.n	8006718 <checkFirstTime+0x50>
	}
    else {
        alloc = pifStorage_Open(p_storage, STORAGE_ID) != NULL;
 8006700:	4b19      	ldr	r3, [pc, #100]	; (8006768 <checkFirstTime+0xa0>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	214c      	movs	r1, #76	; 0x4c
 8006706:	4618      	mov	r0, r3
 8006708:	f014 f9df 	bl	801aaca <pifStorage_Open>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	bf14      	ite	ne
 8006712:	2301      	movne	r3, #1
 8006714:	2300      	moveq	r3, #0
 8006716:	73fb      	strb	r3, [r7, #15]
    }
    if (!alloc) {
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	f083 0301 	eor.w	r3, r3, #1
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00e      	beq.n	8006742 <checkFirstTime+0x7a>
		if (!pifStorage_Create(p_storage, STORAGE_ID, sizeof(master_t))) return false;
 8006724:	4b10      	ldr	r3, [pc, #64]	; (8006768 <checkFirstTime+0xa0>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f240 526c 	movw	r2, #1388	; 0x56c
 800672c:	214c      	movs	r1, #76	; 0x4c
 800672e:	4618      	mov	r0, r3
 8006730:	f014 f9b8 	bl	801aaa4 <pifStorage_Create>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <checkFirstTime+0x76>
 800673a:	2300      	movs	r3, #0
 800673c:	e010      	b.n	8006760 <checkFirstTime+0x98>
        reset = true;
 800673e:	2301      	movs	r3, #1
 8006740:	71fb      	strb	r3, [r7, #7]
    }
    // check the EEPROM integrity before resetting values
    if (!validEEPROM() || reset) {
 8006742:	f7ff fdc3 	bl	80062cc <validEEPROM>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <checkFirstTime+0x8a>
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d005      	beq.n	800675e <checkFirstTime+0x96>
        resetConf();
 8006752:	f000 f80b 	bl	800676c <resetConf>
        // no need to memcpy profile again, we just did it in resetConf() above
        writeEEPROM(0, false);
 8006756:	2100      	movs	r1, #0
 8006758:	2000      	movs	r0, #0
 800675a:	f7ff ff33 	bl	80065c4 <writeEEPROM>
    }
    return true;
 800675e:	2301      	movs	r3, #1
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	20000f90 	.word	0x20000f90

0800676c <resetConf>:

// Default settings
static void resetConf(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 8006772:	4ac7      	ldr	r2, [pc, #796]	; (8006a90 <resetConf+0x324>)
 8006774:	1d3b      	adds	r3, r7, #4
 8006776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800677a:	e883 0003 	stmia.w	r3, {r0, r1}

    // Clear all configuration
    memset(&mcfg, 0, sizeof(master_t));
 800677e:	f240 526c 	movw	r2, #1388	; 0x56c
 8006782:	2100      	movs	r1, #0
 8006784:	48c3      	ldr	r0, [pc, #780]	; (8006a94 <resetConf+0x328>)
 8006786:	f01c f987 	bl	8022a98 <memset>
    memset(&cfg, 0, sizeof(config_t));
 800678a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800678e:	2100      	movs	r1, #0
 8006790:	48c1      	ldr	r0, [pc, #772]	; (8006a98 <resetConf+0x32c>)
 8006792:	f01c f981 	bl	8022a98 <memset>

    mcfg.version = EEPROM_CONF_VERSION;
 8006796:	224c      	movs	r2, #76	; 0x4c
 8006798:	4bbe      	ldr	r3, [pc, #760]	; (8006a94 <resetConf+0x328>)
 800679a:	701a      	strb	r2, [r3, #0]
    mcfg.mixerConfiguration = MULTITYPE_QUADX;
 800679c:	4bbd      	ldr	r3, [pc, #756]	; (8006a94 <resetConf+0x328>)
 800679e:	2203      	movs	r2, #3
 80067a0:	715a      	strb	r2, [r3, #5]
    featureClearAll();
 80067a2:	f000 fb2d 	bl	8006e00 <featureClearAll>
    if (g_featureDefault) (*g_featureDefault)();
 80067a6:	4bbd      	ldr	r3, [pc, #756]	; (8006a9c <resetConf+0x330>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <resetConf+0x48>
 80067ae:	4bbb      	ldr	r3, [pc, #748]	; (8006a9c <resetConf+0x330>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4798      	blx	r3

    // global settings
    mcfg.current_profile = 0;       // default profile
 80067b4:	4bb7      	ldr	r3, [pc, #732]	; (8006a94 <resetConf+0x328>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    mcfg.gyro_cmpf_factor = 600;    // default MWC
 80067bc:	4bb5      	ldr	r3, [pc, #724]	; (8006a94 <resetConf+0x328>)
 80067be:	f44f 7216 	mov.w	r2, #600	; 0x258
 80067c2:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
    mcfg.gyro_cmpfm_factor = 250;   // default MWC
 80067c6:	4bb3      	ldr	r3, [pc, #716]	; (8006a94 <resetConf+0x328>)
 80067c8:	22fa      	movs	r2, #250	; 0xfa
 80067ca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
    mcfg.gyro_lpf = 42;             // supported by all gyro drivers now. In case of ST gyro, will default to 32Hz instead
 80067ce:	4bb1      	ldr	r3, [pc, #708]	; (8006a94 <resetConf+0x328>)
 80067d0:	222a      	movs	r2, #42	; 0x2a
 80067d2:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    mcfg.accZero[0] = 0;
 80067d6:	4baf      	ldr	r3, [pc, #700]	; (8006a94 <resetConf+0x328>)
 80067d8:	2200      	movs	r2, #0
 80067da:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
    mcfg.accZero[1] = 0;
 80067de:	4bad      	ldr	r3, [pc, #692]	; (8006a94 <resetConf+0x328>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
    mcfg.accZero[2] = 0;
 80067e6:	4bab      	ldr	r3, [pc, #684]	; (8006a94 <resetConf+0x328>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
    mcfg.gyro_align = IMUS_ALIGN_DEFAULT;
 80067ee:	4ba9      	ldr	r3, [pc, #676]	; (8006a94 <resetConf+0x328>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
    mcfg.acc_align = IMUS_ALIGN_DEFAULT;
 80067f6:	4ba7      	ldr	r3, [pc, #668]	; (8006a94 <resetConf+0x328>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
    mcfg.mag_align = IMUS_ALIGN_DEFAULT;
 80067fe:	4ba5      	ldr	r3, [pc, #660]	; (8006a94 <resetConf+0x328>)
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
    mcfg.board_align_roll = 0;
 8006806:	4ba3      	ldr	r3, [pc, #652]	; (8006a94 <resetConf+0x328>)
 8006808:	2200      	movs	r2, #0
 800680a:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
    mcfg.board_align_pitch = 0;
 800680e:	4ba1      	ldr	r3, [pc, #644]	; (8006a94 <resetConf+0x328>)
 8006810:	2200      	movs	r2, #0
 8006812:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
    mcfg.board_align_yaw = 0;
 8006816:	4b9f      	ldr	r3, [pc, #636]	; (8006a94 <resetConf+0x328>)
 8006818:	2200      	movs	r2, #0
 800681a:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
    mcfg.acc_hardware = 0;               // default/autodetect
 800681e:	4b9d      	ldr	r3, [pc, #628]	; (8006a94 <resetConf+0x328>)
 8006820:	2200      	movs	r2, #0
 8006822:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
    mcfg.mag_hardware = 0;
 8006826:	4b9b      	ldr	r3, [pc, #620]	; (8006a94 <resetConf+0x328>)
 8006828:	2200      	movs	r2, #0
 800682a:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
    mcfg.max_angle_inclination = 500;    // 50 degrees
 800682e:	4b99      	ldr	r3, [pc, #612]	; (8006a94 <resetConf+0x328>)
 8006830:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006834:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
    mcfg.yaw_control_direction = 1;
 8006838:	4b96      	ldr	r3, [pc, #600]	; (8006a94 <resetConf+0x328>)
 800683a:	2201      	movs	r2, #1
 800683c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    mcfg.moron_threshold = 32;
 8006840:	4b94      	ldr	r3, [pc, #592]	; (8006a94 <resetConf+0x328>)
 8006842:	2220      	movs	r2, #32
 8006844:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
    mcfg.currentscale = 400; // for Allegro ACS758LCB-100U (40mV/A)
 8006848:	4b92      	ldr	r3, [pc, #584]	; (8006a94 <resetConf+0x328>)
 800684a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800684e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
    mcfg.vbatscale = 110;
 8006852:	4b90      	ldr	r3, [pc, #576]	; (8006a94 <resetConf+0x328>)
 8006854:	226e      	movs	r2, #110	; 0x6e
 8006856:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
    mcfg.vbatmaxcellvoltage = 43;
 800685a:	4b8e      	ldr	r3, [pc, #568]	; (8006a94 <resetConf+0x328>)
 800685c:	222b      	movs	r2, #43	; 0x2b
 800685e:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
    mcfg.vbatmincellvoltage = 33;
 8006862:	4b8c      	ldr	r3, [pc, #560]	; (8006a94 <resetConf+0x328>)
 8006864:	2221      	movs	r2, #33	; 0x21
 8006866:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
    mcfg.vbatwarningcellvoltage = 35;
 800686a:	4b8a      	ldr	r3, [pc, #552]	; (8006a94 <resetConf+0x328>)
 800686c:	2223      	movs	r2, #35	; 0x23
 800686e:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    mcfg.power_adc_channel = 0;
 8006872:	4b88      	ldr	r3, [pc, #544]	; (8006a94 <resetConf+0x328>)
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
    mcfg.serialrx_type = 0;
 800687a:	4b86      	ldr	r3, [pc, #536]	; (8006a94 <resetConf+0x328>)
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    mcfg.spektrum_sat_bind = 0;
 8006882:	4b84      	ldr	r3, [pc, #528]	; (8006a94 <resetConf+0x328>)
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    mcfg.telemetry_provider = TELEMETRY_PROVIDER_FRSKY;
 800688a:	4b82      	ldr	r3, [pc, #520]	; (8006a94 <resetConf+0x328>)
 800688c:	2200      	movs	r2, #0
 800688e:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
    mcfg.telemetry_port = TELEMETRY_PORT_UART;
 8006892:	4b80      	ldr	r3, [pc, #512]	; (8006a94 <resetConf+0x328>)
 8006894:	2200      	movs	r2, #0
 8006896:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
    mcfg.telemetry_switch = 0;
 800689a:	4b7e      	ldr	r3, [pc, #504]	; (8006a94 <resetConf+0x328>)
 800689c:	2200      	movs	r2, #0
 800689e:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
    mcfg.midrc = 1500;
 80068a2:	4b7c      	ldr	r3, [pc, #496]	; (8006a94 <resetConf+0x328>)
 80068a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80068a8:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
    mcfg.mincheck = 1100;
 80068ac:	4b79      	ldr	r3, [pc, #484]	; (8006a94 <resetConf+0x328>)
 80068ae:	f240 424c 	movw	r2, #1100	; 0x44c
 80068b2:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
    mcfg.maxcheck = 1900;
 80068b6:	4b77      	ldr	r3, [pc, #476]	; (8006a94 <resetConf+0x328>)
 80068b8:	f240 726c 	movw	r2, #1900	; 0x76c
 80068bc:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
    mcfg.retarded_arm = 0;       // disable arm/disarm on roll left/right
 80068c0:	4b74      	ldr	r3, [pc, #464]	; (8006a94 <resetConf+0x328>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
    mcfg.disarm_kill_switch = 1; // AUX disarm independently of throttle value
 80068c8:	4b72      	ldr	r3, [pc, #456]	; (8006a94 <resetConf+0x328>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
    mcfg.fw_althold_dir = 1;
 80068d0:	4b70      	ldr	r3, [pc, #448]	; (8006a94 <resetConf+0x328>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
    // Motor/ESC/Servo
    mcfg.minthrottle = 1150;
 80068d8:	4b6e      	ldr	r3, [pc, #440]	; (8006a94 <resetConf+0x328>)
 80068da:	f240 427e 	movw	r2, #1150	; 0x47e
 80068de:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    mcfg.maxthrottle = 1850;
 80068e2:	4b6c      	ldr	r3, [pc, #432]	; (8006a94 <resetConf+0x328>)
 80068e4:	f240 723a 	movw	r2, #1850	; 0x73a
 80068e8:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    mcfg.mincommand = 1000;
 80068ec:	4b69      	ldr	r3, [pc, #420]	; (8006a94 <resetConf+0x328>)
 80068ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068f2:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    mcfg.deadband3d_low = 1406;
 80068f6:	4b67      	ldr	r3, [pc, #412]	; (8006a94 <resetConf+0x328>)
 80068f8:	f240 527e 	movw	r2, #1406	; 0x57e
 80068fc:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
    mcfg.deadband3d_high = 1514;
 8006900:	4b64      	ldr	r3, [pc, #400]	; (8006a94 <resetConf+0x328>)
 8006902:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8006906:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
    mcfg.neutral3d = 1460;
 800690a:	4b62      	ldr	r3, [pc, #392]	; (8006a94 <resetConf+0x328>)
 800690c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006910:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
    mcfg.deadband3d_throttle = 50;
 8006914:	4b5f      	ldr	r3, [pc, #380]	; (8006a94 <resetConf+0x328>)
 8006916:	2232      	movs	r2, #50	; 0x32
 8006918:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
    mcfg.motor_pwm_rate = MOTOR_PWM_RATE;
 800691c:	4b5d      	ldr	r3, [pc, #372]	; (8006a94 <resetConf+0x328>)
 800691e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006922:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
    mcfg.servo_pwm_rate = 50;
 8006926:	4b5b      	ldr	r3, [pc, #364]	; (8006a94 <resetConf+0x328>)
 8006928:	2232      	movs	r2, #50	; 0x32
 800692a:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    // safety features
    mcfg.auto_disarm_board = 5; // auto disarm after 5 sec if motors not started or disarmed
 800692e:	4b59      	ldr	r3, [pc, #356]	; (8006a94 <resetConf+0x328>)
 8006930:	2205      	movs	r2, #5
 8006932:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
    // gps/nav stuff
    mcfg.gps_type = GPS_NMEA;
 8006936:	4b57      	ldr	r3, [pc, #348]	; (8006a94 <resetConf+0x328>)
 8006938:	2200      	movs	r2, #0
 800693a:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
    mcfg.gps_baudrate = GPS_BAUD_115200;
 800693e:	4b55      	ldr	r3, [pc, #340]	; (8006a94 <resetConf+0x328>)
 8006940:	2200      	movs	r2, #0
 8006942:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
    // serial (USART1) baudrate
    mcfg.serial_baudrate = 115200;
 8006946:	4b53      	ldr	r3, [pc, #332]	; (8006a94 <resetConf+0x328>)
 8006948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800694c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    mcfg.softserial_baudrate = 9600;
 8006950:	4b50      	ldr	r3, [pc, #320]	; (8006a94 <resetConf+0x328>)
 8006952:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006956:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    mcfg.softserial_1_inverted = 0;
 800695a:	4b4e      	ldr	r3, [pc, #312]	; (8006a94 <resetConf+0x328>)
 800695c:	2200      	movs	r2, #0
 800695e:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
    mcfg.softserial_2_inverted = 0;
 8006962:	4b4c      	ldr	r3, [pc, #304]	; (8006a94 <resetConf+0x328>)
 8006964:	2200      	movs	r2, #0
 8006966:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
    mcfg.looptime = 3500;
 800696a:	4b4a      	ldr	r3, [pc, #296]	; (8006a94 <resetConf+0x328>)
 800696c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006970:	819a      	strh	r2, [r3, #12]
    mcfg.emf_avoidance = 0;
 8006972:	4b48      	ldr	r3, [pc, #288]	; (8006a94 <resetConf+0x328>)
 8006974:	2200      	movs	r2, #0
 8006976:	739a      	strb	r2, [r3, #14]
    mcfg.rssi_aux_channel = 0;
 8006978:	4b46      	ldr	r3, [pc, #280]	; (8006a94 <resetConf+0x328>)
 800697a:	2200      	movs	r2, #0
 800697c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    mcfg.rssi_aux_max = 1000;
 8006980:	4b44      	ldr	r3, [pc, #272]	; (8006a94 <resetConf+0x328>)
 8006982:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006986:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
    mcfg.rssi_adc_max = 4095;
 800698a:	4b42      	ldr	r3, [pc, #264]	; (8006a94 <resetConf+0x328>)
 800698c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006990:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
    mcfg.rc_channel_count = 8;
 8006994:	4b3f      	ldr	r3, [pc, #252]	; (8006a94 <resetConf+0x328>)
 8006996:	2208      	movs	r2, #8
 8006998:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa

    cfg.pidController = 0;
 800699c:	4b3e      	ldr	r3, [pc, #248]	; (8006a98 <resetConf+0x32c>)
 800699e:	2200      	movs	r2, #0
 80069a0:	701a      	strb	r2, [r3, #0]
    cfg.P8[ROLL] = 40;
 80069a2:	4b3d      	ldr	r3, [pc, #244]	; (8006a98 <resetConf+0x32c>)
 80069a4:	2228      	movs	r2, #40	; 0x28
 80069a6:	705a      	strb	r2, [r3, #1]
    cfg.I8[ROLL] = 30;
 80069a8:	4b3b      	ldr	r3, [pc, #236]	; (8006a98 <resetConf+0x32c>)
 80069aa:	221e      	movs	r2, #30
 80069ac:	72da      	strb	r2, [r3, #11]
    cfg.D8[ROLL] = 23;
 80069ae:	4b3a      	ldr	r3, [pc, #232]	; (8006a98 <resetConf+0x32c>)
 80069b0:	2217      	movs	r2, #23
 80069b2:	755a      	strb	r2, [r3, #21]
    cfg.P8[PITCH] = 40;
 80069b4:	4b38      	ldr	r3, [pc, #224]	; (8006a98 <resetConf+0x32c>)
 80069b6:	2228      	movs	r2, #40	; 0x28
 80069b8:	709a      	strb	r2, [r3, #2]
    cfg.I8[PITCH] = 30;
 80069ba:	4b37      	ldr	r3, [pc, #220]	; (8006a98 <resetConf+0x32c>)
 80069bc:	221e      	movs	r2, #30
 80069be:	731a      	strb	r2, [r3, #12]
    cfg.D8[PITCH] = 23;
 80069c0:	4b35      	ldr	r3, [pc, #212]	; (8006a98 <resetConf+0x32c>)
 80069c2:	2217      	movs	r2, #23
 80069c4:	759a      	strb	r2, [r3, #22]
    cfg.P8[YAW] = 85;
 80069c6:	4b34      	ldr	r3, [pc, #208]	; (8006a98 <resetConf+0x32c>)
 80069c8:	2255      	movs	r2, #85	; 0x55
 80069ca:	70da      	strb	r2, [r3, #3]
    cfg.I8[YAW] = 45;
 80069cc:	4b32      	ldr	r3, [pc, #200]	; (8006a98 <resetConf+0x32c>)
 80069ce:	222d      	movs	r2, #45	; 0x2d
 80069d0:	735a      	strb	r2, [r3, #13]
    cfg.D8[YAW] = 0;
 80069d2:	4b31      	ldr	r3, [pc, #196]	; (8006a98 <resetConf+0x32c>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	75da      	strb	r2, [r3, #23]
    cfg.P8[PIDALT] = 50;
 80069d8:	4b2f      	ldr	r3, [pc, #188]	; (8006a98 <resetConf+0x32c>)
 80069da:	2232      	movs	r2, #50	; 0x32
 80069dc:	711a      	strb	r2, [r3, #4]
    cfg.I8[PIDALT] = 0;
 80069de:	4b2e      	ldr	r3, [pc, #184]	; (8006a98 <resetConf+0x32c>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	739a      	strb	r2, [r3, #14]
    cfg.D8[PIDALT] = 0;
 80069e4:	4b2c      	ldr	r3, [pc, #176]	; (8006a98 <resetConf+0x32c>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	761a      	strb	r2, [r3, #24]
    cfg.P8[PIDPOS] = 11; // POSHOLD_P * 100;
 80069ea:	4b2b      	ldr	r3, [pc, #172]	; (8006a98 <resetConf+0x32c>)
 80069ec:	220b      	movs	r2, #11
 80069ee:	715a      	strb	r2, [r3, #5]
    cfg.I8[PIDPOS] = 0; // POSHOLD_I * 100;
 80069f0:	4b29      	ldr	r3, [pc, #164]	; (8006a98 <resetConf+0x32c>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	73da      	strb	r2, [r3, #15]
    cfg.D8[PIDPOS] = 0;
 80069f6:	4b28      	ldr	r3, [pc, #160]	; (8006a98 <resetConf+0x32c>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	765a      	strb	r2, [r3, #25]
    cfg.P8[PIDPOSR] = 20; // POSHOLD_RATE_P * 10;
 80069fc:	4b26      	ldr	r3, [pc, #152]	; (8006a98 <resetConf+0x32c>)
 80069fe:	2214      	movs	r2, #20
 8006a00:	719a      	strb	r2, [r3, #6]
    cfg.I8[PIDPOSR] = 8; // POSHOLD_RATE_I * 100;
 8006a02:	4b25      	ldr	r3, [pc, #148]	; (8006a98 <resetConf+0x32c>)
 8006a04:	2208      	movs	r2, #8
 8006a06:	741a      	strb	r2, [r3, #16]
    cfg.D8[PIDPOSR] = 45; // POSHOLD_RATE_D * 1000;
 8006a08:	4b23      	ldr	r3, [pc, #140]	; (8006a98 <resetConf+0x32c>)
 8006a0a:	222d      	movs	r2, #45	; 0x2d
 8006a0c:	769a      	strb	r2, [r3, #26]
    cfg.P8[PIDNAVR] = 14; // NAV_P * 10;
 8006a0e:	4b22      	ldr	r3, [pc, #136]	; (8006a98 <resetConf+0x32c>)
 8006a10:	220e      	movs	r2, #14
 8006a12:	71da      	strb	r2, [r3, #7]
    cfg.I8[PIDNAVR] = 20; // NAV_I * 100;
 8006a14:	4b20      	ldr	r3, [pc, #128]	; (8006a98 <resetConf+0x32c>)
 8006a16:	2214      	movs	r2, #20
 8006a18:	745a      	strb	r2, [r3, #17]
    cfg.D8[PIDNAVR] = 80; // NAV_D * 1000;
 8006a1a:	4b1f      	ldr	r3, [pc, #124]	; (8006a98 <resetConf+0x32c>)
 8006a1c:	2250      	movs	r2, #80	; 0x50
 8006a1e:	76da      	strb	r2, [r3, #27]
    cfg.P8[PIDLEVEL] = 90;
 8006a20:	4b1d      	ldr	r3, [pc, #116]	; (8006a98 <resetConf+0x32c>)
 8006a22:	225a      	movs	r2, #90	; 0x5a
 8006a24:	721a      	strb	r2, [r3, #8]
    cfg.I8[PIDLEVEL] = 10;
 8006a26:	4b1c      	ldr	r3, [pc, #112]	; (8006a98 <resetConf+0x32c>)
 8006a28:	220a      	movs	r2, #10
 8006a2a:	749a      	strb	r2, [r3, #18]
    cfg.D8[PIDLEVEL] = 100;
 8006a2c:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <resetConf+0x32c>)
 8006a2e:	2264      	movs	r2, #100	; 0x64
 8006a30:	771a      	strb	r2, [r3, #28]
    cfg.P8[PIDMAG] = 40;
 8006a32:	4b19      	ldr	r3, [pc, #100]	; (8006a98 <resetConf+0x32c>)
 8006a34:	2228      	movs	r2, #40	; 0x28
 8006a36:	725a      	strb	r2, [r3, #9]
    cfg.P8[PIDVEL] = 120;
 8006a38:	4b17      	ldr	r3, [pc, #92]	; (8006a98 <resetConf+0x32c>)
 8006a3a:	2278      	movs	r2, #120	; 0x78
 8006a3c:	729a      	strb	r2, [r3, #10]
    cfg.I8[PIDVEL] = 45;
 8006a3e:	4b16      	ldr	r3, [pc, #88]	; (8006a98 <resetConf+0x32c>)
 8006a40:	222d      	movs	r2, #45	; 0x2d
 8006a42:	751a      	strb	r2, [r3, #20]
    cfg.D8[PIDVEL] = 1;
 8006a44:	4b14      	ldr	r3, [pc, #80]	; (8006a98 <resetConf+0x32c>)
 8006a46:	2201      	movs	r2, #1
 8006a48:	779a      	strb	r2, [r3, #30]
    cfg.rcRate8 = 90;
 8006a4a:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <resetConf+0x32c>)
 8006a4c:	225a      	movs	r2, #90	; 0x5a
 8006a4e:	77da      	strb	r2, [r3, #31]
    cfg.rcExpo8 = 65;
 8006a50:	4b11      	ldr	r3, [pc, #68]	; (8006a98 <resetConf+0x32c>)
 8006a52:	2241      	movs	r2, #65	; 0x41
 8006a54:	f883 2020 	strb.w	r2, [r3, #32]
    cfg.yawRate = 0;
 8006a58:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <resetConf+0x32c>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    cfg.dynThrPID = 0;
 8006a60:	4b0d      	ldr	r3, [pc, #52]	; (8006a98 <resetConf+0x32c>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    cfg.tpa_breakpoint = 1500;
 8006a68:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <resetConf+0x32c>)
 8006a6a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006a6e:	851a      	strh	r2, [r3, #40]	; 0x28
    cfg.thrMid8 = 50;
 8006a70:	4b09      	ldr	r3, [pc, #36]	; (8006a98 <resetConf+0x32c>)
 8006a72:	2232      	movs	r2, #50	; 0x32
 8006a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    cfg.thrExpo8 = 0;
 8006a78:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <resetConf+0x32c>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    // for (i = 0; i < CHECKBOXITEMS; i++)
    //     cfg.activate[i] = 0;
    cfg.angleTrim[0] = 0;
 8006a80:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <resetConf+0x32c>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	859a      	strh	r2, [r3, #44]	; 0x2c
    cfg.angleTrim[1] = 0;
 8006a86:	4b04      	ldr	r3, [pc, #16]	; (8006a98 <resetConf+0x32c>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006a8c:	e008      	b.n	8006aa0 <resetConf+0x334>
 8006a8e:	bf00      	nop
 8006a90:	0802705c 	.word	0x0802705c
 8006a94:	200008e8 	.word	0x200008e8
 8006a98:	20000e54 	.word	0x20000e54
 8006a9c:	200016dc 	.word	0x200016dc
    cfg.locked_in = 0;
 8006aa0:	4b8e      	ldr	r3, [pc, #568]	; (8006cdc <resetConf+0x570>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    cfg.mag_declination = 0;    // For example, -6deg 37min, = -637 Japan, format is [sign]dddmm (degreesminutes) default is zero.
 8006aa8:	4b8c      	ldr	r3, [pc, #560]	; (8006cdc <resetConf+0x570>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    cfg.acc_lpf_factor = 4;
 8006aae:	4b8b      	ldr	r3, [pc, #556]	; (8006cdc <resetConf+0x570>)
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    cfg.accz_deadband = 40;
 8006ab6:	4b89      	ldr	r3, [pc, #548]	; (8006cdc <resetConf+0x570>)
 8006ab8:	2228      	movs	r2, #40	; 0x28
 8006aba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    cfg.accxy_deadband = 40;
 8006abe:	4b87      	ldr	r3, [pc, #540]	; (8006cdc <resetConf+0x570>)
 8006ac0:	2228      	movs	r2, #40	; 0x28
 8006ac2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    cfg.baro_tab_size = 21;
 8006ac6:	4b85      	ldr	r3, [pc, #532]	; (8006cdc <resetConf+0x570>)
 8006ac8:	2215      	movs	r2, #21
 8006aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    cfg.baro_noise_lpf = 0.6f;
 8006ace:	4b83      	ldr	r3, [pc, #524]	; (8006cdc <resetConf+0x570>)
 8006ad0:	4a83      	ldr	r2, [pc, #524]	; (8006ce0 <resetConf+0x574>)
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38
    cfg.baro_cf_vel = 0.985f;
 8006ad4:	4b81      	ldr	r3, [pc, #516]	; (8006cdc <resetConf+0x570>)
 8006ad6:	4a83      	ldr	r2, [pc, #524]	; (8006ce4 <resetConf+0x578>)
 8006ad8:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg.baro_cf_alt = 0.965f;
 8006ada:	4b80      	ldr	r3, [pc, #512]	; (8006cdc <resetConf+0x570>)
 8006adc:	4a82      	ldr	r2, [pc, #520]	; (8006ce8 <resetConf+0x57c>)
 8006ade:	641a      	str	r2, [r3, #64]	; 0x40
    cfg.accz_lpf_cutoff = 5.0f;
 8006ae0:	4b7e      	ldr	r3, [pc, #504]	; (8006cdc <resetConf+0x570>)
 8006ae2:	4a82      	ldr	r2, [pc, #520]	; (8006cec <resetConf+0x580>)
 8006ae4:	645a      	str	r2, [r3, #68]	; 0x44
    cfg.acc_unarmedcal = 1;
 8006ae6:	4b7d      	ldr	r3, [pc, #500]	; (8006cdc <resetConf+0x570>)
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    cfg.small_angle = 25;
 8006aee:	4b7b      	ldr	r3, [pc, #492]	; (8006cdc <resetConf+0x570>)
 8006af0:	2219      	movs	r2, #25
 8006af2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    // Radio
    parseRcChannels( "AETR123456789LMNOP" );    //18 channels max
 8006af6:	487e      	ldr	r0, [pc, #504]	; (8006cf0 <resetConf+0x584>)
 8006af8:	f7ff fbba 	bl	8006270 <parseRcChannels>
    cfg.deadband = 0;
 8006afc:	4b77      	ldr	r3, [pc, #476]	; (8006cdc <resetConf+0x570>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    cfg.yawdeadband = 0;
 8006b04:	4b75      	ldr	r3, [pc, #468]	; (8006cdc <resetConf+0x570>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    cfg.alt_hold_throttle_neutral = 40;
 8006b0c:	4b73      	ldr	r3, [pc, #460]	; (8006cdc <resetConf+0x570>)
 8006b0e:	2228      	movs	r2, #40	; 0x28
 8006b10:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    cfg.alt_hold_fast_change = 1;
 8006b14:	4b71      	ldr	r3, [pc, #452]	; (8006cdc <resetConf+0x570>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    cfg.throttle_correction_value = 0;      // could 10 with althold or 40 for fpv
 8006b1c:	4b6f      	ldr	r3, [pc, #444]	; (8006cdc <resetConf+0x570>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    cfg.throttle_correction_angle = 800;    // could be 80.0 deg with atlhold or 45.0 for fpv
 8006b24:	4b6d      	ldr	r3, [pc, #436]	; (8006cdc <resetConf+0x570>)
 8006b26:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006b2a:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

    // Failsafe Variables
    cfg.failsafe_delay = 10;                // 1sec
 8006b2e:	4b6b      	ldr	r3, [pc, #428]	; (8006cdc <resetConf+0x570>)
 8006b30:	220a      	movs	r2, #10
 8006b32:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    cfg.failsafe_off_delay = 200;           // 20sec
 8006b36:	4b69      	ldr	r3, [pc, #420]	; (8006cdc <resetConf+0x570>)
 8006b38:	22c8      	movs	r2, #200	; 0xc8
 8006b3a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    cfg.failsafe_throttle = 1200;           // decent default which should always be below hover throttle for people.
 8006b3e:	4b67      	ldr	r3, [pc, #412]	; (8006cdc <resetConf+0x570>)
 8006b40:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006b44:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    cfg.failsafe_detect_threshold = 985;    // any of first 4 channels below this value will trigger failsafe
 8006b48:	4b64      	ldr	r3, [pc, #400]	; (8006cdc <resetConf+0x570>)
 8006b4a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006b4e:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    // servos
    for (i = 0; i < 8; i++) {
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	e032      	b.n	8006bbe <resetConf+0x452>
        cfg.servoConf[i].min = 1020;
 8006b58:	4960      	ldr	r1, [pc, #384]	; (8006cdc <resetConf+0x570>)
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	440b      	add	r3, r1
 8006b66:	33b8      	adds	r3, #184	; 0xb8
 8006b68:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8006b6c:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].max = 2000;
 8006b6e:	495b      	ldr	r1, [pc, #364]	; (8006cdc <resetConf+0x570>)
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	440b      	add	r3, r1
 8006b7c:	33ba      	adds	r3, #186	; 0xba
 8006b7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b82:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].middle = 1500;
 8006b84:	4955      	ldr	r1, [pc, #340]	; (8006cdc <resetConf+0x570>)
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	440b      	add	r3, r1
 8006b92:	33bc      	adds	r3, #188	; 0xbc
 8006b94:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006b98:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].rate = servoRates[i];
 8006b9a:	1d3a      	adds	r2, r7, #4
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f993 0000 	ldrsb.w	r0, [r3]
 8006ba4:	494d      	ldr	r1, [pc, #308]	; (8006cdc <resetConf+0x570>)
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	440b      	add	r3, r1
 8006bb2:	33be      	adds	r3, #190	; 0xbe
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++) {
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b07      	cmp	r3, #7
 8006bc2:	ddc9      	ble.n	8006b58 <resetConf+0x3ec>
    }

    cfg.yaw_direction = 1;
 8006bc4:	4b45      	ldr	r3, [pc, #276]	; (8006cdc <resetConf+0x570>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    cfg.tri_unarmed_servo = 1;
 8006bcc:	4b43      	ldr	r3, [pc, #268]	; (8006cdc <resetConf+0x570>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f

    // gimbal
    cfg.gimbal_flags = GIMBAL_NORMAL;
 8006bd4:	4b41      	ldr	r3, [pc, #260]	; (8006cdc <resetConf+0x570>)
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // gps/nav stuff
    cfg.gps_wp_radius = 200;
 8006bdc:	4b3f      	ldr	r3, [pc, #252]	; (8006cdc <resetConf+0x570>)
 8006bde:	22c8      	movs	r2, #200	; 0xc8
 8006be0:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
    cfg.gps_lpf = 20;
 8006be4:	4b3d      	ldr	r3, [pc, #244]	; (8006cdc <resetConf+0x570>)
 8006be6:	2214      	movs	r2, #20
 8006be8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    cfg.nav_slew_rate = 30;
 8006bec:	4b3b      	ldr	r3, [pc, #236]	; (8006cdc <resetConf+0x570>)
 8006bee:	221e      	movs	r2, #30
 8006bf0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    cfg.nav_controls_heading = 1;
 8006bf4:	4b39      	ldr	r3, [pc, #228]	; (8006cdc <resetConf+0x570>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    cfg.nav_speed_min = 100;
 8006bfc:	4b37      	ldr	r3, [pc, #220]	; (8006cdc <resetConf+0x570>)
 8006bfe:	2264      	movs	r2, #100	; 0x64
 8006c00:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
    cfg.nav_speed_max = 300;
 8006c04:	4b35      	ldr	r3, [pc, #212]	; (8006cdc <resetConf+0x570>)
 8006c06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006c0a:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
    cfg.ap_mode = 40;
 8006c0e:	4b33      	ldr	r3, [pc, #204]	; (8006cdc <resetConf+0x570>)
 8006c10:	2228      	movs	r2, #40	; 0x28
 8006c12:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
    // fw stuff
    cfg.fw_gps_maxcorr = 20;
 8006c16:	4b31      	ldr	r3, [pc, #196]	; (8006cdc <resetConf+0x570>)
 8006c18:	2214      	movs	r2, #20
 8006c1a:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    cfg.fw_gps_rudder = 15;
 8006c1e:	4b2f      	ldr	r3, [pc, #188]	; (8006cdc <resetConf+0x570>)
 8006c20:	220f      	movs	r2, #15
 8006c22:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    cfg.fw_gps_maxclimb = 15;
 8006c26:	4b2d      	ldr	r3, [pc, #180]	; (8006cdc <resetConf+0x570>)
 8006c28:	220f      	movs	r2, #15
 8006c2a:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    cfg.fw_gps_maxdive = 15;
 8006c2e:	4b2b      	ldr	r3, [pc, #172]	; (8006cdc <resetConf+0x570>)
 8006c30:	220f      	movs	r2, #15
 8006c32:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
    cfg.fw_climb_throttle = 1900;
 8006c36:	4b29      	ldr	r3, [pc, #164]	; (8006cdc <resetConf+0x570>)
 8006c38:	f240 726c 	movw	r2, #1900	; 0x76c
 8006c3c:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
    cfg.fw_cruise_throttle = 1500;
 8006c40:	4b26      	ldr	r3, [pc, #152]	; (8006cdc <resetConf+0x570>)
 8006c42:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006c46:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
    cfg.fw_idle_throttle = 1300;
 8006c4a:	4b24      	ldr	r3, [pc, #144]	; (8006cdc <resetConf+0x570>)
 8006c4c:	f240 5214 	movw	r2, #1300	; 0x514
 8006c50:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
    cfg.fw_scaler_throttle = 8;
 8006c54:	4b21      	ldr	r3, [pc, #132]	; (8006cdc <resetConf+0x570>)
 8006c56:	2208      	movs	r2, #8
 8006c58:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
    cfg.fw_roll_comp = 100;
 8006c5c:	4b1f      	ldr	r3, [pc, #124]	; (8006cdc <resetConf+0x570>)
 8006c5e:	2264      	movs	r2, #100	; 0x64
 8006c60:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    cfg.fw_cruise_distance = 500;
 8006c64:	4b1d      	ldr	r3, [pc, #116]	; (8006cdc <resetConf+0x570>)
 8006c66:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006c6a:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
    cfg.fw_rth_alt = 50;
 8006c6e:	4b1b      	ldr	r3, [pc, #108]	; (8006cdc <resetConf+0x570>)
 8006c70:	2232      	movs	r2, #50	; 0x32
 8006c72:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    // control stuff
    mcfg.reboot_character = 'R';
 8006c76:	4b1f      	ldr	r3, [pc, #124]	; (8006cf4 <resetConf+0x588>)
 8006c78:	2252      	movs	r2, #82	; 0x52
 8006c7a:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569

    // custom mixer. clear by defaults.
    for (i = 0; i < MAX_MOTORS; i++)
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	e00a      	b.n	8006c9a <resetConf+0x52e>
        mcfg.customMixer[i].throttle = 0.0f;
 8006c84:	4a1b      	ldr	r2, [pc, #108]	; (8006cf4 <resetConf+0x588>)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b0b      	cmp	r3, #11
 8006c9e:	ddf1      	ble.n	8006c84 <resetConf+0x518>

    // copy default config into all 3 profiles
    for (i = 0; i < 3; i++)
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	e011      	b.n	8006cca <resetConf+0x55e>
        memcpy(&mcfg.profile[i], &cfg, sizeof(config_t));
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006cac:	fb02 f303 	mul.w	r3, r2, r3
 8006cb0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006cb4:	4a0f      	ldr	r2, [pc, #60]	; (8006cf4 <resetConf+0x588>)
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006cbc:	4907      	ldr	r1, [pc, #28]	; (8006cdc <resetConf+0x570>)
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f01b fedc 	bl	8022a7c <memcpy>
    for (i = 0; i < 3; i++)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	ddea      	ble.n	8006ca6 <resetConf+0x53a>
}
 8006cd0:	bf00      	nop
 8006cd2:	bf00      	nop
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000e54 	.word	0x20000e54
 8006ce0:	3f19999a 	.word	0x3f19999a
 8006ce4:	3f7c28f6 	.word	0x3f7c28f6
 8006ce8:	3f770a3d 	.word	0x3f770a3d
 8006cec:	40a00000 	.word	0x40a00000
 8006cf0:	08027048 	.word	0x08027048
 8006cf4:	200008e8 	.word	0x200008e8

08006cf8 <sensors>:

bool sensors(uint32_t mask)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
    return (enabledSensors & mask) != 0;
 8006d00:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <sensors+0x28>)
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4013      	ands	r3, r2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bf14      	ite	ne
 8006d0c:	2301      	movne	r3, #1
 8006d0e:	2300      	moveq	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	20000f8c 	.word	0x20000f8c

08006d24 <sensorsSet>:

void sensorsSet(uint32_t mask)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
    enabledSensors |= mask;
 8006d2c:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <sensorsSet+0x20>)
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	4a03      	ldr	r2, [pc, #12]	; (8006d44 <sensorsSet+0x20>)
 8006d36:	6013      	str	r3, [r2, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	20000f8c 	.word	0x20000f8c

08006d48 <sensorsClear>:

void sensorsClear(uint32_t mask)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
    enabledSensors &= ~(mask);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	43da      	mvns	r2, r3
 8006d54:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <sensorsClear+0x24>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	4a04      	ldr	r2, [pc, #16]	; (8006d6c <sensorsClear+0x24>)
 8006d5c:	6013      	str	r3, [r2, #0]
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20000f8c 	.word	0x20000f8c

08006d70 <sensorsMask>:

uint32_t sensorsMask(void)
{
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
    return enabledSensors;
 8006d74:	4b03      	ldr	r3, [pc, #12]	; (8006d84 <sensorsMask+0x14>)
 8006d76:	681b      	ldr	r3, [r3, #0]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20000f8c 	.word	0x20000f8c

08006d88 <feature>:

bool feature(uint32_t mask)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
    return (mcfg.enabledFeatures & mask) != 0;
 8006d90:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <feature+0x28>)
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4013      	ands	r3, r2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bf14      	ite	ne
 8006d9c:	2301      	movne	r3, #1
 8006d9e:	2300      	moveq	r3, #0
 8006da0:	b2db      	uxtb	r3, r3
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	200008e8 	.word	0x200008e8

08006db4 <featureSet>:

void featureSet(uint32_t mask)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures |= mask;
 8006dbc:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <featureSet+0x20>)
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	4a03      	ldr	r2, [pc, #12]	; (8006dd4 <featureSet+0x20>)
 8006dc6:	6093      	str	r3, [r2, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	200008e8 	.word	0x200008e8

08006dd8 <featureClear>:

void featureClear(uint32_t mask)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures &= ~(mask);
 8006de0:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <featureClear+0x24>)
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	43db      	mvns	r3, r3
 8006de8:	4013      	ands	r3, r2
 8006dea:	4a04      	ldr	r2, [pc, #16]	; (8006dfc <featureClear+0x24>)
 8006dec:	6093      	str	r3, [r2, #8]
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	200008e8 	.word	0x200008e8

08006e00 <featureClearAll>:

void featureClearAll()
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
    mcfg.enabledFeatures = 0;
 8006e04:	4b03      	ldr	r3, [pc, #12]	; (8006e14 <featureClearAll+0x14>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	609a      	str	r2, [r3, #8]
}
 8006e0a:	bf00      	nop
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	200008e8 	.word	0x200008e8

08006e18 <featureMask>:

uint32_t featureMask(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
    return mcfg.enabledFeatures;
 8006e1c:	4b03      	ldr	r3, [pc, #12]	; (8006e2c <featureMask+0x14>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	200008e8 	.word	0x200008e8

08006e30 <fw_nav_reset>:
static int16_t speedBoost;
static int16_t altHist[GPS_UPD_HZ + 1];     // shift register
static int16_t navDif[GPS_UPD_HZ + 1];      // shift register

void fw_nav_reset(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
    uint8_t i;

    navErrorI = 0;
 8006e36:	4b15      	ldr	r3, [pc, #84]	; (8006e8c <fw_nav_reset+0x5c>)
 8006e38:	f04f 0200 	mov.w	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
    altErrorI = 0;
 8006e3e:	4b14      	ldr	r3, [pc, #80]	; (8006e90 <fw_nav_reset+0x60>)
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]
    lastAltDiff = 0;
 8006e46:	4b13      	ldr	r3, [pc, #76]	; (8006e94 <fw_nav_reset+0x64>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	801a      	strh	r2, [r3, #0]
    lastnavDiff = 0;
 8006e4c:	4b12      	ldr	r3, [pc, #72]	; (8006e98 <fw_nav_reset+0x68>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	801a      	strh	r2, [r3, #0]
    speedBoost = 0;
 8006e52:	4b12      	ldr	r3, [pc, #72]	; (8006e9c <fw_nav_reset+0x6c>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	801a      	strh	r2, [r3, #0]

    for (i = 0; i < GPS_UPD_HZ; i++) {
 8006e58:	2300      	movs	r3, #0
 8006e5a:	71fb      	strb	r3, [r7, #7]
 8006e5c:	e00c      	b.n	8006e78 <fw_nav_reset+0x48>
        altHist[i] = 0;
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	4a0f      	ldr	r2, [pc, #60]	; (8006ea0 <fw_nav_reset+0x70>)
 8006e62:	2100      	movs	r1, #0
 8006e64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navDif[i] = 0;
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	4a0e      	ldr	r2, [pc, #56]	; (8006ea4 <fw_nav_reset+0x74>)
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < GPS_UPD_HZ; i++) {
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	3301      	adds	r3, #1
 8006e76:	71fb      	strb	r3, [r7, #7]
 8006e78:	79fb      	ldrb	r3, [r7, #7]
 8006e7a:	2b04      	cmp	r3, #4
 8006e7c:	d9ef      	bls.n	8006e5e <fw_nav_reset+0x2e>
    }
}
 8006e7e:	bf00      	nop
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	20000f94 	.word	0x20000f94
 8006e90:	20000f98 	.word	0x20000f98
 8006e94:	20000f9c 	.word	0x20000f9c
 8006e98:	20000f9e 	.word	0x20000f9e
 8006e9c:	20000fa0 	.word	0x20000fa0
 8006ea0:	20000fa4 	.word	0x20000fa4
 8006ea4:	20000fb0 	.word	0x20000fb0

08006ea8 <fw_FlyTo>:

void fw_FlyTo(void) // PatrikE CruiseMode version
{
 8006ea8:	b5b0      	push	{r4, r5, r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
    float wp_lat_diff, wp_lon_diff, scaler;
    int32_t holdHeading = GPS_ground_course / 10;
 8006eae:	4b48      	ldr	r3, [pc, #288]	; (8006fd0 <fw_FlyTo+0x128>)
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	4a48      	ldr	r2, [pc, #288]	; (8006fd4 <fw_FlyTo+0x12c>)
 8006eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb8:	08db      	lsrs	r3, r3, #3
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	60fb      	str	r3, [r7, #12]
    if (holdHeading > 180)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2bb4      	cmp	r3, #180	; 0xb4
 8006ec2:	dd03      	ble.n	8006ecc <fw_FlyTo+0x24>
        holdHeading -= 360;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006eca:	60fb      	str	r3, [r7, #12]
    scaler = (GEO_SKALEFACT / GPS_scaleLonDown) * cfg.fw_cruise_distance;
 8006ecc:	4b42      	ldr	r3, [pc, #264]	; (8006fd8 <fw_FlyTo+0x130>)
 8006ece:	edd3 7a00 	vldr	s15, [r3]
 8006ed2:	eddf 6a42 	vldr	s13, [pc, #264]	; 8006fdc <fw_FlyTo+0x134>
 8006ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eda:	4b41      	ldr	r3, [pc, #260]	; (8006fe0 <fw_FlyTo+0x138>)
 8006edc:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 8006ee0:	ee07 3a90 	vmov	s15, r3
 8006ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eec:	edc7 7a02 	vstr	s15, [r7, #8]
    wp_lat_diff = cos(holdHeading * 0.0174532925f);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006efa:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8006fe4 <fw_FlyTo+0x13c>
 8006efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f02:	ee17 0a90 	vmov	r0, s15
 8006f06:	f7f9 fad3 	bl	80004b0 <__aeabi_f2d>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	ec43 2b10 	vmov	d0, r2, r3
 8006f12:	f01b fff5 	bl	8022f00 <cos>
 8006f16:	ec53 2b10 	vmov	r2, r3, d0
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	f7f9 fe01 	bl	8000b24 <__aeabi_d2f>
 8006f22:	4603      	mov	r3, r0
 8006f24:	607b      	str	r3, [r7, #4]
    wp_lon_diff = sin(holdHeading * 0.0174532925f) * GPS_scaleLonDown;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	ee07 3a90 	vmov	s15, r3
 8006f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f30:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006fe4 <fw_FlyTo+0x13c>
 8006f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f38:	ee17 0a90 	vmov	r0, s15
 8006f3c:	f7f9 fab8 	bl	80004b0 <__aeabi_f2d>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	ec43 2b10 	vmov	d0, r2, r3
 8006f48:	f01c f82e 	bl	8022fa8 <sin>
 8006f4c:	ec55 4b10 	vmov	r4, r5, d0
 8006f50:	4b21      	ldr	r3, [pc, #132]	; (8006fd8 <fw_FlyTo+0x130>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7f9 faab 	bl	80004b0 <__aeabi_f2d>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4629      	mov	r1, r5
 8006f62:	f7f9 fafd 	bl	8000560 <__aeabi_dmul>
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	f7f9 fdd9 	bl	8000b24 <__aeabi_d2f>
 8006f72:	4603      	mov	r3, r0
 8006f74:	603b      	str	r3, [r7, #0]
    GPS_WP[LAT] += wp_lat_diff * scaler;
 8006f76:	4b1c      	ldr	r3, [pc, #112]	; (8006fe8 <fw_FlyTo+0x140>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f82:	edd7 6a01 	vldr	s13, [r7, #4]
 8006f86:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f96:	ee17 2a90 	vmov	r2, s15
 8006f9a:	4b13      	ldr	r3, [pc, #76]	; (8006fe8 <fw_FlyTo+0x140>)
 8006f9c:	601a      	str	r2, [r3, #0]
    GPS_WP[LON] += wp_lon_diff * scaler;
 8006f9e:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <fw_FlyTo+0x140>)
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006faa:	edd7 6a00 	vldr	s13, [r7]
 8006fae:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fbe:	ee17 2a90 	vmov	r2, s15
 8006fc2:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <fw_FlyTo+0x140>)
 8006fc4:	605a      	str	r2, [r3, #4]
}
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	200017ea 	.word	0x200017ea
 8006fd4:	cccccccd 	.word	0xcccccccd
 8006fd8:	20000028 	.word	0x20000028
 8006fdc:	42b3a9fc 	.word	0x42b3a9fc
 8006fe0:	20000e54 	.word	0x20000e54
 8006fe4:	3c8efa35 	.word	0x3c8efa35
 8006fe8:	20001380 	.word	0x20001380

08006fec <fw_nav>:

void fw_nav(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	; 0x28
 8006ff0:	af00      	add	r7, sp, #0
    int16_t GPS_Heading = GPS_ground_course;    // Store current bearing
 8006ff2:	4b56      	ldr	r3, [pc, #344]	; (800714c <fw_nav+0x160>)
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	843b      	strh	r3, [r7, #32]
    int16_t Current_Heading;                    // Store current bearing
    int16_t altDiff = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	83fb      	strh	r3, [r7, #30]
    uint8_t RTH_Alt = cfg.fw_rth_alt;           // Min Altitude to keep during RTH. (Max 200m)
 8006ffc:	4b54      	ldr	r3, [pc, #336]	; (8007150 <fw_nav+0x164>)
 8006ffe:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8007002:	777b      	strb	r3, [r7, #29]
    int16_t delta[2] = { 0, 0 };                // D-Term
 8007004:	2300      	movs	r3, #0
 8007006:	80bb      	strh	r3, [r7, #4]
 8007008:	2300      	movs	r3, #0
 800700a:	80fb      	strh	r3, [r7, #6]
    static int16_t NAV_deltaSum, ALT_deltaSum, GPS_FwTarget, GPS_AltErr, NAV_Thro;
    int16_t TX_Thro = rcData[THROTTLE];         // Read and store Throttle pos.
 800700c:	4b51      	ldr	r3, [pc, #324]	; (8007154 <fw_nav+0x168>)
 800700e:	88db      	ldrh	r3, [r3, #6]
 8007010:	837b      	strh	r3, [r7, #26]
    // Nav timer
    static uint32_t gpsTimer = 0;
    static uint16_t gpsFreq = 1000 / GPS_UPD_HZ;    // 5HZ 200ms DT

    // Calculated Altitude over home in meters
    int16_t currAlt = GPS_altitude - GPS_home[ALT];         // GPS
 8007012:	4b51      	ldr	r3, [pc, #324]	; (8007158 <fw_nav+0x16c>)
 8007014:	881a      	ldrh	r2, [r3, #0]
 8007016:	4b51      	ldr	r3, [pc, #324]	; (800715c <fw_nav+0x170>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	b29b      	uxth	r3, r3
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	b29b      	uxth	r3, r3
 8007020:	833b      	strh	r3, [r7, #24]
    int16_t navTargetAlt = GPS_hold[ALT] - GPS_home[ALT];   // Diff from homeAlt.
 8007022:	4b4f      	ldr	r3, [pc, #316]	; (8007160 <fw_nav+0x174>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	b29a      	uxth	r2, r3
 8007028:	4b4c      	ldr	r3, [pc, #304]	; (800715c <fw_nav+0x170>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	b29b      	uxth	r3, r3
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	b29b      	uxth	r3, r3
 8007032:	82fb      	strh	r3, [r7, #22]

    // Handles ReSetting RTH alt if rth is enabled to low!
    if (f.CLIMBOUT_FW && currAlt < RTH_Alt)
 8007034:	4b4b      	ldr	r3, [pc, #300]	; (8007164 <fw_nav+0x178>)
 8007036:	7cdb      	ldrb	r3, [r3, #19]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <fw_nav+0x66>
 800703c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007040:	7f7b      	ldrb	r3, [r7, #29]
 8007042:	429a      	cmp	r2, r3
 8007044:	da05      	bge.n	8007052 <fw_nav+0x66>
        GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;
 8007046:	4b45      	ldr	r3, [pc, #276]	; (800715c <fw_nav+0x170>)
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	7f7b      	ldrb	r3, [r7, #29]
 800704c:	4413      	add	r3, r2
 800704e:	4a44      	ldr	r2, [pc, #272]	; (8007160 <fw_nav+0x174>)
 8007050:	6093      	str	r3, [r2, #8]

    // Wrap GPS_Heading 1800
    GPS_Heading = wrap_18000(GPS_Heading * 10) / 10;
 8007052:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	4618      	mov	r0, r3
 8007060:	f002 fb10 	bl	8009684 <wrap_18000>
 8007064:	4603      	mov	r3, r0
 8007066:	4a40      	ldr	r2, [pc, #256]	; (8007168 <fw_nav+0x17c>)
 8007068:	fb82 1203 	smull	r1, r2, r2, r3
 800706c:	1092      	asrs	r2, r2, #2
 800706e:	17db      	asrs	r3, r3, #31
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	843b      	strh	r3, [r7, #32]

    // Only use MAG if Mag and GPS_Heading aligns
    if (sensors(SENSOR_MAG)) {
 8007074:	2008      	movs	r0, #8
 8007076:	f7ff fe3f 	bl	8006cf8 <sensors>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d024      	beq.n	80070ca <fw_nav+0xde>
        if (abs(heading - (GPS_Heading / 10)) > 10 && GPS_speed > 200)
 8007080:	4b3a      	ldr	r3, [pc, #232]	; (800716c <fw_nav+0x180>)
 8007082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007086:	4619      	mov	r1, r3
 8007088:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800708c:	4a36      	ldr	r2, [pc, #216]	; (8007168 <fw_nav+0x17c>)
 800708e:	fb82 0203 	smull	r0, r2, r2, r3
 8007092:	1092      	asrs	r2, r2, #2
 8007094:	17db      	asrs	r3, r3, #31
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	b21b      	sxth	r3, r3
 800709a:	1acb      	subs	r3, r1, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	bfb8      	it	lt
 80070a0:	425b      	neglt	r3, r3
 80070a2:	2b0a      	cmp	r3, #10
 80070a4:	dd0d      	ble.n	80070c2 <fw_nav+0xd6>
 80070a6:	4b32      	ldr	r3, [pc, #200]	; (8007170 <fw_nav+0x184>)
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	2bc8      	cmp	r3, #200	; 0xc8
 80070ac:	d909      	bls.n	80070c2 <fw_nav+0xd6>
            Current_Heading = GPS_Heading / 10;
 80070ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80070b2:	4a2d      	ldr	r2, [pc, #180]	; (8007168 <fw_nav+0x17c>)
 80070b4:	fb82 1203 	smull	r1, r2, r2, r3
 80070b8:	1092      	asrs	r2, r2, #2
 80070ba:	17db      	asrs	r3, r3, #31
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80070c0:	e00c      	b.n	80070dc <fw_nav+0xf0>
        else
            Current_Heading = heading;
 80070c2:	4b2a      	ldr	r3, [pc, #168]	; (800716c <fw_nav+0x180>)
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80070c8:	e008      	b.n	80070dc <fw_nav+0xf0>
    } else
        Current_Heading = GPS_Heading / 10;
 80070ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80070ce:	4a26      	ldr	r2, [pc, #152]	; (8007168 <fw_nav+0x17c>)
 80070d0:	fb82 1203 	smull	r1, r2, r2, r3
 80070d4:	1092      	asrs	r2, r2, #2
 80070d6:	17db      	asrs	r3, r3, #31
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	84fb      	strh	r3, [r7, #38]	; 0x26

    // Calculate Navigation errors
    GPS_FwTarget = nav_bearing / 100;
 80070dc:	4b25      	ldr	r3, [pc, #148]	; (8007174 <fw_nav+0x188>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a25      	ldr	r2, [pc, #148]	; (8007178 <fw_nav+0x18c>)
 80070e2:	fb82 1203 	smull	r1, r2, r2, r3
 80070e6:	1152      	asrs	r2, r2, #5
 80070e8:	17db      	asrs	r3, r3, #31
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	b21a      	sxth	r2, r3
 80070ee:	4b23      	ldr	r3, [pc, #140]	; (800717c <fw_nav+0x190>)
 80070f0:	801a      	strh	r2, [r3, #0]
    navDiff = GPS_FwTarget - Current_Heading;   // Navigation Error
 80070f2:	4b22      	ldr	r3, [pc, #136]	; (800717c <fw_nav+0x190>)
 80070f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	b29b      	uxth	r3, r3
 8007100:	84bb      	strh	r3, [r7, #36]	; 0x24
    GPS_AltErr = currAlt - navTargetAlt;        // Altitude error Negative means you're to low
 8007102:	8b3a      	ldrh	r2, [r7, #24]
 8007104:	8afb      	ldrh	r3, [r7, #22]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	b29b      	uxth	r3, r3
 800710a:	b21a      	sxth	r2, r3
 800710c:	4b1c      	ldr	r3, [pc, #112]	; (8007180 <fw_nav+0x194>)
 800710e:	801a      	strh	r2, [r3, #0]

    // Start of NavTimer
    if (pif_cumulative_timer1ms - gpsTimer >= gpsFreq) {
 8007110:	4b1c      	ldr	r3, [pc, #112]	; (8007184 <fw_nav+0x198>)
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	4b1c      	ldr	r3, [pc, #112]	; (8007188 <fw_nav+0x19c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	4a1c      	ldr	r2, [pc, #112]	; (800718c <fw_nav+0x1a0>)
 800711c:	8812      	ldrh	r2, [r2, #0]
 800711e:	4293      	cmp	r3, r2
 8007120:	f0c0 83e9 	bcc.w	80078f6 <fw_nav+0x90a>
        gpsTimer = pif_cumulative_timer1ms;
 8007124:	4b17      	ldr	r3, [pc, #92]	; (8007184 <fw_nav+0x198>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a17      	ldr	r2, [pc, #92]	; (8007188 <fw_nav+0x19c>)
 800712a:	6013      	str	r3, [r2, #0]

        // Throttle control
        // Deadpan for throttle at correct Alt.
        if (abs(GPS_AltErr) < 1) // Just cruise along in deadpan.
 800712c:	4b14      	ldr	r3, [pc, #80]	; (8007180 <fw_nav+0x194>)
 800712e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007132:	2b00      	cmp	r3, #0
 8007134:	bfb8      	it	lt
 8007136:	425b      	neglt	r3, r3
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d12a      	bne.n	8007194 <fw_nav+0x1a8>
            NAV_Thro = cfg.fw_cruise_throttle;
 800713e:	4b04      	ldr	r3, [pc, #16]	; (8007150 <fw_nav+0x164>)
 8007140:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8007144:	b21a      	sxth	r2, r3
 8007146:	4b12      	ldr	r3, [pc, #72]	; (8007190 <fw_nav+0x1a4>)
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e03f      	b.n	80071cc <fw_nav+0x1e0>
 800714c:	200017ea 	.word	0x200017ea
 8007150:	20000e54 	.word	0x20000e54
 8007154:	2000172c 	.word	0x2000172c
 8007158:	200017de 	.word	0x200017de
 800715c:	200017c0 	.word	0x200017c0
 8007160:	200017cc 	.word	0x200017cc
 8007164:	200016f4 	.word	0x200016f4
 8007168:	66666667 	.word	0x66666667
 800716c:	200019c0 	.word	0x200019c0
 8007170:	200017e0 	.word	0x200017e0
 8007174:	200013e8 	.word	0x200013e8
 8007178:	51eb851f 	.word	0x51eb851f
 800717c:	20000fbc 	.word	0x20000fbc
 8007180:	20000fbe 	.word	0x20000fbe
 8007184:	20001c24 	.word	0x20001c24
 8007188:	20000fc0 	.word	0x20000fc0
 800718c:	20000026 	.word	0x20000026
 8007190:	20000fc4 	.word	0x20000fc4
        else
            // Add AltitudeError  and scale up with a factor to throttle
            NAV_Thro = constrain(cfg.fw_cruise_throttle - (GPS_AltErr * cfg.fw_scaler_throttle), cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 8007194:	4b99      	ldr	r3, [pc, #612]	; (80073fc <fw_nav+0x410>)
 8007196:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 800719a:	461a      	mov	r2, r3
 800719c:	4b98      	ldr	r3, [pc, #608]	; (8007400 <fw_nav+0x414>)
 800719e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071a2:	4619      	mov	r1, r3
 80071a4:	4b95      	ldr	r3, [pc, #596]	; (80073fc <fw_nav+0x410>)
 80071a6:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80071aa:	fb01 f303 	mul.w	r3, r1, r3
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	4a92      	ldr	r2, [pc, #584]	; (80073fc <fw_nav+0x410>)
 80071b2:	f8b2 212e 	ldrh.w	r2, [r2, #302]	; 0x12e
 80071b6:	4611      	mov	r1, r2
 80071b8:	4a90      	ldr	r2, [pc, #576]	; (80073fc <fw_nav+0x410>)
 80071ba:	f8b2 212a 	ldrh.w	r2, [r2, #298]	; 0x12a
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fc fc7e 	bl	8003ac0 <constrain>
 80071c4:	4603      	mov	r3, r0
 80071c6:	b21a      	sxth	r2, r3
 80071c8:	4b8e      	ldr	r3, [pc, #568]	; (8007404 <fw_nav+0x418>)
 80071ca:	801a      	strh	r2, [r3, #0]

        // Reset Climbout Flag when Alt have been reached
        if (f.CLIMBOUT_FW && GPS_AltErr >= 0)
 80071cc:	4b8e      	ldr	r3, [pc, #568]	; (8007408 <fw_nav+0x41c>)
 80071ce:	7cdb      	ldrb	r3, [r3, #19]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d007      	beq.n	80071e4 <fw_nav+0x1f8>
 80071d4:	4b8a      	ldr	r3, [pc, #552]	; (8007400 <fw_nav+0x414>)
 80071d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	db02      	blt.n	80071e4 <fw_nav+0x1f8>
            f.CLIMBOUT_FW = 0;
 80071de:	4b8a      	ldr	r3, [pc, #552]	; (8007408 <fw_nav+0x41c>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	74da      	strb	r2, [r3, #19]

        // Climb out before RTH
        if (f.GPS_HOME_MODE) {
 80071e4:	4b88      	ldr	r3, [pc, #544]	; (8007408 <fw_nav+0x41c>)
 80071e6:	79db      	ldrb	r3, [r3, #7]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d02c      	beq.n	8007246 <fw_nav+0x25a>
            if (f.CLIMBOUT_FW) {
 80071ec:	4b86      	ldr	r3, [pc, #536]	; (8007408 <fw_nav+0x41c>)
 80071ee:	7cdb      	ldrb	r3, [r3, #19]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d019      	beq.n	8007228 <fw_nav+0x23c>
                GPS_AltErr = -(cfg.fw_gps_maxclimb * 10);  // Max climbAngle
 80071f4:	4b81      	ldr	r3, [pc, #516]	; (80073fc <fw_nav+0x410>)
 80071f6:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	0352      	lsls	r2, r2, #13
 8007200:	1ad2      	subs	r2, r2, r3
 8007202:	0092      	lsls	r2, r2, #2
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	b29b      	uxth	r3, r3
 800720a:	b21a      	sxth	r2, r3
 800720c:	4b7c      	ldr	r3, [pc, #496]	; (8007400 <fw_nav+0x414>)
 800720e:	801a      	strh	r2, [r3, #0]
                NAV_Thro = cfg.fw_climb_throttle;          // Max Allowed Throttle
 8007210:	4b7a      	ldr	r3, [pc, #488]	; (80073fc <fw_nav+0x410>)
 8007212:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8007216:	b21a      	sxth	r2, r3
 8007218:	4b7a      	ldr	r3, [pc, #488]	; (8007404 <fw_nav+0x418>)
 800721a:	801a      	strh	r2, [r3, #0]
                if (currAlt < SAFE_NAV_ALT)
 800721c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007220:	2b18      	cmp	r3, #24
 8007222:	dc01      	bgt.n	8007228 <fw_nav+0x23c>
                    navDiff = 0;                        // Force climb with Level Wings below safe Alt
 8007224:	2300      	movs	r3, #0
 8007226:	84bb      	strh	r3, [r7, #36]	; 0x24
            }

            if ((GPS_distanceToHome < SAFE_DECSCEND_ZONE) && currAlt > RTH_Alt)
 8007228:	4b78      	ldr	r3, [pc, #480]	; (800740c <fw_nav+0x420>)
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	2b31      	cmp	r3, #49	; 0x31
 800722e:	d80a      	bhi.n	8007246 <fw_nav+0x25a>
 8007230:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007234:	7f7b      	ldrb	r3, [r7, #29]
 8007236:	429a      	cmp	r2, r3
 8007238:	dd05      	ble.n	8007246 <fw_nav+0x25a>
                GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;    // Start descend to correct RTH Alt.
 800723a:	4b75      	ldr	r3, [pc, #468]	; (8007410 <fw_nav+0x424>)
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	7f7b      	ldrb	r3, [r7, #29]
 8007240:	4413      	add	r3, r2
 8007242:	4a74      	ldr	r2, [pc, #464]	; (8007414 <fw_nav+0x428>)
 8007244:	6093      	str	r3, [r2, #8]
        }

        // Always DISARM when Home is within 10 meters if FC is in failsafe.
        if (f.FW_FAILSAFE_RTH_ENABLE && (GPS_distanceToHome < 10)) {
 8007246:	4b70      	ldr	r3, [pc, #448]	; (8007408 <fw_nav+0x41c>)
 8007248:	7c9b      	ldrb	r3, [r3, #18]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00e      	beq.n	800726c <fw_nav+0x280>
 800724e:	4b6f      	ldr	r3, [pc, #444]	; (800740c <fw_nav+0x420>)
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	2b09      	cmp	r3, #9
 8007254:	d80a      	bhi.n	800726c <fw_nav+0x280>
            f.ARMED = 0;
 8007256:	4b6c      	ldr	r3, [pc, #432]	; (8007408 <fw_nav+0x41c>)
 8007258:	2200      	movs	r2, #0
 800725a:	705a      	strb	r2, [r3, #1]
            f.CLIMBOUT_FW = 0;                  // Abort Climbout
 800725c:	4b6a      	ldr	r3, [pc, #424]	; (8007408 <fw_nav+0x41c>)
 800725e:	2200      	movs	r2, #0
 8007260:	74da      	strb	r2, [r3, #19]
            GPS_hold[ALT] = GPS_home[ALT] + 5;  // Come down
 8007262:	4b6b      	ldr	r3, [pc, #428]	; (8007410 <fw_nav+0x424>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	3305      	adds	r3, #5
 8007268:	4a6a      	ldr	r2, [pc, #424]	; (8007414 <fw_nav+0x428>)
 800726a:	6093      	str	r3, [r2, #8]
        }

        // Filtering of navDiff around home to stop nervous servos
        if (GPS_distanceToHome < 10)
 800726c:	4b67      	ldr	r3, [pc, #412]	; (800740c <fw_nav+0x420>)
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	2b09      	cmp	r3, #9
 8007272:	d80e      	bhi.n	8007292 <fw_nav+0x2a6>
            navDiff *= 0.1f;
 8007274:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007278:	ee07 3a90 	vmov	s15, r3
 800727c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007280:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007418 <fw_nav+0x42c>
 8007284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800728c:	ee17 3a90 	vmov	r3, s15
 8007290:	84bb      	strh	r3, [r7, #36]	; 0x24

        // Wrap Heading 180
        navDiff = wrap_18000(navDiff * 100) / 100;
 8007292:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007296:	2264      	movs	r2, #100	; 0x64
 8007298:	fb02 f303 	mul.w	r3, r2, r3
 800729c:	4618      	mov	r0, r3
 800729e:	f002 f9f1 	bl	8009684 <wrap_18000>
 80072a2:	4603      	mov	r3, r0
 80072a4:	4a5d      	ldr	r2, [pc, #372]	; (800741c <fw_nav+0x430>)
 80072a6:	fb82 1203 	smull	r1, r2, r2, r3
 80072aa:	1152      	asrs	r2, r2, #5
 80072ac:	17db      	asrs	r3, r3, #31
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (abs(navDiff) > 170)
 80072b2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	bfb8      	it	lt
 80072ba:	425b      	neglt	r3, r3
 80072bc:	b29b      	uxth	r3, r3
 80072be:	2baa      	cmp	r3, #170	; 0xaa
 80072c0:	d901      	bls.n	80072c6 <fw_nav+0x2da>
            navDiff = 175;      // Forced turn.
 80072c2:	23af      	movs	r3, #175	; 0xaf
 80072c4:	84bb      	strh	r3, [r7, #36]	; 0x24

        // PID for Navigating planes.
        navDT = (float) (pif_cumulative_timer1ms - nav_loopT) / 1000;
 80072c6:	4b56      	ldr	r3, [pc, #344]	; (8007420 <fw_nav+0x434>)
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	4b56      	ldr	r3, [pc, #344]	; (8007424 <fw_nav+0x438>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	ee07 3a90 	vmov	s15, r3
 80072d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072d8:	eddf 6a53 	vldr	s13, [pc, #332]	; 8007428 <fw_nav+0x43c>
 80072dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072e0:	edc7 7a04 	vstr	s15, [r7, #16]
        nav_loopT = pif_cumulative_timer1ms;
 80072e4:	4b4e      	ldr	r3, [pc, #312]	; (8007420 <fw_nav+0x434>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a4e      	ldr	r2, [pc, #312]	; (8007424 <fw_nav+0x438>)
 80072ea:	6013      	str	r3, [r2, #0]

        // Altitude PID
        if (abs(GPS_AltErr) <= 3)
 80072ec:	4b44      	ldr	r3, [pc, #272]	; (8007400 <fw_nav+0x414>)
 80072ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bfb8      	it	lt
 80072f6:	425b      	neglt	r3, r3
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	d809      	bhi.n	8007312 <fw_nav+0x326>
            altErrorI *= navDT; // Remove I-Term in deadspan
 80072fe:	4b4b      	ldr	r3, [pc, #300]	; (800742c <fw_nav+0x440>)
 8007300:	ed93 7a00 	vldr	s14, [r3]
 8007304:	edd7 7a04 	vldr	s15, [r7, #16]
 8007308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730c:	4b47      	ldr	r3, [pc, #284]	; (800742c <fw_nav+0x440>)
 800730e:	edc3 7a00 	vstr	s15, [r3]

        GPS_AltErr *= 10;
 8007312:	4b3b      	ldr	r3, [pc, #236]	; (8007400 <fw_nav+0x414>)
 8007314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007318:	b29b      	uxth	r3, r3
 800731a:	461a      	mov	r2, r3
 800731c:	0092      	lsls	r2, r2, #2
 800731e:	4413      	add	r3, r2
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	b29b      	uxth	r3, r3
 8007324:	b21a      	sxth	r2, r3
 8007326:	4b36      	ldr	r3, [pc, #216]	; (8007400 <fw_nav+0x414>)
 8007328:	801a      	strh	r2, [r3, #0]
        altErrorI += (GPS_AltErr * altPID_PARAM.kI) * navDT;    // Acumulate I from PIDPOSR
 800732a:	4b35      	ldr	r3, [pc, #212]	; (8007400 <fw_nav+0x414>)
 800732c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007330:	ee07 3a90 	vmov	s15, r3
 8007334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007338:	4b3d      	ldr	r3, [pc, #244]	; (8007430 <fw_nav+0x444>)
 800733a:	edd3 7a01 	vldr	s15, [r3, #4]
 800733e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007342:	edd7 7a04 	vldr	s15, [r7, #16]
 8007346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800734a:	4b38      	ldr	r3, [pc, #224]	; (800742c <fw_nav+0x440>)
 800734c:	edd3 7a00 	vldr	s15, [r3]
 8007350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007354:	4b35      	ldr	r3, [pc, #212]	; (800742c <fw_nav+0x440>)
 8007356:	edc3 7a00 	vstr	s15, [r3]
        altErrorI = constrain(altErrorI, -500, 500);            // limits I term influence
 800735a:	4b34      	ldr	r3, [pc, #208]	; (800742c <fw_nav+0x440>)
 800735c:	edd3 7a00 	vldr	s15, [r3]
 8007360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007364:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007368:	4932      	ldr	r1, [pc, #200]	; (8007434 <fw_nav+0x448>)
 800736a:	ee17 0a90 	vmov	r0, s15
 800736e:	f7fc fba7 	bl	8003ac0 <constrain>
 8007372:	ee07 0a90 	vmov	s15, r0
 8007376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800737a:	4b2c      	ldr	r3, [pc, #176]	; (800742c <fw_nav+0x440>)
 800737c:	edc3 7a00 	vstr	s15, [r3]

        delta[0] = (GPS_AltErr - lastAltDiff);
 8007380:	4b1f      	ldr	r3, [pc, #124]	; (8007400 <fw_nav+0x414>)
 8007382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007386:	b29a      	uxth	r2, r3
 8007388:	4b2b      	ldr	r3, [pc, #172]	; (8007438 <fw_nav+0x44c>)
 800738a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800738e:	b29b      	uxth	r3, r3
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	b29b      	uxth	r3, r3
 8007394:	b21b      	sxth	r3, r3
 8007396:	80bb      	strh	r3, [r7, #4]
        lastAltDiff = GPS_AltErr;
 8007398:	4b19      	ldr	r3, [pc, #100]	; (8007400 <fw_nav+0x414>)
 800739a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800739e:	4b26      	ldr	r3, [pc, #152]	; (8007438 <fw_nav+0x44c>)
 80073a0:	801a      	strh	r2, [r3, #0]
        if (abs(delta[0]) > 100)
 80073a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	bfb8      	it	lt
 80073aa:	425b      	neglt	r3, r3
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2b64      	cmp	r3, #100	; 0x64
 80073b0:	d901      	bls.n	80073b6 <fw_nav+0x3ca>
            delta[0] = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	80bb      	strh	r3, [r7, #4]

        for (i = 0; i < GPS_UPD_HZ; i++)
 80073b6:	2300      	movs	r3, #0
 80073b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073bc:	e00f      	b.n	80073de <fw_nav+0x3f2>
            altHist[i] = altHist[i + 1];
 80073be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073c8:	491c      	ldr	r1, [pc, #112]	; (800743c <fw_nav+0x450>)
 80073ca:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80073ce:	4a1b      	ldr	r2, [pc, #108]	; (800743c <fw_nav+0x450>)
 80073d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80073d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073d8:	3301      	adds	r3, #1
 80073da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d9eb      	bls.n	80073be <fw_nav+0x3d2>

        altHist[GPS_UPD_HZ - 1] = delta[0];
 80073e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80073ea:	4b14      	ldr	r3, [pc, #80]	; (800743c <fw_nav+0x450>)
 80073ec:	811a      	strh	r2, [r3, #8]

        // Store 1 sec history for D-term in shift register
        ALT_deltaSum = 0;       // Sum History
 80073ee:	4b14      	ldr	r3, [pc, #80]	; (8007440 <fw_nav+0x454>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80073f4:	2300      	movs	r3, #0
 80073f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073fa:	e037      	b.n	800746c <fw_nav+0x480>
 80073fc:	20000e54 	.word	0x20000e54
 8007400:	20000fbe 	.word	0x20000fbe
 8007404:	20000fc4 	.word	0x20000fc4
 8007408:	200016f4 	.word	0x200016f4
 800740c:	200017da 	.word	0x200017da
 8007410:	200017c0 	.word	0x200017c0
 8007414:	200017cc 	.word	0x200017cc
 8007418:	3dcccccd 	.word	0x3dcccccd
 800741c:	51eb851f 	.word	0x51eb851f
 8007420:	20001c24 	.word	0x20001c24
 8007424:	20000fc8 	.word	0x20000fc8
 8007428:	447a0000 	.word	0x447a0000
 800742c:	20000f98 	.word	0x20000f98
 8007430:	200012e4 	.word	0x200012e4
 8007434:	fffffe0c 	.word	0xfffffe0c
 8007438:	20000f9c 	.word	0x20000f9c
 800743c:	20000fa4 	.word	0x20000fa4
 8007440:	20000fcc 	.word	0x20000fcc
            ALT_deltaSum += altHist[i];
 8007444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007448:	4a64      	ldr	r2, [pc, #400]	; (80075dc <fw_nav+0x5f0>)
 800744a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800744e:	b29a      	uxth	r2, r3
 8007450:	4b63      	ldr	r3, [pc, #396]	; (80075e0 <fw_nav+0x5f4>)
 8007452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007456:	b29b      	uxth	r3, r3
 8007458:	4413      	add	r3, r2
 800745a:	b29b      	uxth	r3, r3
 800745c:	b21a      	sxth	r2, r3
 800745e:	4b60      	ldr	r3, [pc, #384]	; (80075e0 <fw_nav+0x5f4>)
 8007460:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007462:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007466:	3301      	adds	r3, #1
 8007468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800746c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007470:	2b04      	cmp	r3, #4
 8007472:	d9e7      	bls.n	8007444 <fw_nav+0x458>

        ALT_deltaSum = (ALT_deltaSum * altPID_PARAM.kD) / navDT;
 8007474:	4b5a      	ldr	r3, [pc, #360]	; (80075e0 <fw_nav+0x5f4>)
 8007476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007482:	4b58      	ldr	r3, [pc, #352]	; (80075e4 <fw_nav+0x5f8>)
 8007484:	edd3 7a02 	vldr	s15, [r3, #8]
 8007488:	ee67 6a27 	vmul.f32	s13, s14, s15
 800748c:	ed97 7a04 	vldr	s14, [r7, #16]
 8007490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007498:	ee17 3a90 	vmov	r3, s15
 800749c:	b21a      	sxth	r2, r3
 800749e:	4b50      	ldr	r3, [pc, #320]	; (80075e0 <fw_nav+0x5f4>)
 80074a0:	801a      	strh	r2, [r3, #0]
        altDiff = GPS_AltErr * altPID_PARAM.kP; // Add P in Elevator compensation.
 80074a2:	4b51      	ldr	r3, [pc, #324]	; (80075e8 <fw_nav+0x5fc>)
 80074a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074a8:	ee07 3a90 	vmov	s15, r3
 80074ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074b0:	4b4c      	ldr	r3, [pc, #304]	; (80075e4 <fw_nav+0x5f8>)
 80074b2:	edd3 7a00 	vldr	s15, [r3]
 80074b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074be:	ee17 3a90 	vmov	r3, s15
 80074c2:	83fb      	strh	r3, [r7, #30]
        altDiff += (altErrorI); // Add I
 80074c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80074c8:	ee07 3a90 	vmov	s15, r3
 80074cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074d0:	4b46      	ldr	r3, [pc, #280]	; (80075ec <fw_nav+0x600>)
 80074d2:	edd3 7a00 	vldr	s15, [r3]
 80074d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074de:	ee17 3a90 	vmov	r3, s15
 80074e2:	83fb      	strh	r3, [r7, #30]

        // Start of NavPID
        if (abs(navDiff) <= 3)
 80074e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bfb8      	it	lt
 80074ec:	425b      	neglt	r3, r3
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d809      	bhi.n	8007508 <fw_nav+0x51c>
            navErrorI *= navDT; // Remove I-Term in deadspan
 80074f4:	4b3e      	ldr	r3, [pc, #248]	; (80075f0 <fw_nav+0x604>)
 80074f6:	ed93 7a00 	vldr	s14, [r3]
 80074fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80074fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007502:	4b3b      	ldr	r3, [pc, #236]	; (80075f0 <fw_nav+0x604>)
 8007504:	edc3 7a00 	vstr	s15, [r3]

        navDiff *= 10;
 8007508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800750a:	461a      	mov	r2, r3
 800750c:	0092      	lsls	r2, r2, #2
 800750e:	4413      	add	r3, r2
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	b29b      	uxth	r3, r3
 8007514:	84bb      	strh	r3, [r7, #36]	; 0x24

        navErrorI += (navDiff * navPID_PARAM.kI) * navDT;
 8007516:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007522:	4b34      	ldr	r3, [pc, #208]	; (80075f4 <fw_nav+0x608>)
 8007524:	edd3 7a01 	vldr	s15, [r3, #4]
 8007528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800752c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007534:	4b2e      	ldr	r3, [pc, #184]	; (80075f0 <fw_nav+0x604>)
 8007536:	edd3 7a00 	vldr	s15, [r3]
 800753a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800753e:	4b2c      	ldr	r3, [pc, #176]	; (80075f0 <fw_nav+0x604>)
 8007540:	edc3 7a00 	vstr	s15, [r3]
        navErrorI = constrain(navErrorI, -500, 500);
 8007544:	4b2a      	ldr	r3, [pc, #168]	; (80075f0 <fw_nav+0x604>)
 8007546:	edd3 7a00 	vldr	s15, [r3]
 800754a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800754e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007552:	4929      	ldr	r1, [pc, #164]	; (80075f8 <fw_nav+0x60c>)
 8007554:	ee17 0a90 	vmov	r0, s15
 8007558:	f7fc fab2 	bl	8003ac0 <constrain>
 800755c:	ee07 0a90 	vmov	s15, r0
 8007560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007564:	4b22      	ldr	r3, [pc, #136]	; (80075f0 <fw_nav+0x604>)
 8007566:	edc3 7a00 	vstr	s15, [r3]

        delta[1] = (navDiff - lastnavDiff);
 800756a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800756c:	4b23      	ldr	r3, [pc, #140]	; (80075fc <fw_nav+0x610>)
 800756e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007572:	b29b      	uxth	r3, r3
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	b29b      	uxth	r3, r3
 8007578:	b21b      	sxth	r3, r3
 800757a:	80fb      	strh	r3, [r7, #6]
        lastnavDiff = navDiff;
 800757c:	4a1f      	ldr	r2, [pc, #124]	; (80075fc <fw_nav+0x610>)
 800757e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007580:	8013      	strh	r3, [r2, #0]

        if (abs(delta[1]) > 100)
 8007582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007586:	2b00      	cmp	r3, #0
 8007588:	bfb8      	it	lt
 800758a:	425b      	neglt	r3, r3
 800758c:	b29b      	uxth	r3, r3
 800758e:	2b64      	cmp	r3, #100	; 0x64
 8007590:	d901      	bls.n	8007596 <fw_nav+0x5aa>
            delta[1] = 0;
 8007592:	2300      	movs	r3, #0
 8007594:	80fb      	strh	r3, [r7, #6]

        // Store 1 sec history for D-term in shift register
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007596:	2300      	movs	r3, #0
 8007598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800759c:	e00f      	b.n	80075be <fw_nav+0x5d2>
            navDif[i] = navDif[i + 1];
 800759e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075a8:	4915      	ldr	r1, [pc, #84]	; (8007600 <fw_nav+0x614>)
 80075aa:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80075ae:	4a14      	ldr	r2, [pc, #80]	; (8007600 <fw_nav+0x614>)
 80075b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80075b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075b8:	3301      	adds	r3, #1
 80075ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d9eb      	bls.n	800759e <fw_nav+0x5b2>

        navDif[GPS_UPD_HZ - 1] = delta[1];
 80075c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80075ca:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <fw_nav+0x614>)
 80075cc:	811a      	strh	r2, [r3, #8]

        NAV_deltaSum = 0;       // Sum History
 80075ce:	4b0d      	ldr	r3, [pc, #52]	; (8007604 <fw_nav+0x618>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075da:	e029      	b.n	8007630 <fw_nav+0x644>
 80075dc:	20000fa4 	.word	0x20000fa4
 80075e0:	20000fcc 	.word	0x20000fcc
 80075e4:	200012e4 	.word	0x200012e4
 80075e8:	20000fbe 	.word	0x20000fbe
 80075ec:	20000f98 	.word	0x20000f98
 80075f0:	20000f94 	.word	0x20000f94
 80075f4:	200012d4 	.word	0x200012d4
 80075f8:	fffffe0c 	.word	0xfffffe0c
 80075fc:	20000f9e 	.word	0x20000f9e
 8007600:	20000fb0 	.word	0x20000fb0
 8007604:	20000fce 	.word	0x20000fce
            NAV_deltaSum += navDif[i];
 8007608:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800760c:	4abc      	ldr	r2, [pc, #752]	; (8007900 <fw_nav+0x914>)
 800760e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8007612:	b29a      	uxth	r2, r3
 8007614:	4bbb      	ldr	r3, [pc, #748]	; (8007904 <fw_nav+0x918>)
 8007616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800761a:	b29b      	uxth	r3, r3
 800761c:	4413      	add	r3, r2
 800761e:	b29b      	uxth	r3, r3
 8007620:	b21a      	sxth	r2, r3
 8007622:	4bb8      	ldr	r3, [pc, #736]	; (8007904 <fw_nav+0x918>)
 8007624:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800762a:	3301      	adds	r3, #1
 800762c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007634:	2b04      	cmp	r3, #4
 8007636:	d9e7      	bls.n	8007608 <fw_nav+0x61c>

        NAV_deltaSum = (NAV_deltaSum * navPID_PARAM.kD) / navDT;    // Add D
 8007638:	4bb2      	ldr	r3, [pc, #712]	; (8007904 <fw_nav+0x918>)
 800763a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007646:	4bb0      	ldr	r3, [pc, #704]	; (8007908 <fw_nav+0x91c>)
 8007648:	edd3 7a02 	vldr	s15, [r3, #8]
 800764c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007650:	ed97 7a04 	vldr	s14, [r7, #16]
 8007654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800765c:	ee17 3a90 	vmov	r3, s15
 8007660:	b21a      	sxth	r2, r3
 8007662:	4ba8      	ldr	r3, [pc, #672]	; (8007904 <fw_nav+0x918>)
 8007664:	801a      	strh	r2, [r3, #0]

        navDiff *= navPID_PARAM.kP;                                 // Add P
 8007666:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007672:	4ba5      	ldr	r3, [pc, #660]	; (8007908 <fw_nav+0x91c>)
 8007674:	edd3 7a00 	vldr	s15, [r3]
 8007678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007680:	ee17 3a90 	vmov	r3, s15
 8007684:	84bb      	strh	r3, [r7, #36]	; 0x24
        navDiff += navErrorI;                                       // Add I
 8007686:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007692:	4b9e      	ldr	r3, [pc, #632]	; (800790c <fw_nav+0x920>)
 8007694:	edd3 7a00 	vldr	s15, [r3]
 8007698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800769c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076a0:	ee17 3a90 	vmov	r3, s15
 80076a4:	84bb      	strh	r3, [r7, #36]	; 0x24
        // End of NavPID

        // Limit outputs
        GPS_angle[PITCH] = constrain(altDiff / 10, -cfg.fw_gps_maxclimb * 10, cfg.fw_gps_maxdive * 10) + ALT_deltaSum;
 80076a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80076aa:	4a99      	ldr	r2, [pc, #612]	; (8007910 <fw_nav+0x924>)
 80076ac:	fb82 1203 	smull	r1, r2, r2, r3
 80076b0:	1092      	asrs	r2, r2, #2
 80076b2:	17db      	asrs	r3, r3, #31
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	b21b      	sxth	r3, r3
 80076b8:	4618      	mov	r0, r3
 80076ba:	4b96      	ldr	r3, [pc, #600]	; (8007914 <fw_nav+0x928>)
 80076bc:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80076c0:	461a      	mov	r2, r3
 80076c2:	f06f 0309 	mvn.w	r3, #9
 80076c6:	fb03 f102 	mul.w	r1, r3, r2
 80076ca:	4b92      	ldr	r3, [pc, #584]	; (8007914 <fw_nav+0x928>)
 80076cc:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 80076d0:	461a      	mov	r2, r3
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	005b      	lsls	r3, r3, #1
 80076da:	461a      	mov	r2, r3
 80076dc:	f7fc f9f0 	bl	8003ac0 <constrain>
 80076e0:	4603      	mov	r3, r0
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	4b8c      	ldr	r3, [pc, #560]	; (8007918 <fw_nav+0x92c>)
 80076e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	4413      	add	r3, r2
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	b21a      	sxth	r2, r3
 80076f2:	4b8a      	ldr	r3, [pc, #552]	; (800791c <fw_nav+0x930>)
 80076f4:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = constrain(navDiff / 10, -cfg.fw_gps_maxcorr * 10, cfg.fw_gps_maxcorr * 10) + NAV_deltaSum;
 80076f6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80076fa:	4a85      	ldr	r2, [pc, #532]	; (8007910 <fw_nav+0x924>)
 80076fc:	fb82 1203 	smull	r1, r2, r2, r3
 8007700:	1092      	asrs	r2, r2, #2
 8007702:	17db      	asrs	r3, r3, #31
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	b21b      	sxth	r3, r3
 8007708:	4618      	mov	r0, r3
 800770a:	4b82      	ldr	r3, [pc, #520]	; (8007914 <fw_nav+0x928>)
 800770c:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8007710:	461a      	mov	r2, r3
 8007712:	f06f 0309 	mvn.w	r3, #9
 8007716:	fb03 f102 	mul.w	r1, r3, r2
 800771a:	4b7e      	ldr	r3, [pc, #504]	; (8007914 <fw_nav+0x928>)
 800771c:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8007720:	461a      	mov	r2, r3
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	461a      	mov	r2, r3
 800772c:	f7fc f9c8 	bl	8003ac0 <constrain>
 8007730:	4603      	mov	r3, r0
 8007732:	b29a      	uxth	r2, r3
 8007734:	4b73      	ldr	r3, [pc, #460]	; (8007904 <fw_nav+0x918>)
 8007736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800773a:	b29b      	uxth	r3, r3
 800773c:	4413      	add	r3, r2
 800773e:	b29b      	uxth	r3, r3
 8007740:	b21a      	sxth	r2, r3
 8007742:	4b76      	ldr	r3, [pc, #472]	; (800791c <fw_nav+0x930>)
 8007744:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = constrain(navDiff / 10, -cfg.fw_gps_rudder * 10, cfg.fw_gps_rudder * 10) + NAV_deltaSum;
 8007746:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800774a:	4a71      	ldr	r2, [pc, #452]	; (8007910 <fw_nav+0x924>)
 800774c:	fb82 1203 	smull	r1, r2, r2, r3
 8007750:	1092      	asrs	r2, r2, #2
 8007752:	17db      	asrs	r3, r3, #31
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	b21b      	sxth	r3, r3
 8007758:	4618      	mov	r0, r3
 800775a:	4b6e      	ldr	r3, [pc, #440]	; (8007914 <fw_nav+0x928>)
 800775c:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8007760:	461a      	mov	r2, r3
 8007762:	f06f 0309 	mvn.w	r3, #9
 8007766:	fb03 f102 	mul.w	r1, r3, r2
 800776a:	4b6a      	ldr	r3, [pc, #424]	; (8007914 <fw_nav+0x928>)
 800776c:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8007770:	461a      	mov	r2, r3
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	461a      	mov	r2, r3
 800777c:	f7fc f9a0 	bl	8003ac0 <constrain>
 8007780:	4603      	mov	r3, r0
 8007782:	b29a      	uxth	r2, r3
 8007784:	4b5f      	ldr	r3, [pc, #380]	; (8007904 <fw_nav+0x918>)
 8007786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800778a:	b29b      	uxth	r3, r3
 800778c:	4413      	add	r3, r2
 800778e:	b29b      	uxth	r3, r3
 8007790:	b21a      	sxth	r2, r3
 8007792:	4b62      	ldr	r3, [pc, #392]	; (800791c <fw_nav+0x930>)
 8007794:	809a      	strh	r2, [r3, #4]

        // Elevator compensation depending on behaviour.
        // Prevent stall with Disarmed motor
        if (f.MOTORS_STOPPED)
 8007796:	4b62      	ldr	r3, [pc, #392]	; (8007920 <fw_nav+0x934>)
 8007798:	7c5b      	ldrb	r3, [r3, #17]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d016      	beq.n	80077cc <fw_nav+0x7e0>
            GPS_angle[PITCH] = constrain(GPS_angle[PITCH], -cfg.fw_glide_angle, cfg.fw_gps_maxdive * 10);
 800779e:	4b5f      	ldr	r3, [pc, #380]	; (800791c <fw_nav+0x930>)
 80077a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80077a4:	4618      	mov	r0, r3
 80077a6:	4b5b      	ldr	r3, [pc, #364]	; (8007914 <fw_nav+0x928>)
 80077a8:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80077ac:	4259      	negs	r1, r3
 80077ae:	4b59      	ldr	r3, [pc, #356]	; (8007914 <fw_nav+0x928>)
 80077b0:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 80077b4:	461a      	mov	r2, r3
 80077b6:	4613      	mov	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	461a      	mov	r2, r3
 80077c0:	f7fc f97e 	bl	8003ac0 <constrain>
 80077c4:	4603      	mov	r3, r0
 80077c6:	b21a      	sxth	r2, r3
 80077c8:	4b54      	ldr	r3, [pc, #336]	; (800791c <fw_nav+0x930>)
 80077ca:	805a      	strh	r2, [r3, #2]

        // Add elevator compared with rollAngle
        if (!f.CLIMBOUT_FW)
 80077cc:	4b54      	ldr	r3, [pc, #336]	; (8007920 <fw_nav+0x934>)
 80077ce:	7cdb      	ldrb	r3, [r3, #19]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d11b      	bne.n	800780c <fw_nav+0x820>
            GPS_angle[PITCH] -= (abs(angle[ROLL]) * (cfg.fw_roll_comp / 100));
 80077d4:	4b51      	ldr	r3, [pc, #324]	; (800791c <fw_nav+0x930>)
 80077d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80077da:	b29a      	uxth	r2, r3
 80077dc:	4b51      	ldr	r3, [pc, #324]	; (8007924 <fw_nav+0x938>)
 80077de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	bfb8      	it	lt
 80077e6:	425b      	neglt	r3, r3
 80077e8:	b299      	uxth	r1, r3
 80077ea:	4b4a      	ldr	r3, [pc, #296]	; (8007914 <fw_nav+0x928>)
 80077ec:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80077f0:	484d      	ldr	r0, [pc, #308]	; (8007928 <fw_nav+0x93c>)
 80077f2:	fba0 0303 	umull	r0, r3, r0, r3
 80077f6:	095b      	lsrs	r3, r3, #5
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	fb11 f303 	smulbb	r3, r1, r3
 8007800:	b29b      	uxth	r3, r3
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	b29b      	uxth	r3, r3
 8007806:	b21a      	sxth	r2, r3
 8007808:	4b44      	ldr	r3, [pc, #272]	; (800791c <fw_nav+0x930>)
 800780a:	805a      	strh	r2, [r3, #2]

        // Throttle compensation depending on behaviour.
        // Compensate throttle with pitch Angle
        NAV_Thro -= constrain(angle[PITCH] * PITCH_COMP, 0, 450);
 800780c:	4b45      	ldr	r3, [pc, #276]	; (8007924 <fw_nav+0x938>)
 800780e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800781a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800781e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007822:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007826:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800782a:	2100      	movs	r1, #0
 800782c:	ee17 0a90 	vmov	r0, s15
 8007830:	f7fc f946 	bl	8003ac0 <constrain>
 8007834:	4601      	mov	r1, r0
 8007836:	4b3d      	ldr	r3, [pc, #244]	; (800792c <fw_nav+0x940>)
 8007838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800783c:	b29a      	uxth	r2, r3
 800783e:	b28b      	uxth	r3, r1
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	b29b      	uxth	r3, r3
 8007844:	b21a      	sxth	r2, r3
 8007846:	4b39      	ldr	r3, [pc, #228]	; (800792c <fw_nav+0x940>)
 8007848:	801a      	strh	r2, [r3, #0]

        // Force the Plane move forward in headwind with speedBoost
        groundSpeed = GPS_speed;
 800784a:	4b39      	ldr	r3, [pc, #228]	; (8007930 <fw_nav+0x944>)
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	81fb      	strh	r3, [r7, #14]
        spDiff = (GPS_MINSPEED - groundSpeed) * I_TERM;
 8007850:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007854:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8007858:	ee07 3a90 	vmov	s15, r3
 800785c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007860:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007934 <fw_nav+0x948>
 8007864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800786c:	ee17 3a90 	vmov	r3, s15
 8007870:	60bb      	str	r3, [r7, #8]

        if (GPS_speed < GPS_MINSPEED - 50 || GPS_speed > GPS_MINSPEED + 50)
 8007872:	4b2f      	ldr	r3, [pc, #188]	; (8007930 <fw_nav+0x944>)
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800787a:	d305      	bcc.n	8007888 <fw_nav+0x89c>
 800787c:	4b2c      	ldr	r3, [pc, #176]	; (8007930 <fw_nav+0x944>)
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	f240 2226 	movw	r2, #550	; 0x226
 8007884:	4293      	cmp	r3, r2
 8007886:	d90a      	bls.n	800789e <fw_nav+0x8b2>
            speedBoost += spDiff;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	b29a      	uxth	r2, r3
 800788c:	4b2a      	ldr	r3, [pc, #168]	; (8007938 <fw_nav+0x94c>)
 800788e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007892:	b29b      	uxth	r3, r3
 8007894:	4413      	add	r3, r2
 8007896:	b29b      	uxth	r3, r3
 8007898:	b21a      	sxth	r2, r3
 800789a:	4b27      	ldr	r3, [pc, #156]	; (8007938 <fw_nav+0x94c>)
 800789c:	801a      	strh	r2, [r3, #0]

        speedBoost = constrain(speedBoost, 0, 500);
 800789e:	4b26      	ldr	r3, [pc, #152]	; (8007938 <fw_nav+0x94c>)
 80078a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80078a8:	2100      	movs	r1, #0
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fc f908 	bl	8003ac0 <constrain>
 80078b0:	4603      	mov	r3, r0
 80078b2:	b21a      	sxth	r2, r3
 80078b4:	4b20      	ldr	r3, [pc, #128]	; (8007938 <fw_nav+0x94c>)
 80078b6:	801a      	strh	r2, [r3, #0]
        NAV_Thro += speedBoost;
 80078b8:	4b1c      	ldr	r3, [pc, #112]	; (800792c <fw_nav+0x940>)
 80078ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078be:	b29a      	uxth	r2, r3
 80078c0:	4b1d      	ldr	r3, [pc, #116]	; (8007938 <fw_nav+0x94c>)
 80078c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	4413      	add	r3, r2
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	b21a      	sxth	r2, r3
 80078ce:	4b17      	ldr	r3, [pc, #92]	; (800792c <fw_nav+0x940>)
 80078d0:	801a      	strh	r2, [r3, #0]

        // constrain throttle to Max climb.
        NAV_Thro = constrain(NAV_Thro, cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 80078d2:	4b16      	ldr	r3, [pc, #88]	; (800792c <fw_nav+0x940>)
 80078d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078d8:	4618      	mov	r0, r3
 80078da:	4b0e      	ldr	r3, [pc, #56]	; (8007914 <fw_nav+0x928>)
 80078dc:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80078e0:	4619      	mov	r1, r3
 80078e2:	4b0c      	ldr	r3, [pc, #48]	; (8007914 <fw_nav+0x928>)
 80078e4:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 80078e8:	461a      	mov	r2, r3
 80078ea:	f7fc f8e9 	bl	8003ac0 <constrain>
 80078ee:	4603      	mov	r3, r0
 80078f0:	b21a      	sxth	r2, r3
 80078f2:	4b0e      	ldr	r3, [pc, #56]	; (800792c <fw_nav+0x940>)
 80078f4:	801a      	strh	r2, [r3, #0]
    }
    // End of NavTimer

    // PassThru for throttle In AcroMode
    if ((!f.ANGLE_MODE && !f.HORIZON_MODE) || (f.PASSTHRU_MODE && !f.FW_FAILSAFE_RTH_ENABLE)) {
 80078f6:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <fw_nav+0x934>)
 80078f8:	78db      	ldrb	r3, [r3, #3]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d122      	bne.n	8007944 <fw_nav+0x958>
 80078fe:	e01d      	b.n	800793c <fw_nav+0x950>
 8007900:	20000fb0 	.word	0x20000fb0
 8007904:	20000fce 	.word	0x20000fce
 8007908:	200012d4 	.word	0x200012d4
 800790c:	20000f94 	.word	0x20000f94
 8007910:	66666667 	.word	0x66666667
 8007914:	20000e54 	.word	0x20000e54
 8007918:	20000fcc 	.word	0x20000fcc
 800791c:	200017e4 	.word	0x200017e4
 8007920:	200016f4 	.word	0x200016f4
 8007924:	2000149c 	.word	0x2000149c
 8007928:	51eb851f 	.word	0x51eb851f
 800792c:	20000fc4 	.word	0x20000fc4
 8007930:	200017e0 	.word	0x200017e0
 8007934:	3dcccccd 	.word	0x3dcccccd
 8007938:	20000fa0 	.word	0x20000fa0
 800793c:	4b16      	ldr	r3, [pc, #88]	; (8007998 <fw_nav+0x9ac>)
 800793e:	791b      	ldrb	r3, [r3, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d007      	beq.n	8007954 <fw_nav+0x968>
 8007944:	4b14      	ldr	r3, [pc, #80]	; (8007998 <fw_nav+0x9ac>)
 8007946:	7a9b      	ldrb	r3, [r3, #10]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00f      	beq.n	800796c <fw_nav+0x980>
 800794c:	4b12      	ldr	r3, [pc, #72]	; (8007998 <fw_nav+0x9ac>)
 800794e:	7c9b      	ldrb	r3, [r3, #18]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10b      	bne.n	800796c <fw_nav+0x980>
        NAV_Thro = TX_Thro;
 8007954:	4a11      	ldr	r2, [pc, #68]	; (800799c <fw_nav+0x9b0>)
 8007956:	8b7b      	ldrh	r3, [r7, #26]
 8007958:	8013      	strh	r3, [r2, #0]
        GPS_angle[PITCH] = 0;
 800795a:	4b11      	ldr	r3, [pc, #68]	; (80079a0 <fw_nav+0x9b4>)
 800795c:	2200      	movs	r2, #0
 800795e:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = 0;
 8007960:	4b0f      	ldr	r3, [pc, #60]	; (80079a0 <fw_nav+0x9b4>)
 8007962:	2200      	movs	r2, #0
 8007964:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = 0;
 8007966:	4b0e      	ldr	r3, [pc, #56]	; (80079a0 <fw_nav+0x9b4>)
 8007968:	2200      	movs	r2, #0
 800796a:	809a      	strh	r2, [r3, #4]
    }
    rcCommand[THROTTLE] = NAV_Thro;
 800796c:	4b0b      	ldr	r3, [pc, #44]	; (800799c <fw_nav+0x9b0>)
 800796e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007972:	4b0c      	ldr	r3, [pc, #48]	; (80079a4 <fw_nav+0x9b8>)
 8007974:	80da      	strh	r2, [r3, #6]
    rcCommand[YAW] += GPS_angle[YAW];
 8007976:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <fw_nav+0x9b8>)
 8007978:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800797c:	b29a      	uxth	r2, r3
 800797e:	4b08      	ldr	r3, [pc, #32]	; (80079a0 <fw_nav+0x9b4>)
 8007980:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007984:	b29b      	uxth	r3, r3
 8007986:	4413      	add	r3, r2
 8007988:	b29b      	uxth	r3, r3
 800798a:	b21a      	sxth	r2, r3
 800798c:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <fw_nav+0x9b8>)
 800798e:	809a      	strh	r2, [r3, #4]
}
 8007990:	bf00      	nop
 8007992:	3728      	adds	r7, #40	; 0x28
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	200016f4 	.word	0x200016f4
 800799c:	20000fc4 	.word	0x20000fc4
 80079a0:	200017e4 	.word	0x200017e4
 80079a4:	20001750 	.word	0x20001750

080079a8 <gpsSetState>:
static PifGpsUblox gps_ublox;
static uint8_t gps_receive = 0;


static void gpsSetState(uint8_t state)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	71fb      	strb	r3, [r7, #7]
    gpsData.state = state;
 80079b2:	4a0b      	ldr	r2, [pc, #44]	; (80079e0 <gpsSetState+0x38>)
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	7013      	strb	r3, [r2, #0]
    gpsData.state_position = 0;
 80079b8:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <gpsSetState+0x38>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	611a      	str	r2, [r3, #16]
    gpsData.state_ts = pif_cumulative_timer1ms;
 80079be:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <gpsSetState+0x3c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a07      	ldr	r2, [pc, #28]	; (80079e0 <gpsSetState+0x38>)
 80079c4:	6153      	str	r3, [r2, #20]
    gpsData.step = 0;
 80079c6:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <gpsSetState+0x38>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	60da      	str	r2, [r3, #12]
    gpsData.receive = FALSE;
 80079cc:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <gpsSetState+0x38>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	761a      	strb	r2, [r3, #24]
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	20000fd0 	.word	0x20000fd0
 80079e4:	20001c24 	.word	0x20001c24

080079e8 <_evtGpsNmeaReceive>:

static BOOL _evtGpsNmeaReceive(PifGps *p_owner, PifGpsNmeaMsgId msg_id)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]
	switch (msg_id) {
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d002      	beq.n	8007a00 <_evtGpsNmeaReceive+0x18>
 80079fa:	2b0a      	cmp	r3, #10
 80079fc:	d047      	beq.n	8007a8e <_evtGpsNmeaReceive+0xa6>
 80079fe:	e072      	b.n	8007ae6 <_evtGpsNmeaReceive+0xfe>
	case PIF_GPS_NMEA_MSG_ID_GGA:
	    f.GPS_FIX = p_owner->_fix;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a06:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4b40      	ldr	r3, [pc, #256]	; (8007b10 <_evtGpsNmeaReceive+0x128>)
 8007a10:	72da      	strb	r2, [r3, #11]
	    if (f.GPS_FIX) {
 8007a12:	4b3f      	ldr	r3, [pc, #252]	; (8007b10 <_evtGpsNmeaReceive+0x128>)
 8007a14:	7adb      	ldrb	r3, [r3, #11]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d031      	beq.n	8007a7e <_evtGpsNmeaReceive+0x96>
	        GPS_coord[LAT] = p_owner->_coord_deg[PIF_GPS_LAT] * 10000000UL;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007a20:	a339      	add	r3, pc, #228	; (adr r3, 8007b08 <_evtGpsNmeaReceive+0x120>)
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	f7f8 fd9b 	bl	8000560 <__aeabi_dmul>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4610      	mov	r0, r2
 8007a30:	4619      	mov	r1, r3
 8007a32:	f7f9 f82f 	bl	8000a94 <__aeabi_d2iz>
 8007a36:	4603      	mov	r3, r0
 8007a38:	4a36      	ldr	r2, [pc, #216]	; (8007b14 <_evtGpsNmeaReceive+0x12c>)
 8007a3a:	6013      	str	r3, [r2, #0]
	        GPS_coord[LON] = p_owner->_coord_deg[PIF_GPS_LON] * 10000000UL;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007a42:	a331      	add	r3, pc, #196	; (adr r3, 8007b08 <_evtGpsNmeaReceive+0x120>)
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	f7f8 fd8a 	bl	8000560 <__aeabi_dmul>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4610      	mov	r0, r2
 8007a52:	4619      	mov	r1, r3
 8007a54:	f7f9 f81e 	bl	8000a94 <__aeabi_d2iz>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	4a2e      	ldr	r2, [pc, #184]	; (8007b14 <_evtGpsNmeaReceive+0x12c>)
 8007a5c:	6053      	str	r3, [r2, #4]
	        GPS_numSat = p_owner->_num_sat;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007a64:	4b2c      	ldr	r3, [pc, #176]	; (8007b18 <_evtGpsNmeaReceive+0x130>)
 8007a66:	701a      	strb	r2, [r3, #0]
	        GPS_altitude = p_owner->_altitude;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007a6e:	4610      	mov	r0, r2
 8007a70:	4619      	mov	r1, r3
 8007a72:	f7f9 f837 	bl	8000ae4 <__aeabi_d2uiz>
 8007a76:	4603      	mov	r3, r0
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	4b28      	ldr	r3, [pc, #160]	; (8007b1c <_evtGpsNmeaReceive+0x134>)
 8007a7c:	801a      	strh	r2, [r3, #0]
	    }
	    gps_receive |= 1;
 8007a7e:	4b28      	ldr	r3, [pc, #160]	; (8007b20 <_evtGpsNmeaReceive+0x138>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	f043 0301 	orr.w	r3, r3, #1
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	4b25      	ldr	r3, [pc, #148]	; (8007b20 <_evtGpsNmeaReceive+0x138>)
 8007a8a:	701a      	strb	r2, [r3, #0]
		break;
 8007a8c:	e02b      	b.n	8007ae6 <_evtGpsNmeaReceive+0xfe>

	case PIF_GPS_NMEA_MSG_ID_RMC:
	    GPS_speed = (uint16_t)(p_owner->_ground_speed / 10);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	4b22      	ldr	r3, [pc, #136]	; (8007b24 <_evtGpsNmeaReceive+0x13c>)
 8007a9a:	f7f8 fe8b 	bl	80007b4 <__aeabi_ddiv>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f7f9 f81d 	bl	8000ae4 <__aeabi_d2uiz>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	4b1e      	ldr	r3, [pc, #120]	; (8007b28 <_evtGpsNmeaReceive+0x140>)
 8007ab0:	801a      	strh	r2, [r3, #0]
	    GPS_ground_course = (uint16_t)(p_owner->_ground_course * 10);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007ab8:	f04f 0200 	mov.w	r2, #0
 8007abc:	4b19      	ldr	r3, [pc, #100]	; (8007b24 <_evtGpsNmeaReceive+0x13c>)
 8007abe:	f7f8 fd4f 	bl	8000560 <__aeabi_dmul>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	4619      	mov	r1, r3
 8007aca:	f7f9 f80b 	bl	8000ae4 <__aeabi_d2uiz>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	4b16      	ldr	r3, [pc, #88]	; (8007b2c <_evtGpsNmeaReceive+0x144>)
 8007ad4:	801a      	strh	r2, [r3, #0]
	    gps_receive |= 2;
 8007ad6:	4b12      	ldr	r3, [pc, #72]	; (8007b20 <_evtGpsNmeaReceive+0x138>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	f043 0302 	orr.w	r3, r3, #2
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <_evtGpsNmeaReceive+0x138>)
 8007ae2:	701a      	strb	r2, [r3, #0]
		break;
 8007ae4:	bf00      	nop
	}
	if (gps_receive != 3) return FALSE;
 8007ae6:	4b0e      	ldr	r3, [pc, #56]	; (8007b20 <_evtGpsNmeaReceive+0x138>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d001      	beq.n	8007af2 <_evtGpsNmeaReceive+0x10a>
 8007aee:	2300      	movs	r3, #0
 8007af0:	e003      	b.n	8007afa <_evtGpsNmeaReceive+0x112>

	gps_receive = 0;
 8007af2:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <_evtGpsNmeaReceive+0x138>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8007af8:	2301      	movs	r3, #1
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	f3af 8000 	nop.w
 8007b08:	00000000 	.word	0x00000000
 8007b0c:	416312d0 	.word	0x416312d0
 8007b10:	200016f4 	.word	0x200016f4
 8007b14:	200017b8 	.word	0x200017b8
 8007b18:	200017d8 	.word	0x200017d8
 8007b1c:	200017de 	.word	0x200017de
 8007b20:	200012b0 	.word	0x200012b0
 8007b24:	40240000 	.word	0x40240000
 8007b28:	200017e0 	.word	0x200017e0
 8007b2c:	200017ea 	.word	0x200017ea

08007b30 <_evtGpsUbxReceive>:

static BOOL _evtGpsUbxReceive(PifGpsUblox* p_owner, PifGpsUbxPacket* p_packet)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
	PifGps* p_parent = &p_owner->_gps;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	60fb      	str	r3, [r7, #12]

    switch (p_packet->class_id) {
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d00e      	beq.n	8007b66 <_evtGpsUbxReceive+0x36>
 8007b48:	2b05      	cmp	r3, #5
 8007b4a:	f040 8090 	bne.w	8007c6e <_evtGpsUbxReceive+0x13e>
	case GUCI_ACK:
		switch (p_packet->msg_id) {
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	f200 808a 	bhi.w	8007c6c <_evtGpsUbxReceive+0x13c>
		case GUMI_ACK_ACK:
		case GUMI_ACK_NAK:
			gpsData.cfg_result = p_packet->msg_id;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	785b      	ldrb	r3, [r3, #1]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	4b4e      	ldr	r3, [pc, #312]	; (8007c98 <_evtGpsUbxReceive+0x168>)
 8007b60:	61da      	str	r2, [r3, #28]
			return FALSE;
 8007b62:	2300      	movs	r3, #0
 8007b64:	e08d      	b.n	8007c82 <_evtGpsUbxReceive+0x152>
		}
		break;

    case GUCI_NAV:
		switch (p_packet->msg_id) {
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	785b      	ldrb	r3, [r3, #1]
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d002      	beq.n	8007b74 <_evtGpsUbxReceive+0x44>
 8007b6e:	2b12      	cmp	r3, #18
 8007b70:	d04f      	beq.n	8007c12 <_evtGpsUbxReceive+0xe2>
				GPS_speed = (uint16_t)(p_parent->_ground_speed / 10);
				GPS_ground_course = (uint16_t)(p_parent->_ground_course * 10);
				gps_receive |= 2;
				break;
		}
		break;
 8007b72:	e07c      	b.n	8007c6e <_evtGpsUbxReceive+0x13e>
				f.GPS_FIX = p_parent->_fix;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	461a      	mov	r2, r3
 8007b82:	4b46      	ldr	r3, [pc, #280]	; (8007c9c <_evtGpsUbxReceive+0x16c>)
 8007b84:	72da      	strb	r2, [r3, #11]
				if (f.GPS_FIX) {
 8007b86:	4b45      	ldr	r3, [pc, #276]	; (8007c9c <_evtGpsUbxReceive+0x16c>)
 8007b88:	7adb      	ldrb	r3, [r3, #11]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d031      	beq.n	8007bf2 <_evtGpsUbxReceive+0xc2>
					GPS_coord[LAT] = p_parent->_coord_deg[PIF_GPS_LAT] * 10000000UL;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007b94:	a33e      	add	r3, pc, #248	; (adr r3, 8007c90 <_evtGpsUbxReceive+0x160>)
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f7f8 fce1 	bl	8000560 <__aeabi_dmul>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	f7f8 ff75 	bl	8000a94 <__aeabi_d2iz>
 8007baa:	4603      	mov	r3, r0
 8007bac:	4a3c      	ldr	r2, [pc, #240]	; (8007ca0 <_evtGpsUbxReceive+0x170>)
 8007bae:	6013      	str	r3, [r2, #0]
					GPS_coord[LON] = p_parent->_coord_deg[PIF_GPS_LON] * 10000000UL;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007bb6:	a336      	add	r3, pc, #216	; (adr r3, 8007c90 <_evtGpsUbxReceive+0x160>)
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	f7f8 fcd0 	bl	8000560 <__aeabi_dmul>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	f7f8 ff64 	bl	8000a94 <__aeabi_d2iz>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	4a34      	ldr	r2, [pc, #208]	; (8007ca0 <_evtGpsUbxReceive+0x170>)
 8007bd0:	6053      	str	r3, [r2, #4]
					GPS_numSat = p_parent->_num_sat;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007bd8:	4b32      	ldr	r3, [pc, #200]	; (8007ca4 <_evtGpsUbxReceive+0x174>)
 8007bda:	701a      	strb	r2, [r3, #0]
					GPS_altitude = p_parent->_altitude;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007be2:	4610      	mov	r0, r2
 8007be4:	4619      	mov	r1, r3
 8007be6:	f7f8 ff7d 	bl	8000ae4 <__aeabi_d2uiz>
 8007bea:	4603      	mov	r3, r0
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	4b2e      	ldr	r3, [pc, #184]	; (8007ca8 <_evtGpsUbxReceive+0x178>)
 8007bf0:	801a      	strh	r2, [r3, #0]
				GPS_HorizontalAcc = p_parent->_horizontal_acc;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	4a2d      	ldr	r2, [pc, #180]	; (8007cac <_evtGpsUbxReceive+0x17c>)
 8007bf8:	6013      	str	r3, [r2, #0]
				GPS_VerticalAcc = p_parent->_vertical_acc;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfe:	4a2c      	ldr	r2, [pc, #176]	; (8007cb0 <_evtGpsUbxReceive+0x180>)
 8007c00:	6013      	str	r3, [r2, #0]
				gps_receive |= 1;
 8007c02:	4b2c      	ldr	r3, [pc, #176]	; (8007cb4 <_evtGpsUbxReceive+0x184>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	f043 0301 	orr.w	r3, r3, #1
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	4b29      	ldr	r3, [pc, #164]	; (8007cb4 <_evtGpsUbxReceive+0x184>)
 8007c0e:	701a      	strb	r2, [r3, #0]
				break;
 8007c10:	e02b      	b.n	8007c6a <_evtGpsUbxReceive+0x13a>
				GPS_speed = (uint16_t)(p_parent->_ground_speed / 10);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007c18:	f04f 0200 	mov.w	r2, #0
 8007c1c:	4b26      	ldr	r3, [pc, #152]	; (8007cb8 <_evtGpsUbxReceive+0x188>)
 8007c1e:	f7f8 fdc9 	bl	80007b4 <__aeabi_ddiv>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4610      	mov	r0, r2
 8007c28:	4619      	mov	r1, r3
 8007c2a:	f7f8 ff5b 	bl	8000ae4 <__aeabi_d2uiz>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	4b22      	ldr	r3, [pc, #136]	; (8007cbc <_evtGpsUbxReceive+0x18c>)
 8007c34:	801a      	strh	r2, [r3, #0]
				GPS_ground_course = (uint16_t)(p_parent->_ground_course * 10);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007c3c:	f04f 0200 	mov.w	r2, #0
 8007c40:	4b1d      	ldr	r3, [pc, #116]	; (8007cb8 <_evtGpsUbxReceive+0x188>)
 8007c42:	f7f8 fc8d 	bl	8000560 <__aeabi_dmul>
 8007c46:	4602      	mov	r2, r0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	f7f8 ff49 	bl	8000ae4 <__aeabi_d2uiz>
 8007c52:	4603      	mov	r3, r0
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	4b1a      	ldr	r3, [pc, #104]	; (8007cc0 <_evtGpsUbxReceive+0x190>)
 8007c58:	801a      	strh	r2, [r3, #0]
				gps_receive |= 2;
 8007c5a:	4b16      	ldr	r3, [pc, #88]	; (8007cb4 <_evtGpsUbxReceive+0x184>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	f043 0302 	orr.w	r3, r3, #2
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	4b13      	ldr	r3, [pc, #76]	; (8007cb4 <_evtGpsUbxReceive+0x184>)
 8007c66:	701a      	strb	r2, [r3, #0]
				break;
 8007c68:	bf00      	nop
		break;
 8007c6a:	e000      	b.n	8007c6e <_evtGpsUbxReceive+0x13e>
		break;
 8007c6c:	bf00      	nop
    }
	if (gps_receive != 3) return FALSE;
 8007c6e:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <_evtGpsUbxReceive+0x184>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d001      	beq.n	8007c7a <_evtGpsUbxReceive+0x14a>
 8007c76:	2300      	movs	r3, #0
 8007c78:	e003      	b.n	8007c82 <_evtGpsUbxReceive+0x152>

	gps_receive = 0;
 8007c7a:	4b0e      	ldr	r3, [pc, #56]	; (8007cb4 <_evtGpsUbxReceive+0x184>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8007c80:	2301      	movs	r3, #1
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	f3af 8000 	nop.w
 8007c90:	00000000 	.word	0x00000000
 8007c94:	416312d0 	.word	0x416312d0
 8007c98:	20000fd0 	.word	0x20000fd0
 8007c9c:	200016f4 	.word	0x200016f4
 8007ca0:	200017b8 	.word	0x200017b8
 8007ca4:	200017d8 	.word	0x200017d8
 8007ca8:	200017de 	.word	0x200017de
 8007cac:	20001888 	.word	0x20001888
 8007cb0:	2000188c 	.word	0x2000188c
 8007cb4:	200012b0 	.word	0x200012b0
 8007cb8:	40240000 	.word	0x40240000
 8007cbc:	200017e0 	.word	0x200017e0
 8007cc0:	200017ea 	.word	0x200017ea

08007cc4 <_evtGpsReceive>:

static void _evtGpsReceive(PifGps *p_owner)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	(void)p_owner;

    if (f.GPS_FIX) {
 8007ccc:	4b29      	ldr	r3, [pc, #164]	; (8007d74 <_evtGpsReceive+0xb0>)
 8007cce:	7adb      	ldrb	r3, [r3, #11]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d017      	beq.n	8007d04 <_evtGpsReceive+0x40>
        if (!sensors(SENSOR_BARO) && f.FIXED_WING)
 8007cd4:	2004      	movs	r0, #4
 8007cd6:	f7ff f80f 	bl	8006cf8 <sensors>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	f083 0301 	eor.w	r3, r3, #1
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00e      	beq.n	8007d04 <_evtGpsReceive+0x40>
 8007ce6:	4b23      	ldr	r3, [pc, #140]	; (8007d74 <_evtGpsReceive+0xb0>)
 8007ce8:	7c1b      	ldrb	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <_evtGpsReceive+0x40>
            EstAlt = (GPS_altitude - GPS_home[ALT]) * 100;    // Use values Based on GPS
 8007cee:	4b22      	ldr	r3, [pc, #136]	; (8007d78 <_evtGpsReceive+0xb4>)
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	4b21      	ldr	r3, [pc, #132]	; (8007d7c <_evtGpsReceive+0xb8>)
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2264      	movs	r2, #100	; 0x64
 8007cfc:	fb02 f303 	mul.w	r3, r2, r3
 8007d00:	4a1f      	ldr	r2, [pc, #124]	; (8007d80 <_evtGpsReceive+0xbc>)
 8007d02:	6013      	str	r3, [r2, #0]
    }

    if (!sensors(SENSOR_MAG) && GPS_speed > 100) {
 8007d04:	2008      	movs	r0, #8
 8007d06:	f7fe fff7 	bl	8006cf8 <sensors>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	f083 0301 	eor.w	r3, r3, #1
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d021      	beq.n	8007d5a <_evtGpsReceive+0x96>
 8007d16:	4b1b      	ldr	r3, [pc, #108]	; (8007d84 <_evtGpsReceive+0xc0>)
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	2b64      	cmp	r3, #100	; 0x64
 8007d1c:	d91d      	bls.n	8007d5a <_evtGpsReceive+0x96>
        GPS_ground_course = wrap_18000(GPS_ground_course * 10) / 10;
 8007d1e:	4b1a      	ldr	r3, [pc, #104]	; (8007d88 <_evtGpsReceive+0xc4>)
 8007d20:	881b      	ldrh	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f001 fca9 	bl	8009684 <wrap_18000>
 8007d32:	4603      	mov	r3, r0
 8007d34:	4a15      	ldr	r2, [pc, #84]	; (8007d8c <_evtGpsReceive+0xc8>)
 8007d36:	fb82 1203 	smull	r1, r2, r2, r3
 8007d3a:	1092      	asrs	r2, r2, #2
 8007d3c:	17db      	asrs	r3, r3, #31
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	4b11      	ldr	r3, [pc, #68]	; (8007d88 <_evtGpsReceive+0xc4>)
 8007d44:	801a      	strh	r2, [r3, #0]
        heading = GPS_ground_course / 10;    // Use values Based on GPS if we are moving.
 8007d46:	4b10      	ldr	r3, [pc, #64]	; (8007d88 <_evtGpsReceive+0xc4>)
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	4a11      	ldr	r2, [pc, #68]	; (8007d90 <_evtGpsReceive+0xcc>)
 8007d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d50:	08db      	lsrs	r3, r3, #3
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	b21a      	sxth	r2, r3
 8007d56:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <_evtGpsReceive+0xd0>)
 8007d58:	801a      	strh	r2, [r3, #0]
    }

    pifTask_SetTrigger(g_task_gps);
 8007d5a:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <_evtGpsReceive+0xd4>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f00c fbba 	bl	80144d8 <pifTask_SetTrigger>
    gpsData.receive = TRUE;
 8007d64:	4b0d      	ldr	r3, [pc, #52]	; (8007d9c <_evtGpsReceive+0xd8>)
 8007d66:	2201      	movs	r2, #1
 8007d68:	761a      	strb	r2, [r3, #24]
}
 8007d6a:	bf00      	nop
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	200016f4 	.word	0x200016f4
 8007d78:	200017de 	.word	0x200017de
 8007d7c:	200017c0 	.word	0x200017c0
 8007d80:	20001460 	.word	0x20001460
 8007d84:	200017e0 	.word	0x200017e0
 8007d88:	200017ea 	.word	0x200017ea
 8007d8c:	66666667 	.word	0x66666667
 8007d90:	cccccccd 	.word	0xcccccccd
 8007d94:	200019c0 	.word	0x200019c0
 8007d98:	20001554 	.word	0x20001554
 8007d9c:	20000fd0 	.word	0x20000fd0

08007da0 <_evtGpsTimeout>:

static void _evtGpsTimeout(PifGps *p_owner)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
    (void)p_owner;

    // remove GPS from capability
    serialStopReceiveFunc(&core.gpsport->comm);
 8007da8:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <_evtGpsTimeout+0x3c>)
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	3304      	adds	r3, #4
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fa faea 	bl	8002388 <serialStopReceiveFunc>
    gps_ublox._gps.evt_nmea_receive = NULL;
 8007db4:	4b0a      	ldr	r3, [pc, #40]	; (8007de0 <_evtGpsTimeout+0x40>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	609a      	str	r2, [r3, #8]
    gps_ublox.evt_ubx_receive = NULL;
 8007dba:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <_evtGpsTimeout+0x40>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]
    sensorsClear(SENSOR_GPS);
 8007dc0:	2020      	movs	r0, #32
 8007dc2:	f7fe ffc1 	bl	8006d48 <sensorsClear>
    gpsSetState(GPS_LOSTCOMMS);
 8007dc6:	2006      	movs	r0, #6
 8007dc8:	f7ff fdee 	bl	80079a8 <gpsSetState>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_INFO, "GPS: Timeout");
 8007dcc:	4905      	ldr	r1, [pc, #20]	; (8007de4 <_evtGpsTimeout+0x44>)
 8007dce:	2002      	movs	r0, #2
 8007dd0:	f00b fa5a 	bl	8013288 <pifLog_Print>
#endif
}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	20000830 	.word	0x20000830
 8007de0:	20000ff0 	.word	0x20000ff0
 8007de4:	08027064 	.word	0x08027064

08007de8 <gpsInit>:

void gpsInit(uint8_t port, uint8_t baudrateIndex)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	460a      	mov	r2, r1
 8007df2:	71fb      	strb	r3, [r7, #7]
 8007df4:	4613      	mov	r3, r2
 8007df6:	71bb      	strb	r3, [r7, #6]
    // init gpsData structure. if we're not actually enabled, don't bother doing anything else
    gpsSetState(GPS_UNKNOWN);
 8007df8:	2000      	movs	r0, #0
 8007dfa:	f7ff fdd5 	bl	80079a8 <gpsSetState>

    gpsData.baudrateIndex = baudrateIndex;
 8007dfe:	4a21      	ldr	r2, [pc, #132]	; (8007e84 <gpsInit+0x9c>)
 8007e00:	79bb      	ldrb	r3, [r7, #6]
 8007e02:	7053      	strb	r3, [r2, #1]
    gpsData.lastMessage = pif_cumulative_timer1ms;
 8007e04:	4b20      	ldr	r3, [pc, #128]	; (8007e88 <gpsInit+0xa0>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a1e      	ldr	r2, [pc, #120]	; (8007e84 <gpsInit+0x9c>)
 8007e0a:	6093      	str	r3, [r2, #8]
    gpsData.errors = 0;
 8007e0c:	4b1d      	ldr	r3, [pc, #116]	; (8007e84 <gpsInit+0x9c>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	605a      	str	r2, [r3, #4]

    gpsSetPIDs();
 8007e12:	f000 ff0b 	bl	8008c2c <gpsSetPIDs>
    // Open GPS UART, no callback - buffer will be read out in gpsThread()
    core.gpsport = uartOpen(port, 9600, MODE_RXTX, 10);    // signal GPS "thread" to initialize when it gets to it, 5ms
 8007e16:	79f8      	ldrb	r0, [r7, #7]
 8007e18:	230a      	movs	r3, #10
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8007e20:	f7fa f906 	bl	8002030 <uartOpen>
 8007e24:	4603      	mov	r3, r0
 8007e26:	4a19      	ldr	r2, [pc, #100]	; (8007e8c <gpsInit+0xa4>)
 8007e28:	6093      	str	r3, [r2, #8]
    if (!core.gpsport) goto fail;
 8007e2a:	4b18      	ldr	r3, [pc, #96]	; (8007e8c <gpsInit+0xa4>)
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d01d      	beq.n	8007e6e <gpsInit+0x86>
    if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) goto fail;
 8007e32:	2100      	movs	r1, #0
 8007e34:	4816      	ldr	r0, [pc, #88]	; (8007e90 <gpsInit+0xa8>)
 8007e36:	f00f fa1b 	bl	8017270 <pifGpsUblox_Init>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d018      	beq.n	8007e72 <gpsInit+0x8a>
    pifGpsUblox_AttachComm(&gps_ublox, &core.gpsport->comm);
 8007e40:	4b12      	ldr	r3, [pc, #72]	; (8007e8c <gpsInit+0xa4>)
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	3304      	adds	r3, #4
 8007e46:	4619      	mov	r1, r3
 8007e48:	4811      	ldr	r0, [pc, #68]	; (8007e90 <gpsInit+0xa8>)
 8007e4a:	f00f fa6b 	bl	8017324 <pifGpsUblox_AttachComm>
    gps_ublox._gps.evt_receive = _evtGpsReceive;
 8007e4e:	4b10      	ldr	r3, [pc, #64]	; (8007e90 <gpsInit+0xa8>)
 8007e50:	4a10      	ldr	r2, [pc, #64]	; (8007e94 <gpsInit+0xac>)
 8007e52:	60da      	str	r2, [r3, #12]

    // signal GPS "thread" to initialize when it gets to it
    gpsSetState(GPS_INITIALIZING);
 8007e54:	2001      	movs	r0, #1
 8007e56:	f7ff fda7 	bl	80079a8 <gpsSetState>

    // copy ubx sbas config string to use
    if (mcfg.gps_ubx_sbas >= SBAS_LAST)
 8007e5a:	4b0f      	ldr	r3, [pc, #60]	; (8007e98 <gpsInit+0xb0>)
 8007e5c:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	dd0b      	ble.n	8007e7c <gpsInit+0x94>
        mcfg.gps_ubx_sbas = SBAS_AUTO;
 8007e64:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <gpsInit+0xb0>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad

    return;
 8007e6c:	e006      	b.n	8007e7c <gpsInit+0x94>
    if (!core.gpsport) goto fail;
 8007e6e:	bf00      	nop
 8007e70:	e000      	b.n	8007e74 <gpsInit+0x8c>
    if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) goto fail;
 8007e72:	bf00      	nop

fail:    
    sensorsClear(SENSOR_GPS);
 8007e74:	2020      	movs	r0, #32
 8007e76:	f7fe ff67 	bl	8006d48 <sensorsClear>
 8007e7a:	e000      	b.n	8007e7e <gpsInit+0x96>
    return;
 8007e7c:	bf00      	nop
}
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	20000fd0 	.word	0x20000fd0
 8007e88:	20001c24 	.word	0x20001c24
 8007e8c:	20000830 	.word	0x20000830
 8007e90:	20000ff0 	.word	0x20000ff0
 8007e94:	08007cc5 	.word	0x08007cc5
 8007e98:	200008e8 	.word	0x200008e8

08007e9c <gpsInitNmea>:

static void gpsInitNmea(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
    gps_ublox._gps.evt_nmea_receive = _evtGpsNmeaReceive;
 8007ea0:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <gpsInitNmea+0x24>)
 8007ea2:	4a08      	ldr	r2, [pc, #32]	; (8007ec4 <gpsInitNmea+0x28>)
 8007ea4:	609a      	str	r2, [r3, #8]
    pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8007ea6:	4b08      	ldr	r3, [pc, #32]	; (8007ec8 <gpsInitNmea+0x2c>)
 8007ea8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007eac:	4907      	ldr	r1, [pc, #28]	; (8007ecc <gpsInitNmea+0x30>)
 8007eae:	4808      	ldr	r0, [pc, #32]	; (8007ed0 <gpsInitNmea+0x34>)
 8007eb0:	f00d fe42 	bl	8015b38 <pifGps_SetTimeout>
    gpsSetState(GPS_RECEIVINGDATA);
 8007eb4:	2005      	movs	r0, #5
 8007eb6:	f7ff fd77 	bl	80079a8 <gpsSetState>
}
 8007eba:	bf00      	nop
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20000ff0 	.word	0x20000ff0
 8007ec4:	080079e9 	.word	0x080079e9
 8007ec8:	08007da1 	.word	0x08007da1
 8007ecc:	20001528 	.word	0x20001528
 8007ed0:	20000ff8 	.word	0x20000ff8

08007ed4 <gpsInitUblox>:

static void gpsInitUblox(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af02      	add	r7, sp, #8
    uint8_t i;
    int line = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	607b      	str	r3, [r7, #4]

	// GPS_CONFIGURATION, push some ublox config strings
	if (gpsData.step >= 50) {
 8007ede:	4b92      	ldr	r3, [pc, #584]	; (8008128 <gpsInitUblox+0x254>)
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	2b31      	cmp	r3, #49	; 0x31
 8007ee4:	dd45      	ble.n	8007f72 <gpsInitUblox+0x9e>
		if (gpsData.cfg_result == GUMI_ACK_ACK) {
 8007ee6:	4b90      	ldr	r3, [pc, #576]	; (8008128 <gpsInitUblox+0x254>)
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d118      	bne.n	8007f20 <gpsInitUblox+0x4c>
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_INFO, "GPS(%u) ACK:%u T=%lu", __LINE__, gpsData.step, pif_cumulative_timer1ms - gpsData.state_ts);
 8007eee:	4b8e      	ldr	r3, [pc, #568]	; (8008128 <gpsInitUblox+0x254>)
 8007ef0:	68d9      	ldr	r1, [r3, #12]
 8007ef2:	4b8e      	ldr	r3, [pc, #568]	; (800812c <gpsInitUblox+0x258>)
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	4b8c      	ldr	r3, [pc, #560]	; (8008128 <gpsInitUblox+0x254>)
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	460b      	mov	r3, r1
 8007f00:	f240 1227 	movw	r2, #295	; 0x127
 8007f04:	498a      	ldr	r1, [pc, #552]	; (8008130 <gpsInitUblox+0x25c>)
 8007f06:	2002      	movs	r0, #2
 8007f08:	f00b fa4c 	bl	80133a4 <pifLog_Printf>
#endif
	  		gpsData.step = (gpsData.step - 50) + 1;
 8007f0c:	4b86      	ldr	r3, [pc, #536]	; (8008128 <gpsInitUblox+0x254>)
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	3b31      	subs	r3, #49	; 0x31
 8007f12:	4a85      	ldr	r2, [pc, #532]	; (8008128 <gpsInitUblox+0x254>)
 8007f14:	60d3      	str	r3, [r2, #12]
			gpsData.state_ts = pif_cumulative_timer1ms;
 8007f16:	4b85      	ldr	r3, [pc, #532]	; (800812c <gpsInitUblox+0x258>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a83      	ldr	r2, [pc, #524]	; (8008128 <gpsInitUblox+0x254>)
 8007f1c:	6153      	str	r3, [r2, #20]
 8007f1e:	e164      	b.n	80081ea <gpsInitUblox+0x316>
		}
		else if (gpsData.cfg_result == GUMI_ACK_NAK) {
 8007f20:	4b81      	ldr	r3, [pc, #516]	; (8008128 <gpsInitUblox+0x254>)
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d114      	bne.n	8007f52 <gpsInitUblox+0x7e>
			pif_error = E_RECEIVE_NACK;
 8007f28:	4b82      	ldr	r3, [pc, #520]	; (8008134 <gpsInitUblox+0x260>)
 8007f2a:	2210      	movs	r2, #16
 8007f2c:	701a      	strb	r2, [r3, #0]
			line = __LINE__;
 8007f2e:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8007f32:	607b      	str	r3, [r7, #4]
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_INFO, "GPS(%u) NAK:%u T=%lu", line, gpsData.step, pif_cumulative_timer1ms - gpsData.state_ts);
 8007f34:	4b7c      	ldr	r3, [pc, #496]	; (8008128 <gpsInitUblox+0x254>)
 8007f36:	68d9      	ldr	r1, [r3, #12]
 8007f38:	4b7c      	ldr	r3, [pc, #496]	; (800812c <gpsInitUblox+0x258>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	4b7a      	ldr	r3, [pc, #488]	; (8008128 <gpsInitUblox+0x254>)
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	460b      	mov	r3, r1
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	497b      	ldr	r1, [pc, #492]	; (8008138 <gpsInitUblox+0x264>)
 8007f4a:	2002      	movs	r0, #2
 8007f4c:	f00b fa2a 	bl	80133a4 <pifLog_Printf>
 8007f50:	e14b      	b.n	80081ea <gpsInitUblox+0x316>
#endif
		}
		else {
			if (pif_cumulative_timer1ms - gpsData.state_ts >= 500) {
 8007f52:	4b76      	ldr	r3, [pc, #472]	; (800812c <gpsInitUblox+0x258>)
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	4b74      	ldr	r3, [pc, #464]	; (8008128 <gpsInitUblox+0x254>)
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007f60:	f0c0 8143 	bcc.w	80081ea <gpsInitUblox+0x316>
				pif_error = E_TIMEOUT;
 8007f64:	4b73      	ldr	r3, [pc, #460]	; (8008134 <gpsInitUblox+0x260>)
 8007f66:	2207      	movs	r2, #7
 8007f68:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8007f6a:	f44f 739b 	mov.w	r3, #310	; 0x136
 8007f6e:	607b      	str	r3, [r7, #4]
 8007f70:	e13b      	b.n	80081ea <gpsInitUblox+0x316>
			}
		}
	}
	else {
		if (gpsData.step < 10) {
 8007f72:	4b6d      	ldr	r3, [pc, #436]	; (8008128 <gpsInitUblox+0x254>)
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	2b09      	cmp	r3, #9
 8007f78:	dc0a      	bgt.n	8007f90 <gpsInitUblox+0xbc>
			gpsData.state_ts = pif_cumulative_timer1ms;
 8007f7a:	4b6c      	ldr	r3, [pc, #432]	; (800812c <gpsInitUblox+0x258>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a6a      	ldr	r2, [pc, #424]	; (8008128 <gpsInitUblox+0x254>)
 8007f80:	6153      	str	r3, [r2, #20]
			gps_ublox.evt_ubx_receive = _evtGpsUbxReceive;
 8007f82:	4b6e      	ldr	r3, [pc, #440]	; (800813c <gpsInitUblox+0x268>)
 8007f84:	4a6e      	ldr	r2, [pc, #440]	; (8008140 <gpsInitUblox+0x26c>)
 8007f86:	601a      	str	r2, [r3, #0]
			gpsData.step = 10;
 8007f88:	4b67      	ldr	r3, [pc, #412]	; (8008128 <gpsInitUblox+0x254>)
 8007f8a:	220a      	movs	r2, #10
 8007f8c:	60da      	str	r2, [r3, #12]
 8007f8e:	e12c      	b.n	80081ea <gpsInitUblox+0x316>
		}
		else if (gpsData.step < 10 + kCfgMsgNmeaSize) {
 8007f90:	2306      	movs	r3, #6
 8007f92:	f103 0209 	add.w	r2, r3, #9
 8007f96:	4b64      	ldr	r3, [pc, #400]	; (8008128 <gpsInitUblox+0x254>)
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	db29      	blt.n	8007ff2 <gpsInitUblox+0x11e>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_MSG, sizeof(kCfgMsgNmea[gpsData.step - 10]), (uint8_t*)kCfgMsgNmea[gpsData.step - 10], FALSE)) {
 8007f9e:	4b62      	ldr	r3, [pc, #392]	; (8008128 <gpsInitUblox+0x254>)
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f1a3 020a 	sub.w	r2, r3, #10
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	4413      	add	r3, r2
 8007fac:	4a65      	ldr	r2, [pc, #404]	; (8008144 <gpsInitUblox+0x270>)
 8007fae:	4413      	add	r3, r2
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	9201      	str	r2, [sp, #4]
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	2201      	movs	r2, #1
 8007fba:	2106      	movs	r1, #6
 8007fbc:	485f      	ldr	r0, [pc, #380]	; (800813c <gpsInitUblox+0x268>)
 8007fbe:	f00f f9ff 	bl	80173c0 <pifGpsUblox_SendUbxMsg>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00d      	beq.n	8007fe4 <gpsInitUblox+0x110>
                gpsData.cfg_result = -1;
 8007fc8:	4b57      	ldr	r3, [pc, #348]	; (8008128 <gpsInitUblox+0x254>)
 8007fca:	f04f 32ff 	mov.w	r2, #4294967295
 8007fce:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 8007fd0:	4b55      	ldr	r3, [pc, #340]	; (8008128 <gpsInitUblox+0x254>)
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	3332      	adds	r3, #50	; 0x32
 8007fd6:	4a54      	ldr	r2, [pc, #336]	; (8008128 <gpsInitUblox+0x254>)
 8007fd8:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8007fda:	4b54      	ldr	r3, [pc, #336]	; (800812c <gpsInitUblox+0x258>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a52      	ldr	r2, [pc, #328]	; (8008128 <gpsInitUblox+0x254>)
 8007fe0:	6153      	str	r3, [r2, #20]
 8007fe2:	e102      	b.n	80081ea <gpsInitUblox+0x316>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8007fe4:	4b53      	ldr	r3, [pc, #332]	; (8008134 <gpsInitUblox+0x260>)
 8007fe6:	220a      	movs	r2, #10
 8007fe8:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8007fea:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8007fee:	607b      	str	r3, [r7, #4]
 8007ff0:	e0fb      	b.n	80081ea <gpsInitUblox+0x316>
			}
		}
		else if (gpsData.step < 20) {
 8007ff2:	4b4d      	ldr	r3, [pc, #308]	; (8008128 <gpsInitUblox+0x254>)
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	2b13      	cmp	r3, #19
 8007ff8:	dc03      	bgt.n	8008002 <gpsInitUblox+0x12e>
			gpsData.step = 20;
 8007ffa:	4b4b      	ldr	r3, [pc, #300]	; (8008128 <gpsInitUblox+0x254>)
 8007ffc:	2214      	movs	r2, #20
 8007ffe:	60da      	str	r2, [r3, #12]
 8008000:	e0f3      	b.n	80081ea <gpsInitUblox+0x316>
		}
		else if (gpsData.step < 20 + kCfgMsgNavSize) {
 8008002:	2305      	movs	r3, #5
 8008004:	f103 0213 	add.w	r2, r3, #19
 8008008:	4b47      	ldr	r3, [pc, #284]	; (8008128 <gpsInitUblox+0x254>)
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	429a      	cmp	r2, r3
 800800e:	db29      	blt.n	8008064 <gpsInitUblox+0x190>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_MSG, sizeof(kCfgMsgNav[gpsData.step - 20]), (uint8_t*)kCfgMsgNav[gpsData.step - 20], FALSE)) {
 8008010:	4b45      	ldr	r3, [pc, #276]	; (8008128 <gpsInitUblox+0x254>)
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f1a3 0214 	sub.w	r2, r3, #20
 8008018:	4613      	mov	r3, r2
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	4413      	add	r3, r2
 800801e:	4a4a      	ldr	r2, [pc, #296]	; (8008148 <gpsInitUblox+0x274>)
 8008020:	4413      	add	r3, r2
 8008022:	2200      	movs	r2, #0
 8008024:	9201      	str	r2, [sp, #4]
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	2303      	movs	r3, #3
 800802a:	2201      	movs	r2, #1
 800802c:	2106      	movs	r1, #6
 800802e:	4843      	ldr	r0, [pc, #268]	; (800813c <gpsInitUblox+0x268>)
 8008030:	f00f f9c6 	bl	80173c0 <pifGpsUblox_SendUbxMsg>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00d      	beq.n	8008056 <gpsInitUblox+0x182>
                gpsData.cfg_result = -1;
 800803a:	4b3b      	ldr	r3, [pc, #236]	; (8008128 <gpsInitUblox+0x254>)
 800803c:	f04f 32ff 	mov.w	r2, #4294967295
 8008040:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 8008042:	4b39      	ldr	r3, [pc, #228]	; (8008128 <gpsInitUblox+0x254>)
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	3332      	adds	r3, #50	; 0x32
 8008048:	4a37      	ldr	r2, [pc, #220]	; (8008128 <gpsInitUblox+0x254>)
 800804a:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 800804c:	4b37      	ldr	r3, [pc, #220]	; (800812c <gpsInitUblox+0x258>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a35      	ldr	r2, [pc, #212]	; (8008128 <gpsInitUblox+0x254>)
 8008052:	6153      	str	r3, [r2, #20]
 8008054:	e0c9      	b.n	80081ea <gpsInitUblox+0x316>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008056:	4b37      	ldr	r3, [pc, #220]	; (8008134 <gpsInitUblox+0x260>)
 8008058:	220a      	movs	r2, #10
 800805a:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800805c:	f44f 73ab 	mov.w	r3, #342	; 0x156
 8008060:	607b      	str	r3, [r7, #4]
 8008062:	e0c2      	b.n	80081ea <gpsInitUblox+0x316>
			}
		}
		else if (gpsData.step < 30) {
 8008064:	4b30      	ldr	r3, [pc, #192]	; (8008128 <gpsInitUblox+0x254>)
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	2b1d      	cmp	r3, #29
 800806a:	dc03      	bgt.n	8008074 <gpsInitUblox+0x1a0>
			gpsData.step = 30;
 800806c:	4b2e      	ldr	r3, [pc, #184]	; (8008128 <gpsInitUblox+0x254>)
 800806e:	221e      	movs	r2, #30
 8008070:	60da      	str	r2, [r3, #12]
 8008072:	e0ba      	b.n	80081ea <gpsInitUblox+0x316>
		}
		else if (gpsData.step == 30) {
 8008074:	4b2c      	ldr	r3, [pc, #176]	; (8008128 <gpsInitUblox+0x254>)
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	2b1e      	cmp	r3, #30
 800807a:	d121      	bne.n	80080c0 <gpsInitUblox+0x1ec>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_RATE, sizeof(kCfgRate), (uint8_t*)kCfgRate, FALSE)) {
 800807c:	2300      	movs	r3, #0
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	4b32      	ldr	r3, [pc, #200]	; (800814c <gpsInitUblox+0x278>)
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	2306      	movs	r3, #6
 8008086:	2208      	movs	r2, #8
 8008088:	2106      	movs	r1, #6
 800808a:	482c      	ldr	r0, [pc, #176]	; (800813c <gpsInitUblox+0x268>)
 800808c:	f00f f998 	bl	80173c0 <pifGpsUblox_SendUbxMsg>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00d      	beq.n	80080b2 <gpsInitUblox+0x1de>
                gpsData.cfg_result = -1;
 8008096:	4b24      	ldr	r3, [pc, #144]	; (8008128 <gpsInitUblox+0x254>)
 8008098:	f04f 32ff 	mov.w	r2, #4294967295
 800809c:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 800809e:	4b22      	ldr	r3, [pc, #136]	; (8008128 <gpsInitUblox+0x254>)
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	3332      	adds	r3, #50	; 0x32
 80080a4:	4a20      	ldr	r2, [pc, #128]	; (8008128 <gpsInitUblox+0x254>)
 80080a6:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 80080a8:	4b20      	ldr	r3, [pc, #128]	; (800812c <gpsInitUblox+0x258>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a1e      	ldr	r2, [pc, #120]	; (8008128 <gpsInitUblox+0x254>)
 80080ae:	6153      	str	r3, [r2, #20]
 80080b0:	e09b      	b.n	80081ea <gpsInitUblox+0x316>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 80080b2:	4b20      	ldr	r3, [pc, #128]	; (8008134 <gpsInitUblox+0x260>)
 80080b4:	220a      	movs	r2, #10
 80080b6:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80080b8:	f44f 73b2 	mov.w	r3, #356	; 0x164
 80080bc:	607b      	str	r3, [r7, #4]
 80080be:	e094      	b.n	80081ea <gpsInitUblox+0x316>
			}
		}
		else if (gpsData.step == 31) {
 80080c0:	4b19      	ldr	r3, [pc, #100]	; (8008128 <gpsInitUblox+0x254>)
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	2b1f      	cmp	r3, #31
 80080c6:	d121      	bne.n	800810c <gpsInitUblox+0x238>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_NAV5, sizeof(kCfgNav5), (uint8_t*)kCfgNav5, FALSE)) {
 80080c8:	2300      	movs	r3, #0
 80080ca:	9301      	str	r3, [sp, #4]
 80080cc:	4b20      	ldr	r3, [pc, #128]	; (8008150 <gpsInitUblox+0x27c>)
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	2324      	movs	r3, #36	; 0x24
 80080d2:	2224      	movs	r2, #36	; 0x24
 80080d4:	2106      	movs	r1, #6
 80080d6:	4819      	ldr	r0, [pc, #100]	; (800813c <gpsInitUblox+0x268>)
 80080d8:	f00f f972 	bl	80173c0 <pifGpsUblox_SendUbxMsg>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00d      	beq.n	80080fe <gpsInitUblox+0x22a>
                gpsData.cfg_result = -1;
 80080e2:	4b11      	ldr	r3, [pc, #68]	; (8008128 <gpsInitUblox+0x254>)
 80080e4:	f04f 32ff 	mov.w	r2, #4294967295
 80080e8:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 80080ea:	4b0f      	ldr	r3, [pc, #60]	; (8008128 <gpsInitUblox+0x254>)
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	3332      	adds	r3, #50	; 0x32
 80080f0:	4a0d      	ldr	r2, [pc, #52]	; (8008128 <gpsInitUblox+0x254>)
 80080f2:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 80080f4:	4b0d      	ldr	r3, [pc, #52]	; (800812c <gpsInitUblox+0x258>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a0b      	ldr	r2, [pc, #44]	; (8008128 <gpsInitUblox+0x254>)
 80080fa:	6153      	str	r3, [r2, #20]
 80080fc:	e075      	b.n	80081ea <gpsInitUblox+0x316>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 80080fe:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <gpsInitUblox+0x260>)
 8008100:	220a      	movs	r2, #10
 8008102:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008104:	f240 136f 	movw	r3, #367	; 0x16f
 8008108:	607b      	str	r3, [r7, #4]
 800810a:	e06e      	b.n	80081ea <gpsInitUblox+0x316>
			}
		}
		else if (gpsData.step == 32) {
 800810c:	4b06      	ldr	r3, [pc, #24]	; (8008128 <gpsInitUblox+0x254>)
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	2b20      	cmp	r3, #32
 8008112:	d148      	bne.n	80081a6 <gpsInitUblox+0x2d2>
			i = mcfg.gps_ubx_sbas > SBAS_DISABLED ? mcfg.gps_ubx_sbas : SBAS_LAST;
 8008114:	4b0f      	ldr	r3, [pc, #60]	; (8008154 <gpsInitUblox+0x280>)
 8008116:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 800811a:	2b00      	cmp	r3, #0
 800811c:	db1c      	blt.n	8008158 <gpsInitUblox+0x284>
 800811e:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <gpsInitUblox+0x280>)
 8008120:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8008124:	b2db      	uxtb	r3, r3
 8008126:	e018      	b.n	800815a <gpsInitUblox+0x286>
 8008128:	20000fd0 	.word	0x20000fd0
 800812c:	20001c24 	.word	0x20001c24
 8008130:	08027074 	.word	0x08027074
 8008134:	20001c0d 	.word	0x20001c0d
 8008138:	0802708c 	.word	0x0802708c
 800813c:	20000ff0 	.word	0x20000ff0
 8008140:	08007b31 	.word	0x08007b31
 8008144:	08028790 	.word	0x08028790
 8008148:	080287a4 	.word	0x080287a4
 800814c:	080287b4 	.word	0x080287b4
 8008150:	080287bc 	.word	0x080287bc
 8008154:	200008e8 	.word	0x200008e8
 8008158:	2305      	movs	r3, #5
 800815a:	70fb      	strb	r3, [r7, #3]
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_SBAS, sizeof(kCfgSbas[i]), (uint8_t*)kCfgSbas[i], FALSE)) {
 800815c:	78fb      	ldrb	r3, [r7, #3]
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	4a2c      	ldr	r2, [pc, #176]	; (8008214 <gpsInitUblox+0x340>)
 8008162:	4413      	add	r3, r2
 8008164:	2200      	movs	r2, #0
 8008166:	9201      	str	r2, [sp, #4]
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	2308      	movs	r3, #8
 800816c:	2216      	movs	r2, #22
 800816e:	2106      	movs	r1, #6
 8008170:	4829      	ldr	r0, [pc, #164]	; (8008218 <gpsInitUblox+0x344>)
 8008172:	f00f f925 	bl	80173c0 <pifGpsUblox_SendUbxMsg>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00d      	beq.n	8008198 <gpsInitUblox+0x2c4>
                gpsData.cfg_result = -1;
 800817c:	4b27      	ldr	r3, [pc, #156]	; (800821c <gpsInitUblox+0x348>)
 800817e:	f04f 32ff 	mov.w	r2, #4294967295
 8008182:	61da      	str	r2, [r3, #28]
				gpsData.step += 50;
 8008184:	4b25      	ldr	r3, [pc, #148]	; (800821c <gpsInitUblox+0x348>)
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	3332      	adds	r3, #50	; 0x32
 800818a:	4a24      	ldr	r2, [pc, #144]	; (800821c <gpsInitUblox+0x348>)
 800818c:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 800818e:	4b24      	ldr	r3, [pc, #144]	; (8008220 <gpsInitUblox+0x34c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a22      	ldr	r2, [pc, #136]	; (800821c <gpsInitUblox+0x348>)
 8008194:	6153      	str	r3, [r2, #20]
 8008196:	e028      	b.n	80081ea <gpsInitUblox+0x316>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008198:	4b22      	ldr	r3, [pc, #136]	; (8008224 <gpsInitUblox+0x350>)
 800819a:	220a      	movs	r2, #10
 800819c:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800819e:	f240 137b 	movw	r3, #379	; 0x17b
 80081a2:	607b      	str	r3, [r7, #4]
 80081a4:	e021      	b.n	80081ea <gpsInitUblox+0x316>
			}
		}
		else if (gpsData.step == 33) {
 80081a6:	4b1d      	ldr	r3, [pc, #116]	; (800821c <gpsInitUblox+0x348>)
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	2b21      	cmp	r3, #33	; 0x21
 80081ac:	d11d      	bne.n	80081ea <gpsInitUblox+0x316>
			if (pif_cumulative_timer1ms - gpsData.state_ts < 10000) {
 80081ae:	4b1c      	ldr	r3, [pc, #112]	; (8008220 <gpsInitUblox+0x34c>)
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	4b1a      	ldr	r3, [pc, #104]	; (800821c <gpsInitUblox+0x348>)
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80081bc:	4293      	cmp	r3, r2
 80081be:	d80e      	bhi.n	80081de <gpsInitUblox+0x30a>
				if (gpsData.receive) {
 80081c0:	4b16      	ldr	r3, [pc, #88]	; (800821c <gpsInitUblox+0x348>)
 80081c2:	7e1b      	ldrb	r3, [r3, #24]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d010      	beq.n	80081ea <gpsInitUblox+0x316>
					// ublox should be init'd, time to try receiving some junk
					pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 80081c8:	4b17      	ldr	r3, [pc, #92]	; (8008228 <gpsInitUblox+0x354>)
 80081ca:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80081ce:	4917      	ldr	r1, [pc, #92]	; (800822c <gpsInitUblox+0x358>)
 80081d0:	4817      	ldr	r0, [pc, #92]	; (8008230 <gpsInitUblox+0x35c>)
 80081d2:	f00d fcb1 	bl	8015b38 <pifGps_SetTimeout>
					gpsSetState(GPS_RECEIVINGDATA);
 80081d6:	2005      	movs	r0, #5
 80081d8:	f7ff fbe6 	bl	80079a8 <gpsSetState>
 80081dc:	e005      	b.n	80081ea <gpsInitUblox+0x316>
				}
			}
			else {
				pif_error = E_TIMEOUT;
 80081de:	4b11      	ldr	r3, [pc, #68]	; (8008224 <gpsInitUblox+0x350>)
 80081e0:	2207      	movs	r2, #7
 80081e2:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80081e4:	f44f 73c4 	mov.w	r3, #392	; 0x188
 80081e8:	607b      	str	r3, [r7, #4]
			}
		}
	}

	if (line) {
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00c      	beq.n	800820a <gpsInitUblox+0x336>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "GPS(%u) S:%u E:%u", line, gpsData.step, pif_error);
 80081f0:	4b0a      	ldr	r3, [pc, #40]	; (800821c <gpsInitUblox+0x348>)
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	4a0b      	ldr	r2, [pc, #44]	; (8008224 <gpsInitUblox+0x350>)
 80081f6:	7812      	ldrb	r2, [r2, #0]
 80081f8:	9200      	str	r2, [sp, #0]
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	490d      	ldr	r1, [pc, #52]	; (8008234 <gpsInitUblox+0x360>)
 80081fe:	2004      	movs	r0, #4
 8008200:	f00b f8d0 	bl	80133a4 <pifLog_Printf>
#endif
		_evtGpsTimeout(&gps_ublox._gps);
 8008204:	480a      	ldr	r0, [pc, #40]	; (8008230 <gpsInitUblox+0x35c>)
 8008206:	f7ff fdcb 	bl	8007da0 <_evtGpsTimeout>
	}
}
 800820a:	bf00      	nop
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	080287e0 	.word	0x080287e0
 8008218:	20000ff0 	.word	0x20000ff0
 800821c:	20000fd0 	.word	0x20000fd0
 8008220:	20001c24 	.word	0x20001c24
 8008224:	20001c0d 	.word	0x20001c0d
 8008228:	08007da1 	.word	0x08007da1
 800822c:	20001528 	.word	0x20001528
 8008230:	20000ff8 	.word	0x20000ff8
 8008234:	080270a4 	.word	0x080270a4

08008238 <gpsInitHardware>:

static void gpsInitHardware(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0
    switch (mcfg.gps_type) {
 800823c:	4b0b      	ldr	r3, [pc, #44]	; (800826c <gpsInitHardware+0x34>)
 800823e:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008242:	2b03      	cmp	r3, #3
 8008244:	dc0d      	bgt.n	8008262 <gpsInitHardware+0x2a>
 8008246:	2b02      	cmp	r3, #2
 8008248:	da0a      	bge.n	8008260 <gpsInitHardware+0x28>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d002      	beq.n	8008254 <gpsInitHardware+0x1c>
 800824e:	2b01      	cmp	r3, #1
 8008250:	d003      	beq.n	800825a <gpsInitHardware+0x22>
 8008252:	e006      	b.n	8008262 <gpsInitHardware+0x2a>
        case GPS_NMEA:
            gpsInitNmea();
 8008254:	f7ff fe22 	bl	8007e9c <gpsInitNmea>
            break;
 8008258:	e003      	b.n	8008262 <gpsInitHardware+0x2a>

        case GPS_UBLOX:
            gpsInitUblox();
 800825a:	f7ff fe3b 	bl	8007ed4 <gpsInitUblox>
            break;
 800825e:	e000      	b.n	8008262 <gpsInitHardware+0x2a>

        case GPS_MTK_NMEA:
        case GPS_MTK_BINARY:
            // TODO. need to find my old piece of shit MTK GPS.
            break;
 8008260:	bf00      	nop
    }

    // clear error counter
    gpsData.errors = 0;
 8008262:	4b03      	ldr	r3, [pc, #12]	; (8008270 <gpsInitHardware+0x38>)
 8008264:	2200      	movs	r2, #0
 8008266:	605a      	str	r2, [r3, #4]
}
 8008268:	bf00      	nop
 800826a:	bd80      	pop	{r7, pc}
 800826c:	200008e8 	.word	0x200008e8
 8008270:	20000fd0 	.word	0x20000fd0

08008274 <gpsThread>:

void gpsThread(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af02      	add	r7, sp, #8
    uint32_t m;

    switch (gpsData.state) {
 800827a:	4b66      	ldr	r3, [pc, #408]	; (8008414 <gpsThread+0x1a0>)
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	2b06      	cmp	r3, #6
 8008280:	f200 80c4 	bhi.w	800840c <gpsThread+0x198>
 8008284:	a201      	add	r2, pc, #4	; (adr r2, 800828c <gpsThread+0x18>)
 8008286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828a:	bf00      	nop
 800828c:	0800840d 	.word	0x0800840d
 8008290:	080082a9 	.word	0x080082a9
 8008294:	08008305 	.word	0x08008305
 8008298:	0800835b 	.word	0x0800835b
 800829c:	0800839b 	.word	0x0800839b
 80082a0:	0800840d 	.word	0x0800840d
 80082a4:	080083a1 	.word	0x080083a1
        case GPS_UNKNOWN:
            break;

        case GPS_INITIALIZING:
            m = pif_cumulative_timer1ms;
 80082a8:	4b5b      	ldr	r3, [pc, #364]	; (8008418 <gpsThread+0x1a4>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < (gpsData.state_position ? GPS_BAUD_DELAY : 3000))
 80082ae:	4b59      	ldr	r3, [pc, #356]	; (8008414 <gpsThread+0x1a0>)
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	4a57      	ldr	r2, [pc, #348]	; (8008414 <gpsThread+0x1a0>)
 80082b8:	6912      	ldr	r2, [r2, #16]
 80082ba:	2a00      	cmp	r2, #0
 80082bc:	d002      	beq.n	80082c4 <gpsThread+0x50>
 80082be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80082c2:	e001      	b.n	80082c8 <gpsThread+0x54>
 80082c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80082c8:	429a      	cmp	r2, r3
 80082ca:	f200 809a 	bhi.w	8008402 <gpsThread+0x18e>
                return;

            if (gpsData.state_position < GPS_INIT_ENTRIES) {
 80082ce:	4b51      	ldr	r3, [pc, #324]	; (8008414 <gpsThread+0x1a0>)
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b04      	cmp	r3, #4
 80082d4:	dc12      	bgt.n	80082fc <gpsThread+0x88>
                // try different speed to INIT
                serialSetBaudRate(core.gpsport, gpsInitData[gpsData.state_position].baudrate);
 80082d6:	4b51      	ldr	r3, [pc, #324]	; (800841c <gpsThread+0x1a8>)
 80082d8:	689a      	ldr	r2, [r3, #8]
 80082da:	4b4e      	ldr	r3, [pc, #312]	; (8008414 <gpsThread+0x1a0>)
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	4950      	ldr	r1, [pc, #320]	; (8008420 <gpsThread+0x1ac>)
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	440b      	add	r3, r1
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	4619      	mov	r1, r3
 80082e8:	4610      	mov	r0, r2
 80082ea:	f7fa f81b 	bl	8002324 <serialSetBaudRate>
                gpsData.state = GPS_SENDBAUD;
 80082ee:	4b49      	ldr	r3, [pc, #292]	; (8008414 <gpsThread+0x1a0>)
 80082f0:	2202      	movs	r2, #2
 80082f2:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 80082f4:	4a47      	ldr	r2, [pc, #284]	; (8008414 <gpsThread+0x1a0>)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6153      	str	r3, [r2, #20]
            else
            {
                // we're now (hopefully) at the correct rate, next state will switch to it
                gpsSetState(GPS_SETBAUD);
            }
            break;
 80082fa:	e087      	b.n	800840c <gpsThread+0x198>
                gpsSetState(GPS_SETBAUD);
 80082fc:	2003      	movs	r0, #3
 80082fe:	f7ff fb53 	bl	80079a8 <gpsSetState>
            break;
 8008302:	e083      	b.n	800840c <gpsThread+0x198>

        case GPS_SENDBAUD:
            m = pif_cumulative_timer1ms;
 8008304:	4b44      	ldr	r3, [pc, #272]	; (8008418 <gpsThread+0x1a4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < 200)
 800830a:	4b42      	ldr	r3, [pc, #264]	; (8008414 <gpsThread+0x1a0>)
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	2bc7      	cmp	r3, #199	; 0xc7
 8008314:	d977      	bls.n	8008406 <gpsThread+0x192>
                return;

            // but print our FIXED init string for the baudrate we want to be at
            if (pifGpsUblox_SetPubxConfig(&gps_ublox, 1, 0x07, 0x03, gpsInitData[gpsData.baudrateIndex].baudrate, FALSE)) {
 8008316:	4b3f      	ldr	r3, [pc, #252]	; (8008414 <gpsThread+0x1a0>)
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	4a41      	ldr	r2, [pc, #260]	; (8008420 <gpsThread+0x1ac>)
 800831c:	00db      	lsls	r3, r3, #3
 800831e:	4413      	add	r3, r2
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	9201      	str	r2, [sp, #4]
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	2303      	movs	r3, #3
 800832a:	2207      	movs	r2, #7
 800832c:	2101      	movs	r1, #1
 800832e:	483d      	ldr	r0, [pc, #244]	; (8008424 <gpsThread+0x1b0>)
 8008330:	f00f f810 	bl	8017354 <pifGpsUblox_SetPubxConfig>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00b      	beq.n	8008352 <gpsThread+0xde>
                gpsData.state_position++;
 800833a:	4b36      	ldr	r3, [pc, #216]	; (8008414 <gpsThread+0x1a0>)
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	3301      	adds	r3, #1
 8008340:	4a34      	ldr	r2, [pc, #208]	; (8008414 <gpsThread+0x1a0>)
 8008342:	6113      	str	r3, [r2, #16]
                gpsData.state = GPS_INITIALIZING;
 8008344:	4b33      	ldr	r3, [pc, #204]	; (8008414 <gpsThread+0x1a0>)
 8008346:	2201      	movs	r2, #1
 8008348:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 800834a:	4a32      	ldr	r2, [pc, #200]	; (8008414 <gpsThread+0x1a0>)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6153      	str	r3, [r2, #20]
            }
            else {
        		gpsSetState(GPS_INITIALIZING);
            }
            break;
 8008350:	e05c      	b.n	800840c <gpsThread+0x198>
        		gpsSetState(GPS_INITIALIZING);
 8008352:	2001      	movs	r0, #1
 8008354:	f7ff fb28 	bl	80079a8 <gpsSetState>
            break;
 8008358:	e058      	b.n	800840c <gpsThread+0x198>

        case GPS_SETBAUD:
            m = pif_cumulative_timer1ms;
 800835a:	4b2f      	ldr	r3, [pc, #188]	; (8008418 <gpsThread+0x1a4>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < GPS_BAUD_DELAY)
 8008360:	4b2c      	ldr	r3, [pc, #176]	; (8008414 <gpsThread+0x1a0>)
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800836c:	d34d      	bcc.n	800840a <gpsThread+0x196>
                return;

            serialSetBaudRate(core.gpsport, gpsInitData[gpsData.baudrateIndex].baudrate);
 800836e:	4b2b      	ldr	r3, [pc, #172]	; (800841c <gpsThread+0x1a8>)
 8008370:	689a      	ldr	r2, [r3, #8]
 8008372:	4b28      	ldr	r3, [pc, #160]	; (8008414 <gpsThread+0x1a0>)
 8008374:	785b      	ldrb	r3, [r3, #1]
 8008376:	492a      	ldr	r1, [pc, #168]	; (8008420 <gpsThread+0x1ac>)
 8008378:	00db      	lsls	r3, r3, #3
 800837a:	440b      	add	r3, r1
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f7f9 ffcf 	bl	8002324 <serialSetBaudRate>
        	serialStartReceiveFunc(&core.gpsport->comm);
 8008386:	4b25      	ldr	r3, [pc, #148]	; (800841c <gpsThread+0x1a8>)
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	3304      	adds	r3, #4
 800838c:	4618      	mov	r0, r3
 800838e:	f7f9 ffdb 	bl	8002348 <serialStartReceiveFunc>
            gpsSetState(GPS_CONFIGURATION);
 8008392:	2004      	movs	r0, #4
 8008394:	f7ff fb08 	bl	80079a8 <gpsSetState>
            break;
 8008398:	e038      	b.n	800840c <gpsThread+0x198>

        case GPS_CONFIGURATION:
            gpsInitHardware();
 800839a:	f7ff ff4d 	bl	8008238 <gpsInitHardware>
            break;
 800839e:	e035      	b.n	800840c <gpsThread+0x198>

        case GPS_LOSTCOMMS:
            pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, 0, NULL);
 80083a0:	2300      	movs	r3, #0
 80083a2:	2200      	movs	r2, #0
 80083a4:	4920      	ldr	r1, [pc, #128]	; (8008428 <gpsThread+0x1b4>)
 80083a6:	4821      	ldr	r0, [pc, #132]	; (800842c <gpsThread+0x1b8>)
 80083a8:	f00d fbc6 	bl	8015b38 <pifGps_SetTimeout>
            gpsData.errors++;
 80083ac:	4b19      	ldr	r3, [pc, #100]	; (8008414 <gpsThread+0x1a0>)
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	3301      	adds	r3, #1
 80083b2:	4a18      	ldr	r2, [pc, #96]	; (8008414 <gpsThread+0x1a0>)
 80083b4:	6053      	str	r3, [r2, #4]
            // try another rate (Only if autobauding is enabled)
            if (mcfg.gps_autobaud) {
 80083b6:	4b1e      	ldr	r3, [pc, #120]	; (8008430 <gpsThread+0x1bc>)
 80083b8:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d012      	beq.n	80083e6 <gpsThread+0x172>
                gpsData.baudrateIndex++;
 80083c0:	4b14      	ldr	r3, [pc, #80]	; (8008414 <gpsThread+0x1a0>)
 80083c2:	785b      	ldrb	r3, [r3, #1]
 80083c4:	3301      	adds	r3, #1
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	4b12      	ldr	r3, [pc, #72]	; (8008414 <gpsThread+0x1a0>)
 80083ca:	705a      	strb	r2, [r3, #1]
                gpsData.baudrateIndex %= GPS_INIT_ENTRIES;
 80083cc:	4b11      	ldr	r3, [pc, #68]	; (8008414 <gpsThread+0x1a0>)
 80083ce:	785a      	ldrb	r2, [r3, #1]
 80083d0:	4b18      	ldr	r3, [pc, #96]	; (8008434 <gpsThread+0x1c0>)
 80083d2:	fba3 1302 	umull	r1, r3, r3, r2
 80083d6:	0899      	lsrs	r1, r3, #2
 80083d8:	460b      	mov	r3, r1
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	440b      	add	r3, r1
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <gpsThread+0x1a0>)
 80083e4:	705a      	strb	r2, [r3, #1]
            }
            gpsData.lastMessage = pif_cumulative_timer1ms;
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <gpsThread+0x1a4>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a0a      	ldr	r2, [pc, #40]	; (8008414 <gpsThread+0x1a0>)
 80083ec:	6093      	str	r3, [r2, #8]
            // TODO - move some / all of these into gpsData
            GPS_numSat = 0;
 80083ee:	4b12      	ldr	r3, [pc, #72]	; (8008438 <gpsThread+0x1c4>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	701a      	strb	r2, [r3, #0]
            f.GPS_FIX = 0;
 80083f4:	4b11      	ldr	r3, [pc, #68]	; (800843c <gpsThread+0x1c8>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	72da      	strb	r2, [r3, #11]
            gpsSetState(GPS_INITIALIZING);
 80083fa:	2001      	movs	r0, #1
 80083fc:	f7ff fad4 	bl	80079a8 <gpsSetState>
            break;
 8008400:	e004      	b.n	800840c <gpsThread+0x198>
                return;
 8008402:	bf00      	nop
 8008404:	e002      	b.n	800840c <gpsThread+0x198>
                return;
 8008406:	bf00      	nop
 8008408:	e000      	b.n	800840c <gpsThread+0x198>
                return;
 800840a:	bf00      	nop

        case GPS_RECEIVINGDATA:
            break;
    }
}
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	20000fd0 	.word	0x20000fd0
 8008418:	20001c24 	.word	0x20001c24
 800841c:	20000830 	.word	0x20000830
 8008420:	08028768 	.word	0x08028768
 8008424:	20000ff0 	.word	0x20000ff0
 8008428:	20001528 	.word	0x20001528
 800842c:	20000ff8 	.word	0x20000ff8
 8008430:	200008e8 	.word	0x200008e8
 8008434:	cccccccd 	.word	0xcccccccd
 8008438:	200017d8 	.word	0x200017d8
 800843c:	200016f4 	.word	0x200016f4

08008440 <gpsPollSvinfo>:

// gpsPollSvinfo-function. Used for polling UBX-NAV-SVINFO (0x01 0x30) information from GPS.
void gpsPollSvinfo(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af02      	add	r7, sp, #8
    // If selected GPS isn't UBLOX then we don't poll UBX messages.
    if (mcfg.gps_type != GPS_UBLOX)
 8008446:	4b2b      	ldr	r3, [pc, #172]	; (80084f4 <gpsPollSvinfo+0xb4>)
 8008448:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 800844c:	2b01      	cmp	r3, #1
 800844e:	d14d      	bne.n	80084ec <gpsPollSvinfo+0xac>
        return;

    GPS_numCh = gps_ublox._num_ch;
 8008450:	4b29      	ldr	r3, [pc, #164]	; (80084f8 <gpsPollSvinfo+0xb8>)
 8008452:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8008456:	4b29      	ldr	r3, [pc, #164]	; (80084fc <gpsPollSvinfo+0xbc>)
 8008458:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 800845a:	2300      	movs	r3, #0
 800845c:	607b      	str	r3, [r7, #4]
 800845e:	e02a      	b.n	80084b6 <gpsPollSvinfo+0x76>
        GPS_svinfo_chn[i] = gps_ublox._svinfo_chn[i];
 8008460:	4a25      	ldr	r2, [pc, #148]	; (80084f8 <gpsPollSvinfo+0xb8>)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4413      	add	r3, r2
 8008466:	33b9      	adds	r3, #185	; 0xb9
 8008468:	7819      	ldrb	r1, [r3, #0]
 800846a:	4a25      	ldr	r2, [pc, #148]	; (8008500 <gpsPollSvinfo+0xc0>)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4413      	add	r3, r2
 8008470:	460a      	mov	r2, r1
 8008472:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_svid[i] = gps_ublox._svinfo_svid[i];
 8008474:	4a20      	ldr	r2, [pc, #128]	; (80084f8 <gpsPollSvinfo+0xb8>)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4413      	add	r3, r2
 800847a:	33c9      	adds	r3, #201	; 0xc9
 800847c:	7819      	ldrb	r1, [r3, #0]
 800847e:	4a21      	ldr	r2, [pc, #132]	; (8008504 <gpsPollSvinfo+0xc4>)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4413      	add	r3, r2
 8008484:	460a      	mov	r2, r1
 8008486:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_quality[i] = gps_ublox._svinfo_quality[i];
 8008488:	4a1b      	ldr	r2, [pc, #108]	; (80084f8 <gpsPollSvinfo+0xb8>)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4413      	add	r3, r2
 800848e:	33d9      	adds	r3, #217	; 0xd9
 8008490:	7819      	ldrb	r1, [r3, #0]
 8008492:	4a1d      	ldr	r2, [pc, #116]	; (8008508 <gpsPollSvinfo+0xc8>)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4413      	add	r3, r2
 8008498:	460a      	mov	r2, r1
 800849a:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_cno[i] = gps_ublox._svinfo_cno[i];
 800849c:	4a16      	ldr	r2, [pc, #88]	; (80084f8 <gpsPollSvinfo+0xb8>)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4413      	add	r3, r2
 80084a2:	33e9      	adds	r3, #233	; 0xe9
 80084a4:	7819      	ldrb	r1, [r3, #0]
 80084a6:	4a19      	ldr	r2, [pc, #100]	; (800850c <gpsPollSvinfo+0xcc>)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4413      	add	r3, r2
 80084ac:	460a      	mov	r2, r1
 80084ae:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3301      	adds	r3, #1
 80084b4:	607b      	str	r3, [r7, #4]
 80084b6:	4b11      	ldr	r3, [pc, #68]	; (80084fc <gpsPollSvinfo+0xbc>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4293      	cmp	r3, r2
 80084c0:	dbce      	blt.n	8008460 <gpsPollSvinfo+0x20>
    }
    // Update GPS SVIFO update rate table.
    GPS_svinfo_rate[0] = gps_ublox._svinfo_rate[0];
 80084c2:	4b0d      	ldr	r3, [pc, #52]	; (80084f8 <gpsPollSvinfo+0xb8>)
 80084c4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80084c8:	4a11      	ldr	r2, [pc, #68]	; (8008510 <gpsPollSvinfo+0xd0>)
 80084ca:	6013      	str	r3, [r2, #0]
    GPS_svinfo_rate[1] = gps_ublox._svinfo_rate[1];
 80084cc:	4b0a      	ldr	r3, [pc, #40]	; (80084f8 <gpsPollSvinfo+0xb8>)
 80084ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80084d2:	4a0f      	ldr	r2, [pc, #60]	; (8008510 <gpsPollSvinfo+0xd0>)
 80084d4:	6053      	str	r3, [r2, #4]

    pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_NAV, GUMI_NAV_SVINFO, 0, NULL, FALSE);
 80084d6:	2300      	movs	r3, #0
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	2300      	movs	r3, #0
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	2300      	movs	r3, #0
 80084e0:	2230      	movs	r2, #48	; 0x30
 80084e2:	2101      	movs	r1, #1
 80084e4:	4804      	ldr	r0, [pc, #16]	; (80084f8 <gpsPollSvinfo+0xb8>)
 80084e6:	f00e ff6b 	bl	80173c0 <pifGpsUblox_SendUbxMsg>
 80084ea:	e000      	b.n	80084ee <gpsPollSvinfo+0xae>
        return;
 80084ec:	bf00      	nop
}
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	200008e8 	.word	0x200008e8
 80084f8:	20000ff0 	.word	0x20000ff0
 80084fc:	200017f5 	.word	0x200017f5
 8008500:	200017f8 	.word	0x200017f8
 8008504:	20001818 	.word	0x20001818
 8008508:	20001838 	.word	0x20001838
 800850c:	20001858 	.word	0x20001858
 8008510:	20001880 	.word	0x20001880

08008514 <get_P>:
static PID posholdPID[2];
static PID poshold_ratePID[2];
static PID navPID[2];

static int32_t get_P(int32_t error, PID_PARAM *pid)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
    return (float)error * pid->kP;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	ee07 3a90 	vmov	s15, r3
 8008524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	edd3 7a00 	vldr	s15, [r3]
 800852e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008536:	ee17 3a90 	vmov	r3, s15
}
 800853a:	4618      	mov	r0, r3
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <get_I>:

static int32_t get_I(int32_t error, float *dt, PID *pid, PID_PARAM *pid_param)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	607a      	str	r2, [r7, #4]
 8008552:	603b      	str	r3, [r7, #0]
    pid->integrator += ((float)error * pid_param->kI) **dt;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	ed93 7a00 	vldr	s14, [r3]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	ee07 3a90 	vmov	s15, r3
 8008560:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	edd3 7a01 	vldr	s15, [r3, #4]
 800856a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	edd3 7a00 	vldr	s15, [r3]
 8008574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	edc3 7a00 	vstr	s15, [r3]
    pid->integrator = constrain(pid->integrator, -pid_param->Imax, pid_param->Imax);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	edd3 7a00 	vldr	s15, [r3]
 8008588:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008592:	eef1 7a67 	vneg.f32	s15, s15
 8008596:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	edd3 7a03 	vldr	s15, [r3, #12]
 80085a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085a4:	ee17 2a90 	vmov	r2, s15
 80085a8:	ee16 1a90 	vmov	r1, s13
 80085ac:	ee17 0a10 	vmov	r0, s14
 80085b0:	f7fb fa86 	bl	8003ac0 <constrain>
 80085b4:	ee07 0a90 	vmov	s15, r0
 80085b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	edc3 7a00 	vstr	s15, [r3]
    return pid->integrator;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	edd3 7a00 	vldr	s15, [r3]
 80085c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085cc:	ee17 3a90 	vmov	r3, s15
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <get_D>:

static int32_t get_D(int32_t input, float *dt, PID *pid, PID_PARAM *pid_param)
{
 80085d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	60f8      	str	r0, [r7, #12]
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	607a      	str	r2, [r7, #4]
 80085e6:	603b      	str	r3, [r7, #0]
    pid->derivative = (input - pid->last_input) / *dt;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	ee07 3a90 	vmov	s15, r3
 80085f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	ed93 7a00 	vldr	s14, [r3]
 80085fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	edc3 7a04 	vstr	s15, [r3, #16]
    // Low pass filter cut frequency for derivative calculation
    // Set to  "1 / ( 2 * PI * gps_lpf )"
#define PID_FILTER       (1.0f / (2.0f * M_PI * (float)cfg.gps_lpf))
    // discrete low pass filter, cuts out the
    // high frequency noise that can drive the controller crazy
    pid->derivative = pid->last_derivative + (*dt / (PID_FILTER + *dt)) * (pid->derivative - pid->last_derivative);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	4618      	mov	r0, r3
 800860e:	f7f7 ff4f 	bl	80004b0 <__aeabi_f2d>
 8008612:	4604      	mov	r4, r0
 8008614:	460d      	mov	r5, r1
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4618      	mov	r0, r3
 800861c:	f7f7 ff48 	bl	80004b0 <__aeabi_f2d>
 8008620:	4680      	mov	r8, r0
 8008622:	4689      	mov	r9, r1
 8008624:	4b36      	ldr	r3, [pc, #216]	; (8008700 <get_D+0x128>)
 8008626:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800862a:	ee07 3a90 	vmov	s15, r3
 800862e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008632:	ee17 0a90 	vmov	r0, s15
 8008636:	f7f7 ff3b 	bl	80004b0 <__aeabi_f2d>
 800863a:	a32f      	add	r3, pc, #188	; (adr r3, 80086f8 <get_D+0x120>)
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	f7f7 ff8e 	bl	8000560 <__aeabi_dmul>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	f04f 0000 	mov.w	r0, #0
 800864c:	492d      	ldr	r1, [pc, #180]	; (8008704 <get_D+0x12c>)
 800864e:	f7f8 f8b1 	bl	80007b4 <__aeabi_ddiv>
 8008652:	4602      	mov	r2, r0
 8008654:	460b      	mov	r3, r1
 8008656:	4692      	mov	sl, r2
 8008658:	469b      	mov	fp, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4618      	mov	r0, r3
 8008660:	f7f7 ff26 	bl	80004b0 <__aeabi_f2d>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4650      	mov	r0, sl
 800866a:	4659      	mov	r1, fp
 800866c:	f7f7 fdc2 	bl	80001f4 <__adddf3>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4640      	mov	r0, r8
 8008676:	4649      	mov	r1, r9
 8008678:	f7f8 f89c 	bl	80007b4 <__aeabi_ddiv>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4690      	mov	r8, r2
 8008682:	4699      	mov	r9, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	ed93 7a04 	vldr	s14, [r3, #16]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008694:	ee17 0a90 	vmov	r0, s15
 8008698:	f7f7 ff0a 	bl	80004b0 <__aeabi_f2d>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4640      	mov	r0, r8
 80086a2:	4649      	mov	r1, r9
 80086a4:	f7f7 ff5c 	bl	8000560 <__aeabi_dmul>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4620      	mov	r0, r4
 80086ae:	4629      	mov	r1, r5
 80086b0:	f7f7 fda0 	bl	80001f4 <__adddf3>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4610      	mov	r0, r2
 80086ba:	4619      	mov	r1, r3
 80086bc:	f7f8 fa32 	bl	8000b24 <__aeabi_d2f>
 80086c0:	4602      	mov	r2, r0
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	611a      	str	r2, [r3, #16]
    // update state
    pid->last_input = input;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	605a      	str	r2, [r3, #4]
    pid->last_derivative = pid->derivative;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691a      	ldr	r2, [r3, #16]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	609a      	str	r2, [r3, #8]
    // add in derivative component
    return pid_param->kD * pid->derivative;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80086e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086e8:	ee17 3a90 	vmov	r3, s15
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086f6:	bf00      	nop
 80086f8:	54442d18 	.word	0x54442d18
 80086fc:	401921fb 	.word	0x401921fb
 8008700:	20000e54 	.word	0x20000e54
 8008704:	3ff00000 	.word	0x3ff00000

08008708 <reset_PID>:

static void reset_PID(PID *pid)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
    pid->integrator = 0;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f04f 0200 	mov.w	r2, #0
 8008716:	601a      	str	r2, [r3, #0]
    pid->last_input = 0;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	605a      	str	r2, [r3, #4]
    pid->last_derivative = 0;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f04f 0200 	mov.w	r2, #0
 8008724:	609a      	str	r2, [r3, #8]
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
	...

08008734 <taskGpsNewData>:
int32_t nav_bearing;
// saves the bearing at takeof (1deg = 1) used to rotate to takeoff direction when arrives at home
static int16_t nav_takeoff_bearing;

uint16_t taskGpsNewData(PifTask *p_task)
{
 8008734:	b590      	push	{r4, r7, lr}
 8008736:	b089      	sub	sp, #36	; 0x24
 8008738:	af02      	add	r7, sp, #8
 800873a:	6078      	str	r0, [r7, #4]
    int16_t speed;

    (void)p_task;

        // new data received and parsed, we're in business
        gpsData.lastMessage = pif_cumulative_timer1ms;
 800873c:	4b84      	ldr	r3, [pc, #528]	; (8008950 <taskGpsNewData+0x21c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a84      	ldr	r2, [pc, #528]	; (8008954 <taskGpsNewData+0x220>)
 8008742:	6093      	str	r3, [r2, #8]
        sensorsSet(SENSOR_GPS);
 8008744:	2020      	movs	r0, #32
 8008746:	f7fe faed 	bl	8006d24 <sensorsSet>
        if (GPS_update == 1)
 800874a:	4b83      	ldr	r3, [pc, #524]	; (8008958 <taskGpsNewData+0x224>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d103      	bne.n	800875a <taskGpsNewData+0x26>
            GPS_update = 0;
 8008752:	4b81      	ldr	r3, [pc, #516]	; (8008958 <taskGpsNewData+0x224>)
 8008754:	2200      	movs	r2, #0
 8008756:	701a      	strb	r2, [r3, #0]
 8008758:	e002      	b.n	8008760 <taskGpsNewData+0x2c>
        else
            GPS_update = 1;
 800875a:	4b7f      	ldr	r3, [pc, #508]	; (8008958 <taskGpsNewData+0x224>)
 800875c:	2201      	movs	r2, #1
 800875e:	701a      	strb	r2, [r3, #0]
        if (f.GPS_FIX && GPS_numSat >= 5) {
 8008760:	4b7e      	ldr	r3, [pc, #504]	; (800895c <taskGpsNewData+0x228>)
 8008762:	7adb      	ldrb	r3, [r3, #11]
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 81ae 	beq.w	8008ac6 <taskGpsNewData+0x392>
 800876a:	4b7d      	ldr	r3, [pc, #500]	; (8008960 <taskGpsNewData+0x22c>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b04      	cmp	r3, #4
 8008770:	f240 81a9 	bls.w	8008ac6 <taskGpsNewData+0x392>
            if (!f.ARMED && !f.FIXED_WING)
 8008774:	4b79      	ldr	r3, [pc, #484]	; (800895c <taskGpsNewData+0x228>)
 8008776:	785b      	ldrb	r3, [r3, #1]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d106      	bne.n	800878a <taskGpsNewData+0x56>
 800877c:	4b77      	ldr	r3, [pc, #476]	; (800895c <taskGpsNewData+0x228>)
 800877e:	7c1b      	ldrb	r3, [r3, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d102      	bne.n	800878a <taskGpsNewData+0x56>
                f.GPS_FIX_HOME = 0;
 8008784:	4b75      	ldr	r3, [pc, #468]	; (800895c <taskGpsNewData+0x228>)
 8008786:	2200      	movs	r2, #0
 8008788:	731a      	strb	r2, [r3, #12]
            if (!f.GPS_FIX_HOME && f.ARMED)
 800878a:	4b74      	ldr	r3, [pc, #464]	; (800895c <taskGpsNewData+0x228>)
 800878c:	7b1b      	ldrb	r3, [r3, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d105      	bne.n	800879e <taskGpsNewData+0x6a>
 8008792:	4b72      	ldr	r3, [pc, #456]	; (800895c <taskGpsNewData+0x228>)
 8008794:	785b      	ldrb	r3, [r3, #1]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <taskGpsNewData+0x6a>
                GPS_reset_home_position();
 800879a:	f000 f9c1 	bl	8008b20 <GPS_reset_home_position>
            // Apply moving average filter to GPS data
#if defined(GPS_FILTERING)
            GPS_filter_index = (GPS_filter_index + 1) % GPS_FILTER_VECTOR_LENGTH;
 800879e:	4b71      	ldr	r3, [pc, #452]	; (8008964 <taskGpsNewData+0x230>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	4b70      	ldr	r3, [pc, #448]	; (8008968 <taskGpsNewData+0x234>)
 80087a6:	fb83 1302 	smull	r1, r3, r3, r2
 80087aa:	1059      	asrs	r1, r3, #1
 80087ac:	17d3      	asrs	r3, r2, #31
 80087ae:	1ac9      	subs	r1, r1, r3
 80087b0:	460b      	mov	r3, r1
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	440b      	add	r3, r1
 80087b6:	1ad1      	subs	r1, r2, r3
 80087b8:	b2ca      	uxtb	r2, r1
 80087ba:	4b6a      	ldr	r3, [pc, #424]	; (8008964 <taskGpsNewData+0x230>)
 80087bc:	701a      	strb	r2, [r3, #0]
            for (axis = 0; axis < 2; axis++) {
 80087be:	2300      	movs	r3, #0
 80087c0:	617b      	str	r3, [r7, #20]
 80087c2:	e09f      	b.n	8008904 <taskGpsNewData+0x1d0>
                GPS_read[axis] = GPS_coord[axis];               // latest unfiltered data is in GPS_latitude and GPS_longitude
 80087c4:	4a69      	ldr	r2, [pc, #420]	; (800896c <taskGpsNewData+0x238>)
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80087cc:	4968      	ldr	r1, [pc, #416]	; (8008970 <taskGpsNewData+0x23c>)
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_degree[axis] = GPS_read[axis] / 10000000;   // get the degree to assure the sum fits to the int32_t
 80087d4:	4a66      	ldr	r2, [pc, #408]	; (8008970 <taskGpsNewData+0x23c>)
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087dc:	4a65      	ldr	r2, [pc, #404]	; (8008974 <taskGpsNewData+0x240>)
 80087de:	fb82 1203 	smull	r1, r2, r2, r3
 80087e2:	1592      	asrs	r2, r2, #22
 80087e4:	17db      	asrs	r3, r3, #31
 80087e6:	1ad2      	subs	r2, r2, r3
 80087e8:	4963      	ldr	r1, [pc, #396]	; (8008978 <taskGpsNewData+0x244>)
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // How close we are to a degree line ? its the first three digits from the fractions of degree
                // later we use it to Check if we are close to a degree line, if yes, disable averaging,
                fraction3[axis] = (GPS_read[axis] - GPS_degree[axis] * 10000000) / 10000;
 80087f0:	4a5f      	ldr	r2, [pc, #380]	; (8008970 <taskGpsNewData+0x23c>)
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80087f8:	495f      	ldr	r1, [pc, #380]	; (8008978 <taskGpsNewData+0x244>)
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008800:	495e      	ldr	r1, [pc, #376]	; (800897c <taskGpsNewData+0x248>)
 8008802:	fb01 f303 	mul.w	r3, r1, r3
 8008806:	4413      	add	r3, r2
 8008808:	4a5d      	ldr	r2, [pc, #372]	; (8008980 <taskGpsNewData+0x24c>)
 800880a:	fb82 1203 	smull	r1, r2, r2, r3
 800880e:	1312      	asrs	r2, r2, #12
 8008810:	17db      	asrs	r3, r3, #31
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	b299      	uxth	r1, r3
 8008816:	4a5b      	ldr	r2, [pc, #364]	; (8008984 <taskGpsNewData+0x250>)
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

                GPS_filter_sum[axis] -= GPS_filter[axis][GPS_filter_index];
 800881e:	4a5a      	ldr	r2, [pc, #360]	; (8008988 <taskGpsNewData+0x254>)
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008826:	4b4f      	ldr	r3, [pc, #316]	; (8008964 <taskGpsNewData+0x230>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	461c      	mov	r4, r3
 800882c:	4857      	ldr	r0, [pc, #348]	; (800898c <taskGpsNewData+0x258>)
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	4613      	mov	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	4423      	add	r3, r4
 8008838:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800883c:	1aca      	subs	r2, r1, r3
 800883e:	4952      	ldr	r1, [pc, #328]	; (8008988 <taskGpsNewData+0x254>)
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filter[axis][GPS_filter_index] = GPS_read[axis] - (GPS_degree[axis] * 10000000);
 8008846:	4a4a      	ldr	r2, [pc, #296]	; (8008970 <taskGpsNewData+0x23c>)
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800884e:	494a      	ldr	r1, [pc, #296]	; (8008978 <taskGpsNewData+0x244>)
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008856:	4949      	ldr	r1, [pc, #292]	; (800897c <taskGpsNewData+0x248>)
 8008858:	fb01 f303 	mul.w	r3, r1, r3
 800885c:	4941      	ldr	r1, [pc, #260]	; (8008964 <taskGpsNewData+0x230>)
 800885e:	7809      	ldrb	r1, [r1, #0]
 8008860:	460c      	mov	r4, r1
 8008862:	18d1      	adds	r1, r2, r3
 8008864:	4849      	ldr	r0, [pc, #292]	; (800898c <taskGpsNewData+0x258>)
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	4613      	mov	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4413      	add	r3, r2
 800886e:	4423      	add	r3, r4
 8008870:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                GPS_filter_sum[axis] += GPS_filter[axis][GPS_filter_index];
 8008874:	4a44      	ldr	r2, [pc, #272]	; (8008988 <taskGpsNewData+0x254>)
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800887c:	4b39      	ldr	r3, [pc, #228]	; (8008964 <taskGpsNewData+0x230>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	461c      	mov	r4, r3
 8008882:	4842      	ldr	r0, [pc, #264]	; (800898c <taskGpsNewData+0x258>)
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	4423      	add	r3, r4
 800888e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008892:	18ca      	adds	r2, r1, r3
 8008894:	493c      	ldr	r1, [pc, #240]	; (8008988 <taskGpsNewData+0x254>)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filtered[axis] = GPS_filter_sum[axis] / GPS_FILTER_VECTOR_LENGTH + (GPS_degree[axis] * 10000000);
 800889c:	4a3a      	ldr	r2, [pc, #232]	; (8008988 <taskGpsNewData+0x254>)
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088a4:	4a30      	ldr	r2, [pc, #192]	; (8008968 <taskGpsNewData+0x234>)
 80088a6:	fb82 1203 	smull	r1, r2, r2, r3
 80088aa:	1052      	asrs	r2, r2, #1
 80088ac:	17db      	asrs	r3, r3, #31
 80088ae:	1ad2      	subs	r2, r2, r3
 80088b0:	4931      	ldr	r1, [pc, #196]	; (8008978 <taskGpsNewData+0x244>)
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088b8:	4935      	ldr	r1, [pc, #212]	; (8008990 <taskGpsNewData+0x25c>)
 80088ba:	fb01 f303 	mul.w	r3, r1, r3
 80088be:	441a      	add	r2, r3
 80088c0:	4934      	ldr	r1, [pc, #208]	; (8008994 <taskGpsNewData+0x260>)
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (nav_mode == NAV_MODE_POSHOLD) {             // we use gps averaging only in poshold mode...
 80088c8:	4b33      	ldr	r3, [pc, #204]	; (8008998 <taskGpsNewData+0x264>)
 80088ca:	f993 3000 	ldrsb.w	r3, [r3]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d115      	bne.n	80088fe <taskGpsNewData+0x1ca>
                    if (fraction3[axis] > 1 && fraction3[axis] < 999)
 80088d2:	4a2c      	ldr	r2, [pc, #176]	; (8008984 <taskGpsNewData+0x250>)
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d90f      	bls.n	80088fe <taskGpsNewData+0x1ca>
 80088de:	4a29      	ldr	r2, [pc, #164]	; (8008984 <taskGpsNewData+0x250>)
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088e6:	f240 32e6 	movw	r2, #998	; 0x3e6
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d807      	bhi.n	80088fe <taskGpsNewData+0x1ca>
                        GPS_coord[axis] = GPS_filtered[axis];
 80088ee:	4a29      	ldr	r2, [pc, #164]	; (8008994 <taskGpsNewData+0x260>)
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088f6:	491d      	ldr	r1, [pc, #116]	; (800896c <taskGpsNewData+0x238>)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (axis = 0; axis < 2; axis++) {
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	3301      	adds	r3, #1
 8008902:	617b      	str	r3, [r7, #20]
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	2b01      	cmp	r3, #1
 8008908:	f77f af5c 	ble.w	80087c4 <taskGpsNewData+0x90>
                }
            }
#endif
            // dTnav calculation
            // Time for calculating x,y speed and navigation pids
            dTnav = (float)(pif_cumulative_timer1ms - nav_loopTimer) / 1000.0f;
 800890c:	4b10      	ldr	r3, [pc, #64]	; (8008950 <taskGpsNewData+0x21c>)
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	4b22      	ldr	r3, [pc, #136]	; (800899c <taskGpsNewData+0x268>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	ee07 3a90 	vmov	s15, r3
 800891a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800891e:	eddf 6a20 	vldr	s13, [pc, #128]	; 80089a0 <taskGpsNewData+0x26c>
 8008922:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008926:	4b1f      	ldr	r3, [pc, #124]	; (80089a4 <taskGpsNewData+0x270>)
 8008928:	edc3 7a00 	vstr	s15, [r3]
            nav_loopTimer = pif_cumulative_timer1ms;
 800892c:	4b08      	ldr	r3, [pc, #32]	; (8008950 <taskGpsNewData+0x21c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a1a      	ldr	r2, [pc, #104]	; (800899c <taskGpsNewData+0x268>)
 8008932:	6013      	str	r3, [r2, #0]
            // prevent runup from bad GPS
            dTnav = min(dTnav, 1.0f);
 8008934:	4b1b      	ldr	r3, [pc, #108]	; (80089a4 <taskGpsNewData+0x270>)
 8008936:	edd3 7a00 	vldr	s15, [r3]
 800893a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800893e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008946:	d52f      	bpl.n	80089a8 <taskGpsNewData+0x274>
 8008948:	4b16      	ldr	r3, [pc, #88]	; (80089a4 <taskGpsNewData+0x270>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	e02e      	b.n	80089ac <taskGpsNewData+0x278>
 800894e:	bf00      	nop
 8008950:	20001c24 	.word	0x20001c24
 8008954:	20000fd0 	.word	0x20000fd0
 8008958:	200017e2 	.word	0x200017e2
 800895c:	200016f4 	.word	0x200016f4
 8008960:	200017d8 	.word	0x200017d8
 8008964:	2000139a 	.word	0x2000139a
 8008968:	66666667 	.word	0x66666667
 800896c:	200017b8 	.word	0x200017b8
 8008970:	200013cc 	.word	0x200013cc
 8008974:	6b5fca6b 	.word	0x6b5fca6b
 8008978:	200013dc 	.word	0x200013dc
 800897c:	ff676980 	.word	0xff676980
 8008980:	68db8bad 	.word	0x68db8bad
 8008984:	200013e4 	.word	0x200013e4
 8008988:	200013c4 	.word	0x200013c4
 800898c:	2000139c 	.word	0x2000139c
 8008990:	00989680 	.word	0x00989680
 8008994:	200013d4 	.word	0x200013d4
 8008998:	200017f4 	.word	0x200017f4
 800899c:	200013f0 	.word	0x200013f0
 80089a0:	447a0000 	.word	0x447a0000
 80089a4:	2000136c 	.word	0x2000136c
 80089a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80089ac:	4a4a      	ldr	r2, [pc, #296]	; (8008ad8 <taskGpsNewData+0x3a4>)
 80089ae:	6013      	str	r3, [r2, #0]

            // calculate distance and bearings for gui and other stuff continously - From home to copter
            GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_home[LAT], &GPS_home[LON], &dist, &dir);
 80089b0:	f107 0308 	add.w	r3, r7, #8
 80089b4:	9301      	str	r3, [sp, #4]
 80089b6:	f107 030c 	add.w	r3, r7, #12
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	4b47      	ldr	r3, [pc, #284]	; (8008adc <taskGpsNewData+0x3a8>)
 80089be:	4a48      	ldr	r2, [pc, #288]	; (8008ae0 <taskGpsNewData+0x3ac>)
 80089c0:	4948      	ldr	r1, [pc, #288]	; (8008ae4 <taskGpsNewData+0x3b0>)
 80089c2:	4849      	ldr	r0, [pc, #292]	; (8008ae8 <taskGpsNewData+0x3b4>)
 80089c4:	f000 fad8 	bl	8008f78 <GPS_distance_cm_bearing>
            GPS_distanceToHome = dist / 100;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4a48      	ldr	r2, [pc, #288]	; (8008aec <taskGpsNewData+0x3b8>)
 80089cc:	fb82 1203 	smull	r1, r2, r2, r3
 80089d0:	1152      	asrs	r2, r2, #5
 80089d2:	17db      	asrs	r3, r3, #31
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	4b45      	ldr	r3, [pc, #276]	; (8008af0 <taskGpsNewData+0x3bc>)
 80089da:	801a      	strh	r2, [r3, #0]
            GPS_directionToHome = dir / 100;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	4a43      	ldr	r2, [pc, #268]	; (8008aec <taskGpsNewData+0x3b8>)
 80089e0:	fb82 1203 	smull	r1, r2, r2, r3
 80089e4:	1152      	asrs	r2, r2, #5
 80089e6:	17db      	asrs	r3, r3, #31
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	b21a      	sxth	r2, r3
 80089ec:	4b41      	ldr	r3, [pc, #260]	; (8008af4 <taskGpsNewData+0x3c0>)
 80089ee:	801a      	strh	r2, [r3, #0]

            if (!f.GPS_FIX_HOME) {      // If we don't have home set, do not display anything
 80089f0:	4b41      	ldr	r3, [pc, #260]	; (8008af8 <taskGpsNewData+0x3c4>)
 80089f2:	7b1b      	ldrb	r3, [r3, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d105      	bne.n	8008a04 <taskGpsNewData+0x2d0>
                GPS_distanceToHome = 0;
 80089f8:	4b3d      	ldr	r3, [pc, #244]	; (8008af0 <taskGpsNewData+0x3bc>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	801a      	strh	r2, [r3, #0]
                GPS_directionToHome = 0;
 80089fe:	4b3d      	ldr	r3, [pc, #244]	; (8008af4 <taskGpsNewData+0x3c0>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	801a      	strh	r2, [r3, #0]
            }

            // calculate the current velocity based on gps coordinates continously to get a valid speed at the moment when we start navigating
            GPS_calc_velocity();
 8008a04:	f000 fb26 	bl	8009054 <GPS_calc_velocity>

            if (f.GPS_HOLD_MODE || f.GPS_HOME_MODE) { // ok we are navigating
 8008a08:	4b3b      	ldr	r3, [pc, #236]	; (8008af8 <taskGpsNewData+0x3c4>)
 8008a0a:	7a1b      	ldrb	r3, [r3, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d103      	bne.n	8008a18 <taskGpsNewData+0x2e4>
 8008a10:	4b39      	ldr	r3, [pc, #228]	; (8008af8 <taskGpsNewData+0x3c4>)
 8008a12:	79db      	ldrb	r3, [r3, #7]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d056      	beq.n	8008ac6 <taskGpsNewData+0x392>
                // do gps nav calculations here, these are common for nav and poshold
                GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008a18:	4b38      	ldr	r3, [pc, #224]	; (8008afc <taskGpsNewData+0x3c8>)
 8008a1a:	9301      	str	r3, [sp, #4]
 8008a1c:	4b38      	ldr	r3, [pc, #224]	; (8008b00 <taskGpsNewData+0x3cc>)
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	4b38      	ldr	r3, [pc, #224]	; (8008b04 <taskGpsNewData+0x3d0>)
 8008a22:	4a39      	ldr	r2, [pc, #228]	; (8008b08 <taskGpsNewData+0x3d4>)
 8008a24:	492f      	ldr	r1, [pc, #188]	; (8008ae4 <taskGpsNewData+0x3b0>)
 8008a26:	4830      	ldr	r0, [pc, #192]	; (8008ae8 <taskGpsNewData+0x3b4>)
 8008a28:	f000 faa6 	bl	8008f78 <GPS_distance_cm_bearing>
                GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008a2c:	4b2d      	ldr	r3, [pc, #180]	; (8008ae4 <taskGpsNewData+0x3b0>)
 8008a2e:	4a2e      	ldr	r2, [pc, #184]	; (8008ae8 <taskGpsNewData+0x3b4>)
 8008a30:	4934      	ldr	r1, [pc, #208]	; (8008b04 <taskGpsNewData+0x3d0>)
 8008a32:	4835      	ldr	r0, [pc, #212]	; (8008b08 <taskGpsNewData+0x3d4>)
 8008a34:	f000 fb90 	bl	8009158 <GPS_calc_location_error>

                if (f.FIXED_WING)
 8008a38:	4b2f      	ldr	r3, [pc, #188]	; (8008af8 <taskGpsNewData+0x3c4>)
 8008a3a:	7c1b      	ldrb	r3, [r3, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <taskGpsNewData+0x312>
                    nav_mode = NAV_MODE_WP; // Planes always navigate in Wp mode.
 8008a40:	4b32      	ldr	r3, [pc, #200]	; (8008b0c <taskGpsNewData+0x3d8>)
 8008a42:	2202      	movs	r2, #2
 8008a44:	701a      	strb	r2, [r3, #0]

                switch (nav_mode) {
 8008a46:	4b31      	ldr	r3, [pc, #196]	; (8008b0c <taskGpsNewData+0x3d8>)
 8008a48:	f993 3000 	ldrsb.w	r3, [r3]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d002      	beq.n	8008a56 <taskGpsNewData+0x322>
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d003      	beq.n	8008a5c <taskGpsNewData+0x328>
 8008a54:	e03a      	b.n	8008acc <taskGpsNewData+0x398>
                    case NAV_MODE_POSHOLD:
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_poshold();
 8008a56:	f000 fbab 	bl	80091b0 <GPS_calc_poshold>
                        break;
 8008a5a:	e037      	b.n	8008acc <taskGpsNewData+0x398>

                    case NAV_MODE_WP:
                        speed = GPS_calc_desired_speed(cfg.nav_speed_max, NAV_SLOW_NAV);    // slow navigation
 8008a5c:	4b2c      	ldr	r3, [pc, #176]	; (8008b10 <taskGpsNewData+0x3dc>)
 8008a5e:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8008a62:	b21b      	sxth	r3, r3
 8008a64:	2101      	movs	r1, #1
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fdb0 	bl	80095cc <GPS_calc_desired_speed>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	827b      	strh	r3, [r7, #18]
                        // use error as the desired rate towards the target
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_nav_rate(speed);
 8008a70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 fc53 	bl	8009320 <GPS_calc_nav_rate>

                        // Tail control
                        if (cfg.nav_controls_heading) {
 8008a7a:	4b25      	ldr	r3, [pc, #148]	; (8008b10 <taskGpsNewData+0x3dc>)
 8008a7c:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00a      	beq.n	8008a9a <taskGpsNewData+0x366>
                            if (NAV_TAIL_FIRST) {
                                magHold = wrap_18000(nav_bearing - 18000) / 100;
                            } else {
                                magHold = nav_bearing / 100;
 8008a84:	4b23      	ldr	r3, [pc, #140]	; (8008b14 <taskGpsNewData+0x3e0>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a18      	ldr	r2, [pc, #96]	; (8008aec <taskGpsNewData+0x3b8>)
 8008a8a:	fb82 1203 	smull	r1, r2, r2, r3
 8008a8e:	1152      	asrs	r2, r2, #5
 8008a90:	17db      	asrs	r3, r3, #31
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	b21a      	sxth	r2, r3
 8008a96:	4b20      	ldr	r3, [pc, #128]	; (8008b18 <taskGpsNewData+0x3e4>)
 8008a98:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        // Are we there yet ?(within x meters of the destination)
                        if ((wp_distance <= cfg.gps_wp_radius) || check_missed_wp()) {      // if yes switch to poshold mode
 8008a9a:	4b1d      	ldr	r3, [pc, #116]	; (8008b10 <taskGpsNewData+0x3dc>)
 8008a9c:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	4b17      	ldr	r3, [pc, #92]	; (8008b00 <taskGpsNewData+0x3cc>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	da04      	bge.n	8008ab4 <taskGpsNewData+0x380>
 8008aaa:	f000 fa45 	bl	8008f38 <check_missed_wp>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00a      	beq.n	8008aca <taskGpsNewData+0x396>
                            nav_mode = NAV_MODE_POSHOLD;
 8008ab4:	4b15      	ldr	r3, [pc, #84]	; (8008b0c <taskGpsNewData+0x3d8>)
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	701a      	strb	r2, [r3, #0]
                            if (NAV_SET_TAKEOFF_HEADING) {
                                magHold = nav_takeoff_bearing;
 8008aba:	4b18      	ldr	r3, [pc, #96]	; (8008b1c <taskGpsNewData+0x3e8>)
 8008abc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008ac0:	4b15      	ldr	r3, [pc, #84]	; (8008b18 <taskGpsNewData+0x3e4>)
 8008ac2:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        break;
 8008ac4:	e001      	b.n	8008aca <taskGpsNewData+0x396>
                }
            }                   //end of gps calcs
 8008ac6:	bf00      	nop
 8008ac8:	e000      	b.n	8008acc <taskGpsNewData+0x398>
                        break;
 8008aca:	bf00      	nop
        }

    return 0;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	371c      	adds	r7, #28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd90      	pop	{r4, r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	2000136c 	.word	0x2000136c
 8008adc:	200017c4 	.word	0x200017c4
 8008ae0:	200017c0 	.word	0x200017c0
 8008ae4:	200017bc 	.word	0x200017bc
 8008ae8:	200017b8 	.word	0x200017b8
 8008aec:	51eb851f 	.word	0x51eb851f
 8008af0:	200017da 	.word	0x200017da
 8008af4:	200017dc 	.word	0x200017dc
 8008af8:	200016f4 	.word	0x200016f4
 8008afc:	20001388 	.word	0x20001388
 8008b00:	20001394 	.word	0x20001394
 8008b04:	20001384 	.word	0x20001384
 8008b08:	20001380 	.word	0x20001380
 8008b0c:	200017f4 	.word	0x200017f4
 8008b10:	20000e54 	.word	0x20000e54
 8008b14:	200013e8 	.word	0x200013e8
 8008b18:	200019c2 	.word	0x200019c2
 8008b1c:	200013ec 	.word	0x200013ec

08008b20 <GPS_reset_home_position>:

void GPS_reset_home_position(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
    if (f.GPS_FIX && GPS_numSat >= 5) {
 8008b24:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <GPS_reset_home_position+0x4c>)
 8008b26:	7adb      	ldrb	r3, [r3, #11]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d01d      	beq.n	8008b68 <GPS_reset_home_position+0x48>
 8008b2c:	4b10      	ldr	r3, [pc, #64]	; (8008b70 <GPS_reset_home_position+0x50>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d919      	bls.n	8008b68 <GPS_reset_home_position+0x48>
        GPS_home[LAT] = GPS_coord[LAT];
 8008b34:	4b0f      	ldr	r3, [pc, #60]	; (8008b74 <GPS_reset_home_position+0x54>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a0f      	ldr	r2, [pc, #60]	; (8008b78 <GPS_reset_home_position+0x58>)
 8008b3a:	6013      	str	r3, [r2, #0]
        GPS_home[LON] = GPS_coord[LON];
 8008b3c:	4b0d      	ldr	r3, [pc, #52]	; (8008b74 <GPS_reset_home_position+0x54>)
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	4a0d      	ldr	r2, [pc, #52]	; (8008b78 <GPS_reset_home_position+0x58>)
 8008b42:	6053      	str	r3, [r2, #4]
        GPS_calc_longitude_scaling(GPS_coord[LAT]); // need an initial value for distance and bearing calc
 8008b44:	4b0b      	ldr	r3, [pc, #44]	; (8008b74 <GPS_reset_home_position+0x54>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 f96d 	bl	8008e28 <GPS_calc_longitude_scaling>
        nav_takeoff_bearing = heading;              // save takeoff heading
 8008b4e:	4b0b      	ldr	r3, [pc, #44]	; (8008b7c <GPS_reset_home_position+0x5c>)
 8008b50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008b54:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <GPS_reset_home_position+0x60>)
 8008b56:	801a      	strh	r2, [r3, #0]
        //Set ground altitude
        GPS_home[ALT] = GPS_altitude;
 8008b58:	4b0a      	ldr	r3, [pc, #40]	; (8008b84 <GPS_reset_home_position+0x64>)
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <GPS_reset_home_position+0x58>)
 8008b60:	609a      	str	r2, [r3, #8]
        f.GPS_FIX_HOME = 1;
 8008b62:	4b02      	ldr	r3, [pc, #8]	; (8008b6c <GPS_reset_home_position+0x4c>)
 8008b64:	2201      	movs	r2, #1
 8008b66:	731a      	strb	r2, [r3, #12]
    }
}
 8008b68:	bf00      	nop
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	200016f4 	.word	0x200016f4
 8008b70:	200017d8 	.word	0x200017d8
 8008b74:	200017b8 	.word	0x200017b8
 8008b78:	200017c0 	.word	0x200017c0
 8008b7c:	200019c0 	.word	0x200019c0
 8008b80:	200013ec 	.word	0x200013ec
 8008b84:	200017de 	.word	0x200017de

08008b88 <GPS_reset_nav>:

// reset navigation (stop the navigation processor, and clear nav)
void GPS_reset_nav(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < 2; i++) {
 8008b8e:	2300      	movs	r3, #0
 8008b90:	607b      	str	r3, [r7, #4]
 8008b92:	e02f      	b.n	8008bf4 <GPS_reset_nav+0x6c>
        GPS_angle[i] = 0;
 8008b94:	4a1e      	ldr	r2, [pc, #120]	; (8008c10 <GPS_reset_nav+0x88>)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2100      	movs	r1, #0
 8008b9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav_rated[i] = 0;
 8008b9e:	4a1d      	ldr	r2, [pc, #116]	; (8008c14 <GPS_reset_nav+0x8c>)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[i] = 0;
 8008ba8:	4a1b      	ldr	r2, [pc, #108]	; (8008c18 <GPS_reset_nav+0x90>)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2100      	movs	r1, #0
 8008bae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        reset_PID(&posholdPID[i]);
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4413      	add	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4a17      	ldr	r2, [pc, #92]	; (8008c1c <GPS_reset_nav+0x94>)
 8008bbe:	4413      	add	r3, r2
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7ff fda1 	bl	8008708 <reset_PID>
        reset_PID(&poshold_ratePID[i]);
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4a13      	ldr	r2, [pc, #76]	; (8008c20 <GPS_reset_nav+0x98>)
 8008bd2:	4413      	add	r3, r2
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7ff fd97 	bl	8008708 <reset_PID>
        reset_PID(&navPID[i]);
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4a0f      	ldr	r2, [pc, #60]	; (8008c24 <GPS_reset_nav+0x9c>)
 8008be6:	4413      	add	r3, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7ff fd8d 	bl	8008708 <reset_PID>
    for (i = 0; i < 2; i++) {
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	607b      	str	r3, [r7, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	ddcc      	ble.n	8008b94 <GPS_reset_nav+0xc>
    }

    if (f.FIXED_WING)
 8008bfa:	4b0b      	ldr	r3, [pc, #44]	; (8008c28 <GPS_reset_nav+0xa0>)
 8008bfc:	7c1b      	ldrb	r3, [r3, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <GPS_reset_nav+0x7e>
        fw_nav_reset();
 8008c02:	f7fe f915 	bl	8006e30 <fw_nav_reset>

}
 8008c06:	bf00      	nop
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	200017e4 	.word	0x200017e4
 8008c14:	200017f0 	.word	0x200017f0
 8008c18:	200017ec 	.word	0x200017ec
 8008c1c:	200012f4 	.word	0x200012f4
 8008c20:	2000131c 	.word	0x2000131c
 8008c24:	20001344 	.word	0x20001344
 8008c28:	200016f4 	.word	0x200016f4

08008c2c <gpsSetPIDs>:

// Get the relevant P I D values and set the PID controllers
void gpsSetPIDs(void)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
    posholdPID_PARAM.kP = (float)cfg.P8[PIDPOS] / 100.0f;
 8008c30:	4b50      	ldr	r3, [pc, #320]	; (8008d74 <gpsSetPIDs+0x148>)
 8008c32:	795b      	ldrb	r3, [r3, #5]
 8008c34:	ee07 3a90 	vmov	s15, r3
 8008c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c3c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008d78 <gpsSetPIDs+0x14c>
 8008c40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c44:	4b4d      	ldr	r3, [pc, #308]	; (8008d7c <gpsSetPIDs+0x150>)
 8008c46:	edc3 7a00 	vstr	s15, [r3]
    posholdPID_PARAM.kI = (float)cfg.I8[PIDPOS] / 100.0f;
 8008c4a:	4b4a      	ldr	r3, [pc, #296]	; (8008d74 <gpsSetPIDs+0x148>)
 8008c4c:	7bdb      	ldrb	r3, [r3, #15]
 8008c4e:	ee07 3a90 	vmov	s15, r3
 8008c52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c56:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008d78 <gpsSetPIDs+0x14c>
 8008c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c5e:	4b47      	ldr	r3, [pc, #284]	; (8008d7c <gpsSetPIDs+0x150>)
 8008c60:	edc3 7a01 	vstr	s15, [r3, #4]
    posholdPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008c64:	4b45      	ldr	r3, [pc, #276]	; (8008d7c <gpsSetPIDs+0x150>)
 8008c66:	4a46      	ldr	r2, [pc, #280]	; (8008d80 <gpsSetPIDs+0x154>)
 8008c68:	60da      	str	r2, [r3, #12]

    poshold_ratePID_PARAM.kP = (float)cfg.P8[PIDPOSR] / 10.0f;
 8008c6a:	4b42      	ldr	r3, [pc, #264]	; (8008d74 <gpsSetPIDs+0x148>)
 8008c6c:	799b      	ldrb	r3, [r3, #6]
 8008c6e:	ee07 3a90 	vmov	s15, r3
 8008c72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c76:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008c7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c7e:	4b41      	ldr	r3, [pc, #260]	; (8008d84 <gpsSetPIDs+0x158>)
 8008c80:	edc3 7a00 	vstr	s15, [r3]
    poshold_ratePID_PARAM.kI = (float)cfg.I8[PIDPOSR] / 100.0f;
 8008c84:	4b3b      	ldr	r3, [pc, #236]	; (8008d74 <gpsSetPIDs+0x148>)
 8008c86:	7c1b      	ldrb	r3, [r3, #16]
 8008c88:	ee07 3a90 	vmov	s15, r3
 8008c8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c90:	eddf 6a39 	vldr	s13, [pc, #228]	; 8008d78 <gpsSetPIDs+0x14c>
 8008c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c98:	4b3a      	ldr	r3, [pc, #232]	; (8008d84 <gpsSetPIDs+0x158>)
 8008c9a:	edc3 7a01 	vstr	s15, [r3, #4]
    poshold_ratePID_PARAM.kD = (float)cfg.D8[PIDPOSR] / 1000.0f;
 8008c9e:	4b35      	ldr	r3, [pc, #212]	; (8008d74 <gpsSetPIDs+0x148>)
 8008ca0:	7e9b      	ldrb	r3, [r3, #26]
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008caa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008d88 <gpsSetPIDs+0x15c>
 8008cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cb2:	4b34      	ldr	r3, [pc, #208]	; (8008d84 <gpsSetPIDs+0x158>)
 8008cb4:	edc3 7a02 	vstr	s15, [r3, #8]
    poshold_ratePID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008cb8:	4b32      	ldr	r3, [pc, #200]	; (8008d84 <gpsSetPIDs+0x158>)
 8008cba:	4a31      	ldr	r2, [pc, #196]	; (8008d80 <gpsSetPIDs+0x154>)
 8008cbc:	60da      	str	r2, [r3, #12]

    navPID_PARAM.kP = (float)cfg.P8[PIDNAVR] / 10.0f;
 8008cbe:	4b2d      	ldr	r3, [pc, #180]	; (8008d74 <gpsSetPIDs+0x148>)
 8008cc0:	79db      	ldrb	r3, [r3, #7]
 8008cc2:	ee07 3a90 	vmov	s15, r3
 8008cc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cca:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008cce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cd2:	4b2e      	ldr	r3, [pc, #184]	; (8008d8c <gpsSetPIDs+0x160>)
 8008cd4:	edc3 7a00 	vstr	s15, [r3]
    navPID_PARAM.kI = (float)cfg.I8[PIDNAVR] / 100.0f;
 8008cd8:	4b26      	ldr	r3, [pc, #152]	; (8008d74 <gpsSetPIDs+0x148>)
 8008cda:	7c5b      	ldrb	r3, [r3, #17]
 8008cdc:	ee07 3a90 	vmov	s15, r3
 8008ce0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ce4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008d78 <gpsSetPIDs+0x14c>
 8008ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cec:	4b27      	ldr	r3, [pc, #156]	; (8008d8c <gpsSetPIDs+0x160>)
 8008cee:	edc3 7a01 	vstr	s15, [r3, #4]
    navPID_PARAM.kD = (float)cfg.D8[PIDNAVR] / 1000.0f;
 8008cf2:	4b20      	ldr	r3, [pc, #128]	; (8008d74 <gpsSetPIDs+0x148>)
 8008cf4:	7edb      	ldrb	r3, [r3, #27]
 8008cf6:	ee07 3a90 	vmov	s15, r3
 8008cfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cfe:	eddf 6a22 	vldr	s13, [pc, #136]	; 8008d88 <gpsSetPIDs+0x15c>
 8008d02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d06:	4b21      	ldr	r3, [pc, #132]	; (8008d8c <gpsSetPIDs+0x160>)
 8008d08:	edc3 7a02 	vstr	s15, [r3, #8]
    navPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008d0c:	4b1f      	ldr	r3, [pc, #124]	; (8008d8c <gpsSetPIDs+0x160>)
 8008d0e:	4a1c      	ldr	r2, [pc, #112]	; (8008d80 <gpsSetPIDs+0x154>)
 8008d10:	60da      	str	r2, [r3, #12]

    if (f.FIXED_WING) {
 8008d12:	4b1f      	ldr	r3, [pc, #124]	; (8008d90 <gpsSetPIDs+0x164>)
 8008d14:	7c1b      	ldrb	r3, [r3, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d026      	beq.n	8008d68 <gpsSetPIDs+0x13c>
        altPID_PARAM.kP   = (float)cfg.P8[PIDALT] / 10.0f;
 8008d1a:	4b16      	ldr	r3, [pc, #88]	; (8008d74 <gpsSetPIDs+0x148>)
 8008d1c:	791b      	ldrb	r3, [r3, #4]
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d26:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008d2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d2e:	4b19      	ldr	r3, [pc, #100]	; (8008d94 <gpsSetPIDs+0x168>)
 8008d30:	edc3 7a00 	vstr	s15, [r3]
        altPID_PARAM.kI   = (float)cfg.I8[PIDALT] / 100.0f;
 8008d34:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <gpsSetPIDs+0x148>)
 8008d36:	7b9b      	ldrb	r3, [r3, #14]
 8008d38:	ee07 3a90 	vmov	s15, r3
 8008d3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d40:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8008d78 <gpsSetPIDs+0x14c>
 8008d44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d48:	4b12      	ldr	r3, [pc, #72]	; (8008d94 <gpsSetPIDs+0x168>)
 8008d4a:	edc3 7a01 	vstr	s15, [r3, #4]
        altPID_PARAM.kD   = (float)cfg.D8[PIDALT] / 1000.0f;
 8008d4e:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <gpsSetPIDs+0x148>)
 8008d50:	7e1b      	ldrb	r3, [r3, #24]
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d5a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008d88 <gpsSetPIDs+0x15c>
 8008d5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d62:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <gpsSetPIDs+0x168>)
 8008d64:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8008d68:	bf00      	nop
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	20000e54 	.word	0x20000e54
 8008d78:	42c80000 	.word	0x42c80000
 8008d7c:	200012b4 	.word	0x200012b4
 8008d80:	44fa0000 	.word	0x44fa0000
 8008d84:	200012c4 	.word	0x200012c4
 8008d88:	447a0000 	.word	0x447a0000
 8008d8c:	200012d4 	.word	0x200012d4
 8008d90:	200016f4 	.word	0x200016f4
 8008d94:	200012e4 	.word	0x200012e4

08008d98 <_EvtPrintFrame>:

static void _EvtPrintFrame(char* p_frame)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
    actLed0State(ON);
 8008da0:	2001      	movs	r0, #1
 8008da2:	f7f8 ffab 	bl	8001cfc <actLed0State>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_NONE, p_frame);
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	2000      	movs	r0, #0
 8008daa:	f00a fa6d 	bl	8013288 <pifLog_Print>
#else
    (void)p_frame;
#endif
    actLed0State(OFF);
 8008dae:	2000      	movs	r0, #0
 8008db0:	f7f8 ffa4 	bl	8001cfc <actLed0State>
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <gpsSetPassthrough>:

int8_t gpsSetPassthrough(void)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	af00      	add	r7, sp, #0
    static bool state = false;

    if (gpsData.state != GPS_RECEIVINGDATA)
 8008dc0:	4b14      	ldr	r3, [pc, #80]	; (8008e14 <gpsSetPassthrough+0x58>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b05      	cmp	r3, #5
 8008dc6:	d002      	beq.n	8008dce <gpsSetPassthrough+0x12>
        return -1;
 8008dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dcc:	e020      	b.n	8008e10 <gpsSetPassthrough+0x54>

    actLed0State(OFF);
 8008dce:	2000      	movs	r0, #0
 8008dd0:	f7f8 ff94 	bl	8001cfc <actLed0State>
    actLed1State(OFF);
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	f7f8 ffbd 	bl	8001d54 <actLed1State>

    if (mcfg.gps_type == GPS_NMEA) {
 8008dda:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <gpsSetPassthrough+0x5c>)
 8008ddc:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d113      	bne.n	8008e0c <gpsSetPassthrough+0x50>
        if (state) {
 8008de4:	4b0d      	ldr	r3, [pc, #52]	; (8008e1c <gpsSetPassthrough+0x60>)
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d007      	beq.n	8008dfc <gpsSetPassthrough+0x40>
            gps_ublox._gps.evt_frame = NULL;
 8008dec:	4b0c      	ldr	r3, [pc, #48]	; (8008e20 <gpsSetPassthrough+0x64>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	611a      	str	r2, [r3, #16]
            state = false;
 8008df2:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <gpsSetPassthrough+0x60>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	701a      	strb	r2, [r3, #0]
            return 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e009      	b.n	8008e10 <gpsSetPassthrough+0x54>
        }
        else {
            gps_ublox._gps.evt_frame = _EvtPrintFrame;
 8008dfc:	4b08      	ldr	r3, [pc, #32]	; (8008e20 <gpsSetPassthrough+0x64>)
 8008dfe:	4a09      	ldr	r2, [pc, #36]	; (8008e24 <gpsSetPassthrough+0x68>)
 8008e00:	611a      	str	r2, [r3, #16]
            state = true;
 8008e02:	4b06      	ldr	r3, [pc, #24]	; (8008e1c <gpsSetPassthrough+0x60>)
 8008e04:	2201      	movs	r2, #1
 8008e06:	701a      	strb	r2, [r3, #0]
            return 1;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e001      	b.n	8008e10 <gpsSetPassthrough+0x54>
        }
    }
    return -1;
 8008e0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	20000fd0 	.word	0x20000fd0
 8008e18:	200008e8 	.word	0x200008e8
 8008e1c:	200013f4 	.word	0x200013f4
 8008e20:	20000ff0 	.word	0x20000ff0
 8008e24:	08008d99 	.word	0x08008d99

08008e28 <GPS_calc_longitude_scaling>:
////////////////////////////////////////////////////////////////////////////////////
// this is used to offset the shrinking longitude as we go towards the poles
// It's ok to calculate this once per waypoint setting, since it changes a little within the reach of a multicopter
//
static void GPS_calc_longitude_scaling(int32_t lat)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
    float rads = (abs((float)lat) / 10000000.0f) * 0.0174532925f;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	ee07 3a90 	vmov	s15, r3
 8008e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e42:	dd05      	ble.n	8008e50 <GPS_calc_longitude_scaling+0x28>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e4e:	e006      	b.n	8008e5e <GPS_calc_longitude_scaling+0x36>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e5a:	eef1 7a67 	vneg.f32	s15, s15
 8008e5e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008e8c <GPS_calc_longitude_scaling+0x64>
 8008e62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008e66:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008e90 <GPS_calc_longitude_scaling+0x68>
 8008e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6e:	edc7 7a03 	vstr	s15, [r7, #12]
    GPS_scaleLonDown = cosf(rads);
 8008e72:	ed97 0a03 	vldr	s0, [r7, #12]
 8008e76:	f01a f8ef 	bl	8023058 <cosf>
 8008e7a:	eef0 7a40 	vmov.f32	s15, s0
 8008e7e:	4b05      	ldr	r3, [pc, #20]	; (8008e94 <GPS_calc_longitude_scaling+0x6c>)
 8008e80:	edc3 7a00 	vstr	s15, [r3]
}
 8008e84:	bf00      	nop
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	4b189680 	.word	0x4b189680
 8008e90:	3c8efa35 	.word	0x3c8efa35
 8008e94:	20000028 	.word	0x20000028

08008e98 <GPS_set_next_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Sets the waypoint to navigate, reset neccessary variables and calculate initial values
//
void GPS_set_next_wp(int32_t *lat, int32_t *lon)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
    GPS_WP[LAT] = *lat;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a19      	ldr	r2, [pc, #100]	; (8008f0c <GPS_set_next_wp+0x74>)
 8008ea8:	6013      	str	r3, [r2, #0]
    GPS_WP[LON] = *lon;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a17      	ldr	r2, [pc, #92]	; (8008f0c <GPS_set_next_wp+0x74>)
 8008eb0:	6053      	str	r3, [r2, #4]

    GPS_calc_longitude_scaling(*lat);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7ff ffb6 	bl	8008e28 <GPS_calc_longitude_scaling>
    if (f.CRUISE_MODE)
 8008ebc:	4b14      	ldr	r3, [pc, #80]	; (8008f10 <GPS_set_next_wp+0x78>)
 8008ebe:	7d1b      	ldrb	r3, [r3, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <GPS_set_next_wp+0x30>
        fw_FlyTo();  // PatrikE CruiseMode version
 8008ec4:	f7fd fff0 	bl	8006ea8 <fw_FlyTo>

    GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008ec8:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <GPS_set_next_wp+0x7c>)
 8008eca:	9301      	str	r3, [sp, #4]
 8008ecc:	4b12      	ldr	r3, [pc, #72]	; (8008f18 <GPS_set_next_wp+0x80>)
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	4b12      	ldr	r3, [pc, #72]	; (8008f1c <GPS_set_next_wp+0x84>)
 8008ed2:	4a0e      	ldr	r2, [pc, #56]	; (8008f0c <GPS_set_next_wp+0x74>)
 8008ed4:	4912      	ldr	r1, [pc, #72]	; (8008f20 <GPS_set_next_wp+0x88>)
 8008ed6:	4813      	ldr	r0, [pc, #76]	; (8008f24 <GPS_set_next_wp+0x8c>)
 8008ed8:	f000 f84e 	bl	8008f78 <GPS_distance_cm_bearing>

    nav_bearing = target_bearing;
 8008edc:	4b0d      	ldr	r3, [pc, #52]	; (8008f14 <GPS_set_next_wp+0x7c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a11      	ldr	r2, [pc, #68]	; (8008f28 <GPS_set_next_wp+0x90>)
 8008ee2:	6013      	str	r3, [r2, #0]
    GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008ee4:	4b0e      	ldr	r3, [pc, #56]	; (8008f20 <GPS_set_next_wp+0x88>)
 8008ee6:	4a0f      	ldr	r2, [pc, #60]	; (8008f24 <GPS_set_next_wp+0x8c>)
 8008ee8:	490c      	ldr	r1, [pc, #48]	; (8008f1c <GPS_set_next_wp+0x84>)
 8008eea:	4808      	ldr	r0, [pc, #32]	; (8008f0c <GPS_set_next_wp+0x74>)
 8008eec:	f000 f934 	bl	8009158 <GPS_calc_location_error>
    original_target_bearing = target_bearing;
 8008ef0:	4b08      	ldr	r3, [pc, #32]	; (8008f14 <GPS_set_next_wp+0x7c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a0d      	ldr	r2, [pc, #52]	; (8008f2c <GPS_set_next_wp+0x94>)
 8008ef6:	6013      	str	r3, [r2, #0]
    waypoint_speed_gov = cfg.nav_speed_min;
 8008ef8:	4b0d      	ldr	r3, [pc, #52]	; (8008f30 <GPS_set_next_wp+0x98>)
 8008efa:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8008efe:	b21a      	sxth	r2, r3
 8008f00:	4b0c      	ldr	r3, [pc, #48]	; (8008f34 <GPS_set_next_wp+0x9c>)
 8008f02:	801a      	strh	r2, [r3, #0]
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20001380 	.word	0x20001380
 8008f10:	200016f4 	.word	0x200016f4
 8008f14:	20001388 	.word	0x20001388
 8008f18:	20001394 	.word	0x20001394
 8008f1c:	20001384 	.word	0x20001384
 8008f20:	200017bc 	.word	0x200017bc
 8008f24:	200017b8 	.word	0x200017b8
 8008f28:	200013e8 	.word	0x200013e8
 8008f2c:	2000138c 	.word	0x2000138c
 8008f30:	20000e54 	.word	0x20000e54
 8008f34:	20001398 	.word	0x20001398

08008f38 <check_missed_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Check if we missed the destination somehow
//
static bool check_missed_wp(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
    int32_t temp;
    temp = target_bearing - original_target_bearing;
 8008f3e:	4b0c      	ldr	r3, [pc, #48]	; (8008f70 <check_missed_wp+0x38>)
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	4b0c      	ldr	r3, [pc, #48]	; (8008f74 <check_missed_wp+0x3c>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	607b      	str	r3, [r7, #4]
    temp = wrap_18000(temp);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fb9a 	bl	8009684 <wrap_18000>
 8008f50:	6078      	str	r0, [r7, #4]
    return (abs(temp) > 10000); // we passed the waypoint by 100 degrees
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	bfb8      	it	lt
 8008f58:	425b      	neglt	r3, r3
 8008f5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	bfcc      	ite	gt
 8008f62:	2301      	movgt	r3, #1
 8008f64:	2300      	movle	r3, #0
 8008f66:	b2db      	uxtb	r3, r3
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20001388 	.word	0x20001388
 8008f74:	2000138c 	.word	0x2000138c

08008f78 <GPS_distance_cm_bearing>:

////////////////////////////////////////////////////////////////////////////////////
// Get distance between two points in cm
// Get bearing from pos1 to pos2, returns an 1deg = 100 precision
static void GPS_distance_cm_bearing(int32_t *lat1, int32_t *lon1, int32_t *lat2, int32_t *lon2, int32_t *dist, int32_t *bearing)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
 8008f84:	603b      	str	r3, [r7, #0]
    float dLat = *lat2 - *lat1; // difference of latitude in 1/10 000 000 degrees
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	ee07 3a90 	vmov	s15, r3
 8008f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f98:	edc7 7a05 	vstr	s15, [r7, #20]
    float dLon = (float)(*lon2 - *lon1) * GPS_scaleLonDown;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fae:	4b25      	ldr	r3, [pc, #148]	; (8009044 <GPS_distance_cm_bearing+0xcc>)
 8008fb0:	edd3 7a00 	vldr	s15, [r3]
 8008fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fb8:	edc7 7a04 	vstr	s15, [r7, #16]
    *dist = sqrtf(sq(dLat) + sq(dLon)) * 1.113195f;
 8008fbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008fc0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008fc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8008fc8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8008fd4:	f01a f990 	bl	80232f8 <sqrtf>
 8008fd8:	eef0 7a40 	vmov.f32	s15, s0
 8008fdc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009048 <GPS_distance_cm_bearing+0xd0>
 8008fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fe8:	ee17 2a90 	vmov	r2, s15
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	601a      	str	r2, [r3, #0]

    *bearing = 9000.0f + atan2f(-dLat, dLon) * 5729.57795f;      // Convert the output radians to 100xdeg
 8008ff0:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ff4:	eef1 7a67 	vneg.f32	s15, s15
 8008ff8:	edd7 0a04 	vldr	s1, [r7, #16]
 8008ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8009000:	f01a f920 	bl	8023244 <atan2f>
 8009004:	eef0 7a40 	vmov.f32	s15, s0
 8009008:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800904c <GPS_distance_cm_bearing+0xd4>
 800900c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009010:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009050 <GPS_distance_cm_bearing+0xd8>
 8009014:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800901c:	ee17 2a90 	vmov	r2, s15
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	601a      	str	r2, [r3, #0]
    if (*bearing < 0)
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	da06      	bge.n	800903a <GPS_distance_cm_bearing+0xc2>
        *bearing += 36000;
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8009034:	33a0      	adds	r3, #160	; 0xa0
 8009036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009038:	6013      	str	r3, [r2, #0]
}
 800903a:	bf00      	nop
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000028 	.word	0x20000028
 8009048:	3f8e7d2c 	.word	0x3f8e7d2c
 800904c:	45b30ca0 	.word	0x45b30ca0
 8009050:	460ca000 	.word	0x460ca000

08009054 <GPS_calc_velocity>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate our current speed vector from gps position data
//
static void GPS_calc_velocity(void)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
    static int32_t last[2] = { 0, 0 };
    static uint8_t init = 0;
    // y_GPS_speed positve = Up
    // x_GPS_speed positve = Right

    if (init) {
 800905a:	4b38      	ldr	r3, [pc, #224]	; (800913c <GPS_calc_velocity+0xe8>)
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d05b      	beq.n	800911a <GPS_calc_velocity+0xc6>
        float tmp = 1.0f / dTnav;
 8009062:	4b37      	ldr	r3, [pc, #220]	; (8009140 <GPS_calc_velocity+0xec>)
 8009064:	ed93 7a00 	vldr	s14, [r3]
 8009068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800906c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009070:	edc7 7a01 	vstr	s15, [r7, #4]
        actual_speed[GPS_X] = (float)(GPS_coord[LON] - last[LON]) * GPS_scaleLonDown * tmp;
 8009074:	4b33      	ldr	r3, [pc, #204]	; (8009144 <GPS_calc_velocity+0xf0>)
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	4b33      	ldr	r3, [pc, #204]	; (8009148 <GPS_calc_velocity+0xf4>)
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	ee07 3a90 	vmov	s15, r3
 8009082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009086:	4b31      	ldr	r3, [pc, #196]	; (800914c <GPS_calc_velocity+0xf8>)
 8009088:	edd3 7a00 	vldr	s15, [r3]
 800908c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009090:	edd7 7a01 	vldr	s15, [r7, #4]
 8009094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800909c:	ee17 3a90 	vmov	r3, s15
 80090a0:	b21a      	sxth	r2, r3
 80090a2:	4b2b      	ldr	r3, [pc, #172]	; (8009150 <GPS_calc_velocity+0xfc>)
 80090a4:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (float)(GPS_coord[LAT] - last[LAT]) * tmp;
 80090a6:	4b27      	ldr	r3, [pc, #156]	; (8009144 <GPS_calc_velocity+0xf0>)
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	4b27      	ldr	r3, [pc, #156]	; (8009148 <GPS_calc_velocity+0xf4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	ee07 3a90 	vmov	s15, r3
 80090b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80090bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090c4:	ee17 3a90 	vmov	r3, s15
 80090c8:	b21a      	sxth	r2, r3
 80090ca:	4b21      	ldr	r3, [pc, #132]	; (8009150 <GPS_calc_velocity+0xfc>)
 80090cc:	801a      	strh	r2, [r3, #0]

        actual_speed[GPS_X] = (actual_speed[GPS_X] + speed_old[GPS_X]) / 2;
 80090ce:	4b20      	ldr	r3, [pc, #128]	; (8009150 <GPS_calc_velocity+0xfc>)
 80090d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80090d4:	461a      	mov	r2, r3
 80090d6:	4b1f      	ldr	r3, [pc, #124]	; (8009154 <GPS_calc_velocity+0x100>)
 80090d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80090dc:	4413      	add	r3, r2
 80090de:	0fda      	lsrs	r2, r3, #31
 80090e0:	4413      	add	r3, r2
 80090e2:	105b      	asrs	r3, r3, #1
 80090e4:	b21a      	sxth	r2, r3
 80090e6:	4b1a      	ldr	r3, [pc, #104]	; (8009150 <GPS_calc_velocity+0xfc>)
 80090e8:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (actual_speed[GPS_Y] + speed_old[GPS_Y]) / 2;
 80090ea:	4b19      	ldr	r3, [pc, #100]	; (8009150 <GPS_calc_velocity+0xfc>)
 80090ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090f0:	461a      	mov	r2, r3
 80090f2:	4b18      	ldr	r3, [pc, #96]	; (8009154 <GPS_calc_velocity+0x100>)
 80090f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090f8:	4413      	add	r3, r2
 80090fa:	0fda      	lsrs	r2, r3, #31
 80090fc:	4413      	add	r3, r2
 80090fe:	105b      	asrs	r3, r3, #1
 8009100:	b21a      	sxth	r2, r3
 8009102:	4b13      	ldr	r3, [pc, #76]	; (8009150 <GPS_calc_velocity+0xfc>)
 8009104:	801a      	strh	r2, [r3, #0]

        speed_old[GPS_X] = actual_speed[GPS_X];
 8009106:	4b12      	ldr	r3, [pc, #72]	; (8009150 <GPS_calc_velocity+0xfc>)
 8009108:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800910c:	4b11      	ldr	r3, [pc, #68]	; (8009154 <GPS_calc_velocity+0x100>)
 800910e:	805a      	strh	r2, [r3, #2]
        speed_old[GPS_Y] = actual_speed[GPS_Y];
 8009110:	4b0f      	ldr	r3, [pc, #60]	; (8009150 <GPS_calc_velocity+0xfc>)
 8009112:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009116:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <GPS_calc_velocity+0x100>)
 8009118:	801a      	strh	r2, [r3, #0]
    }
    init = 1;
 800911a:	4b08      	ldr	r3, [pc, #32]	; (800913c <GPS_calc_velocity+0xe8>)
 800911c:	2201      	movs	r2, #1
 800911e:	701a      	strb	r2, [r3, #0]

    last[LON] = GPS_coord[LON];
 8009120:	4b08      	ldr	r3, [pc, #32]	; (8009144 <GPS_calc_velocity+0xf0>)
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	4a08      	ldr	r2, [pc, #32]	; (8009148 <GPS_calc_velocity+0xf4>)
 8009126:	6053      	str	r3, [r2, #4]
    last[LAT] = GPS_coord[LAT];
 8009128:	4b06      	ldr	r3, [pc, #24]	; (8009144 <GPS_calc_velocity+0xf0>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a06      	ldr	r2, [pc, #24]	; (8009148 <GPS_calc_velocity+0xf4>)
 800912e:	6013      	str	r3, [r2, #0]
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	200013f5 	.word	0x200013f5
 8009140:	2000136c 	.word	0x2000136c
 8009144:	200017b8 	.word	0x200017b8
 8009148:	200013f8 	.word	0x200013f8
 800914c:	20000028 	.word	0x20000028
 8009150:	20001370 	.word	0x20001370
 8009154:	20001400 	.word	0x20001400

08009158 <GPS_calc_location_error>:
//      1800    = 19.80m = 60 feet
//      3000    = 33m
//      10000   = 111m
//
static void GPS_calc_location_error(int32_t *target_lat, int32_t *target_lng, int32_t *gps_lat, int32_t *gps_lng)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
 8009164:	603b      	str	r3, [r7, #0]
    error[LON] = (float)(*target_lng - *gps_lng) * GPS_scaleLonDown;   // X Error
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	ee07 3a90 	vmov	s15, r3
 8009174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009178:	4b0b      	ldr	r3, [pc, #44]	; (80091a8 <GPS_calc_location_error+0x50>)
 800917a:	edd3 7a00 	vldr	s15, [r3]
 800917e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009186:	ee17 2a90 	vmov	r2, s15
 800918a:	4b08      	ldr	r3, [pc, #32]	; (80091ac <GPS_calc_location_error+0x54>)
 800918c:	605a      	str	r2, [r3, #4]
    error[LAT] = *target_lat - *gps_lat;        // Y Error
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	4a04      	ldr	r2, [pc, #16]	; (80091ac <GPS_calc_location_error+0x54>)
 800919a:	6013      	str	r3, [r2, #0]
}
 800919c:	bf00      	nop
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	20000028 	.word	0x20000028
 80091ac:	20001378 	.word	0x20001378

080091b0 <GPS_calc_poshold>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate nav_lat and nav_lon from the x and y error and the speed
//
static void GPS_calc_poshold(void)
{
 80091b0:	b590      	push	{r4, r7, lr}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
    int32_t d;
    int32_t target_speed;
    int axis;

    for (axis = 0; axis < 2; axis++) {
 80091b6:	2300      	movs	r3, #0
 80091b8:	60bb      	str	r3, [r7, #8]
 80091ba:	e092      	b.n	80092e2 <GPS_calc_poshold+0x132>
        target_speed = get_P(error[axis], &posholdPID_PARAM);       // calculate desired speed from lon error
 80091bc:	4a4d      	ldr	r2, [pc, #308]	; (80092f4 <GPS_calc_poshold+0x144>)
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091c4:	494c      	ldr	r1, [pc, #304]	; (80092f8 <GPS_calc_poshold+0x148>)
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7ff f9a4 	bl	8008514 <get_P>
 80091cc:	6078      	str	r0, [r7, #4]
        rate_error[axis] = target_speed - actual_speed[axis];       // calc the speed error
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	494a      	ldr	r1, [pc, #296]	; (80092fc <GPS_calc_poshold+0x14c>)
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	b29b      	uxth	r3, r3
 80091e0:	b219      	sxth	r1, r3
 80091e2:	4a47      	ldr	r2, [pc, #284]	; (8009300 <GPS_calc_poshold+0x150>)
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 80091ea:	4a45      	ldr	r2, [pc, #276]	; (8009300 <GPS_calc_poshold+0x150>)
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80091f2:	4944      	ldr	r1, [pc, #272]	; (8009304 <GPS_calc_poshold+0x154>)
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7ff f98d 	bl	8008514 <get_P>
 80091fa:	4603      	mov	r3, r0
 80091fc:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 80091fe:	4a40      	ldr	r2, [pc, #256]	; (8009300 <GPS_calc_poshold+0x150>)
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009206:	4619      	mov	r1, r3
 8009208:	4a3a      	ldr	r2, [pc, #232]	; (80092f4 <GPS_calc_poshold+0x144>)
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009210:	18c8      	adds	r0, r1, r3
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4613      	mov	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4a3a      	ldr	r2, [pc, #232]	; (8009308 <GPS_calc_poshold+0x158>)
 800921e:	441a      	add	r2, r3
 8009220:	4b38      	ldr	r3, [pc, #224]	; (8009304 <GPS_calc_poshold+0x154>)
 8009222:	493a      	ldr	r1, [pc, #232]	; (800930c <GPS_calc_poshold+0x15c>)
 8009224:	f7ff f98f 	bl	8008546 <get_I>
 8009228:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 800922a:	b29b      	uxth	r3, r3
 800922c:	4423      	add	r3, r4
 800922e:	b29b      	uxth	r3, r3
 8009230:	b219      	sxth	r1, r3
 8009232:	4a37      	ldr	r2, [pc, #220]	; (8009310 <GPS_calc_poshold+0x160>)
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        d = get_D(error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 800923a:	4a2e      	ldr	r2, [pc, #184]	; (80092f4 <GPS_calc_poshold+0x144>)
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4a2e      	ldr	r2, [pc, #184]	; (8009308 <GPS_calc_poshold+0x158>)
 800924e:	441a      	add	r2, r3
 8009250:	4b2c      	ldr	r3, [pc, #176]	; (8009304 <GPS_calc_poshold+0x154>)
 8009252:	492e      	ldr	r1, [pc, #184]	; (800930c <GPS_calc_poshold+0x15c>)
 8009254:	f7ff f9c0 	bl	80085d8 <get_D>
 8009258:	60f8      	str	r0, [r7, #12]
        d = constrain(d, -2000, 2000);
 800925a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800925e:	492d      	ldr	r1, [pc, #180]	; (8009314 <GPS_calc_poshold+0x164>)
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f7fa fc2d 	bl	8003ac0 <constrain>
 8009266:	60f8      	str	r0, [r7, #12]

        // get rid of noise
#if defined(GPS_LOW_SPEED_D_FILTER)
        if (abs(actual_speed[axis]) < 50)
 8009268:	4a24      	ldr	r2, [pc, #144]	; (80092fc <GPS_calc_poshold+0x14c>)
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009270:	2b00      	cmp	r3, #0
 8009272:	bfb8      	it	lt
 8009274:	425b      	neglt	r3, r3
 8009276:	b29b      	uxth	r3, r3
 8009278:	2b31      	cmp	r3, #49	; 0x31
 800927a:	d801      	bhi.n	8009280 <GPS_calc_poshold+0xd0>
            d = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	60fb      	str	r3, [r7, #12]
#endif

        nav[axis] += d;
 8009280:	4a23      	ldr	r2, [pc, #140]	; (8009310 <GPS_calc_poshold+0x160>)
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009288:	b29a      	uxth	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	b29b      	uxth	r3, r3
 800928e:	4413      	add	r3, r2
 8009290:	b29b      	uxth	r3, r3
 8009292:	b219      	sxth	r1, r3
 8009294:	4a1e      	ldr	r2, [pc, #120]	; (8009310 <GPS_calc_poshold+0x160>)
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 800929c:	4a1c      	ldr	r2, [pc, #112]	; (8009310 <GPS_calc_poshold+0x160>)
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80092a4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80092a8:	491b      	ldr	r1, [pc, #108]	; (8009318 <GPS_calc_poshold+0x168>)
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fa fc08 	bl	8003ac0 <constrain>
 80092b0:	4603      	mov	r3, r0
 80092b2:	b219      	sxth	r1, r3
 80092b4:	4a16      	ldr	r2, [pc, #88]	; (8009310 <GPS_calc_poshold+0x160>)
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navPID[axis].integrator = poshold_ratePID[axis].integrator;
 80092bc:	4912      	ldr	r1, [pc, #72]	; (8009308 <GPS_calc_poshold+0x158>)
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	4613      	mov	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	440b      	add	r3, r1
 80092ca:	6819      	ldr	r1, [r3, #0]
 80092cc:	4813      	ldr	r0, [pc, #76]	; (800931c <GPS_calc_poshold+0x16c>)
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	4613      	mov	r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4403      	add	r3, r0
 80092da:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	3301      	adds	r3, #1
 80092e0:	60bb      	str	r3, [r7, #8]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	f77f af69 	ble.w	80091bc <GPS_calc_poshold+0xc>
    }
}
 80092ea:	bf00      	nop
 80092ec:	bf00      	nop
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd90      	pop	{r4, r7, pc}
 80092f4:	20001378 	.word	0x20001378
 80092f8:	200012b4 	.word	0x200012b4
 80092fc:	20001370 	.word	0x20001370
 8009300:	20001374 	.word	0x20001374
 8009304:	200012c4 	.word	0x200012c4
 8009308:	2000131c 	.word	0x2000131c
 800930c:	2000136c 	.word	0x2000136c
 8009310:	200017ec 	.word	0x200017ec
 8009314:	fffff830 	.word	0xfffff830
 8009318:	fffff448 	.word	0xfffff448
 800931c:	20001344 	.word	0x20001344

08009320 <GPS_calc_nav_rate>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate the desired nav_lat and nav_lon for distance flying such as RTH
//
static void GPS_calc_nav_rate(int max_speed)
{
 8009320:	b590      	push	{r4, r7, lr}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
    float trig[2];
    float temp;
    int axis;

    // push us towards the original track
    GPS_update_crosstrack();
 8009328:	f000 f8cc 	bl	80094c4 <GPS_update_crosstrack>

    // nav_bearing includes crosstrack
    temp = (9000l - nav_bearing) * RADX100;
 800932c:	4b5a      	ldr	r3, [pc, #360]	; (8009498 <GPS_calc_nav_rate+0x178>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 8009334:	3328      	adds	r3, #40	; 0x28
 8009336:	ee07 3a90 	vmov	s15, r3
 800933a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800933e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800949c <GPS_calc_nav_rate+0x17c>
 8009342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009346:	edc7 7a04 	vstr	s15, [r7, #16]
    trig[GPS_X] = cosf(temp);
 800934a:	ed97 0a04 	vldr	s0, [r7, #16]
 800934e:	f019 fe83 	bl	8023058 <cosf>
 8009352:	eef0 7a40 	vmov.f32	s15, s0
 8009356:	edc7 7a03 	vstr	s15, [r7, #12]
    trig[GPS_Y] = sinf(temp);
 800935a:	ed97 0a04 	vldr	s0, [r7, #16]
 800935e:	f019 feff 	bl	8023160 <sinf>
 8009362:	eef0 7a40 	vmov.f32	s15, s0
 8009366:	edc7 7a02 	vstr	s15, [r7, #8]

    for (axis = 0; axis < 2; axis++) {
 800936a:	2300      	movs	r3, #0
 800936c:	617b      	str	r3, [r7, #20]
 800936e:	e08a      	b.n	8009486 <GPS_calc_nav_rate+0x166>
        rate_error[axis] = (trig[axis] * max_speed) - actual_speed[axis];
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	3318      	adds	r3, #24
 8009376:	443b      	add	r3, r7
 8009378:	3b10      	subs	r3, #16
 800937a:	ed93 7a00 	vldr	s14, [r3]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	ee07 3a90 	vmov	s15, r3
 8009384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800938c:	4a44      	ldr	r2, [pc, #272]	; (80094a0 <GPS_calc_nav_rate+0x180>)
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009394:	ee07 3a90 	vmov	s15, r3
 8009398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800939c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093a4:	ee17 3a90 	vmov	r3, s15
 80093a8:	b219      	sxth	r1, r3
 80093aa:	4a3e      	ldr	r2, [pc, #248]	; (80094a4 <GPS_calc_nav_rate+0x184>)
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        rate_error[axis] = constrain(rate_error[axis], -1000, 1000);
 80093b2:	4a3c      	ldr	r2, [pc, #240]	; (80094a4 <GPS_calc_nav_rate+0x184>)
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80093ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80093be:	493a      	ldr	r1, [pc, #232]	; (80094a8 <GPS_calc_nav_rate+0x188>)
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fa fb7d 	bl	8003ac0 <constrain>
 80093c6:	4603      	mov	r3, r0
 80093c8:	b219      	sxth	r1, r3
 80093ca:	4a36      	ldr	r2, [pc, #216]	; (80094a4 <GPS_calc_nav_rate+0x184>)
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // P + I + D
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 80093d2:	4a34      	ldr	r2, [pc, #208]	; (80094a4 <GPS_calc_nav_rate+0x184>)
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80093da:	4934      	ldr	r1, [pc, #208]	; (80094ac <GPS_calc_nav_rate+0x18c>)
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff f899 	bl	8008514 <get_P>
 80093e2:	4603      	mov	r3, r0
 80093e4:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 80093e6:	4a2f      	ldr	r2, [pc, #188]	; (80094a4 <GPS_calc_nav_rate+0x184>)
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80093ee:	4618      	mov	r0, r3
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4a2d      	ldr	r2, [pc, #180]	; (80094b0 <GPS_calc_nav_rate+0x190>)
 80093fc:	441a      	add	r2, r3
 80093fe:	4b2b      	ldr	r3, [pc, #172]	; (80094ac <GPS_calc_nav_rate+0x18c>)
 8009400:	492c      	ldr	r1, [pc, #176]	; (80094b4 <GPS_calc_nav_rate+0x194>)
 8009402:	f7ff f8a0 	bl	8008546 <get_I>
 8009406:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 8009408:	b29b      	uxth	r3, r3
 800940a:	4423      	add	r3, r4
 800940c:	b29c      	uxth	r4, r3
                    get_D(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM);
 800940e:	4a25      	ldr	r2, [pc, #148]	; (80094a4 <GPS_calc_nav_rate+0x184>)
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009416:	4618      	mov	r0, r3
 8009418:	697a      	ldr	r2, [r7, #20]
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4a23      	ldr	r2, [pc, #140]	; (80094b0 <GPS_calc_nav_rate+0x190>)
 8009424:	441a      	add	r2, r3
 8009426:	4b21      	ldr	r3, [pc, #132]	; (80094ac <GPS_calc_nav_rate+0x18c>)
 8009428:	4922      	ldr	r1, [pc, #136]	; (80094b4 <GPS_calc_nav_rate+0x194>)
 800942a:	f7ff f8d5 	bl	80085d8 <get_D>
 800942e:	4603      	mov	r3, r0
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 8009430:	b29b      	uxth	r3, r3
 8009432:	4423      	add	r3, r4
 8009434:	b29b      	uxth	r3, r3
 8009436:	b219      	sxth	r1, r3
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 8009438:	4a1f      	ldr	r2, [pc, #124]	; (80094b8 <GPS_calc_nav_rate+0x198>)
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 8009440:	4a1d      	ldr	r2, [pc, #116]	; (80094b8 <GPS_calc_nav_rate+0x198>)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009448:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800944c:	491b      	ldr	r1, [pc, #108]	; (80094bc <GPS_calc_nav_rate+0x19c>)
 800944e:	4618      	mov	r0, r3
 8009450:	f7fa fb36 	bl	8003ac0 <constrain>
 8009454:	4603      	mov	r3, r0
 8009456:	b219      	sxth	r1, r3
 8009458:	4a17      	ldr	r2, [pc, #92]	; (80094b8 <GPS_calc_nav_rate+0x198>)
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        poshold_ratePID[axis].integrator = navPID[axis].integrator;
 8009460:	4913      	ldr	r1, [pc, #76]	; (80094b0 <GPS_calc_nav_rate+0x190>)
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	4613      	mov	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	440b      	add	r3, r1
 800946e:	6819      	ldr	r1, [r3, #0]
 8009470:	4813      	ldr	r0, [pc, #76]	; (80094c0 <GPS_calc_nav_rate+0x1a0>)
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	4613      	mov	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4403      	add	r3, r0
 800947e:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	3301      	adds	r3, #1
 8009484:	617b      	str	r3, [r7, #20]
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	2b01      	cmp	r3, #1
 800948a:	f77f af71 	ble.w	8009370 <GPS_calc_nav_rate+0x50>
    }
}
 800948e:	bf00      	nop
 8009490:	bf00      	nop
 8009492:	371c      	adds	r7, #28
 8009494:	46bd      	mov	sp, r7
 8009496:	bd90      	pop	{r4, r7, pc}
 8009498:	200013e8 	.word	0x200013e8
 800949c:	393702d3 	.word	0x393702d3
 80094a0:	20001370 	.word	0x20001370
 80094a4:	20001374 	.word	0x20001374
 80094a8:	fffffc18 	.word	0xfffffc18
 80094ac:	200012d4 	.word	0x200012d4
 80094b0:	20001344 	.word	0x20001344
 80094b4:	2000136c 	.word	0x2000136c
 80094b8:	200017ec 	.word	0x200017ec
 80094bc:	fffff448 	.word	0xfffff448
 80094c0:	2000131c 	.word	0x2000131c

080094c4 <GPS_update_crosstrack>:
////////////////////////////////////////////////////////////////////////////////////
// Calculating cross track error, this tries to keep the copter on a direct line
// when flying to a waypoint.
//
static void GPS_update_crosstrack(void)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
    if (abs(wrap_18000(target_bearing - original_target_bearing)) < 4500) {     // If we are too far off or too close we don't do track following
 80094ca:	4b38      	ldr	r3, [pc, #224]	; (80095ac <GPS_update_crosstrack+0xe8>)
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	4b38      	ldr	r3, [pc, #224]	; (80095b0 <GPS_update_crosstrack+0xec>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 f8d5 	bl	8009684 <wrap_18000>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	dd10      	ble.n	8009502 <GPS_update_crosstrack+0x3e>
 80094e0:	4b32      	ldr	r3, [pc, #200]	; (80095ac <GPS_update_crosstrack+0xe8>)
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	4b32      	ldr	r3, [pc, #200]	; (80095b0 <GPS_update_crosstrack+0xec>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 f8ca 	bl	8009684 <wrap_18000>
 80094f0:	4603      	mov	r3, r0
 80094f2:	f241 1293 	movw	r2, #4499	; 0x1193
 80094f6:	4293      	cmp	r3, r2
 80094f8:	bfd4      	ite	le
 80094fa:	2301      	movle	r3, #1
 80094fc:	2300      	movgt	r3, #0
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	e00e      	b.n	8009520 <GPS_update_crosstrack+0x5c>
 8009502:	4b2a      	ldr	r3, [pc, #168]	; (80095ac <GPS_update_crosstrack+0xe8>)
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	4b2a      	ldr	r3, [pc, #168]	; (80095b0 <GPS_update_crosstrack+0xec>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	4618      	mov	r0, r3
 800950e:	f000 f8b9 	bl	8009684 <wrap_18000>
 8009512:	4603      	mov	r3, r0
 8009514:	4a27      	ldr	r2, [pc, #156]	; (80095b4 <GPS_update_crosstrack+0xf0>)
 8009516:	4293      	cmp	r3, r2
 8009518:	bfac      	ite	ge
 800951a:	2301      	movge	r3, #1
 800951c:	2300      	movlt	r3, #0
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b00      	cmp	r3, #0
 8009522:	d03b      	beq.n	800959c <GPS_update_crosstrack+0xd8>
        float temp = (target_bearing - original_target_bearing) * RADX100;
 8009524:	4b21      	ldr	r3, [pc, #132]	; (80095ac <GPS_update_crosstrack+0xe8>)
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	4b21      	ldr	r3, [pc, #132]	; (80095b0 <GPS_update_crosstrack+0xec>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	ee07 3a90 	vmov	s15, r3
 8009532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009536:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80095b8 <GPS_update_crosstrack+0xf4>
 800953a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800953e:	edc7 7a01 	vstr	s15, [r7, #4]
        crosstrack_error = sinf(temp) * (wp_distance * CROSSTRACK_GAIN); // Meters we are off track line
 8009542:	ed97 0a01 	vldr	s0, [r7, #4]
 8009546:	f019 fe0b 	bl	8023160 <sinf>
 800954a:	eeb0 7a40 	vmov.f32	s14, s0
 800954e:	4b1b      	ldr	r3, [pc, #108]	; (80095bc <GPS_update_crosstrack+0xf8>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	ee07 3a90 	vmov	s15, r3
 8009556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800955a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800955e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009562:	ee17 3a90 	vmov	r3, s15
 8009566:	b21a      	sxth	r2, r3
 8009568:	4b15      	ldr	r3, [pc, #84]	; (80095c0 <GPS_update_crosstrack+0xfc>)
 800956a:	801a      	strh	r2, [r3, #0]
        nav_bearing = target_bearing + constrain(crosstrack_error, -3000, 3000);
 800956c:	4b14      	ldr	r3, [pc, #80]	; (80095c0 <GPS_update_crosstrack+0xfc>)
 800956e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009572:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009576:	4913      	ldr	r1, [pc, #76]	; (80095c4 <GPS_update_crosstrack+0x100>)
 8009578:	4618      	mov	r0, r3
 800957a:	f7fa faa1 	bl	8003ac0 <constrain>
 800957e:	4602      	mov	r2, r0
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <GPS_update_crosstrack+0xe8>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4413      	add	r3, r2
 8009586:	4a10      	ldr	r2, [pc, #64]	; (80095c8 <GPS_update_crosstrack+0x104>)
 8009588:	6013      	str	r3, [r2, #0]
        nav_bearing = wrap_36000(nav_bearing);
 800958a:	4b0f      	ldr	r3, [pc, #60]	; (80095c8 <GPS_update_crosstrack+0x104>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4618      	mov	r0, r3
 8009590:	f000 f898 	bl	80096c4 <wrap_36000>
 8009594:	4603      	mov	r3, r0
 8009596:	4a0c      	ldr	r2, [pc, #48]	; (80095c8 <GPS_update_crosstrack+0x104>)
 8009598:	6013      	str	r3, [r2, #0]
    } else {
        nav_bearing = target_bearing;
    }
}
 800959a:	e003      	b.n	80095a4 <GPS_update_crosstrack+0xe0>
        nav_bearing = target_bearing;
 800959c:	4b03      	ldr	r3, [pc, #12]	; (80095ac <GPS_update_crosstrack+0xe8>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a09      	ldr	r2, [pc, #36]	; (80095c8 <GPS_update_crosstrack+0x104>)
 80095a2:	6013      	str	r3, [r2, #0]
}
 80095a4:	bf00      	nop
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	20001388 	.word	0x20001388
 80095b0:	2000138c 	.word	0x2000138c
 80095b4:	ffffee6d 	.word	0xffffee6d
 80095b8:	393702d3 	.word	0x393702d3
 80095bc:	20001394 	.word	0x20001394
 80095c0:	20001390 	.word	0x20001390
 80095c4:	fffff448 	.word	0xfffff448
 80095c8:	200013e8 	.word	0x200013e8

080095cc <GPS_calc_desired_speed>:
//                100  |  200     300     400cm/s
//                 |                                        +|+
//                 |< we should slow to 1.5 m/s as we hit the target
//
static int16_t GPS_calc_desired_speed(int16_t max_speed, bool _slow)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	4603      	mov	r3, r0
 80095d4:	460a      	mov	r2, r1
 80095d6:	80fb      	strh	r3, [r7, #6]
 80095d8:	4613      	mov	r3, r2
 80095da:	717b      	strb	r3, [r7, #5]
    // max_speed is default 400 or 4m/s
    if (_slow) {
 80095dc:	797b      	ldrb	r3, [r7, #5]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00c      	beq.n	80095fc <GPS_calc_desired_speed+0x30>
        max_speed = min(max_speed, wp_distance / 2);
 80095e2:	4b23      	ldr	r3, [pc, #140]	; (8009670 <GPS_calc_desired_speed+0xa4>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	0fda      	lsrs	r2, r3, #31
 80095e8:	4413      	add	r3, r2
 80095ea:	105b      	asrs	r3, r3, #1
 80095ec:	461a      	mov	r2, r3
 80095ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80095f2:	4293      	cmp	r3, r2
 80095f4:	bfa8      	it	ge
 80095f6:	4613      	movge	r3, r2
 80095f8:	80fb      	strh	r3, [r7, #6]
 80095fa:	e011      	b.n	8009620 <GPS_calc_desired_speed+0x54>
    } else {
        max_speed = min(max_speed, wp_distance);
 80095fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009600:	4b1b      	ldr	r3, [pc, #108]	; (8009670 <GPS_calc_desired_speed+0xa4>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4293      	cmp	r3, r2
 8009606:	bfa8      	it	ge
 8009608:	4613      	movge	r3, r2
 800960a:	80fb      	strh	r3, [r7, #6]
        max_speed = max(max_speed, cfg.nav_speed_min);      // go at least 100cm/s
 800960c:	4b19      	ldr	r3, [pc, #100]	; (8009674 <GPS_calc_desired_speed+0xa8>)
 800960e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8009612:	461a      	mov	r2, r3
 8009614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009618:	4293      	cmp	r3, r2
 800961a:	bfb8      	it	lt
 800961c:	4613      	movlt	r3, r2
 800961e:	80fb      	strh	r3, [r7, #6]
    }

    // limit the ramp up of the speed
    // waypoint_speed_gov is reset to 0 at each new WP command
    if (max_speed > waypoint_speed_gov) {
 8009620:	4b15      	ldr	r3, [pc, #84]	; (8009678 <GPS_calc_desired_speed+0xac>)
 8009622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009626:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800962a:	429a      	cmp	r2, r3
 800962c:	dd17      	ble.n	800965e <GPS_calc_desired_speed+0x92>
        waypoint_speed_gov += (int)(100.0f * dTnav);    // increase at .5/ms
 800962e:	4b13      	ldr	r3, [pc, #76]	; (800967c <GPS_calc_desired_speed+0xb0>)
 8009630:	edd3 7a00 	vldr	s15, [r3]
 8009634:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8009680 <GPS_calc_desired_speed+0xb4>
 8009638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800963c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009640:	ee17 3a90 	vmov	r3, s15
 8009644:	b29a      	uxth	r2, r3
 8009646:	4b0c      	ldr	r3, [pc, #48]	; (8009678 <GPS_calc_desired_speed+0xac>)
 8009648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800964c:	b29b      	uxth	r3, r3
 800964e:	4413      	add	r3, r2
 8009650:	b29b      	uxth	r3, r3
 8009652:	b21a      	sxth	r2, r3
 8009654:	4b08      	ldr	r3, [pc, #32]	; (8009678 <GPS_calc_desired_speed+0xac>)
 8009656:	801a      	strh	r2, [r3, #0]
        max_speed = waypoint_speed_gov;
 8009658:	4b07      	ldr	r3, [pc, #28]	; (8009678 <GPS_calc_desired_speed+0xac>)
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	80fb      	strh	r3, [r7, #6]
    }
    return max_speed;
 800965e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8009662:	4618      	mov	r0, r3
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	20001394 	.word	0x20001394
 8009674:	20000e54 	.word	0x20000e54
 8009678:	20001398 	.word	0x20001398
 800967c:	2000136c 	.word	0x2000136c
 8009680:	42c80000 	.word	0x42c80000

08009684 <wrap_18000>:

////////////////////////////////////////////////////////////////////////////////////
// Utilities
//
int32_t wrap_18000(int32_t err)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
    if (err > 18000)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f244 6250 	movw	r2, #18000	; 0x4650
 8009692:	4293      	cmp	r3, r2
 8009694:	dd04      	ble.n	80096a0 <wrap_18000+0x1c>
        err -= 36000;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 800969c:	3ba0      	subs	r3, #160	; 0xa0
 800969e:	607b      	str	r3, [r7, #4]
    if (err < -18000)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a07      	ldr	r2, [pc, #28]	; (80096c0 <wrap_18000+0x3c>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	da04      	bge.n	80096b2 <wrap_18000+0x2e>
        err += 36000;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80096ae:	33a0      	adds	r3, #160	; 0xa0
 80096b0:	607b      	str	r3, [r7, #4]
    return err;
 80096b2:	687b      	ldr	r3, [r7, #4]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	ffffb9b0 	.word	0xffffb9b0

080096c4 <wrap_36000>:

static int32_t wrap_36000(int32_t deg)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
    if (deg > 36000)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80096d2:	4293      	cmp	r3, r2
 80096d4:	dd04      	ble.n	80096e0 <wrap_36000+0x1c>
        deg -= 36000;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 80096dc:	3ba0      	subs	r3, #160	; 0xa0
 80096de:	607b      	str	r3, [r7, #4]
    if (deg < 0)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	da04      	bge.n	80096f0 <wrap_36000+0x2c>
        deg += 36000;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80096ec:	33a0      	adds	r3, #160	; 0xa0
 80096ee:	607b      	str	r3, [r7, #4]
    return deg;
 80096f0:	687b      	ldr	r3, [r7, #4]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
	...

08009700 <imuInit>:
float anglerad[2] = { 0.0f, 0.0f };    // absolute angle inclination in radians

static void getEstimatedAttitude(void);

void imuInit(void)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	ed2d 8b02 	vpush	{d8}
 8009706:	af00      	add	r7, sp, #0
    smallAngle = lrintf(sensor_set.acc.acc_1G * cosf(RAD * cfg.small_angle));
 8009708:	4b45      	ldr	r3, [pc, #276]	; (8009820 <imuInit+0x120>)
 800970a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800970e:	ee07 3a90 	vmov	s15, r3
 8009712:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009716:	4b43      	ldr	r3, [pc, #268]	; (8009824 <imuInit+0x124>)
 8009718:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800971c:	4618      	mov	r0, r3
 800971e:	f7f6 feb5 	bl	800048c <__aeabi_i2d>
 8009722:	a339      	add	r3, pc, #228	; (adr r3, 8009808 <imuInit+0x108>)
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	f7f6 ff1a 	bl	8000560 <__aeabi_dmul>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	4610      	mov	r0, r2
 8009732:	4619      	mov	r1, r3
 8009734:	f7f7 f9f6 	bl	8000b24 <__aeabi_d2f>
 8009738:	4603      	mov	r3, r0
 800973a:	ee00 3a10 	vmov	s0, r3
 800973e:	f019 fc8b 	bl	8023058 <cosf>
 8009742:	eef0 7a40 	vmov.f32	s15, s0
 8009746:	ee68 7a27 	vmul.f32	s15, s16, s15
 800974a:	eeb0 0a67 	vmov.f32	s0, s15
 800974e:	f019 fcc7 	bl	80230e0 <lrintf>
 8009752:	4603      	mov	r3, r0
 8009754:	b21a      	sxth	r2, r3
 8009756:	4b34      	ldr	r3, [pc, #208]	; (8009828 <imuInit+0x128>)
 8009758:	801a      	strh	r2, [r3, #0]
    accVelScale = 9.80665f / sensor_set.acc.acc_1G / 10000.0f;
 800975a:	4b31      	ldr	r3, [pc, #196]	; (8009820 <imuInit+0x120>)
 800975c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009760:	ee07 3a90 	vmov	s15, r3
 8009764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009768:	eddf 6a30 	vldr	s13, [pc, #192]	; 800982c <imuInit+0x12c>
 800976c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009770:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8009830 <imuInit+0x130>
 8009774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009778:	4b2e      	ldr	r3, [pc, #184]	; (8009834 <imuInit+0x134>)
 800977a:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = (1800.0f / M_PI) * (900.0f / cfg.throttle_correction_angle);
 800977e:	4b29      	ldr	r3, [pc, #164]	; (8009824 <imuInit+0x124>)
 8009780:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8009784:	ee07 3a90 	vmov	s15, r3
 8009788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800978c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009838 <imuInit+0x138>
 8009790:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009794:	ee16 0a90 	vmov	r0, s13
 8009798:	f7f6 fe8a 	bl	80004b0 <__aeabi_f2d>
 800979c:	a31c      	add	r3, pc, #112	; (adr r3, 8009810 <imuInit+0x110>)
 800979e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a2:	f7f6 fedd 	bl	8000560 <__aeabi_dmul>
 80097a6:	4602      	mov	r2, r0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4610      	mov	r0, r2
 80097ac:	4619      	mov	r1, r3
 80097ae:	f7f7 f9b9 	bl	8000b24 <__aeabi_d2f>
 80097b2:	4603      	mov	r3, r0
 80097b4:	4a21      	ldr	r2, [pc, #132]	; (800983c <imuInit+0x13c>)
 80097b6:	6013      	str	r3, [r2, #0]

    fc_acc = 0.5f / (M_PI * cfg.accz_lpf_cutoff); // calculate RC time constant used in the accZ lpf
 80097b8:	4b1a      	ldr	r3, [pc, #104]	; (8009824 <imuInit+0x124>)
 80097ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097bc:	4618      	mov	r0, r3
 80097be:	f7f6 fe77 	bl	80004b0 <__aeabi_f2d>
 80097c2:	a315      	add	r3, pc, #84	; (adr r3, 8009818 <imuInit+0x118>)
 80097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c8:	f7f6 feca 	bl	8000560 <__aeabi_dmul>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	f04f 0000 	mov.w	r0, #0
 80097d4:	491a      	ldr	r1, [pc, #104]	; (8009840 <imuInit+0x140>)
 80097d6:	f7f6 ffed 	bl	80007b4 <__aeabi_ddiv>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	4610      	mov	r0, r2
 80097e0:	4619      	mov	r1, r3
 80097e2:	f7f7 f99f 	bl	8000b24 <__aeabi_d2f>
 80097e6:	4603      	mov	r3, r0
 80097e8:	4a16      	ldr	r2, [pc, #88]	; (8009844 <imuInit+0x144>)
 80097ea:	6013      	str	r3, [r2, #0]

#ifdef MAG
    // if mag sensor is enabled, use it
    if (sensors(SENSOR_MAG))
 80097ec:	2008      	movs	r0, #8
 80097ee:	f7fd fa83 	bl	8006cf8 <sensors>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d001      	beq.n	80097fc <imuInit+0xfc>
        Mag_init();
 80097f8:	f005 faca 	bl	800ed90 <Mag_init>
#endif
}
 80097fc:	bf00      	nop
 80097fe:	46bd      	mov	sp, r7
 8009800:	ecbd 8b02 	vpop	{d8}
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	a2529d39 	.word	0xa2529d39
 800980c:	3f91df46 	.word	0x3f91df46
 8009810:	907e593b 	.word	0x907e593b
 8009814:	4081e7a9 	.word	0x4081e7a9
 8009818:	54442d18 	.word	0x54442d18
 800981c:	400921fb 	.word	0x400921fb
 8009820:	2000005c 	.word	0x2000005c
 8009824:	20000e54 	.word	0x20000e54
 8009828:	20001448 	.word	0x20001448
 800982c:	411ce80a 	.word	0x411ce80a
 8009830:	461c4000 	.word	0x461c4000
 8009834:	20001480 	.word	0x20001480
 8009838:	44610000 	.word	0x44610000
 800983c:	20001484 	.word	0x20001484
 8009840:	3fe00000 	.word	0x3fe00000
 8009844:	20001488 	.word	0x20001488

08009848 <computeIMU>:

int computeIMU(int step)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
    static int16_t gyroYawSmooth = 0;

	switch (step) {
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b02      	cmp	r3, #2
 8009854:	d02f      	beq.n	80098b6 <computeIMU+0x6e>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2b02      	cmp	r3, #2
 800985a:	dc30      	bgt.n	80098be <computeIMU+0x76>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d003      	beq.n	800986a <computeIMU+0x22>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d01d      	beq.n	80098a4 <computeIMU+0x5c>
 8009868:	e029      	b.n	80098be <computeIMU+0x76>
	case 0:
		if (Gyro_getADC()) {
 800986a:	f005 fa7b 	bl	800ed64 <Gyro_getADC>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d015      	beq.n	80098a0 <computeIMU+0x58>
			if (sensors(SENSOR_ACC)) return 1;
 8009874:	2002      	movs	r0, #2
 8009876:	f7fd fa3f 	bl	8006cf8 <sensors>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d001      	beq.n	8009884 <computeIMU+0x3c>
 8009880:	2301      	movs	r3, #1
 8009882:	e05d      	b.n	8009940 <computeIMU+0xf8>

			accADC[X] = 0;
 8009884:	4b30      	ldr	r3, [pc, #192]	; (8009948 <computeIMU+0x100>)
 8009886:	f04f 0200 	mov.w	r2, #0
 800988a:	601a      	str	r2, [r3, #0]
			accADC[Y] = 0;
 800988c:	4b2e      	ldr	r3, [pc, #184]	; (8009948 <computeIMU+0x100>)
 800988e:	f04f 0200 	mov.w	r2, #0
 8009892:	605a      	str	r2, [r3, #4]
			accADC[Z] = 0;
 8009894:	4b2c      	ldr	r3, [pc, #176]	; (8009948 <computeIMU+0x100>)
 8009896:	f04f 0200 	mov.w	r2, #0
 800989a:	609a      	str	r2, [r3, #8]
			return 3;
 800989c:	2303      	movs	r3, #3
 800989e:	e04f      	b.n	8009940 <computeIMU+0xf8>
		}
		return step;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	e04d      	b.n	8009940 <computeIMU+0xf8>

	case 1:
		return ACC_getADC() ? 2 : step;
 80098a4:	f005 f826 	bl	800e8f4 <ACC_getADC>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <computeIMU+0x6a>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	e046      	b.n	8009940 <computeIMU+0xf8>
 80098b2:	2302      	movs	r3, #2
 80098b4:	e044      	b.n	8009940 <computeIMU+0xf8>

	case 2:
		getEstimatedAttitude();
 80098b6:	f000 fbbb 	bl	800a030 <getEstimatedAttitude>
		return 3;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e040      	b.n	8009940 <computeIMU+0xf8>
	}

    if (mcfg.mixerConfiguration == MULTITYPE_TRI) {
 80098be:	4b23      	ldr	r3, [pc, #140]	; (800994c <computeIMU+0x104>)
 80098c0:	795b      	ldrb	r3, [r3, #5]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d11d      	bne.n	8009902 <computeIMU+0xba>
        gyroData[YAW] = (gyroYawSmooth * 2 + gyroADC[YAW]) / 3;
 80098c6:	4b22      	ldr	r3, [pc, #136]	; (8009950 <computeIMU+0x108>)
 80098c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098cc:	005b      	lsls	r3, r3, #1
 80098ce:	ee07 3a90 	vmov	s15, r3
 80098d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098d6:	4b1f      	ldr	r3, [pc, #124]	; (8009954 <computeIMU+0x10c>)
 80098d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80098dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80098e0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80098e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80098e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098ec:	ee17 3a90 	vmov	r3, s15
 80098f0:	b21a      	sxth	r2, r3
 80098f2:	4b19      	ldr	r3, [pc, #100]	; (8009958 <computeIMU+0x110>)
 80098f4:	809a      	strh	r2, [r3, #4]
        gyroYawSmooth = gyroData[YAW];
 80098f6:	4b18      	ldr	r3, [pc, #96]	; (8009958 <computeIMU+0x110>)
 80098f8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80098fc:	4b14      	ldr	r3, [pc, #80]	; (8009950 <computeIMU+0x108>)
 80098fe:	801a      	strh	r2, [r3, #0]
 8009900:	e009      	b.n	8009916 <computeIMU+0xce>
    } else {
        gyroData[YAW] = gyroADC[YAW];
 8009902:	4b14      	ldr	r3, [pc, #80]	; (8009954 <computeIMU+0x10c>)
 8009904:	edd3 7a02 	vldr	s15, [r3, #8]
 8009908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800990c:	ee17 3a90 	vmov	r3, s15
 8009910:	b21a      	sxth	r2, r3
 8009912:	4b11      	ldr	r3, [pc, #68]	; (8009958 <computeIMU+0x110>)
 8009914:	809a      	strh	r2, [r3, #4]
    }
    gyroData[ROLL] = gyroADC[ROLL];
 8009916:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <computeIMU+0x10c>)
 8009918:	edd3 7a00 	vldr	s15, [r3]
 800991c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009920:	ee17 3a90 	vmov	r3, s15
 8009924:	b21a      	sxth	r2, r3
 8009926:	4b0c      	ldr	r3, [pc, #48]	; (8009958 <computeIMU+0x110>)
 8009928:	801a      	strh	r2, [r3, #0]
    gyroData[PITCH] = gyroADC[PITCH];
 800992a:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <computeIMU+0x10c>)
 800992c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009934:	ee17 3a90 	vmov	r3, s15
 8009938:	b21a      	sxth	r2, r3
 800993a:	4b07      	ldr	r3, [pc, #28]	; (8009958 <computeIMU+0x110>)
 800993c:	805a      	strh	r2, [r3, #2]
	return 4;
 800993e:	2304      	movs	r3, #4
}
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	20001410 	.word	0x20001410
 800994c:	200008e8 	.word	0x200008e8
 8009950:	200014b4 	.word	0x200014b4
 8009954:	20001404 	.word	0x20001404
 8009958:	2000148c 	.word	0x2000148c

0800995c <normalizeV>:

t_fp_vector EstG;

// Normalize a vector
void normalizeV(struct fp_vector *src, struct fp_vector *dest)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
    float length;

    length = sqrtf(src->X * src->X + src->Y * src->Y + src->Z * src->Z);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	ed93 7a00 	vldr	s14, [r3]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	edd3 7a00 	vldr	s15, [r3]
 8009972:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	edd3 6a01 	vldr	s13, [r3, #4]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	edd3 7a01 	vldr	s15, [r3, #4]
 8009982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	edd3 6a02 	vldr	s13, [r3, #8]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	edd3 7a02 	vldr	s15, [r3, #8]
 8009996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800999a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800999e:	eeb0 0a67 	vmov.f32	s0, s15
 80099a2:	f019 fca9 	bl	80232f8 <sqrtf>
 80099a6:	ed87 0a03 	vstr	s0, [r7, #12]
    if (length != 0) {
 80099aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80099ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80099b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b6:	d01d      	beq.n	80099f4 <normalizeV+0x98>
        dest->X = src->X / length;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	edd3 6a00 	vldr	s13, [r3]
 80099be:	ed97 7a03 	vldr	s14, [r7, #12]
 80099c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	edc3 7a00 	vstr	s15, [r3]
        dest->Y = src->Y / length;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80099d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80099d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	edc3 7a01 	vstr	s15, [r3, #4]
        dest->Z = src->Z / length;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	edd3 6a02 	vldr	s13, [r3, #8]
 80099e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80099ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 80099f4:	bf00      	nop
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <rotateV>:

// Rotate Estimated vector(s) with small angle approximation, according to the gyro data
void rotateV(struct fp_vector *v, float *delta)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b098      	sub	sp, #96	; 0x60
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
    struct fp_vector v_tmp = *v;
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    // This does a  "proper" matrix rotation using gyro deltas without small-angle approximation
    float mat[3][3];
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cosf(delta[ROLL]);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	edd3 7a00 	vldr	s15, [r3]
 8009a18:	eeb0 0a67 	vmov.f32	s0, s15
 8009a1c:	f019 fb1c 	bl	8023058 <cosf>
 8009a20:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
    sinx = sinf(delta[ROLL]);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	edd3 7a00 	vldr	s15, [r3]
 8009a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8009a2e:	f019 fb97 	bl	8023160 <sinf>
 8009a32:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    cosy = cosf(delta[PITCH]);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	edd3 7a00 	vldr	s15, [r3]
 8009a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a42:	f019 fb09 	bl	8023058 <cosf>
 8009a46:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
    siny = sinf(delta[PITCH]);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	edd3 7a00 	vldr	s15, [r3]
 8009a52:	eeb0 0a67 	vmov.f32	s0, s15
 8009a56:	f019 fb83 	bl	8023160 <sinf>
 8009a5a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
    cosz = cosf(delta[YAW]);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	3308      	adds	r3, #8
 8009a62:	edd3 7a00 	vldr	s15, [r3]
 8009a66:	eeb0 0a67 	vmov.f32	s0, s15
 8009a6a:	f019 faf5 	bl	8023058 <cosf>
 8009a6e:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    sinz = sinf(delta[YAW]);
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	3308      	adds	r3, #8
 8009a76:	edd3 7a00 	vldr	s15, [r3]
 8009a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8009a7e:	f019 fb6f 	bl	8023160 <sinf>
 8009a82:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

    coszcosx = cosz * cosx;
 8009a86:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a8a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a92:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    sinzcosx = sinz * cosx;
 8009a96:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009a9a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    coszsinx = sinx * cosz;
 8009aa6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009aaa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sinzsinx = sinx * sinz;
 8009ab6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009aba:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    mat[0][0] = cosz * cosy;
 8009ac6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009aca:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad2:	edc7 7a02 	vstr	s15, [r7, #8]
    mat[0][1] = -cosy * sinz;
 8009ad6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009ada:	eeb1 7a67 	vneg.f32	s14, s15
 8009ade:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae6:	edc7 7a03 	vstr	s15, [r7, #12]
    mat[0][2] = siny;
 8009aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aec:	613b      	str	r3, [r7, #16]
    mat[1][0] = sinzcosx + (coszsinx * siny);
 8009aee:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009af2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009af6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009afa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b02:	edc7 7a05 	vstr	s15, [r7, #20]
    mat[1][1] = coszcosx - (sinzsinx * siny);
 8009b06:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009b0a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b12:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b1a:	edc7 7a06 	vstr	s15, [r7, #24]
    mat[1][2] = -sinx * cosy;
 8009b1e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009b22:	eeb1 7a67 	vneg.f32	s14, s15
 8009b26:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2e:	edc7 7a07 	vstr	s15, [r7, #28]
    mat[2][0] = (sinzsinx) - (coszcosx * siny);
 8009b32:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009b36:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b46:	edc7 7a08 	vstr	s15, [r7, #32]
    mat[2][1] = (coszsinx) + (sinzcosx * siny);
 8009b4a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009b4e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009b52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b56:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b5e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    mat[2][2] = cosy * cosx;
 8009b62:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009b66:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    v->X = v_tmp.X * mat[0][0] + v_tmp.Y * mat[1][0] + v_tmp.Z * mat[2][0];
 8009b72:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009b76:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b7e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009b82:	edd7 7a05 	vldr	s15, [r7, #20]
 8009b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b8e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009b92:	edd7 7a08 	vldr	s15, [r7, #32]
 8009b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	edc3 7a00 	vstr	s15, [r3]
    v->Y = v_tmp.X * mat[0][1] + v_tmp.Y * mat[1][1] + v_tmp.Z * mat[2][1];
 8009ba4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009ba8:	edd7 7a03 	vldr	s15, [r7, #12]
 8009bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bb0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009bb4:	edd7 7a06 	vldr	s15, [r7, #24]
 8009bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bc0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009bc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	edc3 7a01 	vstr	s15, [r3, #4]
    v->Z = v_tmp.X * mat[0][2] + v_tmp.Y * mat[1][2] + v_tmp.Z * mat[2][2];
 8009bd6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009bda:	edd7 7a04 	vldr	s15, [r7, #16]
 8009bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009be2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009be6:	edd7 7a07 	vldr	s15, [r7, #28]
 8009bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bf2:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009bf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009bfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8009c08:	bf00      	nop
 8009c0a:	3760      	adds	r7, #96	; 0x60
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <applyDeadband>:

int32_t applyDeadband(int32_t value, int32_t deadband)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
    if (abs(value) < deadband) {
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	bfb8      	it	lt
 8009c20:	425b      	neglt	r3, r3
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	dd02      	ble.n	8009c2e <applyDeadband+0x1e>
        value = 0;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	607b      	str	r3, [r7, #4]
 8009c2c:	e00e      	b.n	8009c4c <applyDeadband+0x3c>
    } else if (value > 0) {
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	dd04      	ble.n	8009c3e <applyDeadband+0x2e>
        value -= deadband;
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	607b      	str	r3, [r7, #4]
 8009c3c:	e006      	b.n	8009c4c <applyDeadband+0x3c>
    } else if (value < 0) {
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	da03      	bge.n	8009c4c <applyDeadband+0x3c>
        value += deadband;
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	4413      	add	r3, r2
 8009c4a:	607b      	str	r3, [r7, #4]
    }
    return value;
 8009c4c:	687b      	ldr	r3, [r7, #4]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	0000      	movs	r0, r0
 8009c5c:	0000      	movs	r0, r0
	...

08009c60 <acc_calc>:

// rotate acc into Earth frame and calculate acceleration in it
void acc_calc(uint32_t deltaT)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b08a      	sub	sp, #40	; 0x28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
    static int32_t accZoffset = 0;
    static float accz_smooth = 0;
    float dT = 0;
 8009c68:	f04f 0300 	mov.w	r3, #0
 8009c6c:	627b      	str	r3, [r7, #36]	; 0x24
    float rpy[3];
    t_fp_vector accel_ned;

    // deltaT is measured in us ticks
    dT = (float)deltaT * 1e-6f;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	ee07 3a90 	vmov	s15, r3
 8009c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c78:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8009e58 <acc_calc+0x1f8>
 8009c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // the accel values have to be rotated into the earth frame
    rpy[0] = -(float)anglerad[ROLL];
 8009c84:	4b75      	ldr	r3, [pc, #468]	; (8009e5c <acc_calc+0x1fc>)
 8009c86:	edd3 7a00 	vldr	s15, [r3]
 8009c8a:	eef1 7a67 	vneg.f32	s15, s15
 8009c8e:	edc7 7a06 	vstr	s15, [r7, #24]
    rpy[1] = -(float)anglerad[PITCH];
 8009c92:	4b72      	ldr	r3, [pc, #456]	; (8009e5c <acc_calc+0x1fc>)
 8009c94:	edd3 7a01 	vldr	s15, [r3, #4]
 8009c98:	eef1 7a67 	vneg.f32	s15, s15
 8009c9c:	edc7 7a07 	vstr	s15, [r7, #28]
    rpy[2] = -(float)heading * RAD;
 8009ca0:	4b6f      	ldr	r3, [pc, #444]	; (8009e60 <acc_calc+0x200>)
 8009ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ca6:	ee07 3a90 	vmov	s15, r3
 8009caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cae:	eef1 7a67 	vneg.f32	s15, s15
 8009cb2:	ee17 3a90 	vmov	r3, s15
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7f6 fbfa 	bl	80004b0 <__aeabi_f2d>
 8009cbc:	a364      	add	r3, pc, #400	; (adr r3, 8009e50 <acc_calc+0x1f0>)
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	f7f6 fc4d 	bl	8000560 <__aeabi_dmul>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4610      	mov	r0, r2
 8009ccc:	4619      	mov	r1, r3
 8009cce:	f7f6 ff29 	bl	8000b24 <__aeabi_d2f>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	623b      	str	r3, [r7, #32]

    accel_ned.V.X = accSmooth[0];
 8009cd6:	4b63      	ldr	r3, [pc, #396]	; (8009e64 <acc_calc+0x204>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	60fb      	str	r3, [r7, #12]
    accel_ned.V.Y = accSmooth[1];
 8009cdc:	4b61      	ldr	r3, [pc, #388]	; (8009e64 <acc_calc+0x204>)
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	613b      	str	r3, [r7, #16]
    accel_ned.V.Z = accSmooth[2];
 8009ce2:	4b60      	ldr	r3, [pc, #384]	; (8009e64 <acc_calc+0x204>)
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	617b      	str	r3, [r7, #20]

    rotateV(&accel_ned.V, rpy);
 8009ce8:	f107 0218 	add.w	r2, r7, #24
 8009cec:	f107 030c 	add.w	r3, r7, #12
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7ff fe82 	bl	80099fc <rotateV>

    if (cfg.acc_unarmedcal == 1) {
 8009cf8:	4b5b      	ldr	r3, [pc, #364]	; (8009e68 <acc_calc+0x208>)
 8009cfa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d131      	bne.n	8009d66 <acc_calc+0x106>
        if (!f.ARMED) {
 8009d02:	4b5a      	ldr	r3, [pc, #360]	; (8009e6c <acc_calc+0x20c>)
 8009d04:	785b      	ldrb	r3, [r3, #1]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d11c      	bne.n	8009d44 <acc_calc+0xe4>
            accZoffset -= accZoffset / 64;
 8009d0a:	4b59      	ldr	r3, [pc, #356]	; (8009e70 <acc_calc+0x210>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	da00      	bge.n	8009d14 <acc_calc+0xb4>
 8009d12:	333f      	adds	r3, #63	; 0x3f
 8009d14:	119b      	asrs	r3, r3, #6
 8009d16:	425b      	negs	r3, r3
 8009d18:	461a      	mov	r2, r3
 8009d1a:	4b55      	ldr	r3, [pc, #340]	; (8009e70 <acc_calc+0x210>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4413      	add	r3, r2
 8009d20:	4a53      	ldr	r2, [pc, #332]	; (8009e70 <acc_calc+0x210>)
 8009d22:	6013      	str	r3, [r2, #0]
            accZoffset += accel_ned.V.Z;
 8009d24:	4b52      	ldr	r3, [pc, #328]	; (8009e70 <acc_calc+0x210>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	ee07 3a90 	vmov	s15, r3
 8009d2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d30:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d3c:	ee17 2a90 	vmov	r2, s15
 8009d40:	4b4b      	ldr	r3, [pc, #300]	; (8009e70 <acc_calc+0x210>)
 8009d42:	601a      	str	r2, [r3, #0]
        }
        accel_ned.V.Z -= accZoffset / 64;  // compensate for gravitation on z-axis
 8009d44:	ed97 7a05 	vldr	s14, [r7, #20]
 8009d48:	4b49      	ldr	r3, [pc, #292]	; (8009e70 <acc_calc+0x210>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	da00      	bge.n	8009d52 <acc_calc+0xf2>
 8009d50:	333f      	adds	r3, #63	; 0x3f
 8009d52:	119b      	asrs	r3, r3, #6
 8009d54:	ee07 3a90 	vmov	s15, r3
 8009d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d60:	edc7 7a05 	vstr	s15, [r7, #20]
 8009d64:	e00c      	b.n	8009d80 <acc_calc+0x120>
    } else
        accel_ned.V.Z -= sensor_set.acc.acc_1G;
 8009d66:	ed97 7a05 	vldr	s14, [r7, #20]
 8009d6a:	4b42      	ldr	r3, [pc, #264]	; (8009e74 <acc_calc+0x214>)
 8009d6c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009d70:	ee07 3a90 	vmov	s15, r3
 8009d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d7c:	edc7 7a05 	vstr	s15, [r7, #20]

    accz_smooth = accz_smooth + (dT / (fc_acc + dT)) * (accel_ned.V.Z - accz_smooth); // low pass filter
 8009d80:	4b3d      	ldr	r3, [pc, #244]	; (8009e78 <acc_calc+0x218>)
 8009d82:	ed93 7a00 	vldr	s14, [r3]
 8009d86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d8e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d96:	edd7 6a05 	vldr	s13, [r7, #20]
 8009d9a:	4b38      	ldr	r3, [pc, #224]	; (8009e7c <acc_calc+0x21c>)
 8009d9c:	edd3 7a00 	vldr	s15, [r3]
 8009da0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009da8:	4b34      	ldr	r3, [pc, #208]	; (8009e7c <acc_calc+0x21c>)
 8009daa:	edd3 7a00 	vldr	s15, [r3]
 8009dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009db2:	4b32      	ldr	r3, [pc, #200]	; (8009e7c <acc_calc+0x21c>)
 8009db4:	edc3 7a00 	vstr	s15, [r3]

    // apply Deadband to reduce integration drift and vibration influence and
    // sum up Values for later integration to get velocity and distance
    accSum[X] += applyDeadband(lrintf(accel_ned.V.X), cfg.accxy_deadband);
 8009db8:	edd7 7a03 	vldr	s15, [r7, #12]
 8009dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8009dc0:	f019 f98e 	bl	80230e0 <lrintf>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	4a28      	ldr	r2, [pc, #160]	; (8009e68 <acc_calc+0x208>)
 8009dc8:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009dcc:	4611      	mov	r1, r2
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff ff1e 	bl	8009c10 <applyDeadband>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	4b2a      	ldr	r3, [pc, #168]	; (8009e80 <acc_calc+0x220>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4413      	add	r3, r2
 8009ddc:	4a28      	ldr	r2, [pc, #160]	; (8009e80 <acc_calc+0x220>)
 8009dde:	6013      	str	r3, [r2, #0]
    accSum[Y] += applyDeadband(lrintf(accel_ned.V.Y), cfg.accxy_deadband);
 8009de0:	edd7 7a04 	vldr	s15, [r7, #16]
 8009de4:	eeb0 0a67 	vmov.f32	s0, s15
 8009de8:	f019 f97a 	bl	80230e0 <lrintf>
 8009dec:	4603      	mov	r3, r0
 8009dee:	4a1e      	ldr	r2, [pc, #120]	; (8009e68 <acc_calc+0x208>)
 8009df0:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009df4:	4611      	mov	r1, r2
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7ff ff0a 	bl	8009c10 <applyDeadband>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	4b20      	ldr	r3, [pc, #128]	; (8009e80 <acc_calc+0x220>)
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	4413      	add	r3, r2
 8009e04:	4a1e      	ldr	r2, [pc, #120]	; (8009e80 <acc_calc+0x220>)
 8009e06:	6053      	str	r3, [r2, #4]
    accSum[Z] += applyDeadband(lrintf(accz_smooth), cfg.accz_deadband);
 8009e08:	4b1c      	ldr	r3, [pc, #112]	; (8009e7c <acc_calc+0x21c>)
 8009e0a:	edd3 7a00 	vldr	s15, [r3]
 8009e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8009e12:	f019 f965 	bl	80230e0 <lrintf>
 8009e16:	4603      	mov	r3, r0
 8009e18:	4a13      	ldr	r2, [pc, #76]	; (8009e68 <acc_calc+0x208>)
 8009e1a:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8009e1e:	4611      	mov	r1, r2
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7ff fef5 	bl	8009c10 <applyDeadband>
 8009e26:	4602      	mov	r2, r0
 8009e28:	4b15      	ldr	r3, [pc, #84]	; (8009e80 <acc_calc+0x220>)
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	4a14      	ldr	r2, [pc, #80]	; (8009e80 <acc_calc+0x220>)
 8009e30:	6093      	str	r3, [r2, #8]

    accTimeSum += deltaT;
 8009e32:	4b14      	ldr	r3, [pc, #80]	; (8009e84 <acc_calc+0x224>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4413      	add	r3, r2
 8009e3a:	4a12      	ldr	r2, [pc, #72]	; (8009e84 <acc_calc+0x224>)
 8009e3c:	6013      	str	r3, [r2, #0]
    accSumCount++;
 8009e3e:	4b12      	ldr	r3, [pc, #72]	; (8009e88 <acc_calc+0x228>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3301      	adds	r3, #1
 8009e44:	4a10      	ldr	r2, [pc, #64]	; (8009e88 <acc_calc+0x228>)
 8009e46:	6013      	str	r3, [r2, #0]
}
 8009e48:	bf00      	nop
 8009e4a:	3728      	adds	r7, #40	; 0x28
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	a2529d39 	.word	0xa2529d39
 8009e54:	3f91df46 	.word	0x3f91df46
 8009e58:	358637bd 	.word	0x358637bd
 8009e5c:	200014a0 	.word	0x200014a0
 8009e60:	200019c0 	.word	0x200019c0
 8009e64:	2000141c 	.word	0x2000141c
 8009e68:	20000e54 	.word	0x20000e54
 8009e6c:	200016f4 	.word	0x200016f4
 8009e70:	200014b8 	.word	0x200014b8
 8009e74:	2000005c 	.word	0x2000005c
 8009e78:	20001488 	.word	0x20001488
 8009e7c:	200014bc 	.word	0x200014bc
 8009e80:	20001434 	.word	0x20001434
 8009e84:	20001440 	.word	0x20001440
 8009e88:	20001444 	.word	0x20001444

08009e8c <accSum_reset>:

void accSum_reset(void)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	af00      	add	r7, sp, #0
    accSum[0] = 0;
 8009e90:	4b09      	ldr	r3, [pc, #36]	; (8009eb8 <accSum_reset+0x2c>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	601a      	str	r2, [r3, #0]
    accSum[1] = 0;
 8009e96:	4b08      	ldr	r3, [pc, #32]	; (8009eb8 <accSum_reset+0x2c>)
 8009e98:	2200      	movs	r2, #0
 8009e9a:	605a      	str	r2, [r3, #4]
    accSum[2] = 0;
 8009e9c:	4b06      	ldr	r3, [pc, #24]	; (8009eb8 <accSum_reset+0x2c>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	609a      	str	r2, [r3, #8]
    accSumCount = 0;
 8009ea2:	4b06      	ldr	r3, [pc, #24]	; (8009ebc <accSum_reset+0x30>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	601a      	str	r2, [r3, #0]
    accTimeSum = 0;
 8009ea8:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <accSum_reset+0x34>)
 8009eaa:	2200      	movs	r2, #0
 8009eac:	601a      	str	r2, [r3, #0]
}
 8009eae:	bf00      	nop
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr
 8009eb8:	20001434 	.word	0x20001434
 8009ebc:	20001444 	.word	0x20001444
 8009ec0:	20001440 	.word	0x20001440
 8009ec4:	00000000 	.word	0x00000000

08009ec8 <calculateHeading>:

// baseflight calculation by Luggi09 originates from arducopter
static int16_t calculateHeading(t_fp_vector *vec)
{
 8009ec8:	b5b0      	push	{r4, r5, r7, lr}
 8009eca:	b08a      	sub	sp, #40	; 0x28
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
    int16_t head;

    float cosineRoll = cosf(anglerad[ROLL]);
 8009ed0:	4b53      	ldr	r3, [pc, #332]	; (800a020 <calculateHeading+0x158>)
 8009ed2:	edd3 7a00 	vldr	s15, [r3]
 8009ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8009eda:	f019 f8bd 	bl	8023058 <cosf>
 8009ede:	ed87 0a08 	vstr	s0, [r7, #32]
    float sineRoll = sinf(anglerad[ROLL]);
 8009ee2:	4b4f      	ldr	r3, [pc, #316]	; (800a020 <calculateHeading+0x158>)
 8009ee4:	edd3 7a00 	vldr	s15, [r3]
 8009ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8009eec:	f019 f938 	bl	8023160 <sinf>
 8009ef0:	ed87 0a07 	vstr	s0, [r7, #28]
    float cosinePitch = cosf(anglerad[PITCH]);
 8009ef4:	4b4a      	ldr	r3, [pc, #296]	; (800a020 <calculateHeading+0x158>)
 8009ef6:	edd3 7a01 	vldr	s15, [r3, #4]
 8009efa:	eeb0 0a67 	vmov.f32	s0, s15
 8009efe:	f019 f8ab 	bl	8023058 <cosf>
 8009f02:	ed87 0a06 	vstr	s0, [r7, #24]
    float sinePitch = sinf(anglerad[PITCH]);
 8009f06:	4b46      	ldr	r3, [pc, #280]	; (800a020 <calculateHeading+0x158>)
 8009f08:	edd3 7a01 	vldr	s15, [r3, #4]
 8009f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8009f10:	f019 f926 	bl	8023160 <sinf>
 8009f14:	ed87 0a05 	vstr	s0, [r7, #20]
    float Xh = vec->A[X] * cosinePitch + vec->A[Y] * sineRoll * sinePitch + vec->A[Z] * sinePitch * cosineRoll;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	ed93 7a00 	vldr	s14, [r3]
 8009f1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009f22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	edd3 6a01 	vldr	s13, [r3, #4]
 8009f2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009f34:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	edd3 6a02 	vldr	s13, [r3, #8]
 8009f46:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009f4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f5a:	edc7 7a04 	vstr	s15, [r7, #16]
    float Yh = vec->A[Y] * cosineRoll - vec->A[Z] * sineRoll;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	ed93 7a01 	vldr	s14, [r3, #4]
 8009f64:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	edd3 6a02 	vldr	s13, [r3, #8]
 8009f72:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f7e:	edc7 7a03 	vstr	s15, [r7, #12]
    float hd = (atan2f(Yh, Xh) * 1800.0f / M_PI + sensor_set.mag.declination) / 10.0f;
 8009f82:	edd7 0a04 	vldr	s1, [r7, #16]
 8009f86:	ed97 0a03 	vldr	s0, [r7, #12]
 8009f8a:	f019 f95b 	bl	8023244 <atan2f>
 8009f8e:	eef0 7a40 	vmov.f32	s15, s0
 8009f92:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800a024 <calculateHeading+0x15c>
 8009f96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f9a:	ee17 0a90 	vmov	r0, s15
 8009f9e:	f7f6 fa87 	bl	80004b0 <__aeabi_f2d>
 8009fa2:	a31d      	add	r3, pc, #116	; (adr r3, 800a018 <calculateHeading+0x150>)
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	f7f6 fc04 	bl	80007b4 <__aeabi_ddiv>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4614      	mov	r4, r2
 8009fb2:	461d      	mov	r5, r3
 8009fb4:	4b1c      	ldr	r3, [pc, #112]	; (800a028 <calculateHeading+0x160>)
 8009fb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7f6 fa78 	bl	80004b0 <__aeabi_f2d>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	f7f6 f914 	bl	80001f4 <__adddf3>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	f04f 0200 	mov.w	r2, #0
 8009fd8:	4b14      	ldr	r3, [pc, #80]	; (800a02c <calculateHeading+0x164>)
 8009fda:	f7f6 fbeb 	bl	80007b4 <__aeabi_ddiv>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	f7f6 fd9d 	bl	8000b24 <__aeabi_d2f>
 8009fea:	4603      	mov	r3, r0
 8009fec:	60bb      	str	r3, [r7, #8]
    head = lrintf(hd);
 8009fee:	ed97 0a02 	vldr	s0, [r7, #8]
 8009ff2:	f019 f875 	bl	80230e0 <lrintf>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (head < 0)
 8009ffa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	da04      	bge.n	800a00c <calculateHeading+0x144>
        head += 360;
 800a002:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a004:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a008:	b29b      	uxth	r3, r3
 800a00a:	84fb      	strh	r3, [r7, #38]	; 0x26

    return head;
 800a00c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800a010:	4618      	mov	r0, r3
 800a012:	3728      	adds	r7, #40	; 0x28
 800a014:	46bd      	mov	sp, r7
 800a016:	bdb0      	pop	{r4, r5, r7, pc}
 800a018:	54442d18 	.word	0x54442d18
 800a01c:	400921fb 	.word	0x400921fb
 800a020:	200014a0 	.word	0x200014a0
 800a024:	44e10000 	.word	0x44e10000
 800a028:	2000005c 	.word	0x2000005c
 800a02c:	40240000 	.word	0x40240000

0800a030 <getEstimatedAttitude>:

static void getEstimatedAttitude(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	ed2d 8b02 	vpush	{d8}
 800a036:	b08a      	sub	sp, #40	; 0x28
 800a038:	af00      	add	r7, sp, #0
    int32_t axis;
    int32_t accMag = 0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	623b      	str	r3, [r7, #32]
    static t_fp_vector EstM;
    static t_fp_vector EstN = { .A = { 1.0f, 0.0f, 0.0f } };
    static float accLPF[3];
    static uint32_t previousT = 0UL;
    uint32_t currentT = (*pif_act_timer1us)();
 800a03e:	4bc2      	ldr	r3, [pc, #776]	; (800a348 <getEstimatedAttitude+0x318>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4798      	blx	r3
 800a044:	61b8      	str	r0, [r7, #24]
    uint32_t deltaT;
    float scale, deltaGyroAngle[3];
    deltaT = currentT - previousT;
 800a046:	4bc1      	ldr	r3, [pc, #772]	; (800a34c <getEstimatedAttitude+0x31c>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	69ba      	ldr	r2, [r7, #24]
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	617b      	str	r3, [r7, #20]
    scale = deltaT * sensor_set.gyro.scale;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	ee07 3a90 	vmov	s15, r3
 800a056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a05a:	4bbd      	ldr	r3, [pc, #756]	; (800a350 <getEstimatedAttitude+0x320>)
 800a05c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800a060:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a064:	edc7 7a04 	vstr	s15, [r7, #16]
    previousT = currentT;
 800a068:	4ab8      	ldr	r2, [pc, #736]	; (800a34c <getEstimatedAttitude+0x31c>)
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	6013      	str	r3, [r2, #0]

    // Initialization
    for (axis = 0; axis < 3; axis++) {
 800a06e:	2300      	movs	r3, #0
 800a070:	627b      	str	r3, [r7, #36]	; 0x24
 800a072:	e07d      	b.n	800a170 <getEstimatedAttitude+0x140>
        deltaGyroAngle[axis] = gyroADC[axis] * scale;
 800a074:	4ab7      	ldr	r2, [pc, #732]	; (800a354 <getEstimatedAttitude+0x324>)
 800a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	ed93 7a00 	vldr	s14, [r3]
 800a080:	edd7 7a04 	vldr	s15, [r7, #16]
 800a084:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	3328      	adds	r3, #40	; 0x28
 800a08e:	443b      	add	r3, r7
 800a090:	3b28      	subs	r3, #40	; 0x28
 800a092:	edc3 7a00 	vstr	s15, [r3]
        if (cfg.acc_lpf_factor > 0) {
 800a096:	4bb0      	ldr	r3, [pc, #704]	; (800a358 <getEstimatedAttitude+0x328>)
 800a098:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d03c      	beq.n	800a11a <getEstimatedAttitude+0xea>
            accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / cfg.acc_lpf_factor)) + accADC[axis] * (1.0f / cfg.acc_lpf_factor);
 800a0a0:	4aae      	ldr	r2, [pc, #696]	; (800a35c <getEstimatedAttitude+0x32c>)
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	ed93 7a00 	vldr	s14, [r3]
 800a0ac:	4baa      	ldr	r3, [pc, #680]	; (800a358 <getEstimatedAttitude+0x328>)
 800a0ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a0b2:	ee07 3a90 	vmov	s15, r3
 800a0b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a0ba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a0be:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a0c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a0ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0ce:	4aa4      	ldr	r2, [pc, #656]	; (800a360 <getEstimatedAttitude+0x330>)
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	edd3 6a00 	vldr	s13, [r3]
 800a0da:	4b9f      	ldr	r3, [pc, #636]	; (800a358 <getEstimatedAttitude+0x328>)
 800a0dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a0e0:	ee07 3a90 	vmov	s15, r3
 800a0e4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a0e8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a0ec:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800a0f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0f8:	4a98      	ldr	r2, [pc, #608]	; (800a35c <getEstimatedAttitude+0x32c>)
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	edc3 7a00 	vstr	s15, [r3]
            accSmooth[axis] = accLPF[axis];
 800a104:	4a95      	ldr	r2, [pc, #596]	; (800a35c <getEstimatedAttitude+0x32c>)
 800a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	4995      	ldr	r1, [pc, #596]	; (800a364 <getEstimatedAttitude+0x334>)
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	440b      	add	r3, r1
 800a116:	601a      	str	r2, [r3, #0]
 800a118:	e009      	b.n	800a12e <getEstimatedAttitude+0xfe>
        } else {
            accSmooth[axis] = accADC[axis];
 800a11a:	4a91      	ldr	r2, [pc, #580]	; (800a360 <getEstimatedAttitude+0x330>)
 800a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4413      	add	r3, r2
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	498f      	ldr	r1, [pc, #572]	; (800a364 <getEstimatedAttitude+0x334>)
 800a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	440b      	add	r3, r1
 800a12c:	601a      	str	r2, [r3, #0]
        }
        accMag += (int32_t)accSmooth[axis] * accSmooth[axis];
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	ee07 3a90 	vmov	s15, r3
 800a134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a138:	4a8a      	ldr	r2, [pc, #552]	; (800a364 <getEstimatedAttitude+0x334>)
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	edd3 7a00 	vldr	s15, [r3]
 800a144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a148:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a14c:	4a85      	ldr	r2, [pc, #532]	; (800a364 <getEstimatedAttitude+0x334>)
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	edd3 7a00 	vldr	s15, [r3]
 800a158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a15c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a164:	ee17 3a90 	vmov	r3, s15
 800a168:	623b      	str	r3, [r7, #32]
    for (axis = 0; axis < 3; axis++) {
 800a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16c:	3301      	adds	r3, #1
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	2b02      	cmp	r3, #2
 800a174:	f77f af7e 	ble.w	800a074 <getEstimatedAttitude+0x44>
    }
    accMag = accMag * 100 / ((int32_t)sensor_set.acc.acc_1G * sensor_set.acc.acc_1G);
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	2264      	movs	r2, #100	; 0x64
 800a17c:	fb03 f202 	mul.w	r2, r3, r2
 800a180:	4b73      	ldr	r3, [pc, #460]	; (800a350 <getEstimatedAttitude+0x320>)
 800a182:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a186:	4619      	mov	r1, r3
 800a188:	4b71      	ldr	r3, [pc, #452]	; (800a350 <getEstimatedAttitude+0x320>)
 800a18a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a18e:	fb01 f303 	mul.w	r3, r1, r3
 800a192:	fb92 f3f3 	sdiv	r3, r2, r3
 800a196:	623b      	str	r3, [r7, #32]

    rotateV(&EstG.V, deltaGyroAngle);
 800a198:	463b      	mov	r3, r7
 800a19a:	4619      	mov	r1, r3
 800a19c:	4872      	ldr	r0, [pc, #456]	; (800a368 <getEstimatedAttitude+0x338>)
 800a19e:	f7ff fc2d 	bl	80099fc <rotateV>

    // Apply complimentary filter (Gyro drift correction)
    // If accel magnitude >1.15G or <0.85G and ACC vector outside of the limit range => we neutralize the effect of accelerometers in the angle estimation.
    // To do that, we just skip filter, as EstV already rotated by Gyro
    if (72 < (uint16_t)accMag && (uint16_t)accMag < 133) {
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	2b48      	cmp	r3, #72	; 0x48
 800a1a8:	d93a      	bls.n	800a220 <getEstimatedAttitude+0x1f0>
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	2b84      	cmp	r3, #132	; 0x84
 800a1b0:	d836      	bhi.n	800a220 <getEstimatedAttitude+0x1f0>
        for (axis = 0; axis < 3; axis++)
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a1b6:	e030      	b.n	800a21a <getEstimatedAttitude+0x1ea>
            EstG.A[axis] = (EstG.A[axis] * (float)mcfg.gyro_cmpf_factor + accSmooth[axis]) * INV_GYR_CMPF_FACTOR;
 800a1b8:	4a6b      	ldr	r2, [pc, #428]	; (800a368 <getEstimatedAttitude+0x338>)
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	ed93 7a00 	vldr	s14, [r3]
 800a1c4:	4b69      	ldr	r3, [pc, #420]	; (800a36c <getEstimatedAttitude+0x33c>)
 800a1c6:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a1ca:	ee07 3a90 	vmov	s15, r3
 800a1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1d6:	4a63      	ldr	r2, [pc, #396]	; (800a364 <getEstimatedAttitude+0x334>)
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	edd3 7a00 	vldr	s15, [r3]
 800a1e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a1e6:	4b61      	ldr	r3, [pc, #388]	; (800a36c <getEstimatedAttitude+0x33c>)
 800a1e8:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a1ec:	ee07 3a90 	vmov	s15, r3
 800a1f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1f8:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a1fc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a200:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a204:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a208:	4a57      	ldr	r2, [pc, #348]	; (800a368 <getEstimatedAttitude+0x338>)
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	3301      	adds	r3, #1
 800a218:	627b      	str	r3, [r7, #36]	; 0x24
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	ddcb      	ble.n	800a1b8 <getEstimatedAttitude+0x188>
    }

    f.SMALL_ANGLE = (EstG.A[Z] > smallAngle);
 800a220:	4b51      	ldr	r3, [pc, #324]	; (800a368 <getEstimatedAttitude+0x338>)
 800a222:	ed93 7a02 	vldr	s14, [r3, #8]
 800a226:	4b52      	ldr	r3, [pc, #328]	; (800a370 <getEstimatedAttitude+0x340>)
 800a228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a22c:	ee07 3a90 	vmov	s15, r3
 800a230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a23c:	bfcc      	ite	gt
 800a23e:	2301      	movgt	r3, #1
 800a240:	2300      	movle	r3, #0
 800a242:	b2db      	uxtb	r3, r3
 800a244:	461a      	mov	r2, r3
 800a246:	4b4b      	ldr	r3, [pc, #300]	; (800a374 <getEstimatedAttitude+0x344>)
 800a248:	735a      	strb	r2, [r3, #13]

    // Attitude of the estimated vector
    anglerad[ROLL] = atan2f(EstG.V.Y, EstG.V.Z);
 800a24a:	4b47      	ldr	r3, [pc, #284]	; (800a368 <getEstimatedAttitude+0x338>)
 800a24c:	edd3 7a01 	vldr	s15, [r3, #4]
 800a250:	4b45      	ldr	r3, [pc, #276]	; (800a368 <getEstimatedAttitude+0x338>)
 800a252:	ed93 7a02 	vldr	s14, [r3, #8]
 800a256:	eef0 0a47 	vmov.f32	s1, s14
 800a25a:	eeb0 0a67 	vmov.f32	s0, s15
 800a25e:	f018 fff1 	bl	8023244 <atan2f>
 800a262:	eef0 7a40 	vmov.f32	s15, s0
 800a266:	4b44      	ldr	r3, [pc, #272]	; (800a378 <getEstimatedAttitude+0x348>)
 800a268:	edc3 7a00 	vstr	s15, [r3]
    anglerad[PITCH] = atan2f(-EstG.V.X, sqrtf(EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z));
 800a26c:	4b3e      	ldr	r3, [pc, #248]	; (800a368 <getEstimatedAttitude+0x338>)
 800a26e:	edd3 7a00 	vldr	s15, [r3]
 800a272:	eeb1 8a67 	vneg.f32	s16, s15
 800a276:	4b3c      	ldr	r3, [pc, #240]	; (800a368 <getEstimatedAttitude+0x338>)
 800a278:	ed93 7a01 	vldr	s14, [r3, #4]
 800a27c:	4b3a      	ldr	r3, [pc, #232]	; (800a368 <getEstimatedAttitude+0x338>)
 800a27e:	edd3 7a01 	vldr	s15, [r3, #4]
 800a282:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a286:	4b38      	ldr	r3, [pc, #224]	; (800a368 <getEstimatedAttitude+0x338>)
 800a288:	edd3 6a02 	vldr	s13, [r3, #8]
 800a28c:	4b36      	ldr	r3, [pc, #216]	; (800a368 <getEstimatedAttitude+0x338>)
 800a28e:	edd3 7a02 	vldr	s15, [r3, #8]
 800a292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a29a:	eeb0 0a67 	vmov.f32	s0, s15
 800a29e:	f019 f82b 	bl	80232f8 <sqrtf>
 800a2a2:	eef0 7a40 	vmov.f32	s15, s0
 800a2a6:	eef0 0a67 	vmov.f32	s1, s15
 800a2aa:	eeb0 0a48 	vmov.f32	s0, s16
 800a2ae:	f018 ffc9 	bl	8023244 <atan2f>
 800a2b2:	eef0 7a40 	vmov.f32	s15, s0
 800a2b6:	4b30      	ldr	r3, [pc, #192]	; (800a378 <getEstimatedAttitude+0x348>)
 800a2b8:	edc3 7a01 	vstr	s15, [r3, #4]
    angle[ROLL] = lrintf(anglerad[ROLL] * (1800.0f / M_PI));
 800a2bc:	4b2e      	ldr	r3, [pc, #184]	; (800a378 <getEstimatedAttitude+0x348>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7f6 f8f5 	bl	80004b0 <__aeabi_f2d>
 800a2c6:	a31e      	add	r3, pc, #120	; (adr r3, 800a340 <getEstimatedAttitude+0x310>)
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	f7f6 f948 	bl	8000560 <__aeabi_dmul>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	f7f6 fc24 	bl	8000b24 <__aeabi_d2f>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	ee00 3a10 	vmov	s0, r3
 800a2e2:	f018 fefd 	bl	80230e0 <lrintf>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	b21a      	sxth	r2, r3
 800a2ea:	4b24      	ldr	r3, [pc, #144]	; (800a37c <getEstimatedAttitude+0x34c>)
 800a2ec:	801a      	strh	r2, [r3, #0]
    angle[PITCH] = lrintf(anglerad[PITCH] * (1800.0f / M_PI));
 800a2ee:	4b22      	ldr	r3, [pc, #136]	; (800a378 <getEstimatedAttitude+0x348>)
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7f6 f8dc 	bl	80004b0 <__aeabi_f2d>
 800a2f8:	a311      	add	r3, pc, #68	; (adr r3, 800a340 <getEstimatedAttitude+0x310>)
 800a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fe:	f7f6 f92f 	bl	8000560 <__aeabi_dmul>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	4610      	mov	r0, r2
 800a308:	4619      	mov	r1, r3
 800a30a:	f7f6 fc0b 	bl	8000b24 <__aeabi_d2f>
 800a30e:	4603      	mov	r3, r0
 800a310:	ee00 3a10 	vmov	s0, r3
 800a314:	f018 fee4 	bl	80230e0 <lrintf>
 800a318:	4603      	mov	r3, r0
 800a31a:	b21a      	sxth	r2, r3
 800a31c:	4b17      	ldr	r3, [pc, #92]	; (800a37c <getEstimatedAttitude+0x34c>)
 800a31e:	805a      	strh	r2, [r3, #2]

    if (sensors(SENSOR_MAG)) {
 800a320:	2008      	movs	r0, #8
 800a322:	f7fc fce9 	bl	8006cf8 <sensors>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d067      	beq.n	800a3fc <getEstimatedAttitude+0x3cc>
        rotateV(&EstM.V, deltaGyroAngle);
 800a32c:	463b      	mov	r3, r7
 800a32e:	4619      	mov	r1, r3
 800a330:	4813      	ldr	r0, [pc, #76]	; (800a380 <getEstimatedAttitude+0x350>)
 800a332:	f7ff fb63 	bl	80099fc <rotateV>
        for (axis = 0; axis < 3; axis++)
 800a336:	2300      	movs	r3, #0
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
 800a33a:	e054      	b.n	800a3e6 <getEstimatedAttitude+0x3b6>
 800a33c:	f3af 8000 	nop.w
 800a340:	907e593b 	.word	0x907e593b
 800a344:	4081e7a9 	.word	0x4081e7a9
 800a348:	20001c34 	.word	0x20001c34
 800a34c:	200014c0 	.word	0x200014c0
 800a350:	2000005c 	.word	0x2000005c
 800a354:	20001404 	.word	0x20001404
 800a358:	20000e54 	.word	0x20000e54
 800a35c:	200014c4 	.word	0x200014c4
 800a360:	20001410 	.word	0x20001410
 800a364:	2000141c 	.word	0x2000141c
 800a368:	200014a8 	.word	0x200014a8
 800a36c:	200008e8 	.word	0x200008e8
 800a370:	20001448 	.word	0x20001448
 800a374:	200016f4 	.word	0x200016f4
 800a378:	200014a0 	.word	0x200014a0
 800a37c:	2000149c 	.word	0x2000149c
 800a380:	200014d0 	.word	0x200014d0
            EstM.A[axis] = (EstM.A[axis] * (float)mcfg.gyro_cmpfm_factor + magADC[axis]) * INV_GYR_CMPFM_FACTOR;
 800a384:	4a68      	ldr	r2, [pc, #416]	; (800a528 <getEstimatedAttitude+0x4f8>)
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4413      	add	r3, r2
 800a38c:	ed93 7a00 	vldr	s14, [r3]
 800a390:	4b66      	ldr	r3, [pc, #408]	; (800a52c <getEstimatedAttitude+0x4fc>)
 800a392:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a396:	ee07 3a90 	vmov	s15, r3
 800a39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a39e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3a2:	4a63      	ldr	r2, [pc, #396]	; (800a530 <getEstimatedAttitude+0x500>)
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	4413      	add	r3, r2
 800a3aa:	edd3 7a00 	vldr	s15, [r3]
 800a3ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a3b2:	4b5e      	ldr	r3, [pc, #376]	; (800a52c <getEstimatedAttitude+0x4fc>)
 800a3b4:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a3b8:	ee07 3a90 	vmov	s15, r3
 800a3bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3c4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a3c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a3cc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a3d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3d4:	4a54      	ldr	r2, [pc, #336]	; (800a528 <getEstimatedAttitude+0x4f8>)
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4413      	add	r3, r2
 800a3dc:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	ddcb      	ble.n	800a384 <getEstimatedAttitude+0x354>
        heading = calculateHeading(&EstM);
 800a3ec:	484e      	ldr	r0, [pc, #312]	; (800a528 <getEstimatedAttitude+0x4f8>)
 800a3ee:	f7ff fd6b 	bl	8009ec8 <calculateHeading>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4b4f      	ldr	r3, [pc, #316]	; (800a534 <getEstimatedAttitude+0x504>)
 800a3f8:	801a      	strh	r2, [r3, #0]
 800a3fa:	e00f      	b.n	800a41c <getEstimatedAttitude+0x3ec>
    } else {
        rotateV(&EstN.V, deltaGyroAngle);
 800a3fc:	463b      	mov	r3, r7
 800a3fe:	4619      	mov	r1, r3
 800a400:	484d      	ldr	r0, [pc, #308]	; (800a538 <getEstimatedAttitude+0x508>)
 800a402:	f7ff fafb 	bl	80099fc <rotateV>
        normalizeV(&EstN.V, &EstN.V);
 800a406:	494c      	ldr	r1, [pc, #304]	; (800a538 <getEstimatedAttitude+0x508>)
 800a408:	484b      	ldr	r0, [pc, #300]	; (800a538 <getEstimatedAttitude+0x508>)
 800a40a:	f7ff faa7 	bl	800995c <normalizeV>
        heading = calculateHeading(&EstN);
 800a40e:	484a      	ldr	r0, [pc, #296]	; (800a538 <getEstimatedAttitude+0x508>)
 800a410:	f7ff fd5a 	bl	8009ec8 <calculateHeading>
 800a414:	4603      	mov	r3, r0
 800a416:	461a      	mov	r2, r3
 800a418:	4b46      	ldr	r3, [pc, #280]	; (800a534 <getEstimatedAttitude+0x504>)
 800a41a:	801a      	strh	r2, [r3, #0]
    }

    acc_calc(deltaT); // rotate acc vector into earth frame
 800a41c:	6978      	ldr	r0, [r7, #20]
 800a41e:	f7ff fc1f 	bl	8009c60 <acc_calc>

    if (cfg.throttle_correction_value) {
 800a422:	4b46      	ldr	r3, [pc, #280]	; (800a53c <getEstimatedAttitude+0x50c>)
 800a424:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d072      	beq.n	800a512 <getEstimatedAttitude+0x4e2>

        float cosZ = EstG.V.Z / sqrtf(EstG.V.X * EstG.V.X + EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z);
 800a42c:	4b44      	ldr	r3, [pc, #272]	; (800a540 <getEstimatedAttitude+0x510>)
 800a42e:	ed93 8a02 	vldr	s16, [r3, #8]
 800a432:	4b43      	ldr	r3, [pc, #268]	; (800a540 <getEstimatedAttitude+0x510>)
 800a434:	ed93 7a00 	vldr	s14, [r3]
 800a438:	4b41      	ldr	r3, [pc, #260]	; (800a540 <getEstimatedAttitude+0x510>)
 800a43a:	edd3 7a00 	vldr	s15, [r3]
 800a43e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a442:	4b3f      	ldr	r3, [pc, #252]	; (800a540 <getEstimatedAttitude+0x510>)
 800a444:	edd3 6a01 	vldr	s13, [r3, #4]
 800a448:	4b3d      	ldr	r3, [pc, #244]	; (800a540 <getEstimatedAttitude+0x510>)
 800a44a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a44e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a452:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a456:	4b3a      	ldr	r3, [pc, #232]	; (800a540 <getEstimatedAttitude+0x510>)
 800a458:	edd3 6a02 	vldr	s13, [r3, #8]
 800a45c:	4b38      	ldr	r3, [pc, #224]	; (800a540 <getEstimatedAttitude+0x510>)
 800a45e:	edd3 7a02 	vldr	s15, [r3, #8]
 800a462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a46a:	eeb0 0a67 	vmov.f32	s0, s15
 800a46e:	f018 ff43 	bl	80232f8 <sqrtf>
 800a472:	eeb0 7a40 	vmov.f32	s14, s0
 800a476:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800a47a:	edc7 7a03 	vstr	s15, [r7, #12]

        if (cosZ <= 0.015f) { // we are inverted, vertical or with a small angle < 0.86 deg
 800a47e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a482:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a544 <getEstimatedAttitude+0x514>
 800a486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a48e:	d803      	bhi.n	800a498 <getEstimatedAttitude+0x468>
            throttleAngleCorrection = 0;
 800a490:	4b2d      	ldr	r3, [pc, #180]	; (800a548 <getEstimatedAttitude+0x518>)
 800a492:	2200      	movs	r2, #0
 800a494:	801a      	strh	r2, [r3, #0]
            if (deg > 900)
                deg = 900;
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
        }
    }
}
 800a496:	e03c      	b.n	800a512 <getEstimatedAttitude+0x4e2>
            int deg = lrintf(acosf(cosZ) * throttleAngleScale);
 800a498:	ed97 0a03 	vldr	s0, [r7, #12]
 800a49c:	f018 fea6 	bl	80231ec <acosf>
 800a4a0:	eeb0 7a40 	vmov.f32	s14, s0
 800a4a4:	4b29      	ldr	r3, [pc, #164]	; (800a54c <getEstimatedAttitude+0x51c>)
 800a4a6:	edd3 7a00 	vldr	s15, [r3]
 800a4aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ae:	eeb0 0a67 	vmov.f32	s0, s15
 800a4b2:	f018 fe15 	bl	80230e0 <lrintf>
 800a4b6:	61f8      	str	r0, [r7, #28]
            if (deg > 900)
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a4be:	dd02      	ble.n	800a4c6 <getEstimatedAttitude+0x496>
                deg = 900;
 800a4c0:	f44f 7361 	mov.w	r3, #900	; 0x384
 800a4c4:	61fb      	str	r3, [r7, #28]
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
 800a4c6:	4b1d      	ldr	r3, [pc, #116]	; (800a53c <getEstimatedAttitude+0x50c>)
 800a4c8:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a4cc:	ee07 3a90 	vmov	s15, r3
 800a4d0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a4d4:	69f8      	ldr	r0, [r7, #28]
 800a4d6:	f7f5 ffd9 	bl	800048c <__aeabi_i2d>
 800a4da:	a311      	add	r3, pc, #68	; (adr r3, 800a520 <getEstimatedAttitude+0x4f0>)
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	f7f6 f968 	bl	80007b4 <__aeabi_ddiv>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	f7f6 fb1a 	bl	8000b24 <__aeabi_d2f>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	ee00 3a10 	vmov	s0, r3
 800a4f6:	f018 fe33 	bl	8023160 <sinf>
 800a4fa:	eef0 7a40 	vmov.f32	s15, s0
 800a4fe:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a502:	eeb0 0a67 	vmov.f32	s0, s15
 800a506:	f018 fdeb 	bl	80230e0 <lrintf>
 800a50a:	4603      	mov	r3, r0
 800a50c:	b21a      	sxth	r2, r3
 800a50e:	4b0e      	ldr	r3, [pc, #56]	; (800a548 <getEstimatedAttitude+0x518>)
 800a510:	801a      	strh	r2, [r3, #0]
}
 800a512:	bf00      	nop
 800a514:	3728      	adds	r7, #40	; 0x28
 800a516:	46bd      	mov	sp, r7
 800a518:	ecbd 8b02 	vpop	{d8}
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	e50feba2 	.word	0xe50feba2
 800a524:	409616dd 	.word	0x409616dd
 800a528:	200014d0 	.word	0x200014d0
 800a52c:	200008e8 	.word	0x200008e8
 800a530:	20001428 	.word	0x20001428
 800a534:	200019c0 	.word	0x200019c0
 800a538:	20000034 	.word	0x20000034
 800a53c:	20000e54 	.word	0x20000e54
 800a540:	200014a8 	.word	0x200014a8
 800a544:	3c75c28f 	.word	0x3c75c28f
 800a548:	2000147c 	.word	0x2000147c
 800a54c:	20001484 	.word	0x20001484

0800a550 <taskGetEstimatedAltitude>:

#ifdef BARO

uint16_t taskGetEstimatedAltitude(PifTask *p_task)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b08e      	sub	sp, #56	; 0x38
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
    static uint32_t previousT;
    uint32_t currentT = (*pif_act_timer1us)();
 800a558:	4b84      	ldr	r3, [pc, #528]	; (800a76c <taskGetEstimatedAltitude+0x21c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4798      	blx	r3
 800a55e:	6338      	str	r0, [r7, #48]	; 0x30
    static float vel = 0.0f;
    static float accAlt = 0.0f;
    static int32_t lastBaroAlt;
    static int32_t baroGroundAltitude = 0;
    static int32_t baroGroundPressure = 0;
    int16_t tiltAngle = max(abs(angle[ROLL]), abs(angle[PITCH]));
 800a560:	4b83      	ldr	r3, [pc, #524]	; (800a770 <taskGetEstimatedAltitude+0x220>)
 800a562:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a566:	2b00      	cmp	r3, #0
 800a568:	bfb8      	it	lt
 800a56a:	425b      	neglt	r3, r3
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	4b80      	ldr	r3, [pc, #512]	; (800a770 <taskGetEstimatedAltitude+0x220>)
 800a570:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a574:	2b00      	cmp	r3, #0
 800a576:	bfb8      	it	lt
 800a578:	425b      	neglt	r3, r3
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	4293      	cmp	r3, r2
 800a57e:	bf38      	it	cc
 800a580:	4613      	movcc	r3, r2
 800a582:	b29b      	uxth	r3, r3
 800a584:	85fb      	strh	r3, [r7, #46]	; 0x2e

    (void)p_task;

    baroState = 0;
 800a586:	4b7b      	ldr	r3, [pc, #492]	; (800a774 <taskGetEstimatedAltitude+0x224>)
 800a588:	2200      	movs	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]

    dTime = currentT - previousT;
 800a58c:	4b7a      	ldr	r3, [pc, #488]	; (800a778 <taskGetEstimatedAltitude+0x228>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	62bb      	str	r3, [r7, #40]	; 0x28
    previousT = currentT;
 800a596:	4a78      	ldr	r2, [pc, #480]	; (800a778 <taskGetEstimatedAltitude+0x228>)
 800a598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59a:	6013      	str	r3, [r2, #0]

    if (calibratingB > 0) {
 800a59c:	4b77      	ldr	r3, [pc, #476]	; (800a77c <taskGetEstimatedAltitude+0x22c>)
 800a59e:	881b      	ldrh	r3, [r3, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d058      	beq.n	800a656 <taskGetEstimatedAltitude+0x106>
        baroGroundPressure -= baroGroundPressure / 8;
 800a5a4:	4b76      	ldr	r3, [pc, #472]	; (800a780 <taskGetEstimatedAltitude+0x230>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	da00      	bge.n	800a5ae <taskGetEstimatedAltitude+0x5e>
 800a5ac:	3307      	adds	r3, #7
 800a5ae:	10db      	asrs	r3, r3, #3
 800a5b0:	425b      	negs	r3, r3
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	4b72      	ldr	r3, [pc, #456]	; (800a780 <taskGetEstimatedAltitude+0x230>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	4a71      	ldr	r2, [pc, #452]	; (800a780 <taskGetEstimatedAltitude+0x230>)
 800a5bc:	6013      	str	r3, [r2, #0]
        baroGroundPressure += baroPressureSum / (cfg.baro_tab_size - 1);
 800a5be:	4b71      	ldr	r3, [pc, #452]	; (800a784 <taskGetEstimatedAltitude+0x234>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a71      	ldr	r2, [pc, #452]	; (800a788 <taskGetEstimatedAltitude+0x238>)
 800a5c4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a5c8:	3a01      	subs	r2, #1
 800a5ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5ce:	4a6c      	ldr	r2, [pc, #432]	; (800a780 <taskGetEstimatedAltitude+0x230>)
 800a5d0:	6812      	ldr	r2, [r2, #0]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	4b6a      	ldr	r3, [pc, #424]	; (800a780 <taskGetEstimatedAltitude+0x230>)
 800a5d8:	601a      	str	r2, [r3, #0]
        baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 800a5da:	4b69      	ldr	r3, [pc, #420]	; (800a780 <taskGetEstimatedAltitude+0x230>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	da00      	bge.n	800a5e4 <taskGetEstimatedAltitude+0x94>
 800a5e2:	3307      	adds	r3, #7
 800a5e4:	10db      	asrs	r3, r3, #3
 800a5e6:	ee07 3a90 	vmov	s15, r3
 800a5ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5ee:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a78c <taskGetEstimatedAltitude+0x23c>
 800a5f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a5f6:	eddf 0a66 	vldr	s1, [pc, #408]	; 800a790 <taskGetEstimatedAltitude+0x240>
 800a5fa:	eeb0 0a47 	vmov.f32	s0, s14
 800a5fe:	f018 fe23 	bl	8023248 <powf>
 800a602:	eef0 7a40 	vmov.f32	s15, s0
 800a606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a60a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a60e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800a794 <taskGetEstimatedAltitude+0x244>
 800a612:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a61a:	ee17 2a90 	vmov	r2, s15
 800a61e:	4b5e      	ldr	r3, [pc, #376]	; (800a798 <taskGetEstimatedAltitude+0x248>)
 800a620:	601a      	str	r2, [r3, #0]

        vel = 0;
 800a622:	4b5e      	ldr	r3, [pc, #376]	; (800a79c <taskGetEstimatedAltitude+0x24c>)
 800a624:	f04f 0200 	mov.w	r2, #0
 800a628:	601a      	str	r2, [r3, #0]
        accAlt = 0;
 800a62a:	4b5d      	ldr	r3, [pc, #372]	; (800a7a0 <taskGetEstimatedAltitude+0x250>)
 800a62c:	f04f 0200 	mov.w	r2, #0
 800a630:	601a      	str	r2, [r3, #0]
        calibratingB--;
 800a632:	4b52      	ldr	r3, [pc, #328]	; (800a77c <taskGetEstimatedAltitude+0x22c>)
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	3b01      	subs	r3, #1
 800a638:	b29a      	uxth	r2, r3
 800a63a:	4b50      	ldr	r3, [pc, #320]	; (800a77c <taskGetEstimatedAltitude+0x22c>)
 800a63c:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingB) {
 800a63e:	4b4f      	ldr	r3, [pc, #316]	; (800a77c <taskGetEstimatedAltitude+0x22c>)
 800a640:	881b      	ldrh	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d107      	bne.n	800a656 <taskGetEstimatedAltitude+0x106>
        	pifLog_Printf(LT_INFO, "Baro: GP=%ld, GA=%ld", baroGroundPressure, baroGroundAltitude);
 800a646:	4b4e      	ldr	r3, [pc, #312]	; (800a780 <taskGetEstimatedAltitude+0x230>)
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	4b53      	ldr	r3, [pc, #332]	; (800a798 <taskGetEstimatedAltitude+0x248>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4955      	ldr	r1, [pc, #340]	; (800a7a4 <taskGetEstimatedAltitude+0x254>)
 800a650:	2002      	movs	r0, #2
 800a652:	f008 fea7 	bl	80133a4 <pifLog_Printf>
#endif
    }

    // calculates height from ground via baro readings
    // see: https://github.com/diydrones/ardupilot/blob/master/libraries/AP_Baro/AP_Baro.cpp#L140
    BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (cfg.baro_tab_size - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 800a656:	4b4b      	ldr	r3, [pc, #300]	; (800a784 <taskGetEstimatedAltitude+0x234>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a4b      	ldr	r2, [pc, #300]	; (800a788 <taskGetEstimatedAltitude+0x238>)
 800a65c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a660:	3a01      	subs	r2, #1
 800a662:	fbb3 f3f2 	udiv	r3, r3, r2
 800a666:	ee07 3a90 	vmov	s15, r3
 800a66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a66e:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a78c <taskGetEstimatedAltitude+0x23c>
 800a672:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a676:	eddf 0a46 	vldr	s1, [pc, #280]	; 800a790 <taskGetEstimatedAltitude+0x240>
 800a67a:	eeb0 0a47 	vmov.f32	s0, s14
 800a67e:	f018 fde3 	bl	8023248 <powf>
 800a682:	eef0 7a40 	vmov.f32	s15, s0
 800a686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a68a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a68e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a794 <taskGetEstimatedAltitude+0x244>
 800a692:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a696:	eeb0 0a67 	vmov.f32	s0, s15
 800a69a:	f018 fd21 	bl	80230e0 <lrintf>
 800a69e:	6278      	str	r0, [r7, #36]	; 0x24
    BaroAlt_tmp -= baroGroundAltitude;
 800a6a0:	4b3d      	ldr	r3, [pc, #244]	; (800a798 <taskGetEstimatedAltitude+0x248>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	627b      	str	r3, [r7, #36]	; 0x24
    BaroAlt = lrintf((float)BaroAlt * cfg.baro_noise_lpf + (float)BaroAlt_tmp * (1.0f - cfg.baro_noise_lpf)); // additional LPF to reduce baro noise
 800a6aa:	4b3f      	ldr	r3, [pc, #252]	; (800a7a8 <taskGetEstimatedAltitude+0x258>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	ee07 3a90 	vmov	s15, r3
 800a6b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a6b6:	4b34      	ldr	r3, [pc, #208]	; (800a788 <taskGetEstimatedAltitude+0x238>)
 800a6b8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a6bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	ee07 3a90 	vmov	s15, r3
 800a6c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a6ca:	4b2f      	ldr	r3, [pc, #188]	; (800a788 <taskGetEstimatedAltitude+0x238>)
 800a6cc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a6d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a6d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a6d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6e0:	eeb0 0a67 	vmov.f32	s0, s15
 800a6e4:	f018 fcfc 	bl	80230e0 <lrintf>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	4a2f      	ldr	r2, [pc, #188]	; (800a7a8 <taskGetEstimatedAltitude+0x258>)
 800a6ec:	6013      	str	r3, [r2, #0]

    // calculate sonar altitude only if the sonar is facing downwards(<25deg)
    if (tiltAngle > 250 || sonarDistance == -1)
 800a6ee:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a6f2:	2bfa      	cmp	r3, #250	; 0xfa
 800a6f4:	dc04      	bgt.n	800a700 <taskGetEstimatedAltitude+0x1b0>
 800a6f6:	4b2d      	ldr	r3, [pc, #180]	; (800a7ac <taskGetEstimatedAltitude+0x25c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fe:	d104      	bne.n	800a70a <taskGetEstimatedAltitude+0x1ba>
        sonarAlt = -1;
 800a700:	4b2b      	ldr	r3, [pc, #172]	; (800a7b0 <taskGetEstimatedAltitude+0x260>)
 800a702:	f04f 32ff 	mov.w	r2, #4294967295
 800a706:	601a      	str	r2, [r3, #0]
 800a708:	e01b      	b.n	800a742 <taskGetEstimatedAltitude+0x1f2>
    else
        sonarAlt = sonarDistance * (900.0f - tiltAngle) / 900.0f;
 800a70a:	4b28      	ldr	r3, [pc, #160]	; (800a7ac <taskGetEstimatedAltitude+0x25c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	ee07 3a90 	vmov	s15, r3
 800a712:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a716:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a71a:	ee07 3a90 	vmov	s15, r3
 800a71e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a722:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a7b4 <taskGetEstimatedAltitude+0x264>
 800a726:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a72a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a72e:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a7b4 <taskGetEstimatedAltitude+0x264>
 800a732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a73a:	ee17 2a90 	vmov	r2, s15
 800a73e:	4b1c      	ldr	r3, [pc, #112]	; (800a7b0 <taskGetEstimatedAltitude+0x260>)
 800a740:	601a      	str	r2, [r3, #0]

    // do sonarAlt and baroAlt fusion
    if (sonarAlt > 0 && sonarAlt < 200) {
 800a742:	4b1b      	ldr	r3, [pc, #108]	; (800a7b0 <taskGetEstimatedAltitude+0x260>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	dd38      	ble.n	800a7bc <taskGetEstimatedAltitude+0x26c>
 800a74a:	4b19      	ldr	r3, [pc, #100]	; (800a7b0 <taskGetEstimatedAltitude+0x260>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2bc7      	cmp	r3, #199	; 0xc7
 800a750:	dc34      	bgt.n	800a7bc <taskGetEstimatedAltitude+0x26c>
        baroAlt_offset = BaroAlt - sonarAlt;
 800a752:	4b15      	ldr	r3, [pc, #84]	; (800a7a8 <taskGetEstimatedAltitude+0x258>)
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	4b16      	ldr	r3, [pc, #88]	; (800a7b0 <taskGetEstimatedAltitude+0x260>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	4a16      	ldr	r2, [pc, #88]	; (800a7b8 <taskGetEstimatedAltitude+0x268>)
 800a75e:	6013      	str	r3, [r2, #0]
        BaroAlt = sonarAlt;
 800a760:	4b13      	ldr	r3, [pc, #76]	; (800a7b0 <taskGetEstimatedAltitude+0x260>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a10      	ldr	r2, [pc, #64]	; (800a7a8 <taskGetEstimatedAltitude+0x258>)
 800a766:	6013      	str	r3, [r2, #0]
 800a768:	e064      	b.n	800a834 <taskGetEstimatedAltitude+0x2e4>
 800a76a:	bf00      	nop
 800a76c:	20001c34 	.word	0x20001c34
 800a770:	2000149c 	.word	0x2000149c
 800a774:	20001454 	.word	0x20001454
 800a778:	200014dc 	.word	0x200014dc
 800a77c:	200019bc 	.word	0x200019bc
 800a780:	200014e0 	.word	0x200014e0
 800a784:	2000144c 	.word	0x2000144c
 800a788:	20000e54 	.word	0x20000e54
 800a78c:	47c5e680 	.word	0x47c5e680
 800a790:	3e42dcb1 	.word	0x3e42dcb1
 800a794:	4a8748d0 	.word	0x4a8748d0
 800a798:	200014e4 	.word	0x200014e4
 800a79c:	200014e8 	.word	0x200014e8
 800a7a0:	200014ec 	.word	0x200014ec
 800a7a4:	080270b8 	.word	0x080270b8
 800a7a8:	20001450 	.word	0x20001450
 800a7ac:	2000002c 	.word	0x2000002c
 800a7b0:	20000030 	.word	0x20000030
 800a7b4:	44610000 	.word	0x44610000
 800a7b8:	2000145c 	.word	0x2000145c
    } else {
        BaroAlt -= baroAlt_offset;
 800a7bc:	4ba0      	ldr	r3, [pc, #640]	; (800aa40 <taskGetEstimatedAltitude+0x4f0>)
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	4ba0      	ldr	r3, [pc, #640]	; (800aa44 <taskGetEstimatedAltitude+0x4f4>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	4a9e      	ldr	r2, [pc, #632]	; (800aa40 <taskGetEstimatedAltitude+0x4f0>)
 800a7c8:	6013      	str	r3, [r2, #0]
        if (sonarAlt > 0) {
 800a7ca:	4b9f      	ldr	r3, [pc, #636]	; (800aa48 <taskGetEstimatedAltitude+0x4f8>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	dd30      	ble.n	800a834 <taskGetEstimatedAltitude+0x2e4>
            sonarTransition = (300 - sonarAlt) / 100.0f;
 800a7d2:	4b9d      	ldr	r3, [pc, #628]	; (800aa48 <taskGetEstimatedAltitude+0x4f8>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800a7da:	ee07 3a90 	vmov	s15, r3
 800a7de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7e2:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800aa4c <taskGetEstimatedAltitude+0x4fc>
 800a7e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a7ea:	4b99      	ldr	r3, [pc, #612]	; (800aa50 <taskGetEstimatedAltitude+0x500>)
 800a7ec:	edc3 7a00 	vstr	s15, [r3]
            BaroAlt = sonarAlt * sonarTransition + BaroAlt * (1.0f - sonarTransition);
 800a7f0:	4b95      	ldr	r3, [pc, #596]	; (800aa48 <taskGetEstimatedAltitude+0x4f8>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	ee07 3a90 	vmov	s15, r3
 800a7f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7fc:	4b94      	ldr	r3, [pc, #592]	; (800aa50 <taskGetEstimatedAltitude+0x500>)
 800a7fe:	edd3 7a00 	vldr	s15, [r3]
 800a802:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a806:	4b8e      	ldr	r3, [pc, #568]	; (800aa40 <taskGetEstimatedAltitude+0x4f0>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	ee07 3a90 	vmov	s15, r3
 800a80e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a812:	4b8f      	ldr	r3, [pc, #572]	; (800aa50 <taskGetEstimatedAltitude+0x500>)
 800a814:	edd3 7a00 	vldr	s15, [r3]
 800a818:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a81c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a824:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a82c:	ee17 2a90 	vmov	r2, s15
 800a830:	4b83      	ldr	r3, [pc, #524]	; (800aa40 <taskGetEstimatedAltitude+0x4f0>)
 800a832:	601a      	str	r2, [r3, #0]
        }
    }

    dt = accTimeSum * 1e-6f; // delta acc reading time in seconds
 800a834:	4b87      	ldr	r3, [pc, #540]	; (800aa54 <taskGetEstimatedAltitude+0x504>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	ee07 3a90 	vmov	s15, r3
 800a83c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a840:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800aa58 <taskGetEstimatedAltitude+0x508>
 800a844:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a848:	edc7 7a08 	vstr	s15, [r7, #32]

    // Integrator - velocity, cm/sec
    accZ_tmp = (float)accSum[2] / (float)accSumCount;
 800a84c:	4b83      	ldr	r3, [pc, #524]	; (800aa5c <taskGetEstimatedAltitude+0x50c>)
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	ee07 3a90 	vmov	s15, r3
 800a854:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a858:	4b81      	ldr	r3, [pc, #516]	; (800aa60 <taskGetEstimatedAltitude+0x510>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	ee07 3a90 	vmov	s15, r3
 800a860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a868:	edc7 7a07 	vstr	s15, [r7, #28]
    vel_acc = accZ_tmp * accVelScale * (float)accTimeSum;
 800a86c:	4b7d      	ldr	r3, [pc, #500]	; (800aa64 <taskGetEstimatedAltitude+0x514>)
 800a86e:	ed93 7a00 	vldr	s14, [r3]
 800a872:	edd7 7a07 	vldr	s15, [r7, #28]
 800a876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a87a:	4b76      	ldr	r3, [pc, #472]	; (800aa54 <taskGetEstimatedAltitude+0x504>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	ee07 3a90 	vmov	s15, r3
 800a882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a88a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrator - Altitude in cm
    accAlt += (vel_acc * 0.5f) * dt + vel * dt;                                         // integrate velocity to get distance (x= a/2 * t^2)
 800a88e:	edd7 7a06 	vldr	s15, [r7, #24]
 800a892:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a896:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a89a:	edd7 7a08 	vldr	s15, [r7, #32]
 800a89e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8a2:	4b71      	ldr	r3, [pc, #452]	; (800aa68 <taskGetEstimatedAltitude+0x518>)
 800a8a4:	edd3 6a00 	vldr	s13, [r3]
 800a8a8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a8ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8b4:	4b6d      	ldr	r3, [pc, #436]	; (800aa6c <taskGetEstimatedAltitude+0x51c>)
 800a8b6:	edd3 7a00 	vldr	s15, [r3]
 800a8ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8be:	4b6b      	ldr	r3, [pc, #428]	; (800aa6c <taskGetEstimatedAltitude+0x51c>)
 800a8c0:	edc3 7a00 	vstr	s15, [r3]
    accAlt = accAlt * cfg.baro_cf_alt + (float)BaroAlt * (1.0f - cfg.baro_cf_alt);      // complementary filter for altitude estimation (baro & acc)
 800a8c4:	4b6a      	ldr	r3, [pc, #424]	; (800aa70 <taskGetEstimatedAltitude+0x520>)
 800a8c6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800a8ca:	4b68      	ldr	r3, [pc, #416]	; (800aa6c <taskGetEstimatedAltitude+0x51c>)
 800a8cc:	edd3 7a00 	vldr	s15, [r3]
 800a8d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8d4:	4b5a      	ldr	r3, [pc, #360]	; (800aa40 <taskGetEstimatedAltitude+0x4f0>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	ee07 3a90 	vmov	s15, r3
 800a8dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8e0:	4b63      	ldr	r3, [pc, #396]	; (800aa70 <taskGetEstimatedAltitude+0x520>)
 800a8e2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800a8e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a8ea:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a8ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8f6:	4b5d      	ldr	r3, [pc, #372]	; (800aa6c <taskGetEstimatedAltitude+0x51c>)
 800a8f8:	edc3 7a00 	vstr	s15, [r3]

    // when the sonar is in his best range
    if (sonarAlt > 0 && sonarAlt < 200)
 800a8fc:	4b52      	ldr	r3, [pc, #328]	; (800aa48 <taskGetEstimatedAltitude+0x4f8>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	dd08      	ble.n	800a916 <taskGetEstimatedAltitude+0x3c6>
 800a904:	4b50      	ldr	r3, [pc, #320]	; (800aa48 <taskGetEstimatedAltitude+0x4f8>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2bc7      	cmp	r3, #199	; 0xc7
 800a90a:	dc04      	bgt.n	800a916 <taskGetEstimatedAltitude+0x3c6>
        EstAlt = BaroAlt;
 800a90c:	4b4c      	ldr	r3, [pc, #304]	; (800aa40 <taskGetEstimatedAltitude+0x4f0>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a58      	ldr	r2, [pc, #352]	; (800aa74 <taskGetEstimatedAltitude+0x524>)
 800a912:	6013      	str	r3, [r2, #0]
 800a914:	e008      	b.n	800a928 <taskGetEstimatedAltitude+0x3d8>
    else
        EstAlt = accAlt;
 800a916:	4b55      	ldr	r3, [pc, #340]	; (800aa6c <taskGetEstimatedAltitude+0x51c>)
 800a918:	edd3 7a00 	vldr	s15, [r3]
 800a91c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a920:	ee17 2a90 	vmov	r2, s15
 800a924:	4b53      	ldr	r3, [pc, #332]	; (800aa74 <taskGetEstimatedAltitude+0x524>)
 800a926:	601a      	str	r2, [r3, #0]

    vel += vel_acc;
 800a928:	4b4f      	ldr	r3, [pc, #316]	; (800aa68 <taskGetEstimatedAltitude+0x518>)
 800a92a:	ed93 7a00 	vldr	s14, [r3]
 800a92e:	edd7 7a06 	vldr	s15, [r7, #24]
 800a932:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a936:	4b4c      	ldr	r3, [pc, #304]	; (800aa68 <taskGetEstimatedAltitude+0x518>)
 800a938:	edc3 7a00 	vstr	s15, [r3]
    debug[0] = accSum[2] / accSumCount; // acceleration
    debug[1] = vel;                     // velocity
    debug[2] = accAlt;                  // height
#endif

    accSum_reset();
 800a93c:	f7ff faa6 	bl	8009e8c <accSum_reset>

    baroVel = (BaroAlt - lastBaroAlt) * 1000000.0f / dTime;
 800a940:	4b3f      	ldr	r3, [pc, #252]	; (800aa40 <taskGetEstimatedAltitude+0x4f0>)
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	4b4c      	ldr	r3, [pc, #304]	; (800aa78 <taskGetEstimatedAltitude+0x528>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	ee07 3a90 	vmov	s15, r3
 800a94e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a952:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800aa7c <taskGetEstimatedAltitude+0x52c>
 800a956:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95c:	ee07 3a90 	vmov	s15, r3
 800a960:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a96c:	ee17 3a90 	vmov	r3, s15
 800a970:	617b      	str	r3, [r7, #20]
    lastBaroAlt = BaroAlt;
 800a972:	4b33      	ldr	r3, [pc, #204]	; (800aa40 <taskGetEstimatedAltitude+0x4f0>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a40      	ldr	r2, [pc, #256]	; (800aa78 <taskGetEstimatedAltitude+0x528>)
 800a978:	6013      	str	r3, [r2, #0]

    baroVel = constrain(baroVel, -1500, 1500);    // constrain baro velocity +/- 1500cm/s
 800a97a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a97e:	4940      	ldr	r1, [pc, #256]	; (800aa80 <taskGetEstimatedAltitude+0x530>)
 800a980:	6978      	ldr	r0, [r7, #20]
 800a982:	f7f9 f89d 	bl	8003ac0 <constrain>
 800a986:	6178      	str	r0, [r7, #20]
    baroVel = applyDeadband(baroVel, 10);         // to reduce noise near zero
 800a988:	210a      	movs	r1, #10
 800a98a:	6978      	ldr	r0, [r7, #20]
 800a98c:	f7ff f940 	bl	8009c10 <applyDeadband>
 800a990:	6178      	str	r0, [r7, #20]

    // apply Complimentary Filter to keep the calculated velocity based on baro velocity (i.e. near real velocity).
    // By using CF it's possible to correct the drift of integrated accZ (velocity) without loosing the phase, i.e without delay
    vel = vel * cfg.baro_cf_vel + baroVel * (1 - cfg.baro_cf_vel);
 800a992:	4b37      	ldr	r3, [pc, #220]	; (800aa70 <taskGetEstimatedAltitude+0x520>)
 800a994:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800a998:	4b33      	ldr	r3, [pc, #204]	; (800aa68 <taskGetEstimatedAltitude+0x518>)
 800a99a:	edd3 7a00 	vldr	s15, [r3]
 800a99e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	ee07 3a90 	vmov	s15, r3
 800a9a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a9ac:	4b30      	ldr	r3, [pc, #192]	; (800aa70 <taskGetEstimatedAltitude+0x520>)
 800a9ae:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800a9b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a9b6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a9ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9c2:	4b29      	ldr	r3, [pc, #164]	; (800aa68 <taskGetEstimatedAltitude+0x518>)
 800a9c4:	edc3 7a00 	vstr	s15, [r3]
    vel_tmp = lrintf(vel);
 800a9c8:	4b27      	ldr	r3, [pc, #156]	; (800aa68 <taskGetEstimatedAltitude+0x518>)
 800a9ca:	edd3 7a00 	vldr	s15, [r3]
 800a9ce:	eeb0 0a67 	vmov.f32	s0, s15
 800a9d2:	f018 fb85 	bl	80230e0 <lrintf>
 800a9d6:	6138      	str	r0, [r7, #16]

    // set vario
    vario = applyDeadband(vel_tmp, 5);
 800a9d8:	2105      	movs	r1, #5
 800a9da:	6938      	ldr	r0, [r7, #16]
 800a9dc:	f7ff f918 	bl	8009c10 <applyDeadband>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	4a28      	ldr	r2, [pc, #160]	; (800aa84 <taskGetEstimatedAltitude+0x534>)
 800a9e4:	6013      	str	r3, [r2, #0]

    if (tiltAngle < 800) { // only calculate pid if the copters thrust is facing downwards(<80deg)
 800a9e6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a9ea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800a9ee:	f280 80b2 	bge.w	800ab56 <taskGetEstimatedAltitude+0x606>
        // Altitude P-Controller
        if (!velocityControl) {
 800a9f2:	4b25      	ldr	r3, [pc, #148]	; (800aa88 <taskGetEstimatedAltitude+0x538>)
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d14e      	bne.n	800aa98 <taskGetEstimatedAltitude+0x548>
            error = constrain(AltHold - EstAlt, -500, 500);
 800a9fa:	4b24      	ldr	r3, [pc, #144]	; (800aa8c <taskGetEstimatedAltitude+0x53c>)
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	4b1d      	ldr	r3, [pc, #116]	; (800aa74 <taskGetEstimatedAltitude+0x524>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800aa08:	4921      	ldr	r1, [pc, #132]	; (800aa90 <taskGetEstimatedAltitude+0x540>)
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7f9 f858 	bl	8003ac0 <constrain>
 800aa10:	60f8      	str	r0, [r7, #12]
            error = applyDeadband(error, 10);       // remove small P parametr to reduce noise near zero position
 800aa12:	210a      	movs	r1, #10
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f7ff f8fb 	bl	8009c10 <applyDeadband>
 800aa1a:	60f8      	str	r0, [r7, #12]
            setVel = constrain((cfg.P8[PIDALT] * error / 128), -300, +300); // limit velocity to +/- 3 m/s
 800aa1c:	4b14      	ldr	r3, [pc, #80]	; (800aa70 <taskGetEstimatedAltitude+0x520>)
 800aa1e:	791b      	ldrb	r3, [r3, #4]
 800aa20:	461a      	mov	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	fb02 f303 	mul.w	r3, r2, r3
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	da00      	bge.n	800aa2e <taskGetEstimatedAltitude+0x4de>
 800aa2c:	337f      	adds	r3, #127	; 0x7f
 800aa2e:	11db      	asrs	r3, r3, #7
 800aa30:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aa34:	4917      	ldr	r1, [pc, #92]	; (800aa94 <taskGetEstimatedAltitude+0x544>)
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7f9 f842 	bl	8003ac0 <constrain>
 800aa3c:	6378      	str	r0, [r7, #52]	; 0x34
 800aa3e:	e02e      	b.n	800aa9e <taskGetEstimatedAltitude+0x54e>
 800aa40:	20001450 	.word	0x20001450
 800aa44:	2000145c 	.word	0x2000145c
 800aa48:	20000030 	.word	0x20000030
 800aa4c:	42c80000 	.word	0x42c80000
 800aa50:	20001458 	.word	0x20001458
 800aa54:	20001440 	.word	0x20001440
 800aa58:	358637bd 	.word	0x358637bd
 800aa5c:	20001434 	.word	0x20001434
 800aa60:	20001444 	.word	0x20001444
 800aa64:	20001480 	.word	0x20001480
 800aa68:	200014e8 	.word	0x200014e8
 800aa6c:	200014ec 	.word	0x200014ec
 800aa70:	20000e54 	.word	0x20000e54
 800aa74:	20001460 	.word	0x20001460
 800aa78:	200014f0 	.word	0x200014f0
 800aa7c:	49742400 	.word	0x49742400
 800aa80:	fffffa24 	.word	0xfffffa24
 800aa84:	20001478 	.word	0x20001478
 800aa88:	20001470 	.word	0x20001470
 800aa8c:	20001468 	.word	0x20001468
 800aa90:	fffffe0c 	.word	0xfffffe0c
 800aa94:	fffffed4 	.word	0xfffffed4
        } else {
            setVel = setVelocity;
 800aa98:	4b34      	ldr	r3, [pc, #208]	; (800ab6c <taskGetEstimatedAltitude+0x61c>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Velocity PID-Controller
        // P
        error = setVel - vel_tmp;
 800aa9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	60fb      	str	r3, [r7, #12]
        BaroPID = constrain((cfg.P8[PIDVEL] * error / 32), -300, +300);
 800aaa6:	4b32      	ldr	r3, [pc, #200]	; (800ab70 <taskGetEstimatedAltitude+0x620>)
 800aaa8:	7a9b      	ldrb	r3, [r3, #10]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	fb02 f303 	mul.w	r3, r2, r3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	da00      	bge.n	800aab8 <taskGetEstimatedAltitude+0x568>
 800aab6:	331f      	adds	r3, #31
 800aab8:	115b      	asrs	r3, r3, #5
 800aaba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aabe:	492d      	ldr	r1, [pc, #180]	; (800ab74 <taskGetEstimatedAltitude+0x624>)
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7f8 fffd 	bl	8003ac0 <constrain>
 800aac6:	4603      	mov	r3, r0
 800aac8:	4a2b      	ldr	r2, [pc, #172]	; (800ab78 <taskGetEstimatedAltitude+0x628>)
 800aaca:	6013      	str	r3, [r2, #0]

        // I
        errorVelocityI += (cfg.I8[PIDVEL] * error);
 800aacc:	4b28      	ldr	r3, [pc, #160]	; (800ab70 <taskGetEstimatedAltitude+0x620>)
 800aace:	7d1b      	ldrb	r3, [r3, #20]
 800aad0:	461a      	mov	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	fb03 f202 	mul.w	r2, r3, r2
 800aad8:	4b28      	ldr	r3, [pc, #160]	; (800ab7c <taskGetEstimatedAltitude+0x62c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4413      	add	r3, r2
 800aade:	4a27      	ldr	r2, [pc, #156]	; (800ab7c <taskGetEstimatedAltitude+0x62c>)
 800aae0:	6013      	str	r3, [r2, #0]
        errorVelocityI = constrain(errorVelocityI, -(8196 * 200), (8196 * 200));
 800aae2:	4b26      	ldr	r3, [pc, #152]	; (800ab7c <taskGetEstimatedAltitude+0x62c>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a26      	ldr	r2, [pc, #152]	; (800ab80 <taskGetEstimatedAltitude+0x630>)
 800aae8:	4926      	ldr	r1, [pc, #152]	; (800ab84 <taskGetEstimatedAltitude+0x634>)
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7f8 ffe8 	bl	8003ac0 <constrain>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	4a22      	ldr	r2, [pc, #136]	; (800ab7c <taskGetEstimatedAltitude+0x62c>)
 800aaf4:	6013      	str	r3, [r2, #0]
        BaroPID += errorVelocityI / 8196;     // I in the range of +/-200
 800aaf6:	4b21      	ldr	r3, [pc, #132]	; (800ab7c <taskGetEstimatedAltitude+0x62c>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a23      	ldr	r2, [pc, #140]	; (800ab88 <taskGetEstimatedAltitude+0x638>)
 800aafc:	fb82 1203 	smull	r1, r2, r2, r3
 800ab00:	10d2      	asrs	r2, r2, #3
 800ab02:	17db      	asrs	r3, r3, #31
 800ab04:	1ad2      	subs	r2, r2, r3
 800ab06:	4b1c      	ldr	r3, [pc, #112]	; (800ab78 <taskGetEstimatedAltitude+0x628>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	4a1a      	ldr	r2, [pc, #104]	; (800ab78 <taskGetEstimatedAltitude+0x628>)
 800ab0e:	6013      	str	r3, [r2, #0]

        // D
        BaroPID -= constrain(cfg.D8[PIDVEL] * (accZ_tmp + accZ_old) / 512, -150, 150);
 800ab10:	4b17      	ldr	r3, [pc, #92]	; (800ab70 <taskGetEstimatedAltitude+0x620>)
 800ab12:	7f9b      	ldrb	r3, [r3, #30]
 800ab14:	ee07 3a90 	vmov	s15, r3
 800ab18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab1c:	4b1b      	ldr	r3, [pc, #108]	; (800ab8c <taskGetEstimatedAltitude+0x63c>)
 800ab1e:	edd3 6a00 	vldr	s13, [r3]
 800ab22:	edd7 7a07 	vldr	s15, [r7, #28]
 800ab26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab2e:	eddf 6a18 	vldr	s13, [pc, #96]	; 800ab90 <taskGetEstimatedAltitude+0x640>
 800ab32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ab36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab3a:	2296      	movs	r2, #150	; 0x96
 800ab3c:	f06f 0195 	mvn.w	r1, #149	; 0x95
 800ab40:	ee17 0a90 	vmov	r0, s15
 800ab44:	f7f8 ffbc 	bl	8003ac0 <constrain>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	4b0b      	ldr	r3, [pc, #44]	; (800ab78 <taskGetEstimatedAltitude+0x628>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	1a9b      	subs	r3, r3, r2
 800ab50:	4a09      	ldr	r2, [pc, #36]	; (800ab78 <taskGetEstimatedAltitude+0x628>)
 800ab52:	6013      	str	r3, [r2, #0]
 800ab54:	e002      	b.n	800ab5c <taskGetEstimatedAltitude+0x60c>

    } else {
        BaroPID = 0;
 800ab56:	4b08      	ldr	r3, [pc, #32]	; (800ab78 <taskGetEstimatedAltitude+0x628>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	601a      	str	r2, [r3, #0]
    }

    accZ_old = accZ_tmp;
 800ab5c:	4a0b      	ldr	r2, [pc, #44]	; (800ab8c <taskGetEstimatedAltitude+0x63c>)
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	6013      	str	r3, [r2, #0]

    return 1;
 800ab62:	2301      	movs	r3, #1
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3738      	adds	r7, #56	; 0x38
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	2000146c 	.word	0x2000146c
 800ab70:	20000e54 	.word	0x20000e54
 800ab74:	fffffed4 	.word	0xfffffed4
 800ab78:	20001464 	.word	0x20001464
 800ab7c:	20001474 	.word	0x20001474
 800ab80:	00190320 	.word	0x00190320
 800ab84:	ffe6fce0 	.word	0xffe6fce0
 800ab88:	003ff801 	.word	0x003ff801
 800ab8c:	200014f4 	.word	0x200014f4
 800ab90:	44000000 	.word	0x44000000

0800ab94 <servoMiddle>:
    { 0, NULL },                // MULTITYPE_CUSTOM_PLANE
};


int16_t servoMiddle(int nr)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
    // Normally, servo.middle is a value between 1000..2000, but for the purposes of stupid, if it's less than
    // the number of RC channels, it means the center value is taken FROM that RC channel (by its index)
    if (cfg.servoConf[nr].middle < RC_CHANS && nr < MAX_SERVOS)
 800ab9c:	4916      	ldr	r1, [pc, #88]	; (800abf8 <servoMiddle+0x64>)
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	4613      	mov	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4413      	add	r3, r2
 800aba6:	005b      	lsls	r3, r3, #1
 800aba8:	440b      	add	r3, r1
 800abaa:	33bc      	adds	r3, #188	; 0xbc
 800abac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abb0:	2b11      	cmp	r3, #17
 800abb2:	dc11      	bgt.n	800abd8 <servoMiddle+0x44>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b07      	cmp	r3, #7
 800abb8:	dc0e      	bgt.n	800abd8 <servoMiddle+0x44>
        return rcData[cfg.servoConf[nr].middle];
 800abba:	490f      	ldr	r1, [pc, #60]	; (800abf8 <servoMiddle+0x64>)
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	4613      	mov	r3, r2
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	4413      	add	r3, r2
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	440b      	add	r3, r1
 800abc8:	33bc      	adds	r3, #188	; 0xbc
 800abca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abce:	461a      	mov	r2, r3
 800abd0:	4b0a      	ldr	r3, [pc, #40]	; (800abfc <servoMiddle+0x68>)
 800abd2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800abd6:	e009      	b.n	800abec <servoMiddle+0x58>
    else
        return cfg.servoConf[nr].middle;
 800abd8:	4907      	ldr	r1, [pc, #28]	; (800abf8 <servoMiddle+0x64>)
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	4613      	mov	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	005b      	lsls	r3, r3, #1
 800abe4:	440b      	add	r3, r1
 800abe6:	33bc      	adds	r3, #188	; 0xbc
 800abe8:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800abec:	4618      	mov	r0, r3
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr
 800abf8:	20000e54 	.word	0x20000e54
 800abfc:	2000172c 	.word	0x2000172c

0800ac00 <servoDirection>:

int servoDirection(int nr, int lr)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
    // load the direction from the direction field of the servo
    if (cfg.servoConf[nr].direction & (1 << lr))
 800ac0a:	490d      	ldr	r1, [pc, #52]	; (800ac40 <servoDirection+0x40>)
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	4613      	mov	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	005b      	lsls	r3, r3, #1
 800ac16:	440b      	add	r3, r1
 800ac18:	33c0      	adds	r3, #192	; 0xc0
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	fa42 f303 	asr.w	r3, r2, r3
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <servoDirection+0x32>
        return -1;
 800ac2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac30:	e000      	b.n	800ac34 <servoDirection+0x34>
    else
        return 1;
 800ac32:	2301      	movs	r3, #1
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr
 800ac40:	20000e54 	.word	0x20000e54

0800ac44 <loadCustomServoMixer>:

void loadCustomServoMixer(void)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
    uint8_t i;

    // reset settings
    numberRules = 0;
 800ac4a:	4b1e      	ldr	r3, [pc, #120]	; (800acc4 <loadCustomServoMixer+0x80>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	701a      	strb	r2, [r3, #0]
    memset(currentServoMixer, 0, sizeof(currentServoMixer));
 800ac50:	2270      	movs	r2, #112	; 0x70
 800ac52:	2100      	movs	r1, #0
 800ac54:	481c      	ldr	r0, [pc, #112]	; (800acc8 <loadCustomServoMixer+0x84>)
 800ac56:	f017 ff1f 	bl	8022a98 <memset>

    // load custom mixer into currentServoMixer
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	71fb      	strb	r3, [r7, #7]
 800ac5e:	e028      	b.n	800acb2 <loadCustomServoMixer+0x6e>
        // check if done
        if (mcfg.customServoMixer[i].rate == 0)
 800ac60:	79fa      	ldrb	r2, [r7, #7]
 800ac62:	491a      	ldr	r1, [pc, #104]	; (800accc <loadCustomServoMixer+0x88>)
 800ac64:	4613      	mov	r3, r2
 800ac66:	00db      	lsls	r3, r3, #3
 800ac68:	1a9b      	subs	r3, r3, r2
 800ac6a:	440b      	add	r3, r1
 800ac6c:	33d2      	adds	r3, #210	; 0xd2
 800ac6e:	f993 3000 	ldrsb.w	r3, [r3]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d021      	beq.n	800acba <loadCustomServoMixer+0x76>
            break;
        currentServoMixer[i] = mcfg.customServoMixer[i];
 800ac76:	79fa      	ldrb	r2, [r7, #7]
 800ac78:	79f9      	ldrb	r1, [r7, #7]
 800ac7a:	4813      	ldr	r0, [pc, #76]	; (800acc8 <loadCustomServoMixer+0x84>)
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	00db      	lsls	r3, r3, #3
 800ac80:	1a5b      	subs	r3, r3, r1
 800ac82:	4418      	add	r0, r3
 800ac84:	4911      	ldr	r1, [pc, #68]	; (800accc <loadCustomServoMixer+0x88>)
 800ac86:	4613      	mov	r3, r2
 800ac88:	00db      	lsls	r3, r3, #3
 800ac8a:	1a9b      	subs	r3, r3, r2
 800ac8c:	440b      	add	r3, r1
 800ac8e:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800ac92:	4603      	mov	r3, r0
 800ac94:	6811      	ldr	r1, [r2, #0]
 800ac96:	6019      	str	r1, [r3, #0]
 800ac98:	8891      	ldrh	r1, [r2, #4]
 800ac9a:	7992      	ldrb	r2, [r2, #6]
 800ac9c:	8099      	strh	r1, [r3, #4]
 800ac9e:	719a      	strb	r2, [r3, #6]
        numberRules++;
 800aca0:	4b08      	ldr	r3, [pc, #32]	; (800acc4 <loadCustomServoMixer+0x80>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	3301      	adds	r3, #1
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	4b06      	ldr	r3, [pc, #24]	; (800acc4 <loadCustomServoMixer+0x80>)
 800acaa:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800acac:	79fb      	ldrb	r3, [r7, #7]
 800acae:	3301      	adds	r3, #1
 800acb0:	71fb      	strb	r3, [r7, #7]
 800acb2:	79fb      	ldrb	r3, [r7, #7]
 800acb4:	2b0f      	cmp	r3, #15
 800acb6:	d9d3      	bls.n	800ac60 <loadCustomServoMixer+0x1c>
    }
}
 800acb8:	e000      	b.n	800acbc <loadCustomServoMixer+0x78>
            break;
 800acba:	bf00      	nop
}
 800acbc:	bf00      	nop
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	20001559 	.word	0x20001559
 800acc8:	2000164c 	.word	0x2000164c
 800accc:	200008e8 	.word	0x200008e8

0800acd0 <mixerInit>:

void mixerInit(void)
{
 800acd0:	b590      	push	{r4, r7, lr}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
    int i;

    // enable servos for mixes that require them. note, this shifts motor counts.
    core.useServo = mixers[mcfg.mixerConfiguration].useServo;
 800acd6:	4b8b      	ldr	r3, [pc, #556]	; (800af04 <mixerInit+0x234>)
 800acd8:	795b      	ldrb	r3, [r3, #5]
 800acda:	4a8b      	ldr	r2, [pc, #556]	; (800af08 <mixerInit+0x238>)
 800acdc:	00db      	lsls	r3, r3, #3
 800acde:	4413      	add	r3, r2
 800ace0:	785b      	ldrb	r3, [r3, #1]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	bf14      	ite	ne
 800ace6:	2301      	movne	r3, #1
 800ace8:	2300      	moveq	r3, #0
 800acea:	b2da      	uxtb	r2, r3
 800acec:	4b87      	ldr	r3, [pc, #540]	; (800af0c <mixerInit+0x23c>)
 800acee:	755a      	strb	r2, [r3, #21]
    // if we want camstab/trig, that also enables servos, even if mixer doesn't
    if (feature(FEATURE_SERVO_TILT))
 800acf0:	2020      	movs	r0, #32
 800acf2:	f7fc f849 	bl	8006d88 <feature>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <mixerInit+0x32>
        core.useServo = 1;
 800acfc:	4b83      	ldr	r3, [pc, #524]	; (800af0c <mixerInit+0x23c>)
 800acfe:	2201      	movs	r2, #1
 800ad00:	755a      	strb	r2, [r3, #21]

    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM) {
 800ad02:	4b80      	ldr	r3, [pc, #512]	; (800af04 <mixerInit+0x234>)
 800ad04:	795b      	ldrb	r3, [r3, #5]
 800ad06:	2b17      	cmp	r3, #23
 800ad08:	d128      	bne.n	800ad5c <mixerInit+0x8c>
        // load custom mixer into currentMixer
        for (i = 0; i < MAX_MOTORS; i++) {
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	607b      	str	r3, [r7, #4]
 800ad0e:	e021      	b.n	800ad54 <mixerInit+0x84>
            // check if done
            if (mcfg.customMixer[i].throttle == 0.0f)
 800ad10:	4a7c      	ldr	r2, [pc, #496]	; (800af04 <mixerInit+0x234>)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	3301      	adds	r3, #1
 800ad16:	011b      	lsls	r3, r3, #4
 800ad18:	4413      	add	r3, r2
 800ad1a:	edd3 7a00 	vldr	s15, [r3]
 800ad1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ad22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad26:	d048      	beq.n	800adba <mixerInit+0xea>
                break;
            currentMixer[i] = mcfg.customMixer[i];
 800ad28:	4a79      	ldr	r2, [pc, #484]	; (800af10 <mixerInit+0x240>)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	011b      	lsls	r3, r3, #4
 800ad2e:	18d1      	adds	r1, r2, r3
 800ad30:	4a74      	ldr	r2, [pc, #464]	; (800af04 <mixerInit+0x234>)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	3301      	adds	r3, #1
 800ad36:	011b      	lsls	r3, r3, #4
 800ad38:	4413      	add	r3, r2
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            numberMotor++;
 800ad42:	4b74      	ldr	r3, [pc, #464]	; (800af14 <mixerInit+0x244>)
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	3301      	adds	r3, #1
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	4b72      	ldr	r3, [pc, #456]	; (800af14 <mixerInit+0x244>)
 800ad4c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++) {
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	3301      	adds	r3, #1
 800ad52:	607b      	str	r3, [r7, #4]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b0b      	cmp	r3, #11
 800ad58:	ddda      	ble.n	800ad10 <mixerInit+0x40>
 800ad5a:	e02f      	b.n	800adbc <mixerInit+0xec>
        }
    } else {
        numberMotor = mixers[mcfg.mixerConfiguration].numberMotor;
 800ad5c:	4b69      	ldr	r3, [pc, #420]	; (800af04 <mixerInit+0x234>)
 800ad5e:	795b      	ldrb	r3, [r3, #5]
 800ad60:	461a      	mov	r2, r3
 800ad62:	4b69      	ldr	r3, [pc, #420]	; (800af08 <mixerInit+0x238>)
 800ad64:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800ad68:	4b6a      	ldr	r3, [pc, #424]	; (800af14 <mixerInit+0x244>)
 800ad6a:	701a      	strb	r2, [r3, #0]
        // copy motor-based mixers
        if (mixers[mcfg.mixerConfiguration].motor) {
 800ad6c:	4b65      	ldr	r3, [pc, #404]	; (800af04 <mixerInit+0x234>)
 800ad6e:	795b      	ldrb	r3, [r3, #5]
 800ad70:	4a65      	ldr	r2, [pc, #404]	; (800af08 <mixerInit+0x238>)
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	4413      	add	r3, r2
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d01f      	beq.n	800adbc <mixerInit+0xec>
            for (i = 0; i < numberMotor; i++)
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	607b      	str	r3, [r7, #4]
 800ad80:	e014      	b.n	800adac <mixerInit+0xdc>
                currentMixer[i] = mixers[mcfg.mixerConfiguration].motor[i];
 800ad82:	4b60      	ldr	r3, [pc, #384]	; (800af04 <mixerInit+0x234>)
 800ad84:	795b      	ldrb	r3, [r3, #5]
 800ad86:	4a60      	ldr	r2, [pc, #384]	; (800af08 <mixerInit+0x238>)
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	4413      	add	r3, r2
 800ad8c:	685a      	ldr	r2, [r3, #4]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	011b      	lsls	r3, r3, #4
 800ad92:	18d1      	adds	r1, r2, r3
 800ad94:	4a5e      	ldr	r2, [pc, #376]	; (800af10 <mixerInit+0x240>)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	011b      	lsls	r3, r3, #4
 800ad9a:	4413      	add	r3, r2
 800ad9c:	461c      	mov	r4, r3
 800ad9e:	460b      	mov	r3, r1
 800ada0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ada2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (i = 0; i < numberMotor; i++)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	3301      	adds	r3, #1
 800adaa:	607b      	str	r3, [r7, #4]
 800adac:	4b59      	ldr	r3, [pc, #356]	; (800af14 <mixerInit+0x244>)
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	461a      	mov	r2, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4293      	cmp	r3, r2
 800adb6:	dbe4      	blt.n	800ad82 <mixerInit+0xb2>
 800adb8:	e000      	b.n	800adbc <mixerInit+0xec>
                break;
 800adba:	bf00      	nop
        }
    }

    if (core.useServo) {
 800adbc:	4b53      	ldr	r3, [pc, #332]	; (800af0c <mixerInit+0x23c>)
 800adbe:	7d5b      	ldrb	r3, [r3, #21]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d033      	beq.n	800ae2c <mixerInit+0x15c>
        numberRules = servoMixers[mcfg.mixerConfiguration].numberRules;
 800adc4:	4b4f      	ldr	r3, [pc, #316]	; (800af04 <mixerInit+0x234>)
 800adc6:	795b      	ldrb	r3, [r3, #5]
 800adc8:	461a      	mov	r2, r3
 800adca:	4b53      	ldr	r3, [pc, #332]	; (800af18 <mixerInit+0x248>)
 800adcc:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800add0:	4b52      	ldr	r3, [pc, #328]	; (800af1c <mixerInit+0x24c>)
 800add2:	701a      	strb	r2, [r3, #0]
        if (servoMixers[mcfg.mixerConfiguration].rule) {
 800add4:	4b4b      	ldr	r3, [pc, #300]	; (800af04 <mixerInit+0x234>)
 800add6:	795b      	ldrb	r3, [r3, #5]
 800add8:	4a4f      	ldr	r2, [pc, #316]	; (800af18 <mixerInit+0x248>)
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	4413      	add	r3, r2
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d023      	beq.n	800ae2c <mixerInit+0x15c>
            for (i = 0; i < numberRules; i++)
 800ade4:	2300      	movs	r3, #0
 800ade6:	607b      	str	r3, [r7, #4]
 800ade8:	e01a      	b.n	800ae20 <mixerInit+0x150>
                currentServoMixer[i] = servoMixers[mcfg.mixerConfiguration].rule[i];
 800adea:	4b46      	ldr	r3, [pc, #280]	; (800af04 <mixerInit+0x234>)
 800adec:	795b      	ldrb	r3, [r3, #5]
 800adee:	4a4a      	ldr	r2, [pc, #296]	; (800af18 <mixerInit+0x248>)
 800adf0:	00db      	lsls	r3, r3, #3
 800adf2:	4413      	add	r3, r2
 800adf4:	6859      	ldr	r1, [r3, #4]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	4613      	mov	r3, r2
 800adfa:	00db      	lsls	r3, r3, #3
 800adfc:	1a9b      	subs	r3, r3, r2
 800adfe:	18c8      	adds	r0, r1, r3
 800ae00:	4947      	ldr	r1, [pc, #284]	; (800af20 <mixerInit+0x250>)
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	4613      	mov	r3, r2
 800ae06:	00db      	lsls	r3, r3, #3
 800ae08:	1a9b      	subs	r3, r3, r2
 800ae0a:	440b      	add	r3, r1
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	6811      	ldr	r1, [r2, #0]
 800ae10:	6019      	str	r1, [r3, #0]
 800ae12:	8891      	ldrh	r1, [r2, #4]
 800ae14:	7992      	ldrb	r2, [r2, #6]
 800ae16:	8099      	strh	r1, [r3, #4]
 800ae18:	719a      	strb	r2, [r3, #6]
            for (i = 0; i < numberRules; i++)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	607b      	str	r3, [r7, #4]
 800ae20:	4b3e      	ldr	r3, [pc, #248]	; (800af1c <mixerInit+0x24c>)
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	461a      	mov	r2, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	dbde      	blt.n	800adea <mixerInit+0x11a>
        }
    }

    // in 3D mode, mixer gain has to be halved
    if (feature(FEATURE_3D)) {
 800ae2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ae30:	f7fb ffaa 	bl	8006d88 <feature>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d045      	beq.n	800aec6 <mixerInit+0x1f6>
        if (numberMotor > 1) {
 800ae3a:	4b36      	ldr	r3, [pc, #216]	; (800af14 <mixerInit+0x244>)
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d941      	bls.n	800aec6 <mixerInit+0x1f6>
            for (i = 0; i < numberMotor; i++) {
 800ae42:	2300      	movs	r3, #0
 800ae44:	607b      	str	r3, [r7, #4]
 800ae46:	e038      	b.n	800aeba <mixerInit+0x1ea>
                currentMixer[i].pitch *= 0.5f;
 800ae48:	4a31      	ldr	r2, [pc, #196]	; (800af10 <mixerInit+0x240>)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	011b      	lsls	r3, r3, #4
 800ae4e:	4413      	add	r3, r2
 800ae50:	3308      	adds	r3, #8
 800ae52:	edd3 7a00 	vldr	s15, [r3]
 800ae56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ae5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae5e:	4a2c      	ldr	r2, [pc, #176]	; (800af10 <mixerInit+0x240>)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	011b      	lsls	r3, r3, #4
 800ae64:	4413      	add	r3, r2
 800ae66:	3308      	adds	r3, #8
 800ae68:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].roll *= 0.5f;
 800ae6c:	4a28      	ldr	r2, [pc, #160]	; (800af10 <mixerInit+0x240>)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	011b      	lsls	r3, r3, #4
 800ae72:	4413      	add	r3, r2
 800ae74:	3304      	adds	r3, #4
 800ae76:	edd3 7a00 	vldr	s15, [r3]
 800ae7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ae7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae82:	4a23      	ldr	r2, [pc, #140]	; (800af10 <mixerInit+0x240>)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	011b      	lsls	r3, r3, #4
 800ae88:	4413      	add	r3, r2
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].yaw *= 0.5f;
 800ae90:	4a1f      	ldr	r2, [pc, #124]	; (800af10 <mixerInit+0x240>)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	011b      	lsls	r3, r3, #4
 800ae96:	4413      	add	r3, r2
 800ae98:	330c      	adds	r3, #12
 800ae9a:	edd3 7a00 	vldr	s15, [r3]
 800ae9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800aea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aea6:	4a1a      	ldr	r2, [pc, #104]	; (800af10 <mixerInit+0x240>)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	011b      	lsls	r3, r3, #4
 800aeac:	4413      	add	r3, r2
 800aeae:	330c      	adds	r3, #12
 800aeb0:	edc3 7a00 	vstr	s15, [r3]
            for (i = 0; i < numberMotor; i++) {
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	607b      	str	r3, [r7, #4]
 800aeba:	4b16      	ldr	r3, [pc, #88]	; (800af14 <mixerInit+0x244>)
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4293      	cmp	r3, r2
 800aec4:	dbc0      	blt.n	800ae48 <mixerInit+0x178>
            }
        }
    }

    // set flag that we're on something with wings
    if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800aec6:	4b0f      	ldr	r3, [pc, #60]	; (800af04 <mixerInit+0x234>)
 800aec8:	795b      	ldrb	r3, [r3, #5]
 800aeca:	2b08      	cmp	r3, #8
 800aecc:	d007      	beq.n	800aede <mixerInit+0x20e>
 800aece:	4b0d      	ldr	r3, [pc, #52]	; (800af04 <mixerInit+0x234>)
 800aed0:	795b      	ldrb	r3, [r3, #5]
 800aed2:	2b0e      	cmp	r3, #14
 800aed4:	d003      	beq.n	800aede <mixerInit+0x20e>
 800aed6:	4b0b      	ldr	r3, [pc, #44]	; (800af04 <mixerInit+0x234>)
 800aed8:	795b      	ldrb	r3, [r3, #5]
 800aeda:	2b18      	cmp	r3, #24
 800aedc:	d109      	bne.n	800aef2 <mixerInit+0x222>
        f.FIXED_WING = 1;
 800aede:	4b11      	ldr	r3, [pc, #68]	; (800af24 <mixerInit+0x254>)
 800aee0:	2201      	movs	r2, #1
 800aee2:	741a      	strb	r2, [r3, #16]

        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800aee4:	4b07      	ldr	r3, [pc, #28]	; (800af04 <mixerInit+0x234>)
 800aee6:	795b      	ldrb	r3, [r3, #5]
 800aee8:	2b18      	cmp	r3, #24
 800aeea:	d105      	bne.n	800aef8 <mixerInit+0x228>
            loadCustomServoMixer();
 800aeec:	f7ff feaa 	bl	800ac44 <loadCustomServoMixer>
        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800aef0:	e002      	b.n	800aef8 <mixerInit+0x228>
    } else
        f.FIXED_WING = 0;
 800aef2:	4b0c      	ldr	r3, [pc, #48]	; (800af24 <mixerInit+0x254>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	741a      	strb	r2, [r3, #16]

    mixerResetMotors();
 800aef8:	f000 f816 	bl	800af28 <mixerResetMotors>
}
 800aefc:	bf00      	nop
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	bd90      	pop	{r4, r7, pc}
 800af04:	200008e8 	.word	0x200008e8
 800af08:	08028ce0 	.word	0x08028ce0
 800af0c:	20000830 	.word	0x20000830
 800af10:	2000158c 	.word	0x2000158c
 800af14:	20001558 	.word	0x20001558
 800af18:	08028e4c 	.word	0x08028e4c
 800af1c:	20001559 	.word	0x20001559
 800af20:	2000164c 	.word	0x2000164c
 800af24:	200016f4 	.word	0x200016f4

0800af28 <mixerResetMotors>:

void mixerResetMotors(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
    int i;
    // set disarmed motor values
    for (i = 0; i < MAX_MOTORS; i++)
 800af2e:	2300      	movs	r3, #0
 800af30:	607b      	str	r3, [r7, #4]
 800af32:	e016      	b.n	800af62 <mixerResetMotors+0x3a>
        motor_disarmed[i] = feature(FEATURE_3D) ? mcfg.neutral3d : mcfg.mincommand;
 800af34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800af38:	f7fb ff26 	bl	8006d88 <feature>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d004      	beq.n	800af4c <mixerResetMotors+0x24>
 800af42:	4b0c      	ldr	r3, [pc, #48]	; (800af74 <mixerResetMotors+0x4c>)
 800af44:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800af48:	b21b      	sxth	r3, r3
 800af4a:	e003      	b.n	800af54 <mixerResetMotors+0x2c>
 800af4c:	4b09      	ldr	r3, [pc, #36]	; (800af74 <mixerResetMotors+0x4c>)
 800af4e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800af52:	b21b      	sxth	r3, r3
 800af54:	4908      	ldr	r1, [pc, #32]	; (800af78 <mixerResetMotors+0x50>)
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
    for (i = 0; i < MAX_MOTORS; i++)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3301      	adds	r3, #1
 800af60:	607b      	str	r3, [r7, #4]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b0b      	cmp	r3, #11
 800af66:	dde5      	ble.n	800af34 <mixerResetMotors+0xc>
}
 800af68:	bf00      	nop
 800af6a:	bf00      	nop
 800af6c:	3708      	adds	r7, #8
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	200008e8 	.word	0x200008e8
 800af78:	20001574 	.word	0x20001574

0800af7c <servoMixerLoadMix>:

void servoMixerLoadMix(int index)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3301      	adds	r3, #1
 800af88:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
 800af8e:	e038      	b.n	800b002 <servoMixerLoadMix+0x86>
        mcfg.customServoMixer[i].targetChannel = mcfg.customServoMixer[i].fromChannel = mcfg.customServoMixer[i].rate = mcfg.customServoMixer[i].box = 0;
 800af90:	4934      	ldr	r1, [pc, #208]	; (800b064 <servoMixerLoadMix+0xe8>)
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	4613      	mov	r3, r2
 800af96:	00db      	lsls	r3, r3, #3
 800af98:	1a9b      	subs	r3, r3, r2
 800af9a:	440b      	add	r3, r1
 800af9c:	33d6      	adds	r3, #214	; 0xd6
 800af9e:	2200      	movs	r2, #0
 800afa0:	701a      	strb	r2, [r3, #0]
 800afa2:	4930      	ldr	r1, [pc, #192]	; (800b064 <servoMixerLoadMix+0xe8>)
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	4613      	mov	r3, r2
 800afa8:	00db      	lsls	r3, r3, #3
 800afaa:	1a9b      	subs	r3, r3, r2
 800afac:	440b      	add	r3, r1
 800afae:	33d2      	adds	r3, #210	; 0xd2
 800afb0:	2200      	movs	r2, #0
 800afb2:	701a      	strb	r2, [r3, #0]
 800afb4:	492b      	ldr	r1, [pc, #172]	; (800b064 <servoMixerLoadMix+0xe8>)
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	4613      	mov	r3, r2
 800afba:	00db      	lsls	r3, r3, #3
 800afbc:	1a9b      	subs	r3, r3, r2
 800afbe:	440b      	add	r3, r1
 800afc0:	33d2      	adds	r3, #210	; 0xd2
 800afc2:	f993 3000 	ldrsb.w	r3, [r3]
 800afc6:	b2d8      	uxtb	r0, r3
 800afc8:	4926      	ldr	r1, [pc, #152]	; (800b064 <servoMixerLoadMix+0xe8>)
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	4613      	mov	r3, r2
 800afce:	00db      	lsls	r3, r3, #3
 800afd0:	1a9b      	subs	r3, r3, r2
 800afd2:	440b      	add	r3, r1
 800afd4:	33d1      	adds	r3, #209	; 0xd1
 800afd6:	4602      	mov	r2, r0
 800afd8:	701a      	strb	r2, [r3, #0]
 800afda:	4922      	ldr	r1, [pc, #136]	; (800b064 <servoMixerLoadMix+0xe8>)
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	4613      	mov	r3, r2
 800afe0:	00db      	lsls	r3, r3, #3
 800afe2:	1a9b      	subs	r3, r3, r2
 800afe4:	440b      	add	r3, r1
 800afe6:	33d1      	adds	r3, #209	; 0xd1
 800afe8:	7818      	ldrb	r0, [r3, #0]
 800afea:	491e      	ldr	r1, [pc, #120]	; (800b064 <servoMixerLoadMix+0xe8>)
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	4613      	mov	r3, r2
 800aff0:	00db      	lsls	r3, r3, #3
 800aff2:	1a9b      	subs	r3, r3, r2
 800aff4:	440b      	add	r3, r1
 800aff6:	33d0      	adds	r3, #208	; 0xd0
 800aff8:	4602      	mov	r2, r0
 800affa:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	3301      	adds	r3, #1
 800b000:	60fb      	str	r3, [r7, #12]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2b0f      	cmp	r3, #15
 800b006:	ddc3      	ble.n	800af90 <servoMixerLoadMix+0x14>

    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b008:	2300      	movs	r3, #0
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	e01a      	b.n	800b044 <servoMixerLoadMix+0xc8>
        mcfg.customServoMixer[i] = servoMixers[index].rule[i];
 800b00e:	4a16      	ldr	r2, [pc, #88]	; (800b068 <servoMixerLoadMix+0xec>)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	00db      	lsls	r3, r3, #3
 800b014:	4413      	add	r3, r2
 800b016:	6859      	ldr	r1, [r3, #4]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	4613      	mov	r3, r2
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	1a9b      	subs	r3, r3, r2
 800b020:	18c8      	adds	r0, r1, r3
 800b022:	4910      	ldr	r1, [pc, #64]	; (800b064 <servoMixerLoadMix+0xe8>)
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	4613      	mov	r3, r2
 800b028:	00db      	lsls	r3, r3, #3
 800b02a:	1a9b      	subs	r3, r3, r2
 800b02c:	440b      	add	r3, r1
 800b02e:	33d0      	adds	r3, #208	; 0xd0
 800b030:	4602      	mov	r2, r0
 800b032:	6811      	ldr	r1, [r2, #0]
 800b034:	6019      	str	r1, [r3, #0]
 800b036:	8891      	ldrh	r1, [r2, #4]
 800b038:	7992      	ldrb	r2, [r2, #6]
 800b03a:	8099      	strh	r1, [r3, #4]
 800b03c:	719a      	strb	r2, [r3, #6]
    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	3301      	adds	r3, #1
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	4a08      	ldr	r2, [pc, #32]	; (800b068 <servoMixerLoadMix+0xec>)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b04c:	461a      	mov	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	4293      	cmp	r3, r2
 800b052:	dbdc      	blt.n	800b00e <servoMixerLoadMix+0x92>
}
 800b054:	bf00      	nop
 800b056:	bf00      	nop
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	200008e8 	.word	0x200008e8
 800b068:	08028e4c 	.word	0x08028e4c

0800b06c <mixerLoadMix>:

void mixerLoadMix(int index)
{
 800b06c:	b490      	push	{r4, r7}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3301      	adds	r3, #1
 800b078:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_MOTORS; i++)
 800b07a:	2300      	movs	r3, #0
 800b07c:	60fb      	str	r3, [r7, #12]
 800b07e:	e00a      	b.n	800b096 <mixerLoadMix+0x2a>
        mcfg.customMixer[i].throttle = 0.0f;
 800b080:	4a1c      	ldr	r2, [pc, #112]	; (800b0f4 <mixerLoadMix+0x88>)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	3301      	adds	r3, #1
 800b086:	011b      	lsls	r3, r3, #4
 800b088:	4413      	add	r3, r2
 800b08a:	f04f 0200 	mov.w	r2, #0
 800b08e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	3301      	adds	r3, #1
 800b094:	60fb      	str	r3, [r7, #12]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2b0b      	cmp	r3, #11
 800b09a:	ddf1      	ble.n	800b080 <mixerLoadMix+0x14>

    // do we have anything here to begin with?
    if (mixers[index].motor != NULL) {
 800b09c:	4a16      	ldr	r2, [pc, #88]	; (800b0f8 <mixerLoadMix+0x8c>)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	00db      	lsls	r3, r3, #3
 800b0a2:	4413      	add	r3, r2
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d01f      	beq.n	800b0ea <mixerLoadMix+0x7e>
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60fb      	str	r3, [r7, #12]
 800b0ae:	e014      	b.n	800b0da <mixerLoadMix+0x6e>
            mcfg.customMixer[i] = mixers[index].motor[i];
 800b0b0:	4a11      	ldr	r2, [pc, #68]	; (800b0f8 <mixerLoadMix+0x8c>)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	00db      	lsls	r3, r3, #3
 800b0b6:	4413      	add	r3, r2
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	011b      	lsls	r3, r3, #4
 800b0be:	18d1      	adds	r1, r2, r3
 800b0c0:	4a0c      	ldr	r2, [pc, #48]	; (800b0f4 <mixerLoadMix+0x88>)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	011b      	lsls	r3, r3, #4
 800b0c8:	4413      	add	r3, r2
 800b0ca:	461c      	mov	r4, r3
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b0d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	60fb      	str	r3, [r7, #12]
 800b0da:	4a07      	ldr	r2, [pc, #28]	; (800b0f8 <mixerLoadMix+0x8c>)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	dbe2      	blt.n	800b0b0 <mixerLoadMix+0x44>
    }
}
 800b0ea:	bf00      	nop
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bc90      	pop	{r4, r7}
 800b0f2:	4770      	bx	lr
 800b0f4:	200008e8 	.word	0x200008e8
 800b0f8:	08028ce0 	.word	0x08028ce0

0800b0fc <writeServos>:

void writeServos(void)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	af00      	add	r7, sp, #0
    if (!core.useServo)
 800b100:	4b95      	ldr	r3, [pc, #596]	; (800b358 <writeServos+0x25c>)
 800b102:	7d5b      	ldrb	r3, [r3, #21]
 800b104:	f083 0301 	eor.w	r3, r3, #1
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	f040 811d 	bne.w	800b34a <writeServos+0x24e>
        return;

    switch (mcfg.mixerConfiguration) {
 800b110:	4b92      	ldr	r3, [pc, #584]	; (800b35c <writeServos+0x260>)
 800b112:	795b      	ldrb	r3, [r3, #5]
 800b114:	3b01      	subs	r3, #1
 800b116:	2b17      	cmp	r3, #23
 800b118:	f200 8100 	bhi.w	800b31c <writeServos+0x220>
 800b11c:	a201      	add	r2, pc, #4	; (adr r2, 800b124 <writeServos+0x28>)
 800b11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b122:	bf00      	nop
 800b124:	0800b1a7 	.word	0x0800b1a7
 800b128:	0800b31d 	.word	0x0800b31d
 800b12c:	0800b31d 	.word	0x0800b31d
 800b130:	0800b185 	.word	0x0800b185
 800b134:	0800b1e7 	.word	0x0800b1e7
 800b138:	0800b31d 	.word	0x0800b31d
 800b13c:	0800b31d 	.word	0x0800b31d
 800b140:	0800b22b 	.word	0x0800b22b
 800b144:	0800b31d 	.word	0x0800b31d
 800b148:	0800b31d 	.word	0x0800b31d
 800b14c:	0800b31d 	.word	0x0800b31d
 800b150:	0800b31d 	.word	0x0800b31d
 800b154:	0800b31d 	.word	0x0800b31d
 800b158:	0800b24d 	.word	0x0800b24d
 800b15c:	0800b31d 	.word	0x0800b31d
 800b160:	0800b31d 	.word	0x0800b31d
 800b164:	0800b31d 	.word	0x0800b31d
 800b168:	0800b31d 	.word	0x0800b31d
 800b16c:	0800b31d 	.word	0x0800b31d
 800b170:	0800b209 	.word	0x0800b209
 800b174:	0800b24d 	.word	0x0800b24d
 800b178:	0800b31d 	.word	0x0800b31d
 800b17c:	0800b31d 	.word	0x0800b31d
 800b180:	0800b28f 	.word	0x0800b28f
        case MULTITYPE_BI:
        	actPwmWriteServo(0, servo[4]);
 800b184:	4b76      	ldr	r3, [pc, #472]	; (800b360 <writeServos+0x264>)
 800b186:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	4619      	mov	r1, r3
 800b18e:	2000      	movs	r0, #0
 800b190:	f7f6 fd38 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b194:	4b72      	ldr	r3, [pc, #456]	; (800b360 <writeServos+0x264>)
 800b196:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	4619      	mov	r1, r3
 800b19e:	2001      	movs	r0, #1
 800b1a0:	f7f6 fd30 	bl	8001c04 <actPwmWriteServo>
            break;
 800b1a4:	e0d6      	b.n	800b354 <writeServos+0x258>

        case MULTITYPE_TRI:
            if (cfg.tri_unarmed_servo) {
 800b1a6:	4b6f      	ldr	r3, [pc, #444]	; (800b364 <writeServos+0x268>)
 800b1a8:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d008      	beq.n	800b1c2 <writeServos+0xc6>
                // if unarmed flag set, we always move servo
            	actPwmWriteServo(0, servo[5]);
 800b1b0:	4b6b      	ldr	r3, [pc, #428]	; (800b360 <writeServos+0x264>)
 800b1b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	f7f6 fd22 	bl	8001c04 <actPwmWriteServo>
                if (f.ARMED)
                	actPwmWriteServo(0, servo[5]);
                else
                	actPwmWriteServo(0, 0); // kill servo signal completely.
            }
            break;
 800b1c0:	e0c8      	b.n	800b354 <writeServos+0x258>
                if (f.ARMED)
 800b1c2:	4b69      	ldr	r3, [pc, #420]	; (800b368 <writeServos+0x26c>)
 800b1c4:	785b      	ldrb	r3, [r3, #1]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d008      	beq.n	800b1dc <writeServos+0xe0>
                	actPwmWriteServo(0, servo[5]);
 800b1ca:	4b65      	ldr	r3, [pc, #404]	; (800b360 <writeServos+0x264>)
 800b1cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	f7f6 fd15 	bl	8001c04 <actPwmWriteServo>
            break;
 800b1da:	e0bb      	b.n	800b354 <writeServos+0x258>
                	actPwmWriteServo(0, 0); // kill servo signal completely.
 800b1dc:	2100      	movs	r1, #0
 800b1de:	2000      	movs	r0, #0
 800b1e0:	f7f6 fd10 	bl	8001c04 <actPwmWriteServo>
            break;
 800b1e4:	e0b6      	b.n	800b354 <writeServos+0x258>

        case MULTITYPE_GIMBAL:
        	actPwmWriteServo(0, servo[0]);
 800b1e6:	4b5e      	ldr	r3, [pc, #376]	; (800b360 <writeServos+0x264>)
 800b1e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	f7f6 fd07 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[1]);
 800b1f6:	4b5a      	ldr	r3, [pc, #360]	; (800b360 <writeServos+0x264>)
 800b1f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	4619      	mov	r1, r3
 800b200:	2001      	movs	r0, #1
 800b202:	f7f6 fcff 	bl	8001c04 <actPwmWriteServo>
            break;
 800b206:	e0a5      	b.n	800b354 <writeServos+0x258>

        case MULTITYPE_DUALCOPTER:
        	actPwmWriteServo(0, servo[4]);
 800b208:	4b55      	ldr	r3, [pc, #340]	; (800b360 <writeServos+0x264>)
 800b20a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b20e:	b29b      	uxth	r3, r3
 800b210:	4619      	mov	r1, r3
 800b212:	2000      	movs	r0, #0
 800b214:	f7f6 fcf6 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b218:	4b51      	ldr	r3, [pc, #324]	; (800b360 <writeServos+0x264>)
 800b21a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b21e:	b29b      	uxth	r3, r3
 800b220:	4619      	mov	r1, r3
 800b222:	2001      	movs	r0, #1
 800b224:	f7f6 fcee 	bl	8001c04 <actPwmWriteServo>
            break;
 800b228:	e094      	b.n	800b354 <writeServos+0x258>

        case MULTITYPE_FLYING_WING:
        	actPwmWriteServo(0, servo[3]);
 800b22a:	4b4d      	ldr	r3, [pc, #308]	; (800b360 <writeServos+0x264>)
 800b22c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b230:	b29b      	uxth	r3, r3
 800b232:	4619      	mov	r1, r3
 800b234:	2000      	movs	r0, #0
 800b236:	f7f6 fce5 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b23a:	4b49      	ldr	r3, [pc, #292]	; (800b360 <writeServos+0x264>)
 800b23c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b240:	b29b      	uxth	r3, r3
 800b242:	4619      	mov	r1, r3
 800b244:	2001      	movs	r0, #1
 800b246:	f7f6 fcdd 	bl	8001c04 <actPwmWriteServo>
            break;
 800b24a:	e083      	b.n	800b354 <writeServos+0x258>

        case MULTITYPE_AIRPLANE:
        case MULTITYPE_SINGLECOPTER:
        	actPwmWriteServo(0, servo[3]);
 800b24c:	4b44      	ldr	r3, [pc, #272]	; (800b360 <writeServos+0x264>)
 800b24e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b252:	b29b      	uxth	r3, r3
 800b254:	4619      	mov	r1, r3
 800b256:	2000      	movs	r0, #0
 800b258:	f7f6 fcd4 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b25c:	4b40      	ldr	r3, [pc, #256]	; (800b360 <writeServos+0x264>)
 800b25e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b262:	b29b      	uxth	r3, r3
 800b264:	4619      	mov	r1, r3
 800b266:	2001      	movs	r0, #1
 800b268:	f7f6 fccc 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b26c:	4b3c      	ldr	r3, [pc, #240]	; (800b360 <writeServos+0x264>)
 800b26e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b272:	b29b      	uxth	r3, r3
 800b274:	4619      	mov	r1, r3
 800b276:	2002      	movs	r0, #2
 800b278:	f7f6 fcc4 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b27c:	4b38      	ldr	r3, [pc, #224]	; (800b360 <writeServos+0x264>)
 800b27e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b282:	b29b      	uxth	r3, r3
 800b284:	4619      	mov	r1, r3
 800b286:	2003      	movs	r0, #3
 800b288:	f7f6 fcbc 	bl	8001c04 <actPwmWriteServo>
            break;
 800b28c:	e062      	b.n	800b354 <writeServos+0x258>

        case MULTITYPE_CUSTOM_PLANE:
        	actPwmWriteServo(0, servo[3]);
 800b28e:	4b34      	ldr	r3, [pc, #208]	; (800b360 <writeServos+0x264>)
 800b290:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b294:	b29b      	uxth	r3, r3
 800b296:	4619      	mov	r1, r3
 800b298:	2000      	movs	r0, #0
 800b29a:	f7f6 fcb3 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b29e:	4b30      	ldr	r3, [pc, #192]	; (800b360 <writeServos+0x264>)
 800b2a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	2001      	movs	r0, #1
 800b2aa:	f7f6 fcab 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b2ae:	4b2c      	ldr	r3, [pc, #176]	; (800b360 <writeServos+0x264>)
 800b2b0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	2002      	movs	r0, #2
 800b2ba:	f7f6 fca3 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b2be:	4b28      	ldr	r3, [pc, #160]	; (800b360 <writeServos+0x264>)
 800b2c0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	2003      	movs	r0, #3
 800b2ca:	f7f6 fc9b 	bl	8001c04 <actPwmWriteServo>
            if (feature(FEATURE_PPM)) {
 800b2ce:	2001      	movs	r0, #1
 800b2d0:	f7fb fd5a 	bl	8006d88 <feature>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d039      	beq.n	800b34e <writeServos+0x252>
            	actPwmWriteServo(4, servo[0]);
 800b2da:	4b21      	ldr	r3, [pc, #132]	; (800b360 <writeServos+0x264>)
 800b2dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	2004      	movs	r0, #4
 800b2e6:	f7f6 fc8d 	bl	8001c04 <actPwmWriteServo>
            	actPwmWriteServo(5, servo[1]);
 800b2ea:	4b1d      	ldr	r3, [pc, #116]	; (800b360 <writeServos+0x264>)
 800b2ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	2005      	movs	r0, #5
 800b2f6:	f7f6 fc85 	bl	8001c04 <actPwmWriteServo>
            	actPwmWriteServo(6, servo[2]);
 800b2fa:	4b19      	ldr	r3, [pc, #100]	; (800b360 <writeServos+0x264>)
 800b2fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b300:	b29b      	uxth	r3, r3
 800b302:	4619      	mov	r1, r3
 800b304:	2006      	movs	r0, #6
 800b306:	f7f6 fc7d 	bl	8001c04 <actPwmWriteServo>
            	actPwmWriteServo(7, servo[7]);
 800b30a:	4b15      	ldr	r3, [pc, #84]	; (800b360 <writeServos+0x264>)
 800b30c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b310:	b29b      	uxth	r3, r3
 800b312:	4619      	mov	r1, r3
 800b314:	2007      	movs	r0, #7
 800b316:	f7f6 fc75 	bl	8001c04 <actPwmWriteServo>
            }
            break;
 800b31a:	e018      	b.n	800b34e <writeServos+0x252>

        default:
            // Two servos for SERVO_TILT, if enabled
            if (feature(FEATURE_SERVO_TILT)) {
 800b31c:	2020      	movs	r0, #32
 800b31e:	f7fb fd33 	bl	8006d88 <feature>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d014      	beq.n	800b352 <writeServos+0x256>
            	actPwmWriteServo(0, servo[0]);
 800b328:	4b0d      	ldr	r3, [pc, #52]	; (800b360 <writeServos+0x264>)
 800b32a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b32e:	b29b      	uxth	r3, r3
 800b330:	4619      	mov	r1, r3
 800b332:	2000      	movs	r0, #0
 800b334:	f7f6 fc66 	bl	8001c04 <actPwmWriteServo>
            	actPwmWriteServo(1, servo[1]);
 800b338:	4b09      	ldr	r3, [pc, #36]	; (800b360 <writeServos+0x264>)
 800b33a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b33e:	b29b      	uxth	r3, r3
 800b340:	4619      	mov	r1, r3
 800b342:	2001      	movs	r0, #1
 800b344:	f7f6 fc5e 	bl	8001c04 <actPwmWriteServo>
            }
            break;
 800b348:	e003      	b.n	800b352 <writeServos+0x256>
        return;
 800b34a:	bf00      	nop
 800b34c:	e002      	b.n	800b354 <writeServos+0x258>
            break;
 800b34e:	bf00      	nop
 800b350:	e000      	b.n	800b354 <writeServos+0x258>
            break;
 800b352:	bf00      	nop
    }
}
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	20000830 	.word	0x20000830
 800b35c:	200008e8 	.word	0x200008e8
 800b360:	20000040 	.word	0x20000040
 800b364:	20000e54 	.word	0x20000e54
 800b368:	200016f4 	.word	0x200016f4

0800b36c <writeMotors>:

void writeMotors(void)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
    uint8_t i;

    for (i = 0; i < numberMotor; i++)
 800b372:	2300      	movs	r3, #0
 800b374:	71fb      	strb	r3, [r7, #7]
 800b376:	e00c      	b.n	800b392 <writeMotors+0x26>
        actPwmWriteMotor(i, motor[i]);
 800b378:	79fb      	ldrb	r3, [r7, #7]
 800b37a:	4a0b      	ldr	r2, [pc, #44]	; (800b3a8 <writeMotors+0x3c>)
 800b37c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b380:	b29a      	uxth	r2, r3
 800b382:	79fb      	ldrb	r3, [r7, #7]
 800b384:	4611      	mov	r1, r2
 800b386:	4618      	mov	r0, r3
 800b388:	f7f6 fc20 	bl	8001bcc <actPwmWriteMotor>
    for (i = 0; i < numberMotor; i++)
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	3301      	adds	r3, #1
 800b390:	71fb      	strb	r3, [r7, #7]
 800b392:	4b06      	ldr	r3, [pc, #24]	; (800b3ac <writeMotors+0x40>)
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	79fa      	ldrb	r2, [r7, #7]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d3ed      	bcc.n	800b378 <writeMotors+0xc>
}
 800b39c:	bf00      	nop
 800b39e:	bf00      	nop
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	2000155c 	.word	0x2000155c
 800b3ac:	20001558 	.word	0x20001558

0800b3b0 <servoMixer>:
        motor[i] = mc;
    writeMotors();
}

static void servoMixer(void)
{
 800b3b0:	b590      	push	{r4, r7, lr}
 800b3b2:	b08b      	sub	sp, #44	; 0x2c
 800b3b4:	af00      	add	r7, sp, #0
    int16_t input[INPUT_ITEMS];
    static int16_t currentOutput[MAX_SERVO_RULES];
    uint8_t i;

    if (f.PASSTHRU_MODE) {
 800b3b6:	4bae      	ldr	r3, [pc, #696]	; (800b670 <servoMixer+0x2c0>)
 800b3b8:	7a9b      	ldrb	r3, [r3, #10]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00c      	beq.n	800b3d8 <servoMixer+0x28>
        // Direct passthru from RX
        input[INPUT_ROLL] = rcCommand[ROLL];
 800b3be:	4bad      	ldr	r3, [pc, #692]	; (800b674 <servoMixer+0x2c4>)
 800b3c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3c4:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = rcCommand[PITCH];
 800b3c6:	4bab      	ldr	r3, [pc, #684]	; (800b674 <servoMixer+0x2c4>)
 800b3c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b3cc:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = rcCommand[YAW];
 800b3ce:	4ba9      	ldr	r3, [pc, #676]	; (800b674 <servoMixer+0x2c4>)
 800b3d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b3d4:	813b      	strh	r3, [r7, #8]
 800b3d6:	e00b      	b.n	800b3f0 <servoMixer+0x40>
    } else {
        // Assisted modes (gyro only or gyro+acc according to AUX configuration in Gui
        input[INPUT_ROLL] = axisPID[ROLL];
 800b3d8:	4ba7      	ldr	r3, [pc, #668]	; (800b678 <servoMixer+0x2c8>)
 800b3da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3de:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = axisPID[PITCH];
 800b3e0:	4ba5      	ldr	r3, [pc, #660]	; (800b678 <servoMixer+0x2c8>)
 800b3e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b3e6:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = axisPID[YAW];
 800b3e8:	4ba3      	ldr	r3, [pc, #652]	; (800b678 <servoMixer+0x2c8>)
 800b3ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b3ee:	813b      	strh	r3, [r7, #8]
    }

    input[INPUT_THROTTLE] = motor[0];
 800b3f0:	4ba2      	ldr	r3, [pc, #648]	; (800b67c <servoMixer+0x2cc>)
 800b3f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3f6:	817b      	strh	r3, [r7, #10]
    // by subtracting the RC middle value from the RC input value, we get:
    // data - middle = input
    // 2000 - 1500 = +500
    // 1500 - 1500 = 0
    // 1000 - 1500 = -500
    input[INPUT_AUX1] = rcData[AUX1] - mcfg.midrc;
 800b3f8:	4ba1      	ldr	r3, [pc, #644]	; (800b680 <servoMixer+0x2d0>)
 800b3fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	4ba0      	ldr	r3, [pc, #640]	; (800b684 <servoMixer+0x2d4>)
 800b402:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	b29b      	uxth	r3, r3
 800b40a:	b21b      	sxth	r3, r3
 800b40c:	81bb      	strh	r3, [r7, #12]
    input[INPUT_AUX2] = rcData[AUX2] - mcfg.midrc;
 800b40e:	4b9c      	ldr	r3, [pc, #624]	; (800b680 <servoMixer+0x2d0>)
 800b410:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b414:	b29a      	uxth	r2, r3
 800b416:	4b9b      	ldr	r3, [pc, #620]	; (800b684 <servoMixer+0x2d4>)
 800b418:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	b29b      	uxth	r3, r3
 800b420:	b21b      	sxth	r3, r3
 800b422:	81fb      	strh	r3, [r7, #14]
    input[INPUT_AUX3] = rcData[AUX3] - mcfg.midrc;
 800b424:	4b96      	ldr	r3, [pc, #600]	; (800b680 <servoMixer+0x2d0>)
 800b426:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	4b95      	ldr	r3, [pc, #596]	; (800b684 <servoMixer+0x2d4>)
 800b42e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b432:	1ad3      	subs	r3, r2, r3
 800b434:	b29b      	uxth	r3, r3
 800b436:	b21b      	sxth	r3, r3
 800b438:	823b      	strh	r3, [r7, #16]
    input[INPUT_AUX4] = rcData[AUX4] - mcfg.midrc;
 800b43a:	4b91      	ldr	r3, [pc, #580]	; (800b680 <servoMixer+0x2d0>)
 800b43c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b440:	b29a      	uxth	r2, r3
 800b442:	4b90      	ldr	r3, [pc, #576]	; (800b684 <servoMixer+0x2d4>)
 800b444:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	b21b      	sxth	r3, r3
 800b44e:	827b      	strh	r3, [r7, #18]
    input[INPUT_RC_ROLL] = rcData[ROLL] - mcfg.midrc;
 800b450:	4b8b      	ldr	r3, [pc, #556]	; (800b680 <servoMixer+0x2d0>)
 800b452:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b456:	b29a      	uxth	r2, r3
 800b458:	4b8a      	ldr	r3, [pc, #552]	; (800b684 <servoMixer+0x2d4>)
 800b45a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	b29b      	uxth	r3, r3
 800b462:	b21b      	sxth	r3, r3
 800b464:	82bb      	strh	r3, [r7, #20]
    input[INPUT_RC_PITCH] = rcData[PITCH] - mcfg.midrc;
 800b466:	4b86      	ldr	r3, [pc, #536]	; (800b680 <servoMixer+0x2d0>)
 800b468:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	4b85      	ldr	r3, [pc, #532]	; (800b684 <servoMixer+0x2d4>)
 800b470:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b474:	1ad3      	subs	r3, r2, r3
 800b476:	b29b      	uxth	r3, r3
 800b478:	b21b      	sxth	r3, r3
 800b47a:	82fb      	strh	r3, [r7, #22]
    input[INPUT_RC_YAW] = rcData[YAW] - mcfg.midrc;
 800b47c:	4b80      	ldr	r3, [pc, #512]	; (800b680 <servoMixer+0x2d0>)
 800b47e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b482:	b29a      	uxth	r2, r3
 800b484:	4b7f      	ldr	r3, [pc, #508]	; (800b684 <servoMixer+0x2d4>)
 800b486:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	b21b      	sxth	r3, r3
 800b490:	833b      	strh	r3, [r7, #24]
    input[INPUT_RC_THROTTLE] = rcData[THROTTLE] - mcfg.midrc;
 800b492:	4b7b      	ldr	r3, [pc, #492]	; (800b680 <servoMixer+0x2d0>)
 800b494:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b498:	b29a      	uxth	r2, r3
 800b49a:	4b7a      	ldr	r3, [pc, #488]	; (800b684 <servoMixer+0x2d4>)
 800b49c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b4a0:	1ad3      	subs	r3, r2, r3
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	b21b      	sxth	r3, r3
 800b4a6:	837b      	strh	r3, [r7, #26]

    for (i = 0; i < MAX_SERVOS; i++)
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4ae:	e00a      	b.n	800b4c6 <servoMixer+0x116>
        servo[i] = 0;
 800b4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4b4:	4a74      	ldr	r2, [pc, #464]	; (800b688 <servoMixer+0x2d8>)
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800b4bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4ca:	2b07      	cmp	r3, #7
 800b4cc:	d9f0      	bls.n	800b4b0 <servoMixer+0x100>

    // mix servos according to rules
    for (i = 0; i < numberRules; i++) {
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4d4:	e15f      	b.n	800b796 <servoMixer+0x3e6>
        // consider rule if no box assigned or box is active
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b4d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b4da:	496c      	ldr	r1, [pc, #432]	; (800b68c <servoMixer+0x2dc>)
 800b4dc:	4613      	mov	r3, r2
 800b4de:	00db      	lsls	r3, r3, #3
 800b4e0:	1a9b      	subs	r3, r3, r2
 800b4e2:	440b      	add	r3, r1
 800b4e4:	3306      	adds	r3, #6
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00e      	beq.n	800b50a <servoMixer+0x15a>
 800b4ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b4f0:	4966      	ldr	r1, [pc, #408]	; (800b68c <servoMixer+0x2dc>)
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	00db      	lsls	r3, r3, #3
 800b4f6:	1a9b      	subs	r3, r3, r2
 800b4f8:	440b      	add	r3, r1
 800b4fa:	3306      	adds	r3, #6
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	3314      	adds	r3, #20
 800b500:	4a63      	ldr	r2, [pc, #396]	; (800b690 <servoMixer+0x2e0>)
 800b502:	5cd3      	ldrb	r3, [r2, r3]
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 813b 	beq.w	800b780 <servoMixer+0x3d0>
            uint8_t target = currentServoMixer[i].targetChannel;
 800b50a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b50e:	495f      	ldr	r1, [pc, #380]	; (800b68c <servoMixer+0x2dc>)
 800b510:	4613      	mov	r3, r2
 800b512:	00db      	lsls	r3, r3, #3
 800b514:	1a9b      	subs	r3, r3, r2
 800b516:	440b      	add	r3, r1
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            uint8_t from = currentServoMixer[i].fromChannel;
 800b51e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b522:	495a      	ldr	r1, [pc, #360]	; (800b68c <servoMixer+0x2dc>)
 800b524:	4613      	mov	r3, r2
 800b526:	00db      	lsls	r3, r3, #3
 800b528:	1a9b      	subs	r3, r3, r2
 800b52a:	440b      	add	r3, r1
 800b52c:	3301      	adds	r3, #1
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            uint16_t servo_width = cfg.servoConf[target].max - cfg.servoConf[target].min;
 800b534:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b538:	4956      	ldr	r1, [pc, #344]	; (800b694 <servoMixer+0x2e4>)
 800b53a:	4613      	mov	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4413      	add	r3, r2
 800b540:	005b      	lsls	r3, r3, #1
 800b542:	440b      	add	r3, r1
 800b544:	33ba      	adds	r3, #186	; 0xba
 800b546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b54a:	b299      	uxth	r1, r3
 800b54c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b550:	4850      	ldr	r0, [pc, #320]	; (800b694 <servoMixer+0x2e4>)
 800b552:	4613      	mov	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4413      	add	r3, r2
 800b558:	005b      	lsls	r3, r3, #1
 800b55a:	4403      	add	r3, r0
 800b55c:	33b8      	adds	r3, #184	; 0xb8
 800b55e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b562:	b29b      	uxth	r3, r3
 800b564:	1acb      	subs	r3, r1, r3
 800b566:	847b      	strh	r3, [r7, #34]	; 0x22
            int16_t min = currentServoMixer[i].min * servo_width / 100 - servo_width / 2;
 800b568:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b56c:	4947      	ldr	r1, [pc, #284]	; (800b68c <servoMixer+0x2dc>)
 800b56e:	4613      	mov	r3, r2
 800b570:	00db      	lsls	r3, r3, #3
 800b572:	1a9b      	subs	r3, r3, r2
 800b574:	440b      	add	r3, r1
 800b576:	3304      	adds	r3, #4
 800b578:	f993 3000 	ldrsb.w	r3, [r3]
 800b57c:	461a      	mov	r2, r3
 800b57e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b580:	fb02 f303 	mul.w	r3, r2, r3
 800b584:	4a44      	ldr	r2, [pc, #272]	; (800b698 <servoMixer+0x2e8>)
 800b586:	fb82 1203 	smull	r1, r2, r2, r3
 800b58a:	1152      	asrs	r2, r2, #5
 800b58c:	17db      	asrs	r3, r3, #31
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	b29a      	uxth	r2, r3
 800b592:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b594:	085b      	lsrs	r3, r3, #1
 800b596:	b29b      	uxth	r3, r3
 800b598:	1ad3      	subs	r3, r2, r3
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	843b      	strh	r3, [r7, #32]
            int16_t max = currentServoMixer[i].max * servo_width / 100 - servo_width / 2;
 800b59e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5a2:	493a      	ldr	r1, [pc, #232]	; (800b68c <servoMixer+0x2dc>)
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	00db      	lsls	r3, r3, #3
 800b5a8:	1a9b      	subs	r3, r3, r2
 800b5aa:	440b      	add	r3, r1
 800b5ac:	3305      	adds	r3, #5
 800b5ae:	f993 3000 	ldrsb.w	r3, [r3]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5b6:	fb02 f303 	mul.w	r3, r2, r3
 800b5ba:	4a37      	ldr	r2, [pc, #220]	; (800b698 <servoMixer+0x2e8>)
 800b5bc:	fb82 1203 	smull	r1, r2, r2, r3
 800b5c0:	1152      	asrs	r2, r2, #5
 800b5c2:	17db      	asrs	r3, r3, #31
 800b5c4:	1ad3      	subs	r3, r2, r3
 800b5c6:	b29a      	uxth	r2, r3
 800b5c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5ca:	085b      	lsrs	r3, r3, #1
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	1ad3      	subs	r3, r2, r3
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	83fb      	strh	r3, [r7, #30]

            if (currentServoMixer[i].speed == 0)
 800b5d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5d8:	492c      	ldr	r1, [pc, #176]	; (800b68c <servoMixer+0x2dc>)
 800b5da:	4613      	mov	r3, r2
 800b5dc:	00db      	lsls	r3, r3, #3
 800b5de:	1a9b      	subs	r3, r3, r2
 800b5e0:	440b      	add	r3, r1
 800b5e2:	3303      	adds	r3, #3
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d10c      	bne.n	800b604 <servoMixer+0x254>
                currentOutput[i] = input[from];
 800b5ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b5ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5f2:	005b      	lsls	r3, r3, #1
 800b5f4:	3328      	adds	r3, #40	; 0x28
 800b5f6:	443b      	add	r3, r7
 800b5f8:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800b5fc:	4b27      	ldr	r3, [pc, #156]	; (800b69c <servoMixer+0x2ec>)
 800b5fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800b602:	e082      	b.n	800b70a <servoMixer+0x35a>
            else {
                if (currentOutput[i] < input[from])
 800b604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b608:	4a24      	ldr	r2, [pc, #144]	; (800b69c <servoMixer+0x2ec>)
 800b60a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b60e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b612:	005b      	lsls	r3, r3, #1
 800b614:	3328      	adds	r3, #40	; 0x28
 800b616:	443b      	add	r3, r7
 800b618:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	da3f      	bge.n	800b6a0 <servoMixer+0x2f0>
                    currentOutput[i] = constrain(currentOutput[i] + currentServoMixer[i].speed, currentOutput[i], input[from]);
 800b620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b624:	4a1d      	ldr	r2, [pc, #116]	; (800b69c <servoMixer+0x2ec>)
 800b626:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b62a:	4618      	mov	r0, r3
 800b62c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b630:	4916      	ldr	r1, [pc, #88]	; (800b68c <servoMixer+0x2dc>)
 800b632:	4613      	mov	r3, r2
 800b634:	00db      	lsls	r3, r3, #3
 800b636:	1a9b      	subs	r3, r3, r2
 800b638:	440b      	add	r3, r1
 800b63a:	3303      	adds	r3, #3
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	4418      	add	r0, r3
 800b640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b644:	4a15      	ldr	r2, [pc, #84]	; (800b69c <servoMixer+0x2ec>)
 800b646:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b64a:	4619      	mov	r1, r3
 800b64c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b650:	005b      	lsls	r3, r3, #1
 800b652:	3328      	adds	r3, #40	; 0x28
 800b654:	443b      	add	r3, r7
 800b656:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b65a:	461a      	mov	r2, r3
 800b65c:	f7f8 fa30 	bl	8003ac0 <constrain>
 800b660:	4602      	mov	r2, r0
 800b662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b666:	b211      	sxth	r1, r2
 800b668:	4a0c      	ldr	r2, [pc, #48]	; (800b69c <servoMixer+0x2ec>)
 800b66a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b66e:	e04c      	b.n	800b70a <servoMixer+0x35a>
 800b670:	200016f4 	.word	0x200016f4
 800b674:	20001750 	.word	0x20001750
 800b678:	200017b0 	.word	0x200017b0
 800b67c:	2000155c 	.word	0x2000155c
 800b680:	2000172c 	.word	0x2000172c
 800b684:	200008e8 	.word	0x200008e8
 800b688:	20000040 	.word	0x20000040
 800b68c:	2000164c 	.word	0x2000164c
 800b690:	20001794 	.word	0x20001794
 800b694:	20000e54 	.word	0x20000e54
 800b698:	51eb851f 	.word	0x51eb851f
 800b69c:	200016bc 	.word	0x200016bc
                else if (currentOutput[i] > input[from])
 800b6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6a4:	4a63      	ldr	r2, [pc, #396]	; (800b834 <servoMixer+0x484>)
 800b6a6:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b6aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	3328      	adds	r3, #40	; 0x28
 800b6b2:	443b      	add	r3, r7
 800b6b4:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	dd26      	ble.n	800b70a <servoMixer+0x35a>
                    currentOutput[i] = constrain(currentOutput[i] - currentServoMixer[i].speed, input[from], currentOutput[i]);
 800b6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6c0:	4a5c      	ldr	r2, [pc, #368]	; (800b834 <servoMixer+0x484>)
 800b6c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6cc:	495a      	ldr	r1, [pc, #360]	; (800b838 <servoMixer+0x488>)
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	440b      	add	r3, r1
 800b6d6:	3303      	adds	r3, #3
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	1ac0      	subs	r0, r0, r3
 800b6dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6e0:	005b      	lsls	r3, r3, #1
 800b6e2:	3328      	adds	r3, #40	; 0x28
 800b6e4:	443b      	add	r3, r7
 800b6e6:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6f0:	4a50      	ldr	r2, [pc, #320]	; (800b834 <servoMixer+0x484>)
 800b6f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	f7f8 f9e2 	bl	8003ac0 <constrain>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b702:	b211      	sxth	r1, r2
 800b704:	4a4b      	ldr	r2, [pc, #300]	; (800b834 <servoMixer+0x484>)
 800b706:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            servo[target] += servoDirection(target, from) * constrain(((int32_t)currentOutput[i] * currentServoMixer[i].rate) / 100, min, max);
 800b70a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b70e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800b712:	4611      	mov	r1, r2
 800b714:	4618      	mov	r0, r3
 800b716:	f7ff fa73 	bl	800ac00 <servoDirection>
 800b71a:	4604      	mov	r4, r0
 800b71c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b720:	4a44      	ldr	r2, [pc, #272]	; (800b834 <servoMixer+0x484>)
 800b722:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b726:	4618      	mov	r0, r3
 800b728:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b72c:	4942      	ldr	r1, [pc, #264]	; (800b838 <servoMixer+0x488>)
 800b72e:	4613      	mov	r3, r2
 800b730:	00db      	lsls	r3, r3, #3
 800b732:	1a9b      	subs	r3, r3, r2
 800b734:	440b      	add	r3, r1
 800b736:	3302      	adds	r3, #2
 800b738:	f993 3000 	ldrsb.w	r3, [r3]
 800b73c:	fb00 f303 	mul.w	r3, r0, r3
 800b740:	4a3e      	ldr	r2, [pc, #248]	; (800b83c <servoMixer+0x48c>)
 800b742:	fb82 1203 	smull	r1, r2, r2, r3
 800b746:	1152      	asrs	r2, r2, #5
 800b748:	17db      	asrs	r3, r3, #31
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 800b750:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b754:	4618      	mov	r0, r3
 800b756:	f7f8 f9b3 	bl	8003ac0 <constrain>
 800b75a:	4603      	mov	r3, r0
 800b75c:	fb03 f104 	mul.w	r1, r3, r4
 800b760:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b764:	4a36      	ldr	r2, [pc, #216]	; (800b840 <servoMixer+0x490>)
 800b766:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	b28b      	uxth	r3, r1
 800b76e:	4413      	add	r3, r2
 800b770:	b29a      	uxth	r2, r3
 800b772:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b776:	b211      	sxth	r1, r2
 800b778:	4a31      	ldr	r2, [pc, #196]	; (800b840 <servoMixer+0x490>)
 800b77a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b77e:	e005      	b.n	800b78c <servoMixer+0x3dc>
        } else
            currentOutput[i] = 0;
 800b780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b784:	4a2b      	ldr	r2, [pc, #172]	; (800b834 <servoMixer+0x484>)
 800b786:	2100      	movs	r1, #0
 800b788:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < numberRules; i++) {
 800b78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b790:	3301      	adds	r3, #1
 800b792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b796:	4b2b      	ldr	r3, [pc, #172]	; (800b844 <servoMixer+0x494>)
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	f4ff ae99 	bcc.w	800b4d6 <servoMixer+0x126>
    }

    // servo rates
    for (i = 0; i < MAX_SERVOS; i++) {
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b7aa:	e039      	b.n	800b820 <servoMixer+0x470>
        servo[i] = ((int32_t)cfg.servoConf[i].rate * servo[i]) / 100;
 800b7ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b7b0:	4925      	ldr	r1, [pc, #148]	; (800b848 <servoMixer+0x498>)
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4413      	add	r3, r2
 800b7b8:	005b      	lsls	r3, r3, #1
 800b7ba:	440b      	add	r3, r1
 800b7bc:	33be      	adds	r3, #190	; 0xbe
 800b7be:	f993 3000 	ldrsb.w	r3, [r3]
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7c8:	4a1d      	ldr	r2, [pc, #116]	; (800b840 <servoMixer+0x490>)
 800b7ca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b7ce:	fb01 f303 	mul.w	r3, r1, r3
 800b7d2:	4a1a      	ldr	r2, [pc, #104]	; (800b83c <servoMixer+0x48c>)
 800b7d4:	fb82 1203 	smull	r1, r2, r2, r3
 800b7d8:	1152      	asrs	r2, r2, #5
 800b7da:	17db      	asrs	r3, r3, #31
 800b7dc:	1ad2      	subs	r2, r2, r3
 800b7de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7e2:	b211      	sxth	r1, r2
 800b7e4:	4a16      	ldr	r2, [pc, #88]	; (800b840 <servoMixer+0x490>)
 800b7e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        servo[i] += servoMiddle(i);
 800b7ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7ff f9d0 	bl	800ab94 <servoMiddle>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7fc:	4a10      	ldr	r2, [pc, #64]	; (800b840 <servoMixer+0x490>)
 800b7fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b802:	b29a      	uxth	r2, r3
 800b804:	b28b      	uxth	r3, r1
 800b806:	4413      	add	r3, r2
 800b808:	b29a      	uxth	r2, r3
 800b80a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b80e:	b211      	sxth	r1, r2
 800b810:	4a0b      	ldr	r2, [pc, #44]	; (800b840 <servoMixer+0x490>)
 800b812:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++) {
 800b816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b81a:	3301      	adds	r3, #1
 800b81c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b824:	2b07      	cmp	r3, #7
 800b826:	d9c1      	bls.n	800b7ac <servoMixer+0x3fc>
    }
}
 800b828:	bf00      	nop
 800b82a:	bf00      	nop
 800b82c:	372c      	adds	r7, #44	; 0x2c
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd90      	pop	{r4, r7, pc}
 800b832:	bf00      	nop
 800b834:	200016bc 	.word	0x200016bc
 800b838:	2000164c 	.word	0x2000164c
 800b83c:	51eb851f 	.word	0x51eb851f
 800b840:	20000040 	.word	0x20000040
 800b844:	20001559 	.word	0x20001559
 800b848:	20000e54 	.word	0x20000e54

0800b84c <mixTable>:

void mixTable(void)
{
 800b84c:	b590      	push	{r4, r7, lr}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
    int16_t maxMotor;
    uint32_t i;

    if (numberMotor > 3) {
 800b852:	4b7e      	ldr	r3, [pc, #504]	; (800ba4c <mixTable+0x200>)
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	2b03      	cmp	r3, #3
 800b858:	d91d      	bls.n	800b896 <mixTable+0x4a>
        // prevent "yaw jump" during yaw correction
        axisPID[YAW] = constrain(axisPID[YAW], -100 - abs(rcCommand[YAW]), +100 + abs(rcCommand[YAW]));
 800b85a:	4b7d      	ldr	r3, [pc, #500]	; (800ba50 <mixTable+0x204>)
 800b85c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b860:	4618      	mov	r0, r3
 800b862:	4b7c      	ldr	r3, [pc, #496]	; (800ba54 <mixTable+0x208>)
 800b864:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	bfb8      	it	lt
 800b86c:	425b      	neglt	r3, r3
 800b86e:	b29b      	uxth	r3, r3
 800b870:	461a      	mov	r2, r3
 800b872:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b876:	1a9b      	subs	r3, r3, r2
 800b878:	4a76      	ldr	r2, [pc, #472]	; (800ba54 <mixTable+0x208>)
 800b87a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b87e:	2a00      	cmp	r2, #0
 800b880:	bfb8      	it	lt
 800b882:	4252      	neglt	r2, r2
 800b884:	b292      	uxth	r2, r2
 800b886:	3264      	adds	r2, #100	; 0x64
 800b888:	4619      	mov	r1, r3
 800b88a:	f7f8 f919 	bl	8003ac0 <constrain>
 800b88e:	4603      	mov	r3, r0
 800b890:	b21a      	sxth	r2, r3
 800b892:	4b6f      	ldr	r3, [pc, #444]	; (800ba50 <mixTable+0x204>)
 800b894:	809a      	strh	r2, [r3, #4]
    }

    // motors for non-servo mixes
    if (numberMotor > 1) {
 800b896:	4b6d      	ldr	r3, [pc, #436]	; (800ba4c <mixTable+0x200>)
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	f240 809a 	bls.w	800b9d4 <mixTable+0x188>
        for (i = 0; i < numberMotor; i++) {
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	60bb      	str	r3, [r7, #8]
 800b8a4:	e08f      	b.n	800b9c6 <mixTable+0x17a>
            motor[i] = rcCommand[THROTTLE] * currentMixer[i].throttle + axisPID[PITCH] * currentMixer[i].pitch + axisPID[ROLL] * currentMixer[i].roll + -cfg.yaw_direction * axisPID[YAW] * currentMixer[i].yaw;
 800b8a6:	4b6b      	ldr	r3, [pc, #428]	; (800ba54 <mixTable+0x208>)
 800b8a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b8ac:	ee07 3a90 	vmov	s15, r3
 800b8b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b8b4:	4a68      	ldr	r2, [pc, #416]	; (800ba58 <mixTable+0x20c>)
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	011b      	lsls	r3, r3, #4
 800b8ba:	4413      	add	r3, r2
 800b8bc:	edd3 7a00 	vldr	s15, [r3]
 800b8c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8c4:	4b62      	ldr	r3, [pc, #392]	; (800ba50 <mixTable+0x204>)
 800b8c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b8ca:	ee07 3a90 	vmov	s15, r3
 800b8ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b8d2:	4a61      	ldr	r2, [pc, #388]	; (800ba58 <mixTable+0x20c>)
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	011b      	lsls	r3, r3, #4
 800b8d8:	4413      	add	r3, r2
 800b8da:	3308      	adds	r3, #8
 800b8dc:	edd3 7a00 	vldr	s15, [r3]
 800b8e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b8e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b8e8:	4b59      	ldr	r3, [pc, #356]	; (800ba50 <mixTable+0x204>)
 800b8ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8ee:	ee07 3a90 	vmov	s15, r3
 800b8f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b8f6:	4a58      	ldr	r2, [pc, #352]	; (800ba58 <mixTable+0x20c>)
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	011b      	lsls	r3, r3, #4
 800b8fc:	4413      	add	r3, r2
 800b8fe:	3304      	adds	r3, #4
 800b900:	edd3 7a00 	vldr	s15, [r3]
 800b904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b908:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b90c:	4b53      	ldr	r3, [pc, #332]	; (800ba5c <mixTable+0x210>)
 800b90e:	f993 310e 	ldrsb.w	r3, [r3, #270]	; 0x10e
 800b912:	425b      	negs	r3, r3
 800b914:	4a4e      	ldr	r2, [pc, #312]	; (800ba50 <mixTable+0x204>)
 800b916:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b91a:	fb02 f303 	mul.w	r3, r2, r3
 800b91e:	ee07 3a90 	vmov	s15, r3
 800b922:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b926:	4a4c      	ldr	r2, [pc, #304]	; (800ba58 <mixTable+0x20c>)
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	011b      	lsls	r3, r3, #4
 800b92c:	4413      	add	r3, r2
 800b92e:	330c      	adds	r3, #12
 800b930:	edd3 7a00 	vldr	s15, [r3]
 800b934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b93c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b940:	ee17 3a90 	vmov	r3, s15
 800b944:	b219      	sxth	r1, r3
 800b946:	4a46      	ldr	r2, [pc, #280]	; (800ba60 <mixTable+0x214>)
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (f.FIXED_WING) { // vector_thrust handeling
 800b94e:	4b45      	ldr	r3, [pc, #276]	; (800ba64 <mixTable+0x218>)
 800b950:	7c1b      	ldrb	r3, [r3, #16]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d034      	beq.n	800b9c0 <mixTable+0x174>
                if (cfg.fw_vector_thrust) {
 800b956:	4b41      	ldr	r3, [pc, #260]	; (800ba5c <mixTable+0x210>)
 800b958:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d028      	beq.n	800b9b2 <mixTable+0x166>
                    if (f.PASSTHRU_MODE)
 800b960:	4b40      	ldr	r3, [pc, #256]	; (800ba64 <mixTable+0x218>)
 800b962:	7a9b      	ldrb	r3, [r3, #10]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d02b      	beq.n	800b9c0 <mixTable+0x174>
                        motor[i] = rcCommand[THROTTLE] - rcCommand[YAW] * (i - 0.5f);
 800b968:	4b3a      	ldr	r3, [pc, #232]	; (800ba54 <mixTable+0x208>)
 800b96a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b96e:	ee07 3a90 	vmov	s15, r3
 800b972:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b976:	4b37      	ldr	r3, [pc, #220]	; (800ba54 <mixTable+0x208>)
 800b978:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b97c:	ee07 3a90 	vmov	s15, r3
 800b980:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	ee07 3a90 	vmov	s15, r3
 800b98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b98e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b992:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b99a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b99e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9a2:	ee17 3a90 	vmov	r3, s15
 800b9a6:	b219      	sxth	r1, r3
 800b9a8:	4a2d      	ldr	r2, [pc, #180]	; (800ba60 <mixTable+0x214>)
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b9b0:	e006      	b.n	800b9c0 <mixTable+0x174>
                } else { // Override mixerVectorThrust
                    motor[i] = rcCommand[THROTTLE];
 800b9b2:	4b28      	ldr	r3, [pc, #160]	; (800ba54 <mixTable+0x208>)
 800b9b4:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800b9b8:	4a29      	ldr	r2, [pc, #164]	; (800ba60 <mixTable+0x214>)
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < numberMotor; i++) {
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	60bb      	str	r3, [r7, #8]
 800b9c6:	4b21      	ldr	r3, [pc, #132]	; (800ba4c <mixTable+0x200>)
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	f4ff af69 	bcc.w	800b8a6 <mixTable+0x5a>
            }
        }
    }

    // airplane / servo mixes
    switch (mcfg.mixerConfiguration) {
 800b9d4:	4b24      	ldr	r3, [pc, #144]	; (800ba68 <mixTable+0x21c>)
 800b9d6:	795b      	ldrb	r3, [r3, #5]
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	2b17      	cmp	r3, #23
 800b9dc:	d87b      	bhi.n	800bad6 <mixTable+0x28a>
 800b9de:	a201      	add	r2, pc, #4	; (adr r2, 800b9e4 <mixTable+0x198>)
 800b9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e4:	0800ba45 	.word	0x0800ba45
 800b9e8:	0800bad7 	.word	0x0800bad7
 800b9ec:	0800bad7 	.word	0x0800bad7
 800b9f0:	0800ba45 	.word	0x0800ba45
 800b9f4:	0800ba6d 	.word	0x0800ba6d
 800b9f8:	0800bad7 	.word	0x0800bad7
 800b9fc:	0800bad7 	.word	0x0800bad7
 800ba00:	0800ba45 	.word	0x0800ba45
 800ba04:	0800bad7 	.word	0x0800bad7
 800ba08:	0800bad7 	.word	0x0800bad7
 800ba0c:	0800bad7 	.word	0x0800bad7
 800ba10:	0800bad7 	.word	0x0800bad7
 800ba14:	0800bad7 	.word	0x0800bad7
 800ba18:	0800ba45 	.word	0x0800ba45
 800ba1c:	0800bad7 	.word	0x0800bad7
 800ba20:	0800bad7 	.word	0x0800bad7
 800ba24:	0800bad7 	.word	0x0800bad7
 800ba28:	0800bad7 	.word	0x0800bad7
 800ba2c:	0800bad7 	.word	0x0800bad7
 800ba30:	0800ba45 	.word	0x0800ba45
 800ba34:	0800ba45 	.word	0x0800ba45
 800ba38:	0800bad7 	.word	0x0800bad7
 800ba3c:	0800bad7 	.word	0x0800bad7
 800ba40:	0800ba45 	.word	0x0800ba45
        case MULTITYPE_AIRPLANE:
        case MULTITYPE_BI:
        case MULTITYPE_TRI:
        case MULTITYPE_DUALCOPTER:
        case MULTITYPE_SINGLECOPTER:
            servoMixer();
 800ba44:	f7ff fcb4 	bl	800b3b0 <servoMixer>
            break;
 800ba48:	e045      	b.n	800bad6 <mixTable+0x28a>
 800ba4a:	bf00      	nop
 800ba4c:	20001558 	.word	0x20001558
 800ba50:	200017b0 	.word	0x200017b0
 800ba54:	20001750 	.word	0x20001750
 800ba58:	2000158c 	.word	0x2000158c
 800ba5c:	20000e54 	.word	0x20000e54
 800ba60:	2000155c 	.word	0x2000155c
 800ba64:	200016f4 	.word	0x200016f4
 800ba68:	200008e8 	.word	0x200008e8
        case MULTITYPE_GIMBAL:
            servo[0] = (((int32_t)cfg.servoConf[0].rate * angle[PITCH]) / 50) + servoMiddle(0);
 800ba6c:	4ba7      	ldr	r3, [pc, #668]	; (800bd0c <mixTable+0x4c0>)
 800ba6e:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800ba72:	461a      	mov	r2, r3
 800ba74:	4ba6      	ldr	r3, [pc, #664]	; (800bd10 <mixTable+0x4c4>)
 800ba76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ba7a:	fb02 f303 	mul.w	r3, r2, r3
 800ba7e:	4aa5      	ldr	r2, [pc, #660]	; (800bd14 <mixTable+0x4c8>)
 800ba80:	fb82 1203 	smull	r1, r2, r2, r3
 800ba84:	1112      	asrs	r2, r2, #4
 800ba86:	17db      	asrs	r3, r3, #31
 800ba88:	1ad3      	subs	r3, r2, r3
 800ba8a:	b29c      	uxth	r4, r3
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	f7ff f881 	bl	800ab94 <servoMiddle>
 800ba92:	4603      	mov	r3, r0
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	4423      	add	r3, r4
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	b21a      	sxth	r2, r3
 800ba9c:	4b9e      	ldr	r3, [pc, #632]	; (800bd18 <mixTable+0x4cc>)
 800ba9e:	801a      	strh	r2, [r3, #0]
            servo[1] = (((int32_t)cfg.servoConf[1].rate * angle[ROLL]) / 50) + servoMiddle(1);
 800baa0:	4b9a      	ldr	r3, [pc, #616]	; (800bd0c <mixTable+0x4c0>)
 800baa2:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800baa6:	461a      	mov	r2, r3
 800baa8:	4b99      	ldr	r3, [pc, #612]	; (800bd10 <mixTable+0x4c4>)
 800baaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800baae:	fb02 f303 	mul.w	r3, r2, r3
 800bab2:	4a98      	ldr	r2, [pc, #608]	; (800bd14 <mixTable+0x4c8>)
 800bab4:	fb82 1203 	smull	r1, r2, r2, r3
 800bab8:	1112      	asrs	r2, r2, #4
 800baba:	17db      	asrs	r3, r3, #31
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	b29c      	uxth	r4, r3
 800bac0:	2001      	movs	r0, #1
 800bac2:	f7ff f867 	bl	800ab94 <servoMiddle>
 800bac6:	4603      	mov	r3, r0
 800bac8:	b29b      	uxth	r3, r3
 800baca:	4423      	add	r3, r4
 800bacc:	b29b      	uxth	r3, r3
 800bace:	b21a      	sxth	r2, r3
 800bad0:	4b91      	ldr	r3, [pc, #580]	; (800bd18 <mixTable+0x4cc>)
 800bad2:	805a      	strh	r2, [r3, #2]
            break;
 800bad4:	bf00      	nop
    }

    // do camstab
    if (feature(FEATURE_SERVO_TILT)) {
 800bad6:	2020      	movs	r0, #32
 800bad8:	f7fb f956 	bl	8006d88 <feature>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f000 80a3 	beq.w	800bc2a <mixTable+0x3de>
        // center at fixed position, or vary either pitch or roll by RC channel
        servo[0] = servoMiddle(0);
 800bae4:	2000      	movs	r0, #0
 800bae6:	f7ff f855 	bl	800ab94 <servoMiddle>
 800baea:	4603      	mov	r3, r0
 800baec:	461a      	mov	r2, r3
 800baee:	4b8a      	ldr	r3, [pc, #552]	; (800bd18 <mixTable+0x4cc>)
 800baf0:	801a      	strh	r2, [r3, #0]
        servo[1] = servoMiddle(1);
 800baf2:	2001      	movs	r0, #1
 800baf4:	f7ff f84e 	bl	800ab94 <servoMiddle>
 800baf8:	4603      	mov	r3, r0
 800bafa:	461a      	mov	r2, r3
 800bafc:	4b86      	ldr	r3, [pc, #536]	; (800bd18 <mixTable+0x4cc>)
 800bafe:	805a      	strh	r2, [r3, #2]

        if (rcOptions[BOXCAMSTAB]) {
 800bb00:	4b86      	ldr	r3, [pc, #536]	; (800bd1c <mixTable+0x4d0>)
 800bb02:	7a1b      	ldrb	r3, [r3, #8]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f000 8090 	beq.w	800bc2a <mixTable+0x3de>
            if (cfg.gimbal_flags & GIMBAL_MIXTILT) {
 800bb0a:	4b80      	ldr	r3, [pc, #512]	; (800bd0c <mixTable+0x4c0>)
 800bb0c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bb10:	f003 0302 	and.w	r3, r3, #2
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d056      	beq.n	800bbc6 <mixTable+0x37a>
                servo[0] -= (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 - (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bb18:	4b7f      	ldr	r3, [pc, #508]	; (800bd18 <mixTable+0x4cc>)
 800bb1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	4b7a      	ldr	r3, [pc, #488]	; (800bd0c <mixTable+0x4c0>)
 800bb22:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bb26:	425b      	negs	r3, r3
 800bb28:	4979      	ldr	r1, [pc, #484]	; (800bd10 <mixTable+0x4c4>)
 800bb2a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bb2e:	fb01 f303 	mul.w	r3, r1, r3
 800bb32:	4978      	ldr	r1, [pc, #480]	; (800bd14 <mixTable+0x4c8>)
 800bb34:	fb81 0103 	smull	r0, r1, r1, r3
 800bb38:	1109      	asrs	r1, r1, #4
 800bb3a:	17db      	asrs	r3, r3, #31
 800bb3c:	1acb      	subs	r3, r1, r3
 800bb3e:	b299      	uxth	r1, r3
 800bb40:	4b72      	ldr	r3, [pc, #456]	; (800bd0c <mixTable+0x4c0>)
 800bb42:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bb46:	4618      	mov	r0, r3
 800bb48:	4b71      	ldr	r3, [pc, #452]	; (800bd10 <mixTable+0x4c4>)
 800bb4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb4e:	fb00 f303 	mul.w	r3, r0, r3
 800bb52:	4870      	ldr	r0, [pc, #448]	; (800bd14 <mixTable+0x4c8>)
 800bb54:	fb80 4003 	smull	r4, r0, r0, r3
 800bb58:	1100      	asrs	r0, r0, #4
 800bb5a:	17db      	asrs	r3, r3, #31
 800bb5c:	1a1b      	subs	r3, r3, r0
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	440b      	add	r3, r1
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	b21a      	sxth	r2, r3
 800bb6a:	4b6b      	ldr	r3, [pc, #428]	; (800bd18 <mixTable+0x4cc>)
 800bb6c:	801a      	strh	r2, [r3, #0]
                servo[1] += (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 + (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bb6e:	4b6a      	ldr	r3, [pc, #424]	; (800bd18 <mixTable+0x4cc>)
 800bb70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	4b65      	ldr	r3, [pc, #404]	; (800bd0c <mixTable+0x4c0>)
 800bb78:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bb7c:	425b      	negs	r3, r3
 800bb7e:	4964      	ldr	r1, [pc, #400]	; (800bd10 <mixTable+0x4c4>)
 800bb80:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bb84:	fb01 f303 	mul.w	r3, r1, r3
 800bb88:	4962      	ldr	r1, [pc, #392]	; (800bd14 <mixTable+0x4c8>)
 800bb8a:	fb81 0103 	smull	r0, r1, r1, r3
 800bb8e:	1109      	asrs	r1, r1, #4
 800bb90:	17db      	asrs	r3, r3, #31
 800bb92:	1acb      	subs	r3, r1, r3
 800bb94:	b299      	uxth	r1, r3
 800bb96:	4b5d      	ldr	r3, [pc, #372]	; (800bd0c <mixTable+0x4c0>)
 800bb98:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	4b5c      	ldr	r3, [pc, #368]	; (800bd10 <mixTable+0x4c4>)
 800bba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bba4:	fb00 f303 	mul.w	r3, r0, r3
 800bba8:	485a      	ldr	r0, [pc, #360]	; (800bd14 <mixTable+0x4c8>)
 800bbaa:	fb80 4003 	smull	r4, r0, r0, r3
 800bbae:	1100      	asrs	r0, r0, #4
 800bbb0:	17db      	asrs	r3, r3, #31
 800bbb2:	1ac3      	subs	r3, r0, r3
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	440b      	add	r3, r1
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	4413      	add	r3, r2
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	b21a      	sxth	r2, r3
 800bbc0:	4b55      	ldr	r3, [pc, #340]	; (800bd18 <mixTable+0x4cc>)
 800bbc2:	805a      	strh	r2, [r3, #2]
 800bbc4:	e031      	b.n	800bc2a <mixTable+0x3de>
            } else {
                servo[0] += (int32_t)cfg.servoConf[0].rate * angle[PITCH] / 50;
 800bbc6:	4b54      	ldr	r3, [pc, #336]	; (800bd18 <mixTable+0x4cc>)
 800bbc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbcc:	b29a      	uxth	r2, r3
 800bbce:	4b4f      	ldr	r3, [pc, #316]	; (800bd0c <mixTable+0x4c0>)
 800bbd0:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	4b4e      	ldr	r3, [pc, #312]	; (800bd10 <mixTable+0x4c4>)
 800bbd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bbdc:	fb01 f303 	mul.w	r3, r1, r3
 800bbe0:	494c      	ldr	r1, [pc, #304]	; (800bd14 <mixTable+0x4c8>)
 800bbe2:	fb81 0103 	smull	r0, r1, r1, r3
 800bbe6:	1109      	asrs	r1, r1, #4
 800bbe8:	17db      	asrs	r3, r3, #31
 800bbea:	1acb      	subs	r3, r1, r3
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	4413      	add	r3, r2
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	b21a      	sxth	r2, r3
 800bbf4:	4b48      	ldr	r3, [pc, #288]	; (800bd18 <mixTable+0x4cc>)
 800bbf6:	801a      	strh	r2, [r3, #0]
                servo[1] += (int32_t)cfg.servoConf[1].rate * angle[ROLL]  / 50;
 800bbf8:	4b47      	ldr	r3, [pc, #284]	; (800bd18 <mixTable+0x4cc>)
 800bbfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	4b42      	ldr	r3, [pc, #264]	; (800bd0c <mixTable+0x4c0>)
 800bc02:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bc06:	4619      	mov	r1, r3
 800bc08:	4b41      	ldr	r3, [pc, #260]	; (800bd10 <mixTable+0x4c4>)
 800bc0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc0e:	fb01 f303 	mul.w	r3, r1, r3
 800bc12:	4940      	ldr	r1, [pc, #256]	; (800bd14 <mixTable+0x4c8>)
 800bc14:	fb81 0103 	smull	r0, r1, r1, r3
 800bc18:	1109      	asrs	r1, r1, #4
 800bc1a:	17db      	asrs	r3, r3, #31
 800bc1c:	1acb      	subs	r3, r1, r3
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	4413      	add	r3, r2
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	b21a      	sxth	r2, r3
 800bc26:	4b3c      	ldr	r3, [pc, #240]	; (800bd18 <mixTable+0x4cc>)
 800bc28:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    // constrain servos
    for (i = 0; i < MAX_SERVOS; i++)
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	60bb      	str	r3, [r7, #8]
 800bc2e:	e026      	b.n	800bc7e <mixTable+0x432>
        servo[i] = constrain(servo[i], cfg.servoConf[i].min, cfg.servoConf[i].max); // limit the values
 800bc30:	4a39      	ldr	r2, [pc, #228]	; (800bd18 <mixTable+0x4cc>)
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	4934      	ldr	r1, [pc, #208]	; (800bd0c <mixTable+0x4c0>)
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4413      	add	r3, r2
 800bc44:	005b      	lsls	r3, r3, #1
 800bc46:	440b      	add	r3, r1
 800bc48:	33b8      	adds	r3, #184	; 0xb8
 800bc4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc4e:	461c      	mov	r4, r3
 800bc50:	492e      	ldr	r1, [pc, #184]	; (800bd0c <mixTable+0x4c0>)
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	4613      	mov	r3, r2
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	4413      	add	r3, r2
 800bc5a:	005b      	lsls	r3, r3, #1
 800bc5c:	440b      	add	r3, r1
 800bc5e:	33ba      	adds	r3, #186	; 0xba
 800bc60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc64:	461a      	mov	r2, r3
 800bc66:	4621      	mov	r1, r4
 800bc68:	f7f7 ff2a 	bl	8003ac0 <constrain>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	b219      	sxth	r1, r3
 800bc70:	4a29      	ldr	r2, [pc, #164]	; (800bd18 <mixTable+0x4cc>)
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	60bb      	str	r3, [r7, #8]
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	2b07      	cmp	r3, #7
 800bc82:	d9d5      	bls.n	800bc30 <mixTable+0x3e4>

    // forward AUX1-4 to servo outputs (not constrained)
    if (cfg.gimbal_flags & GIMBAL_FORWARDAUX) {
 800bc84:	4b21      	ldr	r3, [pc, #132]	; (800bd0c <mixTable+0x4c0>)
 800bc86:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bc8a:	f003 0304 	and.w	r3, r3, #4
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d01c      	beq.n	800bccc <mixTable+0x480>
        int offset = core.numServos - 4;
 800bc92:	4b23      	ldr	r3, [pc, #140]	; (800bd20 <mixTable+0x4d4>)
 800bc94:	7d9b      	ldrb	r3, [r3, #22]
 800bc96:	3b04      	subs	r3, #4
 800bc98:	607b      	str	r3, [r7, #4]
        // offset servos based off number already used in mixer types
        // airplane and servo_tilt together can't be used
        // calculate offset by taking 4 from core.numServos
        for (i = 0; i < 4; i++)
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	60bb      	str	r3, [r7, #8]
 800bc9e:	e012      	b.n	800bcc6 <mixTable+0x47a>
        	actPwmWriteServo(i + offset, rcData[AUX1 + i]);
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	4413      	add	r3, r2
 800bcaa:	b2da      	uxtb	r2, r3
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	491c      	ldr	r1, [pc, #112]	; (800bd24 <mixTable+0x4d8>)
 800bcb2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4610      	mov	r0, r2
 800bcbc:	f7f5 ffa2 	bl	8001c04 <actPwmWriteServo>
        for (i = 0; i < 4; i++)
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	60bb      	str	r3, [r7, #8]
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	2b03      	cmp	r3, #3
 800bcca:	d9e9      	bls.n	800bca0 <mixTable+0x454>
    }

    maxMotor = motor[0];
 800bccc:	4b16      	ldr	r3, [pc, #88]	; (800bd28 <mixTable+0x4dc>)
 800bcce:	881b      	ldrh	r3, [r3, #0]
 800bcd0:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	60bb      	str	r3, [r7, #8]
 800bcd6:	e00f      	b.n	800bcf8 <mixTable+0x4ac>
        if (motor[i] > maxMotor)
 800bcd8:	4a13      	ldr	r2, [pc, #76]	; (800bd28 <mixTable+0x4dc>)
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bce0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	da04      	bge.n	800bcf2 <mixTable+0x4a6>
            maxMotor = motor[i];
 800bce8:	4a0f      	ldr	r2, [pc, #60]	; (800bd28 <mixTable+0x4dc>)
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcf0:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	60bb      	str	r3, [r7, #8]
 800bcf8:	4b0c      	ldr	r3, [pc, #48]	; (800bd2c <mixTable+0x4e0>)
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d3e9      	bcc.n	800bcd8 <mixTable+0x48c>
    for (i = 0; i < numberMotor; i++) {
 800bd04:	2300      	movs	r3, #0
 800bd06:	60bb      	str	r3, [r7, #8]
 800bd08:	e0e8      	b.n	800bedc <mixTable+0x690>
 800bd0a:	bf00      	nop
 800bd0c:	20000e54 	.word	0x20000e54
 800bd10:	2000149c 	.word	0x2000149c
 800bd14:	51eb851f 	.word	0x51eb851f
 800bd18:	20000040 	.word	0x20000040
 800bd1c:	20001794 	.word	0x20001794
 800bd20:	20000830 	.word	0x20000830
 800bd24:	2000172c 	.word	0x2000172c
 800bd28:	2000155c 	.word	0x2000155c
 800bd2c:	20001558 	.word	0x20001558
        if (maxMotor > mcfg.maxthrottle && !f.FIXED_WING)     // this is a way to still have good gyro corrections if at least one motor reaches its max.
 800bd30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bd34:	4a6f      	ldr	r2, [pc, #444]	; (800bef4 <mixTable+0x6a8>)
 800bd36:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	dd15      	ble.n	800bd6a <mixTable+0x51e>
 800bd3e:	4b6e      	ldr	r3, [pc, #440]	; (800bef8 <mixTable+0x6ac>)
 800bd40:	7c1b      	ldrb	r3, [r3, #16]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d111      	bne.n	800bd6a <mixTable+0x51e>
            motor[i] -= maxMotor - mcfg.maxthrottle;
 800bd46:	4a6d      	ldr	r2, [pc, #436]	; (800befc <mixTable+0x6b0>)
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	4b68      	ldr	r3, [pc, #416]	; (800bef4 <mixTable+0x6a8>)
 800bd52:	f8b3 1142 	ldrh.w	r1, [r3, #322]	; 0x142
 800bd56:	89fb      	ldrh	r3, [r7, #14]
 800bd58:	1acb      	subs	r3, r1, r3
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	4413      	add	r3, r2
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	b219      	sxth	r1, r3
 800bd62:	4a66      	ldr	r2, [pc, #408]	; (800befc <mixTable+0x6b0>)
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        if (feature(FEATURE_3D)) {
 800bd6a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bd6e:	f7fb f80b 	bl	8006d88 <feature>
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d060      	beq.n	800be3a <mixTable+0x5ee>
            if ((rcData[THROTTLE]) > mcfg.midrc) {
 800bd78:	4b61      	ldr	r3, [pc, #388]	; (800bf00 <mixTable+0x6b4>)
 800bd7a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bd7e:	461a      	mov	r2, r3
 800bd80:	4b5c      	ldr	r3, [pc, #368]	; (800bef4 <mixTable+0x6a8>)
 800bd82:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800bd86:	429a      	cmp	r2, r3
 800bd88:	dd2b      	ble.n	800bde2 <mixTable+0x596>
                motor[i] = constrain(motor[i], mcfg.deadband3d_high, mcfg.maxthrottle);
 800bd8a:	4a5c      	ldr	r2, [pc, #368]	; (800befc <mixTable+0x6b0>)
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bd92:	4618      	mov	r0, r3
 800bd94:	4b57      	ldr	r3, [pc, #348]	; (800bef4 <mixTable+0x6a8>)
 800bd96:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	4b55      	ldr	r3, [pc, #340]	; (800bef4 <mixTable+0x6a8>)
 800bd9e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800bda2:	461a      	mov	r2, r3
 800bda4:	f7f7 fe8c 	bl	8003ac0 <constrain>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	b219      	sxth	r1, r3
 800bdac:	4a53      	ldr	r2, [pc, #332]	; (800befc <mixTable+0x6b0>)
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800bdb4:	4b4f      	ldr	r3, [pc, #316]	; (800bef4 <mixTable+0x6a8>)
 800bdb6:	795b      	ldrb	r3, [r3, #5]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d17d      	bne.n	800beb8 <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].min, cfg.servoConf[5].max);
 800bdbc:	4b51      	ldr	r3, [pc, #324]	; (800bf04 <mixTable+0x6b8>)
 800bdbe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	4b50      	ldr	r3, [pc, #320]	; (800bf08 <mixTable+0x6bc>)
 800bdc6:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800bdca:	4619      	mov	r1, r3
 800bdcc:	4b4e      	ldr	r3, [pc, #312]	; (800bf08 <mixTable+0x6bc>)
 800bdce:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	f7f7 fe74 	bl	8003ac0 <constrain>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	b21a      	sxth	r2, r3
 800bddc:	4b49      	ldr	r3, [pc, #292]	; (800bf04 <mixTable+0x6b8>)
 800bdde:	815a      	strh	r2, [r3, #10]
 800bde0:	e06a      	b.n	800beb8 <mixTable+0x66c>
                }
            } else {
                motor[i] = constrain(motor[i], mcfg.mincommand, mcfg.deadband3d_low);
 800bde2:	4a46      	ldr	r2, [pc, #280]	; (800befc <mixTable+0x6b0>)
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bdea:	4618      	mov	r0, r3
 800bdec:	4b41      	ldr	r3, [pc, #260]	; (800bef4 <mixTable+0x6a8>)
 800bdee:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	4b3f      	ldr	r3, [pc, #252]	; (800bef4 <mixTable+0x6a8>)
 800bdf6:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	f7f7 fe60 	bl	8003ac0 <constrain>
 800be00:	4603      	mov	r3, r0
 800be02:	b219      	sxth	r1, r3
 800be04:	4a3d      	ldr	r2, [pc, #244]	; (800befc <mixTable+0x6b0>)
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800be0c:	4b39      	ldr	r3, [pc, #228]	; (800bef4 <mixTable+0x6a8>)
 800be0e:	795b      	ldrb	r3, [r3, #5]
 800be10:	2b01      	cmp	r3, #1
 800be12:	d151      	bne.n	800beb8 <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].max, cfg.servoConf[5].min);
 800be14:	4b3b      	ldr	r3, [pc, #236]	; (800bf04 <mixTable+0x6b8>)
 800be16:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800be1a:	4618      	mov	r0, r3
 800be1c:	4b3a      	ldr	r3, [pc, #232]	; (800bf08 <mixTable+0x6bc>)
 800be1e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800be22:	4619      	mov	r1, r3
 800be24:	4b38      	ldr	r3, [pc, #224]	; (800bf08 <mixTable+0x6bc>)
 800be26:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800be2a:	461a      	mov	r2, r3
 800be2c:	f7f7 fe48 	bl	8003ac0 <constrain>
 800be30:	4603      	mov	r3, r0
 800be32:	b21a      	sxth	r2, r3
 800be34:	4b33      	ldr	r3, [pc, #204]	; (800bf04 <mixTable+0x6b8>)
 800be36:	815a      	strh	r2, [r3, #10]
 800be38:	e03e      	b.n	800beb8 <mixTable+0x66c>
                }
            }
        } else {
            motor[i] = constrain(motor[i], mcfg.minthrottle, mcfg.maxthrottle);
 800be3a:	4a30      	ldr	r2, [pc, #192]	; (800befc <mixTable+0x6b0>)
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800be42:	4618      	mov	r0, r3
 800be44:	4b2b      	ldr	r3, [pc, #172]	; (800bef4 <mixTable+0x6a8>)
 800be46:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800be4a:	4619      	mov	r1, r3
 800be4c:	4b29      	ldr	r3, [pc, #164]	; (800bef4 <mixTable+0x6a8>)
 800be4e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800be52:	461a      	mov	r2, r3
 800be54:	f7f7 fe34 	bl	8003ac0 <constrain>
 800be58:	4603      	mov	r3, r0
 800be5a:	b219      	sxth	r1, r3
 800be5c:	4a27      	ldr	r2, [pc, #156]	; (800befc <mixTable+0x6b0>)
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if ((rcData[THROTTLE]) < mcfg.mincheck) {
 800be64:	4b26      	ldr	r3, [pc, #152]	; (800bf00 <mixTable+0x6b4>)
 800be66:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800be6a:	461a      	mov	r2, r3
 800be6c:	4b21      	ldr	r3, [pc, #132]	; (800bef4 <mixTable+0x6a8>)
 800be6e:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800be72:	429a      	cmp	r2, r3
 800be74:	da1d      	bge.n	800beb2 <mixTable+0x666>
                if (!feature(FEATURE_MOTOR_STOP))
 800be76:	2010      	movs	r0, #16
 800be78:	f7fa ff86 	bl	8006d88 <feature>
 800be7c:	4603      	mov	r3, r0
 800be7e:	f083 0301 	eor.w	r3, r3, #1
 800be82:	b2db      	uxtb	r3, r3
 800be84:	2b00      	cmp	r3, #0
 800be86:	d008      	beq.n	800be9a <mixTable+0x64e>
                    motor[i] = mcfg.minthrottle;
 800be88:	4b1a      	ldr	r3, [pc, #104]	; (800bef4 <mixTable+0x6a8>)
 800be8a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800be8e:	b219      	sxth	r1, r3
 800be90:	4a1a      	ldr	r2, [pc, #104]	; (800befc <mixTable+0x6b0>)
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800be98:	e00e      	b.n	800beb8 <mixTable+0x66c>
                else {
                    motor[i] = mcfg.mincommand;
 800be9a:	4b16      	ldr	r3, [pc, #88]	; (800bef4 <mixTable+0x6a8>)
 800be9c:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bea0:	b219      	sxth	r1, r3
 800bea2:	4a16      	ldr	r2, [pc, #88]	; (800befc <mixTable+0x6b0>)
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    f.MOTORS_STOPPED = 1;
 800beaa:	4b13      	ldr	r3, [pc, #76]	; (800bef8 <mixTable+0x6ac>)
 800beac:	2201      	movs	r2, #1
 800beae:	745a      	strb	r2, [r3, #17]
 800beb0:	e002      	b.n	800beb8 <mixTable+0x66c>
                }
            } else {
                f.MOTORS_STOPPED = 0;
 800beb2:	4b11      	ldr	r3, [pc, #68]	; (800bef8 <mixTable+0x6ac>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	745a      	strb	r2, [r3, #17]
            }
        }
        if (!f.ARMED) {
 800beb8:	4b0f      	ldr	r3, [pc, #60]	; (800bef8 <mixTable+0x6ac>)
 800beba:	785b      	ldrb	r3, [r3, #1]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d10a      	bne.n	800bed6 <mixTable+0x68a>
            motor[i] = motor_disarmed[i];
 800bec0:	4a12      	ldr	r2, [pc, #72]	; (800bf0c <mixTable+0x6c0>)
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800bec8:	4a0c      	ldr	r2, [pc, #48]	; (800befc <mixTable+0x6b0>)
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            f.MOTORS_STOPPED = 1;
 800bed0:	4b09      	ldr	r3, [pc, #36]	; (800bef8 <mixTable+0x6ac>)
 800bed2:	2201      	movs	r2, #1
 800bed4:	745a      	strb	r2, [r3, #17]
    for (i = 0; i < numberMotor; i++) {
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	3301      	adds	r3, #1
 800beda:	60bb      	str	r3, [r7, #8]
 800bedc:	4b0c      	ldr	r3, [pc, #48]	; (800bf10 <mixTable+0x6c4>)
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	461a      	mov	r2, r3
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	4293      	cmp	r3, r2
 800bee6:	f4ff af23 	bcc.w	800bd30 <mixTable+0x4e4>
        }
    }
}
 800beea:	bf00      	nop
 800beec:	bf00      	nop
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd90      	pop	{r4, r7, pc}
 800bef4:	200008e8 	.word	0x200008e8
 800bef8:	200016f4 	.word	0x200016f4
 800befc:	2000155c 	.word	0x2000155c
 800bf00:	2000172c 	.word	0x2000172c
 800bf04:	20000040 	.word	0x20000040
 800bf08:	20000e54 	.word	0x20000e54
 800bf0c:	20001574 	.word	0x20001574
 800bf10:	20001558 	.word	0x20001558

0800bf14 <blinkLED>:
// Time of automatic disarm when "Don't spin the motors when armed" is enabled.
static uint32_t disarmTime = 0;


void blinkLED(uint8_t num, uint8_t wait, uint8_t repeat)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	71fb      	strb	r3, [r7, #7]
 800bf1e:	460b      	mov	r3, r1
 800bf20:	71bb      	strb	r3, [r7, #6]
 800bf22:	4613      	mov	r3, r2
 800bf24:	717b      	strb	r3, [r7, #5]
    uint8_t i, r;

    for (r = 0; r < repeat; r++) {
 800bf26:	2300      	movs	r3, #0
 800bf28:	73bb      	strb	r3, [r7, #14]
 800bf2a:	e020      	b.n	800bf6e <blinkLED+0x5a>
        for (i = 0; i < num; i++) {
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	73fb      	strb	r3, [r7, #15]
 800bf30:	e013      	b.n	800bf5a <blinkLED+0x46>
            actLed0Toggle();            // switch LEDPIN state
 800bf32:	f7f5 fef9 	bl	8001d28 <actLed0Toggle>
            actBuzzerAction(PIF_ID_BUZZER, ON);
 800bf36:	2101      	movs	r1, #1
 800bf38:	f44f 7098 	mov.w	r0, #304	; 0x130
 800bf3c:	f7f5 ff36 	bl	8001dac <actBuzzerAction>
            pif_Delay1ms(wait);
 800bf40:	79bb      	ldrb	r3, [r7, #6]
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	4618      	mov	r0, r3
 800bf46:	f005 f883 	bl	8011050 <pif_Delay1ms>
            actBuzzerAction(PIF_ID_BUZZER, OFF);
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	f44f 7098 	mov.w	r0, #304	; 0x130
 800bf50:	f7f5 ff2c 	bl	8001dac <actBuzzerAction>
        for (i = 0; i < num; i++) {
 800bf54:	7bfb      	ldrb	r3, [r7, #15]
 800bf56:	3301      	adds	r3, #1
 800bf58:	73fb      	strb	r3, [r7, #15]
 800bf5a:	7bfa      	ldrb	r2, [r7, #15]
 800bf5c:	79fb      	ldrb	r3, [r7, #7]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d3e7      	bcc.n	800bf32 <blinkLED+0x1e>
        }
        pif_Delay1ms(60);
 800bf62:	203c      	movs	r0, #60	; 0x3c
 800bf64:	f005 f874 	bl	8011050 <pif_Delay1ms>
    for (r = 0; r < repeat; r++) {
 800bf68:	7bbb      	ldrb	r3, [r7, #14]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	73bb      	strb	r3, [r7, #14]
 800bf6e:	7bba      	ldrb	r2, [r7, #14]
 800bf70:	797b      	ldrb	r3, [r7, #5]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d3da      	bcc.n	800bf2c <blinkLED+0x18>
    }
}
 800bf76:	bf00      	nop
 800bf78:	bf00      	nop
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <annexCode>:

void annexCode(void)
{
 800bf80:	b590      	push	{r4, r7, lr}
 800bf82:	b08b      	sub	sp, #44	; 0x2c
 800bf84:	af00      	add	r7, sp, #0
    int32_t tmp, tmp2;
    int32_t axis, prop1, prop2;
    static uint16_t MaxBrkpoint = 300; // Max angle of APA

    if (!f.FIXED_WING) { // Baseflight original dynamic PID adjustemnt
 800bf86:	4b98      	ldr	r3, [pc, #608]	; (800c1e8 <annexCode+0x268>)
 800bf88:	7c1b      	ldrb	r3, [r3, #16]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d12e      	bne.n	800bfec <annexCode+0x6c>
        // PITCH & ROLL only dynamic PID adjustemnt,  depending on throttle value
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800bf8e:	4b97      	ldr	r3, [pc, #604]	; (800c1ec <annexCode+0x26c>)
 800bf90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bf94:	461a      	mov	r2, r3
 800bf96:	4b96      	ldr	r3, [pc, #600]	; (800c1f0 <annexCode+0x270>)
 800bf98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	da02      	bge.n	800bfa4 <annexCode+0x24>
            prop2 = 100;
 800bf9e:	2364      	movs	r3, #100	; 0x64
 800bfa0:	61bb      	str	r3, [r7, #24]
 800bfa2:	e07b      	b.n	800c09c <annexCode+0x11c>
        } else {
            if (rcData[THROTTLE] < 2000) {
 800bfa4:	4b91      	ldr	r3, [pc, #580]	; (800c1ec <annexCode+0x26c>)
 800bfa6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bfaa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bfae:	da16      	bge.n	800bfde <annexCode+0x5e>
                prop2 = 100 - (uint16_t)cfg.dynThrPID * (rcData[THROTTLE] - cfg.tpa_breakpoint) / (2000 - cfg.tpa_breakpoint);
 800bfb0:	4b8f      	ldr	r3, [pc, #572]	; (800c1f0 <annexCode+0x270>)
 800bfb2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	4b8c      	ldr	r3, [pc, #560]	; (800c1ec <annexCode+0x26c>)
 800bfba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	4b8b      	ldr	r3, [pc, #556]	; (800c1f0 <annexCode+0x270>)
 800bfc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfc4:	1acb      	subs	r3, r1, r3
 800bfc6:	fb03 f202 	mul.w	r2, r3, r2
 800bfca:	4b89      	ldr	r3, [pc, #548]	; (800c1f0 <annexCode+0x270>)
 800bfcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfce:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800bfd2:	fb92 f3f3 	sdiv	r3, r2, r3
 800bfd6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800bfda:	61bb      	str	r3, [r7, #24]
 800bfdc:	e05e      	b.n	800c09c <annexCode+0x11c>
            } else {
                prop2 = 100 - cfg.dynThrPID;
 800bfde:	4b84      	ldr	r3, [pc, #528]	; (800c1f0 <annexCode+0x270>)
 800bfe0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800bfe4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800bfe8:	61bb      	str	r3, [r7, #24]
 800bfea:	e057      	b.n	800c09c <annexCode+0x11c>
            }
        }
    } else {
        // Throttle & Angle combined PID Attenuation
        // Will dampen the PID's in High speeds dive on Fixed Wing Only
        prop2 = 128; // prop2 was 100, is 128 now
 800bfec:	2380      	movs	r3, #128	; 0x80
 800bfee:	61bb      	str	r3, [r7, #24]
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800bff0:	4b7e      	ldr	r3, [pc, #504]	; (800c1ec <annexCode+0x26c>)
 800bff2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bff6:	461a      	mov	r2, r3
 800bff8:	4b7d      	ldr	r3, [pc, #500]	; (800c1f0 <annexCode+0x270>)
 800bffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bffc:	429a      	cmp	r2, r3
 800bffe:	da02      	bge.n	800c006 <annexCode+0x86>
            prop2 = 128; // Higher prop2 for Fixed wing Same as used in MWii
 800c000:	2380      	movs	r3, #128	; 0x80
 800c002:	61bb      	str	r3, [r7, #24]
 800c004:	e028      	b.n	800c058 <annexCode+0xd8>
        } else {
            if (rcCommand[THROTTLE] > cfg.dynThrPID) { // Using rcCommand() to include Tpa even in Gps modes.
 800c006:	4b7b      	ldr	r3, [pc, #492]	; (800c1f4 <annexCode+0x274>)
 800c008:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c00c:	461a      	mov	r2, r3
 800c00e:	4b78      	ldr	r3, [pc, #480]	; (800c1f0 <annexCode+0x270>)
 800c010:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c014:	429a      	cmp	r2, r3
 800c016:	dd1f      	ble.n	800c058 <annexCode+0xd8>
                if (rcCommand[THROTTLE] < 2000) {
 800c018:	4b76      	ldr	r3, [pc, #472]	; (800c1f4 <annexCode+0x274>)
 800c01a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c01e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c022:	da12      	bge.n	800c04a <annexCode+0xca>
                    prop2 -=  ((uint16_t)cfg.dynThrPID * (rcCommand[THROTTLE] - cfg.dynThrPID) >> 9);
 800c024:	4b72      	ldr	r3, [pc, #456]	; (800c1f0 <annexCode+0x270>)
 800c026:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c02a:	461a      	mov	r2, r3
 800c02c:	4b71      	ldr	r3, [pc, #452]	; (800c1f4 <annexCode+0x274>)
 800c02e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c032:	4619      	mov	r1, r3
 800c034:	4b6e      	ldr	r3, [pc, #440]	; (800c1f0 <annexCode+0x270>)
 800c036:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c03a:	1acb      	subs	r3, r1, r3
 800c03c:	fb02 f303 	mul.w	r3, r2, r3
 800c040:	125b      	asrs	r3, r3, #9
 800c042:	69ba      	ldr	r2, [r7, #24]
 800c044:	1ad3      	subs	r3, r2, r3
 800c046:	61bb      	str	r3, [r7, #24]
 800c048:	e006      	b.n	800c058 <annexCode+0xd8>
                } else {
                    prop2 -=  cfg.dynThrPID;
 800c04a:	4b69      	ldr	r3, [pc, #420]	; (800c1f0 <annexCode+0x270>)
 800c04c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c050:	461a      	mov	r2, r3
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	1a9b      	subs	r3, r3, r2
 800c056:	61bb      	str	r3, [r7, #24]
                }
            }
        }
        // APA dynamic PID adjustemnt, depending on Angle of attack
        if (angle[1] > 20)
 800c058:	4b67      	ldr	r3, [pc, #412]	; (800c1f8 <annexCode+0x278>)
 800c05a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c05e:	2b14      	cmp	r3, #20
 800c060:	dd12      	ble.n	800c088 <annexCode+0x108>
            prop2 -= ((uint16_t)cfg.dynThrPID * (min(angle[1], MaxBrkpoint)) >> 8);
 800c062:	4b63      	ldr	r3, [pc, #396]	; (800c1f0 <annexCode+0x270>)
 800c064:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c068:	461a      	mov	r2, r3
 800c06a:	4b64      	ldr	r3, [pc, #400]	; (800c1fc <annexCode+0x27c>)
 800c06c:	881b      	ldrh	r3, [r3, #0]
 800c06e:	4619      	mov	r1, r3
 800c070:	4b61      	ldr	r3, [pc, #388]	; (800c1f8 <annexCode+0x278>)
 800c072:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c076:	428b      	cmp	r3, r1
 800c078:	bfa8      	it	ge
 800c07a:	460b      	movge	r3, r1
 800c07c:	fb02 f303 	mul.w	r3, r2, r3
 800c080:	121b      	asrs	r3, r3, #8
 800c082:	69ba      	ldr	r2, [r7, #24]
 800c084:	1ad3      	subs	r3, r2, r3
 800c086:	61bb      	str	r3, [r7, #24]
        prop2 = max((128 - cfg.dynThrPID), prop2);
 800c088:	4b59      	ldr	r3, [pc, #356]	; (800c1f0 <annexCode+0x270>)
 800c08a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c08e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800c092:	69ba      	ldr	r2, [r7, #24]
 800c094:	4293      	cmp	r3, r2
 800c096:	bfb8      	it	lt
 800c098:	4613      	movlt	r3, r2
 800c09a:	61bb      	str	r3, [r7, #24]
    }


    for (axis = 0; axis < 3; axis++) {
 800c09c:	2300      	movs	r3, #0
 800c09e:	623b      	str	r3, [r7, #32]
 800c0a0:	e131      	b.n	800c306 <annexCode+0x386>
        tmp = min(abs(rcData[axis] - mcfg.midrc), 500);
 800c0a2:	4a52      	ldr	r2, [pc, #328]	; (800c1ec <annexCode+0x26c>)
 800c0a4:	6a3b      	ldr	r3, [r7, #32]
 800c0a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	4b54      	ldr	r3, [pc, #336]	; (800c200 <annexCode+0x280>)
 800c0ae:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800c0b8:	dd18      	ble.n	800c0ec <annexCode+0x16c>
 800c0ba:	4a4c      	ldr	r2, [pc, #304]	; (800c1ec <annexCode+0x26c>)
 800c0bc:	6a3b      	ldr	r3, [r7, #32]
 800c0be:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	4b4e      	ldr	r3, [pc, #312]	; (800c200 <annexCode+0x280>)
 800c0c6:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c0d0:	da0c      	bge.n	800c0ec <annexCode+0x16c>
 800c0d2:	4a46      	ldr	r2, [pc, #280]	; (800c1ec <annexCode+0x26c>)
 800c0d4:	6a3b      	ldr	r3, [r7, #32]
 800c0d6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	4b48      	ldr	r3, [pc, #288]	; (800c200 <annexCode+0x280>)
 800c0de:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	bfb8      	it	lt
 800c0e8:	425b      	neglt	r3, r3
 800c0ea:	e001      	b.n	800c0f0 <annexCode+0x170>
 800c0ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c0f0:	627b      	str	r3, [r7, #36]	; 0x24
        if (axis != 2) {        // ROLL & PITCH
 800c0f2:	6a3b      	ldr	r3, [r7, #32]
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d063      	beq.n	800c1c0 <annexCode+0x240>
            if (cfg.deadband) {
 800c0f8:	4b3d      	ldr	r3, [pc, #244]	; (800c1f0 <annexCode+0x270>)
 800c0fa:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d010      	beq.n	800c124 <annexCode+0x1a4>
                if (tmp > cfg.deadband) {
 800c102:	4b3b      	ldr	r3, [pc, #236]	; (800c1f0 <annexCode+0x270>)
 800c104:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c108:	461a      	mov	r2, r3
 800c10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10c:	4293      	cmp	r3, r2
 800c10e:	dd07      	ble.n	800c120 <annexCode+0x1a0>
                    tmp -= cfg.deadband;
 800c110:	4b37      	ldr	r3, [pc, #220]	; (800c1f0 <annexCode+0x270>)
 800c112:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c116:	461a      	mov	r2, r3
 800c118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11a:	1a9b      	subs	r3, r3, r2
 800c11c:	627b      	str	r3, [r7, #36]	; 0x24
 800c11e:	e001      	b.n	800c124 <annexCode+0x1a4>
                } else {
                    tmp = 0;
 800c120:	2300      	movs	r3, #0
 800c122:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            tmp2 = tmp / 100;
 800c124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c126:	4a37      	ldr	r2, [pc, #220]	; (800c204 <annexCode+0x284>)
 800c128:	fb82 1203 	smull	r1, r2, r2, r3
 800c12c:	1152      	asrs	r2, r2, #5
 800c12e:	17db      	asrs	r3, r3, #31
 800c130:	1ad3      	subs	r3, r2, r3
 800c132:	617b      	str	r3, [r7, #20]
            rcCommand[axis] = lookupPitchRollRC[tmp2] + (tmp - tmp2 * 100) * (lookupPitchRollRC[tmp2 + 1] - lookupPitchRollRC[tmp2]) / 100;
 800c134:	4a34      	ldr	r2, [pc, #208]	; (800c208 <annexCode+0x288>)
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c144:	fb03 f101 	mul.w	r1, r3, r1
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	440b      	add	r3, r1
 800c14c:	6979      	ldr	r1, [r7, #20]
 800c14e:	3101      	adds	r1, #1
 800c150:	482d      	ldr	r0, [pc, #180]	; (800c208 <annexCode+0x288>)
 800c152:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c156:	460c      	mov	r4, r1
 800c158:	482b      	ldr	r0, [pc, #172]	; (800c208 <annexCode+0x288>)
 800c15a:	6979      	ldr	r1, [r7, #20]
 800c15c:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c160:	1a61      	subs	r1, r4, r1
 800c162:	fb01 f303 	mul.w	r3, r1, r3
 800c166:	4927      	ldr	r1, [pc, #156]	; (800c204 <annexCode+0x284>)
 800c168:	fb81 0103 	smull	r0, r1, r1, r3
 800c16c:	1149      	asrs	r1, r1, #5
 800c16e:	17db      	asrs	r3, r3, #31
 800c170:	1acb      	subs	r3, r1, r3
 800c172:	b29b      	uxth	r3, r3
 800c174:	4413      	add	r3, r2
 800c176:	b29b      	uxth	r3, r3
 800c178:	b219      	sxth	r1, r3
 800c17a:	4a1e      	ldr	r2, [pc, #120]	; (800c1f4 <annexCode+0x274>)
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.rollPitchRate[axis] * tmp / 500;
 800c182:	4a1b      	ldr	r2, [pc, #108]	; (800c1f0 <annexCode+0x270>)
 800c184:	6a3b      	ldr	r3, [r7, #32]
 800c186:	4413      	add	r3, r2
 800c188:	3323      	adds	r3, #35	; 0x23
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	461a      	mov	r2, r3
 800c18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c190:	fb02 f303 	mul.w	r3, r2, r3
 800c194:	4a1d      	ldr	r2, [pc, #116]	; (800c20c <annexCode+0x28c>)
 800c196:	fb82 1203 	smull	r1, r2, r2, r3
 800c19a:	1152      	asrs	r2, r2, #5
 800c19c:	17db      	asrs	r3, r3, #31
 800c19e:	1a9b      	subs	r3, r3, r2
 800c1a0:	3364      	adds	r3, #100	; 0x64
 800c1a2:	61fb      	str	r3, [r7, #28]
            prop1 = (uint16_t)prop1 * prop2 / 100;
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	fb02 f303 	mul.w	r3, r2, r3
 800c1b0:	4a14      	ldr	r2, [pc, #80]	; (800c204 <annexCode+0x284>)
 800c1b2:	fb82 1203 	smull	r1, r2, r2, r3
 800c1b6:	1152      	asrs	r2, r2, #5
 800c1b8:	17db      	asrs	r3, r3, #31
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	61fb      	str	r3, [r7, #28]
 800c1be:	e04a      	b.n	800c256 <annexCode+0x2d6>
        } else {                // YAW
            if (cfg.yawdeadband) {
 800c1c0:	4b0b      	ldr	r3, [pc, #44]	; (800c1f0 <annexCode+0x270>)
 800c1c2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d024      	beq.n	800c214 <annexCode+0x294>
                if (tmp > cfg.yawdeadband) {
 800c1ca:	4b09      	ldr	r3, [pc, #36]	; (800c1f0 <annexCode+0x270>)
 800c1cc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	dd1b      	ble.n	800c210 <annexCode+0x290>
                    tmp -= cfg.yawdeadband;
 800c1d8:	4b05      	ldr	r3, [pc, #20]	; (800c1f0 <annexCode+0x270>)
 800c1da:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c1de:	461a      	mov	r2, r3
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e2:	1a9b      	subs	r3, r3, r2
 800c1e4:	627b      	str	r3, [r7, #36]	; 0x24
 800c1e6:	e015      	b.n	800c214 <annexCode+0x294>
 800c1e8:	200016f4 	.word	0x200016f4
 800c1ec:	2000172c 	.word	0x2000172c
 800c1f0:	20000e54 	.word	0x20000e54
 800c1f4:	20001750 	.word	0x20001750
 800c1f8:	2000149c 	.word	0x2000149c
 800c1fc:	20000056 	.word	0x20000056
 800c200:	200008e8 	.word	0x200008e8
 800c204:	51eb851f 	.word	0x51eb851f
 800c208:	20001758 	.word	0x20001758
 800c20c:	10624dd3 	.word	0x10624dd3
                } else {
                    tmp = 0;
 800c210:	2300      	movs	r3, #0
 800c212:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
            rcCommand[axis] = tmp * -mcfg.yaw_control_direction;
 800c214:	4ba0      	ldr	r3, [pc, #640]	; (800c498 <annexCode+0x518>)
 800c216:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800c21a:	425b      	negs	r3, r3
 800c21c:	b29a      	uxth	r2, r3
 800c21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c220:	b29b      	uxth	r3, r3
 800c222:	fb12 f303 	smulbb	r3, r2, r3
 800c226:	b29b      	uxth	r3, r3
 800c228:	b219      	sxth	r1, r3
 800c22a:	4a9c      	ldr	r2, [pc, #624]	; (800c49c <annexCode+0x51c>)
 800c22c:	6a3b      	ldr	r3, [r7, #32]
 800c22e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.yawRate * abs(tmp) / 500;
 800c232:	4b9b      	ldr	r3, [pc, #620]	; (800c4a0 <annexCode+0x520>)
 800c234:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c238:	461a      	mov	r2, r3
 800c23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	bfb8      	it	lt
 800c240:	425b      	neglt	r3, r3
 800c242:	fb02 f303 	mul.w	r3, r2, r3
 800c246:	4a97      	ldr	r2, [pc, #604]	; (800c4a4 <annexCode+0x524>)
 800c248:	fb82 1203 	smull	r1, r2, r2, r3
 800c24c:	1152      	asrs	r2, r2, #5
 800c24e:	17db      	asrs	r3, r3, #31
 800c250:	1a9b      	subs	r3, r3, r2
 800c252:	3364      	adds	r3, #100	; 0x64
 800c254:	61fb      	str	r3, [r7, #28]
        }
        dynP8[axis] = (uint16_t)cfg.P8[axis] * prop1 / 100;
 800c256:	4a92      	ldr	r2, [pc, #584]	; (800c4a0 <annexCode+0x520>)
 800c258:	6a3b      	ldr	r3, [r7, #32]
 800c25a:	4413      	add	r3, r2
 800c25c:	3301      	adds	r3, #1
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	461a      	mov	r2, r3
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	fb02 f303 	mul.w	r3, r2, r3
 800c268:	4a8f      	ldr	r2, [pc, #572]	; (800c4a8 <annexCode+0x528>)
 800c26a:	fb82 1203 	smull	r1, r2, r2, r3
 800c26e:	1152      	asrs	r2, r2, #5
 800c270:	17db      	asrs	r3, r3, #31
 800c272:	1ad3      	subs	r3, r2, r3
 800c274:	b2d9      	uxtb	r1, r3
 800c276:	4a8d      	ldr	r2, [pc, #564]	; (800c4ac <annexCode+0x52c>)
 800c278:	6a3b      	ldr	r3, [r7, #32]
 800c27a:	4413      	add	r3, r2
 800c27c:	460a      	mov	r2, r1
 800c27e:	701a      	strb	r2, [r3, #0]
        dynI8[axis] = (uint16_t)cfg.I8[axis] * prop1 / 100;
 800c280:	4a87      	ldr	r2, [pc, #540]	; (800c4a0 <annexCode+0x520>)
 800c282:	6a3b      	ldr	r3, [r7, #32]
 800c284:	4413      	add	r3, r2
 800c286:	330b      	adds	r3, #11
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	461a      	mov	r2, r3
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	fb02 f303 	mul.w	r3, r2, r3
 800c292:	4a85      	ldr	r2, [pc, #532]	; (800c4a8 <annexCode+0x528>)
 800c294:	fb82 1203 	smull	r1, r2, r2, r3
 800c298:	1152      	asrs	r2, r2, #5
 800c29a:	17db      	asrs	r3, r3, #31
 800c29c:	1ad3      	subs	r3, r2, r3
 800c29e:	b2d9      	uxtb	r1, r3
 800c2a0:	4a83      	ldr	r2, [pc, #524]	; (800c4b0 <annexCode+0x530>)
 800c2a2:	6a3b      	ldr	r3, [r7, #32]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	460a      	mov	r2, r1
 800c2a8:	701a      	strb	r2, [r3, #0]
        dynD8[axis] = (uint16_t)cfg.D8[axis] * prop1 / 100;
 800c2aa:	4a7d      	ldr	r2, [pc, #500]	; (800c4a0 <annexCode+0x520>)
 800c2ac:	6a3b      	ldr	r3, [r7, #32]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	3315      	adds	r3, #21
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	fb02 f303 	mul.w	r3, r2, r3
 800c2bc:	4a7a      	ldr	r2, [pc, #488]	; (800c4a8 <annexCode+0x528>)
 800c2be:	fb82 1203 	smull	r1, r2, r2, r3
 800c2c2:	1152      	asrs	r2, r2, #5
 800c2c4:	17db      	asrs	r3, r3, #31
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	b2d9      	uxtb	r1, r3
 800c2ca:	4a7a      	ldr	r2, [pc, #488]	; (800c4b4 <annexCode+0x534>)
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	460a      	mov	r2, r1
 800c2d2:	701a      	strb	r2, [r3, #0]
        if (rcData[axis] < mcfg.midrc)
 800c2d4:	4a78      	ldr	r2, [pc, #480]	; (800c4b8 <annexCode+0x538>)
 800c2d6:	6a3b      	ldr	r3, [r7, #32]
 800c2d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c2dc:	461a      	mov	r2, r3
 800c2de:	4b6e      	ldr	r3, [pc, #440]	; (800c498 <annexCode+0x518>)
 800c2e0:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	da0b      	bge.n	800c300 <annexCode+0x380>
            rcCommand[axis] = -rcCommand[axis];
 800c2e8:	4a6c      	ldr	r2, [pc, #432]	; (800c49c <annexCode+0x51c>)
 800c2ea:	6a3b      	ldr	r3, [r7, #32]
 800c2ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	425b      	negs	r3, r3
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	b219      	sxth	r1, r3
 800c2f8:	4a68      	ldr	r2, [pc, #416]	; (800c49c <annexCode+0x51c>)
 800c2fa:	6a3b      	ldr	r3, [r7, #32]
 800c2fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800c300:	6a3b      	ldr	r3, [r7, #32]
 800c302:	3301      	adds	r3, #1
 800c304:	623b      	str	r3, [r7, #32]
 800c306:	6a3b      	ldr	r3, [r7, #32]
 800c308:	2b02      	cmp	r3, #2
 800c30a:	f77f aeca 	ble.w	800c0a2 <annexCode+0x122>
    }

    tmp = constrain(rcData[THROTTLE], mcfg.mincheck, 2000);
 800c30e:	4b6a      	ldr	r3, [pc, #424]	; (800c4b8 <annexCode+0x538>)
 800c310:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c314:	4618      	mov	r0, r3
 800c316:	4b60      	ldr	r3, [pc, #384]	; (800c498 <annexCode+0x518>)
 800c318:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c31c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c320:	4619      	mov	r1, r3
 800c322:	f7f7 fbcd 	bl	8003ac0 <constrain>
 800c326:	6278      	str	r0, [r7, #36]	; 0x24
    tmp = (uint32_t)(tmp - mcfg.mincheck) * 1000 / (2000 - mcfg.mincheck);       // [MINCHECK;2000] -> [0;1000]
 800c328:	4b5b      	ldr	r3, [pc, #364]	; (800c498 <annexCode+0x518>)
 800c32a:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c32e:	461a      	mov	r2, r3
 800c330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c332:	1a9b      	subs	r3, r3, r2
 800c334:	461a      	mov	r2, r3
 800c336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c33a:	fb02 f303 	mul.w	r3, r2, r3
 800c33e:	4a56      	ldr	r2, [pc, #344]	; (800c498 <annexCode+0x518>)
 800c340:	f8b2 219a 	ldrh.w	r2, [r2, #410]	; 0x19a
 800c344:	f5c2 62fa 	rsb	r2, r2, #2000	; 0x7d0
 800c348:	fbb3 f3f2 	udiv	r3, r3, r2
 800c34c:	627b      	str	r3, [r7, #36]	; 0x24
    tmp2 = tmp / 100;
 800c34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c350:	4a55      	ldr	r2, [pc, #340]	; (800c4a8 <annexCode+0x528>)
 800c352:	fb82 1203 	smull	r1, r2, r2, r3
 800c356:	1152      	asrs	r2, r2, #5
 800c358:	17db      	asrs	r3, r3, #31
 800c35a:	1ad3      	subs	r3, r2, r3
 800c35c:	617b      	str	r3, [r7, #20]
    rcCommand[THROTTLE] = lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1] - lookupThrottleRC[tmp2]) / 100;    // [0;1000] -> expo -> [MINTHROTTLE;MAXTHROTTLE]
 800c35e:	4a57      	ldr	r2, [pc, #348]	; (800c4bc <annexCode+0x53c>)
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c366:	b29a      	uxth	r2, r3
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c36e:	fb03 f101 	mul.w	r1, r3, r1
 800c372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c374:	440b      	add	r3, r1
 800c376:	6979      	ldr	r1, [r7, #20]
 800c378:	3101      	adds	r1, #1
 800c37a:	4850      	ldr	r0, [pc, #320]	; (800c4bc <annexCode+0x53c>)
 800c37c:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c380:	460c      	mov	r4, r1
 800c382:	484e      	ldr	r0, [pc, #312]	; (800c4bc <annexCode+0x53c>)
 800c384:	6979      	ldr	r1, [r7, #20]
 800c386:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c38a:	1a61      	subs	r1, r4, r1
 800c38c:	fb01 f303 	mul.w	r3, r1, r3
 800c390:	4945      	ldr	r1, [pc, #276]	; (800c4a8 <annexCode+0x528>)
 800c392:	fb81 0103 	smull	r0, r1, r1, r3
 800c396:	1149      	asrs	r1, r1, #5
 800c398:	17db      	asrs	r3, r3, #31
 800c39a:	1acb      	subs	r3, r1, r3
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	4413      	add	r3, r2
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	b21a      	sxth	r2, r3
 800c3a4:	4b3d      	ldr	r3, [pc, #244]	; (800c49c <annexCode+0x51c>)
 800c3a6:	80da      	strh	r2, [r3, #6]

    if (f.HEADFREE_MODE) {
 800c3a8:	4b45      	ldr	r3, [pc, #276]	; (800c4c0 <annexCode+0x540>)
 800c3aa:	7a5b      	ldrb	r3, [r3, #9]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d06b      	beq.n	800c488 <annexCode+0x508>
        float radDiff = (heading - headFreeModeHold) * M_PI / 180.0f;
 800c3b0:	4b44      	ldr	r3, [pc, #272]	; (800c4c4 <annexCode+0x544>)
 800c3b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	4b43      	ldr	r3, [pc, #268]	; (800c4c8 <annexCode+0x548>)
 800c3ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c3be:	1ad3      	subs	r3, r2, r3
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7f4 f863 	bl	800048c <__aeabi_i2d>
 800c3c6:	a332      	add	r3, pc, #200	; (adr r3, 800c490 <annexCode+0x510>)
 800c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3cc:	f7f4 f8c8 	bl	8000560 <__aeabi_dmul>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	4610      	mov	r0, r2
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	f04f 0200 	mov.w	r2, #0
 800c3dc:	4b3b      	ldr	r3, [pc, #236]	; (800c4cc <annexCode+0x54c>)
 800c3de:	f7f4 f9e9 	bl	80007b4 <__aeabi_ddiv>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	4610      	mov	r0, r2
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	f7f4 fb9b 	bl	8000b24 <__aeabi_d2f>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	613b      	str	r3, [r7, #16]
        float cosDiff = cosf(radDiff);
 800c3f2:	ed97 0a04 	vldr	s0, [r7, #16]
 800c3f6:	f016 fe2f 	bl	8023058 <cosf>
 800c3fa:	ed87 0a03 	vstr	s0, [r7, #12]
        float sinDiff = sinf(radDiff);
 800c3fe:	ed97 0a04 	vldr	s0, [r7, #16]
 800c402:	f016 fead 	bl	8023160 <sinf>
 800c406:	ed87 0a02 	vstr	s0, [r7, #8]
        int16_t rcCommand_PITCH = rcCommand[PITCH] * cosDiff + rcCommand[ROLL] * sinDiff;
 800c40a:	4b24      	ldr	r3, [pc, #144]	; (800c49c <annexCode+0x51c>)
 800c40c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c410:	ee07 3a90 	vmov	s15, r3
 800c414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c418:	edd7 7a03 	vldr	s15, [r7, #12]
 800c41c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c420:	4b1e      	ldr	r3, [pc, #120]	; (800c49c <annexCode+0x51c>)
 800c422:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c426:	ee07 3a90 	vmov	s15, r3
 800c42a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c42e:	edd7 7a02 	vldr	s15, [r7, #8]
 800c432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c43a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c43e:	ee17 3a90 	vmov	r3, s15
 800c442:	80fb      	strh	r3, [r7, #6]
        rcCommand[ROLL] = rcCommand[ROLL] * cosDiff - rcCommand[PITCH] * sinDiff;
 800c444:	4b15      	ldr	r3, [pc, #84]	; (800c49c <annexCode+0x51c>)
 800c446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c44a:	ee07 3a90 	vmov	s15, r3
 800c44e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c452:	edd7 7a03 	vldr	s15, [r7, #12]
 800c456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c45a:	4b10      	ldr	r3, [pc, #64]	; (800c49c <annexCode+0x51c>)
 800c45c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c460:	ee07 3a90 	vmov	s15, r3
 800c464:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c468:	edd7 7a02 	vldr	s15, [r7, #8]
 800c46c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c470:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c478:	ee17 3a90 	vmov	r3, s15
 800c47c:	b21a      	sxth	r2, r3
 800c47e:	4b07      	ldr	r3, [pc, #28]	; (800c49c <annexCode+0x51c>)
 800c480:	801a      	strh	r2, [r3, #0]
        rcCommand[PITCH] = rcCommand_PITCH;
 800c482:	4a06      	ldr	r2, [pc, #24]	; (800c49c <annexCode+0x51c>)
 800c484:	88fb      	ldrh	r3, [r7, #6]
 800c486:	8053      	strh	r3, [r2, #2]
    }
}
 800c488:	bf00      	nop
 800c48a:	372c      	adds	r7, #44	; 0x2c
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd90      	pop	{r4, r7, pc}
 800c490:	54442d18 	.word	0x54442d18
 800c494:	400921fb 	.word	0x400921fb
 800c498:	200008e8 	.word	0x200008e8
 800c49c:	20001750 	.word	0x20001750
 800c4a0:	20000e54 	.word	0x20000e54
 800c4a4:	10624dd3 	.word	0x10624dd3
 800c4a8:	51eb851f 	.word	0x51eb851f
 800c4ac:	20001788 	.word	0x20001788
 800c4b0:	2000178c 	.word	0x2000178c
 800c4b4:	20001790 	.word	0x20001790
 800c4b8:	2000172c 	.word	0x2000172c
 800c4bc:	20001768 	.word	0x20001768
 800c4c0:	200016f4 	.word	0x200016f4
 800c4c4:	200019c0 	.word	0x200019c0
 800c4c8:	20001716 	.word	0x20001716
 800c4cc:	40668000 	.word	0x40668000

0800c4d0 <taskLedState>:

uint16_t taskLedState(PifTask *p_task)
{
 800c4d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c4d4:	b082      	sub	sp, #8
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
    static int64_t mAhdrawnRaw = 0;
    static int32_t vbatCycleTime = 0;

    (void)p_task;

    if (feature(FEATURE_VBAT)) {
 800c4da:	2002      	movs	r0, #2
 800c4dc:	f7fa fc54 	bl	8006d88 <feature>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	f000 80bb 	beq.w	800c65e <taskLedState+0x18e>
        vbatCycleTime += cycleTime;
 800c4e8:	4b91      	ldr	r3, [pc, #580]	; (800c730 <taskLedState+0x260>)
 800c4ea:	881b      	ldrh	r3, [r3, #0]
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	4b91      	ldr	r3, [pc, #580]	; (800c734 <taskLedState+0x264>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	4a8f      	ldr	r2, [pc, #572]	; (800c734 <taskLedState+0x264>)
 800c4f6:	6013      	str	r3, [r2, #0]
        if (!(++vbatTimer % VBATFREQ)) {
 800c4f8:	4b8f      	ldr	r3, [pc, #572]	; (800c738 <taskLedState+0x268>)
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	b2da      	uxtb	r2, r3
 800c500:	4b8d      	ldr	r3, [pc, #564]	; (800c738 <taskLedState+0x268>)
 800c502:	701a      	strb	r2, [r3, #0]
 800c504:	4b8c      	ldr	r3, [pc, #560]	; (800c738 <taskLedState+0x268>)
 800c506:	781a      	ldrb	r2, [r3, #0]
 800c508:	4b8c      	ldr	r3, [pc, #560]	; (800c73c <taskLedState+0x26c>)
 800c50a:	fba3 1302 	umull	r1, r3, r3, r2
 800c50e:	0899      	lsrs	r1, r3, #2
 800c510:	460b      	mov	r3, r1
 800c512:	005b      	lsls	r3, r3, #1
 800c514:	440b      	add	r3, r1
 800c516:	005b      	lsls	r3, r3, #1
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f040 808b 	bne.w	800c638 <taskLedState+0x168>
            vbatRaw -= vbatRaw / 8;
 800c522:	4b87      	ldr	r3, [pc, #540]	; (800c740 <taskLedState+0x270>)
 800c524:	ed93 7a00 	vldr	s14, [r3]
 800c528:	4b85      	ldr	r3, [pc, #532]	; (800c740 <taskLedState+0x270>)
 800c52a:	edd3 6a00 	vldr	s13, [r3]
 800c52e:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 800c532:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c53a:	4b81      	ldr	r3, [pc, #516]	; (800c740 <taskLedState+0x270>)
 800c53c:	edc3 7a00 	vstr	s15, [r3]
            vbatRaw += actGetBatteryVoltage() * mcfg.vbatscale;
 800c540:	f7f4 fe44 	bl	80011cc <actGetBatteryVoltage>
 800c544:	eeb0 7a40 	vmov.f32	s14, s0
 800c548:	4b7e      	ldr	r3, [pc, #504]	; (800c744 <taskLedState+0x274>)
 800c54a:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800c54e:	ee07 3a90 	vmov	s15, r3
 800c552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c55a:	4b79      	ldr	r3, [pc, #484]	; (800c740 <taskLedState+0x270>)
 800c55c:	edd3 7a00 	vldr	s15, [r3]
 800c560:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c564:	4b76      	ldr	r3, [pc, #472]	; (800c740 <taskLedState+0x270>)
 800c566:	edc3 7a00 	vstr	s15, [r3]
            vbat = vbatRaw / 8;
 800c56a:	4b75      	ldr	r3, [pc, #468]	; (800c740 <taskLedState+0x270>)
 800c56c:	ed93 7a00 	vldr	s14, [r3]
 800c570:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800c574:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c57c:	ee17 3a90 	vmov	r3, s15
 800c580:	b29a      	uxth	r2, r3
 800c582:	4b71      	ldr	r3, [pc, #452]	; (800c748 <taskLedState+0x278>)
 800c584:	801a      	strh	r2, [r3, #0]

            if (mcfg.power_adc_channel > 0) {
 800c586:	4b6f      	ldr	r3, [pc, #444]	; (800c744 <taskLedState+0x274>)
 800c588:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d053      	beq.n	800c638 <taskLedState+0x168>
                amperageRaw -= amperageRaw / 8;
 800c590:	4b6e      	ldr	r3, [pc, #440]	; (800c74c <taskLedState+0x27c>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	da00      	bge.n	800c59a <taskLedState+0xca>
 800c598:	3307      	adds	r3, #7
 800c59a:	10db      	asrs	r3, r3, #3
 800c59c:	425b      	negs	r3, r3
 800c59e:	461a      	mov	r2, r3
 800c5a0:	4b6a      	ldr	r3, [pc, #424]	; (800c74c <taskLedState+0x27c>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	4a69      	ldr	r2, [pc, #420]	; (800c74c <taskLedState+0x27c>)
 800c5a8:	6013      	str	r3, [r2, #0]
                amperageRaw += (actGetBatteryCurrent() - mcfg.currentoffset) * 1000 / (int32_t)mcfg.currentscale; // current in 0.01A steps
 800c5aa:	f7f4 fe2d 	bl	8001208 <actGetBatteryCurrent>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	4a64      	ldr	r2, [pc, #400]	; (800c744 <taskLedState+0x274>)
 800c5b2:	f8b2 217a 	ldrh.w	r2, [r2, #378]	; 0x17a
 800c5b6:	1a9b      	subs	r3, r3, r2
 800c5b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c5bc:	fb02 f303 	mul.w	r3, r2, r3
 800c5c0:	4a60      	ldr	r2, [pc, #384]	; (800c744 <taskLedState+0x274>)
 800c5c2:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
 800c5c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5ca:	4a60      	ldr	r2, [pc, #384]	; (800c74c <taskLedState+0x27c>)
 800c5cc:	6812      	ldr	r2, [r2, #0]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	4b5e      	ldr	r3, [pc, #376]	; (800c74c <taskLedState+0x27c>)
 800c5d4:	601a      	str	r2, [r3, #0]
                amperage = amperageRaw / 8;
 800c5d6:	4b5d      	ldr	r3, [pc, #372]	; (800c74c <taskLedState+0x27c>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	da00      	bge.n	800c5e0 <taskLedState+0x110>
 800c5de:	3307      	adds	r3, #7
 800c5e0:	10db      	asrs	r3, r3, #3
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	4b5a      	ldr	r3, [pc, #360]	; (800c750 <taskLedState+0x280>)
 800c5e6:	601a      	str	r2, [r3, #0]
                mAhdrawnRaw += (amperage * vbatCycleTime) / 1000;
 800c5e8:	4b59      	ldr	r3, [pc, #356]	; (800c750 <taskLedState+0x280>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a51      	ldr	r2, [pc, #324]	; (800c734 <taskLedState+0x264>)
 800c5ee:	6812      	ldr	r2, [r2, #0]
 800c5f0:	fb02 f303 	mul.w	r3, r2, r3
 800c5f4:	4a57      	ldr	r2, [pc, #348]	; (800c754 <taskLedState+0x284>)
 800c5f6:	fb82 1203 	smull	r1, r2, r2, r3
 800c5fa:	1192      	asrs	r2, r2, #6
 800c5fc:	17db      	asrs	r3, r3, #31
 800c5fe:	1ad3      	subs	r3, r2, r3
 800c600:	17da      	asrs	r2, r3, #31
 800c602:	461c      	mov	r4, r3
 800c604:	4615      	mov	r5, r2
 800c606:	4b54      	ldr	r3, [pc, #336]	; (800c758 <taskLedState+0x288>)
 800c608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60c:	eb14 0802 	adds.w	r8, r4, r2
 800c610:	eb45 0903 	adc.w	r9, r5, r3
 800c614:	4b50      	ldr	r3, [pc, #320]	; (800c758 <taskLedState+0x288>)
 800c616:	e9c3 8900 	strd	r8, r9, [r3]
                mAhdrawn = mAhdrawnRaw / (3600 * 100);
 800c61a:	4b4f      	ldr	r3, [pc, #316]	; (800c758 <taskLedState+0x288>)
 800c61c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c620:	4a4e      	ldr	r2, [pc, #312]	; (800c75c <taskLedState+0x28c>)
 800c622:	f04f 0300 	mov.w	r3, #0
 800c626:	f7f4 fbdb 	bl	8000de0 <__aeabi_ldivmod>
 800c62a:	4602      	mov	r2, r0
 800c62c:	460b      	mov	r3, r1
 800c62e:	4b4c      	ldr	r3, [pc, #304]	; (800c760 <taskLedState+0x290>)
 800c630:	601a      	str	r2, [r3, #0]
                vbatCycleTime = 0;
 800c632:	4b40      	ldr	r3, [pc, #256]	; (800c734 <taskLedState+0x264>)
 800c634:	2200      	movs	r2, #0
 800c636:	601a      	str	r2, [r3, #0]
            }

        }
        // Buzzers for low and critical battery levels
        if (vbat <= batteryCriticalVoltage)
 800c638:	4b43      	ldr	r3, [pc, #268]	; (800c748 <taskLedState+0x278>)
 800c63a:	881a      	ldrh	r2, [r3, #0]
 800c63c:	4b49      	ldr	r3, [pc, #292]	; (800c764 <taskLedState+0x294>)
 800c63e:	881b      	ldrh	r3, [r3, #0]
 800c640:	429a      	cmp	r2, r3
 800c642:	d803      	bhi.n	800c64c <taskLedState+0x17c>
            buzzer(BUZZER_BAT_CRIT_LOW);     // Critically low battery
 800c644:	2001      	movs	r0, #1
 800c646:	f7f7 fbcb 	bl	8003de0 <buzzer>
 800c64a:	e008      	b.n	800c65e <taskLedState+0x18e>
        else if (vbat <= batteryWarningVoltage)
 800c64c:	4b3e      	ldr	r3, [pc, #248]	; (800c748 <taskLedState+0x278>)
 800c64e:	881a      	ldrh	r2, [r3, #0]
 800c650:	4b45      	ldr	r3, [pc, #276]	; (800c768 <taskLedState+0x298>)
 800c652:	881b      	ldrh	r3, [r3, #0]
 800c654:	429a      	cmp	r2, r3
 800c656:	d802      	bhi.n	800c65e <taskLedState+0x18e>
            buzzer(BUZZER_BAT_LOW);     // low battery
 800c658:	2002      	movs	r0, #2
 800c65a:	f7f7 fbc1 	bl	8003de0 <buzzer>
    }
    // update buzzer handler
    buzzerUpdate();
 800c65e:	f7f7 fcab 	bl	8003fb8 <buzzerUpdate>
    if (!cliMode && feature(FEATURE_TELEMETRY)) {
        handleTelemetry();
    }
#endif

    serialCom();
 800c662:	f004 fbfd 	bl	8010e60 <serialCom>

    // Read out gyro temperature. can use it for something somewhere. maybe get MCU temperature instead? lots of fun possibilities.
    if (sensor_set.gyro.temperature)
 800c666:	4b41      	ldr	r3, [pc, #260]	; (800c76c <taskLedState+0x29c>)
 800c668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d005      	beq.n	800c67c <taskLedState+0x1ac>
        sensor_set.gyro.temperature(&sensor_set, &telemTemperature1);
 800c670:	4b3e      	ldr	r3, [pc, #248]	; (800c76c <taskLedState+0x29c>)
 800c672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c676:	493e      	ldr	r1, [pc, #248]	; (800c770 <taskLedState+0x2a0>)
 800c678:	483c      	ldr	r0, [pc, #240]	; (800c76c <taskLedState+0x29c>)
 800c67a:	4798      	blx	r3
    else {
        // TODO MCU temp
    }

    if ((calibratingA > 0 && sensors(SENSOR_ACC)) || (calibratingG > 0)) {      // Calibration phasis
 800c67c:	4b3d      	ldr	r3, [pc, #244]	; (800c774 <taskLedState+0x2a4>)
 800c67e:	881b      	ldrh	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d005      	beq.n	800c690 <taskLedState+0x1c0>
 800c684:	2002      	movs	r0, #2
 800c686:	f7fa fb37 	bl	8006cf8 <sensors>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d103      	bne.n	800c698 <taskLedState+0x1c8>
 800c690:	4b39      	ldr	r3, [pc, #228]	; (800c778 <taskLedState+0x2a8>)
 800c692:	881b      	ldrh	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d002      	beq.n	800c69e <taskLedState+0x1ce>
        actLed0Toggle();
 800c698:	f7f5 fb46 	bl	8001d28 <actLed0Toggle>
 800c69c:	e00d      	b.n	800c6ba <taskLedState+0x1ea>
    } else {
        if (f.ACC_CALIBRATED)
 800c69e:	4b37      	ldr	r3, [pc, #220]	; (800c77c <taskLedState+0x2ac>)
 800c6a0:	789b      	ldrb	r3, [r3, #2]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d002      	beq.n	800c6ac <taskLedState+0x1dc>
            actLed0State(OFF);
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	f7f5 fb28 	bl	8001cfc <actLed0State>
        if (f.ARMED)
 800c6ac:	4b33      	ldr	r3, [pc, #204]	; (800c77c <taskLedState+0x2ac>)
 800c6ae:	785b      	ldrb	r3, [r3, #1]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <taskLedState+0x1ea>
            actLed0State(ON);
 800c6b4:	2001      	movs	r0, #1
 800c6b6:	f7f5 fb21 	bl	8001cfc <actLed0State>
        ledringState(heading, angle, f.ARMED);
    }
#endif

    static uint8_t AccCalibLed = 0;
    if (AccCalibLed) AccCalibLed--;
 800c6ba:	4b31      	ldr	r3, [pc, #196]	; (800c780 <taskLedState+0x2b0>)
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d006      	beq.n	800c6d0 <taskLedState+0x200>
 800c6c2:	4b2f      	ldr	r3, [pc, #188]	; (800c780 <taskLedState+0x2b0>)
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	4b2d      	ldr	r3, [pc, #180]	; (800c780 <taskLedState+0x2b0>)
 800c6cc:	701a      	strb	r2, [r3, #0]
 800c6ce:	e00f      	b.n	800c6f0 <taskLedState+0x220>
    else {
        if (!f.SMALL_ANGLE) {
 800c6d0:	4b2a      	ldr	r3, [pc, #168]	; (800c77c <taskLedState+0x2ac>)
 800c6d2:	7b5b      	ldrb	r3, [r3, #13]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d105      	bne.n	800c6e4 <taskLedState+0x214>
            f.ACC_CALIBRATED = 0; // the multi uses ACC and is not calibrated or is too much inclinated
 800c6d8:	4b28      	ldr	r3, [pc, #160]	; (800c77c <taskLedState+0x2ac>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	709a      	strb	r2, [r3, #2]
            actLed0Toggle();
 800c6de:	f7f5 fb23 	bl	8001d28 <actLed0Toggle>
 800c6e2:	e002      	b.n	800c6ea <taskLedState+0x21a>
        } else {
            f.ACC_CALIBRATED = 1;
 800c6e4:	4b25      	ldr	r3, [pc, #148]	; (800c77c <taskLedState+0x2ac>)
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	709a      	strb	r2, [r3, #2]
        }
        AccCalibLed = 10 - 1;       // 50ms * 10 = 500ms
 800c6ea:	4b25      	ldr	r3, [pc, #148]	; (800c780 <taskLedState+0x2b0>)
 800c6ec:	2209      	movs	r2, #9
 800c6ee:	701a      	strb	r2, [r3, #0]
    }

    if (sensors(SENSOR_GPS)) {
 800c6f0:	2020      	movs	r0, #32
 800c6f2:	f7fa fb01 	bl	8006cf8 <sensors>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d013      	beq.n	800c724 <taskLedState+0x254>
        static uint8_t GPSLEDTime = 0;
        if (GPSLEDTime) GPSLEDTime--;
 800c6fc:	4b21      	ldr	r3, [pc, #132]	; (800c784 <taskLedState+0x2b4>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d006      	beq.n	800c712 <taskLedState+0x242>
 800c704:	4b1f      	ldr	r3, [pc, #124]	; (800c784 <taskLedState+0x2b4>)
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	3b01      	subs	r3, #1
 800c70a:	b2da      	uxtb	r2, r3
 800c70c:	4b1d      	ldr	r3, [pc, #116]	; (800c784 <taskLedState+0x2b4>)
 800c70e:	701a      	strb	r2, [r3, #0]
 800c710:	e008      	b.n	800c724 <taskLedState+0x254>
        else {
            if (GPS_numSat >= 5) actLed1Toggle();
 800c712:	4b1d      	ldr	r3, [pc, #116]	; (800c788 <taskLedState+0x2b8>)
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	2b04      	cmp	r3, #4
 800c718:	d901      	bls.n	800c71e <taskLedState+0x24e>
 800c71a:	f7f5 fb31 	bl	8001d80 <actLed1Toggle>
            GPSLEDTime = 3 - 1;     // 50ms * 3 = 150ms
 800c71e:	4b19      	ldr	r3, [pc, #100]	; (800c784 <taskLedState+0x2b4>)
 800c720:	2202      	movs	r2, #2
 800c722:	701a      	strb	r2, [r3, #0]
        }
    }
    return 0;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c730:	20001714 	.word	0x20001714
 800c734:	200018b8 	.word	0x200018b8
 800c738:	200018bc 	.word	0x200018bc
 800c73c:	aaaaaaab 	.word	0xaaaaaaab
 800c740:	200018c0 	.word	0x200018c0
 800c744:	200008e8 	.word	0x200008e8
 800c748:	20001718 	.word	0x20001718
 800c74c:	200018c4 	.word	0x200018c4
 800c750:	2000171c 	.word	0x2000171c
 800c754:	10624dd3 	.word	0x10624dd3
 800c758:	200018c8 	.word	0x200018c8
 800c75c:	00057e40 	.word	0x00057e40
 800c760:	20001720 	.word	0x20001720
 800c764:	20001898 	.word	0x20001898
 800c768:	20001896 	.word	0x20001896
 800c76c:	2000005c 	.word	0x2000005c
 800c770:	20001724 	.word	0x20001724
 800c774:	200019ba 	.word	0x200019ba
 800c778:	200019be 	.word	0x200019be
 800c77c:	200016f4 	.word	0x200016f4
 800c780:	200018d0 	.word	0x200018d0
 800c784:	200018d1 	.word	0x200018d1
 800c788:	200017d8 	.word	0x200017d8

0800c78c <pwmReadRawRC>:

uint16_t pwmReadRawRC(uint8_t chan)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	4603      	mov	r3, r0
 800c794:	71fb      	strb	r3, [r7, #7]
    return actPwmRead(mcfg.rcmap[chan]);
 800c796:	79fb      	ldrb	r3, [r7, #7]
 800c798:	4a05      	ldr	r2, [pc, #20]	; (800c7b0 <pwmReadRawRC+0x24>)
 800c79a:	4413      	add	r3, r2
 800c79c:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7f5 fa3d 	bl	8001c20 <actPwmRead>
 800c7a6:	4603      	mov	r3, r0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	200008e8 	.word	0x200008e8

0800c7b4 <computeRC>:

void computeRC(void)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
    uint16_t capture;
    int i, chan;

    if (feature(FEATURE_SERIALRX)) {
 800c7ba:	2008      	movs	r0, #8
 800c7bc:	f7fa fae4 	bl	8006d88 <feature>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d019      	beq.n	800c7fa <computeRC+0x46>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	607b      	str	r3, [r7, #4]
 800c7ca:	e00e      	b.n	800c7ea <computeRC+0x36>
            rcData[chan] = rcReadRawFunc(chan);
 800c7cc:	4b41      	ldr	r3, [pc, #260]	; (800c8d4 <computeRC+0x120>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	b2d2      	uxtb	r2, r2
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	4798      	blx	r3
 800c7d8:	4603      	mov	r3, r0
 800c7da:	b219      	sxth	r1, r3
 800c7dc:	4a3e      	ldr	r2, [pc, #248]	; (800c8d8 <computeRC+0x124>)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	607b      	str	r3, [r7, #4]
 800c7ea:	4b3c      	ldr	r3, [pc, #240]	; (800c8dc <computeRC+0x128>)
 800c7ec:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	dbe9      	blt.n	800c7cc <computeRC+0x18>
                rcData[chan] += rcDataAverage[chan][i];
            rcData[chan] /= 4;
        }
        rcAverageIndex++;
    }
}
 800c7f8:	e068      	b.n	800c8cc <computeRC+0x118>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	607b      	str	r3, [r7, #4]
 800c7fe:	e059      	b.n	800c8b4 <computeRC+0x100>
            capture = rcReadRawFunc(chan);
 800c800:	4b34      	ldr	r3, [pc, #208]	; (800c8d4 <computeRC+0x120>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	b2d2      	uxtb	r2, r2
 800c808:	4610      	mov	r0, r2
 800c80a:	4798      	blx	r3
 800c80c:	4603      	mov	r3, r0
 800c80e:	81fb      	strh	r3, [r7, #14]
            if (capture < PULSE_MIN || capture > PULSE_MAX)
 800c810:	89fb      	ldrh	r3, [r7, #14]
 800c812:	f240 22ed 	movw	r2, #749	; 0x2ed
 800c816:	4293      	cmp	r3, r2
 800c818:	d904      	bls.n	800c824 <computeRC+0x70>
 800c81a:	89fb      	ldrh	r3, [r7, #14]
 800c81c:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800c820:	4293      	cmp	r3, r2
 800c822:	d903      	bls.n	800c82c <computeRC+0x78>
                capture = mcfg.midrc;
 800c824:	4b2d      	ldr	r3, [pc, #180]	; (800c8dc <computeRC+0x128>)
 800c826:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c82a:	81fb      	strh	r3, [r7, #14]
            rcDataAverage[chan][rcAverageIndex % 4] = capture;
 800c82c:	4b2c      	ldr	r3, [pc, #176]	; (800c8e0 <computeRC+0x12c>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	425a      	negs	r2, r3
 800c832:	f003 0303 	and.w	r3, r3, #3
 800c836:	f002 0203 	and.w	r2, r2, #3
 800c83a:	bf58      	it	pl
 800c83c:	4253      	negpl	r3, r2
 800c83e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800c842:	4928      	ldr	r1, [pc, #160]	; (800c8e4 <computeRC+0x130>)
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	0092      	lsls	r2, r2, #2
 800c848:	4413      	add	r3, r2
 800c84a:	4602      	mov	r2, r0
 800c84c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            rcData[chan] = 0;
 800c850:	4a21      	ldr	r2, [pc, #132]	; (800c8d8 <computeRC+0x124>)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2100      	movs	r1, #0
 800c856:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c85a:	2300      	movs	r3, #0
 800c85c:	60bb      	str	r3, [r7, #8]
 800c85e:	e016      	b.n	800c88e <computeRC+0xda>
                rcData[chan] += rcDataAverage[chan][i];
 800c860:	4a1d      	ldr	r2, [pc, #116]	; (800c8d8 <computeRC+0x124>)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c868:	b29a      	uxth	r2, r3
 800c86a:	481e      	ldr	r0, [pc, #120]	; (800c8e4 <computeRC+0x130>)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	0099      	lsls	r1, r3, #2
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	440b      	add	r3, r1
 800c874:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800c878:	b29b      	uxth	r3, r3
 800c87a:	4413      	add	r3, r2
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	b219      	sxth	r1, r3
 800c880:	4a15      	ldr	r2, [pc, #84]	; (800c8d8 <computeRC+0x124>)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	3301      	adds	r3, #1
 800c88c:	60bb      	str	r3, [r7, #8]
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	2b03      	cmp	r3, #3
 800c892:	dde5      	ble.n	800c860 <computeRC+0xac>
            rcData[chan] /= 4;
 800c894:	4a10      	ldr	r2, [pc, #64]	; (800c8d8 <computeRC+0x124>)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	da00      	bge.n	800c8a2 <computeRC+0xee>
 800c8a0:	3303      	adds	r3, #3
 800c8a2:	109b      	asrs	r3, r3, #2
 800c8a4:	b219      	sxth	r1, r3
 800c8a6:	4a0c      	ldr	r2, [pc, #48]	; (800c8d8 <computeRC+0x124>)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	607b      	str	r3, [r7, #4]
 800c8b4:	4b09      	ldr	r3, [pc, #36]	; (800c8dc <computeRC+0x128>)
 800c8b6:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	db9e      	blt.n	800c800 <computeRC+0x4c>
        rcAverageIndex++;
 800c8c2:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <computeRC+0x12c>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	4a05      	ldr	r2, [pc, #20]	; (800c8e0 <computeRC+0x12c>)
 800c8ca:	6013      	str	r3, [r2, #0]
}
 800c8cc:	bf00      	nop
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	20001784 	.word	0x20001784
 800c8d8:	2000172c 	.word	0x2000172c
 800c8dc:	200008e8 	.word	0x200008e8
 800c8e0:	200018d4 	.word	0x200018d4
 800c8e4:	200018d8 	.word	0x200018d8

0800c8e8 <mwArm>:

static void mwArm(void)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	af00      	add	r7, sp, #0
    if (calibratingG == 0 && f.ACC_CALIBRATED) {
 800c8ec:	4b1b      	ldr	r3, [pc, #108]	; (800c95c <mwArm+0x74>)
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d126      	bne.n	800c942 <mwArm+0x5a>
 800c8f4:	4b1a      	ldr	r3, [pc, #104]	; (800c960 <mwArm+0x78>)
 800c8f6:	789b      	ldrb	r3, [r3, #2]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d022      	beq.n	800c942 <mwArm+0x5a>
        // TODO: feature(FEATURE_FAILSAFE) && failsafeCnt < 2
        // TODO: && ( !feature || ( feature && ( failsafecnt > 2) )
        if (!f.ARMED) {         // arm now!
 800c8fc:	4b18      	ldr	r3, [pc, #96]	; (800c960 <mwArm+0x78>)
 800c8fe:	785b      	ldrb	r3, [r3, #1]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d128      	bne.n	800c956 <mwArm+0x6e>
            f.ARMED = 1;
 800c904:	4b16      	ldr	r3, [pc, #88]	; (800c960 <mwArm+0x78>)
 800c906:	2201      	movs	r2, #1
 800c908:	705a      	strb	r2, [r3, #1]
            headFreeModeHold = heading;
 800c90a:	4b16      	ldr	r3, [pc, #88]	; (800c964 <mwArm+0x7c>)
 800c90c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c910:	4b15      	ldr	r3, [pc, #84]	; (800c968 <mwArm+0x80>)
 800c912:	801a      	strh	r2, [r3, #0]
            // Beep for inform about arming
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5)
 800c914:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c918:	f7fa fa36 	bl	8006d88 <feature>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00b      	beq.n	800c93a <mwArm+0x52>
 800c922:	4b0f      	ldr	r3, [pc, #60]	; (800c960 <mwArm+0x78>)
 800c924:	7adb      	ldrb	r3, [r3, #11]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d007      	beq.n	800c93a <mwArm+0x52>
 800c92a:	4b10      	ldr	r3, [pc, #64]	; (800c96c <mwArm+0x84>)
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	2b04      	cmp	r3, #4
 800c930:	d903      	bls.n	800c93a <mwArm+0x52>
                buzzer(BUZZER_ARMING_GPS_FIX);
 800c932:	2007      	movs	r0, #7
 800c934:	f7f7 fa54 	bl	8003de0 <buzzer>
        if (!f.ARMED) {         // arm now!
 800c938:	e00d      	b.n	800c956 <mwArm+0x6e>
            else
                buzzer(BUZZER_ARMING);
 800c93a:	2006      	movs	r0, #6
 800c93c:	f7f7 fa50 	bl	8003de0 <buzzer>
        if (!f.ARMED) {         // arm now!
 800c940:	e009      	b.n	800c956 <mwArm+0x6e>
#else
            buzzer(BUZZER_ARMING);
#endif
        }
    } else if (!f.ARMED) {
 800c942:	4b07      	ldr	r3, [pc, #28]	; (800c960 <mwArm+0x78>)
 800c944:	785b      	ldrb	r3, [r3, #1]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d105      	bne.n	800c956 <mwArm+0x6e>
        blinkLED(2, 255, 1);
 800c94a:	2201      	movs	r2, #1
 800c94c:	21ff      	movs	r1, #255	; 0xff
 800c94e:	2002      	movs	r0, #2
 800c950:	f7ff fae0 	bl	800bf14 <blinkLED>
    }
}
 800c954:	e7ff      	b.n	800c956 <mwArm+0x6e>
 800c956:	bf00      	nop
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	200019be 	.word	0x200019be
 800c960:	200016f4 	.word	0x200016f4
 800c964:	200019c0 	.word	0x200019c0
 800c968:	20001716 	.word	0x20001716
 800c96c:	200017d8 	.word	0x200017d8

0800c970 <mwDisarm>:

static void mwDisarm(void)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	af00      	add	r7, sp, #0
    if (f.ARMED) {
 800c974:	4b09      	ldr	r3, [pc, #36]	; (800c99c <mwDisarm+0x2c>)
 800c976:	785b      	ldrb	r3, [r3, #1]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00c      	beq.n	800c996 <mwDisarm+0x26>
        f.ARMED = 0;
 800c97c:	4b07      	ldr	r3, [pc, #28]	; (800c99c <mwDisarm+0x2c>)
 800c97e:	2200      	movs	r2, #0
 800c980:	705a      	strb	r2, [r3, #1]
        // Beep for inform about disarming
        buzzer(BUZZER_DISARMING);
 800c982:	2005      	movs	r0, #5
 800c984:	f7f7 fa2c 	bl	8003de0 <buzzer>
        // Reset disarm time so that it works next time we arm the board.
        if (disarmTime != 0)
 800c988:	4b05      	ldr	r3, [pc, #20]	; (800c9a0 <mwDisarm+0x30>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d002      	beq.n	800c996 <mwDisarm+0x26>
            disarmTime = 0;
 800c990:	4b03      	ldr	r3, [pc, #12]	; (800c9a0 <mwDisarm+0x30>)
 800c992:	2200      	movs	r2, #0
 800c994:	601a      	str	r2, [r3, #0]
    }
}
 800c996:	bf00      	nop
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	200016f4 	.word	0x200016f4
 800c9a0:	2000189c 	.word	0x2000189c

0800c9a4 <mwVario>:

static void mwVario(void)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	af00      	add	r7, sp, #0

}
 800c9a8:	bf00      	nop
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
	...

0800c9b4 <pidMultiWii>:

static int32_t errorGyroI[3] = { 0, 0, 0 };
static int32_t errorAngleI[2] = { 0, 0 };

static void pidMultiWii(void)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b08e      	sub	sp, #56	; 0x38
 800c9b8:	af00      	add	r7, sp, #0
    int axis, prop;
    int32_t error, errorAngle;
    int32_t PTerm, ITerm, PTermACC = 0, ITermACC = 0, PTermGYRO = 0, ITermGYRO = 0, DTerm;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9be:	2300      	movs	r3, #0
 800c9c0:	627b      	str	r3, [r7, #36]	; 0x24
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	623b      	str	r3, [r7, #32]
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	61fb      	str	r3, [r7, #28]
    static int32_t delta1[3], delta2[3];
    int32_t deltaSum;
    int32_t delta;

    // **** PITCH & ROLL & YAW PID ****
    prop = max(abs(rcCommand[PITCH]), abs(rcCommand[ROLL])); // range [0;500]
 800c9ca:	4b91      	ldr	r3, [pc, #580]	; (800cc10 <pidMultiWii+0x25c>)
 800c9cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	bfb8      	it	lt
 800c9d4:	425b      	neglt	r3, r3
 800c9d6:	b29a      	uxth	r2, r3
 800c9d8:	4b8d      	ldr	r3, [pc, #564]	; (800cc10 <pidMultiWii+0x25c>)
 800c9da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	bfb8      	it	lt
 800c9e2:	425b      	neglt	r3, r3
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	bf38      	it	cc
 800c9ea:	4613      	movcc	r3, r2
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	61bb      	str	r3, [r7, #24]
    for (axis = 0; axis < 3; axis++) {
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	637b      	str	r3, [r7, #52]	; 0x34
 800c9f4:	e189      	b.n	800cd0a <pidMultiWii+0x356>
        if ((f.ANGLE_MODE || f.HORIZON_MODE) && axis < 2) { // MODE relying on ACC
 800c9f6:	4b87      	ldr	r3, [pc, #540]	; (800cc14 <pidMultiWii+0x260>)
 800c9f8:	78db      	ldrb	r3, [r3, #3]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d103      	bne.n	800ca06 <pidMultiWii+0x52>
 800c9fe:	4b85      	ldr	r3, [pc, #532]	; (800cc14 <pidMultiWii+0x260>)
 800ca00:	791b      	ldrb	r3, [r3, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d060      	beq.n	800cac8 <pidMultiWii+0x114>
 800ca06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	dc5d      	bgt.n	800cac8 <pidMultiWii+0x114>
            // 50 degrees max inclination
            errorAngle = constrain(2 * rcCommand[axis] + GPS_angle[axis], -((int)mcfg.max_angle_inclination), +mcfg.max_angle_inclination) - angle[axis] + cfg.angleTrim[axis];
 800ca0c:	4a80      	ldr	r2, [pc, #512]	; (800cc10 <pidMultiWii+0x25c>)
 800ca0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca10:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	4980      	ldr	r1, [pc, #512]	; (800cc18 <pidMultiWii+0x264>)
 800ca18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca1a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800ca1e:	4413      	add	r3, r2
 800ca20:	4a7e      	ldr	r2, [pc, #504]	; (800cc1c <pidMultiWii+0x268>)
 800ca22:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800ca26:	4251      	negs	r1, r2
 800ca28:	4a7c      	ldr	r2, [pc, #496]	; (800cc1c <pidMultiWii+0x268>)
 800ca2a:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7f7 f846 	bl	8003ac0 <constrain>
 800ca34:	4602      	mov	r2, r0
 800ca36:	497a      	ldr	r1, [pc, #488]	; (800cc20 <pidMultiWii+0x26c>)
 800ca38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca3a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ca3e:	1ad2      	subs	r2, r2, r3
 800ca40:	4978      	ldr	r1, [pc, #480]	; (800cc24 <pidMultiWii+0x270>)
 800ca42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca44:	3314      	adds	r3, #20
 800ca46:	005b      	lsls	r3, r3, #1
 800ca48:	440b      	add	r3, r1
 800ca4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ca4e:	4413      	add	r3, r2
 800ca50:	617b      	str	r3, [r7, #20]
            PTermACC = errorAngle * cfg.P8[PIDLEVEL] / 100; // 32 bits is needed for calculation: errorAngle*P8[PIDLEVEL] could exceed 32768   16 bits is ok for result
 800ca52:	4b74      	ldr	r3, [pc, #464]	; (800cc24 <pidMultiWii+0x270>)
 800ca54:	7a1b      	ldrb	r3, [r3, #8]
 800ca56:	461a      	mov	r2, r3
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	fb02 f303 	mul.w	r3, r2, r3
 800ca5e:	4a72      	ldr	r2, [pc, #456]	; (800cc28 <pidMultiWii+0x274>)
 800ca60:	fb82 1203 	smull	r1, r2, r2, r3
 800ca64:	1152      	asrs	r2, r2, #5
 800ca66:	17db      	asrs	r3, r3, #31
 800ca68:	1ad3      	subs	r3, r2, r3
 800ca6a:	62bb      	str	r3, [r7, #40]	; 0x28
            PTermACC = constrain(PTermACC, -cfg.D8[PIDLEVEL] * 5, +cfg.D8[PIDLEVEL] * 5);
 800ca6c:	4b6d      	ldr	r3, [pc, #436]	; (800cc24 <pidMultiWii+0x270>)
 800ca6e:	7f1b      	ldrb	r3, [r3, #28]
 800ca70:	461a      	mov	r2, r3
 800ca72:	4613      	mov	r3, r2
 800ca74:	079b      	lsls	r3, r3, #30
 800ca76:	1a9b      	subs	r3, r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	1a99      	subs	r1, r3, r2
 800ca7c:	4b69      	ldr	r3, [pc, #420]	; (800cc24 <pidMultiWii+0x270>)
 800ca7e:	7f1b      	ldrb	r3, [r3, #28]
 800ca80:	461a      	mov	r2, r3
 800ca82:	4613      	mov	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	4413      	add	r3, r2
 800ca88:	461a      	mov	r2, r3
 800ca8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca8c:	f7f7 f818 	bl	8003ac0 <constrain>
 800ca90:	62b8      	str	r0, [r7, #40]	; 0x28

            errorAngleI[axis] = constrain(errorAngleI[axis] + errorAngle, -10000, +10000); // WindUp
 800ca92:	4a66      	ldr	r2, [pc, #408]	; (800cc2c <pidMultiWii+0x278>)
 800ca94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	f242 7210 	movw	r2, #10000	; 0x2710
 800caa2:	4963      	ldr	r1, [pc, #396]	; (800cc30 <pidMultiWii+0x27c>)
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7f7 f80b 	bl	8003ac0 <constrain>
 800caaa:	4602      	mov	r2, r0
 800caac:	495f      	ldr	r1, [pc, #380]	; (800cc2c <pidMultiWii+0x278>)
 800caae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            ITermACC = (errorAngleI[axis] * cfg.I8[PIDLEVEL]) >> 12;
 800cab4:	4a5d      	ldr	r2, [pc, #372]	; (800cc2c <pidMultiWii+0x278>)
 800cab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cabc:	4a59      	ldr	r2, [pc, #356]	; (800cc24 <pidMultiWii+0x270>)
 800cabe:	7c92      	ldrb	r2, [r2, #18]
 800cac0:	fb02 f303 	mul.w	r3, r2, r3
 800cac4:	131b      	asrs	r3, r3, #12
 800cac6:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (!f.ANGLE_MODE || f.HORIZON_MODE || axis == 2) { // MODE relying on GYRO or YAW axis
 800cac8:	4b52      	ldr	r3, [pc, #328]	; (800cc14 <pidMultiWii+0x260>)
 800caca:	78db      	ldrb	r3, [r3, #3]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d006      	beq.n	800cade <pidMultiWii+0x12a>
 800cad0:	4b50      	ldr	r3, [pc, #320]	; (800cc14 <pidMultiWii+0x260>)
 800cad2:	791b      	ldrb	r3, [r3, #4]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d102      	bne.n	800cade <pidMultiWii+0x12a>
 800cad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d15f      	bne.n	800cb9e <pidMultiWii+0x1ea>
            error = (int32_t)rcCommand[axis] * 10 * 8 / cfg.P8[axis];
 800cade:	4a4c      	ldr	r2, [pc, #304]	; (800cc10 <pidMultiWii+0x25c>)
 800cae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cae6:	461a      	mov	r2, r3
 800cae8:	4613      	mov	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	4413      	add	r3, r2
 800caee:	011b      	lsls	r3, r3, #4
 800caf0:	4619      	mov	r1, r3
 800caf2:	4a4c      	ldr	r2, [pc, #304]	; (800cc24 <pidMultiWii+0x270>)
 800caf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf6:	4413      	add	r3, r2
 800caf8:	3301      	adds	r3, #1
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	fb91 f3f3 	sdiv	r3, r1, r3
 800cb00:	613b      	str	r3, [r7, #16]
            error -= gyroData[axis];
 800cb02:	4a4c      	ldr	r2, [pc, #304]	; (800cc34 <pidMultiWii+0x280>)
 800cb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb06:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	1a9b      	subs	r3, r3, r2
 800cb10:	613b      	str	r3, [r7, #16]

            PTermGYRO = rcCommand[axis];
 800cb12:	4a3f      	ldr	r2, [pc, #252]	; (800cc10 <pidMultiWii+0x25c>)
 800cb14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb16:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cb1a:	623b      	str	r3, [r7, #32]

            errorGyroI[axis] = constrain(errorGyroI[axis] + error, -16000, +16000); // WindUp
 800cb1c:	4a46      	ldr	r2, [pc, #280]	; (800cc38 <pidMultiWii+0x284>)
 800cb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	4413      	add	r3, r2
 800cb28:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800cb2c:	4943      	ldr	r1, [pc, #268]	; (800cc3c <pidMultiWii+0x288>)
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7f6 ffc6 	bl	8003ac0 <constrain>
 800cb34:	4602      	mov	r2, r0
 800cb36:	4940      	ldr	r1, [pc, #256]	; (800cc38 <pidMultiWii+0x284>)
 800cb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if ((abs(gyroData[axis]) > 640) || ((axis == YAW) && (abs(rcCommand[axis]) > 100)))
 800cb3e:	4a3d      	ldr	r2, [pc, #244]	; (800cc34 <pidMultiWii+0x280>)
 800cb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb42:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	bfb8      	it	lt
 800cb4a:	425b      	neglt	r3, r3
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cb52:	d80c      	bhi.n	800cb6e <pidMultiWii+0x1ba>
 800cb54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	d10e      	bne.n	800cb78 <pidMultiWii+0x1c4>
 800cb5a:	4a2d      	ldr	r2, [pc, #180]	; (800cc10 <pidMultiWii+0x25c>)
 800cb5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb5e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	bfb8      	it	lt
 800cb66:	425b      	neglt	r3, r3
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	2b64      	cmp	r3, #100	; 0x64
 800cb6c:	d904      	bls.n	800cb78 <pidMultiWii+0x1c4>
                errorGyroI[axis] = 0;
 800cb6e:	4a32      	ldr	r2, [pc, #200]	; (800cc38 <pidMultiWii+0x284>)
 800cb70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb72:	2100      	movs	r1, #0
 800cb74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            ITermGYRO = (errorGyroI[axis] / 125 * cfg.I8[axis]) >> 6;
 800cb78:	4a2f      	ldr	r2, [pc, #188]	; (800cc38 <pidMultiWii+0x284>)
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb80:	4a2f      	ldr	r2, [pc, #188]	; (800cc40 <pidMultiWii+0x28c>)
 800cb82:	fb82 1203 	smull	r1, r2, r2, r3
 800cb86:	10d2      	asrs	r2, r2, #3
 800cb88:	17db      	asrs	r3, r3, #31
 800cb8a:	1ad3      	subs	r3, r2, r3
 800cb8c:	4925      	ldr	r1, [pc, #148]	; (800cc24 <pidMultiWii+0x270>)
 800cb8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb90:	440a      	add	r2, r1
 800cb92:	320b      	adds	r2, #11
 800cb94:	7812      	ldrb	r2, [r2, #0]
 800cb96:	fb02 f303 	mul.w	r3, r2, r3
 800cb9a:	119b      	asrs	r3, r3, #6
 800cb9c:	61fb      	str	r3, [r7, #28]
        }
        if (f.HORIZON_MODE && axis < 2) {
 800cb9e:	4b1d      	ldr	r3, [pc, #116]	; (800cc14 <pidMultiWii+0x260>)
 800cba0:	791b      	ldrb	r3, [r3, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d027      	beq.n	800cbf6 <pidMultiWii+0x242>
 800cba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	dc24      	bgt.n	800cbf6 <pidMultiWii+0x242>
            PTerm = (PTermACC * (500 - prop) + PTermGYRO * prop) / 500;
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800cbb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbb4:	fb03 f202 	mul.w	r2, r3, r2
 800cbb8:	6a3b      	ldr	r3, [r7, #32]
 800cbba:	69b9      	ldr	r1, [r7, #24]
 800cbbc:	fb01 f303 	mul.w	r3, r1, r3
 800cbc0:	4413      	add	r3, r2
 800cbc2:	4a1f      	ldr	r2, [pc, #124]	; (800cc40 <pidMultiWii+0x28c>)
 800cbc4:	fb82 1203 	smull	r1, r2, r2, r3
 800cbc8:	1152      	asrs	r2, r2, #5
 800cbca:	17db      	asrs	r3, r3, #31
 800cbcc:	1ad3      	subs	r3, r2, r3
 800cbce:	633b      	str	r3, [r7, #48]	; 0x30
            ITerm = (ITermACC * (500 - prop) + ITermGYRO * prop) / 500;
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800cbd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbd8:	fb03 f202 	mul.w	r2, r3, r2
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	69b9      	ldr	r1, [r7, #24]
 800cbe0:	fb01 f303 	mul.w	r3, r1, r3
 800cbe4:	4413      	add	r3, r2
 800cbe6:	4a16      	ldr	r2, [pc, #88]	; (800cc40 <pidMultiWii+0x28c>)
 800cbe8:	fb82 1203 	smull	r1, r2, r2, r3
 800cbec:	1152      	asrs	r2, r2, #5
 800cbee:	17db      	asrs	r3, r3, #31
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbf4:	e02a      	b.n	800cc4c <pidMultiWii+0x298>
        } else {
            if (f.ANGLE_MODE && axis < 2) {
 800cbf6:	4b07      	ldr	r3, [pc, #28]	; (800cc14 <pidMultiWii+0x260>)
 800cbf8:	78db      	ldrb	r3, [r3, #3]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d022      	beq.n	800cc44 <pidMultiWii+0x290>
 800cbfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	dc1f      	bgt.n	800cc44 <pidMultiWii+0x290>
                PTerm = PTermACC;
 800cc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc06:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermACC;
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc0c:	e01e      	b.n	800cc4c <pidMultiWii+0x298>
 800cc0e:	bf00      	nop
 800cc10:	20001750 	.word	0x20001750
 800cc14:	200016f4 	.word	0x200016f4
 800cc18:	200017e4 	.word	0x200017e4
 800cc1c:	200008e8 	.word	0x200008e8
 800cc20:	2000149c 	.word	0x2000149c
 800cc24:	20000e54 	.word	0x20000e54
 800cc28:	51eb851f 	.word	0x51eb851f
 800cc2c:	200018ac 	.word	0x200018ac
 800cc30:	ffffd8f0 	.word	0xffffd8f0
 800cc34:	2000148c 	.word	0x2000148c
 800cc38:	200018a0 	.word	0x200018a0
 800cc3c:	ffffc180 	.word	0xffffc180
 800cc40:	10624dd3 	.word	0x10624dd3
            } else {
                PTerm = PTermGYRO;
 800cc44:	6a3b      	ldr	r3, [r7, #32]
 800cc46:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermGYRO;
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        PTerm -= (int32_t)gyroData[axis] * dynP8[axis] / 10 / 8; // 32 bits is needed for calculation
 800cc4c:	4a33      	ldr	r2, [pc, #204]	; (800cd1c <pidMultiWii+0x368>)
 800cc4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc50:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc54:	4619      	mov	r1, r3
 800cc56:	4a32      	ldr	r2, [pc, #200]	; (800cd20 <pidMultiWii+0x36c>)
 800cc58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc5a:	4413      	add	r3, r2
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	fb01 f303 	mul.w	r3, r1, r3
 800cc62:	4a30      	ldr	r2, [pc, #192]	; (800cd24 <pidMultiWii+0x370>)
 800cc64:	fb82 1203 	smull	r1, r2, r2, r3
 800cc68:	1152      	asrs	r2, r2, #5
 800cc6a:	17db      	asrs	r3, r3, #31
 800cc6c:	1a9b      	subs	r3, r3, r2
 800cc6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc70:	4413      	add	r3, r2
 800cc72:	633b      	str	r3, [r7, #48]	; 0x30
        delta = gyroData[axis] - lastGyro[axis];
 800cc74:	4a29      	ldr	r2, [pc, #164]	; (800cd1c <pidMultiWii+0x368>)
 800cc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc78:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	4a2a      	ldr	r2, [pc, #168]	; (800cd28 <pidMultiWii+0x374>)
 800cc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc82:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc86:	1acb      	subs	r3, r1, r3
 800cc88:	60fb      	str	r3, [r7, #12]
        lastGyro[axis] = gyroData[axis];
 800cc8a:	4a24      	ldr	r2, [pc, #144]	; (800cd1c <pidMultiWii+0x368>)
 800cc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc8e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800cc92:	4a25      	ldr	r2, [pc, #148]	; (800cd28 <pidMultiWii+0x374>)
 800cc94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cc9a:	4a24      	ldr	r2, [pc, #144]	; (800cd2c <pidMultiWii+0x378>)
 800cc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cca2:	4923      	ldr	r1, [pc, #140]	; (800cd30 <pidMultiWii+0x37c>)
 800cca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ccaa:	4413      	add	r3, r2
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	4413      	add	r3, r2
 800ccb0:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800ccb2:	4a1e      	ldr	r2, [pc, #120]	; (800cd2c <pidMultiWii+0x378>)
 800ccb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ccba:	491d      	ldr	r1, [pc, #116]	; (800cd30 <pidMultiWii+0x37c>)
 800ccbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800ccc2:	491a      	ldr	r1, [pc, #104]	; (800cd2c <pidMultiWii+0x378>)
 800ccc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccc6:	68fa      	ldr	r2, [r7, #12]
 800ccc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * dynD8[axis]) / 32;
 800cccc:	4a19      	ldr	r2, [pc, #100]	; (800cd34 <pidMultiWii+0x380>)
 800ccce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd0:	4413      	add	r3, r2
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	fb02 f303 	mul.w	r3, r2, r3
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	da00      	bge.n	800cce2 <pidMultiWii+0x32e>
 800cce0:	331f      	adds	r3, #31
 800cce2:	115b      	asrs	r3, r3, #5
 800cce4:	607b      	str	r3, [r7, #4]
        axisPID[axis] = PTerm + ITerm - DTerm;
 800cce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	4413      	add	r3, r2
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	b219      	sxth	r1, r3
 800ccfc:	4a0e      	ldr	r2, [pc, #56]	; (800cd38 <pidMultiWii+0x384>)
 800ccfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800cd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd06:	3301      	adds	r3, #1
 800cd08:	637b      	str	r3, [r7, #52]	; 0x34
 800cd0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	f77f ae72 	ble.w	800c9f6 <pidMultiWii+0x42>
    }
}
 800cd12:	bf00      	nop
 800cd14:	bf00      	nop
 800cd16:	3738      	adds	r7, #56	; 0x38
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	2000148c 	.word	0x2000148c
 800cd20:	20001788 	.word	0x20001788
 800cd24:	66666667 	.word	0x66666667
 800cd28:	20001968 	.word	0x20001968
 800cd2c:	20001970 	.word	0x20001970
 800cd30:	2000197c 	.word	0x2000197c
 800cd34:	20001790 	.word	0x20001790
 800cd38:	200017b0 	.word	0x200017b0

0800cd3c <pidRewrite>:

#define GYRO_I_MAX 256

static void pidRewrite(void)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08a      	sub	sp, #40	; 0x28
 800cd40:	af00      	add	r7, sp, #0
    int32_t errorAngle = 0;
 800cd42:	2300      	movs	r3, #0
 800cd44:	61fb      	str	r3, [r7, #28]
    int32_t PTerm, ITerm, DTerm;
    static int32_t lastError[3] = { 0, 0, 0 };
    int32_t AngleRateTmp, RateError;

    // ----------PID controller----------
    for (axis = 0; axis < 3; axis++) {
 800cd46:	2300      	movs	r3, #0
 800cd48:	627b      	str	r3, [r7, #36]	; 0x24
 800cd4a:	e0f2      	b.n	800cf32 <pidRewrite+0x1f6>
        // -----Get the desired angle rate depending on flight mode
        if (axis == 2) { // YAW is always gyro-controlled (MAG correction is applied to rcCommand)
 800cd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4e:	2b02      	cmp	r3, #2
 800cd50:	d10b      	bne.n	800cd6a <pidRewrite+0x2e>
            AngleRateTmp = (((int32_t)(cfg.yawRate + 27) * rcCommand[YAW]) >> 5);
 800cd52:	4b7c      	ldr	r3, [pc, #496]	; (800cf44 <pidRewrite+0x208>)
 800cd54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cd58:	331b      	adds	r3, #27
 800cd5a:	4a7b      	ldr	r2, [pc, #492]	; (800cf48 <pidRewrite+0x20c>)
 800cd5c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800cd60:	fb02 f303 	mul.w	r3, r2, r3
 800cd64:	115b      	asrs	r3, r3, #5
 800cd66:	623b      	str	r3, [r7, #32]
 800cd68:	e053      	b.n	800ce12 <pidRewrite+0xd6>
        } else {
            // calculate error and limit the angle to 50 degrees max inclination
            errorAngle = (constrain(rcCommand[axis] + GPS_angle[axis], -500, +500) - angle[axis] + cfg.angleTrim[axis]) / 10.0f; // 16 bits is ok here
 800cd6a:	4a77      	ldr	r2, [pc, #476]	; (800cf48 <pidRewrite+0x20c>)
 800cd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd72:	4619      	mov	r1, r3
 800cd74:	4a75      	ldr	r2, [pc, #468]	; (800cf4c <pidRewrite+0x210>)
 800cd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd78:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd7c:	440b      	add	r3, r1
 800cd7e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800cd82:	4973      	ldr	r1, [pc, #460]	; (800cf50 <pidRewrite+0x214>)
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7f6 fe9b 	bl	8003ac0 <constrain>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	4971      	ldr	r1, [pc, #452]	; (800cf54 <pidRewrite+0x218>)
 800cd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd90:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800cd94:	1ad2      	subs	r2, r2, r3
 800cd96:	496b      	ldr	r1, [pc, #428]	; (800cf44 <pidRewrite+0x208>)
 800cd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9a:	3314      	adds	r3, #20
 800cd9c:	005b      	lsls	r3, r3, #1
 800cd9e:	440b      	add	r3, r1
 800cda0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cda4:	4413      	add	r3, r2
 800cda6:	ee07 3a90 	vmov	s15, r3
 800cdaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cdae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800cdb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cdb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cdba:	ee17 3a90 	vmov	r3, s15
 800cdbe:	61fb      	str	r3, [r7, #28]
            if (!f.ANGLE_MODE) { //control is GYRO based (ACRO and HORIZON - direct sticks control is applied to rate PID
 800cdc0:	4b65      	ldr	r3, [pc, #404]	; (800cf58 <pidRewrite+0x21c>)
 800cdc2:	78db      	ldrb	r3, [r3, #3]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d11c      	bne.n	800ce02 <pidRewrite+0xc6>
                AngleRateTmp = ((int32_t)(cfg.rollPitchRate[axis] + 27) * rcCommand[axis]) >> 4;
 800cdc8:	4a5e      	ldr	r2, [pc, #376]	; (800cf44 <pidRewrite+0x208>)
 800cdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdcc:	4413      	add	r3, r2
 800cdce:	3323      	adds	r3, #35	; 0x23
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	331b      	adds	r3, #27
 800cdd4:	495c      	ldr	r1, [pc, #368]	; (800cf48 <pidRewrite+0x20c>)
 800cdd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdd8:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800cddc:	fb02 f303 	mul.w	r3, r2, r3
 800cde0:	111b      	asrs	r3, r3, #4
 800cde2:	623b      	str	r3, [r7, #32]

                if (f.HORIZON_MODE) {
 800cde4:	4b5c      	ldr	r3, [pc, #368]	; (800cf58 <pidRewrite+0x21c>)
 800cde6:	791b      	ldrb	r3, [r3, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d012      	beq.n	800ce12 <pidRewrite+0xd6>
                    // mix up angle error to desired AngleRateTmp to add a little auto-level feel
                    AngleRateTmp += (errorAngle * cfg.I8[PIDLEVEL]) >> 8;
 800cdec:	4b55      	ldr	r3, [pc, #340]	; (800cf44 <pidRewrite+0x208>)
 800cdee:	7c9b      	ldrb	r3, [r3, #18]
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	fb02 f303 	mul.w	r3, r2, r3
 800cdf8:	121b      	asrs	r3, r3, #8
 800cdfa:	6a3a      	ldr	r2, [r7, #32]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	623b      	str	r3, [r7, #32]
 800ce00:	e007      	b.n	800ce12 <pidRewrite+0xd6>
                }
            } else { // it's the ANGLE mode - control is angle based, so control loop is needed
                AngleRateTmp = (errorAngle * cfg.P8[PIDLEVEL]) >> 4;
 800ce02:	4b50      	ldr	r3, [pc, #320]	; (800cf44 <pidRewrite+0x208>)
 800ce04:	7a1b      	ldrb	r3, [r3, #8]
 800ce06:	461a      	mov	r2, r3
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	fb02 f303 	mul.w	r3, r2, r3
 800ce0e:	111b      	asrs	r3, r3, #4
 800ce10:	623b      	str	r3, [r7, #32]

        // --------low-level gyro-based PID. ----------
        // Used in stand-alone mode for ACRO, controlled by higher level regulators in other modes
        // -----calculate scaled error.AngleRates
        // multiplication of rcCommand corresponds to changing the sticks scaling here
        RateError = AngleRateTmp - gyroData[axis];
 800ce12:	4a52      	ldr	r2, [pc, #328]	; (800cf5c <pidRewrite+0x220>)
 800ce14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce16:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	6a3b      	ldr	r3, [r7, #32]
 800ce1e:	1a9b      	subs	r3, r3, r2
 800ce20:	61bb      	str	r3, [r7, #24]

        // -----calculate P component
        PTerm = (RateError * cfg.P8[axis]) >> 7;
 800ce22:	4a48      	ldr	r2, [pc, #288]	; (800cf44 <pidRewrite+0x208>)
 800ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce26:	4413      	add	r3, r2
 800ce28:	3301      	adds	r3, #1
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	fb02 f303 	mul.w	r3, r2, r3
 800ce34:	11db      	asrs	r3, r3, #7
 800ce36:	617b      	str	r3, [r7, #20]
        // -----calculate I component
        // there should be no division before accumulating the error to integrator, because the precision would be reduced.
        // Precision is critical, as I prevents from long-time drift. Thus, 32 bits integrator is used.
        // Time correction (to avoid different I scaling for different builds based on average cycle time)
        // is normalized to cycle time = 2048.
        errorGyroI[axis] = errorGyroI[axis] + ((RateError * cycleTime) >> 11) * cfg.I8[axis];
 800ce38:	4a49      	ldr	r2, [pc, #292]	; (800cf60 <pidRewrite+0x224>)
 800ce3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ce40:	4b48      	ldr	r3, [pc, #288]	; (800cf64 <pidRewrite+0x228>)
 800ce42:	881b      	ldrh	r3, [r3, #0]
 800ce44:	4619      	mov	r1, r3
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	fb01 f303 	mul.w	r3, r1, r3
 800ce4c:	12db      	asrs	r3, r3, #11
 800ce4e:	483d      	ldr	r0, [pc, #244]	; (800cf44 <pidRewrite+0x208>)
 800ce50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce52:	4401      	add	r1, r0
 800ce54:	310b      	adds	r1, #11
 800ce56:	7809      	ldrb	r1, [r1, #0]
 800ce58:	fb01 f303 	mul.w	r3, r1, r3
 800ce5c:	441a      	add	r2, r3
 800ce5e:	4940      	ldr	r1, [pc, #256]	; (800cf60 <pidRewrite+0x224>)
 800ce60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // limit maximum integrator value to prevent WindUp - accumulating extreme values when system is saturated.
        // I coefficient (I8) moved before integration to make limiting independent from PID settings
        errorGyroI[axis] = constrain(errorGyroI[axis], (int32_t)(-GYRO_I_MAX) << 13, (int32_t)(+GYRO_I_MAX) << 13);
 800ce66:	4a3e      	ldr	r2, [pc, #248]	; (800cf60 <pidRewrite+0x224>)
 800ce68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ce72:	493d      	ldr	r1, [pc, #244]	; (800cf68 <pidRewrite+0x22c>)
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7f6 fe23 	bl	8003ac0 <constrain>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	4938      	ldr	r1, [pc, #224]	; (800cf60 <pidRewrite+0x224>)
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ITerm = errorGyroI[axis] >> 13;
 800ce84:	4a36      	ldr	r2, [pc, #216]	; (800cf60 <pidRewrite+0x224>)
 800ce86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce8c:	135b      	asrs	r3, r3, #13
 800ce8e:	613b      	str	r3, [r7, #16]

        //-----calculate D-term
        delta = RateError - lastError[axis];  // 16 bits is ok here, the dif between 2 consecutive gyro reads is limited to 800
 800ce90:	4a36      	ldr	r2, [pc, #216]	; (800cf6c <pidRewrite+0x230>)
 800ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce98:	69ba      	ldr	r2, [r7, #24]
 800ce9a:	1ad3      	subs	r3, r2, r3
 800ce9c:	60fb      	str	r3, [r7, #12]
        lastError[axis] = RateError;
 800ce9e:	4933      	ldr	r1, [pc, #204]	; (800cf6c <pidRewrite+0x230>)
 800cea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea2:	69ba      	ldr	r2, [r7, #24]
 800cea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Correct difference by cycle time. Cycle time is jittery (can be different 2 times), so calculated difference
        // would be scaled by different dt each time. Division by dT fixes that.
        delta = (delta * ((uint16_t)0xFFFF / (cycleTime >> 4))) >> 6;
 800cea8:	4b2e      	ldr	r3, [pc, #184]	; (800cf64 <pidRewrite+0x228>)
 800ceaa:	881b      	ldrh	r3, [r3, #0]
 800ceac:	091b      	lsrs	r3, r3, #4
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ceb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	461a      	mov	r2, r3
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	fb02 f303 	mul.w	r3, r2, r3
 800cec2:	119b      	asrs	r3, r3, #6
 800cec4:	60fb      	str	r3, [r7, #12]
        // add moving average here to reduce noise
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cec6:	4a2a      	ldr	r2, [pc, #168]	; (800cf70 <pidRewrite+0x234>)
 800cec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cece:	4929      	ldr	r1, [pc, #164]	; (800cf74 <pidRewrite+0x238>)
 800ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ced6:	4413      	add	r3, r2
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	4413      	add	r3, r2
 800cedc:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cede:	4a24      	ldr	r2, [pc, #144]	; (800cf70 <pidRewrite+0x234>)
 800cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cee6:	4923      	ldr	r1, [pc, #140]	; (800cf74 <pidRewrite+0x238>)
 800cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800ceee:	4920      	ldr	r1, [pc, #128]	; (800cf70 <pidRewrite+0x234>)
 800cef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * cfg.D8[axis]) >> 8;
 800cef8:	4a12      	ldr	r2, [pc, #72]	; (800cf44 <pidRewrite+0x208>)
 800cefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefc:	4413      	add	r3, r2
 800cefe:	3315      	adds	r3, #21
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	461a      	mov	r2, r3
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	fb02 f303 	mul.w	r3, r2, r3
 800cf0a:	121b      	asrs	r3, r3, #8
 800cf0c:	607b      	str	r3, [r7, #4]

        // -----calculate total PID output
        axisPID[axis] = PTerm + ITerm + DTerm;
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	b29a      	uxth	r2, r3
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	4413      	add	r3, r2
 800cf18:	b29a      	uxth	r2, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	4413      	add	r3, r2
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	b219      	sxth	r1, r3
 800cf24:	4a14      	ldr	r2, [pc, #80]	; (800cf78 <pidRewrite+0x23c>)
 800cf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2e:	3301      	adds	r3, #1
 800cf30:	627b      	str	r3, [r7, #36]	; 0x24
 800cf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	f77f af09 	ble.w	800cd4c <pidRewrite+0x10>
    }
}
 800cf3a:	bf00      	nop
 800cf3c:	bf00      	nop
 800cf3e:	3728      	adds	r7, #40	; 0x28
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	20000e54 	.word	0x20000e54
 800cf48:	20001750 	.word	0x20001750
 800cf4c:	200017e4 	.word	0x200017e4
 800cf50:	fffffe0c 	.word	0xfffffe0c
 800cf54:	2000149c 	.word	0x2000149c
 800cf58:	200016f4 	.word	0x200016f4
 800cf5c:	2000148c 	.word	0x2000148c
 800cf60:	200018a0 	.word	0x200018a0
 800cf64:	20001714 	.word	0x20001714
 800cf68:	ffe00000 	.word	0xffe00000
 800cf6c:	20001988 	.word	0x20001988
 800cf70:	20001994 	.word	0x20001994
 800cf74:	200019a0 	.word	0x200019a0
 800cf78:	200017b0 	.word	0x200017b0

0800cf7c <setPIDController>:

void setPIDController(int type)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
    switch (type) {
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d003      	beq.n	800cf92 <setPIDController+0x16>
        case 0:
        default:
            pid_controller = pidMultiWii;
 800cf8a:	4b07      	ldr	r3, [pc, #28]	; (800cfa8 <setPIDController+0x2c>)
 800cf8c:	4a07      	ldr	r2, [pc, #28]	; (800cfac <setPIDController+0x30>)
 800cf8e:	601a      	str	r2, [r3, #0]
            break;
 800cf90:	e003      	b.n	800cf9a <setPIDController+0x1e>
        case 1:
            pid_controller = pidRewrite;
 800cf92:	4b05      	ldr	r3, [pc, #20]	; (800cfa8 <setPIDController+0x2c>)
 800cf94:	4a06      	ldr	r2, [pc, #24]	; (800cfb0 <setPIDController+0x34>)
 800cf96:	601a      	str	r2, [r3, #0]
            break;
 800cf98:	bf00      	nop
    }
}
 800cf9a:	bf00      	nop
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	20000050 	.word	0x20000050
 800cfac:	0800c9b5 	.word	0x0800c9b5
 800cfb0:	0800cd3d 	.word	0x0800cd3d

0800cfb4 <taskComputeRc>:
#ifdef BARO
    static int16_t initialThrottleHold;
#endif

uint16_t taskComputeRc(PifTask *p_task)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b086      	sub	sp, #24
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
    static uint8_t rcDelayCommand;      // this indicates the number of time (multiple of RC measurement at 50Hz) the sticks must be maintained to run or switch off motors
    static uint8_t rcSticks;            // this hold sticks position for command combos
    uint8_t stTmp = 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	75fb      	strb	r3, [r7, #23]
    int i;
    uint32_t auxState = 0;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	60fb      	str	r3, [r7, #12]
#ifdef GPS
    static uint8_t GPSNavReset = 1;
#endif
    bool isThrottleLow = false;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	72fb      	strb	r3, [r7, #11]

    (void)p_task;

        computeRC();
 800cfc8:	f7ff fbf4 	bl	800c7b4 <computeRC>

        // in 3D mode, we need to be able to disarm by switch at any time
        if (feature(FEATURE_3D)) {
 800cfcc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800cfd0:	f7f9 feda 	bl	8006d88 <feature>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d005      	beq.n	800cfe6 <taskComputeRc+0x32>
            if (!rcOptions[BOXARM])
 800cfda:	4b9d      	ldr	r3, [pc, #628]	; (800d250 <taskComputeRc+0x29c>)
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d101      	bne.n	800cfe6 <taskComputeRc+0x32>
                mwDisarm();
 800cfe2:	f7ff fcc5 	bl	800c970 <mwDisarm>
        }

        // Read rssi value
        rssi = RSSI_getValue();
 800cfe6:	f001 f9f9 	bl	800e3dc <RSSI_getValue>
 800cfea:	4603      	mov	r3, r0
 800cfec:	461a      	mov	r2, r3
 800cfee:	4b99      	ldr	r3, [pc, #612]	; (800d254 <taskComputeRc+0x2a0>)
 800cff0:	801a      	strh	r2, [r3, #0]

        // Failsafe routine
        if (feature(FEATURE_FAILSAFE) || feature(FEATURE_FW_FAILSAFE_RTH)) {
 800cff2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cff6:	f7f9 fec7 	bl	8006d88 <feature>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d106      	bne.n	800d00e <taskComputeRc+0x5a>
 800d000:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d004:	f7f9 fec0 	bl	8006d88 <feature>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d072      	beq.n	800d0f4 <taskComputeRc+0x140>
            if (failsafeCnt > (5 * cfg.failsafe_delay) && f.ARMED) { // Stabilize, and set Throttle to specified level
 800d00e:	4b92      	ldr	r3, [pc, #584]	; (800d258 <taskComputeRc+0x2a4>)
 800d010:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d014:	4619      	mov	r1, r3
 800d016:	4b91      	ldr	r3, [pc, #580]	; (800d25c <taskComputeRc+0x2a8>)
 800d018:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d01c:	461a      	mov	r2, r3
 800d01e:	4613      	mov	r3, r2
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	4413      	add	r3, r2
 800d024:	4299      	cmp	r1, r3
 800d026:	dd43      	ble.n	800d0b0 <taskComputeRc+0xfc>
 800d028:	4b8d      	ldr	r3, [pc, #564]	; (800d260 <taskComputeRc+0x2ac>)
 800d02a:	785b      	ldrb	r3, [r3, #1]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d03f      	beq.n	800d0b0 <taskComputeRc+0xfc>
                for (i = 0; i < 3; i++)
 800d030:	2300      	movs	r3, #0
 800d032:	613b      	str	r3, [r7, #16]
 800d034:	e00a      	b.n	800d04c <taskComputeRc+0x98>
                    rcData[i] = mcfg.midrc;      // after specified guard time after RC signal is lost (in 0.1sec)
 800d036:	4b8b      	ldr	r3, [pc, #556]	; (800d264 <taskComputeRc+0x2b0>)
 800d038:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d03c:	b219      	sxth	r1, r3
 800d03e:	4a8a      	ldr	r2, [pc, #552]	; (800d268 <taskComputeRc+0x2b4>)
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	3301      	adds	r3, #1
 800d04a:	613b      	str	r3, [r7, #16]
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	2b02      	cmp	r3, #2
 800d050:	ddf1      	ble.n	800d036 <taskComputeRc+0x82>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800d052:	4b82      	ldr	r3, [pc, #520]	; (800d25c <taskComputeRc+0x2a8>)
 800d054:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800d058:	b21a      	sxth	r2, r3
 800d05a:	4b83      	ldr	r3, [pc, #524]	; (800d268 <taskComputeRc+0x2b4>)
 800d05c:	80da      	strh	r2, [r3, #6]
                buzzer(BUZZER_TX_LOST_ARMED);
 800d05e:	2003      	movs	r0, #3
 800d060:	f7f6 febe 	bl	8003de0 <buzzer>
                if ((failsafeCnt > 5 * (cfg.failsafe_delay + cfg.failsafe_off_delay)) && !f.FW_FAILSAFE_RTH_ENABLE) {  // Turn OFF motors after specified Time (in 0.1sec)
 800d064:	4b7c      	ldr	r3, [pc, #496]	; (800d258 <taskComputeRc+0x2a4>)
 800d066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d06a:	4619      	mov	r1, r3
 800d06c:	4b7b      	ldr	r3, [pc, #492]	; (800d25c <taskComputeRc+0x2a8>)
 800d06e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d072:	461a      	mov	r2, r3
 800d074:	4b79      	ldr	r3, [pc, #484]	; (800d25c <taskComputeRc+0x2a8>)
 800d076:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800d07a:	441a      	add	r2, r3
 800d07c:	4613      	mov	r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	4413      	add	r3, r2
 800d082:	4299      	cmp	r1, r3
 800d084:	dd0b      	ble.n	800d09e <taskComputeRc+0xea>
 800d086:	4b76      	ldr	r3, [pc, #472]	; (800d260 <taskComputeRc+0x2ac>)
 800d088:	7c9b      	ldrb	r3, [r3, #18]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d107      	bne.n	800d09e <taskComputeRc+0xea>
                    mwDisarm();             // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d08e:	f7ff fc6f 	bl	800c970 <mwDisarm>
                    f.OK_TO_ARM = 0;        // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d092:	4b73      	ldr	r3, [pc, #460]	; (800d260 <taskComputeRc+0x2ac>)
 800d094:	2200      	movs	r2, #0
 800d096:	701a      	strb	r2, [r3, #0]
                    buzzer(BUZZER_TX_LOST);
 800d098:	2004      	movs	r0, #4
 800d09a:	f7f6 fea1 	bl	8003de0 <buzzer>
                }
                failsafeEvents++;
 800d09e:	4b73      	ldr	r3, [pc, #460]	; (800d26c <taskComputeRc+0x2b8>)
 800d0a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	b21a      	sxth	r2, r3
 800d0ac:	4b6f      	ldr	r3, [pc, #444]	; (800d26c <taskComputeRc+0x2b8>)
 800d0ae:	801a      	strh	r2, [r3, #0]
            }
            if (failsafeCnt > (5 * cfg.failsafe_delay) && !f.ARMED) {  // Turn off "Ok To arm to prevent the motors from spinning after repowering the RX with low throttle and aux to arm
 800d0b0:	4b69      	ldr	r3, [pc, #420]	; (800d258 <taskComputeRc+0x2a4>)
 800d0b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	4b68      	ldr	r3, [pc, #416]	; (800d25c <taskComputeRc+0x2a8>)
 800d0ba:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d0be:	461a      	mov	r2, r3
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4413      	add	r3, r2
 800d0c6:	4299      	cmp	r1, r3
 800d0c8:	dd0b      	ble.n	800d0e2 <taskComputeRc+0x12e>
 800d0ca:	4b65      	ldr	r3, [pc, #404]	; (800d260 <taskComputeRc+0x2ac>)
 800d0cc:	785b      	ldrb	r3, [r3, #1]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d107      	bne.n	800d0e2 <taskComputeRc+0x12e>
                mwDisarm();         // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d0d2:	f7ff fc4d 	bl	800c970 <mwDisarm>
                f.OK_TO_ARM = 0;    // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d0d6:	4b62      	ldr	r3, [pc, #392]	; (800d260 <taskComputeRc+0x2ac>)
 800d0d8:	2200      	movs	r2, #0
 800d0da:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_TX_LOST);
 800d0dc:	2004      	movs	r0, #4
 800d0de:	f7f6 fe7f 	bl	8003de0 <buzzer>
            }
            failsafeCnt++;
 800d0e2:	4b5d      	ldr	r3, [pc, #372]	; (800d258 <taskComputeRc+0x2a4>)
 800d0e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	b21a      	sxth	r2, r3
 800d0f0:	4b59      	ldr	r3, [pc, #356]	; (800d258 <taskComputeRc+0x2a4>)
 800d0f2:	801a      	strh	r2, [r3, #0]
        }
        // end of failsafe routine - next change is made with RcOptions setting

        // ------------------ STICKS COMMAND HANDLER --------------------
        // checking sticks positions
        for (i = 0; i < 4; i++) {
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	613b      	str	r3, [r7, #16]
 800d0f8:	e021      	b.n	800d13e <taskComputeRc+0x18a>
            stTmp >>= 2;
 800d0fa:	7dfb      	ldrb	r3, [r7, #23]
 800d0fc:	089b      	lsrs	r3, r3, #2
 800d0fe:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] > mcfg.mincheck)
 800d100:	4a59      	ldr	r2, [pc, #356]	; (800d268 <taskComputeRc+0x2b4>)
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d108:	461a      	mov	r2, r3
 800d10a:	4b56      	ldr	r3, [pc, #344]	; (800d264 <taskComputeRc+0x2b0>)
 800d10c:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d110:	429a      	cmp	r2, r3
 800d112:	dd03      	ble.n	800d11c <taskComputeRc+0x168>
                stTmp |= 0x80;  // check for MIN
 800d114:	7dfb      	ldrb	r3, [r7, #23]
 800d116:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d11a:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] < mcfg.maxcheck)
 800d11c:	4a52      	ldr	r2, [pc, #328]	; (800d268 <taskComputeRc+0x2b4>)
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d124:	461a      	mov	r2, r3
 800d126:	4b4f      	ldr	r3, [pc, #316]	; (800d264 <taskComputeRc+0x2b0>)
 800d128:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 800d12c:	429a      	cmp	r2, r3
 800d12e:	da03      	bge.n	800d138 <taskComputeRc+0x184>
                stTmp |= 0x40;  // check for MAX
 800d130:	7dfb      	ldrb	r3, [r7, #23]
 800d132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d136:	75fb      	strb	r3, [r7, #23]
        for (i = 0; i < 4; i++) {
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	3301      	adds	r3, #1
 800d13c:	613b      	str	r3, [r7, #16]
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	2b03      	cmp	r3, #3
 800d142:	ddda      	ble.n	800d0fa <taskComputeRc+0x146>
        }
        if (stTmp == rcSticks) {
 800d144:	4b4a      	ldr	r3, [pc, #296]	; (800d270 <taskComputeRc+0x2bc>)
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	7dfa      	ldrb	r2, [r7, #23]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d10a      	bne.n	800d164 <taskComputeRc+0x1b0>
            if (rcDelayCommand < 250)
 800d14e:	4b49      	ldr	r3, [pc, #292]	; (800d274 <taskComputeRc+0x2c0>)
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	2bf9      	cmp	r3, #249	; 0xf9
 800d154:	d809      	bhi.n	800d16a <taskComputeRc+0x1b6>
                rcDelayCommand++;
 800d156:	4b47      	ldr	r3, [pc, #284]	; (800d274 <taskComputeRc+0x2c0>)
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	3301      	adds	r3, #1
 800d15c:	b2da      	uxtb	r2, r3
 800d15e:	4b45      	ldr	r3, [pc, #276]	; (800d274 <taskComputeRc+0x2c0>)
 800d160:	701a      	strb	r2, [r3, #0]
 800d162:	e002      	b.n	800d16a <taskComputeRc+0x1b6>
        } else
            rcDelayCommand = 0;
 800d164:	4b43      	ldr	r3, [pc, #268]	; (800d274 <taskComputeRc+0x2c0>)
 800d166:	2200      	movs	r2, #0
 800d168:	701a      	strb	r2, [r3, #0]
        rcSticks = stTmp;
 800d16a:	4a41      	ldr	r2, [pc, #260]	; (800d270 <taskComputeRc+0x2bc>)
 800d16c:	7dfb      	ldrb	r3, [r7, #23]
 800d16e:	7013      	strb	r3, [r2, #0]

        // perform actions
        if (feature(FEATURE_3D) && (rcData[THROTTLE] > (mcfg.midrc - mcfg.deadband3d_throttle) && rcData[THROTTLE] < (mcfg.midrc + mcfg.deadband3d_throttle)))
 800d170:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d174:	f7f9 fe08 	bl	8006d88 <feature>
 800d178:	4603      	mov	r3, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d01e      	beq.n	800d1bc <taskComputeRc+0x208>
 800d17e:	4b3a      	ldr	r3, [pc, #232]	; (800d268 <taskComputeRc+0x2b4>)
 800d180:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d184:	461a      	mov	r2, r3
 800d186:	4b37      	ldr	r3, [pc, #220]	; (800d264 <taskComputeRc+0x2b0>)
 800d188:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d18c:	4619      	mov	r1, r3
 800d18e:	4b35      	ldr	r3, [pc, #212]	; (800d264 <taskComputeRc+0x2b0>)
 800d190:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d194:	1acb      	subs	r3, r1, r3
 800d196:	429a      	cmp	r2, r3
 800d198:	dd10      	ble.n	800d1bc <taskComputeRc+0x208>
 800d19a:	4b33      	ldr	r3, [pc, #204]	; (800d268 <taskComputeRc+0x2b4>)
 800d19c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	4b30      	ldr	r3, [pc, #192]	; (800d264 <taskComputeRc+0x2b0>)
 800d1a4:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	4b2e      	ldr	r3, [pc, #184]	; (800d264 <taskComputeRc+0x2b0>)
 800d1ac:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d1b0:	440b      	add	r3, r1
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	da02      	bge.n	800d1bc <taskComputeRc+0x208>
            isThrottleLow = true;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	72fb      	strb	r3, [r7, #11]
 800d1ba:	e014      	b.n	800d1e6 <taskComputeRc+0x232>
        else if (!feature(FEATURE_3D) && (rcData[THROTTLE] < mcfg.mincheck))
 800d1bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d1c0:	f7f9 fde2 	bl	8006d88 <feature>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	f083 0301 	eor.w	r3, r3, #1
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00a      	beq.n	800d1e6 <taskComputeRc+0x232>
 800d1d0:	4b25      	ldr	r3, [pc, #148]	; (800d268 <taskComputeRc+0x2b4>)
 800d1d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	4b22      	ldr	r3, [pc, #136]	; (800d264 <taskComputeRc+0x2b0>)
 800d1da:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	da01      	bge.n	800d1e6 <taskComputeRc+0x232>
            isThrottleLow = true;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	72fb      	strb	r3, [r7, #11]
        if (isThrottleLow) {
 800d1e6:	7afb      	ldrb	r3, [r7, #11]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d01c      	beq.n	800d226 <taskComputeRc+0x272>
            errorGyroI[ROLL] = 0;
 800d1ec:	4b22      	ldr	r3, [pc, #136]	; (800d278 <taskComputeRc+0x2c4>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	601a      	str	r2, [r3, #0]
            errorGyroI[PITCH] = 0;
 800d1f2:	4b21      	ldr	r3, [pc, #132]	; (800d278 <taskComputeRc+0x2c4>)
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	605a      	str	r2, [r3, #4]
            errorGyroI[YAW] = 0;
 800d1f8:	4b1f      	ldr	r3, [pc, #124]	; (800d278 <taskComputeRc+0x2c4>)
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	609a      	str	r2, [r3, #8]
            errorAngleI[ROLL] = 0;
 800d1fe:	4b1f      	ldr	r3, [pc, #124]	; (800d27c <taskComputeRc+0x2c8>)
 800d200:	2200      	movs	r2, #0
 800d202:	601a      	str	r2, [r3, #0]
            errorAngleI[PITCH] = 0;
 800d204:	4b1d      	ldr	r3, [pc, #116]	; (800d27c <taskComputeRc+0x2c8>)
 800d206:	2200      	movs	r2, #0
 800d208:	605a      	str	r2, [r3, #4]
            if (cfg.activate[BOXARM] > 0) { // Arming via ARM BOX
 800d20a:	4b14      	ldr	r3, [pc, #80]	; (800d25c <taskComputeRc+0x2a8>)
 800d20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d009      	beq.n	800d226 <taskComputeRc+0x272>
                if (rcOptions[BOXARM] && f.OK_TO_ARM)
 800d212:	4b0f      	ldr	r3, [pc, #60]	; (800d250 <taskComputeRc+0x29c>)
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d005      	beq.n	800d226 <taskComputeRc+0x272>
 800d21a:	4b11      	ldr	r3, [pc, #68]	; (800d260 <taskComputeRc+0x2ac>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <taskComputeRc+0x272>
                    mwArm();
 800d222:	f7ff fb61 	bl	800c8e8 <mwArm>
            }
        }

        if (cfg.activate[BOXARM] > 0) { // Disarming via ARM BOX
 800d226:	4b0d      	ldr	r3, [pc, #52]	; (800d25c <taskComputeRc+0x2a8>)
 800d228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d02d      	beq.n	800d28a <taskComputeRc+0x2d6>
            if (!rcOptions[BOXARM] && f.ARMED) {
 800d22e:	4b08      	ldr	r3, [pc, #32]	; (800d250 <taskComputeRc+0x29c>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d129      	bne.n	800d28a <taskComputeRc+0x2d6>
 800d236:	4b0a      	ldr	r3, [pc, #40]	; (800d260 <taskComputeRc+0x2ac>)
 800d238:	785b      	ldrb	r3, [r3, #1]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d025      	beq.n	800d28a <taskComputeRc+0x2d6>
                if (mcfg.disarm_kill_switch) {
 800d23e:	4b09      	ldr	r3, [pc, #36]	; (800d264 <taskComputeRc+0x2b0>)
 800d240:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800d244:	2b00      	cmp	r3, #0
 800d246:	d01b      	beq.n	800d280 <taskComputeRc+0x2cc>
                    mwDisarm();
 800d248:	f7ff fb92 	bl	800c970 <mwDisarm>
 800d24c:	e01d      	b.n	800d28a <taskComputeRc+0x2d6>
 800d24e:	bf00      	nop
 800d250:	20001794 	.word	0x20001794
 800d254:	20001780 	.word	0x20001780
 800d258:	20001728 	.word	0x20001728
 800d25c:	20000e54 	.word	0x20000e54
 800d260:	200016f4 	.word	0x200016f4
 800d264:	200008e8 	.word	0x200008e8
 800d268:	2000172c 	.word	0x2000172c
 800d26c:	2000172a 	.word	0x2000172a
 800d270:	200019ac 	.word	0x200019ac
 800d274:	200019ad 	.word	0x200019ad
 800d278:	200018a0 	.word	0x200018a0
 800d27c:	200018ac 	.word	0x200018ac
                } else if (isThrottleLow) {
 800d280:	7afb      	ldrb	r3, [r7, #11]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d001      	beq.n	800d28a <taskComputeRc+0x2d6>
                    mwDisarm();
 800d286:	f7ff fb73 	bl	800c970 <mwDisarm>
                }
            }
        }

        if (rcDelayCommand == 20) {
 800d28a:	4b82      	ldr	r3, [pc, #520]	; (800d494 <taskComputeRc+0x4e0>)
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	2b14      	cmp	r3, #20
 800d290:	f040 8131 	bne.w	800d4f6 <taskComputeRc+0x542>
            if (f.ARMED) {      // actions during armed
 800d294:	4b80      	ldr	r3, [pc, #512]	; (800d498 <taskComputeRc+0x4e4>)
 800d296:	785b      	ldrb	r3, [r3, #1]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d01c      	beq.n	800d2d6 <taskComputeRc+0x322>
                // Disarm on throttle down + yaw
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 800d29c:	4b7f      	ldr	r3, [pc, #508]	; (800d49c <taskComputeRc+0x4e8>)
 800d29e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d105      	bne.n	800d2b0 <taskComputeRc+0x2fc>
 800d2a4:	4b7e      	ldr	r3, [pc, #504]	; (800d4a0 <taskComputeRc+0x4ec>)
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	2b5f      	cmp	r3, #95	; 0x5f
 800d2aa:	d101      	bne.n	800d2b0 <taskComputeRc+0x2fc>
                    mwDisarm();
 800d2ac:	f7ff fb60 	bl	800c970 <mwDisarm>
                // Disarm on roll (only when retarded_arm is enabled)
                if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_LO))
 800d2b0:	4b7c      	ldr	r3, [pc, #496]	; (800d4a4 <taskComputeRc+0x4f0>)
 800d2b2:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	f000 811d 	beq.w	800d4f6 <taskComputeRc+0x542>
 800d2bc:	4b77      	ldr	r3, [pc, #476]	; (800d49c <taskComputeRc+0x4e8>)
 800d2be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f040 8118 	bne.w	800d4f6 <taskComputeRc+0x542>
 800d2c6:	4b76      	ldr	r3, [pc, #472]	; (800d4a0 <taskComputeRc+0x4ec>)
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	2b7d      	cmp	r3, #125	; 0x7d
 800d2cc:	f040 8113 	bne.w	800d4f6 <taskComputeRc+0x542>
                    mwDisarm();
 800d2d0:	f7ff fb4e 	bl	800c970 <mwDisarm>
 800d2d4:	e10f      	b.n	800d4f6 <taskComputeRc+0x542>
            } else {            // actions during not armed
                i = 0;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	613b      	str	r3, [r7, #16]
                // GYRO calibration
                if (rcSticks == THR_LO + YAW_LO + PIT_LO + ROL_CE) {
 800d2da:	4b71      	ldr	r3, [pc, #452]	; (800d4a0 <taskComputeRc+0x4ec>)
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	2b57      	cmp	r3, #87	; 0x57
 800d2e0:	d122      	bne.n	800d328 <taskComputeRc+0x374>
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800d2e2:	4b71      	ldr	r3, [pc, #452]	; (800d4a8 <taskComputeRc+0x4f4>)
 800d2e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d2e8:	801a      	strh	r2, [r3, #0]
#ifdef GPS
                    if (feature(FEATURE_GPS))
 800d2ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d2ee:	f7f9 fd4b 	bl	8006d88 <feature>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d001      	beq.n	800d2fc <taskComputeRc+0x348>
                        GPS_reset_home_position();
 800d2f8:	f7fb fc12 	bl	8008b20 <GPS_reset_home_position>
#endif
                    if (sensors(SENSOR_BARO))
 800d2fc:	2004      	movs	r0, #4
 800d2fe:	f7f9 fcfb 	bl	8006cf8 <sensors>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d002      	beq.n	800d30e <taskComputeRc+0x35a>
                        calibratingB = 10; // calibrate baro to new ground level (10 * 25 ms = ~250 ms non blocking)
 800d308:	4b68      	ldr	r3, [pc, #416]	; (800d4ac <taskComputeRc+0x4f8>)
 800d30a:	220a      	movs	r2, #10
 800d30c:	801a      	strh	r2, [r3, #0]
                    if (!sensors(SENSOR_MAG))
 800d30e:	2008      	movs	r0, #8
 800d310:	f7f9 fcf2 	bl	8006cf8 <sensors>
 800d314:	4603      	mov	r3, r0
 800d316:	f083 0301 	eor.w	r3, r3, #1
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d032      	beq.n	800d386 <taskComputeRc+0x3d2>
                        heading = 0; // reset heading to zero after gyro calibration
 800d320:	4b63      	ldr	r3, [pc, #396]	; (800d4b0 <taskComputeRc+0x4fc>)
 800d322:	2200      	movs	r2, #0
 800d324:	801a      	strh	r2, [r3, #0]
 800d326:	e02e      	b.n	800d386 <taskComputeRc+0x3d2>
                    // Inflight ACC Calibration
                } else if (feature(FEATURE_INFLIGHT_ACC_CAL) && (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_HI)) {
 800d328:	2004      	movs	r0, #4
 800d32a:	f7f9 fd2d 	bl	8006d88 <feature>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d028      	beq.n	800d386 <taskComputeRc+0x3d2>
 800d334:	4b5a      	ldr	r3, [pc, #360]	; (800d4a0 <taskComputeRc+0x4ec>)
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b5a      	cmp	r3, #90	; 0x5a
 800d33a:	d124      	bne.n	800d386 <taskComputeRc+0x3d2>
                    if (AccInflightCalibrationMeasurementDone) {        // trigger saving into eeprom after landing
 800d33c:	4b5d      	ldr	r3, [pc, #372]	; (800d4b4 <taskComputeRc+0x500>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d006      	beq.n	800d352 <taskComputeRc+0x39e>
                        AccInflightCalibrationMeasurementDone = false;
 800d344:	4b5b      	ldr	r3, [pc, #364]	; (800d4b4 <taskComputeRc+0x500>)
 800d346:	2200      	movs	r2, #0
 800d348:	701a      	strb	r2, [r3, #0]
                        AccInflightCalibrationSavetoEEProm = true;
 800d34a:	4b5b      	ldr	r3, [pc, #364]	; (800d4b8 <taskComputeRc+0x504>)
 800d34c:	2201      	movs	r2, #1
 800d34e:	701a      	strb	r2, [r3, #0]
 800d350:	e019      	b.n	800d386 <taskComputeRc+0x3d2>
                    } else {
                        AccInflightCalibrationArmed = !AccInflightCalibrationArmed;
 800d352:	4b5a      	ldr	r3, [pc, #360]	; (800d4bc <taskComputeRc+0x508>)
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	bf14      	ite	ne
 800d35a:	2301      	movne	r3, #1
 800d35c:	2300      	moveq	r3, #0
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	f083 0301 	eor.w	r3, r3, #1
 800d364:	b2db      	uxtb	r3, r3
 800d366:	f003 0301 	and.w	r3, r3, #1
 800d36a:	b2da      	uxtb	r2, r3
 800d36c:	4b53      	ldr	r3, [pc, #332]	; (800d4bc <taskComputeRc+0x508>)
 800d36e:	701a      	strb	r2, [r3, #0]
                        if (AccInflightCalibrationArmed) {
 800d370:	4b52      	ldr	r3, [pc, #328]	; (800d4bc <taskComputeRc+0x508>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d003      	beq.n	800d380 <taskComputeRc+0x3cc>
                            buzzer(BUZZER_ACC_CALIBRATION);
 800d378:	200a      	movs	r0, #10
 800d37a:	f7f6 fd31 	bl	8003de0 <buzzer>
 800d37e:	e002      	b.n	800d386 <taskComputeRc+0x3d2>
                        } else {
                            buzzer(BUZZER_ACC_CALIBRATION_FAIL);
 800d380:	200b      	movs	r0, #11
 800d382:	f7f6 fd2d 	bl	8003de0 <buzzer>
                        }
                    }
                }

                // Multiple configuration profiles
                if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_LO)          // ROLL left  -> Profile 1
 800d386:	4b46      	ldr	r3, [pc, #280]	; (800d4a0 <taskComputeRc+0x4ec>)
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	2b5d      	cmp	r3, #93	; 0x5d
 800d38c:	d102      	bne.n	800d394 <taskComputeRc+0x3e0>
                    i = 1;
 800d38e:	2301      	movs	r3, #1
 800d390:	613b      	str	r3, [r7, #16]
 800d392:	e00c      	b.n	800d3ae <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_CE)     // PITCH up   -> Profile 2
 800d394:	4b42      	ldr	r3, [pc, #264]	; (800d4a0 <taskComputeRc+0x4ec>)
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	2b5b      	cmp	r3, #91	; 0x5b
 800d39a:	d102      	bne.n	800d3a2 <taskComputeRc+0x3ee>
                    i = 2;
 800d39c:	2302      	movs	r3, #2
 800d39e:	613b      	str	r3, [r7, #16]
 800d3a0:	e005      	b.n	800d3ae <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)     // ROLL right -> Profile 3
 800d3a2:	4b3f      	ldr	r3, [pc, #252]	; (800d4a0 <taskComputeRc+0x4ec>)
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	2b5e      	cmp	r3, #94	; 0x5e
 800d3a8:	d101      	bne.n	800d3ae <taskComputeRc+0x3fa>
                    i = 3;
 800d3aa:	2303      	movs	r3, #3
 800d3ac:	613b      	str	r3, [r7, #16]
                if (i) {
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d011      	beq.n	800d3d8 <taskComputeRc+0x424>
                    mcfg.current_profile = i - 1;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	3b01      	subs	r3, #1
 800d3ba:	b2da      	uxtb	r2, r3
 800d3bc:	4b39      	ldr	r3, [pc, #228]	; (800d4a4 <taskComputeRc+0x4f0>)
 800d3be:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
                    writeEEPROM(0, false);
 800d3c2:	2100      	movs	r1, #0
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	f7f9 f8fd 	bl	80065c4 <writeEEPROM>
                    blinkLED(2, 40, i);
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	2128      	movs	r1, #40	; 0x28
 800d3d2:	2002      	movs	r0, #2
 800d3d4:	f7fe fd9e 	bl	800bf14 <blinkLED>
                    // TODO alarmArray[0] = i;
                }

                // Arm via YAW
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 800d3d8:	4b30      	ldr	r3, [pc, #192]	; (800d49c <taskComputeRc+0x4e8>)
 800d3da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d106      	bne.n	800d3ee <taskComputeRc+0x43a>
 800d3e0:	4b2f      	ldr	r3, [pc, #188]	; (800d4a0 <taskComputeRc+0x4ec>)
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	2b6f      	cmp	r3, #111	; 0x6f
 800d3e6:	d102      	bne.n	800d3ee <taskComputeRc+0x43a>
                    mwArm();
 800d3e8:	f7ff fa7e 	bl	800c8e8 <mwArm>
 800d3ec:	e01f      	b.n	800d42e <taskComputeRc+0x47a>
                // Arm via ROLL
                else if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_HI))
 800d3ee:	4b2d      	ldr	r3, [pc, #180]	; (800d4a4 <taskComputeRc+0x4f0>)
 800d3f0:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d00a      	beq.n	800d40e <taskComputeRc+0x45a>
 800d3f8:	4b28      	ldr	r3, [pc, #160]	; (800d49c <taskComputeRc+0x4e8>)
 800d3fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d106      	bne.n	800d40e <taskComputeRc+0x45a>
 800d400:	4b27      	ldr	r3, [pc, #156]	; (800d4a0 <taskComputeRc+0x4ec>)
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	2b7e      	cmp	r3, #126	; 0x7e
 800d406:	d102      	bne.n	800d40e <taskComputeRc+0x45a>
                    mwArm();
 800d408:	f7ff fa6e 	bl	800c8e8 <mwArm>
 800d40c:	e00f      	b.n	800d42e <taskComputeRc+0x47a>
                // Calibrating Acc
                else if (rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_CE)
 800d40e:	4b24      	ldr	r3, [pc, #144]	; (800d4a0 <taskComputeRc+0x4ec>)
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	2b97      	cmp	r3, #151	; 0x97
 800d414:	d104      	bne.n	800d420 <taskComputeRc+0x46c>
                    calibratingA = CALIBRATING_ACC_CYCLES;
 800d416:	4b2a      	ldr	r3, [pc, #168]	; (800d4c0 <taskComputeRc+0x50c>)
 800d418:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d41c:	801a      	strh	r2, [r3, #0]
 800d41e:	e006      	b.n	800d42e <taskComputeRc+0x47a>
                // Calibrating Mag
                else if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_CE)
 800d420:	4b1f      	ldr	r3, [pc, #124]	; (800d4a0 <taskComputeRc+0x4ec>)
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	2ba7      	cmp	r3, #167	; 0xa7
 800d426:	d102      	bne.n	800d42e <taskComputeRc+0x47a>
                    f.CALIBRATE_MAG = 1;
 800d428:	4b1b      	ldr	r3, [pc, #108]	; (800d498 <taskComputeRc+0x4e4>)
 800d42a:	2201      	movs	r2, #1
 800d42c:	739a      	strb	r2, [r3, #14]
                i = 0;
 800d42e:	2300      	movs	r3, #0
 800d430:	613b      	str	r3, [r7, #16]
                // Acc Trim
                if (rcSticks == THR_HI + YAW_CE + PIT_HI + ROL_CE) {
 800d432:	4b1b      	ldr	r3, [pc, #108]	; (800d4a0 <taskComputeRc+0x4ec>)
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	2bbb      	cmp	r3, #187	; 0xbb
 800d438:	d10b      	bne.n	800d452 <taskComputeRc+0x49e>
                    cfg.angleTrim[PITCH] += 2;
 800d43a:	4b18      	ldr	r3, [pc, #96]	; (800d49c <taskComputeRc+0x4e8>)
 800d43c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d440:	b29b      	uxth	r3, r3
 800d442:	3302      	adds	r3, #2
 800d444:	b29b      	uxth	r3, r3
 800d446:	b21a      	sxth	r2, r3
 800d448:	4b14      	ldr	r3, [pc, #80]	; (800d49c <taskComputeRc+0x4e8>)
 800d44a:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d44c:	2301      	movs	r3, #1
 800d44e:	613b      	str	r3, [r7, #16]
 800d450:	e047      	b.n	800d4e2 <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_LO + ROL_CE) {
 800d452:	4b13      	ldr	r3, [pc, #76]	; (800d4a0 <taskComputeRc+0x4ec>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	2bb7      	cmp	r3, #183	; 0xb7
 800d458:	d10b      	bne.n	800d472 <taskComputeRc+0x4be>
                    cfg.angleTrim[PITCH] -= 2;
 800d45a:	4b10      	ldr	r3, [pc, #64]	; (800d49c <taskComputeRc+0x4e8>)
 800d45c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d460:	b29b      	uxth	r3, r3
 800d462:	3b02      	subs	r3, #2
 800d464:	b29b      	uxth	r3, r3
 800d466:	b21a      	sxth	r2, r3
 800d468:	4b0c      	ldr	r3, [pc, #48]	; (800d49c <taskComputeRc+0x4e8>)
 800d46a:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d46c:	2301      	movs	r3, #1
 800d46e:	613b      	str	r3, [r7, #16]
 800d470:	e037      	b.n	800d4e2 <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_HI) {
 800d472:	4b0b      	ldr	r3, [pc, #44]	; (800d4a0 <taskComputeRc+0x4ec>)
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	2bbe      	cmp	r3, #190	; 0xbe
 800d478:	d124      	bne.n	800d4c4 <taskComputeRc+0x510>
                    cfg.angleTrim[ROLL] += 2;
 800d47a:	4b08      	ldr	r3, [pc, #32]	; (800d49c <taskComputeRc+0x4e8>)
 800d47c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d480:	b29b      	uxth	r3, r3
 800d482:	3302      	adds	r3, #2
 800d484:	b29b      	uxth	r3, r3
 800d486:	b21a      	sxth	r2, r3
 800d488:	4b04      	ldr	r3, [pc, #16]	; (800d49c <taskComputeRc+0x4e8>)
 800d48a:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d48c:	2301      	movs	r3, #1
 800d48e:	613b      	str	r3, [r7, #16]
 800d490:	e027      	b.n	800d4e2 <taskComputeRc+0x52e>
 800d492:	bf00      	nop
 800d494:	200019ad 	.word	0x200019ad
 800d498:	200016f4 	.word	0x200016f4
 800d49c:	20000e54 	.word	0x20000e54
 800d4a0:	200019ac 	.word	0x200019ac
 800d4a4:	200008e8 	.word	0x200008e8
 800d4a8:	200019be 	.word	0x200019be
 800d4ac:	200019bc 	.word	0x200019bc
 800d4b0:	200019c0 	.word	0x200019c0
 800d4b4:	20001891 	.word	0x20001891
 800d4b8:	20001892 	.word	0x20001892
 800d4bc:	20001890 	.word	0x20001890
 800d4c0:	200019ba 	.word	0x200019ba
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_LO) {
 800d4c4:	4b9e      	ldr	r3, [pc, #632]	; (800d740 <taskComputeRc+0x78c>)
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	2bbd      	cmp	r3, #189	; 0xbd
 800d4ca:	d10a      	bne.n	800d4e2 <taskComputeRc+0x52e>
                    cfg.angleTrim[ROLL] -= 2;
 800d4cc:	4b9d      	ldr	r3, [pc, #628]	; (800d744 <taskComputeRc+0x790>)
 800d4ce:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	3b02      	subs	r3, #2
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	b21a      	sxth	r2, r3
 800d4da:	4b9a      	ldr	r3, [pc, #616]	; (800d744 <taskComputeRc+0x790>)
 800d4dc:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	613b      	str	r3, [r7, #16]
                }
                if (i) {
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d006      	beq.n	800d4f6 <taskComputeRc+0x542>
                    writeEEPROM(1, true);
 800d4e8:	2101      	movs	r1, #1
 800d4ea:	2001      	movs	r0, #1
 800d4ec:	f7f9 f86a 	bl	80065c4 <writeEEPROM>
                    rcDelayCommand = 0; // allow autorepetition
 800d4f0:	4b95      	ldr	r3, [pc, #596]	; (800d748 <taskComputeRc+0x794>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800d4f6:	2004      	movs	r0, #4
 800d4f8:	f7f9 fc46 	bl	8006d88 <feature>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d041      	beq.n	800d586 <taskComputeRc+0x5d2>
            if (AccInflightCalibrationArmed && f.ARMED && rcData[THROTTLE] > mcfg.mincheck && !rcOptions[BOXARM]) {   // Copter is airborne and you are turning it off via boxarm : start measurement
 800d502:	4b92      	ldr	r3, [pc, #584]	; (800d74c <taskComputeRc+0x798>)
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d016      	beq.n	800d538 <taskComputeRc+0x584>
 800d50a:	4b91      	ldr	r3, [pc, #580]	; (800d750 <taskComputeRc+0x79c>)
 800d50c:	785b      	ldrb	r3, [r3, #1]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d012      	beq.n	800d538 <taskComputeRc+0x584>
 800d512:	4b90      	ldr	r3, [pc, #576]	; (800d754 <taskComputeRc+0x7a0>)
 800d514:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d518:	461a      	mov	r2, r3
 800d51a:	4b8f      	ldr	r3, [pc, #572]	; (800d758 <taskComputeRc+0x7a4>)
 800d51c:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d520:	429a      	cmp	r2, r3
 800d522:	dd09      	ble.n	800d538 <taskComputeRc+0x584>
 800d524:	4b8d      	ldr	r3, [pc, #564]	; (800d75c <taskComputeRc+0x7a8>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d105      	bne.n	800d538 <taskComputeRc+0x584>
                InflightcalibratingA = 50;
 800d52c:	4b8c      	ldr	r3, [pc, #560]	; (800d760 <taskComputeRc+0x7ac>)
 800d52e:	2232      	movs	r2, #50	; 0x32
 800d530:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationArmed = false;
 800d532:	4b86      	ldr	r3, [pc, #536]	; (800d74c <taskComputeRc+0x798>)
 800d534:	2200      	movs	r2, #0
 800d536:	701a      	strb	r2, [r3, #0]
            }
            if (rcOptions[BOXCALIB]) {      // Use the Calib Option to activate : Calib = TRUE Meausrement started, Land and Calib = 0 measurement stored
 800d538:	4b88      	ldr	r3, [pc, #544]	; (800d75c <taskComputeRc+0x7a8>)
 800d53a:	7c5b      	ldrb	r3, [r3, #17]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d014      	beq.n	800d56a <taskComputeRc+0x5b6>
                if (!AccInflightCalibrationActive && !AccInflightCalibrationMeasurementDone)
 800d540:	4b88      	ldr	r3, [pc, #544]	; (800d764 <taskComputeRc+0x7b0>)
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	f083 0301 	eor.w	r3, r3, #1
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d009      	beq.n	800d562 <taskComputeRc+0x5ae>
 800d54e:	4b86      	ldr	r3, [pc, #536]	; (800d768 <taskComputeRc+0x7b4>)
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	f083 0301 	eor.w	r3, r3, #1
 800d556:	b2db      	uxtb	r3, r3
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d002      	beq.n	800d562 <taskComputeRc+0x5ae>
                    InflightcalibratingA = 50;
 800d55c:	4b80      	ldr	r3, [pc, #512]	; (800d760 <taskComputeRc+0x7ac>)
 800d55e:	2232      	movs	r2, #50	; 0x32
 800d560:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationActive = true;
 800d562:	4b80      	ldr	r3, [pc, #512]	; (800d764 <taskComputeRc+0x7b0>)
 800d564:	2201      	movs	r2, #1
 800d566:	701a      	strb	r2, [r3, #0]
 800d568:	e00d      	b.n	800d586 <taskComputeRc+0x5d2>
            } else if (AccInflightCalibrationMeasurementDone && !f.ARMED) {
 800d56a:	4b7f      	ldr	r3, [pc, #508]	; (800d768 <taskComputeRc+0x7b4>)
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d009      	beq.n	800d586 <taskComputeRc+0x5d2>
 800d572:	4b77      	ldr	r3, [pc, #476]	; (800d750 <taskComputeRc+0x79c>)
 800d574:	785b      	ldrb	r3, [r3, #1]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d105      	bne.n	800d586 <taskComputeRc+0x5d2>
                AccInflightCalibrationMeasurementDone = false;
 800d57a:	4b7b      	ldr	r3, [pc, #492]	; (800d768 <taskComputeRc+0x7b4>)
 800d57c:	2200      	movs	r2, #0
 800d57e:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationSavetoEEProm = true;
 800d580:	4b7a      	ldr	r3, [pc, #488]	; (800d76c <taskComputeRc+0x7b8>)
 800d582:	2201      	movs	r2, #1
 800d584:	701a      	strb	r2, [r3, #0]
            }
        }

        // Check AUX switches

        for (i = 0; i < core.numAuxChannels; i++)
 800d586:	2300      	movs	r3, #0
 800d588:	613b      	str	r3, [r7, #16]
 800d58a:	e04a      	b.n	800d622 <taskComputeRc+0x66e>
            auxState |= (rcData[AUX1 + i] < 1300) << (3 * i) | (1300 < rcData[AUX1 + i] && rcData[AUX1 + i] < 1700) << (3 * i + 1) | (rcData[AUX1 + i] > 1700) << (3 * i + 2);
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	3304      	adds	r3, #4
 800d590:	4a70      	ldr	r2, [pc, #448]	; (800d754 <taskComputeRc+0x7a0>)
 800d592:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d596:	f240 5213 	movw	r2, #1299	; 0x513
 800d59a:	4293      	cmp	r3, r2
 800d59c:	bfd4      	ite	le
 800d59e:	2301      	movle	r3, #1
 800d5a0:	2300      	movgt	r3, #0
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	693a      	ldr	r2, [r7, #16]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	005b      	lsls	r3, r3, #1
 800d5ac:	4413      	add	r3, r2
 800d5ae:	4099      	lsls	r1, r3
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	3304      	adds	r3, #4
 800d5b4:	4a67      	ldr	r2, [pc, #412]	; (800d754 <taskComputeRc+0x7a0>)
 800d5b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d5ba:	f240 5214 	movw	r2, #1300	; 0x514
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	dd0a      	ble.n	800d5d8 <taskComputeRc+0x624>
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	4a63      	ldr	r2, [pc, #396]	; (800d754 <taskComputeRc+0x7a0>)
 800d5c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d5cc:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	dc01      	bgt.n	800d5d8 <taskComputeRc+0x624>
 800d5d4:	2001      	movs	r0, #1
 800d5d6:	e000      	b.n	800d5da <taskComputeRc+0x626>
 800d5d8:	2000      	movs	r0, #0
 800d5da:	693a      	ldr	r2, [r7, #16]
 800d5dc:	4613      	mov	r3, r2
 800d5de:	005b      	lsls	r3, r3, #1
 800d5e0:	4413      	add	r3, r2
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	fa00 f303 	lsl.w	r3, r0, r3
 800d5e8:	4319      	orrs	r1, r3
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	3304      	adds	r3, #4
 800d5ee:	4a59      	ldr	r2, [pc, #356]	; (800d754 <taskComputeRc+0x7a0>)
 800d5f0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d5f4:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	bfcc      	ite	gt
 800d5fc:	2301      	movgt	r3, #1
 800d5fe:	2300      	movle	r3, #0
 800d600:	b2db      	uxtb	r3, r3
 800d602:	4618      	mov	r0, r3
 800d604:	693a      	ldr	r2, [r7, #16]
 800d606:	4613      	mov	r3, r2
 800d608:	005b      	lsls	r3, r3, #1
 800d60a:	4413      	add	r3, r2
 800d60c:	3302      	adds	r3, #2
 800d60e:	fa00 f303 	lsl.w	r3, r0, r3
 800d612:	430b      	orrs	r3, r1
 800d614:	461a      	mov	r2, r3
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	4313      	orrs	r3, r2
 800d61a:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < core.numAuxChannels; i++)
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	3301      	adds	r3, #1
 800d620:	613b      	str	r3, [r7, #16]
 800d622:	4b53      	ldr	r3, [pc, #332]	; (800d770 <taskComputeRc+0x7bc>)
 800d624:	7d1b      	ldrb	r3, [r3, #20]
 800d626:	461a      	mov	r2, r3
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	4293      	cmp	r3, r2
 800d62c:	dbae      	blt.n	800d58c <taskComputeRc+0x5d8>
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d62e:	2300      	movs	r3, #0
 800d630:	613b      	str	r3, [r7, #16]
 800d632:	e015      	b.n	800d660 <taskComputeRc+0x6ac>
            rcOptions[i] = (auxState & cfg.activate[i]) > 0;
 800d634:	4a43      	ldr	r2, [pc, #268]	; (800d744 <taskComputeRc+0x790>)
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	3312      	adds	r3, #18
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	4413      	add	r3, r2
 800d63e:	685a      	ldr	r2, [r3, #4]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	4013      	ands	r3, r2
 800d644:	2b00      	cmp	r3, #0
 800d646:	bf14      	ite	ne
 800d648:	2301      	movne	r3, #1
 800d64a:	2300      	moveq	r3, #0
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	4619      	mov	r1, r3
 800d650:	4a42      	ldr	r2, [pc, #264]	; (800d75c <taskComputeRc+0x7a8>)
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	4413      	add	r3, r2
 800d656:	460a      	mov	r2, r1
 800d658:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	3301      	adds	r3, #1
 800d65e:	613b      	str	r3, [r7, #16]
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	2b18      	cmp	r3, #24
 800d664:	dde6      	ble.n	800d634 <taskComputeRc+0x680>
        f.CRUISE_MODE = rcOptions[BOXGCRUISE];
 800d666:	4b3d      	ldr	r3, [pc, #244]	; (800d75c <taskComputeRc+0x7a8>)
 800d668:	7e1a      	ldrb	r2, [r3, #24]
 800d66a:	4b39      	ldr	r3, [pc, #228]	; (800d750 <taskComputeRc+0x79c>)
 800d66c:	751a      	strb	r2, [r3, #20]
        if (f.CRUISE_MODE) {
 800d66e:	4b38      	ldr	r3, [pc, #224]	; (800d750 <taskComputeRc+0x79c>)
 800d670:	7d1b      	ldrb	r3, [r3, #20]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d005      	beq.n	800d682 <taskComputeRc+0x6ce>
            rcOptions[BOXGPSHOLD] = true;
 800d676:	4b39      	ldr	r3, [pc, #228]	; (800d75c <taskComputeRc+0x7a8>)
 800d678:	2201      	movs	r2, #1
 800d67a:	72da      	strb	r2, [r3, #11]
            rcOptions[BOXHORIZON] = true;
 800d67c:	4b37      	ldr	r3, [pc, #220]	; (800d75c <taskComputeRc+0x7a8>)
 800d67e:	2201      	movs	r2, #1
 800d680:	709a      	strb	r2, [r3, #2]
        }

        // note: if FAILSAFE is disable, failsafeCnt > 5 * FAILSAVE_DELAY is always false
        if ((rcOptions[BOXANGLE] || (failsafeCnt > 5 * cfg.failsafe_delay)) && (sensors(SENSOR_ACC))) {
 800d682:	4b36      	ldr	r3, [pc, #216]	; (800d75c <taskComputeRc+0x7a8>)
 800d684:	785b      	ldrb	r3, [r3, #1]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d10c      	bne.n	800d6a4 <taskComputeRc+0x6f0>
 800d68a:	4b3a      	ldr	r3, [pc, #232]	; (800d774 <taskComputeRc+0x7c0>)
 800d68c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d690:	4619      	mov	r1, r3
 800d692:	4b2c      	ldr	r3, [pc, #176]	; (800d744 <taskComputeRc+0x790>)
 800d694:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d698:	461a      	mov	r2, r3
 800d69a:	4613      	mov	r3, r2
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	4413      	add	r3, r2
 800d6a0:	4299      	cmp	r1, r3
 800d6a2:	dd30      	ble.n	800d706 <taskComputeRc+0x752>
 800d6a4:	2002      	movs	r0, #2
 800d6a6:	f7f9 fb27 	bl	8006cf8 <sensors>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d02a      	beq.n	800d706 <taskComputeRc+0x752>
            // bumpless transfer to Level mode
            if (!f.ANGLE_MODE) {
 800d6b0:	4b27      	ldr	r3, [pc, #156]	; (800d750 <taskComputeRc+0x79c>)
 800d6b2:	78db      	ldrb	r3, [r3, #3]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d108      	bne.n	800d6ca <taskComputeRc+0x716>
                errorAngleI[ROLL] = 0;
 800d6b8:	4b2f      	ldr	r3, [pc, #188]	; (800d778 <taskComputeRc+0x7c4>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d6be:	4b2e      	ldr	r3, [pc, #184]	; (800d778 <taskComputeRc+0x7c4>)
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	605a      	str	r2, [r3, #4]
                f.ANGLE_MODE = 1;
 800d6c4:	4b22      	ldr	r3, [pc, #136]	; (800d750 <taskComputeRc+0x79c>)
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	70da      	strb	r2, [r3, #3]
            }
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d6ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d6ce:	f7f9 fb5b 	bl	8006d88 <feature>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d01d      	beq.n	800d714 <taskComputeRc+0x760>
                if ((failsafeCnt > 5 * cfg.failsafe_delay) && sensors(SENSOR_GPS)) {
 800d6d8:	4b26      	ldr	r3, [pc, #152]	; (800d774 <taskComputeRc+0x7c0>)
 800d6da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d6de:	4619      	mov	r1, r3
 800d6e0:	4b18      	ldr	r3, [pc, #96]	; (800d744 <taskComputeRc+0x790>)
 800d6e2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	4413      	add	r3, r2
 800d6ee:	4299      	cmp	r1, r3
 800d6f0:	dd10      	ble.n	800d714 <taskComputeRc+0x760>
 800d6f2:	2020      	movs	r0, #32
 800d6f4:	f7f9 fb00 	bl	8006cf8 <sensors>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00a      	beq.n	800d714 <taskComputeRc+0x760>
                    f.FW_FAILSAFE_RTH_ENABLE = 1;
 800d6fe:	4b14      	ldr	r3, [pc, #80]	; (800d750 <taskComputeRc+0x79c>)
 800d700:	2201      	movs	r2, #1
 800d702:	749a      	strb	r2, [r3, #18]
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d704:	e006      	b.n	800d714 <taskComputeRc+0x760>
                }
            }
        } else {
            f.ANGLE_MODE = 0;   // failsafe support
 800d706:	4b12      	ldr	r3, [pc, #72]	; (800d750 <taskComputeRc+0x79c>)
 800d708:	2200      	movs	r2, #0
 800d70a:	70da      	strb	r2, [r3, #3]
            f.FW_FAILSAFE_RTH_ENABLE = 0;
 800d70c:	4b10      	ldr	r3, [pc, #64]	; (800d750 <taskComputeRc+0x79c>)
 800d70e:	2200      	movs	r2, #0
 800d710:	749a      	strb	r2, [r3, #18]
 800d712:	e000      	b.n	800d716 <taskComputeRc+0x762>
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d714:	bf00      	nop
        }

        if (rcOptions[BOXHORIZON]) {
 800d716:	4b11      	ldr	r3, [pc, #68]	; (800d75c <taskComputeRc+0x7a8>)
 800d718:	789b      	ldrb	r3, [r3, #2]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d02e      	beq.n	800d77c <taskComputeRc+0x7c8>
            f.ANGLE_MODE = 0;
 800d71e:	4b0c      	ldr	r3, [pc, #48]	; (800d750 <taskComputeRc+0x79c>)
 800d720:	2200      	movs	r2, #0
 800d722:	70da      	strb	r2, [r3, #3]
            if (!f.HORIZON_MODE) {
 800d724:	4b0a      	ldr	r3, [pc, #40]	; (800d750 <taskComputeRc+0x79c>)
 800d726:	791b      	ldrb	r3, [r3, #4]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d12a      	bne.n	800d782 <taskComputeRc+0x7ce>
                errorAngleI[ROLL] = 0;
 800d72c:	4b12      	ldr	r3, [pc, #72]	; (800d778 <taskComputeRc+0x7c4>)
 800d72e:	2200      	movs	r2, #0
 800d730:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d732:	4b11      	ldr	r3, [pc, #68]	; (800d778 <taskComputeRc+0x7c4>)
 800d734:	2200      	movs	r2, #0
 800d736:	605a      	str	r2, [r3, #4]
                f.HORIZON_MODE = 1;
 800d738:	4b05      	ldr	r3, [pc, #20]	; (800d750 <taskComputeRc+0x79c>)
 800d73a:	2201      	movs	r2, #1
 800d73c:	711a      	strb	r2, [r3, #4]
 800d73e:	e020      	b.n	800d782 <taskComputeRc+0x7ce>
 800d740:	200019ac 	.word	0x200019ac
 800d744:	20000e54 	.word	0x20000e54
 800d748:	200019ad 	.word	0x200019ad
 800d74c:	20001890 	.word	0x20001890
 800d750:	200016f4 	.word	0x200016f4
 800d754:	2000172c 	.word	0x2000172c
 800d758:	200008e8 	.word	0x200008e8
 800d75c:	20001794 	.word	0x20001794
 800d760:	20001894 	.word	0x20001894
 800d764:	20001893 	.word	0x20001893
 800d768:	20001891 	.word	0x20001891
 800d76c:	20001892 	.word	0x20001892
 800d770:	20000830 	.word	0x20000830
 800d774:	20001728 	.word	0x20001728
 800d778:	200018ac 	.word	0x200018ac
            }
        } else {
            f.HORIZON_MODE = 0;
 800d77c:	4b9c      	ldr	r3, [pc, #624]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d77e:	2200      	movs	r2, #0
 800d780:	711a      	strb	r2, [r3, #4]
        }

        if ((rcOptions[BOXARM]) == 0)
 800d782:	4b9c      	ldr	r3, [pc, #624]	; (800d9f4 <taskComputeRc+0xa40>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d102      	bne.n	800d790 <taskComputeRc+0x7dc>
            f.OK_TO_ARM = 1;
 800d78a:	4b99      	ldr	r3, [pc, #612]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d78c:	2201      	movs	r2, #1
 800d78e:	701a      	strb	r2, [r3, #0]
        if (f.ANGLE_MODE || f.HORIZON_MODE) {
 800d790:	4b97      	ldr	r3, [pc, #604]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d792:	78db      	ldrb	r3, [r3, #3]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d103      	bne.n	800d7a0 <taskComputeRc+0x7ec>
 800d798:	4b95      	ldr	r3, [pc, #596]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d79a:	791b      	ldrb	r3, [r3, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d003      	beq.n	800d7a8 <taskComputeRc+0x7f4>
            actLed1State(ON);
 800d7a0:	2001      	movs	r0, #1
 800d7a2:	f7f4 fad7 	bl	8001d54 <actLed1State>
 800d7a6:	e002      	b.n	800d7ae <taskComputeRc+0x7fa>
        } else {
            actLed1State(OFF);
 800d7a8:	2000      	movs	r0, #0
 800d7aa:	f7f4 fad3 	bl	8001d54 <actLed1State>
        }

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800d7ae:	2004      	movs	r0, #4
 800d7b0:	f7f9 faa2 	bl	8006cf8 <sensors>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d033      	beq.n	800d822 <taskComputeRc+0x86e>
            // Baro alt hold activate
            if (rcOptions[BOXBARO]) {
 800d7ba:	4b8e      	ldr	r3, [pc, #568]	; (800d9f4 <taskComputeRc+0xa40>)
 800d7bc:	78db      	ldrb	r3, [r3, #3]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d016      	beq.n	800d7f0 <taskComputeRc+0x83c>
                if (!f.BARO_MODE) {
 800d7c2:	4b8b      	ldr	r3, [pc, #556]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d7c4:	799b      	ldrb	r3, [r3, #6]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d115      	bne.n	800d7f6 <taskComputeRc+0x842>
                    f.BARO_MODE = 1;
 800d7ca:	4b89      	ldr	r3, [pc, #548]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	719a      	strb	r2, [r3, #6]
                    AltHold = EstAlt;
 800d7d0:	4b89      	ldr	r3, [pc, #548]	; (800d9f8 <taskComputeRc+0xa44>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a89      	ldr	r2, [pc, #548]	; (800d9fc <taskComputeRc+0xa48>)
 800d7d6:	6013      	str	r3, [r2, #0]
                    initialThrottleHold = rcCommand[THROTTLE];
 800d7d8:	4b89      	ldr	r3, [pc, #548]	; (800da00 <taskComputeRc+0xa4c>)
 800d7da:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d7de:	4b89      	ldr	r3, [pc, #548]	; (800da04 <taskComputeRc+0xa50>)
 800d7e0:	801a      	strh	r2, [r3, #0]
                    errorVelocityI = 0;
 800d7e2:	4b89      	ldr	r3, [pc, #548]	; (800da08 <taskComputeRc+0xa54>)
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	601a      	str	r2, [r3, #0]
                    BaroPID = 0;
 800d7e8:	4b88      	ldr	r3, [pc, #544]	; (800da0c <taskComputeRc+0xa58>)
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	601a      	str	r2, [r3, #0]
 800d7ee:	e002      	b.n	800d7f6 <taskComputeRc+0x842>
                }
            } else {
                f.BARO_MODE = 0;
 800d7f0:	4b7f      	ldr	r3, [pc, #508]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	719a      	strb	r2, [r3, #6]
            }
            // Vario signalling activate
            if (feature(FEATURE_VARIO)) {
 800d7f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d7fa:	f7f9 fac5 	bl	8006d88 <feature>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00e      	beq.n	800d822 <taskComputeRc+0x86e>
                if (rcOptions[BOXVARIO]) {
 800d804:	4b7b      	ldr	r3, [pc, #492]	; (800d9f4 <taskComputeRc+0xa40>)
 800d806:	791b      	ldrb	r3, [r3, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d007      	beq.n	800d81c <taskComputeRc+0x868>
                    if (!f.VARIO_MODE) {
 800d80c:	4b78      	ldr	r3, [pc, #480]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d80e:	7bdb      	ldrb	r3, [r3, #15]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d106      	bne.n	800d822 <taskComputeRc+0x86e>
                        f.VARIO_MODE = 1;
 800d814:	4b76      	ldr	r3, [pc, #472]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d816:	2201      	movs	r2, #1
 800d818:	73da      	strb	r2, [r3, #15]
 800d81a:	e002      	b.n	800d822 <taskComputeRc+0x86e>
                    }
                } else {
                    f.VARIO_MODE = 0;
 800d81c:	4b74      	ldr	r3, [pc, #464]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d81e:	2200      	movs	r2, #0
 800d820:	73da      	strb	r2, [r3, #15]
            }
        }
#endif

#ifdef  MAG
        if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800d822:	2002      	movs	r0, #2
 800d824:	f7f9 fa68 	bl	8006cf8 <sensors>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d105      	bne.n	800d83a <taskComputeRc+0x886>
 800d82e:	2008      	movs	r0, #8
 800d830:	f7f9 fa62 	bl	8006cf8 <sensors>
 800d834:	4603      	mov	r3, r0
 800d836:	2b00      	cmp	r3, #0
 800d838:	d02b      	beq.n	800d892 <taskComputeRc+0x8de>
            if (rcOptions[BOXMAG]) {
 800d83a:	4b6e      	ldr	r3, [pc, #440]	; (800d9f4 <taskComputeRc+0xa40>)
 800d83c:	795b      	ldrb	r3, [r3, #5]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00c      	beq.n	800d85c <taskComputeRc+0x8a8>
                if (!f.MAG_MODE) {
 800d842:	4b6b      	ldr	r3, [pc, #428]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d844:	795b      	ldrb	r3, [r3, #5]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d10b      	bne.n	800d862 <taskComputeRc+0x8ae>
                    f.MAG_MODE = 1;
 800d84a:	4b69      	ldr	r3, [pc, #420]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d84c:	2201      	movs	r2, #1
 800d84e:	715a      	strb	r2, [r3, #5]
                    magHold = heading;
 800d850:	4b6f      	ldr	r3, [pc, #444]	; (800da10 <taskComputeRc+0xa5c>)
 800d852:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d856:	4b6f      	ldr	r3, [pc, #444]	; (800da14 <taskComputeRc+0xa60>)
 800d858:	801a      	strh	r2, [r3, #0]
 800d85a:	e002      	b.n	800d862 <taskComputeRc+0x8ae>
                }
            } else {
                f.MAG_MODE = 0;
 800d85c:	4b64      	ldr	r3, [pc, #400]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d85e:	2200      	movs	r2, #0
 800d860:	715a      	strb	r2, [r3, #5]
            }
            if (rcOptions[BOXHEADFREE]) {
 800d862:	4b64      	ldr	r3, [pc, #400]	; (800d9f4 <taskComputeRc+0xa40>)
 800d864:	799b      	ldrb	r3, [r3, #6]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d007      	beq.n	800d87a <taskComputeRc+0x8c6>
                if (!f.HEADFREE_MODE) {
 800d86a:	4b61      	ldr	r3, [pc, #388]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d86c:	7a5b      	ldrb	r3, [r3, #9]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d106      	bne.n	800d880 <taskComputeRc+0x8cc>
                    f.HEADFREE_MODE = 1;
 800d872:	4b5f      	ldr	r3, [pc, #380]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d874:	2201      	movs	r2, #1
 800d876:	725a      	strb	r2, [r3, #9]
 800d878:	e002      	b.n	800d880 <taskComputeRc+0x8cc>
                }
            } else {
                f.HEADFREE_MODE = 0;
 800d87a:	4b5d      	ldr	r3, [pc, #372]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d87c:	2200      	movs	r2, #0
 800d87e:	725a      	strb	r2, [r3, #9]
            }
            if (rcOptions[BOXHEADADJ]) {
 800d880:	4b5c      	ldr	r3, [pc, #368]	; (800d9f4 <taskComputeRc+0xa40>)
 800d882:	79db      	ldrb	r3, [r3, #7]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d004      	beq.n	800d892 <taskComputeRc+0x8de>
                headFreeModeHold = heading; // acquire new heading
 800d888:	4b61      	ldr	r3, [pc, #388]	; (800da10 <taskComputeRc+0xa5c>)
 800d88a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d88e:	4b62      	ldr	r3, [pc, #392]	; (800da18 <taskComputeRc+0xa64>)
 800d890:	801a      	strh	r2, [r3, #0]
            }
        }
#endif

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800d892:	2020      	movs	r0, #32
 800d894:	f7f9 fa30 	bl	8006cf8 <sensors>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f000 809c 	beq.w	800d9d8 <taskComputeRc+0xa24>
            if (f.GPS_FIX && GPS_numSat >= 5) {
 800d8a0:	4b53      	ldr	r3, [pc, #332]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d8a2:	7adb      	ldrb	r3, [r3, #11]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f000 808e 	beq.w	800d9c6 <taskComputeRc+0xa12>
 800d8aa:	4b5c      	ldr	r3, [pc, #368]	; (800da1c <taskComputeRc+0xa68>)
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	2b04      	cmp	r3, #4
 800d8b0:	f240 8089 	bls.w	800d9c6 <taskComputeRc+0xa12>
                if (nav_mode != NAV_MODE_NONE && (!f.HORIZON_MODE && !f.ANGLE_MODE))
 800d8b4:	4b5a      	ldr	r3, [pc, #360]	; (800da20 <taskComputeRc+0xa6c>)
 800d8b6:	f993 3000 	ldrsb.w	r3, [r3]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d00a      	beq.n	800d8d4 <taskComputeRc+0x920>
 800d8be:	4b4c      	ldr	r3, [pc, #304]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d8c0:	791b      	ldrb	r3, [r3, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d106      	bne.n	800d8d4 <taskComputeRc+0x920>
 800d8c6:	4b4a      	ldr	r3, [pc, #296]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d8c8:	78db      	ldrb	r3, [r3, #3]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d102      	bne.n	800d8d4 <taskComputeRc+0x920>
                    f.ANGLE_MODE = true; // Force a stable mode in GPS Mode
 800d8ce:	4b48      	ldr	r3, [pc, #288]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	70da      	strb	r2, [r3, #3]

                // if both GPS_HOME & GPS_HOLD are checked => GPS_HOME is the priority
                if (rcOptions[BOXGPSHOME] || f.FW_FAILSAFE_RTH_ENABLE ) {
 800d8d4:	4b47      	ldr	r3, [pc, #284]	; (800d9f4 <taskComputeRc+0xa40>)
 800d8d6:	7a9b      	ldrb	r3, [r3, #10]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d103      	bne.n	800d8e4 <taskComputeRc+0x930>
 800d8dc:	4b44      	ldr	r3, [pc, #272]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d8de:	7c9b      	ldrb	r3, [r3, #18]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d01c      	beq.n	800d91e <taskComputeRc+0x96a>
                    if (!f.GPS_HOME_MODE) {
 800d8e4:	4b42      	ldr	r3, [pc, #264]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d8e6:	79db      	ldrb	r3, [r3, #7]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d168      	bne.n	800d9be <taskComputeRc+0xa0a>
                        f.GPS_HOME_MODE = 1;
 800d8ec:	4b40      	ldr	r3, [pc, #256]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	71da      	strb	r2, [r3, #7]
                        f.GPS_HOLD_MODE = 0;
 800d8f2:	4b3f      	ldr	r3, [pc, #252]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	721a      	strb	r2, [r3, #8]
                        GPSNavReset = 0;
 800d8f8:	4b4a      	ldr	r3, [pc, #296]	; (800da24 <taskComputeRc+0xa70>)
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	701a      	strb	r2, [r3, #0]
                        GPS_set_next_wp(&GPS_home[LAT], &GPS_home[LON]);
 800d8fe:	494a      	ldr	r1, [pc, #296]	; (800da28 <taskComputeRc+0xa74>)
 800d900:	484a      	ldr	r0, [pc, #296]	; (800da2c <taskComputeRc+0xa78>)
 800d902:	f7fb fac9 	bl	8008e98 <GPS_set_next_wp>
                        nav_mode = NAV_MODE_WP;
 800d906:	4b46      	ldr	r3, [pc, #280]	; (800da20 <taskComputeRc+0xa6c>)
 800d908:	2202      	movs	r2, #2
 800d90a:	701a      	strb	r2, [r3, #0]
                        GPS_hold[ALT] = GPS_altitude;
 800d90c:	4b48      	ldr	r3, [pc, #288]	; (800da30 <taskComputeRc+0xa7c>)
 800d90e:	881b      	ldrh	r3, [r3, #0]
 800d910:	461a      	mov	r2, r3
 800d912:	4b48      	ldr	r3, [pc, #288]	; (800da34 <taskComputeRc+0xa80>)
 800d914:	609a      	str	r2, [r3, #8]
                        f.CLIMBOUT_FW = 1;
 800d916:	4b36      	ldr	r3, [pc, #216]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d918:	2201      	movs	r2, #1
 800d91a:	74da      	strb	r2, [r3, #19]
                    if (!f.GPS_HOME_MODE) {
 800d91c:	e04f      	b.n	800d9be <taskComputeRc+0xa0a>
                    }
                } else {
                    f.GPS_HOME_MODE = 0;
 800d91e:	4b34      	ldr	r3, [pc, #208]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d920:	2200      	movs	r2, #0
 800d922:	71da      	strb	r2, [r3, #7]
                    if (rcOptions[BOXGPSHOLD] && abs(rcCommand[ROLL]) < cfg.ap_mode && abs(rcCommand[PITCH]) < cfg.ap_mode) {
 800d924:	4b33      	ldr	r3, [pc, #204]	; (800d9f4 <taskComputeRc+0xa40>)
 800d926:	7adb      	ldrb	r3, [r3, #11]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d039      	beq.n	800d9a0 <taskComputeRc+0x9ec>
 800d92c:	4b34      	ldr	r3, [pc, #208]	; (800da00 <taskComputeRc+0xa4c>)
 800d92e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d932:	2b00      	cmp	r3, #0
 800d934:	bfb8      	it	lt
 800d936:	425b      	neglt	r3, r3
 800d938:	b29a      	uxth	r2, r3
 800d93a:	4b3f      	ldr	r3, [pc, #252]	; (800da38 <taskComputeRc+0xa84>)
 800d93c:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800d940:	429a      	cmp	r2, r3
 800d942:	d22d      	bcs.n	800d9a0 <taskComputeRc+0x9ec>
 800d944:	4b2e      	ldr	r3, [pc, #184]	; (800da00 <taskComputeRc+0xa4c>)
 800d946:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	bfb8      	it	lt
 800d94e:	425b      	neglt	r3, r3
 800d950:	b29a      	uxth	r2, r3
 800d952:	4b39      	ldr	r3, [pc, #228]	; (800da38 <taskComputeRc+0xa84>)
 800d954:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800d958:	429a      	cmp	r2, r3
 800d95a:	d221      	bcs.n	800d9a0 <taskComputeRc+0x9ec>
                        if (!f.GPS_HOLD_MODE) {
 800d95c:	4b24      	ldr	r3, [pc, #144]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d95e:	7a1b      	ldrb	r3, [r3, #8]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d12c      	bne.n	800d9be <taskComputeRc+0xa0a>
                            f.GPS_HOLD_MODE = 1;
 800d964:	4b22      	ldr	r3, [pc, #136]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d966:	2201      	movs	r2, #1
 800d968:	721a      	strb	r2, [r3, #8]
                            GPSNavReset = 0;
 800d96a:	4b2e      	ldr	r3, [pc, #184]	; (800da24 <taskComputeRc+0xa70>)
 800d96c:	2200      	movs	r2, #0
 800d96e:	701a      	strb	r2, [r3, #0]
                            GPS_hold[LAT] = GPS_coord[LAT];
 800d970:	4b32      	ldr	r3, [pc, #200]	; (800da3c <taskComputeRc+0xa88>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a2f      	ldr	r2, [pc, #188]	; (800da34 <taskComputeRc+0xa80>)
 800d976:	6013      	str	r3, [r2, #0]
                            GPS_hold[LON] = GPS_coord[LON];
 800d978:	4b30      	ldr	r3, [pc, #192]	; (800da3c <taskComputeRc+0xa88>)
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	4a2d      	ldr	r2, [pc, #180]	; (800da34 <taskComputeRc+0xa80>)
 800d97e:	6053      	str	r3, [r2, #4]
                            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 800d980:	492f      	ldr	r1, [pc, #188]	; (800da40 <taskComputeRc+0xa8c>)
 800d982:	482c      	ldr	r0, [pc, #176]	; (800da34 <taskComputeRc+0xa80>)
 800d984:	f7fb fa88 	bl	8008e98 <GPS_set_next_wp>
                            nav_mode = NAV_MODE_POSHOLD;
 800d988:	4b25      	ldr	r3, [pc, #148]	; (800da20 <taskComputeRc+0xa6c>)
 800d98a:	2201      	movs	r2, #1
 800d98c:	701a      	strb	r2, [r3, #0]
                            GPS_hold[ALT] = GPS_altitude;
 800d98e:	4b28      	ldr	r3, [pc, #160]	; (800da30 <taskComputeRc+0xa7c>)
 800d990:	881b      	ldrh	r3, [r3, #0]
 800d992:	461a      	mov	r2, r3
 800d994:	4b27      	ldr	r3, [pc, #156]	; (800da34 <taskComputeRc+0xa80>)
 800d996:	609a      	str	r2, [r3, #8]
                            f.CLIMBOUT_FW = 0;
 800d998:	4b15      	ldr	r3, [pc, #84]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d99a:	2200      	movs	r2, #0
 800d99c:	74da      	strb	r2, [r3, #19]
                        if (!f.GPS_HOLD_MODE) {
 800d99e:	e00e      	b.n	800d9be <taskComputeRc+0xa0a>
                        }
                    } else {
                        f.GPS_HOLD_MODE = 0;
 800d9a0:	4b13      	ldr	r3, [pc, #76]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	721a      	strb	r2, [r3, #8]
                        // both boxes are unselected here, nav is reset if not already done
                        if (GPSNavReset == 0) {
 800d9a6:	4b1f      	ldr	r3, [pc, #124]	; (800da24 <taskComputeRc+0xa70>)
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d107      	bne.n	800d9be <taskComputeRc+0xa0a>
                            GPSNavReset = 1;
 800d9ae:	4b1d      	ldr	r3, [pc, #116]	; (800da24 <taskComputeRc+0xa70>)
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	701a      	strb	r2, [r3, #0]
                            GPS_reset_nav();
 800d9b4:	f7fb f8e8 	bl	8008b88 <GPS_reset_nav>
                            f.CLIMBOUT_FW = 0;
 800d9b8:	4b0d      	ldr	r3, [pc, #52]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	74da      	strb	r2, [r3, #19]
                        }
                    }
                }
                // Beep for indication that GPS has found satellites and naze32 is ready to fly
                buzzer(BUZZER_READY_BEEP);
 800d9be:	200c      	movs	r0, #12
 800d9c0:	f7f6 fa0e 	bl	8003de0 <buzzer>
 800d9c4:	e008      	b.n	800d9d8 <taskComputeRc+0xa24>
            } else {
                f.GPS_HOME_MODE = 0;
 800d9c6:	4b0a      	ldr	r3, [pc, #40]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	71da      	strb	r2, [r3, #7]
                f.GPS_HOLD_MODE = 0;
 800d9cc:	4b08      	ldr	r3, [pc, #32]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	721a      	strb	r2, [r3, #8]
                nav_mode = NAV_MODE_NONE;
 800d9d2:	4b13      	ldr	r3, [pc, #76]	; (800da20 <taskComputeRc+0xa6c>)
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	701a      	strb	r2, [r3, #0]
            }
        }
#endif

        if (rcOptions[BOXPASSTHRU] && !f.FW_FAILSAFE_RTH_ENABLE) {
 800d9d8:	4b06      	ldr	r3, [pc, #24]	; (800d9f4 <taskComputeRc+0xa40>)
 800d9da:	7b1b      	ldrb	r3, [r3, #12]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d031      	beq.n	800da44 <taskComputeRc+0xa90>
 800d9e0:	4b03      	ldr	r3, [pc, #12]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d9e2:	7c9b      	ldrb	r3, [r3, #18]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d12d      	bne.n	800da44 <taskComputeRc+0xa90>
            f.PASSTHRU_MODE = 1;
 800d9e8:	4b01      	ldr	r3, [pc, #4]	; (800d9f0 <taskComputeRc+0xa3c>)
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	729a      	strb	r2, [r3, #10]
 800d9ee:	e02c      	b.n	800da4a <taskComputeRc+0xa96>
 800d9f0:	200016f4 	.word	0x200016f4
 800d9f4:	20001794 	.word	0x20001794
 800d9f8:	20001460 	.word	0x20001460
 800d9fc:	20001468 	.word	0x20001468
 800da00:	20001750 	.word	0x20001750
 800da04:	200018b4 	.word	0x200018b4
 800da08:	20001474 	.word	0x20001474
 800da0c:	20001464 	.word	0x20001464
 800da10:	200019c0 	.word	0x200019c0
 800da14:	200019c2 	.word	0x200019c2
 800da18:	20001716 	.word	0x20001716
 800da1c:	200017d8 	.word	0x200017d8
 800da20:	200017f4 	.word	0x200017f4
 800da24:	20000058 	.word	0x20000058
 800da28:	200017c4 	.word	0x200017c4
 800da2c:	200017c0 	.word	0x200017c0
 800da30:	200017de 	.word	0x200017de
 800da34:	200017cc 	.word	0x200017cc
 800da38:	20000e54 	.word	0x20000e54
 800da3c:	200017b8 	.word	0x200017b8
 800da40:	200017d0 	.word	0x200017d0
        } else {
            f.PASSTHRU_MODE = 0;
 800da44:	4b47      	ldr	r3, [pc, #284]	; (800db64 <taskComputeRc+0xbb0>)
 800da46:	2200      	movs	r2, #0
 800da48:	729a      	strb	r2, [r3, #10]
        }

        if (f.FIXED_WING) {
 800da4a:	4b46      	ldr	r3, [pc, #280]	; (800db64 <taskComputeRc+0xbb0>)
 800da4c:	7c1b      	ldrb	r3, [r3, #16]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d047      	beq.n	800dae2 <taskComputeRc+0xb2e>
            f.HEADFREE_MODE = 0;
 800da52:	4b44      	ldr	r3, [pc, #272]	; (800db64 <taskComputeRc+0xbb0>)
 800da54:	2200      	movs	r2, #0
 800da56:	725a      	strb	r2, [r3, #9]
            if (feature(FEATURE_FAILSAFE) && failsafeCnt > (6 * cfg.failsafe_delay)) {
 800da58:	f44f 7000 	mov.w	r0, #512	; 0x200
 800da5c:	f7f9 f994 	bl	8006d88 <feature>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d03d      	beq.n	800dae2 <taskComputeRc+0xb2e>
 800da66:	4b40      	ldr	r3, [pc, #256]	; (800db68 <taskComputeRc+0xbb4>)
 800da68:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da6c:	4619      	mov	r1, r3
 800da6e:	4b3f      	ldr	r3, [pc, #252]	; (800db6c <taskComputeRc+0xbb8>)
 800da70:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800da74:	461a      	mov	r2, r3
 800da76:	4613      	mov	r3, r2
 800da78:	005b      	lsls	r3, r3, #1
 800da7a:	4413      	add	r3, r2
 800da7c:	005b      	lsls	r3, r3, #1
 800da7e:	4299      	cmp	r1, r3
 800da80:	dd2f      	ble.n	800dae2 <taskComputeRc+0xb2e>
                f.PASSTHRU_MODE = 0;
 800da82:	4b38      	ldr	r3, [pc, #224]	; (800db64 <taskComputeRc+0xbb0>)
 800da84:	2200      	movs	r2, #0
 800da86:	729a      	strb	r2, [r3, #10]
                f.ANGLE_MODE = 1;
 800da88:	4b36      	ldr	r3, [pc, #216]	; (800db64 <taskComputeRc+0xbb0>)
 800da8a:	2201      	movs	r2, #1
 800da8c:	70da      	strb	r2, [r3, #3]
                for (i = 0; i < 3; i++)
 800da8e:	2300      	movs	r3, #0
 800da90:	613b      	str	r3, [r7, #16]
 800da92:	e00a      	b.n	800daaa <taskComputeRc+0xaf6>
                    rcData[i] = mcfg.midrc;
 800da94:	4b36      	ldr	r3, [pc, #216]	; (800db70 <taskComputeRc+0xbbc>)
 800da96:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800da9a:	b219      	sxth	r1, r3
 800da9c:	4a35      	ldr	r2, [pc, #212]	; (800db74 <taskComputeRc+0xbc0>)
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	3301      	adds	r3, #1
 800daa8:	613b      	str	r3, [r7, #16]
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	2b02      	cmp	r3, #2
 800daae:	ddf1      	ble.n	800da94 <taskComputeRc+0xae0>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800dab0:	4b2e      	ldr	r3, [pc, #184]	; (800db6c <taskComputeRc+0xbb8>)
 800dab2:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800dab6:	b21a      	sxth	r2, r3
 800dab8:	4b2e      	ldr	r3, [pc, #184]	; (800db74 <taskComputeRc+0xbc0>)
 800daba:	80da      	strh	r2, [r3, #6]
                // No GPS?  Force a soft left turn.
                if (!f.GPS_FIX && GPS_numSat <= 5) {
 800dabc:	4b29      	ldr	r3, [pc, #164]	; (800db64 <taskComputeRc+0xbb0>)
 800dabe:	7adb      	ldrb	r3, [r3, #11]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d10e      	bne.n	800dae2 <taskComputeRc+0xb2e>
 800dac4:	4b2c      	ldr	r3, [pc, #176]	; (800db78 <taskComputeRc+0xbc4>)
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	2b05      	cmp	r3, #5
 800daca:	d80a      	bhi.n	800dae2 <taskComputeRc+0xb2e>
                    f.FW_FAILSAFE_RTH_ENABLE = 0;
 800dacc:	4b25      	ldr	r3, [pc, #148]	; (800db64 <taskComputeRc+0xbb0>)
 800dace:	2200      	movs	r2, #0
 800dad0:	749a      	strb	r2, [r3, #18]
                    rcData[ROLL] = mcfg.midrc - 50;
 800dad2:	4b27      	ldr	r3, [pc, #156]	; (800db70 <taskComputeRc+0xbbc>)
 800dad4:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800dad8:	3b32      	subs	r3, #50	; 0x32
 800dada:	b29b      	uxth	r3, r3
 800dadc:	b21a      	sxth	r2, r3
 800dade:	4b25      	ldr	r3, [pc, #148]	; (800db74 <taskComputeRc+0xbc0>)
 800dae0:	801a      	strh	r2, [r3, #0]
                }
            }
        }
        // When armed and motors aren't spinning. Make warning beeps so that accidentally won't lose fingers...
        // Also disarm board after 5 sec so users without buzzer won't lose fingers.
        if (feature(FEATURE_MOTOR_STOP) && f.ARMED && !f.FIXED_WING) {
 800dae2:	2010      	movs	r0, #16
 800dae4:	f7f9 f950 	bl	8006d88 <feature>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d035      	beq.n	800db5a <taskComputeRc+0xba6>
 800daee:	4b1d      	ldr	r3, [pc, #116]	; (800db64 <taskComputeRc+0xbb0>)
 800daf0:	785b      	ldrb	r3, [r3, #1]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d031      	beq.n	800db5a <taskComputeRc+0xba6>
 800daf6:	4b1b      	ldr	r3, [pc, #108]	; (800db64 <taskComputeRc+0xbb0>)
 800daf8:	7c1b      	ldrb	r3, [r3, #16]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d12d      	bne.n	800db5a <taskComputeRc+0xba6>
            if (isThrottleLow) {
 800dafe:	7afb      	ldrb	r3, [r7, #11]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d023      	beq.n	800db4c <taskComputeRc+0xb98>
                if (disarmTime == 0)
 800db04:	4b1d      	ldr	r3, [pc, #116]	; (800db7c <taskComputeRc+0xbc8>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d10e      	bne.n	800db2a <taskComputeRc+0xb76>
                    disarmTime = pif_cumulative_timer1ms + 1000 * mcfg.auto_disarm_board;
 800db0c:	4b18      	ldr	r3, [pc, #96]	; (800db70 <taskComputeRc+0xbbc>)
 800db0e:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800db12:	461a      	mov	r2, r3
 800db14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800db18:	fb02 f303 	mul.w	r3, r2, r3
 800db1c:	461a      	mov	r2, r3
 800db1e:	4b18      	ldr	r3, [pc, #96]	; (800db80 <taskComputeRc+0xbcc>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4413      	add	r3, r2
 800db24:	4a15      	ldr	r2, [pc, #84]	; (800db7c <taskComputeRc+0xbc8>)
 800db26:	6013      	str	r3, [r2, #0]
 800db28:	e00c      	b.n	800db44 <taskComputeRc+0xb90>
                else if (disarmTime < pif_cumulative_timer1ms && mcfg.auto_disarm_board != 0)
 800db2a:	4b14      	ldr	r3, [pc, #80]	; (800db7c <taskComputeRc+0xbc8>)
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	4b14      	ldr	r3, [pc, #80]	; (800db80 <taskComputeRc+0xbcc>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	429a      	cmp	r2, r3
 800db34:	d206      	bcs.n	800db44 <taskComputeRc+0xb90>
 800db36:	4b0e      	ldr	r3, [pc, #56]	; (800db70 <taskComputeRc+0xbbc>)
 800db38:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d001      	beq.n	800db44 <taskComputeRc+0xb90>
                    mwDisarm();
 800db40:	f7fe ff16 	bl	800c970 <mwDisarm>
                buzzer(BUZZER_ARMED);
 800db44:	2009      	movs	r0, #9
 800db46:	f7f6 f94b 	bl	8003de0 <buzzer>
 800db4a:	e006      	b.n	800db5a <taskComputeRc+0xba6>
            } else if (disarmTime != 0)
 800db4c:	4b0b      	ldr	r3, [pc, #44]	; (800db7c <taskComputeRc+0xbc8>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <taskComputeRc+0xba6>
                disarmTime = 0;
 800db54:	4b09      	ldr	r3, [pc, #36]	; (800db7c <taskComputeRc+0xbc8>)
 800db56:	2200      	movs	r2, #0
 800db58:	601a      	str	r2, [r3, #0]
        }
    return 0;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3718      	adds	r7, #24
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	200016f4 	.word	0x200016f4
 800db68:	20001728 	.word	0x20001728
 800db6c:	20000e54 	.word	0x20000e54
 800db70:	200008e8 	.word	0x200008e8
 800db74:	2000172c 	.word	0x2000172c
 800db78:	200017d8 	.word	0x200017d8
 800db7c:	2000189c 	.word	0x2000189c
 800db80:	20001c24 	.word	0x20001c24

0800db84 <taskLoop>:

uint16_t taskLoop(PifTask *p_task)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
	static int taskOrder = 0;   // never call all function in the same loop, to avoid high delay spikes

	(void)p_task;

	switch (taskOrder) {
 800db8c:	4b15      	ldr	r3, [pc, #84]	; (800dbe4 <taskLoop+0x60>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d002      	beq.n	800db9a <taskLoop+0x16>
 800db94:	2b01      	cmp	r3, #1
 800db96:	d00f      	beq.n	800dbb8 <taskLoop+0x34>
 800db98:	e01f      	b.n	800dbda <taskLoop+0x56>
		case 0:
			// if GPS feature is enabled, gpsThread() will be called at some intervals to check for stuck
			// hardware, wrong baud rates, init GPS if needed, etc. Don't use SENSOR_GPS here as gpsThread() can and will
			// change this based on available hardware
			taskOrder++;
 800db9a:	4b12      	ldr	r3, [pc, #72]	; (800dbe4 <taskLoop+0x60>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	3301      	adds	r3, #1
 800dba0:	4a10      	ldr	r2, [pc, #64]	; (800dbe4 <taskLoop+0x60>)
 800dba2:	6013      	str	r3, [r2, #0]
#ifdef GPS
			if (feature(FEATURE_GPS)) {
 800dba4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800dba8:	f7f9 f8ee 	bl	8006d88 <feature>
 800dbac:	4603      	mov	r3, r0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d002      	beq.n	800dbb8 <taskLoop+0x34>
				gpsThread();
 800dbb2:	f7fa fb5f 	bl	8008274 <gpsThread>
				break;
 800dbb6:	e010      	b.n	800dbda <taskLoop+0x56>
			}
#endif
		case 1:
			taskOrder = 0;
 800dbb8:	4b0a      	ldr	r3, [pc, #40]	; (800dbe4 <taskLoop+0x60>)
 800dbba:	2200      	movs	r2, #0
 800dbbc:	601a      	str	r2, [r3, #0]
			if (feature(FEATURE_VARIO) && f.VARIO_MODE)
 800dbbe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800dbc2:	f7f9 f8e1 	bl	8006d88 <feature>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d005      	beq.n	800dbd8 <taskLoop+0x54>
 800dbcc:	4b06      	ldr	r3, [pc, #24]	; (800dbe8 <taskLoop+0x64>)
 800dbce:	7bdb      	ldrb	r3, [r3, #15]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <taskLoop+0x54>
				mwVario();
 800dbd4:	f7fe fee6 	bl	800c9a4 <mwVario>
			break;
 800dbd8:	bf00      	nop
	}
    return 0;
 800dbda:	2300      	movs	r3, #0
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	200019b0 	.word	0x200019b0
 800dbe8:	200016f4 	.word	0x200016f4

0800dbec <taskComputeImu>:

uint16_t taskComputeImu(PifTask *p_task)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
	static int step = 0;

    switch (step) {
 800dbf4:	4ba1      	ldr	r3, [pc, #644]	; (800de7c <taskComputeImu+0x290>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b06      	cmp	r3, #6
 800dbfa:	f200 82be 	bhi.w	800e17a <taskComputeImu+0x58e>
 800dbfe:	a201      	add	r2, pc, #4	; (adr r2, 800dc04 <taskComputeImu+0x18>)
 800dc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc04:	0800dc21 	.word	0x0800dc21
 800dc08:	0800dc31 	.word	0x0800dc31
 800dc0c:	0800dc31 	.word	0x0800dc31
 800dc10:	0800dc31 	.word	0x0800dc31
 800dc14:	0800dc49 	.word	0x0800dc49
 800dc18:	0800dc5b 	.word	0x0800dc5b
 800dc1c:	0800e161 	.word	0x0800e161
    case 0:
        // Measure loop rate just afer reading the sensors
        cycleTime = pifTask_GetDeltaTime(p_task, TRUE);
 800dc20:	2101      	movs	r1, #1
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f006 fc7e 	bl	8014524 <pifTask_GetDeltaTime>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	b29a      	uxth	r2, r3
 800dc2c:	4b94      	ldr	r3, [pc, #592]	; (800de80 <taskComputeImu+0x294>)
 800dc2e:	801a      	strh	r2, [r3, #0]
    
    case 1:
    case 2:
    case 3:
        step = computeIMU(step);
 800dc30:	4b92      	ldr	r3, [pc, #584]	; (800de7c <taskComputeImu+0x290>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7fb fe07 	bl	8009848 <computeIMU>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	4a8f      	ldr	r2, [pc, #572]	; (800de7c <taskComputeImu+0x290>)
 800dc3e:	6013      	str	r3, [r2, #0]
        pifTask_SetTrigger(p_task);
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f006 fc49 	bl	80144d8 <pifTask_SetTrigger>
		break;
 800dc46:	e298      	b.n	800e17a <taskComputeImu+0x58e>

    case 4:
        // non IMU critical, temeperatur
        annexCode();
 800dc48:	f7fe f99a 	bl	800bf80 <annexCode>
        step = 5;
 800dc4c:	4b8b      	ldr	r3, [pc, #556]	; (800de7c <taskComputeImu+0x290>)
 800dc4e:	2205      	movs	r2, #5
 800dc50:	601a      	str	r2, [r3, #0]
        pifTask_SetTrigger(p_task);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f006 fc40 	bl	80144d8 <pifTask_SetTrigger>
    	break;
 800dc58:	e28f      	b.n	800e17a <taskComputeImu+0x58e>

    case 5:
#ifdef MAG
        if (sensors(SENSOR_MAG)) {
 800dc5a:	2008      	movs	r0, #8
 800dc5c:	f7f9 f84c 	bl	8006cf8 <sensors>
 800dc60:	4603      	mov	r3, r0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d057      	beq.n	800dd16 <taskComputeImu+0x12a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dc66:	4b87      	ldr	r3, [pc, #540]	; (800de84 <taskComputeImu+0x298>)
 800dc68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	bfb8      	it	lt
 800dc70:	425b      	neglt	r3, r3
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	2b45      	cmp	r3, #69	; 0x45
 800dc76:	d847      	bhi.n	800dd08 <taskComputeImu+0x11c>
 800dc78:	4b83      	ldr	r3, [pc, #524]	; (800de88 <taskComputeImu+0x29c>)
 800dc7a:	795b      	ldrb	r3, [r3, #5]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d043      	beq.n	800dd08 <taskComputeImu+0x11c>
                int16_t dif = heading - magHold;
 800dc80:	4b82      	ldr	r3, [pc, #520]	; (800de8c <taskComputeImu+0x2a0>)
 800dc82:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	4b81      	ldr	r3, [pc, #516]	; (800de90 <taskComputeImu+0x2a4>)
 800dc8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	1ad3      	subs	r3, r2, r3
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	82fb      	strh	r3, [r7, #22]
                if (dif <= -180)
 800dc96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dc9a:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 800dc9e:	da04      	bge.n	800dcaa <taskComputeImu+0xbe>
                    dif += 360;
 800dca0:	8afb      	ldrh	r3, [r7, #22]
 800dca2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	82fb      	strh	r3, [r7, #22]
                if (dif >= +180)
 800dcaa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dcae:	2bb3      	cmp	r3, #179	; 0xb3
 800dcb0:	dd04      	ble.n	800dcbc <taskComputeImu+0xd0>
                    dif -= 360;
 800dcb2:	8afb      	ldrh	r3, [r7, #22]
 800dcb4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	82fb      	strh	r3, [r7, #22]
                dif *= -mcfg.yaw_control_direction;
 800dcbc:	4b75      	ldr	r3, [pc, #468]	; (800de94 <taskComputeImu+0x2a8>)
 800dcbe:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800dcc2:	425b      	negs	r3, r3
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	8afb      	ldrh	r3, [r7, #22]
 800dcc8:	fb12 f303 	smulbb	r3, r2, r3
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	82fb      	strh	r3, [r7, #22]
                if (f.SMALL_ANGLE)
 800dcd0:	4b6d      	ldr	r3, [pc, #436]	; (800de88 <taskComputeImu+0x29c>)
 800dcd2:	7b5b      	ldrb	r3, [r3, #13]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d01d      	beq.n	800dd14 <taskComputeImu+0x128>
                    rcCommand[YAW] -= dif * cfg.P8[PIDMAG] / 30;    // 18 deg
 800dcd8:	4b6a      	ldr	r3, [pc, #424]	; (800de84 <taskComputeImu+0x298>)
 800dcda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dce4:	496c      	ldr	r1, [pc, #432]	; (800de98 <taskComputeImu+0x2ac>)
 800dce6:	7a49      	ldrb	r1, [r1, #9]
 800dce8:	fb01 f303 	mul.w	r3, r1, r3
 800dcec:	496b      	ldr	r1, [pc, #428]	; (800de9c <taskComputeImu+0x2b0>)
 800dcee:	fb81 0103 	smull	r0, r1, r1, r3
 800dcf2:	4419      	add	r1, r3
 800dcf4:	1109      	asrs	r1, r1, #4
 800dcf6:	17db      	asrs	r3, r3, #31
 800dcf8:	1a5b      	subs	r3, r3, r1
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	4413      	add	r3, r2
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	b21a      	sxth	r2, r3
 800dd02:	4b60      	ldr	r3, [pc, #384]	; (800de84 <taskComputeImu+0x298>)
 800dd04:	809a      	strh	r2, [r3, #4]
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dd06:	e005      	b.n	800dd14 <taskComputeImu+0x128>
            } else
                magHold = heading;
 800dd08:	4b60      	ldr	r3, [pc, #384]	; (800de8c <taskComputeImu+0x2a0>)
 800dd0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dd0e:	4b60      	ldr	r3, [pc, #384]	; (800de90 <taskComputeImu+0x2a4>)
 800dd10:	801a      	strh	r2, [r3, #0]
 800dd12:	e000      	b.n	800dd16 <taskComputeImu+0x12a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dd14:	bf00      	nop
        }
#endif

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800dd16:	2004      	movs	r0, #4
 800dd18:	f7f8 ffee 	bl	8006cf8 <sensors>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	f000 80e1 	beq.w	800dee6 <taskComputeImu+0x2fa>
            if (f.BARO_MODE) {
 800dd24:	4b58      	ldr	r3, [pc, #352]	; (800de88 <taskComputeImu+0x29c>)
 800dd26:	799b      	ldrb	r3, [r3, #6]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f000 80dc 	beq.w	800dee6 <taskComputeImu+0x2fa>
                static uint8_t isAltHoldChanged = 0;
                if (!f.FIXED_WING) {
 800dd2e:	4b56      	ldr	r3, [pc, #344]	; (800de88 <taskComputeImu+0x29c>)
 800dd30:	7c1b      	ldrb	r3, [r3, #16]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	f040 80c4 	bne.w	800dec0 <taskComputeImu+0x2d4>
                    // multirotor alt hold
                    if (cfg.alt_hold_fast_change) {
 800dd38:	4b57      	ldr	r3, [pc, #348]	; (800de98 <taskComputeImu+0x2ac>)
 800dd3a:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d053      	beq.n	800ddea <taskComputeImu+0x1fe>
                        // rapid alt changes
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800dd42:	4b50      	ldr	r3, [pc, #320]	; (800de84 <taskComputeImu+0x298>)
 800dd44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dd48:	461a      	mov	r2, r3
 800dd4a:	4b55      	ldr	r3, [pc, #340]	; (800dea0 <taskComputeImu+0x2b4>)
 800dd4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd50:	1ad3      	subs	r3, r2, r3
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	bfb8      	it	lt
 800dd56:	425b      	neglt	r3, r3
 800dd58:	4a4f      	ldr	r2, [pc, #316]	; (800de98 <taskComputeImu+0x2ac>)
 800dd5a:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	dd22      	ble.n	800dda8 <taskComputeImu+0x1bc>
                            errorVelocityI = 0;
 800dd62:	4b50      	ldr	r3, [pc, #320]	; (800dea4 <taskComputeImu+0x2b8>)
 800dd64:	2200      	movs	r2, #0
 800dd66:	601a      	str	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800dd68:	4b4f      	ldr	r3, [pc, #316]	; (800dea8 <taskComputeImu+0x2bc>)
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	701a      	strb	r2, [r3, #0]
                            rcCommand[THROTTLE] += (rcCommand[THROTTLE] > initialThrottleHold) ? -cfg.alt_hold_throttle_neutral : cfg.alt_hold_throttle_neutral;
 800dd6e:	4b45      	ldr	r3, [pc, #276]	; (800de84 <taskComputeImu+0x298>)
 800dd70:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	4b43      	ldr	r3, [pc, #268]	; (800de84 <taskComputeImu+0x298>)
 800dd78:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800dd7c:	4b48      	ldr	r3, [pc, #288]	; (800dea0 <taskComputeImu+0x2b4>)
 800dd7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd82:	4299      	cmp	r1, r3
 800dd84:	dd06      	ble.n	800dd94 <taskComputeImu+0x1a8>
 800dd86:	4b44      	ldr	r3, [pc, #272]	; (800de98 <taskComputeImu+0x2ac>)
 800dd88:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	425b      	negs	r3, r3
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	e003      	b.n	800dd9c <taskComputeImu+0x1b0>
 800dd94:	4b40      	ldr	r3, [pc, #256]	; (800de98 <taskComputeImu+0x2ac>)
 800dd96:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	4413      	add	r3, r2
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	b21a      	sxth	r2, r3
 800dda2:	4b38      	ldr	r3, [pc, #224]	; (800de84 <taskComputeImu+0x298>)
 800dda4:	80da      	strh	r2, [r3, #6]
 800dda6:	e09e      	b.n	800dee6 <taskComputeImu+0x2fa>
                        } else {
                            if (isAltHoldChanged) {
 800dda8:	4b3f      	ldr	r3, [pc, #252]	; (800dea8 <taskComputeImu+0x2bc>)
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d006      	beq.n	800ddbe <taskComputeImu+0x1d2>
                                AltHold = EstAlt;
 800ddb0:	4b3e      	ldr	r3, [pc, #248]	; (800deac <taskComputeImu+0x2c0>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a3e      	ldr	r2, [pc, #248]	; (800deb0 <taskComputeImu+0x2c4>)
 800ddb6:	6013      	str	r3, [r2, #0]
                                isAltHoldChanged = 0;
 800ddb8:	4b3b      	ldr	r3, [pc, #236]	; (800dea8 <taskComputeImu+0x2bc>)
 800ddba:	2200      	movs	r2, #0
 800ddbc:	701a      	strb	r2, [r3, #0]
                            }
                            rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800ddbe:	4b38      	ldr	r3, [pc, #224]	; (800dea0 <taskComputeImu+0x2b4>)
 800ddc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	4b3b      	ldr	r3, [pc, #236]	; (800deb4 <taskComputeImu+0x2c8>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4413      	add	r3, r2
 800ddcc:	4a31      	ldr	r2, [pc, #196]	; (800de94 <taskComputeImu+0x2a8>)
 800ddce:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800ddd2:	4611      	mov	r1, r2
 800ddd4:	4a2f      	ldr	r2, [pc, #188]	; (800de94 <taskComputeImu+0x2a8>)
 800ddd6:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7f5 fe70 	bl	8003ac0 <constrain>
 800dde0:	4603      	mov	r3, r0
 800dde2:	b21a      	sxth	r2, r3
 800dde4:	4b27      	ldr	r3, [pc, #156]	; (800de84 <taskComputeImu+0x298>)
 800dde6:	80da      	strh	r2, [r3, #6]
 800dde8:	e07d      	b.n	800dee6 <taskComputeImu+0x2fa>
                        }
                    } else {
                        // slow alt changes for apfags
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800ddea:	4b26      	ldr	r3, [pc, #152]	; (800de84 <taskComputeImu+0x298>)
 800ddec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	4b2b      	ldr	r3, [pc, #172]	; (800dea0 <taskComputeImu+0x2b4>)
 800ddf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ddf8:	1ad3      	subs	r3, r2, r3
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	bfb8      	it	lt
 800ddfe:	425b      	neglt	r3, r3
 800de00:	4a25      	ldr	r2, [pc, #148]	; (800de98 <taskComputeImu+0x2ac>)
 800de02:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800de06:	4293      	cmp	r3, r2
 800de08:	dd14      	ble.n	800de34 <taskComputeImu+0x248>
                            // set velocity proportional to stick movement +100 throttle gives ~ +50 cm/s
                            setVelocity = (rcCommand[THROTTLE] - initialThrottleHold) / 2;
 800de0a:	4b1e      	ldr	r3, [pc, #120]	; (800de84 <taskComputeImu+0x298>)
 800de0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de10:	461a      	mov	r2, r3
 800de12:	4b23      	ldr	r3, [pc, #140]	; (800dea0 <taskComputeImu+0x2b4>)
 800de14:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de18:	1ad3      	subs	r3, r2, r3
 800de1a:	0fda      	lsrs	r2, r3, #31
 800de1c:	4413      	add	r3, r2
 800de1e:	105b      	asrs	r3, r3, #1
 800de20:	461a      	mov	r2, r3
 800de22:	4b25      	ldr	r3, [pc, #148]	; (800deb8 <taskComputeImu+0x2cc>)
 800de24:	601a      	str	r2, [r3, #0]
                            velocityControl = 1;
 800de26:	4b25      	ldr	r3, [pc, #148]	; (800debc <taskComputeImu+0x2d0>)
 800de28:	2201      	movs	r2, #1
 800de2a:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800de2c:	4b1e      	ldr	r3, [pc, #120]	; (800dea8 <taskComputeImu+0x2bc>)
 800de2e:	2201      	movs	r2, #1
 800de30:	701a      	strb	r2, [r3, #0]
 800de32:	e00d      	b.n	800de50 <taskComputeImu+0x264>
                        } else if (isAltHoldChanged) {
 800de34:	4b1c      	ldr	r3, [pc, #112]	; (800dea8 <taskComputeImu+0x2bc>)
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d009      	beq.n	800de50 <taskComputeImu+0x264>
                            AltHold = EstAlt;
 800de3c:	4b1b      	ldr	r3, [pc, #108]	; (800deac <taskComputeImu+0x2c0>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4a1b      	ldr	r2, [pc, #108]	; (800deb0 <taskComputeImu+0x2c4>)
 800de42:	6013      	str	r3, [r2, #0]
                            velocityControl = 0;
 800de44:	4b1d      	ldr	r3, [pc, #116]	; (800debc <taskComputeImu+0x2d0>)
 800de46:	2200      	movs	r2, #0
 800de48:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 0;
 800de4a:	4b17      	ldr	r3, [pc, #92]	; (800dea8 <taskComputeImu+0x2bc>)
 800de4c:	2200      	movs	r2, #0
 800de4e:	701a      	strb	r2, [r3, #0]
                        }
                        rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800de50:	4b13      	ldr	r3, [pc, #76]	; (800dea0 <taskComputeImu+0x2b4>)
 800de52:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de56:	461a      	mov	r2, r3
 800de58:	4b16      	ldr	r3, [pc, #88]	; (800deb4 <taskComputeImu+0x2c8>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4413      	add	r3, r2
 800de5e:	4a0d      	ldr	r2, [pc, #52]	; (800de94 <taskComputeImu+0x2a8>)
 800de60:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800de64:	4611      	mov	r1, r2
 800de66:	4a0b      	ldr	r2, [pc, #44]	; (800de94 <taskComputeImu+0x2a8>)
 800de68:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7f5 fe27 	bl	8003ac0 <constrain>
 800de72:	4603      	mov	r3, r0
 800de74:	b21a      	sxth	r2, r3
 800de76:	4b03      	ldr	r3, [pc, #12]	; (800de84 <taskComputeImu+0x298>)
 800de78:	80da      	strh	r2, [r3, #6]
 800de7a:	e034      	b.n	800dee6 <taskComputeImu+0x2fa>
 800de7c:	200019b4 	.word	0x200019b4
 800de80:	20001714 	.word	0x20001714
 800de84:	20001750 	.word	0x20001750
 800de88:	200016f4 	.word	0x200016f4
 800de8c:	200019c0 	.word	0x200019c0
 800de90:	200019c2 	.word	0x200019c2
 800de94:	200008e8 	.word	0x200008e8
 800de98:	20000e54 	.word	0x20000e54
 800de9c:	88888889 	.word	0x88888889
 800dea0:	200018b4 	.word	0x200018b4
 800dea4:	20001474 	.word	0x20001474
 800dea8:	200019b8 	.word	0x200019b8
 800deac:	20001460 	.word	0x20001460
 800deb0:	20001468 	.word	0x20001468
 800deb4:	20001464 	.word	0x20001464
 800deb8:	2000146c 	.word	0x2000146c
 800debc:	20001470 	.word	0x20001470
                    }
                } else {
                    // handle fixedwing-related althold. UNTESTED! and probably wrong
                    // most likely need to check changes on pitch channel and 'reset' althold similar to
                    // how throttle does it on multirotor
                    rcCommand[PITCH] += BaroPID * mcfg.fw_althold_dir;
 800dec0:	4bb0      	ldr	r3, [pc, #704]	; (800e184 <taskComputeImu+0x598>)
 800dec2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dec6:	b29a      	uxth	r2, r3
 800dec8:	4baf      	ldr	r3, [pc, #700]	; (800e188 <taskComputeImu+0x59c>)
 800deca:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 800dece:	b299      	uxth	r1, r3
 800ded0:	4bae      	ldr	r3, [pc, #696]	; (800e18c <taskComputeImu+0x5a0>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	fb11 f303 	smulbb	r3, r1, r3
 800deda:	b29b      	uxth	r3, r3
 800dedc:	4413      	add	r3, r2
 800dede:	b29b      	uxth	r3, r3
 800dee0:	b21a      	sxth	r2, r3
 800dee2:	4ba8      	ldr	r3, [pc, #672]	; (800e184 <taskComputeImu+0x598>)
 800dee4:	805a      	strh	r2, [r3, #2]
                }
            }
        }
#endif

        if (cfg.throttle_correction_value && (f.ANGLE_MODE || f.HORIZON_MODE)) {
 800dee6:	4baa      	ldr	r3, [pc, #680]	; (800e190 <taskComputeImu+0x5a4>)
 800dee8:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800deec:	2b00      	cmp	r3, #0
 800deee:	d014      	beq.n	800df1a <taskComputeImu+0x32e>
 800def0:	4ba8      	ldr	r3, [pc, #672]	; (800e194 <taskComputeImu+0x5a8>)
 800def2:	78db      	ldrb	r3, [r3, #3]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d103      	bne.n	800df00 <taskComputeImu+0x314>
 800def8:	4ba6      	ldr	r3, [pc, #664]	; (800e194 <taskComputeImu+0x5a8>)
 800defa:	791b      	ldrb	r3, [r3, #4]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d00c      	beq.n	800df1a <taskComputeImu+0x32e>
            rcCommand[THROTTLE] += throttleAngleCorrection;
 800df00:	4ba0      	ldr	r3, [pc, #640]	; (800e184 <taskComputeImu+0x598>)
 800df02:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800df06:	b29a      	uxth	r2, r3
 800df08:	4ba3      	ldr	r3, [pc, #652]	; (800e198 <taskComputeImu+0x5ac>)
 800df0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df0e:	b29b      	uxth	r3, r3
 800df10:	4413      	add	r3, r2
 800df12:	b29b      	uxth	r3, r3
 800df14:	b21a      	sxth	r2, r3
 800df16:	4b9b      	ldr	r3, [pc, #620]	; (800e184 <taskComputeImu+0x598>)
 800df18:	80da      	strh	r2, [r3, #6]
        }

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800df1a:	2020      	movs	r0, #32
 800df1c:	f7f8 feec 	bl	8006cf8 <sensors>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	f000 8115 	beq.w	800e152 <taskComputeImu+0x566>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800df28:	4b9a      	ldr	r3, [pc, #616]	; (800e194 <taskComputeImu+0x5a8>)
 800df2a:	79db      	ldrb	r3, [r3, #7]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d104      	bne.n	800df3a <taskComputeImu+0x34e>
 800df30:	4b98      	ldr	r3, [pc, #608]	; (800e194 <taskComputeImu+0x5a8>)
 800df32:	7a1b      	ldrb	r3, [r3, #8]
 800df34:	2b00      	cmp	r3, #0
 800df36:	f000 8103 	beq.w	800e140 <taskComputeImu+0x554>
 800df3a:	4b96      	ldr	r3, [pc, #600]	; (800e194 <taskComputeImu+0x5a8>)
 800df3c:	7b1b      	ldrb	r3, [r3, #12]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f000 80fe 	beq.w	800e140 <taskComputeImu+0x554>
                float sin_yaw_y = sinf(heading * 0.0174532925f);
 800df44:	4b95      	ldr	r3, [pc, #596]	; (800e19c <taskComputeImu+0x5b0>)
 800df46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df4a:	ee07 3a90 	vmov	s15, r3
 800df4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df52:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800e1a0 <taskComputeImu+0x5b4>
 800df56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df5a:	eeb0 0a67 	vmov.f32	s0, s15
 800df5e:	f015 f8ff 	bl	8023160 <sinf>
 800df62:	ed87 0a04 	vstr	s0, [r7, #16]
                float cos_yaw_x = cosf(heading * 0.0174532925f);
 800df66:	4b8d      	ldr	r3, [pc, #564]	; (800e19c <taskComputeImu+0x5b0>)
 800df68:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df6c:	ee07 3a90 	vmov	s15, r3
 800df70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df74:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e1a0 <taskComputeImu+0x5b4>
 800df78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df7c:	eeb0 0a67 	vmov.f32	s0, s15
 800df80:	f015 f86a 	bl	8023058 <cosf>
 800df84:	ed87 0a03 	vstr	s0, [r7, #12]
                if (!f.FIXED_WING) {
 800df88:	4b82      	ldr	r3, [pc, #520]	; (800e194 <taskComputeImu+0x5a8>)
 800df8a:	7c1b      	ldrb	r3, [r3, #16]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f040 80d4 	bne.w	800e13a <taskComputeImu+0x54e>
                    if (cfg.nav_slew_rate) {
 800df92:	4b7f      	ldr	r3, [pc, #508]	; (800e190 <taskComputeImu+0x5a4>)
 800df94:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800df98:	2b00      	cmp	r3, #0
 800df9a:	f000 8087 	beq.w	800e0ac <taskComputeImu+0x4c0>
                        nav_rated[LON] += constrain(wrap_18000(nav[LON] - nav_rated[LON]), -cfg.nav_slew_rate, cfg.nav_slew_rate); // TODO check this on uint8
 800df9e:	4b81      	ldr	r3, [pc, #516]	; (800e1a4 <taskComputeImu+0x5b8>)
 800dfa0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	4b80      	ldr	r3, [pc, #512]	; (800e1a8 <taskComputeImu+0x5bc>)
 800dfa8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dfac:	1ad3      	subs	r3, r2, r3
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fb fb68 	bl	8009684 <wrap_18000>
 800dfb4:	4b76      	ldr	r3, [pc, #472]	; (800e190 <taskComputeImu+0x5a4>)
 800dfb6:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800dfba:	425b      	negs	r3, r3
 800dfbc:	4a74      	ldr	r2, [pc, #464]	; (800e190 <taskComputeImu+0x5a4>)
 800dfbe:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	f7f5 fd7c 	bl	8003ac0 <constrain>
 800dfc8:	4601      	mov	r1, r0
 800dfca:	4b77      	ldr	r3, [pc, #476]	; (800e1a8 <taskComputeImu+0x5bc>)
 800dfcc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dfd0:	b29a      	uxth	r2, r3
 800dfd2:	b28b      	uxth	r3, r1
 800dfd4:	4413      	add	r3, r2
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	b21a      	sxth	r2, r3
 800dfda:	4b73      	ldr	r3, [pc, #460]	; (800e1a8 <taskComputeImu+0x5bc>)
 800dfdc:	805a      	strh	r2, [r3, #2]
                        nav_rated[LAT] += constrain(wrap_18000(nav[LAT] - nav_rated[LAT]), -cfg.nav_slew_rate, cfg.nav_slew_rate);
 800dfde:	4b71      	ldr	r3, [pc, #452]	; (800e1a4 <taskComputeImu+0x5b8>)
 800dfe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	4b70      	ldr	r3, [pc, #448]	; (800e1a8 <taskComputeImu+0x5bc>)
 800dfe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfec:	1ad3      	subs	r3, r2, r3
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fb fb48 	bl	8009684 <wrap_18000>
 800dff4:	4b66      	ldr	r3, [pc, #408]	; (800e190 <taskComputeImu+0x5a4>)
 800dff6:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800dffa:	425b      	negs	r3, r3
 800dffc:	4a64      	ldr	r2, [pc, #400]	; (800e190 <taskComputeImu+0x5a4>)
 800dffe:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e002:	4619      	mov	r1, r3
 800e004:	f7f5 fd5c 	bl	8003ac0 <constrain>
 800e008:	4601      	mov	r1, r0
 800e00a:	4b67      	ldr	r3, [pc, #412]	; (800e1a8 <taskComputeImu+0x5bc>)
 800e00c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e010:	b29a      	uxth	r2, r3
 800e012:	b28b      	uxth	r3, r1
 800e014:	4413      	add	r3, r2
 800e016:	b29b      	uxth	r3, r3
 800e018:	b21a      	sxth	r2, r3
 800e01a:	4b63      	ldr	r3, [pc, #396]	; (800e1a8 <taskComputeImu+0x5bc>)
 800e01c:	801a      	strh	r2, [r3, #0]
                        GPS_angle[ROLL] = (nav_rated[LON] * cos_yaw_x - nav_rated[LAT] * sin_yaw_y) / 10;
 800e01e:	4b62      	ldr	r3, [pc, #392]	; (800e1a8 <taskComputeImu+0x5bc>)
 800e020:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e024:	ee07 3a90 	vmov	s15, r3
 800e028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e02c:	edd7 7a03 	vldr	s15, [r7, #12]
 800e030:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e034:	4b5c      	ldr	r3, [pc, #368]	; (800e1a8 <taskComputeImu+0x5bc>)
 800e036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e03a:	ee07 3a90 	vmov	s15, r3
 800e03e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e042:	edd7 7a04 	vldr	s15, [r7, #16]
 800e046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e04a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e04e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e052:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e05a:	ee17 3a90 	vmov	r3, s15
 800e05e:	b21a      	sxth	r2, r3
 800e060:	4b52      	ldr	r3, [pc, #328]	; (800e1ac <taskComputeImu+0x5c0>)
 800e062:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav_rated[LON] * sin_yaw_y + nav_rated[LAT] * cos_yaw_x) / 10;
 800e064:	4b50      	ldr	r3, [pc, #320]	; (800e1a8 <taskComputeImu+0x5bc>)
 800e066:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e06a:	ee07 3a90 	vmov	s15, r3
 800e06e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e072:	edd7 7a04 	vldr	s15, [r7, #16]
 800e076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e07a:	4b4b      	ldr	r3, [pc, #300]	; (800e1a8 <taskComputeImu+0x5bc>)
 800e07c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e080:	ee07 3a90 	vmov	s15, r3
 800e084:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e088:	edd7 7a03 	vldr	s15, [r7, #12]
 800e08c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e090:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e094:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e098:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e09c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0a0:	ee17 3a90 	vmov	r3, s15
 800e0a4:	b21a      	sxth	r2, r3
 800e0a6:	4b41      	ldr	r3, [pc, #260]	; (800e1ac <taskComputeImu+0x5c0>)
 800e0a8:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e0aa:	e052      	b.n	800e152 <taskComputeImu+0x566>
                    } else {
                        GPS_angle[ROLL] = (nav[LON] * cos_yaw_x - nav[LAT] * sin_yaw_y) / 10;
 800e0ac:	4b3d      	ldr	r3, [pc, #244]	; (800e1a4 <taskComputeImu+0x5b8>)
 800e0ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0b2:	ee07 3a90 	vmov	s15, r3
 800e0b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e0ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0c2:	4b38      	ldr	r3, [pc, #224]	; (800e1a4 <taskComputeImu+0x5b8>)
 800e0c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0c8:	ee07 3a90 	vmov	s15, r3
 800e0cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e0d0:	edd7 7a04 	vldr	s15, [r7, #16]
 800e0d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0dc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e0e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e0e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0e8:	ee17 3a90 	vmov	r3, s15
 800e0ec:	b21a      	sxth	r2, r3
 800e0ee:	4b2f      	ldr	r3, [pc, #188]	; (800e1ac <taskComputeImu+0x5c0>)
 800e0f0:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav[LON] * sin_yaw_y + nav[LAT] * cos_yaw_x) / 10;
 800e0f2:	4b2c      	ldr	r3, [pc, #176]	; (800e1a4 <taskComputeImu+0x5b8>)
 800e0f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0f8:	ee07 3a90 	vmov	s15, r3
 800e0fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e100:	edd7 7a04 	vldr	s15, [r7, #16]
 800e104:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e108:	4b26      	ldr	r3, [pc, #152]	; (800e1a4 <taskComputeImu+0x5b8>)
 800e10a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e10e:	ee07 3a90 	vmov	s15, r3
 800e112:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e116:	edd7 7a03 	vldr	s15, [r7, #12]
 800e11a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e11e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e122:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e12a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e12e:	ee17 3a90 	vmov	r3, s15
 800e132:	b21a      	sxth	r2, r3
 800e134:	4b1d      	ldr	r3, [pc, #116]	; (800e1ac <taskComputeImu+0x5c0>)
 800e136:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e138:	e00b      	b.n	800e152 <taskComputeImu+0x566>
                    }
                } else fw_nav();
 800e13a:	f7f8 ff57 	bl	8006fec <fw_nav>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e13e:	e008      	b.n	800e152 <taskComputeImu+0x566>
            } else {
                GPS_angle[ROLL] = 0;
 800e140:	4b1a      	ldr	r3, [pc, #104]	; (800e1ac <taskComputeImu+0x5c0>)
 800e142:	2200      	movs	r2, #0
 800e144:	801a      	strh	r2, [r3, #0]
                GPS_angle[PITCH] = 0;
 800e146:	4b19      	ldr	r3, [pc, #100]	; (800e1ac <taskComputeImu+0x5c0>)
 800e148:	2200      	movs	r2, #0
 800e14a:	805a      	strh	r2, [r3, #2]
                GPS_angle[YAW] = 0;
 800e14c:	4b17      	ldr	r3, [pc, #92]	; (800e1ac <taskComputeImu+0x5c0>)
 800e14e:	2200      	movs	r2, #0
 800e150:	809a      	strh	r2, [r3, #4]
            }
        }
#endif
        step = 6;
 800e152:	4b17      	ldr	r3, [pc, #92]	; (800e1b0 <taskComputeImu+0x5c4>)
 800e154:	2206      	movs	r2, #6
 800e156:	601a      	str	r2, [r3, #0]
        pifTask_SetTrigger(p_task);
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f006 f9bd 	bl	80144d8 <pifTask_SetTrigger>
    	break;
 800e15e:	e00c      	b.n	800e17a <taskComputeImu+0x58e>

    case 6:
        // PID - note this is function pointer set by setPIDController()
        pid_controller();
 800e160:	4b14      	ldr	r3, [pc, #80]	; (800e1b4 <taskComputeImu+0x5c8>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4798      	blx	r3

        mixTable();
 800e166:	f7fd fb71 	bl	800b84c <mixTable>
        writeServos();
 800e16a:	f7fc ffc7 	bl	800b0fc <writeServos>
        writeMotors();
 800e16e:	f7fd f8fd 	bl	800b36c <writeMotors>
        step = 0;
 800e172:	4b0f      	ldr	r3, [pc, #60]	; (800e1b0 <taskComputeImu+0x5c4>)
 800e174:	2200      	movs	r2, #0
 800e176:	601a      	str	r2, [r3, #0]
    	break;
 800e178:	bf00      	nop
	}

    return 0;
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3718      	adds	r7, #24
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	20001750 	.word	0x20001750
 800e188:	200008e8 	.word	0x200008e8
 800e18c:	20001464 	.word	0x20001464
 800e190:	20000e54 	.word	0x20000e54
 800e194:	200016f4 	.word	0x200016f4
 800e198:	2000147c 	.word	0x2000147c
 800e19c:	200019c0 	.word	0x200019c0
 800e1a0:	3c8efa35 	.word	0x3c8efa35
 800e1a4:	200017ec 	.word	0x200017ec
 800e1a8:	200017f0 	.word	0x200017f0
 800e1ac:	200017e4 	.word	0x200017e4
 800e1b0:	200019b4 	.word	0x200019b4
 800e1b4:	20000050 	.word	0x20000050

0800e1b8 <mspFrameRecieve>:
{
    return rcData[chan];
}

void mspFrameRecieve(void)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	af00      	add	r7, sp, #0
    failsafeCnt = 0; // clear FailSafe counter
 800e1bc:	4b04      	ldr	r3, [pc, #16]	; (800e1d0 <mspFrameRecieve+0x18>)
 800e1be:	2200      	movs	r2, #0
 800e1c0:	801a      	strh	r2, [r3, #0]

    pifTask_SetTrigger(g_task_compute_rc);
 800e1c2:	4b04      	ldr	r3, [pc, #16]	; (800e1d4 <mspFrameRecieve+0x1c>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f006 f986 	bl	80144d8 <pifTask_SetTrigger>
}
 800e1cc:	bf00      	nop
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	20001728 	.word	0x20001728
 800e1d4:	20001550 	.word	0x20001550

0800e1d8 <sensorsAutodetect>:
#endif
};


bool sensorsAutodetect(sensorDetect_t* gyroDetect, sensorDetect_t* accDetect, sensorDetect_t* baroDetect, sensorDetect_t* magDetect)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	607a      	str	r2, [r7, #4]
 800e1e4:	603b      	str	r3, [r7, #0]
    int16_t deg, min;

    pifImuSensor_Init(&sensor_set.imu_sensor);
 800e1e6:	4878      	ldr	r0, [pc, #480]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e1e8:	f00a ffea 	bl	80191c0 <pifImuSensor_Init>
    pifImuSensor_InitBoardAlignment(&sensor_set.imu_sensor, mcfg.board_align_roll, mcfg.board_align_pitch, mcfg.board_align_yaw);
 800e1ec:	4b77      	ldr	r3, [pc, #476]	; (800e3cc <sensorsAutodetect+0x1f4>)
 800e1ee:	f9b3 1156 	ldrsh.w	r1, [r3, #342]	; 0x156
 800e1f2:	4b76      	ldr	r3, [pc, #472]	; (800e3cc <sensorsAutodetect+0x1f4>)
 800e1f4:	f9b3 2158 	ldrsh.w	r2, [r3, #344]	; 0x158
 800e1f8:	4b74      	ldr	r3, [pc, #464]	; (800e3cc <sensorsAutodetect+0x1f4>)
 800e1fa:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 800e1fe:	4872      	ldr	r0, [pc, #456]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e200:	f00a fff8 	bl	80191f4 <pifImuSensor_InitBoardAlignment>

    // set gyro low pass filter parameters
    sensor_set.gyro.lpf = mcfg.gyro_lpf;
 800e204:	4b71      	ldr	r3, [pc, #452]	; (800e3cc <sensorsAutodetect+0x1f4>)
 800e206:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
 800e20a:	4b6f      	ldr	r3, [pc, #444]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e20c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84

    // Autodetect Invensense gyro hardware
    while (gyroDetect->p_func) {
 800e210:	e010      	b.n	800e234 <sensorsAutodetect+0x5c>
    	if ((*gyroDetect->p_func)(&sensor_set, gyroDetect->p_param)) {
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	6852      	ldr	r2, [r2, #4]
 800e21a:	4611      	mov	r1, r2
 800e21c:	486a      	ldr	r0, [pc, #424]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e21e:	4798      	blx	r3
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d003      	beq.n	800e22e <sensorsAutodetect+0x56>
    	    sensorsSet(SENSOR_GYRO);
 800e226:	2001      	movs	r0, #1
 800e228:	f7f8 fd7c 	bl	8006d24 <sensorsSet>
    		break;
 800e22c:	e006      	b.n	800e23c <sensorsAutodetect+0x64>
    	}
    	gyroDetect++;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	3308      	adds	r3, #8
 800e232:	60fb      	str	r3, [r7, #12]
    while (gyroDetect->p_func) {
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d1ea      	bne.n	800e212 <sensorsAutodetect+0x3a>
    }
    if (!sensor_set.gyro.hardware) return false;
 800e23c:	4b62      	ldr	r3, [pc, #392]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e23e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e240:	2b00      	cmp	r3, #0
 800e242:	d101      	bne.n	800e248 <sensorsAutodetect+0x70>
 800e244:	2300      	movs	r3, #0
 800e246:	e0ba      	b.n	800e3be <sensorsAutodetect+0x1e6>

    // Autodetect Invensense acc hardware
    if (sensor_set.acc.hardware) {
 800e248:	4b5f      	ldr	r3, [pc, #380]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e24a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d003      	beq.n	800e25a <sensorsAutodetect+0x82>
    	sensorsSet(SENSOR_ACC);
 800e252:	2002      	movs	r0, #2
 800e254:	f7f8 fd66 	bl	8006d24 <sensorsSet>
 800e258:	e018      	b.n	800e28c <sensorsAutodetect+0xb4>
    }
    else if (accDetect) {
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d015      	beq.n	800e28c <sensorsAutodetect+0xb4>
        while (accDetect->p_func) {
 800e260:	e010      	b.n	800e284 <sensorsAutodetect+0xac>
        	if ((*accDetect->p_func)(&sensor_set, accDetect->p_param)) {
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	68ba      	ldr	r2, [r7, #8]
 800e268:	6852      	ldr	r2, [r2, #4]
 800e26a:	4611      	mov	r1, r2
 800e26c:	4856      	ldr	r0, [pc, #344]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e26e:	4798      	blx	r3
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d003      	beq.n	800e27e <sensorsAutodetect+0xa6>
            	sensorsSet(SENSOR_ACC);
 800e276:	2002      	movs	r0, #2
 800e278:	f7f8 fd54 	bl	8006d24 <sensorsSet>
        		break;
 800e27c:	e006      	b.n	800e28c <sensorsAutodetect+0xb4>
        	}
        	accDetect++;
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	3308      	adds	r3, #8
 800e282:	60bb      	str	r3, [r7, #8]
        while (accDetect->p_func) {
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d1ea      	bne.n	800e262 <sensorsAutodetect+0x8a>
        }
    }

#ifdef BARO
    // Autodetect Invensense baro hardware
    if (sensor_set.baro.hardware) {
 800e28c:	4b4e      	ldr	r3, [pc, #312]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e28e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d003      	beq.n	800e29e <sensorsAutodetect+0xc6>
    	sensorsSet(SENSOR_BARO);
 800e296:	2004      	movs	r0, #4
 800e298:	f7f8 fd44 	bl	8006d24 <sensorsSet>
 800e29c:	e018      	b.n	800e2d0 <sensorsAutodetect+0xf8>
    }
    else if (baroDetect) {
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d015      	beq.n	800e2d0 <sensorsAutodetect+0xf8>
		while (baroDetect->p_func) {
 800e2a4:	e010      	b.n	800e2c8 <sensorsAutodetect+0xf0>
			if ((*baroDetect->p_func)(&sensor_set, baroDetect->p_param)) {
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	6852      	ldr	r2, [r2, #4]
 800e2ae:	4611      	mov	r1, r2
 800e2b0:	4845      	ldr	r0, [pc, #276]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e2b2:	4798      	blx	r3
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d003      	beq.n	800e2c2 <sensorsAutodetect+0xea>
				sensorsSet(SENSOR_BARO);
 800e2ba:	2004      	movs	r0, #4
 800e2bc:	f7f8 fd32 	bl	8006d24 <sensorsSet>
				break;
 800e2c0:	e006      	b.n	800e2d0 <sensorsAutodetect+0xf8>
			}
			baroDetect++;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	3308      	adds	r3, #8
 800e2c6:	607b      	str	r3, [r7, #4]
		while (baroDetect->p_func) {
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d1ea      	bne.n	800e2a6 <sensorsAutodetect+0xce>
#else
    (void)baroDetect;
#endif

    // Now time to init things, acc first
    if (sensors(SENSOR_ACC))
 800e2d0:	2002      	movs	r0, #2
 800e2d2:	f7f8 fd11 	bl	8006cf8 <sensors>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d008      	beq.n	800e2ee <sensorsAutodetect+0x116>
        sensor_set.acc.init(&sensor_set, mcfg.acc_align);
 800e2dc:	4b3a      	ldr	r3, [pc, #232]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2e2:	4a3a      	ldr	r2, [pc, #232]	; (800e3cc <sensorsAutodetect+0x1f4>)
 800e2e4:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
 800e2e8:	4611      	mov	r1, r2
 800e2ea:	4837      	ldr	r0, [pc, #220]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e2ec:	4798      	blx	r3
    // this is safe because either mpu6050 or mpu3050 or lg3d20 sets it, and in case of fail, we never get here.
    sensor_set.gyro.init(&sensor_set, mcfg.gyro_align);
 800e2ee:	4b36      	ldr	r3, [pc, #216]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e2f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2f2:	4a36      	ldr	r2, [pc, #216]	; (800e3cc <sensorsAutodetect+0x1f4>)
 800e2f4:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800e2f8:	4611      	mov	r1, r2
 800e2fa:	4833      	ldr	r0, [pc, #204]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e2fc:	4798      	blx	r3

#ifdef MAG
    // Autodetect Invensense mag hardware
    if (sensor_set.mag.hardware) {
 800e2fe:	4b32      	ldr	r3, [pc, #200]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e300:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e304:	2b00      	cmp	r3, #0
 800e306:	d003      	beq.n	800e310 <sensorsAutodetect+0x138>
    	sensorsSet(SENSOR_MAG);
 800e308:	2008      	movs	r0, #8
 800e30a:	f7f8 fd0b 	bl	8006d24 <sensorsSet>
 800e30e:	e018      	b.n	800e342 <sensorsAutodetect+0x16a>
    }
    else if (magDetect) {
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d015      	beq.n	800e342 <sensorsAutodetect+0x16a>
		while (magDetect->p_func) {
 800e316:	e010      	b.n	800e33a <sensorsAutodetect+0x162>
			if ((*magDetect->p_func)(&sensor_set, magDetect->p_param)) {
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	683a      	ldr	r2, [r7, #0]
 800e31e:	6852      	ldr	r2, [r2, #4]
 800e320:	4611      	mov	r1, r2
 800e322:	4829      	ldr	r0, [pc, #164]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e324:	4798      	blx	r3
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d003      	beq.n	800e334 <sensorsAutodetect+0x15c>
				sensorsSet(SENSOR_MAG);
 800e32c:	2008      	movs	r0, #8
 800e32e:	f7f8 fcf9 	bl	8006d24 <sensorsSet>
				break;
 800e332:	e006      	b.n	800e342 <sensorsAutodetect+0x16a>
			}
			magDetect++;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	3308      	adds	r3, #8
 800e338:	603b      	str	r3, [r7, #0]
		while (magDetect->p_func) {
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d1ea      	bne.n	800e318 <sensorsAutodetect+0x140>
#else
    (void)magDetect;
#endif

    // calculate magnetic declination
    deg = cfg.mag_declination / 100;
 800e342:	4b23      	ldr	r3, [pc, #140]	; (800e3d0 <sensorsAutodetect+0x1f8>)
 800e344:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e348:	4a22      	ldr	r2, [pc, #136]	; (800e3d4 <sensorsAutodetect+0x1fc>)
 800e34a:	fb82 1203 	smull	r1, r2, r2, r3
 800e34e:	1152      	asrs	r2, r2, #5
 800e350:	17db      	asrs	r3, r3, #31
 800e352:	1ad3      	subs	r3, r2, r3
 800e354:	82fb      	strh	r3, [r7, #22]
    min = cfg.mag_declination % 100;
 800e356:	4b1e      	ldr	r3, [pc, #120]	; (800e3d0 <sensorsAutodetect+0x1f8>)
 800e358:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e35c:	4a1d      	ldr	r2, [pc, #116]	; (800e3d4 <sensorsAutodetect+0x1fc>)
 800e35e:	fb82 1203 	smull	r1, r2, r2, r3
 800e362:	1151      	asrs	r1, r2, #5
 800e364:	17da      	asrs	r2, r3, #31
 800e366:	1a8a      	subs	r2, r1, r2
 800e368:	2164      	movs	r1, #100	; 0x64
 800e36a:	fb01 f202 	mul.w	r2, r1, r2
 800e36e:	1a9b      	subs	r3, r3, r2
 800e370:	82bb      	strh	r3, [r7, #20]
    if (sensors(SENSOR_MAG))
 800e372:	2008      	movs	r0, #8
 800e374:	f7f8 fcc0 	bl	8006cf8 <sensors>
 800e378:	4603      	mov	r3, r0
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d019      	beq.n	800e3b2 <sensorsAutodetect+0x1da>
        sensor_set.mag.declination = (deg + ((float)min * (1.0f / 60.0f))) * 10; // heading is in 0.1deg units
 800e37e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e382:	ee07 3a90 	vmov	s15, r3
 800e386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e38a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e38e:	ee07 3a90 	vmov	s15, r3
 800e392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e396:	eddf 6a10 	vldr	s13, [pc, #64]	; 800e3d8 <sensorsAutodetect+0x200>
 800e39a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e39e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e3a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e3aa:	4b07      	ldr	r3, [pc, #28]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e3ac:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 800e3b0:	e004      	b.n	800e3bc <sensorsAutodetect+0x1e4>
    else
        sensor_set.mag.declination = 0.0f;
 800e3b2:	4b05      	ldr	r3, [pc, #20]	; (800e3c8 <sensorsAutodetect+0x1f0>)
 800e3b4:	f04f 0200 	mov.w	r2, #0
 800e3b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

    return true;
 800e3bc:	2301      	movs	r3, #1
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3718      	adds	r7, #24
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	2000005c 	.word	0x2000005c
 800e3cc:	200008e8 	.word	0x200008e8
 800e3d0:	20000e54 	.word	0x20000e54
 800e3d4:	51eb851f 	.word	0x51eb851f
 800e3d8:	3c888889 	.word	0x3c888889

0800e3dc <RSSI_getValue>:

uint16_t RSSI_getValue(void)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
    uint16_t value = 0;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	80fb      	strh	r3, [r7, #6]

    if (mcfg.rssi_aux_channel > 0) {
 800e3e6:	4b2a      	ldr	r3, [pc, #168]	; (800e490 <RSSI_getValue+0xb4>)
 800e3e8:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d029      	beq.n	800e444 <RSSI_getValue+0x68>
        const int16_t rssiChannelData = rcData[AUX1 + mcfg.rssi_aux_channel - 1];
 800e3f0:	4b27      	ldr	r3, [pc, #156]	; (800e490 <RSSI_getValue+0xb4>)
 800e3f2:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e3f6:	3303      	adds	r3, #3
 800e3f8:	4a26      	ldr	r2, [pc, #152]	; (800e494 <RSSI_getValue+0xb8>)
 800e3fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3fe:	807b      	strh	r3, [r7, #2]
        // Range of rssiChannelData is [1000;2000]. rssi should be in [0;1023];
        value = (uint16_t)((constrain(rssiChannelData - 1000, 0, mcfg.rssi_aux_max) / (float) mcfg.rssi_aux_max) * 1023.0f);
 800e400:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e404:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e408:	4a21      	ldr	r2, [pc, #132]	; (800e490 <RSSI_getValue+0xb4>)
 800e40a:	f8b2 21a2 	ldrh.w	r2, [r2, #418]	; 0x1a2
 800e40e:	2100      	movs	r1, #0
 800e410:	4618      	mov	r0, r3
 800e412:	f7f5 fb55 	bl	8003ac0 <constrain>
 800e416:	ee07 0a90 	vmov	s15, r0
 800e41a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e41e:	4b1c      	ldr	r3, [pc, #112]	; (800e490 <RSSI_getValue+0xb4>)
 800e420:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	; 0x1a2
 800e424:	ee07 3a90 	vmov	s15, r3
 800e428:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e42c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e430:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e498 <RSSI_getValue+0xbc>
 800e434:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e43c:	ee17 3a90 	vmov	r3, s15
 800e440:	80fb      	strh	r3, [r7, #6]
 800e442:	e020      	b.n	800e486 <RSSI_getValue+0xaa>
    } else if (mcfg.rssi_adc_channel > 0) {
 800e444:	4b12      	ldr	r3, [pc, #72]	; (800e490 <RSSI_getValue+0xb4>)
 800e446:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d01b      	beq.n	800e486 <RSSI_getValue+0xaa>
        const int16_t rssiData = (((int32_t)(actGetAdcChannel(ADC_RSSI) - mcfg.rssi_adc_offset)) * 1023L) / mcfg.rssi_adc_max;
 800e44e:	2003      	movs	r0, #3
 800e450:	f7f2 feaa 	bl	80011a8 <actGetAdcChannel>
 800e454:	4603      	mov	r3, r0
 800e456:	461a      	mov	r2, r3
 800e458:	4b0d      	ldr	r3, [pc, #52]	; (800e490 <RSSI_getValue+0xb4>)
 800e45a:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 800e45e:	1ad2      	subs	r2, r2, r3
 800e460:	4613      	mov	r3, r2
 800e462:	029b      	lsls	r3, r3, #10
 800e464:	1a9b      	subs	r3, r3, r2
 800e466:	4a0a      	ldr	r2, [pc, #40]	; (800e490 <RSSI_getValue+0xb4>)
 800e468:	f8b2 21a6 	ldrh.w	r2, [r2, #422]	; 0x1a6
 800e46c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e470:	80bb      	strh	r3, [r7, #4]
        // Set to correct range [0;1023]
        value = constrain(rssiData, 0, 1023);
 800e472:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e476:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e47a:	2100      	movs	r1, #0
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7f5 fb1f 	bl	8003ac0 <constrain>
 800e482:	4603      	mov	r3, r0
 800e484:	80fb      	strh	r3, [r7, #6]
    }

    // return range [0;1023]
    return value;
 800e486:	88fb      	ldrh	r3, [r7, #6]
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3708      	adds	r7, #8
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}
 800e490:	200008e8 	.word	0x200008e8
 800e494:	2000172c 	.word	0x2000172c
 800e498:	447fc000 	.word	0x447fc000

0800e49c <batteryInit>:

void batteryInit(void)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
    uint32_t i;
    float voltage = 0;
 800e4a2:	f04f 0300 	mov.w	r3, #0
 800e4a6:	603b      	str	r3, [r7, #0]

    // average up some voltage readings
    for (i = 0; i < 32; i++) {
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	607b      	str	r3, [r7, #4]
 800e4ac:	e018      	b.n	800e4e0 <batteryInit+0x44>
        voltage += actGetBatteryVoltage() * mcfg.vbatscale;
 800e4ae:	f7f2 fe8d 	bl	80011cc <actGetBatteryVoltage>
 800e4b2:	eeb0 7a40 	vmov.f32	s14, s0
 800e4b6:	4b35      	ldr	r3, [pc, #212]	; (800e58c <batteryInit+0xf0>)
 800e4b8:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800e4bc:	ee07 3a90 	vmov	s15, r3
 800e4c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4c8:	ed97 7a00 	vldr	s14, [r7]
 800e4cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4d0:	edc7 7a00 	vstr	s15, [r7]
        pif_Delay1ms(10);
 800e4d4:	200a      	movs	r0, #10
 800e4d6:	f002 fdbb 	bl	8011050 <pif_Delay1ms>
    for (i = 0; i < 32; i++) {
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	607b      	str	r3, [r7, #4]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2b1f      	cmp	r3, #31
 800e4e4:	d9e3      	bls.n	800e4ae <batteryInit+0x12>
    }

    voltage = voltage / 32;
 800e4e6:	ed97 7a00 	vldr	s14, [r7]
 800e4ea:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e590 <batteryInit+0xf4>
 800e4ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e4f2:	edc7 7a00 	vstr	s15, [r7]
#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Battery: %fV", voltage / 10);
 800e4f6:	edd7 7a00 	vldr	s15, [r7]
 800e4fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e4fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e502:	ee16 0a90 	vmov	r0, s13
 800e506:	f7f1 ffd3 	bl	80004b0 <__aeabi_f2d>
 800e50a:	4602      	mov	r2, r0
 800e50c:	460b      	mov	r3, r1
 800e50e:	4921      	ldr	r1, [pc, #132]	; (800e594 <batteryInit+0xf8>)
 800e510:	2002      	movs	r0, #2
 800e512:	f004 ff47 	bl	80133a4 <pifLog_Printf>
#endif

    // autodetect cell count, going from 2S..8S
    for (i = 1; i < 8; i++) {
 800e516:	2301      	movs	r3, #1
 800e518:	607b      	str	r3, [r7, #4]
 800e51a:	e014      	b.n	800e546 <batteryInit+0xaa>
        if (voltage < i * mcfg.vbatmaxcellvoltage)
 800e51c:	4b1b      	ldr	r3, [pc, #108]	; (800e58c <batteryInit+0xf0>)
 800e51e:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 800e522:	461a      	mov	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	fb02 f303 	mul.w	r3, r2, r3
 800e52a:	ee07 3a90 	vmov	s15, r3
 800e52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e532:	ed97 7a00 	vldr	s14, [r7]
 800e536:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e53e:	d406      	bmi.n	800e54e <batteryInit+0xb2>
    for (i = 1; i < 8; i++) {
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	3301      	adds	r3, #1
 800e544:	607b      	str	r3, [r7, #4]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2b07      	cmp	r3, #7
 800e54a:	d9e7      	bls.n	800e51c <batteryInit+0x80>
 800e54c:	e000      	b.n	800e550 <batteryInit+0xb4>
            break;
 800e54e:	bf00      	nop
    }
    batteryCellCount = i;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	b2da      	uxtb	r2, r3
 800e554:	4b10      	ldr	r3, [pc, #64]	; (800e598 <batteryInit+0xfc>)
 800e556:	701a      	strb	r2, [r3, #0]
    batteryWarningVoltage = i * mcfg.vbatwarningcellvoltage; // 3.5V per cell minimum, configurable in CLI
 800e558:	4b0c      	ldr	r3, [pc, #48]	; (800e58c <batteryInit+0xf0>)
 800e55a:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800e55e:	b29a      	uxth	r2, r3
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	b29b      	uxth	r3, r3
 800e564:	fb12 f303 	smulbb	r3, r2, r3
 800e568:	b29a      	uxth	r2, r3
 800e56a:	4b0c      	ldr	r3, [pc, #48]	; (800e59c <batteryInit+0x100>)
 800e56c:	801a      	strh	r2, [r3, #0]
    batteryCriticalVoltage = i * mcfg.vbatmincellvoltage; // 3.3V per cell minimum, configurable in CLI
 800e56e:	4b07      	ldr	r3, [pc, #28]	; (800e58c <batteryInit+0xf0>)
 800e570:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 800e574:	b29a      	uxth	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	b29b      	uxth	r3, r3
 800e57a:	fb12 f303 	smulbb	r3, r2, r3
 800e57e:	b29a      	uxth	r2, r3
 800e580:	4b07      	ldr	r3, [pc, #28]	; (800e5a0 <batteryInit+0x104>)
 800e582:	801a      	strh	r2, [r3, #0]
}
 800e584:	bf00      	nop
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	200008e8 	.word	0x200008e8
 800e590:	42000000 	.word	0x42000000
 800e594:	080270d0 	.word	0x080270d0
 800e598:	20000054 	.word	0x20000054
 800e59c:	20001896 	.word	0x20001896
 800e5a0:	20001898 	.word	0x20001898

0800e5a4 <ACC_Common>:

static void ACC_Common(void)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
    static int32_t a[3];
    int axis;

    if (calibratingA > 0) {
 800e5aa:	4b54      	ldr	r3, [pc, #336]	; (800e6fc <ACC_Common+0x158>)
 800e5ac:	881b      	ldrh	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d079      	beq.n	800e6a6 <ACC_Common+0x102>
        for (axis = 0; axis < 3; axis++) {
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	607b      	str	r3, [r7, #4]
 800e5b6:	e032      	b.n	800e61e <ACC_Common+0x7a>
            // Reset a[axis] at start of calibration
            if (calibratingA == CALIBRATING_ACC_CYCLES)
 800e5b8:	4b50      	ldr	r3, [pc, #320]	; (800e6fc <ACC_Common+0x158>)
 800e5ba:	881b      	ldrh	r3, [r3, #0]
 800e5bc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e5c0:	d104      	bne.n	800e5cc <ACC_Common+0x28>
                a[axis] = 0;
 800e5c2:	4a4f      	ldr	r2, [pc, #316]	; (800e700 <ACC_Common+0x15c>)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2100      	movs	r1, #0
 800e5c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            // Sum up CALIBRATING_ACC_CYCLES readings
            a[axis] += accADC[axis];
 800e5cc:	4a4c      	ldr	r2, [pc, #304]	; (800e700 <ACC_Common+0x15c>)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5d4:	ee07 3a90 	vmov	s15, r3
 800e5d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e5dc:	4a49      	ldr	r2, [pc, #292]	; (800e704 <ACC_Common+0x160>)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	4413      	add	r3, r2
 800e5e4:	edd3 7a00 	vldr	s15, [r3]
 800e5e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e5f0:	ee17 1a90 	vmov	r1, s15
 800e5f4:	4a42      	ldr	r2, [pc, #264]	; (800e700 <ACC_Common+0x15c>)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            // Clear global variables for next reading
            accADC[axis] = 0;
 800e5fc:	4a41      	ldr	r2, [pc, #260]	; (800e704 <ACC_Common+0x160>)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	4413      	add	r3, r2
 800e604:	f04f 0200 	mov.w	r2, #0
 800e608:	601a      	str	r2, [r3, #0]
            mcfg.accZero[axis] = 0;
 800e60a:	4a3f      	ldr	r2, [pc, #252]	; (800e708 <ACC_Common+0x164>)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	33b4      	adds	r3, #180	; 0xb4
 800e610:	005b      	lsls	r3, r3, #1
 800e612:	4413      	add	r3, r2
 800e614:	2200      	movs	r2, #0
 800e616:	805a      	strh	r2, [r3, #2]
        for (axis = 0; axis < 3; axis++) {
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	3301      	adds	r3, #1
 800e61c:	607b      	str	r3, [r7, #4]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2b02      	cmp	r3, #2
 800e622:	ddc9      	ble.n	800e5b8 <ACC_Common+0x14>
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (calibratingA == 1) {
 800e624:	4b35      	ldr	r3, [pc, #212]	; (800e6fc <ACC_Common+0x158>)
 800e626:	881b      	ldrh	r3, [r3, #0]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d136      	bne.n	800e69a <ACC_Common+0xf6>
            mcfg.accZero[ROLL] = (a[ROLL] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e62c:	4b34      	ldr	r3, [pc, #208]	; (800e700 <ACC_Common+0x15c>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	33c8      	adds	r3, #200	; 0xc8
 800e632:	4a36      	ldr	r2, [pc, #216]	; (800e70c <ACC_Common+0x168>)
 800e634:	fb82 1203 	smull	r1, r2, r2, r3
 800e638:	11d2      	asrs	r2, r2, #7
 800e63a:	17db      	asrs	r3, r3, #31
 800e63c:	1ad3      	subs	r3, r2, r3
 800e63e:	b21a      	sxth	r2, r3
 800e640:	4b31      	ldr	r3, [pc, #196]	; (800e708 <ACC_Common+0x164>)
 800e642:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = (a[PITCH] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e646:	4b2e      	ldr	r3, [pc, #184]	; (800e700 <ACC_Common+0x15c>)
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	33c8      	adds	r3, #200	; 0xc8
 800e64c:	4a2f      	ldr	r2, [pc, #188]	; (800e70c <ACC_Common+0x168>)
 800e64e:	fb82 1203 	smull	r1, r2, r2, r3
 800e652:	11d2      	asrs	r2, r2, #7
 800e654:	17db      	asrs	r3, r3, #31
 800e656:	1ad3      	subs	r3, r2, r3
 800e658:	b21a      	sxth	r2, r3
 800e65a:	4b2b      	ldr	r3, [pc, #172]	; (800e708 <ACC_Common+0x164>)
 800e65c:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = (a[YAW] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES - sensor_set.acc.acc_1G;
 800e660:	4b27      	ldr	r3, [pc, #156]	; (800e700 <ACC_Common+0x15c>)
 800e662:	689b      	ldr	r3, [r3, #8]
 800e664:	33c8      	adds	r3, #200	; 0xc8
 800e666:	4a29      	ldr	r2, [pc, #164]	; (800e70c <ACC_Common+0x168>)
 800e668:	fb82 1203 	smull	r1, r2, r2, r3
 800e66c:	11d2      	asrs	r2, r2, #7
 800e66e:	17db      	asrs	r3, r3, #31
 800e670:	1ad3      	subs	r3, r2, r3
 800e672:	b29a      	uxth	r2, r3
 800e674:	4b26      	ldr	r3, [pc, #152]	; (800e710 <ACC_Common+0x16c>)
 800e676:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800e67a:	1ad3      	subs	r3, r2, r3
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	b21a      	sxth	r2, r3
 800e680:	4b21      	ldr	r3, [pc, #132]	; (800e708 <ACC_Common+0x164>)
 800e682:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e686:	4b23      	ldr	r3, [pc, #140]	; (800e714 <ACC_Common+0x170>)
 800e688:	2200      	movs	r2, #0
 800e68a:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e68c:	4b21      	ldr	r3, [pc, #132]	; (800e714 <ACC_Common+0x170>)
 800e68e:	2200      	movs	r2, #0
 800e690:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);      // write accZero in EEPROM
 800e692:	2101      	movs	r1, #1
 800e694:	2001      	movs	r0, #1
 800e696:	f7f7 ff95 	bl	80065c4 <writeEEPROM>
        }
        calibratingA--;
 800e69a:	4b18      	ldr	r3, [pc, #96]	; (800e6fc <ACC_Common+0x158>)
 800e69c:	881b      	ldrh	r3, [r3, #0]
 800e69e:	3b01      	subs	r3, #1
 800e6a0:	b29a      	uxth	r2, r3
 800e6a2:	4b16      	ldr	r3, [pc, #88]	; (800e6fc <ACC_Common+0x158>)
 800e6a4:	801a      	strh	r2, [r3, #0]
    }

    if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800e6a6:	2004      	movs	r0, #4
 800e6a8:	f7f8 fb6e 	bl	8006d88 <feature>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	f000 80d7 	beq.w	800e862 <ACC_Common+0x2be>
        static int32_t b[3];
        static int16_t accZero_saved[3] = { 0, 0, 0 };
        static int16_t angleTrim_saved[2] = { 0, 0 };
        // Saving old zeropoints before measurement
        if (InflightcalibratingA == 50) {
 800e6b4:	4b18      	ldr	r3, [pc, #96]	; (800e718 <ACC_Common+0x174>)
 800e6b6:	881b      	ldrh	r3, [r3, #0]
 800e6b8:	2b32      	cmp	r3, #50	; 0x32
 800e6ba:	d118      	bne.n	800e6ee <ACC_Common+0x14a>
            accZero_saved[ROLL] = mcfg.accZero[ROLL];
 800e6bc:	4b12      	ldr	r3, [pc, #72]	; (800e708 <ACC_Common+0x164>)
 800e6be:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	; 0x16a
 800e6c2:	4b16      	ldr	r3, [pc, #88]	; (800e71c <ACC_Common+0x178>)
 800e6c4:	801a      	strh	r2, [r3, #0]
            accZero_saved[PITCH] = mcfg.accZero[PITCH];
 800e6c6:	4b10      	ldr	r3, [pc, #64]	; (800e708 <ACC_Common+0x164>)
 800e6c8:	f9b3 216c 	ldrsh.w	r2, [r3, #364]	; 0x16c
 800e6cc:	4b13      	ldr	r3, [pc, #76]	; (800e71c <ACC_Common+0x178>)
 800e6ce:	805a      	strh	r2, [r3, #2]
            accZero_saved[YAW] = mcfg.accZero[YAW];
 800e6d0:	4b0d      	ldr	r3, [pc, #52]	; (800e708 <ACC_Common+0x164>)
 800e6d2:	f9b3 216e 	ldrsh.w	r2, [r3, #366]	; 0x16e
 800e6d6:	4b11      	ldr	r3, [pc, #68]	; (800e71c <ACC_Common+0x178>)
 800e6d8:	809a      	strh	r2, [r3, #4]
            angleTrim_saved[ROLL] = cfg.angleTrim[ROLL];
 800e6da:	4b0e      	ldr	r3, [pc, #56]	; (800e714 <ACC_Common+0x170>)
 800e6dc:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800e6e0:	4b0f      	ldr	r3, [pc, #60]	; (800e720 <ACC_Common+0x17c>)
 800e6e2:	801a      	strh	r2, [r3, #0]
            angleTrim_saved[PITCH] = cfg.angleTrim[PITCH];
 800e6e4:	4b0b      	ldr	r3, [pc, #44]	; (800e714 <ACC_Common+0x170>)
 800e6e6:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 800e6ea:	4b0d      	ldr	r3, [pc, #52]	; (800e720 <ACC_Common+0x17c>)
 800e6ec:	805a      	strh	r2, [r3, #2]
        }
        if (InflightcalibratingA > 0) {
 800e6ee:	4b0a      	ldr	r3, [pc, #40]	; (800e718 <ACC_Common+0x174>)
 800e6f0:	881b      	ldrh	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d07a      	beq.n	800e7ec <ACC_Common+0x248>
            for (axis = 0; axis < 3; axis++) {
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	607b      	str	r3, [r7, #4]
 800e6fa:	e045      	b.n	800e788 <ACC_Common+0x1e4>
 800e6fc:	200019ba 	.word	0x200019ba
 800e700:	200019d4 	.word	0x200019d4
 800e704:	20001410 	.word	0x20001410
 800e708:	200008e8 	.word	0x200008e8
 800e70c:	51eb851f 	.word	0x51eb851f
 800e710:	2000005c 	.word	0x2000005c
 800e714:	20000e54 	.word	0x20000e54
 800e718:	20001894 	.word	0x20001894
 800e71c:	200019e0 	.word	0x200019e0
 800e720:	200019e8 	.word	0x200019e8
                // Reset a[axis] at start of calibration
                if (InflightcalibratingA == 50)
 800e724:	4b67      	ldr	r3, [pc, #412]	; (800e8c4 <ACC_Common+0x320>)
 800e726:	881b      	ldrh	r3, [r3, #0]
 800e728:	2b32      	cmp	r3, #50	; 0x32
 800e72a:	d104      	bne.n	800e736 <ACC_Common+0x192>
                    b[axis] = 0;
 800e72c:	4a66      	ldr	r2, [pc, #408]	; (800e8c8 <ACC_Common+0x324>)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2100      	movs	r1, #0
 800e732:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                // Sum up 50 readings
                b[axis] += accADC[axis];
 800e736:	4a64      	ldr	r2, [pc, #400]	; (800e8c8 <ACC_Common+0x324>)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e73e:	ee07 3a90 	vmov	s15, r3
 800e742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e746:	4a61      	ldr	r2, [pc, #388]	; (800e8cc <ACC_Common+0x328>)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	4413      	add	r3, r2
 800e74e:	edd3 7a00 	vldr	s15, [r3]
 800e752:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e75a:	ee17 1a90 	vmov	r1, s15
 800e75e:	4a5a      	ldr	r2, [pc, #360]	; (800e8c8 <ACC_Common+0x324>)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                // Clear global variables for next reading
                accADC[axis] = 0;
 800e766:	4a59      	ldr	r2, [pc, #356]	; (800e8cc <ACC_Common+0x328>)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	4413      	add	r3, r2
 800e76e:	f04f 0200 	mov.w	r2, #0
 800e772:	601a      	str	r2, [r3, #0]
                mcfg.accZero[axis] = 0;
 800e774:	4a56      	ldr	r2, [pc, #344]	; (800e8d0 <ACC_Common+0x32c>)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	33b4      	adds	r3, #180	; 0xb4
 800e77a:	005b      	lsls	r3, r3, #1
 800e77c:	4413      	add	r3, r2
 800e77e:	2200      	movs	r2, #0
 800e780:	805a      	strh	r2, [r3, #2]
            for (axis = 0; axis < 3; axis++) {
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	3301      	adds	r3, #1
 800e786:	607b      	str	r3, [r7, #4]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2b02      	cmp	r3, #2
 800e78c:	ddca      	ble.n	800e724 <ACC_Common+0x180>
            }
            // all values are measured
            if (InflightcalibratingA == 1) {
 800e78e:	4b4d      	ldr	r3, [pc, #308]	; (800e8c4 <ACC_Common+0x320>)
 800e790:	881b      	ldrh	r3, [r3, #0]
 800e792:	2b01      	cmp	r3, #1
 800e794:	d124      	bne.n	800e7e0 <ACC_Common+0x23c>
                AccInflightCalibrationActive = false;
 800e796:	4b4f      	ldr	r3, [pc, #316]	; (800e8d4 <ACC_Common+0x330>)
 800e798:	2200      	movs	r2, #0
 800e79a:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationMeasurementDone = true;
 800e79c:	4b4e      	ldr	r3, [pc, #312]	; (800e8d8 <ACC_Common+0x334>)
 800e79e:	2201      	movs	r2, #1
 800e7a0:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_ACC_CALIBRATION);      // buzzer for indicatiing the end of calibration
 800e7a2:	200a      	movs	r0, #10
 800e7a4:	f7f5 fb1c 	bl	8003de0 <buzzer>
                // recover saved values to maintain current flight behavior until new values are transferred
                mcfg.accZero[ROLL] = accZero_saved[ROLL];
 800e7a8:	4b4c      	ldr	r3, [pc, #304]	; (800e8dc <ACC_Common+0x338>)
 800e7aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e7ae:	4b48      	ldr	r3, [pc, #288]	; (800e8d0 <ACC_Common+0x32c>)
 800e7b0:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
                mcfg.accZero[PITCH] = accZero_saved[PITCH];
 800e7b4:	4b49      	ldr	r3, [pc, #292]	; (800e8dc <ACC_Common+0x338>)
 800e7b6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e7ba:	4b45      	ldr	r3, [pc, #276]	; (800e8d0 <ACC_Common+0x32c>)
 800e7bc:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
                mcfg.accZero[YAW] = accZero_saved[YAW];
 800e7c0:	4b46      	ldr	r3, [pc, #280]	; (800e8dc <ACC_Common+0x338>)
 800e7c2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e7c6:	4b42      	ldr	r3, [pc, #264]	; (800e8d0 <ACC_Common+0x32c>)
 800e7c8:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
                cfg.angleTrim[ROLL] = angleTrim_saved[ROLL];
 800e7cc:	4b44      	ldr	r3, [pc, #272]	; (800e8e0 <ACC_Common+0x33c>)
 800e7ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e7d2:	4b44      	ldr	r3, [pc, #272]	; (800e8e4 <ACC_Common+0x340>)
 800e7d4:	859a      	strh	r2, [r3, #44]	; 0x2c
                cfg.angleTrim[PITCH] = angleTrim_saved[PITCH];
 800e7d6:	4b42      	ldr	r3, [pc, #264]	; (800e8e0 <ACC_Common+0x33c>)
 800e7d8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e7dc:	4b41      	ldr	r3, [pc, #260]	; (800e8e4 <ACC_Common+0x340>)
 800e7de:	85da      	strh	r2, [r3, #46]	; 0x2e
            }
            InflightcalibratingA--;
 800e7e0:	4b38      	ldr	r3, [pc, #224]	; (800e8c4 <ACC_Common+0x320>)
 800e7e2:	881b      	ldrh	r3, [r3, #0]
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	b29a      	uxth	r2, r3
 800e7e8:	4b36      	ldr	r3, [pc, #216]	; (800e8c4 <ACC_Common+0x320>)
 800e7ea:	801a      	strh	r2, [r3, #0]
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (AccInflightCalibrationSavetoEEProm) {      // the copter is landed, disarmed and the combo has been done again
 800e7ec:	4b3e      	ldr	r3, [pc, #248]	; (800e8e8 <ACC_Common+0x344>)
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d036      	beq.n	800e862 <ACC_Common+0x2be>
            AccInflightCalibrationSavetoEEProm = false;
 800e7f4:	4b3c      	ldr	r3, [pc, #240]	; (800e8e8 <ACC_Common+0x344>)
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	701a      	strb	r2, [r3, #0]
            mcfg.accZero[ROLL] = b[ROLL] / 50;
 800e7fa:	4b33      	ldr	r3, [pc, #204]	; (800e8c8 <ACC_Common+0x324>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	4a3b      	ldr	r2, [pc, #236]	; (800e8ec <ACC_Common+0x348>)
 800e800:	fb82 1203 	smull	r1, r2, r2, r3
 800e804:	1112      	asrs	r2, r2, #4
 800e806:	17db      	asrs	r3, r3, #31
 800e808:	1ad3      	subs	r3, r2, r3
 800e80a:	b21a      	sxth	r2, r3
 800e80c:	4b30      	ldr	r3, [pc, #192]	; (800e8d0 <ACC_Common+0x32c>)
 800e80e:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = b[PITCH] / 50;
 800e812:	4b2d      	ldr	r3, [pc, #180]	; (800e8c8 <ACC_Common+0x324>)
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	4a35      	ldr	r2, [pc, #212]	; (800e8ec <ACC_Common+0x348>)
 800e818:	fb82 1203 	smull	r1, r2, r2, r3
 800e81c:	1112      	asrs	r2, r2, #4
 800e81e:	17db      	asrs	r3, r3, #31
 800e820:	1ad3      	subs	r3, r2, r3
 800e822:	b21a      	sxth	r2, r3
 800e824:	4b2a      	ldr	r3, [pc, #168]	; (800e8d0 <ACC_Common+0x32c>)
 800e826:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = b[YAW] / 50 - sensor_set.acc.acc_1G;    // for nunchuk 200=1G
 800e82a:	4b27      	ldr	r3, [pc, #156]	; (800e8c8 <ACC_Common+0x324>)
 800e82c:	689b      	ldr	r3, [r3, #8]
 800e82e:	4a2f      	ldr	r2, [pc, #188]	; (800e8ec <ACC_Common+0x348>)
 800e830:	fb82 1203 	smull	r1, r2, r2, r3
 800e834:	1112      	asrs	r2, r2, #4
 800e836:	17db      	asrs	r3, r3, #31
 800e838:	1ad3      	subs	r3, r2, r3
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	4b2c      	ldr	r3, [pc, #176]	; (800e8f0 <ACC_Common+0x34c>)
 800e83e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800e842:	1ad3      	subs	r3, r2, r3
 800e844:	b29b      	uxth	r3, r3
 800e846:	b21a      	sxth	r2, r3
 800e848:	4b21      	ldr	r3, [pc, #132]	; (800e8d0 <ACC_Common+0x32c>)
 800e84a:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e84e:	4b25      	ldr	r3, [pc, #148]	; (800e8e4 <ACC_Common+0x340>)
 800e850:	2200      	movs	r2, #0
 800e852:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e854:	4b23      	ldr	r3, [pc, #140]	; (800e8e4 <ACC_Common+0x340>)
 800e856:	2200      	movs	r2, #0
 800e858:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);          // write accZero in EEPROM
 800e85a:	2101      	movs	r1, #1
 800e85c:	2001      	movs	r0, #1
 800e85e:	f7f7 feb1 	bl	80065c4 <writeEEPROM>
        }
    }

    accADC[ROLL] -= mcfg.accZero[ROLL];
 800e862:	4b1a      	ldr	r3, [pc, #104]	; (800e8cc <ACC_Common+0x328>)
 800e864:	ed93 7a00 	vldr	s14, [r3]
 800e868:	4b19      	ldr	r3, [pc, #100]	; (800e8d0 <ACC_Common+0x32c>)
 800e86a:	f9b3 316a 	ldrsh.w	r3, [r3, #362]	; 0x16a
 800e86e:	ee07 3a90 	vmov	s15, r3
 800e872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e87a:	4b14      	ldr	r3, [pc, #80]	; (800e8cc <ACC_Common+0x328>)
 800e87c:	edc3 7a00 	vstr	s15, [r3]
    accADC[PITCH] -= mcfg.accZero[PITCH];
 800e880:	4b12      	ldr	r3, [pc, #72]	; (800e8cc <ACC_Common+0x328>)
 800e882:	ed93 7a01 	vldr	s14, [r3, #4]
 800e886:	4b12      	ldr	r3, [pc, #72]	; (800e8d0 <ACC_Common+0x32c>)
 800e888:	f9b3 316c 	ldrsh.w	r3, [r3, #364]	; 0x16c
 800e88c:	ee07 3a90 	vmov	s15, r3
 800e890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e894:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e898:	4b0c      	ldr	r3, [pc, #48]	; (800e8cc <ACC_Common+0x328>)
 800e89a:	edc3 7a01 	vstr	s15, [r3, #4]
    accADC[YAW] -= mcfg.accZero[YAW];
 800e89e:	4b0b      	ldr	r3, [pc, #44]	; (800e8cc <ACC_Common+0x328>)
 800e8a0:	ed93 7a02 	vldr	s14, [r3, #8]
 800e8a4:	4b0a      	ldr	r3, [pc, #40]	; (800e8d0 <ACC_Common+0x32c>)
 800e8a6:	f9b3 316e 	ldrsh.w	r3, [r3, #366]	; 0x16e
 800e8aa:	ee07 3a90 	vmov	s15, r3
 800e8ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e8b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e8b6:	4b05      	ldr	r3, [pc, #20]	; (800e8cc <ACC_Common+0x328>)
 800e8b8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800e8bc:	bf00      	nop
 800e8be:	3708      	adds	r7, #8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	20001894 	.word	0x20001894
 800e8c8:	200019ec 	.word	0x200019ec
 800e8cc:	20001410 	.word	0x20001410
 800e8d0:	200008e8 	.word	0x200008e8
 800e8d4:	20001893 	.word	0x20001893
 800e8d8:	20001891 	.word	0x20001891
 800e8dc:	200019e0 	.word	0x200019e0
 800e8e0:	200019e8 	.word	0x200019e8
 800e8e4:	20000e54 	.word	0x20000e54
 800e8e8:	20001892 	.word	0x20001892
 800e8ec:	51eb851f 	.word	0x51eb851f
 800e8f0:	2000005c 	.word	0x2000005c

0800e8f4 <ACC_getADC>:

BOOL ACC_getADC(void)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	af00      	add	r7, sp, #0
    if (sensor_set.acc.read(&sensor_set, accADC)) {
 800e8f8:	4b07      	ldr	r3, [pc, #28]	; (800e918 <ACC_getADC+0x24>)
 800e8fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e8fe:	4907      	ldr	r1, [pc, #28]	; (800e91c <ACC_getADC+0x28>)
 800e900:	4805      	ldr	r0, [pc, #20]	; (800e918 <ACC_getADC+0x24>)
 800e902:	4798      	blx	r3
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d003      	beq.n	800e912 <ACC_getADC+0x1e>
    	ACC_Common();
 800e90a:	f7ff fe4b 	bl	800e5a4 <ACC_Common>
    	return TRUE;
 800e90e:	2301      	movs	r3, #1
 800e910:	e000      	b.n	800e914 <ACC_getADC+0x20>
    }
	return FALSE;
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	bd80      	pop	{r7, pc}
 800e918:	2000005c 	.word	0x2000005c
 800e91c:	20001410 	.word	0x20001410

0800e920 <Baro_Common>:

#ifdef BARO
static void Baro_Common(void)
{
 800e920:	b480      	push	{r7}
 800e922:	b083      	sub	sp, #12
 800e924:	af00      	add	r7, sp, #0
    static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
    static int baroHistIdx = 0;
    int indexplus1;

    indexplus1 = (baroHistIdx + 1);
 800e926:	4b18      	ldr	r3, [pc, #96]	; (800e988 <Baro_Common+0x68>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	3301      	adds	r3, #1
 800e92c:	607b      	str	r3, [r7, #4]
    if (indexplus1 >= cfg.baro_tab_size)
 800e92e:	4b17      	ldr	r3, [pc, #92]	; (800e98c <Baro_Common+0x6c>)
 800e930:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e934:	461a      	mov	r2, r3
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	4293      	cmp	r3, r2
 800e93a:	db01      	blt.n	800e940 <Baro_Common+0x20>
        indexplus1 = 0;
 800e93c:	2300      	movs	r3, #0
 800e93e:	607b      	str	r3, [r7, #4]
    baroHistTab[baroHistIdx] = baroPressure;
 800e940:	4b11      	ldr	r3, [pc, #68]	; (800e988 <Baro_Common+0x68>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4a12      	ldr	r2, [pc, #72]	; (800e990 <Baro_Common+0x70>)
 800e946:	6812      	ldr	r2, [r2, #0]
 800e948:	4912      	ldr	r1, [pc, #72]	; (800e994 <Baro_Common+0x74>)
 800e94a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    baroPressureSum += baroHistTab[baroHistIdx];
 800e94e:	4b0e      	ldr	r3, [pc, #56]	; (800e988 <Baro_Common+0x68>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	4a10      	ldr	r2, [pc, #64]	; (800e994 <Baro_Common+0x74>)
 800e954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e958:	461a      	mov	r2, r3
 800e95a:	4b0f      	ldr	r3, [pc, #60]	; (800e998 <Baro_Common+0x78>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	4413      	add	r3, r2
 800e960:	4a0d      	ldr	r2, [pc, #52]	; (800e998 <Baro_Common+0x78>)
 800e962:	6013      	str	r3, [r2, #0]
    baroPressureSum -= baroHistTab[indexplus1];
 800e964:	4b0c      	ldr	r3, [pc, #48]	; (800e998 <Baro_Common+0x78>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	490a      	ldr	r1, [pc, #40]	; (800e994 <Baro_Common+0x74>)
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e970:	1a9b      	subs	r3, r3, r2
 800e972:	4a09      	ldr	r2, [pc, #36]	; (800e998 <Baro_Common+0x78>)
 800e974:	6013      	str	r3, [r2, #0]
    baroHistIdx = indexplus1;
 800e976:	4a04      	ldr	r2, [pc, #16]	; (800e988 <Baro_Common+0x68>)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6013      	str	r3, [r2, #0]
}
 800e97c:	bf00      	nop
 800e97e:	370c      	adds	r7, #12
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr
 800e988:	200019f8 	.word	0x200019f8
 800e98c:	20000e54 	.word	0x20000e54
 800e990:	200019c4 	.word	0x200019c4
 800e994:	200019fc 	.word	0x200019fc
 800e998:	2000144c 	.word	0x2000144c

0800e99c <evtBaroRead>:

static void evtBaroRead(float pressure, float temperature)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	ed87 0a01 	vstr	s0, [r7, #4]
 800e9a6:	edc7 0a00 	vstr	s1, [r7]
    baroPressure = pressure * 100;
 800e9aa:	edd7 7a01 	vldr	s15, [r7, #4]
 800e9ae:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800e9f4 <evtBaroRead+0x58>
 800e9b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e9ba:	ee17 2a90 	vmov	r2, s15
 800e9be:	4b0e      	ldr	r3, [pc, #56]	; (800e9f8 <evtBaroRead+0x5c>)
 800e9c0:	601a      	str	r2, [r3, #0]
    baroTemperature = temperature * 100;
 800e9c2:	edd7 7a00 	vldr	s15, [r7]
 800e9c6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800e9f4 <evtBaroRead+0x58>
 800e9ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e9d2:	ee17 2a90 	vmov	r2, s15
 800e9d6:	4b09      	ldr	r3, [pc, #36]	; (800e9fc <evtBaroRead+0x60>)
 800e9d8:	601a      	str	r2, [r3, #0]
    Baro_Common();
 800e9da:	f7ff ffa1 	bl	800e920 <Baro_Common>
    pifTask_SetTrigger(sensor_set.baro.p_task);
 800e9de:	4b08      	ldr	r3, [pc, #32]	; (800ea00 <evtBaroRead+0x64>)
 800e9e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f005 fd77 	bl	80144d8 <pifTask_SetTrigger>
}
 800e9ea:	bf00      	nop
 800e9ec:	3708      	adds	r7, #8
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	42c80000 	.word	0x42c80000
 800e9f8:	200019c4 	.word	0x200019c4
 800e9fc:	200019c8 	.word	0x200019c8
 800ea00:	2000005c 	.word	0x2000005c

0800ea04 <devClear>:
    float m_oldM, m_newM, m_oldS, m_newS;
    int m_n;
} stdev_t;

static void devClear(stdev_t *dev)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
    dev->m_n = 0;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	611a      	str	r2, [r3, #16]
}
 800ea12:	bf00      	nop
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr

0800ea1e <devPush>:

static void devPush(stdev_t *dev, float x)
{
 800ea1e:	b480      	push	{r7}
 800ea20:	b083      	sub	sp, #12
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
 800ea26:	ed87 0a00 	vstr	s0, [r7]
    dev->m_n++;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	691b      	ldr	r3, [r3, #16]
 800ea2e:	1c5a      	adds	r2, r3, #1
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	611a      	str	r2, [r3, #16]
    if (dev->m_n == 1) {
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	691b      	ldr	r3, [r3, #16]
 800ea38:	2b01      	cmp	r3, #1
 800ea3a:	d10b      	bne.n	800ea54 <devPush+0x36>
        dev->m_oldM = dev->m_newM = x;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	683a      	ldr	r2, [r7, #0]
 800ea40:	605a      	str	r2, [r3, #4]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	685a      	ldr	r2, [r3, #4]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	601a      	str	r2, [r3, #0]
        dev->m_oldS = 0.0f;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f04f 0200 	mov.w	r2, #0
 800ea50:	609a      	str	r2, [r3, #8]
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
        dev->m_oldM = dev->m_newM;
        dev->m_oldS = dev->m_newS;
    }
}
 800ea52:	e036      	b.n	800eac2 <devPush+0xa4>
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	ed93 7a00 	vldr	s14, [r3]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	edd3 7a00 	vldr	s15, [r3]
 800ea60:	edd7 6a00 	vldr	s13, [r7]
 800ea64:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	691b      	ldr	r3, [r3, #16]
 800ea6c:	ee07 3a90 	vmov	s15, r3
 800ea70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ea74:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ea78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	edc3 7a01 	vstr	s15, [r3, #4]
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	ed93 7a02 	vldr	s14, [r3, #8]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	edd3 7a00 	vldr	s15, [r3]
 800ea8e:	edd7 6a00 	vldr	s13, [r7]
 800ea92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	edd3 7a01 	vldr	s15, [r3, #4]
 800ea9c:	ed97 6a00 	vldr	s12, [r7]
 800eaa0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800eaa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eaa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	edc3 7a03 	vstr	s15, [r3, #12]
        dev->m_oldM = dev->m_newM;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	685a      	ldr	r2, [r3, #4]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	601a      	str	r2, [r3, #0]
        dev->m_oldS = dev->m_newS;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	68da      	ldr	r2, [r3, #12]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	609a      	str	r2, [r3, #8]
}
 800eac2:	bf00      	nop
 800eac4:	370c      	adds	r7, #12
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr
	...

0800ead0 <devVariance>:

static float devVariance(stdev_t *dev)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b083      	sub	sp, #12
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
    return ((dev->m_n > 1) ? dev->m_newS / (dev->m_n - 1) : 0.0f);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	691b      	ldr	r3, [r3, #16]
 800eadc:	2b01      	cmp	r3, #1
 800eade:	dd0c      	ble.n	800eafa <devVariance+0x2a>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	ed93 7a03 	vldr	s14, [r3, #12]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	691b      	ldr	r3, [r3, #16]
 800eaea:	3b01      	subs	r3, #1
 800eaec:	ee07 3a90 	vmov	s15, r3
 800eaf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eaf4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800eaf8:	e001      	b.n	800eafe <devVariance+0x2e>
 800eafa:	eddf 6a05 	vldr	s13, [pc, #20]	; 800eb10 <devVariance+0x40>
 800eafe:	eef0 7a66 	vmov.f32	s15, s13
}
 800eb02:	eeb0 0a67 	vmov.f32	s0, s15
 800eb06:	370c      	adds	r7, #12
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr
 800eb10:	00000000 	.word	0x00000000

0800eb14 <devStandardDeviation>:

static float devStandardDeviation(stdev_t *dev)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
    return sqrtf(devVariance(dev));
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f7ff ffd7 	bl	800ead0 <devVariance>
 800eb22:	eef0 7a40 	vmov.f32	s15, s0
 800eb26:	eeb0 0a67 	vmov.f32	s0, s15
 800eb2a:	f014 fbe5 	bl	80232f8 <sqrtf>
 800eb2e:	eef0 7a40 	vmov.f32	s15, s0
}
 800eb32:	eeb0 0a67 	vmov.f32	s0, s15
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <GYRO_Common>:

static void GYRO_Common(void)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af04      	add	r7, sp, #16
    int axis;
    static int32_t g[3];
    static stdev_t var[3];

    if (calibratingG > 0) {
 800eb42:	4b7d      	ldr	r3, [pc, #500]	; (800ed38 <GYRO_Common+0x1fc>)
 800eb44:	881b      	ldrh	r3, [r3, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	f000 80d1 	beq.w	800ecee <GYRO_Common+0x1b2>
        for (axis = 0; axis < 3; axis++) {
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	607b      	str	r3, [r7, #4]
 800eb50:	e0ae      	b.n	800ecb0 <GYRO_Common+0x174>
            // Reset g[axis] at start of calibration
            if (calibratingG == CALIBRATING_GYRO_CYCLES) {
 800eb52:	4b79      	ldr	r3, [pc, #484]	; (800ed38 <GYRO_Common+0x1fc>)
 800eb54:	881b      	ldrh	r3, [r3, #0]
 800eb56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb5a:	d10e      	bne.n	800eb7a <GYRO_Common+0x3e>
                g[axis] = 0;
 800eb5c:	4a77      	ldr	r2, [pc, #476]	; (800ed3c <GYRO_Common+0x200>)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2100      	movs	r1, #0
 800eb62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                devClear(&var[axis]);
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	4613      	mov	r3, r2
 800eb6a:	009b      	lsls	r3, r3, #2
 800eb6c:	4413      	add	r3, r2
 800eb6e:	009b      	lsls	r3, r3, #2
 800eb70:	4a73      	ldr	r2, [pc, #460]	; (800ed40 <GYRO_Common+0x204>)
 800eb72:	4413      	add	r3, r2
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7ff ff45 	bl	800ea04 <devClear>
            }
            // Sum up 1000 readings
            g[axis] += gyroADC[axis];
 800eb7a:	4a70      	ldr	r2, [pc, #448]	; (800ed3c <GYRO_Common+0x200>)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb82:	ee07 3a90 	vmov	s15, r3
 800eb86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eb8a:	4a6e      	ldr	r2, [pc, #440]	; (800ed44 <GYRO_Common+0x208>)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	009b      	lsls	r3, r3, #2
 800eb90:	4413      	add	r3, r2
 800eb92:	edd3 7a00 	vldr	s15, [r3]
 800eb96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eb9e:	ee17 1a90 	vmov	r1, s15
 800eba2:	4a66      	ldr	r2, [pc, #408]	; (800ed3c <GYRO_Common+0x200>)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            devPush(&var[axis], (float)gyroADC[axis]);
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	4613      	mov	r3, r2
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	4413      	add	r3, r2
 800ebb2:	009b      	lsls	r3, r3, #2
 800ebb4:	4a62      	ldr	r2, [pc, #392]	; (800ed40 <GYRO_Common+0x204>)
 800ebb6:	441a      	add	r2, r3
 800ebb8:	4962      	ldr	r1, [pc, #392]	; (800ed44 <GYRO_Common+0x208>)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	440b      	add	r3, r1
 800ebc0:	edd3 7a00 	vldr	s15, [r3]
 800ebc4:	eeb0 0a67 	vmov.f32	s0, s15
 800ebc8:	4610      	mov	r0, r2
 800ebca:	f7ff ff28 	bl	800ea1e <devPush>
            // Clear global variables for next reading
            gyroADC[axis] = 0;
 800ebce:	4a5d      	ldr	r2, [pc, #372]	; (800ed44 <GYRO_Common+0x208>)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	009b      	lsls	r3, r3, #2
 800ebd4:	4413      	add	r3, r2
 800ebd6:	f04f 0200 	mov.w	r2, #0
 800ebda:	601a      	str	r2, [r3, #0]
            gyroZero[axis] = 0;
 800ebdc:	4a5a      	ldr	r2, [pc, #360]	; (800ed48 <GYRO_Common+0x20c>)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2100      	movs	r1, #0
 800ebe2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (calibratingG == 1) {
 800ebe6:	4b54      	ldr	r3, [pc, #336]	; (800ed38 <GYRO_Common+0x1fc>)
 800ebe8:	881b      	ldrh	r3, [r3, #0]
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d15d      	bne.n	800ecaa <GYRO_Common+0x16e>
                float dev = devStandardDeviation(&var[axis]);
 800ebee:	687a      	ldr	r2, [r7, #4]
 800ebf0:	4613      	mov	r3, r2
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	4413      	add	r3, r2
 800ebf6:	009b      	lsls	r3, r3, #2
 800ebf8:	4a51      	ldr	r2, [pc, #324]	; (800ed40 <GYRO_Common+0x204>)
 800ebfa:	4413      	add	r3, r2
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7ff ff89 	bl	800eb14 <devStandardDeviation>
 800ec02:	ed87 0a00 	vstr	s0, [r7]
                // check deviation and startover if idiot was moving the model
                if (mcfg.moron_threshold && dev > mcfg.moron_threshold) {
 800ec06:	4b51      	ldr	r3, [pc, #324]	; (800ed4c <GYRO_Common+0x210>)
 800ec08:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d036      	beq.n	800ec7e <GYRO_Common+0x142>
 800ec10:	4b4e      	ldr	r3, [pc, #312]	; (800ed4c <GYRO_Common+0x210>)
 800ec12:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ec16:	ee07 3a90 	vmov	s15, r3
 800ec1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec1e:	ed97 7a00 	vldr	s14, [r7]
 800ec22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec2a:	dd28      	ble.n	800ec7e <GYRO_Common+0x142>
#ifndef __PIF_NO_LOG__
                    pifLog_Printf(LT_INFO, "Gyro Calib[%u]: %f > %d", axis, dev, mcfg.moron_threshold);
 800ec2c:	6838      	ldr	r0, [r7, #0]
 800ec2e:	f7f1 fc3f 	bl	80004b0 <__aeabi_f2d>
 800ec32:	4602      	mov	r2, r0
 800ec34:	460b      	mov	r3, r1
 800ec36:	4945      	ldr	r1, [pc, #276]	; (800ed4c <GYRO_Common+0x210>)
 800ec38:	f891 1166 	ldrb.w	r1, [r1, #358]	; 0x166
 800ec3c:	9102      	str	r1, [sp, #8]
 800ec3e:	e9cd 2300 	strd	r2, r3, [sp]
 800ec42:	687a      	ldr	r2, [r7, #4]
 800ec44:	4942      	ldr	r1, [pc, #264]	; (800ed50 <GYRO_Common+0x214>)
 800ec46:	2002      	movs	r0, #2
 800ec48:	f004 fbac 	bl	80133a4 <pifLog_Printf>
#endif
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800ec4c:	4b3a      	ldr	r3, [pc, #232]	; (800ed38 <GYRO_Common+0x1fc>)
 800ec4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec52:	801a      	strh	r2, [r3, #0]
                    devClear(&var[0]);
 800ec54:	483a      	ldr	r0, [pc, #232]	; (800ed40 <GYRO_Common+0x204>)
 800ec56:	f7ff fed5 	bl	800ea04 <devClear>
                    devClear(&var[1]);
 800ec5a:	483e      	ldr	r0, [pc, #248]	; (800ed54 <GYRO_Common+0x218>)
 800ec5c:	f7ff fed2 	bl	800ea04 <devClear>
                    devClear(&var[2]);
 800ec60:	483d      	ldr	r0, [pc, #244]	; (800ed58 <GYRO_Common+0x21c>)
 800ec62:	f7ff fecf 	bl	800ea04 <devClear>
                    g[0] = g[1] = g[2] = 0;
 800ec66:	4b35      	ldr	r3, [pc, #212]	; (800ed3c <GYRO_Common+0x200>)
 800ec68:	2200      	movs	r2, #0
 800ec6a:	609a      	str	r2, [r3, #8]
 800ec6c:	4b33      	ldr	r3, [pc, #204]	; (800ed3c <GYRO_Common+0x200>)
 800ec6e:	689b      	ldr	r3, [r3, #8]
 800ec70:	4a32      	ldr	r2, [pc, #200]	; (800ed3c <GYRO_Common+0x200>)
 800ec72:	6053      	str	r3, [r2, #4]
 800ec74:	4b31      	ldr	r3, [pc, #196]	; (800ed3c <GYRO_Common+0x200>)
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	4a30      	ldr	r2, [pc, #192]	; (800ed3c <GYRO_Common+0x200>)
 800ec7a:	6013      	str	r3, [r2, #0]
                    continue;
 800ec7c:	e015      	b.n	800ecaa <GYRO_Common+0x16e>
                }
                gyroZero[axis] = (g[axis] + (CALIBRATING_GYRO_CYCLES / 2)) / CALIBRATING_GYRO_CYCLES;
 800ec7e:	4a2f      	ldr	r2, [pc, #188]	; (800ed3c <GYRO_Common+0x200>)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec86:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ec8a:	4a34      	ldr	r2, [pc, #208]	; (800ed5c <GYRO_Common+0x220>)
 800ec8c:	fb82 1203 	smull	r1, r2, r2, r3
 800ec90:	1192      	asrs	r2, r2, #6
 800ec92:	17db      	asrs	r3, r3, #31
 800ec94:	1ad3      	subs	r3, r2, r3
 800ec96:	b219      	sxth	r1, r3
 800ec98:	4a2b      	ldr	r2, [pc, #172]	; (800ed48 <GYRO_Common+0x20c>)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                blinkLED(10, 15, 1);
 800eca0:	2201      	movs	r2, #1
 800eca2:	210f      	movs	r1, #15
 800eca4:	200a      	movs	r0, #10
 800eca6:	f7fd f935 	bl	800bf14 <blinkLED>
        for (axis = 0; axis < 3; axis++) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	3301      	adds	r3, #1
 800ecae:	607b      	str	r3, [r7, #4]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2b02      	cmp	r3, #2
 800ecb4:	f77f af4d 	ble.w	800eb52 <GYRO_Common+0x16>
            }
        }
        calibratingG--;
 800ecb8:	4b1f      	ldr	r3, [pc, #124]	; (800ed38 <GYRO_Common+0x1fc>)
 800ecba:	881b      	ldrh	r3, [r3, #0]
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	4b1d      	ldr	r3, [pc, #116]	; (800ed38 <GYRO_Common+0x1fc>)
 800ecc2:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingG) pifLog_Printf(LT_INFO, "Gyro Zero: %d %d %d", gyroZero[X], gyroZero[Y], gyroZero[Z]);
 800ecc4:	4b1c      	ldr	r3, [pc, #112]	; (800ed38 <GYRO_Common+0x1fc>)
 800ecc6:	881b      	ldrh	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d110      	bne.n	800ecee <GYRO_Common+0x1b2>
 800eccc:	4b1e      	ldr	r3, [pc, #120]	; (800ed48 <GYRO_Common+0x20c>)
 800ecce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	4b1c      	ldr	r3, [pc, #112]	; (800ed48 <GYRO_Common+0x20c>)
 800ecd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ecda:	4619      	mov	r1, r3
 800ecdc:	4b1a      	ldr	r3, [pc, #104]	; (800ed48 <GYRO_Common+0x20c>)
 800ecde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ece2:	9300      	str	r3, [sp, #0]
 800ece4:	460b      	mov	r3, r1
 800ece6:	491e      	ldr	r1, [pc, #120]	; (800ed60 <GYRO_Common+0x224>)
 800ece8:	2002      	movs	r0, #2
 800ecea:	f004 fb5b 	bl	80133a4 <pifLog_Printf>
#endif
    }
    for (axis = 0; axis < 3; axis++)
 800ecee:	2300      	movs	r3, #0
 800ecf0:	607b      	str	r3, [r7, #4]
 800ecf2:	e018      	b.n	800ed26 <GYRO_Common+0x1ea>
        gyroADC[axis] -= gyroZero[axis];
 800ecf4:	4a13      	ldr	r2, [pc, #76]	; (800ed44 <GYRO_Common+0x208>)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	4413      	add	r3, r2
 800ecfc:	ed93 7a00 	vldr	s14, [r3]
 800ed00:	4a11      	ldr	r2, [pc, #68]	; (800ed48 <GYRO_Common+0x20c>)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ed08:	ee07 3a90 	vmov	s15, r3
 800ed0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed14:	4a0b      	ldr	r2, [pc, #44]	; (800ed44 <GYRO_Common+0x208>)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	4413      	add	r3, r2
 800ed1c:	edc3 7a00 	vstr	s15, [r3]
    for (axis = 0; axis < 3; axis++)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	3301      	adds	r3, #1
 800ed24:	607b      	str	r3, [r7, #4]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2b02      	cmp	r3, #2
 800ed2a:	dde3      	ble.n	800ecf4 <GYRO_Common+0x1b8>
}
 800ed2c:	bf00      	nop
 800ed2e:	bf00      	nop
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	200019be 	.word	0x200019be
 800ed3c:	20001abc 	.word	0x20001abc
 800ed40:	20001ac8 	.word	0x20001ac8
 800ed44:	20001404 	.word	0x20001404
 800ed48:	20001494 	.word	0x20001494
 800ed4c:	200008e8 	.word	0x200008e8
 800ed50:	080270e0 	.word	0x080270e0
 800ed54:	20001adc 	.word	0x20001adc
 800ed58:	20001af0 	.word	0x20001af0
 800ed5c:	10624dd3 	.word	0x10624dd3
 800ed60:	080270f8 	.word	0x080270f8

0800ed64 <Gyro_getADC>:

BOOL Gyro_getADC(void)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	af00      	add	r7, sp, #0
    // range: +/- 8192; +/- 2000 deg/sec
    if (sensor_set.gyro.read(&sensor_set, gyroADC)) {
 800ed68:	4b07      	ldr	r3, [pc, #28]	; (800ed88 <Gyro_getADC+0x24>)
 800ed6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed6c:	4907      	ldr	r1, [pc, #28]	; (800ed8c <Gyro_getADC+0x28>)
 800ed6e:	4806      	ldr	r0, [pc, #24]	; (800ed88 <Gyro_getADC+0x24>)
 800ed70:	4798      	blx	r3
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d003      	beq.n	800ed80 <Gyro_getADC+0x1c>
    	GYRO_Common();
 800ed78:	f7ff fee0 	bl	800eb3c <GYRO_Common>
    	return TRUE;
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	e000      	b.n	800ed82 <Gyro_getADC+0x1e>
    }
    return FALSE;
 800ed80:	2300      	movs	r3, #0
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	2000005c 	.word	0x2000005c
 800ed8c:	20001404 	.word	0x20001404

0800ed90 <Mag_init>:

#ifdef MAG
static uint8_t magInit = 0;

void Mag_init(void)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	af00      	add	r7, sp, #0
    // initialize and calibration. turn on led during mag calibration (calibration routine blinks it)
    actLed1State(ON);
 800ed94:	2001      	movs	r0, #1
 800ed96:	f7f2 ffdd 	bl	8001d54 <actLed1State>
    if (!sensor_set.mag.init(&sensor_set, mcfg.gyro_align)) {
 800ed9a:	4b0d      	ldr	r3, [pc, #52]	; (800edd0 <Mag_init+0x40>)
 800ed9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800eda0:	4a0c      	ldr	r2, [pc, #48]	; (800edd4 <Mag_init+0x44>)
 800eda2:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800eda6:	4611      	mov	r1, r2
 800eda8:	4809      	ldr	r0, [pc, #36]	; (800edd0 <Mag_init+0x40>)
 800edaa:	4798      	blx	r3
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d106      	bne.n	800edc0 <Mag_init+0x30>
#ifndef __PIF_NO_LOG__
    	pifLog_Printf(LT_INFO, "Mag Error:%d", pif_error);
 800edb2:	4b09      	ldr	r3, [pc, #36]	; (800edd8 <Mag_init+0x48>)
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	461a      	mov	r2, r3
 800edb8:	4908      	ldr	r1, [pc, #32]	; (800eddc <Mag_init+0x4c>)
 800edba:	2002      	movs	r0, #2
 800edbc:	f004 faf2 	bl	80133a4 <pifLog_Printf>
#endif
    }
    actLed1State(OFF);
 800edc0:	2000      	movs	r0, #0
 800edc2:	f7f2 ffc7 	bl	8001d54 <actLed1State>
    magInit = 1;
 800edc6:	4b06      	ldr	r3, [pc, #24]	; (800ede0 <Mag_init+0x50>)
 800edc8:	2201      	movs	r2, #1
 800edca:	701a      	strb	r2, [r3, #0]
}
 800edcc:	bf00      	nop
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	2000005c 	.word	0x2000005c
 800edd4:	200008e8 	.word	0x200008e8
 800edd8:	20001c0d 	.word	0x20001c0d
 800eddc:	0802710c 	.word	0x0802710c
 800ede0:	200019cc 	.word	0x200019cc

0800ede4 <taskMagGetAdc>:

uint16_t taskMagGetAdc(PifTask *p_task)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
    uint32_t axis;

    (void)p_task;

    // Read mag sensor
    if (!sensor_set.mag.read(&sensor_set, magADC)) {
 800edec:	4b7f      	ldr	r3, [pc, #508]	; (800efec <taskMagGetAdc+0x208>)
 800edee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800edf2:	497f      	ldr	r1, [pc, #508]	; (800eff0 <taskMagGetAdc+0x20c>)
 800edf4:	487d      	ldr	r0, [pc, #500]	; (800efec <taskMagGetAdc+0x208>)
 800edf6:	4798      	blx	r3
 800edf8:	4603      	mov	r3, r0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d104      	bne.n	800ee08 <taskMagGetAdc+0x24>
    	pifTask_SetTrigger(p_task);
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f005 fb6a 	bl	80144d8 <pifTask_SetTrigger>
    	return 0;
 800ee04:	2300      	movs	r3, #0
 800ee06:	e0ec      	b.n	800efe2 <taskMagGetAdc+0x1fe>
    }

    if (f.CALIBRATE_MAG) {
 800ee08:	4b7a      	ldr	r3, [pc, #488]	; (800eff4 <taskMagGetAdc+0x210>)
 800ee0a:	7b9b      	ldrb	r3, [r3, #14]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d035      	beq.n	800ee7c <taskMagGetAdc+0x98>
        tCal = (*pif_act_timer1us)();
 800ee10:	4b79      	ldr	r3, [pc, #484]	; (800eff8 <taskMagGetAdc+0x214>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	4798      	blx	r3
 800ee16:	4603      	mov	r3, r0
 800ee18:	4a78      	ldr	r2, [pc, #480]	; (800effc <taskMagGetAdc+0x218>)
 800ee1a:	6013      	str	r3, [r2, #0]
        for (axis = 0; axis < 3; axis++) {
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	60fb      	str	r3, [r7, #12]
 800ee20:	e026      	b.n	800ee70 <taskMagGetAdc+0x8c>
            mcfg.magZero[axis] = 0;
 800ee22:	4a77      	ldr	r2, [pc, #476]	; (800f000 <taskMagGetAdc+0x21c>)
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	33b8      	adds	r3, #184	; 0xb8
 800ee28:	2100      	movs	r1, #0
 800ee2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMin[axis] = magADC[axis];
 800ee2e:	4a70      	ldr	r2, [pc, #448]	; (800eff0 <taskMagGetAdc+0x20c>)
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	009b      	lsls	r3, r3, #2
 800ee34:	4413      	add	r3, r2
 800ee36:	edd3 7a00 	vldr	s15, [r3]
 800ee3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee3e:	ee17 3a90 	vmov	r3, s15
 800ee42:	b219      	sxth	r1, r3
 800ee44:	4a6f      	ldr	r2, [pc, #444]	; (800f004 <taskMagGetAdc+0x220>)
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMax[axis] = magADC[axis];
 800ee4c:	4a68      	ldr	r2, [pc, #416]	; (800eff0 <taskMagGetAdc+0x20c>)
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	009b      	lsls	r3, r3, #2
 800ee52:	4413      	add	r3, r2
 800ee54:	edd3 7a00 	vldr	s15, [r3]
 800ee58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee5c:	ee17 3a90 	vmov	r3, s15
 800ee60:	b219      	sxth	r1, r3
 800ee62:	4a69      	ldr	r2, [pc, #420]	; (800f008 <taskMagGetAdc+0x224>)
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (axis = 0; axis < 3; axis++) {
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	60fb      	str	r3, [r7, #12]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2b02      	cmp	r3, #2
 800ee74:	d9d5      	bls.n	800ee22 <taskMagGetAdc+0x3e>
        }
        f.CALIBRATE_MAG = 0;
 800ee76:	4b5f      	ldr	r3, [pc, #380]	; (800eff4 <taskMagGetAdc+0x210>)
 800ee78:	2200      	movs	r2, #0
 800ee7a:	739a      	strb	r2, [r3, #14]
    }

    if (magInit) {              // we apply offset only once mag calibration is done
 800ee7c:	4b63      	ldr	r3, [pc, #396]	; (800f00c <taskMagGetAdc+0x228>)
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d02c      	beq.n	800eede <taskMagGetAdc+0xfa>
        magADC[X] -= mcfg.magZero[X];
 800ee84:	4b5a      	ldr	r3, [pc, #360]	; (800eff0 <taskMagGetAdc+0x20c>)
 800ee86:	ed93 7a00 	vldr	s14, [r3]
 800ee8a:	4b5d      	ldr	r3, [pc, #372]	; (800f000 <taskMagGetAdc+0x21c>)
 800ee8c:	f9b3 3170 	ldrsh.w	r3, [r3, #368]	; 0x170
 800ee90:	ee07 3a90 	vmov	s15, r3
 800ee94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee9c:	4b54      	ldr	r3, [pc, #336]	; (800eff0 <taskMagGetAdc+0x20c>)
 800ee9e:	edc3 7a00 	vstr	s15, [r3]
        magADC[Y] -= mcfg.magZero[Y];
 800eea2:	4b53      	ldr	r3, [pc, #332]	; (800eff0 <taskMagGetAdc+0x20c>)
 800eea4:	ed93 7a01 	vldr	s14, [r3, #4]
 800eea8:	4b55      	ldr	r3, [pc, #340]	; (800f000 <taskMagGetAdc+0x21c>)
 800eeaa:	f9b3 3172 	ldrsh.w	r3, [r3, #370]	; 0x172
 800eeae:	ee07 3a90 	vmov	s15, r3
 800eeb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eeb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eeba:	4b4d      	ldr	r3, [pc, #308]	; (800eff0 <taskMagGetAdc+0x20c>)
 800eebc:	edc3 7a01 	vstr	s15, [r3, #4]
        magADC[Z] -= mcfg.magZero[Z];
 800eec0:	4b4b      	ldr	r3, [pc, #300]	; (800eff0 <taskMagGetAdc+0x20c>)
 800eec2:	ed93 7a02 	vldr	s14, [r3, #8]
 800eec6:	4b4e      	ldr	r3, [pc, #312]	; (800f000 <taskMagGetAdc+0x21c>)
 800eec8:	f9b3 3174 	ldrsh.w	r3, [r3, #372]	; 0x174
 800eecc:	ee07 3a90 	vmov	s15, r3
 800eed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eed8:	4b45      	ldr	r3, [pc, #276]	; (800eff0 <taskMagGetAdc+0x20c>)
 800eeda:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    if (tCal != 0) {
 800eede:	4b47      	ldr	r3, [pc, #284]	; (800effc <taskMagGetAdc+0x218>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d07c      	beq.n	800efe0 <taskMagGetAdc+0x1fc>
        if (((*pif_act_timer1us)() - tCal) < 30000000) {    // 30s: you have 30s to turn the multi in all directions
 800eee6:	4b44      	ldr	r3, [pc, #272]	; (800eff8 <taskMagGetAdc+0x214>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	4798      	blx	r3
 800eeec:	4602      	mov	r2, r0
 800eeee:	4b43      	ldr	r3, [pc, #268]	; (800effc <taskMagGetAdc+0x218>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	1ad3      	subs	r3, r2, r3
 800eef4:	4a46      	ldr	r2, [pc, #280]	; (800f010 <taskMagGetAdc+0x22c>)
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d84f      	bhi.n	800ef9a <taskMagGetAdc+0x1b6>
            actLed0Toggle();
 800eefa:	f7f2 ff15 	bl	8001d28 <actLed0Toggle>
            for (axis = 0; axis < 3; axis++) {
 800eefe:	2300      	movs	r3, #0
 800ef00:	60fb      	str	r3, [r7, #12]
 800ef02:	e046      	b.n	800ef92 <taskMagGetAdc+0x1ae>
                if (magADC[axis] < magZeroTempMin[axis])
 800ef04:	4a3a      	ldr	r2, [pc, #232]	; (800eff0 <taskMagGetAdc+0x20c>)
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	009b      	lsls	r3, r3, #2
 800ef0a:	4413      	add	r3, r2
 800ef0c:	ed93 7a00 	vldr	s14, [r3]
 800ef10:	4a3c      	ldr	r2, [pc, #240]	; (800f004 <taskMagGetAdc+0x220>)
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ef18:	ee07 3a90 	vmov	s15, r3
 800ef1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ef24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef28:	d50e      	bpl.n	800ef48 <taskMagGetAdc+0x164>
                    magZeroTempMin[axis] = magADC[axis];
 800ef2a:	4a31      	ldr	r2, [pc, #196]	; (800eff0 <taskMagGetAdc+0x20c>)
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	009b      	lsls	r3, r3, #2
 800ef30:	4413      	add	r3, r2
 800ef32:	edd3 7a00 	vldr	s15, [r3]
 800ef36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef3a:	ee17 3a90 	vmov	r3, s15
 800ef3e:	b219      	sxth	r1, r3
 800ef40:	4a30      	ldr	r2, [pc, #192]	; (800f004 <taskMagGetAdc+0x220>)
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (magADC[axis] > magZeroTempMax[axis])
 800ef48:	4a29      	ldr	r2, [pc, #164]	; (800eff0 <taskMagGetAdc+0x20c>)
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	009b      	lsls	r3, r3, #2
 800ef4e:	4413      	add	r3, r2
 800ef50:	ed93 7a00 	vldr	s14, [r3]
 800ef54:	4a2c      	ldr	r2, [pc, #176]	; (800f008 <taskMagGetAdc+0x224>)
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ef5c:	ee07 3a90 	vmov	s15, r3
 800ef60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ef68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef6c:	dd0e      	ble.n	800ef8c <taskMagGetAdc+0x1a8>
                    magZeroTempMax[axis] = magADC[axis];
 800ef6e:	4a20      	ldr	r2, [pc, #128]	; (800eff0 <taskMagGetAdc+0x20c>)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	009b      	lsls	r3, r3, #2
 800ef74:	4413      	add	r3, r2
 800ef76:	edd3 7a00 	vldr	s15, [r3]
 800ef7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef7e:	ee17 3a90 	vmov	r3, s15
 800ef82:	b219      	sxth	r1, r3
 800ef84:	4a20      	ldr	r2, [pc, #128]	; (800f008 <taskMagGetAdc+0x224>)
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++) {
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	3301      	adds	r3, #1
 800ef90:	60fb      	str	r3, [r7, #12]
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2b02      	cmp	r3, #2
 800ef96:	d9b5      	bls.n	800ef04 <taskMagGetAdc+0x120>
 800ef98:	e022      	b.n	800efe0 <taskMagGetAdc+0x1fc>
            }
        } else {
            tCal = 0;
 800ef9a:	4b18      	ldr	r3, [pc, #96]	; (800effc <taskMagGetAdc+0x218>)
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	601a      	str	r2, [r3, #0]
            for (axis = 0; axis < 3; axis++)
 800efa0:	2300      	movs	r3, #0
 800efa2:	60fb      	str	r3, [r7, #12]
 800efa4:	e015      	b.n	800efd2 <taskMagGetAdc+0x1ee>
                mcfg.magZero[axis] = (magZeroTempMin[axis] + magZeroTempMax[axis]) / 2; // Calculate offsets
 800efa6:	4a17      	ldr	r2, [pc, #92]	; (800f004 <taskMagGetAdc+0x220>)
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800efae:	4619      	mov	r1, r3
 800efb0:	4a15      	ldr	r2, [pc, #84]	; (800f008 <taskMagGetAdc+0x224>)
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800efb8:	440b      	add	r3, r1
 800efba:	0fda      	lsrs	r2, r3, #31
 800efbc:	4413      	add	r3, r2
 800efbe:	105b      	asrs	r3, r3, #1
 800efc0:	b219      	sxth	r1, r3
 800efc2:	4a0f      	ldr	r2, [pc, #60]	; (800f000 <taskMagGetAdc+0x21c>)
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	33b8      	adds	r3, #184	; 0xb8
 800efc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++)
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	3301      	adds	r3, #1
 800efd0:	60fb      	str	r3, [r7, #12]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2b02      	cmp	r3, #2
 800efd6:	d9e6      	bls.n	800efa6 <taskMagGetAdc+0x1c2>
            writeEEPROM(1, true);
 800efd8:	2101      	movs	r1, #1
 800efda:	2001      	movs	r0, #1
 800efdc:	f7f7 faf2 	bl	80065c4 <writeEEPROM>
        }
    }
    return 0;
 800efe0:	2300      	movs	r3, #0
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3710      	adds	r7, #16
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	2000005c 	.word	0x2000005c
 800eff0:	20001428 	.word	0x20001428
 800eff4:	200016f4 	.word	0x200016f4
 800eff8:	20001c34 	.word	0x20001c34
 800effc:	20001b04 	.word	0x20001b04
 800f000:	200008e8 	.word	0x200008e8
 800f004:	20001b08 	.word	0x20001b08
 800f008:	20001b10 	.word	0x20001b10
 800f00c:	200019cc 	.word	0x200019cc
 800f010:	01c9c37f 	.word	0x01c9c37f

0800f014 <getSonarDistance>:
#ifdef SONAR

static PifNoiseFilter* p_sonar_noise_filter;

static float getSonarDistance(int32_t distance)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
	if (distance > 300)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f022:	dd02      	ble.n	800f02a <getSonarDistance+0x16>
		distance = -1;
 800f024:	f04f 33ff 	mov.w	r3, #4294967295
 800f028:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f02a:	4a0d      	ldr	r2, [pc, #52]	; (800f060 <getSonarDistance+0x4c>)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f030:	4b0c      	ldr	r3, [pc, #48]	; (800f064 <getSonarDistance+0x50>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4618      	mov	r0, r3
 800f036:	f7f1 fa29 	bl	800048c <__aeabi_i2d>
 800f03a:	f04f 0200 	mov.w	r2, #0
 800f03e:	4b0a      	ldr	r3, [pc, #40]	; (800f068 <getSonarDistance+0x54>)
 800f040:	f7f1 fbb8 	bl	80007b4 <__aeabi_ddiv>
 800f044:	4602      	mov	r2, r0
 800f046:	460b      	mov	r3, r1
 800f048:	4610      	mov	r0, r2
 800f04a:	4619      	mov	r1, r3
 800f04c:	f7f1 fd6a 	bl	8000b24 <__aeabi_d2f>
 800f050:	4603      	mov	r3, r0
 800f052:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f056:	eeb0 0a67 	vmov.f32	s0, s15
 800f05a:	3708      	adds	r7, #8
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	2000002c 	.word	0x2000002c
 800f064:	200019c8 	.word	0x200019c8
 800f068:	40590000 	.word	0x40590000

0800f06c <getSonarDistanceFilter>:

static float getSonarDistanceFilter(int32_t distance)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
	distance = *(int32_t*)pifNoiseFilter_Process(p_sonar_noise_filter, &distance);
 800f074:	4b15      	ldr	r3, [pc, #84]	; (800f0cc <getSonarDistanceFilter+0x60>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	1d3a      	adds	r2, r7, #4
 800f07a:	4611      	mov	r1, r2
 800f07c:	4618      	mov	r0, r3
 800f07e:	f006 f893 	bl	80151a8 <pifNoiseFilter_Process>
 800f082:	4603      	mov	r3, r0
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	607b      	str	r3, [r7, #4]
	if (distance > 300)
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f08e:	dd02      	ble.n	800f096 <getSonarDistanceFilter+0x2a>
		distance = -1;
 800f090:	f04f 33ff 	mov.w	r3, #4294967295
 800f094:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4a0d      	ldr	r2, [pc, #52]	; (800f0d0 <getSonarDistanceFilter+0x64>)
 800f09a:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f09c:	4b0d      	ldr	r3, [pc, #52]	; (800f0d4 <getSonarDistanceFilter+0x68>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7f1 f9f3 	bl	800048c <__aeabi_i2d>
 800f0a6:	f04f 0200 	mov.w	r2, #0
 800f0aa:	4b0b      	ldr	r3, [pc, #44]	; (800f0d8 <getSonarDistanceFilter+0x6c>)
 800f0ac:	f7f1 fb82 	bl	80007b4 <__aeabi_ddiv>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	460b      	mov	r3, r1
 800f0b4:	4610      	mov	r0, r2
 800f0b6:	4619      	mov	r1, r3
 800f0b8:	f7f1 fd34 	bl	8000b24 <__aeabi_d2f>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f0c2:	eeb0 0a67 	vmov.f32	s0, s15
 800f0c6:	3708      	adds	r7, #8
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}
 800f0cc:	200019d0 	.word	0x200019d0
 800f0d0:	2000002c 	.word	0x2000002c
 800f0d4:	200019c8 	.word	0x200019c8
 800f0d8:	40590000 	.word	0x40590000

0800f0dc <Sonar_init>:

void Sonar_init(sonarInitFuncPtr sonarInit, sonar_filter_t filter)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	70fb      	strb	r3, [r7, #3]
    static PifNoiseFilterInt32 noise_filter;

    // the repeat interval of trig signal should be greater than 60ms
    // to avoid interference between connective measurements.
	switch (filter) {
 800f0e8:	78fb      	ldrb	r3, [r7, #3]
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d002      	beq.n	800f0f4 <Sonar_init+0x18>
 800f0ee:	2b02      	cmp	r3, #2
 800f0f0:	d00b      	beq.n	800f10a <Sonar_init+0x2e>
	        }
	    }
		break;

	default:
		break;
 800f0f2:	e01e      	b.n	800f132 <Sonar_init+0x56>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 5)) {
 800f0f4:	2105      	movs	r1, #5
 800f0f6:	4820      	ldr	r0, [pc, #128]	; (800f178 <Sonar_init+0x9c>)
 800f0f8:	f006 fa06 	bl	8015508 <pifNoiseFilterInt32_Init>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d014      	beq.n	800f12c <Sonar_init+0x50>
	        p_sonar_noise_filter = &noise_filter.parent;
 800f102:	4b1e      	ldr	r3, [pc, #120]	; (800f17c <Sonar_init+0xa0>)
 800f104:	4a1c      	ldr	r2, [pc, #112]	; (800f178 <Sonar_init+0x9c>)
 800f106:	601a      	str	r2, [r3, #0]
		break;
 800f108:	e010      	b.n	800f12c <Sonar_init+0x50>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 7)) {
 800f10a:	2107      	movs	r1, #7
 800f10c:	481a      	ldr	r0, [pc, #104]	; (800f178 <Sonar_init+0x9c>)
 800f10e:	f006 f9fb 	bl	8015508 <pifNoiseFilterInt32_Init>
 800f112:	4603      	mov	r3, r0
 800f114:	2b00      	cmp	r3, #0
 800f116:	d00b      	beq.n	800f130 <Sonar_init+0x54>
	        if (pifNoiseFilterInt32_SetNoiseCancel(&noise_filter)) {
 800f118:	4817      	ldr	r0, [pc, #92]	; (800f178 <Sonar_init+0x9c>)
 800f11a:	f006 fa35 	bl	8015588 <pifNoiseFilterInt32_SetNoiseCancel>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	d005      	beq.n	800f130 <Sonar_init+0x54>
	            p_sonar_noise_filter = &noise_filter.parent;
 800f124:	4b15      	ldr	r3, [pc, #84]	; (800f17c <Sonar_init+0xa0>)
 800f126:	4a14      	ldr	r2, [pc, #80]	; (800f178 <Sonar_init+0x9c>)
 800f128:	601a      	str	r2, [r3, #0]
		break;
 800f12a:	e001      	b.n	800f130 <Sonar_init+0x54>
		break;
 800f12c:	bf00      	nop
 800f12e:	e000      	b.n	800f132 <Sonar_init+0x56>
		break;
 800f130:	bf00      	nop
	}
	if (p_sonar_noise_filter) {
 800f132:	4b12      	ldr	r3, [pc, #72]	; (800f17c <Sonar_init+0xa0>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d007      	beq.n	800f14a <Sonar_init+0x6e>
		if (!(*sonarInit)(60, getSonarDistanceFilter)) return;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4910      	ldr	r1, [pc, #64]	; (800f180 <Sonar_init+0xa4>)
 800f13e:	203c      	movs	r0, #60	; 0x3c
 800f140:	4798      	blx	r3
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d107      	bne.n	800f158 <Sonar_init+0x7c>
 800f148:	e013      	b.n	800f172 <Sonar_init+0x96>
	}
	else {
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	490d      	ldr	r1, [pc, #52]	; (800f184 <Sonar_init+0xa8>)
 800f14e:	203c      	movs	r0, #60	; 0x3c
 800f150:	4798      	blx	r3
 800f152:	4603      	mov	r3, r0
 800f154:	2b00      	cmp	r3, #0
 800f156:	d00b      	beq.n	800f170 <Sonar_init+0x94>
	}
    sensorsSet(SENSOR_SONAR);
 800f158:	2010      	movs	r0, #16
 800f15a:	f7f7 fde3 	bl	8006d24 <sensorsSet>
    sonarDistance = -1;
 800f15e:	4b0a      	ldr	r3, [pc, #40]	; (800f188 <Sonar_init+0xac>)
 800f160:	f04f 32ff 	mov.w	r2, #4294967295
 800f164:	601a      	str	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Print(LT_INFO, "Sonar init : success");
 800f166:	4909      	ldr	r1, [pc, #36]	; (800f18c <Sonar_init+0xb0>)
 800f168:	2002      	movs	r0, #2
 800f16a:	f004 f88d 	bl	8013288 <pifLog_Print>
 800f16e:	e000      	b.n	800f172 <Sonar_init+0x96>
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f170:	bf00      	nop
#endif
}
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	20001b18 	.word	0x20001b18
 800f17c:	200019d0 	.word	0x200019d0
 800f180:	0800f06d 	.word	0x0800f06d
 800f184:	0800f015 	.word	0x0800f015
 800f188:	2000002c 	.word	0x2000002c
 800f18c:	0802711c 	.word	0x0802711c

0800f190 <_SerializeBoxNamesReply>:

static void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet, PifIssuerP p_issuer);
static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data, PifIssuerP p_issuer);

static void _SerializeBoxNamesReply(PifMsp* p_owner)
{
 800f190:	b590      	push	{r4, r7, lr}
 800f192:	b085      	sub	sp, #20
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
    int i, idx;

    // in first run of the loop, we grab total size of junk to be sent
    // then come back and actually send it
    for (i = 0; i < numberBoxItems; i++) {
 800f198:	2300      	movs	r3, #0
 800f19a:	60fb      	str	r3, [r7, #12]
 800f19c:	e023      	b.n	800f1e6 <_SerializeBoxNamesReply+0x56>
        idx = availableBoxes[i];
 800f19e:	4a17      	ldr	r2, [pc, #92]	; (800f1fc <_SerializeBoxNamesReply+0x6c>)
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	4413      	add	r3, r2
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	60bb      	str	r3, [r7, #8]
       	pifMsp_AddAnswer(p_owner, (uint8_t*)boxes[idx].boxName, strlen(boxes[idx].boxName));
 800f1a8:	4915      	ldr	r1, [pc, #84]	; (800f200 <_SerializeBoxNamesReply+0x70>)
 800f1aa:	68ba      	ldr	r2, [r7, #8]
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	005b      	lsls	r3, r3, #1
 800f1b0:	4413      	add	r3, r2
 800f1b2:	009b      	lsls	r3, r3, #2
 800f1b4:	440b      	add	r3, r1
 800f1b6:	3304      	adds	r3, #4
 800f1b8:	681c      	ldr	r4, [r3, #0]
 800f1ba:	4911      	ldr	r1, [pc, #68]	; (800f200 <_SerializeBoxNamesReply+0x70>)
 800f1bc:	68ba      	ldr	r2, [r7, #8]
 800f1be:	4613      	mov	r3, r2
 800f1c0:	005b      	lsls	r3, r3, #1
 800f1c2:	4413      	add	r3, r2
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	440b      	add	r3, r1
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7f1 f803 	bl	80001d8 <strlen>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	4621      	mov	r1, r4
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f008 fd50 	bl	8017c80 <pifMsp_AddAnswer>
    for (i = 0; i < numberBoxItems; i++) {
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	60fb      	str	r3, [r7, #12]
 800f1e6:	4b07      	ldr	r3, [pc, #28]	; (800f204 <_SerializeBoxNamesReply+0x74>)
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	dbd5      	blt.n	800f19e <_SerializeBoxNamesReply+0xe>
    }
}
 800f1f2:	bf00      	nop
 800f1f4:	bf00      	nop
 800f1f6:	3714      	adds	r7, #20
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd90      	pop	{r4, r7, pc}
 800f1fc:	20001b38 	.word	0x20001b38
 800f200:	08028f14 	.word	0x08028f14
 800f204:	20001b51 	.word	0x20001b51

0800f208 <serialInit>:

void serialInit(uint8_t port, uint32_t baudrate, uint8_t flexport)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	4603      	mov	r3, r0
 800f210:	6039      	str	r1, [r7, #0]
 800f212:	71fb      	strb	r3, [r7, #7]
 800f214:	4613      	mov	r3, r2
 800f216:	71bb      	strb	r3, [r7, #6]
    int idx;

    core.mainport = uartOpen(port, baudrate, MODE_RXTX, 2);			// 10ms
 800f218:	79f8      	ldrb	r0, [r7, #7]
 800f21a:	2302      	movs	r3, #2
 800f21c:	2203      	movs	r2, #3
 800f21e:	6839      	ldr	r1, [r7, #0]
 800f220:	f7f2 ff06 	bl	8002030 <uartOpen>
 800f224:	4603      	mov	r3, r0
 800f226:	4a92      	ldr	r2, [pc, #584]	; (800f470 <serialInit+0x268>)
 800f228:	6013      	str	r3, [r2, #0]
    ports[0].port = core.mainport;
 800f22a:	4b91      	ldr	r3, [pc, #580]	; (800f470 <serialInit+0x268>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	4a91      	ldr	r2, [pc, #580]	; (800f474 <serialInit+0x26c>)
 800f230:	6013      	str	r3, [r2, #0]

    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f232:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f236:	4990      	ldr	r1, [pc, #576]	; (800f478 <serialInit+0x270>)
 800f238:	4890      	ldr	r0, [pc, #576]	; (800f47c <serialInit+0x274>)
 800f23a:	f008 facf 	bl	80177dc <pifMsp_Init>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	f000 810e 	beq.w	800f462 <serialInit+0x25a>
    pifMsp_AttachEvtReceive(&ports[0].pif_msp, evtMspReceive, evtMspOtherPacket, core.mainport);
 800f246:	4b8a      	ldr	r3, [pc, #552]	; (800f470 <serialInit+0x268>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	4a8d      	ldr	r2, [pc, #564]	; (800f480 <serialInit+0x278>)
 800f24c:	498d      	ldr	r1, [pc, #564]	; (800f484 <serialInit+0x27c>)
 800f24e:	488b      	ldr	r0, [pc, #556]	; (800f47c <serialInit+0x274>)
 800f250:	f008 fb78 	bl	8017944 <pifMsp_AttachEvtReceive>
    pifMsp_AttachComm(&ports[0].pif_msp, &core.mainport->comm);
 800f254:	4b86      	ldr	r3, [pc, #536]	; (800f470 <serialInit+0x268>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	3304      	adds	r3, #4
 800f25a:	4619      	mov	r1, r3
 800f25c:	4887      	ldr	r0, [pc, #540]	; (800f47c <serialInit+0x274>)
 800f25e:	f008 fb4b 	bl	80178f8 <pifMsp_AttachComm>

    serialStartReceiveFunc(&core.mainport->comm);
 800f262:	4b83      	ldr	r3, [pc, #524]	; (800f470 <serialInit+0x268>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	3304      	adds	r3, #4
 800f268:	4618      	mov	r0, r3
 800f26a:	f7f3 f86d 	bl	8002348 <serialStartReceiveFunc>

    // additional telemetry port available only if spektrum sat isn't already assigned there
    if (flexport) {
 800f26e:	79bb      	ldrb	r3, [r7, #6]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d02a      	beq.n	800f2ca <serialInit+0xc2>
        core.flexport = uartOpen(flexport, baudrate, MODE_RXTX, 10);	// 10ms
 800f274:	79b8      	ldrb	r0, [r7, #6]
 800f276:	230a      	movs	r3, #10
 800f278:	2203      	movs	r2, #3
 800f27a:	6839      	ldr	r1, [r7, #0]
 800f27c:	f7f2 fed8 	bl	8002030 <uartOpen>
 800f280:	4603      	mov	r3, r0
 800f282:	4a7b      	ldr	r2, [pc, #492]	; (800f470 <serialInit+0x268>)
 800f284:	6053      	str	r3, [r2, #4]
        ports[1].port = core.flexport;
 800f286:	4b7a      	ldr	r3, [pc, #488]	; (800f470 <serialInit+0x268>)
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	4a7a      	ldr	r2, [pc, #488]	; (800f474 <serialInit+0x26c>)
 800f28c:	65d3      	str	r3, [r2, #92]	; 0x5c

        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f28e:	f240 1211 	movw	r2, #273	; 0x111
 800f292:	4979      	ldr	r1, [pc, #484]	; (800f478 <serialInit+0x270>)
 800f294:	487c      	ldr	r0, [pc, #496]	; (800f488 <serialInit+0x280>)
 800f296:	f008 faa1 	bl	80177dc <pifMsp_Init>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	f000 80e2 	beq.w	800f466 <serialInit+0x25e>
        pifMsp_AttachEvtReceive(&ports[1].pif_msp, evtMspReceive, evtMspOtherPacket, core.flexport);
 800f2a2:	4b73      	ldr	r3, [pc, #460]	; (800f470 <serialInit+0x268>)
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	4a76      	ldr	r2, [pc, #472]	; (800f480 <serialInit+0x278>)
 800f2a8:	4976      	ldr	r1, [pc, #472]	; (800f484 <serialInit+0x27c>)
 800f2aa:	4877      	ldr	r0, [pc, #476]	; (800f488 <serialInit+0x280>)
 800f2ac:	f008 fb4a 	bl	8017944 <pifMsp_AttachEvtReceive>
        pifMsp_AttachComm(&ports[1].pif_msp, &core.flexport->comm);
 800f2b0:	4b6f      	ldr	r3, [pc, #444]	; (800f470 <serialInit+0x268>)
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	3304      	adds	r3, #4
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	4873      	ldr	r0, [pc, #460]	; (800f488 <serialInit+0x280>)
 800f2ba:	f008 fb1d 	bl	80178f8 <pifMsp_AttachComm>

        serialStartReceiveFunc(&core.flexport->comm);
 800f2be:	4b6c      	ldr	r3, [pc, #432]	; (800f470 <serialInit+0x268>)
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	3304      	adds	r3, #4
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7f3 f83f 	bl	8002348 <serialStartReceiveFunc>
    }

    // calculate used boxes based on features and fill availableBoxes[] array
    memset(availableBoxes, 0xFF, sizeof(availableBoxes));
 800f2ca:	2219      	movs	r2, #25
 800f2cc:	21ff      	movs	r1, #255	; 0xff
 800f2ce:	486f      	ldr	r0, [pc, #444]	; (800f48c <serialInit+0x284>)
 800f2d0:	f013 fbe2 	bl	8022a98 <memset>

    idx = 0;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	60fb      	str	r3, [r7, #12]
    availableBoxes[idx++] = BOXARM;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	1c5a      	adds	r2, r3, #1
 800f2dc:	60fa      	str	r2, [r7, #12]
 800f2de:	4a6b      	ldr	r2, [pc, #428]	; (800f48c <serialInit+0x284>)
 800f2e0:	2100      	movs	r1, #0
 800f2e2:	54d1      	strb	r1, [r2, r3]
    if (sensors(SENSOR_ACC)) {
 800f2e4:	2002      	movs	r0, #2
 800f2e6:	f7f7 fd07 	bl	8006cf8 <sensors>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d00b      	beq.n	800f308 <serialInit+0x100>
        availableBoxes[idx++] = BOXANGLE;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	1c5a      	adds	r2, r3, #1
 800f2f4:	60fa      	str	r2, [r7, #12]
 800f2f6:	4a65      	ldr	r2, [pc, #404]	; (800f48c <serialInit+0x284>)
 800f2f8:	2101      	movs	r1, #1
 800f2fa:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHORIZON;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	1c5a      	adds	r2, r3, #1
 800f300:	60fa      	str	r2, [r7, #12]
 800f302:	4a62      	ldr	r2, [pc, #392]	; (800f48c <serialInit+0x284>)
 800f304:	2102      	movs	r1, #2
 800f306:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_BARO)) {
 800f308:	2004      	movs	r0, #4
 800f30a:	f7f7 fcf5 	bl	8006cf8 <sensors>
 800f30e:	4603      	mov	r3, r0
 800f310:	2b00      	cmp	r3, #0
 800f312:	d012      	beq.n	800f33a <serialInit+0x132>
        availableBoxes[idx++] = BOXBARO;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	1c5a      	adds	r2, r3, #1
 800f318:	60fa      	str	r2, [r7, #12]
 800f31a:	4a5c      	ldr	r2, [pc, #368]	; (800f48c <serialInit+0x284>)
 800f31c:	2103      	movs	r1, #3
 800f31e:	54d1      	strb	r1, [r2, r3]
        if (feature(FEATURE_VARIO))
 800f320:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f324:	f7f7 fd30 	bl	8006d88 <feature>
 800f328:	4603      	mov	r3, r0
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d005      	beq.n	800f33a <serialInit+0x132>
            availableBoxes[idx++] = BOXVARIO;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	1c5a      	adds	r2, r3, #1
 800f332:	60fa      	str	r2, [r7, #12]
 800f334:	4a55      	ldr	r2, [pc, #340]	; (800f48c <serialInit+0x284>)
 800f336:	2104      	movs	r1, #4
 800f338:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800f33a:	2002      	movs	r0, #2
 800f33c:	f7f7 fcdc 	bl	8006cf8 <sensors>
 800f340:	4603      	mov	r3, r0
 800f342:	2b00      	cmp	r3, #0
 800f344:	d105      	bne.n	800f352 <serialInit+0x14a>
 800f346:	2008      	movs	r0, #8
 800f348:	f7f7 fcd6 	bl	8006cf8 <sensors>
 800f34c:	4603      	mov	r3, r0
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d011      	beq.n	800f376 <serialInit+0x16e>
        availableBoxes[idx++] = BOXMAG;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	1c5a      	adds	r2, r3, #1
 800f356:	60fa      	str	r2, [r7, #12]
 800f358:	4a4c      	ldr	r2, [pc, #304]	; (800f48c <serialInit+0x284>)
 800f35a:	2105      	movs	r1, #5
 800f35c:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADFREE;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	1c5a      	adds	r2, r3, #1
 800f362:	60fa      	str	r2, [r7, #12]
 800f364:	4a49      	ldr	r2, [pc, #292]	; (800f48c <serialInit+0x284>)
 800f366:	2106      	movs	r1, #6
 800f368:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADADJ;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	1c5a      	adds	r2, r3, #1
 800f36e:	60fa      	str	r2, [r7, #12]
 800f370:	4a46      	ldr	r2, [pc, #280]	; (800f48c <serialInit+0x284>)
 800f372:	2107      	movs	r1, #7
 800f374:	54d1      	strb	r1, [r2, r3]
    }
    if (feature(FEATURE_SERVO_TILT))
 800f376:	2020      	movs	r0, #32
 800f378:	f7f7 fd06 	bl	8006d88 <feature>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d005      	beq.n	800f38e <serialInit+0x186>
        availableBoxes[idx++] = BOXCAMSTAB;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	1c5a      	adds	r2, r3, #1
 800f386:	60fa      	str	r2, [r7, #12]
 800f388:	4a40      	ldr	r2, [pc, #256]	; (800f48c <serialInit+0x284>)
 800f38a:	2108      	movs	r1, #8
 800f38c:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_GPS)) {
 800f38e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f392:	f7f7 fcf9 	bl	8006d88 <feature>
 800f396:	4603      	mov	r3, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d00b      	beq.n	800f3b4 <serialInit+0x1ac>
        availableBoxes[idx++] = BOXGPSHOME;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	1c5a      	adds	r2, r3, #1
 800f3a0:	60fa      	str	r2, [r7, #12]
 800f3a2:	4a3a      	ldr	r2, [pc, #232]	; (800f48c <serialInit+0x284>)
 800f3a4:	210a      	movs	r1, #10
 800f3a6:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGPSHOLD;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	1c5a      	adds	r2, r3, #1
 800f3ac:	60fa      	str	r2, [r7, #12]
 800f3ae:	4a37      	ldr	r2, [pc, #220]	; (800f48c <serialInit+0x284>)
 800f3b0:	210b      	movs	r1, #11
 800f3b2:	54d1      	strb	r1, [r2, r3]
    }
    if (f.FIXED_WING) {
 800f3b4:	4b36      	ldr	r3, [pc, #216]	; (800f490 <serialInit+0x288>)
 800f3b6:	7c1b      	ldrb	r3, [r3, #16]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d00b      	beq.n	800f3d4 <serialInit+0x1cc>
        availableBoxes[idx++] = BOXPASSTHRU;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	1c5a      	adds	r2, r3, #1
 800f3c0:	60fa      	str	r2, [r7, #12]
 800f3c2:	4a32      	ldr	r2, [pc, #200]	; (800f48c <serialInit+0x284>)
 800f3c4:	210c      	movs	r1, #12
 800f3c6:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGCRUISE;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	1c5a      	adds	r2, r3, #1
 800f3cc:	60fa      	str	r2, [r7, #12]
 800f3ce:	4a2f      	ldr	r2, [pc, #188]	; (800f48c <serialInit+0x284>)
 800f3d0:	2118      	movs	r1, #24
 800f3d2:	54d1      	strb	r1, [r2, r3]
    }
    availableBoxes[idx++] = BOXBEEPERON;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	1c5a      	adds	r2, r3, #1
 800f3d8:	60fa      	str	r2, [r7, #12]
 800f3da:	4a2c      	ldr	r2, [pc, #176]	; (800f48c <serialInit+0x284>)
 800f3dc:	210d      	movs	r1, #13
 800f3de:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_INFLIGHT_ACC_CAL))
 800f3e0:	2004      	movs	r0, #4
 800f3e2:	f7f7 fcd1 	bl	8006d88 <feature>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d005      	beq.n	800f3f8 <serialInit+0x1f0>
        availableBoxes[idx++] = BOXCALIB;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	1c5a      	adds	r2, r3, #1
 800f3f0:	60fa      	str	r2, [r7, #12]
 800f3f2:	4a26      	ldr	r2, [pc, #152]	; (800f48c <serialInit+0x284>)
 800f3f4:	2111      	movs	r1, #17
 800f3f6:	54d1      	strb	r1, [r2, r3]
    availableBoxes[idx++] = BOXOSD;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	1c5a      	adds	r2, r3, #1
 800f3fc:	60fa      	str	r2, [r7, #12]
 800f3fe:	4a23      	ldr	r2, [pc, #140]	; (800f48c <serialInit+0x284>)
 800f400:	2113      	movs	r1, #19
 800f402:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_TELEMETRY && mcfg.telemetry_switch))
 800f404:	4b23      	ldr	r3, [pc, #140]	; (800f494 <serialInit+0x28c>)
 800f406:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	bf14      	ite	ne
 800f40e:	2301      	movne	r3, #1
 800f410:	2300      	moveq	r3, #0
 800f412:	b2db      	uxtb	r3, r3
 800f414:	4618      	mov	r0, r3
 800f416:	f7f7 fcb7 	bl	8006d88 <feature>
 800f41a:	4603      	mov	r3, r0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d005      	beq.n	800f42c <serialInit+0x224>
        availableBoxes[idx++] = BOXTELEMETRY;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	1c5a      	adds	r2, r3, #1
 800f424:	60fa      	str	r2, [r7, #12]
 800f426:	4a19      	ldr	r2, [pc, #100]	; (800f48c <serialInit+0x284>)
 800f428:	2114      	movs	r1, #20
 800f42a:	54d1      	strb	r1, [r2, r3]
    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800f42c:	4b19      	ldr	r3, [pc, #100]	; (800f494 <serialInit+0x28c>)
 800f42e:	795b      	ldrb	r3, [r3, #5]
 800f430:	2b18      	cmp	r3, #24
 800f432:	d111      	bne.n	800f458 <serialInit+0x250>
        availableBoxes[idx++] = BOXSERVO1;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	1c5a      	adds	r2, r3, #1
 800f438:	60fa      	str	r2, [r7, #12]
 800f43a:	4a14      	ldr	r2, [pc, #80]	; (800f48c <serialInit+0x284>)
 800f43c:	2115      	movs	r1, #21
 800f43e:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO2;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	1c5a      	adds	r2, r3, #1
 800f444:	60fa      	str	r2, [r7, #12]
 800f446:	4a11      	ldr	r2, [pc, #68]	; (800f48c <serialInit+0x284>)
 800f448:	2116      	movs	r1, #22
 800f44a:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO3;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	1c5a      	adds	r2, r3, #1
 800f450:	60fa      	str	r2, [r7, #12]
 800f452:	4a0e      	ldr	r2, [pc, #56]	; (800f48c <serialInit+0x284>)
 800f454:	2117      	movs	r1, #23
 800f456:	54d1      	strb	r1, [r2, r3]
    }

    numberBoxItems = idx;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	b2da      	uxtb	r2, r3
 800f45c:	4b0e      	ldr	r3, [pc, #56]	; (800f498 <serialInit+0x290>)
 800f45e:	701a      	strb	r2, [r3, #0]
 800f460:	e002      	b.n	800f468 <serialInit+0x260>
    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f462:	bf00      	nop
 800f464:	e000      	b.n	800f468 <serialInit+0x260>
        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f466:	bf00      	nop
}
 800f468:	3710      	adds	r7, #16
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	20000830 	.word	0x20000830
 800f474:	20001b54 	.word	0x20001b54
 800f478:	20001528 	.word	0x20001528
 800f47c:	20001b58 	.word	0x20001b58
 800f480:	08010e15 	.word	0x08010e15
 800f484:	0800f49d 	.word	0x0800f49d
 800f488:	20001bb4 	.word	0x20001bb4
 800f48c:	20001b38 	.word	0x20001b38
 800f490:	200016f4 	.word	0x200016f4
 800f494:	200008e8 	.word	0x200008e8
 800f498:	20001b51 	.word	0x20001b51

0800f49c <evtMspReceive>:

void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet, PifIssuerP p_issuer)
{
 800f49c:	b590      	push	{r4, r7, lr}
 800f49e:	b091      	sub	sp, #68	; 0x44
 800f4a0:	af02      	add	r7, sp, #8
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	607a      	str	r2, [r7, #4]
    uint32_t i, j, tmp, junk;
#ifdef GPS
    uint8_t wp_no;
    int32_t lat = 0, lon = 0, alt = 0;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	627b      	str	r3, [r7, #36]	; 0x24
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	623b      	str	r3, [r7, #32]
#endif
    const char *build = __DATE__;
 800f4b4:	4bd9      	ldr	r3, [pc, #868]	; (800f81c <evtMspReceive+0x380>)
 800f4b6:	61fb      	str	r3, [r7, #28]

    (void)p_issuer;

    pifMsp_MakeAnswer(p_owner, p_packet);
 800f4b8:	68b9      	ldr	r1, [r7, #8]
 800f4ba:	68f8      	ldr	r0, [r7, #12]
 800f4bc:	f008 fab0 	bl	8017a20 <pifMsp_MakeAnswer>
    switch (p_packet->command) {
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	3b40      	subs	r3, #64	; 0x40
 800f4c6:	2bbe      	cmp	r3, #190	; 0xbe
 800f4c8:	f201 8487 	bhi.w	8010dda <evtMspReceive+0x193e>
 800f4cc:	a201      	add	r2, pc, #4	; (adr r2, 800f4d4 <evtMspReceive+0x38>)
 800f4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d2:	bf00      	nop
 800f4d4:	08010d4b 	.word	0x08010d4b
 800f4d8:	08010d73 	.word	0x08010d73
 800f4dc:	08010c75 	.word	0x08010c75
 800f4e0:	08010ae1 	.word	0x08010ae1
 800f4e4:	08010d9f 	.word	0x08010d9f
 800f4e8:	08010da7 	.word	0x08010da7
 800f4ec:	08010ddb 	.word	0x08010ddb
 800f4f0:	08010ddb 	.word	0x08010ddb
 800f4f4:	08010ddb 	.word	0x08010ddb
 800f4f8:	08010ddb 	.word	0x08010ddb
 800f4fc:	08010ddb 	.word	0x08010ddb
 800f500:	08010ddb 	.word	0x08010ddb
 800f504:	08010ddb 	.word	0x08010ddb
 800f508:	08010ddb 	.word	0x08010ddb
 800f50c:	08010ddb 	.word	0x08010ddb
 800f510:	08010ddb 	.word	0x08010ddb
 800f514:	08010ddb 	.word	0x08010ddb
 800f518:	08010ddb 	.word	0x08010ddb
 800f51c:	08010ddb 	.word	0x08010ddb
 800f520:	08010ddb 	.word	0x08010ddb
 800f524:	08010ddb 	.word	0x08010ddb
 800f528:	08010ddb 	.word	0x08010ddb
 800f52c:	08010ddb 	.word	0x08010ddb
 800f530:	08010ddb 	.word	0x08010ddb
 800f534:	08010ddb 	.word	0x08010ddb
 800f538:	08010ddb 	.word	0x08010ddb
 800f53c:	08010ddb 	.word	0x08010ddb
 800f540:	08010ddb 	.word	0x08010ddb
 800f544:	08010ddb 	.word	0x08010ddb
 800f548:	08010ddb 	.word	0x08010ddb
 800f54c:	08010ddb 	.word	0x08010ddb
 800f550:	08010ddb 	.word	0x08010ddb
 800f554:	08010ddb 	.word	0x08010ddb
 800f558:	08010ddb 	.word	0x08010ddb
 800f55c:	08010ddb 	.word	0x08010ddb
 800f560:	08010ddb 	.word	0x08010ddb
 800f564:	0800fb73 	.word	0x0800fb73
 800f568:	0800fb9b 	.word	0x0800fb9b
 800f56c:	0800fd27 	.word	0x0800fd27
 800f570:	0800fe27 	.word	0x0800fe27
 800f574:	080102cb 	.word	0x080102cb
 800f578:	080102d9 	.word	0x080102d9
 800f57c:	08010301 	.word	0x08010301
 800f580:	08010381 	.word	0x08010381
 800f584:	080103b3 	.word	0x080103b3
 800f588:	080103eb 	.word	0x080103eb
 800f58c:	08010409 	.word	0x08010409
 800f590:	080104ad 	.word	0x080104ad
 800f594:	08010511 	.word	0x08010511
 800f598:	0801059d 	.word	0x0801059d
 800f59c:	0801068d 	.word	0x0801068d
 800f5a0:	0801077d 	.word	0x0801077d
 800f5a4:	080105d5 	.word	0x080105d5
 800f5a8:	0801058f 	.word	0x0801058f
 800f5ac:	080107a1 	.word	0x080107a1
 800f5b0:	080105df 	.word	0x080105df
 800f5b4:	0800fe35 	.word	0x0800fe35
 800f5b8:	08010ddb 	.word	0x08010ddb
 800f5bc:	08010ddb 	.word	0x08010ddb
 800f5c0:	08010141 	.word	0x08010141
 800f5c4:	08010ddb 	.word	0x08010ddb
 800f5c8:	08010ddb 	.word	0x08010ddb
 800f5cc:	08010ddb 	.word	0x08010ddb
 800f5d0:	08010ddb 	.word	0x08010ddb
 800f5d4:	08010ddb 	.word	0x08010ddb
 800f5d8:	08010ddb 	.word	0x08010ddb
 800f5dc:	08010ddb 	.word	0x08010ddb
 800f5e0:	08010ddb 	.word	0x08010ddb
 800f5e4:	08010ddb 	.word	0x08010ddb
 800f5e8:	08010ddb 	.word	0x08010ddb
 800f5ec:	08010ddb 	.word	0x08010ddb
 800f5f0:	08010ddb 	.word	0x08010ddb
 800f5f4:	08010ddb 	.word	0x08010ddb
 800f5f8:	08010ddb 	.word	0x08010ddb
 800f5fc:	08010ddb 	.word	0x08010ddb
 800f600:	08010ddb 	.word	0x08010ddb
 800f604:	08010ddb 	.word	0x08010ddb
 800f608:	08010ddb 	.word	0x08010ddb
 800f60c:	08010ddb 	.word	0x08010ddb
 800f610:	08010ddb 	.word	0x08010ddb
 800f614:	08010ddb 	.word	0x08010ddb
 800f618:	08010ddb 	.word	0x08010ddb
 800f61c:	08010ddb 	.word	0x08010ddb
 800f620:	08010ddb 	.word	0x08010ddb
 800f624:	08010ddb 	.word	0x08010ddb
 800f628:	08010ddb 	.word	0x08010ddb
 800f62c:	08010ddb 	.word	0x08010ddb
 800f630:	08010ddb 	.word	0x08010ddb
 800f634:	08010ddb 	.word	0x08010ddb
 800f638:	08010ddb 	.word	0x08010ddb
 800f63c:	08010ddb 	.word	0x08010ddb
 800f640:	08010ddb 	.word	0x08010ddb
 800f644:	08010ddb 	.word	0x08010ddb
 800f648:	08010ddb 	.word	0x08010ddb
 800f64c:	08010ddb 	.word	0x08010ddb
 800f650:	08010ddb 	.word	0x08010ddb
 800f654:	080109f5 	.word	0x080109f5
 800f658:	08010ddb 	.word	0x08010ddb
 800f65c:	08010ddb 	.word	0x08010ddb
 800f660:	08010ddb 	.word	0x08010ddb
 800f664:	08010a1b 	.word	0x08010a1b
 800f668:	08010ddb 	.word	0x08010ddb
 800f66c:	08010a85 	.word	0x08010a85
 800f670:	08010ddb 	.word	0x08010ddb
 800f674:	08010ddb 	.word	0x08010ddb
 800f678:	08010ddb 	.word	0x08010ddb
 800f67c:	08010ddb 	.word	0x08010ddb
 800f680:	08010ddb 	.word	0x08010ddb
 800f684:	08010ddb 	.word	0x08010ddb
 800f688:	08010ddb 	.word	0x08010ddb
 800f68c:	08010ddb 	.word	0x08010ddb
 800f690:	08010ddb 	.word	0x08010ddb
 800f694:	08010ddb 	.word	0x08010ddb
 800f698:	08010ddb 	.word	0x08010ddb
 800f69c:	08010ddb 	.word	0x08010ddb
 800f6a0:	08010ddb 	.word	0x08010ddb
 800f6a4:	08010ddb 	.word	0x08010ddb
 800f6a8:	08010ddb 	.word	0x08010ddb
 800f6ac:	08010ddb 	.word	0x08010ddb
 800f6b0:	08010ddb 	.word	0x08010ddb
 800f6b4:	08010ddb 	.word	0x08010ddb
 800f6b8:	08010ddb 	.word	0x08010ddb
 800f6bc:	08010ddb 	.word	0x08010ddb
 800f6c0:	08010ddb 	.word	0x08010ddb
 800f6c4:	08010ddb 	.word	0x08010ddb
 800f6c8:	08010ddb 	.word	0x08010ddb
 800f6cc:	08010ddb 	.word	0x08010ddb
 800f6d0:	08010ddb 	.word	0x08010ddb
 800f6d4:	08010ddb 	.word	0x08010ddb
 800f6d8:	08010ddb 	.word	0x08010ddb
 800f6dc:	08010ddb 	.word	0x08010ddb
 800f6e0:	08010ddb 	.word	0x08010ddb
 800f6e4:	08010ddb 	.word	0x08010ddb
 800f6e8:	08010ddb 	.word	0x08010ddb
 800f6ec:	08010ddb 	.word	0x08010ddb
 800f6f0:	08010ddb 	.word	0x08010ddb
 800f6f4:	0800f7d1 	.word	0x0800f7d1
 800f6f8:	0800f829 	.word	0x0800f829
 800f6fc:	0800f88f 	.word	0x0800f88f
 800f700:	0800f919 	.word	0x0800f919
 800f704:	0800f951 	.word	0x0800f951
 800f708:	080108bf 	.word	0x080108bf
 800f70c:	080108d3 	.word	0x080108d3
 800f710:	0800f9b9 	.word	0x0800f9b9
 800f714:	080108ad 	.word	0x080108ad
 800f718:	08010815 	.word	0x08010815
 800f71c:	0800fb29 	.word	0x0800fb29
 800f720:	0800fb61 	.word	0x0800fb61
 800f724:	0800fedd 	.word	0x0800fedd
 800f728:	08010ddb 	.word	0x08010ddb
 800f72c:	0800facf 	.word	0x0800facf
 800f730:	08010ddb 	.word	0x08010ddb
 800f734:	08010209 	.word	0x08010209
 800f738:	08010ddb 	.word	0x08010ddb
 800f73c:	08010ddb 	.word	0x08010ddb
 800f740:	08010ddb 	.word	0x08010ddb
 800f744:	08010ddb 	.word	0x08010ddb
 800f748:	08010ddb 	.word	0x08010ddb
 800f74c:	08010ddb 	.word	0x08010ddb
 800f750:	08010ddb 	.word	0x08010ddb
 800f754:	08010ddb 	.word	0x08010ddb
 800f758:	08010ddb 	.word	0x08010ddb
 800f75c:	08010ddb 	.word	0x08010ddb
 800f760:	08010ddb 	.word	0x08010ddb
 800f764:	08010ddb 	.word	0x08010ddb
 800f768:	08010ddb 	.word	0x08010ddb
 800f76c:	08010ddb 	.word	0x08010ddb
 800f770:	08010ddb 	.word	0x08010ddb
 800f774:	08010ddb 	.word	0x08010ddb
 800f778:	08010ddb 	.word	0x08010ddb
 800f77c:	08010ddb 	.word	0x08010ddb
 800f780:	08010ddb 	.word	0x08010ddb
 800f784:	08010ddb 	.word	0x08010ddb
 800f788:	08010ddb 	.word	0x08010ddb
 800f78c:	08010ddb 	.word	0x08010ddb
 800f790:	0800f7fd 	.word	0x0800f7fd
 800f794:	080109d3 	.word	0x080109d3
 800f798:	0800ff89 	.word	0x0800ff89
 800f79c:	08010053 	.word	0x08010053
 800f7a0:	08010ddb 	.word	0x08010ddb
 800f7a4:	08010ddb 	.word	0x08010ddb
 800f7a8:	08010ddb 	.word	0x08010ddb
 800f7ac:	08010ddb 	.word	0x08010ddb
 800f7b0:	08010ddb 	.word	0x08010ddb
 800f7b4:	08010ddb 	.word	0x08010ddb
 800f7b8:	08010ddb 	.word	0x08010ddb
 800f7bc:	080108e5 	.word	0x080108e5
 800f7c0:	08010ddb 	.word	0x08010ddb
 800f7c4:	08010ddb 	.word	0x08010ddb
 800f7c8:	08010ddb 	.word	0x08010ddb
 800f7cc:	08010901 	.word	0x08010901
    case MSP_SET_RAW_RC:
        for (i = 0; i < 8; i++)
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	637b      	str	r3, [r7, #52]	; 0x34
 800f7d4:	e00b      	b.n	800f7ee <evtMspReceive+0x352>
            rcData[i] = pifMsp_ReadData16(p_packet);
 800f7d6:	68b8      	ldr	r0, [r7, #8]
 800f7d8:	f008 f8de 	bl	8017998 <pifMsp_ReadData16>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	b219      	sxth	r1, r3
 800f7e0:	4a0f      	ldr	r2, [pc, #60]	; (800f820 <evtMspReceive+0x384>)
 800f7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800f7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	637b      	str	r3, [r7, #52]	; 0x34
 800f7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7f0:	2b07      	cmp	r3, #7
 800f7f2:	d9f0      	bls.n	800f7d6 <evtMspReceive+0x33a>
        mspFrameRecieve();
 800f7f4:	f7fe fce0 	bl	800e1b8 <mspFrameRecieve>
        break;
 800f7f8:	f001 bafd 	b.w	8010df6 <evtMspReceive+0x195a>
        
    case MSP_SET_ACC_TRIM:
        cfg.angleTrim[PITCH] = pifMsp_ReadData16(p_packet);
 800f7fc:	68b8      	ldr	r0, [r7, #8]
 800f7fe:	f008 f8cb 	bl	8017998 <pifMsp_ReadData16>
 800f802:	4603      	mov	r3, r0
 800f804:	b21a      	sxth	r2, r3
 800f806:	4b07      	ldr	r3, [pc, #28]	; (800f824 <evtMspReceive+0x388>)
 800f808:	85da      	strh	r2, [r3, #46]	; 0x2e
        cfg.angleTrim[ROLL]  = pifMsp_ReadData16(p_packet);
 800f80a:	68b8      	ldr	r0, [r7, #8]
 800f80c:	f008 f8c4 	bl	8017998 <pifMsp_ReadData16>
 800f810:	4603      	mov	r3, r0
 800f812:	b21a      	sxth	r2, r3
 800f814:	4b03      	ldr	r3, [pc, #12]	; (800f824 <evtMspReceive+0x388>)
 800f816:	859a      	strh	r2, [r3, #44]	; 0x2c
        break;
 800f818:	f001 baed 	b.w	8010df6 <evtMspReceive+0x195a>
 800f81c:	08027228 	.word	0x08027228
 800f820:	2000172c 	.word	0x2000172c
 800f824:	20000e54 	.word	0x20000e54

#ifdef GPS
    case MSP_SET_RAW_GPS:
        f.GPS_FIX = pifMsp_ReadData8(p_packet);
 800f828:	68b8      	ldr	r0, [r7, #8]
 800f82a:	f008 f8a1 	bl	8017970 <pifMsp_ReadData8>
 800f82e:	4603      	mov	r3, r0
 800f830:	461a      	mov	r2, r3
 800f832:	4bb1      	ldr	r3, [pc, #708]	; (800faf8 <evtMspReceive+0x65c>)
 800f834:	72da      	strb	r2, [r3, #11]
        GPS_numSat = pifMsp_ReadData8(p_packet);
 800f836:	68b8      	ldr	r0, [r7, #8]
 800f838:	f008 f89a 	bl	8017970 <pifMsp_ReadData8>
 800f83c:	4603      	mov	r3, r0
 800f83e:	461a      	mov	r2, r3
 800f840:	4bae      	ldr	r3, [pc, #696]	; (800fafc <evtMspReceive+0x660>)
 800f842:	701a      	strb	r2, [r3, #0]
        GPS_coord[LAT] = pifMsp_ReadData32(p_packet);
 800f844:	68b8      	ldr	r0, [r7, #8]
 800f846:	f008 f8c4 	bl	80179d2 <pifMsp_ReadData32>
 800f84a:	4603      	mov	r3, r0
 800f84c:	461a      	mov	r2, r3
 800f84e:	4bac      	ldr	r3, [pc, #688]	; (800fb00 <evtMspReceive+0x664>)
 800f850:	601a      	str	r2, [r3, #0]
        GPS_coord[LON] = pifMsp_ReadData32(p_packet);
 800f852:	68b8      	ldr	r0, [r7, #8]
 800f854:	f008 f8bd 	bl	80179d2 <pifMsp_ReadData32>
 800f858:	4603      	mov	r3, r0
 800f85a:	461a      	mov	r2, r3
 800f85c:	4ba8      	ldr	r3, [pc, #672]	; (800fb00 <evtMspReceive+0x664>)
 800f85e:	605a      	str	r2, [r3, #4]
        GPS_altitude = pifMsp_ReadData16(p_packet);
 800f860:	68b8      	ldr	r0, [r7, #8]
 800f862:	f008 f899 	bl	8017998 <pifMsp_ReadData16>
 800f866:	4603      	mov	r3, r0
 800f868:	461a      	mov	r2, r3
 800f86a:	4ba6      	ldr	r3, [pc, #664]	; (800fb04 <evtMspReceive+0x668>)
 800f86c:	801a      	strh	r2, [r3, #0]
        GPS_speed = pifMsp_ReadData16(p_packet);
 800f86e:	68b8      	ldr	r0, [r7, #8]
 800f870:	f008 f892 	bl	8017998 <pifMsp_ReadData16>
 800f874:	4603      	mov	r3, r0
 800f876:	461a      	mov	r2, r3
 800f878:	4ba3      	ldr	r3, [pc, #652]	; (800fb08 <evtMspReceive+0x66c>)
 800f87a:	801a      	strh	r2, [r3, #0]
        GPS_update |= 2;        // New data signalisation to GPS functions
 800f87c:	4ba3      	ldr	r3, [pc, #652]	; (800fb0c <evtMspReceive+0x670>)
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	f043 0302 	orr.w	r3, r3, #2
 800f884:	b2da      	uxtb	r2, r3
 800f886:	4ba1      	ldr	r3, [pc, #644]	; (800fb0c <evtMspReceive+0x670>)
 800f888:	701a      	strb	r2, [r3, #0]
        break;
 800f88a:	f001 bab4 	b.w	8010df6 <evtMspReceive+0x195a>
#endif

    case MSP_SET_PID:
        for (i = 0; i < PIDITEMS; i++) {
 800f88e:	2300      	movs	r3, #0
 800f890:	637b      	str	r3, [r7, #52]	; 0x34
 800f892:	e03c      	b.n	800f90e <evtMspReceive+0x472>
            cfg.P8[i] = pifMsp_ReadData8(p_packet);
 800f894:	68b8      	ldr	r0, [r7, #8]
 800f896:	f008 f86b 	bl	8017970 <pifMsp_ReadData8>
 800f89a:	4603      	mov	r3, r0
 800f89c:	4619      	mov	r1, r3
 800f89e:	4a9c      	ldr	r2, [pc, #624]	; (800fb10 <evtMspReceive+0x674>)
 800f8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8a2:	4413      	add	r3, r2
 800f8a4:	3301      	adds	r3, #1
 800f8a6:	460a      	mov	r2, r1
 800f8a8:	701a      	strb	r2, [r3, #0]
            cfg.I8[i] = pifMsp_ReadData8(p_packet);
 800f8aa:	68b8      	ldr	r0, [r7, #8]
 800f8ac:	f008 f860 	bl	8017970 <pifMsp_ReadData8>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	4a96      	ldr	r2, [pc, #600]	; (800fb10 <evtMspReceive+0x674>)
 800f8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8b8:	4413      	add	r3, r2
 800f8ba:	330b      	adds	r3, #11
 800f8bc:	460a      	mov	r2, r1
 800f8be:	701a      	strb	r2, [r3, #0]
            cfg.D8[i] = pifMsp_ReadData8(p_packet);
 800f8c0:	68b8      	ldr	r0, [r7, #8]
 800f8c2:	f008 f855 	bl	8017970 <pifMsp_ReadData8>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	4a91      	ldr	r2, [pc, #580]	; (800fb10 <evtMspReceive+0x674>)
 800f8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ce:	4413      	add	r3, r2
 800f8d0:	3315      	adds	r3, #21
 800f8d2:	460a      	mov	r2, r1
 800f8d4:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "S-PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 800f8d6:	4a8e      	ldr	r2, [pc, #568]	; (800fb10 <evtMspReceive+0x674>)
 800f8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8da:	4413      	add	r3, r2
 800f8dc:	3301      	adds	r3, #1
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	4a8b      	ldr	r2, [pc, #556]	; (800fb10 <evtMspReceive+0x674>)
 800f8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e6:	4413      	add	r3, r2
 800f8e8:	330b      	adds	r3, #11
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	4619      	mov	r1, r3
 800f8ee:	4a88      	ldr	r2, [pc, #544]	; (800fb10 <evtMspReceive+0x674>)
 800f8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8f2:	4413      	add	r3, r2
 800f8f4:	3315      	adds	r3, #21
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	9301      	str	r3, [sp, #4]
 800f8fa:	9100      	str	r1, [sp, #0]
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f900:	4984      	ldr	r1, [pc, #528]	; (800fb14 <evtMspReceive+0x678>)
 800f902:	2002      	movs	r0, #2
 800f904:	f003 fd4e 	bl	80133a4 <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 800f908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f90a:	3301      	adds	r3, #1
 800f90c:	637b      	str	r3, [r7, #52]	; 0x34
 800f90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f910:	2b09      	cmp	r3, #9
 800f912:	d9bf      	bls.n	800f894 <evtMspReceive+0x3f8>
#endif
        }
        break;
 800f914:	f001 ba6f 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_SET_BOX:
        for (i = 0; i < numberBoxItems; i++)
 800f918:	2300      	movs	r3, #0
 800f91a:	637b      	str	r3, [r7, #52]	; 0x34
 800f91c:	e010      	b.n	800f940 <evtMspReceive+0x4a4>
            cfg.activate[availableBoxes[i]] = pifMsp_ReadData16(p_packet);
 800f91e:	68b8      	ldr	r0, [r7, #8]
 800f920:	f008 f83a 	bl	8017998 <pifMsp_ReadData16>
 800f924:	4603      	mov	r3, r0
 800f926:	4619      	mov	r1, r3
 800f928:	4a7b      	ldr	r2, [pc, #492]	; (800fb18 <evtMspReceive+0x67c>)
 800f92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f92c:	4413      	add	r3, r2
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	4a77      	ldr	r2, [pc, #476]	; (800fb10 <evtMspReceive+0x674>)
 800f932:	3312      	adds	r3, #18
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	4413      	add	r3, r2
 800f938:	6059      	str	r1, [r3, #4]
        for (i = 0; i < numberBoxItems; i++)
 800f93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f93c:	3301      	adds	r3, #1
 800f93e:	637b      	str	r3, [r7, #52]	; 0x34
 800f940:	4b76      	ldr	r3, [pc, #472]	; (800fb1c <evtMspReceive+0x680>)
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	461a      	mov	r2, r3
 800f946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f948:	4293      	cmp	r3, r2
 800f94a:	d3e8      	bcc.n	800f91e <evtMspReceive+0x482>
        break;
 800f94c:	f001 ba53 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_SET_RC_TUNING:
        cfg.rcRate8 = pifMsp_ReadData8(p_packet);
 800f950:	68b8      	ldr	r0, [r7, #8]
 800f952:	f008 f80d 	bl	8017970 <pifMsp_ReadData8>
 800f956:	4603      	mov	r3, r0
 800f958:	461a      	mov	r2, r3
 800f95a:	4b6d      	ldr	r3, [pc, #436]	; (800fb10 <evtMspReceive+0x674>)
 800f95c:	77da      	strb	r2, [r3, #31]
        cfg.rcExpo8 = pifMsp_ReadData8(p_packet);
 800f95e:	68b8      	ldr	r0, [r7, #8]
 800f960:	f008 f806 	bl	8017970 <pifMsp_ReadData8>
 800f964:	4603      	mov	r3, r0
 800f966:	461a      	mov	r2, r3
 800f968:	4b69      	ldr	r3, [pc, #420]	; (800fb10 <evtMspReceive+0x674>)
 800f96a:	f883 2020 	strb.w	r2, [r3, #32]
        pifMsp_ReadData8(p_packet); // Legacy pitch-roll rate, read but not set.
 800f96e:	68b8      	ldr	r0, [r7, #8]
 800f970:	f007 fffe 	bl	8017970 <pifMsp_ReadData8>
        cfg.yawRate = pifMsp_ReadData8(p_packet);
 800f974:	68b8      	ldr	r0, [r7, #8]
 800f976:	f007 fffb 	bl	8017970 <pifMsp_ReadData8>
 800f97a:	4603      	mov	r3, r0
 800f97c:	461a      	mov	r2, r3
 800f97e:	4b64      	ldr	r3, [pc, #400]	; (800fb10 <evtMspReceive+0x674>)
 800f980:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        cfg.dynThrPID = pifMsp_ReadData8(p_packet);
 800f984:	68b8      	ldr	r0, [r7, #8]
 800f986:	f007 fff3 	bl	8017970 <pifMsp_ReadData8>
 800f98a:	4603      	mov	r3, r0
 800f98c:	461a      	mov	r2, r3
 800f98e:	4b60      	ldr	r3, [pc, #384]	; (800fb10 <evtMspReceive+0x674>)
 800f990:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        cfg.thrMid8 = pifMsp_ReadData8(p_packet);
 800f994:	68b8      	ldr	r0, [r7, #8]
 800f996:	f007 ffeb 	bl	8017970 <pifMsp_ReadData8>
 800f99a:	4603      	mov	r3, r0
 800f99c:	461a      	mov	r2, r3
 800f99e:	4b5c      	ldr	r3, [pc, #368]	; (800fb10 <evtMspReceive+0x674>)
 800f9a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        cfg.thrExpo8 = pifMsp_ReadData8(p_packet);
 800f9a4:	68b8      	ldr	r0, [r7, #8]
 800f9a6:	f007 ffe3 	bl	8017970 <pifMsp_ReadData8>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	4b58      	ldr	r3, [pc, #352]	; (800fb10 <evtMspReceive+0x674>)
 800f9b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        break;
 800f9b4:	f001 ba1f 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_SET_MISC:
        tmp = pifMsp_ReadData16(p_packet);
 800f9b8:	68b8      	ldr	r0, [r7, #8]
 800f9ba:	f007 ffed 	bl	8017998 <pifMsp_ReadData16>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	617b      	str	r3, [r7, #20]
        // sanity check
        if (tmp < 1600 && tmp > 1400)
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f9c8:	d208      	bcs.n	800f9dc <evtMspReceive+0x540>
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800f9d0:	d904      	bls.n	800f9dc <evtMspReceive+0x540>
            mcfg.midrc = tmp;
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	b29a      	uxth	r2, r3
 800f9d6:	4b52      	ldr	r3, [pc, #328]	; (800fb20 <evtMspReceive+0x684>)
 800f9d8:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
        mcfg.minthrottle = pifMsp_ReadData16(p_packet);
 800f9dc:	68b8      	ldr	r0, [r7, #8]
 800f9de:	f007 ffdb 	bl	8017998 <pifMsp_ReadData16>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	4b4e      	ldr	r3, [pc, #312]	; (800fb20 <evtMspReceive+0x684>)
 800f9e8:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
        mcfg.maxthrottle = pifMsp_ReadData16(p_packet);
 800f9ec:	68b8      	ldr	r0, [r7, #8]
 800f9ee:	f007 ffd3 	bl	8017998 <pifMsp_ReadData16>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	4b4a      	ldr	r3, [pc, #296]	; (800fb20 <evtMspReceive+0x684>)
 800f9f8:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
        mcfg.mincommand = pifMsp_ReadData16(p_packet);
 800f9fc:	68b8      	ldr	r0, [r7, #8]
 800f9fe:	f007 ffcb 	bl	8017998 <pifMsp_ReadData16>
 800fa02:	4603      	mov	r3, r0
 800fa04:	461a      	mov	r2, r3
 800fa06:	4b46      	ldr	r3, [pc, #280]	; (800fb20 <evtMspReceive+0x684>)
 800fa08:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
        cfg.failsafe_throttle = pifMsp_ReadData16(p_packet);
 800fa0c:	68b8      	ldr	r0, [r7, #8]
 800fa0e:	f007 ffc3 	bl	8017998 <pifMsp_ReadData16>
 800fa12:	4603      	mov	r3, r0
 800fa14:	461a      	mov	r2, r3
 800fa16:	4b3e      	ldr	r3, [pc, #248]	; (800fb10 <evtMspReceive+0x674>)
 800fa18:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
        mcfg.gps_type = pifMsp_ReadData8(p_packet);
 800fa1c:	68b8      	ldr	r0, [r7, #8]
 800fa1e:	f007 ffa7 	bl	8017970 <pifMsp_ReadData8>
 800fa22:	4603      	mov	r3, r0
 800fa24:	461a      	mov	r2, r3
 800fa26:	4b3e      	ldr	r3, [pc, #248]	; (800fb20 <evtMspReceive+0x684>)
 800fa28:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
        mcfg.gps_baudrate = pifMsp_ReadData8(p_packet);
 800fa2c:	68b8      	ldr	r0, [r7, #8]
 800fa2e:	f007 ff9f 	bl	8017970 <pifMsp_ReadData8>
 800fa32:	4603      	mov	r3, r0
 800fa34:	b25a      	sxtb	r2, r3
 800fa36:	4b3a      	ldr	r3, [pc, #232]	; (800fb20 <evtMspReceive+0x684>)
 800fa38:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
        mcfg.gps_ubx_sbas = pifMsp_ReadData8(p_packet);
 800fa3c:	68b8      	ldr	r0, [r7, #8]
 800fa3e:	f007 ff97 	bl	8017970 <pifMsp_ReadData8>
 800fa42:	4603      	mov	r3, r0
 800fa44:	b25a      	sxtb	r2, r3
 800fa46:	4b36      	ldr	r3, [pc, #216]	; (800fb20 <evtMspReceive+0x684>)
 800fa48:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
        mcfg.multiwiicurrentoutput = pifMsp_ReadData8(p_packet);
 800fa4c:	68b8      	ldr	r0, [r7, #8]
 800fa4e:	f007 ff8f 	bl	8017970 <pifMsp_ReadData8>
 800fa52:	4603      	mov	r3, r0
 800fa54:	461a      	mov	r2, r3
 800fa56:	4b32      	ldr	r3, [pc, #200]	; (800fb20 <evtMspReceive+0x684>)
 800fa58:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
        mcfg.rssi_aux_channel = pifMsp_ReadData8(p_packet);
 800fa5c:	68b8      	ldr	r0, [r7, #8]
 800fa5e:	f007 ff87 	bl	8017970 <pifMsp_ReadData8>
 800fa62:	4603      	mov	r3, r0
 800fa64:	461a      	mov	r2, r3
 800fa66:	4b2e      	ldr	r3, [pc, #184]	; (800fb20 <evtMspReceive+0x684>)
 800fa68:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
        pifMsp_ReadData8(p_packet);
 800fa6c:	68b8      	ldr	r0, [r7, #8]
 800fa6e:	f007 ff7f 	bl	8017970 <pifMsp_ReadData8>
        cfg.mag_declination = pifMsp_ReadData16(p_packet) * 10;
 800fa72:	68b8      	ldr	r0, [r7, #8]
 800fa74:	f007 ff90 	bl	8017998 <pifMsp_ReadData16>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	0092      	lsls	r2, r2, #2
 800fa7e:	4413      	add	r3, r2
 800fa80:	005b      	lsls	r3, r3, #1
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	b21a      	sxth	r2, r3
 800fa86:	4b22      	ldr	r3, [pc, #136]	; (800fb10 <evtMspReceive+0x674>)
 800fa88:	855a      	strh	r2, [r3, #42]	; 0x2a
        mcfg.vbatscale = pifMsp_ReadData8(p_packet);           // actual vbatscale as intended
 800fa8a:	68b8      	ldr	r0, [r7, #8]
 800fa8c:	f007 ff70 	bl	8017970 <pifMsp_ReadData8>
 800fa90:	4603      	mov	r3, r0
 800fa92:	461a      	mov	r2, r3
 800fa94:	4b22      	ldr	r3, [pc, #136]	; (800fb20 <evtMspReceive+0x684>)
 800fa96:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
        mcfg.vbatmincellvoltage = pifMsp_ReadData8(p_packet);  // vbatlevel_warn1 in MWC2.3 GUI
 800fa9a:	68b8      	ldr	r0, [r7, #8]
 800fa9c:	f007 ff68 	bl	8017970 <pifMsp_ReadData8>
 800faa0:	4603      	mov	r3, r0
 800faa2:	461a      	mov	r2, r3
 800faa4:	4b1e      	ldr	r3, [pc, #120]	; (800fb20 <evtMspReceive+0x684>)
 800faa6:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
        mcfg.vbatmaxcellvoltage = pifMsp_ReadData8(p_packet);  // vbatlevel_warn2 in MWC2.3 GUI
 800faaa:	68b8      	ldr	r0, [r7, #8]
 800faac:	f007 ff60 	bl	8017970 <pifMsp_ReadData8>
 800fab0:	4603      	mov	r3, r0
 800fab2:	461a      	mov	r2, r3
 800fab4:	4b1a      	ldr	r3, [pc, #104]	; (800fb20 <evtMspReceive+0x684>)
 800fab6:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
        mcfg.vbatwarningcellvoltage = pifMsp_ReadData8(p_packet); // vbatlevel when buzzer starts to alert
 800faba:	68b8      	ldr	r0, [r7, #8]
 800fabc:	f007 ff58 	bl	8017970 <pifMsp_ReadData8>
 800fac0:	4603      	mov	r3, r0
 800fac2:	461a      	mov	r2, r3
 800fac4:	4b16      	ldr	r3, [pc, #88]	; (800fb20 <evtMspReceive+0x684>)
 800fac6:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        break;
 800faca:	f001 b994 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_SET_MOTOR:
        for (i = 0; i < 8; i++)
 800face:	2300      	movs	r3, #0
 800fad0:	637b      	str	r3, [r7, #52]	; 0x34
 800fad2:	e00b      	b.n	800faec <evtMspReceive+0x650>
            motor_disarmed[i] = pifMsp_ReadData16(p_packet);
 800fad4:	68b8      	ldr	r0, [r7, #8]
 800fad6:	f007 ff5f 	bl	8017998 <pifMsp_ReadData16>
 800fada:	4603      	mov	r3, r0
 800fadc:	b219      	sxth	r1, r3
 800fade:	4a11      	ldr	r2, [pc, #68]	; (800fb24 <evtMspReceive+0x688>)
 800fae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800fae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae8:	3301      	adds	r3, #1
 800faea:	637b      	str	r3, [r7, #52]	; 0x34
 800faec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faee:	2b07      	cmp	r3, #7
 800faf0:	d9f0      	bls.n	800fad4 <evtMspReceive+0x638>
        break;
 800faf2:	f001 b980 	b.w	8010df6 <evtMspReceive+0x195a>
 800faf6:	bf00      	nop
 800faf8:	200016f4 	.word	0x200016f4
 800fafc:	200017d8 	.word	0x200017d8
 800fb00:	200017b8 	.word	0x200017b8
 800fb04:	200017de 	.word	0x200017de
 800fb08:	200017e0 	.word	0x200017e0
 800fb0c:	200017e2 	.word	0x200017e2
 800fb10:	20000e54 	.word	0x20000e54
 800fb14:	08027234 	.word	0x08027234
 800fb18:	20001b38 	.word	0x20001b38
 800fb1c:	20001b51 	.word	0x20001b51
 800fb20:	200008e8 	.word	0x200008e8
 800fb24:	20001574 	.word	0x20001574

    case MSP_SELECT_SETTING:
        if (!f.ARMED) {
 800fb28:	4ba7      	ldr	r3, [pc, #668]	; (800fdc8 <evtMspReceive+0x92c>)
 800fb2a:	785b      	ldrb	r3, [r3, #1]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	f041 8159 	bne.w	8010de4 <evtMspReceive+0x1948>
            mcfg.current_profile = pifMsp_ReadData8(p_packet);
 800fb32:	68b8      	ldr	r0, [r7, #8]
 800fb34:	f007 ff1c 	bl	8017970 <pifMsp_ReadData8>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	4ba3      	ldr	r3, [pc, #652]	; (800fdcc <evtMspReceive+0x930>)
 800fb3e:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            if (mcfg.current_profile > 2)
 800fb42:	4ba2      	ldr	r3, [pc, #648]	; (800fdcc <evtMspReceive+0x930>)
 800fb44:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800fb48:	2b02      	cmp	r3, #2
 800fb4a:	d903      	bls.n	800fb54 <evtMspReceive+0x6b8>
                mcfg.current_profile = 0;
 800fb4c:	4b9f      	ldr	r3, [pc, #636]	; (800fdcc <evtMspReceive+0x930>)
 800fb4e:	2200      	movs	r2, #0
 800fb50:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            // this writes new profile index and re-reads it
            writeEEPROM(0, false);
 800fb54:	2100      	movs	r1, #0
 800fb56:	2000      	movs	r0, #0
 800fb58:	f7f6 fd34 	bl	80065c4 <writeEEPROM>
        }
        break;
 800fb5c:	f001 b942 	b.w	8010de4 <evtMspReceive+0x1948>

    case MSP_SET_HEAD:
        magHold = pifMsp_ReadData16(p_packet);
 800fb60:	68b8      	ldr	r0, [r7, #8]
 800fb62:	f007 ff19 	bl	8017998 <pifMsp_ReadData16>
 800fb66:	4603      	mov	r3, r0
 800fb68:	b21a      	sxth	r2, r3
 800fb6a:	4b99      	ldr	r3, [pc, #612]	; (800fdd0 <evtMspReceive+0x934>)
 800fb6c:	801a      	strh	r2, [r3, #0]
        break;
 800fb6e:	f001 b942 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_IDENT:
        pifMsp_AddAnswer8(p_owner, VERSION);                    // multiwii version
 800fb72:	21e7      	movs	r1, #231	; 0xe7
 800fb74:	68f8      	ldr	r0, [r7, #12]
 800fb76:	f007 ffa5 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.mixerConfiguration);    // type of multicopter
 800fb7a:	4b94      	ldr	r3, [pc, #592]	; (800fdcc <evtMspReceive+0x930>)
 800fb7c:	795b      	ldrb	r3, [r3, #5]
 800fb7e:	4619      	mov	r1, r3
 800fb80:	68f8      	ldr	r0, [r7, #12]
 800fb82:	f007 ff9f 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, MSP_VERSION);                // MultiWii Serial Protocol Version
 800fb86:	2104      	movs	r1, #4
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f007 ff9b 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, CAP_PLATFORM_32BIT | CAP_BASEFLIGHT_CONFIG | CAP_DYNBALANCE | CAP_FW_FLAPS); // "capability"
 800fb8e:	4991      	ldr	r1, [pc, #580]	; (800fdd4 <evtMspReceive+0x938>)
 800fb90:	68f8      	ldr	r0, [r7, #12]
 800fb92:	f008 f829 	bl	8017be8 <pifMsp_AddAnswer32>
        break;
 800fb96:	f001 b92e 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_STATUS:
        pifMsp_AddAnswer16(p_owner, cycleTime);
 800fb9a:	4b8f      	ldr	r3, [pc, #572]	; (800fdd8 <evtMspReceive+0x93c>)
 800fb9c:	881b      	ldrh	r3, [r3, #0]
 800fb9e:	4619      	mov	r1, r3
 800fba0:	68f8      	ldr	r0, [r7, #12]
 800fba2:	f007 ffd5 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, g_i2c_port.error_count);
 800fba6:	4b8d      	ldr	r3, [pc, #564]	; (800fddc <evtMspReceive+0x940>)
 800fba8:	881b      	ldrh	r3, [r3, #0]
 800fbaa:	4619      	mov	r1, r3
 800fbac:	68f8      	ldr	r0, [r7, #12]
 800fbae:	f007 ffcf 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, sensors(SENSOR_ACC) | sensors(SENSOR_BARO) << 1 | sensors(SENSOR_MAG) << 2 | sensors(SENSOR_GPS) << 3 | sensors(SENSOR_SONAR) << 4);
 800fbb2:	2002      	movs	r0, #2
 800fbb4:	f7f7 f8a0 	bl	8006cf8 <sensors>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	b21c      	sxth	r4, r3
 800fbbc:	2004      	movs	r0, #4
 800fbbe:	f7f7 f89b 	bl	8006cf8 <sensors>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	005b      	lsls	r3, r3, #1
 800fbc6:	b21b      	sxth	r3, r3
 800fbc8:	4323      	orrs	r3, r4
 800fbca:	b21c      	sxth	r4, r3
 800fbcc:	2008      	movs	r0, #8
 800fbce:	f7f7 f893 	bl	8006cf8 <sensors>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	b21b      	sxth	r3, r3
 800fbd8:	4323      	orrs	r3, r4
 800fbda:	b21c      	sxth	r4, r3
 800fbdc:	2020      	movs	r0, #32
 800fbde:	f7f7 f88b 	bl	8006cf8 <sensors>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	00db      	lsls	r3, r3, #3
 800fbe6:	b21b      	sxth	r3, r3
 800fbe8:	4323      	orrs	r3, r4
 800fbea:	b21c      	sxth	r4, r3
 800fbec:	2010      	movs	r0, #16
 800fbee:	f7f7 f883 	bl	8006cf8 <sensors>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	011b      	lsls	r3, r3, #4
 800fbf6:	b21b      	sxth	r3, r3
 800fbf8:	4323      	orrs	r3, r4
 800fbfa:	b21b      	sxth	r3, r3
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	4619      	mov	r1, r3
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	f007 ffa5 	bl	8017b50 <pifMsp_AddAnswer16>
        // OK, so you waste all the fucking time to have BOXNAMES and BOXINDEXES etc, and then you go ahead and serialize enabled shit simply by stuffing all
        // the bits in order, instead of setting the enabled bits based on BOXINDEX. WHERE IS THE FUCKING LOGIC IN THIS, FUCKWADS.
        // Serialize the boxes in the order we delivered them, until multiwii retards fix their shit
        junk = 0;
 800fc06:	2300      	movs	r3, #0
 800fc08:	62fb      	str	r3, [r7, #44]	; 0x2c
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fc0a:	4b6f      	ldr	r3, [pc, #444]	; (800fdc8 <evtMspReceive+0x92c>)
 800fc0c:	78db      	ldrb	r3, [r3, #3]
 800fc0e:	005a      	lsls	r2, r3, #1
 800fc10:	4b6d      	ldr	r3, [pc, #436]	; (800fdc8 <evtMspReceive+0x92c>)
 800fc12:	791b      	ldrb	r3, [r3, #4]
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fc18:	4b6b      	ldr	r3, [pc, #428]	; (800fdc8 <evtMspReceive+0x92c>)
 800fc1a:	799b      	ldrb	r3, [r3, #6]
 800fc1c:	00db      	lsls	r3, r3, #3
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fc1e:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fc20:	4b69      	ldr	r3, [pc, #420]	; (800fdc8 <evtMspReceive+0x92c>)
 800fc22:	795b      	ldrb	r3, [r3, #5]
 800fc24:	015b      	lsls	r3, r3, #5
 800fc26:	431a      	orrs	r2, r3
 800fc28:	4b67      	ldr	r3, [pc, #412]	; (800fdc8 <evtMspReceive+0x92c>)
 800fc2a:	7a5b      	ldrb	r3, [r3, #9]
 800fc2c:	019b      	lsls	r3, r3, #6
 800fc2e:	431a      	orrs	r2, r3
 800fc30:	4b6b      	ldr	r3, [pc, #428]	; (800fde0 <evtMspReceive+0x944>)
 800fc32:	79db      	ldrb	r3, [r3, #7]
 800fc34:	01db      	lsls	r3, r3, #7
 800fc36:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fc38:	4b69      	ldr	r3, [pc, #420]	; (800fde0 <evtMspReceive+0x944>)
 800fc3a:	7a1b      	ldrb	r3, [r3, #8]
 800fc3c:	021b      	lsls	r3, r3, #8
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fc3e:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fc40:	4b67      	ldr	r3, [pc, #412]	; (800fde0 <evtMspReceive+0x944>)
 800fc42:	7a5b      	ldrb	r3, [r3, #9]
 800fc44:	025b      	lsls	r3, r3, #9
 800fc46:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fc48:	4b5f      	ldr	r3, [pc, #380]	; (800fdc8 <evtMspReceive+0x92c>)
 800fc4a:	79db      	ldrb	r3, [r3, #7]
 800fc4c:	029b      	lsls	r3, r3, #10
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fc4e:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fc50:	4b5d      	ldr	r3, [pc, #372]	; (800fdc8 <evtMspReceive+0x92c>)
 800fc52:	7a1b      	ldrb	r3, [r3, #8]
 800fc54:	02db      	lsls	r3, r3, #11
 800fc56:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fc58:	4b5b      	ldr	r3, [pc, #364]	; (800fdc8 <evtMspReceive+0x92c>)
 800fc5a:	7d1b      	ldrb	r3, [r3, #20]
 800fc5c:	061b      	lsls	r3, r3, #24
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fc5e:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fc60:	4b59      	ldr	r3, [pc, #356]	; (800fdc8 <evtMspReceive+0x92c>)
 800fc62:	7a9b      	ldrb	r3, [r3, #10]
 800fc64:	031b      	lsls	r3, r3, #12
 800fc66:	431a      	orrs	r2, r3
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800fc68:	4b5d      	ldr	r3, [pc, #372]	; (800fde0 <evtMspReceive+0x944>)
 800fc6a:	7b5b      	ldrb	r3, [r3, #13]
 800fc6c:	035b      	lsls	r3, r3, #13
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fc6e:	431a      	orrs	r2, r3
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800fc70:	4b5b      	ldr	r3, [pc, #364]	; (800fde0 <evtMspReceive+0x944>)
 800fc72:	7b9b      	ldrb	r3, [r3, #14]
 800fc74:	039b      	lsls	r3, r3, #14
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800fc76:	431a      	orrs	r2, r3
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800fc78:	4b59      	ldr	r3, [pc, #356]	; (800fde0 <evtMspReceive+0x944>)
 800fc7a:	7c1b      	ldrb	r3, [r3, #16]
 800fc7c:	041b      	lsls	r3, r3, #16
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800fc7e:	431a      	orrs	r2, r3
                rcOptions[BOXVARIO] << BOXVARIO |
 800fc80:	4b57      	ldr	r3, [pc, #348]	; (800fde0 <evtMspReceive+0x944>)
 800fc82:	791b      	ldrb	r3, [r3, #4]
 800fc84:	011b      	lsls	r3, r3, #4
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800fc86:	431a      	orrs	r2, r3
                rcOptions[BOXCALIB] << BOXCALIB |
 800fc88:	4b55      	ldr	r3, [pc, #340]	; (800fde0 <evtMspReceive+0x944>)
 800fc8a:	7c5b      	ldrb	r3, [r3, #17]
 800fc8c:	045b      	lsls	r3, r3, #17
                rcOptions[BOXVARIO] << BOXVARIO |
 800fc8e:	431a      	orrs	r2, r3
                rcOptions[BOXGOV] << BOXGOV |
 800fc90:	4b53      	ldr	r3, [pc, #332]	; (800fde0 <evtMspReceive+0x944>)
 800fc92:	7c9b      	ldrb	r3, [r3, #18]
 800fc94:	049b      	lsls	r3, r3, #18
                rcOptions[BOXCALIB] << BOXCALIB |
 800fc96:	431a      	orrs	r2, r3
                rcOptions[BOXOSD] << BOXOSD |
 800fc98:	4b51      	ldr	r3, [pc, #324]	; (800fde0 <evtMspReceive+0x944>)
 800fc9a:	7cdb      	ldrb	r3, [r3, #19]
 800fc9c:	04db      	lsls	r3, r3, #19
                rcOptions[BOXGOV] << BOXGOV |
 800fc9e:	431a      	orrs	r2, r3
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800fca0:	4b4f      	ldr	r3, [pc, #316]	; (800fde0 <evtMspReceive+0x944>)
 800fca2:	7d1b      	ldrb	r3, [r3, #20]
 800fca4:	051b      	lsls	r3, r3, #20
                rcOptions[BOXOSD] << BOXOSD |
 800fca6:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800fca8:	4b4d      	ldr	r3, [pc, #308]	; (800fde0 <evtMspReceive+0x944>)
 800fcaa:	7d5b      	ldrb	r3, [r3, #21]
 800fcac:	055b      	lsls	r3, r3, #21
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800fcae:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800fcb0:	4b4b      	ldr	r3, [pc, #300]	; (800fde0 <evtMspReceive+0x944>)
 800fcb2:	7d9b      	ldrb	r3, [r3, #22]
 800fcb4:	059b      	lsls	r3, r3, #22
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800fcb6:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800fcb8:	4b49      	ldr	r3, [pc, #292]	; (800fde0 <evtMspReceive+0x944>)
 800fcba:	7ddb      	ldrb	r3, [r3, #23]
 800fcbc:	05db      	lsls	r3, r3, #23
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800fcbe:	4313      	orrs	r3, r2
                f.ARMED << BOXARM;
 800fcc0:	4a41      	ldr	r2, [pc, #260]	; (800fdc8 <evtMspReceive+0x92c>)
 800fcc2:	7852      	ldrb	r2, [r2, #1]
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800fcc4:	4313      	orrs	r3, r2
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fcc6:	617b      	str	r3, [r7, #20]
        for (i = 0; i < numberBoxItems; i++) {
 800fcc8:	2300      	movs	r3, #0
 800fcca:	637b      	str	r3, [r7, #52]	; 0x34
 800fccc:	e018      	b.n	800fd00 <evtMspReceive+0x864>
            int flag = (tmp & (1 << availableBoxes[i]));
 800fcce:	4a45      	ldr	r2, [pc, #276]	; (800fde4 <evtMspReceive+0x948>)
 800fcd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcd2:	4413      	add	r3, r2
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	2301      	movs	r3, #1
 800fcda:	4093      	lsls	r3, r2
 800fcdc:	461a      	mov	r2, r3
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	4013      	ands	r3, r2
 800fce2:	613b      	str	r3, [r7, #16]
            if (flag)
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d007      	beq.n	800fcfa <evtMspReceive+0x85e>
                junk |= 1 << i;
 800fcea:	2201      	movs	r2, #1
 800fcec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcee:	fa02 f303 	lsl.w	r3, r2, r3
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = 0; i < numberBoxItems; i++) {
 800fcfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	637b      	str	r3, [r7, #52]	; 0x34
 800fd00:	4b39      	ldr	r3, [pc, #228]	; (800fde8 <evtMspReceive+0x94c>)
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	461a      	mov	r2, r3
 800fd06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d3e0      	bcc.n	800fcce <evtMspReceive+0x832>
        }
        pifMsp_AddAnswer32(p_owner, junk);
 800fd0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd0e:	68f8      	ldr	r0, [r7, #12]
 800fd10:	f007 ff6a 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, mcfg.current_profile);
 800fd14:	4b2d      	ldr	r3, [pc, #180]	; (800fdcc <evtMspReceive+0x930>)
 800fd16:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	68f8      	ldr	r0, [r7, #12]
 800fd1e:	f007 fed1 	bl	8017ac4 <pifMsp_AddAnswer8>
        break;
 800fd22:	f001 b868 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_RAW_IMU:
        // Retarded hack until multiwiidorks start using real units for sensor data
        if (sensor_set.acc.acc_1G > 1024) {
 800fd26:	4b31      	ldr	r3, [pc, #196]	; (800fdec <evtMspReceive+0x950>)
 800fd28:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800fd2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd30:	d91c      	bls.n	800fd6c <evtMspReceive+0x8d0>
            for (i = 0; i < 3; i++)
 800fd32:	2300      	movs	r3, #0
 800fd34:	637b      	str	r3, [r7, #52]	; 0x34
 800fd36:	e015      	b.n	800fd64 <evtMspReceive+0x8c8>
                pifMsp_AddAnswer16(p_owner, accSmooth[i] / 8);
 800fd38:	4a2d      	ldr	r2, [pc, #180]	; (800fdf0 <evtMspReceive+0x954>)
 800fd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd3c:	009b      	lsls	r3, r3, #2
 800fd3e:	4413      	add	r3, r2
 800fd40:	ed93 7a00 	vldr	s14, [r3]
 800fd44:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800fd48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fd4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd50:	ee17 3a90 	vmov	r3, s15
 800fd54:	b29b      	uxth	r3, r3
 800fd56:	4619      	mov	r1, r3
 800fd58:	68f8      	ldr	r0, [r7, #12]
 800fd5a:	f007 fef9 	bl	8017b50 <pifMsp_AddAnswer16>
            for (i = 0; i < 3; i++)
 800fd5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd60:	3301      	adds	r3, #1
 800fd62:	637b      	str	r3, [r7, #52]	; 0x34
 800fd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd66:	2b02      	cmp	r3, #2
 800fd68:	d9e6      	bls.n	800fd38 <evtMspReceive+0x89c>
 800fd6a:	e017      	b.n	800fd9c <evtMspReceive+0x900>
        } else {
            for (i = 0; i < 3; i++)
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	637b      	str	r3, [r7, #52]	; 0x34
 800fd70:	e011      	b.n	800fd96 <evtMspReceive+0x8fa>
                pifMsp_AddAnswer16(p_owner, accSmooth[i]);
 800fd72:	4a1f      	ldr	r2, [pc, #124]	; (800fdf0 <evtMspReceive+0x954>)
 800fd74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	4413      	add	r3, r2
 800fd7a:	edd3 7a00 	vldr	s15, [r3]
 800fd7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd82:	ee17 3a90 	vmov	r3, s15
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	4619      	mov	r1, r3
 800fd8a:	68f8      	ldr	r0, [r7, #12]
 800fd8c:	f007 fee0 	bl	8017b50 <pifMsp_AddAnswer16>
            for (i = 0; i < 3; i++)
 800fd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd92:	3301      	adds	r3, #1
 800fd94:	637b      	str	r3, [r7, #52]	; 0x34
 800fd96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd98:	2b02      	cmp	r3, #2
 800fd9a:	d9ea      	bls.n	800fd72 <evtMspReceive+0x8d6>
        }
        for (i = 0; i < 3; i++)
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	637b      	str	r3, [r7, #52]	; 0x34
 800fda0:	e00b      	b.n	800fdba <evtMspReceive+0x91e>
            pifMsp_AddAnswer16(p_owner, gyroData[i]);
 800fda2:	4a14      	ldr	r2, [pc, #80]	; (800fdf4 <evtMspReceive+0x958>)
 800fda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fda6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	4619      	mov	r1, r3
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	f007 fece 	bl	8017b50 <pifMsp_AddAnswer16>
        for (i = 0; i < 3; i++)
 800fdb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	637b      	str	r3, [r7, #52]	; 0x34
 800fdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdbc:	2b02      	cmp	r3, #2
 800fdbe:	d9f0      	bls.n	800fda2 <evtMspReceive+0x906>
        for (i = 0; i < 3; i++)
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	637b      	str	r3, [r7, #52]	; 0x34
 800fdc4:	e02a      	b.n	800fe1c <evtMspReceive+0x980>
 800fdc6:	bf00      	nop
 800fdc8:	200016f4 	.word	0x200016f4
 800fdcc:	200008e8 	.word	0x200008e8
 800fdd0:	200019c2 	.word	0x200019c2
 800fdd4:	c000000c 	.word	0xc000000c
 800fdd8:	20001714 	.word	0x20001714
 800fddc:	200014f8 	.word	0x200014f8
 800fde0:	20001794 	.word	0x20001794
 800fde4:	20001b38 	.word	0x20001b38
 800fde8:	20001b51 	.word	0x20001b51
 800fdec:	2000005c 	.word	0x2000005c
 800fdf0:	2000141c 	.word	0x2000141c
 800fdf4:	2000148c 	.word	0x2000148c
            pifMsp_AddAnswer16(p_owner, magADC[i]);
 800fdf8:	4a97      	ldr	r2, [pc, #604]	; (8010058 <evtMspReceive+0xbbc>)
 800fdfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	4413      	add	r3, r2
 800fe00:	edd3 7a00 	vldr	s15, [r3]
 800fe04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe08:	ee17 3a90 	vmov	r3, s15
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	4619      	mov	r1, r3
 800fe10:	68f8      	ldr	r0, [r7, #12]
 800fe12:	f007 fe9d 	bl	8017b50 <pifMsp_AddAnswer16>
        for (i = 0; i < 3; i++)
 800fe16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe18:	3301      	adds	r3, #1
 800fe1a:	637b      	str	r3, [r7, #52]	; 0x34
 800fe1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	d9ea      	bls.n	800fdf8 <evtMspReceive+0x95c>
        break;
 800fe22:	f000 bfe8 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_SERVO:
        pifMsp_AddAnswer(p_owner, (uint8_t *)&servo, 16);
 800fe26:	2210      	movs	r2, #16
 800fe28:	498c      	ldr	r1, [pc, #560]	; (801005c <evtMspReceive+0xbc0>)
 800fe2a:	68f8      	ldr	r0, [r7, #12]
 800fe2c:	f007 ff28 	bl	8017c80 <pifMsp_AddAnswer>
        break;
 800fe30:	f000 bfe1 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 800fe34:	2300      	movs	r3, #0
 800fe36:	637b      	str	r3, [r7, #52]	; 0x34
 800fe38:	e04b      	b.n	800fed2 <evtMspReceive+0xa36>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].min);
 800fe3a:	4989      	ldr	r1, [pc, #548]	; (8010060 <evtMspReceive+0xbc4>)
 800fe3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe3e:	4613      	mov	r3, r2
 800fe40:	009b      	lsls	r3, r3, #2
 800fe42:	4413      	add	r3, r2
 800fe44:	005b      	lsls	r3, r3, #1
 800fe46:	440b      	add	r3, r1
 800fe48:	33b8      	adds	r3, #184	; 0xb8
 800fe4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe4e:	b29b      	uxth	r3, r3
 800fe50:	4619      	mov	r1, r3
 800fe52:	68f8      	ldr	r0, [r7, #12]
 800fe54:	f007 fe7c 	bl	8017b50 <pifMsp_AddAnswer16>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].max);
 800fe58:	4981      	ldr	r1, [pc, #516]	; (8010060 <evtMspReceive+0xbc4>)
 800fe5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe5c:	4613      	mov	r3, r2
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	4413      	add	r3, r2
 800fe62:	005b      	lsls	r3, r3, #1
 800fe64:	440b      	add	r3, r1
 800fe66:	33ba      	adds	r3, #186	; 0xba
 800fe68:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe6c:	b29b      	uxth	r3, r3
 800fe6e:	4619      	mov	r1, r3
 800fe70:	68f8      	ldr	r0, [r7, #12]
 800fe72:	f007 fe6d 	bl	8017b50 <pifMsp_AddAnswer16>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].middle);
 800fe76:	497a      	ldr	r1, [pc, #488]	; (8010060 <evtMspReceive+0xbc4>)
 800fe78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe7a:	4613      	mov	r3, r2
 800fe7c:	009b      	lsls	r3, r3, #2
 800fe7e:	4413      	add	r3, r2
 800fe80:	005b      	lsls	r3, r3, #1
 800fe82:	440b      	add	r3, r1
 800fe84:	33bc      	adds	r3, #188	; 0xbc
 800fe86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	68f8      	ldr	r0, [r7, #12]
 800fe90:	f007 fe5e 	bl	8017b50 <pifMsp_AddAnswer16>
            pifMsp_AddAnswer8(p_owner, cfg.servoConf[i].rate);
 800fe94:	4972      	ldr	r1, [pc, #456]	; (8010060 <evtMspReceive+0xbc4>)
 800fe96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe98:	4613      	mov	r3, r2
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	4413      	add	r3, r2
 800fe9e:	005b      	lsls	r3, r3, #1
 800fea0:	440b      	add	r3, r1
 800fea2:	33be      	adds	r3, #190	; 0xbe
 800fea4:	f993 3000 	ldrsb.w	r3, [r3]
 800fea8:	b2db      	uxtb	r3, r3
 800feaa:	4619      	mov	r1, r3
 800feac:	68f8      	ldr	r0, [r7, #12]
 800feae:	f007 fe09 	bl	8017ac4 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].direction);
 800feb2:	496b      	ldr	r1, [pc, #428]	; (8010060 <evtMspReceive+0xbc4>)
 800feb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800feb6:	4613      	mov	r3, r2
 800feb8:	009b      	lsls	r3, r3, #2
 800feba:	4413      	add	r3, r2
 800febc:	005b      	lsls	r3, r3, #1
 800febe:	440b      	add	r3, r1
 800fec0:	33c0      	adds	r3, #192	; 0xc0
 800fec2:	881b      	ldrh	r3, [r3, #0]
 800fec4:	4619      	mov	r1, r3
 800fec6:	68f8      	ldr	r0, [r7, #12]
 800fec8:	f007 fe42 	bl	8017b50 <pifMsp_AddAnswer16>
        for (i = 0; i < MAX_SERVOS; i++) {
 800fecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fece:	3301      	adds	r3, #1
 800fed0:	637b      	str	r3, [r7, #52]	; 0x34
 800fed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fed4:	2b07      	cmp	r3, #7
 800fed6:	d9b0      	bls.n	800fe3a <evtMspReceive+0x99e>
        }
        break;
 800fed8:	f000 bf8d 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_SET_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 800fedc:	2300      	movs	r3, #0
 800fede:	637b      	str	r3, [r7, #52]	; 0x34
 800fee0:	e04d      	b.n	800ff7e <evtMspReceive+0xae2>
            cfg.servoConf[i].min = pifMsp_ReadData16(p_packet);
 800fee2:	68b8      	ldr	r0, [r7, #8]
 800fee4:	f007 fd58 	bl	8017998 <pifMsp_ReadData16>
 800fee8:	4603      	mov	r3, r0
 800feea:	b218      	sxth	r0, r3
 800feec:	495c      	ldr	r1, [pc, #368]	; (8010060 <evtMspReceive+0xbc4>)
 800feee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fef0:	4613      	mov	r3, r2
 800fef2:	009b      	lsls	r3, r3, #2
 800fef4:	4413      	add	r3, r2
 800fef6:	005b      	lsls	r3, r3, #1
 800fef8:	440b      	add	r3, r1
 800fefa:	33b8      	adds	r3, #184	; 0xb8
 800fefc:	4602      	mov	r2, r0
 800fefe:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = pifMsp_ReadData16(p_packet);
 800ff00:	68b8      	ldr	r0, [r7, #8]
 800ff02:	f007 fd49 	bl	8017998 <pifMsp_ReadData16>
 800ff06:	4603      	mov	r3, r0
 800ff08:	b218      	sxth	r0, r3
 800ff0a:	4955      	ldr	r1, [pc, #340]	; (8010060 <evtMspReceive+0xbc4>)
 800ff0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff0e:	4613      	mov	r3, r2
 800ff10:	009b      	lsls	r3, r3, #2
 800ff12:	4413      	add	r3, r2
 800ff14:	005b      	lsls	r3, r3, #1
 800ff16:	440b      	add	r3, r1
 800ff18:	33ba      	adds	r3, #186	; 0xba
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = pifMsp_ReadData16(p_packet);
 800ff1e:	68b8      	ldr	r0, [r7, #8]
 800ff20:	f007 fd3a 	bl	8017998 <pifMsp_ReadData16>
 800ff24:	4603      	mov	r3, r0
 800ff26:	b218      	sxth	r0, r3
 800ff28:	494d      	ldr	r1, [pc, #308]	; (8010060 <evtMspReceive+0xbc4>)
 800ff2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff2c:	4613      	mov	r3, r2
 800ff2e:	009b      	lsls	r3, r3, #2
 800ff30:	4413      	add	r3, r2
 800ff32:	005b      	lsls	r3, r3, #1
 800ff34:	440b      	add	r3, r1
 800ff36:	33bc      	adds	r3, #188	; 0xbc
 800ff38:	4602      	mov	r2, r0
 800ff3a:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = pifMsp_ReadData8(p_packet);
 800ff3c:	68b8      	ldr	r0, [r7, #8]
 800ff3e:	f007 fd17 	bl	8017970 <pifMsp_ReadData8>
 800ff42:	4603      	mov	r3, r0
 800ff44:	b258      	sxtb	r0, r3
 800ff46:	4946      	ldr	r1, [pc, #280]	; (8010060 <evtMspReceive+0xbc4>)
 800ff48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	009b      	lsls	r3, r3, #2
 800ff4e:	4413      	add	r3, r2
 800ff50:	005b      	lsls	r3, r3, #1
 800ff52:	440b      	add	r3, r1
 800ff54:	33be      	adds	r3, #190	; 0xbe
 800ff56:	4602      	mov	r2, r0
 800ff58:	701a      	strb	r2, [r3, #0]
            cfg.servoConf[i].direction = pifMsp_ReadData16(p_packet);
 800ff5a:	68b8      	ldr	r0, [r7, #8]
 800ff5c:	f007 fd1c 	bl	8017998 <pifMsp_ReadData16>
 800ff60:	4603      	mov	r3, r0
 800ff62:	4618      	mov	r0, r3
 800ff64:	493e      	ldr	r1, [pc, #248]	; (8010060 <evtMspReceive+0xbc4>)
 800ff66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff68:	4613      	mov	r3, r2
 800ff6a:	009b      	lsls	r3, r3, #2
 800ff6c:	4413      	add	r3, r2
 800ff6e:	005b      	lsls	r3, r3, #1
 800ff70:	440b      	add	r3, r1
 800ff72:	33c0      	adds	r3, #192	; 0xc0
 800ff74:	4602      	mov	r2, r0
 800ff76:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 800ff78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	637b      	str	r3, [r7, #52]	; 0x34
 800ff7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff80:	2b07      	cmp	r3, #7
 800ff82:	d9ae      	bls.n	800fee2 <evtMspReceive+0xa46>
        }
        break;
 800ff84:	f000 bf37 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ff88:	2300      	movs	r3, #0
 800ff8a:	637b      	str	r3, [r7, #52]	; 0x34
 800ff8c:	e05c      	b.n	8010048 <evtMspReceive+0xbac>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].targetChannel);
 800ff8e:	4935      	ldr	r1, [pc, #212]	; (8010064 <evtMspReceive+0xbc8>)
 800ff90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff92:	4613      	mov	r3, r2
 800ff94:	00db      	lsls	r3, r3, #3
 800ff96:	1a9b      	subs	r3, r3, r2
 800ff98:	440b      	add	r3, r1
 800ff9a:	33d0      	adds	r3, #208	; 0xd0
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	4619      	mov	r1, r3
 800ffa0:	68f8      	ldr	r0, [r7, #12]
 800ffa2:	f007 fd8f 	bl	8017ac4 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].fromChannel);
 800ffa6:	492f      	ldr	r1, [pc, #188]	; (8010064 <evtMspReceive+0xbc8>)
 800ffa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffaa:	4613      	mov	r3, r2
 800ffac:	00db      	lsls	r3, r3, #3
 800ffae:	1a9b      	subs	r3, r3, r2
 800ffb0:	440b      	add	r3, r1
 800ffb2:	33d1      	adds	r3, #209	; 0xd1
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	68f8      	ldr	r0, [r7, #12]
 800ffba:	f007 fd83 	bl	8017ac4 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].rate);
 800ffbe:	4929      	ldr	r1, [pc, #164]	; (8010064 <evtMspReceive+0xbc8>)
 800ffc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffc2:	4613      	mov	r3, r2
 800ffc4:	00db      	lsls	r3, r3, #3
 800ffc6:	1a9b      	subs	r3, r3, r2
 800ffc8:	440b      	add	r3, r1
 800ffca:	33d2      	adds	r3, #210	; 0xd2
 800ffcc:	f993 3000 	ldrsb.w	r3, [r3]
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	68f8      	ldr	r0, [r7, #12]
 800ffd6:	f007 fd75 	bl	8017ac4 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].speed);
 800ffda:	4922      	ldr	r1, [pc, #136]	; (8010064 <evtMspReceive+0xbc8>)
 800ffdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffde:	4613      	mov	r3, r2
 800ffe0:	00db      	lsls	r3, r3, #3
 800ffe2:	1a9b      	subs	r3, r3, r2
 800ffe4:	440b      	add	r3, r1
 800ffe6:	33d3      	adds	r3, #211	; 0xd3
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	4619      	mov	r1, r3
 800ffec:	68f8      	ldr	r0, [r7, #12]
 800ffee:	f007 fd69 	bl	8017ac4 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].min);
 800fff2:	491c      	ldr	r1, [pc, #112]	; (8010064 <evtMspReceive+0xbc8>)
 800fff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fff6:	4613      	mov	r3, r2
 800fff8:	00db      	lsls	r3, r3, #3
 800fffa:	1a9b      	subs	r3, r3, r2
 800fffc:	440b      	add	r3, r1
 800fffe:	33d4      	adds	r3, #212	; 0xd4
 8010000:	f993 3000 	ldrsb.w	r3, [r3]
 8010004:	b2db      	uxtb	r3, r3
 8010006:	4619      	mov	r1, r3
 8010008:	68f8      	ldr	r0, [r7, #12]
 801000a:	f007 fd5b 	bl	8017ac4 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].max);
 801000e:	4915      	ldr	r1, [pc, #84]	; (8010064 <evtMspReceive+0xbc8>)
 8010010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010012:	4613      	mov	r3, r2
 8010014:	00db      	lsls	r3, r3, #3
 8010016:	1a9b      	subs	r3, r3, r2
 8010018:	440b      	add	r3, r1
 801001a:	33d5      	adds	r3, #213	; 0xd5
 801001c:	f993 3000 	ldrsb.w	r3, [r3]
 8010020:	b2db      	uxtb	r3, r3
 8010022:	4619      	mov	r1, r3
 8010024:	68f8      	ldr	r0, [r7, #12]
 8010026:	f007 fd4d 	bl	8017ac4 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].box);
 801002a:	490e      	ldr	r1, [pc, #56]	; (8010064 <evtMspReceive+0xbc8>)
 801002c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801002e:	4613      	mov	r3, r2
 8010030:	00db      	lsls	r3, r3, #3
 8010032:	1a9b      	subs	r3, r3, r2
 8010034:	440b      	add	r3, r1
 8010036:	33d6      	adds	r3, #214	; 0xd6
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	4619      	mov	r1, r3
 801003c:	68f8      	ldr	r0, [r7, #12]
 801003e:	f007 fd41 	bl	8017ac4 <pifMsp_AddAnswer8>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8010042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010044:	3301      	adds	r3, #1
 8010046:	637b      	str	r3, [r7, #52]	; 0x34
 8010048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801004a:	2b0f      	cmp	r3, #15
 801004c:	d99f      	bls.n	800ff8e <evtMspReceive+0xaf2>
        }
        break;
 801004e:	f000 bed2 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_SET_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8010052:	2300      	movs	r3, #0
 8010054:	637b      	str	r3, [r7, #52]	; 0x34
 8010056:	e06c      	b.n	8010132 <evtMspReceive+0xc96>
 8010058:	20001428 	.word	0x20001428
 801005c:	20000040 	.word	0x20000040
 8010060:	20000e54 	.word	0x20000e54
 8010064:	200008e8 	.word	0x200008e8
            mcfg.customServoMixer[i].targetChannel = pifMsp_ReadData8(p_packet);
 8010068:	68b8      	ldr	r0, [r7, #8]
 801006a:	f007 fc81 	bl	8017970 <pifMsp_ReadData8>
 801006e:	4603      	mov	r3, r0
 8010070:	4618      	mov	r0, r3
 8010072:	49b9      	ldr	r1, [pc, #740]	; (8010358 <evtMspReceive+0xebc>)
 8010074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010076:	4613      	mov	r3, r2
 8010078:	00db      	lsls	r3, r3, #3
 801007a:	1a9b      	subs	r3, r3, r2
 801007c:	440b      	add	r3, r1
 801007e:	33d0      	adds	r3, #208	; 0xd0
 8010080:	4602      	mov	r2, r0
 8010082:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = pifMsp_ReadData8(p_packet);
 8010084:	68b8      	ldr	r0, [r7, #8]
 8010086:	f007 fc73 	bl	8017970 <pifMsp_ReadData8>
 801008a:	4603      	mov	r3, r0
 801008c:	4618      	mov	r0, r3
 801008e:	49b2      	ldr	r1, [pc, #712]	; (8010358 <evtMspReceive+0xebc>)
 8010090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010092:	4613      	mov	r3, r2
 8010094:	00db      	lsls	r3, r3, #3
 8010096:	1a9b      	subs	r3, r3, r2
 8010098:	440b      	add	r3, r1
 801009a:	33d1      	adds	r3, #209	; 0xd1
 801009c:	4602      	mov	r2, r0
 801009e:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = pifMsp_ReadData8(p_packet);
 80100a0:	68b8      	ldr	r0, [r7, #8]
 80100a2:	f007 fc65 	bl	8017970 <pifMsp_ReadData8>
 80100a6:	4603      	mov	r3, r0
 80100a8:	b258      	sxtb	r0, r3
 80100aa:	49ab      	ldr	r1, [pc, #684]	; (8010358 <evtMspReceive+0xebc>)
 80100ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100ae:	4613      	mov	r3, r2
 80100b0:	00db      	lsls	r3, r3, #3
 80100b2:	1a9b      	subs	r3, r3, r2
 80100b4:	440b      	add	r3, r1
 80100b6:	33d2      	adds	r3, #210	; 0xd2
 80100b8:	4602      	mov	r2, r0
 80100ba:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = pifMsp_ReadData8(p_packet);
 80100bc:	68b8      	ldr	r0, [r7, #8]
 80100be:	f007 fc57 	bl	8017970 <pifMsp_ReadData8>
 80100c2:	4603      	mov	r3, r0
 80100c4:	4618      	mov	r0, r3
 80100c6:	49a4      	ldr	r1, [pc, #656]	; (8010358 <evtMspReceive+0xebc>)
 80100c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100ca:	4613      	mov	r3, r2
 80100cc:	00db      	lsls	r3, r3, #3
 80100ce:	1a9b      	subs	r3, r3, r2
 80100d0:	440b      	add	r3, r1
 80100d2:	33d3      	adds	r3, #211	; 0xd3
 80100d4:	4602      	mov	r2, r0
 80100d6:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = pifMsp_ReadData8(p_packet);
 80100d8:	68b8      	ldr	r0, [r7, #8]
 80100da:	f007 fc49 	bl	8017970 <pifMsp_ReadData8>
 80100de:	4603      	mov	r3, r0
 80100e0:	b258      	sxtb	r0, r3
 80100e2:	499d      	ldr	r1, [pc, #628]	; (8010358 <evtMspReceive+0xebc>)
 80100e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100e6:	4613      	mov	r3, r2
 80100e8:	00db      	lsls	r3, r3, #3
 80100ea:	1a9b      	subs	r3, r3, r2
 80100ec:	440b      	add	r3, r1
 80100ee:	33d4      	adds	r3, #212	; 0xd4
 80100f0:	4602      	mov	r2, r0
 80100f2:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = pifMsp_ReadData8(p_packet);
 80100f4:	68b8      	ldr	r0, [r7, #8]
 80100f6:	f007 fc3b 	bl	8017970 <pifMsp_ReadData8>
 80100fa:	4603      	mov	r3, r0
 80100fc:	b258      	sxtb	r0, r3
 80100fe:	4996      	ldr	r1, [pc, #600]	; (8010358 <evtMspReceive+0xebc>)
 8010100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010102:	4613      	mov	r3, r2
 8010104:	00db      	lsls	r3, r3, #3
 8010106:	1a9b      	subs	r3, r3, r2
 8010108:	440b      	add	r3, r1
 801010a:	33d5      	adds	r3, #213	; 0xd5
 801010c:	4602      	mov	r2, r0
 801010e:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = pifMsp_ReadData8(p_packet);
 8010110:	68b8      	ldr	r0, [r7, #8]
 8010112:	f007 fc2d 	bl	8017970 <pifMsp_ReadData8>
 8010116:	4603      	mov	r3, r0
 8010118:	4618      	mov	r0, r3
 801011a:	498f      	ldr	r1, [pc, #572]	; (8010358 <evtMspReceive+0xebc>)
 801011c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801011e:	4613      	mov	r3, r2
 8010120:	00db      	lsls	r3, r3, #3
 8010122:	1a9b      	subs	r3, r3, r2
 8010124:	440b      	add	r3, r1
 8010126:	33d6      	adds	r3, #214	; 0xd6
 8010128:	4602      	mov	r2, r0
 801012a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 801012c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012e:	3301      	adds	r3, #1
 8010130:	637b      	str	r3, [r7, #52]	; 0x34
 8010132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010134:	2b0f      	cmp	r3, #15
 8010136:	d997      	bls.n	8010068 <evtMspReceive+0xbcc>
        }
        loadCustomServoMixer();
 8010138:	f7fa fd84 	bl	800ac44 <loadCustomServoMixer>
        break;
 801013c:	f000 be5b 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_FW_CONFIG:
        pifMsp_AddAnswer8(p_owner, mcfg.fw_althold_dir);
 8010140:	4b85      	ldr	r3, [pc, #532]	; (8010358 <evtMspReceive+0xebc>)
 8010142:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 8010146:	b2db      	uxtb	r3, r3
 8010148:	4619      	mov	r1, r3
 801014a:	68f8      	ldr	r0, [r7, #12]
 801014c:	f007 fcba 	bl	8017ac4 <pifMsp_AddAnswer8>
        // pifMsp_AddAnswer8(p_owner, cfg.fw_vector_thrust); // Future Gui setting?
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxcorr);
 8010150:	4b82      	ldr	r3, [pc, #520]	; (801035c <evtMspReceive+0xec0>)
 8010152:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8010156:	b29b      	uxth	r3, r3
 8010158:	4619      	mov	r1, r3
 801015a:	68f8      	ldr	r0, [r7, #12]
 801015c:	f007 fcf8 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_rudder);
 8010160:	4b7e      	ldr	r3, [pc, #504]	; (801035c <evtMspReceive+0xec0>)
 8010162:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8010166:	b29b      	uxth	r3, r3
 8010168:	4619      	mov	r1, r3
 801016a:	68f8      	ldr	r0, [r7, #12]
 801016c:	f007 fcf0 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxclimb);
 8010170:	4b7a      	ldr	r3, [pc, #488]	; (801035c <evtMspReceive+0xec0>)
 8010172:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8010176:	b29b      	uxth	r3, r3
 8010178:	4619      	mov	r1, r3
 801017a:	68f8      	ldr	r0, [r7, #12]
 801017c:	f007 fce8 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxdive);
 8010180:	4b76      	ldr	r3, [pc, #472]	; (801035c <evtMspReceive+0xec0>)
 8010182:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 8010186:	b29b      	uxth	r3, r3
 8010188:	4619      	mov	r1, r3
 801018a:	68f8      	ldr	r0, [r7, #12]
 801018c:	f007 fce0 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_climb_throttle);
 8010190:	4b72      	ldr	r3, [pc, #456]	; (801035c <evtMspReceive+0xec0>)
 8010192:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8010196:	4619      	mov	r1, r3
 8010198:	68f8      	ldr	r0, [r7, #12]
 801019a:	f007 fcd9 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_cruise_throttle);
 801019e:	4b6f      	ldr	r3, [pc, #444]	; (801035c <evtMspReceive+0xec0>)
 80101a0:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80101a4:	4619      	mov	r1, r3
 80101a6:	68f8      	ldr	r0, [r7, #12]
 80101a8:	f007 fcd2 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_idle_throttle);
 80101ac:	4b6b      	ldr	r3, [pc, #428]	; (801035c <evtMspReceive+0xec0>)
 80101ae:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80101b2:	4619      	mov	r1, r3
 80101b4:	68f8      	ldr	r0, [r7, #12]
 80101b6:	f007 fccb 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_scaler_throttle);
 80101ba:	4b68      	ldr	r3, [pc, #416]	; (801035c <evtMspReceive+0xec0>)
 80101bc:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80101c0:	4619      	mov	r1, r3
 80101c2:	68f8      	ldr	r0, [r7, #12]
 80101c4:	f007 fcc4 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer32(p_owner, cfg.fw_roll_comp); // Float is Not compatible with Gui. Change to _Serialize8
 80101c8:	4b64      	ldr	r3, [pc, #400]	; (801035c <evtMspReceive+0xec0>)
 80101ca:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80101ce:	4619      	mov	r1, r3
 80101d0:	68f8      	ldr	r0, [r7, #12]
 80101d2:	f007 fd09 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, cfg.fw_rth_alt);
 80101d6:	4b61      	ldr	r3, [pc, #388]	; (801035c <evtMspReceive+0xec0>)
 80101d8:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 80101dc:	4619      	mov	r1, r3
 80101de:	68f8      	ldr	r0, [r7, #12]
 80101e0:	f007 fc70 	bl	8017ac4 <pifMsp_AddAnswer8>
        // next added for future use
        pifMsp_AddAnswer32(p_owner, 0);
 80101e4:	2100      	movs	r1, #0
 80101e6:	68f8      	ldr	r0, [r7, #12]
 80101e8:	f007 fcfe 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 80101ec:	2100      	movs	r1, #0
 80101ee:	68f8      	ldr	r0, [r7, #12]
 80101f0:	f007 fcfa 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 80101f4:	2100      	movs	r1, #0
 80101f6:	68f8      	ldr	r0, [r7, #12]
 80101f8:	f007 fcf6 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 80101fc:	2100      	movs	r1, #0
 80101fe:	68f8      	ldr	r0, [r7, #12]
 8010200:	f007 fcf2 	bl	8017be8 <pifMsp_AddAnswer32>
        break;
 8010204:	f000 bdf7 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_SET_FW_CONFIG:
        mcfg.fw_althold_dir = pifMsp_ReadData8(p_packet);
 8010208:	68b8      	ldr	r0, [r7, #8]
 801020a:	f007 fbb1 	bl	8017970 <pifMsp_ReadData8>
 801020e:	4603      	mov	r3, r0
 8010210:	b25a      	sxtb	r2, r3
 8010212:	4b51      	ldr	r3, [pc, #324]	; (8010358 <evtMspReceive+0xebc>)
 8010214:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        // cfg.fw_vector_thrust = pifMsp_ReadData8(p_packet); // Future Gui setting?
        cfg.fw_gps_maxcorr = pifMsp_ReadData16(p_packet);
 8010218:	68b8      	ldr	r0, [r7, #8]
 801021a:	f007 fbbd 	bl	8017998 <pifMsp_ReadData16>
 801021e:	4603      	mov	r3, r0
 8010220:	b21a      	sxth	r2, r3
 8010222:	4b4e      	ldr	r3, [pc, #312]	; (801035c <evtMspReceive+0xec0>)
 8010224:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
        cfg.fw_gps_rudder = pifMsp_ReadData16(p_packet);
 8010228:	68b8      	ldr	r0, [r7, #8]
 801022a:	f007 fbb5 	bl	8017998 <pifMsp_ReadData16>
 801022e:	4603      	mov	r3, r0
 8010230:	b21a      	sxth	r2, r3
 8010232:	4b4a      	ldr	r3, [pc, #296]	; (801035c <evtMspReceive+0xec0>)
 8010234:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
        cfg.fw_gps_maxclimb = pifMsp_ReadData16(p_packet);
 8010238:	68b8      	ldr	r0, [r7, #8]
 801023a:	f007 fbad 	bl	8017998 <pifMsp_ReadData16>
 801023e:	4603      	mov	r3, r0
 8010240:	b21a      	sxth	r2, r3
 8010242:	4b46      	ldr	r3, [pc, #280]	; (801035c <evtMspReceive+0xec0>)
 8010244:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        cfg.fw_gps_maxdive = pifMsp_ReadData16(p_packet);
 8010248:	68b8      	ldr	r0, [r7, #8]
 801024a:	f007 fba5 	bl	8017998 <pifMsp_ReadData16>
 801024e:	4603      	mov	r3, r0
 8010250:	b21a      	sxth	r2, r3
 8010252:	4b42      	ldr	r3, [pc, #264]	; (801035c <evtMspReceive+0xec0>)
 8010254:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
        cfg.fw_climb_throttle = pifMsp_ReadData16(p_packet);
 8010258:	68b8      	ldr	r0, [r7, #8]
 801025a:	f007 fb9d 	bl	8017998 <pifMsp_ReadData16>
 801025e:	4603      	mov	r3, r0
 8010260:	461a      	mov	r2, r3
 8010262:	4b3e      	ldr	r3, [pc, #248]	; (801035c <evtMspReceive+0xec0>)
 8010264:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
        cfg.fw_cruise_throttle = pifMsp_ReadData16(p_packet);
 8010268:	68b8      	ldr	r0, [r7, #8]
 801026a:	f007 fb95 	bl	8017998 <pifMsp_ReadData16>
 801026e:	4603      	mov	r3, r0
 8010270:	461a      	mov	r2, r3
 8010272:	4b3a      	ldr	r3, [pc, #232]	; (801035c <evtMspReceive+0xec0>)
 8010274:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
        cfg.fw_idle_throttle = pifMsp_ReadData16(p_packet);
 8010278:	68b8      	ldr	r0, [r7, #8]
 801027a:	f007 fb8d 	bl	8017998 <pifMsp_ReadData16>
 801027e:	4603      	mov	r3, r0
 8010280:	461a      	mov	r2, r3
 8010282:	4b36      	ldr	r3, [pc, #216]	; (801035c <evtMspReceive+0xec0>)
 8010284:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
        cfg.fw_scaler_throttle = pifMsp_ReadData16(p_packet);
 8010288:	68b8      	ldr	r0, [r7, #8]
 801028a:	f007 fb85 	bl	8017998 <pifMsp_ReadData16>
 801028e:	4603      	mov	r3, r0
 8010290:	461a      	mov	r2, r3
 8010292:	4b32      	ldr	r3, [pc, #200]	; (801035c <evtMspReceive+0xec0>)
 8010294:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
        //cfg.fw_gps_maxdive = pifMsp_ReadData32(p_packet);// Wrong when using float in MSP!... Change to pifMsp_ReadData8
        pifMsp_ReadData32(p_packet); // Just read and skip
 8010298:	68b8      	ldr	r0, [r7, #8]
 801029a:	f007 fb9a 	bl	80179d2 <pifMsp_ReadData32>
        cfg.fw_rth_alt = pifMsp_ReadData8(p_packet);
 801029e:	68b8      	ldr	r0, [r7, #8]
 80102a0:	f007 fb66 	bl	8017970 <pifMsp_ReadData8>
 80102a4:	4603      	mov	r3, r0
 80102a6:	461a      	mov	r2, r3
 80102a8:	4b2c      	ldr	r3, [pc, #176]	; (801035c <evtMspReceive+0xec0>)
 80102aa:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
        // next added for future use
        pifMsp_ReadData32(p_packet);
 80102ae:	68b8      	ldr	r0, [r7, #8]
 80102b0:	f007 fb8f 	bl	80179d2 <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 80102b4:	68b8      	ldr	r0, [r7, #8]
 80102b6:	f007 fb8c 	bl	80179d2 <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 80102ba:	68b8      	ldr	r0, [r7, #8]
 80102bc:	f007 fb89 	bl	80179d2 <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 80102c0:	68b8      	ldr	r0, [r7, #8]
 80102c2:	f007 fb86 	bl	80179d2 <pifMsp_ReadData32>
        break;
 80102c6:	f000 bd96 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_MOTOR:
        pifMsp_AddAnswer(p_owner, (uint8_t *)&motor, 16);
 80102ca:	2210      	movs	r2, #16
 80102cc:	4924      	ldr	r1, [pc, #144]	; (8010360 <evtMspReceive+0xec4>)
 80102ce:	68f8      	ldr	r0, [r7, #12]
 80102d0:	f007 fcd6 	bl	8017c80 <pifMsp_AddAnswer>
        break;
 80102d4:	f000 bd8f 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_RC:
        for (i = 0; i < 8; i++)
 80102d8:	2300      	movs	r3, #0
 80102da:	637b      	str	r3, [r7, #52]	; 0x34
 80102dc:	e00b      	b.n	80102f6 <evtMspReceive+0xe5a>
            pifMsp_AddAnswer16(p_owner, rcData[i]);
 80102de:	4a21      	ldr	r2, [pc, #132]	; (8010364 <evtMspReceive+0xec8>)
 80102e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	4619      	mov	r1, r3
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f007 fc30 	bl	8017b50 <pifMsp_AddAnswer16>
        for (i = 0; i < 8; i++)
 80102f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f2:	3301      	adds	r3, #1
 80102f4:	637b      	str	r3, [r7, #52]	; 0x34
 80102f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f8:	2b07      	cmp	r3, #7
 80102fa:	d9f0      	bls.n	80102de <evtMspReceive+0xe42>
        break;
 80102fc:	f000 bd7b 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_RAW_GPS:
        pifMsp_AddAnswer8(p_owner, f.GPS_FIX);
 8010300:	4b19      	ldr	r3, [pc, #100]	; (8010368 <evtMspReceive+0xecc>)
 8010302:	7adb      	ldrb	r3, [r3, #11]
 8010304:	4619      	mov	r1, r3
 8010306:	68f8      	ldr	r0, [r7, #12]
 8010308:	f007 fbdc 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, GPS_numSat);
 801030c:	4b17      	ldr	r3, [pc, #92]	; (801036c <evtMspReceive+0xed0>)
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	4619      	mov	r1, r3
 8010312:	68f8      	ldr	r0, [r7, #12]
 8010314:	f007 fbd6 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, GPS_coord[LAT]);
 8010318:	4b15      	ldr	r3, [pc, #84]	; (8010370 <evtMspReceive+0xed4>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	4619      	mov	r1, r3
 801031e:	68f8      	ldr	r0, [r7, #12]
 8010320:	f007 fc62 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, GPS_coord[LON]);
 8010324:	4b12      	ldr	r3, [pc, #72]	; (8010370 <evtMspReceive+0xed4>)
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	4619      	mov	r1, r3
 801032a:	68f8      	ldr	r0, [r7, #12]
 801032c:	f007 fc5c 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, GPS_altitude);
 8010330:	4b10      	ldr	r3, [pc, #64]	; (8010374 <evtMspReceive+0xed8>)
 8010332:	881b      	ldrh	r3, [r3, #0]
 8010334:	4619      	mov	r1, r3
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	f007 fc0a 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_speed);
 801033c:	4b0e      	ldr	r3, [pc, #56]	; (8010378 <evtMspReceive+0xedc>)
 801033e:	881b      	ldrh	r3, [r3, #0]
 8010340:	4619      	mov	r1, r3
 8010342:	68f8      	ldr	r0, [r7, #12]
 8010344:	f007 fc04 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_ground_course);
 8010348:	4b0c      	ldr	r3, [pc, #48]	; (801037c <evtMspReceive+0xee0>)
 801034a:	881b      	ldrh	r3, [r3, #0]
 801034c:	4619      	mov	r1, r3
 801034e:	68f8      	ldr	r0, [r7, #12]
 8010350:	f007 fbfe 	bl	8017b50 <pifMsp_AddAnswer16>
        break;
 8010354:	f000 bd4f 	b.w	8010df6 <evtMspReceive+0x195a>
 8010358:	200008e8 	.word	0x200008e8
 801035c:	20000e54 	.word	0x20000e54
 8010360:	2000155c 	.word	0x2000155c
 8010364:	2000172c 	.word	0x2000172c
 8010368:	200016f4 	.word	0x200016f4
 801036c:	200017d8 	.word	0x200017d8
 8010370:	200017b8 	.word	0x200017b8
 8010374:	200017de 	.word	0x200017de
 8010378:	200017e0 	.word	0x200017e0
 801037c:	200017ea 	.word	0x200017ea

    case MSP_COMP_GPS:
        pifMsp_AddAnswer16(p_owner, GPS_distanceToHome);
 8010380:	4bb0      	ldr	r3, [pc, #704]	; (8010644 <evtMspReceive+0x11a8>)
 8010382:	881b      	ldrh	r3, [r3, #0]
 8010384:	4619      	mov	r1, r3
 8010386:	68f8      	ldr	r0, [r7, #12]
 8010388:	f007 fbe2 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_directionToHome);
 801038c:	4bae      	ldr	r3, [pc, #696]	; (8010648 <evtMspReceive+0x11ac>)
 801038e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010392:	b29b      	uxth	r3, r3
 8010394:	4619      	mov	r1, r3
 8010396:	68f8      	ldr	r0, [r7, #12]
 8010398:	f007 fbda 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, GPS_update & 1);
 801039c:	4bab      	ldr	r3, [pc, #684]	; (801064c <evtMspReceive+0x11b0>)
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	f003 0301 	and.w	r3, r3, #1
 80103a4:	b2db      	uxtb	r3, r3
 80103a6:	4619      	mov	r1, r3
 80103a8:	68f8      	ldr	r0, [r7, #12]
 80103aa:	f007 fb8b 	bl	8017ac4 <pifMsp_AddAnswer8>
        break;
 80103ae:	f000 bd22 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_ATTITUDE:
        for (i = 0; i < 2; i++)
 80103b2:	2300      	movs	r3, #0
 80103b4:	637b      	str	r3, [r7, #52]	; 0x34
 80103b6:	e00b      	b.n	80103d0 <evtMspReceive+0xf34>
            pifMsp_AddAnswer16(p_owner, angle[i]);
 80103b8:	4aa5      	ldr	r2, [pc, #660]	; (8010650 <evtMspReceive+0x11b4>)
 80103ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	4619      	mov	r1, r3
 80103c4:	68f8      	ldr	r0, [r7, #12]
 80103c6:	f007 fbc3 	bl	8017b50 <pifMsp_AddAnswer16>
        for (i = 0; i < 2; i++)
 80103ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103cc:	3301      	adds	r3, #1
 80103ce:	637b      	str	r3, [r7, #52]	; 0x34
 80103d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d2:	2b01      	cmp	r3, #1
 80103d4:	d9f0      	bls.n	80103b8 <evtMspReceive+0xf1c>
        pifMsp_AddAnswer16(p_owner, heading);
 80103d6:	4b9f      	ldr	r3, [pc, #636]	; (8010654 <evtMspReceive+0x11b8>)
 80103d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80103dc:	b29b      	uxth	r3, r3
 80103de:	4619      	mov	r1, r3
 80103e0:	68f8      	ldr	r0, [r7, #12]
 80103e2:	f007 fbb5 	bl	8017b50 <pifMsp_AddAnswer16>
        break;
 80103e6:	f000 bd06 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_ALTITUDE:
        pifMsp_AddAnswer32(p_owner, EstAlt);
 80103ea:	4b9b      	ldr	r3, [pc, #620]	; (8010658 <evtMspReceive+0x11bc>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	4619      	mov	r1, r3
 80103f0:	68f8      	ldr	r0, [r7, #12]
 80103f2:	f007 fbf9 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, vario);
 80103f6:	4b99      	ldr	r3, [pc, #612]	; (801065c <evtMspReceive+0x11c0>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	4619      	mov	r1, r3
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f007 fba6 	bl	8017b50 <pifMsp_AddAnswer16>
        break;
 8010404:	f000 bcf7 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_ANALOG:
        pifMsp_AddAnswer8(p_owner, (uint8_t)constrain((int16_t)vbat, 0, 255));
 8010408:	4b95      	ldr	r3, [pc, #596]	; (8010660 <evtMspReceive+0x11c4>)
 801040a:	881b      	ldrh	r3, [r3, #0]
 801040c:	b21b      	sxth	r3, r3
 801040e:	22ff      	movs	r2, #255	; 0xff
 8010410:	2100      	movs	r1, #0
 8010412:	4618      	mov	r0, r3
 8010414:	f7f3 fb54 	bl	8003ac0 <constrain>
 8010418:	4603      	mov	r3, r0
 801041a:	b2db      	uxtb	r3, r3
 801041c:	4619      	mov	r1, r3
 801041e:	68f8      	ldr	r0, [r7, #12]
 8010420:	f007 fb50 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(mAhdrawn, 0, 0xFFFF)); // milliamphours drawn from battery
 8010424:	4b8f      	ldr	r3, [pc, #572]	; (8010664 <evtMspReceive+0x11c8>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801042c:	2100      	movs	r1, #0
 801042e:	4618      	mov	r0, r3
 8010430:	f7f3 fb46 	bl	8003ac0 <constrain>
 8010434:	4603      	mov	r3, r0
 8010436:	b29b      	uxth	r3, r3
 8010438:	4619      	mov	r1, r3
 801043a:	68f8      	ldr	r0, [r7, #12]
 801043c:	f007 fb88 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, rssi);
 8010440:	4b89      	ldr	r3, [pc, #548]	; (8010668 <evtMspReceive+0x11cc>)
 8010442:	881b      	ldrh	r3, [r3, #0]
 8010444:	4619      	mov	r1, r3
 8010446:	68f8      	ldr	r0, [r7, #12]
 8010448:	f007 fb82 	bl	8017b50 <pifMsp_AddAnswer16>
        if (mcfg.multiwiicurrentoutput)
 801044c:	4b87      	ldr	r3, [pc, #540]	; (801066c <evtMspReceive+0x11d0>)
 801044e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8010452:	2b00      	cmp	r3, #0
 8010454:	d017      	beq.n	8010486 <evtMspReceive+0xfea>
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain((abs(amperage) * 10), 0, 0xFFFF)); // send amperage in 0.001 A steps
 8010456:	4b86      	ldr	r3, [pc, #536]	; (8010670 <evtMspReceive+0x11d4>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801045e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8010462:	4613      	mov	r3, r2
 8010464:	009b      	lsls	r3, r3, #2
 8010466:	4413      	add	r3, r2
 8010468:	005b      	lsls	r3, r3, #1
 801046a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801046e:	2100      	movs	r1, #0
 8010470:	4618      	mov	r0, r3
 8010472:	f7f3 fb25 	bl	8003ac0 <constrain>
 8010476:	4603      	mov	r3, r0
 8010478:	b29b      	uxth	r3, r3
 801047a:	4619      	mov	r1, r3
 801047c:	68f8      	ldr	r0, [r7, #12]
 801047e:	f007 fb67 	bl	8017b50 <pifMsp_AddAnswer16>
        else
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
        break;
 8010482:	f000 bcb8 	b.w	8010df6 <evtMspReceive+0x195a>
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
 8010486:	4b7a      	ldr	r3, [pc, #488]	; (8010670 <evtMspReceive+0x11d4>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	bfb8      	it	lt
 801048e:	425b      	neglt	r3, r3
 8010490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010494:	2100      	movs	r1, #0
 8010496:	4618      	mov	r0, r3
 8010498:	f7f3 fb12 	bl	8003ac0 <constrain>
 801049c:	4603      	mov	r3, r0
 801049e:	b29b      	uxth	r3, r3
 80104a0:	4619      	mov	r1, r3
 80104a2:	68f8      	ldr	r0, [r7, #12]
 80104a4:	f007 fb54 	bl	8017b50 <pifMsp_AddAnswer16>
        break;
 80104a8:	f000 bca5 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_RC_TUNING:
        pifMsp_AddAnswer8(p_owner, cfg.rcRate8);
 80104ac:	4b71      	ldr	r3, [pc, #452]	; (8010674 <evtMspReceive+0x11d8>)
 80104ae:	7fdb      	ldrb	r3, [r3, #31]
 80104b0:	4619      	mov	r1, r3
 80104b2:	68f8      	ldr	r0, [r7, #12]
 80104b4:	f007 fb06 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rcExpo8);
 80104b8:	4b6e      	ldr	r3, [pc, #440]	; (8010674 <evtMspReceive+0x11d8>)
 80104ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80104be:	4619      	mov	r1, r3
 80104c0:	68f8      	ldr	r0, [r7, #12]
 80104c2:	f007 faff 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[0]); // here for legacy support
 80104c6:	4b6b      	ldr	r3, [pc, #428]	; (8010674 <evtMspReceive+0x11d8>)
 80104c8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80104cc:	4619      	mov	r1, r3
 80104ce:	68f8      	ldr	r0, [r7, #12]
 80104d0:	f007 faf8 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.yawRate);
 80104d4:	4b67      	ldr	r3, [pc, #412]	; (8010674 <evtMspReceive+0x11d8>)
 80104d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80104da:	4619      	mov	r1, r3
 80104dc:	68f8      	ldr	r0, [r7, #12]
 80104de:	f007 faf1 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.dynThrPID);
 80104e2:	4b64      	ldr	r3, [pc, #400]	; (8010674 <evtMspReceive+0x11d8>)
 80104e4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80104e8:	4619      	mov	r1, r3
 80104ea:	68f8      	ldr	r0, [r7, #12]
 80104ec:	f007 faea 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.thrMid8);
 80104f0:	4b60      	ldr	r3, [pc, #384]	; (8010674 <evtMspReceive+0x11d8>)
 80104f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80104f6:	4619      	mov	r1, r3
 80104f8:	68f8      	ldr	r0, [r7, #12]
 80104fa:	f007 fae3 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.thrExpo8);
 80104fe:	4b5d      	ldr	r3, [pc, #372]	; (8010674 <evtMspReceive+0x11d8>)
 8010500:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010504:	4619      	mov	r1, r3
 8010506:	68f8      	ldr	r0, [r7, #12]
 8010508:	f007 fadc 	bl	8017ac4 <pifMsp_AddAnswer8>
        break;
 801050c:	f000 bc73 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_PID:
        for (i = 0; i < PIDITEMS; i++) {
 8010510:	2300      	movs	r3, #0
 8010512:	637b      	str	r3, [r7, #52]	; 0x34
 8010514:	e036      	b.n	8010584 <evtMspReceive+0x10e8>
            pifMsp_AddAnswer8(p_owner, cfg.P8[i]);
 8010516:	4a57      	ldr	r2, [pc, #348]	; (8010674 <evtMspReceive+0x11d8>)
 8010518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801051a:	4413      	add	r3, r2
 801051c:	3301      	adds	r3, #1
 801051e:	781b      	ldrb	r3, [r3, #0]
 8010520:	4619      	mov	r1, r3
 8010522:	68f8      	ldr	r0, [r7, #12]
 8010524:	f007 face 	bl	8017ac4 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, cfg.I8[i]);
 8010528:	4a52      	ldr	r2, [pc, #328]	; (8010674 <evtMspReceive+0x11d8>)
 801052a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801052c:	4413      	add	r3, r2
 801052e:	330b      	adds	r3, #11
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	4619      	mov	r1, r3
 8010534:	68f8      	ldr	r0, [r7, #12]
 8010536:	f007 fac5 	bl	8017ac4 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, cfg.D8[i]);
 801053a:	4a4e      	ldr	r2, [pc, #312]	; (8010674 <evtMspReceive+0x11d8>)
 801053c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801053e:	4413      	add	r3, r2
 8010540:	3315      	adds	r3, #21
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	4619      	mov	r1, r3
 8010546:	68f8      	ldr	r0, [r7, #12]
 8010548:	f007 fabc 	bl	8017ac4 <pifMsp_AddAnswer8>
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 801054c:	4a49      	ldr	r2, [pc, #292]	; (8010674 <evtMspReceive+0x11d8>)
 801054e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010550:	4413      	add	r3, r2
 8010552:	3301      	adds	r3, #1
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	4618      	mov	r0, r3
 8010558:	4a46      	ldr	r2, [pc, #280]	; (8010674 <evtMspReceive+0x11d8>)
 801055a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801055c:	4413      	add	r3, r2
 801055e:	330b      	adds	r3, #11
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	4619      	mov	r1, r3
 8010564:	4a43      	ldr	r2, [pc, #268]	; (8010674 <evtMspReceive+0x11d8>)
 8010566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010568:	4413      	add	r3, r2
 801056a:	3315      	adds	r3, #21
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	9301      	str	r3, [sp, #4]
 8010570:	9100      	str	r1, [sp, #0]
 8010572:	4603      	mov	r3, r0
 8010574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010576:	4940      	ldr	r1, [pc, #256]	; (8010678 <evtMspReceive+0x11dc>)
 8010578:	2002      	movs	r0, #2
 801057a:	f002 ff13 	bl	80133a4 <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 801057e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010580:	3301      	adds	r3, #1
 8010582:	637b      	str	r3, [r7, #52]	; 0x34
 8010584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010586:	2b09      	cmp	r3, #9
 8010588:	d9c5      	bls.n	8010516 <evtMspReceive+0x107a>
#endif
        }
        break;
 801058a:	f000 bc34 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_PIDNAMES:
        pifMsp_AddAnswer(p_owner, (uint8_t*)pidnames, sizeof(pidnames));
 801058e:	2230      	movs	r2, #48	; 0x30
 8010590:	493a      	ldr	r1, [pc, #232]	; (801067c <evtMspReceive+0x11e0>)
 8010592:	68f8      	ldr	r0, [r7, #12]
 8010594:	f007 fb74 	bl	8017c80 <pifMsp_AddAnswer>
        break;
 8010598:	f000 bc2d 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_BOX:
        for (i = 0; i < numberBoxItems; i++)
 801059c:	2300      	movs	r3, #0
 801059e:	637b      	str	r3, [r7, #52]	; 0x34
 80105a0:	e010      	b.n	80105c4 <evtMspReceive+0x1128>
            pifMsp_AddAnswer16(p_owner, cfg.activate[availableBoxes[i]]);
 80105a2:	4a37      	ldr	r2, [pc, #220]	; (8010680 <evtMspReceive+0x11e4>)
 80105a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a6:	4413      	add	r3, r2
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	4a32      	ldr	r2, [pc, #200]	; (8010674 <evtMspReceive+0x11d8>)
 80105ac:	3312      	adds	r3, #18
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	4413      	add	r3, r2
 80105b2:	685b      	ldr	r3, [r3, #4]
 80105b4:	b29b      	uxth	r3, r3
 80105b6:	4619      	mov	r1, r3
 80105b8:	68f8      	ldr	r0, [r7, #12]
 80105ba:	f007 fac9 	bl	8017b50 <pifMsp_AddAnswer16>
        for (i = 0; i < numberBoxItems; i++)
 80105be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105c0:	3301      	adds	r3, #1
 80105c2:	637b      	str	r3, [r7, #52]	; 0x34
 80105c4:	4b2f      	ldr	r3, [pc, #188]	; (8010684 <evtMspReceive+0x11e8>)
 80105c6:	781b      	ldrb	r3, [r3, #0]
 80105c8:	461a      	mov	r2, r3
 80105ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d3e8      	bcc.n	80105a2 <evtMspReceive+0x1106>
        break;
 80105d0:	f000 bc11 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_BOXNAMES:
        _SerializeBoxNamesReply(p_owner);
 80105d4:	68f8      	ldr	r0, [r7, #12]
 80105d6:	f7fe fddb 	bl	800f190 <_SerializeBoxNamesReply>
        break;
 80105da:	f000 bc0c 	b.w	8010df6 <evtMspReceive+0x195a>

    case MSP_BOXIDS:
        for (i = 0; i < numberBoxItems; i++) {
 80105de:	2300      	movs	r3, #0
 80105e0:	637b      	str	r3, [r7, #52]	; 0x34
 80105e2:	e028      	b.n	8010636 <evtMspReceive+0x119a>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 80105e4:	2300      	movs	r3, #0
 80105e6:	633b      	str	r3, [r7, #48]	; 0x30
 80105e8:	e01f      	b.n	801062a <evtMspReceive+0x118e>
                if (boxes[j].permanentId == availableBoxes[i]) {
 80105ea:	4927      	ldr	r1, [pc, #156]	; (8010688 <evtMspReceive+0x11ec>)
 80105ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105ee:	4613      	mov	r3, r2
 80105f0:	005b      	lsls	r3, r3, #1
 80105f2:	4413      	add	r3, r2
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	440b      	add	r3, r1
 80105f8:	3308      	adds	r3, #8
 80105fa:	781a      	ldrb	r2, [r3, #0]
 80105fc:	4920      	ldr	r1, [pc, #128]	; (8010680 <evtMspReceive+0x11e4>)
 80105fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010600:	440b      	add	r3, r1
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	429a      	cmp	r2, r3
 8010606:	d10d      	bne.n	8010624 <evtMspReceive+0x1188>
                    pifMsp_AddAnswer8(p_owner, boxes[j].permanentId);
 8010608:	491f      	ldr	r1, [pc, #124]	; (8010688 <evtMspReceive+0x11ec>)
 801060a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801060c:	4613      	mov	r3, r2
 801060e:	005b      	lsls	r3, r3, #1
 8010610:	4413      	add	r3, r2
 8010612:	009b      	lsls	r3, r3, #2
 8010614:	440b      	add	r3, r1
 8010616:	3308      	adds	r3, #8
 8010618:	781b      	ldrb	r3, [r3, #0]
 801061a:	4619      	mov	r1, r3
 801061c:	68f8      	ldr	r0, [r7, #12]
 801061e:	f007 fa51 	bl	8017ac4 <pifMsp_AddAnswer8>
                    break;
 8010622:	e005      	b.n	8010630 <evtMspReceive+0x1194>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 8010624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010626:	3301      	adds	r3, #1
 8010628:	633b      	str	r3, [r7, #48]	; 0x30
 801062a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801062c:	2b18      	cmp	r3, #24
 801062e:	d9dc      	bls.n	80105ea <evtMspReceive+0x114e>
        for (i = 0; i < numberBoxItems; i++) {
 8010630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010632:	3301      	adds	r3, #1
 8010634:	637b      	str	r3, [r7, #52]	; 0x34
 8010636:	4b13      	ldr	r3, [pc, #76]	; (8010684 <evtMspReceive+0x11e8>)
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	461a      	mov	r2, r3
 801063c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801063e:	4293      	cmp	r3, r2
 8010640:	d3d0      	bcc.n	80105e4 <evtMspReceive+0x1148>
                }
            }
        }
        break;
 8010642:	e3d8      	b.n	8010df6 <evtMspReceive+0x195a>
 8010644:	200017da 	.word	0x200017da
 8010648:	200017dc 	.word	0x200017dc
 801064c:	200017e2 	.word	0x200017e2
 8010650:	2000149c 	.word	0x2000149c
 8010654:	200019c0 	.word	0x200019c0
 8010658:	20001460 	.word	0x20001460
 801065c:	20001478 	.word	0x20001478
 8010660:	20001718 	.word	0x20001718
 8010664:	20001720 	.word	0x20001720
 8010668:	20001780 	.word	0x20001780
 801066c:	200008e8 	.word	0x200008e8
 8010670:	2000171c 	.word	0x2000171c
 8010674:	20000e54 	.word	0x20000e54
 8010678:	0802724c 	.word	0x0802724c
 801067c:	0802904c 	.word	0x0802904c
 8010680:	20001b38 	.word	0x20001b38
 8010684:	20001b51 	.word	0x20001b51
 8010688:	08028f14 	.word	0x08028f14

    case MSP_MISC:
        pifMsp_AddAnswer16(p_owner, mcfg.midrc);
 801068c:	4ba8      	ldr	r3, [pc, #672]	; (8010930 <evtMspReceive+0x1494>)
 801068e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8010692:	4619      	mov	r1, r3
 8010694:	68f8      	ldr	r0, [r7, #12]
 8010696:	f007 fa5b 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.minthrottle);
 801069a:	4ba5      	ldr	r3, [pc, #660]	; (8010930 <evtMspReceive+0x1494>)
 801069c:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 80106a0:	4619      	mov	r1, r3
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f007 fa54 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.maxthrottle);
 80106a8:	4ba1      	ldr	r3, [pc, #644]	; (8010930 <evtMspReceive+0x1494>)
 80106aa:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 80106ae:	4619      	mov	r1, r3
 80106b0:	68f8      	ldr	r0, [r7, #12]
 80106b2:	f007 fa4d 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.mincommand);
 80106b6:	4b9e      	ldr	r3, [pc, #632]	; (8010930 <evtMspReceive+0x1494>)
 80106b8:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 80106bc:	4619      	mov	r1, r3
 80106be:	68f8      	ldr	r0, [r7, #12]
 80106c0:	f007 fa46 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.failsafe_throttle);
 80106c4:	4b9b      	ldr	r3, [pc, #620]	; (8010934 <evtMspReceive+0x1498>)
 80106c6:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 80106ca:	4619      	mov	r1, r3
 80106cc:	68f8      	ldr	r0, [r7, #12]
 80106ce:	f007 fa3f 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_type);
 80106d2:	4b97      	ldr	r3, [pc, #604]	; (8010930 <evtMspReceive+0x1494>)
 80106d4:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80106d8:	4619      	mov	r1, r3
 80106da:	68f8      	ldr	r0, [r7, #12]
 80106dc:	f007 f9f2 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_baudrate);
 80106e0:	4b93      	ldr	r3, [pc, #588]	; (8010930 <evtMspReceive+0x1494>)
 80106e2:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 80106e6:	b2db      	uxtb	r3, r3
 80106e8:	4619      	mov	r1, r3
 80106ea:	68f8      	ldr	r0, [r7, #12]
 80106ec:	f007 f9ea 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_ubx_sbas);
 80106f0:	4b8f      	ldr	r3, [pc, #572]	; (8010930 <evtMspReceive+0x1494>)
 80106f2:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	4619      	mov	r1, r3
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	f007 f9e2 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.multiwiicurrentoutput);
 8010700:	4b8b      	ldr	r3, [pc, #556]	; (8010930 <evtMspReceive+0x1494>)
 8010702:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8010706:	4619      	mov	r1, r3
 8010708:	68f8      	ldr	r0, [r7, #12]
 801070a:	f007 f9db 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.rssi_aux_channel);
 801070e:	4b88      	ldr	r3, [pc, #544]	; (8010930 <evtMspReceive+0x1494>)
 8010710:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8010714:	4619      	mov	r1, r3
 8010716:	68f8      	ldr	r0, [r7, #12]
 8010718:	f007 f9d4 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, 0);
 801071c:	2100      	movs	r1, #0
 801071e:	68f8      	ldr	r0, [r7, #12]
 8010720:	f007 f9d0 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, cfg.mag_declination / 10); // TODO check this shit
 8010724:	4b83      	ldr	r3, [pc, #524]	; (8010934 <evtMspReceive+0x1498>)
 8010726:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801072a:	4a83      	ldr	r2, [pc, #524]	; (8010938 <evtMspReceive+0x149c>)
 801072c:	fb82 1203 	smull	r1, r2, r2, r3
 8010730:	1092      	asrs	r2, r2, #2
 8010732:	17db      	asrs	r3, r3, #31
 8010734:	1ad3      	subs	r3, r2, r3
 8010736:	b21b      	sxth	r3, r3
 8010738:	b29b      	uxth	r3, r3
 801073a:	4619      	mov	r1, r3
 801073c:	68f8      	ldr	r0, [r7, #12]
 801073e:	f007 fa07 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatscale);
 8010742:	4b7b      	ldr	r3, [pc, #492]	; (8010930 <evtMspReceive+0x1494>)
 8010744:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8010748:	4619      	mov	r1, r3
 801074a:	68f8      	ldr	r0, [r7, #12]
 801074c:	f007 f9ba 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatmincellvoltage);
 8010750:	4b77      	ldr	r3, [pc, #476]	; (8010930 <evtMspReceive+0x1494>)
 8010752:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 8010756:	4619      	mov	r1, r3
 8010758:	68f8      	ldr	r0, [r7, #12]
 801075a:	f007 f9b3 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatmaxcellvoltage);
 801075e:	4b74      	ldr	r3, [pc, #464]	; (8010930 <evtMspReceive+0x1494>)
 8010760:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8010764:	4619      	mov	r1, r3
 8010766:	68f8      	ldr	r0, [r7, #12]
 8010768:	f007 f9ac 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatwarningcellvoltage);
 801076c:	4b70      	ldr	r3, [pc, #448]	; (8010930 <evtMspReceive+0x1494>)
 801076e:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8010772:	4619      	mov	r1, r3
 8010774:	68f8      	ldr	r0, [r7, #12]
 8010776:	f007 f9a5 	bl	8017ac4 <pifMsp_AddAnswer8>
        break;
 801077a:	e33c      	b.n	8010df6 <evtMspReceive+0x195a>

    case MSP_MOTOR_PINS:
        for (i = 0; i < 8; i++)
 801077c:	2300      	movs	r3, #0
 801077e:	637b      	str	r3, [r7, #52]	; 0x34
 8010780:	e00a      	b.n	8010798 <evtMspReceive+0x12fc>
            pifMsp_AddAnswer8(p_owner, i + 1);
 8010782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010784:	b2db      	uxtb	r3, r3
 8010786:	3301      	adds	r3, #1
 8010788:	b2db      	uxtb	r3, r3
 801078a:	4619      	mov	r1, r3
 801078c:	68f8      	ldr	r0, [r7, #12]
 801078e:	f007 f999 	bl	8017ac4 <pifMsp_AddAnswer8>
        for (i = 0; i < 8; i++)
 8010792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010794:	3301      	adds	r3, #1
 8010796:	637b      	str	r3, [r7, #52]	; 0x34
 8010798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801079a:	2b07      	cmp	r3, #7
 801079c:	d9f1      	bls.n	8010782 <evtMspReceive+0x12e6>
        break;
 801079e:	e32a      	b.n	8010df6 <evtMspReceive+0x195a>

#ifdef GPS
    case MSP_WP:
        wp_no = pifMsp_ReadData8(p_packet);    // get the wp number
 80107a0:	68b8      	ldr	r0, [r7, #8]
 80107a2:	f007 f8e5 	bl	8017970 <pifMsp_ReadData8>
 80107a6:	4603      	mov	r3, r0
 80107a8:	76fb      	strb	r3, [r7, #27]
        if (wp_no == 0) {
 80107aa:	7efb      	ldrb	r3, [r7, #27]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d106      	bne.n	80107be <evtMspReceive+0x1322>
            lat = GPS_home[LAT];
 80107b0:	4b62      	ldr	r3, [pc, #392]	; (801093c <evtMspReceive+0x14a0>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_home[LON];
 80107b6:	4b61      	ldr	r3, [pc, #388]	; (801093c <evtMspReceive+0x14a0>)
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	627b      	str	r3, [r7, #36]	; 0x24
 80107bc:	e008      	b.n	80107d0 <evtMspReceive+0x1334>
        } else if (wp_no == 16) {
 80107be:	7efb      	ldrb	r3, [r7, #27]
 80107c0:	2b10      	cmp	r3, #16
 80107c2:	d105      	bne.n	80107d0 <evtMspReceive+0x1334>
            lat = GPS_hold[LAT];
 80107c4:	4b5e      	ldr	r3, [pc, #376]	; (8010940 <evtMspReceive+0x14a4>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_hold[LON];
 80107ca:	4b5d      	ldr	r3, [pc, #372]	; (8010940 <evtMspReceive+0x14a4>)
 80107cc:	685b      	ldr	r3, [r3, #4]
 80107ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
        pifMsp_AddAnswer8(p_owner, wp_no);
 80107d0:	7efb      	ldrb	r3, [r7, #27]
 80107d2:	4619      	mov	r1, r3
 80107d4:	68f8      	ldr	r0, [r7, #12]
 80107d6:	f007 f975 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, lat);
 80107da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107dc:	4619      	mov	r1, r3
 80107de:	68f8      	ldr	r0, [r7, #12]
 80107e0:	f007 fa02 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, lon);
 80107e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e6:	4619      	mov	r1, r3
 80107e8:	68f8      	ldr	r0, [r7, #12]
 80107ea:	f007 f9fd 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, AltHold);           // altitude (cm) will come here -- temporary implementation to test feature with apps
 80107ee:	4b55      	ldr	r3, [pc, #340]	; (8010944 <evtMspReceive+0x14a8>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	4619      	mov	r1, r3
 80107f4:	68f8      	ldr	r0, [r7, #12]
 80107f6:	f007 f9f7 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, 0);                 // heading  will come here (deg)
 80107fa:	2100      	movs	r1, #0
 80107fc:	68f8      	ldr	r0, [r7, #12]
 80107fe:	f007 f9a7 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, 0);                 // time to stay (ms) will come here
 8010802:	2100      	movs	r1, #0
 8010804:	68f8      	ldr	r0, [r7, #12]
 8010806:	f007 f9a3 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, 0);                  // nav flag will come here
 801080a:	2100      	movs	r1, #0
 801080c:	68f8      	ldr	r0, [r7, #12]
 801080e:	f007 f959 	bl	8017ac4 <pifMsp_AddAnswer8>
        break;
 8010812:	e2f0      	b.n	8010df6 <evtMspReceive+0x195a>

    case MSP_SET_WP:
        wp_no = pifMsp_ReadData8(p_packet);    //get the wp number
 8010814:	68b8      	ldr	r0, [r7, #8]
 8010816:	f007 f8ab 	bl	8017970 <pifMsp_ReadData8>
 801081a:	4603      	mov	r3, r0
 801081c:	76fb      	strb	r3, [r7, #27]
        lat = pifMsp_ReadData32(p_packet);
 801081e:	68b8      	ldr	r0, [r7, #8]
 8010820:	f007 f8d7 	bl	80179d2 <pifMsp_ReadData32>
 8010824:	4603      	mov	r3, r0
 8010826:	62bb      	str	r3, [r7, #40]	; 0x28
        lon = pifMsp_ReadData32(p_packet);
 8010828:	68b8      	ldr	r0, [r7, #8]
 801082a:	f007 f8d2 	bl	80179d2 <pifMsp_ReadData32>
 801082e:	4603      	mov	r3, r0
 8010830:	627b      	str	r3, [r7, #36]	; 0x24
        alt = pifMsp_ReadData32(p_packet);     // to set altitude (cm)
 8010832:	68b8      	ldr	r0, [r7, #8]
 8010834:	f007 f8cd 	bl	80179d2 <pifMsp_ReadData32>
 8010838:	4603      	mov	r3, r0
 801083a:	623b      	str	r3, [r7, #32]
        pifMsp_ReadData16(p_packet);           // future: to set heading (deg)
 801083c:	68b8      	ldr	r0, [r7, #8]
 801083e:	f007 f8ab 	bl	8017998 <pifMsp_ReadData16>
        pifMsp_ReadData16(p_packet);           // future: to set time to stay (ms)
 8010842:	68b8      	ldr	r0, [r7, #8]
 8010844:	f007 f8a8 	bl	8017998 <pifMsp_ReadData16>
        pifMsp_ReadData8(p_packet);            // future: to set nav flag
 8010848:	68b8      	ldr	r0, [r7, #8]
 801084a:	f007 f891 	bl	8017970 <pifMsp_ReadData8>
        if (wp_no == 0) {
 801084e:	7efb      	ldrb	r3, [r7, #27]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d113      	bne.n	801087c <evtMspReceive+0x13e0>
            GPS_home[LAT] = lat;
 8010854:	4a39      	ldr	r2, [pc, #228]	; (801093c <evtMspReceive+0x14a0>)
 8010856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010858:	6013      	str	r3, [r2, #0]
            GPS_home[LON] = lon;
 801085a:	4a38      	ldr	r2, [pc, #224]	; (801093c <evtMspReceive+0x14a0>)
 801085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085e:	6053      	str	r3, [r2, #4]
            f.GPS_HOME_MODE = 0;        // with this flag, GPS_set_next_wp will be called in the next loop -- OK with SERIAL GPS / OK with I2C GPS
 8010860:	4b39      	ldr	r3, [pc, #228]	; (8010948 <evtMspReceive+0x14ac>)
 8010862:	2200      	movs	r2, #0
 8010864:	71da      	strb	r2, [r3, #7]
            f.GPS_FIX_HOME = 1;
 8010866:	4b38      	ldr	r3, [pc, #224]	; (8010948 <evtMspReceive+0x14ac>)
 8010868:	2201      	movs	r2, #1
 801086a:	731a      	strb	r2, [r3, #12]
            if (alt != 0)
 801086c:	6a3b      	ldr	r3, [r7, #32]
 801086e:	2b00      	cmp	r3, #0
 8010870:	f000 82ba 	beq.w	8010de8 <evtMspReceive+0x194c>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010874:	4a33      	ldr	r2, [pc, #204]	; (8010944 <evtMspReceive+0x14a8>)
 8010876:	6a3b      	ldr	r3, [r7, #32]
 8010878:	6013      	str	r3, [r2, #0]
            if (alt != 0)
                AltHold = alt;          // temporary implementation to test feature with apps
            nav_mode = NAV_MODE_WP;
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
        }
        break;
 801087a:	e2b5      	b.n	8010de8 <evtMspReceive+0x194c>
        } else if (wp_no == 16) {       // OK with SERIAL GPS  --  NOK for I2C GPS / needs more code dev in order to inject GPS coord inside I2C GPS
 801087c:	7efb      	ldrb	r3, [r7, #27]
 801087e:	2b10      	cmp	r3, #16
 8010880:	f040 82b2 	bne.w	8010de8 <evtMspReceive+0x194c>
            GPS_hold[LAT] = lat;
 8010884:	4a2e      	ldr	r2, [pc, #184]	; (8010940 <evtMspReceive+0x14a4>)
 8010886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010888:	6013      	str	r3, [r2, #0]
            GPS_hold[LON] = lon;
 801088a:	4a2d      	ldr	r2, [pc, #180]	; (8010940 <evtMspReceive+0x14a4>)
 801088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088e:	6053      	str	r3, [r2, #4]
            if (alt != 0)
 8010890:	6a3b      	ldr	r3, [r7, #32]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d002      	beq.n	801089c <evtMspReceive+0x1400>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010896:	4a2b      	ldr	r2, [pc, #172]	; (8010944 <evtMspReceive+0x14a8>)
 8010898:	6a3b      	ldr	r3, [r7, #32]
 801089a:	6013      	str	r3, [r2, #0]
            nav_mode = NAV_MODE_WP;
 801089c:	4b2b      	ldr	r3, [pc, #172]	; (801094c <evtMspReceive+0x14b0>)
 801089e:	2202      	movs	r2, #2
 80108a0:	701a      	strb	r2, [r3, #0]
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 80108a2:	492b      	ldr	r1, [pc, #172]	; (8010950 <evtMspReceive+0x14b4>)
 80108a4:	4826      	ldr	r0, [pc, #152]	; (8010940 <evtMspReceive+0x14a4>)
 80108a6:	f7f8 faf7 	bl	8008e98 <GPS_set_next_wp>
        break;
 80108aa:	e29d      	b.n	8010de8 <evtMspReceive+0x194c>
#endif  // GPS

    case MSP_RESET_CONF:
        if (!f.ARMED)
 80108ac:	4b26      	ldr	r3, [pc, #152]	; (8010948 <evtMspReceive+0x14ac>)
 80108ae:	785b      	ldrb	r3, [r3, #1]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	f040 829b 	bne.w	8010dec <evtMspReceive+0x1950>
            checkFirstTime(true);
 80108b6:	2001      	movs	r0, #1
 80108b8:	f7f5 ff06 	bl	80066c8 <checkFirstTime>
        break;
 80108bc:	e296      	b.n	8010dec <evtMspReceive+0x1950>

    case MSP_ACC_CALIBRATION:
        if (!f.ARMED)
 80108be:	4b22      	ldr	r3, [pc, #136]	; (8010948 <evtMspReceive+0x14ac>)
 80108c0:	785b      	ldrb	r3, [r3, #1]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	f040 8294 	bne.w	8010df0 <evtMspReceive+0x1954>
            calibratingA = CALIBRATING_ACC_CYCLES;
 80108c8:	4b22      	ldr	r3, [pc, #136]	; (8010954 <evtMspReceive+0x14b8>)
 80108ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80108ce:	801a      	strh	r2, [r3, #0]
        break;
 80108d0:	e28e      	b.n	8010df0 <evtMspReceive+0x1954>

    case MSP_MAG_CALIBRATION:
        if (!f.ARMED)
 80108d2:	4b1d      	ldr	r3, [pc, #116]	; (8010948 <evtMspReceive+0x14ac>)
 80108d4:	785b      	ldrb	r3, [r3, #1]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	f040 828c 	bne.w	8010df4 <evtMspReceive+0x1958>
            f.CALIBRATE_MAG = 1;
 80108dc:	4b1a      	ldr	r3, [pc, #104]	; (8010948 <evtMspReceive+0x14ac>)
 80108de:	2201      	movs	r2, #1
 80108e0:	739a      	strb	r2, [r3, #14]
        break;
 80108e2:	e287      	b.n	8010df4 <evtMspReceive+0x1958>

    case MSP_EEPROM_WRITE:
        if (f.ARMED) {
 80108e4:	4b18      	ldr	r3, [pc, #96]	; (8010948 <evtMspReceive+0x14ac>)
 80108e6:	785b      	ldrb	r3, [r3, #1]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d004      	beq.n	80108f6 <evtMspReceive+0x145a>
            pifMsp_MakeError(p_owner, p_packet);
 80108ec:	68b9      	ldr	r1, [r7, #8]
 80108ee:	68f8      	ldr	r0, [r7, #12]
 80108f0:	f007 fa18 	bl	8017d24 <pifMsp_MakeError>
        } else {
            writeEEPROM(0, true);
        }
        break;
 80108f4:	e27f      	b.n	8010df6 <evtMspReceive+0x195a>
            writeEEPROM(0, true);
 80108f6:	2101      	movs	r1, #1
 80108f8:	2000      	movs	r0, #0
 80108fa:	f7f5 fe63 	bl	80065c4 <writeEEPROM>
        break;
 80108fe:	e27a      	b.n	8010df6 <evtMspReceive+0x195a>

    case MSP_DEBUG:
        // make use of this crap, output some useful QA statistics
        if (mcfg.looptime) debug[0] = (int16_t)cycleTime - mcfg.looptime + mcfg.looptime / 10;
 8010900:	4b0b      	ldr	r3, [pc, #44]	; (8010930 <evtMspReceive+0x1494>)
 8010902:	899b      	ldrh	r3, [r3, #12]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d02d      	beq.n	8010964 <evtMspReceive+0x14c8>
 8010908:	4b13      	ldr	r3, [pc, #76]	; (8010958 <evtMspReceive+0x14bc>)
 801090a:	881a      	ldrh	r2, [r3, #0]
 801090c:	4b08      	ldr	r3, [pc, #32]	; (8010930 <evtMspReceive+0x1494>)
 801090e:	899b      	ldrh	r3, [r3, #12]
 8010910:	1ad3      	subs	r3, r2, r3
 8010912:	b29a      	uxth	r2, r3
 8010914:	4b06      	ldr	r3, [pc, #24]	; (8010930 <evtMspReceive+0x1494>)
 8010916:	899b      	ldrh	r3, [r3, #12]
 8010918:	4910      	ldr	r1, [pc, #64]	; (801095c <evtMspReceive+0x14c0>)
 801091a:	fba1 1303 	umull	r1, r3, r1, r3
 801091e:	08db      	lsrs	r3, r3, #3
 8010920:	b29b      	uxth	r3, r3
 8010922:	4413      	add	r3, r2
 8010924:	b29b      	uxth	r3, r3
 8010926:	b21a      	sxth	r2, r3
 8010928:	4b0d      	ldr	r3, [pc, #52]	; (8010960 <evtMspReceive+0x14c4>)
 801092a:	801a      	strh	r2, [r3, #0]
 801092c:	e01f      	b.n	801096e <evtMspReceive+0x14d2>
 801092e:	bf00      	nop
 8010930:	200008e8 	.word	0x200008e8
 8010934:	20000e54 	.word	0x20000e54
 8010938:	66666667 	.word	0x66666667
 801093c:	200017c0 	.word	0x200017c0
 8010940:	200017cc 	.word	0x200017cc
 8010944:	20001468 	.word	0x20001468
 8010948:	200016f4 	.word	0x200016f4
 801094c:	200017f4 	.word	0x200017f4
 8010950:	200017d0 	.word	0x200017d0
 8010954:	200019ba 	.word	0x200019ba
 8010958:	20001714 	.word	0x20001714
 801095c:	cccccccd 	.word	0xcccccccd
 8010960:	2000170c 	.word	0x2000170c
        else debug[0] = cycleTime;
 8010964:	4ba6      	ldr	r3, [pc, #664]	; (8010c00 <evtMspReceive+0x1764>)
 8010966:	881b      	ldrh	r3, [r3, #0]
 8010968:	b21a      	sxth	r2, r3
 801096a:	4ba6      	ldr	r3, [pc, #664]	; (8010c04 <evtMspReceive+0x1768>)
 801096c:	801a      	strh	r2, [r3, #0]
        debug[1] = pif_performance._use_rate;
 801096e:	4ba6      	ldr	r3, [pc, #664]	; (8010c08 <evtMspReceive+0x176c>)
 8010970:	791b      	ldrb	r3, [r3, #4]
 8010972:	b21a      	sxth	r2, r3
 8010974:	4ba3      	ldr	r3, [pc, #652]	; (8010c04 <evtMspReceive+0x1768>)
 8010976:	805a      	strh	r2, [r3, #2]
        debug[3] = ((g_crystal_clock / 1000000) * 1000) + (g_core_clock / 1000000);         // XX0YY [crystal clock : core clock]
 8010978:	4ba4      	ldr	r3, [pc, #656]	; (8010c0c <evtMspReceive+0x1770>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	4aa4      	ldr	r2, [pc, #656]	; (8010c10 <evtMspReceive+0x1774>)
 801097e:	fba2 2303 	umull	r2, r3, r2, r3
 8010982:	0c9b      	lsrs	r3, r3, #18
 8010984:	b29b      	uxth	r3, r3
 8010986:	461a      	mov	r2, r3
 8010988:	0152      	lsls	r2, r2, #5
 801098a:	1ad2      	subs	r2, r2, r3
 801098c:	0092      	lsls	r2, r2, #2
 801098e:	4413      	add	r3, r2
 8010990:	00db      	lsls	r3, r3, #3
 8010992:	b29a      	uxth	r2, r3
 8010994:	4b9f      	ldr	r3, [pc, #636]	; (8010c14 <evtMspReceive+0x1778>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	499d      	ldr	r1, [pc, #628]	; (8010c10 <evtMspReceive+0x1774>)
 801099a:	fba1 1303 	umull	r1, r3, r1, r3
 801099e:	0c9b      	lsrs	r3, r3, #18
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	4413      	add	r3, r2
 80109a4:	b29b      	uxth	r3, r3
 80109a6:	b21a      	sxth	r2, r3
 80109a8:	4b96      	ldr	r3, [pc, #600]	; (8010c04 <evtMspReceive+0x1768>)
 80109aa:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 80109ac:	2300      	movs	r3, #0
 80109ae:	637b      	str	r3, [r7, #52]	; 0x34
 80109b0:	e00b      	b.n	80109ca <evtMspReceive+0x152e>
            pifMsp_AddAnswer16(p_owner, debug[i]);      // 4 variables are here for general monitoring purpose
 80109b2:	4a94      	ldr	r2, [pc, #592]	; (8010c04 <evtMspReceive+0x1768>)
 80109b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	4619      	mov	r1, r3
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	f007 f8c6 	bl	8017b50 <pifMsp_AddAnswer16>
        for (i = 0; i < 4; i++)
 80109c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109c6:	3301      	adds	r3, #1
 80109c8:	637b      	str	r3, [r7, #52]	; 0x34
 80109ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109cc:	2b03      	cmp	r3, #3
 80109ce:	d9f0      	bls.n	80109b2 <evtMspReceive+0x1516>
        break;
 80109d0:	e211      	b.n	8010df6 <evtMspReceive+0x195a>

    // Additional commands that are not compatible with MultiWii
    case MSP_ACC_TRIM:
        pifMsp_AddAnswer16(p_owner, cfg.angleTrim[PITCH]);
 80109d2:	4b91      	ldr	r3, [pc, #580]	; (8010c18 <evtMspReceive+0x177c>)
 80109d4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80109d8:	b29b      	uxth	r3, r3
 80109da:	4619      	mov	r1, r3
 80109dc:	68f8      	ldr	r0, [r7, #12]
 80109de:	f007 f8b7 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.angleTrim[ROLL]);
 80109e2:	4b8d      	ldr	r3, [pc, #564]	; (8010c18 <evtMspReceive+0x177c>)
 80109e4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	4619      	mov	r1, r3
 80109ec:	68f8      	ldr	r0, [r7, #12]
 80109ee:	f007 f8af 	bl	8017b50 <pifMsp_AddAnswer16>
        break;
 80109f2:	e200      	b.n	8010df6 <evtMspReceive+0x195a>

    case MSP_UID:
        pifMsp_AddAnswer32(p_owner, g_unique_id[0]);
 80109f4:	4b89      	ldr	r3, [pc, #548]	; (8010c1c <evtMspReceive+0x1780>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4619      	mov	r1, r3
 80109fa:	68f8      	ldr	r0, [r7, #12]
 80109fc:	f007 f8f4 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, g_unique_id[1]);
 8010a00:	4b86      	ldr	r3, [pc, #536]	; (8010c1c <evtMspReceive+0x1780>)
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	4619      	mov	r1, r3
 8010a06:	68f8      	ldr	r0, [r7, #12]
 8010a08:	f007 f8ee 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, g_unique_id[2]);
 8010a0c:	4b83      	ldr	r3, [pc, #524]	; (8010c1c <evtMspReceive+0x1780>)
 8010a0e:	689b      	ldr	r3, [r3, #8]
 8010a10:	4619      	mov	r1, r3
 8010a12:	68f8      	ldr	r0, [r7, #12]
 8010a14:	f007 f8e8 	bl	8017be8 <pifMsp_AddAnswer32>
        break;
 8010a18:	e1ed      	b.n	8010df6 <evtMspReceive+0x195a>

#ifdef GPS
    case MSP_GPSSVINFO:
        pifMsp_AddAnswer8(p_owner, GPS_numCh);
 8010a1a:	4b81      	ldr	r3, [pc, #516]	; (8010c20 <evtMspReceive+0x1784>)
 8010a1c:	781b      	ldrb	r3, [r3, #0]
 8010a1e:	4619      	mov	r1, r3
 8010a20:	68f8      	ldr	r0, [r7, #12]
 8010a22:	f007 f84f 	bl	8017ac4 <pifMsp_AddAnswer8>
        for (i = 0; i < GPS_numCh; i++) {
 8010a26:	2300      	movs	r3, #0
 8010a28:	637b      	str	r3, [r7, #52]	; 0x34
 8010a2a:	e022      	b.n	8010a72 <evtMspReceive+0x15d6>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_chn[i]);
 8010a2c:	4a7d      	ldr	r2, [pc, #500]	; (8010c24 <evtMspReceive+0x1788>)
 8010a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a30:	4413      	add	r3, r2
 8010a32:	781b      	ldrb	r3, [r3, #0]
 8010a34:	4619      	mov	r1, r3
 8010a36:	68f8      	ldr	r0, [r7, #12]
 8010a38:	f007 f844 	bl	8017ac4 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_svid[i]);
 8010a3c:	4a7a      	ldr	r2, [pc, #488]	; (8010c28 <evtMspReceive+0x178c>)
 8010a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a40:	4413      	add	r3, r2
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	4619      	mov	r1, r3
 8010a46:	68f8      	ldr	r0, [r7, #12]
 8010a48:	f007 f83c 	bl	8017ac4 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_quality[i]);
 8010a4c:	4a77      	ldr	r2, [pc, #476]	; (8010c2c <evtMspReceive+0x1790>)
 8010a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a50:	4413      	add	r3, r2
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	4619      	mov	r1, r3
 8010a56:	68f8      	ldr	r0, [r7, #12]
 8010a58:	f007 f834 	bl	8017ac4 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_cno[i]);
 8010a5c:	4a74      	ldr	r2, [pc, #464]	; (8010c30 <evtMspReceive+0x1794>)
 8010a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a60:	4413      	add	r3, r2
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	4619      	mov	r1, r3
 8010a66:	68f8      	ldr	r0, [r7, #12]
 8010a68:	f007 f82c 	bl	8017ac4 <pifMsp_AddAnswer8>
        for (i = 0; i < GPS_numCh; i++) {
 8010a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a6e:	3301      	adds	r3, #1
 8010a70:	637b      	str	r3, [r7, #52]	; 0x34
 8010a72:	4b6b      	ldr	r3, [pc, #428]	; (8010c20 <evtMspReceive+0x1784>)
 8010a74:	781b      	ldrb	r3, [r3, #0]
 8010a76:	461a      	mov	r2, r3
 8010a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a7a:	4293      	cmp	r3, r2
 8010a7c:	d3d6      	bcc.n	8010a2c <evtMspReceive+0x1590>
        }
        // Poll new SVINFO from GPS
        gpsPollSvinfo();
 8010a7e:	f7f7 fcdf 	bl	8008440 <gpsPollSvinfo>
        break;
 8010a82:	e1b8      	b.n	8010df6 <evtMspReceive+0x195a>
    case MSP_GPSDEBUGINFO:
        if (sensors(SENSOR_GPS)) {
 8010a84:	2020      	movs	r0, #32
 8010a86:	f7f6 f937 	bl	8006cf8 <sensors>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d012      	beq.n	8010ab6 <evtMspReceive+0x161a>
            pifMsp_AddAnswer32(p_owner, GPS_update_rate[1] - GPS_update_rate[0]);
 8010a90:	4b68      	ldr	r3, [pc, #416]	; (8010c34 <evtMspReceive+0x1798>)
 8010a92:	685a      	ldr	r2, [r3, #4]
 8010a94:	4b67      	ldr	r3, [pc, #412]	; (8010c34 <evtMspReceive+0x1798>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	1ad3      	subs	r3, r2, r3
 8010a9a:	4619      	mov	r1, r3
 8010a9c:	68f8      	ldr	r0, [r7, #12]
 8010a9e:	f007 f8a3 	bl	8017be8 <pifMsp_AddAnswer32>
            pifMsp_AddAnswer32(p_owner, GPS_svinfo_rate[1] - GPS_svinfo_rate[0]);
 8010aa2:	4b65      	ldr	r3, [pc, #404]	; (8010c38 <evtMspReceive+0x179c>)
 8010aa4:	685a      	ldr	r2, [r3, #4]
 8010aa6:	4b64      	ldr	r3, [pc, #400]	; (8010c38 <evtMspReceive+0x179c>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	1ad3      	subs	r3, r2, r3
 8010aac:	4619      	mov	r1, r3
 8010aae:	68f8      	ldr	r0, [r7, #12]
 8010ab0:	f007 f89a 	bl	8017be8 <pifMsp_AddAnswer32>
 8010ab4:	e007      	b.n	8010ac6 <evtMspReceive+0x162a>
        } else {
            pifMsp_AddAnswer32(p_owner, 0);
 8010ab6:	2100      	movs	r1, #0
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	f007 f895 	bl	8017be8 <pifMsp_AddAnswer32>
            pifMsp_AddAnswer32(p_owner, 0);
 8010abe:	2100      	movs	r1, #0
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f007 f891 	bl	8017be8 <pifMsp_AddAnswer32>
        }
        pifMsp_AddAnswer32(p_owner, GPS_HorizontalAcc);
 8010ac6:	4b5d      	ldr	r3, [pc, #372]	; (8010c3c <evtMspReceive+0x17a0>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	4619      	mov	r1, r3
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f007 f88b 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, GPS_VerticalAcc);
 8010ad2:	4b5b      	ldr	r3, [pc, #364]	; (8010c40 <evtMspReceive+0x17a4>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	68f8      	ldr	r0, [r7, #12]
 8010ada:	f007 f885 	bl	8017be8 <pifMsp_AddAnswer32>
        break;
 8010ade:	e18a      	b.n	8010df6 <evtMspReceive+0x195a>
#endif  // GPS

    case MSP_SET_CONFIG:
        mcfg.mixerConfiguration = pifMsp_ReadData8(p_packet); // multitype
 8010ae0:	68b8      	ldr	r0, [r7, #8]
 8010ae2:	f006 ff45 	bl	8017970 <pifMsp_ReadData8>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	461a      	mov	r2, r3
 8010aea:	4b56      	ldr	r3, [pc, #344]	; (8010c44 <evtMspReceive+0x17a8>)
 8010aec:	715a      	strb	r2, [r3, #5]
        featureClearAll();
 8010aee:	f7f6 f987 	bl	8006e00 <featureClearAll>
        featureSet(pifMsp_ReadData32(p_packet)); // features bitmap
 8010af2:	68b8      	ldr	r0, [r7, #8]
 8010af4:	f006 ff6d 	bl	80179d2 <pifMsp_ReadData32>
 8010af8:	4603      	mov	r3, r0
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7f6 f95a 	bl	8006db4 <featureSet>
        mcfg.serialrx_type = pifMsp_ReadData8(p_packet); // serialrx_type
 8010b00:	68b8      	ldr	r0, [r7, #8]
 8010b02:	f006 ff35 	bl	8017970 <pifMsp_ReadData8>
 8010b06:	4603      	mov	r3, r0
 8010b08:	461a      	mov	r2, r3
 8010b0a:	4b4e      	ldr	r3, [pc, #312]	; (8010c44 <evtMspReceive+0x17a8>)
 8010b0c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
        mcfg.board_align_roll = pifMsp_ReadData16(p_packet); // board_align_roll
 8010b10:	68b8      	ldr	r0, [r7, #8]
 8010b12:	f006 ff41 	bl	8017998 <pifMsp_ReadData16>
 8010b16:	4603      	mov	r3, r0
 8010b18:	b21a      	sxth	r2, r3
 8010b1a:	4b4a      	ldr	r3, [pc, #296]	; (8010c44 <evtMspReceive+0x17a8>)
 8010b1c:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
        mcfg.board_align_pitch = pifMsp_ReadData16(p_packet); // board_align_pitch
 8010b20:	68b8      	ldr	r0, [r7, #8]
 8010b22:	f006 ff39 	bl	8017998 <pifMsp_ReadData16>
 8010b26:	4603      	mov	r3, r0
 8010b28:	b21a      	sxth	r2, r3
 8010b2a:	4b46      	ldr	r3, [pc, #280]	; (8010c44 <evtMspReceive+0x17a8>)
 8010b2c:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
        mcfg.board_align_yaw = pifMsp_ReadData16(p_packet); // board_align_yaw
 8010b30:	68b8      	ldr	r0, [r7, #8]
 8010b32:	f006 ff31 	bl	8017998 <pifMsp_ReadData16>
 8010b36:	4603      	mov	r3, r0
 8010b38:	b21a      	sxth	r2, r3
 8010b3a:	4b42      	ldr	r3, [pc, #264]	; (8010c44 <evtMspReceive+0x17a8>)
 8010b3c:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
        mcfg.currentscale = pifMsp_ReadData16(p_packet);
 8010b40:	68b8      	ldr	r0, [r7, #8]
 8010b42:	f006 ff29 	bl	8017998 <pifMsp_ReadData16>
 8010b46:	4603      	mov	r3, r0
 8010b48:	461a      	mov	r2, r3
 8010b4a:	4b3e      	ldr	r3, [pc, #248]	; (8010c44 <evtMspReceive+0x17a8>)
 8010b4c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
        mcfg.currentoffset = pifMsp_ReadData16(p_packet);
 8010b50:	68b8      	ldr	r0, [r7, #8]
 8010b52:	f006 ff21 	bl	8017998 <pifMsp_ReadData16>
 8010b56:	4603      	mov	r3, r0
 8010b58:	461a      	mov	r2, r3
 8010b5a:	4b3a      	ldr	r3, [pc, #232]	; (8010c44 <evtMspReceive+0x17a8>)
 8010b5c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
        mcfg.motor_pwm_rate = pifMsp_ReadData16(p_packet);
 8010b60:	68b8      	ldr	r0, [r7, #8]
 8010b62:	f006 ff19 	bl	8017998 <pifMsp_ReadData16>
 8010b66:	4603      	mov	r3, r0
 8010b68:	461a      	mov	r2, r3
 8010b6a:	4b36      	ldr	r3, [pc, #216]	; (8010c44 <evtMspReceive+0x17a8>)
 8010b6c:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
        cfg.rollPitchRate[0] = pifMsp_ReadData8(p_packet);
 8010b70:	68b8      	ldr	r0, [r7, #8]
 8010b72:	f006 fefd 	bl	8017970 <pifMsp_ReadData8>
 8010b76:	4603      	mov	r3, r0
 8010b78:	461a      	mov	r2, r3
 8010b7a:	4b27      	ldr	r3, [pc, #156]	; (8010c18 <evtMspReceive+0x177c>)
 8010b7c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        cfg.rollPitchRate[1] = pifMsp_ReadData8(p_packet);
 8010b80:	68b8      	ldr	r0, [r7, #8]
 8010b82:	f006 fef5 	bl	8017970 <pifMsp_ReadData8>
 8010b86:	4603      	mov	r3, r0
 8010b88:	461a      	mov	r2, r3
 8010b8a:	4b23      	ldr	r3, [pc, #140]	; (8010c18 <evtMspReceive+0x177c>)
 8010b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mcfg.power_adc_channel = pifMsp_ReadData8(p_packet);
 8010b90:	68b8      	ldr	r0, [r7, #8]
 8010b92:	f006 feed 	bl	8017970 <pifMsp_ReadData8>
 8010b96:	4603      	mov	r3, r0
 8010b98:	461a      	mov	r2, r3
 8010b9a:	4b2a      	ldr	r3, [pc, #168]	; (8010c44 <evtMspReceive+0x17a8>)
 8010b9c:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
        cfg.small_angle = pifMsp_ReadData8(p_packet);
 8010ba0:	68b8      	ldr	r0, [r7, #8]
 8010ba2:	f006 fee5 	bl	8017970 <pifMsp_ReadData8>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	461a      	mov	r2, r3
 8010baa:	4b1b      	ldr	r3, [pc, #108]	; (8010c18 <evtMspReceive+0x177c>)
 8010bac:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        tmp = pifMsp_ReadData16(p_packet);
 8010bb0:	68b8      	ldr	r0, [r7, #8]
 8010bb2:	f006 fef1 	bl	8017998 <pifMsp_ReadData16>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	617b      	str	r3, [r7, #20]
        if (tmp != mcfg.looptime) {
 8010bba:	4b22      	ldr	r3, [pc, #136]	; (8010c44 <evtMspReceive+0x17a8>)
 8010bbc:	899b      	ldrh	r3, [r3, #12]
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d04d      	beq.n	8010c62 <evtMspReceive+0x17c6>
            if (mcfg.looptime && tmp) {
 8010bc6:	4b1f      	ldr	r3, [pc, #124]	; (8010c44 <evtMspReceive+0x17a8>)
 8010bc8:	899b      	ldrh	r3, [r3, #12]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d00b      	beq.n	8010be6 <evtMspReceive+0x174a>
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d008      	beq.n	8010be6 <evtMspReceive+0x174a>
                pifTask_ChangePeriod(g_task_compute_imu, tmp);
 8010bd4:	4b1c      	ldr	r3, [pc, #112]	; (8010c48 <evtMspReceive+0x17ac>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	697a      	ldr	r2, [r7, #20]
 8010bda:	b292      	uxth	r2, r2
 8010bdc:	4611      	mov	r1, r2
 8010bde:	4618      	mov	r0, r3
 8010be0:	f003 fc58 	bl	8014494 <pifTask_ChangePeriod>
 8010be4:	e039      	b.n	8010c5a <evtMspReceive+0x17be>
            }
            else {
                if (tmp) {
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d02f      	beq.n	8010c4c <evtMspReceive+0x17b0>
                    pifTask_ChangeMode(g_task_compute_imu, TM_PERIOD_US, tmp);
 8010bec:	4b16      	ldr	r3, [pc, #88]	; (8010c48 <evtMspReceive+0x17ac>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	697a      	ldr	r2, [r7, #20]
 8010bf2:	b292      	uxth	r2, r2
 8010bf4:	2103      	movs	r1, #3
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f003 fc0e 	bl	8014418 <pifTask_ChangeMode>
 8010bfc:	e02d      	b.n	8010c5a <evtMspReceive+0x17be>
 8010bfe:	bf00      	nop
 8010c00:	20001714 	.word	0x20001714
 8010c04:	2000170c 	.word	0x2000170c
 8010c08:	20001c28 	.word	0x20001c28
 8010c0c:	200016e0 	.word	0x200016e0
 8010c10:	431bde83 	.word	0x431bde83
 8010c14:	200016e4 	.word	0x200016e4
 8010c18:	20000e54 	.word	0x20000e54
 8010c1c:	200016e8 	.word	0x200016e8
 8010c20:	200017f5 	.word	0x200017f5
 8010c24:	200017f8 	.word	0x200017f8
 8010c28:	20001818 	.word	0x20001818
 8010c2c:	20001838 	.word	0x20001838
 8010c30:	20001858 	.word	0x20001858
 8010c34:	20001878 	.word	0x20001878
 8010c38:	20001880 	.word	0x20001880
 8010c3c:	20001888 	.word	0x20001888
 8010c40:	2000188c 	.word	0x2000188c
 8010c44:	200008e8 	.word	0x200008e8
 8010c48:	2000154c 	.word	0x2000154c
                }
                else {
                    pifTask_ChangeMode(g_task_compute_imu, TM_ALWAYS, 100);	    // 100%
 8010c4c:	4b6d      	ldr	r3, [pc, #436]	; (8010e04 <evtMspReceive+0x1968>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	2264      	movs	r2, #100	; 0x64
 8010c52:	2101      	movs	r1, #1
 8010c54:	4618      	mov	r0, r3
 8010c56:	f003 fbdf 	bl	8014418 <pifTask_ChangeMode>
                }
            }
            mcfg.looptime = tmp;
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	b29a      	uxth	r2, r3
 8010c5e:	4b6a      	ldr	r3, [pc, #424]	; (8010e08 <evtMspReceive+0x196c>)
 8010c60:	819a      	strh	r2, [r3, #12]
        }
        cfg.locked_in = pifMsp_ReadData8(p_packet);
 8010c62:	68b8      	ldr	r0, [r7, #8]
 8010c64:	f006 fe84 	bl	8017970 <pifMsp_ReadData8>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	4b67      	ldr	r3, [pc, #412]	; (8010e0c <evtMspReceive+0x1970>)
 8010c6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        /// ???
        break;
 8010c72:	e0c0      	b.n	8010df6 <evtMspReceive+0x195a>

    case MSP_CONFIG:
        pifMsp_AddAnswer8(p_owner, mcfg.mixerConfiguration);
 8010c74:	4b64      	ldr	r3, [pc, #400]	; (8010e08 <evtMspReceive+0x196c>)
 8010c76:	795b      	ldrb	r3, [r3, #5]
 8010c78:	4619      	mov	r1, r3
 8010c7a:	68f8      	ldr	r0, [r7, #12]
 8010c7c:	f006 ff22 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, featureMask());
 8010c80:	f7f6 f8ca 	bl	8006e18 <featureMask>
 8010c84:	4603      	mov	r3, r0
 8010c86:	4619      	mov	r1, r3
 8010c88:	68f8      	ldr	r0, [r7, #12]
 8010c8a:	f006 ffad 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, mcfg.serialrx_type);
 8010c8e:	4b5e      	ldr	r3, [pc, #376]	; (8010e08 <evtMspReceive+0x196c>)
 8010c90:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010c94:	4619      	mov	r1, r3
 8010c96:	68f8      	ldr	r0, [r7, #12]
 8010c98:	f006 ff14 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_roll);
 8010c9c:	4b5a      	ldr	r3, [pc, #360]	; (8010e08 <evtMspReceive+0x196c>)
 8010c9e:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8010ca2:	b29b      	uxth	r3, r3
 8010ca4:	4619      	mov	r1, r3
 8010ca6:	68f8      	ldr	r0, [r7, #12]
 8010ca8:	f006 ff52 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_pitch);
 8010cac:	4b56      	ldr	r3, [pc, #344]	; (8010e08 <evtMspReceive+0x196c>)
 8010cae:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	68f8      	ldr	r0, [r7, #12]
 8010cb8:	f006 ff4a 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_yaw);
 8010cbc:	4b52      	ldr	r3, [pc, #328]	; (8010e08 <evtMspReceive+0x196c>)
 8010cbe:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8010cc2:	b29b      	uxth	r3, r3
 8010cc4:	4619      	mov	r1, r3
 8010cc6:	68f8      	ldr	r0, [r7, #12]
 8010cc8:	f006 ff42 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.currentscale);
 8010ccc:	4b4e      	ldr	r3, [pc, #312]	; (8010e08 <evtMspReceive+0x196c>)
 8010cce:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	68f8      	ldr	r0, [r7, #12]
 8010cd6:	f006 ff3b 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.currentoffset);
 8010cda:	4b4b      	ldr	r3, [pc, #300]	; (8010e08 <evtMspReceive+0x196c>)
 8010cdc:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	68f8      	ldr	r0, [r7, #12]
 8010ce4:	f006 ff34 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.motor_pwm_rate);
 8010ce8:	4b47      	ldr	r3, [pc, #284]	; (8010e08 <evtMspReceive+0x196c>)
 8010cea:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8010cee:	4619      	mov	r1, r3
 8010cf0:	68f8      	ldr	r0, [r7, #12]
 8010cf2:	f006 ff2d 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[0]);
 8010cf6:	4b45      	ldr	r3, [pc, #276]	; (8010e0c <evtMspReceive+0x1970>)
 8010cf8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	68f8      	ldr	r0, [r7, #12]
 8010d00:	f006 fee0 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[1]);
 8010d04:	4b41      	ldr	r3, [pc, #260]	; (8010e0c <evtMspReceive+0x1970>)
 8010d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010d0a:	4619      	mov	r1, r3
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	f006 fed9 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.power_adc_channel);
 8010d12:	4b3d      	ldr	r3, [pc, #244]	; (8010e08 <evtMspReceive+0x196c>)
 8010d14:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8010d18:	4619      	mov	r1, r3
 8010d1a:	68f8      	ldr	r0, [r7, #12]
 8010d1c:	f006 fed2 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.small_angle);
 8010d20:	4b3a      	ldr	r3, [pc, #232]	; (8010e0c <evtMspReceive+0x1970>)
 8010d22:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8010d26:	4619      	mov	r1, r3
 8010d28:	68f8      	ldr	r0, [r7, #12]
 8010d2a:	f006 fecb 	bl	8017ac4 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, mcfg.looptime);
 8010d2e:	4b36      	ldr	r3, [pc, #216]	; (8010e08 <evtMspReceive+0x196c>)
 8010d30:	899b      	ldrh	r3, [r3, #12]
 8010d32:	4619      	mov	r1, r3
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f006 ff0b 	bl	8017b50 <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, cfg.locked_in);
 8010d3a:	4b34      	ldr	r3, [pc, #208]	; (8010e0c <evtMspReceive+0x1970>)
 8010d3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d40:	4619      	mov	r1, r3
 8010d42:	68f8      	ldr	r0, [r7, #12]
 8010d44:	f006 febe 	bl	8017ac4 <pifMsp_AddAnswer8>
        /// ???
        break;
 8010d48:	e055      	b.n	8010df6 <evtMspReceive+0x195a>

    case MSP_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8010d4e:	e00c      	b.n	8010d6a <evtMspReceive+0x18ce>
            pifMsp_AddAnswer8(p_owner, mcfg.rcmap[i]);
 8010d50:	4a2d      	ldr	r2, [pc, #180]	; (8010e08 <evtMspReceive+0x196c>)
 8010d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d54:	4413      	add	r3, r2
 8010d56:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f006 feb0 	bl	8017ac4 <pifMsp_AddAnswer8>
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d66:	3301      	adds	r3, #1
 8010d68:	637b      	str	r3, [r7, #52]	; 0x34
 8010d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d6c:	2b07      	cmp	r3, #7
 8010d6e:	d9ef      	bls.n	8010d50 <evtMspReceive+0x18b4>
        break;
 8010d70:	e041      	b.n	8010df6 <evtMspReceive+0x195a>

    case MSP_SET_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010d72:	2300      	movs	r3, #0
 8010d74:	637b      	str	r3, [r7, #52]	; 0x34
 8010d76:	e00e      	b.n	8010d96 <evtMspReceive+0x18fa>
            mcfg.rcmap[i] = pifMsp_ReadData8(p_packet);
 8010d78:	68b8      	ldr	r0, [r7, #8]
 8010d7a:	f006 fdf9 	bl	8017970 <pifMsp_ReadData8>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	4619      	mov	r1, r3
 8010d82:	4a21      	ldr	r2, [pc, #132]	; (8010e08 <evtMspReceive+0x196c>)
 8010d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d86:	4413      	add	r3, r2
 8010d88:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8010d8c:	460a      	mov	r2, r1
 8010d8e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d92:	3301      	adds	r3, #1
 8010d94:	637b      	str	r3, [r7, #52]	; 0x34
 8010d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d98:	2b07      	cmp	r3, #7
 8010d9a:	d9ed      	bls.n	8010d78 <evtMspReceive+0x18dc>
        break;
 8010d9c:	e02b      	b.n	8010df6 <evtMspReceive+0x195a>

    case MSP_REBOOT:
        pendReboot = true;
 8010d9e:	4b1c      	ldr	r3, [pc, #112]	; (8010e10 <evtMspReceive+0x1974>)
 8010da0:	2201      	movs	r2, #1
 8010da2:	701a      	strb	r2, [r3, #0]
        break;
 8010da4:	e027      	b.n	8010df6 <evtMspReceive+0x195a>

    case MSP_BUILDINFO:
        for (i = 0; i < 11; i++)
 8010da6:	2300      	movs	r3, #0
 8010da8:	637b      	str	r3, [r7, #52]	; 0x34
 8010daa:	e00a      	b.n	8010dc2 <evtMspReceive+0x1926>
            pifMsp_AddAnswer8(p_owner, build[i]); // MMM DD YYYY as ascii, MMM = Jan/Feb... etc
 8010dac:	69fa      	ldr	r2, [r7, #28]
 8010dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010db0:	4413      	add	r3, r2
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	4619      	mov	r1, r3
 8010db6:	68f8      	ldr	r0, [r7, #12]
 8010db8:	f006 fe84 	bl	8017ac4 <pifMsp_AddAnswer8>
        for (i = 0; i < 11; i++)
 8010dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dbe:	3301      	adds	r3, #1
 8010dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8010dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dc4:	2b0a      	cmp	r3, #10
 8010dc6:	d9f1      	bls.n	8010dac <evtMspReceive+0x1910>
        pifMsp_AddAnswer32(p_owner, 0); // future exp
 8010dc8:	2100      	movs	r1, #0
 8010dca:	68f8      	ldr	r0, [r7, #12]
 8010dcc:	f006 ff0c 	bl	8017be8 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0); // future exp
 8010dd0:	2100      	movs	r1, #0
 8010dd2:	68f8      	ldr	r0, [r7, #12]
 8010dd4:	f006 ff08 	bl	8017be8 <pifMsp_AddAnswer32>
        break;
 8010dd8:	e00d      	b.n	8010df6 <evtMspReceive+0x195a>

    default:                   // we do not know how to handle the (valid) message, indicate error MSP $M!
        pifMsp_MakeError(p_owner, p_packet);
 8010dda:	68b9      	ldr	r1, [r7, #8]
 8010ddc:	68f8      	ldr	r0, [r7, #12]
 8010dde:	f006 ffa1 	bl	8017d24 <pifMsp_MakeError>
        break;
 8010de2:	e008      	b.n	8010df6 <evtMspReceive+0x195a>
        break;
 8010de4:	bf00      	nop
 8010de6:	e006      	b.n	8010df6 <evtMspReceive+0x195a>
        break;
 8010de8:	bf00      	nop
 8010dea:	e004      	b.n	8010df6 <evtMspReceive+0x195a>
        break;
 8010dec:	bf00      	nop
 8010dee:	e002      	b.n	8010df6 <evtMspReceive+0x195a>
        break;
 8010df0:	bf00      	nop
 8010df2:	e000      	b.n	8010df6 <evtMspReceive+0x195a>
        break;
 8010df4:	bf00      	nop
    }
    pifMsp_SendAnswer(p_owner);
 8010df6:	68f8      	ldr	r0, [r7, #12]
 8010df8:	f006 ffe6 	bl	8017dc8 <pifMsp_SendAnswer>
}
 8010dfc:	bf00      	nop
 8010dfe:	373c      	adds	r7, #60	; 0x3c
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd90      	pop	{r4, r7, pc}
 8010e04:	2000154c 	.word	0x2000154c
 8010e08:	200008e8 	.word	0x200008e8
 8010e0c:	20000e54 	.word	0x20000e54
 8010e10:	20001b52 	.word	0x20001b52

08010e14 <evtMspOtherPacket>:

static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data, PifIssuerP p_issuer)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b084      	sub	sp, #16
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	460b      	mov	r3, r1
 8010e1e:	607a      	str	r2, [r7, #4]
 8010e20:	72fb      	strb	r3, [r7, #11]
    (void)p_owner;
    (void)p_issuer;

    if (f.ARMED) return;
 8010e22:	4b0c      	ldr	r3, [pc, #48]	; (8010e54 <evtMspOtherPacket+0x40>)
 8010e24:	785b      	ldrb	r3, [r3, #1]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d110      	bne.n	8010e4c <evtMspOtherPacket+0x38>

    if (data == '#')
 8010e2a:	7afb      	ldrb	r3, [r7, #11]
 8010e2c:	2b23      	cmp	r3, #35	; 0x23
 8010e2e:	d103      	bne.n	8010e38 <evtMspOtherPacket+0x24>
        s_change_cli = TRUE;
 8010e30:	4b09      	ldr	r3, [pc, #36]	; (8010e58 <evtMspOtherPacket+0x44>)
 8010e32:	2201      	movs	r2, #1
 8010e34:	701a      	strb	r2, [r3, #0]
 8010e36:	e00a      	b.n	8010e4e <evtMspOtherPacket+0x3a>
    else if (data == mcfg.reboot_character)
 8010e38:	4b08      	ldr	r3, [pc, #32]	; (8010e5c <evtMspOtherPacket+0x48>)
 8010e3a:	f893 3569 	ldrb.w	r3, [r3, #1385]	; 0x569
 8010e3e:	7afa      	ldrb	r2, [r7, #11]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d104      	bne.n	8010e4e <evtMspOtherPacket+0x3a>
        systemReset(true);      // reboot to bootloader
 8010e44:	2001      	movs	r0, #1
 8010e46:	f7f0 ff3d 	bl	8001cc4 <systemReset>
 8010e4a:	e000      	b.n	8010e4e <evtMspOtherPacket+0x3a>
    if (f.ARMED) return;
 8010e4c:	bf00      	nop
}
 8010e4e:	3710      	adds	r7, #16
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}
 8010e54:	200016f4 	.word	0x200016f4
 8010e58:	20001c0c 	.word	0x20001c0c
 8010e5c:	200008e8 	.word	0x200008e8

08010e60 <serialCom>:

void serialCom(void)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	af00      	add	r7, sp, #0
    if (s_change_cli) {
 8010e64:	4b0c      	ldr	r3, [pc, #48]	; (8010e98 <serialCom+0x38>)
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d00b      	beq.n	8010e84 <serialCom+0x24>
        s_change_cli = FALSE;
 8010e6c:	4b0a      	ldr	r3, [pc, #40]	; (8010e98 <serialCom+0x38>)
 8010e6e:	2200      	movs	r2, #0
 8010e70:	701a      	strb	r2, [r3, #0]

        pifMsp_DetachComm(&ports[0].pif_msp);
 8010e72:	480a      	ldr	r0, [pc, #40]	; (8010e9c <serialCom+0x3c>)
 8010e74:	f006 fd56 	bl	8017924 <pifMsp_DetachComm>
        cliInit(&core.mainport->comm);
 8010e78:	4b09      	ldr	r3, [pc, #36]	; (8010ea0 <serialCom+0x40>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	3304      	adds	r3, #4
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7f5 f9a8 	bl	80061d4 <cliInit>
    };

    if (pendReboot)
 8010e84:	4b07      	ldr	r3, [pc, #28]	; (8010ea4 <serialCom+0x44>)
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d002      	beq.n	8010e92 <serialCom+0x32>
        systemReset(false); // noreturn
 8010e8c:	2000      	movs	r0, #0
 8010e8e:	f7f0 ff19 	bl	8001cc4 <systemReset>
}
 8010e92:	bf00      	nop
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	bf00      	nop
 8010e98:	20001c0c 	.word	0x20001c0c
 8010e9c:	20001b58 	.word	0x20001b58
 8010ea0:	20000830 	.word	0x20000830
 8010ea4:	20001b52 	.word	0x20001b52

08010ea8 <pif_Init>:
void PIF_WEAK pifSequenceColSig_Clear() {}

#endif

void pif_Init(PifActTimer1us act_timer1us)
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
	pif_act_timer1us = act_timer1us;
 8010eb0:	4a07      	ldr	r2, [pc, #28]	; (8010ed0 <pif_Init+0x28>)
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6013      	str	r3, [r2, #0]

	pif_datetime.month = 1;
 8010eb6:	4b07      	ldr	r3, [pc, #28]	; (8010ed4 <pif_Init+0x2c>)
 8010eb8:	2201      	movs	r2, #1
 8010eba:	705a      	strb	r2, [r3, #1]
	pif_datetime.day = 1;
 8010ebc:	4b05      	ldr	r3, [pc, #20]	; (8010ed4 <pif_Init+0x2c>)
 8010ebe:	2201      	movs	r2, #1
 8010ec0:	709a      	strb	r2, [r3, #2]
    pifSensorDigitalColSig_Init();
    pifSensorSwitchColSig_Init();
    pifSolenoidColSig_Init();
    pifSequenceColSig_Init();
#endif
}
 8010ec2:	bf00      	nop
 8010ec4:	370c      	adds	r7, #12
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ecc:	4770      	bx	lr
 8010ece:	bf00      	nop
 8010ed0:	20001c34 	.word	0x20001c34
 8010ed4:	20001c1c 	.word	0x20001c1c

08010ed8 <pif_sigTimer1ms>:
    pifSequenceColSig_Clear();
#endif
}

void pif_sigTimer1ms()
{
 8010ed8:	b480      	push	{r7}
 8010eda:	b083      	sub	sp, #12
 8010edc:	af00      	add	r7, sp, #0
	uint8_t days;
	uint16_t year;

	pif_cumulative_timer1ms++;
 8010ede:	4b56      	ldr	r3, [pc, #344]	; (8011038 <pif_sigTimer1ms+0x160>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	3301      	adds	r3, #1
 8010ee4:	4a54      	ldr	r2, [pc, #336]	; (8011038 <pif_sigTimer1ms+0x160>)
 8010ee6:	6013      	str	r3, [r2, #0]
    pif_timer1ms++;
 8010ee8:	4b54      	ldr	r3, [pc, #336]	; (801103c <pif_sigTimer1ms+0x164>)
 8010eea:	881b      	ldrh	r3, [r3, #0]
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	3301      	adds	r3, #1
 8010ef0:	b29a      	uxth	r2, r3
 8010ef2:	4b52      	ldr	r3, [pc, #328]	; (801103c <pif_sigTimer1ms+0x164>)
 8010ef4:	801a      	strh	r2, [r3, #0]
    if (pif_timer1ms >= 1000) {
 8010ef6:	4b51      	ldr	r3, [pc, #324]	; (801103c <pif_sigTimer1ms+0x164>)
 8010ef8:	881b      	ldrh	r3, [r3, #0]
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010f00:	f0c0 808d 	bcc.w	801101e <pif_sigTimer1ms+0x146>
        pif_timer1ms = 0;
 8010f04:	4b4d      	ldr	r3, [pc, #308]	; (801103c <pif_sigTimer1ms+0x164>)
 8010f06:	2200      	movs	r2, #0
 8010f08:	801a      	strh	r2, [r3, #0]

        pif_timer1sec++;
 8010f0a:	4b4d      	ldr	r3, [pc, #308]	; (8011040 <pif_sigTimer1ms+0x168>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	4a4b      	ldr	r2, [pc, #300]	; (8011040 <pif_sigTimer1ms+0x168>)
 8010f12:	6013      	str	r3, [r2, #0]
    	pif_datetime.second++;
 8010f14:	4b4b      	ldr	r3, [pc, #300]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f16:	795b      	ldrb	r3, [r3, #5]
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	3301      	adds	r3, #1
 8010f1c:	b2da      	uxtb	r2, r3
 8010f1e:	4b49      	ldr	r3, [pc, #292]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f20:	715a      	strb	r2, [r3, #5]
    	if (pif_datetime.second >= 60) {
 8010f22:	4b48      	ldr	r3, [pc, #288]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f24:	795b      	ldrb	r3, [r3, #5]
 8010f26:	b2db      	uxtb	r3, r3
 8010f28:	2b3b      	cmp	r3, #59	; 0x3b
 8010f2a:	d971      	bls.n	8011010 <pif_sigTimer1ms+0x138>
    		pif_datetime.second = 0;
 8010f2c:	4b45      	ldr	r3, [pc, #276]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f2e:	2200      	movs	r2, #0
 8010f30:	715a      	strb	r2, [r3, #5]
    		pif_datetime.minute++;
 8010f32:	4b44      	ldr	r3, [pc, #272]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f34:	791b      	ldrb	r3, [r3, #4]
 8010f36:	b2db      	uxtb	r3, r3
 8010f38:	3301      	adds	r3, #1
 8010f3a:	b2da      	uxtb	r2, r3
 8010f3c:	4b41      	ldr	r3, [pc, #260]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f3e:	711a      	strb	r2, [r3, #4]
    		if (pif_datetime.minute >= 60) {
 8010f40:	4b40      	ldr	r3, [pc, #256]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f42:	791b      	ldrb	r3, [r3, #4]
 8010f44:	b2db      	uxtb	r3, r3
 8010f46:	2b3b      	cmp	r3, #59	; 0x3b
 8010f48:	d95b      	bls.n	8011002 <pif_sigTimer1ms+0x12a>
    			pif_datetime.minute = 0;
 8010f4a:	4b3e      	ldr	r3, [pc, #248]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	711a      	strb	r2, [r3, #4]
    			pif_datetime.hour++;
 8010f50:	4b3c      	ldr	r3, [pc, #240]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f52:	78db      	ldrb	r3, [r3, #3]
 8010f54:	b2db      	uxtb	r3, r3
 8010f56:	3301      	adds	r3, #1
 8010f58:	b2da      	uxtb	r2, r3
 8010f5a:	4b3a      	ldr	r3, [pc, #232]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f5c:	70da      	strb	r2, [r3, #3]
    			if (pif_datetime.hour >= 24) {
 8010f5e:	4b39      	ldr	r3, [pc, #228]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f60:	78db      	ldrb	r3, [r3, #3]
 8010f62:	b2db      	uxtb	r3, r3
 8010f64:	2b17      	cmp	r3, #23
 8010f66:	d94c      	bls.n	8011002 <pif_sigTimer1ms+0x12a>
    				pif_datetime.hour = 0;
 8010f68:	4b36      	ldr	r3, [pc, #216]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	70da      	strb	r2, [r3, #3]
    				pif_datetime.day++;
 8010f6e:	4b35      	ldr	r3, [pc, #212]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f70:	789b      	ldrb	r3, [r3, #2]
 8010f72:	b2db      	uxtb	r3, r3
 8010f74:	3301      	adds	r3, #1
 8010f76:	b2da      	uxtb	r2, r3
 8010f78:	4b32      	ldr	r3, [pc, #200]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f7a:	709a      	strb	r2, [r3, #2]
    				days = kDaysInMonth[pif_datetime.month - 1];
 8010f7c:	4b31      	ldr	r3, [pc, #196]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f7e:	785b      	ldrb	r3, [r3, #1]
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	3b01      	subs	r3, #1
 8010f84:	4a30      	ldr	r2, [pc, #192]	; (8011048 <pif_sigTimer1ms+0x170>)
 8010f86:	5cd3      	ldrb	r3, [r2, r3]
 8010f88:	71fb      	strb	r3, [r7, #7]
    				if (pif_datetime.month == 2) {
 8010f8a:	4b2e      	ldr	r3, [pc, #184]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f8c:	785b      	ldrb	r3, [r3, #1]
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	2b02      	cmp	r3, #2
 8010f92:	d117      	bne.n	8010fc4 <pif_sigTimer1ms+0xec>
    					year = 2000 + pif_datetime.year;
 8010f94:	4b2b      	ldr	r3, [pc, #172]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010f96:	781b      	ldrb	r3, [r3, #0]
 8010f98:	b2db      	uxtb	r3, r3
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8010fa0:	80bb      	strh	r3, [r7, #4]
    					if (year / 4 == 0) {
 8010fa2:	88bb      	ldrh	r3, [r7, #4]
 8010fa4:	2b03      	cmp	r3, #3
 8010fa6:	d80d      	bhi.n	8010fc4 <pif_sigTimer1ms+0xec>
    						if (year / 100 == 0) {
 8010fa8:	88bb      	ldrh	r3, [r7, #4]
 8010faa:	2b63      	cmp	r3, #99	; 0x63
 8010fac:	d807      	bhi.n	8010fbe <pif_sigTimer1ms+0xe6>
    							if (year / 400 == 0) days++;
 8010fae:	88bb      	ldrh	r3, [r7, #4]
 8010fb0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8010fb4:	d206      	bcs.n	8010fc4 <pif_sigTimer1ms+0xec>
 8010fb6:	79fb      	ldrb	r3, [r7, #7]
 8010fb8:	3301      	adds	r3, #1
 8010fba:	71fb      	strb	r3, [r7, #7]
 8010fbc:	e002      	b.n	8010fc4 <pif_sigTimer1ms+0xec>
    						}
    						else days++;
 8010fbe:	79fb      	ldrb	r3, [r7, #7]
 8010fc0:	3301      	adds	r3, #1
 8010fc2:	71fb      	strb	r3, [r7, #7]
    					}
    				}
    				if (pif_datetime.day > days) {
 8010fc4:	4b1f      	ldr	r3, [pc, #124]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010fc6:	789b      	ldrb	r3, [r3, #2]
 8010fc8:	b2db      	uxtb	r3, r3
 8010fca:	79fa      	ldrb	r2, [r7, #7]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d218      	bcs.n	8011002 <pif_sigTimer1ms+0x12a>
    					pif_datetime.day = 1;
 8010fd0:	4b1c      	ldr	r3, [pc, #112]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	709a      	strb	r2, [r3, #2]
    					pif_datetime.month++;
 8010fd6:	4b1b      	ldr	r3, [pc, #108]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010fd8:	785b      	ldrb	r3, [r3, #1]
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	3301      	adds	r3, #1
 8010fde:	b2da      	uxtb	r2, r3
 8010fe0:	4b18      	ldr	r3, [pc, #96]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010fe2:	705a      	strb	r2, [r3, #1]
    					if (pif_datetime.month > 12) {
 8010fe4:	4b17      	ldr	r3, [pc, #92]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010fe6:	785b      	ldrb	r3, [r3, #1]
 8010fe8:	b2db      	uxtb	r3, r3
 8010fea:	2b0c      	cmp	r3, #12
 8010fec:	d909      	bls.n	8011002 <pif_sigTimer1ms+0x12a>
    						pif_datetime.month = 1;
 8010fee:	4b15      	ldr	r3, [pc, #84]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010ff0:	2201      	movs	r2, #1
 8010ff2:	705a      	strb	r2, [r3, #1]
    						pif_datetime.year++;
 8010ff4:	4b13      	ldr	r3, [pc, #76]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	b2db      	uxtb	r3, r3
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	b2da      	uxtb	r2, r3
 8010ffe:	4b11      	ldr	r3, [pc, #68]	; (8011044 <pif_sigTimer1ms+0x16c>)
 8011000:	701a      	strb	r2, [r3, #0]
    				}
    			}
    		}

#ifdef __PIF_DEBUG__
        	pif_performance.__state |= 4;
 8011002:	4b12      	ldr	r3, [pc, #72]	; (801104c <pif_sigTimer1ms+0x174>)
 8011004:	795b      	ldrb	r3, [r3, #5]
 8011006:	f043 0304 	orr.w	r3, r3, #4
 801100a:	b2da      	uxtb	r2, r3
 801100c:	4b0f      	ldr	r3, [pc, #60]	; (801104c <pif_sigTimer1ms+0x174>)
 801100e:	715a      	strb	r2, [r3, #5]
#endif			
    	}

    	pif_performance.__state |= 2;
 8011010:	4b0e      	ldr	r3, [pc, #56]	; (801104c <pif_sigTimer1ms+0x174>)
 8011012:	795b      	ldrb	r3, [r3, #5]
 8011014:	f043 0302 	orr.w	r3, r3, #2
 8011018:	b2da      	uxtb	r2, r3
 801101a:	4b0c      	ldr	r3, [pc, #48]	; (801104c <pif_sigTimer1ms+0x174>)
 801101c:	715a      	strb	r2, [r3, #5]
    }

   	pif_performance.__state |= 1;
 801101e:	4b0b      	ldr	r3, [pc, #44]	; (801104c <pif_sigTimer1ms+0x174>)
 8011020:	795b      	ldrb	r3, [r3, #5]
 8011022:	f043 0301 	orr.w	r3, r3, #1
 8011026:	b2da      	uxtb	r2, r3
 8011028:	4b08      	ldr	r3, [pc, #32]	; (801104c <pif_sigTimer1ms+0x174>)
 801102a:	715a      	strb	r2, [r3, #5]
}
 801102c:	bf00      	nop
 801102e:	370c      	adds	r7, #12
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr
 8011038:	20001c24 	.word	0x20001c24
 801103c:	20001c14 	.word	0x20001c14
 8011040:	20001c18 	.word	0x20001c18
 8011044:	20001c1c 	.word	0x20001c1c
 8011048:	0802907c 	.word	0x0802907c
 801104c:	20001c28 	.word	0x20001c28

08011050 <pif_Delay1ms>:

void pif_Delay1ms(uint16_t delay)
{
 8011050:	b480      	push	{r7}
 8011052:	b085      	sub	sp, #20
 8011054:	af00      	add	r7, sp, #0
 8011056:	4603      	mov	r3, r0
 8011058:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = pif_cumulative_timer1ms;
 801105a:	4b0a      	ldr	r3, [pc, #40]	; (8011084 <pif_Delay1ms+0x34>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	60fb      	str	r3, [r7, #12]
	do {
		diff = pif_cumulative_timer1ms - start;
 8011060:	4b08      	ldr	r3, [pc, #32]	; (8011084 <pif_Delay1ms+0x34>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	b29a      	uxth	r2, r3
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	b29b      	uxth	r3, r3
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 801106e:	897a      	ldrh	r2, [r7, #10]
 8011070:	88fb      	ldrh	r3, [r7, #6]
 8011072:	429a      	cmp	r2, r3
 8011074:	d3f4      	bcc.n	8011060 <pif_Delay1ms+0x10>
}
 8011076:	bf00      	nop
 8011078:	bf00      	nop
 801107a:	3714      	adds	r7, #20
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr
 8011084:	20001c24 	.word	0x20001c24

08011088 <pif_Delay1us>:

void pif_Delay1us(uint16_t delay)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b084      	sub	sp, #16
 801108c:	af00      	add	r7, sp, #0
 801108e:	4603      	mov	r3, r0
 8011090:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = (*pif_act_timer1us)();
 8011092:	4b0b      	ldr	r3, [pc, #44]	; (80110c0 <pif_Delay1us+0x38>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	4798      	blx	r3
 8011098:	60f8      	str	r0, [r7, #12]
	do {
		diff = (*pif_act_timer1us)() - start;
 801109a:	4b09      	ldr	r3, [pc, #36]	; (80110c0 <pif_Delay1us+0x38>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	4798      	blx	r3
 80110a0:	4603      	mov	r3, r0
 80110a2:	b29a      	uxth	r2, r3
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	1ad3      	subs	r3, r2, r3
 80110aa:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 80110ac:	897a      	ldrh	r2, [r7, #10]
 80110ae:	88fb      	ldrh	r3, [r7, #6]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d3f2      	bcc.n	801109a <pif_Delay1us+0x12>
}
 80110b4:	bf00      	nop
 80110b6:	bf00      	nop
 80110b8:	3710      	adds	r7, #16
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop
 80110c0:	20001c34 	.word	0x20001c34

080110c4 <pif_BinToString>:
{
	pif_error = E_SUCCESS;
}

int pif_BinToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 80110c4:	b480      	push	{r7}
 80110c6:	b089      	sub	sp, #36	; 0x24
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	60f8      	str	r0, [r7, #12]
 80110cc:	60b9      	str	r1, [r7, #8]
 80110ce:	4613      	mov	r3, r2
 80110d0:	80fb      	strh	r3, [r7, #6]
	int i, idx = 0;
 80110d2:	2300      	movs	r3, #0
 80110d4:	61bb      	str	r3, [r7, #24]
	BOOL first;
    uint32_t tmp_val;

    if (str_cnt) {
 80110d6:	88fb      	ldrh	r3, [r7, #6]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d01b      	beq.n	8011114 <pif_BinToString+0x50>
    	for (i = str_cnt - 1; i >= 0; i--) {
 80110dc:	88fb      	ldrh	r3, [r7, #6]
 80110de:	3b01      	subs	r3, #1
 80110e0:	61fb      	str	r3, [r7, #28]
 80110e2:	e013      	b.n	801110c <pif_BinToString+0x48>
    		p_buffer[idx++] = '0' + ((value >> i) & 1);
 80110e4:	68ba      	ldr	r2, [r7, #8]
 80110e6:	69fb      	ldr	r3, [r7, #28]
 80110e8:	fa22 f303 	lsr.w	r3, r2, r3
 80110ec:	b2db      	uxtb	r3, r3
 80110ee:	f003 0301 	and.w	r3, r3, #1
 80110f2:	b2da      	uxtb	r2, r3
 80110f4:	69bb      	ldr	r3, [r7, #24]
 80110f6:	1c59      	adds	r1, r3, #1
 80110f8:	61b9      	str	r1, [r7, #24]
 80110fa:	4619      	mov	r1, r3
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	440b      	add	r3, r1
 8011100:	3230      	adds	r2, #48	; 0x30
 8011102:	b2d2      	uxtb	r2, r2
 8011104:	701a      	strb	r2, [r3, #0]
    	for (i = str_cnt - 1; i >= 0; i--) {
 8011106:	69fb      	ldr	r3, [r7, #28]
 8011108:	3b01      	subs	r3, #1
 801110a:	61fb      	str	r3, [r7, #28]
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	2b00      	cmp	r3, #0
 8011110:	dae8      	bge.n	80110e4 <pif_BinToString+0x20>
 8011112:	e030      	b.n	8011176 <pif_BinToString+0xb2>
    	}
    }
    else if (value > 0) {
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d025      	beq.n	8011166 <pif_BinToString+0xa2>
    	first = TRUE;
 801111a:	2301      	movs	r3, #1
 801111c:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 801111e:	231f      	movs	r3, #31
 8011120:	61fb      	str	r3, [r7, #28]
 8011122:	e01c      	b.n	801115e <pif_BinToString+0x9a>
    		tmp_val = (value >> i) & 1;
 8011124:	68ba      	ldr	r2, [r7, #8]
 8011126:	69fb      	ldr	r3, [r7, #28]
 8011128:	fa22 f303 	lsr.w	r3, r2, r3
 801112c:	f003 0301 	and.w	r3, r3, #1
 8011130:	613b      	str	r3, [r7, #16]
    		if (!first || tmp_val) {
 8011132:	7dfb      	ldrb	r3, [r7, #23]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d002      	beq.n	801113e <pif_BinToString+0x7a>
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d00c      	beq.n	8011158 <pif_BinToString+0x94>
    			p_buffer[idx++] = '0' + tmp_val;
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	b2da      	uxtb	r2, r3
 8011142:	69bb      	ldr	r3, [r7, #24]
 8011144:	1c59      	adds	r1, r3, #1
 8011146:	61b9      	str	r1, [r7, #24]
 8011148:	4619      	mov	r1, r3
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	440b      	add	r3, r1
 801114e:	3230      	adds	r2, #48	; 0x30
 8011150:	b2d2      	uxtb	r2, r2
 8011152:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 8011154:	2300      	movs	r3, #0
 8011156:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 8011158:	69fb      	ldr	r3, [r7, #28]
 801115a:	3b01      	subs	r3, #1
 801115c:	61fb      	str	r3, [r7, #28]
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	2b00      	cmp	r3, #0
 8011162:	dadf      	bge.n	8011124 <pif_BinToString+0x60>
 8011164:	e007      	b.n	8011176 <pif_BinToString+0xb2>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 8011166:	69bb      	ldr	r3, [r7, #24]
 8011168:	1c5a      	adds	r2, r3, #1
 801116a:	61ba      	str	r2, [r7, #24]
 801116c:	461a      	mov	r2, r3
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	4413      	add	r3, r2
 8011172:	2230      	movs	r2, #48	; 0x30
 8011174:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 8011176:	69bb      	ldr	r3, [r7, #24]
}
 8011178:	4618      	mov	r0, r3
 801117a:	3724      	adds	r7, #36	; 0x24
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr

08011184 <pif_DecToString>:

int pif_DecToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 8011184:	b480      	push	{r7}
 8011186:	b08d      	sub	sp, #52	; 0x34
 8011188:	af00      	add	r7, sp, #0
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	4613      	mov	r3, r2
 8011190:	80fb      	strh	r3, [r7, #6]
    uint16_t exp_cnt = 0;
 8011192:	2300      	movs	r3, #0
 8011194:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t zero_str_cnt = 0;
 8011196:	2300      	movs	r3, #0
 8011198:	85bb      	strh	r3, [r7, #44]	; 0x2c
    int idx = 0;
 801119a:	2300      	movs	r3, #0
 801119c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t idx_inv = 0;
 801119e:	2300      	movs	r3, #0
 80111a0:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t tmp_val;
    char inv_buf[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80111a2:	4a43      	ldr	r2, [pc, #268]	; (80112b0 <pif_DecToString+0x12c>)
 80111a4:	f107 0314 	add.w	r3, r7, #20
 80111a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80111aa:	c303      	stmia	r3!, {r0, r1}
 80111ac:	801a      	strh	r2, [r3, #0]
 80111ae:	3302      	adds	r3, #2
 80111b0:	0c12      	lsrs	r2, r2, #16
 80111b2:	701a      	strb	r2, [r3, #0]

    tmp_val = value;
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	623b      	str	r3, [r7, #32]
    if (tmp_val != 0) {
 80111b8:	6a3b      	ldr	r3, [r7, #32]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d05e      	beq.n	801127c <pif_DecToString+0xf8>
        while (tmp_val) {
 80111be:	e02c      	b.n	801121a <pif_DecToString+0x96>
        	exp_cnt++;
 80111c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80111c2:	3301      	adds	r3, #1
 80111c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
            if (tmp_val >= 10) {
 80111c6:	6a3b      	ldr	r3, [r7, #32]
 80111c8:	2b09      	cmp	r3, #9
 80111ca:	d914      	bls.n	80111f6 <pif_DecToString+0x72>
                inv_buf[idx_inv++] = (tmp_val % 10) + '0';
 80111cc:	6a39      	ldr	r1, [r7, #32]
 80111ce:	4b39      	ldr	r3, [pc, #228]	; (80112b4 <pif_DecToString+0x130>)
 80111d0:	fba3 2301 	umull	r2, r3, r3, r1
 80111d4:	08da      	lsrs	r2, r3, #3
 80111d6:	4613      	mov	r3, r2
 80111d8:	009b      	lsls	r3, r3, #2
 80111da:	4413      	add	r3, r2
 80111dc:	005b      	lsls	r3, r3, #1
 80111de:	1aca      	subs	r2, r1, r3
 80111e0:	b2d2      	uxtb	r2, r2
 80111e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e4:	1c59      	adds	r1, r3, #1
 80111e6:	6279      	str	r1, [r7, #36]	; 0x24
 80111e8:	3230      	adds	r2, #48	; 0x30
 80111ea:	b2d2      	uxtb	r2, r2
 80111ec:	3330      	adds	r3, #48	; 0x30
 80111ee:	443b      	add	r3, r7
 80111f0:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80111f4:	e00b      	b.n	801120e <pif_DecToString+0x8a>
            }
            else {
                inv_buf[idx_inv++] = tmp_val + '0';
 80111f6:	6a3b      	ldr	r3, [r7, #32]
 80111f8:	b2da      	uxtb	r2, r3
 80111fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fc:	1c59      	adds	r1, r3, #1
 80111fe:	6279      	str	r1, [r7, #36]	; 0x24
 8011200:	3230      	adds	r2, #48	; 0x30
 8011202:	b2d2      	uxtb	r2, r2
 8011204:	3330      	adds	r3, #48	; 0x30
 8011206:	443b      	add	r3, r7
 8011208:	f803 2c1c 	strb.w	r2, [r3, #-28]
                break;
 801120c:	e008      	b.n	8011220 <pif_DecToString+0x9c>
            }
            tmp_val = tmp_val / 10;
 801120e:	6a3b      	ldr	r3, [r7, #32]
 8011210:	4a28      	ldr	r2, [pc, #160]	; (80112b4 <pif_DecToString+0x130>)
 8011212:	fba2 2303 	umull	r2, r3, r2, r3
 8011216:	08db      	lsrs	r3, r3, #3
 8011218:	623b      	str	r3, [r7, #32]
        while (tmp_val) {
 801121a:	6a3b      	ldr	r3, [r7, #32]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d1cf      	bne.n	80111c0 <pif_DecToString+0x3c>
        }

        if ((str_cnt != 0) && (exp_cnt < str_cnt)) {
 8011220:	88fb      	ldrh	r3, [r7, #6]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d026      	beq.n	8011274 <pif_DecToString+0xf0>
 8011226:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011228:	88fb      	ldrh	r3, [r7, #6]
 801122a:	429a      	cmp	r2, r3
 801122c:	d222      	bcs.n	8011274 <pif_DecToString+0xf0>
            zero_str_cnt = str_cnt - exp_cnt;
 801122e:	88fa      	ldrh	r2, [r7, #6]
 8011230:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011232:	1ad3      	subs	r3, r2, r3
 8011234:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 8011236:	e00a      	b.n	801124e <pif_DecToString+0xca>
            	p_buffer[idx++] = '0';
 8011238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123a:	1c5a      	adds	r2, r3, #1
 801123c:	62ba      	str	r2, [r7, #40]	; 0x28
 801123e:	461a      	mov	r2, r3
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	4413      	add	r3, r2
 8011244:	2230      	movs	r2, #48	; 0x30
 8011246:	701a      	strb	r2, [r3, #0]
                zero_str_cnt--;
 8011248:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801124a:	3b01      	subs	r3, #1
 801124c:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 801124e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011250:	2b00      	cmp	r3, #0
 8011252:	d1f1      	bne.n	8011238 <pif_DecToString+0xb4>
            }
        }
        while (idx_inv) {
 8011254:	e00e      	b.n	8011274 <pif_DecToString+0xf0>
            idx_inv--;
 8011256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011258:	3b01      	subs	r3, #1
 801125a:	627b      	str	r3, [r7, #36]	; 0x24
            p_buffer[idx++] = inv_buf[idx_inv];
 801125c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801125e:	1c5a      	adds	r2, r3, #1
 8011260:	62ba      	str	r2, [r7, #40]	; 0x28
 8011262:	461a      	mov	r2, r3
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	4413      	add	r3, r2
 8011268:	f107 0114 	add.w	r1, r7, #20
 801126c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801126e:	440a      	add	r2, r1
 8011270:	7812      	ldrb	r2, [r2, #0]
 8011272:	701a      	strb	r2, [r3, #0]
        while (idx_inv) {
 8011274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011276:	2b00      	cmp	r3, #0
 8011278:	d1ed      	bne.n	8011256 <pif_DecToString+0xd2>
 801127a:	e012      	b.n	80112a2 <pif_DecToString+0x11e>
        }
    }
    else {
        zero_str_cnt = str_cnt;
 801127c:	88fb      	ldrh	r3, [r7, #6]
 801127e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        do {
        	p_buffer[idx++] = '0';
 8011280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011282:	1c5a      	adds	r2, r3, #1
 8011284:	62ba      	str	r2, [r7, #40]	; 0x28
 8011286:	461a      	mov	r2, r3
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	4413      	add	r3, r2
 801128c:	2230      	movs	r2, #48	; 0x30
 801128e:	701a      	strb	r2, [r3, #0]
            if (zero_str_cnt > 0) zero_str_cnt--;
 8011290:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011292:	2b00      	cmp	r3, #0
 8011294:	d002      	beq.n	801129c <pif_DecToString+0x118>
 8011296:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011298:	3b01      	subs	r3, #1
 801129a:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
        while (zero_str_cnt);
 801129c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d1ee      	bne.n	8011280 <pif_DecToString+0xfc>
    }
    return idx;
 80112a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3734      	adds	r7, #52	; 0x34
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr
 80112b0:	080272bc 	.word	0x080272bc
 80112b4:	cccccccd 	.word	0xcccccccd

080112b8 <pif_HexToString>:

int pif_HexToString(char* p_buffer, uint32_t value, uint16_t str_cnt, BOOL upper)
{
 80112b8:	b480      	push	{r7}
 80112ba:	b08b      	sub	sp, #44	; 0x2c
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	4611      	mov	r1, r2
 80112c4:	461a      	mov	r2, r3
 80112c6:	460b      	mov	r3, r1
 80112c8:	80fb      	strh	r3, [r7, #6]
 80112ca:	4613      	mov	r3, r2
 80112cc:	717b      	strb	r3, [r7, #5]
	int i, idx = 0;
 80112ce:	2300      	movs	r3, #0
 80112d0:	623b      	str	r3, [r7, #32]
	BOOL first;
    uint32_t tmp_val;
    const char* kHexChar = upper ? kPifHexUpperChar : kPifHexLowerChar;
 80112d2:	797b      	ldrb	r3, [r7, #5]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d002      	beq.n	80112de <pif_HexToString+0x26>
 80112d8:	4b2f      	ldr	r3, [pc, #188]	; (8011398 <pif_HexToString+0xe0>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	e001      	b.n	80112e2 <pif_HexToString+0x2a>
 80112de:	4b2f      	ldr	r3, [pc, #188]	; (801139c <pif_HexToString+0xe4>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	61bb      	str	r3, [r7, #24]

    if (str_cnt) {
 80112e4:	88fb      	ldrh	r3, [r7, #6]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d01d      	beq.n	8011326 <pif_HexToString+0x6e>
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 80112ea:	88fb      	ldrh	r3, [r7, #6]
 80112ec:	3b01      	subs	r3, #1
 80112ee:	009b      	lsls	r3, r3, #2
 80112f0:	627b      	str	r3, [r7, #36]	; 0x24
 80112f2:	e014      	b.n	801131e <pif_HexToString+0x66>
    		tmp_val = (value >> i) & 0x0F;
 80112f4:	68ba      	ldr	r2, [r7, #8]
 80112f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f8:	fa22 f303 	lsr.w	r3, r2, r3
 80112fc:	f003 030f 	and.w	r3, r3, #15
 8011300:	617b      	str	r3, [r7, #20]
    		p_buffer[idx++] = kHexChar[tmp_val];
 8011302:	69ba      	ldr	r2, [r7, #24]
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	441a      	add	r2, r3
 8011308:	6a3b      	ldr	r3, [r7, #32]
 801130a:	1c59      	adds	r1, r3, #1
 801130c:	6239      	str	r1, [r7, #32]
 801130e:	4619      	mov	r1, r3
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	440b      	add	r3, r1
 8011314:	7812      	ldrb	r2, [r2, #0]
 8011316:	701a      	strb	r2, [r3, #0]
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 8011318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131a:	3b04      	subs	r3, #4
 801131c:	627b      	str	r3, [r7, #36]	; 0x24
 801131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011320:	2b00      	cmp	r3, #0
 8011322:	dae7      	bge.n	80112f4 <pif_HexToString+0x3c>
 8011324:	e030      	b.n	8011388 <pif_HexToString+0xd0>
    	}
    }
    else if (value > 0) {
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d025      	beq.n	8011378 <pif_HexToString+0xc0>
    	first = TRUE;
 801132c:	2301      	movs	r3, #1
 801132e:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 8011330:	231c      	movs	r3, #28
 8011332:	627b      	str	r3, [r7, #36]	; 0x24
 8011334:	e01c      	b.n	8011370 <pif_HexToString+0xb8>
    		tmp_val = (value >> i) & 0x0F;
 8011336:	68ba      	ldr	r2, [r7, #8]
 8011338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133a:	fa22 f303 	lsr.w	r3, r2, r3
 801133e:	f003 030f 	and.w	r3, r3, #15
 8011342:	617b      	str	r3, [r7, #20]
    		if (!first || tmp_val) {
 8011344:	7ffb      	ldrb	r3, [r7, #31]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d002      	beq.n	8011350 <pif_HexToString+0x98>
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d00c      	beq.n	801136a <pif_HexToString+0xb2>
    			p_buffer[idx++] = kHexChar[tmp_val];
 8011350:	69ba      	ldr	r2, [r7, #24]
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	441a      	add	r2, r3
 8011356:	6a3b      	ldr	r3, [r7, #32]
 8011358:	1c59      	adds	r1, r3, #1
 801135a:	6239      	str	r1, [r7, #32]
 801135c:	4619      	mov	r1, r3
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	440b      	add	r3, r1
 8011362:	7812      	ldrb	r2, [r2, #0]
 8011364:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 8011366:	2300      	movs	r3, #0
 8011368:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 801136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136c:	3b04      	subs	r3, #4
 801136e:	627b      	str	r3, [r7, #36]	; 0x24
 8011370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011372:	2b00      	cmp	r3, #0
 8011374:	dadf      	bge.n	8011336 <pif_HexToString+0x7e>
 8011376:	e007      	b.n	8011388 <pif_HexToString+0xd0>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 8011378:	6a3b      	ldr	r3, [r7, #32]
 801137a:	1c5a      	adds	r2, r3, #1
 801137c:	623a      	str	r2, [r7, #32]
 801137e:	461a      	mov	r2, r3
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	4413      	add	r3, r2
 8011384:	2230      	movs	r2, #48	; 0x30
 8011386:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 8011388:	6a3b      	ldr	r3, [r7, #32]
}
 801138a:	4618      	mov	r0, r3
 801138c:	372c      	adds	r7, #44	; 0x2c
 801138e:	46bd      	mov	sp, r7
 8011390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011394:	4770      	bx	lr
 8011396:	bf00      	nop
 8011398:	20000120 	.word	0x20000120
 801139c:	20000124 	.word	0x20000124

080113a0 <pif_FloatToString>:

int pif_FloatToString(char* p_buffer, double value, uint16_t point)
{
 80113a0:	b5b0      	push	{r4, r5, r7, lr}
 80113a2:	b086      	sub	sp, #24
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	ed87 0b00 	vstr	d0, [r7]
 80113ac:	460b      	mov	r3, r1
 80113ae:	817b      	strh	r3, [r7, #10]
	uint16_t i, idx = 0;
 80113b0:	2300      	movs	r3, #0
 80113b2:	82bb      	strh	r3, [r7, #20]
	uint32_t num;

	if (value < 0.0) {
 80113b4:	f04f 0200 	mov.w	r2, #0
 80113b8:	f04f 0300 	mov.w	r3, #0
 80113bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80113c0:	f7ef fb40 	bl	8000a44 <__aeabi_dcmplt>
 80113c4:	4603      	mov	r3, r0
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d00d      	beq.n	80113e6 <pif_FloatToString+0x46>
		p_buffer[idx++] = '-';
 80113ca:	8abb      	ldrh	r3, [r7, #20]
 80113cc:	1c5a      	adds	r2, r3, #1
 80113ce:	82ba      	strh	r2, [r7, #20]
 80113d0:	461a      	mov	r2, r3
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	4413      	add	r3, r2
 80113d6:	222d      	movs	r2, #45	; 0x2d
 80113d8:	701a      	strb	r2, [r3, #0]
		value *= -1.0;
 80113da:	683c      	ldr	r4, [r7, #0]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80113e2:	e9c7 4500 	strd	r4, r5, [r7]
	}

	num = (uint32_t)value;
 80113e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80113ea:	f7ef fb7b 	bl	8000ae4 <__aeabi_d2uiz>
 80113ee:	4603      	mov	r3, r0
 80113f0:	613b      	str	r3, [r7, #16]
	idx += pif_DecToString(p_buffer + idx, num, 0);
 80113f2:	8abb      	ldrh	r3, [r7, #20]
 80113f4:	68fa      	ldr	r2, [r7, #12]
 80113f6:	4413      	add	r3, r2
 80113f8:	2200      	movs	r2, #0
 80113fa:	6939      	ldr	r1, [r7, #16]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7ff fec1 	bl	8011184 <pif_DecToString>
 8011402:	4603      	mov	r3, r0
 8011404:	b29a      	uxth	r2, r3
 8011406:	8abb      	ldrh	r3, [r7, #20]
 8011408:	4413      	add	r3, r2
 801140a:	82bb      	strh	r3, [r7, #20]
	p_buffer[idx++] = '.';
 801140c:	8abb      	ldrh	r3, [r7, #20]
 801140e:	1c5a      	adds	r2, r3, #1
 8011410:	82ba      	strh	r2, [r7, #20]
 8011412:	461a      	mov	r2, r3
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	4413      	add	r3, r2
 8011418:	222e      	movs	r2, #46	; 0x2e
 801141a:	701a      	strb	r2, [r3, #0]

	if (point == 0) point = 6;
 801141c:	897b      	ldrh	r3, [r7, #10]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d101      	bne.n	8011426 <pif_FloatToString+0x86>
 8011422:	2306      	movs	r3, #6
 8011424:	817b      	strh	r3, [r7, #10]
	value -= num;
 8011426:	6938      	ldr	r0, [r7, #16]
 8011428:	f7ef f820 	bl	800046c <__aeabi_ui2d>
 801142c:	4602      	mov	r2, r0
 801142e:	460b      	mov	r3, r1
 8011430:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011434:	f7ee fedc 	bl	80001f0 <__aeabi_dsub>
 8011438:	4602      	mov	r2, r0
 801143a:	460b      	mov	r3, r1
 801143c:	e9c7 2300 	strd	r2, r3, [r7]
	for (i = 0; i < point; i++) value *= 10;
 8011440:	2300      	movs	r3, #0
 8011442:	82fb      	strh	r3, [r7, #22]
 8011444:	e00d      	b.n	8011462 <pif_FloatToString+0xc2>
 8011446:	f04f 0200 	mov.w	r2, #0
 801144a:	4b13      	ldr	r3, [pc, #76]	; (8011498 <pif_FloatToString+0xf8>)
 801144c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011450:	f7ef f886 	bl	8000560 <__aeabi_dmul>
 8011454:	4602      	mov	r2, r0
 8011456:	460b      	mov	r3, r1
 8011458:	e9c7 2300 	strd	r2, r3, [r7]
 801145c:	8afb      	ldrh	r3, [r7, #22]
 801145e:	3301      	adds	r3, #1
 8011460:	82fb      	strh	r3, [r7, #22]
 8011462:	8afa      	ldrh	r2, [r7, #22]
 8011464:	897b      	ldrh	r3, [r7, #10]
 8011466:	429a      	cmp	r2, r3
 8011468:	d3ed      	bcc.n	8011446 <pif_FloatToString+0xa6>

	idx += pif_DecToString(p_buffer + idx, (uint32_t)value, point);
 801146a:	8abb      	ldrh	r3, [r7, #20]
 801146c:	68fa      	ldr	r2, [r7, #12]
 801146e:	18d4      	adds	r4, r2, r3
 8011470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011474:	f7ef fb36 	bl	8000ae4 <__aeabi_d2uiz>
 8011478:	4601      	mov	r1, r0
 801147a:	897b      	ldrh	r3, [r7, #10]
 801147c:	461a      	mov	r2, r3
 801147e:	4620      	mov	r0, r4
 8011480:	f7ff fe80 	bl	8011184 <pif_DecToString>
 8011484:	4603      	mov	r3, r0
 8011486:	b29a      	uxth	r2, r3
 8011488:	8abb      	ldrh	r3, [r7, #20]
 801148a:	4413      	add	r3, r2
 801148c:	82bb      	strh	r3, [r7, #20]
    return idx;
 801148e:	8abb      	ldrh	r3, [r7, #20]
}
 8011490:	4618      	mov	r0, r3
 8011492:	3718      	adds	r7, #24
 8011494:	46bd      	mov	sp, r7
 8011496:	bdb0      	pop	{r4, r5, r7, pc}
 8011498:	40240000 	.word	0x40240000

0801149c <pif_PrintFormat>:

void pif_PrintFormat(char* p_buffer, va_list* p_data, const char* p_format)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b08c      	sub	sp, #48	; 0x30
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	60f8      	str	r0, [r7, #12]
 80114a4:	60b9      	str	r1, [r7, #8]
 80114a6:	607a      	str	r2, [r7, #4]
	unsigned long ulong_val;
	long long_val;
	uint16_t num_str_cnt;
	BOOL is_long;
	char *p_var_str;
	int offset = 0;
 80114a8:	2300      	movs	r3, #0
 80114aa:	623b      	str	r3, [r7, #32]
	size_t size;

	while (*p_format) {
 80114ac:	e242      	b.n	8011934 <pif_PrintFormat+0x498>
        if (*p_format == '%') {
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	781b      	ldrb	r3, [r3, #0]
 80114b2:	2b25      	cmp	r3, #37	; 0x25
 80114b4:	f040 8230 	bne.w	8011918 <pif_PrintFormat+0x47c>
            num_str_cnt = 0;
 80114b8:	2300      	movs	r3, #0
 80114ba:	84fb      	strh	r3, [r7, #38]	; 0x26
        	is_long = FALSE;
 80114bc:	2300      	movs	r3, #0
 80114be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
NEXT_STR:
			p_format = p_format + 1;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	3301      	adds	r3, #1
 80114c6:	607b      	str	r3, [r7, #4]
            switch(*p_format) {
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	3b25      	subs	r3, #37	; 0x25
 80114ce:	2b53      	cmp	r3, #83	; 0x53
 80114d0:	f200 822d 	bhi.w	801192e <pif_PrintFormat+0x492>
 80114d4:	a201      	add	r2, pc, #4	; (adr r2, 80114dc <pif_PrintFormat+0x40>)
 80114d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114da:	bf00      	nop
 80114dc:	08011907 	.word	0x08011907
 80114e0:	0801192f 	.word	0x0801192f
 80114e4:	0801192f 	.word	0x0801192f
 80114e8:	0801192f 	.word	0x0801192f
 80114ec:	0801192f 	.word	0x0801192f
 80114f0:	0801192f 	.word	0x0801192f
 80114f4:	0801192f 	.word	0x0801192f
 80114f8:	0801192f 	.word	0x0801192f
 80114fc:	0801192f 	.word	0x0801192f
 8011500:	0801192f 	.word	0x0801192f
 8011504:	0801192f 	.word	0x0801192f
 8011508:	0801162d 	.word	0x0801162d
 801150c:	0801162d 	.word	0x0801162d
 8011510:	0801162d 	.word	0x0801162d
 8011514:	0801162d 	.word	0x0801162d
 8011518:	0801162d 	.word	0x0801162d
 801151c:	0801162d 	.word	0x0801162d
 8011520:	0801162d 	.word	0x0801162d
 8011524:	0801162d 	.word	0x0801162d
 8011528:	0801162d 	.word	0x0801162d
 801152c:	0801162d 	.word	0x0801162d
 8011530:	0801192f 	.word	0x0801192f
 8011534:	0801192f 	.word	0x0801192f
 8011538:	0801192f 	.word	0x0801192f
 801153c:	0801192f 	.word	0x0801192f
 8011540:	0801192f 	.word	0x0801192f
 8011544:	0801192f 	.word	0x0801192f
 8011548:	0801192f 	.word	0x0801192f
 801154c:	0801192f 	.word	0x0801192f
 8011550:	0801192f 	.word	0x0801192f
 8011554:	0801192f 	.word	0x0801192f
 8011558:	0801192f 	.word	0x0801192f
 801155c:	0801192f 	.word	0x0801192f
 8011560:	0801192f 	.word	0x0801192f
 8011564:	0801192f 	.word	0x0801192f
 8011568:	0801192f 	.word	0x0801192f
 801156c:	0801192f 	.word	0x0801192f
 8011570:	0801192f 	.word	0x0801192f
 8011574:	0801192f 	.word	0x0801192f
 8011578:	0801192f 	.word	0x0801192f
 801157c:	0801192f 	.word	0x0801192f
 8011580:	0801192f 	.word	0x0801192f
 8011584:	0801192f 	.word	0x0801192f
 8011588:	0801192f 	.word	0x0801192f
 801158c:	0801192f 	.word	0x0801192f
 8011590:	0801192f 	.word	0x0801192f
 8011594:	0801192f 	.word	0x0801192f
 8011598:	0801192f 	.word	0x0801192f
 801159c:	0801192f 	.word	0x0801192f
 80115a0:	0801192f 	.word	0x0801192f
 80115a4:	0801192f 	.word	0x0801192f
 80115a8:	08011803 	.word	0x08011803
 80115ac:	0801192f 	.word	0x0801192f
 80115b0:	0801192f 	.word	0x0801192f
 80115b4:	0801192f 	.word	0x0801192f
 80115b8:	0801192f 	.word	0x0801192f
 80115bc:	0801192f 	.word	0x0801192f
 80115c0:	0801192f 	.word	0x0801192f
 80115c4:	0801192f 	.word	0x0801192f
 80115c8:	0801192f 	.word	0x0801192f
 80115cc:	0801192f 	.word	0x0801192f
 80115d0:	08011653 	.word	0x08011653
 80115d4:	080118e9 	.word	0x080118e9
 80115d8:	080116ab 	.word	0x080116ab
 80115dc:	0801192f 	.word	0x0801192f
 80115e0:	0801185b 	.word	0x0801185b
 80115e4:	0801192f 	.word	0x0801192f
 80115e8:	0801192f 	.word	0x0801192f
 80115ec:	080116ab 	.word	0x080116ab
 80115f0:	0801192f 	.word	0x0801192f
 80115f4:	0801192f 	.word	0x0801192f
 80115f8:	0801164b 	.word	0x0801164b
 80115fc:	0801192f 	.word	0x0801192f
 8011600:	0801192f 	.word	0x0801192f
 8011604:	0801192f 	.word	0x0801192f
 8011608:	0801192f 	.word	0x0801192f
 801160c:	0801192f 	.word	0x0801192f
 8011610:	0801192f 	.word	0x0801192f
 8011614:	08011891 	.word	0x08011891
 8011618:	0801192f 	.word	0x0801192f
 801161c:	08011753 	.word	0x08011753
 8011620:	0801192f 	.word	0x0801192f
 8011624:	0801192f 	.word	0x0801192f
 8011628:	080117ab 	.word	0x080117ab
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    num_str_cnt *= 10;
 801162c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801162e:	461a      	mov	r2, r3
 8011630:	0092      	lsls	r2, r2, #2
 8011632:	4413      	add	r3, r2
 8011634:	005b      	lsls	r3, r3, #1
 8011636:	84fb      	strh	r3, [r7, #38]	; 0x26
                    num_str_cnt += *p_format - '0';
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	b29a      	uxth	r2, r3
 801163e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011640:	4413      	add	r3, r2
 8011642:	b29b      	uxth	r3, r3
 8011644:	3b30      	subs	r3, #48	; 0x30
 8011646:	84fb      	strh	r3, [r7, #38]	; 0x26
                    goto NEXT_STR;
 8011648:	e73b      	b.n	80114c2 <pif_PrintFormat+0x26>

                case 'l':
					is_long = TRUE;
 801164a:	2301      	movs	r3, #1
 801164c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					goto NEXT_STR;
 8011650:	e737      	b.n	80114c2 <pif_PrintFormat+0x26>

                case 'b':
                	if (is_long) {
 8011652:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011656:	2b00      	cmp	r3, #0
 8011658:	d013      	beq.n	8011682 <pif_PrintFormat+0x1e6>
                		ulong_val = va_arg(*p_data, unsigned long);
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	1d19      	adds	r1, r3, #4
 8011660:	68ba      	ldr	r2, [r7, #8]
 8011662:	6011      	str	r1, [r2, #0]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	617b      	str	r3, [r7, #20]
						offset += pif_BinToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011668:	6a3b      	ldr	r3, [r7, #32]
 801166a:	68fa      	ldr	r2, [r7, #12]
 801166c:	4413      	add	r3, r2
 801166e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011670:	6979      	ldr	r1, [r7, #20]
 8011672:	4618      	mov	r0, r3
 8011674:	f7ff fd26 	bl	80110c4 <pif_BinToString>
 8011678:	4602      	mov	r2, r0
 801167a:	6a3b      	ldr	r3, [r7, #32]
 801167c:	4413      	add	r3, r2
 801167e:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 8011680:	e155      	b.n	801192e <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	1d19      	adds	r1, r3, #4
 8011688:	68ba      	ldr	r2, [r7, #8]
 801168a:	6011      	str	r1, [r2, #0]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	61bb      	str	r3, [r7, #24]
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
 8011690:	6a3b      	ldr	r3, [r7, #32]
 8011692:	68fa      	ldr	r2, [r7, #12]
 8011694:	4413      	add	r3, r2
 8011696:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011698:	69b9      	ldr	r1, [r7, #24]
 801169a:	4618      	mov	r0, r3
 801169c:	f7ff fd12 	bl	80110c4 <pif_BinToString>
 80116a0:	4602      	mov	r2, r0
 80116a2:	6a3b      	ldr	r3, [r7, #32]
 80116a4:	4413      	add	r3, r2
 80116a6:	623b      	str	r3, [r7, #32]
                    break;
 80116a8:	e141      	b.n	801192e <pif_PrintFormat+0x492>

                case 'd':
                case 'i':
                	if (is_long) {
 80116aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d027      	beq.n	8011702 <pif_PrintFormat+0x266>
            			long_val = va_arg(*p_data, long);
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	1d19      	adds	r1, r3, #4
 80116b8:	68ba      	ldr	r2, [r7, #8]
 80116ba:	6011      	str	r1, [r2, #0]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	62bb      	str	r3, [r7, #40]	; 0x28
            			if (long_val < 0) {
 80116c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	da10      	bge.n	80116e8 <pif_PrintFormat+0x24c>
            				p_buffer[offset++] = '-';
 80116c6:	6a3b      	ldr	r3, [r7, #32]
 80116c8:	1c5a      	adds	r2, r3, #1
 80116ca:	623a      	str	r2, [r7, #32]
 80116cc:	461a      	mov	r2, r3
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	4413      	add	r3, r2
 80116d2:	222d      	movs	r2, #45	; 0x2d
 80116d4:	701a      	strb	r2, [r3, #0]
            				long_val *= -1;
 80116d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d8:	425b      	negs	r3, r3
 80116da:	62bb      	str	r3, [r7, #40]	; 0x28
            				if (num_str_cnt) num_str_cnt--;
 80116dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d002      	beq.n	80116e8 <pif_PrintFormat+0x24c>
 80116e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80116e4:	3b01      	subs	r3, #1
 80116e6:	84fb      	strh	r3, [r7, #38]	; 0x26
            			}
            			offset += pif_DecToString(p_buffer + offset, long_val, num_str_cnt);
 80116e8:	6a3b      	ldr	r3, [r7, #32]
 80116ea:	68fa      	ldr	r2, [r7, #12]
 80116ec:	4413      	add	r3, r2
 80116ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80116f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7ff fd46 	bl	8011184 <pif_DecToString>
 80116f8:	4602      	mov	r2, r0
 80116fa:	6a3b      	ldr	r3, [r7, #32]
 80116fc:	4413      	add	r3, r2
 80116fe:	623b      	str	r3, [r7, #32]
                			int_val *= -1;
                			if (num_str_cnt) num_str_cnt--;
            			}
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
                	}
                    break;
 8011700:	e115      	b.n	801192e <pif_PrintFormat+0x492>
            			int_val = va_arg(*p_data, int);
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	1d19      	adds	r1, r3, #4
 8011708:	68ba      	ldr	r2, [r7, #8]
 801170a:	6011      	str	r1, [r2, #0]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	62fb      	str	r3, [r7, #44]	; 0x2c
            			if (int_val < 0) {
 8011710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011712:	2b00      	cmp	r3, #0
 8011714:	da10      	bge.n	8011738 <pif_PrintFormat+0x29c>
            				p_buffer[offset++] = '-';
 8011716:	6a3b      	ldr	r3, [r7, #32]
 8011718:	1c5a      	adds	r2, r3, #1
 801171a:	623a      	str	r2, [r7, #32]
 801171c:	461a      	mov	r2, r3
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	4413      	add	r3, r2
 8011722:	222d      	movs	r2, #45	; 0x2d
 8011724:	701a      	strb	r2, [r3, #0]
                			int_val *= -1;
 8011726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011728:	425b      	negs	r3, r3
 801172a:	62fb      	str	r3, [r7, #44]	; 0x2c
                			if (num_str_cnt) num_str_cnt--;
 801172c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801172e:	2b00      	cmp	r3, #0
 8011730:	d002      	beq.n	8011738 <pif_PrintFormat+0x29c>
 8011732:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011734:	3b01      	subs	r3, #1
 8011736:	84fb      	strh	r3, [r7, #38]	; 0x26
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
 8011738:	6a3b      	ldr	r3, [r7, #32]
 801173a:	68fa      	ldr	r2, [r7, #12]
 801173c:	4413      	add	r3, r2
 801173e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011740:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011742:	4618      	mov	r0, r3
 8011744:	f7ff fd1e 	bl	8011184 <pif_DecToString>
 8011748:	4602      	mov	r2, r0
 801174a:	6a3b      	ldr	r3, [r7, #32]
 801174c:	4413      	add	r3, r2
 801174e:	623b      	str	r3, [r7, #32]
                    break;
 8011750:	e0ed      	b.n	801192e <pif_PrintFormat+0x492>

                case 'u':
                	if (is_long) {
 8011752:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011756:	2b00      	cmp	r3, #0
 8011758:	d013      	beq.n	8011782 <pif_PrintFormat+0x2e6>
						ulong_val = va_arg(*p_data, unsigned long);
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	1d19      	adds	r1, r3, #4
 8011760:	68ba      	ldr	r2, [r7, #8]
 8011762:	6011      	str	r1, [r2, #0]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	617b      	str	r3, [r7, #20]
						offset += pif_DecToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011768:	6a3b      	ldr	r3, [r7, #32]
 801176a:	68fa      	ldr	r2, [r7, #12]
 801176c:	4413      	add	r3, r2
 801176e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011770:	6979      	ldr	r1, [r7, #20]
 8011772:	4618      	mov	r0, r3
 8011774:	f7ff fd06 	bl	8011184 <pif_DecToString>
 8011778:	4602      	mov	r2, r0
 801177a:	6a3b      	ldr	r3, [r7, #32]
 801177c:	4413      	add	r3, r2
 801177e:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 8011780:	e0d5      	b.n	801192e <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	1d19      	adds	r1, r3, #4
 8011788:	68ba      	ldr	r2, [r7, #8]
 801178a:	6011      	str	r1, [r2, #0]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	61bb      	str	r3, [r7, #24]
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
 8011790:	6a3b      	ldr	r3, [r7, #32]
 8011792:	68fa      	ldr	r2, [r7, #12]
 8011794:	4413      	add	r3, r2
 8011796:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011798:	69b9      	ldr	r1, [r7, #24]
 801179a:	4618      	mov	r0, r3
 801179c:	f7ff fcf2 	bl	8011184 <pif_DecToString>
 80117a0:	4602      	mov	r2, r0
 80117a2:	6a3b      	ldr	r3, [r7, #32]
 80117a4:	4413      	add	r3, r2
 80117a6:	623b      	str	r3, [r7, #32]
                    break;
 80117a8:	e0c1      	b.n	801192e <pif_PrintFormat+0x492>

                case 'x':
                	if (is_long) {
 80117aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d013      	beq.n	80117da <pif_PrintFormat+0x33e>
                		ulong_val = va_arg(*p_data, unsigned long);
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	1d19      	adds	r1, r3, #4
 80117b8:	68ba      	ldr	r2, [r7, #8]
 80117ba:	6011      	str	r1, [r2, #0]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	617b      	str	r3, [r7, #20]
						offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, FALSE);
 80117c0:	6a3b      	ldr	r3, [r7, #32]
 80117c2:	68fa      	ldr	r2, [r7, #12]
 80117c4:	18d0      	adds	r0, r2, r3
 80117c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80117c8:	2300      	movs	r3, #0
 80117ca:	6979      	ldr	r1, [r7, #20]
 80117cc:	f7ff fd74 	bl	80112b8 <pif_HexToString>
 80117d0:	4602      	mov	r2, r0
 80117d2:	6a3b      	ldr	r3, [r7, #32]
 80117d4:	4413      	add	r3, r2
 80117d6:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
                	}
                    break;
 80117d8:	e0a9      	b.n	801192e <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	1d19      	adds	r1, r3, #4
 80117e0:	68ba      	ldr	r2, [r7, #8]
 80117e2:	6011      	str	r1, [r2, #0]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	61bb      	str	r3, [r7, #24]
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
 80117e8:	6a3b      	ldr	r3, [r7, #32]
 80117ea:	68fa      	ldr	r2, [r7, #12]
 80117ec:	18d0      	adds	r0, r2, r3
 80117ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80117f0:	2300      	movs	r3, #0
 80117f2:	69b9      	ldr	r1, [r7, #24]
 80117f4:	f7ff fd60 	bl	80112b8 <pif_HexToString>
 80117f8:	4602      	mov	r2, r0
 80117fa:	6a3b      	ldr	r3, [r7, #32]
 80117fc:	4413      	add	r3, r2
 80117fe:	623b      	str	r3, [r7, #32]
                    break;
 8011800:	e095      	b.n	801192e <pif_PrintFormat+0x492>

                case 'X':
                	if (is_long) {
 8011802:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011806:	2b00      	cmp	r3, #0
 8011808:	d013      	beq.n	8011832 <pif_PrintFormat+0x396>
                		ulong_val = va_arg(*p_data, unsigned long);
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	1d19      	adds	r1, r3, #4
 8011810:	68ba      	ldr	r2, [r7, #8]
 8011812:	6011      	str	r1, [r2, #0]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	617b      	str	r3, [r7, #20]
                		offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, TRUE);
 8011818:	6a3b      	ldr	r3, [r7, #32]
 801181a:	68fa      	ldr	r2, [r7, #12]
 801181c:	18d0      	adds	r0, r2, r3
 801181e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011820:	2301      	movs	r3, #1
 8011822:	6979      	ldr	r1, [r7, #20]
 8011824:	f7ff fd48 	bl	80112b8 <pif_HexToString>
 8011828:	4602      	mov	r2, r0
 801182a:	6a3b      	ldr	r3, [r7, #32]
 801182c:	4413      	add	r3, r2
 801182e:	623b      	str	r3, [r7, #32]
                	}
                	else {
                		uint_val = va_arg(*p_data, unsigned int);
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
                	}
                    break;
 8011830:	e07d      	b.n	801192e <pif_PrintFormat+0x492>
                		uint_val = va_arg(*p_data, unsigned int);
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	1d19      	adds	r1, r3, #4
 8011838:	68ba      	ldr	r2, [r7, #8]
 801183a:	6011      	str	r1, [r2, #0]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	61bb      	str	r3, [r7, #24]
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
 8011840:	6a3b      	ldr	r3, [r7, #32]
 8011842:	68fa      	ldr	r2, [r7, #12]
 8011844:	18d0      	adds	r0, r2, r3
 8011846:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011848:	2301      	movs	r3, #1
 801184a:	69b9      	ldr	r1, [r7, #24]
 801184c:	f7ff fd34 	bl	80112b8 <pif_HexToString>
 8011850:	4602      	mov	r2, r0
 8011852:	6a3b      	ldr	r3, [r7, #32]
 8011854:	4413      	add	r3, r2
 8011856:	623b      	str	r3, [r7, #32]
                    break;
 8011858:	e069      	b.n	801192e <pif_PrintFormat+0x492>

                case 'f':
					offset += pif_FloatToString(p_buffer + offset, va_arg(*p_data, double), num_str_cnt);
 801185a:	6a3b      	ldr	r3, [r7, #32]
 801185c:	68fa      	ldr	r2, [r7, #12]
 801185e:	18d0      	adds	r0, r2, r3
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	3307      	adds	r3, #7
 8011866:	f023 0307 	bic.w	r3, r3, #7
 801186a:	f103 0108 	add.w	r1, r3, #8
 801186e:	68ba      	ldr	r2, [r7, #8]
 8011870:	6011      	str	r1, [r2, #0]
 8011872:	ed93 7b00 	vldr	d7, [r3]
 8011876:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011878:	4619      	mov	r1, r3
 801187a:	eeb0 0a47 	vmov.f32	s0, s14
 801187e:	eef0 0a67 	vmov.f32	s1, s15
 8011882:	f7ff fd8d 	bl	80113a0 <pif_FloatToString>
 8011886:	4602      	mov	r2, r0
 8011888:	6a3b      	ldr	r3, [r7, #32]
 801188a:	4413      	add	r3, r2
 801188c:	623b      	str	r3, [r7, #32]
                    break;
 801188e:	e04e      	b.n	801192e <pif_PrintFormat+0x492>

                case 's':
                    p_var_str = va_arg(*p_data, char *);
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	1d19      	adds	r1, r3, #4
 8011896:	68ba      	ldr	r2, [r7, #8]
 8011898:	6011      	str	r1, [r2, #0]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	613b      	str	r3, [r7, #16]
                    if (p_var_str) {
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d043      	beq.n	801192c <pif_PrintFormat+0x490>
						size = strlen(p_var_str);
 80118a4:	6938      	ldr	r0, [r7, #16]
 80118a6:	f7ee fc97 	bl	80001d8 <strlen>
 80118aa:	61f8      	str	r0, [r7, #28]
						if (offset + size < PIF_LOG_LINE_SIZE - 1) {
 80118ac:	6a3a      	ldr	r2, [r7, #32]
 80118ae:	69fb      	ldr	r3, [r7, #28]
 80118b0:	4413      	add	r3, r2
 80118b2:	2b4e      	cmp	r3, #78	; 0x4e
 80118b4:	d807      	bhi.n	80118c6 <pif_PrintFormat+0x42a>
							strcpy(p_buffer + offset, p_var_str);
 80118b6:	6a3b      	ldr	r3, [r7, #32]
 80118b8:	68fa      	ldr	r2, [r7, #12]
 80118ba:	4413      	add	r3, r2
 80118bc:	6939      	ldr	r1, [r7, #16]
 80118be:	4618      	mov	r0, r3
 80118c0:	f011 fa2e 	bl	8022d20 <strcpy>
 80118c4:	e00b      	b.n	80118de <pif_PrintFormat+0x442>
						}
						else {
							size = PIF_LOG_LINE_SIZE - 1 - offset;
 80118c6:	6a3b      	ldr	r3, [r7, #32]
 80118c8:	f1c3 034f 	rsb	r3, r3, #79	; 0x4f
 80118cc:	61fb      	str	r3, [r7, #28]
							strncpy(p_buffer + offset, p_var_str, size);
 80118ce:	6a3b      	ldr	r3, [r7, #32]
 80118d0:	68fa      	ldr	r2, [r7, #12]
 80118d2:	4413      	add	r3, r2
 80118d4:	69fa      	ldr	r2, [r7, #28]
 80118d6:	6939      	ldr	r1, [r7, #16]
 80118d8:	4618      	mov	r0, r3
 80118da:	f011 fa4b 	bl	8022d74 <strncpy>
						}
						offset += size;
 80118de:	6a3a      	ldr	r2, [r7, #32]
 80118e0:	69fb      	ldr	r3, [r7, #28]
 80118e2:	4413      	add	r3, r2
 80118e4:	623b      	str	r3, [r7, #32]
                    }
                    break;
 80118e6:	e021      	b.n	801192c <pif_PrintFormat+0x490>

                case 'c':
                	p_buffer[offset++] = va_arg(*p_data, int);
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	1d19      	adds	r1, r3, #4
 80118ee:	68ba      	ldr	r2, [r7, #8]
 80118f0:	6011      	str	r1, [r2, #0]
 80118f2:	6819      	ldr	r1, [r3, #0]
 80118f4:	6a3b      	ldr	r3, [r7, #32]
 80118f6:	1c5a      	adds	r2, r3, #1
 80118f8:	623a      	str	r2, [r7, #32]
 80118fa:	461a      	mov	r2, r3
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	4413      	add	r3, r2
 8011900:	b2ca      	uxtb	r2, r1
 8011902:	701a      	strb	r2, [r3, #0]
                    break;
 8011904:	e013      	b.n	801192e <pif_PrintFormat+0x492>

                case '%':
                	p_buffer[offset++] = '%';
 8011906:	6a3b      	ldr	r3, [r7, #32]
 8011908:	1c5a      	adds	r2, r3, #1
 801190a:	623a      	str	r2, [r7, #32]
 801190c:	461a      	mov	r2, r3
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	4413      	add	r3, r2
 8011912:	2225      	movs	r2, #37	; 0x25
 8011914:	701a      	strb	r2, [r3, #0]
                    break;
 8011916:	e00a      	b.n	801192e <pif_PrintFormat+0x492>
            }
        }
        else {
        	p_buffer[offset++] = *p_format;
 8011918:	6a3b      	ldr	r3, [r7, #32]
 801191a:	1c5a      	adds	r2, r3, #1
 801191c:	623a      	str	r2, [r7, #32]
 801191e:	461a      	mov	r2, r3
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	4413      	add	r3, r2
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	7812      	ldrb	r2, [r2, #0]
 8011928:	701a      	strb	r2, [r3, #0]
 801192a:	e000      	b.n	801192e <pif_PrintFormat+0x492>
                    break;
 801192c:	bf00      	nop
        }
        p_format = p_format + 1;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	3301      	adds	r3, #1
 8011932:	607b      	str	r3, [r7, #4]
	while (*p_format) {
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	2b00      	cmp	r3, #0
 801193a:	f47f adb8 	bne.w	80114ae <pif_PrintFormat+0x12>
	}
	p_buffer[offset] = 0;
 801193e:	6a3b      	ldr	r3, [r7, #32]
 8011940:	68fa      	ldr	r2, [r7, #12]
 8011942:	4413      	add	r3, r2
 8011944:	2200      	movs	r2, #0
 8011946:	701a      	strb	r2, [r3, #0]
}
 8011948:	bf00      	nop
 801194a:	3730      	adds	r7, #48	; 0x30
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}

08011950 <pif_Printf>:

void pif_Printf(char* p_buffer, const char* p_format, ...)
{
 8011950:	b40e      	push	{r1, r2, r3}
 8011952:	b580      	push	{r7, lr}
 8011954:	b085      	sub	sp, #20
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
	va_list data;

	va_start(data, p_format);
 801195a:	f107 0320 	add.w	r3, r7, #32
 801195e:	60fb      	str	r3, [r7, #12]
	pif_PrintFormat(p_buffer, &data, p_format);
 8011960:	f107 030c 	add.w	r3, r7, #12
 8011964:	69fa      	ldr	r2, [r7, #28]
 8011966:	4619      	mov	r1, r3
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f7ff fd97 	bl	801149c <pif_PrintFormat>
	va_end(data);
}
 801196e:	bf00      	nop
 8011970:	3714      	adds	r7, #20
 8011972:	46bd      	mov	sp, r7
 8011974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011978:	b003      	add	sp, #12
 801197a:	4770      	bx	lr

0801197c <pifCrc16_Add>:
	}
	return pifCrc7_Result(crc);
}

uint16_t pifCrc16_Add(uint16_t crc, uint8_t data)
{
 801197c:	b480      	push	{r7}
 801197e:	b085      	sub	sp, #20
 8011980:	af00      	add	r7, sp, #0
 8011982:	4603      	mov	r3, r0
 8011984:	460a      	mov	r2, r1
 8011986:	80fb      	strh	r3, [r7, #6]
 8011988:	4613      	mov	r3, r2
 801198a:	717b      	strb	r3, [r7, #5]
	uint16_t i;

    crc ^= (uint16_t)data << 8;
 801198c:	797b      	ldrb	r3, [r7, #5]
 801198e:	021b      	lsls	r3, r3, #8
 8011990:	b21a      	sxth	r2, r3
 8011992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011996:	4053      	eors	r3, r2
 8011998:	b21b      	sxth	r3, r3
 801199a:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 801199c:	2300      	movs	r3, #0
 801199e:	81fb      	strh	r3, [r7, #14]
 80119a0:	e013      	b.n	80119ca <pifCrc16_Add+0x4e>
        if (crc & 0x8000) crc = (crc << 1) ^ 0x1021;
 80119a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	da09      	bge.n	80119be <pifCrc16_Add+0x42>
 80119aa:	88fb      	ldrh	r3, [r7, #6]
 80119ac:	005b      	lsls	r3, r3, #1
 80119ae:	b21b      	sxth	r3, r3
 80119b0:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80119b4:	f083 0301 	eor.w	r3, r3, #1
 80119b8:	b21b      	sxth	r3, r3
 80119ba:	80fb      	strh	r3, [r7, #6]
 80119bc:	e002      	b.n	80119c4 <pifCrc16_Add+0x48>
        else crc <<= 1;
 80119be:	88fb      	ldrh	r3, [r7, #6]
 80119c0:	005b      	lsls	r3, r3, #1
 80119c2:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 80119c4:	89fb      	ldrh	r3, [r7, #14]
 80119c6:	3301      	adds	r3, #1
 80119c8:	81fb      	strh	r3, [r7, #14]
 80119ca:	89fb      	ldrh	r3, [r7, #14]
 80119cc:	2b07      	cmp	r3, #7
 80119ce:	d9e8      	bls.n	80119a2 <pifCrc16_Add+0x26>
    }
	return crc;
 80119d0:	88fb      	ldrh	r3, [r7, #6]
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	3714      	adds	r7, #20
 80119d6:	46bd      	mov	sp, r7
 80119d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119dc:	4770      	bx	lr

080119de <pifCrc16>:

uint16_t pifCrc16(uint8_t* p_data, uint16_t length)
{
 80119de:	b580      	push	{r7, lr}
 80119e0:	b084      	sub	sp, #16
 80119e2:	af00      	add	r7, sp, #0
 80119e4:	6078      	str	r0, [r7, #4]
 80119e6:	460b      	mov	r3, r1
 80119e8:	807b      	strh	r3, [r7, #2]
	uint16_t i, crc = 0;
 80119ea:	2300      	movs	r3, #0
 80119ec:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < length; i++) {
 80119ee:	2300      	movs	r3, #0
 80119f0:	81fb      	strh	r3, [r7, #14]
 80119f2:	e00d      	b.n	8011a10 <pifCrc16+0x32>
		crc = pifCrc16_Add(crc, p_data[i]);
 80119f4:	89fb      	ldrh	r3, [r7, #14]
 80119f6:	687a      	ldr	r2, [r7, #4]
 80119f8:	4413      	add	r3, r2
 80119fa:	781a      	ldrb	r2, [r3, #0]
 80119fc:	89bb      	ldrh	r3, [r7, #12]
 80119fe:	4611      	mov	r1, r2
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7ff ffbb 	bl	801197c <pifCrc16_Add>
 8011a06:	4603      	mov	r3, r0
 8011a08:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < length; i++) {
 8011a0a:	89fb      	ldrh	r3, [r7, #14]
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	81fb      	strh	r3, [r7, #14]
 8011a10:	89fa      	ldrh	r2, [r7, #14]
 8011a12:	887b      	ldrh	r3, [r7, #2]
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d3ed      	bcc.n	80119f4 <pifCrc16+0x16>
	}
	return crc;
 8011a18:	89bb      	ldrh	r3, [r7, #12]
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3710      	adds	r7, #16
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}

08011a22 <pifCheckXor>:
	}
	return sum;
}

uint8_t pifCheckXor(uint8_t* p_data, uint16_t length)
{
 8011a22:	b480      	push	{r7}
 8011a24:	b085      	sub	sp, #20
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
 8011a2a:	460b      	mov	r3, r1
 8011a2c:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint8_t xor = 0;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < length; i++) {
 8011a32:	2300      	movs	r3, #0
 8011a34:	81fb      	strh	r3, [r7, #14]
 8011a36:	e009      	b.n	8011a4c <pifCheckXor+0x2a>
		xor ^= p_data[i];
 8011a38:	89fb      	ldrh	r3, [r7, #14]
 8011a3a:	687a      	ldr	r2, [r7, #4]
 8011a3c:	4413      	add	r3, r2
 8011a3e:	781a      	ldrb	r2, [r3, #0]
 8011a40:	7b7b      	ldrb	r3, [r7, #13]
 8011a42:	4053      	eors	r3, r2
 8011a44:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < length; i++) {
 8011a46:	89fb      	ldrh	r3, [r7, #14]
 8011a48:	3301      	adds	r3, #1
 8011a4a:	81fb      	strh	r3, [r7, #14]
 8011a4c:	89fa      	ldrh	r2, [r7, #14]
 8011a4e:	887b      	ldrh	r3, [r7, #2]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d3f1      	bcc.n	8011a38 <pifCheckXor+0x16>
	}
	return xor;
 8011a54:	7b7b      	ldrb	r3, [r7, #13]
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	3714      	adds	r7, #20
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a60:	4770      	bx	lr

08011a62 <_actReceiveData>:
#include "core/pif_comm.h"


static BOOL _actReceiveData(PifComm* p_owner, uint8_t* p_data)
{
 8011a62:	b580      	push	{r7, lr}
 8011a64:	b082      	sub	sp, #8
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	6078      	str	r0, [r7, #4]
 8011a6a:	6039      	str	r1, [r7, #0]
	return pifRingBuffer_GetByte(p_owner->_p_rx_buffer, p_data);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	699b      	ldr	r3, [r3, #24]
 8011a70:	6839      	ldr	r1, [r7, #0]
 8011a72:	4618      	mov	r0, r3
 8011a74:	f002 f878 	bl	8013b68 <pifRingBuffer_GetByte>
 8011a78:	4603      	mov	r3, r0
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3708      	adds	r7, #8
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}

08011a82 <_actSendData>:

static uint16_t _actSendData(PifComm* p_owner, uint8_t* p_buffer, uint16_t size)
{
 8011a82:	b580      	push	{r7, lr}
 8011a84:	b086      	sub	sp, #24
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	60f8      	str	r0, [r7, #12]
 8011a8a:	60b9      	str	r1, [r7, #8]
 8011a8c:	4613      	mov	r3, r2
 8011a8e:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner->_p_tx_buffer);
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	695b      	ldr	r3, [r3, #20]
 8011a94:	4618      	mov	r0, r3
 8011a96:	f001 ff24 	bl	80138e2 <pifRingBuffer_GetRemainSize>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	82fb      	strh	r3, [r7, #22]

	if (!remain) return 0;
 8011a9e:	8afb      	ldrh	r3, [r7, #22]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d101      	bne.n	8011aa8 <_actSendData+0x26>
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	e012      	b.n	8011ace <_actSendData+0x4c>
	if (size > remain) size = remain;
 8011aa8:	88fa      	ldrh	r2, [r7, #6]
 8011aaa:	8afb      	ldrh	r3, [r7, #22]
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d901      	bls.n	8011ab4 <_actSendData+0x32>
 8011ab0:	8afb      	ldrh	r3, [r7, #22]
 8011ab2:	80fb      	strh	r3, [r7, #6]
	if (pifRingBuffer_PutData(p_owner->_p_tx_buffer, p_buffer, size)) {
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	695b      	ldr	r3, [r3, #20]
 8011ab8:	88fa      	ldrh	r2, [r7, #6]
 8011aba:	68b9      	ldr	r1, [r7, #8]
 8011abc:	4618      	mov	r0, r3
 8011abe:	f001 ffbb 	bl	8013a38 <pifRingBuffer_PutData>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d001      	beq.n	8011acc <_actSendData+0x4a>
		return size;
 8011ac8:	88fb      	ldrh	r3, [r7, #6]
 8011aca:	e000      	b.n	8011ace <_actSendData+0x4c>
	}
	return 0;
 8011acc:	2300      	movs	r3, #0
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3718      	adds	r7, #24
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
	...

08011ad8 <_sendData>:

static void _sendData(PifComm* p_owner)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
	if (p_owner->act_send_data) {
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	689b      	ldr	r3, [r3, #8]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d008      	beq.n	8011afa <_sendData+0x22>
		(*p_owner->__evt_sending)(p_owner->__p_client, p_owner->act_send_data);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aec:	687a      	ldr	r2, [r7, #4]
 8011aee:	6a10      	ldr	r0, [r2, #32]
 8011af0:	687a      	ldr	r2, [r7, #4]
 8011af2:	6892      	ldr	r2, [r2, #8]
 8011af4:	4611      	mov	r1, r2
 8011af6:	4798      	blx	r3
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
				}
			}
		}
	}
}
 8011af8:	e025      	b.n	8011b46 <_sendData+0x6e>
	else if (p_owner->_p_tx_buffer) {
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	695b      	ldr	r3, [r3, #20]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d021      	beq.n	8011b46 <_sendData+0x6e>
		if ((*p_owner->__evt_sending)(p_owner->__p_client, _actSendData)) {
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b06:	687a      	ldr	r2, [r7, #4]
 8011b08:	6a12      	ldr	r2, [r2, #32]
 8011b0a:	4911      	ldr	r1, [pc, #68]	; (8011b50 <_sendData+0x78>)
 8011b0c:	4610      	mov	r0, r2
 8011b0e:	4798      	blx	r3
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d017      	beq.n	8011b46 <_sendData+0x6e>
			if (p_owner->__state == CTS_IDLE) {
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d112      	bne.n	8011b46 <_sendData+0x6e>
				p_owner->__state = CTS_SENDING;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2201      	movs	r2, #1
 8011b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if (p_owner->act_start_transfer) {
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	68db      	ldr	r3, [r3, #12]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d00a      	beq.n	8011b46 <_sendData+0x6e>
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	68db      	ldr	r3, [r3, #12]
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	4798      	blx	r3
 8011b38:	4603      	mov	r3, r0
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d103      	bne.n	8011b46 <_sendData+0x6e>
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2200      	movs	r2, #0
 8011b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8011b46:	bf00      	nop
 8011b48:	3708      	adds	r7, #8
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	08011a83 	.word	0x08011a83

08011b54 <pifComm_Init>:

BOOL pifComm_Init(PifComm* p_owner, PifId id)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	460b      	mov	r3, r1
 8011b5e:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d104      	bne.n	8011b70 <pifComm_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8011b66:	4b0e      	ldr	r3, [pc, #56]	; (8011ba0 <pifComm_Init+0x4c>)
 8011b68:	2201      	movs	r2, #1
 8011b6a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	e012      	b.n	8011b96 <pifComm_Init+0x42>
	}

	memset(p_owner, 0, sizeof(PifComm));
 8011b70:	2230      	movs	r2, #48	; 0x30
 8011b72:	2100      	movs	r1, #0
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f010 ff8f 	bl	8022a98 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8011b7a:	887b      	ldrh	r3, [r7, #2]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d106      	bne.n	8011b8e <pifComm_Init+0x3a>
 8011b80:	4b08      	ldr	r3, [pc, #32]	; (8011ba4 <pifComm_Init+0x50>)
 8011b82:	881b      	ldrh	r3, [r3, #0]
 8011b84:	1c5a      	adds	r2, r3, #1
 8011b86:	b291      	uxth	r1, r2
 8011b88:	4a06      	ldr	r2, [pc, #24]	; (8011ba4 <pifComm_Init+0x50>)
 8011b8a:	8011      	strh	r1, [r2, #0]
 8011b8c:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	887a      	ldrh	r2, [r7, #2]
 8011b92:	821a      	strh	r2, [r3, #16]
    return TRUE;
 8011b94:	2301      	movs	r3, #1
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3708      	adds	r7, #8
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}
 8011b9e:	bf00      	nop
 8011ba0:	20001c0d 	.word	0x20001c0d
 8011ba4:	2000011c 	.word	0x2000011c

08011ba8 <pifComm_Clear>:

void pifComm_Clear(PifComm* p_owner)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	69db      	ldr	r3, [r3, #28]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d007      	beq.n	8011bc8 <pifComm_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	69db      	ldr	r3, [r3, #28]
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f002 fd79 	bl	80146b4 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_rx_buffer) pifRingBuffer_Destroy(&p_owner->_p_rx_buffer);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	699b      	ldr	r3, [r3, #24]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d004      	beq.n	8011bda <pifComm_Clear+0x32>
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	3318      	adds	r3, #24
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f001 fd6f 	bl	80136b8 <pifRingBuffer_Destroy>
	if (p_owner->_p_tx_buffer) pifRingBuffer_Destroy(&p_owner->_p_tx_buffer);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	695b      	ldr	r3, [r3, #20]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d004      	beq.n	8011bec <pifComm_Clear+0x44>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	3314      	adds	r3, #20
 8011be6:	4618      	mov	r0, r3
 8011be8:	f001 fd66 	bl	80136b8 <pifRingBuffer_Destroy>
}
 8011bec:	bf00      	nop
 8011bee:	3708      	adds	r7, #8
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}

08011bf4 <pifComm_AllocRxBuffer>:

BOOL pifComm_AllocRxBuffer(PifComm* p_owner, uint16_t rx_size, uint8_t threshold)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
 8011bfc:	460b      	mov	r3, r1
 8011bfe:	807b      	strh	r3, [r7, #2]
 8011c00:	4613      	mov	r3, r2
 8011c02:	707b      	strb	r3, [r7, #1]
    if (!rx_size) {
 8011c04:	887b      	ldrh	r3, [r7, #2]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d104      	bne.n	8011c14 <pifComm_AllocRxBuffer+0x20>
    	pif_error = E_INVALID_PARAM;
 8011c0a:	4b1a      	ldr	r3, [pc, #104]	; (8011c74 <pifComm_AllocRxBuffer+0x80>)
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8011c10:	2300      	movs	r3, #0
 8011c12:	e02a      	b.n	8011c6a <pifComm_AllocRxBuffer+0x76>
    }

    p_owner->_p_rx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, rx_size);
 8011c14:	887b      	ldrh	r3, [r7, #2]
 8011c16:	4619      	mov	r1, r3
 8011c18:	2000      	movs	r0, #0
 8011c1a:	f001 fd21 	bl	8013660 <pifRingBuffer_CreateHeap>
 8011c1e:	4602      	mov	r2, r0
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	619a      	str	r2, [r3, #24]
    if (!p_owner->_p_rx_buffer) return FALSE;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	699b      	ldr	r3, [r3, #24]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d101      	bne.n	8011c30 <pifComm_AllocRxBuffer+0x3c>
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	e01c      	b.n	8011c6a <pifComm_AllocRxBuffer+0x76>
    if (threshold > 100) threshold = 100;
 8011c30:	787b      	ldrb	r3, [r7, #1]
 8011c32:	2b64      	cmp	r3, #100	; 0x64
 8011c34:	d901      	bls.n	8011c3a <pifComm_AllocRxBuffer+0x46>
 8011c36:	2364      	movs	r3, #100	; 0x64
 8011c38:	707b      	strb	r3, [r7, #1]
    p_owner->__rx_threshold = rx_size * 100 / threshold;
 8011c3a:	887b      	ldrh	r3, [r7, #2]
 8011c3c:	2264      	movs	r2, #100	; 0x64
 8011c3e:	fb03 f202 	mul.w	r2, r3, r2
 8011c42:	787b      	ldrb	r3, [r7, #1]
 8011c44:	fb92 f3f3 	sdiv	r3, r2, r3
 8011c48:	b29a      	uxth	r2, r3
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	84da      	strh	r2, [r3, #38]	; 0x26
    if (p_owner->__rx_threshold == 0) p_owner->__rx_threshold = 1;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d102      	bne.n	8011c5c <pifComm_AllocRxBuffer+0x68>
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2201      	movs	r2, #1
 8011c5a:	84da      	strh	r2, [r3, #38]	; 0x26
    pifRingBuffer_SetName(p_owner->_p_rx_buffer, "RB");
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	699b      	ldr	r3, [r3, #24]
 8011c60:	4905      	ldr	r1, [pc, #20]	; (8011c78 <pifComm_AllocRxBuffer+0x84>)
 8011c62:	4618      	mov	r0, r3
 8011c64:	f001 fda5 	bl	80137b2 <pifRingBuffer_SetName>
    return TRUE;
 8011c68:	2301      	movs	r3, #1
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3708      	adds	r7, #8
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	20001c0d 	.word	0x20001c0d
 8011c78:	080272c8 	.word	0x080272c8

08011c7c <pifComm_AllocTxBuffer>:

BOOL pifComm_AllocTxBuffer(PifComm* p_owner, uint16_t tx_size)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	460b      	mov	r3, r1
 8011c86:	807b      	strh	r3, [r7, #2]
	if (!tx_size) {
 8011c88:	887b      	ldrh	r3, [r7, #2]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d104      	bne.n	8011c98 <pifComm_AllocTxBuffer+0x1c>
    	pif_error = E_INVALID_PARAM;
 8011c8e:	4b0f      	ldr	r3, [pc, #60]	; (8011ccc <pifComm_AllocTxBuffer+0x50>)
 8011c90:	2201      	movs	r2, #1
 8011c92:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8011c94:	2300      	movs	r3, #0
 8011c96:	e014      	b.n	8011cc2 <pifComm_AllocTxBuffer+0x46>
    }

    p_owner->_p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, tx_size);
 8011c98:	887b      	ldrh	r3, [r7, #2]
 8011c9a:	4619      	mov	r1, r3
 8011c9c:	2000      	movs	r0, #0
 8011c9e:	f001 fcdf 	bl	8013660 <pifRingBuffer_CreateHeap>
 8011ca2:	4602      	mov	r2, r0
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	615a      	str	r2, [r3, #20]
    if (!p_owner->_p_tx_buffer) return FALSE;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	695b      	ldr	r3, [r3, #20]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d101      	bne.n	8011cb4 <pifComm_AllocTxBuffer+0x38>
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	e006      	b.n	8011cc2 <pifComm_AllocTxBuffer+0x46>
    pifRingBuffer_SetName(p_owner->_p_tx_buffer, "TB");
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	695b      	ldr	r3, [r3, #20]
 8011cb8:	4905      	ldr	r1, [pc, #20]	; (8011cd0 <pifComm_AllocTxBuffer+0x54>)
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f001 fd79 	bl	80137b2 <pifRingBuffer_SetName>
	return TRUE;
 8011cc0:	2301      	movs	r3, #1
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3708      	adds	r7, #8
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	20001c0d 	.word	0x20001c0d
 8011cd0:	080272cc 	.word	0x080272cc

08011cd4 <pifComm_AttachClient>:

void pifComm_AttachClient(PifComm* p_owner, void* p_client, PifEvtCommParsing evt_parsing, PifEvtCommSending evt_sending)
{
 8011cd4:	b480      	push	{r7}
 8011cd6:	b085      	sub	sp, #20
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	60f8      	str	r0, [r7, #12]
 8011cdc:	60b9      	str	r1, [r7, #8]
 8011cde:	607a      	str	r2, [r7, #4]
 8011ce0:	603b      	str	r3, [r7, #0]
	p_owner->__p_client = p_client;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	68ba      	ldr	r2, [r7, #8]
 8011ce6:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = evt_parsing;
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	687a      	ldr	r2, [r7, #4]
 8011cec:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = evt_sending;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	683a      	ldr	r2, [r7, #0]
 8011cf2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011cf4:	bf00      	nop
 8011cf6:	3714      	adds	r7, #20
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfe:	4770      	bx	lr

08011d00 <pifComm_DetachClient>:

void pifComm_DetachClient(PifComm* p_owner)
{
 8011d00:	b480      	push	{r7}
 8011d02:	b083      	sub	sp, #12
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
	p_owner->__p_client = NULL;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = NULL;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2200      	movs	r2, #0
 8011d12:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = NULL;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2200      	movs	r2, #0
 8011d18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011d1a:	bf00      	nop
 8011d1c:	370c      	adds	r7, #12
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d24:	4770      	bx	lr

08011d26 <pifComm_PutRxByte>:
{
	return pifRingBuffer_GetFillSize(p_owner->_p_tx_buffer);
}

BOOL pifComm_PutRxByte(PifComm* p_owner, uint8_t data)
{
 8011d26:	b580      	push	{r7, lr}
 8011d28:	b082      	sub	sp, #8
 8011d2a:	af00      	add	r7, sp, #0
 8011d2c:	6078      	str	r0, [r7, #4]
 8011d2e:	460b      	mov	r3, r1
 8011d30:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->_p_rx_buffer) return FALSE;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	699b      	ldr	r3, [r3, #24]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d101      	bne.n	8011d3e <pifComm_PutRxByte+0x18>
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	e01c      	b.n	8011d78 <pifComm_PutRxByte+0x52>

	if (!pifRingBuffer_PutByte(p_owner->_p_rx_buffer, data)) return FALSE;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	699b      	ldr	r3, [r3, #24]
 8011d42:	78fa      	ldrb	r2, [r7, #3]
 8011d44:	4611      	mov	r1, r2
 8011d46:	4618      	mov	r0, r3
 8011d48:	f001 fe42 	bl	80139d0 <pifRingBuffer_PutByte>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d101      	bne.n	8011d56 <pifComm_PutRxByte+0x30>
 8011d52:	2300      	movs	r3, #0
 8011d54:	e010      	b.n	8011d78 <pifComm_PutRxByte+0x52>
	if (pifRingBuffer_GetFillSize(p_owner->_p_rx_buffer) >= p_owner->__rx_threshold) {
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	699b      	ldr	r3, [r3, #24]
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f001 fd76 	bl	801384c <pifRingBuffer_GetFillSize>
 8011d60:	4603      	mov	r3, r0
 8011d62:	461a      	mov	r2, r3
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d304      	bcc.n	8011d76 <pifComm_PutRxByte+0x50>
		pifTask_SetTrigger(p_owner->_p_task);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	69db      	ldr	r3, [r3, #28]
 8011d70:	4618      	mov	r0, r3
 8011d72:	f002 fbb1 	bl	80144d8 <pifTask_SetTrigger>
	}
	return TRUE;
 8011d76:	2301      	movs	r3, #1
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3708      	adds	r7, #8
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <pifComm_StartGetTxData>:
	else ucState |= PIF_COMM_SEND_DATA_STATE_EMPTY;
	return ucState;
}

uint8_t pifComm_StartGetTxData(PifComm* p_owner, uint8_t** pp_data, uint16_t* p_length)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b086      	sub	sp, #24
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	60f8      	str	r0, [r7, #12]
 8011d88:	60b9      	str	r1, [r7, #8]
 8011d8a:	607a      	str	r2, [r7, #4]
	uint16_t usLength;

    if (!p_owner->_p_tx_buffer) return PIF_COMM_SEND_DATA_STATE_INIT;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	695b      	ldr	r3, [r3, #20]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d101      	bne.n	8011d98 <pifComm_StartGetTxData+0x18>
 8011d94:	2300      	movs	r3, #0
 8011d96:	e027      	b.n	8011de8 <pifComm_StartGetTxData+0x68>
    if (pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer)) return PIF_COMM_SEND_DATA_STATE_EMPTY;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	695b      	ldr	r3, [r3, #20]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f001 fd42 	bl	8013826 <pifRingBuffer_IsEmpty>
 8011da2:	4603      	mov	r3, r0
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d001      	beq.n	8011dac <pifComm_StartGetTxData+0x2c>
 8011da8:	2302      	movs	r3, #2
 8011daa:	e01d      	b.n	8011de8 <pifComm_StartGetTxData+0x68>

    *pp_data = pifRingBuffer_GetTailPointer(p_owner->_p_tx_buffer, 0);
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	695b      	ldr	r3, [r3, #20]
 8011db0:	2100      	movs	r1, #0
 8011db2:	4618      	mov	r0, r3
 8011db4:	f001 fd0b 	bl	80137ce <pifRingBuffer_GetTailPointer>
 8011db8:	4602      	mov	r2, r0
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	601a      	str	r2, [r3, #0]
    usLength = pifRingBuffer_GetLinerSize(p_owner->_p_tx_buffer, 0);
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	695b      	ldr	r3, [r3, #20]
 8011dc2:	2100      	movs	r1, #0
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f001 fd63 	bl	8013890 <pifRingBuffer_GetLinerSize>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	82fb      	strh	r3, [r7, #22]
    if (!*p_length || usLength <= *p_length) *p_length = usLength;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	881b      	ldrh	r3, [r3, #0]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d004      	beq.n	8011de0 <pifComm_StartGetTxData+0x60>
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	881b      	ldrh	r3, [r3, #0]
 8011dda:	8afa      	ldrh	r2, [r7, #22]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d802      	bhi.n	8011de6 <pifComm_StartGetTxData+0x66>
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	8afa      	ldrh	r2, [r7, #22]
 8011de4:	801a      	strh	r2, [r3, #0]
	return PIF_COMM_SEND_DATA_STATE_DATA;
 8011de6:	2301      	movs	r3, #1
}
 8011de8:	4618      	mov	r0, r3
 8011dea:	3718      	adds	r7, #24
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}

08011df0 <pifComm_EndGetTxData>:

uint8_t pifComm_EndGetTxData(PifComm* p_owner, uint16_t length)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b082      	sub	sp, #8
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	460b      	mov	r3, r1
 8011dfa:	807b      	strh	r3, [r7, #2]
    pifRingBuffer_Remove(p_owner->_p_tx_buffer, length);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	695b      	ldr	r3, [r3, #20]
 8011e00:	887a      	ldrh	r2, [r7, #2]
 8011e02:	4611      	mov	r1, r2
 8011e04:	4618      	mov	r0, r3
 8011e06:	f001 ff20 	bl	8013c4a <pifRingBuffer_Remove>
	return pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer) << 1;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	695b      	ldr	r3, [r3, #20]
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f001 fd09 	bl	8013826 <pifRingBuffer_IsEmpty>
 8011e14:	4603      	mov	r3, r0
 8011e16:	005b      	lsls	r3, r3, #1
 8011e18:	b2db      	uxtb	r3, r3
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3708      	adds	r7, #8
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}

08011e22 <pifComm_FinishTransfer>:
	}
	return FALSE;
}

void pifComm_FinishTransfer(PifComm* p_owner)
{
 8011e22:	b580      	push	{r7, lr}
 8011e24:	b082      	sub	sp, #8
 8011e26:	af00      	add	r7, sp, #0
 8011e28:	6078      	str	r0, [r7, #4]
	p_owner->__state = CTS_IDLE;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pifTask_SetTrigger(p_owner->_p_task);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	69db      	ldr	r3, [r3, #28]
 8011e36:	4618      	mov	r0, r3
 8011e38:	f002 fb4e 	bl	80144d8 <pifTask_SetTrigger>
}
 8011e3c:	bf00      	nop
 8011e3e:	3708      	adds	r7, #8
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <_doTask>:
{
	if (p_owner->__evt_sending) _sendData(p_owner);
}

static uint16_t _doTask(PifTask* p_task)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b084      	sub	sp, #16
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
	PifComm *p_owner = p_task->_p_client;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	60fb      	str	r3, [r7, #12]

	if (p_owner->__evt_parsing) {
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d017      	beq.n	8011e8a <_doTask+0x46>
		if (p_owner->act_receive_data) {
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d008      	beq.n	8011e74 <_doTask+0x30>
			(*p_owner->__evt_parsing)(p_owner->__p_client, p_owner->act_receive_data);
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e66:	68fa      	ldr	r2, [r7, #12]
 8011e68:	6a10      	ldr	r0, [r2, #32]
 8011e6a:	68fa      	ldr	r2, [r7, #12]
 8011e6c:	6852      	ldr	r2, [r2, #4]
 8011e6e:	4611      	mov	r1, r2
 8011e70:	4798      	blx	r3
 8011e72:	e00a      	b.n	8011e8a <_doTask+0x46>
		}
		else if (p_owner->_p_rx_buffer) {
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	699b      	ldr	r3, [r3, #24]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d006      	beq.n	8011e8a <_doTask+0x46>
			(*p_owner->__evt_parsing)(p_owner->__p_client, _actReceiveData);
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e80:	68fa      	ldr	r2, [r7, #12]
 8011e82:	6a12      	ldr	r2, [r2, #32]
 8011e84:	4907      	ldr	r1, [pc, #28]	; (8011ea4 <_doTask+0x60>)
 8011e86:	4610      	mov	r0, r2
 8011e88:	4798      	blx	r3
		}
	}

	if (p_owner->__evt_sending) _sendData(p_owner);
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d002      	beq.n	8011e98 <_doTask+0x54>
 8011e92:	68f8      	ldr	r0, [r7, #12]
 8011e94:	f7ff fe20 	bl	8011ad8 <_sendData>
	return 0;
 8011e98:	2300      	movs	r3, #0
}
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	3710      	adds	r7, #16
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}
 8011ea2:	bf00      	nop
 8011ea4:	08011a63 	.word	0x08011a63

08011ea8 <pifComm_AttachTask>:

PifTask* pifComm_AttachTask(PifComm* p_owner, PifTaskMode mode, uint16_t period, BOOL start, const char* name)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b084      	sub	sp, #16
 8011eac:	af02      	add	r7, sp, #8
 8011eae:	6078      	str	r0, [r7, #4]
 8011eb0:	4608      	mov	r0, r1
 8011eb2:	4611      	mov	r1, r2
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	70fb      	strb	r3, [r7, #3]
 8011eba:	460b      	mov	r3, r1
 8011ebc:	803b      	strh	r3, [r7, #0]
 8011ebe:	4613      	mov	r3, r2
 8011ec0:	70bb      	strb	r3, [r7, #2]
	p_owner->_p_task = pifTaskManager_Add(mode, period, _doTask, p_owner, start);
 8011ec2:	8839      	ldrh	r1, [r7, #0]
 8011ec4:	78f8      	ldrb	r0, [r7, #3]
 8011ec6:	78bb      	ldrb	r3, [r7, #2]
 8011ec8:	9300      	str	r3, [sp, #0]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	4a0d      	ldr	r2, [pc, #52]	; (8011f04 <pifComm_AttachTask+0x5c>)
 8011ece:	f002 fb89 	bl	80145e4 <pifTaskManager_Add>
 8011ed2:	4602      	mov	r2, r0
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	61da      	str	r2, [r3, #28]
	if (p_owner->_p_task) {
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	69db      	ldr	r3, [r3, #28]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d00b      	beq.n	8011ef8 <pifComm_AttachTask+0x50>
		if (name) p_owner->_p_task->name = name;
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d004      	beq.n	8011ef0 <pifComm_AttachTask+0x48>
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	69db      	ldr	r3, [r3, #28]
 8011eea:	693a      	ldr	r2, [r7, #16]
 8011eec:	601a      	str	r2, [r3, #0]
 8011eee:	e003      	b.n	8011ef8 <pifComm_AttachTask+0x50>
		else p_owner->_p_task->name = "Comm";
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	69db      	ldr	r3, [r3, #28]
 8011ef4:	4a04      	ldr	r2, [pc, #16]	; (8011f08 <pifComm_AttachTask+0x60>)
 8011ef6:	601a      	str	r2, [r3, #0]
	}
	return p_owner->_p_task;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	69db      	ldr	r3, [r3, #28]
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3708      	adds	r7, #8
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}
 8011f04:	08011e45 	.word	0x08011e45
 8011f08:	080272d0 	.word	0x080272d0

08011f0c <pifI2cPort_Init>:
#endif
#include "core/pif_task.h"


BOOL pifI2cPort_Init(PifI2cPort* p_owner, PifId id, uint8_t device_count, uint16_t max_transfer_size)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b084      	sub	sp, #16
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	60f8      	str	r0, [r7, #12]
 8011f14:	4608      	mov	r0, r1
 8011f16:	4611      	mov	r1, r2
 8011f18:	461a      	mov	r2, r3
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	817b      	strh	r3, [r7, #10]
 8011f1e:	460b      	mov	r3, r1
 8011f20:	727b      	strb	r3, [r7, #9]
 8011f22:	4613      	mov	r3, r2
 8011f24:	80fb      	strh	r3, [r7, #6]
	if (!p_owner || !device_count || !max_transfer_size) {
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d005      	beq.n	8011f38 <pifI2cPort_Init+0x2c>
 8011f2c:	7a7b      	ldrb	r3, [r7, #9]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d002      	beq.n	8011f38 <pifI2cPort_Init+0x2c>
 8011f32:	88fb      	ldrh	r3, [r7, #6]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d104      	bne.n	8011f42 <pifI2cPort_Init+0x36>
		pif_error = E_INVALID_PARAM;
 8011f38:	4b17      	ldr	r3, [pc, #92]	; (8011f98 <pifI2cPort_Init+0x8c>)
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	e025      	b.n	8011f8e <pifI2cPort_Init+0x82>
	}

    memset(p_owner, 0, sizeof(PifI2cPort));
 8011f42:	2230      	movs	r2, #48	; 0x30
 8011f44:	2100      	movs	r1, #0
 8011f46:	68f8      	ldr	r0, [r7, #12]
 8011f48:	f010 fda6 	bl	8022a98 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8011f4c:	897b      	ldrh	r3, [r7, #10]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d106      	bne.n	8011f60 <pifI2cPort_Init+0x54>
 8011f52:	4b12      	ldr	r3, [pc, #72]	; (8011f9c <pifI2cPort_Init+0x90>)
 8011f54:	881b      	ldrh	r3, [r3, #0]
 8011f56:	1c5a      	adds	r2, r3, #1
 8011f58:	b291      	uxth	r1, r2
 8011f5a:	4a10      	ldr	r2, [pc, #64]	; (8011f9c <pifI2cPort_Init+0x90>)
 8011f5c:	8011      	strh	r1, [r2, #0]
 8011f5e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	897a      	ldrh	r2, [r7, #10]
 8011f64:	819a      	strh	r2, [r3, #12]
    p_owner->__max_transfer_size = max_transfer_size;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	88fa      	ldrh	r2, [r7, #6]
 8011f6a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	3310      	adds	r3, #16
 8011f70:	7a7a      	ldrb	r2, [r7, #9]
 8011f72:	2108      	movs	r1, #8
 8011f74:	4618      	mov	r0, r3
 8011f76:	f000 fae5 	bl	8012544 <pifFixList_Init>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d001      	beq.n	8011f84 <pifI2cPort_Init+0x78>
    return TRUE;
 8011f80:	2301      	movs	r3, #1
 8011f82:	e004      	b.n	8011f8e <pifI2cPort_Init+0x82>
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 8011f84:	bf00      	nop

fail:
	pifI2cPort_Clear(p_owner);
 8011f86:	68f8      	ldr	r0, [r7, #12]
 8011f88:	f000 f80a 	bl	8011fa0 <pifI2cPort_Clear>
	return FALSE;
 8011f8c:	2300      	movs	r3, #0
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	3710      	adds	r7, #16
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}
 8011f96:	bf00      	nop
 8011f98:	20001c0d 	.word	0x20001c0d
 8011f9c:	2000011c 	.word	0x2000011c

08011fa0 <pifI2cPort_Clear>:

void pifI2cPort_Clear(PifI2cPort* p_owner)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
	pifFixList_Clear(&p_owner->__devices, NULL);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	3310      	adds	r3, #16
 8011fac:	2100      	movs	r1, #0
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f000 fb28 	bl	8012604 <pifFixList_Clear>
}
 8011fb4:	bf00      	nop
 8011fb6:	3708      	adds	r7, #8
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}

08011fbc <pifI2cPort_AddDevice>:

PifI2cDevice* pifI2cPort_AddDevice(PifI2cPort* p_owner, uint8_t addr)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b084      	sub	sp, #16
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	70fb      	strb	r3, [r7, #3]
	if (!p_owner) {
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d104      	bne.n	8011fd8 <pifI2cPort_AddDevice+0x1c>
		pif_error = E_INVALID_PARAM;
 8011fce:	4b0f      	ldr	r3, [pc, #60]	; (801200c <pifI2cPort_AddDevice+0x50>)
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	e014      	b.n	8012002 <pifI2cPort_AddDevice+0x46>
	}

	PifI2cDevice* p_device = (PifI2cDevice*)pifFixList_AddFirst(&p_owner->__devices);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	3310      	adds	r3, #16
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f000 fb44 	bl	801266a <pifFixList_AddFirst>
 8011fe2:	60f8      	str	r0, [r7, #12]
    if (!p_device) return FALSE;
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d101      	bne.n	8011fee <pifI2cPort_AddDevice+0x32>
 8011fea:	2300      	movs	r3, #0
 8011fec:	e009      	b.n	8012002 <pifI2cPort_AddDevice+0x46>

    p_device->__p_port = p_owner;
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	687a      	ldr	r2, [r7, #4]
 8011ff2:	605a      	str	r2, [r3, #4]
	p_device->addr = addr;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	78fa      	ldrb	r2, [r7, #3]
 8011ff8:	701a      	strb	r2, [r3, #0]
    p_device->timeout = 10;		// 10ms
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	220a      	movs	r2, #10
 8011ffe:	705a      	strb	r2, [r3, #1]
    return p_device;
 8012000:	68fb      	ldr	r3, [r7, #12]
}
 8012002:	4618      	mov	r0, r3
 8012004:	3710      	adds	r7, #16
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}
 801200a:	bf00      	nop
 801200c:	20001c0d 	.word	0x20001c0d

08012010 <pifI2cPort_RemoveDevice>:

void pifI2cPort_RemoveDevice(PifI2cPort* p_owner, PifI2cDevice* p_device)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b082      	sub	sp, #8
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	6039      	str	r1, [r7, #0]
	if (p_device) {
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d007      	beq.n	8012030 <pifI2cPort_RemoveDevice+0x20>
		pifFixList_Remove(&p_owner->__devices, p_device);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	3310      	adds	r3, #16
 8012024:	6839      	ldr	r1, [r7, #0]
 8012026:	4618      	mov	r0, r3
 8012028:	f000 fb53 	bl	80126d2 <pifFixList_Remove>
		p_device = NULL;
 801202c:	2300      	movs	r3, #0
 801202e:	603b      	str	r3, [r7, #0]
	}
}
 8012030:	bf00      	nop
 8012032:	3708      	adds	r7, #8
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <pifI2cPort_TemporaryDevice>:

PifI2cDevice* pifI2cPort_TemporaryDevice(PifI2cPort* p_owner, uint8_t addr)
{
 8012038:	b480      	push	{r7}
 801203a:	b083      	sub	sp, #12
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
 8012040:	460b      	mov	r3, r1
 8012042:	70fb      	strb	r3, [r7, #3]
	static PifI2cDevice device;

	device.__p_port = p_owner;
 8012044:	4a07      	ldr	r2, [pc, #28]	; (8012064 <pifI2cPort_TemporaryDevice+0x2c>)
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6053      	str	r3, [r2, #4]
	device.addr = addr;
 801204a:	4a06      	ldr	r2, [pc, #24]	; (8012064 <pifI2cPort_TemporaryDevice+0x2c>)
 801204c:	78fb      	ldrb	r3, [r7, #3]
 801204e:	7013      	strb	r3, [r2, #0]
	device._state = IS_IDLE;
 8012050:	4b04      	ldr	r3, [pc, #16]	; (8012064 <pifI2cPort_TemporaryDevice+0x2c>)
 8012052:	2200      	movs	r2, #0
 8012054:	709a      	strb	r2, [r3, #2]
	return &device;
 8012056:	4b03      	ldr	r3, [pc, #12]	; (8012064 <pifI2cPort_TemporaryDevice+0x2c>)
}
 8012058:	4618      	mov	r0, r3
 801205a:	370c      	adds	r7, #12
 801205c:	46bd      	mov	sp, r7
 801205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012062:	4770      	bx	lr
 8012064:	20001c38 	.word	0x20001c38

08012068 <pifI2cDevice_Read>:
}

#endif

BOOL pifI2cDevice_Read(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 8012068:	b5b0      	push	{r4, r5, r7, lr}
 801206a:	b08c      	sub	sp, #48	; 0x30
 801206c:	af02      	add	r7, sp, #8
 801206e:	60f8      	str	r0, [r7, #12]
 8012070:	60b9      	str	r1, [r7, #8]
 8012072:	603b      	str	r3, [r7, #0]
 8012074:	4613      	mov	r3, r2
 8012076:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	685b      	ldr	r3, [r3, #4]
 801207c:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_read) return FALSE;
 801207e:	69fb      	ldr	r3, [r7, #28]
 8012080:	685b      	ldr	r3, [r3, #4]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d101      	bne.n	801208a <pifI2cDevice_Read+0x22>
 8012086:	2300      	movs	r3, #0
 8012088:	e08e      	b.n	80121a8 <pifI2cDevice_Read+0x140>
	if (p_port->__use_device) {
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801208e:	2b00      	cmp	r3, #0
 8012090:	d00f      	beq.n	80120b2 <pifI2cDevice_Read+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CR:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	461a      	mov	r2, r3
 8012098:	69fb      	ldr	r3, [r7, #28]
 801209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	9300      	str	r3, [sp, #0]
 80120a2:	4613      	mov	r3, r2
 80120a4:	226d      	movs	r2, #109	; 0x6d
 80120a6:	4942      	ldr	r1, [pc, #264]	; (80121b0 <pifI2cDevice_Read+0x148>)
 80120a8:	2002      	movs	r0, #2
 80120aa:	f001 f97b 	bl	80133a4 <pifLog_Printf>
#endif
		return FALSE;
 80120ae:	2300      	movs	r3, #0
 80120b0:	e07a      	b.n	80121a8 <pifI2cDevice_Read+0x140>
	}

	p_port->__use_device = p_owner;
 80120b2:	69fb      	ldr	r3, [r7, #28]
 80120b4:	68fa      	ldr	r2, [r7, #12]
 80120b6:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	2201      	movs	r2, #1
 80120bc:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 80120be:	2300      	movs	r3, #0
 80120c0:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 80120c2:	e048      	b.n	8012156 <pifI2cDevice_Read+0xee>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 80120c4:	69fb      	ldr	r3, [r7, #28]
 80120c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80120c8:	461a      	mov	r2, r3
 80120ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120cc:	4293      	cmp	r3, r2
 80120ce:	bf28      	it	cs
 80120d0:	4613      	movcs	r3, r2
 80120d2:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_read)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 80120d4:	69fb      	ldr	r3, [r7, #28]
 80120d6:	685c      	ldr	r4, [r3, #4]
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	7818      	ldrb	r0, [r3, #0]
 80120dc:	68ba      	ldr	r2, [r7, #8]
 80120de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e0:	18d1      	adds	r1, r2, r3
 80120e2:	683a      	ldr	r2, [r7, #0]
 80120e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e6:	18d5      	adds	r5, r2, r3
 80120e8:	7efb      	ldrb	r3, [r7, #27]
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	79fa      	ldrb	r2, [r7, #7]
 80120ee:	9300      	str	r3, [sp, #0]
 80120f0:	462b      	mov	r3, r5
 80120f2:	47a0      	blx	r4
 80120f4:	4603      	mov	r3, r0
 80120f6:	2b02      	cmp	r3, #2
 80120f8:	d021      	beq.n	801213e <pifI2cDevice_Read+0xd6>
 80120fa:	2b02      	cmp	r3, #2
 80120fc:	dc23      	bgt.n	8012146 <pifI2cDevice_Read+0xde>
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d001      	beq.n	8012106 <pifI2cDevice_Read+0x9e>
 8012102:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 8012104:	e01f      	b.n	8012146 <pifI2cDevice_Read+0xde>
			timer1ms = pif_cumulative_timer1ms;
 8012106:	4b2b      	ldr	r3, [pc, #172]	; (80121b4 <pifI2cDevice_Read+0x14c>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 801210c:	e00a      	b.n	8012124 <pifI2cDevice_Read+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 801210e:	4b29      	ldr	r3, [pc, #164]	; (80121b4 <pifI2cDevice_Read+0x14c>)
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	1ad3      	subs	r3, r2, r3
 8012116:	68fa      	ldr	r2, [r7, #12]
 8012118:	7852      	ldrb	r2, [r2, #1]
 801211a:	4293      	cmp	r3, r2
 801211c:	d902      	bls.n	8012124 <pifI2cDevice_Read+0xbc>
					line = __LINE__;
 801211e:	237d      	movs	r3, #125	; 0x7d
 8012120:	623b      	str	r3, [r7, #32]
					goto fail;
 8012122:	e023      	b.n	801216c <pifI2cDevice_Read+0x104>
			while (p_owner->_state == IS_RUN) {
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	789b      	ldrb	r3, [r3, #2]
 8012128:	b2db      	uxtb	r3, r3
 801212a:	2b01      	cmp	r3, #1
 801212c:	d0ef      	beq.n	801210e <pifI2cDevice_Read+0xa6>
			if (p_owner->_state == IS_ERROR) {
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	789b      	ldrb	r3, [r3, #2]
 8012132:	b2db      	uxtb	r3, r3
 8012134:	2b03      	cmp	r3, #3
 8012136:	d105      	bne.n	8012144 <pifI2cDevice_Read+0xdc>
				line = __LINE__;
 8012138:	2384      	movs	r3, #132	; 0x84
 801213a:	623b      	str	r3, [r7, #32]
				goto fail;
 801213c:	e016      	b.n	801216c <pifI2cDevice_Read+0x104>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 801213e:	238f      	movs	r3, #143	; 0x8f
 8012140:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 8012142:	e013      	b.n	801216c <pifI2cDevice_Read+0x104>
			break;
 8012144:	bf00      	nop
		}
		ptr += len;
 8012146:	7efb      	ldrb	r3, [r7, #27]
 8012148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801214a:	4413      	add	r3, r2
 801214c:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 801214e:	7efb      	ldrb	r3, [r7, #27]
 8012150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012152:	1ad3      	subs	r3, r2, r3
 8012154:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 8012156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012158:	2b00      	cmp	r3, #0
 801215a:	d1b3      	bne.n	80120c4 <pifI2cDevice_Read+0x5c>
	}
	p_port->__use_device = NULL;
 801215c:	69fb      	ldr	r3, [r7, #28]
 801215e:	2200      	movs	r2, #0
 8012160:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2200      	movs	r2, #0
 8012166:	709a      	strb	r2, [r3, #2]
	return TRUE;
 8012168:	2301      	movs	r3, #1
 801216a:	e01d      	b.n	80121a8 <pifI2cDevice_Read+0x140>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CR:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	461a      	mov	r2, r3
 8012172:	4b11      	ldr	r3, [pc, #68]	; (80121b8 <pifI2cDevice_Read+0x150>)
 8012174:	781b      	ldrb	r3, [r3, #0]
 8012176:	9301      	str	r3, [sp, #4]
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	9300      	str	r3, [sp, #0]
 801217c:	4613      	mov	r3, r2
 801217e:	6a3a      	ldr	r2, [r7, #32]
 8012180:	490e      	ldr	r1, [pc, #56]	; (80121bc <pifI2cDevice_Read+0x154>)
 8012182:	2004      	movs	r0, #4
 8012184:	f001 f90e 	bl	80133a4 <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 8012188:	69fb      	ldr	r3, [r7, #28]
 801218a:	2200      	movs	r2, #0
 801218c:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 801218e:	69fb      	ldr	r3, [r7, #28]
 8012190:	881b      	ldrh	r3, [r3, #0]
 8012192:	3301      	adds	r3, #1
 8012194:	b29a      	uxth	r2, r3
 8012196:	69fb      	ldr	r3, [r7, #28]
 8012198:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	2200      	movs	r2, #0
 801219e:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 80121a0:	4b05      	ldr	r3, [pc, #20]	; (80121b8 <pifI2cDevice_Read+0x150>)
 80121a2:	220a      	movs	r2, #10
 80121a4:	701a      	strb	r2, [r3, #0]
	return FALSE;
 80121a6:	2300      	movs	r3, #0
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3728      	adds	r7, #40	; 0x28
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bdb0      	pop	{r4, r5, r7, pc}
 80121b0:	08027308 	.word	0x08027308
 80121b4:	20001c24 	.word	0x20001c24
 80121b8:	20001c0d 	.word	0x20001c0d
 80121bc:	08027328 	.word	0x08027328

080121c0 <pifI2cDevice_ReadRegByte>:

BOOL pifI2cDevice_ReadRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b086      	sub	sp, #24
 80121c4:	af02      	add	r7, sp, #8
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	460b      	mov	r3, r1
 80121ca:	607a      	str	r2, [r7, #4]
 80121cc:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, 1);
 80121ce:	7af9      	ldrb	r1, [r7, #11]
 80121d0:	2301      	movs	r3, #1
 80121d2:	9300      	str	r3, [sp, #0]
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2201      	movs	r2, #1
 80121d8:	68f8      	ldr	r0, [r7, #12]
 80121da:	f7ff ff45 	bl	8012068 <pifI2cDevice_Read>
 80121de:	4603      	mov	r3, r0
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	3710      	adds	r7, #16
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}

080121e8 <pifI2cDevice_ReadRegWord>:

BOOL pifI2cDevice_ReadRegWord(PifI2cDevice* p_owner, uint8_t reg, uint16_t* p_data)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b088      	sub	sp, #32
 80121ec:	af02      	add	r7, sp, #8
 80121ee:	60f8      	str	r0, [r7, #12]
 80121f0:	460b      	mov	r3, r1
 80121f2:	607a      	str	r2, [r7, #4]
 80121f4:	72fb      	strb	r3, [r7, #11]
	uint8_t tmp[2];

	if (!pifI2cDevice_Read(p_owner, reg, 1, tmp, 2)) return FALSE;
 80121f6:	7af9      	ldrb	r1, [r7, #11]
 80121f8:	f107 0314 	add.w	r3, r7, #20
 80121fc:	2202      	movs	r2, #2
 80121fe:	9200      	str	r2, [sp, #0]
 8012200:	2201      	movs	r2, #1
 8012202:	68f8      	ldr	r0, [r7, #12]
 8012204:	f7ff ff30 	bl	8012068 <pifI2cDevice_Read>
 8012208:	4603      	mov	r3, r0
 801220a:	2b00      	cmp	r3, #0
 801220c:	d101      	bne.n	8012212 <pifI2cDevice_ReadRegWord+0x2a>
 801220e:	2300      	movs	r3, #0
 8012210:	e00a      	b.n	8012228 <pifI2cDevice_ReadRegWord+0x40>
	*p_data = (tmp[0] << 8) + tmp[1];
 8012212:	7d3b      	ldrb	r3, [r7, #20]
 8012214:	b29b      	uxth	r3, r3
 8012216:	021b      	lsls	r3, r3, #8
 8012218:	b29a      	uxth	r2, r3
 801221a:	7d7b      	ldrb	r3, [r7, #21]
 801221c:	b29b      	uxth	r3, r3
 801221e:	4413      	add	r3, r2
 8012220:	b29a      	uxth	r2, r3
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8012226:	2301      	movs	r3, #1
}
 8012228:	4618      	mov	r0, r3
 801222a:	3718      	adds	r7, #24
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}

08012230 <pifI2cDevice_ReadRegBytes>:

BOOL pifI2cDevice_ReadRegBytes(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data, size_t size)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b086      	sub	sp, #24
 8012234:	af02      	add	r7, sp, #8
 8012236:	60f8      	str	r0, [r7, #12]
 8012238:	607a      	str	r2, [r7, #4]
 801223a:	603b      	str	r3, [r7, #0]
 801223c:	460b      	mov	r3, r1
 801223e:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, size);
 8012240:	7af9      	ldrb	r1, [r7, #11]
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	9300      	str	r3, [sp, #0]
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	2201      	movs	r2, #1
 801224a:	68f8      	ldr	r0, [r7, #12]
 801224c:	f7ff ff0c 	bl	8012068 <pifI2cDevice_Read>
 8012250:	4603      	mov	r3, r0
}
 8012252:	4618      	mov	r0, r3
 8012254:	3710      	adds	r7, #16
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}

0801225a <pifI2cDevice_ReadRegBit8>:

BOOL pifI2cDevice_ReadRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t* p_data)
{
 801225a:	b580      	push	{r7, lr}
 801225c:	b088      	sub	sp, #32
 801225e:	af02      	add	r7, sp, #8
 8012260:	60f8      	str	r0, [r7, #12]
 8012262:	607b      	str	r3, [r7, #4]
 8012264:	460b      	mov	r3, r1
 8012266:	72fb      	strb	r3, [r7, #11]
 8012268:	4613      	mov	r3, r2
 801226a:	813b      	strh	r3, [r7, #8]
	uint8_t tmp, shift, mask;

	shift = field >> 8;
 801226c:	893b      	ldrh	r3, [r7, #8]
 801226e:	0a1b      	lsrs	r3, r3, #8
 8012270:	b29b      	uxth	r3, r3
 8012272:	75fb      	strb	r3, [r7, #23]
	mask = (1 << (field & 0xFF)) - 1;
 8012274:	893b      	ldrh	r3, [r7, #8]
 8012276:	b2db      	uxtb	r3, r3
 8012278:	2201      	movs	r2, #1
 801227a:	fa02 f303 	lsl.w	r3, r2, r3
 801227e:	b2db      	uxtb	r3, r3
 8012280:	3b01      	subs	r3, #1
 8012282:	75bb      	strb	r3, [r7, #22]

	if (!pifI2cDevice_Read(p_owner, reg, 1, &tmp, 1)) return FALSE;
 8012284:	7af9      	ldrb	r1, [r7, #11]
 8012286:	f107 0315 	add.w	r3, r7, #21
 801228a:	2201      	movs	r2, #1
 801228c:	9200      	str	r2, [sp, #0]
 801228e:	2201      	movs	r2, #1
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	f7ff fee9 	bl	8012068 <pifI2cDevice_Read>
 8012296:	4603      	mov	r3, r0
 8012298:	2b00      	cmp	r3, #0
 801229a:	d101      	bne.n	80122a0 <pifI2cDevice_ReadRegBit8+0x46>
 801229c:	2300      	movs	r3, #0
 801229e:	e00d      	b.n	80122bc <pifI2cDevice_ReadRegBit8+0x62>
	*p_data = (tmp >> shift) & mask;
 80122a0:	7d7b      	ldrb	r3, [r7, #21]
 80122a2:	461a      	mov	r2, r3
 80122a4:	7dfb      	ldrb	r3, [r7, #23]
 80122a6:	fa42 f303 	asr.w	r3, r2, r3
 80122aa:	b25a      	sxtb	r2, r3
 80122ac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80122b0:	4013      	ands	r3, r2
 80122b2:	b25b      	sxtb	r3, r3
 80122b4:	b2da      	uxtb	r2, r3
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	701a      	strb	r2, [r3, #0]
	return TRUE;
 80122ba:	2301      	movs	r3, #1
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3718      	adds	r7, #24
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <pifI2cDevice_Write>:
	*p_data = (((tmp[0] << 8) + tmp[1]) >> shift) & mask;
	return TRUE;
}

BOOL pifI2cDevice_Write(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 80122c4:	b5b0      	push	{r4, r5, r7, lr}
 80122c6:	b08c      	sub	sp, #48	; 0x30
 80122c8:	af02      	add	r7, sp, #8
 80122ca:	60f8      	str	r0, [r7, #12]
 80122cc:	60b9      	str	r1, [r7, #8]
 80122ce:	603b      	str	r3, [r7, #0]
 80122d0:	4613      	mov	r3, r2
 80122d2:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	685b      	ldr	r3, [r3, #4]
 80122d8:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_write) return FALSE;
 80122da:	69fb      	ldr	r3, [r7, #28]
 80122dc:	689b      	ldr	r3, [r3, #8]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d101      	bne.n	80122e6 <pifI2cDevice_Write+0x22>
 80122e2:	2300      	movs	r3, #0
 80122e4:	e08f      	b.n	8012406 <pifI2cDevice_Write+0x142>
	if (p_port->__use_device) {
 80122e6:	69fb      	ldr	r3, [r7, #28]
 80122e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d00f      	beq.n	801230e <pifI2cDevice_Write+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CW:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	461a      	mov	r2, r3
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	b2db      	uxtb	r3, r3
 80122fc:	9300      	str	r3, [sp, #0]
 80122fe:	4613      	mov	r3, r2
 8012300:	22de      	movs	r2, #222	; 0xde
 8012302:	4943      	ldr	r1, [pc, #268]	; (8012410 <pifI2cDevice_Write+0x14c>)
 8012304:	2002      	movs	r0, #2
 8012306:	f001 f84d 	bl	80133a4 <pifLog_Printf>
#endif
		return FALSE;
 801230a:	2300      	movs	r3, #0
 801230c:	e07b      	b.n	8012406 <pifI2cDevice_Write+0x142>
	}

	p_port->__use_device = p_owner;
 801230e:	69fb      	ldr	r3, [r7, #28]
 8012310:	68fa      	ldr	r2, [r7, #12]
 8012312:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	2201      	movs	r2, #1
 8012318:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 801231a:	2300      	movs	r3, #0
 801231c:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 801231e:	e049      	b.n	80123b4 <pifI2cDevice_Write+0xf0>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 8012320:	69fb      	ldr	r3, [r7, #28]
 8012322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012324:	461a      	mov	r2, r3
 8012326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012328:	4293      	cmp	r3, r2
 801232a:	bf28      	it	cs
 801232c:	4613      	movcs	r3, r2
 801232e:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_write)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 8012330:	69fb      	ldr	r3, [r7, #28]
 8012332:	689c      	ldr	r4, [r3, #8]
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	7818      	ldrb	r0, [r3, #0]
 8012338:	68ba      	ldr	r2, [r7, #8]
 801233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233c:	18d1      	adds	r1, r2, r3
 801233e:	683a      	ldr	r2, [r7, #0]
 8012340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012342:	18d5      	adds	r5, r2, r3
 8012344:	7efb      	ldrb	r3, [r7, #27]
 8012346:	b29b      	uxth	r3, r3
 8012348:	79fa      	ldrb	r2, [r7, #7]
 801234a:	9300      	str	r3, [sp, #0]
 801234c:	462b      	mov	r3, r5
 801234e:	47a0      	blx	r4
 8012350:	4603      	mov	r3, r0
 8012352:	2b02      	cmp	r3, #2
 8012354:	d021      	beq.n	801239a <pifI2cDevice_Write+0xd6>
 8012356:	2b02      	cmp	r3, #2
 8012358:	dc24      	bgt.n	80123a4 <pifI2cDevice_Write+0xe0>
 801235a:	2b00      	cmp	r3, #0
 801235c:	d001      	beq.n	8012362 <pifI2cDevice_Write+0x9e>
 801235e:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 8012360:	e020      	b.n	80123a4 <pifI2cDevice_Write+0xe0>
			timer1ms = pif_cumulative_timer1ms;
 8012362:	4b2c      	ldr	r3, [pc, #176]	; (8012414 <pifI2cDevice_Write+0x150>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 8012368:	e00a      	b.n	8012380 <pifI2cDevice_Write+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 801236a:	4b2a      	ldr	r3, [pc, #168]	; (8012414 <pifI2cDevice_Write+0x150>)
 801236c:	681a      	ldr	r2, [r3, #0]
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	1ad3      	subs	r3, r2, r3
 8012372:	68fa      	ldr	r2, [r7, #12]
 8012374:	7852      	ldrb	r2, [r2, #1]
 8012376:	4293      	cmp	r3, r2
 8012378:	d902      	bls.n	8012380 <pifI2cDevice_Write+0xbc>
					line = __LINE__;
 801237a:	23ee      	movs	r3, #238	; 0xee
 801237c:	623b      	str	r3, [r7, #32]
					goto fail;
 801237e:	e024      	b.n	80123ca <pifI2cDevice_Write+0x106>
			while (p_owner->_state == IS_RUN) {
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	789b      	ldrb	r3, [r3, #2]
 8012384:	b2db      	uxtb	r3, r3
 8012386:	2b01      	cmp	r3, #1
 8012388:	d0ef      	beq.n	801236a <pifI2cDevice_Write+0xa6>
			if (p_owner->_state == IS_ERROR) {
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	789b      	ldrb	r3, [r3, #2]
 801238e:	b2db      	uxtb	r3, r3
 8012390:	2b03      	cmp	r3, #3
 8012392:	d106      	bne.n	80123a2 <pifI2cDevice_Write+0xde>
				line = __LINE__;
 8012394:	23f5      	movs	r3, #245	; 0xf5
 8012396:	623b      	str	r3, [r7, #32]
				goto fail;
 8012398:	e017      	b.n	80123ca <pifI2cDevice_Write+0x106>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 801239a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801239e:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 80123a0:	e013      	b.n	80123ca <pifI2cDevice_Write+0x106>
			break;
 80123a2:	bf00      	nop
		}
		ptr += len;
 80123a4:	7efb      	ldrb	r3, [r7, #27]
 80123a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123a8:	4413      	add	r3, r2
 80123aa:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 80123ac:	7efb      	ldrb	r3, [r7, #27]
 80123ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123b0:	1ad3      	subs	r3, r2, r3
 80123b2:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 80123b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d1b2      	bne.n	8012320 <pifI2cDevice_Write+0x5c>
	}
	p_port->__use_device = NULL;
 80123ba:	69fb      	ldr	r3, [r7, #28]
 80123bc:	2200      	movs	r2, #0
 80123be:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	2200      	movs	r2, #0
 80123c4:	709a      	strb	r2, [r3, #2]
	return TRUE;
 80123c6:	2301      	movs	r3, #1
 80123c8:	e01d      	b.n	8012406 <pifI2cDevice_Write+0x142>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CW:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	781b      	ldrb	r3, [r3, #0]
 80123ce:	461a      	mov	r2, r3
 80123d0:	4b11      	ldr	r3, [pc, #68]	; (8012418 <pifI2cDevice_Write+0x154>)
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	9301      	str	r3, [sp, #4]
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	9300      	str	r3, [sp, #0]
 80123da:	4613      	mov	r3, r2
 80123dc:	6a3a      	ldr	r2, [r7, #32]
 80123de:	490f      	ldr	r1, [pc, #60]	; (801241c <pifI2cDevice_Write+0x158>)
 80123e0:	2004      	movs	r0, #4
 80123e2:	f000 ffdf 	bl	80133a4 <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	2200      	movs	r2, #0
 80123ea:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 80123ec:	69fb      	ldr	r3, [r7, #28]
 80123ee:	881b      	ldrh	r3, [r3, #0]
 80123f0:	3301      	adds	r3, #1
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	69fb      	ldr	r3, [r7, #28]
 80123f6:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	2200      	movs	r2, #0
 80123fc:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 80123fe:	4b06      	ldr	r3, [pc, #24]	; (8012418 <pifI2cDevice_Write+0x154>)
 8012400:	220a      	movs	r2, #10
 8012402:	701a      	strb	r2, [r3, #0]
	return FALSE;
 8012404:	2300      	movs	r3, #0
}
 8012406:	4618      	mov	r0, r3
 8012408:	3728      	adds	r7, #40	; 0x28
 801240a:	46bd      	mov	sp, r7
 801240c:	bdb0      	pop	{r4, r5, r7, pc}
 801240e:	bf00      	nop
 8012410:	08027344 	.word	0x08027344
 8012414:	20001c24 	.word	0x20001c24
 8012418:	20001c0d 	.word	0x20001c0d
 801241c:	08027364 	.word	0x08027364

08012420 <pifI2cDevice_WriteRegByte>:

BOOL pifI2cDevice_WriteRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t data)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b084      	sub	sp, #16
 8012424:	af02      	add	r7, sp, #8
 8012426:	6078      	str	r0, [r7, #4]
 8012428:	460b      	mov	r3, r1
 801242a:	70fb      	strb	r3, [r7, #3]
 801242c:	4613      	mov	r3, r2
 801242e:	70bb      	strb	r3, [r7, #2]
	return pifI2cDevice_Write(p_owner, reg, 1, &data, 1);
 8012430:	78f9      	ldrb	r1, [r7, #3]
 8012432:	1cbb      	adds	r3, r7, #2
 8012434:	2201      	movs	r2, #1
 8012436:	9200      	str	r2, [sp, #0]
 8012438:	2201      	movs	r2, #1
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f7ff ff42 	bl	80122c4 <pifI2cDevice_Write>
 8012440:	4603      	mov	r3, r0
}
 8012442:	4618      	mov	r0, r3
 8012444:	3708      	adds	r7, #8
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}
	...

0801244c <pifI2cDevice_WriteRegBit8>:
{
	return pifI2cDevice_Write(p_owner, reg, 1, p_data, size);
}

BOOL pifI2cDevice_WriteRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t data)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b086      	sub	sp, #24
 8012450:	af02      	add	r7, sp, #8
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	4608      	mov	r0, r1
 8012456:	4611      	mov	r1, r2
 8012458:	461a      	mov	r2, r3
 801245a:	4603      	mov	r3, r0
 801245c:	70fb      	strb	r3, [r7, #3]
 801245e:	460b      	mov	r3, r1
 8012460:	803b      	strh	r3, [r7, #0]
 8012462:	4613      	mov	r3, r2
 8012464:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp, org, shift, mask;

	shift = field >> 8;
 8012466:	883b      	ldrh	r3, [r7, #0]
 8012468:	0a1b      	lsrs	r3, r3, #8
 801246a:	b29b      	uxth	r3, r3
 801246c:	73fb      	strb	r3, [r7, #15]
	mask = (1 << (field & 0xFF)) - 1;
 801246e:	883b      	ldrh	r3, [r7, #0]
 8012470:	b2db      	uxtb	r3, r3
 8012472:	2201      	movs	r2, #1
 8012474:	fa02 f303 	lsl.w	r3, r2, r3
 8012478:	b2db      	uxtb	r3, r3
 801247a:	3b01      	subs	r3, #1
 801247c:	73bb      	strb	r3, [r7, #14]

	if (data > mask) {
 801247e:	78ba      	ldrb	r2, [r7, #2]
 8012480:	7bbb      	ldrb	r3, [r7, #14]
 8012482:	429a      	cmp	r2, r3
 8012484:	d904      	bls.n	8012490 <pifI2cDevice_WriteRegBit8+0x44>
		pif_error = E_WRONG_DATA;
 8012486:	4b21      	ldr	r3, [pc, #132]	; (801250c <pifI2cDevice_WriteRegBit8+0xc0>)
 8012488:	2206      	movs	r2, #6
 801248a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801248c:	2300      	movs	r3, #0
 801248e:	e039      	b.n	8012504 <pifI2cDevice_WriteRegBit8+0xb8>
	}
	if (!pifI2cDevice_Read(p_owner, reg, 1, &org, 1)) return FALSE;
 8012490:	78f9      	ldrb	r1, [r7, #3]
 8012492:	f107 030c 	add.w	r3, r7, #12
 8012496:	2201      	movs	r2, #1
 8012498:	9200      	str	r2, [sp, #0]
 801249a:	2201      	movs	r2, #1
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f7ff fde3 	bl	8012068 <pifI2cDevice_Read>
 80124a2:	4603      	mov	r3, r0
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d101      	bne.n	80124ac <pifI2cDevice_WriteRegBit8+0x60>
 80124a8:	2300      	movs	r3, #0
 80124aa:	e02b      	b.n	8012504 <pifI2cDevice_WriteRegBit8+0xb8>

	if (((org >> shift) & mask) != data) {
 80124ac:	7b3b      	ldrb	r3, [r7, #12]
 80124ae:	461a      	mov	r2, r3
 80124b0:	7bfb      	ldrb	r3, [r7, #15]
 80124b2:	411a      	asrs	r2, r3
 80124b4:	7bbb      	ldrb	r3, [r7, #14]
 80124b6:	401a      	ands	r2, r3
 80124b8:	78bb      	ldrb	r3, [r7, #2]
 80124ba:	429a      	cmp	r2, r3
 80124bc:	d021      	beq.n	8012502 <pifI2cDevice_WriteRegBit8+0xb6>
		tmp = (org & ~(mask << shift)) | (data << shift);
 80124be:	7bba      	ldrb	r2, [r7, #14]
 80124c0:	7bfb      	ldrb	r3, [r7, #15]
 80124c2:	fa02 f303 	lsl.w	r3, r2, r3
 80124c6:	b25b      	sxtb	r3, r3
 80124c8:	43db      	mvns	r3, r3
 80124ca:	b25a      	sxtb	r2, r3
 80124cc:	7b3b      	ldrb	r3, [r7, #12]
 80124ce:	b25b      	sxtb	r3, r3
 80124d0:	4013      	ands	r3, r2
 80124d2:	b25a      	sxtb	r2, r3
 80124d4:	78b9      	ldrb	r1, [r7, #2]
 80124d6:	7bfb      	ldrb	r3, [r7, #15]
 80124d8:	fa01 f303 	lsl.w	r3, r1, r3
 80124dc:	b25b      	sxtb	r3, r3
 80124de:	4313      	orrs	r3, r2
 80124e0:	b25b      	sxtb	r3, r3
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	737b      	strb	r3, [r7, #13]
		if (!pifI2cDevice_Write(p_owner, reg, 1, &tmp, 1)) return FALSE;
 80124e6:	78f9      	ldrb	r1, [r7, #3]
 80124e8:	f107 030d 	add.w	r3, r7, #13
 80124ec:	2201      	movs	r2, #1
 80124ee:	9200      	str	r2, [sp, #0]
 80124f0:	2201      	movs	r2, #1
 80124f2:	6878      	ldr	r0, [r7, #4]
 80124f4:	f7ff fee6 	bl	80122c4 <pifI2cDevice_Write>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d101      	bne.n	8012502 <pifI2cDevice_WriteRegBit8+0xb6>
 80124fe:	2300      	movs	r3, #0
 8012500:	e000      	b.n	8012504 <pifI2cDevice_WriteRegBit8+0xb8>
	}
    return TRUE;
 8012502:	2301      	movs	r3, #1
}
 8012504:	4618      	mov	r0, r3
 8012506:	3710      	adds	r7, #16
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}
 801250c:	20001c0d 	.word	0x20001c0d

08012510 <pifI2cPort_sigEndTransfer>:
	}
    return TRUE;
}

void pifI2cPort_sigEndTransfer(PifI2cPort* p_owner, BOOL result)
{
 8012510:	b480      	push	{r7}
 8012512:	b083      	sub	sp, #12
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	460b      	mov	r3, r1
 801251a:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->__use_device) return;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012520:	2b00      	cmp	r3, #0
 8012522:	d009      	beq.n	8012538 <pifI2cPort_sigEndTransfer+0x28>
	p_owner->__use_device->_state = result ? IS_COMPLETE : IS_ERROR;
 8012524:	78fb      	ldrb	r3, [r7, #3]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d001      	beq.n	801252e <pifI2cPort_sigEndTransfer+0x1e>
 801252a:	2202      	movs	r2, #2
 801252c:	e000      	b.n	8012530 <pifI2cPort_sigEndTransfer+0x20>
 801252e:	2203      	movs	r2, #3
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012534:	709a      	strb	r2, [r3, #2]
 8012536:	e000      	b.n	801253a <pifI2cPort_sigEndTransfer+0x2a>
	if (!p_owner->__use_device) return;
 8012538:	bf00      	nop
}
 801253a:	370c      	adds	r7, #12
 801253c:	46bd      	mov	sp, r7
 801253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012542:	4770      	bx	lr

08012544 <pifFixList_Init>:
}

// ---------- PIF Fixed Linked List ----------

BOOL pifFixList_Init(PifFixList* p_owner, int size, int max_count)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b088      	sub	sp, #32
 8012548:	af00      	add	r7, sp, #0
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	60b9      	str	r1, [r7, #8]
 801254e:	607a      	str	r2, [r7, #4]
	char* p_buffer;
	PifFixListIterator p_node;

	if (!p_owner || !size || !max_count) {
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d005      	beq.n	8012562 <pifFixList_Init+0x1e>
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d002      	beq.n	8012562 <pifFixList_Init+0x1e>
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d104      	bne.n	801256c <pifFixList_Init+0x28>
		pif_error = E_INVALID_PARAM;
 8012562:	4b27      	ldr	r3, [pc, #156]	; (8012600 <pifFixList_Init+0xbc>)
 8012564:	2201      	movs	r2, #1
 8012566:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8012568:	2300      	movs	r3, #0
 801256a:	e045      	b.n	80125f8 <pifFixList_Init+0xb4>
	}

	p_buffer = calloc(2 * sizeof(PifFixListIterator) + size, max_count);
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	3308      	adds	r3, #8
 8012570:	687a      	ldr	r2, [r7, #4]
 8012572:	4611      	mov	r1, r2
 8012574:	4618      	mov	r0, r3
 8012576:	f010 fa3f 	bl	80229f8 <calloc>
 801257a:	4603      	mov	r3, r0
 801257c:	61fb      	str	r3, [r7, #28]
	if (!p_buffer) goto fail;
 801257e:	69fb      	ldr	r3, [r7, #28]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d033      	beq.n	80125ec <pifFixList_Init+0xa8>

	p_owner->p_node = (PifFixListIterator)p_buffer;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	69fa      	ldr	r2, [r7, #28]
 8012588:	60da      	str	r2, [r3, #12]
	p_owner->size = size;
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	68ba      	ldr	r2, [r7, #8]
 801258e:	601a      	str	r2, [r3, #0]
	p_owner->max_count = max_count;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	687a      	ldr	r2, [r7, #4]
 8012594:	605a      	str	r2, [r3, #4]
	p_owner->count = 0;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	2200      	movs	r2, #0
 801259a:	609a      	str	r2, [r3, #8]

	p_owner->p_first = NULL;
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	2200      	movs	r2, #0
 80125a0:	611a      	str	r2, [r3, #16]

	p_node = p_owner->p_node;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	68db      	ldr	r3, [r3, #12]
 80125a6:	61bb      	str	r3, [r7, #24]
	p_owner->p_free = p_node;
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	69ba      	ldr	r2, [r7, #24]
 80125ac:	615a      	str	r2, [r3, #20]
	for (int i = 1; i < max_count; i++) {
 80125ae:	2301      	movs	r3, #1
 80125b0:	617b      	str	r3, [r7, #20]
 80125b2:	e00f      	b.n	80125d4 <pifFixList_Init+0x90>
		p_buffer += 2 * sizeof(PifFixListIterator) + size;
 80125b4:	68bb      	ldr	r3, [r7, #8]
 80125b6:	3308      	adds	r3, #8
 80125b8:	69fa      	ldr	r2, [r7, #28]
 80125ba:	4413      	add	r3, r2
 80125bc:	61fb      	str	r3, [r7, #28]
		p_node->p_next = (PifFixListIterator)p_buffer;
 80125be:	69bb      	ldr	r3, [r7, #24]
 80125c0:	69fa      	ldr	r2, [r7, #28]
 80125c2:	601a      	str	r2, [r3, #0]
		p_node->p_prev = NULL;
 80125c4:	69bb      	ldr	r3, [r7, #24]
 80125c6:	2200      	movs	r2, #0
 80125c8:	605a      	str	r2, [r3, #4]
		p_node = (PifFixListIterator)p_buffer;
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < max_count; i++) {
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	3301      	adds	r3, #1
 80125d2:	617b      	str	r3, [r7, #20]
 80125d4:	697a      	ldr	r2, [r7, #20]
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	429a      	cmp	r2, r3
 80125da:	dbeb      	blt.n	80125b4 <pifFixList_Init+0x70>
	}
	p_node->p_next = NULL;
 80125dc:	69bb      	ldr	r3, [r7, #24]
 80125de:	2200      	movs	r2, #0
 80125e0:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 80125e2:	69bb      	ldr	r3, [r7, #24]
 80125e4:	2200      	movs	r2, #0
 80125e6:	605a      	str	r2, [r3, #4]

	return TRUE;
 80125e8:	2301      	movs	r3, #1
 80125ea:	e005      	b.n	80125f8 <pifFixList_Init+0xb4>
	if (!p_buffer) goto fail;
 80125ec:	bf00      	nop

fail:
	pifFixList_Clear(p_owner, NULL);
 80125ee:	2100      	movs	r1, #0
 80125f0:	68f8      	ldr	r0, [r7, #12]
 80125f2:	f000 f807 	bl	8012604 <pifFixList_Clear>
	return FALSE;
 80125f6:	2300      	movs	r3, #0
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	3720      	adds	r7, #32
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}
 8012600:	20001c0d 	.word	0x20001c0d

08012604 <pifFixList_Clear>:

void pifFixList_Clear(PifFixList* p_owner, PifEvtFixListClear evt_clear)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b084      	sub	sp, #16
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
 801260c:	6039      	str	r1, [r7, #0]
	if (p_owner->p_node) {
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	68db      	ldr	r3, [r3, #12]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d01f      	beq.n	8012656 <pifFixList_Clear+0x52>
		if (evt_clear) {
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d014      	beq.n	8012646 <pifFixList_Clear+0x42>
			PifFixListIterator it = p_owner->p_first;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	691b      	ldr	r3, [r3, #16]
 8012620:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012622:	e00d      	b.n	8012640 <pifFixList_Clear+0x3c>
				(*evt_clear)(it->data);
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	f103 0208 	add.w	r2, r3, #8
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	4610      	mov	r0, r2
 801262e:	4798      	blx	r3
				it = it ? it->p_next : NULL;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d002      	beq.n	801263c <pifFixList_Clear+0x38>
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	e000      	b.n	801263e <pifFixList_Clear+0x3a>
 801263c:	2300      	movs	r3, #0
 801263e:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d1ee      	bne.n	8012624 <pifFixList_Clear+0x20>
			}
		}

		free(p_owner->p_node);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	68db      	ldr	r3, [r3, #12]
 801264a:	4618      	mov	r0, r3
 801264c:	f010 fa0e 	bl	8022a6c <free>
		p_owner->p_node = NULL;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2200      	movs	r2, #0
 8012654:	60da      	str	r2, [r3, #12]
	}

	p_owner->size = 0;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2200      	movs	r2, #0
 801265a:	601a      	str	r2, [r3, #0]
	p_owner->max_count = 0;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2200      	movs	r2, #0
 8012660:	605a      	str	r2, [r3, #4]
}
 8012662:	bf00      	nop
 8012664:	3710      	adds	r7, #16
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}

0801266a <pifFixList_AddFirst>:

void* pifFixList_AddFirst(PifFixList* p_owner)
{
 801266a:	b580      	push	{r7, lr}
 801266c:	b084      	sub	sp, #16
 801266e:	af00      	add	r7, sp, #0
 8012670:	6078      	str	r0, [r7, #4]
	char* p;

	if (p_owner->p_free == NULL) return NULL;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	695b      	ldr	r3, [r3, #20]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d101      	bne.n	801267e <pifFixList_AddFirst+0x14>
 801267a:	2300      	movs	r3, #0
 801267c:	e025      	b.n	80126ca <pifFixList_AddFirst+0x60>

	PifFixListIterator p_node = p_owner->p_free;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	695b      	ldr	r3, [r3, #20]
 8012682:	60fb      	str	r3, [r7, #12]
	p_owner->p_free = p_node->p_next;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	615a      	str	r2, [r3, #20]

	p_node->p_next = p_owner->p_first;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	691a      	ldr	r2, [r3, #16]
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	601a      	str	r2, [r3, #0]
	if (p_owner->p_first) {
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	691b      	ldr	r3, [r3, #16]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d003      	beq.n	80126a4 <pifFixList_AddFirst+0x3a>
		p_owner->p_first->p_prev = p_node;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	691b      	ldr	r3, [r3, #16]
 80126a0:	68fa      	ldr	r2, [r7, #12]
 80126a2:	605a      	str	r2, [r3, #4]
	}
	p_owner->p_first = p_node;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	68fa      	ldr	r2, [r7, #12]
 80126a8:	611a      	str	r2, [r3, #16]
	p_owner->count++;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	689b      	ldr	r3, [r3, #8]
 80126ae:	1c5a      	adds	r2, r3, #1
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	609a      	str	r2, [r3, #8]

	p = (char*)p_node + 2 * sizeof(PifFixListIterator);
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	3308      	adds	r3, #8
 80126b8:	60bb      	str	r3, [r7, #8]
	memset(p, 0, p_owner->size);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	461a      	mov	r2, r3
 80126c0:	2100      	movs	r1, #0
 80126c2:	68b8      	ldr	r0, [r7, #8]
 80126c4:	f010 f9e8 	bl	8022a98 <memset>
    return p;
 80126c8:	68bb      	ldr	r3, [r7, #8]
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3710      	adds	r7, #16
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}

080126d2 <pifFixList_Remove>:

void pifFixList_Remove(PifFixList* p_owner, void* p_data)
{
 80126d2:	b480      	push	{r7}
 80126d4:	b085      	sub	sp, #20
 80126d6:	af00      	add	r7, sp, #0
 80126d8:	6078      	str	r0, [r7, #4]
 80126da:	6039      	str	r1, [r7, #0]
	PifFixListIterator p_node = (PifFixListIterator)((uint8_t*)p_data - 2 * sizeof(PifFixListIterator));
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	3b08      	subs	r3, #8
 80126e0:	60fb      	str	r3, [r7, #12]

	if (p_node->p_prev) {
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	685b      	ldr	r3, [r3, #4]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d005      	beq.n	80126f6 <pifFixList_Remove+0x24>
		p_node->p_prev->p_next = p_node->p_next;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	68fa      	ldr	r2, [r7, #12]
 80126f0:	6812      	ldr	r2, [r2, #0]
 80126f2:	601a      	str	r2, [r3, #0]
 80126f4:	e003      	b.n	80126fe <pifFixList_Remove+0x2c>
	}
	else {
		p_owner->p_first = p_node->p_next;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	681a      	ldr	r2, [r3, #0]
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	611a      	str	r2, [r3, #16]
	}
	if (p_node->p_next) {
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d004      	beq.n	8012710 <pifFixList_Remove+0x3e>
		p_node->p_next->p_prev = p_node->p_prev;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	68fa      	ldr	r2, [r7, #12]
 801270c:	6852      	ldr	r2, [r2, #4]
 801270e:	605a      	str	r2, [r3, #4]
	}
	p_node->p_next = p_owner->p_free;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	695a      	ldr	r2, [r3, #20]
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	2200      	movs	r2, #0
 801271c:	605a      	str	r2, [r3, #4]
	p_owner->p_free = p_node;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	68fa      	ldr	r2, [r7, #12]
 8012722:	615a      	str	r2, [r3, #20]

	p_owner->count--;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	689b      	ldr	r3, [r3, #8]
 8012728:	1e5a      	subs	r2, r3, #1
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	609a      	str	r2, [r3, #8]
}
 801272e:	bf00      	nop
 8012730:	3714      	adds	r7, #20
 8012732:	46bd      	mov	sp, r7
 8012734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012738:	4770      	bx	lr

0801273a <pifFixList_Count>:

#ifdef __PIF_NO_USE_INLINE__

int pifFixList_Count(PifFixList* p_owner)
{
 801273a:	b480      	push	{r7}
 801273c:	b083      	sub	sp, #12
 801273e:	af00      	add	r7, sp, #0
 8012740:	6078      	str	r0, [r7, #4]
	return p_owner->count;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	689b      	ldr	r3, [r3, #8]
}
 8012746:	4618      	mov	r0, r3
 8012748:	370c      	adds	r7, #12
 801274a:	46bd      	mov	sp, r7
 801274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012750:	4770      	bx	lr

08012752 <pifFixList_Begin>:

PifFixListIterator pifFixList_Begin(PifFixList* p_owner)
{
 8012752:	b480      	push	{r7}
 8012754:	b083      	sub	sp, #12
 8012756:	af00      	add	r7, sp, #0
 8012758:	6078      	str	r0, [r7, #4]
	return p_owner->p_first;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	691b      	ldr	r3, [r3, #16]
}
 801275e:	4618      	mov	r0, r3
 8012760:	370c      	adds	r7, #12
 8012762:	46bd      	mov	sp, r7
 8012764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012768:	4770      	bx	lr

0801276a <pifFixList_Next>:

PifFixListIterator pifFixList_Next(PifFixListIterator it)
{
 801276a:	b480      	push	{r7}
 801276c:	b083      	sub	sp, #12
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
	return it ? it->p_next : NULL;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d002      	beq.n	801277e <pifFixList_Next+0x14>
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	e000      	b.n	8012780 <pifFixList_Next+0x16>
 801277e:	2300      	movs	r3, #0
}
 8012780:	4618      	mov	r0, r3
 8012782:	370c      	adds	r7, #12
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr

0801278c <pifLog_CmdHelp>:

#ifdef __PIF_LOG_COMMAND__


int pifLog_CmdHelp(int argc, char *argv[])
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b084      	sub	sp, #16
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	6039      	str	r1, [r7, #0]
    const PifLogCmdEntry* p_entry;

    (void)argc;
    (void)argv;

    pifLog_Print(LT_NONE, "Available commands:\n");
 8012796:	4916      	ldr	r1, [pc, #88]	; (80127f0 <pifLog_CmdHelp+0x64>)
 8012798:	2000      	movs	r0, #0
 801279a:	f000 fd75 	bl	8013288 <pifLog_Print>
    i = 0;
 801279e:	2300      	movs	r3, #0
 80127a0:	60fb      	str	r3, [r7, #12]
    while (1) {
        p_entry = &s_log.p_cmd_table[i];
 80127a2:	4b14      	ldr	r3, [pc, #80]	; (80127f4 <pifLog_CmdHelp+0x68>)
 80127a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	011b      	lsls	r3, r3, #4
 80127aa:	4413      	add	r3, r2
 80127ac:	60bb      	str	r3, [r7, #8]
        if (!p_entry->p_name) break;
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d016      	beq.n	80127e4 <pifLog_CmdHelp+0x58>

        pifLog_Printf(LT_NONE, "  %s - %s\n", p_entry->p_name, p_entry->p_help);
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	681a      	ldr	r2, [r3, #0]
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	689b      	ldr	r3, [r3, #8]
 80127be:	490e      	ldr	r1, [pc, #56]	; (80127f8 <pifLog_CmdHelp+0x6c>)
 80127c0:	2000      	movs	r0, #0
 80127c2:	f000 fdef 	bl	80133a4 <pifLog_Printf>
    	if (p_entry->p_args) {
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	68db      	ldr	r3, [r3, #12]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d006      	beq.n	80127dc <pifLog_CmdHelp+0x50>
            pifLog_Printf(LT_NONE, "\t%s\n", p_entry->p_args);
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	68db      	ldr	r3, [r3, #12]
 80127d2:	461a      	mov	r2, r3
 80127d4:	4909      	ldr	r1, [pc, #36]	; (80127fc <pifLog_CmdHelp+0x70>)
 80127d6:	2000      	movs	r0, #0
 80127d8:	f000 fde4 	bl	80133a4 <pifLog_Printf>
    	}
        i++;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	3301      	adds	r3, #1
 80127e0:	60fb      	str	r3, [r7, #12]
        p_entry = &s_log.p_cmd_table[i];
 80127e2:	e7de      	b.n	80127a2 <pifLog_CmdHelp+0x16>
        if (!p_entry->p_name) break;
 80127e4:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 80127e6:	2300      	movs	r3, #0
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3710      	adds	r7, #16
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	080273d0 	.word	0x080273d0
 80127f4:	20001c44 	.word	0x20001c44
 80127f8:	080273e8 	.word	0x080273e8
 80127fc:	080273f4 	.word	0x080273f4

08012800 <pifLog_CmdPrintVersion>:

int pifLog_CmdPrintVersion(int argc, char* argv[])
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b084      	sub	sp, #16
 8012804:	af02      	add	r7, sp, #8
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifLog_Printf(LT_NONE, "PIF Version: %d.%d.%d %s\n", PIF_VERSION_MAJOR, PIF_VERSION_MINOR, PIF_VERSION_PATCH, __DATE__);
 801280a:	4b07      	ldr	r3, [pc, #28]	; (8012828 <pifLog_CmdPrintVersion+0x28>)
 801280c:	9301      	str	r3, [sp, #4]
 801280e:	2300      	movs	r3, #0
 8012810:	9300      	str	r3, [sp, #0]
 8012812:	2301      	movs	r3, #1
 8012814:	2200      	movs	r2, #0
 8012816:	4905      	ldr	r1, [pc, #20]	; (801282c <pifLog_CmdPrintVersion+0x2c>)
 8012818:	2000      	movs	r0, #0
 801281a:	f000 fdc3 	bl	80133a4 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 801281e:	2300      	movs	r3, #0
}
 8012820:	4618      	mov	r0, r3
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}
 8012828:	08027418 	.word	0x08027418
 801282c:	080273fc 	.word	0x080273fc

08012830 <pifLog_CmdPrintTask>:

int pifLog_CmdPrintTask(int argc, char* argv[])
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifTaskManager_Print();
 801283a:	f002 fa1d 	bl	8014c78 <pifTaskManager_Print>
	return PIF_LOG_CMD_NO_ERROR;
 801283e:	2300      	movs	r3, #0
}
 8012840:	4618      	mov	r0, r3
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}

08012848 <pifLog_CmdSetStatus>:

int pifLog_CmdSetStatus(int argc, char* argv[])
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b086      	sub	sp, #24
 801284c:	af02      	add	r7, sp, #8
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	6039      	str	r1, [r7, #0]
	BOOL value;
	int i;

	if (argc == 0) {
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d136      	bne.n	80128c6 <pifLog_CmdSetStatus+0x7e>
    	pifLog_Printf(LT_NONE, "Use Rate: %u%%\n", pif_performance._use_rate);
 8012858:	4b4b      	ldr	r3, [pc, #300]	; (8012988 <pifLog_CmdSetStatus+0x140>)
 801285a:	791b      	ldrb	r3, [r3, #4]
 801285c:	461a      	mov	r2, r3
 801285e:	494b      	ldr	r1, [pc, #300]	; (801298c <pifLog_CmdSetStatus+0x144>)
 8012860:	2000      	movs	r0, #0
 8012862:	f000 fd9f 	bl	80133a4 <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Error: %d\n", pif_error);
 8012866:	4b4a      	ldr	r3, [pc, #296]	; (8012990 <pifLog_CmdSetStatus+0x148>)
 8012868:	781b      	ldrb	r3, [r3, #0]
 801286a:	461a      	mov	r2, r3
 801286c:	4949      	ldr	r1, [pc, #292]	; (8012994 <pifLog_CmdSetStatus+0x14c>)
 801286e:	2000      	movs	r0, #0
 8012870:	f000 fd98 	bl	80133a4 <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Flag:\n");
 8012874:	4948      	ldr	r1, [pc, #288]	; (8012998 <pifLog_CmdSetStatus+0x150>)
 8012876:	2000      	movs	r0, #0
 8012878:	f000 fd94 	bl	80133a4 <pifLog_Printf>
	   	i = 0;
 801287c:	2300      	movs	r3, #0
 801287e:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012880:	e019      	b.n	80128b6 <pifLog_CmdSetStatus+0x6e>
			pifLog_Printf(LT_NONE, "  %s(%s): %d\n", c_log_flags[i].p_name, c_log_flags[i].p_command, (pif_log_flag.all >> i) & 1);
 8012882:	4a46      	ldr	r2, [pc, #280]	; (801299c <pifLog_CmdSetStatus+0x154>)
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801288a:	4a44      	ldr	r2, [pc, #272]	; (801299c <pifLog_CmdSetStatus+0x154>)
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	00db      	lsls	r3, r3, #3
 8012890:	4413      	add	r3, r2
 8012892:	6858      	ldr	r0, [r3, #4]
 8012894:	4b42      	ldr	r3, [pc, #264]	; (80129a0 <pifLog_CmdSetStatus+0x158>)
 8012896:	681a      	ldr	r2, [r3, #0]
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	fa22 f303 	lsr.w	r3, r2, r3
 801289e:	f003 0301 	and.w	r3, r3, #1
 80128a2:	9300      	str	r3, [sp, #0]
 80128a4:	4603      	mov	r3, r0
 80128a6:	460a      	mov	r2, r1
 80128a8:	493e      	ldr	r1, [pc, #248]	; (80129a4 <pifLog_CmdSetStatus+0x15c>)
 80128aa:	2000      	movs	r0, #0
 80128ac:	f000 fd7a 	bl	80133a4 <pifLog_Printf>
			i++;
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	3301      	adds	r3, #1
 80128b4:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 80128b6:	4a39      	ldr	r2, [pc, #228]	; (801299c <pifLog_CmdSetStatus+0x154>)
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d1df      	bne.n	8012882 <pifLog_CmdSetStatus+0x3a>
		}
		return PIF_LOG_CMD_NO_ERROR;
 80128c2:	2300      	movs	r3, #0
 80128c4:	e05c      	b.n	8012980 <pifLog_CmdSetStatus+0x138>
	}
	else if (argc > 1) {
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2b01      	cmp	r3, #1
 80128ca:	dd57      	ble.n	801297c <pifLog_CmdSetStatus+0x134>
		switch (argv[1][0]) {
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	3304      	adds	r3, #4
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	2b74      	cmp	r3, #116	; 0x74
 80128d6:	d015      	beq.n	8012904 <pifLog_CmdSetStatus+0xbc>
 80128d8:	2b74      	cmp	r3, #116	; 0x74
 80128da:	dc16      	bgt.n	801290a <pifLog_CmdSetStatus+0xc2>
 80128dc:	2b66      	cmp	r3, #102	; 0x66
 80128de:	d00e      	beq.n	80128fe <pifLog_CmdSetStatus+0xb6>
 80128e0:	2b66      	cmp	r3, #102	; 0x66
 80128e2:	dc12      	bgt.n	801290a <pifLog_CmdSetStatus+0xc2>
 80128e4:	2b54      	cmp	r3, #84	; 0x54
 80128e6:	d00d      	beq.n	8012904 <pifLog_CmdSetStatus+0xbc>
 80128e8:	2b54      	cmp	r3, #84	; 0x54
 80128ea:	dc0e      	bgt.n	801290a <pifLog_CmdSetStatus+0xc2>
 80128ec:	2b46      	cmp	r3, #70	; 0x46
 80128ee:	d006      	beq.n	80128fe <pifLog_CmdSetStatus+0xb6>
 80128f0:	2b46      	cmp	r3, #70	; 0x46
 80128f2:	dc0a      	bgt.n	801290a <pifLog_CmdSetStatus+0xc2>
 80128f4:	2b30      	cmp	r3, #48	; 0x30
 80128f6:	d002      	beq.n	80128fe <pifLog_CmdSetStatus+0xb6>
 80128f8:	2b31      	cmp	r3, #49	; 0x31
 80128fa:	d003      	beq.n	8012904 <pifLog_CmdSetStatus+0xbc>
 80128fc:	e005      	b.n	801290a <pifLog_CmdSetStatus+0xc2>
		case '0':
		case 'F':
		case 'f':
			value = FALSE;
 80128fe:	2300      	movs	r3, #0
 8012900:	73fb      	strb	r3, [r7, #15]
			break;
 8012902:	e005      	b.n	8012910 <pifLog_CmdSetStatus+0xc8>

		case '1':
		case 'T':
		case 't':
			value = TRUE;
 8012904:	2301      	movs	r3, #1
 8012906:	73fb      	strb	r3, [r7, #15]
			break;
 8012908:	e002      	b.n	8012910 <pifLog_CmdSetStatus+0xc8>

		default:
			return PIF_LOG_CMD_INVALID_ARG;
 801290a:	f06f 0303 	mvn.w	r3, #3
 801290e:	e037      	b.n	8012980 <pifLog_CmdSetStatus+0x138>
		}
		i = 0;
 8012910:	2300      	movs	r3, #0
 8012912:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012914:	e029      	b.n	801296a <pifLog_CmdSetStatus+0x122>
			if (!strcasecmp(argv[0], c_log_flags[i].p_command)) {
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	681a      	ldr	r2, [r3, #0]
 801291a:	4920      	ldr	r1, [pc, #128]	; (801299c <pifLog_CmdSetStatus+0x154>)
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	00db      	lsls	r3, r3, #3
 8012920:	440b      	add	r3, r1
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	4619      	mov	r1, r3
 8012926:	4610      	mov	r0, r2
 8012928:	f010 f9c4 	bl	8022cb4 <strcasecmp>
 801292c:	4603      	mov	r3, r0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d118      	bne.n	8012964 <pifLog_CmdSetStatus+0x11c>
				if (value) {
 8012932:	7bfb      	ldrb	r3, [r7, #15]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d009      	beq.n	801294c <pifLog_CmdSetStatus+0x104>
					pif_log_flag.all |= 1L << i;
 8012938:	4b19      	ldr	r3, [pc, #100]	; (80129a0 <pifLog_CmdSetStatus+0x158>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	2101      	movs	r1, #1
 801293e:	68ba      	ldr	r2, [r7, #8]
 8012940:	fa01 f202 	lsl.w	r2, r1, r2
 8012944:	4313      	orrs	r3, r2
 8012946:	4a16      	ldr	r2, [pc, #88]	; (80129a0 <pifLog_CmdSetStatus+0x158>)
 8012948:	6013      	str	r3, [r2, #0]
 801294a:	e009      	b.n	8012960 <pifLog_CmdSetStatus+0x118>
				}
				else {
					pif_log_flag.all &= ~(1L << i);
 801294c:	4b14      	ldr	r3, [pc, #80]	; (80129a0 <pifLog_CmdSetStatus+0x158>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	2101      	movs	r1, #1
 8012952:	68ba      	ldr	r2, [r7, #8]
 8012954:	fa01 f202 	lsl.w	r2, r1, r2
 8012958:	43d2      	mvns	r2, r2
 801295a:	4013      	ands	r3, r2
 801295c:	4a10      	ldr	r2, [pc, #64]	; (80129a0 <pifLog_CmdSetStatus+0x158>)
 801295e:	6013      	str	r3, [r2, #0]
				}
				return PIF_LOG_CMD_NO_ERROR;
 8012960:	2300      	movs	r3, #0
 8012962:	e00d      	b.n	8012980 <pifLog_CmdSetStatus+0x138>
			}
			i++;
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	3301      	adds	r3, #1
 8012968:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 801296a:	4a0c      	ldr	r2, [pc, #48]	; (801299c <pifLog_CmdSetStatus+0x154>)
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d1cf      	bne.n	8012916 <pifLog_CmdSetStatus+0xce>
		}
		return PIF_LOG_CMD_INVALID_ARG;
 8012976:	f06f 0303 	mvn.w	r3, #3
 801297a:	e001      	b.n	8012980 <pifLog_CmdSetStatus+0x138>
	}
	return PIF_LOG_CMD_TOO_FEW_ARGS;
 801297c:	f06f 0302 	mvn.w	r3, #2
}
 8012980:	4618      	mov	r0, r3
 8012982:	3710      	adds	r7, #16
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}
 8012988:	20001c28 	.word	0x20001c28
 801298c:	08027424 	.word	0x08027424
 8012990:	20001c0d 	.word	0x20001c0d
 8012994:	08027434 	.word	0x08027434
 8012998:	08027440 	.word	0x08027440
 801299c:	08029088 	.word	0x08029088
 80129a0:	20001c40 	.word	0x20001c40
 80129a4:	08027448 	.word	0x08027448

080129a8 <_getDebugString>:

static BOOL _getDebugString(PifLog* p_owner, PifActCommReceiveData act_receive_data)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b088      	sub	sp, #32
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	6039      	str	r1, [r7, #0]
    char tmp_char;
    uint8_t i;
    BOOL str_get_done_flag = FALSE;
 80129b2:	2300      	movs	r3, #0
 80129b4:	77bb      	strb	r3, [r7, #30]
    uint8_t enter;
    static uint8_t pre_enter = 0;
    const PifLogCmdEntry *cmd, *pstart, *pend;

	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 80129b6:	e1e2      	b.n	8012d7e <_getDebugString+0x3d6>
		if (tmp_char >= 32 && tmp_char <= 126) {
 80129b8:	7bfb      	ldrb	r3, [r7, #15]
 80129ba:	2b1f      	cmp	r3, #31
 80129bc:	d934      	bls.n	8012a28 <_getDebugString+0x80>
 80129be:	7bfb      	ldrb	r3, [r7, #15]
 80129c0:	2b7e      	cmp	r3, #126	; 0x7e
 80129c2:	d831      	bhi.n	8012a28 <_getDebugString+0x80>
			if (!p_owner->char_idx && tmp_char == ' ') continue;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d103      	bne.n	80129d6 <_getDebugString+0x2e>
 80129ce:	7bfb      	ldrb	r3, [r7, #15]
 80129d0:	2b20      	cmp	r3, #32
 80129d2:	d100      	bne.n	80129d6 <_getDebugString+0x2e>
 80129d4:	e1d3      	b.n	8012d7e <_getDebugString+0x3d6>
			if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129dc:	461a      	mov	r2, r3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80129e4:	3b03      	subs	r3, #3
 80129e6:	429a      	cmp	r2, r3
 80129e8:	f280 815d 	bge.w	8012ca6 <_getDebugString+0x2fe>
				pifRingBuffer_PutByte(p_owner->p_tx_buffer, tmp_char);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129f0:	7bfa      	ldrb	r2, [r7, #15]
 80129f2:	4611      	mov	r1, r2
 80129f4:	4618      	mov	r0, r3
 80129f6:	f000 ffeb 	bl	80139d0 <pifRingBuffer_PutByte>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	6a1b      	ldr	r3, [r3, #32]
 80129fe:	69db      	ldr	r3, [r3, #28]
 8012a00:	4618      	mov	r0, r3
 8012a02:	f001 fd69 	bl	80144d8 <pifTask_SetTrigger>
				p_owner->p_rx_buffer[p_owner->char_idx] = tmp_char;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a0a:	687a      	ldr	r2, [r7, #4]
 8012a0c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012a10:	4413      	add	r3, r2
 8012a12:	7bfa      	ldrb	r2, [r7, #15]
 8012a14:	701a      	strb	r2, [r3, #0]
				p_owner->char_idx++;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a1c:	3301      	adds	r3, #1
 8012a1e:	b2da      	uxtb	r2, r3
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 8012a26:	e13e      	b.n	8012ca6 <_getDebugString+0x2fe>
            }
		}
		else {
			switch (tmp_char) {
 8012a28:	7bfb      	ldrb	r3, [r7, #15]
 8012a2a:	2b0d      	cmp	r3, #13
 8012a2c:	dc16      	bgt.n	8012a5c <_getDebugString+0xb4>
 8012a2e:	2b08      	cmp	r3, #8
 8012a30:	f2c0 812c 	blt.w	8012c8c <_getDebugString+0x2e4>
 8012a34:	3b08      	subs	r3, #8
 8012a36:	2b05      	cmp	r3, #5
 8012a38:	f200 8128 	bhi.w	8012c8c <_getDebugString+0x2e4>
 8012a3c:	a201      	add	r2, pc, #4	; (adr r2, 8012a44 <_getDebugString+0x9c>)
 8012a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a42:	bf00      	nop
 8012a44:	08012a63 	.word	0x08012a63
 8012a48:	08012aa9 	.word	0x08012aa9
 8012a4c:	08012c57 	.word	0x08012c57
 8012a50:	08012c8d 	.word	0x08012c8d
 8012a54:	08012c63 	.word	0x08012c63
 8012a58:	08012c5d 	.word	0x08012c5d
 8012a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8012a5e:	f040 8115 	bne.w	8012c8c <_getDebugString+0x2e4>
			case '\b':		// 0x08 / Backspace / CTRL-H
			case 0x7F:		// Delete
				if (p_owner->char_idx) {
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	f000 8119 	beq.w	8012ca0 <_getDebugString+0x2f8>
					p_owner->char_idx--;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a74:	3b01      	subs	r3, #1
 8012a76:	b2da      	uxtb	r2, r3
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a82:	687a      	ldr	r2, [r7, #4]
 8012a84:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012a88:	4413      	add	r3, r2
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	701a      	strb	r2, [r3, #0]
					pifRingBuffer_PutString(p_owner->p_tx_buffer, "\b \b");
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a92:	499c      	ldr	r1, [pc, #624]	; (8012d04 <_getDebugString+0x35c>)
 8012a94:	4618      	mov	r0, r3
 8012a96:	f001 f819 	bl	8013acc <pifRingBuffer_PutString>
					pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	6a1b      	ldr	r3, [r3, #32]
 8012a9e:	69db      	ldr	r3, [r3, #28]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f001 fd19 	bl	80144d8 <pifTask_SetTrigger>
				}
				break;
 8012aa6:	e0fb      	b.n	8012ca0 <_getDebugString+0x2f8>

			case '\t':		// 0x09 / Horizontal Tab / CTRL-I
	            // do tab completion
			    pstart = NULL;
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	617b      	str	r3, [r7, #20]
			    pend = NULL;
 8012aac:	2300      	movs	r3, #0
 8012aae:	613b      	str	r3, [r7, #16]
	            i = p_owner->char_idx;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ab6:	77fb      	strb	r3, [r7, #31]
	            cmd = p_owner->p_cmd_table;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012abc:	61bb      	str	r3, [r7, #24]
	            while (cmd->p_name) {
 8012abe:	e01b      	b.n	8012af8 <_getDebugString+0x150>
	                if (!(p_owner->char_idx && (strncasecmp(p_owner->p_rx_buffer, cmd->p_name, p_owner->char_idx) != 0))) {
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d00c      	beq.n	8012ae4 <_getDebugString+0x13c>
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012ace:	69bb      	ldr	r3, [r7, #24]
 8012ad0:	6819      	ldr	r1, [r3, #0]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ad8:	461a      	mov	r2, r3
 8012ada:	f010 f929 	bl	8022d30 <strncasecmp>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d106      	bne.n	8012af2 <_getDebugString+0x14a>
						if (!pstart)
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d101      	bne.n	8012aee <_getDebugString+0x146>
							pstart = cmd;
 8012aea:	69bb      	ldr	r3, [r7, #24]
 8012aec:	617b      	str	r3, [r7, #20]
						pend = cmd;
 8012aee:	69bb      	ldr	r3, [r7, #24]
 8012af0:	613b      	str	r3, [r7, #16]
	                }
	                cmd++;
 8012af2:	69bb      	ldr	r3, [r7, #24]
 8012af4:	3310      	adds	r3, #16
 8012af6:	61bb      	str	r3, [r7, #24]
	            while (cmd->p_name) {
 8012af8:	69bb      	ldr	r3, [r7, #24]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d1df      	bne.n	8012ac0 <_getDebugString+0x118>
	            }
	            if (pstart) {    /* Buffer matches one or more commands */
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d05b      	beq.n	8012bbe <_getDebugString+0x216>
	                for (; ; p_owner->char_idx++) {
	                	if (!pstart->p_name[p_owner->char_idx]) break;
 8012b06:	697b      	ldr	r3, [r7, #20]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	687a      	ldr	r2, [r7, #4]
 8012b0c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012b10:	4413      	add	r3, r2
 8012b12:	781b      	ldrb	r3, [r3, #0]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d04f      	beq.n	8012bb8 <_getDebugString+0x210>
	                    if (pstart->p_name[p_owner->char_idx] != pend->p_name[p_owner->char_idx])
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012b22:	4413      	add	r3, r2
 8012b24:	781a      	ldrb	r2, [r3, #0]
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	6879      	ldr	r1, [r7, #4]
 8012b2c:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8012b30:	440b      	add	r3, r1
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	429a      	cmp	r2, r3
 8012b36:	d141      	bne.n	8012bbc <_getDebugString+0x214>
	                        break;
	                    if (!pstart->p_name[p_owner->char_idx] && p_owner->char_idx < p_owner->rx_buffer_size - 2) {
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	687a      	ldr	r2, [r7, #4]
 8012b3e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012b42:	4413      	add	r3, r2
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d11f      	bne.n	8012b8a <_getDebugString+0x1e2>
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b50:	461a      	mov	r2, r3
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012b58:	3b02      	subs	r3, #2
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	da15      	bge.n	8012b8a <_getDebugString+0x1e2>
	                        /* Unambiguous -- append a space */
	                    	p_owner->p_rx_buffer[p_owner->char_idx++] = ' ';
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b68:	1c59      	adds	r1, r3, #1
 8012b6a:	b2c8      	uxtb	r0, r1
 8012b6c:	6879      	ldr	r1, [r7, #4]
 8012b6e:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
 8012b72:	4413      	add	r3, r2
 8012b74:	2220      	movs	r2, #32
 8012b76:	701a      	strb	r2, [r3, #0]
	                        p_owner->p_rx_buffer[p_owner->char_idx] = '\0';
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b7c:	687a      	ldr	r2, [r7, #4]
 8012b7e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012b82:	4413      	add	r3, r2
 8012b84:	2200      	movs	r2, #0
 8012b86:	701a      	strb	r2, [r3, #0]
	                        break;
 8012b88:	e019      	b.n	8012bbe <_getDebugString+0x216>
	                    }
	                    p_owner->p_rx_buffer[p_owner->char_idx] = pstart->p_name[p_owner->char_idx];
 8012b8a:	697b      	ldr	r3, [r7, #20]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	687a      	ldr	r2, [r7, #4]
 8012b90:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012b94:	441a      	add	r2, r3
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b9a:	6879      	ldr	r1, [r7, #4]
 8012b9c:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8012ba0:	440b      	add	r3, r1
 8012ba2:	7812      	ldrb	r2, [r2, #0]
 8012ba4:	701a      	strb	r2, [r3, #0]
	                for (; ; p_owner->char_idx++) {
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bac:	3301      	adds	r3, #1
 8012bae:	b2da      	uxtb	r2, r3
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	                	if (!pstart->p_name[p_owner->char_idx]) break;
 8012bb6:	e7a6      	b.n	8012b06 <_getDebugString+0x15e>
 8012bb8:	bf00      	nop
 8012bba:	e000      	b.n	8012bbe <_getDebugString+0x216>
	                        break;
 8012bbc:	bf00      	nop
	                }
	            }
	            if (!p_owner->char_idx || pstart != pend) {
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d003      	beq.n	8012bd0 <_getDebugString+0x228>
 8012bc8:	697a      	ldr	r2, [r7, #20]
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d035      	beq.n	8012c3c <_getDebugString+0x294>
	                /* Print list of ambiguous matches */
	            	pifRingBuffer_PutString(p_owner->p_tx_buffer, "\r\033[K");
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bd4:	494c      	ldr	r1, [pc, #304]	; (8012d08 <_getDebugString+0x360>)
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f000 ff78 	bl	8013acc <pifRingBuffer_PutString>
	                for (cmd = pstart; cmd <= pend; cmd++) {
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	61bb      	str	r3, [r7, #24]
 8012be0:	e010      	b.n	8012c04 <_getDebugString+0x25c>
	                	pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)cmd->p_name);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012be6:	69bb      	ldr	r3, [r7, #24]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	4619      	mov	r1, r3
 8012bec:	4610      	mov	r0, r2
 8012bee:	f000 ff6d 	bl	8013acc <pifRingBuffer_PutString>
	                	pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\t');
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bf6:	2109      	movs	r1, #9
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f000 fee9 	bl	80139d0 <pifRingBuffer_PutByte>
	                for (cmd = pstart; cmd <= pend; cmd++) {
 8012bfe:	69bb      	ldr	r3, [r7, #24]
 8012c00:	3310      	adds	r3, #16
 8012c02:	61bb      	str	r3, [r7, #24]
 8012c04:	69ba      	ldr	r2, [r7, #24]
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d9ea      	bls.n	8012be2 <_getDebugString+0x23a>
	                }
					pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c10:	4a3e      	ldr	r2, [pc, #248]	; (8012d0c <_getDebugString+0x364>)
 8012c12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012c14:	4611      	mov	r1, r2
 8012c16:	4618      	mov	r0, r3
 8012c18:	f000 ff58 	bl	8013acc <pifRingBuffer_PutString>
	                i = 0;    /* Redraw prompt */
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	77fb      	strb	r3, [r7, #31]
	            }
	            for (; i < p_owner->char_idx; i++)
 8012c20:	e00c      	b.n	8012c3c <_getDebugString+0x294>
	            	pifRingBuffer_PutByte(p_owner->p_tx_buffer, p_owner->p_rx_buffer[i]);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c2a:	7ffb      	ldrb	r3, [r7, #31]
 8012c2c:	4413      	add	r3, r2
 8012c2e:	781b      	ldrb	r3, [r3, #0]
 8012c30:	4619      	mov	r1, r3
 8012c32:	f000 fecd 	bl	80139d0 <pifRingBuffer_PutByte>
	            for (; i < p_owner->char_idx; i++)
 8012c36:	7ffb      	ldrb	r3, [r7, #31]
 8012c38:	3301      	adds	r3, #1
 8012c3a:	77fb      	strb	r3, [r7, #31]
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c42:	7ffa      	ldrb	r2, [r7, #31]
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d3ec      	bcc.n	8012c22 <_getDebugString+0x27a>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6a1b      	ldr	r3, [r3, #32]
 8012c4c:	69db      	ldr	r3, [r3, #28]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f001 fc42 	bl	80144d8 <pifTask_SetTrigger>
				break;
 8012c54:	e027      	b.n	8012ca6 <_getDebugString+0x2fe>

			case '\n':		// 0x0A / Line Feed / CTRL-J
				enter = 1;
 8012c56:	2301      	movs	r3, #1
 8012c58:	777b      	strb	r3, [r7, #29]
				break;
 8012c5a:	e024      	b.n	8012ca6 <_getDebugString+0x2fe>

			case '\r':		// 0x0D / Carriage Return / CTRL-M
				enter = 2;
 8012c5c:	2302      	movs	r3, #2
 8012c5e:	777b      	strb	r3, [r7, #29]
				break;
 8012c60:	e021      	b.n	8012ca6 <_getDebugString+0x2fe>

			case 0x0C:		// Form Feed, New Page / CTRL-L
				pifRingBuffer_PutString(p_owner->p_tx_buffer, "\033[2J\033[1;1H");
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c66:	492a      	ldr	r1, [pc, #168]	; (8012d10 <_getDebugString+0x368>)
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f000 ff2f 	bl	8013acc <pifRingBuffer_PutString>
				pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c72:	4a26      	ldr	r2, [pc, #152]	; (8012d0c <_getDebugString+0x364>)
 8012c74:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012c76:	4611      	mov	r1, r2
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f000 ff27 	bl	8013acc <pifRingBuffer_PutString>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6a1b      	ldr	r3, [r3, #32]
 8012c82:	69db      	ldr	r3, [r3, #28]
 8012c84:	4618      	mov	r0, r3
 8012c86:	f001 fc27 	bl	80144d8 <pifTask_SetTrigger>
				break;
 8012c8a:	e00c      	b.n	8012ca6 <_getDebugString+0x2fe>

			default:
				if (p_owner->evt_control_char) (*p_owner->evt_control_char)(tmp_char);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d007      	beq.n	8012ca4 <_getDebugString+0x2fc>
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012c98:	7bfa      	ldrb	r2, [r7, #15]
 8012c9a:	4610      	mov	r0, r2
 8012c9c:	4798      	blx	r3
            	break;
 8012c9e:	e001      	b.n	8012ca4 <_getDebugString+0x2fc>
				break;
 8012ca0:	bf00      	nop
 8012ca2:	e000      	b.n	8012ca6 <_getDebugString+0x2fe>
            	break;
 8012ca4:	bf00      	nop
			}
        }

		if (enter) {
 8012ca6:	7f7b      	ldrb	r3, [r7, #29]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d026      	beq.n	8012cfa <_getDebugString+0x352>
			if (p_owner->char_idx) {
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d005      	beq.n	8012cc2 <_getDebugString+0x31a>
				str_get_done_flag = TRUE;
 8012cb6:	2301      	movs	r3, #1
 8012cb8:	77bb      	strb	r3, [r7, #30]
				pre_enter = enter;
 8012cba:	4a16      	ldr	r2, [pc, #88]	; (8012d14 <_getDebugString+0x36c>)
 8012cbc:	7f7b      	ldrb	r3, [r7, #29]
 8012cbe:	7013      	strb	r3, [r2, #0]
 8012cc0:	e019      	b.n	8012cf6 <_getDebugString+0x34e>
			}
			else if (!pre_enter || enter == pre_enter) {
 8012cc2:	4b14      	ldr	r3, [pc, #80]	; (8012d14 <_getDebugString+0x36c>)
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d004      	beq.n	8012cd4 <_getDebugString+0x32c>
 8012cca:	4b12      	ldr	r3, [pc, #72]	; (8012d14 <_getDebugString+0x36c>)
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	7f7a      	ldrb	r2, [r7, #29]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d110      	bne.n	8012cf6 <_getDebugString+0x34e>
				pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd8:	4a0c      	ldr	r2, [pc, #48]	; (8012d0c <_getDebugString+0x364>)
 8012cda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012cdc:	4611      	mov	r1, r2
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f000 fef4 	bl	8013acc <pifRingBuffer_PutString>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6a1b      	ldr	r3, [r3, #32]
 8012ce8:	69db      	ldr	r3, [r3, #28]
 8012cea:	4618      	mov	r0, r3
 8012cec:	f001 fbf4 	bl	80144d8 <pifTask_SetTrigger>
				pre_enter = enter;
 8012cf0:	4a08      	ldr	r2, [pc, #32]	; (8012d14 <_getDebugString+0x36c>)
 8012cf2:	7f7b      	ldrb	r3, [r7, #29]
 8012cf4:	7013      	strb	r3, [r2, #0]
			}
			enter = 0;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	777b      	strb	r3, [r7, #29]
		}

        if (str_get_done_flag == TRUE) {
 8012cfa:	7fbb      	ldrb	r3, [r7, #30]
 8012cfc:	2b01      	cmp	r3, #1
 8012cfe:	d13e      	bne.n	8012d7e <_getDebugString+0x3d6>
        	// Strip trailing whitespace
            while (p_owner->char_idx > 0 && p_owner->p_rx_buffer[p_owner->char_idx - 1] == ' ') {
 8012d00:	e012      	b.n	8012d28 <_getDebugString+0x380>
 8012d02:	bf00      	nop
 8012d04:	08027458 	.word	0x08027458
 8012d08:	0802745c 	.word	0x0802745c
 8012d0c:	20001c44 	.word	0x20001c44
 8012d10:	08027464 	.word	0x08027464
 8012d14:	20001ca8 	.word	0x20001ca8
            	p_owner->char_idx--;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d1e:	3b01      	subs	r3, #1
 8012d20:	b2da      	uxtb	r2, r3
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            while (p_owner->char_idx > 0 && p_owner->p_rx_buffer[p_owner->char_idx - 1] == ' ') {
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d009      	beq.n	8012d46 <_getDebugString+0x39e>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d3c:	3b01      	subs	r3, #1
 8012d3e:	4413      	add	r3, r2
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	2b20      	cmp	r3, #32
 8012d44:	d0e8      	beq.n	8012d18 <_getDebugString+0x370>
            }
            if (p_owner->char_idx) {
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d014      	beq.n	8012d7a <_getDebugString+0x3d2>
				p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d54:	687a      	ldr	r2, [r7, #4]
 8012d56:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012d5a:	4413      	add	r3, r2
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	701a      	strb	r2, [r3, #0]
				pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\n');
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d64:	210a      	movs	r1, #10
 8012d66:	4618      	mov	r0, r3
 8012d68:	f000 fe32 	bl	80139d0 <pifRingBuffer_PutByte>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	6a1b      	ldr	r3, [r3, #32]
 8012d70:	69db      	ldr	r3, [r3, #28]
 8012d72:	4618      	mov	r0, r3
 8012d74:	f001 fbb0 	bl	80144d8 <pifTask_SetTrigger>
	        	break;
 8012d78:	e00c      	b.n	8012d94 <_getDebugString+0x3ec>
            }
            else {
            	str_get_done_flag = FALSE;
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	77bb      	strb	r3, [r7, #30]
	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	6a1a      	ldr	r2, [r3, #32]
 8012d82:	f107 010f 	add.w	r1, r7, #15
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	4610      	mov	r0, r2
 8012d8a:	4798      	blx	r3
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	f47f ae12 	bne.w	80129b8 <_getDebugString+0x10>
        	}
        }
    }
    return str_get_done_flag;
 8012d94:	7fbb      	ldrb	r3, [r7, #30]
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3720      	adds	r7, #32
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
 8012d9e:	bf00      	nop

08012da0 <_processDebugCmd>:

static int _processDebugCmd(PifLog* p_owner)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b086      	sub	sp, #24
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
    char* p_tmp_cmd;
    BOOL find_arg;
    unsigned int argc;
    const PifLogCmdEntry* p_cmd_entry;

    find_arg = TRUE;
 8012da8:	2301      	movs	r3, #1
 8012daa:	74fb      	strb	r3, [r7, #19]
    argc = 0;
 8012dac:	2300      	movs	r3, #0
 8012dae:	60fb      	str	r3, [r7, #12]
    p_tmp_cmd = p_owner->p_rx_buffer;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012db4:	617b      	str	r3, [r7, #20]

    while (*p_tmp_cmd) {
 8012db6:	e022      	b.n	8012dfe <_processDebugCmd+0x5e>
        if (*p_tmp_cmd == ' ') {
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	2b20      	cmp	r3, #32
 8012dbe:	d105      	bne.n	8012dcc <_processDebugCmd+0x2c>
            *p_tmp_cmd = 0;
 8012dc0:	697b      	ldr	r3, [r7, #20]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	701a      	strb	r2, [r3, #0]
            find_arg = TRUE;
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	74fb      	strb	r3, [r7, #19]
 8012dca:	e015      	b.n	8012df8 <_processDebugCmd+0x58>
        }
        else {
            if (find_arg) {
 8012dcc:	7cfb      	ldrb	r3, [r7, #19]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d012      	beq.n	8012df8 <_processDebugCmd+0x58>
                if (argc < PIF_LOG_CMD_MAX_ARGS) {
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	2b07      	cmp	r3, #7
 8012dd6:	d80c      	bhi.n	8012df2 <_processDebugCmd+0x52>
                	p_owner->p_argv[argc] = p_tmp_cmd;
 8012dd8:	687a      	ldr	r2, [r7, #4]
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	330c      	adds	r3, #12
 8012dde:	009b      	lsls	r3, r3, #2
 8012de0:	4413      	add	r3, r2
 8012de2:	697a      	ldr	r2, [r7, #20]
 8012de4:	605a      	str	r2, [r3, #4]
                	argc++;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	3301      	adds	r3, #1
 8012dea:	60fb      	str	r3, [r7, #12]
                    find_arg = FALSE;
 8012dec:	2300      	movs	r3, #0
 8012dee:	74fb      	strb	r3, [r7, #19]
 8012df0:	e002      	b.n	8012df8 <_processDebugCmd+0x58>
                }
                else {
                    return PIF_LOG_CMD_TOO_MANY_ARGS;
 8012df2:	f06f 0301 	mvn.w	r3, #1
 8012df6:	e02e      	b.n	8012e56 <_processDebugCmd+0xb6>
                }
            }
        }

        p_tmp_cmd++;
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	617b      	str	r3, [r7, #20]
    while (*p_tmp_cmd) {
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d1d8      	bne.n	8012db8 <_processDebugCmd+0x18>
    }

    if (argc) {
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d023      	beq.n	8012e54 <_processDebugCmd+0xb4>
		p_cmd_entry = p_owner->p_cmd_table;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e10:	60bb      	str	r3, [r7, #8]
		while (p_cmd_entry->p_name) {
 8012e12:	e018      	b.n	8012e46 <_processDebugCmd+0xa6>
			if (!strcasecmp(p_owner->p_argv[0], p_cmd_entry->p_name)) {
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	4610      	mov	r0, r2
 8012e20:	f00f ff48 	bl	8022cb4 <strcasecmp>
 8012e24:	4603      	mov	r3, r0
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d10a      	bne.n	8012e40 <_processDebugCmd+0xa0>
				return p_cmd_entry->processor(argc - 1, &p_owner->p_argv[1]);
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	685b      	ldr	r3, [r3, #4]
 8012e2e:	68fa      	ldr	r2, [r7, #12]
 8012e30:	3a01      	subs	r2, #1
 8012e32:	4610      	mov	r0, r2
 8012e34:	687a      	ldr	r2, [r7, #4]
 8012e36:	3238      	adds	r2, #56	; 0x38
 8012e38:	4611      	mov	r1, r2
 8012e3a:	4798      	blx	r3
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	e00a      	b.n	8012e56 <_processDebugCmd+0xb6>
            }

			p_cmd_entry++;
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	3310      	adds	r3, #16
 8012e44:	60bb      	str	r3, [r7, #8]
		while (p_cmd_entry->p_name) {
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d1e2      	bne.n	8012e14 <_processDebugCmd+0x74>
    	}
        return PIF_LOG_CMD_BAD_CMD;
 8012e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8012e52:	e000      	b.n	8012e56 <_processDebugCmd+0xb6>
    }
    return PIF_LOG_CMD_NO_ERROR;
 8012e54:	2300      	movs	r3, #0
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3718      	adds	r7, #24
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}

08012e5e <_evtParsing>:

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 8012e5e:	b580      	push	{r7, lr}
 8012e60:	b084      	sub	sp, #16
 8012e62:	af00      	add	r7, sp, #0
 8012e64:	6078      	str	r0, [r7, #4]
 8012e66:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	60fb      	str	r3, [r7, #12]

    if (p_owner->cmd_done == FALSE) {
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d10f      	bne.n	8012e96 <_evtParsing+0x38>
        if (_getDebugString(p_owner, act_receive_data)) {
 8012e76:	6839      	ldr	r1, [r7, #0]
 8012e78:	68f8      	ldr	r0, [r7, #12]
 8012e7a:	f7ff fd95 	bl	80129a8 <_getDebugString>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d008      	beq.n	8012e96 <_evtParsing+0x38>
        	p_owner->cmd_done = TRUE;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	2201      	movs	r2, #1
 8012e88:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        	pifTask_SetTrigger(p_owner->p_task);
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e90:	4618      	mov	r0, r3
 8012e92:	f001 fb21 	bl	80144d8 <pifTask_SetTrigger>
        }
    }
}
 8012e96:	bf00      	nop
 8012e98:	3710      	adds	r7, #16
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}
	...

08012ea0 <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b08e      	sub	sp, #56	; 0x38
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
    int status = PIF_LOG_CMD_NO_ERROR;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	633b      	str	r3, [r7, #48]	; 0x30
    char msg[40];

    (void)p_task;

	status = _processDebugCmd(&s_log);
 8012eac:	4850      	ldr	r0, [pc, #320]	; (8012ff0 <_doTask+0x150>)
 8012eae:	f7ff ff77 	bl	8012da0 <_processDebugCmd>
 8012eb2:	6338      	str	r0, [r7, #48]	; 0x30

	while (s_log.char_idx) {
 8012eb4:	e00f      	b.n	8012ed6 <_doTask+0x36>
		s_log.p_rx_buffer[s_log.char_idx] = 0;
 8012eb6:	4b4e      	ldr	r3, [pc, #312]	; (8012ff0 <_doTask+0x150>)
 8012eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012eba:	4a4d      	ldr	r2, [pc, #308]	; (8012ff0 <_doTask+0x150>)
 8012ebc:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012ec0:	4413      	add	r3, r2
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	701a      	strb	r2, [r3, #0]
		s_log.char_idx--;
 8012ec6:	4b4a      	ldr	r3, [pc, #296]	; (8012ff0 <_doTask+0x150>)
 8012ec8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ecc:	3b01      	subs	r3, #1
 8012ece:	b2da      	uxtb	r2, r3
 8012ed0:	4b47      	ldr	r3, [pc, #284]	; (8012ff0 <_doTask+0x150>)
 8012ed2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	while (s_log.char_idx) {
 8012ed6:	4b46      	ldr	r3, [pc, #280]	; (8012ff0 <_doTask+0x150>)
 8012ed8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d1ea      	bne.n	8012eb6 <_doTask+0x16>
	}

	for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8012ee4:	e009      	b.n	8012efa <_doTask+0x5a>
		s_log.p_argv[i] = 0;
 8012ee6:	4a42      	ldr	r2, [pc, #264]	; (8012ff0 <_doTask+0x150>)
 8012ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eea:	330c      	adds	r3, #12
 8012eec:	009b      	lsls	r3, r3, #2
 8012eee:	4413      	add	r3, r2
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 8012ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8012efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012efc:	2b07      	cmp	r3, #7
 8012efe:	ddf2      	ble.n	8012ee6 <_doTask+0x46>
	}

	switch (status) {
 8012f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f02:	3304      	adds	r3, #4
 8012f04:	2b03      	cmp	r3, #3
 8012f06:	d83f      	bhi.n	8012f88 <_doTask+0xe8>
 8012f08:	a201      	add	r2, pc, #4	; (adr r2, 8012f10 <_doTask+0x70>)
 8012f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f0e:	bf00      	nop
 8012f10:	08012f6f 	.word	0x08012f6f
 8012f14:	08012f55 	.word	0x08012f55
 8012f18:	08012f3b 	.word	0x08012f3b
 8012f1c:	08012f21 	.word	0x08012f21
	case PIF_LOG_CMD_BAD_CMD:
		// Handle the case of bad command.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Not defined command!\n");
 8012f20:	4b33      	ldr	r3, [pc, #204]	; (8012ff0 <_doTask+0x150>)
 8012f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f24:	4933      	ldr	r1, [pc, #204]	; (8012ff4 <_doTask+0x154>)
 8012f26:	4618      	mov	r0, r3
 8012f28:	f000 fdd0 	bl	8013acc <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 8012f2c:	4b30      	ldr	r3, [pc, #192]	; (8012ff0 <_doTask+0x150>)
 8012f2e:	6a1b      	ldr	r3, [r3, #32]
 8012f30:	69db      	ldr	r3, [r3, #28]
 8012f32:	4618      	mov	r0, r3
 8012f34:	f001 fad0 	bl	80144d8 <pifTask_SetTrigger>
		break;
 8012f38:	e043      	b.n	8012fc2 <_doTask+0x122>

	case PIF_LOG_CMD_TOO_MANY_ARGS:
		// Handle the case of too many arguments.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Too many arguments!\n");
 8012f3a:	4b2d      	ldr	r3, [pc, #180]	; (8012ff0 <_doTask+0x150>)
 8012f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f3e:	492e      	ldr	r1, [pc, #184]	; (8012ff8 <_doTask+0x158>)
 8012f40:	4618      	mov	r0, r3
 8012f42:	f000 fdc3 	bl	8013acc <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 8012f46:	4b2a      	ldr	r3, [pc, #168]	; (8012ff0 <_doTask+0x150>)
 8012f48:	6a1b      	ldr	r3, [r3, #32]
 8012f4a:	69db      	ldr	r3, [r3, #28]
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f001 fac3 	bl	80144d8 <pifTask_SetTrigger>
		break;
 8012f52:	e036      	b.n	8012fc2 <_doTask+0x122>

	case PIF_LOG_CMD_TOO_FEW_ARGS:
		// Handle the case of too few arguments.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Too few arguments!\n");
 8012f54:	4b26      	ldr	r3, [pc, #152]	; (8012ff0 <_doTask+0x150>)
 8012f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f58:	4928      	ldr	r1, [pc, #160]	; (8012ffc <_doTask+0x15c>)
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f000 fdb6 	bl	8013acc <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 8012f60:	4b23      	ldr	r3, [pc, #140]	; (8012ff0 <_doTask+0x150>)
 8012f62:	6a1b      	ldr	r3, [r3, #32]
 8012f64:	69db      	ldr	r3, [r3, #28]
 8012f66:	4618      	mov	r0, r3
 8012f68:	f001 fab6 	bl	80144d8 <pifTask_SetTrigger>
		break;
 8012f6c:	e029      	b.n	8012fc2 <_doTask+0x122>

	case PIF_LOG_CMD_INVALID_ARG:
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Invalid arguments!\n");
 8012f6e:	4b20      	ldr	r3, [pc, #128]	; (8012ff0 <_doTask+0x150>)
 8012f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f72:	4923      	ldr	r1, [pc, #140]	; (8013000 <_doTask+0x160>)
 8012f74:	4618      	mov	r0, r3
 8012f76:	f000 fda9 	bl	8013acc <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 8012f7a:	4b1d      	ldr	r3, [pc, #116]	; (8012ff0 <_doTask+0x150>)
 8012f7c:	6a1b      	ldr	r3, [r3, #32]
 8012f7e:	69db      	ldr	r3, [r3, #28]
 8012f80:	4618      	mov	r0, r3
 8012f82:	f001 faa9 	bl	80144d8 <pifTask_SetTrigger>
		break;
 8012f86:	e01c      	b.n	8012fc2 <_doTask+0x122>

	default:
		// Otherwise the command was executed.  Print the error
		// code if one was returned.
		if (status < PIF_LOG_CMD_NO_ERROR && status > PIF_LOG_CMD_USER_ERROR) {
 8012f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	da18      	bge.n	8012fc0 <_doTask+0x120>
 8012f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f90:	f113 0f09 	cmn.w	r3, #9
 8012f94:	db14      	blt.n	8012fc0 <_doTask+0x120>
			pif_Printf(msg, "Command returned error code: %d\n", status);
 8012f96:	f107 0308 	add.w	r3, r7, #8
 8012f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f9c:	4919      	ldr	r1, [pc, #100]	; (8013004 <_doTask+0x164>)
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7fe fcd6 	bl	8011950 <pif_Printf>
			pifRingBuffer_PutString(s_log.p_tx_buffer, msg);
 8012fa4:	4b12      	ldr	r3, [pc, #72]	; (8012ff0 <_doTask+0x150>)
 8012fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fa8:	f107 0208 	add.w	r2, r7, #8
 8012fac:	4611      	mov	r1, r2
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f000 fd8c 	bl	8013acc <pifRingBuffer_PutString>
			pifTask_SetTrigger(s_log.p_comm->_p_task);
 8012fb4:	4b0e      	ldr	r3, [pc, #56]	; (8012ff0 <_doTask+0x150>)
 8012fb6:	6a1b      	ldr	r3, [r3, #32]
 8012fb8:	69db      	ldr	r3, [r3, #28]
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f001 fa8c 	bl	80144d8 <pifTask_SetTrigger>
		}
		break;
 8012fc0:	bf00      	nop
	}

	pifRingBuffer_PutString(s_log.p_tx_buffer, (char *)s_log.p_prompt);
 8012fc2:	4b0b      	ldr	r3, [pc, #44]	; (8012ff0 <_doTask+0x150>)
 8012fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fc6:	4a0a      	ldr	r2, [pc, #40]	; (8012ff0 <_doTask+0x150>)
 8012fc8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012fca:	4611      	mov	r1, r2
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f000 fd7d 	bl	8013acc <pifRingBuffer_PutString>
	pifTask_SetTrigger(s_log.p_comm->_p_task);
 8012fd2:	4b07      	ldr	r3, [pc, #28]	; (8012ff0 <_doTask+0x150>)
 8012fd4:	6a1b      	ldr	r3, [r3, #32]
 8012fd6:	69db      	ldr	r3, [r3, #28]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f001 fa7d 	bl	80144d8 <pifTask_SetTrigger>

	s_log.cmd_done = FALSE;
 8012fde:	4b04      	ldr	r3, [pc, #16]	; (8012ff0 <_doTask+0x150>)
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	return 0;
 8012fe6:	2300      	movs	r3, #0
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	3738      	adds	r7, #56	; 0x38
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}
 8012ff0:	20001c44 	.word	0x20001c44
 8012ff4:	08027470 	.word	0x08027470
 8012ff8:	08027488 	.word	0x08027488
 8012ffc:	080274a0 	.word	0x080274a0
 8013000:	080274b4 	.word	0x080274b4
 8013004:	080274c8 	.word	0x080274c8

08013008 <_evtSending>:
}

#endif

static BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 8013008:	b5b0      	push	{r4, r5, r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (!pifRingBuffer_IsEmpty(p_owner->p_tx_buffer)) {
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801301a:	4618      	mov	r0, r3
 801301c:	f000 fc03 	bl	8013826 <pifRingBuffer_IsEmpty>
 8013020:	4603      	mov	r3, r0
 8013022:	2b00      	cmp	r3, #0
 8013024:	d11f      	bne.n	8013066 <_evtSending+0x5e>
		length = (*act_send_data)(p_owner->p_comm, pifRingBuffer_GetTailPointer(p_owner->p_tx_buffer, 0),
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	6a1c      	ldr	r4, [r3, #32]
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801302e:	2100      	movs	r1, #0
 8013030:	4618      	mov	r0, r3
 8013032:	f000 fbcc 	bl	80137ce <pifRingBuffer_GetTailPointer>
 8013036:	4605      	mov	r5, r0
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801303c:	2100      	movs	r1, #0
 801303e:	4618      	mov	r0, r3
 8013040:	f000 fc26 	bl	8013890 <pifRingBuffer_GetLinerSize>
 8013044:	4603      	mov	r3, r0
 8013046:	461a      	mov	r2, r3
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	4629      	mov	r1, r5
 801304c:	4620      	mov	r0, r4
 801304e:	4798      	blx	r3
 8013050:	4603      	mov	r3, r0
 8013052:	817b      	strh	r3, [r7, #10]
    			pifRingBuffer_GetLinerSize(p_owner->p_tx_buffer, 0));
		pifRingBuffer_Remove(p_owner->p_tx_buffer, length);
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013058:	897a      	ldrh	r2, [r7, #10]
 801305a:	4611      	mov	r1, r2
 801305c:	4618      	mov	r0, r3
 801305e:	f000 fdf4 	bl	8013c4a <pifRingBuffer_Remove>
		return TRUE;
 8013062:	2301      	movs	r3, #1
 8013064:	e000      	b.n	8013068 <_evtSending+0x60>
	}
	return FALSE;
 8013066:	2300      	movs	r3, #0
}
 8013068:	4618      	mov	r0, r3
 801306a:	3710      	adds	r7, #16
 801306c:	46bd      	mov	sp, r7
 801306e:	bdb0      	pop	{r4, r5, r7, pc}

08013070 <_printLog>:

static void _printLog(char* p_string, BOOL vcd)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b082      	sub	sp, #8
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
 8013078:	460b      	mov	r3, r1
 801307a:	70fb      	strb	r3, [r7, #3]
	if (!vcd && pifRingBuffer_IsBuffer(&s_log.buffer)) {
 801307c:	78fb      	ldrb	r3, [r7, #3]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d109      	bne.n	8013096 <_printLog+0x26>
 8013082:	4813      	ldr	r0, [pc, #76]	; (80130d0 <_printLog+0x60>)
 8013084:	f000 fbbe 	bl	8013804 <pifRingBuffer_IsBuffer>
 8013088:	4603      	mov	r3, r0
 801308a:	2b00      	cmp	r3, #0
 801308c:	d003      	beq.n	8013096 <_printLog+0x26>
		pifRingBuffer_PutString(&s_log.buffer, p_string);
 801308e:	6879      	ldr	r1, [r7, #4]
 8013090:	480f      	ldr	r0, [pc, #60]	; (80130d0 <_printLog+0x60>)
 8013092:	f000 fd1b 	bl	8013acc <pifRingBuffer_PutString>
	}

	if (s_log.enable || vcd) {
 8013096:	4b0f      	ldr	r3, [pc, #60]	; (80130d4 <_printLog+0x64>)
 8013098:	781b      	ldrb	r3, [r3, #0]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d108      	bne.n	80130b0 <_printLog+0x40>
 801309e:	78fb      	ldrb	r3, [r7, #3]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d010      	beq.n	80130c6 <_printLog+0x56>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 80130a4:	e004      	b.n	80130b0 <_printLog+0x40>
        	if (!pifTaskManager_Yield()) break;
 80130a6:	f001 fc5f 	bl	8014968 <pifTaskManager_Yield>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d009      	beq.n	80130c4 <_printLog+0x54>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 80130b0:	4b08      	ldr	r3, [pc, #32]	; (80130d4 <_printLog+0x64>)
 80130b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b4:	6879      	ldr	r1, [r7, #4]
 80130b6:	4618      	mov	r0, r3
 80130b8:	f000 fd08 	bl	8013acc <pifRingBuffer_PutString>
 80130bc:	4603      	mov	r3, r0
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d0f1      	beq.n	80130a6 <_printLog+0x36>
        }
	}
}
 80130c2:	e000      	b.n	80130c6 <_printLog+0x56>
        	if (!pifTaskManager_Yield()) break;
 80130c4:	bf00      	nop
}
 80130c6:	bf00      	nop
 80130c8:	3708      	adds	r7, #8
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	bf00      	nop
 80130d0:	20001c48 	.word	0x20001c48
 80130d4:	20001c44 	.word	0x20001c44

080130d8 <_printTime>:

static void _printTime()
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b082      	sub	sp, #8
 80130dc:	af00      	add	r7, sp, #0
	int offset = 0;
 80130de:	2300      	movs	r3, #0
 80130e0:	607b      	str	r3, [r7, #4]
    static char tmp_buf[20];

    tmp_buf[offset++] = '\n';
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	1c5a      	adds	r2, r3, #1
 80130e6:	607a      	str	r2, [r7, #4]
 80130e8:	4a35      	ldr	r2, [pc, #212]	; (80131c0 <_printTime+0xe8>)
 80130ea:	210a      	movs	r1, #10
 80130ec:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	4a33      	ldr	r2, [pc, #204]	; (80131c0 <_printTime+0xe8>)
 80130f2:	4413      	add	r3, r2
 80130f4:	4a33      	ldr	r2, [pc, #204]	; (80131c4 <_printTime+0xec>)
 80130f6:	7952      	ldrb	r2, [r2, #5]
 80130f8:	b2d2      	uxtb	r2, r2
 80130fa:	4611      	mov	r1, r2
 80130fc:	2202      	movs	r2, #2
 80130fe:	4618      	mov	r0, r3
 8013100:	f7fe f840 	bl	8011184 <pif_DecToString>
 8013104:	4602      	mov	r2, r0
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	4413      	add	r3, r2
 801310a:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = '.';
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	1c5a      	adds	r2, r3, #1
 8013110:	607a      	str	r2, [r7, #4]
 8013112:	4a2b      	ldr	r2, [pc, #172]	; (80131c0 <_printTime+0xe8>)
 8013114:	212e      	movs	r1, #46	; 0x2e
 8013116:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	4a29      	ldr	r2, [pc, #164]	; (80131c0 <_printTime+0xe8>)
 801311c:	4413      	add	r3, r2
 801311e:	4a2a      	ldr	r2, [pc, #168]	; (80131c8 <_printTime+0xf0>)
 8013120:	8812      	ldrh	r2, [r2, #0]
 8013122:	b292      	uxth	r2, r2
 8013124:	4611      	mov	r1, r2
 8013126:	2203      	movs	r2, #3
 8013128:	4618      	mov	r0, r3
 801312a:	f7fe f82b 	bl	8011184 <pif_DecToString>
 801312e:	4602      	mov	r2, r0
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	4413      	add	r3, r2
 8013134:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	1c5a      	adds	r2, r3, #1
 801313a:	607a      	str	r2, [r7, #4]
 801313c:	4a20      	ldr	r2, [pc, #128]	; (80131c0 <_printTime+0xe8>)
 801313e:	2120      	movs	r1, #32
 8013140:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = 'T';
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	1c5a      	adds	r2, r3, #1
 8013146:	607a      	str	r2, [r7, #4]
 8013148:	4a1d      	ldr	r2, [pc, #116]	; (80131c0 <_printTime+0xe8>)
 801314a:	2154      	movs	r1, #84	; 0x54
 801314c:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = ' ';
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	1c5a      	adds	r2, r3, #1
 8013152:	607a      	str	r2, [r7, #4]
 8013154:	4a1a      	ldr	r2, [pc, #104]	; (80131c0 <_printTime+0xe8>)
 8013156:	2120      	movs	r1, #32
 8013158:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.hour, 2);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	4a18      	ldr	r2, [pc, #96]	; (80131c0 <_printTime+0xe8>)
 801315e:	4413      	add	r3, r2
 8013160:	4a18      	ldr	r2, [pc, #96]	; (80131c4 <_printTime+0xec>)
 8013162:	78d2      	ldrb	r2, [r2, #3]
 8013164:	b2d2      	uxtb	r2, r2
 8013166:	4611      	mov	r1, r2
 8013168:	2202      	movs	r2, #2
 801316a:	4618      	mov	r0, r3
 801316c:	f7fe f80a 	bl	8011184 <pif_DecToString>
 8013170:	4602      	mov	r2, r0
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	4413      	add	r3, r2
 8013176:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ':';
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	1c5a      	adds	r2, r3, #1
 801317c:	607a      	str	r2, [r7, #4]
 801317e:	4a10      	ldr	r2, [pc, #64]	; (80131c0 <_printTime+0xe8>)
 8013180:	213a      	movs	r1, #58	; 0x3a
 8013182:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.minute, 2);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	4a0e      	ldr	r2, [pc, #56]	; (80131c0 <_printTime+0xe8>)
 8013188:	4413      	add	r3, r2
 801318a:	4a0e      	ldr	r2, [pc, #56]	; (80131c4 <_printTime+0xec>)
 801318c:	7912      	ldrb	r2, [r2, #4]
 801318e:	b2d2      	uxtb	r2, r2
 8013190:	4611      	mov	r1, r2
 8013192:	2202      	movs	r2, #2
 8013194:	4618      	mov	r0, r3
 8013196:	f7fd fff5 	bl	8011184 <pif_DecToString>
 801319a:	4602      	mov	r2, r0
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	4413      	add	r3, r2
 80131a0:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	1c5a      	adds	r2, r3, #1
 80131a6:	607a      	str	r2, [r7, #4]
 80131a8:	4a05      	ldr	r2, [pc, #20]	; (80131c0 <_printTime+0xe8>)
 80131aa:	2120      	movs	r1, #32
 80131ac:	54d1      	strb	r1, [r2, r3]

	_printLog(tmp_buf, FALSE);
 80131ae:	2100      	movs	r1, #0
 80131b0:	4803      	ldr	r0, [pc, #12]	; (80131c0 <_printTime+0xe8>)
 80131b2:	f7ff ff5d 	bl	8013070 <_printLog>
}
 80131b6:	bf00      	nop
 80131b8:	3708      	adds	r7, #8
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}
 80131be:	bf00      	nop
 80131c0:	20001cac 	.word	0x20001cac
 80131c4:	20001c1c 	.word	0x20001c1c
 80131c8:	20001c14 	.word	0x20001c14

080131cc <pifLog_Init>:

BOOL pifLog_Init()
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af02      	add	r7, sp, #8
	memset(&s_log, 0, sizeof(PifLog));
 80131d2:	2264      	movs	r2, #100	; 0x64
 80131d4:	2100      	movs	r1, #0
 80131d6:	480f      	ldr	r0, [pc, #60]	; (8013214 <pifLog_Init+0x48>)
 80131d8:	f00f fc5e 	bl	8022a98 <memset>

	s_log.enable = TRUE;
 80131dc:	4b0d      	ldr	r3, [pc, #52]	; (8013214 <pifLog_Init+0x48>)
 80131de:	2201      	movs	r2, #1
 80131e0:	701a      	strb	r2, [r3, #0]
#ifdef __PIF_LOG_COMMAND__
	s_log.p_task = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, _doTask, &s_log, FALSE);
 80131e2:	2300      	movs	r3, #0
 80131e4:	9300      	str	r3, [sp, #0]
 80131e6:	4b0b      	ldr	r3, [pc, #44]	; (8013214 <pifLog_Init+0x48>)
 80131e8:	4a0b      	ldr	r2, [pc, #44]	; (8013218 <pifLog_Init+0x4c>)
 80131ea:	2100      	movs	r1, #0
 80131ec:	2007      	movs	r0, #7
 80131ee:	f001 f9f9 	bl	80145e4 <pifTaskManager_Add>
 80131f2:	4603      	mov	r3, r0
 80131f4:	4a07      	ldr	r2, [pc, #28]	; (8013214 <pifLog_Init+0x48>)
 80131f6:	6293      	str	r3, [r2, #40]	; 0x28
	if (!s_log.p_task) return FALSE;
 80131f8:	4b06      	ldr	r3, [pc, #24]	; (8013214 <pifLog_Init+0x48>)
 80131fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d101      	bne.n	8013204 <pifLog_Init+0x38>
 8013200:	2300      	movs	r3, #0
 8013202:	e004      	b.n	801320e <pifLog_Init+0x42>
	s_log.p_task->name = "Log";
 8013204:	4b03      	ldr	r3, [pc, #12]	; (8013214 <pifLog_Init+0x48>)
 8013206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013208:	4a04      	ldr	r2, [pc, #16]	; (801321c <pifLog_Init+0x50>)
 801320a:	601a      	str	r2, [r3, #0]
#endif
   	return TRUE;
 801320c:	2301      	movs	r3, #1
}
 801320e:	4618      	mov	r0, r3
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}
 8013214:	20001c44 	.word	0x20001c44
 8013218:	08012ea1 	.word	0x08012ea1
 801321c:	080274ec 	.word	0x080274ec

08013220 <pifLog_UseCommand>:
}

#ifdef __PIF_LOG_COMMAND__

BOOL pifLog_UseCommand(const PifLogCmdEntry* p_cmd_table, const char* p_prompt)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b082      	sub	sp, #8
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
 8013228:	6039      	str	r1, [r7, #0]
    if (!p_cmd_table || !p_prompt) {
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d002      	beq.n	8013236 <pifLog_UseCommand+0x16>
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d104      	bne.n	8013240 <pifLog_UseCommand+0x20>
    	pif_error = E_INVALID_PARAM;
 8013236:	4b12      	ldr	r3, [pc, #72]	; (8013280 <pifLog_UseCommand+0x60>)
 8013238:	2201      	movs	r2, #1
 801323a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801323c:	2300      	movs	r3, #0
 801323e:	e01b      	b.n	8013278 <pifLog_UseCommand+0x58>
    }

    s_log.p_rx_buffer = calloc(sizeof(char), PIF_LOG_RX_BUFFER_SIZE);
 8013240:	2120      	movs	r1, #32
 8013242:	2001      	movs	r0, #1
 8013244:	f00f fbd8 	bl	80229f8 <calloc>
 8013248:	4603      	mov	r3, r0
 801324a:	461a      	mov	r2, r3
 801324c:	4b0d      	ldr	r3, [pc, #52]	; (8013284 <pifLog_UseCommand+0x64>)
 801324e:	631a      	str	r2, [r3, #48]	; 0x30
    if (!s_log.p_rx_buffer) {
 8013250:	4b0c      	ldr	r3, [pc, #48]	; (8013284 <pifLog_UseCommand+0x64>)
 8013252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013254:	2b00      	cmp	r3, #0
 8013256:	d104      	bne.n	8013262 <pifLog_UseCommand+0x42>
        pif_error = E_OUT_OF_HEAP;
 8013258:	4b09      	ldr	r3, [pc, #36]	; (8013280 <pifLog_UseCommand+0x60>)
 801325a:	2203      	movs	r2, #3
 801325c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801325e:	2300      	movs	r3, #0
 8013260:	e00a      	b.n	8013278 <pifLog_UseCommand+0x58>
    }
    s_log.rx_buffer_size = PIF_LOG_RX_BUFFER_SIZE;
 8013262:	4b08      	ldr	r3, [pc, #32]	; (8013284 <pifLog_UseCommand+0x64>)
 8013264:	2220      	movs	r2, #32
 8013266:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    s_log.p_cmd_table = p_cmd_table;
 801326a:	4a06      	ldr	r2, [pc, #24]	; (8013284 <pifLog_UseCommand+0x64>)
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	6593      	str	r3, [r2, #88]	; 0x58
    s_log.p_prompt = p_prompt;
 8013270:	4a04      	ldr	r2, [pc, #16]	; (8013284 <pifLog_UseCommand+0x64>)
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	65d3      	str	r3, [r2, #92]	; 0x5c
    return TRUE;
 8013276:	2301      	movs	r3, #1
}
 8013278:	4618      	mov	r0, r3
 801327a:	3708      	adds	r7, #8
 801327c:	46bd      	mov	sp, r7
 801327e:	bd80      	pop	{r7, pc}
 8013280:	20001c0d 	.word	0x20001c0d
 8013284:	20001c44 	.word	0x20001c44

08013288 <pifLog_Print>:
{
	return pifRingBuffer_IsEmpty(&s_log.buffer);
}

void pifLog_Print(PifLogType type, const char* p_string)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b098      	sub	sp, #96	; 0x60
 801328c:	af00      	add	r7, sp, #0
 801328e:	4603      	mov	r3, r0
 8013290:	6039      	str	r1, [r7, #0]
 8013292:	71fb      	strb	r3, [r7, #7]
	int offset = 0;
 8013294:	2300      	movs	r3, #0
 8013296:	65fb      	str	r3, [r7, #92]	; 0x5c
    char tmp_buf[PIF_LOG_LINE_SIZE];

    if (type >= LT_INFO) {
 8013298:	79fb      	ldrb	r3, [r7, #7]
 801329a:	2b01      	cmp	r3, #1
 801329c:	d96b      	bls.n	8013376 <pifLog_Print+0xee>
        if (s_minute != pif_datetime.minute) {
 801329e:	4b3d      	ldr	r3, [pc, #244]	; (8013394 <pifLog_Print+0x10c>)
 80132a0:	791b      	ldrb	r3, [r3, #4]
 80132a2:	b2da      	uxtb	r2, r3
 80132a4:	4b3c      	ldr	r3, [pc, #240]	; (8013398 <pifLog_Print+0x110>)
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	429a      	cmp	r2, r3
 80132aa:	d006      	beq.n	80132ba <pifLog_Print+0x32>
        	_printTime();
 80132ac:	f7ff ff14 	bl	80130d8 <_printTime>
        	s_minute = pif_datetime.minute;
 80132b0:	4b38      	ldr	r3, [pc, #224]	; (8013394 <pifLog_Print+0x10c>)
 80132b2:	791b      	ldrb	r3, [r3, #4]
 80132b4:	b2da      	uxtb	r2, r3
 80132b6:	4b38      	ldr	r3, [pc, #224]	; (8013398 <pifLog_Print+0x110>)
 80132b8:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 80132ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80132bc:	1c5a      	adds	r2, r3, #1
 80132be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80132c0:	3360      	adds	r3, #96	; 0x60
 80132c2:	443b      	add	r3, r7
 80132c4:	220a      	movs	r2, #10
 80132c6:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80132ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80132cc:	f107 020c 	add.w	r2, r7, #12
 80132d0:	4413      	add	r3, r2
 80132d2:	4a30      	ldr	r2, [pc, #192]	; (8013394 <pifLog_Print+0x10c>)
 80132d4:	7952      	ldrb	r2, [r2, #5]
 80132d6:	b2d2      	uxtb	r2, r2
 80132d8:	4611      	mov	r1, r2
 80132da:	2202      	movs	r2, #2
 80132dc:	4618      	mov	r0, r3
 80132de:	f7fd ff51 	bl	8011184 <pif_DecToString>
 80132e2:	4602      	mov	r2, r0
 80132e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80132e6:	4413      	add	r3, r2
 80132e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = '.';
 80132ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80132ec:	1c5a      	adds	r2, r3, #1
 80132ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80132f0:	3360      	adds	r3, #96	; 0x60
 80132f2:	443b      	add	r3, r7
 80132f4:	222e      	movs	r2, #46	; 0x2e
 80132f6:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 80132fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80132fc:	f107 020c 	add.w	r2, r7, #12
 8013300:	4413      	add	r3, r2
 8013302:	4a26      	ldr	r2, [pc, #152]	; (801339c <pifLog_Print+0x114>)
 8013304:	8812      	ldrh	r2, [r2, #0]
 8013306:	b292      	uxth	r2, r2
 8013308:	4611      	mov	r1, r2
 801330a:	2203      	movs	r2, #3
 801330c:	4618      	mov	r0, r3
 801330e:	f7fd ff39 	bl	8011184 <pif_DecToString>
 8013312:	4602      	mov	r2, r0
 8013314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013316:	4413      	add	r3, r2
 8013318:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = ' ';
 801331a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801331c:	1c5a      	adds	r2, r3, #1
 801331e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013320:	3360      	adds	r3, #96	; 0x60
 8013322:	443b      	add	r3, r7
 8013324:	2220      	movs	r2, #32
 8013326:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 801332a:	79fb      	ldrb	r3, [r7, #7]
 801332c:	1e9a      	subs	r2, r3, #2
 801332e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013330:	1c59      	adds	r1, r3, #1
 8013332:	65f9      	str	r1, [r7, #92]	; 0x5c
 8013334:	491a      	ldr	r1, [pc, #104]	; (80133a0 <pifLog_Print+0x118>)
 8013336:	5c8a      	ldrb	r2, [r1, r2]
 8013338:	3360      	adds	r3, #96	; 0x60
 801333a:	443b      	add	r3, r7
 801333c:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = ' ';
 8013340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013342:	1c5a      	adds	r2, r3, #1
 8013344:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013346:	3360      	adds	r3, #96	; 0x60
 8013348:	443b      	add	r3, r7
 801334a:	2220      	movs	r2, #32
 801334c:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset] = 0;
 8013350:	f107 020c 	add.w	r2, r7, #12
 8013354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013356:	4413      	add	r3, r2
 8013358:	2200      	movs	r2, #0
 801335a:	701a      	strb	r2, [r3, #0]
    	_printLog(tmp_buf, type == LT_VCD);
 801335c:	79fb      	ldrb	r3, [r7, #7]
 801335e:	2b01      	cmp	r3, #1
 8013360:	bf0c      	ite	eq
 8013362:	2301      	moveq	r3, #1
 8013364:	2300      	movne	r3, #0
 8013366:	b2db      	uxtb	r3, r3
 8013368:	461a      	mov	r2, r3
 801336a:	f107 030c 	add.w	r3, r7, #12
 801336e:	4611      	mov	r1, r2
 8013370:	4618      	mov	r0, r3
 8013372:	f7ff fe7d 	bl	8013070 <_printLog>
    }

	_printLog((char*)p_string, type == LT_VCD);
 8013376:	79fb      	ldrb	r3, [r7, #7]
 8013378:	2b01      	cmp	r3, #1
 801337a:	bf0c      	ite	eq
 801337c:	2301      	moveq	r3, #1
 801337e:	2300      	movne	r3, #0
 8013380:	b2db      	uxtb	r3, r3
 8013382:	4619      	mov	r1, r3
 8013384:	6838      	ldr	r0, [r7, #0]
 8013386:	f7ff fe73 	bl	8013070 <_printLog>
}
 801338a:	bf00      	nop
 801338c:	3760      	adds	r7, #96	; 0x60
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
 8013392:	bf00      	nop
 8013394:	20001c1c 	.word	0x20001c1c
 8013398:	20000128 	.word	0x20000128
 801339c:	20001c14 	.word	0x20001c14
 80133a0:	080290b8 	.word	0x080290b8

080133a4 <pifLog_Printf>:

void pifLog_Printf(PifLogType type, const char* p_format, ...)
{
 80133a4:	b40e      	push	{r1, r2, r3}
 80133a6:	b580      	push	{r7, lr}
 80133a8:	b09b      	sub	sp, #108	; 0x6c
 80133aa:	af00      	add	r7, sp, #0
 80133ac:	4603      	mov	r3, r0
 80133ae:	71fb      	strb	r3, [r7, #7]
	va_list data;
	int offset = 0;
 80133b0:	2300      	movs	r3, #0
 80133b2:	667b      	str	r3, [r7, #100]	; 0x64
    char tmp_buf[PIF_LOG_LINE_SIZE + 1];

    if (type >= LT_INFO) {
 80133b4:	79fb      	ldrb	r3, [r7, #7]
 80133b6:	2b01      	cmp	r3, #1
 80133b8:	d958      	bls.n	801346c <pifLog_Printf+0xc8>
        if (s_minute != pif_datetime.minute) {
 80133ba:	4b3d      	ldr	r3, [pc, #244]	; (80134b0 <pifLog_Printf+0x10c>)
 80133bc:	791b      	ldrb	r3, [r3, #4]
 80133be:	b2da      	uxtb	r2, r3
 80133c0:	4b3c      	ldr	r3, [pc, #240]	; (80134b4 <pifLog_Printf+0x110>)
 80133c2:	781b      	ldrb	r3, [r3, #0]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d006      	beq.n	80133d6 <pifLog_Printf+0x32>
        	_printTime();
 80133c8:	f7ff fe86 	bl	80130d8 <_printTime>
        	s_minute = pif_datetime.minute;
 80133cc:	4b38      	ldr	r3, [pc, #224]	; (80134b0 <pifLog_Printf+0x10c>)
 80133ce:	791b      	ldrb	r3, [r3, #4]
 80133d0:	b2da      	uxtb	r2, r3
 80133d2:	4b38      	ldr	r3, [pc, #224]	; (80134b4 <pifLog_Printf+0x110>)
 80133d4:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 80133d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133d8:	1c5a      	adds	r2, r3, #1
 80133da:	667a      	str	r2, [r7, #100]	; 0x64
 80133dc:	3368      	adds	r3, #104	; 0x68
 80133de:	443b      	add	r3, r7
 80133e0:	220a      	movs	r2, #10
 80133e2:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80133e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133e8:	f107 020c 	add.w	r2, r7, #12
 80133ec:	4413      	add	r3, r2
 80133ee:	4a30      	ldr	r2, [pc, #192]	; (80134b0 <pifLog_Printf+0x10c>)
 80133f0:	7952      	ldrb	r2, [r2, #5]
 80133f2:	b2d2      	uxtb	r2, r2
 80133f4:	4611      	mov	r1, r2
 80133f6:	2202      	movs	r2, #2
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7fd fec3 	bl	8011184 <pif_DecToString>
 80133fe:	4602      	mov	r2, r0
 8013400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013402:	4413      	add	r3, r2
 8013404:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = '.';
 8013406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013408:	1c5a      	adds	r2, r3, #1
 801340a:	667a      	str	r2, [r7, #100]	; 0x64
 801340c:	3368      	adds	r3, #104	; 0x68
 801340e:	443b      	add	r3, r7
 8013410:	222e      	movs	r2, #46	; 0x2e
 8013412:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 8013416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013418:	f107 020c 	add.w	r2, r7, #12
 801341c:	4413      	add	r3, r2
 801341e:	4a26      	ldr	r2, [pc, #152]	; (80134b8 <pifLog_Printf+0x114>)
 8013420:	8812      	ldrh	r2, [r2, #0]
 8013422:	b292      	uxth	r2, r2
 8013424:	4611      	mov	r1, r2
 8013426:	2203      	movs	r2, #3
 8013428:	4618      	mov	r0, r3
 801342a:	f7fd feab 	bl	8011184 <pif_DecToString>
 801342e:	4602      	mov	r2, r0
 8013430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013432:	4413      	add	r3, r2
 8013434:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = ' ';
 8013436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013438:	1c5a      	adds	r2, r3, #1
 801343a:	667a      	str	r2, [r7, #100]	; 0x64
 801343c:	3368      	adds	r3, #104	; 0x68
 801343e:	443b      	add	r3, r7
 8013440:	2220      	movs	r2, #32
 8013442:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 8013446:	79fb      	ldrb	r3, [r7, #7]
 8013448:	1e9a      	subs	r2, r3, #2
 801344a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801344c:	1c59      	adds	r1, r3, #1
 801344e:	6679      	str	r1, [r7, #100]	; 0x64
 8013450:	491a      	ldr	r1, [pc, #104]	; (80134bc <pifLog_Printf+0x118>)
 8013452:	5c8a      	ldrb	r2, [r1, r2]
 8013454:	3368      	adds	r3, #104	; 0x68
 8013456:	443b      	add	r3, r7
 8013458:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = ' ';
 801345c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801345e:	1c5a      	adds	r2, r3, #1
 8013460:	667a      	str	r2, [r7, #100]	; 0x64
 8013462:	3368      	adds	r3, #104	; 0x68
 8013464:	443b      	add	r3, r7
 8013466:	2220      	movs	r2, #32
 8013468:	f803 2c5c 	strb.w	r2, [r3, #-92]
    }

	va_start(data, p_format);
 801346c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013470:	663b      	str	r3, [r7, #96]	; 0x60
	pif_PrintFormat(tmp_buf + offset, &data, p_format);
 8013472:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013474:	f107 020c 	add.w	r2, r7, #12
 8013478:	4413      	add	r3, r2
 801347a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801347e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013480:	4618      	mov	r0, r3
 8013482:	f7fe f80b 	bl	801149c <pif_PrintFormat>
	va_end(data);

	_printLog(tmp_buf, type == LT_VCD);
 8013486:	79fb      	ldrb	r3, [r7, #7]
 8013488:	2b01      	cmp	r3, #1
 801348a:	bf0c      	ite	eq
 801348c:	2301      	moveq	r3, #1
 801348e:	2300      	movne	r3, #0
 8013490:	b2db      	uxtb	r3, r3
 8013492:	461a      	mov	r2, r3
 8013494:	f107 030c 	add.w	r3, r7, #12
 8013498:	4611      	mov	r1, r2
 801349a:	4618      	mov	r0, r3
 801349c:	f7ff fde8 	bl	8013070 <_printLog>
}
 80134a0:	bf00      	nop
 80134a2:	376c      	adds	r7, #108	; 0x6c
 80134a4:	46bd      	mov	sp, r7
 80134a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80134aa:	b003      	add	sp, #12
 80134ac:	4770      	bx	lr
 80134ae:	bf00      	nop
 80134b0:	20001c1c 	.word	0x20001c1c
 80134b4:	20000128 	.word	0x20000128
 80134b8:	20001c14 	.word	0x20001c14
 80134bc:	080290b8 	.word	0x080290b8

080134c0 <pifLog_AttachComm>:
{
	return s_log.p_comm->_p_task;
}

BOOL pifLog_AttachComm(PifComm* p_comm)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
    s_log.p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, PIF_LOG_TX_BUFFER_SIZE);
 80134c8:	2150      	movs	r1, #80	; 0x50
 80134ca:	2000      	movs	r0, #0
 80134cc:	f000 f8c8 	bl	8013660 <pifRingBuffer_CreateHeap>
 80134d0:	4603      	mov	r3, r0
 80134d2:	4a0b      	ldr	r2, [pc, #44]	; (8013500 <pifLog_AttachComm+0x40>)
 80134d4:	6253      	str	r3, [r2, #36]	; 0x24
    if (!s_log.p_tx_buffer) return FALSE;
 80134d6:	4b0a      	ldr	r3, [pc, #40]	; (8013500 <pifLog_AttachComm+0x40>)
 80134d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d101      	bne.n	80134e2 <pifLog_AttachComm+0x22>
 80134de:	2300      	movs	r3, #0
 80134e0:	e009      	b.n	80134f6 <pifLog_AttachComm+0x36>

	s_log.p_comm = p_comm;
 80134e2:	4a07      	ldr	r2, [pc, #28]	; (8013500 <pifLog_AttachComm+0x40>)
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6213      	str	r3, [r2, #32]
	pifComm_AttachClient(p_comm, &s_log, _evtParsing, _evtSending);
 80134e8:	4b06      	ldr	r3, [pc, #24]	; (8013504 <pifLog_AttachComm+0x44>)
 80134ea:	4a07      	ldr	r2, [pc, #28]	; (8013508 <pifLog_AttachComm+0x48>)
 80134ec:	4904      	ldr	r1, [pc, #16]	; (8013500 <pifLog_AttachComm+0x40>)
 80134ee:	6878      	ldr	r0, [r7, #4]
 80134f0:	f7fe fbf0 	bl	8011cd4 <pifComm_AttachClient>
    return TRUE;
 80134f4:	2301      	movs	r3, #1
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	3708      	adds	r7, #8
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}
 80134fe:	bf00      	nop
 8013500:	20001c44 	.word	0x20001c44
 8013504:	08013009 	.word	0x08013009
 8013508:	08012e5f 	.word	0x08012e5f

0801350c <pifLog_DetachComm>:

void pifLog_DetachComm()
{
 801350c:	b580      	push	{r7, lr}
 801350e:	af00      	add	r7, sp, #0
	pifComm_DetachClient(s_log.p_comm);
 8013510:	4b06      	ldr	r3, [pc, #24]	; (801352c <pifLog_DetachComm+0x20>)
 8013512:	6a1b      	ldr	r3, [r3, #32]
 8013514:	4618      	mov	r0, r3
 8013516:	f7fe fbf3 	bl	8011d00 <pifComm_DetachClient>
	s_log.p_comm = NULL;
 801351a:	4b04      	ldr	r3, [pc, #16]	; (801352c <pifLog_DetachComm+0x20>)
 801351c:	2200      	movs	r2, #0
 801351e:	621a      	str	r2, [r3, #32]

	pifRingBuffer_Destroy(&s_log.p_tx_buffer);
 8013520:	4803      	ldr	r0, [pc, #12]	; (8013530 <pifLog_DetachComm+0x24>)
 8013522:	f000 f8c9 	bl	80136b8 <pifRingBuffer_Destroy>
}
 8013526:	bf00      	nop
 8013528:	bd80      	pop	{r7, pc}
 801352a:	bf00      	nop
 801352c:	20001c44 	.word	0x20001c44
 8013530:	20001c68 	.word	0x20001c68

08013534 <pifLog_SendAndExit>:

void pifLog_SendAndExit()
{
 8013534:	b580      	push	{r7, lr}
 8013536:	af00      	add	r7, sp, #0
	while (pifRingBuffer_GetFillSize(s_log.p_tx_buffer)) {
 8013538:	e008      	b.n	801354c <pifLog_SendAndExit+0x18>
		s_log.p_comm->_p_task->__evt_loop(s_log.p_comm->_p_task);
 801353a:	4b0a      	ldr	r3, [pc, #40]	; (8013564 <pifLog_SendAndExit+0x30>)
 801353c:	6a1b      	ldr	r3, [r3, #32]
 801353e:	69db      	ldr	r3, [r3, #28]
 8013540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013542:	4a08      	ldr	r2, [pc, #32]	; (8013564 <pifLog_SendAndExit+0x30>)
 8013544:	6a12      	ldr	r2, [r2, #32]
 8013546:	69d2      	ldr	r2, [r2, #28]
 8013548:	4610      	mov	r0, r2
 801354a:	4798      	blx	r3
	while (pifRingBuffer_GetFillSize(s_log.p_tx_buffer)) {
 801354c:	4b05      	ldr	r3, [pc, #20]	; (8013564 <pifLog_SendAndExit+0x30>)
 801354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013550:	4618      	mov	r0, r3
 8013552:	f000 f97b 	bl	801384c <pifRingBuffer_GetFillSize>
 8013556:	4603      	mov	r3, r0
 8013558:	2b00      	cmp	r3, #0
 801355a:	d1ee      	bne.n	801353a <pifLog_SendAndExit+0x6>
	}
}
 801355c:	bf00      	nop
 801355e:	bf00      	nop
 8013560:	bd80      	pop	{r7, pc}
 8013562:	bf00      	nop
 8013564:	20001c44 	.word	0x20001c44

08013568 <_chopOff>:

#include <string.h>


static BOOL _chopOff(PifRingBuffer* p_owner, uint16_t count)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b084      	sub	sp, #16
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	460b      	mov	r3, r1
 8013572:	807b      	strh	r3, [r7, #2]
	uint16_t length;
	uint16_t size, tail;

	switch (p_owner->_bt.chop_off) {
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	791b      	ldrb	r3, [r3, #4]
 8013578:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801357c:	b2db      	uxtb	r3, r3
 801357e:	2b01      	cmp	r3, #1
 8013580:	d002      	beq.n	8013588 <_chopOff+0x20>
 8013582:	2b02      	cmp	r3, #2
 8013584:	d02e      	beq.n	80135e4 <_chopOff+0x7c>
 8013586:	e065      	b.n	8013654 <_chopOff+0xec>
	case RB_CHOP_OFF_CHAR:
		size = 0;
 8013588:	2300      	movs	r3, #0
 801358a:	81fb      	strh	r3, [r7, #14]
		tail = p_owner->__tail;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	8adb      	ldrh	r3, [r3, #22]
 8013590:	81bb      	strh	r3, [r7, #12]
		while (tail != p_owner->__head) {
 8013592:	e021      	b.n	80135d8 <_chopOff+0x70>
			if (p_owner->__p_buffer[tail] == p_owner->__ui.chop_off_char) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	691a      	ldr	r2, [r3, #16]
 8013598:	89bb      	ldrh	r3, [r7, #12]
 801359a:	4413      	add	r3, r2
 801359c:	781a      	ldrb	r2, [r3, #0]
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	7e9b      	ldrb	r3, [r3, #26]
 80135a2:	429a      	cmp	r2, r3
 80135a4:	d108      	bne.n	80135b8 <_chopOff+0x50>
				if (size > count) {
 80135a6:	89fa      	ldrh	r2, [r7, #14]
 80135a8:	887b      	ldrh	r3, [r7, #2]
 80135aa:	429a      	cmp	r2, r3
 80135ac:	d904      	bls.n	80135b8 <_chopOff+0x50>
					p_owner->__tail = tail;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	89ba      	ldrh	r2, [r7, #12]
 80135b2:	82da      	strh	r2, [r3, #22]
					return TRUE;
 80135b4:	2301      	movs	r3, #1
 80135b6:	e04e      	b.n	8013656 <_chopOff+0xee>
				}
			}
			tail++;
 80135b8:	89bb      	ldrh	r3, [r7, #12]
 80135ba:	3301      	adds	r3, #1
 80135bc:	81bb      	strh	r3, [r7, #12]
			if (tail >= p_owner->_size) tail -= p_owner->_size;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	891b      	ldrh	r3, [r3, #8]
 80135c2:	89ba      	ldrh	r2, [r7, #12]
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d304      	bcc.n	80135d2 <_chopOff+0x6a>
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	891b      	ldrh	r3, [r3, #8]
 80135cc:	89ba      	ldrh	r2, [r7, #12]
 80135ce:	1ad3      	subs	r3, r2, r3
 80135d0:	81bb      	strh	r3, [r7, #12]
			size++;
 80135d2:	89fb      	ldrh	r3, [r7, #14]
 80135d4:	3301      	adds	r3, #1
 80135d6:	81fb      	strh	r3, [r7, #14]
		while (tail != p_owner->__head) {
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	8a9b      	ldrh	r3, [r3, #20]
 80135dc:	89ba      	ldrh	r2, [r7, #12]
 80135de:	429a      	cmp	r2, r3
 80135e0:	d1d8      	bne.n	8013594 <_chopOff+0x2c>
		}
		break;
 80135e2:	e037      	b.n	8013654 <_chopOff+0xec>

	case RB_CHOP_OFF_LENGTH:
		length = pifRingBuffer_GetFillSize(p_owner);
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f000 f931 	bl	801384c <pifRingBuffer_GetFillSize>
 80135ea:	4603      	mov	r3, r0
 80135ec:	817b      	strh	r3, [r7, #10]
		size = p_owner->__ui.chop_off_length;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	8b5b      	ldrh	r3, [r3, #26]
 80135f2:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 80135f4:	e004      	b.n	8013600 <_chopOff+0x98>
			size += p_owner->__ui.chop_off_length;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	8b5a      	ldrh	r2, [r3, #26]
 80135fa:	89fb      	ldrh	r3, [r7, #14]
 80135fc:	4413      	add	r3, r2
 80135fe:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013600:	887a      	ldrh	r2, [r7, #2]
 8013602:	89fb      	ldrh	r3, [r7, #14]
 8013604:	429a      	cmp	r2, r3
 8013606:	d8f6      	bhi.n	80135f6 <_chopOff+0x8e>
		}
		if (size < length) {
 8013608:	89fa      	ldrh	r2, [r7, #14]
 801360a:	897b      	ldrh	r3, [r7, #10]
 801360c:	429a      	cmp	r2, r3
 801360e:	d216      	bcs.n	801363e <_chopOff+0xd6>
			p_owner->__tail += size;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	8ada      	ldrh	r2, [r3, #22]
 8013614:	89fb      	ldrh	r3, [r7, #14]
 8013616:	4413      	add	r3, r2
 8013618:	b29a      	uxth	r2, r3
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	82da      	strh	r2, [r3, #22]
			if (p_owner->__tail >= p_owner->_size) p_owner->__tail -= p_owner->_size;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	8ada      	ldrh	r2, [r3, #22]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	891b      	ldrh	r3, [r3, #8]
 8013626:	429a      	cmp	r2, r3
 8013628:	d307      	bcc.n	801363a <_chopOff+0xd2>
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	8ada      	ldrh	r2, [r3, #22]
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	891b      	ldrh	r3, [r3, #8]
 8013632:	1ad3      	subs	r3, r2, r3
 8013634:	b29a      	uxth	r2, r3
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	82da      	strh	r2, [r3, #22]
			return TRUE;
 801363a:	2301      	movs	r3, #1
 801363c:	e00b      	b.n	8013656 <_chopOff+0xee>
		}
		else if (count <= length) {
 801363e:	887a      	ldrh	r2, [r7, #2]
 8013640:	897b      	ldrh	r3, [r7, #10]
 8013642:	429a      	cmp	r2, r3
 8013644:	d805      	bhi.n	8013652 <_chopOff+0xea>
			p_owner->__tail = p_owner->__head;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	8a9a      	ldrh	r2, [r3, #20]
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	82da      	strh	r2, [r3, #22]
			return TRUE;
 801364e:	2301      	movs	r3, #1
 8013650:	e001      	b.n	8013656 <_chopOff+0xee>
		}
		break;
 8013652:	bf00      	nop
	}
	return FALSE;
 8013654:	2300      	movs	r3, #0
}
 8013656:	4618      	mov	r0, r3
 8013658:	3710      	adds	r7, #16
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}
	...

08013660 <pifRingBuffer_CreateHeap>:

PifRingBuffer* pifRingBuffer_CreateHeap(PifId id, uint16_t size)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b084      	sub	sp, #16
 8013664:	af00      	add	r7, sp, #0
 8013666:	4603      	mov	r3, r0
 8013668:	460a      	mov	r2, r1
 801366a:	80fb      	strh	r3, [r7, #6]
 801366c:	4613      	mov	r3, r2
 801366e:	80bb      	strh	r3, [r7, #4]
	PifRingBuffer* p_owner = malloc(sizeof(PifRingBuffer));
 8013670:	201c      	movs	r0, #28
 8013672:	f00f f9f3 	bl	8022a5c <malloc>
 8013676:	4603      	mov	r3, r0
 8013678:	60fb      	str	r3, [r7, #12]
	if (!p_owner) {
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d104      	bne.n	801368a <pifRingBuffer_CreateHeap+0x2a>
		pif_error = E_OUT_OF_HEAP;
 8013680:	4b0c      	ldr	r3, [pc, #48]	; (80136b4 <pifRingBuffer_CreateHeap+0x54>)
 8013682:	2203      	movs	r2, #3
 8013684:	701a      	strb	r2, [r3, #0]
		return NULL;
 8013686:	2300      	movs	r3, #0
 8013688:	e010      	b.n	80136ac <pifRingBuffer_CreateHeap+0x4c>
	}

	if (!pifRingBuffer_InitHeap(p_owner, id, size)) {
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	88ba      	ldrh	r2, [r7, #4]
 801368e:	88f9      	ldrh	r1, [r7, #6]
 8013690:	4618      	mov	r0, r3
 8013692:	f000 f829 	bl	80136e8 <pifRingBuffer_InitHeap>
 8013696:	4603      	mov	r3, r0
 8013698:	2b00      	cmp	r3, #0
 801369a:	d106      	bne.n	80136aa <pifRingBuffer_CreateHeap+0x4a>
		pifRingBuffer_Destroy(&p_owner);
 801369c:	f107 030c 	add.w	r3, r7, #12
 80136a0:	4618      	mov	r0, r3
 80136a2:	f000 f809 	bl	80136b8 <pifRingBuffer_Destroy>
		return NULL;
 80136a6:	2300      	movs	r3, #0
 80136a8:	e000      	b.n	80136ac <pifRingBuffer_CreateHeap+0x4c>
	}
    return p_owner;
 80136aa:	68fb      	ldr	r3, [r7, #12]
}
 80136ac:	4618      	mov	r0, r3
 80136ae:	3710      	adds	r7, #16
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}
 80136b4:	20001c0d 	.word	0x20001c0d

080136b8 <pifRingBuffer_Destroy>:
	}
    return p_owner;
}

void pifRingBuffer_Destroy(PifRingBuffer** pp_owner)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b082      	sub	sp, #8
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
	if (pp_owner) {
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d00c      	beq.n	80136e0 <pifRingBuffer_Destroy+0x28>
		pifRingBuffer_Clear(*pp_owner);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	4618      	mov	r0, r3
 80136cc:	f000 f856 	bl	801377c <pifRingBuffer_Clear>
		free(*pp_owner);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	4618      	mov	r0, r3
 80136d6:	f00f f9c9 	bl	8022a6c <free>
		*pp_owner = NULL;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	2200      	movs	r2, #0
 80136de:	601a      	str	r2, [r3, #0]
	}
}
 80136e0:	bf00      	nop
 80136e2:	3708      	adds	r7, #8
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}

080136e8 <pifRingBuffer_InitHeap>:

BOOL pifRingBuffer_InitHeap(PifRingBuffer* p_owner, PifId id, uint16_t size)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b082      	sub	sp, #8
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	460b      	mov	r3, r1
 80136f2:	807b      	strh	r3, [r7, #2]
 80136f4:	4613      	mov	r3, r2
 80136f6:	803b      	strh	r3, [r7, #0]
    if (!p_owner || !size) {
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d002      	beq.n	8013704 <pifRingBuffer_InitHeap+0x1c>
 80136fe:	883b      	ldrh	r3, [r7, #0]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d104      	bne.n	801370e <pifRingBuffer_InitHeap+0x26>
		pif_error = E_INVALID_PARAM;
 8013704:	4b1b      	ldr	r3, [pc, #108]	; (8013774 <pifRingBuffer_InitHeap+0x8c>)
 8013706:	2201      	movs	r2, #1
 8013708:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801370a:	2300      	movs	r3, #0
 801370c:	e02e      	b.n	801376c <pifRingBuffer_InitHeap+0x84>
	}

	memset(p_owner, 0, sizeof(PifRingBuffer));
 801370e:	221c      	movs	r2, #28
 8013710:	2100      	movs	r1, #0
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f00f f9c0 	bl	8022a98 <memset>

	p_owner->__p_buffer = calloc(sizeof(uint8_t), size);
 8013718:	883b      	ldrh	r3, [r7, #0]
 801371a:	4619      	mov	r1, r3
 801371c:	2001      	movs	r0, #1
 801371e:	f00f f96b 	bl	80229f8 <calloc>
 8013722:	4603      	mov	r3, r0
 8013724:	461a      	mov	r2, r3
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	611a      	str	r2, [r3, #16]
	if (!p_owner->__p_buffer) {
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	691b      	ldr	r3, [r3, #16]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d108      	bne.n	8013744 <pifRingBuffer_InitHeap+0x5c>
		pif_error = E_OUT_OF_HEAP;
 8013732:	4b10      	ldr	r3, [pc, #64]	; (8013774 <pifRingBuffer_InitHeap+0x8c>)
 8013734:	2203      	movs	r2, #3
 8013736:	701a      	strb	r2, [r3, #0]
		goto fail;
 8013738:	bf00      	nop
    p_owner->_size = size;
	p_owner->__backup_head = size;
    return TRUE;

fail:
	pifRingBuffer_Clear(p_owner);
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f000 f81e 	bl	801377c <pifRingBuffer_Clear>
    return FALSE;
 8013740:	2300      	movs	r3, #0
 8013742:	e013      	b.n	801376c <pifRingBuffer_InitHeap+0x84>
	if (id == PIF_ID_AUTO) id = pif_id++;
 8013744:	887b      	ldrh	r3, [r7, #2]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d106      	bne.n	8013758 <pifRingBuffer_InitHeap+0x70>
 801374a:	4b0b      	ldr	r3, [pc, #44]	; (8013778 <pifRingBuffer_InitHeap+0x90>)
 801374c:	881b      	ldrh	r3, [r3, #0]
 801374e:	1c5a      	adds	r2, r3, #1
 8013750:	b291      	uxth	r1, r2
 8013752:	4a09      	ldr	r2, [pc, #36]	; (8013778 <pifRingBuffer_InitHeap+0x90>)
 8013754:	8011      	strh	r1, [r2, #0]
 8013756:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	887a      	ldrh	r2, [r7, #2]
 801375c:	801a      	strh	r2, [r3, #0]
    p_owner->_size = size;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	883a      	ldrh	r2, [r7, #0]
 8013762:	811a      	strh	r2, [r3, #8]
	p_owner->__backup_head = size;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	883a      	ldrh	r2, [r7, #0]
 8013768:	831a      	strh	r2, [r3, #24]
    return TRUE;
 801376a:	2301      	movs	r3, #1
}
 801376c:	4618      	mov	r0, r3
 801376e:	3708      	adds	r7, #8
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}
 8013774:	20001c0d 	.word	0x20001c0d
 8013778:	2000011c 	.word	0x2000011c

0801377c <pifRingBuffer_Clear>:
	p_owner->__backup_head = size;
    return TRUE;
}

void pifRingBuffer_Clear(PifRingBuffer* p_owner)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b082      	sub	sp, #8
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
	if (p_owner->_bt.is_static == FALSE && p_owner->__p_buffer) {
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	791b      	ldrb	r3, [r3, #4]
 8013788:	f003 0301 	and.w	r3, r3, #1
 801378c:	b2db      	uxtb	r3, r3
 801378e:	2b00      	cmp	r3, #0
 8013790:	d108      	bne.n	80137a4 <pifRingBuffer_Clear+0x28>
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	691b      	ldr	r3, [r3, #16]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d004      	beq.n	80137a4 <pifRingBuffer_Clear+0x28>
        free(p_owner->__p_buffer);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	691b      	ldr	r3, [r3, #16]
 801379e:	4618      	mov	r0, r3
 80137a0:	f00f f964 	bl	8022a6c <free>
    }
    p_owner->__p_buffer = NULL;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	2200      	movs	r2, #0
 80137a8:	611a      	str	r2, [r3, #16]
}
 80137aa:	bf00      	nop
 80137ac:	3708      	adds	r7, #8
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}

080137b2 <pifRingBuffer_SetName>:
    p_owner->_size = size;
	return TRUE;
}

void pifRingBuffer_SetName(PifRingBuffer* p_owner, const char* p_name)
{
 80137b2:	b480      	push	{r7}
 80137b4:	b083      	sub	sp, #12
 80137b6:	af00      	add	r7, sp, #0
 80137b8:	6078      	str	r0, [r7, #4]
 80137ba:	6039      	str	r1, [r7, #0]
	p_owner->__p_name = p_name;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	683a      	ldr	r2, [r7, #0]
 80137c0:	60da      	str	r2, [r3, #12]
}
 80137c2:	bf00      	nop
 80137c4:	370c      	adds	r7, #12
 80137c6:	46bd      	mov	sp, r7
 80137c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137cc:	4770      	bx	lr

080137ce <pifRingBuffer_GetTailPointer>:

uint8_t *pifRingBuffer_GetTailPointer(PifRingBuffer* p_owner, uint16_t pos)
{
 80137ce:	b480      	push	{r7}
 80137d0:	b083      	sub	sp, #12
 80137d2:	af00      	add	r7, sp, #0
 80137d4:	6078      	str	r0, [r7, #4]
 80137d6:	460b      	mov	r3, r1
 80137d8:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__tail + pos) % p_owner->_size];
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	6919      	ldr	r1, [r3, #16]
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	8adb      	ldrh	r3, [r3, #22]
 80137e2:	461a      	mov	r2, r3
 80137e4:	887b      	ldrh	r3, [r7, #2]
 80137e6:	4413      	add	r3, r2
 80137e8:	687a      	ldr	r2, [r7, #4]
 80137ea:	8912      	ldrh	r2, [r2, #8]
 80137ec:	fb93 f0f2 	sdiv	r0, r3, r2
 80137f0:	fb00 f202 	mul.w	r2, r0, r2
 80137f4:	1a9b      	subs	r3, r3, r2
 80137f6:	440b      	add	r3, r1
}
 80137f8:	4618      	mov	r0, r3
 80137fa:	370c      	adds	r7, #12
 80137fc:	46bd      	mov	sp, r7
 80137fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013802:	4770      	bx	lr

08013804 <pifRingBuffer_IsBuffer>:
	p_owner->_bt.chop_off = RB_CHOP_OFF_LENGTH;
	p_owner->__ui.chop_off_length = length;
}

BOOL pifRingBuffer_IsBuffer(PifRingBuffer* p_owner)
{
 8013804:	b480      	push	{r7}
 8013806:	b083      	sub	sp, #12
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
	return p_owner->__p_buffer != NULL;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	691b      	ldr	r3, [r3, #16]
 8013810:	2b00      	cmp	r3, #0
 8013812:	bf14      	ite	ne
 8013814:	2301      	movne	r3, #1
 8013816:	2300      	moveq	r3, #0
 8013818:	b2db      	uxtb	r3, r3
}
 801381a:	4618      	mov	r0, r3
 801381c:	370c      	adds	r7, #12
 801381e:	46bd      	mov	sp, r7
 8013820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013824:	4770      	bx	lr

08013826 <pifRingBuffer_IsEmpty>:

BOOL pifRingBuffer_IsEmpty(PifRingBuffer* p_owner)
{
 8013826:	b480      	push	{r7}
 8013828:	b083      	sub	sp, #12
 801382a:	af00      	add	r7, sp, #0
 801382c:	6078      	str	r0, [r7, #4]
	return p_owner->__head == p_owner->__tail;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	8a9a      	ldrh	r2, [r3, #20]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	8adb      	ldrh	r3, [r3, #22]
 8013836:	429a      	cmp	r2, r3
 8013838:	bf0c      	ite	eq
 801383a:	2301      	moveq	r3, #1
 801383c:	2300      	movne	r3, #0
 801383e:	b2db      	uxtb	r3, r3
}
 8013840:	4618      	mov	r0, r3
 8013842:	370c      	adds	r7, #12
 8013844:	46bd      	mov	sp, r7
 8013846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384a:	4770      	bx	lr

0801384c <pifRingBuffer_GetFillSize>:

uint16_t pifRingBuffer_GetFillSize(PifRingBuffer* p_owner)
{
 801384c:	b480      	push	{r7}
 801384e:	b085      	sub	sp, #20
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
	uint16_t usFill;

    if (p_owner->__head >= p_owner->__tail) {
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	8a9a      	ldrh	r2, [r3, #20]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	8adb      	ldrh	r3, [r3, #22]
 801385c:	429a      	cmp	r2, r3
 801385e:	d306      	bcc.n	801386e <pifRingBuffer_GetFillSize+0x22>
    	usFill = p_owner->__head - p_owner->__tail;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	8a9a      	ldrh	r2, [r3, #20]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	8adb      	ldrh	r3, [r3, #22]
 8013868:	1ad3      	subs	r3, r2, r3
 801386a:	81fb      	strh	r3, [r7, #14]
 801386c:	e009      	b.n	8013882 <pifRingBuffer_GetFillSize+0x36>
    }
    else {
    	usFill = p_owner->_size - p_owner->__tail + p_owner->__head;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	891a      	ldrh	r2, [r3, #8]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	8adb      	ldrh	r3, [r3, #22]
 8013876:	1ad3      	subs	r3, r2, r3
 8013878:	b29a      	uxth	r2, r3
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	8a9b      	ldrh	r3, [r3, #20]
 801387e:	4413      	add	r3, r2
 8013880:	81fb      	strh	r3, [r7, #14]
    }
    return usFill;
 8013882:	89fb      	ldrh	r3, [r7, #14]
}
 8013884:	4618      	mov	r0, r3
 8013886:	3714      	adds	r7, #20
 8013888:	46bd      	mov	sp, r7
 801388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388e:	4770      	bx	lr

08013890 <pifRingBuffer_GetLinerSize>:

uint16_t pifRingBuffer_GetLinerSize(PifRingBuffer* p_owner, uint16_t pos)
{
 8013890:	b480      	push	{r7}
 8013892:	b085      	sub	sp, #20
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	460b      	mov	r3, r1
 801389a:	807b      	strh	r3, [r7, #2]
	uint16_t tail = (p_owner->__tail + pos) % p_owner->_size;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	8adb      	ldrh	r3, [r3, #22]
 80138a0:	461a      	mov	r2, r3
 80138a2:	887b      	ldrh	r3, [r7, #2]
 80138a4:	4413      	add	r3, r2
 80138a6:	687a      	ldr	r2, [r7, #4]
 80138a8:	8912      	ldrh	r2, [r2, #8]
 80138aa:	fb93 f1f2 	sdiv	r1, r3, r2
 80138ae:	fb01 f202 	mul.w	r2, r1, r2
 80138b2:	1a9b      	subs	r3, r3, r2
 80138b4:	81fb      	strh	r3, [r7, #14]

    if (p_owner->__head >= tail) {
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	8a9b      	ldrh	r3, [r3, #20]
 80138ba:	89fa      	ldrh	r2, [r7, #14]
 80138bc:	429a      	cmp	r2, r3
 80138be:	d805      	bhi.n	80138cc <pifRingBuffer_GetLinerSize+0x3c>
    	return p_owner->__head - tail;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	8a9a      	ldrh	r2, [r3, #20]
 80138c4:	89fb      	ldrh	r3, [r7, #14]
 80138c6:	1ad3      	subs	r3, r2, r3
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	e004      	b.n	80138d6 <pifRingBuffer_GetLinerSize+0x46>
    }
    else {
    	return p_owner->_size - tail;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	891a      	ldrh	r2, [r3, #8]
 80138d0:	89fb      	ldrh	r3, [r7, #14]
 80138d2:	1ad3      	subs	r3, r2, r3
 80138d4:	b29b      	uxth	r3, r3
    }
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3714      	adds	r7, #20
 80138da:	46bd      	mov	sp, r7
 80138dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e0:	4770      	bx	lr

080138e2 <pifRingBuffer_GetRemainSize>:

uint16_t pifRingBuffer_GetRemainSize(PifRingBuffer* p_owner)
{
 80138e2:	b480      	push	{r7}
 80138e4:	b085      	sub	sp, #20
 80138e6:	af00      	add	r7, sp, #0
 80138e8:	6078      	str	r0, [r7, #4]
	uint16_t remain;

    if (p_owner->__head < p_owner->__tail) {
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	8a9a      	ldrh	r2, [r3, #20]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	8adb      	ldrh	r3, [r3, #22]
 80138f2:	429a      	cmp	r2, r3
 80138f4:	d206      	bcs.n	8013904 <pifRingBuffer_GetRemainSize+0x22>
    	remain = p_owner->__tail - p_owner->__head;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	8ada      	ldrh	r2, [r3, #22]
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	8a9b      	ldrh	r3, [r3, #20]
 80138fe:	1ad3      	subs	r3, r2, r3
 8013900:	81fb      	strh	r3, [r7, #14]
 8013902:	e009      	b.n	8013918 <pifRingBuffer_GetRemainSize+0x36>
    }
    else {
    	remain = p_owner->_size - p_owner->__head + p_owner->__tail;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	891a      	ldrh	r2, [r3, #8]
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	8a9b      	ldrh	r3, [r3, #20]
 801390c:	1ad3      	subs	r3, r2, r3
 801390e:	b29a      	uxth	r2, r3
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	8adb      	ldrh	r3, [r3, #22]
 8013914:	4413      	add	r3, r2
 8013916:	81fb      	strh	r3, [r7, #14]
    }
    return remain - 1;
 8013918:	89fb      	ldrh	r3, [r7, #14]
 801391a:	3b01      	subs	r3, #1
 801391c:	b29b      	uxth	r3, r3
}
 801391e:	4618      	mov	r0, r3
 8013920:	3714      	adds	r7, #20
 8013922:	46bd      	mov	sp, r7
 8013924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013928:	4770      	bx	lr

0801392a <pifRingBuffer_BeginPutting>:

void pifRingBuffer_BeginPutting(PifRingBuffer* p_owner)
{
 801392a:	b480      	push	{r7}
 801392c:	b083      	sub	sp, #12
 801392e:	af00      	add	r7, sp, #0
 8013930:	6078      	str	r0, [r7, #4]
	if (p_owner->__backup_head < p_owner->_size) {
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	8b1a      	ldrh	r2, [r3, #24]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	891b      	ldrh	r3, [r3, #8]
 801393a:	429a      	cmp	r2, r3
 801393c:	d203      	bcs.n	8013946 <pifRingBuffer_BeginPutting+0x1c>
		p_owner->__head = p_owner->__backup_head;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	8b1a      	ldrh	r2, [r3, #24]
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	829a      	strh	r2, [r3, #20]
	}
	p_owner->__backup_head = p_owner->__head;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	8a9a      	ldrh	r2, [r3, #20]
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	831a      	strh	r2, [r3, #24]
}
 801394e:	bf00      	nop
 8013950:	370c      	adds	r7, #12
 8013952:	46bd      	mov	sp, r7
 8013954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013958:	4770      	bx	lr

0801395a <pifRingBuffer_CommitPutting>:

void pifRingBuffer_CommitPutting(PifRingBuffer* p_owner)
{
 801395a:	b480      	push	{r7}
 801395c:	b083      	sub	sp, #12
 801395e:	af00      	add	r7, sp, #0
 8013960:	6078      	str	r0, [r7, #4]
	p_owner->__backup_head = p_owner->_size;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	891a      	ldrh	r2, [r3, #8]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	831a      	strh	r2, [r3, #24]
}
 801396a:	bf00      	nop
 801396c:	370c      	adds	r7, #12
 801396e:	46bd      	mov	sp, r7
 8013970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013974:	4770      	bx	lr

08013976 <pifRingBuffer_RollbackPutting>:

void pifRingBuffer_RollbackPutting(PifRingBuffer* p_owner)
{
 8013976:	b480      	push	{r7}
 8013978:	b083      	sub	sp, #12
 801397a:	af00      	add	r7, sp, #0
 801397c:	6078      	str	r0, [r7, #4]
	p_owner->__head = p_owner->__backup_head;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	8b1a      	ldrh	r2, [r3, #24]
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	829a      	strh	r2, [r3, #20]
	p_owner->__backup_head = p_owner->_size;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	891a      	ldrh	r2, [r3, #8]
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	831a      	strh	r2, [r3, #24]
}
 801398e:	bf00      	nop
 8013990:	370c      	adds	r7, #12
 8013992:	46bd      	mov	sp, r7
 8013994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013998:	4770      	bx	lr

0801399a <pifRingBuffer_GetPointerPutting>:

uint8_t* pifRingBuffer_GetPointerPutting(PifRingBuffer* p_owner, uint16_t pos)
{
 801399a:	b480      	push	{r7}
 801399c:	b083      	sub	sp, #12
 801399e:	af00      	add	r7, sp, #0
 80139a0:	6078      	str	r0, [r7, #4]
 80139a2:	460b      	mov	r3, r1
 80139a4:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__backup_head + pos) % p_owner->_size];
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	6919      	ldr	r1, [r3, #16]
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	8b1b      	ldrh	r3, [r3, #24]
 80139ae:	461a      	mov	r2, r3
 80139b0:	887b      	ldrh	r3, [r7, #2]
 80139b2:	4413      	add	r3, r2
 80139b4:	687a      	ldr	r2, [r7, #4]
 80139b6:	8912      	ldrh	r2, [r2, #8]
 80139b8:	fb93 f0f2 	sdiv	r0, r3, r2
 80139bc:	fb00 f202 	mul.w	r2, r0, r2
 80139c0:	1a9b      	subs	r3, r3, r2
 80139c2:	440b      	add	r3, r1
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	370c      	adds	r7, #12
 80139c8:	46bd      	mov	sp, r7
 80139ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ce:	4770      	bx	lr

080139d0 <pifRingBuffer_PutByte>:

BOOL pifRingBuffer_PutByte(PifRingBuffer* p_owner, uint8_t data)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b084      	sub	sp, #16
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	460b      	mov	r3, r1
 80139da:	70fb      	strb	r3, [r7, #3]
    uint16_t next;

    next = p_owner->__head + 1;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	8a9b      	ldrh	r3, [r3, #20]
 80139e0:	3301      	adds	r3, #1
 80139e2:	81fb      	strh	r3, [r7, #14]
	if (next >= p_owner->_size) next = 0;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	891b      	ldrh	r3, [r3, #8]
 80139e8:	89fa      	ldrh	r2, [r7, #14]
 80139ea:	429a      	cmp	r2, r3
 80139ec:	d301      	bcc.n	80139f2 <pifRingBuffer_PutByte+0x22>
 80139ee:	2300      	movs	r3, #0
 80139f0:	81fb      	strh	r3, [r7, #14]
    if (next == p_owner->__tail) {
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	8adb      	ldrh	r3, [r3, #22]
 80139f6:	89fa      	ldrh	r2, [r7, #14]
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d10b      	bne.n	8013a14 <pifRingBuffer_PutByte+0x44>
    	if (!_chopOff(p_owner, 1)) {
 80139fc:	2101      	movs	r1, #1
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	f7ff fdb2 	bl	8013568 <_chopOff>
 8013a04:	4603      	mov	r3, r0
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d104      	bne.n	8013a14 <pifRingBuffer_PutByte+0x44>
    		pif_error = E_OVERFLOW_BUFFER;
 8013a0a:	4b0a      	ldr	r3, [pc, #40]	; (8013a34 <pifRingBuffer_PutByte+0x64>)
 8013a0c:	2204      	movs	r2, #4
 8013a0e:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013a10:	2300      	movs	r3, #0
 8013a12:	e00a      	b.n	8013a2a <pifRingBuffer_PutByte+0x5a>
    	}
    }

    p_owner->__p_buffer[p_owner->__head] = data;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	691b      	ldr	r3, [r3, #16]
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	8a92      	ldrh	r2, [r2, #20]
 8013a1c:	4413      	add	r3, r2
 8013a1e:	78fa      	ldrb	r2, [r7, #3]
 8013a20:	701a      	strb	r2, [r3, #0]
    p_owner->__head = next;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	89fa      	ldrh	r2, [r7, #14]
 8013a26:	829a      	strh	r2, [r3, #20]
    return TRUE;
 8013a28:	2301      	movs	r3, #1
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	3710      	adds	r7, #16
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bd80      	pop	{r7, pc}
 8013a32:	bf00      	nop
 8013a34:	20001c0d 	.word	0x20001c0d

08013a38 <pifRingBuffer_PutData>:

BOOL pifRingBuffer_PutData(PifRingBuffer* p_owner, uint8_t* p_data, uint16_t length)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b086      	sub	sp, #24
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	60f8      	str	r0, [r7, #12]
 8013a40:	60b9      	str	r1, [r7, #8]
 8013a42:	4613      	mov	r3, r2
 8013a44:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013a46:	68f8      	ldr	r0, [r7, #12]
 8013a48:	f7ff ff4b 	bl	80138e2 <pifRingBuffer_GetRemainSize>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	82bb      	strh	r3, [r7, #20]

    if (length > remain) {
 8013a50:	88fa      	ldrh	r2, [r7, #6]
 8013a52:	8abb      	ldrh	r3, [r7, #20]
 8013a54:	429a      	cmp	r2, r3
 8013a56:	d90f      	bls.n	8013a78 <pifRingBuffer_PutData+0x40>
    	if (!_chopOff(p_owner, length - remain)) {
 8013a58:	88fa      	ldrh	r2, [r7, #6]
 8013a5a:	8abb      	ldrh	r3, [r7, #20]
 8013a5c:	1ad3      	subs	r3, r2, r3
 8013a5e:	b29b      	uxth	r3, r3
 8013a60:	4619      	mov	r1, r3
 8013a62:	68f8      	ldr	r0, [r7, #12]
 8013a64:	f7ff fd80 	bl	8013568 <_chopOff>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d104      	bne.n	8013a78 <pifRingBuffer_PutData+0x40>
    		pif_error = E_OVERFLOW_BUFFER;
 8013a6e:	4b16      	ldr	r3, [pc, #88]	; (8013ac8 <pifRingBuffer_PutData+0x90>)
 8013a70:	2204      	movs	r2, #4
 8013a72:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013a74:	2300      	movs	r3, #0
 8013a76:	e023      	b.n	8013ac0 <pifRingBuffer_PutData+0x88>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013a78:	2300      	movs	r3, #0
 8013a7a:	82fb      	strh	r3, [r7, #22]
 8013a7c:	e01b      	b.n	8013ab6 <pifRingBuffer_PutData+0x7e>
    	p_owner->__p_buffer[p_owner->__head] = p_data[i];
 8013a7e:	8afb      	ldrh	r3, [r7, #22]
 8013a80:	68ba      	ldr	r2, [r7, #8]
 8013a82:	441a      	add	r2, r3
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	691b      	ldr	r3, [r3, #16]
 8013a88:	68f9      	ldr	r1, [r7, #12]
 8013a8a:	8a89      	ldrh	r1, [r1, #20]
 8013a8c:	440b      	add	r3, r1
 8013a8e:	7812      	ldrb	r2, [r2, #0]
 8013a90:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	8a9b      	ldrh	r3, [r3, #20]
 8013a96:	3301      	adds	r3, #1
 8013a98:	b29a      	uxth	r2, r3
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	8a9a      	ldrh	r2, [r3, #20]
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	891b      	ldrh	r3, [r3, #8]
 8013aa6:	429a      	cmp	r2, r3
 8013aa8:	d302      	bcc.n	8013ab0 <pifRingBuffer_PutData+0x78>
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	2200      	movs	r2, #0
 8013aae:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013ab0:	8afb      	ldrh	r3, [r7, #22]
 8013ab2:	3301      	adds	r3, #1
 8013ab4:	82fb      	strh	r3, [r7, #22]
 8013ab6:	8afa      	ldrh	r2, [r7, #22]
 8013ab8:	88fb      	ldrh	r3, [r7, #6]
 8013aba:	429a      	cmp	r2, r3
 8013abc:	d3df      	bcc.n	8013a7e <pifRingBuffer_PutData+0x46>
    }
    return TRUE;
 8013abe:	2301      	movs	r3, #1
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3718      	adds	r7, #24
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	20001c0d 	.word	0x20001c0d

08013acc <pifRingBuffer_PutString>:

BOOL pifRingBuffer_PutString(PifRingBuffer* p_owner, char* p_string)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b084      	sub	sp, #16
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
 8013ad4:	6039      	str	r1, [r7, #0]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	f7ff ff03 	bl	80138e2 <pifRingBuffer_GetRemainSize>
 8013adc:	4603      	mov	r3, r0
 8013ade:	81bb      	strh	r3, [r7, #12]
	uint16_t length = strlen(p_string);
 8013ae0:	6838      	ldr	r0, [r7, #0]
 8013ae2:	f7ec fb79 	bl	80001d8 <strlen>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	817b      	strh	r3, [r7, #10]

    if (length > remain) {
 8013aea:	897a      	ldrh	r2, [r7, #10]
 8013aec:	89bb      	ldrh	r3, [r7, #12]
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d90f      	bls.n	8013b12 <pifRingBuffer_PutString+0x46>
    	if (!_chopOff(p_owner, length - remain)) {
 8013af2:	897a      	ldrh	r2, [r7, #10]
 8013af4:	89bb      	ldrh	r3, [r7, #12]
 8013af6:	1ad3      	subs	r3, r2, r3
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	4619      	mov	r1, r3
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f7ff fd33 	bl	8013568 <_chopOff>
 8013b02:	4603      	mov	r3, r0
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d104      	bne.n	8013b12 <pifRingBuffer_PutString+0x46>
    		pif_error = E_OVERFLOW_BUFFER;
 8013b08:	4b16      	ldr	r3, [pc, #88]	; (8013b64 <pifRingBuffer_PutString+0x98>)
 8013b0a:	2204      	movs	r2, #4
 8013b0c:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	e023      	b.n	8013b5a <pifRingBuffer_PutString+0x8e>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013b12:	2300      	movs	r3, #0
 8013b14:	81fb      	strh	r3, [r7, #14]
 8013b16:	e01b      	b.n	8013b50 <pifRingBuffer_PutString+0x84>
    	p_owner->__p_buffer[p_owner->__head] = p_string[i];
 8013b18:	89fb      	ldrh	r3, [r7, #14]
 8013b1a:	683a      	ldr	r2, [r7, #0]
 8013b1c:	441a      	add	r2, r3
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	691b      	ldr	r3, [r3, #16]
 8013b22:	6879      	ldr	r1, [r7, #4]
 8013b24:	8a89      	ldrh	r1, [r1, #20]
 8013b26:	440b      	add	r3, r1
 8013b28:	7812      	ldrb	r2, [r2, #0]
 8013b2a:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	8a9b      	ldrh	r3, [r3, #20]
 8013b30:	3301      	adds	r3, #1
 8013b32:	b29a      	uxth	r2, r3
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	8a9a      	ldrh	r2, [r3, #20]
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	891b      	ldrh	r3, [r3, #8]
 8013b40:	429a      	cmp	r2, r3
 8013b42:	d302      	bcc.n	8013b4a <pifRingBuffer_PutString+0x7e>
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2200      	movs	r2, #0
 8013b48:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013b4a:	89fb      	ldrh	r3, [r7, #14]
 8013b4c:	3301      	adds	r3, #1
 8013b4e:	81fb      	strh	r3, [r7, #14]
 8013b50:	89fa      	ldrh	r2, [r7, #14]
 8013b52:	897b      	ldrh	r3, [r7, #10]
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d3df      	bcc.n	8013b18 <pifRingBuffer_PutString+0x4c>
    }
    return TRUE;
 8013b58:	2301      	movs	r3, #1
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	3710      	adds	r7, #16
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}
 8013b62:	bf00      	nop
 8013b64:	20001c0d 	.word	0x20001c0d

08013b68 <pifRingBuffer_GetByte>:

BOOL pifRingBuffer_GetByte(PifRingBuffer* p_owner, uint8_t* p_data)
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b083      	sub	sp, #12
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	6039      	str	r1, [r7, #0]
	if (p_owner->__tail == p_owner->__head) return FALSE;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	8ada      	ldrh	r2, [r3, #22]
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	8a9b      	ldrh	r3, [r3, #20]
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d101      	bne.n	8013b82 <pifRingBuffer_GetByte+0x1a>
 8013b7e:	2300      	movs	r3, #0
 8013b80:	e017      	b.n	8013bb2 <pifRingBuffer_GetByte+0x4a>

	*p_data = p_owner->__p_buffer[p_owner->__tail];
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	691b      	ldr	r3, [r3, #16]
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	8ad2      	ldrh	r2, [r2, #22]
 8013b8a:	4413      	add	r3, r2
 8013b8c:	781a      	ldrb	r2, [r3, #0]
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	701a      	strb	r2, [r3, #0]
	p_owner->__tail++;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	8adb      	ldrh	r3, [r3, #22]
 8013b96:	3301      	adds	r3, #1
 8013b98:	b29a      	uxth	r2, r3
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	82da      	strh	r2, [r3, #22]
	if (p_owner->__tail >= p_owner->_size) p_owner->__tail = 0;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	8ada      	ldrh	r2, [r3, #22]
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	891b      	ldrh	r3, [r3, #8]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d302      	bcc.n	8013bb0 <pifRingBuffer_GetByte+0x48>
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	2200      	movs	r2, #0
 8013bae:	82da      	strh	r2, [r3, #22]
	return TRUE;
 8013bb0:	2301      	movs	r3, #1
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	370c      	adds	r7, #12
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bbc:	4770      	bx	lr

08013bbe <pifRingBuffer_CopyToArray>:

uint16_t pifRingBuffer_CopyToArray(uint8_t* p_dst, uint16_t count, PifRingBuffer* p_src, uint16_t pos)
{
 8013bbe:	b480      	push	{r7}
 8013bc0:	b087      	sub	sp, #28
 8013bc2:	af00      	add	r7, sp, #0
 8013bc4:	60f8      	str	r0, [r7, #12]
 8013bc6:	607a      	str	r2, [r7, #4]
 8013bc8:	461a      	mov	r2, r3
 8013bca:	460b      	mov	r3, r1
 8013bcc:	817b      	strh	r3, [r7, #10]
 8013bce:	4613      	mov	r3, r2
 8013bd0:	813b      	strh	r3, [r7, #8]
	uint16_t tail = p_src->__tail + pos;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	8ada      	ldrh	r2, [r3, #22]
 8013bd6:	893b      	ldrh	r3, [r7, #8]
 8013bd8:	4413      	add	r3, r2
 8013bda:	82fb      	strh	r3, [r7, #22]
	if (tail >= p_src->_size) tail -= p_src->_size;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	891b      	ldrh	r3, [r3, #8]
 8013be0:	8afa      	ldrh	r2, [r7, #22]
 8013be2:	429a      	cmp	r2, r3
 8013be4:	d304      	bcc.n	8013bf0 <pifRingBuffer_CopyToArray+0x32>
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	891b      	ldrh	r3, [r3, #8]
 8013bea:	8afa      	ldrh	r2, [r7, #22]
 8013bec:	1ad3      	subs	r3, r2, r3
 8013bee:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i = 0; i < count; i++) {
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	82bb      	strh	r3, [r7, #20]
 8013bf4:	e01e      	b.n	8013c34 <pifRingBuffer_CopyToArray+0x76>
		p_dst[i] = p_src->__p_buffer[tail];
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	691a      	ldr	r2, [r3, #16]
 8013bfa:	8afb      	ldrh	r3, [r7, #22]
 8013bfc:	441a      	add	r2, r3
 8013bfe:	8abb      	ldrh	r3, [r7, #20]
 8013c00:	68f9      	ldr	r1, [r7, #12]
 8013c02:	440b      	add	r3, r1
 8013c04:	7812      	ldrb	r2, [r2, #0]
 8013c06:	701a      	strb	r2, [r3, #0]
		tail++;
 8013c08:	8afb      	ldrh	r3, [r7, #22]
 8013c0a:	3301      	adds	r3, #1
 8013c0c:	82fb      	strh	r3, [r7, #22]
		if (tail >= p_src->_size) tail = 0;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	891b      	ldrh	r3, [r3, #8]
 8013c12:	8afa      	ldrh	r2, [r7, #22]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d301      	bcc.n	8013c1c <pifRingBuffer_CopyToArray+0x5e>
 8013c18:	2300      	movs	r3, #0
 8013c1a:	82fb      	strh	r3, [r7, #22]
		if (tail == p_src->__head) return i + 1;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	8a9b      	ldrh	r3, [r3, #20]
 8013c20:	8afa      	ldrh	r2, [r7, #22]
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d103      	bne.n	8013c2e <pifRingBuffer_CopyToArray+0x70>
 8013c26:	8abb      	ldrh	r3, [r7, #20]
 8013c28:	3301      	adds	r3, #1
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	e007      	b.n	8013c3e <pifRingBuffer_CopyToArray+0x80>
	for (uint16_t i = 0; i < count; i++) {
 8013c2e:	8abb      	ldrh	r3, [r7, #20]
 8013c30:	3301      	adds	r3, #1
 8013c32:	82bb      	strh	r3, [r7, #20]
 8013c34:	8aba      	ldrh	r2, [r7, #20]
 8013c36:	897b      	ldrh	r3, [r7, #10]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d3dc      	bcc.n	8013bf6 <pifRingBuffer_CopyToArray+0x38>
	}
	return count;
 8013c3c:	897b      	ldrh	r3, [r7, #10]
}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	371c      	adds	r7, #28
 8013c42:	46bd      	mov	sp, r7
 8013c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c48:	4770      	bx	lr

08013c4a <pifRingBuffer_Remove>:
	}
	return TRUE;
}

void pifRingBuffer_Remove(PifRingBuffer* p_owner, uint16_t size)
{
 8013c4a:	b580      	push	{r7, lr}
 8013c4c:	b084      	sub	sp, #16
 8013c4e:	af00      	add	r7, sp, #0
 8013c50:	6078      	str	r0, [r7, #4]
 8013c52:	460b      	mov	r3, r1
 8013c54:	807b      	strh	r3, [r7, #2]
	uint16_t fill = pifRingBuffer_GetFillSize(p_owner);
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f7ff fdf8 	bl	801384c <pifRingBuffer_GetFillSize>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	81fb      	strh	r3, [r7, #14]

	if (size >= fill) {
 8013c60:	887a      	ldrh	r2, [r7, #2]
 8013c62:	89fb      	ldrh	r3, [r7, #14]
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d304      	bcc.n	8013c72 <pifRingBuffer_Remove+0x28>
		p_owner->__tail = p_owner->__head;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	8a9a      	ldrh	r2, [r3, #20]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	82da      	strh	r2, [r3, #22]
	}
	else {
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
	}
}
 8013c70:	e00e      	b.n	8013c90 <pifRingBuffer_Remove+0x46>
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	8adb      	ldrh	r3, [r3, #22]
 8013c76:	461a      	mov	r2, r3
 8013c78:	887b      	ldrh	r3, [r7, #2]
 8013c7a:	4413      	add	r3, r2
 8013c7c:	687a      	ldr	r2, [r7, #4]
 8013c7e:	8912      	ldrh	r2, [r2, #8]
 8013c80:	fb93 f1f2 	sdiv	r1, r3, r2
 8013c84:	fb01 f202 	mul.w	r2, r1, r2
 8013c88:	1a9b      	subs	r3, r3, r2
 8013c8a:	b29a      	uxth	r2, r3
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	82da      	strh	r2, [r3, #22]
}
 8013c90:	bf00      	nop
 8013c92:	3710      	adds	r7, #16
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bd80      	pop	{r7, pc}

08013c98 <_setTable>:

static uint32_t s_loop_count = 0UL, s_pass_count = 0UL;


static int _setTable(uint16_t period, PifTaskMode* p_mode)
{
 8013c98:	b480      	push	{r7}
 8013c9a:	b089      	sub	sp, #36	; 0x24
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	6039      	str	r1, [r7, #0]
 8013ca2:	80fb      	strh	r3, [r7, #6]
	uint32_t gap, index, bit;
	static int base = 0;
	int i, count, num = -1;
 8013ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ca8:	617b      	str	r3, [r7, #20]

	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013caa:	2300      	movs	r3, #0
 8013cac:	61bb      	str	r3, [r7, #24]
 8013cae:	e00f      	b.n	8013cd0 <_setTable+0x38>
		if (!(s_table_number & (1 << i))) {
 8013cb0:	2201      	movs	r2, #1
 8013cb2:	69bb      	ldr	r3, [r7, #24]
 8013cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8013cb8:	461a      	mov	r2, r3
 8013cba:	4b34      	ldr	r3, [pc, #208]	; (8013d8c <_setTable+0xf4>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	4013      	ands	r3, r2
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d102      	bne.n	8013cca <_setTable+0x32>
			num = i;
 8013cc4:	69bb      	ldr	r3, [r7, #24]
 8013cc6:	617b      	str	r3, [r7, #20]
			break;
 8013cc8:	e005      	b.n	8013cd6 <_setTable+0x3e>
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013cca:	69bb      	ldr	r3, [r7, #24]
 8013ccc:	3301      	adds	r3, #1
 8013cce:	61bb      	str	r3, [r7, #24]
 8013cd0:	69bb      	ldr	r3, [r7, #24]
 8013cd2:	2b1f      	cmp	r3, #31
 8013cd4:	ddec      	ble.n	8013cb0 <_setTable+0x18>
		}
	}
	if (num == -1) {
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cdc:	d105      	bne.n	8013cea <_setTable+0x52>
		pif_error = E_OVERFLOW_BUFFER;
 8013cde:	4b2c      	ldr	r3, [pc, #176]	; (8013d90 <_setTable+0xf8>)
 8013ce0:	2204      	movs	r2, #4
 8013ce2:	701a      	strb	r2, [r3, #0]
		return -1;
 8013ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ce8:	e04a      	b.n	8013d80 <_setTable+0xe8>
	}
	bit = 1 << num;
 8013cea:	2201      	movs	r2, #1
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	fa02 f303 	lsl.w	r3, r2, r3
 8013cf2:	613b      	str	r3, [r7, #16]
	s_table_number |= bit;
 8013cf4:	4b25      	ldr	r3, [pc, #148]	; (8013d8c <_setTable+0xf4>)
 8013cf6:	681a      	ldr	r2, [r3, #0]
 8013cf8:	693b      	ldr	r3, [r7, #16]
 8013cfa:	4313      	orrs	r3, r2
 8013cfc:	4a23      	ldr	r2, [pc, #140]	; (8013d8c <_setTable+0xf4>)
 8013cfe:	6013      	str	r3, [r2, #0]

	count = PIF_TASK_TABLE_SIZE * period;
 8013d00:	88fb      	ldrh	r3, [r7, #6]
 8013d02:	015b      	lsls	r3, r3, #5
 8013d04:	60fb      	str	r3, [r7, #12]
	gap = 10000L * PIF_TASK_TABLE_SIZE / count;
 8013d06:	4a23      	ldr	r2, [pc, #140]	; (8013d94 <_setTable+0xfc>)
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8013d0e:	60bb      	str	r3, [r7, #8]
	if (gap > 100) {
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	2b64      	cmp	r3, #100	; 0x64
 8013d14:	d930      	bls.n	8013d78 <_setTable+0xe0>
		index = 100 * base;
 8013d16:	4b20      	ldr	r3, [pc, #128]	; (8013d98 <_setTable+0x100>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	2264      	movs	r2, #100	; 0x64
 8013d1c:	fb02 f303 	mul.w	r3, r2, r3
 8013d20:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 8013d22:	2300      	movs	r3, #0
 8013d24:	61bb      	str	r3, [r7, #24]
 8013d26:	e017      	b.n	8013d58 <_setTable+0xc0>
			s_table[(index / 100) & PIF_TASK_TABLE_MASK] |= bit;
 8013d28:	69fb      	ldr	r3, [r7, #28]
 8013d2a:	4a1c      	ldr	r2, [pc, #112]	; (8013d9c <_setTable+0x104>)
 8013d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8013d30:	095b      	lsrs	r3, r3, #5
 8013d32:	f003 021f 	and.w	r2, r3, #31
 8013d36:	491a      	ldr	r1, [pc, #104]	; (8013da0 <_setTable+0x108>)
 8013d38:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d3c:	f003 031f 	and.w	r3, r3, #31
 8013d40:	693a      	ldr	r2, [r7, #16]
 8013d42:	430a      	orrs	r2, r1
 8013d44:	4916      	ldr	r1, [pc, #88]	; (8013da0 <_setTable+0x108>)
 8013d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			index += gap;
 8013d4a:	69fa      	ldr	r2, [r7, #28]
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	4413      	add	r3, r2
 8013d50:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 8013d52:	69bb      	ldr	r3, [r7, #24]
 8013d54:	3301      	adds	r3, #1
 8013d56:	61bb      	str	r3, [r7, #24]
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	4a10      	ldr	r2, [pc, #64]	; (8013d9c <_setTable+0x104>)
 8013d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8013d60:	1152      	asrs	r2, r2, #5
 8013d62:	17db      	asrs	r3, r3, #31
 8013d64:	1ad3      	subs	r3, r2, r3
 8013d66:	69ba      	ldr	r2, [r7, #24]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	dbdd      	blt.n	8013d28 <_setTable+0x90>
		}
		base++;
 8013d6c:	4b0a      	ldr	r3, [pc, #40]	; (8013d98 <_setTable+0x100>)
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	3301      	adds	r3, #1
 8013d72:	4a09      	ldr	r2, [pc, #36]	; (8013d98 <_setTable+0x100>)
 8013d74:	6013      	str	r3, [r2, #0]
 8013d76:	e002      	b.n	8013d7e <_setTable+0xe6>
	}
	else {
		*p_mode = TM_ALWAYS;
 8013d78:	683b      	ldr	r3, [r7, #0]
 8013d7a:	2201      	movs	r2, #1
 8013d7c:	701a      	strb	r2, [r3, #0]
	}
	return num;
 8013d7e:	697b      	ldr	r3, [r7, #20]
}
 8013d80:	4618      	mov	r0, r3
 8013d82:	3724      	adds	r7, #36	; 0x24
 8013d84:	46bd      	mov	sp, r7
 8013d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8a:	4770      	bx	lr
 8013d8c:	20001cfc 	.word	0x20001cfc
 8013d90:	20001c0d 	.word	0x20001c0d
 8013d94:	0004e200 	.word	0x0004e200
 8013d98:	20001d8c 	.word	0x20001d8c
 8013d9c:	51eb851f 	.word	0x51eb851f
 8013da0:	20001d00 	.word	0x20001d00

08013da4 <_resetTable>:

static void _resetTable(int number)
{
 8013da4:	b480      	push	{r7}
 8013da6:	b085      	sub	sp, #20
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
	int i;
	uint32_t mask;

	mask = ~((uint32_t)1 << number);
 8013dac:	2201      	movs	r2, #1
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	fa02 f303 	lsl.w	r3, r2, r3
 8013db4:	43db      	mvns	r3, r3
 8013db6:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013db8:	2300      	movs	r3, #0
 8013dba:	60fb      	str	r3, [r7, #12]
 8013dbc:	e00c      	b.n	8013dd8 <_resetTable+0x34>
		s_table[i] &= mask;
 8013dbe:	4a0e      	ldr	r2, [pc, #56]	; (8013df8 <_resetTable+0x54>)
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013dc6:	68bb      	ldr	r3, [r7, #8]
 8013dc8:	401a      	ands	r2, r3
 8013dca:	490b      	ldr	r1, [pc, #44]	; (8013df8 <_resetTable+0x54>)
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	3301      	adds	r3, #1
 8013dd6:	60fb      	str	r3, [r7, #12]
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	2b1f      	cmp	r3, #31
 8013ddc:	ddef      	ble.n	8013dbe <_resetTable+0x1a>
	}
	s_table_number &= mask;
 8013dde:	4b07      	ldr	r3, [pc, #28]	; (8013dfc <_resetTable+0x58>)
 8013de0:	681a      	ldr	r2, [r3, #0]
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	4013      	ands	r3, r2
 8013de6:	4a05      	ldr	r2, [pc, #20]	; (8013dfc <_resetTable+0x58>)
 8013de8:	6013      	str	r3, [r2, #0]
}
 8013dea:	bf00      	nop
 8013dec:	3714      	adds	r7, #20
 8013dee:	46bd      	mov	sp, r7
 8013df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df4:	4770      	bx	lr
 8013df6:	bf00      	nop
 8013df8:	20001d00 	.word	0x20001d00
 8013dfc:	20001cfc 	.word	0x20001cfc

08013e00 <_processingAlways>:

static PifTask* _processingAlways(PifTask* p_owner)
{
 8013e00:	b480      	push	{r7}
 8013e02:	b085      	sub	sp, #20
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
	uint32_t gap;

	if (p_owner->__delay_ms) {
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d010      	beq.n	8013e32 <_processingAlways+0x32>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 8013e10:	4b0b      	ldr	r3, [pc, #44]	; (8013e40 <_processingAlways+0x40>)
 8013e12:	681a      	ldr	r2, [r3, #0]
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e18:	1ad3      	subs	r3, r2, r3
 8013e1a:	60fb      	str	r3, [r7, #12]
		if (gap >= p_owner->__delay_ms) {
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013e20:	461a      	mov	r2, r3
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	4293      	cmp	r3, r2
 8013e26:	d302      	bcc.n	8013e2e <_processingAlways+0x2e>
			p_owner->__delay_ms = 0;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	879a      	strh	r2, [r3, #60]	; 0x3c
		}
		return NULL;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	e000      	b.n	8013e34 <_processingAlways+0x34>
	}
	return p_owner;
 8013e32:	687b      	ldr	r3, [r7, #4]
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	3714      	adds	r7, #20
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3e:	4770      	bx	lr
 8013e40:	20001c24 	.word	0x20001c24

08013e44 <_processingPeriodUs>:

static PifTask* _processingPeriodUs(PifTask* p_owner)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b084      	sub	sp, #16
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = (*pif_act_timer1us)();
 8013e4c:	4b0f      	ldr	r3, [pc, #60]	; (8013e8c <_processingPeriodUs+0x48>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	4798      	blx	r3
 8013e52:	60f8      	str	r0, [r7, #12]
	gap = current - p_owner->__pretime;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e58:	68fa      	ldr	r2, [r7, #12]
 8013e5a:	1ad3      	subs	r3, r2, r3
 8013e5c:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	895b      	ldrh	r3, [r3, #10]
 8013e62:	461a      	mov	r2, r3
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	4293      	cmp	r3, r2
 8013e68:	d30a      	bcc.n	8013e80 <_processingPeriodUs+0x3c>
		p_owner->__pretime = current - (gap - p_owner->_period);
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	895b      	ldrh	r3, [r3, #10]
 8013e6e:	461a      	mov	r2, r3
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	1ad2      	subs	r2, r2, r3
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	441a      	add	r2, r3
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	641a      	str	r2, [r3, #64]	; 0x40
		return p_owner;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	e000      	b.n	8013e82 <_processingPeriodUs+0x3e>
	}
	return NULL;
 8013e80:	2300      	movs	r3, #0
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3710      	adds	r7, #16
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	20001c34 	.word	0x20001c34

08013e90 <_processingPeriodMs>:

static PifTask* _processingPeriodMs(PifTask* p_owner)
{
 8013e90:	b480      	push	{r7}
 8013e92:	b085      	sub	sp, #20
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = pif_cumulative_timer1ms;
 8013e98:	4b0c      	ldr	r3, [pc, #48]	; (8013ecc <_processingPeriodMs+0x3c>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	60fb      	str	r3, [r7, #12]
	gap = current - p_owner->__pretime;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ea2:	68fa      	ldr	r2, [r7, #12]
 8013ea4:	1ad3      	subs	r3, r2, r3
 8013ea6:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	895b      	ldrh	r3, [r3, #10]
 8013eac:	461a      	mov	r2, r3
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	4293      	cmp	r3, r2
 8013eb2:	d304      	bcc.n	8013ebe <_processingPeriodMs+0x2e>
		p_owner->__pretime = current;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	68fa      	ldr	r2, [r7, #12]
 8013eb8:	641a      	str	r2, [r3, #64]	; 0x40
		return p_owner;
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	e000      	b.n	8013ec0 <_processingPeriodMs+0x30>
	}
	return NULL;
 8013ebe:	2300      	movs	r3, #0
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3714      	adds	r7, #20
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eca:	4770      	bx	lr
 8013ecc:	20001c24 	.word	0x20001c24

08013ed0 <_processingRatio>:

static PifTask* _processingRatio(PifTask* p_owner)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b084      	sub	sp, #16
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
#ifdef __PIF_DEBUG__
	uint32_t time;
	static uint32_t pretime;
#endif

	if (p_owner->__delay_ms) {
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d00f      	beq.n	8013f00 <_processingRatio+0x30>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 8013ee0:	4b29      	ldr	r3, [pc, #164]	; (8013f88 <_processingRatio+0xb8>)
 8013ee2:	681a      	ldr	r2, [r3, #0]
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ee8:	1ad3      	subs	r3, r2, r3
 8013eea:	60bb      	str	r3, [r7, #8]
		if (gap >= p_owner->__delay_ms) {
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	4293      	cmp	r3, r2
 8013ef6:	d33b      	bcc.n	8013f70 <_processingRatio+0xa0>
			p_owner->__delay_ms = 0;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2200      	movs	r2, #0
 8013efc:	879a      	strh	r2, [r3, #60]	; 0x3c
 8013efe:	e037      	b.n	8013f70 <_processingRatio+0xa0>
		}
	}
	else if (s_table[s_number] & (1 << p_owner->__table_number)) {
 8013f00:	4b22      	ldr	r3, [pc, #136]	; (8013f8c <_processingRatio+0xbc>)
 8013f02:	781b      	ldrb	r3, [r3, #0]
 8013f04:	461a      	mov	r2, r3
 8013f06:	4b22      	ldr	r3, [pc, #136]	; (8013f90 <_processingRatio+0xc0>)
 8013f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f0c:	687a      	ldr	r2, [r7, #4]
 8013f0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013f10:	2101      	movs	r1, #1
 8013f12:	fa01 f202 	lsl.w	r2, r1, r2
 8013f16:	4013      	ands	r3, r2
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d029      	beq.n	8013f70 <_processingRatio+0xa0>
#ifdef __PIF_DEBUG__
		time = pif_timer1sec;
 8013f1c:	4b1d      	ldr	r3, [pc, #116]	; (8013f94 <_processingRatio+0xc4>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	60fb      	str	r3, [r7, #12]
		if (time != pretime) {
 8013f22:	4b1d      	ldr	r3, [pc, #116]	; (8013f98 <_processingRatio+0xc8>)
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	68fa      	ldr	r2, [r7, #12]
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	d01a      	beq.n	8013f62 <_processingRatio+0x92>
			p_owner->__period = 1000000.0 / p_owner->__count;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7ec fa9b 	bl	800046c <__aeabi_ui2d>
 8013f36:	4602      	mov	r2, r0
 8013f38:	460b      	mov	r3, r1
 8013f3a:	a111      	add	r1, pc, #68	; (adr r1, 8013f80 <_processingRatio+0xb0>)
 8013f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f40:	f7ec fc38 	bl	80007b4 <__aeabi_ddiv>
 8013f44:	4602      	mov	r2, r0
 8013f46:	460b      	mov	r3, r1
 8013f48:	4610      	mov	r0, r2
 8013f4a:	4619      	mov	r1, r3
 8013f4c:	f7ec fdea 	bl	8000b24 <__aeabi_d2f>
 8013f50:	4602      	mov	r2, r0
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	651a      	str	r2, [r3, #80]	; 0x50
			p_owner->__count = 0;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	2200      	movs	r2, #0
 8013f5a:	64da      	str	r2, [r3, #76]	; 0x4c
			pretime = time;
 8013f5c:	4a0e      	ldr	r2, [pc, #56]	; (8013f98 <_processingRatio+0xc8>)
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	6013      	str	r3, [r2, #0]
		}
		p_owner->__count++;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f66:	1c5a      	adds	r2, r3, #1
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
		return p_owner;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	e000      	b.n	8013f72 <_processingRatio+0xa2>
	}
	return NULL;
 8013f70:	2300      	movs	r3, #0
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3710      	adds	r7, #16
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}
 8013f7a:	bf00      	nop
 8013f7c:	f3af 8000 	nop.w
 8013f80:	00000000 	.word	0x00000000
 8013f84:	412e8480 	.word	0x412e8480
 8013f88:	20001c24 	.word	0x20001c24
 8013f8c:	20001d80 	.word	0x20001d80
 8013f90:	20001d00 	.word	0x20001d00
 8013f94:	20001c18 	.word	0x20001c18
 8013f98:	20001d90 	.word	0x20001d90

08013f9c <_checkParam>:

static BOOL _checkParam(PifTaskMode* p_mode, uint16_t period)
{
 8013f9c:	b480      	push	{r7}
 8013f9e:	b083      	sub	sp, #12
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	807b      	strh	r3, [r7, #2]
	switch (*p_mode) {
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	781b      	ldrb	r3, [r3, #0]
 8013fac:	2b09      	cmp	r3, #9
 8013fae:	d848      	bhi.n	8014042 <_checkParam+0xa6>
 8013fb0:	a201      	add	r2, pc, #4	; (adr r2, 8013fb8 <_checkParam+0x1c>)
 8013fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fb6:	bf00      	nop
 8013fb8:	08013fe1 	.word	0x08013fe1
 8013fbc:	0801404d 	.word	0x0801404d
 8013fc0:	08014005 	.word	0x08014005
 8013fc4:	08014015 	.word	0x08014015
 8013fc8:	08014005 	.word	0x08014005
 8013fcc:	08014015 	.word	0x08014015
 8013fd0:	08014037 	.word	0x08014037
 8013fd4:	0801404d 	.word	0x0801404d
 8013fd8:	0801404d 	.word	0x0801404d
 8013fdc:	08014005 	.word	0x08014005
    case TM_RATIO:
    	if (!period || period > 100) {
 8013fe0:	887b      	ldrh	r3, [r7, #2]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d002      	beq.n	8013fec <_checkParam+0x50>
 8013fe6:	887b      	ldrh	r3, [r7, #2]
 8013fe8:	2b64      	cmp	r3, #100	; 0x64
 8013fea:	d904      	bls.n	8013ff6 <_checkParam+0x5a>
    		pif_error = E_INVALID_PARAM;
 8013fec:	4b1f      	ldr	r3, [pc, #124]	; (801406c <_checkParam+0xd0>)
 8013fee:	2201      	movs	r2, #1
 8013ff0:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	e034      	b.n	8014060 <_checkParam+0xc4>
    	}
    	else if (period == 100) {
 8013ff6:	887b      	ldrh	r3, [r7, #2]
 8013ff8:	2b64      	cmp	r3, #100	; 0x64
 8013ffa:	d129      	bne.n	8014050 <_checkParam+0xb4>
    		*p_mode = TM_ALWAYS;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2201      	movs	r2, #1
 8014000:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 8014002:	e025      	b.n	8014050 <_checkParam+0xb4>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    case TM_IDLE_MS:
    	if (!period) {
 8014004:	887b      	ldrh	r3, [r7, #2]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d124      	bne.n	8014054 <_checkParam+0xb8>
    		pif_error = E_INVALID_PARAM;
 801400a:	4b18      	ldr	r3, [pc, #96]	; (801406c <_checkParam+0xd0>)
 801400c:	2201      	movs	r2, #1
 801400e:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014010:	2300      	movs	r3, #0
 8014012:	e025      	b.n	8014060 <_checkParam+0xc4>
    	}
    	break;

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	if (!period) {
 8014014:	887b      	ldrh	r3, [r7, #2]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d104      	bne.n	8014024 <_checkParam+0x88>
    		pif_error = E_INVALID_PARAM;
 801401a:	4b14      	ldr	r3, [pc, #80]	; (801406c <_checkParam+0xd0>)
 801401c:	2201      	movs	r2, #1
 801401e:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014020:	2300      	movs	r3, #0
 8014022:	e01d      	b.n	8014060 <_checkParam+0xc4>
    	}

    	if (!pif_act_timer1us) {
 8014024:	4b12      	ldr	r3, [pc, #72]	; (8014070 <_checkParam+0xd4>)
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d115      	bne.n	8014058 <_checkParam+0xbc>
    		pif_error = E_CANNOT_USE;
 801402c:	4b0f      	ldr	r3, [pc, #60]	; (801406c <_checkParam+0xd0>)
 801402e:	2209      	movs	r2, #9
 8014030:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014032:	2300      	movs	r3, #0
 8014034:	e014      	b.n	8014060 <_checkParam+0xc4>
        }
    	break;
    	
	case TM_EXTERNAL_CUTIN:
		if (s_task_cutin) return FALSE;
 8014036:	4b0f      	ldr	r3, [pc, #60]	; (8014074 <_checkParam+0xd8>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d00e      	beq.n	801405c <_checkParam+0xc0>
 801403e:	2300      	movs	r3, #0
 8014040:	e00e      	b.n	8014060 <_checkParam+0xc4>
	case TM_ALWAYS:
	case TM_EXTERNAL_ORDER:
		break;

    default:
		pif_error = E_INVALID_PARAM;
 8014042:	4b0a      	ldr	r3, [pc, #40]	; (801406c <_checkParam+0xd0>)
 8014044:	2201      	movs	r2, #1
 8014046:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8014048:	2300      	movs	r3, #0
 801404a:	e009      	b.n	8014060 <_checkParam+0xc4>
		break;
 801404c:	bf00      	nop
 801404e:	e006      	b.n	801405e <_checkParam+0xc2>
    	break;
 8014050:	bf00      	nop
 8014052:	e004      	b.n	801405e <_checkParam+0xc2>
    	break;
 8014054:	bf00      	nop
 8014056:	e002      	b.n	801405e <_checkParam+0xc2>
    	break;
 8014058:	bf00      	nop
 801405a:	e000      	b.n	801405e <_checkParam+0xc2>
    	break;
 801405c:	bf00      	nop
    }
	return TRUE;
 801405e:	2301      	movs	r3, #1
}
 8014060:	4618      	mov	r0, r3
 8014062:	370c      	adds	r7, #12
 8014064:	46bd      	mov	sp, r7
 8014066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406a:	4770      	bx	lr
 801406c:	20001c0d 	.word	0x20001c0d
 8014070:	20001c34 	.word	0x20001c34
 8014074:	20001cf8 	.word	0x20001cf8

08014078 <_setParam>:

static BOOL _setParam(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b084      	sub	sp, #16
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
 8014080:	460b      	mov	r3, r1
 8014082:	70fb      	strb	r3, [r7, #3]
 8014084:	4613      	mov	r3, r2
 8014086:	803b      	strh	r3, [r7, #0]
	int num = -1;
 8014088:	f04f 33ff 	mov.w	r3, #4294967295
 801408c:	60fb      	str	r3, [r7, #12]

	if (mode == TM_RATIO) {
 801408e:	78fb      	ldrb	r3, [r7, #3]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d10c      	bne.n	80140ae <_setParam+0x36>
    	num = _setTable(period, &mode);
 8014094:	1cfa      	adds	r2, r7, #3
 8014096:	883b      	ldrh	r3, [r7, #0]
 8014098:	4611      	mov	r1, r2
 801409a:	4618      	mov	r0, r3
 801409c:	f7ff fdfc 	bl	8013c98 <_setTable>
 80140a0:	60f8      	str	r0, [r7, #12]
    	if (num == -1) return FALSE;
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140a8:	d101      	bne.n	80140ae <_setParam+0x36>
 80140aa:	2300      	movs	r3, #0
 80140ac:	e050      	b.n	8014150 <_setParam+0xd8>
	}

    switch (mode) {
 80140ae:	78fb      	ldrb	r3, [r7, #3]
 80140b0:	2b09      	cmp	r3, #9
 80140b2:	d845      	bhi.n	8014140 <_setParam+0xc8>
 80140b4:	a201      	add	r2, pc, #4	; (adr r2, 80140bc <_setParam+0x44>)
 80140b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140ba:	bf00      	nop
 80140bc:	080140e5 	.word	0x080140e5
 80140c0:	080140f3 	.word	0x080140f3
 80140c4:	080140ff 	.word	0x080140ff
 80140c8:	0801410f 	.word	0x0801410f
 80140cc:	080140ff 	.word	0x080140ff
 80140d0:	0801410f 	.word	0x0801410f
 80140d4:	08014123 	.word	0x08014123
 80140d8:	08014135 	.word	0x08014135
 80140dc:	08014135 	.word	0x08014135
 80140e0:	080140ff 	.word	0x080140ff
    case TM_RATIO:
    	p_owner->__table_number = num;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	68fa      	ldr	r2, [r7, #12]
 80140e8:	639a      	str	r2, [r3, #56]	; 0x38
    	p_owner->__processing = _processingRatio;
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	4a1a      	ldr	r2, [pc, #104]	; (8014158 <_setParam+0xe0>)
 80140ee:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 80140f0:	e027      	b.n	8014142 <_setParam+0xca>

    case TM_ALWAYS:
    	period = 100;
 80140f2:	2364      	movs	r3, #100	; 0x64
 80140f4:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = _processingAlways;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	4a18      	ldr	r2, [pc, #96]	; (801415c <_setParam+0xe4>)
 80140fa:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 80140fc:	e021      	b.n	8014142 <_setParam+0xca>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    case TM_IDLE_MS:
    	p_owner->__pretime = pif_cumulative_timer1ms;
 80140fe:	4b18      	ldr	r3, [pc, #96]	; (8014160 <_setParam+0xe8>)
 8014100:	681a      	ldr	r2, [r3, #0]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	641a      	str	r2, [r3, #64]	; 0x40
    	p_owner->__processing = _processingPeriodMs;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	4a16      	ldr	r2, [pc, #88]	; (8014164 <_setParam+0xec>)
 801410a:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 801410c:	e019      	b.n	8014142 <_setParam+0xca>

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	p_owner->__pretime = (*pif_act_timer1us)();
 801410e:	4b16      	ldr	r3, [pc, #88]	; (8014168 <_setParam+0xf0>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	4798      	blx	r3
 8014114:	4602      	mov	r2, r0
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	641a      	str	r2, [r3, #64]	; 0x40
    	p_owner->__processing = _processingPeriodUs;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	4a13      	ldr	r2, [pc, #76]	; (801416c <_setParam+0xf4>)
 801411e:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014120:	e00f      	b.n	8014142 <_setParam+0xca>

	case TM_EXTERNAL_CUTIN:
		s_task_cutin = p_owner;
 8014122:	4a13      	ldr	r2, [pc, #76]	; (8014170 <_setParam+0xf8>)
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	6013      	str	r3, [r2, #0]
    	period = 0;
 8014128:	2300      	movs	r3, #0
 801412a:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = NULL;
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2200      	movs	r2, #0
 8014130:	631a      	str	r2, [r3, #48]	; 0x30
		break;
 8014132:	e006      	b.n	8014142 <_setParam+0xca>

	case TM_TIMER:
    case TM_EXTERNAL_ORDER:
    	period = 0;
 8014134:	2300      	movs	r3, #0
 8014136:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = NULL;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2200      	movs	r2, #0
 801413c:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 801413e:	e000      	b.n	8014142 <_setParam+0xca>

    default:
    	break;
 8014140:	bf00      	nop
    }

    p_owner->_mode = mode;
 8014142:	78fa      	ldrb	r2, [r7, #3]
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	721a      	strb	r2, [r3, #8]
    p_owner->_period = period;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	883a      	ldrh	r2, [r7, #0]
 801414c:	815a      	strh	r2, [r3, #10]
	return TRUE;
 801414e:	2301      	movs	r3, #1
}
 8014150:	4618      	mov	r0, r3
 8014152:	3710      	adds	r7, #16
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}
 8014158:	08013ed1 	.word	0x08013ed1
 801415c:	08013e01 	.word	0x08013e01
 8014160:	20001c24 	.word	0x20001c24
 8014164:	08013e91 	.word	0x08013e91
 8014168:	20001c34 	.word	0x20001c34
 801416c:	08013e45 	.word	0x08013e45
 8014170:	20001cf8 	.word	0x20001cf8

08014174 <_processingTask>:

static BOOL _processingTask(PifTask* p_owner)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b086      	sub	sp, #24
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
	uint16_t period;
	uint32_t start_time, execute_time;

	if (s_task_stack_ptr >= PIF_TASK_STACK_SIZE) return FALSE;
 801417c:	4b43      	ldr	r3, [pc, #268]	; (801428c <_processingTask+0x118>)
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	2b04      	cmp	r3, #4
 8014182:	dd01      	ble.n	8014188 <_processingTask+0x14>
 8014184:	2300      	movs	r3, #0
 8014186:	e07d      	b.n	8014284 <_processingTask+0x110>

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(TRUE);
 8014188:	4b41      	ldr	r3, [pc, #260]	; (8014290 <_processingTask+0x11c>)
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d003      	beq.n	8014198 <_processingTask+0x24>
 8014190:	4b3f      	ldr	r3, [pc, #252]	; (8014290 <_processingTask+0x11c>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	2001      	movs	r0, #1
 8014196:	4798      	blx	r3
#endif

    s_task_stack[s_task_stack_ptr] = p_owner;
 8014198:	4b3c      	ldr	r3, [pc, #240]	; (801428c <_processingTask+0x118>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	493d      	ldr	r1, [pc, #244]	; (8014294 <_processingTask+0x120>)
 801419e:	687a      	ldr	r2, [r7, #4]
 80141a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	s_task_stack_ptr++;
 80141a4:	4b39      	ldr	r3, [pc, #228]	; (801428c <_processingTask+0x118>)
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	3301      	adds	r3, #1
 80141aa:	4a38      	ldr	r2, [pc, #224]	; (801428c <_processingTask+0x118>)
 80141ac:	6013      	str	r3, [r2, #0]
	p_owner->_running = TRUE;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2201      	movs	r2, #1
 80141b2:	725a      	strb	r2, [r3, #9]
	if (pif_act_timer1us) {
 80141b4:	4b38      	ldr	r3, [pc, #224]	; (8014298 <_processingTask+0x124>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d024      	beq.n	8014206 <_processingTask+0x92>
		start_time = (*pif_act_timer1us)();
 80141bc:	4b36      	ldr	r3, [pc, #216]	; (8014298 <_processingTask+0x124>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	4798      	blx	r3
 80141c2:	6138      	str	r0, [r7, #16]
		period = (*p_owner->__evt_loop)(p_owner);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	4798      	blx	r3
 80141cc:	4603      	mov	r3, r0
 80141ce:	82fb      	strh	r3, [r7, #22]
		execute_time = (*pif_act_timer1us)() - start_time;
 80141d0:	4b31      	ldr	r3, [pc, #196]	; (8014298 <_processingTask+0x124>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	4798      	blx	r3
 80141d6:	4602      	mov	r2, r0
 80141d8:	693b      	ldr	r3, [r7, #16]
 80141da:	1ad3      	subs	r3, r2, r3
 80141dc:	60fb      	str	r3, [r7, #12]
		p_owner->_execution_count++;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	699b      	ldr	r3, [r3, #24]
 80141e2:	1c5a      	adds	r2, r3, #1
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	619a      	str	r2, [r3, #24]
		if (execute_time > p_owner->_max_execution_time) p_owner->_max_execution_time = execute_time;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	691b      	ldr	r3, [r3, #16]
 80141ec:	68fa      	ldr	r2, [r7, #12]
 80141ee:	429a      	cmp	r2, r3
 80141f0:	d902      	bls.n	80141f8 <_processingTask+0x84>
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	68fa      	ldr	r2, [r7, #12]
 80141f6:	611a      	str	r2, [r3, #16]
		p_owner->_total_execution_time += execute_time;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	695a      	ldr	r2, [r3, #20]
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	441a      	add	r2, r3
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	615a      	str	r2, [r3, #20]
 8014204:	e005      	b.n	8014212 <_processingTask+0x9e>
	}
	else {
		period = (*p_owner->__evt_loop)(p_owner);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	4798      	blx	r3
 801420e:	4603      	mov	r3, r0
 8014210:	82fb      	strh	r3, [r7, #22]
	}
	p_owner->_running = FALSE;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2200      	movs	r2, #0
 8014216:	725a      	strb	r2, [r3, #9]
	s_task_stack_ptr--;
 8014218:	4b1c      	ldr	r3, [pc, #112]	; (801428c <_processingTask+0x118>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	3b01      	subs	r3, #1
 801421e:	4a1b      	ldr	r2, [pc, #108]	; (801428c <_processingTask+0x118>)
 8014220:	6013      	str	r3, [r2, #0]
	s_task_stack[s_task_stack_ptr] = NULL;
 8014222:	4b1a      	ldr	r3, [pc, #104]	; (801428c <_processingTask+0x118>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	4a1b      	ldr	r2, [pc, #108]	; (8014294 <_processingTask+0x120>)
 8014228:	2100      	movs	r1, #0
 801422a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(FALSE);
 801422e:	4b18      	ldr	r3, [pc, #96]	; (8014290 <_processingTask+0x11c>)
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d003      	beq.n	801423e <_processingTask+0xca>
 8014236:	4b16      	ldr	r3, [pc, #88]	; (8014290 <_processingTask+0x11c>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	2000      	movs	r0, #0
 801423c:	4798      	blx	r3
#endif

	switch (p_owner->_mode) {
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	7a1b      	ldrb	r3, [r3, #8]
 8014242:	2b04      	cmp	r3, #4
 8014244:	d002      	beq.n	801424c <_processingTask+0xd8>
 8014246:	2b05      	cmp	r3, #5
 8014248:	d00b      	beq.n	8014262 <_processingTask+0xee>
			p_owner->__pretime = (*pif_act_timer1us)();
		}
		break;

	default:
		break;
 801424a:	e01a      	b.n	8014282 <_processingTask+0x10e>
		if (period > 0) {
 801424c:	8afb      	ldrh	r3, [r7, #22]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d014      	beq.n	801427c <_processingTask+0x108>
			p_owner->_period = period;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	8afa      	ldrh	r2, [r7, #22]
 8014256:	815a      	strh	r2, [r3, #10]
			p_owner->__pretime = pif_cumulative_timer1ms;
 8014258:	4b10      	ldr	r3, [pc, #64]	; (801429c <_processingTask+0x128>)
 801425a:	681a      	ldr	r2, [r3, #0]
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8014260:	e00c      	b.n	801427c <_processingTask+0x108>
		if (period > 0) {
 8014262:	8afb      	ldrh	r3, [r7, #22]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d00b      	beq.n	8014280 <_processingTask+0x10c>
			p_owner->_period = period;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	8afa      	ldrh	r2, [r7, #22]
 801426c:	815a      	strh	r2, [r3, #10]
			p_owner->__pretime = (*pif_act_timer1us)();
 801426e:	4b0a      	ldr	r3, [pc, #40]	; (8014298 <_processingTask+0x124>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	4798      	blx	r3
 8014274:	4602      	mov	r2, r0
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 801427a:	e001      	b.n	8014280 <_processingTask+0x10c>
		break;
 801427c:	bf00      	nop
 801427e:	e000      	b.n	8014282 <_processingTask+0x10e>
		break;
 8014280:	bf00      	nop
	}
	return TRUE;
 8014282:	2301      	movs	r3, #1
}
 8014284:	4618      	mov	r0, r3
 8014286:	3718      	adds	r7, #24
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}
 801428c:	20001cf4 	.word	0x20001cf4
 8014290:	20001cc0 	.word	0x20001cc0
 8014294:	20001ce0 	.word	0x20001ce0
 8014298:	20001c34 	.word	0x20001c34
 801429c:	20001c24 	.word	0x20001c24

080142a0 <_checkLoopTime>:

static void _checkLoopTime()
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b084      	sub	sp, #16
 80142a4:	af02      	add	r7, sp, #8
#endif
#ifdef __PIF_DEBUG__
	static uint32_t pretime = 0UL;
	static uint32_t max_loop = 0UL;

	if (pif_act_timer1us) {
 80142a6:	4b46      	ldr	r3, [pc, #280]	; (80143c0 <_checkLoopTime+0x120>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d015      	beq.n	80142da <_checkLoopTime+0x3a>
		value = (*pif_act_timer1us)() - pretime;
 80142ae:	4b44      	ldr	r3, [pc, #272]	; (80143c0 <_checkLoopTime+0x120>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	4798      	blx	r3
 80142b4:	4602      	mov	r2, r0
 80142b6:	4b43      	ldr	r3, [pc, #268]	; (80143c4 <_checkLoopTime+0x124>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	1ad3      	subs	r3, r2, r3
 80142bc:	607b      	str	r3, [r7, #4]
		if (value > pif_performance.__max_loop_time1us) {
 80142be:	4b42      	ldr	r3, [pc, #264]	; (80143c8 <_checkLoopTime+0x128>)
 80142c0:	689b      	ldr	r3, [r3, #8]
 80142c2:	687a      	ldr	r2, [r7, #4]
 80142c4:	429a      	cmp	r2, r3
 80142c6:	d902      	bls.n	80142ce <_checkLoopTime+0x2e>
			pif_performance.__max_loop_time1us = value;
 80142c8:	4a3f      	ldr	r2, [pc, #252]	; (80143c8 <_checkLoopTime+0x128>)
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6093      	str	r3, [r2, #8]
		}
		pretime = (*pif_act_timer1us)();
 80142ce:	4b3c      	ldr	r3, [pc, #240]	; (80143c0 <_checkLoopTime+0x120>)
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	4798      	blx	r3
 80142d4:	4603      	mov	r3, r0
 80142d6:	4a3b      	ldr	r2, [pc, #236]	; (80143c4 <_checkLoopTime+0x124>)
 80142d8:	6013      	str	r3, [r2, #0]
	}
#endif

	pif_performance._count++;
 80142da:	4b3b      	ldr	r3, [pc, #236]	; (80143c8 <_checkLoopTime+0x128>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	3301      	adds	r3, #1
 80142e0:	4a39      	ldr	r2, [pc, #228]	; (80143c8 <_checkLoopTime+0x128>)
 80142e2:	6013      	str	r3, [r2, #0]

	if (pif_performance.__state & 1) {		// 1ms
 80142e4:	4b38      	ldr	r3, [pc, #224]	; (80143c8 <_checkLoopTime+0x128>)
 80142e6:	795b      	ldrb	r3, [r3, #5]
 80142e8:	f003 0301 	and.w	r3, r3, #1
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d022      	beq.n	8014336 <_checkLoopTime+0x96>
		if (timer_10ms) timer_10ms--;
 80142f0:	4b36      	ldr	r3, [pc, #216]	; (80143cc <_checkLoopTime+0x12c>)
 80142f2:	781b      	ldrb	r3, [r3, #0]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d006      	beq.n	8014306 <_checkLoopTime+0x66>
 80142f8:	4b34      	ldr	r3, [pc, #208]	; (80143cc <_checkLoopTime+0x12c>)
 80142fa:	781b      	ldrb	r3, [r3, #0]
 80142fc:	3b01      	subs	r3, #1
 80142fe:	b2da      	uxtb	r2, r3
 8014300:	4b32      	ldr	r3, [pc, #200]	; (80143cc <_checkLoopTime+0x12c>)
 8014302:	701a      	strb	r2, [r3, #0]
 8014304:	e017      	b.n	8014336 <_checkLoopTime+0x96>
		else {
			timer_10ms = 9;
 8014306:	4b31      	ldr	r3, [pc, #196]	; (80143cc <_checkLoopTime+0x12c>)
 8014308:	2209      	movs	r2, #9
 801430a:	701a      	strb	r2, [r3, #0]

			pif_performance._use_rate = 100 - 100 * s_pass_count / s_loop_count;
 801430c:	4b30      	ldr	r3, [pc, #192]	; (80143d0 <_checkLoopTime+0x130>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	2264      	movs	r2, #100	; 0x64
 8014312:	fb03 f202 	mul.w	r2, r3, r2
 8014316:	4b2f      	ldr	r3, [pc, #188]	; (80143d4 <_checkLoopTime+0x134>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	fbb2 f3f3 	udiv	r3, r2, r3
 801431e:	b2db      	uxtb	r3, r3
 8014320:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8014324:	b2da      	uxtb	r2, r3
 8014326:	4b28      	ldr	r3, [pc, #160]	; (80143c8 <_checkLoopTime+0x128>)
 8014328:	711a      	strb	r2, [r3, #4]
			s_loop_count = 0UL;
 801432a:	4b2a      	ldr	r3, [pc, #168]	; (80143d4 <_checkLoopTime+0x134>)
 801432c:	2200      	movs	r2, #0
 801432e:	601a      	str	r2, [r3, #0]
			s_pass_count = 0UL;
 8014330:	4b27      	ldr	r3, [pc, #156]	; (80143d0 <_checkLoopTime+0x130>)
 8014332:	2200      	movs	r2, #0
 8014334:	601a      	str	r2, [r3, #0]
		}
	}

	if (pif_performance.__state & 2) {		// 1sec
 8014336:	4b24      	ldr	r3, [pc, #144]	; (80143c8 <_checkLoopTime+0x128>)
 8014338:	795b      	ldrb	r3, [r3, #5]
 801433a:	f003 0302 	and.w	r3, r3, #2
 801433e:	2b00      	cmp	r3, #0
 8014340:	d027      	beq.n	8014392 <_checkLoopTime+0xf2>
#ifdef __PIF_DEBUG__
		if (pif_performance.__max_loop_time1us > max_loop) max_loop = pif_performance.__max_loop_time1us;
 8014342:	4b21      	ldr	r3, [pc, #132]	; (80143c8 <_checkLoopTime+0x128>)
 8014344:	689a      	ldr	r2, [r3, #8]
 8014346:	4b24      	ldr	r3, [pc, #144]	; (80143d8 <_checkLoopTime+0x138>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	429a      	cmp	r2, r3
 801434c:	d903      	bls.n	8014356 <_checkLoopTime+0xb6>
 801434e:	4b1e      	ldr	r3, [pc, #120]	; (80143c8 <_checkLoopTime+0x128>)
 8014350:	689b      	ldr	r3, [r3, #8]
 8014352:	4a21      	ldr	r2, [pc, #132]	; (80143d8 <_checkLoopTime+0x138>)
 8014354:	6013      	str	r3, [r2, #0]
	#ifndef __PIF_NO_LOG__
		if (pif_log_flag.bt.performance) {
 8014356:	4b21      	ldr	r3, [pc, #132]	; (80143dc <_checkLoopTime+0x13c>)
 8014358:	781b      	ldrb	r3, [r3, #0]
 801435a:	f003 0301 	and.w	r3, r3, #1
 801435e:	b2db      	uxtb	r3, r3
 8014360:	2b00      	cmp	r3, #0
 8014362:	d010      	beq.n	8014386 <_checkLoopTime+0xe6>
			value = 1000000L / pif_performance._count;
 8014364:	4b18      	ldr	r3, [pc, #96]	; (80143c8 <_checkLoopTime+0x128>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	4a1d      	ldr	r2, [pc, #116]	; (80143e0 <_checkLoopTime+0x140>)
 801436a:	fbb2 f3f3 	udiv	r3, r2, r3
 801436e:	607b      	str	r3, [r7, #4]
        	pifLog_Printf(LT_INFO, "LT:%uns(%lur/s) MLT=%luus", value, pif_performance._count, pif_performance.__max_loop_time1us);
 8014370:	4b15      	ldr	r3, [pc, #84]	; (80143c8 <_checkLoopTime+0x128>)
 8014372:	681a      	ldr	r2, [r3, #0]
 8014374:	4b14      	ldr	r3, [pc, #80]	; (80143c8 <_checkLoopTime+0x128>)
 8014376:	689b      	ldr	r3, [r3, #8]
 8014378:	9300      	str	r3, [sp, #0]
 801437a:	4613      	mov	r3, r2
 801437c:	687a      	ldr	r2, [r7, #4]
 801437e:	4919      	ldr	r1, [pc, #100]	; (80143e4 <_checkLoopTime+0x144>)
 8014380:	2002      	movs	r0, #2
 8014382:	f7ff f80f 	bl	80133a4 <pifLog_Printf>
		}
	#endif
		pif_performance.__max_loop_time1us = 0UL;
 8014386:	4b10      	ldr	r3, [pc, #64]	; (80143c8 <_checkLoopTime+0x128>)
 8014388:	2200      	movs	r2, #0
 801438a:	609a      	str	r2, [r3, #8]
			value = 1000000L / pif_performance._count;
        	pifLog_Printf(LT_INFO, "LT:%uns(%lur/s)", value, pif_performance._count);
        }
	#endif
#endif
    	pif_performance._count = 0;
 801438c:	4b0e      	ldr	r3, [pc, #56]	; (80143c8 <_checkLoopTime+0x128>)
 801438e:	2200      	movs	r2, #0
 8014390:	601a      	str	r2, [r3, #0]
	}

#ifdef __PIF_DEBUG__
	if (pif_performance.__state & 4) {		// 1min
 8014392:	4b0d      	ldr	r3, [pc, #52]	; (80143c8 <_checkLoopTime+0x128>)
 8014394:	795b      	ldrb	r3, [r3, #5]
 8014396:	f003 0304 	and.w	r3, r3, #4
 801439a:	2b00      	cmp	r3, #0
 801439c:	d009      	beq.n	80143b2 <_checkLoopTime+0x112>
	#ifndef __PIF_NO_LOG__
    	pifLog_Printf(LT_INFO, "MLT=%luus", max_loop);
 801439e:	4b0e      	ldr	r3, [pc, #56]	; (80143d8 <_checkLoopTime+0x138>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	461a      	mov	r2, r3
 80143a4:	4910      	ldr	r1, [pc, #64]	; (80143e8 <_checkLoopTime+0x148>)
 80143a6:	2002      	movs	r0, #2
 80143a8:	f7fe fffc 	bl	80133a4 <pifLog_Printf>
	#endif
		max_loop = 0UL;
 80143ac:	4b0a      	ldr	r3, [pc, #40]	; (80143d8 <_checkLoopTime+0x138>)
 80143ae:	2200      	movs	r2, #0
 80143b0:	601a      	str	r2, [r3, #0]
    }
#endif

	pif_performance.__state = 0;
 80143b2:	4b05      	ldr	r3, [pc, #20]	; (80143c8 <_checkLoopTime+0x128>)
 80143b4:	2200      	movs	r2, #0
 80143b6:	715a      	strb	r2, [r3, #5]
}
 80143b8:	bf00      	nop
 80143ba:	3708      	adds	r7, #8
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}
 80143c0:	20001c34 	.word	0x20001c34
 80143c4:	20001d94 	.word	0x20001d94
 80143c8:	20001c28 	.word	0x20001c28
 80143cc:	20001d98 	.word	0x20001d98
 80143d0:	20001d88 	.word	0x20001d88
 80143d4:	20001d84 	.word	0x20001d84
 80143d8:	20001d9c 	.word	0x20001d9c
 80143dc:	20001c40 	.word	0x20001c40
 80143e0:	000f4240 	.word	0x000f4240
 80143e4:	08027558 	.word	0x08027558
 80143e8:	08027574 	.word	0x08027574

080143ec <pifTask_Init>:


void pifTask_Init(PifTask* p_owner)
{
 80143ec:	b480      	push	{r7}
 80143ee:	b083      	sub	sp, #12
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
    pif_id++;
 80143f4:	4b07      	ldr	r3, [pc, #28]	; (8014414 <pifTask_Init+0x28>)
 80143f6:	881b      	ldrh	r3, [r3, #0]
 80143f8:	3301      	adds	r3, #1
 80143fa:	b29a      	uxth	r2, r3
 80143fc:	4b05      	ldr	r3, [pc, #20]	; (8014414 <pifTask_Init+0x28>)
 80143fe:	801a      	strh	r2, [r3, #0]
    p_owner->_id = pif_id;
 8014400:	4b04      	ldr	r3, [pc, #16]	; (8014414 <pifTask_Init+0x28>)
 8014402:	881a      	ldrh	r2, [r3, #0]
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	80da      	strh	r2, [r3, #6]
}
 8014408:	bf00      	nop
 801440a:	370c      	adds	r7, #12
 801440c:	46bd      	mov	sp, r7
 801440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014412:	4770      	bx	lr
 8014414:	2000011c 	.word	0x2000011c

08014418 <pifTask_ChangeMode>:

BOOL pifTask_ChangeMode(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b082      	sub	sp, #8
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
 8014420:	460b      	mov	r3, r1
 8014422:	70fb      	strb	r3, [r7, #3]
 8014424:	4613      	mov	r3, r2
 8014426:	803b      	strh	r3, [r7, #0]
	if (mode == p_owner->_mode) return TRUE;
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	7a1a      	ldrb	r2, [r3, #8]
 801442c:	78fb      	ldrb	r3, [r7, #3]
 801442e:	429a      	cmp	r2, r3
 8014430:	d101      	bne.n	8014436 <pifTask_ChangeMode+0x1e>
 8014432:	2301      	movs	r3, #1
 8014434:	e028      	b.n	8014488 <pifTask_ChangeMode+0x70>

	if (p_owner->_mode == TM_EXTERNAL_CUTIN) s_task_cutin = NULL;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	7a1b      	ldrb	r3, [r3, #8]
 801443a:	2b06      	cmp	r3, #6
 801443c:	d102      	bne.n	8014444 <pifTask_ChangeMode+0x2c>
 801443e:	4b14      	ldr	r3, [pc, #80]	; (8014490 <pifTask_ChangeMode+0x78>)
 8014440:	2200      	movs	r2, #0
 8014442:	601a      	str	r2, [r3, #0]

	if (!_checkParam(&mode, period)) return FALSE;
 8014444:	883a      	ldrh	r2, [r7, #0]
 8014446:	1cfb      	adds	r3, r7, #3
 8014448:	4611      	mov	r1, r2
 801444a:	4618      	mov	r0, r3
 801444c:	f7ff fda6 	bl	8013f9c <_checkParam>
 8014450:	4603      	mov	r3, r0
 8014452:	2b00      	cmp	r3, #0
 8014454:	d101      	bne.n	801445a <pifTask_ChangeMode+0x42>
 8014456:	2300      	movs	r3, #0
 8014458:	e016      	b.n	8014488 <pifTask_ChangeMode+0x70>

	switch (p_owner->_mode) {
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	7a1b      	ldrb	r3, [r3, #8]
 801445e:	2b01      	cmp	r3, #1
 8014460:	d805      	bhi.n	801446e <pifTask_ChangeMode+0x56>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_owner->__table_number);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014466:	4618      	mov	r0, r3
 8014468:	f7ff fc9c 	bl	8013da4 <_resetTable>
		break;
 801446c:	e000      	b.n	8014470 <pifTask_ChangeMode+0x58>

	default:
		break;
 801446e:	bf00      	nop
	}

	if (!_setParam(p_owner, mode, period)) return FALSE;
 8014470:	78fb      	ldrb	r3, [r7, #3]
 8014472:	883a      	ldrh	r2, [r7, #0]
 8014474:	4619      	mov	r1, r3
 8014476:	6878      	ldr	r0, [r7, #4]
 8014478:	f7ff fdfe 	bl	8014078 <_setParam>
 801447c:	4603      	mov	r3, r0
 801447e:	2b00      	cmp	r3, #0
 8014480:	d101      	bne.n	8014486 <pifTask_ChangeMode+0x6e>
 8014482:	2300      	movs	r3, #0
 8014484:	e000      	b.n	8014488 <pifTask_ChangeMode+0x70>

    return TRUE;
 8014486:	2301      	movs	r3, #1
}
 8014488:	4618      	mov	r0, r3
 801448a:	3708      	adds	r7, #8
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}
 8014490:	20001cf8 	.word	0x20001cf8

08014494 <pifTask_ChangePeriod>:

BOOL pifTask_ChangePeriod(PifTask* p_owner, uint16_t period)
{
 8014494:	b480      	push	{r7}
 8014496:	b083      	sub	sp, #12
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
 801449c:	460b      	mov	r3, r1
 801449e:	807b      	strh	r3, [r7, #2]
	switch (p_owner->_mode) {
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	7a1b      	ldrb	r3, [r3, #8]
 80144a4:	2b03      	cmp	r3, #3
 80144a6:	dc02      	bgt.n	80144ae <pifTask_ChangePeriod+0x1a>
 80144a8:	2b02      	cmp	r3, #2
 80144aa:	da02      	bge.n	80144b2 <pifTask_ChangePeriod+0x1e>
 80144ac:	e007      	b.n	80144be <pifTask_ChangePeriod+0x2a>
 80144ae:	2b09      	cmp	r3, #9
 80144b0:	d105      	bne.n	80144be <pifTask_ChangePeriod+0x2a>
	case TM_PERIOD_MS:
	case TM_PERIOD_US:
	case TM_IDLE_MS:
		p_owner->_period = period;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	887a      	ldrh	r2, [r7, #2]
 80144b6:	815a      	strh	r2, [r3, #10]
		break;
 80144b8:	bf00      	nop

	default:
		pif_error = E_CANNOT_USE;
		return FALSE;
	}
	return TRUE;
 80144ba:	2301      	movs	r3, #1
 80144bc:	e003      	b.n	80144c6 <pifTask_ChangePeriod+0x32>
		pif_error = E_CANNOT_USE;
 80144be:	4b05      	ldr	r3, [pc, #20]	; (80144d4 <pifTask_ChangePeriod+0x40>)
 80144c0:	2209      	movs	r2, #9
 80144c2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80144c4:	2300      	movs	r3, #0
}
 80144c6:	4618      	mov	r0, r3
 80144c8:	370c      	adds	r7, #12
 80144ca:	46bd      	mov	sp, r7
 80144cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d0:	4770      	bx	lr
 80144d2:	bf00      	nop
 80144d4:	20001c0d 	.word	0x20001c0d

080144d8 <pifTask_SetTrigger>:

BOOL pifTask_SetTrigger(PifTask* p_owner)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b082      	sub	sp, #8
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
	if (p_owner) {
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d014      	beq.n	8014510 <pifTask_SetTrigger+0x38>
		if (pif_act_timer1us) p_owner->__trigger_time = (*pif_act_timer1us)();
 80144e6:	4b0d      	ldr	r3, [pc, #52]	; (801451c <pifTask_SetTrigger+0x44>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d006      	beq.n	80144fc <pifTask_SetTrigger+0x24>
 80144ee:	4b0b      	ldr	r3, [pc, #44]	; (801451c <pifTask_SetTrigger+0x44>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	4798      	blx	r3
 80144f4:	4602      	mov	r2, r0
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	649a      	str	r2, [r3, #72]	; 0x48
 80144fa:	e003      	b.n	8014504 <pifTask_SetTrigger+0x2c>
		else p_owner->__trigger_time = pif_cumulative_timer1ms;
 80144fc:	4b08      	ldr	r3, [pc, #32]	; (8014520 <pifTask_SetTrigger+0x48>)
 80144fe:	681a      	ldr	r2, [r3, #0]
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	649a      	str	r2, [r3, #72]	; 0x48
		p_owner->__trigger = TRUE;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	2201      	movs	r2, #1
 8014508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		return TRUE;
 801450c:	2301      	movs	r3, #1
 801450e:	e000      	b.n	8014512 <pifTask_SetTrigger+0x3a>
	}
	return FALSE;
 8014510:	2300      	movs	r3, #0
}
 8014512:	4618      	mov	r0, r3
 8014514:	3708      	adds	r7, #8
 8014516:	46bd      	mov	sp, r7
 8014518:	bd80      	pop	{r7, pc}
 801451a:	bf00      	nop
 801451c:	20001c34 	.word	0x20001c34
 8014520:	20001c24 	.word	0x20001c24

08014524 <pifTask_GetDeltaTime>:
		break;
	}
}

uint32_t pifTask_GetDeltaTime(PifTask* p_owner, BOOL reset)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b084      	sub	sp, #16
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	460b      	mov	r3, r1
 801452e:	70fb      	strb	r3, [r7, #3]
	uint32_t currect, delta;

    if (!pif_act_timer1us) {
 8014530:	4b17      	ldr	r3, [pc, #92]	; (8014590 <pifTask_GetDeltaTime+0x6c>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d107      	bne.n	8014548 <pifTask_GetDeltaTime+0x24>
		currect = pif_cumulative_timer1ms * 1000;
 8014538:	4b16      	ldr	r3, [pc, #88]	; (8014594 <pifTask_GetDeltaTime+0x70>)
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014540:	fb02 f303 	mul.w	r3, r2, r3
 8014544:	60fb      	str	r3, [r7, #12]
 8014546:	e003      	b.n	8014550 <pifTask_GetDeltaTime+0x2c>
	}
	else {
		currect = (*pif_act_timer1us)();
 8014548:	4b11      	ldr	r3, [pc, #68]	; (8014590 <pifTask_GetDeltaTime+0x6c>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	4798      	blx	r3
 801454e:	60f8      	str	r0, [r7, #12]
	}
	delta = currect - p_owner->__last_execute_time;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014554:	68fa      	ldr	r2, [r7, #12]
 8014556:	1ad3      	subs	r3, r2, r3
 8014558:	60bb      	str	r3, [r7, #8]
	if (reset) {
 801455a:	78fb      	ldrb	r3, [r7, #3]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d011      	beq.n	8014584 <pifTask_GetDeltaTime+0x60>
		if (p_owner->__last_execute_time) {
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014564:	2b00      	cmp	r3, #0
 8014566:	d00a      	beq.n	801457e <pifTask_GetDeltaTime+0x5a>
			p_owner->_total_period_time += delta;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	69da      	ldr	r2, [r3, #28]
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	441a      	add	r2, r3
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	61da      	str	r2, [r3, #28]
			p_owner->_period_count++;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	6a1b      	ldr	r3, [r3, #32]
 8014578:	1c5a      	adds	r2, r3, #1
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	621a      	str	r2, [r3, #32]
		}
		p_owner->__last_execute_time = currect;
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	68fa      	ldr	r2, [r7, #12]
 8014582:	645a      	str	r2, [r3, #68]	; 0x44
	}
	return delta;
 8014584:	68bb      	ldr	r3, [r7, #8]
}
 8014586:	4618      	mov	r0, r3
 8014588:	3710      	adds	r7, #16
 801458a:	46bd      	mov	sp, r7
 801458c:	bd80      	pop	{r7, pc}
 801458e:	bf00      	nop
 8014590:	20001c34 	.word	0x20001c34
 8014594:	20001c24 	.word	0x20001c24

08014598 <pifTaskManager_Init>:


BOOL pifTaskManager_Init(int max_count)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b082      	sub	sp, #8
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
	if (!pifFixList_Init(&s_tasks, sizeof(PifTask), max_count)) return FALSE;
 80145a0:	687a      	ldr	r2, [r7, #4]
 80145a2:	2158      	movs	r1, #88	; 0x58
 80145a4:	480b      	ldr	r0, [pc, #44]	; (80145d4 <pifTaskManager_Init+0x3c>)
 80145a6:	f7fd ffcd 	bl	8012544 <pifFixList_Init>
 80145aa:	4603      	mov	r3, r0
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d101      	bne.n	80145b4 <pifTaskManager_Init+0x1c>
 80145b0:	2300      	movs	r3, #0
 80145b2:	e00b      	b.n	80145cc <pifTaskManager_Init+0x34>
	s_it_current = NULL;
 80145b4:	4b08      	ldr	r3, [pc, #32]	; (80145d8 <pifTaskManager_Init+0x40>)
 80145b6:	2200      	movs	r2, #0
 80145b8:	601a      	str	r2, [r3, #0]

	s_table_number = 0L;
 80145ba:	4b08      	ldr	r3, [pc, #32]	; (80145dc <pifTaskManager_Init+0x44>)
 80145bc:	2200      	movs	r2, #0
 80145be:	601a      	str	r2, [r3, #0]
	memset(s_table, 0, sizeof(s_table));
 80145c0:	2280      	movs	r2, #128	; 0x80
 80145c2:	2100      	movs	r1, #0
 80145c4:	4806      	ldr	r0, [pc, #24]	; (80145e0 <pifTaskManager_Init+0x48>)
 80145c6:	f00e fa67 	bl	8022a98 <memset>
	return TRUE;
 80145ca:	2301      	movs	r3, #1
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	3708      	adds	r7, #8
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}
 80145d4:	20001cc4 	.word	0x20001cc4
 80145d8:	20001cdc 	.word	0x20001cdc
 80145dc:	20001cfc 	.word	0x20001cfc
 80145e0:	20001d00 	.word	0x20001d00

080145e4 <pifTaskManager_Add>:
{
	pifFixList_Clear(&s_tasks, NULL);
}

PifTask* pifTaskManager_Add(PifTaskMode mode, uint16_t period, PifEvtTaskLoop evt_loop, void* p_client, BOOL start)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b086      	sub	sp, #24
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	60ba      	str	r2, [r7, #8]
 80145ec:	607b      	str	r3, [r7, #4]
 80145ee:	4603      	mov	r3, r0
 80145f0:	73fb      	strb	r3, [r7, #15]
 80145f2:	460b      	mov	r3, r1
 80145f4:	81bb      	strh	r3, [r7, #12]
	if (!evt_loop) {
 80145f6:	68bb      	ldr	r3, [r7, #8]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d104      	bne.n	8014606 <pifTaskManager_Add+0x22>
        pif_error = E_INVALID_PARAM;
 80145fc:	4b2a      	ldr	r3, [pc, #168]	; (80146a8 <pifTaskManager_Add+0xc4>)
 80145fe:	2201      	movs	r2, #1
 8014600:	701a      	strb	r2, [r3, #0]
	    return NULL;
 8014602:	2300      	movs	r3, #0
 8014604:	e04b      	b.n	801469e <pifTaskManager_Add+0xba>
	}

	if (!_checkParam(&mode, period)) return NULL;
 8014606:	89ba      	ldrh	r2, [r7, #12]
 8014608:	f107 030f 	add.w	r3, r7, #15
 801460c:	4611      	mov	r1, r2
 801460e:	4618      	mov	r0, r3
 8014610:	f7ff fcc4 	bl	8013f9c <_checkParam>
 8014614:	4603      	mov	r3, r0
 8014616:	2b00      	cmp	r3, #0
 8014618:	d101      	bne.n	801461e <pifTaskManager_Add+0x3a>
 801461a:	2300      	movs	r3, #0
 801461c:	e03f      	b.n	801469e <pifTaskManager_Add+0xba>

	PifTask* p_owner = (PifTask*)pifFixList_AddFirst(&s_tasks);
 801461e:	4823      	ldr	r0, [pc, #140]	; (80146ac <pifTaskManager_Add+0xc8>)
 8014620:	f7fe f823 	bl	801266a <pifFixList_AddFirst>
 8014624:	6178      	str	r0, [r7, #20]
	if (!p_owner) return NULL;
 8014626:	697b      	ldr	r3, [r7, #20]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d101      	bne.n	8014630 <pifTaskManager_Add+0x4c>
 801462c:	2300      	movs	r3, #0
 801462e:	e036      	b.n	801469e <pifTaskManager_Add+0xba>

	pifTask_Init(p_owner);
 8014630:	6978      	ldr	r0, [r7, #20]
 8014632:	f7ff fedb 	bl	80143ec <pifTask_Init>

	if (!_setParam(p_owner, mode, period)) goto fail;
 8014636:	7bfb      	ldrb	r3, [r7, #15]
 8014638:	89ba      	ldrh	r2, [r7, #12]
 801463a:	4619      	mov	r1, r3
 801463c:	6978      	ldr	r0, [r7, #20]
 801463e:	f7ff fd1b 	bl	8014078 <_setParam>
 8014642:	4603      	mov	r3, r0
 8014644:	2b00      	cmp	r3, #0
 8014646:	d021      	beq.n	801468c <pifTaskManager_Add+0xa8>

    p_owner->__evt_loop = evt_loop;
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	68ba      	ldr	r2, [r7, #8]
 801464c:	655a      	str	r2, [r3, #84]	; 0x54
    p_owner->_p_client = p_client;
 801464e:	697b      	ldr	r3, [r7, #20]
 8014650:	687a      	ldr	r2, [r7, #4]
 8014652:	60da      	str	r2, [r3, #12]
    p_owner->pause = (mode != TM_EXTERNAL_ORDER && mode != TM_EXTERNAL_CUTIN) ? !start : TRUE;
 8014654:	7bfb      	ldrb	r3, [r7, #15]
 8014656:	2b07      	cmp	r3, #7
 8014658:	d006      	beq.n	8014668 <pifTaskManager_Add+0x84>
 801465a:	7bfb      	ldrb	r3, [r7, #15]
 801465c:	2b06      	cmp	r3, #6
 801465e:	d003      	beq.n	8014668 <pifTaskManager_Add+0x84>
 8014660:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d101      	bne.n	801466c <pifTaskManager_Add+0x88>
 8014668:	2301      	movs	r3, #1
 801466a:	e000      	b.n	801466e <pifTaskManager_Add+0x8a>
 801466c:	2300      	movs	r3, #0
 801466e:	b2da      	uxtb	r2, r3
 8014670:	697b      	ldr	r3, [r7, #20]
 8014672:	711a      	strb	r2, [r3, #4]
    if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 8014674:	4b0e      	ldr	r3, [pc, #56]	; (80146b0 <pifTaskManager_Add+0xcc>)
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d105      	bne.n	8014688 <pifTaskManager_Add+0xa4>
 801467c:	480b      	ldr	r0, [pc, #44]	; (80146ac <pifTaskManager_Add+0xc8>)
 801467e:	f7fe f868 	bl	8012752 <pifFixList_Begin>
 8014682:	4603      	mov	r3, r0
 8014684:	4a0a      	ldr	r2, [pc, #40]	; (80146b0 <pifTaskManager_Add+0xcc>)
 8014686:	6013      	str	r3, [r2, #0]
    return p_owner;
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	e008      	b.n	801469e <pifTaskManager_Add+0xba>
	if (!_setParam(p_owner, mode, period)) goto fail;
 801468c:	bf00      	nop

fail:
	if (p_owner) {
 801468e:	697b      	ldr	r3, [r7, #20]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d003      	beq.n	801469c <pifTaskManager_Add+0xb8>
		pifFixList_Remove(&s_tasks, p_owner);
 8014694:	6979      	ldr	r1, [r7, #20]
 8014696:	4805      	ldr	r0, [pc, #20]	; (80146ac <pifTaskManager_Add+0xc8>)
 8014698:	f7fe f81b 	bl	80126d2 <pifFixList_Remove>
	}
	return NULL;
 801469c:	2300      	movs	r3, #0
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3718      	adds	r7, #24
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	bf00      	nop
 80146a8:	20001c0d 	.word	0x20001c0d
 80146ac:	20001cc4 	.word	0x20001cc4
 80146b0:	20001cdc 	.word	0x20001cdc

080146b4 <pifTaskManager_Remove>:

void pifTaskManager_Remove(PifTask* p_task)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b082      	sub	sp, #8
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
	if (p_task == (PifTask*)s_it_current->data) s_it_current = NULL;
 80146bc:	4b17      	ldr	r3, [pc, #92]	; (801471c <pifTaskManager_Remove+0x68>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	3308      	adds	r3, #8
 80146c2:	687a      	ldr	r2, [r7, #4]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d102      	bne.n	80146ce <pifTaskManager_Remove+0x1a>
 80146c8:	4b14      	ldr	r3, [pc, #80]	; (801471c <pifTaskManager_Remove+0x68>)
 80146ca:	2200      	movs	r2, #0
 80146cc:	601a      	str	r2, [r3, #0]

	switch (p_task->_mode) {
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	7a1b      	ldrb	r3, [r3, #8]
 80146d2:	2b01      	cmp	r3, #1
 80146d4:	d805      	bhi.n	80146e2 <pifTaskManager_Remove+0x2e>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_task->__table_number);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146da:	4618      	mov	r0, r3
 80146dc:	f7ff fb62 	bl	8013da4 <_resetTable>
		break;
 80146e0:	e000      	b.n	80146e4 <pifTaskManager_Remove+0x30>

	default:
		break;
 80146e2:	bf00      	nop
	}
	pifFixList_Remove(&s_tasks, p_task);
 80146e4:	6879      	ldr	r1, [r7, #4]
 80146e6:	480e      	ldr	r0, [pc, #56]	; (8014720 <pifTaskManager_Remove+0x6c>)
 80146e8:	f7fd fff3 	bl	80126d2 <pifFixList_Remove>

	if (!pifFixList_Count(&s_tasks)) s_it_current = NULL;
 80146ec:	480c      	ldr	r0, [pc, #48]	; (8014720 <pifTaskManager_Remove+0x6c>)
 80146ee:	f7fe f824 	bl	801273a <pifFixList_Count>
 80146f2:	4603      	mov	r3, r0
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d103      	bne.n	8014700 <pifTaskManager_Remove+0x4c>
 80146f8:	4b08      	ldr	r3, [pc, #32]	; (801471c <pifTaskManager_Remove+0x68>)
 80146fa:	2200      	movs	r2, #0
 80146fc:	601a      	str	r2, [r3, #0]
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
}
 80146fe:	e009      	b.n	8014714 <pifTaskManager_Remove+0x60>
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 8014700:	4b06      	ldr	r3, [pc, #24]	; (801471c <pifTaskManager_Remove+0x68>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d105      	bne.n	8014714 <pifTaskManager_Remove+0x60>
 8014708:	4805      	ldr	r0, [pc, #20]	; (8014720 <pifTaskManager_Remove+0x6c>)
 801470a:	f7fe f822 	bl	8012752 <pifFixList_Begin>
 801470e:	4603      	mov	r3, r0
 8014710:	4a02      	ldr	r2, [pc, #8]	; (801471c <pifTaskManager_Remove+0x68>)
 8014712:	6013      	str	r3, [r2, #0]
}
 8014714:	bf00      	nop
 8014716:	3708      	adds	r7, #8
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}
 801471c:	20001cdc 	.word	0x20001cdc
 8014720:	20001cc4 	.word	0x20001cc4

08014724 <pifTaskManager_Count>:

int pifTaskManager_Count()
{
 8014724:	b580      	push	{r7, lr}
 8014726:	af00      	add	r7, sp, #0
	return pifFixList_Count(&s_tasks);
 8014728:	4802      	ldr	r0, [pc, #8]	; (8014734 <pifTaskManager_Count+0x10>)
 801472a:	f7fe f806 	bl	801273a <pifFixList_Count>
 801472e:	4603      	mov	r3, r0
}
 8014730:	4618      	mov	r0, r3
 8014732:	bd80      	pop	{r7, pc}
 8014734:	20001cc4 	.word	0x20001cc4

08014738 <pifTaskManager_Loop>:

void pifTaskManager_Loop()
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b08a      	sub	sp, #40	; 0x28
 801473c:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 801473e:	2300      	movs	r3, #0
 8014740:	627b      	str	r3, [r7, #36]	; 0x24
	PifTask* p_idle = NULL;
 8014742:	2300      	movs	r3, #0
 8014744:	623b      	str	r3, [r7, #32]
	PifFixListIterator it_idle = NULL;
 8014746:	2300      	movs	r3, #0
 8014748:	61fb      	str	r3, [r7, #28]
	int i, n, t = 0, count = pifFixList_Count(&s_tasks);
 801474a:	2300      	movs	r3, #0
 801474c:	613b      	str	r3, [r7, #16]
 801474e:	487e      	ldr	r0, [pc, #504]	; (8014948 <pifTaskManager_Loop+0x210>)
 8014750:	f7fd fff3 	bl	801273a <pifFixList_Count>
 8014754:	60b8      	str	r0, [r7, #8]
	BOOL trigger = FALSE;
 8014756:	2300      	movs	r3, #0
 8014758:	73fb      	strb	r3, [r7, #15]

	if (pif_act_timer1us) pif_timer1us = (*pif_act_timer1us)();
 801475a:	4b7c      	ldr	r3, [pc, #496]	; (801494c <pifTaskManager_Loop+0x214>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d005      	beq.n	801476e <pifTaskManager_Loop+0x36>
 8014762:	4b7a      	ldr	r3, [pc, #488]	; (801494c <pifTaskManager_Loop+0x214>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	4798      	blx	r3
 8014768:	4603      	mov	r3, r0
 801476a:	4a79      	ldr	r2, [pc, #484]	; (8014950 <pifTaskManager_Loop+0x218>)
 801476c:	6013      	str	r3, [r2, #0]

	if (!s_it_current) {
 801476e:	4b79      	ldr	r3, [pc, #484]	; (8014954 <pifTaskManager_Loop+0x21c>)
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d109      	bne.n	801478a <pifTaskManager_Loop+0x52>
		if (!count) return;
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	2b00      	cmp	r3, #0
 801477a:	f000 80e1 	beq.w	8014940 <pifTaskManager_Loop+0x208>
		s_it_current = pifFixList_Begin(&s_tasks);
 801477e:	4872      	ldr	r0, [pc, #456]	; (8014948 <pifTaskManager_Loop+0x210>)
 8014780:	f7fd ffe7 	bl	8012752 <pifFixList_Begin>
 8014784:	4603      	mov	r3, r0
 8014786:	4a73      	ldr	r2, [pc, #460]	; (8014954 <pifTaskManager_Loop+0x21c>)
 8014788:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 801478a:	4b73      	ldr	r3, [pc, #460]	; (8014958 <pifTaskManager_Loop+0x220>)
 801478c:	681a      	ldr	r2, [r3, #0]
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	4413      	add	r3, r2
 8014792:	4a71      	ldr	r2, [pc, #452]	; (8014958 <pifTaskManager_Loop+0x220>)
 8014794:	6013      	str	r3, [r2, #0]
	if (s_task_cutin && s_task_cutin->__trigger) {
 8014796:	4b71      	ldr	r3, [pc, #452]	; (801495c <pifTaskManager_Loop+0x224>)
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d012      	beq.n	80147c4 <pifTaskManager_Loop+0x8c>
 801479e:	4b6f      	ldr	r3, [pc, #444]	; (801495c <pifTaskManager_Loop+0x224>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d00c      	beq.n	80147c4 <pifTaskManager_Loop+0x8c>
		s_task_cutin->__trigger = FALSE;
 80147aa:	4b6c      	ldr	r3, [pc, #432]	; (801495c <pifTaskManager_Loop+0x224>)
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	2200      	movs	r2, #0
 80147b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		p_select = s_task_cutin;
 80147b4:	4b69      	ldr	r3, [pc, #420]	; (801495c <pifTaskManager_Loop+0x224>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	627b      	str	r3, [r7, #36]	; 0x24
		trigger = TRUE;
 80147ba:	2301      	movs	r3, #1
 80147bc:	73fb      	strb	r3, [r7, #15]
		i = 1;
 80147be:	2301      	movs	r3, #1
 80147c0:	61bb      	str	r3, [r7, #24]
 80147c2:	e062      	b.n	801488a <pifTaskManager_Loop+0x152>
	}
	else {
		for (i = n = 0; i < count && !p_select; i++) {
 80147c4:	2300      	movs	r3, #0
 80147c6:	617b      	str	r3, [r7, #20]
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	61bb      	str	r3, [r7, #24]
 80147cc:	e056      	b.n	801487c <pifTaskManager_Loop+0x144>
			p_owner = (PifTask*)s_it_current->data;
 80147ce:	4b61      	ldr	r3, [pc, #388]	; (8014954 <pifTaskManager_Loop+0x21c>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	3308      	adds	r3, #8
 80147d4:	607b      	str	r3, [r7, #4]

			if (p_owner->__trigger) {
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d008      	beq.n	80147f2 <pifTaskManager_Loop+0xba>
				p_owner->__trigger = FALSE;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2200      	movs	r2, #0
 80147e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				p_select = p_owner;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	627b      	str	r3, [r7, #36]	; 0x24
				trigger = TRUE;
 80147ec:	2301      	movs	r3, #1
 80147ee:	73fb      	strb	r3, [r7, #15]
 80147f0:	e02d      	b.n	801484e <pifTaskManager_Loop+0x116>
			}
			else if (!p_owner->pause) {
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	791b      	ldrb	r3, [r3, #4]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d129      	bne.n	801484e <pifTaskManager_Loop+0x116>
				if (p_owner->_mode == TM_TIMER) {
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	7a1b      	ldrb	r3, [r3, #8]
 80147fe:	2b08      	cmp	r3, #8
 8014800:	d107      	bne.n	8014812 <pifTaskManager_Loop+0xda>
					(*p_owner->__evt_loop)(p_owner);
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	4798      	blx	r3
					t++;
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	3301      	adds	r3, #1
 801480e:	613b      	str	r3, [r7, #16]
 8014810:	e01d      	b.n	801484e <pifTaskManager_Loop+0x116>
				}
				else if (p_owner->__processing) {
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014816:	2b00      	cmp	r3, #0
 8014818:	d019      	beq.n	801484e <pifTaskManager_Loop+0x116>
					if (p_owner->_mode == TM_IDLE_MS) {
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	7a1b      	ldrb	r3, [r3, #8]
 801481e:	2b09      	cmp	r3, #9
 8014820:	d110      	bne.n	8014844 <pifTaskManager_Loop+0x10c>
						if (!p_idle) {
 8014822:	6a3b      	ldr	r3, [r7, #32]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d112      	bne.n	801484e <pifTaskManager_Loop+0x116>
							p_idle = (*p_owner->__processing)(p_owner);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	4798      	blx	r3
 8014830:	6238      	str	r0, [r7, #32]
							if (p_idle) {
 8014832:	6a3b      	ldr	r3, [r7, #32]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d00a      	beq.n	801484e <pifTaskManager_Loop+0x116>
								it_idle = s_it_current;
 8014838:	4b46      	ldr	r3, [pc, #280]	; (8014954 <pifTaskManager_Loop+0x21c>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	61fb      	str	r3, [r7, #28]
								n = i;
 801483e:	69bb      	ldr	r3, [r7, #24]
 8014840:	617b      	str	r3, [r7, #20]
 8014842:	e004      	b.n	801484e <pifTaskManager_Loop+0x116>
							}
						}
					}
					else {
						p_select = (*p_owner->__processing)(p_owner);
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	4798      	blx	r3
 801484c:	6278      	str	r0, [r7, #36]	; 0x24
					}
				}
			}

			s_it_current = pifFixList_Next(s_it_current);
 801484e:	4b41      	ldr	r3, [pc, #260]	; (8014954 <pifTaskManager_Loop+0x21c>)
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	4618      	mov	r0, r3
 8014854:	f7fd ff89 	bl	801276a <pifFixList_Next>
 8014858:	4603      	mov	r3, r0
 801485a:	4a3e      	ldr	r2, [pc, #248]	; (8014954 <pifTaskManager_Loop+0x21c>)
 801485c:	6013      	str	r3, [r2, #0]
			if (!s_it_current) {
 801485e:	4b3d      	ldr	r3, [pc, #244]	; (8014954 <pifTaskManager_Loop+0x21c>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d107      	bne.n	8014876 <pifTaskManager_Loop+0x13e>
				s_it_current = pifFixList_Begin(&s_tasks);
 8014866:	4838      	ldr	r0, [pc, #224]	; (8014948 <pifTaskManager_Loop+0x210>)
 8014868:	f7fd ff73 	bl	8012752 <pifFixList_Begin>
 801486c:	4603      	mov	r3, r0
 801486e:	4a39      	ldr	r2, [pc, #228]	; (8014954 <pifTaskManager_Loop+0x21c>)
 8014870:	6013      	str	r3, [r2, #0]
				_checkLoopTime();
 8014872:	f7ff fd15 	bl	80142a0 <_checkLoopTime>
		for (i = n = 0; i < count && !p_select; i++) {
 8014876:	69bb      	ldr	r3, [r7, #24]
 8014878:	3301      	adds	r3, #1
 801487a:	61bb      	str	r3, [r7, #24]
 801487c:	69ba      	ldr	r2, [r7, #24]
 801487e:	68bb      	ldr	r3, [r7, #8]
 8014880:	429a      	cmp	r2, r3
 8014882:	da02      	bge.n	801488a <pifTaskManager_Loop+0x152>
 8014884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014886:	2b00      	cmp	r3, #0
 8014888:	d0a1      	beq.n	80147ce <pifTaskManager_Loop+0x96>
			}
		}
	}

	if (p_select) {
 801488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801488c:	2b00      	cmp	r3, #0
 801488e:	d034      	beq.n	80148fa <pifTaskManager_Loop+0x1c2>
		if (trigger) {
 8014890:	7bfb      	ldrb	r3, [r7, #15]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d02d      	beq.n	80148f2 <pifTaskManager_Loop+0x1ba>
			if (pif_act_timer1us) p_select->_trigger_delay = (*pif_act_timer1us)() - p_select->__trigger_time;
 8014896:	4b2d      	ldr	r3, [pc, #180]	; (801494c <pifTaskManager_Loop+0x214>)
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d00c      	beq.n	80148b8 <pifTaskManager_Loop+0x180>
 801489e:	4b2b      	ldr	r3, [pc, #172]	; (801494c <pifTaskManager_Loop+0x214>)
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	4798      	blx	r3
 80148a4:	4603      	mov	r3, r0
 80148a6:	b29a      	uxth	r2, r3
 80148a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80148ac:	b29b      	uxth	r3, r3
 80148ae:	1ad3      	subs	r3, r2, r3
 80148b0:	b29a      	uxth	r2, r3
 80148b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b4:	859a      	strh	r2, [r3, #44]	; 0x2c
 80148b6:	e009      	b.n	80148cc <pifTaskManager_Loop+0x194>
			else p_select->_trigger_delay = pif_cumulative_timer1ms - p_select->__trigger_time;
 80148b8:	4b29      	ldr	r3, [pc, #164]	; (8014960 <pifTaskManager_Loop+0x228>)
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	b29a      	uxth	r2, r3
 80148be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80148c2:	b29b      	uxth	r3, r3
 80148c4:	1ad3      	subs	r3, r2, r3
 80148c6:	b29a      	uxth	r2, r3
 80148c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ca:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (p_select->_trigger_delay > p_select->_max_trigger_delay) p_select->_max_trigger_delay = p_select->_trigger_delay;
 80148cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80148d0:	461a      	mov	r2, r3
 80148d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148d6:	429a      	cmp	r2, r3
 80148d8:	d904      	bls.n	80148e4 <pifTaskManager_Loop+0x1ac>
 80148da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80148de:	461a      	mov	r2, r3
 80148e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e2:	625a      	str	r2, [r3, #36]	; 0x24
			p_select->_total_trigger_delay += p_select->_trigger_delay;
 80148e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148ea:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80148ec:	441a      	add	r2, r3
 80148ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f0:	629a      	str	r2, [r3, #40]	; 0x28
		}
	    _processingTask(p_select);
 80148f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148f4:	f7ff fc3e 	bl	8014174 <_processingTask>
 80148f8:	e018      	b.n	801492c <pifTaskManager_Loop+0x1f4>
	}
	else if (p_idle) {
 80148fa:	6a3b      	ldr	r3, [r7, #32]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d015      	beq.n	801492c <pifTaskManager_Loop+0x1f4>
		i = n;
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	61bb      	str	r3, [r7, #24]
		it_idle = pifFixList_Next(it_idle);
 8014904:	69f8      	ldr	r0, [r7, #28]
 8014906:	f7fd ff30 	bl	801276a <pifFixList_Next>
 801490a:	61f8      	str	r0, [r7, #28]
		if (!it_idle) {
 801490c:	69fb      	ldr	r3, [r7, #28]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d106      	bne.n	8014920 <pifTaskManager_Loop+0x1e8>
			s_it_current = pifFixList_Begin(&s_tasks);
 8014912:	480d      	ldr	r0, [pc, #52]	; (8014948 <pifTaskManager_Loop+0x210>)
 8014914:	f7fd ff1d 	bl	8012752 <pifFixList_Begin>
 8014918:	4603      	mov	r3, r0
 801491a:	4a0e      	ldr	r2, [pc, #56]	; (8014954 <pifTaskManager_Loop+0x21c>)
 801491c:	6013      	str	r3, [r2, #0]
 801491e:	e002      	b.n	8014926 <pifTaskManager_Loop+0x1ee>
		}
		else {
			s_it_current = it_idle;
 8014920:	4a0c      	ldr	r2, [pc, #48]	; (8014954 <pifTaskManager_Loop+0x21c>)
 8014922:	69fb      	ldr	r3, [r7, #28]
 8014924:	6013      	str	r3, [r2, #0]
		}
	    _processingTask(p_idle);
 8014926:	6a38      	ldr	r0, [r7, #32]
 8014928:	f7ff fc24 	bl	8014174 <_processingTask>
	}
	s_pass_count += i - t;
 801492c:	69ba      	ldr	r2, [r7, #24]
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	1ad3      	subs	r3, r2, r3
 8014932:	461a      	mov	r2, r3
 8014934:	4b0b      	ldr	r3, [pc, #44]	; (8014964 <pifTaskManager_Loop+0x22c>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	4413      	add	r3, r2
 801493a:	4a0a      	ldr	r2, [pc, #40]	; (8014964 <pifTaskManager_Loop+0x22c>)
 801493c:	6013      	str	r3, [r2, #0]
 801493e:	e000      	b.n	8014942 <pifTaskManager_Loop+0x20a>
		if (!count) return;
 8014940:	bf00      	nop
}
 8014942:	3728      	adds	r7, #40	; 0x28
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}
 8014948:	20001cc4 	.word	0x20001cc4
 801494c:	20001c34 	.word	0x20001c34
 8014950:	20001c10 	.word	0x20001c10
 8014954:	20001cdc 	.word	0x20001cdc
 8014958:	20001d84 	.word	0x20001d84
 801495c:	20001cf8 	.word	0x20001cf8
 8014960:	20001c24 	.word	0x20001c24
 8014964:	20001d88 	.word	0x20001d88

08014968 <pifTaskManager_Yield>:

BOOL pifTaskManager_Yield()
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b08a      	sub	sp, #40	; 0x28
 801496c:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 801496e:	2300      	movs	r3, #0
 8014970:	627b      	str	r3, [r7, #36]	; 0x24
	PifTask* p_idle = NULL;
 8014972:	2300      	movs	r3, #0
 8014974:	623b      	str	r3, [r7, #32]
	PifFixListIterator it_idle = NULL;
 8014976:	2300      	movs	r3, #0
 8014978:	61fb      	str	r3, [r7, #28]
	int i, k, n, t = 0, count = pifFixList_Count(&s_tasks);
 801497a:	2300      	movs	r3, #0
 801497c:	60fb      	str	r3, [r7, #12]
 801497e:	488c      	ldr	r0, [pc, #560]	; (8014bb0 <pifTaskManager_Yield+0x248>)
 8014980:	f7fd fedb 	bl	801273a <pifFixList_Count>
 8014984:	6078      	str	r0, [r7, #4]
	BOOL trigger = FALSE;
 8014986:	2300      	movs	r3, #0
 8014988:	72fb      	strb	r3, [r7, #11]
	BOOL rtn = TRUE;
 801498a:	2301      	movs	r3, #1
 801498c:	72bb      	strb	r3, [r7, #10]

	if (pif_act_timer1us) pif_timer1us = (*pif_act_timer1us)();
 801498e:	4b89      	ldr	r3, [pc, #548]	; (8014bb4 <pifTaskManager_Yield+0x24c>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d005      	beq.n	80149a2 <pifTaskManager_Yield+0x3a>
 8014996:	4b87      	ldr	r3, [pc, #540]	; (8014bb4 <pifTaskManager_Yield+0x24c>)
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	4798      	blx	r3
 801499c:	4603      	mov	r3, r0
 801499e:	4a86      	ldr	r2, [pc, #536]	; (8014bb8 <pifTaskManager_Yield+0x250>)
 80149a0:	6013      	str	r3, [r2, #0]

	if (!s_it_current) {
 80149a2:	4b86      	ldr	r3, [pc, #536]	; (8014bbc <pifTaskManager_Yield+0x254>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d10a      	bne.n	80149c0 <pifTaskManager_Yield+0x58>
		if (!count) return FALSE;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d101      	bne.n	80149b4 <pifTaskManager_Yield+0x4c>
 80149b0:	2300      	movs	r3, #0
 80149b2:	e134      	b.n	8014c1e <pifTaskManager_Yield+0x2b6>
		s_it_current = pifFixList_Begin(&s_tasks);
 80149b4:	487e      	ldr	r0, [pc, #504]	; (8014bb0 <pifTaskManager_Yield+0x248>)
 80149b6:	f7fd fecc 	bl	8012752 <pifFixList_Begin>
 80149ba:	4603      	mov	r3, r0
 80149bc:	4a7f      	ldr	r2, [pc, #508]	; (8014bbc <pifTaskManager_Yield+0x254>)
 80149be:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 80149c0:	4b7f      	ldr	r3, [pc, #508]	; (8014bc0 <pifTaskManager_Yield+0x258>)
 80149c2:	681a      	ldr	r2, [r3, #0]
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	4413      	add	r3, r2
 80149c8:	4a7d      	ldr	r2, [pc, #500]	; (8014bc0 <pifTaskManager_Yield+0x258>)
 80149ca:	6013      	str	r3, [r2, #0]
	if (s_task_cutin && s_task_cutin->__trigger && !s_task_cutin->_running) {
 80149cc:	4b7d      	ldr	r3, [pc, #500]	; (8014bc4 <pifTaskManager_Yield+0x25c>)
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d017      	beq.n	8014a04 <pifTaskManager_Yield+0x9c>
 80149d4:	4b7b      	ldr	r3, [pc, #492]	; (8014bc4 <pifTaskManager_Yield+0x25c>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d011      	beq.n	8014a04 <pifTaskManager_Yield+0x9c>
 80149e0:	4b78      	ldr	r3, [pc, #480]	; (8014bc4 <pifTaskManager_Yield+0x25c>)
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	7a5b      	ldrb	r3, [r3, #9]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d10c      	bne.n	8014a04 <pifTaskManager_Yield+0x9c>
		s_task_cutin->__trigger = FALSE;
 80149ea:	4b76      	ldr	r3, [pc, #472]	; (8014bc4 <pifTaskManager_Yield+0x25c>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	2200      	movs	r2, #0
 80149f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		p_select = s_task_cutin;
 80149f4:	4b73      	ldr	r3, [pc, #460]	; (8014bc4 <pifTaskManager_Yield+0x25c>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	627b      	str	r3, [r7, #36]	; 0x24
		trigger = TRUE;
 80149fa:	2301      	movs	r3, #1
 80149fc:	72fb      	strb	r3, [r7, #11]
		i = 1;
 80149fe:	2301      	movs	r3, #1
 8014a00:	61bb      	str	r3, [r7, #24]
 8014a02:	e097      	b.n	8014b34 <pifTaskManager_Yield+0x1cc>
	}
	else {
		for (i = n = 0; i < count && !p_select; i++) {
 8014a04:	2300      	movs	r3, #0
 8014a06:	613b      	str	r3, [r7, #16]
 8014a08:	693b      	ldr	r3, [r7, #16]
 8014a0a:	61bb      	str	r3, [r7, #24]
 8014a0c:	e08a      	b.n	8014b24 <pifTaskManager_Yield+0x1bc>
			p_owner = (PifTask*)s_it_current->data;
 8014a0e:	4b6b      	ldr	r3, [pc, #428]	; (8014bbc <pifTaskManager_Yield+0x254>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	3308      	adds	r3, #8
 8014a14:	603b      	str	r3, [r7, #0]

			if (p_owner->_running) goto next;
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	7a5b      	ldrb	r3, [r3, #9]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d162      	bne.n	8014ae4 <pifTaskManager_Yield+0x17c>
			if (s_task_stack_ptr) {
 8014a1e:	4b6a      	ldr	r3, [pc, #424]	; (8014bc8 <pifTaskManager_Yield+0x260>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d021      	beq.n	8014a6a <pifTaskManager_Yield+0x102>
				for (k = 0; k < s_task_stack_ptr; k++) {
 8014a26:	2300      	movs	r3, #0
 8014a28:	617b      	str	r3, [r7, #20]
 8014a2a:	e012      	b.n	8014a52 <pifTaskManager_Yield+0xea>
					if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8014a2c:	4a67      	ldr	r2, [pc, #412]	; (8014bcc <pifTaskManager_Yield+0x264>)
 8014a2e:	697b      	ldr	r3, [r7, #20]
 8014a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a34:	795b      	ldrb	r3, [r3, #5]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d008      	beq.n	8014a4c <pifTaskManager_Yield+0xe4>
 8014a3a:	4a64      	ldr	r2, [pc, #400]	; (8014bcc <pifTaskManager_Yield+0x264>)
 8014a3c:	697b      	ldr	r3, [r7, #20]
 8014a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a42:	795a      	ldrb	r2, [r3, #5]
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	795b      	ldrb	r3, [r3, #5]
 8014a48:	429a      	cmp	r2, r3
 8014a4a:	d008      	beq.n	8014a5e <pifTaskManager_Yield+0xf6>
				for (k = 0; k < s_task_stack_ptr; k++) {
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	3301      	adds	r3, #1
 8014a50:	617b      	str	r3, [r7, #20]
 8014a52:	4b5d      	ldr	r3, [pc, #372]	; (8014bc8 <pifTaskManager_Yield+0x260>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	697a      	ldr	r2, [r7, #20]
 8014a58:	429a      	cmp	r2, r3
 8014a5a:	dbe7      	blt.n	8014a2c <pifTaskManager_Yield+0xc4>
 8014a5c:	e000      	b.n	8014a60 <pifTaskManager_Yield+0xf8>
					if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8014a5e:	bf00      	nop
				}
				if (k < s_task_stack_ptr) goto next;
 8014a60:	4b59      	ldr	r3, [pc, #356]	; (8014bc8 <pifTaskManager_Yield+0x260>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	697a      	ldr	r2, [r7, #20]
 8014a66:	429a      	cmp	r2, r3
 8014a68:	db3e      	blt.n	8014ae8 <pifTaskManager_Yield+0x180>
			}

			if (p_owner->__trigger) {
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d008      	beq.n	8014a86 <pifTaskManager_Yield+0x11e>
				p_owner->__trigger = FALSE;
 8014a74:	683b      	ldr	r3, [r7, #0]
 8014a76:	2200      	movs	r2, #0
 8014a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				p_select = p_owner;
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	627b      	str	r3, [r7, #36]	; 0x24
				trigger = TRUE;
 8014a80:	2301      	movs	r3, #1
 8014a82:	72fb      	strb	r3, [r7, #11]
 8014a84:	e033      	b.n	8014aee <pifTaskManager_Yield+0x186>
			}
			else if (!p_owner->pause) {
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	791b      	ldrb	r3, [r3, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d12e      	bne.n	8014aec <pifTaskManager_Yield+0x184>
				if (p_owner->_mode == TM_TIMER) {
 8014a8e:	683b      	ldr	r3, [r7, #0]
 8014a90:	7a1b      	ldrb	r3, [r3, #8]
 8014a92:	2b08      	cmp	r3, #8
 8014a94:	d107      	bne.n	8014aa6 <pifTaskManager_Yield+0x13e>
					(*p_owner->__evt_loop)(p_owner);
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014a9a:	6838      	ldr	r0, [r7, #0]
 8014a9c:	4798      	blx	r3
					t++;
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	3301      	adds	r3, #1
 8014aa2:	60fb      	str	r3, [r7, #12]
 8014aa4:	e023      	b.n	8014aee <pifTaskManager_Yield+0x186>
				}
				else if (p_owner->__processing) {
 8014aa6:	683b      	ldr	r3, [r7, #0]
 8014aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d01e      	beq.n	8014aec <pifTaskManager_Yield+0x184>
					if (p_owner->_mode == TM_IDLE_MS) {
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	7a1b      	ldrb	r3, [r3, #8]
 8014ab2:	2b09      	cmp	r3, #9
 8014ab4:	d110      	bne.n	8014ad8 <pifTaskManager_Yield+0x170>
						if (!p_idle) {
 8014ab6:	6a3b      	ldr	r3, [r7, #32]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d118      	bne.n	8014aee <pifTaskManager_Yield+0x186>
							p_idle = (*p_owner->__processing)(p_owner);
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ac0:	6838      	ldr	r0, [r7, #0]
 8014ac2:	4798      	blx	r3
 8014ac4:	6238      	str	r0, [r7, #32]
							if (p_idle) {
 8014ac6:	6a3b      	ldr	r3, [r7, #32]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d010      	beq.n	8014aee <pifTaskManager_Yield+0x186>
								it_idle = s_it_current;
 8014acc:	4b3b      	ldr	r3, [pc, #236]	; (8014bbc <pifTaskManager_Yield+0x254>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	61fb      	str	r3, [r7, #28]
								n = i;
 8014ad2:	69bb      	ldr	r3, [r7, #24]
 8014ad4:	613b      	str	r3, [r7, #16]
 8014ad6:	e00a      	b.n	8014aee <pifTaskManager_Yield+0x186>
							}
						}
					}
					else {
						p_select = (*p_owner->__processing)(p_owner);
 8014ad8:	683b      	ldr	r3, [r7, #0]
 8014ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014adc:	6838      	ldr	r0, [r7, #0]
 8014ade:	4798      	blx	r3
 8014ae0:	6278      	str	r0, [r7, #36]	; 0x24
 8014ae2:	e004      	b.n	8014aee <pifTaskManager_Yield+0x186>
			if (p_owner->_running) goto next;
 8014ae4:	bf00      	nop
 8014ae6:	e002      	b.n	8014aee <pifTaskManager_Yield+0x186>
				if (k < s_task_stack_ptr) goto next;
 8014ae8:	bf00      	nop
 8014aea:	e000      	b.n	8014aee <pifTaskManager_Yield+0x186>
					}
				}
			}

next:
 8014aec:	bf00      	nop
			s_it_current = pifFixList_Next(s_it_current);
 8014aee:	4b33      	ldr	r3, [pc, #204]	; (8014bbc <pifTaskManager_Yield+0x254>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7fd fe39 	bl	801276a <pifFixList_Next>
 8014af8:	4603      	mov	r3, r0
 8014afa:	4a30      	ldr	r2, [pc, #192]	; (8014bbc <pifTaskManager_Yield+0x254>)
 8014afc:	6013      	str	r3, [r2, #0]
			if (!s_it_current) {
 8014afe:	4b2f      	ldr	r3, [pc, #188]	; (8014bbc <pifTaskManager_Yield+0x254>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d10b      	bne.n	8014b1e <pifTaskManager_Yield+0x1b6>
				s_it_current = pifFixList_Begin(&s_tasks);
 8014b06:	482a      	ldr	r0, [pc, #168]	; (8014bb0 <pifTaskManager_Yield+0x248>)
 8014b08:	f7fd fe23 	bl	8012752 <pifFixList_Begin>
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	4a2b      	ldr	r2, [pc, #172]	; (8014bbc <pifTaskManager_Yield+0x254>)
 8014b10:	6013      	str	r3, [r2, #0]
				if (s_task_stack_ptr) _checkLoopTime();
 8014b12:	4b2d      	ldr	r3, [pc, #180]	; (8014bc8 <pifTaskManager_Yield+0x260>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d001      	beq.n	8014b1e <pifTaskManager_Yield+0x1b6>
 8014b1a:	f7ff fbc1 	bl	80142a0 <_checkLoopTime>
		for (i = n = 0; i < count && !p_select; i++) {
 8014b1e:	69bb      	ldr	r3, [r7, #24]
 8014b20:	3301      	adds	r3, #1
 8014b22:	61bb      	str	r3, [r7, #24]
 8014b24:	69ba      	ldr	r2, [r7, #24]
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	429a      	cmp	r2, r3
 8014b2a:	da03      	bge.n	8014b34 <pifTaskManager_Yield+0x1cc>
 8014b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	f43f af6d 	beq.w	8014a0e <pifTaskManager_Yield+0xa6>
			}
		}
	}

	if (p_select) {
 8014b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d04c      	beq.n	8014bd4 <pifTaskManager_Yield+0x26c>
		if (trigger && s_task_stack_ptr) {
 8014b3a:	7afb      	ldrb	r3, [r7, #11]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d031      	beq.n	8014ba4 <pifTaskManager_Yield+0x23c>
 8014b40:	4b21      	ldr	r3, [pc, #132]	; (8014bc8 <pifTaskManager_Yield+0x260>)
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d02d      	beq.n	8014ba4 <pifTaskManager_Yield+0x23c>
			if (pif_act_timer1us) p_select->_trigger_delay = (*pif_act_timer1us)() - p_select->__trigger_time;
 8014b48:	4b1a      	ldr	r3, [pc, #104]	; (8014bb4 <pifTaskManager_Yield+0x24c>)
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d00c      	beq.n	8014b6a <pifTaskManager_Yield+0x202>
 8014b50:	4b18      	ldr	r3, [pc, #96]	; (8014bb4 <pifTaskManager_Yield+0x24c>)
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	4798      	blx	r3
 8014b56:	4603      	mov	r3, r0
 8014b58:	b29a      	uxth	r2, r3
 8014b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	1ad3      	subs	r3, r2, r3
 8014b62:	b29a      	uxth	r2, r3
 8014b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b66:	859a      	strh	r2, [r3, #44]	; 0x2c
 8014b68:	e009      	b.n	8014b7e <pifTaskManager_Yield+0x216>
			else p_select->_trigger_delay = pif_cumulative_timer1ms - p_select->__trigger_time;
 8014b6a:	4b19      	ldr	r3, [pc, #100]	; (8014bd0 <pifTaskManager_Yield+0x268>)
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	b29a      	uxth	r2, r3
 8014b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b74:	b29b      	uxth	r3, r3
 8014b76:	1ad3      	subs	r3, r2, r3
 8014b78:	b29a      	uxth	r2, r3
 8014b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b7c:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (p_select->_trigger_delay > p_select->_max_trigger_delay) p_select->_max_trigger_delay = p_select->_trigger_delay;
 8014b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014b82:	461a      	mov	r2, r3
 8014b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b88:	429a      	cmp	r2, r3
 8014b8a:	d904      	bls.n	8014b96 <pifTaskManager_Yield+0x22e>
 8014b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014b90:	461a      	mov	r2, r3
 8014b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b94:	625a      	str	r2, [r3, #36]	; 0x24
			p_select->_total_trigger_delay += p_select->_trigger_delay;
 8014b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b9c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8014b9e:	441a      	add	r2, r3
 8014ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba2:	629a      	str	r2, [r3, #40]	; 0x28
		}
	    rtn = _processingTask(p_select);
 8014ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ba6:	f7ff fae5 	bl	8014174 <_processingTask>
 8014baa:	4603      	mov	r3, r0
 8014bac:	72bb      	strb	r3, [r7, #10]
 8014bae:	e02c      	b.n	8014c0a <pifTaskManager_Yield+0x2a2>
 8014bb0:	20001cc4 	.word	0x20001cc4
 8014bb4:	20001c34 	.word	0x20001c34
 8014bb8:	20001c10 	.word	0x20001c10
 8014bbc:	20001cdc 	.word	0x20001cdc
 8014bc0:	20001d84 	.word	0x20001d84
 8014bc4:	20001cf8 	.word	0x20001cf8
 8014bc8:	20001cf4 	.word	0x20001cf4
 8014bcc:	20001ce0 	.word	0x20001ce0
 8014bd0:	20001c24 	.word	0x20001c24
	}
	else if (p_idle) {
 8014bd4:	6a3b      	ldr	r3, [r7, #32]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d017      	beq.n	8014c0a <pifTaskManager_Yield+0x2a2>
		i = n;
 8014bda:	693b      	ldr	r3, [r7, #16]
 8014bdc:	61bb      	str	r3, [r7, #24]
		it_idle = pifFixList_Next(it_idle);
 8014bde:	69f8      	ldr	r0, [r7, #28]
 8014be0:	f7fd fdc3 	bl	801276a <pifFixList_Next>
 8014be4:	61f8      	str	r0, [r7, #28]
		if (!it_idle) {
 8014be6:	69fb      	ldr	r3, [r7, #28]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d106      	bne.n	8014bfa <pifTaskManager_Yield+0x292>
			s_it_current = pifFixList_Begin(&s_tasks);
 8014bec:	480e      	ldr	r0, [pc, #56]	; (8014c28 <pifTaskManager_Yield+0x2c0>)
 8014bee:	f7fd fdb0 	bl	8012752 <pifFixList_Begin>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	4a0d      	ldr	r2, [pc, #52]	; (8014c2c <pifTaskManager_Yield+0x2c4>)
 8014bf6:	6013      	str	r3, [r2, #0]
 8014bf8:	e002      	b.n	8014c00 <pifTaskManager_Yield+0x298>
		}
		else {
			s_it_current = it_idle;
 8014bfa:	4a0c      	ldr	r2, [pc, #48]	; (8014c2c <pifTaskManager_Yield+0x2c4>)
 8014bfc:	69fb      	ldr	r3, [r7, #28]
 8014bfe:	6013      	str	r3, [r2, #0]
		}
	    rtn = _processingTask(p_idle);
 8014c00:	6a38      	ldr	r0, [r7, #32]
 8014c02:	f7ff fab7 	bl	8014174 <_processingTask>
 8014c06:	4603      	mov	r3, r0
 8014c08:	72bb      	strb	r3, [r7, #10]
	}
	s_pass_count += i - t;
 8014c0a:	69ba      	ldr	r2, [r7, #24]
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	1ad3      	subs	r3, r2, r3
 8014c10:	461a      	mov	r2, r3
 8014c12:	4b07      	ldr	r3, [pc, #28]	; (8014c30 <pifTaskManager_Yield+0x2c8>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	4413      	add	r3, r2
 8014c18:	4a05      	ldr	r2, [pc, #20]	; (8014c30 <pifTaskManager_Yield+0x2c8>)
 8014c1a:	6013      	str	r3, [r2, #0]
    return rtn;
 8014c1c:	7abb      	ldrb	r3, [r7, #10]
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	3728      	adds	r7, #40	; 0x28
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}
 8014c26:	bf00      	nop
 8014c28:	20001cc4 	.word	0x20001cc4
 8014c2c:	20001cdc 	.word	0x20001cdc
 8014c30:	20001d88 	.word	0x20001d88

08014c34 <pifTaskManager_YieldMs>:

BOOL pifTaskManager_YieldMs(uint32_t time)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b084      	sub	sp, #16
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
    uint32_t start;

    if (!time) return FALSE;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d101      	bne.n	8014c46 <pifTaskManager_YieldMs+0x12>
 8014c42:	2300      	movs	r3, #0
 8014c44:	e011      	b.n	8014c6a <pifTaskManager_YieldMs+0x36>

    start = pif_cumulative_timer1ms;
 8014c46:	4b0b      	ldr	r3, [pc, #44]	; (8014c74 <pifTaskManager_YieldMs+0x40>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	60fb      	str	r3, [r7, #12]
    do {
		if (!pifTaskManager_Yield()) return FALSE;
 8014c4c:	f7ff fe8c 	bl	8014968 <pifTaskManager_Yield>
 8014c50:	4603      	mov	r3, r0
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d101      	bne.n	8014c5a <pifTaskManager_YieldMs+0x26>
 8014c56:	2300      	movs	r3, #0
 8014c58:	e007      	b.n	8014c6a <pifTaskManager_YieldMs+0x36>
    } while (pif_cumulative_timer1ms - start <= time);
 8014c5a:	4b06      	ldr	r3, [pc, #24]	; (8014c74 <pifTaskManager_YieldMs+0x40>)
 8014c5c:	681a      	ldr	r2, [r3, #0]
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	1ad3      	subs	r3, r2, r3
 8014c62:	687a      	ldr	r2, [r7, #4]
 8014c64:	429a      	cmp	r2, r3
 8014c66:	d2f1      	bcs.n	8014c4c <pifTaskManager_YieldMs+0x18>
    return TRUE;
 8014c68:	2301      	movs	r3, #1
}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	3710      	adds	r7, #16
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}
 8014c72:	bf00      	nop
 8014c74:	20001c24 	.word	0x20001c24

08014c78 <pifTaskManager_Print>:
    }
    return TRUE;
}

void pifTaskManager_Print()
{
 8014c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c7a:	b091      	sub	sp, #68	; 0x44
 8014c7c:	af04      	add	r7, sp, #16
	PifFixListIterator it;
	const char* mode[] = { "Ratio", "Always", "PeriodMs", "PeriodUs", "ChangeMs", "ChangeUs", "ExtCutin", "ExtOrder", "Timer", "IdleMs" };
 8014c7e:	4b40      	ldr	r3, [pc, #256]	; (8014d80 <pifTaskManager_Print+0x108>)
 8014c80:	463c      	mov	r4, r7
 8014c82:	461d      	mov	r5, r3
 8014c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014c90:	e884 0003 	stmia.w	r4, {r0, r1}

   	pifLog_Printf(LT_NONE, "Task count: %d\n", pifFixList_Count(&s_tasks));
 8014c94:	483b      	ldr	r0, [pc, #236]	; (8014d84 <pifTaskManager_Print+0x10c>)
 8014c96:	f7fd fd50 	bl	801273a <pifFixList_Count>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	461a      	mov	r2, r3
 8014c9e:	493a      	ldr	r1, [pc, #232]	; (8014d88 <pifTaskManager_Print+0x110>)
 8014ca0:	2000      	movs	r0, #0
 8014ca2:	f7fe fb7f 	bl	80133a4 <pifLog_Printf>
	it = pifFixList_Begin(&s_tasks);
 8014ca6:	4837      	ldr	r0, [pc, #220]	; (8014d84 <pifTaskManager_Print+0x10c>)
 8014ca8:	f7fd fd53 	bl	8012752 <pifFixList_Begin>
 8014cac:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (it) {
 8014cae:	e05f      	b.n	8014d70 <pifTaskManager_Print+0xf8>
		PifTask* p_owner = (PifTask*)it->data;
 8014cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cb2:	3308      	adds	r3, #8
 8014cb4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (p_owner->name) {
 8014cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d007      	beq.n	8014cce <pifTaskManager_Print+0x56>
			pifLog_Printf(LT_NONE, "  %s", p_owner->name);
 8014cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	461a      	mov	r2, r3
 8014cc4:	4931      	ldr	r1, [pc, #196]	; (8014d8c <pifTaskManager_Print+0x114>)
 8014cc6:	2000      	movs	r0, #0
 8014cc8:	f7fe fb6c 	bl	80133a4 <pifLog_Printf>
 8014ccc:	e003      	b.n	8014cd6 <pifTaskManager_Print+0x5e>
		}
		else {
			pifLog_Print(LT_NONE, "  ---");
 8014cce:	4930      	ldr	r1, [pc, #192]	; (8014d90 <pifTaskManager_Print+0x118>)
 8014cd0:	2000      	movs	r0, #0
 8014cd2:	f7fe fad9 	bl	8013288 <pifLog_Print>
		}
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cd8:	88db      	ldrh	r3, [r3, #6]
 8014cda:	461e      	mov	r6, r3
 8014cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cde:	7a1b      	ldrb	r3, [r3, #8]
 8014ce0:	009b      	lsls	r3, r3, #2
 8014ce2:	3330      	adds	r3, #48	; 0x30
 8014ce4:	443b      	add	r3, r7
 8014ce6:	f853 0c30 	ldr.w	r0, [r3, #-48]
 8014cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cec:	895b      	ldrh	r3, [r3, #10]
 8014cee:	461d      	mov	r5, r3
 8014cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cf2:	691b      	ldr	r3, [r3, #16]
				p_owner->_max_execution_time, p_owner->_total_execution_time / p_owner->_execution_count, p_owner->_total_execution_time / 1000);
 8014cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cf6:	6951      	ldr	r1, [r2, #20]
 8014cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cfa:	6992      	ldr	r2, [r2, #24]
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014cfc:	fbb1 f2f2 	udiv	r2, r1, r2
				p_owner->_max_execution_time, p_owner->_total_execution_time / p_owner->_execution_count, p_owner->_total_execution_time / 1000);
 8014d00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014d02:	6949      	ldr	r1, [r1, #20]
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014d04:	4c23      	ldr	r4, [pc, #140]	; (8014d94 <pifTaskManager_Print+0x11c>)
 8014d06:	fba4 4101 	umull	r4, r1, r4, r1
 8014d0a:	0989      	lsrs	r1, r1, #6
 8014d0c:	9103      	str	r1, [sp, #12]
 8014d0e:	9202      	str	r2, [sp, #8]
 8014d10:	9301      	str	r3, [sp, #4]
 8014d12:	9500      	str	r5, [sp, #0]
 8014d14:	4603      	mov	r3, r0
 8014d16:	4632      	mov	r2, r6
 8014d18:	491f      	ldr	r1, [pc, #124]	; (8014d98 <pifTaskManager_Print+0x120>)
 8014d1a:	2000      	movs	r0, #0
 8014d1c:	f7fe fb42 	bl	80133a4 <pifLog_Printf>
		if (p_owner->_total_period_time) {
 8014d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d22:	69db      	ldr	r3, [r3, #28]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d00a      	beq.n	8014d3e <pifTaskManager_Print+0xc6>
			pifLog_Printf(LT_NONE, ",  period: %dus", p_owner->_total_period_time / p_owner->_period_count);
 8014d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d2a:	69da      	ldr	r2, [r3, #28]
 8014d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d2e:	6a1b      	ldr	r3, [r3, #32]
 8014d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d34:	461a      	mov	r2, r3
 8014d36:	4919      	ldr	r1, [pc, #100]	; (8014d9c <pifTaskManager_Print+0x124>)
 8014d38:	2000      	movs	r0, #0
 8014d3a:	f7fe fb33 	bl	80133a4 <pifLog_Printf>
		}
		if (p_owner->_total_trigger_delay) {
 8014d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d00c      	beq.n	8014d60 <pifTaskManager_Print+0xe8>
			pifLog_Printf(LT_NONE, ",  delay: M=%dus A=%dus", p_owner->_max_trigger_delay, p_owner->_total_trigger_delay / p_owner->_execution_count);
 8014d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d50:	699b      	ldr	r3, [r3, #24]
 8014d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d56:	460a      	mov	r2, r1
 8014d58:	4911      	ldr	r1, [pc, #68]	; (8014da0 <pifTaskManager_Print+0x128>)
 8014d5a:	2000      	movs	r0, #0
 8014d5c:	f7fe fb22 	bl	80133a4 <pifLog_Printf>
		}
		pifLog_Print(LT_NONE, "\n");
 8014d60:	4910      	ldr	r1, [pc, #64]	; (8014da4 <pifTaskManager_Print+0x12c>)
 8014d62:	2000      	movs	r0, #0
 8014d64:	f7fe fa90 	bl	8013288 <pifLog_Print>
		it = pifFixList_Next(it);
 8014d68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d6a:	f7fd fcfe 	bl	801276a <pifFixList_Next>
 8014d6e:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (it) {
 8014d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d19c      	bne.n	8014cb0 <pifTaskManager_Print+0x38>
	}
}
 8014d76:	bf00      	nop
 8014d78:	bf00      	nop
 8014d7a:	3734      	adds	r7, #52	; 0x34
 8014d7c:	46bd      	mov	sp, r7
 8014d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d80:	080275f8 	.word	0x080275f8
 8014d84:	20001cc4 	.word	0x20001cc4
 8014d88:	08027580 	.word	0x08027580
 8014d8c:	08027590 	.word	0x08027590
 8014d90:	08027598 	.word	0x08027598
 8014d94:	10624dd3 	.word	0x10624dd3
 8014d98:	080275a0 	.word	0x080275a0
 8014d9c:	080275cc 	.word	0x080275cc
 8014da0:	080275dc 	.word	0x080275dc
 8014da4:	080275f4 	.word	0x080275f4

08014da8 <_doTask>:
#include "core/pif_timer.h"


static uint16_t _doTask(PifTask* p_task)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b086      	sub	sp, #24
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
	PifTimerManager* p_manager = p_task->_p_client;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	68db      	ldr	r3, [r3, #12]
 8014db4:	613b      	str	r3, [r7, #16]

	PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 8014db6:	693b      	ldr	r3, [r7, #16]
 8014db8:	3308      	adds	r3, #8
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7fd fcc9 	bl	8012752 <pifFixList_Begin>
 8014dc0:	6178      	str	r0, [r7, #20]
	while (it) {
 8014dc2:	e017      	b.n	8014df4 <_doTask+0x4c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8014dc4:	697b      	ldr	r3, [r7, #20]
 8014dc6:	3308      	adds	r3, #8
 8014dc8:	60fb      	str	r3, [r7, #12]

		if (p_timer->__event) {
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	7f1b      	ldrb	r3, [r3, #28]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d00c      	beq.n	8014dec <_doTask+0x44>
			p_timer->__event = FALSE;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	771a      	strb	r2, [r3, #28]

			if (p_timer->__evt_finish) (*p_timer->__evt_finish)(p_timer->__p_finish_issuer);
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	6a1b      	ldr	r3, [r3, #32]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d005      	beq.n	8014dec <_doTask+0x44>
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	6a1b      	ldr	r3, [r3, #32]
 8014de4:	68fa      	ldr	r2, [r7, #12]
 8014de6:	6912      	ldr	r2, [r2, #16]
 8014de8:	4610      	mov	r0, r2
 8014dea:	4798      	blx	r3
		}

		it = pifFixList_Next(it);
 8014dec:	6978      	ldr	r0, [r7, #20]
 8014dee:	f7fd fcbc 	bl	801276a <pifFixList_Next>
 8014df2:	6178      	str	r0, [r7, #20]
	while (it) {
 8014df4:	697b      	ldr	r3, [r7, #20]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d1e4      	bne.n	8014dc4 <_doTask+0x1c>
	}
	return 0;
 8014dfa:	2300      	movs	r3, #0
}
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	3718      	adds	r7, #24
 8014e00:	46bd      	mov	sp, r7
 8014e02:	bd80      	pop	{r7, pc}

08014e04 <pifTimerManager_Init>:

BOOL pifTimerManager_Init(PifTimerManager* p_manager, PifId id, uint32_t period1us, int max_count)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b086      	sub	sp, #24
 8014e08:	af02      	add	r7, sp, #8
 8014e0a:	60f8      	str	r0, [r7, #12]
 8014e0c:	607a      	str	r2, [r7, #4]
 8014e0e:	603b      	str	r3, [r7, #0]
 8014e10:	460b      	mov	r3, r1
 8014e12:	817b      	strh	r3, [r7, #10]
    if (!p_manager || !period1us) {
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d002      	beq.n	8014e20 <pifTimerManager_Init+0x1c>
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d104      	bne.n	8014e2a <pifTimerManager_Init+0x26>
        pif_error = E_INVALID_PARAM;
 8014e20:	4b21      	ldr	r3, [pc, #132]	; (8014ea8 <pifTimerManager_Init+0xa4>)
 8014e22:	2201      	movs	r2, #1
 8014e24:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8014e26:	2300      	movs	r3, #0
 8014e28:	e03a      	b.n	8014ea0 <pifTimerManager_Init+0x9c>
    }

	memset(p_manager, 0, sizeof(PifTimerManager));
 8014e2a:	2224      	movs	r2, #36	; 0x24
 8014e2c:	2100      	movs	r1, #0
 8014e2e:	68f8      	ldr	r0, [r7, #12]
 8014e30:	f00d fe32 	bl	8022a98 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8014e34:	897b      	ldrh	r3, [r7, #10]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d106      	bne.n	8014e48 <pifTimerManager_Init+0x44>
 8014e3a:	4b1c      	ldr	r3, [pc, #112]	; (8014eac <pifTimerManager_Init+0xa8>)
 8014e3c:	881b      	ldrh	r3, [r3, #0]
 8014e3e:	1c5a      	adds	r2, r3, #1
 8014e40:	b291      	uxth	r1, r2
 8014e42:	4a1a      	ldr	r2, [pc, #104]	; (8014eac <pifTimerManager_Init+0xa8>)
 8014e44:	8011      	strh	r1, [r2, #0]
 8014e46:	817b      	strh	r3, [r7, #10]
    p_manager->_id = id;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	897a      	ldrh	r2, [r7, #10]
 8014e4c:	801a      	strh	r2, [r3, #0]
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	3308      	adds	r3, #8
 8014e52:	683a      	ldr	r2, [r7, #0]
 8014e54:	2128      	movs	r1, #40	; 0x28
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7fd fb74 	bl	8012544 <pifFixList_Init>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d017      	beq.n	8014e92 <pifTimerManager_Init+0x8e>
    p_manager->_period1us = period1us;
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	687a      	ldr	r2, [r7, #4]
 8014e66:	605a      	str	r2, [r3, #4]

    p_manager->__p_task = pifTaskManager_Add(TM_TIMER, 0, _doTask, p_manager, TRUE);
 8014e68:	2301      	movs	r3, #1
 8014e6a:	9300      	str	r3, [sp, #0]
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	4a10      	ldr	r2, [pc, #64]	; (8014eb0 <pifTimerManager_Init+0xac>)
 8014e70:	2100      	movs	r1, #0
 8014e72:	2008      	movs	r0, #8
 8014e74:	f7ff fbb6 	bl	80145e4 <pifTaskManager_Add>
 8014e78:	4602      	mov	r2, r0
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	621a      	str	r2, [r3, #32]
    if (!p_manager->__p_task) goto fail;
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	6a1b      	ldr	r3, [r3, #32]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d007      	beq.n	8014e96 <pifTimerManager_Init+0x92>
    p_manager->__p_task->name = "Timer";
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	6a1b      	ldr	r3, [r3, #32]
 8014e8a:	4a0a      	ldr	r2, [pc, #40]	; (8014eb4 <pifTimerManager_Init+0xb0>)
 8014e8c:	601a      	str	r2, [r3, #0]
    return TRUE;
 8014e8e:	2301      	movs	r3, #1
 8014e90:	e006      	b.n	8014ea0 <pifTimerManager_Init+0x9c>
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014e92:	bf00      	nop
 8014e94:	e000      	b.n	8014e98 <pifTimerManager_Init+0x94>
    if (!p_manager->__p_task) goto fail;
 8014e96:	bf00      	nop

fail:
	pifTimerManager_Clear(p_manager);
 8014e98:	68f8      	ldr	r0, [r7, #12]
 8014e9a:	f000 f80d 	bl	8014eb8 <pifTimerManager_Clear>
    return FALSE;
 8014e9e:	2300      	movs	r3, #0
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3710      	adds	r7, #16
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}
 8014ea8:	20001c0d 	.word	0x20001c0d
 8014eac:	2000011c 	.word	0x2000011c
 8014eb0:	08014da9 	.word	0x08014da9
 8014eb4:	0802764c 	.word	0x0802764c

08014eb8 <pifTimerManager_Clear>:

void pifTimerManager_Clear(PifTimerManager* p_manager)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b082      	sub	sp, #8
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
	if (p_manager->__p_task) {
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	6a1b      	ldr	r3, [r3, #32]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d007      	beq.n	8014ed8 <pifTimerManager_Clear+0x20>
		pifTaskManager_Remove(p_manager->__p_task);
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6a1b      	ldr	r3, [r3, #32]
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f7ff fbf1 	bl	80146b4 <pifTaskManager_Remove>
		p_manager->__p_task = NULL;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	621a      	str	r2, [r3, #32]
	}
	pifFixList_Clear(&p_manager->__timers, NULL);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	3308      	adds	r3, #8
 8014edc:	2100      	movs	r1, #0
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f7fd fb90 	bl	8012604 <pifFixList_Clear>
}
 8014ee4:	bf00      	nop
 8014ee6:	3708      	adds	r7, #8
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}

08014eec <pifTimerManager_Add>:

PifTimer* pifTimerManager_Add(PifTimerManager* p_manager, PifTimerType type)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b084      	sub	sp, #16
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
 8014ef4:	460b      	mov	r3, r1
 8014ef6:	70fb      	strb	r3, [r7, #3]
	PifTimer* p_timer = (PifTimer*)pifFixList_AddFirst(&p_manager->__timers);
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	3308      	adds	r3, #8
 8014efc:	4618      	mov	r0, r3
 8014efe:	f7fd fbb4 	bl	801266a <pifFixList_AddFirst>
 8014f02:	60f8      	str	r0, [r7, #12]
    if (!p_timer) return NULL;
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d101      	bne.n	8014f0e <pifTimerManager_Add+0x22>
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	e006      	b.n	8014f1c <pifTimerManager_Add+0x30>

    p_timer->_type = type;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	78fa      	ldrb	r2, [r7, #3]
 8014f12:	721a      	strb	r2, [r3, #8]
    p_timer->_step = TS_STOP;
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	2200      	movs	r2, #0
 8014f18:	725a      	strb	r2, [r3, #9]
    return p_timer;
 8014f1a:	68fb      	ldr	r3, [r7, #12]
}
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	3710      	adds	r7, #16
 8014f20:	46bd      	mov	sp, r7
 8014f22:	bd80      	pop	{r7, pc}

08014f24 <pifTimerManager_Remove>:

void pifTimerManager_Remove(PifTimer* p_timer)
{
 8014f24:	b480      	push	{r7}
 8014f26:	b083      	sub	sp, #12
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
	p_timer->_step = TS_REMOVE;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2202      	movs	r2, #2
 8014f30:	725a      	strb	r2, [r3, #9]
}
 8014f32:	bf00      	nop
 8014f34:	370c      	adds	r7, #12
 8014f36:	46bd      	mov	sp, r7
 8014f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3c:	4770      	bx	lr

08014f3e <pifTimerManager_Count>:

int pifTimerManager_Count(PifTimerManager* p_manager)
{
 8014f3e:	b580      	push	{r7, lr}
 8014f40:	b082      	sub	sp, #8
 8014f42:	af00      	add	r7, sp, #0
 8014f44:	6078      	str	r0, [r7, #4]
	return pifFixList_Count(&p_manager->__timers);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	3308      	adds	r3, #8
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f7fd fbf5 	bl	801273a <pifFixList_Count>
 8014f50:	4603      	mov	r3, r0
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3708      	adds	r7, #8
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}
	...

08014f5c <pifTimer_Start>:

BOOL pifTimer_Start(PifTimer* p_owner, uint32_t target)
{
 8014f5c:	b480      	push	{r7}
 8014f5e:	b083      	sub	sp, #12
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
 8014f64:	6039      	str	r1, [r7, #0]
	if (!target) {
 8014f66:	683b      	ldr	r3, [r7, #0]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d104      	bne.n	8014f76 <pifTimer_Start+0x1a>
		pif_error = E_INVALID_PARAM;
 8014f6c:	4b11      	ldr	r3, [pc, #68]	; (8014fb4 <pifTimer_Start+0x58>)
 8014f6e:	2201      	movs	r2, #1
 8014f70:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8014f72:	2300      	movs	r3, #0
 8014f74:	e017      	b.n	8014fa6 <pifTimer_Start+0x4a>
    }

    if (p_owner->_step == TS_STOP) {
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	7a5b      	ldrb	r3, [r3, #9]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d105      	bne.n	8014f8a <pifTimer_Start+0x2e>
    	p_owner->_step = TS_RUNNING;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	2201      	movs	r2, #1
 8014f82:	725a      	strb	r2, [r3, #9]
    	p_owner->__event = FALSE;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	2200      	movs	r2, #0
 8014f88:	771a      	strb	r2, [r3, #28]
    }
    p_owner->target = target;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	683a      	ldr	r2, [r7, #0]
 8014f8e:	601a      	str	r2, [r3, #0]
    p_owner->__current = target;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	683a      	ldr	r2, [r7, #0]
 8014f94:	60da      	str	r2, [r3, #12]

    if (p_owner->_type == TT_PWM) {
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	7a1b      	ldrb	r3, [r3, #8]
 8014f9a:	2b02      	cmp	r3, #2
 8014f9c:	d102      	bne.n	8014fa4 <pifTimer_Start+0x48>
    	p_owner->__pwm_duty = 0;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	619a      	str	r2, [r3, #24]
    }
    return TRUE;
 8014fa4:	2301      	movs	r3, #1
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	370c      	adds	r7, #12
 8014faa:	46bd      	mov	sp, r7
 8014fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb0:	4770      	bx	lr
 8014fb2:	bf00      	nop
 8014fb4:	20001c0d 	.word	0x20001c0d

08014fb8 <pifTimer_Stop>:

void pifTimer_Stop(PifTimer* p_owner)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
	p_owner->__current = 0;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_STOP;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	2200      	movs	r2, #0
 8014fca:	725a      	strb	r2, [r3, #9]
	if (p_owner->_type == TT_PWM) {
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	7a1b      	ldrb	r3, [r3, #8]
 8014fd0:	2b02      	cmp	r3, #2
 8014fd2:	d103      	bne.n	8014fdc <pifTimer_Stop+0x24>
		(*p_owner->act_pwm)(OFF);
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	685b      	ldr	r3, [r3, #4]
 8014fd8:	2000      	movs	r0, #0
 8014fda:	4798      	blx	r3
	}
}
 8014fdc:	bf00      	nop
 8014fde:	3708      	adds	r7, #8
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}

08014fe4 <pifTimer_Reset>:

void pifTimer_Reset(PifTimer* p_owner)
{
 8014fe4:	b480      	push	{r7}
 8014fe6:	b083      	sub	sp, #12
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
	p_owner->__current = p_owner->target;
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	681a      	ldr	r2, [r3, #0]
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_RUNNING;
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	2201      	movs	r2, #1
 8014ff8:	725a      	strb	r2, [r3, #9]
}
 8014ffa:	bf00      	nop
 8014ffc:	370c      	adds	r7, #12
 8014ffe:	46bd      	mov	sp, r7
 8015000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015004:	4770      	bx	lr

08015006 <pifTimerManager_sigTick>:
	if (p_owner->_step != TS_RUNNING) return 0;
	else return p_owner->target - p_owner->__current;
}

void pifTimerManager_sigTick(PifTimerManager* p_manager)
{
 8015006:	b580      	push	{r7, lr}
 8015008:	b086      	sub	sp, #24
 801500a:	af00      	add	r7, sp, #0
 801500c:	6078      	str	r0, [r7, #4]
	PifTimer* p_remove = NULL;
 801500e:	2300      	movs	r3, #0
 8015010:	617b      	str	r3, [r7, #20]

    if (!p_manager) return;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2b00      	cmp	r3, #0
 8015016:	f000 8092 	beq.w	801513e <pifTimerManager_sigTick+0x138>

    PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	3308      	adds	r3, #8
 801501e:	4618      	mov	r0, r3
 8015020:	f7fd fb97 	bl	8012752 <pifFixList_Begin>
 8015024:	6138      	str	r0, [r7, #16]
	while (it) {
 8015026:	e07c      	b.n	8015122 <pifTimerManager_sigTick+0x11c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8015028:	693b      	ldr	r3, [r7, #16]
 801502a:	3308      	adds	r3, #8
 801502c:	60fb      	str	r3, [r7, #12]

		if (p_timer->_step == TS_REMOVE) {
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	7a5b      	ldrb	r3, [r3, #9]
 8015032:	2b02      	cmp	r3, #2
 8015034:	d105      	bne.n	8015042 <pifTimerManager_sigTick+0x3c>
			if (!p_remove) p_remove = p_timer;
 8015036:	697b      	ldr	r3, [r7, #20]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d16e      	bne.n	801511a <pifTimerManager_sigTick+0x114>
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	617b      	str	r3, [r7, #20]
 8015040:	e06b      	b.n	801511a <pifTimerManager_sigTick+0x114>
		}
		else if (p_timer->__current) {
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	68db      	ldr	r3, [r3, #12]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d060      	beq.n	801510c <pifTimerManager_sigTick+0x106>
			p_timer->__current--;
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	68db      	ldr	r3, [r3, #12]
 801504e:	1e5a      	subs	r2, r3, #1
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	60da      	str	r2, [r3, #12]
			switch (p_timer->_type) {
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	7a1b      	ldrb	r3, [r3, #8]
 8015058:	2b02      	cmp	r3, #2
 801505a:	d031      	beq.n	80150c0 <pifTimerManager_sigTick+0xba>
 801505c:	2b02      	cmp	r3, #2
 801505e:	dc5c      	bgt.n	801511a <pifTimerManager_sigTick+0x114>
 8015060:	2b00      	cmp	r3, #0
 8015062:	d002      	beq.n	801506a <pifTimerManager_sigTick+0x64>
 8015064:	2b01      	cmp	r3, #1
 8015066:	d015      	beq.n	8015094 <pifTimerManager_sigTick+0x8e>
 8015068:	e057      	b.n	801511a <pifTimerManager_sigTick+0x114>
			case TT_ONCE:
				if (!p_timer->__current) {
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	68db      	ldr	r3, [r3, #12]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d14e      	bne.n	8015110 <pifTimerManager_sigTick+0x10a>
					p_timer->_step = TS_STOP;
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	2200      	movs	r2, #0
 8015076:	725a      	strb	r2, [r3, #9]
					p_timer->__event = TRUE;
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	2201      	movs	r2, #1
 801507c:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015082:	2b00      	cmp	r3, #0
 8015084:	d044      	beq.n	8015110 <pifTimerManager_sigTick+0x10a>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801508a:	68fa      	ldr	r2, [r7, #12]
 801508c:	6952      	ldr	r2, [r2, #20]
 801508e:	4610      	mov	r0, r2
 8015090:	4798      	blx	r3
					}
				}
				break;
 8015092:	e03d      	b.n	8015110 <pifTimerManager_sigTick+0x10a>

			case TT_REPEAT:
				if (!p_timer->__current) {
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	68db      	ldr	r3, [r3, #12]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d13b      	bne.n	8015114 <pifTimerManager_sigTick+0x10e>
					p_timer->__current = p_timer->target;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	681a      	ldr	r2, [r3, #0]
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	60da      	str	r2, [r3, #12]
					p_timer->__event = TRUE;
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	2201      	movs	r2, #1
 80150a8:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d030      	beq.n	8015114 <pifTimerManager_sigTick+0x10e>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150b6:	68fa      	ldr	r2, [r7, #12]
 80150b8:	6952      	ldr	r2, [r2, #20]
 80150ba:	4610      	mov	r0, r2
 80150bc:	4798      	blx	r3
					}
				}
				break;
 80150be:	e029      	b.n	8015114 <pifTimerManager_sigTick+0x10e>

			case TT_PWM:
				if (p_timer->__pwm_duty != p_timer->target) {
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	699a      	ldr	r2, [r3, #24]
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d016      	beq.n	80150fa <pifTimerManager_sigTick+0xf4>
					if (!p_timer->__current) {
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	68db      	ldr	r3, [r3, #12]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d107      	bne.n	80150e4 <pifTimerManager_sigTick+0xde>
						(*p_timer->act_pwm)(OFF);
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	685b      	ldr	r3, [r3, #4]
 80150d8:	2000      	movs	r0, #0
 80150da:	4798      	blx	r3
						p_timer->__current = p_timer->target;
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	681a      	ldr	r2, [r3, #0]
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	60da      	str	r2, [r3, #12]
					}
					if (p_timer->__current == p_timer->__pwm_duty) {
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	68da      	ldr	r2, [r3, #12]
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	699b      	ldr	r3, [r3, #24]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d113      	bne.n	8015118 <pifTimerManager_sigTick+0x112>
						(*p_timer->act_pwm)(ON);
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	685b      	ldr	r3, [r3, #4]
 80150f4:	2001      	movs	r0, #1
 80150f6:	4798      	blx	r3
				else {
					if (!p_timer->__current) {
						p_timer->__current = p_timer->target;
					}
				}
				break;
 80150f8:	e00e      	b.n	8015118 <pifTimerManager_sigTick+0x112>
					if (!p_timer->__current) {
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	68db      	ldr	r3, [r3, #12]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d10a      	bne.n	8015118 <pifTimerManager_sigTick+0x112>
						p_timer->__current = p_timer->target;
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	681a      	ldr	r2, [r3, #0]
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	60da      	str	r2, [r3, #12]
				break;
 801510a:	e005      	b.n	8015118 <pifTimerManager_sigTick+0x112>
			}
		}
 801510c:	bf00      	nop
 801510e:	e004      	b.n	801511a <pifTimerManager_sigTick+0x114>
				break;
 8015110:	bf00      	nop
 8015112:	e002      	b.n	801511a <pifTimerManager_sigTick+0x114>
				break;
 8015114:	bf00      	nop
 8015116:	e000      	b.n	801511a <pifTimerManager_sigTick+0x114>
				break;
 8015118:	bf00      	nop

		it = pifFixList_Next(it);
 801511a:	6938      	ldr	r0, [r7, #16]
 801511c:	f7fd fb25 	bl	801276a <pifFixList_Next>
 8015120:	6138      	str	r0, [r7, #16]
	while (it) {
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	2b00      	cmp	r3, #0
 8015126:	f47f af7f 	bne.w	8015028 <pifTimerManager_sigTick+0x22>
	}

	if (p_remove) pifFixList_Remove(&p_manager->__timers, p_remove);
 801512a:	697b      	ldr	r3, [r7, #20]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d007      	beq.n	8015140 <pifTimerManager_sigTick+0x13a>
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	3308      	adds	r3, #8
 8015134:	6979      	ldr	r1, [r7, #20]
 8015136:	4618      	mov	r0, r3
 8015138:	f7fd facb 	bl	80126d2 <pifFixList_Remove>
 801513c:	e000      	b.n	8015140 <pifTimerManager_sigTick+0x13a>
    if (!p_manager) return;
 801513e:	bf00      	nop
}
 8015140:	3718      	adds	r7, #24
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}

08015146 <pifTimer_AttachEvtFinish>:

void pifTimer_AttachEvtFinish(PifTimer* p_owner, PifEvtTimerFinish evt_finish, PifIssuerP p_issuer)
{
 8015146:	b480      	push	{r7}
 8015148:	b085      	sub	sp, #20
 801514a:	af00      	add	r7, sp, #0
 801514c:	60f8      	str	r0, [r7, #12]
 801514e:	60b9      	str	r1, [r7, #8]
 8015150:	607a      	str	r2, [r7, #4]
	p_owner->__evt_finish = evt_finish;
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	68ba      	ldr	r2, [r7, #8]
 8015156:	621a      	str	r2, [r3, #32]
	p_owner->__p_finish_issuer = p_issuer;
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	687a      	ldr	r2, [r7, #4]
 801515c:	611a      	str	r2, [r3, #16]
}
 801515e:	bf00      	nop
 8015160:	3714      	adds	r7, #20
 8015162:	46bd      	mov	sp, r7
 8015164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015168:	4770      	bx	lr
	...

0801516c <pifNoiseFilter_Init>:
#include "filter/pif_noise_filter.h"


BOOL pifNoiseFilter_Init(PifNoiseFilter* p_owner, PifNoiseFilterType type)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b082      	sub	sp, #8
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
 8015174:	460b      	mov	r3, r1
 8015176:	70fb      	strb	r3, [r7, #3]
	if (!p_owner) {
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d104      	bne.n	8015188 <pifNoiseFilter_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 801517e:	4b09      	ldr	r3, [pc, #36]	; (80151a4 <pifNoiseFilter_Init+0x38>)
 8015180:	2201      	movs	r2, #1
 8015182:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015184:	2300      	movs	r3, #0
 8015186:	e008      	b.n	801519a <pifNoiseFilter_Init+0x2e>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilter));
 8015188:	2208      	movs	r2, #8
 801518a:	2100      	movs	r1, #0
 801518c:	6878      	ldr	r0, [r7, #4]
 801518e:	f00d fc83 	bl	8022a98 <memset>

    p_owner->_type = type;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	78fa      	ldrb	r2, [r7, #3]
 8015196:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8015198:	2301      	movs	r3, #1
}
 801519a:	4618      	mov	r0, r3
 801519c:	3708      	adds	r7, #8
 801519e:	46bd      	mov	sp, r7
 80151a0:	bd80      	pop	{r7, pc}
 80151a2:	bf00      	nop
 80151a4:	20001c0d 	.word	0x20001c0d

080151a8 <pifNoiseFilter_Process>:

#ifdef __PIF_NO_USE_INLINE__

PifNoiseFilterValueP pifNoiseFilter_Process(PifNoiseFilter* p_owner, PifNoiseFilterValueP p_value)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
 80151b0:	6039      	str	r1, [r7, #0]
	return (*p_owner->__fn_process)(p_owner, p_value);
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	685b      	ldr	r3, [r3, #4]
 80151b6:	6839      	ldr	r1, [r7, #0]
 80151b8:	6878      	ldr	r0, [r7, #4]
 80151ba:	4798      	blx	r3
 80151bc:	4603      	mov	r3, r0
}
 80151be:	4618      	mov	r0, r3
 80151c0:	3708      	adds	r7, #8
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}

080151c6 <_clear>:
#include "filter/pif_noise_filter_int32.h"


static void _clear(PifNoiseFilterInt32* p_owner)
{
 80151c6:	b580      	push	{r7, lr}
 80151c8:	b082      	sub	sp, #8
 80151ca:	af00      	add	r7, sp, #0
 80151cc:	6078      	str	r0, [r7, #4]
	switch (p_owner->parent._type) {
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	781b      	ldrb	r3, [r3, #0]
 80151d2:	2b01      	cmp	r3, #1
 80151d4:	d002      	beq.n	80151dc <_clear+0x16>
 80151d6:	2b02      	cmp	r3, #2
 80151d8:	d00d      	beq.n	80151f6 <_clear+0x30>
			p_owner->__nc.diff = NULL;
		}
		break;

	default:
		break;
 80151da:	e01c      	b.n	8015216 <_clear+0x50>
		if (p_owner->__wf.value) {
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	699b      	ldr	r3, [r3, #24]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d015      	beq.n	8015210 <_clear+0x4a>
			free(p_owner->__wf.value);
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	699b      	ldr	r3, [r3, #24]
 80151e8:	4618      	mov	r0, r3
 80151ea:	f00d fc3f 	bl	8022a6c <free>
			p_owner->__wf.value = NULL;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2200      	movs	r2, #0
 80151f2:	619a      	str	r2, [r3, #24]
		break;
 80151f4:	e00c      	b.n	8015210 <_clear+0x4a>
		if (p_owner->__nc.diff) {
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	69db      	ldr	r3, [r3, #28]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d00a      	beq.n	8015214 <_clear+0x4e>
			free(p_owner->__nc.diff);
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	69db      	ldr	r3, [r3, #28]
 8015202:	4618      	mov	r0, r3
 8015204:	f00d fc32 	bl	8022a6c <free>
			p_owner->__nc.diff = NULL;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	2200      	movs	r2, #0
 801520c:	61da      	str	r2, [r3, #28]
		break;
 801520e:	e001      	b.n	8015214 <_clear+0x4e>
		break;
 8015210:	bf00      	nop
 8015212:	e000      	b.n	8015216 <_clear+0x50>
		break;
 8015214:	bf00      	nop
	}
}
 8015216:	bf00      	nop
 8015218:	3708      	adds	r7, #8
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}

0801521e <_processAverage>:

static PifNoiseFilterValueP _processAverage(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 801521e:	b480      	push	{r7}
 8015220:	b085      	sub	sp, #20
 8015222:	af00      	add	r7, sp, #0
 8015224:	6078      	str	r0, [r7, #4]
 8015226:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	60fb      	str	r3, [r7, #12]

	p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015232:	3301      	adds	r3, #1
 8015234:	68fa      	ldr	r2, [r7, #12]
 8015236:	f992 2008 	ldrsb.w	r2, [r2, #8]
 801523a:	fb93 f1f2 	sdiv	r1, r3, r2
 801523e:	fb01 f202 	mul.w	r2, r1, r2
 8015242:	1a9b      	subs	r3, r3, r2
 8015244:	b25a      	sxtb	r2, r3
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	751a      	strb	r2, [r3, #20]
	p_owner->__avg.sum -= p_owner->__buffer[p_owner->__current];
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	699a      	ldr	r2, [r3, #24]
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	6919      	ldr	r1, [r3, #16]
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015258:	009b      	lsls	r3, r3, #2
 801525a:	440b      	add	r3, r1
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	1ad2      	subs	r2, r2, r3
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	619a      	str	r2, [r3, #24]
	p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	691a      	ldr	r2, [r3, #16]
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801526e:	009b      	lsls	r3, r3, #2
 8015270:	4413      	add	r3, r2
 8015272:	683a      	ldr	r2, [r7, #0]
 8015274:	6812      	ldr	r2, [r2, #0]
 8015276:	601a      	str	r2, [r3, #0]

	p_owner->__avg.sum += p_owner->__buffer[p_owner->__current];
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	699a      	ldr	r2, [r3, #24]
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	6919      	ldr	r1, [r3, #16]
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015286:	009b      	lsls	r3, r3, #2
 8015288:	440b      	add	r3, r1
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	441a      	add	r2, r3
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	619a      	str	r2, [r3, #24]
	p_owner->_result = p_owner->__avg.sum / p_owner->_size;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	699b      	ldr	r3, [r3, #24]
 8015296:	68fa      	ldr	r2, [r7, #12]
 8015298:	f992 2008 	ldrsb.w	r2, [r2, #8]
 801529c:	fb93 f2f2 	sdiv	r2, r3, r2
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	60da      	str	r2, [r3, #12]
	return &p_owner->_result;
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	330c      	adds	r3, #12
}
 80152a8:	4618      	mov	r0, r3
 80152aa:	3714      	adds	r7, #20
 80152ac:	46bd      	mov	sp, r7
 80152ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b2:	4770      	bx	lr

080152b4 <_processNoiseCancel>:
	p_owner->_result = sum / p_owner->__wf.total;
	return &p_owner->_result;
}

static PifNoiseFilterValueP _processNoiseCancel(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 80152b4:	b480      	push	{r7}
 80152b6:	b08b      	sub	sp, #44	; 0x2c
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	6078      	str	r0, [r7, #4]
 80152bc:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	61bb      	str	r3, [r7, #24]
	int32_t sum;
	int16_t* p_current;
	int16_t* p_before;
	int16_t current[3];

	p_before = p_owner->__nc.diff + p_owner->__current * 3;
 80152c2:	69bb      	ldr	r3, [r7, #24]
 80152c4:	69da      	ldr	r2, [r3, #28]
 80152c6:	69bb      	ldr	r3, [r7, #24]
 80152c8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80152cc:	4619      	mov	r1, r3
 80152ce:	460b      	mov	r3, r1
 80152d0:	005b      	lsls	r3, r3, #1
 80152d2:	440b      	add	r3, r1
 80152d4:	005b      	lsls	r3, r3, #1
 80152d6:	4413      	add	r3, r2
 80152d8:	617b      	str	r3, [r7, #20]

	current[0] = *(int32_t*)p_value - p_owner->__buffer[p_owner->__current];
 80152da:	683b      	ldr	r3, [r7, #0]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	b29a      	uxth	r2, r3
 80152e0:	69bb      	ldr	r3, [r7, #24]
 80152e2:	6919      	ldr	r1, [r3, #16]
 80152e4:	69bb      	ldr	r3, [r7, #24]
 80152e6:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80152ea:	009b      	lsls	r3, r3, #2
 80152ec:	440b      	add	r3, r1
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	b29b      	uxth	r3, r3
 80152f2:	1ad3      	subs	r3, r2, r3
 80152f4:	b29b      	uxth	r3, r3
 80152f6:	b21b      	sxth	r3, r3
 80152f8:	813b      	strh	r3, [r7, #8]

	current[1] = current[0] - p_before[0];
 80152fa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80152fe:	b29a      	uxth	r2, r3
 8015300:	697b      	ldr	r3, [r7, #20]
 8015302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015306:	b29b      	uxth	r3, r3
 8015308:	1ad3      	subs	r3, r2, r3
 801530a:	b29b      	uxth	r3, r3
 801530c:	b21b      	sxth	r3, r3
 801530e:	817b      	strh	r3, [r7, #10]
	if (current[1] < 0) current[1] = -current[1];
 8015310:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015314:	2b00      	cmp	r3, #0
 8015316:	da06      	bge.n	8015326 <_processNoiseCancel+0x72>
 8015318:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801531c:	b29b      	uxth	r3, r3
 801531e:	425b      	negs	r3, r3
 8015320:	b29b      	uxth	r3, r3
 8015322:	b21b      	sxth	r3, r3
 8015324:	817b      	strh	r3, [r7, #10]

	current[2] = current[0] + p_before[0];
 8015326:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801532a:	b29a      	uxth	r2, r3
 801532c:	697b      	ldr	r3, [r7, #20]
 801532e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015332:	b29b      	uxth	r3, r3
 8015334:	4413      	add	r3, r2
 8015336:	b29b      	uxth	r3, r3
 8015338:	b21b      	sxth	r3, r3
 801533a:	81bb      	strh	r3, [r7, #12]
	if (current[2] < 0) current[2] = -current[2];
 801533c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015340:	2b00      	cmp	r3, #0
 8015342:	da06      	bge.n	8015352 <_processNoiseCancel+0x9e>
 8015344:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015348:	b29b      	uxth	r3, r3
 801534a:	425b      	negs	r3, r3
 801534c:	b29b      	uxth	r3, r3
 801534e:	b21b      	sxth	r3, r3
 8015350:	81bb      	strh	r3, [r7, #12]

	if (current[1] > current[2]) {
 8015352:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015356:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801535a:	429a      	cmp	r2, r3
 801535c:	dd6d      	ble.n	801543a <_processNoiseCancel+0x186>
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 801535e:	69bb      	ldr	r3, [r7, #24]
 8015360:	691a      	ldr	r2, [r3, #16]
 8015362:	69bb      	ldr	r3, [r7, #24]
 8015364:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015368:	009b      	lsls	r3, r3, #2
 801536a:	4413      	add	r3, r2
 801536c:	683a      	ldr	r2, [r7, #0]
 801536e:	6812      	ldr	r2, [r2, #0]
 8015370:	601a      	str	r2, [r3, #0]

		p_current = p_before;
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	613b      	str	r3, [r7, #16]
		p_before = p_owner->__nc.diff + p_owner->__nc.before * 3;
 8015376:	69bb      	ldr	r3, [r7, #24]
 8015378:	69da      	ldr	r2, [r3, #28]
 801537a:	69bb      	ldr	r3, [r7, #24]
 801537c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8015380:	4619      	mov	r1, r3
 8015382:	460b      	mov	r3, r1
 8015384:	005b      	lsls	r3, r3, #1
 8015386:	440b      	add	r3, r1
 8015388:	005b      	lsls	r3, r3, #1
 801538a:	4413      	add	r3, r2
 801538c:	617b      	str	r3, [r7, #20]

		p_current[0] = p_owner->__buffer[p_owner->__current] - p_owner->__buffer[p_owner->__nc.before];
 801538e:	69bb      	ldr	r3, [r7, #24]
 8015390:	691a      	ldr	r2, [r3, #16]
 8015392:	69bb      	ldr	r3, [r7, #24]
 8015394:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015398:	009b      	lsls	r3, r3, #2
 801539a:	4413      	add	r3, r2
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	b29a      	uxth	r2, r3
 80153a0:	69bb      	ldr	r3, [r7, #24]
 80153a2:	6919      	ldr	r1, [r3, #16]
 80153a4:	69bb      	ldr	r3, [r7, #24]
 80153a6:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80153aa:	009b      	lsls	r3, r3, #2
 80153ac:	440b      	add	r3, r1
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	b29b      	uxth	r3, r3
 80153b2:	1ad3      	subs	r3, r2, r3
 80153b4:	b29b      	uxth	r3, r3
 80153b6:	b21a      	sxth	r2, r3
 80153b8:	693b      	ldr	r3, [r7, #16]
 80153ba:	801a      	strh	r2, [r3, #0]

		p_current[1] = p_current[0] - p_before[0];
 80153bc:	693b      	ldr	r3, [r7, #16]
 80153be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153c2:	b29a      	uxth	r2, r3
 80153c4:	697b      	ldr	r3, [r7, #20]
 80153c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153ca:	b29b      	uxth	r3, r3
 80153cc:	1ad3      	subs	r3, r2, r3
 80153ce:	b29a      	uxth	r2, r3
 80153d0:	693b      	ldr	r3, [r7, #16]
 80153d2:	3302      	adds	r3, #2
 80153d4:	b212      	sxth	r2, r2
 80153d6:	801a      	strh	r2, [r3, #0]
		if (p_current[1] < 0) p_current[1] = -p_current[1];
 80153d8:	693b      	ldr	r3, [r7, #16]
 80153da:	3302      	adds	r3, #2
 80153dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	da0a      	bge.n	80153fa <_processNoiseCancel+0x146>
 80153e4:	693b      	ldr	r3, [r7, #16]
 80153e6:	3302      	adds	r3, #2
 80153e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153ec:	b29b      	uxth	r3, r3
 80153ee:	425b      	negs	r3, r3
 80153f0:	b29a      	uxth	r2, r3
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	3302      	adds	r3, #2
 80153f6:	b212      	sxth	r2, r2
 80153f8:	801a      	strh	r2, [r3, #0]

		p_current[2] = p_current[0] + p_before[0];
 80153fa:	693b      	ldr	r3, [r7, #16]
 80153fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015400:	b29a      	uxth	r2, r3
 8015402:	697b      	ldr	r3, [r7, #20]
 8015404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015408:	b29b      	uxth	r3, r3
 801540a:	4413      	add	r3, r2
 801540c:	b29a      	uxth	r2, r3
 801540e:	693b      	ldr	r3, [r7, #16]
 8015410:	3304      	adds	r3, #4
 8015412:	b212      	sxth	r2, r2
 8015414:	801a      	strh	r2, [r3, #0]
		if (p_current[2] < 0) p_current[2] = -p_current[2];
 8015416:	693b      	ldr	r3, [r7, #16]
 8015418:	3304      	adds	r3, #4
 801541a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801541e:	2b00      	cmp	r3, #0
 8015420:	da43      	bge.n	80154aa <_processNoiseCancel+0x1f6>
 8015422:	693b      	ldr	r3, [r7, #16]
 8015424:	3304      	adds	r3, #4
 8015426:	f9b3 3000 	ldrsh.w	r3, [r3]
 801542a:	b29b      	uxth	r3, r3
 801542c:	425b      	negs	r3, r3
 801542e:	b29a      	uxth	r2, r3
 8015430:	693b      	ldr	r3, [r7, #16]
 8015432:	3304      	adds	r3, #4
 8015434:	b212      	sxth	r2, r2
 8015436:	801a      	strh	r2, [r3, #0]
 8015438:	e037      	b.n	80154aa <_processNoiseCancel+0x1f6>
	}
	else {
		p_owner->__nc.before = p_owner->__current;
 801543a:	69bb      	ldr	r3, [r7, #24]
 801543c:	f993 2014 	ldrsb.w	r2, [r3, #20]
 8015440:	69bb      	ldr	r3, [r7, #24]
 8015442:	761a      	strb	r2, [r3, #24]
		p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 8015444:	69bb      	ldr	r3, [r7, #24]
 8015446:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801544a:	3301      	adds	r3, #1
 801544c:	69ba      	ldr	r2, [r7, #24]
 801544e:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015452:	fb93 f1f2 	sdiv	r1, r3, r2
 8015456:	fb01 f202 	mul.w	r2, r1, r2
 801545a:	1a9b      	subs	r3, r3, r2
 801545c:	b25a      	sxtb	r2, r3
 801545e:	69bb      	ldr	r3, [r7, #24]
 8015460:	751a      	strb	r2, [r3, #20]
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015462:	69bb      	ldr	r3, [r7, #24]
 8015464:	691a      	ldr	r2, [r3, #16]
 8015466:	69bb      	ldr	r3, [r7, #24]
 8015468:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801546c:	009b      	lsls	r3, r3, #2
 801546e:	4413      	add	r3, r2
 8015470:	683a      	ldr	r2, [r7, #0]
 8015472:	6812      	ldr	r2, [r2, #0]
 8015474:	601a      	str	r2, [r3, #0]

		p_current = p_owner->__nc.diff + p_owner->__current * 3;
 8015476:	69bb      	ldr	r3, [r7, #24]
 8015478:	69da      	ldr	r2, [r3, #28]
 801547a:	69bb      	ldr	r3, [r7, #24]
 801547c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015480:	4619      	mov	r1, r3
 8015482:	460b      	mov	r3, r1
 8015484:	005b      	lsls	r3, r3, #1
 8015486:	440b      	add	r3, r1
 8015488:	005b      	lsls	r3, r3, #1
 801548a:	4413      	add	r3, r2
 801548c:	613b      	str	r3, [r7, #16]

		p_current[0] = current[0];
 801548e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015492:	693b      	ldr	r3, [r7, #16]
 8015494:	801a      	strh	r2, [r3, #0]
		p_current[1] = current[1];
 8015496:	693b      	ldr	r3, [r7, #16]
 8015498:	3302      	adds	r3, #2
 801549a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801549e:	801a      	strh	r2, [r3, #0]
		p_current[2] = current[2];
 80154a0:	693b      	ldr	r3, [r7, #16]
 80154a2:	3304      	adds	r3, #4
 80154a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80154a8:	801a      	strh	r2, [r3, #0]
	}

	sum = 0;
 80154aa:	2300      	movs	r3, #0
 80154ac:	61fb      	str	r3, [r7, #28]
	count = 0;
 80154ae:	2300      	movs	r3, #0
 80154b0:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 80154b2:	2300      	movs	r3, #0
 80154b4:	627b      	str	r3, [r7, #36]	; 0x24
 80154b6:	e00e      	b.n	80154d6 <_processNoiseCancel+0x222>
		sum += p_owner->__buffer[i];
 80154b8:	69bb      	ldr	r3, [r7, #24]
 80154ba:	691a      	ldr	r2, [r3, #16]
 80154bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154be:	009b      	lsls	r3, r3, #2
 80154c0:	4413      	add	r3, r2
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	69fa      	ldr	r2, [r7, #28]
 80154c6:	4413      	add	r3, r2
 80154c8:	61fb      	str	r3, [r7, #28]
		count++;
 80154ca:	6a3b      	ldr	r3, [r7, #32]
 80154cc:	3301      	adds	r3, #1
 80154ce:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 80154d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d2:	3301      	adds	r3, #1
 80154d4:	627b      	str	r3, [r7, #36]	; 0x24
 80154d6:	69bb      	ldr	r3, [r7, #24]
 80154d8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80154dc:	461a      	mov	r2, r3
 80154de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154e0:	4293      	cmp	r3, r2
 80154e2:	dbe9      	blt.n	80154b8 <_processNoiseCancel+0x204>
	}
	if (count > 0) {
 80154e4:	6a3b      	ldr	r3, [r7, #32]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	dd05      	ble.n	80154f6 <_processNoiseCancel+0x242>
		p_owner->_result = sum / count;
 80154ea:	69fa      	ldr	r2, [r7, #28]
 80154ec:	6a3b      	ldr	r3, [r7, #32]
 80154ee:	fb92 f2f3 	sdiv	r2, r2, r3
 80154f2:	69bb      	ldr	r3, [r7, #24]
 80154f4:	60da      	str	r2, [r3, #12]
	}
	return &p_owner->_result;
 80154f6:	69bb      	ldr	r3, [r7, #24]
 80154f8:	330c      	adds	r3, #12
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	372c      	adds	r7, #44	; 0x2c
 80154fe:	46bd      	mov	sp, r7
 8015500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015504:	4770      	bx	lr
	...

08015508 <pifNoiseFilterInt32_Init>:

BOOL pifNoiseFilterInt32_Init(PifNoiseFilterInt32* p_owner, uint8_t size)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b082      	sub	sp, #8
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
 8015510:	460b      	mov	r3, r1
 8015512:	70fb      	strb	r3, [r7, #3]
	if (!p_owner || !size) {
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d002      	beq.n	8015520 <pifNoiseFilterInt32_Init+0x18>
 801551a:	78fb      	ldrb	r3, [r7, #3]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d104      	bne.n	801552a <pifNoiseFilterInt32_Init+0x22>
		pif_error = E_INVALID_PARAM;
 8015520:	4b17      	ldr	r3, [pc, #92]	; (8015580 <pifNoiseFilterInt32_Init+0x78>)
 8015522:	2201      	movs	r2, #1
 8015524:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015526:	2300      	movs	r3, #0
 8015528:	e026      	b.n	8015578 <pifNoiseFilterInt32_Init+0x70>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilterInt32));
 801552a:	2220      	movs	r2, #32
 801552c:	2100      	movs	r1, #0
 801552e:	6878      	ldr	r0, [r7, #4]
 8015530:	f00d fab2 	bl	8022a98 <memset>

	p_owner->__buffer = calloc(size, sizeof(int32_t));
 8015534:	78fb      	ldrb	r3, [r7, #3]
 8015536:	2104      	movs	r1, #4
 8015538:	4618      	mov	r0, r3
 801553a:	f00d fa5d 	bl	80229f8 <calloc>
 801553e:	4603      	mov	r3, r0
 8015540:	461a      	mov	r2, r3
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	611a      	str	r2, [r3, #16]
	if (!p_owner->__buffer) {
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	691b      	ldr	r3, [r3, #16]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d104      	bne.n	8015558 <pifNoiseFilterInt32_Init+0x50>
		pif_error = E_OUT_OF_HEAP;
 801554e:	4b0c      	ldr	r3, [pc, #48]	; (8015580 <pifNoiseFilterInt32_Init+0x78>)
 8015550:	2203      	movs	r2, #3
 8015552:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015554:	2300      	movs	r3, #0
 8015556:	e00f      	b.n	8015578 <pifNoiseFilterInt32_Init+0x70>
	}

	pifNoiseFilter_Init(&p_owner->parent, NFT_AVERAGE);
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	2100      	movs	r1, #0
 801555c:	4618      	mov	r0, r3
 801555e:	f7ff fe05 	bl	801516c <pifNoiseFilter_Init>
    p_owner->_size = size;
 8015562:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	721a      	strb	r2, [r3, #8]
	p_owner->__current = 0;
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	2200      	movs	r2, #0
 801556e:	751a      	strb	r2, [r3, #20]

	p_owner->parent.__fn_process = _processAverage;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	4a04      	ldr	r2, [pc, #16]	; (8015584 <pifNoiseFilterInt32_Init+0x7c>)
 8015574:	605a      	str	r2, [r3, #4]
    return TRUE;
 8015576:	2301      	movs	r3, #1
}
 8015578:	4618      	mov	r0, r3
 801557a:	3708      	adds	r7, #8
 801557c:	46bd      	mov	sp, r7
 801557e:	bd80      	pop	{r7, pc}
 8015580:	20001c0d 	.word	0x20001c0d
 8015584:	0801521f 	.word	0x0801521f

08015588 <pifNoiseFilterInt32_SetNoiseCancel>:
	p_owner->parent.__fn_process = _processWeightFactor;
	return TRUE;
}

BOOL pifNoiseFilterInt32_SetNoiseCancel(PifNoiseFilterInt32* p_owner)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b082      	sub	sp, #8
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
	_clear(p_owner);
 8015590:	6878      	ldr	r0, [r7, #4]
 8015592:	f7ff fe18 	bl	80151c6 <_clear>

	if (p_owner->_size < 3 || p_owner->_size > 32) {
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801559c:	2b02      	cmp	r3, #2
 801559e:	dd04      	ble.n	80155aa <pifNoiseFilterInt32_SetNoiseCancel+0x22>
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80155a6:	2b20      	cmp	r3, #32
 80155a8:	dd04      	ble.n	80155b4 <pifNoiseFilterInt32_SetNoiseCancel+0x2c>
		pif_error = E_INVALID_PARAM;
 80155aa:	4b15      	ldr	r3, [pc, #84]	; (8015600 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 80155ac:	2201      	movs	r2, #1
 80155ae:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80155b0:	2300      	movs	r3, #0
 80155b2:	e021      	b.n	80155f8 <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.diff = calloc(p_owner->_size * 3, sizeof(int16_t));
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80155ba:	461a      	mov	r2, r3
 80155bc:	4613      	mov	r3, r2
 80155be:	005b      	lsls	r3, r3, #1
 80155c0:	4413      	add	r3, r2
 80155c2:	2102      	movs	r1, #2
 80155c4:	4618      	mov	r0, r3
 80155c6:	f00d fa17 	bl	80229f8 <calloc>
 80155ca:	4603      	mov	r3, r0
 80155cc:	461a      	mov	r2, r3
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	61da      	str	r2, [r3, #28]
	if (!p_owner->__nc.diff) {
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	69db      	ldr	r3, [r3, #28]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d104      	bne.n	80155e4 <pifNoiseFilterInt32_SetNoiseCancel+0x5c>
		pif_error = E_OUT_OF_HEAP;
 80155da:	4b09      	ldr	r3, [pc, #36]	; (8015600 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 80155dc:	2203      	movs	r2, #3
 80155de:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80155e0:	2300      	movs	r3, #0
 80155e2:	e009      	b.n	80155f8 <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.before = 0;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	2200      	movs	r2, #0
 80155e8:	761a      	strb	r2, [r3, #24]

	p_owner->parent._type = NFT_NOISE_CANCEL;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	2202      	movs	r2, #2
 80155ee:	701a      	strb	r2, [r3, #0]
	p_owner->parent.__fn_process = _processNoiseCancel;
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	4a04      	ldr	r2, [pc, #16]	; (8015604 <pifNoiseFilterInt32_SetNoiseCancel+0x7c>)
 80155f4:	605a      	str	r2, [r3, #4]
	return TRUE;
 80155f6:	2301      	movs	r3, #1
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3708      	adds	r7, #8
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}
 8015600:	20001c0d 	.word	0x20001c0d
 8015604:	080152b5 	.word	0x080152b5

08015608 <_convertString2Date>:

#define DIGIT_TO_VAL(_x)        (_x - '0')


static void _convertString2Date(char* str, PifDateTime* p_date_time)
{
 8015608:	b480      	push	{r7}
 801560a:	b083      	sub	sp, #12
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
 8015610:	6039      	str	r1, [r7, #0]
	p_date_time->day = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	781b      	ldrb	r3, [r3, #0]
 8015616:	3b30      	subs	r3, #48	; 0x30
 8015618:	b2db      	uxtb	r3, r3
 801561a:	461a      	mov	r2, r3
 801561c:	0092      	lsls	r2, r2, #2
 801561e:	4413      	add	r3, r2
 8015620:	005b      	lsls	r3, r3, #1
 8015622:	b2da      	uxtb	r2, r3
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	3301      	adds	r3, #1
 8015628:	781b      	ldrb	r3, [r3, #0]
 801562a:	4413      	add	r3, r2
 801562c:	b2db      	uxtb	r3, r3
 801562e:	3b30      	subs	r3, #48	; 0x30
 8015630:	b2da      	uxtb	r2, r3
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	709a      	strb	r2, [r3, #2]
	p_date_time->month = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	3302      	adds	r3, #2
 801563a:	781b      	ldrb	r3, [r3, #0]
 801563c:	3b30      	subs	r3, #48	; 0x30
 801563e:	b2db      	uxtb	r3, r3
 8015640:	461a      	mov	r2, r3
 8015642:	0092      	lsls	r2, r2, #2
 8015644:	4413      	add	r3, r2
 8015646:	005b      	lsls	r3, r3, #1
 8015648:	b2da      	uxtb	r2, r3
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	3303      	adds	r3, #3
 801564e:	781b      	ldrb	r3, [r3, #0]
 8015650:	4413      	add	r3, r2
 8015652:	b2db      	uxtb	r3, r3
 8015654:	3b30      	subs	r3, #48	; 0x30
 8015656:	b2da      	uxtb	r2, r3
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	705a      	strb	r2, [r3, #1]
	p_date_time->year = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	3304      	adds	r3, #4
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	3b30      	subs	r3, #48	; 0x30
 8015664:	b2db      	uxtb	r3, r3
 8015666:	461a      	mov	r2, r3
 8015668:	0092      	lsls	r2, r2, #2
 801566a:	4413      	add	r3, r2
 801566c:	005b      	lsls	r3, r3, #1
 801566e:	b2da      	uxtb	r2, r3
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	3305      	adds	r3, #5
 8015674:	781b      	ldrb	r3, [r3, #0]
 8015676:	4413      	add	r3, r2
 8015678:	b2db      	uxtb	r3, r3
 801567a:	3b30      	subs	r3, #48	; 0x30
 801567c:	b2da      	uxtb	r2, r3
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	701a      	strb	r2, [r3, #0]
}
 8015682:	bf00      	nop
 8015684:	370c      	adds	r7, #12
 8015686:	46bd      	mov	sp, r7
 8015688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801568c:	4770      	bx	lr
	...

08015690 <_convertString2Time>:

static void _convertString2Time(char* str, PifDateTime* p_date_time)
{
 8015690:	b480      	push	{r7}
 8015692:	b085      	sub	sp, #20
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
 8015698:	6039      	str	r1, [r7, #0]
	int i, digit;

	p_date_time->hour = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	781b      	ldrb	r3, [r3, #0]
 801569e:	3b30      	subs	r3, #48	; 0x30
 80156a0:	b2db      	uxtb	r3, r3
 80156a2:	461a      	mov	r2, r3
 80156a4:	0092      	lsls	r2, r2, #2
 80156a6:	4413      	add	r3, r2
 80156a8:	005b      	lsls	r3, r3, #1
 80156aa:	b2da      	uxtb	r2, r3
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	3301      	adds	r3, #1
 80156b0:	781b      	ldrb	r3, [r3, #0]
 80156b2:	4413      	add	r3, r2
 80156b4:	b2db      	uxtb	r3, r3
 80156b6:	3b30      	subs	r3, #48	; 0x30
 80156b8:	b2da      	uxtb	r2, r3
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	70da      	strb	r2, [r3, #3]
	p_date_time->minute = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	3302      	adds	r3, #2
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	3b30      	subs	r3, #48	; 0x30
 80156c6:	b2db      	uxtb	r3, r3
 80156c8:	461a      	mov	r2, r3
 80156ca:	0092      	lsls	r2, r2, #2
 80156cc:	4413      	add	r3, r2
 80156ce:	005b      	lsls	r3, r3, #1
 80156d0:	b2da      	uxtb	r2, r3
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	3303      	adds	r3, #3
 80156d6:	781b      	ldrb	r3, [r3, #0]
 80156d8:	4413      	add	r3, r2
 80156da:	b2db      	uxtb	r3, r3
 80156dc:	3b30      	subs	r3, #48	; 0x30
 80156de:	b2da      	uxtb	r2, r3
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	711a      	strb	r2, [r3, #4]
	p_date_time->second = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	3304      	adds	r3, #4
 80156e8:	781b      	ldrb	r3, [r3, #0]
 80156ea:	3b30      	subs	r3, #48	; 0x30
 80156ec:	b2db      	uxtb	r3, r3
 80156ee:	461a      	mov	r2, r3
 80156f0:	0092      	lsls	r2, r2, #2
 80156f2:	4413      	add	r3, r2
 80156f4:	005b      	lsls	r3, r3, #1
 80156f6:	b2da      	uxtb	r2, r3
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	3305      	adds	r3, #5
 80156fc:	781b      	ldrb	r3, [r3, #0]
 80156fe:	4413      	add	r3, r2
 8015700:	b2db      	uxtb	r3, r3
 8015702:	3b30      	subs	r3, #48	; 0x30
 8015704:	b2da      	uxtb	r2, r3
 8015706:	683b      	ldr	r3, [r7, #0]
 8015708:	715a      	strb	r2, [r3, #5]
	if (str[6] == '.') {
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	3306      	adds	r3, #6
 801570e:	781b      	ldrb	r3, [r3, #0]
 8015710:	2b2e      	cmp	r3, #46	; 0x2e
 8015712:	d134      	bne.n	801577e <_convertString2Time+0xee>
		p_date_time->millisecond = 0;
 8015714:	683b      	ldr	r3, [r7, #0]
 8015716:	2200      	movs	r2, #0
 8015718:	80da      	strh	r2, [r3, #6]
		digit = 100;
 801571a:	2364      	movs	r3, #100	; 0x64
 801571c:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 801571e:	2307      	movs	r3, #7
 8015720:	60fb      	str	r3, [r7, #12]
 8015722:	e027      	b.n	8015774 <_convertString2Time+0xe4>
			if (!isdigit((int)str[i])) break;
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	687a      	ldr	r2, [r7, #4]
 8015728:	4413      	add	r3, r2
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	3301      	adds	r3, #1
 801572e:	4a17      	ldr	r2, [pc, #92]	; (801578c <_convertString2Time+0xfc>)
 8015730:	4413      	add	r3, r2
 8015732:	781b      	ldrb	r3, [r3, #0]
 8015734:	f003 0304 	and.w	r3, r3, #4
 8015738:	2b00      	cmp	r3, #0
 801573a:	d01f      	beq.n	801577c <_convertString2Time+0xec>
			p_date_time->millisecond += DIGIT_TO_VAL(str[i]) * digit;
 801573c:	683b      	ldr	r3, [r7, #0]
 801573e:	88da      	ldrh	r2, [r3, #6]
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	6879      	ldr	r1, [r7, #4]
 8015744:	440b      	add	r3, r1
 8015746:	781b      	ldrb	r3, [r3, #0]
 8015748:	3b30      	subs	r3, #48	; 0x30
 801574a:	b299      	uxth	r1, r3
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	b29b      	uxth	r3, r3
 8015750:	fb11 f303 	smulbb	r3, r1, r3
 8015754:	b29b      	uxth	r3, r3
 8015756:	4413      	add	r3, r2
 8015758:	b29a      	uxth	r2, r3
 801575a:	683b      	ldr	r3, [r7, #0]
 801575c:	80da      	strh	r2, [r3, #6]
			digit /= 10;
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	4a0b      	ldr	r2, [pc, #44]	; (8015790 <_convertString2Time+0x100>)
 8015762:	fb82 1203 	smull	r1, r2, r2, r3
 8015766:	1092      	asrs	r2, r2, #2
 8015768:	17db      	asrs	r3, r3, #31
 801576a:	1ad3      	subs	r3, r2, r3
 801576c:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	3301      	adds	r3, #1
 8015772:	60fb      	str	r3, [r7, #12]
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	2b09      	cmp	r3, #9
 8015778:	ddd4      	ble.n	8015724 <_convertString2Time+0x94>
		}
	}
}
 801577a:	e000      	b.n	801577e <_convertString2Time+0xee>
			if (!isdigit((int)str[i])) break;
 801577c:	bf00      	nop
}
 801577e:	bf00      	nop
 8015780:	3714      	adds	r7, #20
 8015782:	46bd      	mov	sp, r7
 8015784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015788:	4770      	bx	lr
 801578a:	bf00      	nop
 801578c:	080290c4 	.word	0x080290c4
 8015790:	66666667 	.word	0x66666667

08015794 <_convertString2Float>:

static double _convertString2Float(char* str)
{
 8015794:	b5b0      	push	{r4, r5, r7, lr}
 8015796:	b088      	sub	sp, #32
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
	char* p;
	double value = 0.0, unit;
 801579c:	f04f 0200 	mov.w	r2, #0
 80157a0:	f04f 0300 	mov.w	r3, #0
 80157a4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	p = str;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	61fb      	str	r3, [r7, #28]
	if (*p == '-') p++;
 80157ac:	69fb      	ldr	r3, [r7, #28]
 80157ae:	781b      	ldrb	r3, [r3, #0]
 80157b0:	2b2d      	cmp	r3, #45	; 0x2d
 80157b2:	d120      	bne.n	80157f6 <_convertString2Float+0x62>
 80157b4:	69fb      	ldr	r3, [r7, #28]
 80157b6:	3301      	adds	r3, #1
 80157b8:	61fb      	str	r3, [r7, #28]
	while (isdigit((int)*p)) {
 80157ba:	e01c      	b.n	80157f6 <_convertString2Float+0x62>
		value *= 10;
 80157bc:	f04f 0200 	mov.w	r2, #0
 80157c0:	4b38      	ldr	r3, [pc, #224]	; (80158a4 <_convertString2Float+0x110>)
 80157c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80157c6:	f7ea fecb 	bl	8000560 <__aeabi_dmul>
 80157ca:	4602      	mov	r2, r0
 80157cc:	460b      	mov	r3, r1
 80157ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
		value += DIGIT_TO_VAL(*p++);
 80157d2:	69fb      	ldr	r3, [r7, #28]
 80157d4:	1c5a      	adds	r2, r3, #1
 80157d6:	61fa      	str	r2, [r7, #28]
 80157d8:	781b      	ldrb	r3, [r3, #0]
 80157da:	3b30      	subs	r3, #48	; 0x30
 80157dc:	4618      	mov	r0, r3
 80157de:	f7ea fe55 	bl	800048c <__aeabi_i2d>
 80157e2:	4602      	mov	r2, r0
 80157e4:	460b      	mov	r3, r1
 80157e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80157ea:	f7ea fd03 	bl	80001f4 <__adddf3>
 80157ee:	4602      	mov	r2, r0
 80157f0:	460b      	mov	r3, r1
 80157f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (isdigit((int)*p)) {
 80157f6:	69fb      	ldr	r3, [r7, #28]
 80157f8:	781b      	ldrb	r3, [r3, #0]
 80157fa:	3301      	adds	r3, #1
 80157fc:	4a2a      	ldr	r2, [pc, #168]	; (80158a8 <_convertString2Float+0x114>)
 80157fe:	4413      	add	r3, r2
 8015800:	781b      	ldrb	r3, [r3, #0]
 8015802:	f003 0304 	and.w	r3, r3, #4
 8015806:	2b00      	cmp	r3, #0
 8015808:	d1d8      	bne.n	80157bc <_convertString2Float+0x28>
	}
	if (*str == '-') value = -value;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	781b      	ldrb	r3, [r3, #0]
 801580e:	2b2d      	cmp	r3, #45	; 0x2d
 8015810:	d105      	bne.n	801581e <_convertString2Float+0x8a>
 8015812:	693c      	ldr	r4, [r7, #16]
 8015814:	697b      	ldr	r3, [r7, #20]
 8015816:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 801581a:	e9c7 4504 	strd	r4, r5, [r7, #16]

	if (*p == '.') {
 801581e:	69fb      	ldr	r3, [r7, #28]
 8015820:	781b      	ldrb	r3, [r3, #0]
 8015822:	2b2e      	cmp	r3, #46	; 0x2e
 8015824:	d133      	bne.n	801588e <_convertString2Float+0xfa>
		p++;
 8015826:	69fb      	ldr	r3, [r7, #28]
 8015828:	3301      	adds	r3, #1
 801582a:	61fb      	str	r3, [r7, #28]
		unit = 10;
 801582c:	f04f 0200 	mov.w	r2, #0
 8015830:	4b1c      	ldr	r3, [pc, #112]	; (80158a4 <_convertString2Float+0x110>)
 8015832:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 8015836:	e020      	b.n	801587a <_convertString2Float+0xe6>
			value += DIGIT_TO_VAL(*p++) / unit;
 8015838:	69fb      	ldr	r3, [r7, #28]
 801583a:	1c5a      	adds	r2, r3, #1
 801583c:	61fa      	str	r2, [r7, #28]
 801583e:	781b      	ldrb	r3, [r3, #0]
 8015840:	3b30      	subs	r3, #48	; 0x30
 8015842:	4618      	mov	r0, r3
 8015844:	f7ea fe22 	bl	800048c <__aeabi_i2d>
 8015848:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801584c:	f7ea ffb2 	bl	80007b4 <__aeabi_ddiv>
 8015850:	4602      	mov	r2, r0
 8015852:	460b      	mov	r3, r1
 8015854:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015858:	f7ea fccc 	bl	80001f4 <__adddf3>
 801585c:	4602      	mov	r2, r0
 801585e:	460b      	mov	r3, r1
 8015860:	e9c7 2304 	strd	r2, r3, [r7, #16]
			unit *= 10;
 8015864:	f04f 0200 	mov.w	r2, #0
 8015868:	4b0e      	ldr	r3, [pc, #56]	; (80158a4 <_convertString2Float+0x110>)
 801586a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801586e:	f7ea fe77 	bl	8000560 <__aeabi_dmul>
 8015872:	4602      	mov	r2, r0
 8015874:	460b      	mov	r3, r1
 8015876:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 801587a:	69fb      	ldr	r3, [r7, #28]
 801587c:	781b      	ldrb	r3, [r3, #0]
 801587e:	3301      	adds	r3, #1
 8015880:	4a09      	ldr	r2, [pc, #36]	; (80158a8 <_convertString2Float+0x114>)
 8015882:	4413      	add	r3, r2
 8015884:	781b      	ldrb	r3, [r3, #0]
 8015886:	f003 0304 	and.w	r3, r3, #4
 801588a:	2b00      	cmp	r3, #0
 801588c:	d1d4      	bne.n	8015838 <_convertString2Float+0xa4>
		}
	}
	return value;
 801588e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015892:	ec43 2b17 	vmov	d7, r2, r3
}
 8015896:	eeb0 0a47 	vmov.f32	s0, s14
 801589a:	eef0 0a67 	vmov.f32	s1, s15
 801589e:	3720      	adds	r7, #32
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bdb0      	pop	{r4, r5, r7, pc}
 80158a4:	40240000 	.word	0x40240000
 80158a8:	080290c4 	.word	0x080290c4

080158ac <_convertString2Interger>:

static int _convertString2Interger(char* str)
{
 80158ac:	b480      	push	{r7}
 80158ae:	b085      	sub	sp, #20
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
	char* p;
	int value = 0.0;
 80158b4:	2300      	movs	r3, #0
 80158b6:	60bb      	str	r3, [r7, #8]

	p = str;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	60fb      	str	r3, [r7, #12]
	if (*p == '-') p++;
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	2b2d      	cmp	r3, #45	; 0x2d
 80158c2:	d111      	bne.n	80158e8 <_convertString2Interger+0x3c>
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	3301      	adds	r3, #1
 80158c8:	60fb      	str	r3, [r7, #12]
	while (isdigit((int)*p)) {
 80158ca:	e00d      	b.n	80158e8 <_convertString2Interger+0x3c>
		value *= 10;
 80158cc:	68ba      	ldr	r2, [r7, #8]
 80158ce:	4613      	mov	r3, r2
 80158d0:	009b      	lsls	r3, r3, #2
 80158d2:	4413      	add	r3, r2
 80158d4:	005b      	lsls	r3, r3, #1
 80158d6:	60bb      	str	r3, [r7, #8]
		value += DIGIT_TO_VAL(*p++);
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	1c5a      	adds	r2, r3, #1
 80158dc:	60fa      	str	r2, [r7, #12]
 80158de:	781b      	ldrb	r3, [r3, #0]
 80158e0:	3b30      	subs	r3, #48	; 0x30
 80158e2:	68ba      	ldr	r2, [r7, #8]
 80158e4:	4413      	add	r3, r2
 80158e6:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)*p)) {
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	3301      	adds	r3, #1
 80158ee:	4a0a      	ldr	r2, [pc, #40]	; (8015918 <_convertString2Interger+0x6c>)
 80158f0:	4413      	add	r3, r2
 80158f2:	781b      	ldrb	r3, [r3, #0]
 80158f4:	f003 0304 	and.w	r3, r3, #4
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d1e7      	bne.n	80158cc <_convertString2Interger+0x20>
	}
	if (*str == '-') value = -value;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	781b      	ldrb	r3, [r3, #0]
 8015900:	2b2d      	cmp	r3, #45	; 0x2d
 8015902:	d102      	bne.n	801590a <_convertString2Interger+0x5e>
 8015904:	68bb      	ldr	r3, [r7, #8]
 8015906:	425b      	negs	r3, r3
 8015908:	60bb      	str	r3, [r7, #8]
	return value;
 801590a:	68bb      	ldr	r3, [r7, #8]
}
 801590c:	4618      	mov	r0, r3
 801590e:	3714      	adds	r7, #20
 8015910:	46bd      	mov	sp, r7
 8015912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015916:	4770      	bx	lr
 8015918:	080290c4 	.word	0x080290c4
 801591c:	00000000 	.word	0x00000000

08015920 <_convertString2Degrees>:
 * with 10e7 it's around 1 cm now. Increasing it further is irrelevant, since even 1cm resolution is unrealistic, however increased
 * resolution also increased precision of nav calculations
*/

static double _convertString2Degrees(char* s)
{
 8015920:	b5b0      	push	{r4, r5, r7, lr}
 8015922:	b088      	sub	sp, #32
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
	char* p;
	char* q;
	uint8_t deg = 0, min = 0;
 8015928:	2300      	movs	r3, #0
 801592a:	75fb      	strb	r3, [r7, #23]
 801592c:	2300      	movs	r3, #0
 801592e:	75bb      	strb	r3, [r7, #22]
	unsigned int frac_min = 0;
 8015930:	2300      	movs	r3, #0
 8015932:	613b      	str	r3, [r7, #16]
	uint8_t i;

	// scan for decimal point or end of field
	for (p = s; isdigit((int)*p); p++);
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	61fb      	str	r3, [r7, #28]
 8015938:	e002      	b.n	8015940 <_convertString2Degrees+0x20>
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	3301      	adds	r3, #1
 801593e:	61fb      	str	r3, [r7, #28]
 8015940:	69fb      	ldr	r3, [r7, #28]
 8015942:	781b      	ldrb	r3, [r3, #0]
 8015944:	3301      	adds	r3, #1
 8015946:	4a46      	ldr	r2, [pc, #280]	; (8015a60 <_convertString2Degrees+0x140>)
 8015948:	4413      	add	r3, r2
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	f003 0304 	and.w	r3, r3, #4
 8015950:	2b00      	cmp	r3, #0
 8015952:	d1f2      	bne.n	801593a <_convertString2Degrees+0x1a>
	q = s;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	61bb      	str	r3, [r7, #24]

	// convert degrees
	while ((p - q) > 2) {
 8015958:	e011      	b.n	801597e <_convertString2Degrees+0x5e>
		if (deg) deg *= 10;
 801595a:	7dfb      	ldrb	r3, [r7, #23]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d005      	beq.n	801596c <_convertString2Degrees+0x4c>
 8015960:	7dfb      	ldrb	r3, [r7, #23]
 8015962:	461a      	mov	r2, r3
 8015964:	0092      	lsls	r2, r2, #2
 8015966:	4413      	add	r3, r2
 8015968:	005b      	lsls	r3, r3, #1
 801596a:	75fb      	strb	r3, [r7, #23]
		deg += DIGIT_TO_VAL(*q++);
 801596c:	69bb      	ldr	r3, [r7, #24]
 801596e:	1c5a      	adds	r2, r3, #1
 8015970:	61ba      	str	r2, [r7, #24]
 8015972:	781b      	ldrb	r3, [r3, #0]
 8015974:	3b30      	subs	r3, #48	; 0x30
 8015976:	b2da      	uxtb	r2, r3
 8015978:	7dfb      	ldrb	r3, [r7, #23]
 801597a:	4413      	add	r3, r2
 801597c:	75fb      	strb	r3, [r7, #23]
	while ((p - q) > 2) {
 801597e:	69fa      	ldr	r2, [r7, #28]
 8015980:	69bb      	ldr	r3, [r7, #24]
 8015982:	1ad3      	subs	r3, r2, r3
 8015984:	2b02      	cmp	r3, #2
 8015986:	dce8      	bgt.n	801595a <_convertString2Degrees+0x3a>
	}
	// convert minutes
	while (p > q) {
 8015988:	e011      	b.n	80159ae <_convertString2Degrees+0x8e>
		if (min) min *= 10;
 801598a:	7dbb      	ldrb	r3, [r7, #22]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d005      	beq.n	801599c <_convertString2Degrees+0x7c>
 8015990:	7dbb      	ldrb	r3, [r7, #22]
 8015992:	461a      	mov	r2, r3
 8015994:	0092      	lsls	r2, r2, #2
 8015996:	4413      	add	r3, r2
 8015998:	005b      	lsls	r3, r3, #1
 801599a:	75bb      	strb	r3, [r7, #22]
		min += DIGIT_TO_VAL(*q++);
 801599c:	69bb      	ldr	r3, [r7, #24]
 801599e:	1c5a      	adds	r2, r3, #1
 80159a0:	61ba      	str	r2, [r7, #24]
 80159a2:	781b      	ldrb	r3, [r3, #0]
 80159a4:	3b30      	subs	r3, #48	; 0x30
 80159a6:	b2da      	uxtb	r2, r3
 80159a8:	7dbb      	ldrb	r3, [r7, #22]
 80159aa:	4413      	add	r3, r2
 80159ac:	75bb      	strb	r3, [r7, #22]
	while (p > q) {
 80159ae:	69fa      	ldr	r2, [r7, #28]
 80159b0:	69bb      	ldr	r3, [r7, #24]
 80159b2:	429a      	cmp	r2, r3
 80159b4:	d8e9      	bhi.n	801598a <_convertString2Degrees+0x6a>
	}
	// convert fractional minutes
	// expect up to four digits, result is in
	// ten-thousandths of a minute
	if (*p == '.') {
 80159b6:	69fb      	ldr	r3, [r7, #28]
 80159b8:	781b      	ldrb	r3, [r3, #0]
 80159ba:	2b2e      	cmp	r3, #46	; 0x2e
 80159bc:	d124      	bne.n	8015a08 <_convertString2Degrees+0xe8>
		q = p + 1;
 80159be:	69fb      	ldr	r3, [r7, #28]
 80159c0:	3301      	adds	r3, #1
 80159c2:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < 4; i++) {
 80159c4:	2300      	movs	r3, #0
 80159c6:	73fb      	strb	r3, [r7, #15]
 80159c8:	e01b      	b.n	8015a02 <_convertString2Degrees+0xe2>
			frac_min *= 10;
 80159ca:	693a      	ldr	r2, [r7, #16]
 80159cc:	4613      	mov	r3, r2
 80159ce:	009b      	lsls	r3, r3, #2
 80159d0:	4413      	add	r3, r2
 80159d2:	005b      	lsls	r3, r3, #1
 80159d4:	613b      	str	r3, [r7, #16]
			if (isdigit((int)*q)) frac_min += *q++ - '0';
 80159d6:	69bb      	ldr	r3, [r7, #24]
 80159d8:	781b      	ldrb	r3, [r3, #0]
 80159da:	3301      	adds	r3, #1
 80159dc:	4a20      	ldr	r2, [pc, #128]	; (8015a60 <_convertString2Degrees+0x140>)
 80159de:	4413      	add	r3, r2
 80159e0:	781b      	ldrb	r3, [r3, #0]
 80159e2:	f003 0304 	and.w	r3, r3, #4
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d008      	beq.n	80159fc <_convertString2Degrees+0xdc>
 80159ea:	69bb      	ldr	r3, [r7, #24]
 80159ec:	1c5a      	adds	r2, r3, #1
 80159ee:	61ba      	str	r2, [r7, #24]
 80159f0:	781b      	ldrb	r3, [r3, #0]
 80159f2:	3b30      	subs	r3, #48	; 0x30
 80159f4:	461a      	mov	r2, r3
 80159f6:	693b      	ldr	r3, [r7, #16]
 80159f8:	4413      	add	r3, r2
 80159fa:	613b      	str	r3, [r7, #16]
		for (i = 0; i < 4; i++) {
 80159fc:	7bfb      	ldrb	r3, [r7, #15]
 80159fe:	3301      	adds	r3, #1
 8015a00:	73fb      	strb	r3, [r7, #15]
 8015a02:	7bfb      	ldrb	r3, [r7, #15]
 8015a04:	2b03      	cmp	r3, #3
 8015a06:	d9e0      	bls.n	80159ca <_convertString2Degrees+0xaa>
		}
	}
	return deg + (min * 10000UL + frac_min) / 600000.0;
 8015a08:	7dfb      	ldrb	r3, [r7, #23]
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	f7ea fd3e 	bl	800048c <__aeabi_i2d>
 8015a10:	4604      	mov	r4, r0
 8015a12:	460d      	mov	r5, r1
 8015a14:	7dbb      	ldrb	r3, [r7, #22]
 8015a16:	f242 7210 	movw	r2, #10000	; 0x2710
 8015a1a:	fb03 f202 	mul.w	r2, r3, r2
 8015a1e:	693b      	ldr	r3, [r7, #16]
 8015a20:	4413      	add	r3, r2
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7ea fd22 	bl	800046c <__aeabi_ui2d>
 8015a28:	a30b      	add	r3, pc, #44	; (adr r3, 8015a58 <_convertString2Degrees+0x138>)
 8015a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a2e:	f7ea fec1 	bl	80007b4 <__aeabi_ddiv>
 8015a32:	4602      	mov	r2, r0
 8015a34:	460b      	mov	r3, r1
 8015a36:	4620      	mov	r0, r4
 8015a38:	4629      	mov	r1, r5
 8015a3a:	f7ea fbdb 	bl	80001f4 <__adddf3>
 8015a3e:	4602      	mov	r2, r0
 8015a40:	460b      	mov	r3, r1
 8015a42:	ec43 2b17 	vmov	d7, r2, r3
}
 8015a46:	eeb0 0a47 	vmov.f32	s0, s14
 8015a4a:	eef0 0a67 	vmov.f32	s1, s15
 8015a4e:	3720      	adds	r7, #32
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bdb0      	pop	{r4, r5, r7, pc}
 8015a54:	f3af 8000 	nop.w
 8015a58:	00000000 	.word	0x00000000
 8015a5c:	41224f80 	.word	0x41224f80
 8015a60:	080290c4 	.word	0x080290c4

08015a64 <_convertAscii2Hex>:

static uint8_t _convertAscii2Hex(char n)    // convert '0'..'9','A'..'F' to 0..15
{
 8015a64:	b480      	push	{r7}
 8015a66:	b083      	sub	sp, #12
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	71fb      	strb	r3, [r7, #7]
	n -= '0';
 8015a6e:	79fb      	ldrb	r3, [r7, #7]
 8015a70:	3b30      	subs	r3, #48	; 0x30
 8015a72:	71fb      	strb	r3, [r7, #7]
	if (n > 9) n -= 7;
 8015a74:	79fb      	ldrb	r3, [r7, #7]
 8015a76:	2b09      	cmp	r3, #9
 8015a78:	d902      	bls.n	8015a80 <_convertAscii2Hex+0x1c>
 8015a7a:	79fb      	ldrb	r3, [r7, #7]
 8015a7c:	3b07      	subs	r3, #7
 8015a7e:	71fb      	strb	r3, [r7, #7]
	n &= 0x0F;
 8015a80:	79fb      	ldrb	r3, [r7, #7]
 8015a82:	f003 030f 	and.w	r3, r3, #15
 8015a86:	71fb      	strb	r3, [r7, #7]
	return n;
 8015a88:	79fb      	ldrb	r3, [r7, #7]
}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	370c      	adds	r7, #12
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a94:	4770      	bx	lr

08015a96 <_evtTimerFinish>:

static void _evtTimerFinish(PifIssuerP p_issuer)
{
 8015a96:	b580      	push	{r7, lr}
 8015a98:	b084      	sub	sp, #16
 8015a9a:	af00      	add	r7, sp, #0
 8015a9c:	6078      	str	r0, [r7, #4]
    PifGps* p_owner = (PifGps*)p_issuer;
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	60fb      	str	r3, [r7, #12]

	p_owner->_connect = FALSE;
 8015aa2:	68fa      	ldr	r2, [r7, #12]
 8015aa4:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015aa8:	f36f 0341 	bfc	r3, #1, #1
 8015aac:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_fix = FALSE;
 8015ab0:	68fa      	ldr	r2, [r7, #12]
 8015ab2:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015ab6:	f36f 0300 	bfc	r3, #0, #1
 8015aba:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_num_sat = 0;
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if (p_owner->__evt_timeout) (*p_owner->__evt_timeout)(p_owner);
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d004      	beq.n	8015ada <_evtTimerFinish+0x44>
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015ad6:	68f8      	ldr	r0, [r7, #12]
 8015ad8:	4798      	blx	r3
}
 8015ada:	bf00      	nop
 8015adc:	3710      	adds	r7, #16
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd80      	pop	{r7, pc}
	...

08015ae4 <pifGps_Init>:

BOOL pifGps_Init(PifGps* p_owner, PifId id)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b082      	sub	sp, #8
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	460b      	mov	r3, r1
 8015aee:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d104      	bne.n	8015b00 <pifGps_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8015af6:	4b0e      	ldr	r3, [pc, #56]	; (8015b30 <pifGps_Init+0x4c>)
 8015af8:	2201      	movs	r2, #1
 8015afa:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8015afc:	2300      	movs	r3, #0
 8015afe:	e012      	b.n	8015b26 <pifGps_Init+0x42>
	}

    memset(p_owner, 0, sizeof(PifGps));
 8015b00:	22b0      	movs	r2, #176	; 0xb0
 8015b02:	2100      	movs	r1, #0
 8015b04:	6878      	ldr	r0, [r7, #4]
 8015b06:	f00c ffc7 	bl	8022a98 <memset>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8015b0a:	887b      	ldrh	r3, [r7, #2]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d106      	bne.n	8015b1e <pifGps_Init+0x3a>
 8015b10:	4b08      	ldr	r3, [pc, #32]	; (8015b34 <pifGps_Init+0x50>)
 8015b12:	881b      	ldrh	r3, [r3, #0]
 8015b14:	1c5a      	adds	r2, r3, #1
 8015b16:	b291      	uxth	r1, r2
 8015b18:	4a06      	ldr	r2, [pc, #24]	; (8015b34 <pifGps_Init+0x50>)
 8015b1a:	8011      	strh	r1, [r2, #0]
 8015b1c:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	887a      	ldrh	r2, [r7, #2]
 8015b22:	819a      	strh	r2, [r3, #12]
	return TRUE;
 8015b24:	2301      	movs	r3, #1
}
 8015b26:	4618      	mov	r0, r3
 8015b28:	3708      	adds	r7, #8
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bd80      	pop	{r7, pc}
 8015b2e:	bf00      	nop
 8015b30:	20001c0d 	.word	0x20001c0d
 8015b34:	2000011c 	.word	0x2000011c

08015b38 <pifGps_SetTimeout>:
	}
	p_owner->__evt_text = NULL;
}

BOOL pifGps_SetTimeout(PifGps* p_owner, PifTimerManager* p_timer_manager, uint32_t timeout, PifEvtGpsTimeout evt_timeout)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b084      	sub	sp, #16
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	60f8      	str	r0, [r7, #12]
 8015b40:	60b9      	str	r1, [r7, #8]
 8015b42:	607a      	str	r2, [r7, #4]
 8015b44:	603b      	str	r3, [r7, #0]
	if (timeout > 0) {
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d02b      	beq.n	8015ba4 <pifGps_SetTimeout+0x6c>
		if (!p_owner->__p_timer) {
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d11a      	bne.n	8015b8c <pifGps_SetTimeout+0x54>
			p_owner->__p_timer = pifTimerManager_Add(p_timer_manager, TT_ONCE);
 8015b56:	2100      	movs	r1, #0
 8015b58:	68b8      	ldr	r0, [r7, #8]
 8015b5a:	f7ff f9c7 	bl	8014eec <pifTimerManager_Add>
 8015b5e:	4602      	mov	r2, r0
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			if (!p_owner->__p_timer) return FALSE;
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d101      	bne.n	8015b74 <pifGps_SetTimeout+0x3c>
 8015b70:	2300      	movs	r3, #0
 8015b72:	e023      	b.n	8015bbc <pifGps_SetTimeout+0x84>
			pifTimer_AttachEvtFinish(p_owner->__p_timer, _evtTimerFinish, p_owner);
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015b7a:	68fa      	ldr	r2, [r7, #12]
 8015b7c:	4911      	ldr	r1, [pc, #68]	; (8015bc4 <pifGps_SetTimeout+0x8c>)
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7ff fae1 	bl	8015146 <pifTimer_AttachEvtFinish>
		    p_owner->__evt_timeout = evt_timeout;
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	683a      	ldr	r2, [r7, #0]
 8015b88:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	    if (!pifTimer_Start(p_owner->__p_timer, timeout)) return FALSE;
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015b92:	6879      	ldr	r1, [r7, #4]
 8015b94:	4618      	mov	r0, r3
 8015b96:	f7ff f9e1 	bl	8014f5c <pifTimer_Start>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d10c      	bne.n	8015bba <pifGps_SetTimeout+0x82>
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	e00b      	b.n	8015bbc <pifGps_SetTimeout+0x84>
	}
	else {
		if (p_owner->__p_timer) pifTimer_Stop(p_owner->__p_timer);
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d005      	beq.n	8015bba <pifGps_SetTimeout+0x82>
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f7ff f9ff 	bl	8014fb8 <pifTimer_Stop>
	}
    return TRUE;
 8015bba:	2301      	movs	r3, #1
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3710      	adds	r7, #16
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd80      	pop	{r7, pc}
 8015bc4:	08015a97 	.word	0x08015a97

08015bc8 <pifGps_SendEvent>:

void pifGps_SendEvent(PifGps* p_owner)
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b082      	sub	sp, #8
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
	p_owner->_connect = TRUE;
 8015bd0:	687a      	ldr	r2, [r7, #4]
 8015bd2:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015bd6:	f043 0302 	orr.w	r3, r3, #2
 8015bda:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
	if (p_owner->evt_receive) (*p_owner->evt_receive)(p_owner);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	685b      	ldr	r3, [r3, #4]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d003      	beq.n	8015bee <pifGps_SendEvent+0x26>
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	685b      	ldr	r3, [r3, #4]
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	4798      	blx	r3
	if (p_owner->__p_timer) pifTimer_Reset(p_owner->__p_timer);
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d005      	beq.n	8015c04 <pifGps_SendEvent+0x3c>
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7ff f9f0 	bl	8014fe4 <pifTimer_Reset>
}
 8015c04:	bf00      	nop
 8015c06:	3708      	adds	r7, #8
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	bd80      	pop	{r7, pc}
 8015c0c:	0000      	movs	r0, r0
	...

08015c10 <pifGps_ParsingNmea>:
	p_owner->__evt_text = evt_text;
	return TRUE;
}

BOOL pifGps_ParsingNmea(PifGps* p_owner, uint8_t c)
{
 8015c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015c14:	b090      	sub	sp, #64	; 0x40
 8015c16:	af02      	add	r7, sp, #8
 8015c18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8015c1a:	460b      	mov	r3, r1
 8015c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	BOOL rtn = FALSE;
 8015c20:	2300      	movs	r3, #0
 8015c22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	static uint8_t param = 0, offset = 0, parity = 0;
	static char string[PIF_GPS_NMEA_VALUE_SIZE];
	static uint8_t checksum_param = 0;
	static PifGpsNmeaMsgId msg_id = PIF_GPS_NMEA_MSG_ID_NONE;

	if (c == '$') {
 8015c26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015c2a:	2b24      	cmp	r3, #36	; 0x24
 8015c2c:	d11a      	bne.n	8015c64 <pifGps_ParsingNmea+0x54>
		param = 0;
 8015c2e:	4b8a      	ldr	r3, [pc, #552]	; (8015e58 <pifGps_ParsingNmea+0x248>)
 8015c30:	2200      	movs	r2, #0
 8015c32:	701a      	strb	r2, [r3, #0]
		offset = 0;
 8015c34:	4b89      	ldr	r3, [pc, #548]	; (8015e5c <pifGps_ParsingNmea+0x24c>)
 8015c36:	2200      	movs	r2, #0
 8015c38:	701a      	strb	r2, [r3, #0]
		parity = 0;
 8015c3a:	4b89      	ldr	r3, [pc, #548]	; (8015e60 <pifGps_ParsingNmea+0x250>)
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8015c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c42:	689b      	ldr	r3, [r3, #8]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d00a      	beq.n	8015c5e <pifGps_ParsingNmea+0x4e>
			string[0] = c;
 8015c48:	4a86      	ldr	r2, [pc, #536]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015c4e:	7013      	strb	r3, [r2, #0]
			string[1] = 0;
 8015c50:	4b84      	ldr	r3, [pc, #528]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015c52:	2200      	movs	r2, #0
 8015c54:	705a      	strb	r2, [r3, #1]
			(p_owner->evt_frame)(string);
 8015c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c58:	689b      	ldr	r3, [r3, #8]
 8015c5a:	4882      	ldr	r0, [pc, #520]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015c5c:	4798      	blx	r3
		}
		return TRUE;
 8015c5e:	2301      	movs	r3, #1
 8015c60:	f000 bd44 	b.w	80166ec <pifGps_ParsingNmea+0xadc>
	}
	else if (c == ',' || c == '*') {
 8015c64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015c68:	2b2c      	cmp	r3, #44	; 0x2c
 8015c6a:	d004      	beq.n	8015c76 <pifGps_ParsingNmea+0x66>
 8015c6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015c70:	2b2a      	cmp	r3, #42	; 0x2a
 8015c72:	f040 847f 	bne.w	8016574 <pifGps_ParsingNmea+0x964>
		string[offset] = 0;
 8015c76:	4b79      	ldr	r3, [pc, #484]	; (8015e5c <pifGps_ParsingNmea+0x24c>)
 8015c78:	781b      	ldrb	r3, [r3, #0]
 8015c7a:	4619      	mov	r1, r3
 8015c7c:	4a79      	ldr	r2, [pc, #484]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015c7e:	2300      	movs	r3, #0
 8015c80:	5453      	strb	r3, [r2, r1]
		if (param == 0) { //frame identification
 8015c82:	4b75      	ldr	r3, [pc, #468]	; (8015e58 <pifGps_ParsingNmea+0x248>)
 8015c84:	781b      	ldrb	r3, [r3, #0]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	f040 8103 	bne.w	8015e92 <pifGps_ParsingNmea+0x282>
			msg_id = PIF_GPS_NMEA_MSG_ID_NONE;
 8015c8c:	4b76      	ldr	r3, [pc, #472]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015c8e:	2200      	movs	r2, #0
 8015c90:	701a      	strb	r2, [r3, #0]
			if (string[2] == 'D' && string[3] == 'T' && string[4] == 'M') msg_id = PIF_GPS_NMEA_MSG_ID_DTM;
 8015c92:	4b74      	ldr	r3, [pc, #464]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015c94:	789b      	ldrb	r3, [r3, #2]
 8015c96:	2b44      	cmp	r3, #68	; 0x44
 8015c98:	d10c      	bne.n	8015cb4 <pifGps_ParsingNmea+0xa4>
 8015c9a:	4b72      	ldr	r3, [pc, #456]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015c9c:	78db      	ldrb	r3, [r3, #3]
 8015c9e:	2b54      	cmp	r3, #84	; 0x54
 8015ca0:	d108      	bne.n	8015cb4 <pifGps_ParsingNmea+0xa4>
 8015ca2:	4b70      	ldr	r3, [pc, #448]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015ca4:	791b      	ldrb	r3, [r3, #4]
 8015ca6:	2b4d      	cmp	r3, #77	; 0x4d
 8015ca8:	d104      	bne.n	8015cb4 <pifGps_ParsingNmea+0xa4>
 8015caa:	4b6f      	ldr	r3, [pc, #444]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015cac:	2201      	movs	r2, #1
 8015cae:	701a      	strb	r2, [r3, #0]
 8015cb0:	f000 bc29 	b.w	8016506 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'B' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GBS;
 8015cb4:	4b6b      	ldr	r3, [pc, #428]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015cb6:	789b      	ldrb	r3, [r3, #2]
 8015cb8:	2b47      	cmp	r3, #71	; 0x47
 8015cba:	d10c      	bne.n	8015cd6 <pifGps_ParsingNmea+0xc6>
 8015cbc:	4b69      	ldr	r3, [pc, #420]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015cbe:	78db      	ldrb	r3, [r3, #3]
 8015cc0:	2b42      	cmp	r3, #66	; 0x42
 8015cc2:	d108      	bne.n	8015cd6 <pifGps_ParsingNmea+0xc6>
 8015cc4:	4b67      	ldr	r3, [pc, #412]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015cc6:	791b      	ldrb	r3, [r3, #4]
 8015cc8:	2b53      	cmp	r3, #83	; 0x53
 8015cca:	d104      	bne.n	8015cd6 <pifGps_ParsingNmea+0xc6>
 8015ccc:	4b66      	ldr	r3, [pc, #408]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015cce:	2202      	movs	r2, #2
 8015cd0:	701a      	strb	r2, [r3, #0]
 8015cd2:	f000 bc18 	b.w	8016506 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'G' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8015cd6:	4b63      	ldr	r3, [pc, #396]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015cd8:	789b      	ldrb	r3, [r3, #2]
 8015cda:	2b47      	cmp	r3, #71	; 0x47
 8015cdc:	d10c      	bne.n	8015cf8 <pifGps_ParsingNmea+0xe8>
 8015cde:	4b61      	ldr	r3, [pc, #388]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015ce0:	78db      	ldrb	r3, [r3, #3]
 8015ce2:	2b47      	cmp	r3, #71	; 0x47
 8015ce4:	d108      	bne.n	8015cf8 <pifGps_ParsingNmea+0xe8>
 8015ce6:	4b5f      	ldr	r3, [pc, #380]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015ce8:	791b      	ldrb	r3, [r3, #4]
 8015cea:	2b41      	cmp	r3, #65	; 0x41
 8015cec:	d104      	bne.n	8015cf8 <pifGps_ParsingNmea+0xe8>
 8015cee:	4b5e      	ldr	r3, [pc, #376]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015cf0:	2203      	movs	r2, #3
 8015cf2:	701a      	strb	r2, [r3, #0]
 8015cf4:	f000 bc07 	b.w	8016506 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'L' && string[4] == 'L') msg_id = PIF_GPS_NMEA_MSG_ID_GLL;
 8015cf8:	4b5a      	ldr	r3, [pc, #360]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015cfa:	789b      	ldrb	r3, [r3, #2]
 8015cfc:	2b47      	cmp	r3, #71	; 0x47
 8015cfe:	d10b      	bne.n	8015d18 <pifGps_ParsingNmea+0x108>
 8015d00:	4b58      	ldr	r3, [pc, #352]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d02:	78db      	ldrb	r3, [r3, #3]
 8015d04:	2b4c      	cmp	r3, #76	; 0x4c
 8015d06:	d107      	bne.n	8015d18 <pifGps_ParsingNmea+0x108>
 8015d08:	4b56      	ldr	r3, [pc, #344]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d0a:	791b      	ldrb	r3, [r3, #4]
 8015d0c:	2b4c      	cmp	r3, #76	; 0x4c
 8015d0e:	d103      	bne.n	8015d18 <pifGps_ParsingNmea+0x108>
 8015d10:	4b55      	ldr	r3, [pc, #340]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015d12:	2204      	movs	r2, #4
 8015d14:	701a      	strb	r2, [r3, #0]
 8015d16:	e3f6      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'N' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GNS;
 8015d18:	4b52      	ldr	r3, [pc, #328]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d1a:	789b      	ldrb	r3, [r3, #2]
 8015d1c:	2b47      	cmp	r3, #71	; 0x47
 8015d1e:	d10b      	bne.n	8015d38 <pifGps_ParsingNmea+0x128>
 8015d20:	4b50      	ldr	r3, [pc, #320]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d22:	78db      	ldrb	r3, [r3, #3]
 8015d24:	2b4e      	cmp	r3, #78	; 0x4e
 8015d26:	d107      	bne.n	8015d38 <pifGps_ParsingNmea+0x128>
 8015d28:	4b4e      	ldr	r3, [pc, #312]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d2a:	791b      	ldrb	r3, [r3, #4]
 8015d2c:	2b53      	cmp	r3, #83	; 0x53
 8015d2e:	d103      	bne.n	8015d38 <pifGps_ParsingNmea+0x128>
 8015d30:	4b4d      	ldr	r3, [pc, #308]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015d32:	2205      	movs	r2, #5
 8015d34:	701a      	strb	r2, [r3, #0]
 8015d36:	e3e6      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'R' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GRS;
 8015d38:	4b4a      	ldr	r3, [pc, #296]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d3a:	789b      	ldrb	r3, [r3, #2]
 8015d3c:	2b47      	cmp	r3, #71	; 0x47
 8015d3e:	d10b      	bne.n	8015d58 <pifGps_ParsingNmea+0x148>
 8015d40:	4b48      	ldr	r3, [pc, #288]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d42:	78db      	ldrb	r3, [r3, #3]
 8015d44:	2b52      	cmp	r3, #82	; 0x52
 8015d46:	d107      	bne.n	8015d58 <pifGps_ParsingNmea+0x148>
 8015d48:	4b46      	ldr	r3, [pc, #280]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d4a:	791b      	ldrb	r3, [r3, #4]
 8015d4c:	2b53      	cmp	r3, #83	; 0x53
 8015d4e:	d103      	bne.n	8015d58 <pifGps_ParsingNmea+0x148>
 8015d50:	4b45      	ldr	r3, [pc, #276]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015d52:	2206      	movs	r2, #6
 8015d54:	701a      	strb	r2, [r3, #0]
 8015d56:	e3d6      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GSA;
 8015d58:	4b42      	ldr	r3, [pc, #264]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d5a:	789b      	ldrb	r3, [r3, #2]
 8015d5c:	2b47      	cmp	r3, #71	; 0x47
 8015d5e:	d10b      	bne.n	8015d78 <pifGps_ParsingNmea+0x168>
 8015d60:	4b40      	ldr	r3, [pc, #256]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d62:	78db      	ldrb	r3, [r3, #3]
 8015d64:	2b53      	cmp	r3, #83	; 0x53
 8015d66:	d107      	bne.n	8015d78 <pifGps_ParsingNmea+0x168>
 8015d68:	4b3e      	ldr	r3, [pc, #248]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d6a:	791b      	ldrb	r3, [r3, #4]
 8015d6c:	2b41      	cmp	r3, #65	; 0x41
 8015d6e:	d103      	bne.n	8015d78 <pifGps_ParsingNmea+0x168>
 8015d70:	4b3d      	ldr	r3, [pc, #244]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015d72:	2207      	movs	r2, #7
 8015d74:	701a      	strb	r2, [r3, #0]
 8015d76:	e3c6      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_GST;
 8015d78:	4b3a      	ldr	r3, [pc, #232]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d7a:	789b      	ldrb	r3, [r3, #2]
 8015d7c:	2b47      	cmp	r3, #71	; 0x47
 8015d7e:	d10b      	bne.n	8015d98 <pifGps_ParsingNmea+0x188>
 8015d80:	4b38      	ldr	r3, [pc, #224]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d82:	78db      	ldrb	r3, [r3, #3]
 8015d84:	2b53      	cmp	r3, #83	; 0x53
 8015d86:	d107      	bne.n	8015d98 <pifGps_ParsingNmea+0x188>
 8015d88:	4b36      	ldr	r3, [pc, #216]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d8a:	791b      	ldrb	r3, [r3, #4]
 8015d8c:	2b54      	cmp	r3, #84	; 0x54
 8015d8e:	d103      	bne.n	8015d98 <pifGps_ParsingNmea+0x188>
 8015d90:	4b35      	ldr	r3, [pc, #212]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015d92:	2208      	movs	r2, #8
 8015d94:	701a      	strb	r2, [r3, #0]
 8015d96:	e3b6      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'V') msg_id = PIF_GPS_NMEA_MSG_ID_GSV;
 8015d98:	4b32      	ldr	r3, [pc, #200]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015d9a:	789b      	ldrb	r3, [r3, #2]
 8015d9c:	2b47      	cmp	r3, #71	; 0x47
 8015d9e:	d10b      	bne.n	8015db8 <pifGps_ParsingNmea+0x1a8>
 8015da0:	4b30      	ldr	r3, [pc, #192]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015da2:	78db      	ldrb	r3, [r3, #3]
 8015da4:	2b53      	cmp	r3, #83	; 0x53
 8015da6:	d107      	bne.n	8015db8 <pifGps_ParsingNmea+0x1a8>
 8015da8:	4b2e      	ldr	r3, [pc, #184]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015daa:	791b      	ldrb	r3, [r3, #4]
 8015dac:	2b56      	cmp	r3, #86	; 0x56
 8015dae:	d103      	bne.n	8015db8 <pifGps_ParsingNmea+0x1a8>
 8015db0:	4b2d      	ldr	r3, [pc, #180]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015db2:	2209      	movs	r2, #9
 8015db4:	701a      	strb	r2, [r3, #0]
 8015db6:	e3a6      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'R' && string[3] == 'M' && string[4] == 'C') msg_id = PIF_GPS_NMEA_MSG_ID_RMC;
 8015db8:	4b2a      	ldr	r3, [pc, #168]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015dba:	789b      	ldrb	r3, [r3, #2]
 8015dbc:	2b52      	cmp	r3, #82	; 0x52
 8015dbe:	d10b      	bne.n	8015dd8 <pifGps_ParsingNmea+0x1c8>
 8015dc0:	4b28      	ldr	r3, [pc, #160]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015dc2:	78db      	ldrb	r3, [r3, #3]
 8015dc4:	2b4d      	cmp	r3, #77	; 0x4d
 8015dc6:	d107      	bne.n	8015dd8 <pifGps_ParsingNmea+0x1c8>
 8015dc8:	4b26      	ldr	r3, [pc, #152]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015dca:	791b      	ldrb	r3, [r3, #4]
 8015dcc:	2b43      	cmp	r3, #67	; 0x43
 8015dce:	d103      	bne.n	8015dd8 <pifGps_ParsingNmea+0x1c8>
 8015dd0:	4b25      	ldr	r3, [pc, #148]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015dd2:	220a      	movs	r2, #10
 8015dd4:	701a      	strb	r2, [r3, #0]
 8015dd6:	e396      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'T' && string[3] == 'H' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_THS;
 8015dd8:	4b22      	ldr	r3, [pc, #136]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015dda:	789b      	ldrb	r3, [r3, #2]
 8015ddc:	2b54      	cmp	r3, #84	; 0x54
 8015dde:	d10b      	bne.n	8015df8 <pifGps_ParsingNmea+0x1e8>
 8015de0:	4b20      	ldr	r3, [pc, #128]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015de2:	78db      	ldrb	r3, [r3, #3]
 8015de4:	2b48      	cmp	r3, #72	; 0x48
 8015de6:	d107      	bne.n	8015df8 <pifGps_ParsingNmea+0x1e8>
 8015de8:	4b1e      	ldr	r3, [pc, #120]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015dea:	791b      	ldrb	r3, [r3, #4]
 8015dec:	2b53      	cmp	r3, #83	; 0x53
 8015dee:	d103      	bne.n	8015df8 <pifGps_ParsingNmea+0x1e8>
 8015df0:	4b1d      	ldr	r3, [pc, #116]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015df2:	220b      	movs	r2, #11
 8015df4:	701a      	strb	r2, [r3, #0]
 8015df6:	e386      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'T' && string[3] == 'X' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_TXT;
 8015df8:	4b1a      	ldr	r3, [pc, #104]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015dfa:	789b      	ldrb	r3, [r3, #2]
 8015dfc:	2b54      	cmp	r3, #84	; 0x54
 8015dfe:	d10b      	bne.n	8015e18 <pifGps_ParsingNmea+0x208>
 8015e00:	4b18      	ldr	r3, [pc, #96]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015e02:	78db      	ldrb	r3, [r3, #3]
 8015e04:	2b58      	cmp	r3, #88	; 0x58
 8015e06:	d107      	bne.n	8015e18 <pifGps_ParsingNmea+0x208>
 8015e08:	4b16      	ldr	r3, [pc, #88]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015e0a:	791b      	ldrb	r3, [r3, #4]
 8015e0c:	2b54      	cmp	r3, #84	; 0x54
 8015e0e:	d103      	bne.n	8015e18 <pifGps_ParsingNmea+0x208>
 8015e10:	4b15      	ldr	r3, [pc, #84]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015e12:	220c      	movs	r2, #12
 8015e14:	701a      	strb	r2, [r3, #0]
 8015e16:	e376      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'V' && string[3] == 'L' && string[4] == 'W') msg_id = PIF_GPS_NMEA_MSG_ID_VLW;
 8015e18:	4b12      	ldr	r3, [pc, #72]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015e1a:	789b      	ldrb	r3, [r3, #2]
 8015e1c:	2b56      	cmp	r3, #86	; 0x56
 8015e1e:	d10b      	bne.n	8015e38 <pifGps_ParsingNmea+0x228>
 8015e20:	4b10      	ldr	r3, [pc, #64]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015e22:	78db      	ldrb	r3, [r3, #3]
 8015e24:	2b4c      	cmp	r3, #76	; 0x4c
 8015e26:	d107      	bne.n	8015e38 <pifGps_ParsingNmea+0x228>
 8015e28:	4b0e      	ldr	r3, [pc, #56]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015e2a:	791b      	ldrb	r3, [r3, #4]
 8015e2c:	2b57      	cmp	r3, #87	; 0x57
 8015e2e:	d103      	bne.n	8015e38 <pifGps_ParsingNmea+0x228>
 8015e30:	4b0d      	ldr	r3, [pc, #52]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015e32:	220d      	movs	r2, #13
 8015e34:	701a      	strb	r2, [r3, #0]
 8015e36:	e366      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
			else if (string[2] == 'V' && string[3] == 'T' && string[4] == 'G') msg_id = PIF_GPS_NMEA_MSG_ID_VTG;
 8015e38:	4b0a      	ldr	r3, [pc, #40]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015e3a:	789b      	ldrb	r3, [r3, #2]
 8015e3c:	2b56      	cmp	r3, #86	; 0x56
 8015e3e:	d115      	bne.n	8015e6c <pifGps_ParsingNmea+0x25c>
 8015e40:	4b08      	ldr	r3, [pc, #32]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015e42:	78db      	ldrb	r3, [r3, #3]
 8015e44:	2b54      	cmp	r3, #84	; 0x54
 8015e46:	d111      	bne.n	8015e6c <pifGps_ParsingNmea+0x25c>
 8015e48:	4b06      	ldr	r3, [pc, #24]	; (8015e64 <pifGps_ParsingNmea+0x254>)
 8015e4a:	791b      	ldrb	r3, [r3, #4]
 8015e4c:	2b47      	cmp	r3, #71	; 0x47
 8015e4e:	d10d      	bne.n	8015e6c <pifGps_ParsingNmea+0x25c>
 8015e50:	4b05      	ldr	r3, [pc, #20]	; (8015e68 <pifGps_ParsingNmea+0x258>)
 8015e52:	220e      	movs	r2, #14
 8015e54:	701a      	strb	r2, [r3, #0]
 8015e56:	e356      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
 8015e58:	20001da0 	.word	0x20001da0
 8015e5c:	20001da1 	.word	0x20001da1
 8015e60:	20001da2 	.word	0x20001da2
 8015e64:	20001da4 	.word	0x20001da4
 8015e68:	20001dc4 	.word	0x20001dc4
			else if (string[2] == 'Z' && string[3] == 'D' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_ZDA;
 8015e6c:	4bb0      	ldr	r3, [pc, #704]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8015e6e:	789b      	ldrb	r3, [r3, #2]
 8015e70:	2b5a      	cmp	r3, #90	; 0x5a
 8015e72:	f040 8348 	bne.w	8016506 <pifGps_ParsingNmea+0x8f6>
 8015e76:	4bae      	ldr	r3, [pc, #696]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8015e78:	78db      	ldrb	r3, [r3, #3]
 8015e7a:	2b44      	cmp	r3, #68	; 0x44
 8015e7c:	f040 8343 	bne.w	8016506 <pifGps_ParsingNmea+0x8f6>
 8015e80:	4bab      	ldr	r3, [pc, #684]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8015e82:	791b      	ldrb	r3, [r3, #4]
 8015e84:	2b41      	cmp	r3, #65	; 0x41
 8015e86:	f040 833e 	bne.w	8016506 <pifGps_ParsingNmea+0x8f6>
 8015e8a:	4baa      	ldr	r3, [pc, #680]	; (8016134 <pifGps_ParsingNmea+0x524>)
 8015e8c:	220f      	movs	r2, #15
 8015e8e:	701a      	strb	r2, [r3, #0]
 8015e90:	e339      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
		}
		else if (offset) {
 8015e92:	4ba9      	ldr	r3, [pc, #676]	; (8016138 <pifGps_ParsingNmea+0x528>)
 8015e94:	781b      	ldrb	r3, [r3, #0]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	f000 8324 	beq.w	80164e4 <pifGps_ParsingNmea+0x8d4>
			switch (msg_id) {
 8015e9c:	4ba5      	ldr	r3, [pc, #660]	; (8016134 <pifGps_ParsingNmea+0x524>)
 8015e9e:	781b      	ldrb	r3, [r3, #0]
 8015ea0:	3b01      	subs	r3, #1
 8015ea2:	2b0e      	cmp	r3, #14
 8015ea4:	f200 832f 	bhi.w	8016506 <pifGps_ParsingNmea+0x8f6>
 8015ea8:	a201      	add	r2, pc, #4	; (adr r2, 8015eb0 <pifGps_ParsingNmea+0x2a0>)
 8015eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015eae:	bf00      	nop
 8015eb0:	08016507 	.word	0x08016507
 8015eb4:	08016507 	.word	0x08016507
 8015eb8:	08015eed 	.word	0x08015eed
 8015ebc:	08015ff1 	.word	0x08015ff1
 8015ec0:	0801609f 	.word	0x0801609f
 8015ec4:	08016507 	.word	0x08016507
 8015ec8:	08016507 	.word	0x08016507
 8015ecc:	08016507 	.word	0x08016507
 8015ed0:	0801618d 	.word	0x0801618d
 8015ed4:	080162af 	.word	0x080162af
 8015ed8:	08016507 	.word	0x08016507
 8015edc:	080163a3 	.word	0x080163a3
 8015ee0:	08016507 	.word	0x08016507
 8015ee4:	08016439 	.word	0x08016439
 8015ee8:	0801647f 	.word	0x0801647f

			case PIF_GPS_NMEA_MSG_ID_GBS:
				break;

			case PIF_GPS_NMEA_MSG_ID_GGA:
				switch (param) {
 8015eec:	4b93      	ldr	r3, [pc, #588]	; (801613c <pifGps_ParsingNmea+0x52c>)
 8015eee:	781b      	ldrb	r3, [r3, #0]
 8015ef0:	3b01      	subs	r3, #1
 8015ef2:	2b08      	cmp	r3, #8
 8015ef4:	f200 82f8 	bhi.w	80164e8 <pifGps_ParsingNmea+0x8d8>
 8015ef8:	a201      	add	r2, pc, #4	; (adr r2, 8015f00 <pifGps_ParsingNmea+0x2f0>)
 8015efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015efe:	bf00      	nop
 8015f00:	08015f25 	.word	0x08015f25
 8015f04:	08015f33 	.word	0x08015f33
 8015f08:	08015f49 	.word	0x08015f49
 8015f0c:	08015f6b 	.word	0x08015f6b
 8015f10:	08015f81 	.word	0x08015f81
 8015f14:	08015fa3 	.word	0x08015fa3
 8015f18:	08015fc1 	.word	0x08015fc1
 8015f1c:	080164e9 	.word	0x080164e9
 8015f20:	08015fd3 	.word	0x08015fd3
				case 1: 
					_convertString2Time(string, &p_owner->_utc); 
 8015f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f26:	330e      	adds	r3, #14
 8015f28:	4619      	mov	r1, r3
 8015f2a:	4881      	ldr	r0, [pc, #516]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8015f2c:	f7ff fbb0 	bl	8015690 <_convertString2Time>
					break;
 8015f30:	e05d      	b.n	8015fee <pifGps_ParsingNmea+0x3de>
				case 2: 
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015f32:	487f      	ldr	r0, [pc, #508]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8015f34:	f7ff fcf4 	bl	8015920 <_convertString2Degrees>
 8015f38:	eeb0 7a40 	vmov.f32	s14, s0
 8015f3c:	eef0 7a60 	vmov.f32	s15, s1
 8015f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f42:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 8015f46:	e052      	b.n	8015fee <pifGps_ParsingNmea+0x3de>
				case 3: 
					if (string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015f48:	4b79      	ldr	r3, [pc, #484]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8015f4a:	781b      	ldrb	r3, [r3, #0]
 8015f4c:	2b53      	cmp	r3, #83	; 0x53
 8015f4e:	d14b      	bne.n	8015fe8 <pifGps_ParsingNmea+0x3d8>
 8015f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f52:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015f56:	623a      	str	r2, [r7, #32]
 8015f58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8015f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f60:	ed97 7b08 	vldr	d7, [r7, #32]
 8015f64:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 8015f68:	e03e      	b.n	8015fe8 <pifGps_ParsingNmea+0x3d8>
				case 4: 
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8015f6a:	4871      	ldr	r0, [pc, #452]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8015f6c:	f7ff fcd8 	bl	8015920 <_convertString2Degrees>
 8015f70:	eeb0 7a40 	vmov.f32	s14, s0
 8015f74:	eef0 7a60 	vmov.f32	s15, s1
 8015f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f7a:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 8015f7e:	e036      	b.n	8015fee <pifGps_ParsingNmea+0x3de>
				case 5: 
					if (string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8015f80:	4b6b      	ldr	r3, [pc, #428]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8015f82:	781b      	ldrb	r3, [r3, #0]
 8015f84:	2b57      	cmp	r3, #87	; 0x57
 8015f86:	d131      	bne.n	8015fec <pifGps_ParsingNmea+0x3dc>
 8015f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015f8e:	61ba      	str	r2, [r7, #24]
 8015f90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015f94:	61fb      	str	r3, [r7, #28]
 8015f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f98:	ed97 7b06 	vldr	d7, [r7, #24]
 8015f9c:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 8015fa0:	e024      	b.n	8015fec <pifGps_ParsingNmea+0x3dc>
				case 6: 
					p_owner->_fix = (string[0]  > '0');
 8015fa2:	4b63      	ldr	r3, [pc, #396]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	2b30      	cmp	r3, #48	; 0x30
 8015fa8:	bf8c      	ite	hi
 8015faa:	2301      	movhi	r3, #1
 8015fac:	2300      	movls	r3, #0
 8015fae:	b2d9      	uxtb	r1, r3
 8015fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fb2:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015fb6:	f361 0300 	bfi	r3, r1, #0, #1
 8015fba:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
					break;
 8015fbe:	e016      	b.n	8015fee <pifGps_ParsingNmea+0x3de>
				case 7: 
					p_owner->_num_sat = _convertString2Interger(string);
 8015fc0:	485b      	ldr	r0, [pc, #364]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8015fc2:	f7ff fc73 	bl	80158ac <_convertString2Interger>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	b2da      	uxtb	r2, r3
 8015fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
					break;
 8015fd0:	e00d      	b.n	8015fee <pifGps_ParsingNmea+0x3de>
				case 9: 
					p_owner->_altitude = _convertString2Float(string);
 8015fd2:	4857      	ldr	r0, [pc, #348]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8015fd4:	f7ff fbde 	bl	8015794 <_convertString2Float>
 8015fd8:	eeb0 7a40 	vmov.f32	s14, s0
 8015fdc:	eef0 7a60 	vmov.f32	s15, s1
 8015fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fe2:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
					break;
 8015fe6:	e002      	b.n	8015fee <pifGps_ParsingNmea+0x3de>
					break;
 8015fe8:	bf00      	nop
 8015fea:	e27d      	b.n	80164e8 <pifGps_ParsingNmea+0x8d8>
					break;
 8015fec:	bf00      	nop
				}
				break;
 8015fee:	e27b      	b.n	80164e8 <pifGps_ParsingNmea+0x8d8>

			case PIF_GPS_NMEA_MSG_ID_GLL:
				switch (param) {
 8015ff0:	4b52      	ldr	r3, [pc, #328]	; (801613c <pifGps_ParsingNmea+0x52c>)
 8015ff2:	781b      	ldrb	r3, [r3, #0]
 8015ff4:	3b01      	subs	r3, #1
 8015ff6:	2b04      	cmp	r3, #4
 8015ff8:	f200 8278 	bhi.w	80164ec <pifGps_ParsingNmea+0x8dc>
 8015ffc:	a201      	add	r2, pc, #4	; (adr r2, 8016004 <pifGps_ParsingNmea+0x3f4>)
 8015ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016002:	bf00      	nop
 8016004:	08016019 	.word	0x08016019
 8016008:	0801602f 	.word	0x0801602f
 801600c:	08016051 	.word	0x08016051
 8016010:	08016067 	.word	0x08016067
 8016014:	08016089 	.word	0x08016089
				case 1: 
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8016018:	4845      	ldr	r0, [pc, #276]	; (8016130 <pifGps_ParsingNmea+0x520>)
 801601a:	f7ff fc81 	bl	8015920 <_convertString2Degrees>
 801601e:	eeb0 7a40 	vmov.f32	s14, s0
 8016022:	eef0 7a60 	vmov.f32	s15, s1
 8016026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016028:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 801602c:	e036      	b.n	801609c <pifGps_ParsingNmea+0x48c>
				case 2:
					if (string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 801602e:	4b40      	ldr	r3, [pc, #256]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8016030:	781b      	ldrb	r3, [r3, #0]
 8016032:	2b53      	cmp	r3, #83	; 0x53
 8016034:	d12f      	bne.n	8016096 <pifGps_ParsingNmea+0x486>
 8016036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016038:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801603c:	613a      	str	r2, [r7, #16]
 801603e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016042:	617b      	str	r3, [r7, #20]
 8016044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016046:	ed97 7b04 	vldr	d7, [r7, #16]
 801604a:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 801604e:	e022      	b.n	8016096 <pifGps_ParsingNmea+0x486>
				case 3:
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8016050:	4837      	ldr	r0, [pc, #220]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8016052:	f7ff fc65 	bl	8015920 <_convertString2Degrees>
 8016056:	eeb0 7a40 	vmov.f32	s14, s0
 801605a:	eef0 7a60 	vmov.f32	s15, s1
 801605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016060:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 8016064:	e01a      	b.n	801609c <pifGps_ParsingNmea+0x48c>
				case 4:
					if (string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8016066:	4b32      	ldr	r3, [pc, #200]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8016068:	781b      	ldrb	r3, [r3, #0]
 801606a:	2b57      	cmp	r3, #87	; 0x57
 801606c:	d115      	bne.n	801609a <pifGps_ParsingNmea+0x48a>
 801606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016070:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016074:	60ba      	str	r2, [r7, #8]
 8016076:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801607a:	60fb      	str	r3, [r7, #12]
 801607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801607e:	ed97 7b02 	vldr	d7, [r7, #8]
 8016082:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 8016086:	e008      	b.n	801609a <pifGps_ParsingNmea+0x48a>
				case 5:
					 _convertString2Time(string, &p_owner->_utc);
 8016088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801608a:	330e      	adds	r3, #14
 801608c:	4619      	mov	r1, r3
 801608e:	4828      	ldr	r0, [pc, #160]	; (8016130 <pifGps_ParsingNmea+0x520>)
 8016090:	f7ff fafe 	bl	8015690 <_convertString2Time>
					break;
 8016094:	e002      	b.n	801609c <pifGps_ParsingNmea+0x48c>
					break;
 8016096:	bf00      	nop
 8016098:	e228      	b.n	80164ec <pifGps_ParsingNmea+0x8dc>
					break;
 801609a:	bf00      	nop
				}
				break;
 801609c:	e226      	b.n	80164ec <pifGps_ParsingNmea+0x8dc>

			case PIF_GPS_NMEA_MSG_ID_GNS:
				switch (param) {
 801609e:	4b27      	ldr	r3, [pc, #156]	; (801613c <pifGps_ParsingNmea+0x52c>)
 80160a0:	781b      	ldrb	r3, [r3, #0]
 80160a2:	3b01      	subs	r3, #1
 80160a4:	2b08      	cmp	r3, #8
 80160a6:	f200 8223 	bhi.w	80164f0 <pifGps_ParsingNmea+0x8e0>
 80160aa:	a201      	add	r2, pc, #4	; (adr r2, 80160b0 <pifGps_ParsingNmea+0x4a0>)
 80160ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160b0:	080160d5 	.word	0x080160d5
 80160b4:	080160e3 	.word	0x080160e3
 80160b8:	080160f9 	.word	0x080160f9
 80160bc:	0801611b 	.word	0x0801611b
 80160c0:	08016141 	.word	0x08016141
 80160c4:	080164f1 	.word	0x080164f1
 80160c8:	0801615d 	.word	0x0801615d
 80160cc:	080164f1 	.word	0x080164f1
 80160d0:	0801616f 	.word	0x0801616f
				case 1:
					_convertString2Time(string, &p_owner->_utc);
 80160d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d6:	330e      	adds	r3, #14
 80160d8:	4619      	mov	r1, r3
 80160da:	4815      	ldr	r0, [pc, #84]	; (8016130 <pifGps_ParsingNmea+0x520>)
 80160dc:	f7ff fad8 	bl	8015690 <_convertString2Time>
					break;
 80160e0:	e053      	b.n	801618a <pifGps_ParsingNmea+0x57a>
				case 2:
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 80160e2:	4813      	ldr	r0, [pc, #76]	; (8016130 <pifGps_ParsingNmea+0x520>)
 80160e4:	f7ff fc1c 	bl	8015920 <_convertString2Degrees>
 80160e8:	eeb0 7a40 	vmov.f32	s14, s0
 80160ec:	eef0 7a60 	vmov.f32	s15, s1
 80160f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160f2:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 80160f6:	e048      	b.n	801618a <pifGps_ParsingNmea+0x57a>
				case 3:
					if (string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 80160f8:	4b0d      	ldr	r3, [pc, #52]	; (8016130 <pifGps_ParsingNmea+0x520>)
 80160fa:	781b      	ldrb	r3, [r3, #0]
 80160fc:	2b53      	cmp	r3, #83	; 0x53
 80160fe:	d141      	bne.n	8016184 <pifGps_ParsingNmea+0x574>
 8016100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016102:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016106:	603a      	str	r2, [r7, #0]
 8016108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801610c:	607b      	str	r3, [r7, #4]
 801610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016110:	ed97 7b00 	vldr	d7, [r7]
 8016114:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 8016118:	e034      	b.n	8016184 <pifGps_ParsingNmea+0x574>
				case 4:
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 801611a:	4805      	ldr	r0, [pc, #20]	; (8016130 <pifGps_ParsingNmea+0x520>)
 801611c:	f7ff fc00 	bl	8015920 <_convertString2Degrees>
 8016120:	eeb0 7a40 	vmov.f32	s14, s0
 8016124:	eef0 7a60 	vmov.f32	s15, s1
 8016128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801612a:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 801612e:	e02c      	b.n	801618a <pifGps_ParsingNmea+0x57a>
 8016130:	20001da4 	.word	0x20001da4
 8016134:	20001dc4 	.word	0x20001dc4
 8016138:	20001da1 	.word	0x20001da1
 801613c:	20001da0 	.word	0x20001da0
				case 5:
					if (string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8016140:	4bb5      	ldr	r3, [pc, #724]	; (8016418 <pifGps_ParsingNmea+0x808>)
 8016142:	781b      	ldrb	r3, [r3, #0]
 8016144:	2b57      	cmp	r3, #87	; 0x57
 8016146:	d11f      	bne.n	8016188 <pifGps_ParsingNmea+0x578>
 8016148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801614a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801614e:	4692      	mov	sl, r2
 8016150:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8016154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016156:	e9c3 ab08 	strd	sl, fp, [r3, #32]
					break;
 801615a:	e015      	b.n	8016188 <pifGps_ParsingNmea+0x578>
				case 7:
					p_owner->_num_sat = _convertString2Interger(string);
 801615c:	48ae      	ldr	r0, [pc, #696]	; (8016418 <pifGps_ParsingNmea+0x808>)
 801615e:	f7ff fba5 	bl	80158ac <_convertString2Interger>
 8016162:	4603      	mov	r3, r0
 8016164:	b2da      	uxtb	r2, r3
 8016166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
					break;
 801616c:	e00d      	b.n	801618a <pifGps_ParsingNmea+0x57a>
				case 9:
					p_owner->_altitude = _convertString2Float(string);
 801616e:	48aa      	ldr	r0, [pc, #680]	; (8016418 <pifGps_ParsingNmea+0x808>)
 8016170:	f7ff fb10 	bl	8015794 <_convertString2Float>
 8016174:	eeb0 7a40 	vmov.f32	s14, s0
 8016178:	eef0 7a60 	vmov.f32	s15, s1
 801617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801617e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
					break;
 8016182:	e002      	b.n	801618a <pifGps_ParsingNmea+0x57a>
					break;
 8016184:	bf00      	nop
 8016186:	e1b3      	b.n	80164f0 <pifGps_ParsingNmea+0x8e0>
					break;
 8016188:	bf00      	nop
				}
				break;
 801618a:	e1b1      	b.n	80164f0 <pifGps_ParsingNmea+0x8e0>

			case PIF_GPS_NMEA_MSG_ID_GST:
				break;

			case PIF_GPS_NMEA_MSG_ID_GSV:
				switch (param) {
 801618c:	4ba3      	ldr	r3, [pc, #652]	; (801641c <pifGps_ParsingNmea+0x80c>)
 801618e:	781b      	ldrb	r3, [r3, #0]
 8016190:	2b03      	cmp	r3, #3
 8016192:	d00e      	beq.n	80161b2 <pifGps_ParsingNmea+0x5a2>
 8016194:	2b03      	cmp	r3, #3
 8016196:	dc16      	bgt.n	80161c6 <pifGps_ParsingNmea+0x5b6>
 8016198:	2b01      	cmp	r3, #1
 801619a:	d013      	beq.n	80161c4 <pifGps_ParsingNmea+0x5b4>
 801619c:	2b02      	cmp	r3, #2
 801619e:	d112      	bne.n	80161c6 <pifGps_ParsingNmea+0x5b6>
				case 1:
                    // Total number of messages of this type in this cycle
					break;
				case 2:
                    // Message number
					p_owner->__sv_msg_num = _convertString2Interger(string);
 80161a0:	489d      	ldr	r0, [pc, #628]	; (8016418 <pifGps_ParsingNmea+0x808>)
 80161a2:	f7ff fb83 	bl	80158ac <_convertString2Interger>
 80161a6:	4603      	mov	r3, r0
 80161a8:	b2da      	uxtb	r2, r3
 80161aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					break;
 80161b0:	e009      	b.n	80161c6 <pifGps_ParsingNmea+0x5b6>
				case 3:
                    // Total number of SVs visible
					p_owner->_sv_num_sv = _convertString2Interger(string);
 80161b2:	4899      	ldr	r0, [pc, #612]	; (8016418 <pifGps_ParsingNmea+0x808>)
 80161b4:	f7ff fb7a 	bl	80158ac <_convertString2Interger>
 80161b8:	4603      	mov	r3, r0
 80161ba:	b2da      	uxtb	r2, r3
 80161bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
					break;
 80161c2:	e000      	b.n	80161c6 <pifGps_ParsingNmea+0x5b6>
					break;
 80161c4:	bf00      	nop
				}
				if (param < 4) break;
 80161c6:	4b95      	ldr	r3, [pc, #596]	; (801641c <pifGps_ParsingNmea+0x80c>)
 80161c8:	781b      	ldrb	r3, [r3, #0]
 80161ca:	2b03      	cmp	r3, #3
 80161cc:	f240 8192 	bls.w	80164f4 <pifGps_ParsingNmea+0x8e4>

				sv_packet_idx = (param - 4) / 4 + 1; // satellite number in packet, 1-4
 80161d0:	4b92      	ldr	r3, [pc, #584]	; (801641c <pifGps_ParsingNmea+0x80c>)
 80161d2:	781b      	ldrb	r3, [r3, #0]
 80161d4:	3b04      	subs	r3, #4
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	da00      	bge.n	80161dc <pifGps_ParsingNmea+0x5cc>
 80161da:	3303      	adds	r3, #3
 80161dc:	109b      	asrs	r3, r3, #2
 80161de:	b2db      	uxtb	r3, r3
 80161e0:	3301      	adds	r3, #1
 80161e2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				sv_sat_num    = sv_packet_idx + (4 * (p_owner->__sv_msg_num - 1)); // global satellite number
 80161e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80161ec:	3b01      	subs	r3, #1
 80161ee:	b2db      	uxtb	r3, r3
 80161f0:	009b      	lsls	r3, r3, #2
 80161f2:	b2da      	uxtb	r2, r3
 80161f4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80161f8:	4413      	add	r3, r2
 80161fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				sv_sat_param  = param - 3 - (4 * (sv_packet_idx - 1)); // parameter number for satellite
 80161fe:	4b87      	ldr	r3, [pc, #540]	; (801641c <pifGps_ParsingNmea+0x80c>)
 8016200:	781a      	ldrb	r2, [r3, #0]
 8016202:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8016206:	3b01      	subs	r3, #1
 8016208:	b2db      	uxtb	r3, r3
 801620a:	009b      	lsls	r3, r3, #2
 801620c:	b2db      	uxtb	r3, r3
 801620e:	1ad3      	subs	r3, r2, r3
 8016210:	b2db      	uxtb	r3, r3
 8016212:	3b03      	subs	r3, #3
 8016214:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

				if (sv_sat_num > PIF_GPS_SV_MAXSATS) break;
 8016218:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801621c:	2b10      	cmp	r3, #16
 801621e:	f200 816b 	bhi.w	80164f8 <pifGps_ParsingNmea+0x8e8>

				switch (sv_sat_param) {
 8016222:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016226:	3b01      	subs	r3, #1
 8016228:	2b03      	cmp	r3, #3
 801622a:	d838      	bhi.n	801629e <pifGps_ParsingNmea+0x68e>
 801622c:	a201      	add	r2, pc, #4	; (adr r2, 8016234 <pifGps_ParsingNmea+0x624>)
 801622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016232:	bf00      	nop
 8016234:	08016245 	.word	0x08016245
 8016238:	0801629f 	.word	0x0801629f
 801623c:	0801629f 	.word	0x0801629f
 8016240:	08016273 	.word	0x08016273
				case 1:
					// SV PRN number
					p_owner->_sv_chn[sv_sat_num - 1]  = sv_sat_num;
 8016244:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016248:	3b01      	subs	r3, #1
 801624a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801624c:	4413      	add	r3, r2
 801624e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8016252:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
					p_owner->_sv_svid[sv_sat_num - 1] = _convertString2Interger(string);
 8016256:	4870      	ldr	r0, [pc, #448]	; (8016418 <pifGps_ParsingNmea+0x808>)
 8016258:	f7ff fb28 	bl	80158ac <_convertString2Interger>
 801625c:	4602      	mov	r2, r0
 801625e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016262:	3b01      	subs	r3, #1
 8016264:	b2d1      	uxtb	r1, r2
 8016266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016268:	4413      	add	r3, r2
 801626a:	460a      	mov	r2, r1
 801626c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
					break;
 8016270:	e015      	b.n	801629e <pifGps_ParsingNmea+0x68e>
				case 3:
					// Azimuth, degrees from True North, 000 through 359
					break;
				case 4:
					// SNR, 00 through 99 dB (null when not tracking)
					p_owner->_sv_cno[sv_sat_num - 1] = _convertString2Interger(string);
 8016272:	4869      	ldr	r0, [pc, #420]	; (8016418 <pifGps_ParsingNmea+0x808>)
 8016274:	f7ff fb1a 	bl	80158ac <_convertString2Interger>
 8016278:	4602      	mov	r2, r0
 801627a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801627e:	3b01      	subs	r3, #1
 8016280:	b2d1      	uxtb	r1, r2
 8016282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016284:	4413      	add	r3, r2
 8016286:	460a      	mov	r2, r1
 8016288:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					p_owner->_sv_quality[sv_sat_num - 1] = 0; // only used by ublox
 801628c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016290:	3b01      	subs	r3, #1
 8016292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016294:	4413      	add	r3, r2
 8016296:	2200      	movs	r2, #0
 8016298:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
					break;
 801629c:	bf00      	nop
				}

				p_owner->_sv_received_count++;
 801629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80162a4:	1c5a      	adds	r2, r3, #1
 80162a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				break;
 80162ac:	e12b      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>

			case PIF_GPS_NMEA_MSG_ID_RMC:
				switch (param) {
 80162ae:	4b5b      	ldr	r3, [pc, #364]	; (801641c <pifGps_ParsingNmea+0x80c>)
 80162b0:	781b      	ldrb	r3, [r3, #0]
 80162b2:	3b01      	subs	r3, #1
 80162b4:	2b08      	cmp	r3, #8
 80162b6:	f200 8121 	bhi.w	80164fc <pifGps_ParsingNmea+0x8ec>
 80162ba:	a201      	add	r2, pc, #4	; (adr r2, 80162c0 <pifGps_ParsingNmea+0x6b0>)
 80162bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162c0:	080162e5 	.word	0x080162e5
 80162c4:	080164fd 	.word	0x080164fd
 80162c8:	080162f3 	.word	0x080162f3
 80162cc:	08016309 	.word	0x08016309
 80162d0:	08016325 	.word	0x08016325
 80162d4:	0801633b 	.word	0x0801633b
 80162d8:	08016357 	.word	0x08016357
 80162dc:	08016377 	.word	0x08016377
 80162e0:	0801638d 	.word	0x0801638d
				case 1:
					_convertString2Time(string, &p_owner->_utc);
 80162e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e6:	330e      	adds	r3, #14
 80162e8:	4619      	mov	r1, r3
 80162ea:	484b      	ldr	r0, [pc, #300]	; (8016418 <pifGps_ParsingNmea+0x808>)
 80162ec:	f7ff f9d0 	bl	8015690 <_convertString2Time>
					break;
 80162f0:	e056      	b.n	80163a0 <pifGps_ParsingNmea+0x790>
				case 3:
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 80162f2:	4849      	ldr	r0, [pc, #292]	; (8016418 <pifGps_ParsingNmea+0x808>)
 80162f4:	f7ff fb14 	bl	8015920 <_convertString2Degrees>
 80162f8:	eeb0 7a40 	vmov.f32	s14, s0
 80162fc:	eef0 7a60 	vmov.f32	s15, s1
 8016300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016302:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 8016306:	e04b      	b.n	80163a0 <pifGps_ParsingNmea+0x790>
				case 4:
					if (string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8016308:	4b43      	ldr	r3, [pc, #268]	; (8016418 <pifGps_ParsingNmea+0x808>)
 801630a:	781b      	ldrb	r3, [r3, #0]
 801630c:	2b53      	cmp	r3, #83	; 0x53
 801630e:	d144      	bne.n	801639a <pifGps_ParsingNmea+0x78a>
 8016310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016312:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016316:	4690      	mov	r8, r2
 8016318:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 801631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801631e:	e9c3 8906 	strd	r8, r9, [r3, #24]
					break;
 8016322:	e03a      	b.n	801639a <pifGps_ParsingNmea+0x78a>
				case 5:
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8016324:	483c      	ldr	r0, [pc, #240]	; (8016418 <pifGps_ParsingNmea+0x808>)
 8016326:	f7ff fafb 	bl	8015920 <_convertString2Degrees>
 801632a:	eeb0 7a40 	vmov.f32	s14, s0
 801632e:	eef0 7a60 	vmov.f32	s15, s1
 8016332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016334:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 8016338:	e032      	b.n	80163a0 <pifGps_ParsingNmea+0x790>
				case 6:
					if (string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 801633a:	4b37      	ldr	r3, [pc, #220]	; (8016418 <pifGps_ParsingNmea+0x808>)
 801633c:	781b      	ldrb	r3, [r3, #0]
 801633e:	2b57      	cmp	r3, #87	; 0x57
 8016340:	d12d      	bne.n	801639e <pifGps_ParsingNmea+0x78e>
 8016342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016344:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016348:	4614      	mov	r4, r2
 801634a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 801634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016350:	e9c3 4508 	strd	r4, r5, [r3, #32]
					break;
 8016354:	e023      	b.n	801639e <pifGps_ParsingNmea+0x78e>
				case 7:
					p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 8016356:	4830      	ldr	r0, [pc, #192]	; (8016418 <pifGps_ParsingNmea+0x808>)
 8016358:	f7ff fa1c 	bl	8015794 <_convertString2Float>
 801635c:	ec51 0b10 	vmov	r0, r1, d0
 8016360:	a32b      	add	r3, pc, #172	; (adr r3, 8016410 <pifGps_ParsingNmea+0x800>)
 8016362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016366:	f7ea f8fb 	bl	8000560 <__aeabi_dmul>
 801636a:	4602      	mov	r2, r0
 801636c:	460b      	mov	r3, r1
 801636e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016370:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
					break;
 8016374:	e014      	b.n	80163a0 <pifGps_ParsingNmea+0x790>
				case 8:
					p_owner->_ground_course = _convertString2Float(string);
 8016376:	4828      	ldr	r0, [pc, #160]	; (8016418 <pifGps_ParsingNmea+0x808>)
 8016378:	f7ff fa0c 	bl	8015794 <_convertString2Float>
 801637c:	eeb0 7a40 	vmov.f32	s14, s0
 8016380:	eef0 7a60 	vmov.f32	s15, s1
 8016384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016386:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
					break;
 801638a:	e009      	b.n	80163a0 <pifGps_ParsingNmea+0x790>
				case 9:
					_convertString2Date(string, &p_owner->_utc);
 801638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801638e:	330e      	adds	r3, #14
 8016390:	4619      	mov	r1, r3
 8016392:	4821      	ldr	r0, [pc, #132]	; (8016418 <pifGps_ParsingNmea+0x808>)
 8016394:	f7ff f938 	bl	8015608 <_convertString2Date>
					break;
 8016398:	e002      	b.n	80163a0 <pifGps_ParsingNmea+0x790>
					break;
 801639a:	bf00      	nop
 801639c:	e0ae      	b.n	80164fc <pifGps_ParsingNmea+0x8ec>
					break;
 801639e:	bf00      	nop
				}
				break;
 80163a0:	e0ac      	b.n	80164fc <pifGps_ParsingNmea+0x8ec>

			case PIF_GPS_NMEA_MSG_ID_THS:
				break;

			case PIF_GPS_NMEA_MSG_ID_TXT:
				if (p_owner->__evt_text) {
 80163a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d043      	beq.n	8016434 <pifGps_ParsingNmea+0x824>
					switch (param) {
 80163ac:	4b1b      	ldr	r3, [pc, #108]	; (801641c <pifGps_ParsingNmea+0x80c>)
 80163ae:	781b      	ldrb	r3, [r3, #0]
 80163b0:	3b01      	subs	r3, #1
 80163b2:	2b03      	cmp	r3, #3
 80163b4:	f200 80a4 	bhi.w	8016500 <pifGps_ParsingNmea+0x8f0>
 80163b8:	a201      	add	r2, pc, #4	; (adr r2, 80163c0 <pifGps_ParsingNmea+0x7b0>)
 80163ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163be:	bf00      	nop
 80163c0:	080163d1 	.word	0x080163d1
 80163c4:	080163e5 	.word	0x080163e5
 80163c8:	080163f9 	.word	0x080163f9
 80163cc:	08016421 	.word	0x08016421
					case 1:
						p_owner->__p_txt->total = _convertString2Interger(string);
 80163d0:	4811      	ldr	r0, [pc, #68]	; (8016418 <pifGps_ParsingNmea+0x808>)
 80163d2:	f7ff fa6b 	bl	80158ac <_convertString2Interger>
 80163d6:	4602      	mov	r2, r0
 80163d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80163de:	b2d2      	uxtb	r2, r2
 80163e0:	701a      	strb	r2, [r3, #0]
						break;
 80163e2:	e028      	b.n	8016436 <pifGps_ParsingNmea+0x826>
					case 2:
						p_owner->__p_txt->num = _convertString2Interger(string);
 80163e4:	480c      	ldr	r0, [pc, #48]	; (8016418 <pifGps_ParsingNmea+0x808>)
 80163e6:	f7ff fa61 	bl	80158ac <_convertString2Interger>
 80163ea:	4602      	mov	r2, r0
 80163ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80163f2:	b2d2      	uxtb	r2, r2
 80163f4:	705a      	strb	r2, [r3, #1]
						break;
 80163f6:	e01e      	b.n	8016436 <pifGps_ParsingNmea+0x826>
					case 3:
						p_owner->__p_txt->type = _convertString2Interger(string);
 80163f8:	4807      	ldr	r0, [pc, #28]	; (8016418 <pifGps_ParsingNmea+0x808>)
 80163fa:	f7ff fa57 	bl	80158ac <_convertString2Interger>
 80163fe:	4602      	mov	r2, r0
 8016400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016406:	b2d2      	uxtb	r2, r2
 8016408:	709a      	strb	r2, [r3, #2]
						break;
 801640a:	e014      	b.n	8016436 <pifGps_ParsingNmea+0x826>
 801640c:	f3af 8000 	nop.w
 8016410:	00000000 	.word	0x00000000
 8016414:	40e91e80 	.word	0x40e91e80
 8016418:	20001da4 	.word	0x20001da4
 801641c:	20001da0 	.word	0x20001da0
					case 4:
						strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
 8016420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016422:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016426:	3303      	adds	r3, #3
 8016428:	223f      	movs	r2, #63	; 0x3f
 801642a:	499b      	ldr	r1, [pc, #620]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 801642c:	4618      	mov	r0, r3
 801642e:	f00c fca1 	bl	8022d74 <strncpy>
						break;
 8016432:	e000      	b.n	8016436 <pifGps_ParsingNmea+0x826>
					}
				}
 8016434:	bf00      	nop
				break;
 8016436:	e063      	b.n	8016500 <pifGps_ParsingNmea+0x8f0>

			case PIF_GPS_NMEA_MSG_ID_VLW:
				break;

			case PIF_GPS_NMEA_MSG_ID_VTG:
				switch (param) {
 8016438:	4b98      	ldr	r3, [pc, #608]	; (801669c <pifGps_ParsingNmea+0xa8c>)
 801643a:	781b      	ldrb	r3, [r3, #0]
 801643c:	2b01      	cmp	r3, #1
 801643e:	d002      	beq.n	8016446 <pifGps_ParsingNmea+0x836>
 8016440:	2b05      	cmp	r3, #5
 8016442:	d00b      	beq.n	801645c <pifGps_ParsingNmea+0x84c>
					break;
				case 5:
					p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
					break;
				}
				break;
 8016444:	e05f      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
					p_owner->_ground_course = _convertString2Float(string);
 8016446:	4894      	ldr	r0, [pc, #592]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 8016448:	f7ff f9a4 	bl	8015794 <_convertString2Float>
 801644c:	eeb0 7a40 	vmov.f32	s14, s0
 8016450:	eef0 7a60 	vmov.f32	s15, s1
 8016454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016456:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
					break;
 801645a:	e00f      	b.n	801647c <pifGps_ParsingNmea+0x86c>
					p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 801645c:	488e      	ldr	r0, [pc, #568]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 801645e:	f7ff f999 	bl	8015794 <_convertString2Float>
 8016462:	ec51 0b10 	vmov	r0, r1, d0
 8016466:	a38a      	add	r3, pc, #552	; (adr r3, 8016690 <pifGps_ParsingNmea+0xa80>)
 8016468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801646c:	f7ea f878 	bl	8000560 <__aeabi_dmul>
 8016470:	4602      	mov	r2, r0
 8016472:	460b      	mov	r3, r1
 8016474:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016476:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
					break;
 801647a:	bf00      	nop
				break;
 801647c:	e043      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>

			case PIF_GPS_NMEA_MSG_ID_ZDA:
				switch (param) {
 801647e:	4b87      	ldr	r3, [pc, #540]	; (801669c <pifGps_ParsingNmea+0xa8c>)
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	3b01      	subs	r3, #1
 8016484:	2b03      	cmp	r3, #3
 8016486:	d83d      	bhi.n	8016504 <pifGps_ParsingNmea+0x8f4>
 8016488:	a201      	add	r2, pc, #4	; (adr r2, 8016490 <pifGps_ParsingNmea+0x880>)
 801648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801648e:	bf00      	nop
 8016490:	080164a1 	.word	0x080164a1
 8016494:	080164af 	.word	0x080164af
 8016498:	080164bf 	.word	0x080164bf
 801649c:	080164cf 	.word	0x080164cf
				case 1:
					_convertString2Time(string, &p_owner->_utc);
 80164a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a2:	330e      	adds	r3, #14
 80164a4:	4619      	mov	r1, r3
 80164a6:	487c      	ldr	r0, [pc, #496]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 80164a8:	f7ff f8f2 	bl	8015690 <_convertString2Time>
					break;
 80164ac:	e019      	b.n	80164e2 <pifGps_ParsingNmea+0x8d2>
				case 2:
					p_owner->_utc.day = _convertString2Interger(string);
 80164ae:	487a      	ldr	r0, [pc, #488]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 80164b0:	f7ff f9fc 	bl	80158ac <_convertString2Interger>
 80164b4:	4603      	mov	r3, r0
 80164b6:	b2da      	uxtb	r2, r3
 80164b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ba:	741a      	strb	r2, [r3, #16]
					break;
 80164bc:	e011      	b.n	80164e2 <pifGps_ParsingNmea+0x8d2>
				case 3:
					p_owner->_utc.month = _convertString2Interger(string);
 80164be:	4876      	ldr	r0, [pc, #472]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 80164c0:	f7ff f9f4 	bl	80158ac <_convertString2Interger>
 80164c4:	4603      	mov	r3, r0
 80164c6:	b2da      	uxtb	r2, r3
 80164c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ca:	73da      	strb	r2, [r3, #15]
					break;
 80164cc:	e009      	b.n	80164e2 <pifGps_ParsingNmea+0x8d2>
				case 4:
					p_owner->_utc.year = _convertString2Interger(string) - 2000;
 80164ce:	4872      	ldr	r0, [pc, #456]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 80164d0:	f7ff f9ec 	bl	80158ac <_convertString2Interger>
 80164d4:	4603      	mov	r3, r0
 80164d6:	b2db      	uxtb	r3, r3
 80164d8:	3330      	adds	r3, #48	; 0x30
 80164da:	b2da      	uxtb	r2, r3
 80164dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164de:	739a      	strb	r2, [r3, #14]
					break;
 80164e0:	bf00      	nop
				}
				break;
 80164e2:	e00f      	b.n	8016504 <pifGps_ParsingNmea+0x8f4>
			}
		}
 80164e4:	bf00      	nop
 80164e6:	e00e      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
				break;
 80164e8:	bf00      	nop
 80164ea:	e00c      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
				break;
 80164ec:	bf00      	nop
 80164ee:	e00a      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
				break;
 80164f0:	bf00      	nop
 80164f2:	e008      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
				if (param < 4) break;
 80164f4:	bf00      	nop
 80164f6:	e006      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
				if (sv_sat_num > PIF_GPS_SV_MAXSATS) break;
 80164f8:	bf00      	nop
 80164fa:	e004      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
				break;
 80164fc:	bf00      	nop
 80164fe:	e002      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
				break;
 8016500:	bf00      	nop
 8016502:	e000      	b.n	8016506 <pifGps_ParsingNmea+0x8f6>
				break;
 8016504:	bf00      	nop
		param++;
 8016506:	4b65      	ldr	r3, [pc, #404]	; (801669c <pifGps_ParsingNmea+0xa8c>)
 8016508:	781b      	ldrb	r3, [r3, #0]
 801650a:	3301      	adds	r3, #1
 801650c:	b2da      	uxtb	r2, r3
 801650e:	4b63      	ldr	r3, [pc, #396]	; (801669c <pifGps_ParsingNmea+0xa8c>)
 8016510:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param = 1;
 8016512:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016516:	2b2a      	cmp	r3, #42	; 0x2a
 8016518:	d103      	bne.n	8016522 <pifGps_ParsingNmea+0x912>
 801651a:	4b61      	ldr	r3, [pc, #388]	; (80166a0 <pifGps_ParsingNmea+0xa90>)
 801651c:	2201      	movs	r2, #1
 801651e:	701a      	strb	r2, [r3, #0]
 8016520:	e007      	b.n	8016532 <pifGps_ParsingNmea+0x922>
		else parity ^= c;
 8016522:	4b60      	ldr	r3, [pc, #384]	; (80166a4 <pifGps_ParsingNmea+0xa94>)
 8016524:	781a      	ldrb	r2, [r3, #0]
 8016526:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801652a:	4053      	eors	r3, r2
 801652c:	b2da      	uxtb	r2, r3
 801652e:	4b5d      	ldr	r3, [pc, #372]	; (80166a4 <pifGps_ParsingNmea+0xa94>)
 8016530:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8016532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016534:	689b      	ldr	r3, [r3, #8]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d018      	beq.n	801656c <pifGps_ParsingNmea+0x95c>
			string[offset++] = c;
 801653a:	4b5b      	ldr	r3, [pc, #364]	; (80166a8 <pifGps_ParsingNmea+0xa98>)
 801653c:	781b      	ldrb	r3, [r3, #0]
 801653e:	1c5a      	adds	r2, r3, #1
 8016540:	b2d1      	uxtb	r1, r2
 8016542:	4a59      	ldr	r2, [pc, #356]	; (80166a8 <pifGps_ParsingNmea+0xa98>)
 8016544:	7011      	strb	r1, [r2, #0]
 8016546:	4619      	mov	r1, r3
 8016548:	4a53      	ldr	r2, [pc, #332]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 801654a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801654e:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 8016550:	4b55      	ldr	r3, [pc, #340]	; (80166a8 <pifGps_ParsingNmea+0xa98>)
 8016552:	781b      	ldrb	r3, [r3, #0]
 8016554:	1c5a      	adds	r2, r3, #1
 8016556:	b2d1      	uxtb	r1, r2
 8016558:	4a53      	ldr	r2, [pc, #332]	; (80166a8 <pifGps_ParsingNmea+0xa98>)
 801655a:	7011      	strb	r1, [r2, #0]
 801655c:	461a      	mov	r2, r3
 801655e:	4b4e      	ldr	r3, [pc, #312]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 8016560:	2100      	movs	r1, #0
 8016562:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 8016564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016566:	689b      	ldr	r3, [r3, #8]
 8016568:	484b      	ldr	r0, [pc, #300]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 801656a:	4798      	blx	r3
		}
		offset = 0;
 801656c:	4b4e      	ldr	r3, [pc, #312]	; (80166a8 <pifGps_ParsingNmea+0xa98>)
 801656e:	2200      	movs	r2, #0
 8016570:	701a      	strb	r2, [r3, #0]
 8016572:	e0ba      	b.n	80166ea <pifGps_ParsingNmea+0xada>
	}
	else if (c == '\r' || c == '\n') {
 8016574:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016578:	2b0d      	cmp	r3, #13
 801657a:	d004      	beq.n	8016586 <pifGps_ParsingNmea+0x976>
 801657c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016580:	2b0a      	cmp	r3, #10
 8016582:	f040 8097 	bne.w	80166b4 <pifGps_ParsingNmea+0xaa4>
		if (msg_id && checksum_param) { //parity checksum
 8016586:	4b49      	ldr	r3, [pc, #292]	; (80166ac <pifGps_ParsingNmea+0xa9c>)
 8016588:	781b      	ldrb	r3, [r3, #0]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d058      	beq.n	8016640 <pifGps_ParsingNmea+0xa30>
 801658e:	4b44      	ldr	r3, [pc, #272]	; (80166a0 <pifGps_ParsingNmea+0xa90>)
 8016590:	781b      	ldrb	r3, [r3, #0]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d054      	beq.n	8016640 <pifGps_ParsingNmea+0xa30>
			uint8_t checksum = _convertAscii2Hex(string[0]);
 8016596:	4b40      	ldr	r3, [pc, #256]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 8016598:	781b      	ldrb	r3, [r3, #0]
 801659a:	4618      	mov	r0, r3
 801659c:	f7ff fa62 	bl	8015a64 <_convertAscii2Hex>
 80165a0:	4603      	mov	r3, r0
 80165a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			checksum <<= 4;
 80165a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80165aa:	011b      	lsls	r3, r3, #4
 80165ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			checksum += _convertAscii2Hex(string[1]);
 80165b0:	4b39      	ldr	r3, [pc, #228]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 80165b2:	785b      	ldrb	r3, [r3, #1]
 80165b4:	4618      	mov	r0, r3
 80165b6:	f7ff fa55 	bl	8015a64 <_convertAscii2Hex>
 80165ba:	4603      	mov	r3, r0
 80165bc:	461a      	mov	r2, r3
 80165be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80165c2:	4413      	add	r3, r2
 80165c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			if (checksum == parity) {
 80165c8:	4b36      	ldr	r3, [pc, #216]	; (80166a4 <pifGps_ParsingNmea+0xa94>)
 80165ca:	781b      	ldrb	r3, [r3, #0]
 80165cc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d122      	bne.n	801661a <pifGps_ParsingNmea+0xa0a>
				if (p_owner->evt_nmea_receive) {
 80165d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d00c      	beq.n	80165f6 <pifGps_ParsingNmea+0x9e6>
					if ((p_owner->evt_nmea_receive)(p_owner, msg_id)) pifGps_SendEvent(p_owner);
 80165dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	4a32      	ldr	r2, [pc, #200]	; (80166ac <pifGps_ParsingNmea+0xa9c>)
 80165e2:	7812      	ldrb	r2, [r2, #0]
 80165e4:	4611      	mov	r1, r2
 80165e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165e8:	4798      	blx	r3
 80165ea:	4603      	mov	r3, r0
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d002      	beq.n	80165f6 <pifGps_ParsingNmea+0x9e6>
 80165f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165f2:	f7ff fae9 	bl	8015bc8 <pifGps_SendEvent>
				}
				if (msg_id == PIF_GPS_NMEA_MSG_ID_TXT && p_owner->__evt_text) {
 80165f6:	4b2d      	ldr	r3, [pc, #180]	; (80166ac <pifGps_ParsingNmea+0xa9c>)
 80165f8:	781b      	ldrb	r3, [r3, #0]
 80165fa:	2b0c      	cmp	r3, #12
 80165fc:	d11d      	bne.n	801663a <pifGps_ParsingNmea+0xa2a>
 80165fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016600:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016604:	2b00      	cmp	r3, #0
 8016606:	d018      	beq.n	801663a <pifGps_ParsingNmea+0xa2a>
					(p_owner->__evt_text)(p_owner->__p_txt);
 8016608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801660a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801660e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016610:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8016614:	4610      	mov	r0, r2
 8016616:	4798      	blx	r3
 8016618:	e00f      	b.n	801663a <pifGps_ParsingNmea+0xa2a>
				}
			}
#ifndef __PIF_NO_LOG__
			else {
				pifLog_Printf(LT_ERROR, "GN(%u): MsgId=%u CS=%x:%x", __LINE__, msg_id, checksum, parity);
 801661a:	4b24      	ldr	r3, [pc, #144]	; (80166ac <pifGps_ParsingNmea+0xa9c>)
 801661c:	781b      	ldrb	r3, [r3, #0]
 801661e:	4619      	mov	r1, r3
 8016620:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016624:	4a1f      	ldr	r2, [pc, #124]	; (80166a4 <pifGps_ParsingNmea+0xa94>)
 8016626:	7812      	ldrb	r2, [r2, #0]
 8016628:	9201      	str	r2, [sp, #4]
 801662a:	9300      	str	r3, [sp, #0]
 801662c:	460b      	mov	r3, r1
 801662e:	f240 12df 	movw	r2, #479	; 0x1df
 8016632:	491f      	ldr	r1, [pc, #124]	; (80166b0 <pifGps_ParsingNmea+0xaa0>)
 8016634:	2004      	movs	r0, #4
 8016636:	f7fc feb5 	bl	80133a4 <pifLog_Printf>
			}
#endif
			rtn = TRUE;
 801663a:	2301      	movs	r3, #1
 801663c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		checksum_param = 0;
 8016640:	4b17      	ldr	r3, [pc, #92]	; (80166a0 <pifGps_ParsingNmea+0xa90>)
 8016642:	2200      	movs	r2, #0
 8016644:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8016646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016648:	689b      	ldr	r3, [r3, #8]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d018      	beq.n	8016680 <pifGps_ParsingNmea+0xa70>
			string[offset++] = c;
 801664e:	4b16      	ldr	r3, [pc, #88]	; (80166a8 <pifGps_ParsingNmea+0xa98>)
 8016650:	781b      	ldrb	r3, [r3, #0]
 8016652:	1c5a      	adds	r2, r3, #1
 8016654:	b2d1      	uxtb	r1, r2
 8016656:	4a14      	ldr	r2, [pc, #80]	; (80166a8 <pifGps_ParsingNmea+0xa98>)
 8016658:	7011      	strb	r1, [r2, #0]
 801665a:	4619      	mov	r1, r3
 801665c:	4a0e      	ldr	r2, [pc, #56]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 801665e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016662:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 8016664:	4b10      	ldr	r3, [pc, #64]	; (80166a8 <pifGps_ParsingNmea+0xa98>)
 8016666:	781b      	ldrb	r3, [r3, #0]
 8016668:	1c5a      	adds	r2, r3, #1
 801666a:	b2d1      	uxtb	r1, r2
 801666c:	4a0e      	ldr	r2, [pc, #56]	; (80166a8 <pifGps_ParsingNmea+0xa98>)
 801666e:	7011      	strb	r1, [r2, #0]
 8016670:	461a      	mov	r2, r3
 8016672:	4b09      	ldr	r3, [pc, #36]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 8016674:	2100      	movs	r1, #0
 8016676:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 8016678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801667a:	689b      	ldr	r3, [r3, #8]
 801667c:	4806      	ldr	r0, [pc, #24]	; (8016698 <pifGps_ParsingNmea+0xa88>)
 801667e:	4798      	blx	r3
		}
		offset = 0;
 8016680:	4b09      	ldr	r3, [pc, #36]	; (80166a8 <pifGps_ParsingNmea+0xa98>)
 8016682:	2200      	movs	r2, #0
 8016684:	701a      	strb	r2, [r3, #0]
		return rtn;
 8016686:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801668a:	e02f      	b.n	80166ec <pifGps_ParsingNmea+0xadc>
 801668c:	f3af 8000 	nop.w
 8016690:	00000000 	.word	0x00000000
 8016694:	40e91e80 	.word	0x40e91e80
 8016698:	20001da4 	.word	0x20001da4
 801669c:	20001da0 	.word	0x20001da0
 80166a0:	20001dc5 	.word	0x20001dc5
 80166a4:	20001da2 	.word	0x20001da2
 80166a8:	20001da1 	.word	0x20001da1
 80166ac:	20001dc4 	.word	0x20001dc4
 80166b0:	08027654 	.word	0x08027654
	}
	else {
		if (offset < PIF_GPS_NMEA_VALUE_SIZE) string[offset++] = c;
 80166b4:	4b10      	ldr	r3, [pc, #64]	; (80166f8 <pifGps_ParsingNmea+0xae8>)
 80166b6:	781b      	ldrb	r3, [r3, #0]
 80166b8:	2b1f      	cmp	r3, #31
 80166ba:	d80a      	bhi.n	80166d2 <pifGps_ParsingNmea+0xac2>
 80166bc:	4b0e      	ldr	r3, [pc, #56]	; (80166f8 <pifGps_ParsingNmea+0xae8>)
 80166be:	781b      	ldrb	r3, [r3, #0]
 80166c0:	1c5a      	adds	r2, r3, #1
 80166c2:	b2d1      	uxtb	r1, r2
 80166c4:	4a0c      	ldr	r2, [pc, #48]	; (80166f8 <pifGps_ParsingNmea+0xae8>)
 80166c6:	7011      	strb	r1, [r2, #0]
 80166c8:	4619      	mov	r1, r3
 80166ca:	4a0c      	ldr	r2, [pc, #48]	; (80166fc <pifGps_ParsingNmea+0xaec>)
 80166cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80166d0:	5453      	strb	r3, [r2, r1]
		if (!checksum_param) parity ^= c;
 80166d2:	4b0b      	ldr	r3, [pc, #44]	; (8016700 <pifGps_ParsingNmea+0xaf0>)
 80166d4:	781b      	ldrb	r3, [r3, #0]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d107      	bne.n	80166ea <pifGps_ParsingNmea+0xada>
 80166da:	4b0a      	ldr	r3, [pc, #40]	; (8016704 <pifGps_ParsingNmea+0xaf4>)
 80166dc:	781a      	ldrb	r2, [r3, #0]
 80166de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80166e2:	4053      	eors	r3, r2
 80166e4:	b2da      	uxtb	r2, r3
 80166e6:	4b07      	ldr	r3, [pc, #28]	; (8016704 <pifGps_ParsingNmea+0xaf4>)
 80166e8:	701a      	strb	r2, [r3, #0]
	}
	return FALSE;
 80166ea:	2300      	movs	r3, #0
}
 80166ec:	4618      	mov	r0, r3
 80166ee:	3738      	adds	r7, #56	; 0x38
 80166f0:	46bd      	mov	sp, r7
 80166f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80166f6:	bf00      	nop
 80166f8:	20001da1 	.word	0x20001da1
 80166fc:	20001da4 	.word	0x20001da4
 8016700:	20001dc5 	.word	0x20001dc5
 8016704:	20001da2 	.word	0x20001da2

08016708 <_checksumUbx>:

#endif


static uint16_t _checksumUbx(uint8_t* p_header, uint8_t* p_payload, uint16_t len)
{
 8016708:	b480      	push	{r7}
 801670a:	b087      	sub	sp, #28
 801670c:	af00      	add	r7, sp, #0
 801670e:	60f8      	str	r0, [r7, #12]
 8016710:	60b9      	str	r1, [r7, #8]
 8016712:	4613      	mov	r3, r2
 8016714:	80fb      	strh	r3, [r7, #6]
	uint8_t ck_a = 0, ck_b = 0;
 8016716:	2300      	movs	r3, #0
 8016718:	75fb      	strb	r3, [r7, #23]
 801671a:	2300      	movs	r3, #0
 801671c:	75bb      	strb	r3, [r7, #22]
	uint16_t i;

	for (i = 0; i < 4; i++) {
 801671e:	2300      	movs	r3, #0
 8016720:	82bb      	strh	r3, [r7, #20]
 8016722:	e00d      	b.n	8016740 <_checksumUbx+0x38>
		ck_a += p_header[i];
 8016724:	8abb      	ldrh	r3, [r7, #20]
 8016726:	68fa      	ldr	r2, [r7, #12]
 8016728:	4413      	add	r3, r2
 801672a:	781a      	ldrb	r2, [r3, #0]
 801672c:	7dfb      	ldrb	r3, [r7, #23]
 801672e:	4413      	add	r3, r2
 8016730:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 8016732:	7dba      	ldrb	r2, [r7, #22]
 8016734:	7dfb      	ldrb	r3, [r7, #23]
 8016736:	4413      	add	r3, r2
 8016738:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < 4; i++) {
 801673a:	8abb      	ldrh	r3, [r7, #20]
 801673c:	3301      	adds	r3, #1
 801673e:	82bb      	strh	r3, [r7, #20]
 8016740:	8abb      	ldrh	r3, [r7, #20]
 8016742:	2b03      	cmp	r3, #3
 8016744:	d9ee      	bls.n	8016724 <_checksumUbx+0x1c>
	}
	for (i = 0; i < len; i++) {
 8016746:	2300      	movs	r3, #0
 8016748:	82bb      	strh	r3, [r7, #20]
 801674a:	e00d      	b.n	8016768 <_checksumUbx+0x60>
		ck_a += p_payload[i];
 801674c:	8abb      	ldrh	r3, [r7, #20]
 801674e:	68ba      	ldr	r2, [r7, #8]
 8016750:	4413      	add	r3, r2
 8016752:	781a      	ldrb	r2, [r3, #0]
 8016754:	7dfb      	ldrb	r3, [r7, #23]
 8016756:	4413      	add	r3, r2
 8016758:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 801675a:	7dba      	ldrb	r2, [r7, #22]
 801675c:	7dfb      	ldrb	r3, [r7, #23]
 801675e:	4413      	add	r3, r2
 8016760:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < len; i++) {
 8016762:	8abb      	ldrh	r3, [r7, #20]
 8016764:	3301      	adds	r3, #1
 8016766:	82bb      	strh	r3, [r7, #20]
 8016768:	8aba      	ldrh	r2, [r7, #20]
 801676a:	88fb      	ldrh	r3, [r7, #6]
 801676c:	429a      	cmp	r2, r3
 801676e:	d3ed      	bcc.n	801674c <_checksumUbx+0x44>
	}
	return ck_a + (ck_b << 8);
 8016770:	7dfb      	ldrb	r3, [r7, #23]
 8016772:	b29a      	uxth	r2, r3
 8016774:	7dbb      	ldrb	r3, [r7, #22]
 8016776:	b29b      	uxth	r3, r3
 8016778:	021b      	lsls	r3, r3, #8
 801677a:	b29b      	uxth	r3, r3
 801677c:	4413      	add	r3, r2
 801677e:	b29b      	uxth	r3, r3
}
 8016780:	4618      	mov	r0, r3
 8016782:	371c      	adds	r7, #28
 8016784:	46bd      	mov	sp, r7
 8016786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801678a:	4770      	bx	lr

0801678c <_parsingPacket>:

static void _parsingPacket(PifGpsUblox *p_owner, PifActCommReceiveData act_receive_data)
{
 801678c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801678e:	b08d      	sub	sp, #52	; 0x34
 8016790:	af06      	add	r7, sp, #24
 8016792:	6078      	str	r0, [r7, #4]
 8016794:	6039      	str	r1, [r7, #0]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801679c:	60fb      	str	r3, [r7, #12]
	uint8_t pkt_err;
	int line;
	static uint8_t pre_err = PKT_ERR_NONE;
#endif

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 801679e:	e0db      	b.n	8016958 <_parsingPacket+0x1cc>
		switch (p_owner->__rx.state) {
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80167a6:	2b09      	cmp	r3, #9
 80167a8:	f200 80d5 	bhi.w	8016956 <_parsingPacket+0x1ca>
 80167ac:	a201      	add	r2, pc, #4	; (adr r2, 80167b4 <_parsingPacket+0x28>)
 80167ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167b2:	bf00      	nop
 80167b4:	080167dd 	.word	0x080167dd
 80167b8:	08016819 	.word	0x08016819
 80167bc:	08016833 	.word	0x08016833
 80167c0:	08016843 	.word	0x08016843
 80167c4:	08016853 	.word	0x08016853
 80167c8:	08016865 	.word	0x08016865
 80167cc:	080168a1 	.word	0x080168a1
 80167d0:	080168db 	.word	0x080168db
 80167d4:	080168ef 	.word	0x080168ef
 80167d8:	08016939 	.word	0x08016939
		case GURS_SYNC_CHAR_1:
			if (data == 0xB5) {
 80167dc:	7afb      	ldrb	r3, [r7, #11]
 80167de:	2bb5      	cmp	r3, #181	; 0xb5
 80167e0:	d107      	bne.n	80167f2 <_parsingPacket+0x66>
				p_owner->__rx.state = GURS_SYNC_CHAR_2;
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	2201      	movs	r2, #1
 80167e6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
 80167ea:	4b85      	ldr	r3, [pc, #532]	; (8016a00 <_parsingPacket+0x274>)
 80167ec:	2204      	movs	r2, #4
 80167ee:	701a      	strb	r2, [r3, #0]
 80167f0:	e0b2      	b.n	8016958 <_parsingPacket+0x1cc>
#endif
			}
			else if (pifGps_ParsingNmea(&p_owner->_gps, data)) {
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	3308      	adds	r3, #8
 80167f6:	7afa      	ldrb	r2, [r7, #11]
 80167f8:	4611      	mov	r1, r2
 80167fa:	4618      	mov	r0, r3
 80167fc:	f7ff fa08 	bl	8015c10 <pifGps_ParsingNmea>
 8016800:	4603      	mov	r3, r0
 8016802:	2b00      	cmp	r3, #0
 8016804:	f000 80a8 	beq.w	8016958 <_parsingPacket+0x1cc>
				p_owner->__rx.state = GURS_NMEA;
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	2209      	movs	r2, #9
 801680c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
 8016810:	4b7b      	ldr	r3, [pc, #492]	; (8016a00 <_parsingPacket+0x274>)
 8016812:	2204      	movs	r2, #4
 8016814:	701a      	strb	r2, [r3, #0]
#endif
			}
			break;
 8016816:	e09f      	b.n	8016958 <_parsingPacket+0x1cc>

		case GURS_SYNC_CHAR_2:
			if (data == 0x62) {
 8016818:	7afb      	ldrb	r3, [r7, #11]
 801681a:	2b62      	cmp	r3, #98	; 0x62
 801681c:	d104      	bne.n	8016828 <_parsingPacket+0x9c>
				p_owner->__rx.state = GURS_CLASS;
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	2202      	movs	r2, #2
 8016822:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
				pkt_err = PKT_ERR_INVALID_DATA;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8016826:	e097      	b.n	8016958 <_parsingPacket+0x1cc>
				pkt_err = PKT_ERR_INVALID_DATA;
 8016828:	2301      	movs	r3, #1
 801682a:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 801682c:	2361      	movs	r3, #97	; 0x61
 801682e:	613b      	str	r3, [r7, #16]
				goto fail;
 8016830:	e09f      	b.n	8016972 <_parsingPacket+0x1e6>

		case GURS_CLASS:
			p_packet->class_id = data;
 8016832:	7afa      	ldrb	r2, [r7, #11]
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.state = GURS_ID;
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	2203      	movs	r2, #3
 801683c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			break;
 8016840:	e08a      	b.n	8016958 <_parsingPacket+0x1cc>

		case GURS_ID:
			p_packet->msg_id = data;
 8016842:	7afa      	ldrb	r2, [r7, #11]
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	705a      	strb	r2, [r3, #1]
			p_owner->__rx.state = GURS_LENGTH_LOW;
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	2204      	movs	r2, #4
 801684c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			break;
 8016850:	e082      	b.n	8016958 <_parsingPacket+0x1cc>

		case GURS_LENGTH_LOW:
			p_packet->length = data;
 8016852:	7afb      	ldrb	r3, [r7, #11]
 8016854:	b29a      	uxth	r2, r3
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	805a      	strh	r2, [r3, #2]
			p_owner->__rx.state = GURS_LENGTH_HIGH;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	2205      	movs	r2, #5
 801685e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			break;
 8016862:	e079      	b.n	8016958 <_parsingPacket+0x1cc>

		case GURS_LENGTH_HIGH:
			p_packet->length |= data << 8;
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	885b      	ldrh	r3, [r3, #2]
 8016868:	b21a      	sxth	r2, r3
 801686a:	7afb      	ldrb	r3, [r7, #11]
 801686c:	021b      	lsls	r3, r3, #8
 801686e:	b21b      	sxth	r3, r3
 8016870:	4313      	orrs	r3, r2
 8016872:	b21b      	sxth	r3, r3
 8016874:	b29a      	uxth	r2, r3
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	805a      	strh	r2, [r3, #2]
			if (p_packet->length < sizeof(PifGpsUbxPacket) - 4) {
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	885b      	ldrh	r3, [r3, #2]
 801687e:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 8016882:	d208      	bcs.n	8016896 <_parsingPacket+0x10a>
				p_owner->__rx.payload_count = 0;
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	2200      	movs	r2, #0
 8016888:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
				p_owner->__rx.state = GURS_PAYLOAD;
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	2206      	movs	r2, #6
 8016890:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
				pkt_err = PKT_ERR_BIG_LENGHT;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8016894:	e060      	b.n	8016958 <_parsingPacket+0x1cc>
				pkt_err = PKT_ERR_BIG_LENGHT;
 8016896:	2300      	movs	r3, #0
 8016898:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 801689a:	237f      	movs	r3, #127	; 0x7f
 801689c:	613b      	str	r3, [r7, #16]
				goto fail;
 801689e:	e068      	b.n	8016972 <_parsingPacket+0x1e6>

		case GURS_PAYLOAD:
			p_packet->payload.bytes[p_owner->__rx.payload_count] = data;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80168a6:	4619      	mov	r1, r3
 80168a8:	7afa      	ldrb	r2, [r7, #11]
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	440b      	add	r3, r1
 80168ae:	711a      	strb	r2, [r3, #4]
			p_owner->__rx.payload_count++;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80168b6:	3301      	adds	r3, #1
 80168b8:	b2da      	uxtb	r2, r3
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
			if (p_owner->__rx.payload_count >= p_packet->length) {
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80168c6:	b29a      	uxth	r2, r3
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	885b      	ldrh	r3, [r3, #2]
 80168cc:	429a      	cmp	r2, r3
 80168ce:	d343      	bcc.n	8016958 <_parsingPacket+0x1cc>
				p_owner->__rx.state = GURS_CK_A;
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	2207      	movs	r2, #7
 80168d4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			}
			break;
 80168d8:	e03e      	b.n	8016958 <_parsingPacket+0x1cc>

		case GURS_CK_A:
			p_owner->__rx.checksum = data;
 80168da:	7afb      	ldrb	r3, [r7, #11]
 80168dc:	b29a      	uxth	r2, r3
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
			p_owner->__rx.state = GURS_CK_B;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2208      	movs	r2, #8
 80168e8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			break;
 80168ec:	e034      	b.n	8016958 <_parsingPacket+0x1cc>

		case GURS_CK_B:
			p_owner->__rx.checksum |= data << 8;
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	f8b3 3298 	ldrh.w	r3, [r3, #664]	; 0x298
 80168f4:	b21a      	sxth	r2, r3
 80168f6:	7afb      	ldrb	r3, [r7, #11]
 80168f8:	021b      	lsls	r3, r3, #8
 80168fa:	b21b      	sxth	r3, r3
 80168fc:	4313      	orrs	r3, r2
 80168fe:	b21b      	sxth	r3, r3
 8016900:	b29a      	uxth	r2, r3
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
			if (p_owner->__rx.checksum == _checksumUbx((uint8_t*)p_packet, p_packet->payload.bytes, p_packet->length)) {
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f8b3 4298 	ldrh.w	r4, [r3, #664]	; 0x298
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	1d19      	adds	r1, r3, #4
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	885b      	ldrh	r3, [r3, #2]
 8016916:	461a      	mov	r2, r3
 8016918:	68f8      	ldr	r0, [r7, #12]
 801691a:	f7ff fef5 	bl	8016708 <_checksumUbx>
 801691e:	4603      	mov	r3, r0
 8016920:	429c      	cmp	r4, r3
 8016922:	d104      	bne.n	801692e <_parsingPacket+0x1a2>
				p_owner->__rx.state = GURS_DONE;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	220a      	movs	r2, #10
 8016928:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
				return;
 801692c:	e064      	b.n	80169f8 <_parsingPacket+0x26c>
			}
			else {
#ifndef __PIF_NO_LOG__
				pkt_err = PKT_ERR_WRONG_CRC;
 801692e:	2302      	movs	r3, #2
 8016930:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8016932:	239b      	movs	r3, #155	; 0x9b
 8016934:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 8016936:	e01c      	b.n	8016972 <_parsingPacket+0x1e6>
			}
			break;

		case GURS_NMEA:
			if (pifGps_ParsingNmea(&p_owner->_gps, data))	{
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	3308      	adds	r3, #8
 801693c:	7afa      	ldrb	r2, [r7, #11]
 801693e:	4611      	mov	r1, r2
 8016940:	4618      	mov	r0, r3
 8016942:	f7ff f965 	bl	8015c10 <pifGps_ParsingNmea>
 8016946:	4603      	mov	r3, r0
 8016948:	2b00      	cmp	r3, #0
 801694a:	d005      	beq.n	8016958 <_parsingPacket+0x1cc>
				p_owner->__rx.state = GURS_SYNC_CHAR_1;
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	2200      	movs	r2, #0
 8016950:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
				return;
 8016954:	e050      	b.n	80169f8 <_parsingPacket+0x26c>
			}
			break;

		default:
			break;
 8016956:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 801695e:	f107 010b 	add.w	r1, r7, #11
 8016962:	683b      	ldr	r3, [r7, #0]
 8016964:	4610      	mov	r0, r2
 8016966:	4798      	blx	r3
 8016968:	4603      	mov	r3, r0
 801696a:	2b00      	cmp	r3, #0
 801696c:	f47f af18 	bne.w	80167a0 <_parsingPacket+0x14>
		}
	}
	return;
 8016970:	e042      	b.n	80169f8 <_parsingPacket+0x26c>

fail:
#ifndef __PIF_NO_LOG__
	if (pkt_err != pre_err) {
 8016972:	4b23      	ldr	r3, [pc, #140]	; (8016a00 <_parsingPacket+0x274>)
 8016974:	781b      	ldrb	r3, [r3, #0]
 8016976:	7dfa      	ldrb	r2, [r7, #23]
 8016978:	429a      	cmp	r2, r3
 801697a:	d039      	beq.n	80169f0 <_parsingPacket+0x264>
		if (p_owner->__rx.state) {
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8016982:	2b00      	cmp	r3, #0
 8016984:	d021      	beq.n	80169ca <_parsingPacket+0x23e>
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	8a9b      	ldrh	r3, [r3, #20]
 801698a:	461e      	mov	r6, r3
 801698c:	7dfb      	ldrb	r3, [r7, #23]
 801698e:	4a1d      	ldr	r2, [pc, #116]	; (8016a04 <_parsingPacket+0x278>)
 8016990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016994:	7afa      	ldrb	r2, [r7, #11]
 8016996:	4611      	mov	r1, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8016998:	687a      	ldr	r2, [r7, #4]
 801699a:	f892 2108 	ldrb.w	r2, [r2, #264]	; 0x108
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 801699e:	4610      	mov	r0, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 80169a0:	68fa      	ldr	r2, [r7, #12]
 80169a2:	7812      	ldrb	r2, [r2, #0]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 80169a4:	4614      	mov	r4, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 80169a6:	68fa      	ldr	r2, [r7, #12]
 80169a8:	7852      	ldrb	r2, [r2, #1]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 80169aa:	4615      	mov	r5, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 80169ac:	68fa      	ldr	r2, [r7, #12]
 80169ae:	8852      	ldrh	r2, [r2, #2]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 80169b0:	9205      	str	r2, [sp, #20]
 80169b2:	9504      	str	r5, [sp, #16]
 80169b4:	9403      	str	r4, [sp, #12]
 80169b6:	9002      	str	r0, [sp, #8]
 80169b8:	9101      	str	r1, [sp, #4]
 80169ba:	9300      	str	r3, [sp, #0]
 80169bc:	4633      	mov	r3, r6
 80169be:	693a      	ldr	r2, [r7, #16]
 80169c0:	4911      	ldr	r1, [pc, #68]	; (8016a08 <_parsingPacket+0x27c>)
 80169c2:	2004      	movs	r0, #4
 80169c4:	f7fc fcee 	bl	80133a4 <pifLog_Printf>
 80169c8:	e00f      	b.n	80169ea <_parsingPacket+0x25e>
		}
		else {
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh", line, p_owner->_gps._id, kPktErr[pkt_err], data);
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	8a9b      	ldrh	r3, [r3, #20]
 80169ce:	4619      	mov	r1, r3
 80169d0:	7dfb      	ldrb	r3, [r7, #23]
 80169d2:	4a0c      	ldr	r2, [pc, #48]	; (8016a04 <_parsingPacket+0x278>)
 80169d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80169d8:	7afa      	ldrb	r2, [r7, #11]
 80169da:	9201      	str	r2, [sp, #4]
 80169dc:	9300      	str	r3, [sp, #0]
 80169de:	460b      	mov	r3, r1
 80169e0:	693a      	ldr	r2, [r7, #16]
 80169e2:	490a      	ldr	r1, [pc, #40]	; (8016a0c <_parsingPacket+0x280>)
 80169e4:	2004      	movs	r0, #4
 80169e6:	f7fc fcdd 	bl	80133a4 <pifLog_Printf>
		}
		pre_err = pkt_err;
 80169ea:	4a05      	ldr	r2, [pc, #20]	; (8016a00 <_parsingPacket+0x274>)
 80169ec:	7dfb      	ldrb	r3, [r7, #23]
 80169ee:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_packet->payload.bytes[0], p_packet->payload.bytes[1],	p_packet->payload.bytes[2],
			p_packet->payload.bytes[3], p_packet->payload.bytes[4], p_packet->payload.bytes[5], p_packet->payload.bytes[6], p_packet->payload.bytes[7]);
#endif
#endif

	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	2200      	movs	r2, #0
 80169f4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
}
 80169f8:	371c      	adds	r7, #28
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169fe:	bf00      	nop
 8016a00:	2000013c 	.word	0x2000013c
 8016a04:	2000012c 	.word	0x2000012c
 8016a08:	080276a4 	.word	0x080276a4
 8016a0c:	080276d4 	.word	0x080276d4

08016a10 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b08a      	sub	sp, #40	; 0x28
 8016a14:	af04      	add	r7, sp, #16
 8016a16:	6078      	str	r0, [r7, #4]
 8016a18:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	613b      	str	r3, [r7, #16]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 8016a1e:	693b      	ldr	r3, [r7, #16]
 8016a20:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8016a24:	60fb      	str	r3, [r7, #12]
	PifGps *p_parent = &p_owner->_gps;
 8016a26:	693b      	ldr	r3, [r7, #16]
 8016a28:	3308      	adds	r3, #8
 8016a2a:	60bb      	str	r3, [r7, #8]
    int i;
    static BOOL next_fix = FALSE;

    if (!p_owner->_gps.evt_receive) return;
 8016a2c:	693b      	ldr	r3, [r7, #16]
 8016a2e:	68db      	ldr	r3, [r3, #12]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	f000 8241 	beq.w	8016eb8 <_evtParsing+0x4a8>

    if (p_owner->__rx.state < GURS_DONE) {
 8016a36:	693b      	ldr	r3, [r7, #16]
 8016a38:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8016a3c:	2b09      	cmp	r3, #9
 8016a3e:	d803      	bhi.n	8016a48 <_evtParsing+0x38>
    	_parsingPacket(p_owner, act_receive_data);
 8016a40:	6839      	ldr	r1, [r7, #0]
 8016a42:	6938      	ldr	r0, [r7, #16]
 8016a44:	f7ff fea2 	bl	801678c <_parsingPacket>
    }

    if (p_owner->__rx.state == GURS_DONE) {
 8016a48:	693b      	ldr	r3, [r7, #16]
 8016a4a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8016a4e:	2b0a      	cmp	r3, #10
 8016a50:	f040 8233 	bne.w	8016eba <_evtParsing+0x4aa>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x %x %x %x", p_owner->_gps._id, p_packet->class_id, p_packet->msg_id, p_packet->length,
    			p_packet->payload.bytes[0], p_packet->payload.bytes[1], p_packet->payload.bytes[2], p_packet->payload.bytes[3], p_packet->payload.bytes[4]);
#endif
#endif

        switch (p_packet->class_id) {
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	2b01      	cmp	r3, #1
 8016a5a:	d01c      	beq.n	8016a96 <_evtParsing+0x86>
 8016a5c:	2b05      	cmp	r3, #5
 8016a5e:	f040 8204 	bne.w	8016e6a <_evtParsing+0x45a>
        case GUCI_ACK:
        	switch (p_packet->msg_id) {
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	785b      	ldrb	r3, [r3, #1]
 8016a66:	2b01      	cmp	r3, #1
 8016a68:	d913      	bls.n	8016a92 <_evtParsing+0x82>
        	case GUMI_ACK_NAK:
        		break;

            default:
#ifndef __PIF_NO_LOG__
        		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 8016a6a:	693b      	ldr	r3, [r7, #16]
 8016a6c:	8a9b      	ldrh	r3, [r3, #20]
 8016a6e:	4618      	mov	r0, r3
 8016a70:	4b9f      	ldr	r3, [pc, #636]	; (8016cf0 <_evtParsing+0x2e0>)
 8016a72:	68db      	ldr	r3, [r3, #12]
 8016a74:	68fa      	ldr	r2, [r7, #12]
 8016a76:	7812      	ldrb	r2, [r2, #0]
 8016a78:	4611      	mov	r1, r2
 8016a7a:	68fa      	ldr	r2, [r7, #12]
 8016a7c:	7852      	ldrb	r2, [r2, #1]
 8016a7e:	9202      	str	r2, [sp, #8]
 8016a80:	9101      	str	r1, [sp, #4]
 8016a82:	9300      	str	r3, [sp, #0]
 8016a84:	4603      	mov	r3, r0
 8016a86:	22e2      	movs	r2, #226	; 0xe2
 8016a88:	499a      	ldr	r1, [pc, #616]	; (8016cf4 <_evtParsing+0x2e4>)
 8016a8a:	2004      	movs	r0, #4
 8016a8c:	f7fc fc8a 	bl	80133a4 <pifLog_Printf>
#endif
                break;
 8016a90:	e000      	b.n	8016a94 <_evtParsing+0x84>
        		break;
 8016a92:	bf00      	nop
        	}
        	break;
 8016a94:	e1fa      	b.n	8016e8c <_evtParsing+0x47c>

        case GUCI_NAV:
            switch (p_packet->msg_id) {
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	785b      	ldrb	r3, [r3, #1]
 8016a9a:	3b02      	subs	r3, #2
 8016a9c:	2b2e      	cmp	r3, #46	; 0x2e
 8016a9e:	f200 81cb 	bhi.w	8016e38 <_evtParsing+0x428>
 8016aa2:	a201      	add	r2, pc, #4	; (adr r2, 8016aa8 <_evtParsing+0x98>)
 8016aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016aa8:	08016b65 	.word	0x08016b65
 8016aac:	08016c89 	.word	0x08016c89
 8016ab0:	08016e39 	.word	0x08016e39
 8016ab4:	08016e39 	.word	0x08016e39
 8016ab8:	08016c45 	.word	0x08016c45
 8016abc:	08016bf9 	.word	0x08016bf9
 8016ac0:	08016e39 	.word	0x08016e39
 8016ac4:	08016e39 	.word	0x08016e39
 8016ac8:	08016e39 	.word	0x08016e39
 8016acc:	08016e39 	.word	0x08016e39
 8016ad0:	08016e39 	.word	0x08016e39
 8016ad4:	08016e39 	.word	0x08016e39
 8016ad8:	08016e39 	.word	0x08016e39
 8016adc:	08016e39 	.word	0x08016e39
 8016ae0:	08016e39 	.word	0x08016e39
 8016ae4:	08016e39 	.word	0x08016e39
 8016ae8:	08016e05 	.word	0x08016e05
 8016aec:	08016e39 	.word	0x08016e39
 8016af0:	08016e39 	.word	0x08016e39
 8016af4:	08016e39 	.word	0x08016e39
 8016af8:	08016e39 	.word	0x08016e39
 8016afc:	08016e39 	.word	0x08016e39
 8016b00:	08016e39 	.word	0x08016e39
 8016b04:	08016e39 	.word	0x08016e39
 8016b08:	08016e39 	.word	0x08016e39
 8016b0c:	08016e39 	.word	0x08016e39
 8016b10:	08016e39 	.word	0x08016e39
 8016b14:	08016e39 	.word	0x08016e39
 8016b18:	08016e39 	.word	0x08016e39
 8016b1c:	08016e39 	.word	0x08016e39
 8016b20:	08016e39 	.word	0x08016e39
 8016b24:	08016dad 	.word	0x08016dad
 8016b28:	08016e39 	.word	0x08016e39
 8016b2c:	08016e39 	.word	0x08016e39
 8016b30:	08016e39 	.word	0x08016e39
 8016b34:	08016e39 	.word	0x08016e39
 8016b38:	08016e39 	.word	0x08016e39
 8016b3c:	08016e39 	.word	0x08016e39
 8016b40:	08016e39 	.word	0x08016e39
 8016b44:	08016e39 	.word	0x08016e39
 8016b48:	08016e39 	.word	0x08016e39
 8016b4c:	08016e39 	.word	0x08016e39
 8016b50:	08016e39 	.word	0x08016e39
 8016b54:	08016e39 	.word	0x08016e39
 8016b58:	08016e39 	.word	0x08016e39
 8016b5c:	08016e39 	.word	0x08016e39
 8016b60:	08016cc3 	.word	0x08016cc3
                case GUMI_NAV_POSLLH:
                	p_parent->_coord_deg[PIF_GPS_LON] = p_packet->payload.posllh.lon / 10000000.0;
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	689b      	ldr	r3, [r3, #8]
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f7e9 fc8f 	bl	800048c <__aeabi_i2d>
 8016b6e:	a35e      	add	r3, pc, #376	; (adr r3, 8016ce8 <_evtParsing+0x2d8>)
 8016b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b74:	f7e9 fe1e 	bl	80007b4 <__aeabi_ddiv>
 8016b78:	4602      	mov	r2, r0
 8016b7a:	460b      	mov	r3, r1
 8016b7c:	68b9      	ldr	r1, [r7, #8]
 8016b7e:	e9c1 2308 	strd	r2, r3, [r1, #32]
                	p_parent->_coord_deg[PIF_GPS_LAT] = p_packet->payload.posllh.lat / 10000000.0;
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	68db      	ldr	r3, [r3, #12]
 8016b86:	4618      	mov	r0, r3
 8016b88:	f7e9 fc80 	bl	800048c <__aeabi_i2d>
 8016b8c:	a356      	add	r3, pc, #344	; (adr r3, 8016ce8 <_evtParsing+0x2d8>)
 8016b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b92:	f7e9 fe0f 	bl	80007b4 <__aeabi_ddiv>
 8016b96:	4602      	mov	r2, r0
 8016b98:	460b      	mov	r3, r1
 8016b9a:	68b9      	ldr	r1, [r7, #8]
 8016b9c:	e9c1 2306 	strd	r2, r3, [r1, #24]
                	p_parent->_altitude = p_packet->payload.posllh.h_msl / 1000.0;
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	695b      	ldr	r3, [r3, #20]
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	f7e9 fc71 	bl	800048c <__aeabi_i2d>
 8016baa:	f04f 0200 	mov.w	r2, #0
 8016bae:	4b52      	ldr	r3, [pc, #328]	; (8016cf8 <_evtParsing+0x2e8>)
 8016bb0:	f7e9 fe00 	bl	80007b4 <__aeabi_ddiv>
 8016bb4:	4602      	mov	r2, r0
 8016bb6:	460b      	mov	r3, r1
 8016bb8:	68b9      	ldr	r1, [r7, #8]
 8016bba:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                	p_parent->_horizontal_acc = p_packet->payload.posllh.h_acc;
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	699a      	ldr	r2, [r3, #24]
 8016bc2:	68bb      	ldr	r3, [r7, #8]
 8016bc4:	641a      	str	r2, [r3, #64]	; 0x40
                	p_parent->_vertical_acc = p_packet->payload.posllh.v_acc;
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	69da      	ldr	r2, [r3, #28]
 8016bca:	68bb      	ldr	r3, [r7, #8]
 8016bcc:	645a      	str	r2, [r3, #68]	; 0x44
                    p_parent->_fix = next_fix;
 8016bce:	4b4b      	ldr	r3, [pc, #300]	; (8016cfc <_evtParsing+0x2ec>)
 8016bd0:	781b      	ldrb	r3, [r3, #0]
 8016bd2:	f003 0301 	and.w	r3, r3, #1
 8016bd6:	b2d9      	uxtb	r1, r3
 8016bd8:	68ba      	ldr	r2, [r7, #8]
 8016bda:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016bde:	f361 0300 	bfi	r3, r1, #0, #1
 8016be2:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    // Update GPS update rate table.
                    p_parent->_update_rate[0] = p_parent->_update_rate[1];
 8016be6:	68bb      	ldr	r3, [r7, #8]
 8016be8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016bea:	68bb      	ldr	r3, [r7, #8]
 8016bec:	649a      	str	r2, [r3, #72]	; 0x48
                    p_parent->_update_rate[1] = pif_cumulative_timer1ms;
 8016bee:	4b44      	ldr	r3, [pc, #272]	; (8016d00 <_evtParsing+0x2f0>)
 8016bf0:	681a      	ldr	r2, [r3, #0]
 8016bf2:	68bb      	ldr	r3, [r7, #8]
 8016bf4:	64da      	str	r2, [r3, #76]	; 0x4c
                    break;
 8016bf6:	e137      	b.n	8016e68 <_evtParsing+0x458>

                case GUMI_NAV_PVT:
                	p_parent->_utc.year = 20 + p_packet->payload.pvt.year - 2000;
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	891b      	ldrh	r3, [r3, #8]
 8016bfc:	b2db      	uxtb	r3, r3
 8016bfe:	3344      	adds	r3, #68	; 0x44
 8016c00:	b2da      	uxtb	r2, r3
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	739a      	strb	r2, [r3, #14]
                	p_parent->_utc.month = p_packet->payload.pvt.month;
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	7a9a      	ldrb	r2, [r3, #10]
 8016c0a:	68bb      	ldr	r3, [r7, #8]
 8016c0c:	73da      	strb	r2, [r3, #15]
                	p_parent->_utc.day = p_packet->payload.pvt.day;
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	7ada      	ldrb	r2, [r3, #11]
 8016c12:	68bb      	ldr	r3, [r7, #8]
 8016c14:	741a      	strb	r2, [r3, #16]
                	p_parent->_utc.hour = p_packet->payload.pvt.hour;
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	7b1a      	ldrb	r2, [r3, #12]
 8016c1a:	68bb      	ldr	r3, [r7, #8]
 8016c1c:	745a      	strb	r2, [r3, #17]
                	p_parent->_utc.minute = p_packet->payload.pvt.min;
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	7b5a      	ldrb	r2, [r3, #13]
 8016c22:	68bb      	ldr	r3, [r7, #8]
 8016c24:	749a      	strb	r2, [r3, #18]
                	p_parent->_utc.second = p_packet->payload.pvt.sec;
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	7b9a      	ldrb	r2, [r3, #14]
 8016c2a:	68bb      	ldr	r3, [r7, #8]
 8016c2c:	74da      	strb	r2, [r3, #19]
                	p_parent->_utc.millisecond = p_packet->payload.pvt.nano / 1000000UL;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	695b      	ldr	r3, [r3, #20]
 8016c32:	461a      	mov	r2, r3
 8016c34:	4b33      	ldr	r3, [pc, #204]	; (8016d04 <_evtParsing+0x2f4>)
 8016c36:	fba3 2302 	umull	r2, r3, r3, r2
 8016c3a:	0c9b      	lsrs	r3, r3, #18
 8016c3c:	b29a      	uxth	r2, r3
 8016c3e:	68bb      	ldr	r3, [r7, #8]
 8016c40:	829a      	strh	r2, [r3, #20]
                    break;
 8016c42:	e111      	b.n	8016e68 <_evtParsing+0x458>

                case GUMI_NAV_SOL:
                    next_fix = (p_packet->payload.sol.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.sol.gps_fix == FIX_3D);
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	7bdb      	ldrb	r3, [r3, #15]
 8016c48:	f003 0301 	and.w	r3, r3, #1
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d005      	beq.n	8016c5c <_evtParsing+0x24c>
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	7b9b      	ldrb	r3, [r3, #14]
 8016c54:	2b03      	cmp	r3, #3
 8016c56:	d101      	bne.n	8016c5c <_evtParsing+0x24c>
 8016c58:	2301      	movs	r3, #1
 8016c5a:	e000      	b.n	8016c5e <_evtParsing+0x24e>
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	b2da      	uxtb	r2, r3
 8016c60:	4b26      	ldr	r3, [pc, #152]	; (8016cfc <_evtParsing+0x2ec>)
 8016c62:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016c64:	4b25      	ldr	r3, [pc, #148]	; (8016cfc <_evtParsing+0x2ec>)
 8016c66:	781b      	ldrb	r3, [r3, #0]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d106      	bne.n	8016c7a <_evtParsing+0x26a>
                    	p_parent->_fix = FALSE;
 8016c6c:	68ba      	ldr	r2, [r7, #8]
 8016c6e:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016c72:	f36f 0300 	bfc	r3, #0, #1
 8016c76:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    p_parent->_num_sat = p_packet->payload.sol.num_sv;
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8016c80:	68bb      	ldr	r3, [r7, #8]
 8016c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    break;
 8016c86:	e0ef      	b.n	8016e68 <_evtParsing+0x458>

                case GUMI_NAV_STATUS:
                    next_fix = (p_packet->payload.status.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.status.gps_fix == FIX_3D);
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	7a5b      	ldrb	r3, [r3, #9]
 8016c8c:	f003 0301 	and.w	r3, r3, #1
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d005      	beq.n	8016ca0 <_evtParsing+0x290>
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	7a1b      	ldrb	r3, [r3, #8]
 8016c98:	2b03      	cmp	r3, #3
 8016c9a:	d101      	bne.n	8016ca0 <_evtParsing+0x290>
 8016c9c:	2301      	movs	r3, #1
 8016c9e:	e000      	b.n	8016ca2 <_evtParsing+0x292>
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	b2da      	uxtb	r2, r3
 8016ca4:	4b15      	ldr	r3, [pc, #84]	; (8016cfc <_evtParsing+0x2ec>)
 8016ca6:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016ca8:	4b14      	ldr	r3, [pc, #80]	; (8016cfc <_evtParsing+0x2ec>)
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	f040 80d8 	bne.w	8016e62 <_evtParsing+0x452>
                    	p_parent->_fix = FALSE;
 8016cb2:	68ba      	ldr	r2, [r7, #8]
 8016cb4:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016cb8:	f36f 0300 	bfc	r3, #0, #1
 8016cbc:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    break;
 8016cc0:	e0cf      	b.n	8016e62 <_evtParsing+0x452>

                case GUMI_NAV_SVINFO:
                	p_owner->_num_ch = p_packet->payload.sv_info.num_ch;
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	7a1a      	ldrb	r2, [r3, #8]
 8016cc6:	693b      	ldr	r3, [r7, #16]
 8016cc8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
                    if (p_owner->_num_ch > 16)
 8016ccc:	693b      	ldr	r3, [r7, #16]
 8016cce:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8016cd2:	2b10      	cmp	r3, #16
 8016cd4:	d903      	bls.n	8016cde <_evtParsing+0x2ce>
                    	p_owner->_num_ch = 16;
 8016cd6:	693b      	ldr	r3, [r7, #16]
 8016cd8:	2210      	movs	r2, #16
 8016cda:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016cde:	2300      	movs	r3, #0
 8016ce0:	617b      	str	r3, [r7, #20]
 8016ce2:	e050      	b.n	8016d86 <_evtParsing+0x376>
 8016ce4:	f3af 8000 	nop.w
 8016ce8:	00000000 	.word	0x00000000
 8016cec:	416312d0 	.word	0x416312d0
 8016cf0:	2000012c 	.word	0x2000012c
 8016cf4:	080276e8 	.word	0x080276e8
 8016cf8:	408f4000 	.word	0x408f4000
 8016cfc:	20001dc6 	.word	0x20001dc6
 8016d00:	20001c24 	.word	0x20001c24
 8016d04:	431bde83 	.word	0x431bde83
                    	p_owner->_svinfo_chn[i] = p_packet->payload.sv_info.channel[i].chn;
 8016d08:	68f9      	ldr	r1, [r7, #12]
 8016d0a:	697a      	ldr	r2, [r7, #20]
 8016d0c:	4613      	mov	r3, r2
 8016d0e:	005b      	lsls	r3, r3, #1
 8016d10:	4413      	add	r3, r2
 8016d12:	009b      	lsls	r3, r3, #2
 8016d14:	440b      	add	r3, r1
 8016d16:	330c      	adds	r3, #12
 8016d18:	7819      	ldrb	r1, [r3, #0]
 8016d1a:	693a      	ldr	r2, [r7, #16]
 8016d1c:	697b      	ldr	r3, [r7, #20]
 8016d1e:	4413      	add	r3, r2
 8016d20:	33b9      	adds	r3, #185	; 0xb9
 8016d22:	460a      	mov	r2, r1
 8016d24:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_svid[i] = p_packet->payload.sv_info.channel[i].svid;
 8016d26:	68f9      	ldr	r1, [r7, #12]
 8016d28:	697a      	ldr	r2, [r7, #20]
 8016d2a:	4613      	mov	r3, r2
 8016d2c:	005b      	lsls	r3, r3, #1
 8016d2e:	4413      	add	r3, r2
 8016d30:	009b      	lsls	r3, r3, #2
 8016d32:	440b      	add	r3, r1
 8016d34:	330d      	adds	r3, #13
 8016d36:	7819      	ldrb	r1, [r3, #0]
 8016d38:	693a      	ldr	r2, [r7, #16]
 8016d3a:	697b      	ldr	r3, [r7, #20]
 8016d3c:	4413      	add	r3, r2
 8016d3e:	33c9      	adds	r3, #201	; 0xc9
 8016d40:	460a      	mov	r2, r1
 8016d42:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_quality[i] = p_packet->payload.sv_info.channel[i].quality;
 8016d44:	68f9      	ldr	r1, [r7, #12]
 8016d46:	697a      	ldr	r2, [r7, #20]
 8016d48:	4613      	mov	r3, r2
 8016d4a:	005b      	lsls	r3, r3, #1
 8016d4c:	4413      	add	r3, r2
 8016d4e:	009b      	lsls	r3, r3, #2
 8016d50:	440b      	add	r3, r1
 8016d52:	330f      	adds	r3, #15
 8016d54:	7819      	ldrb	r1, [r3, #0]
 8016d56:	693a      	ldr	r2, [r7, #16]
 8016d58:	697b      	ldr	r3, [r7, #20]
 8016d5a:	4413      	add	r3, r2
 8016d5c:	33d9      	adds	r3, #217	; 0xd9
 8016d5e:	460a      	mov	r2, r1
 8016d60:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_cno[i] = p_packet->payload.sv_info.channel[i].cno;
 8016d62:	68f9      	ldr	r1, [r7, #12]
 8016d64:	697a      	ldr	r2, [r7, #20]
 8016d66:	4613      	mov	r3, r2
 8016d68:	005b      	lsls	r3, r3, #1
 8016d6a:	4413      	add	r3, r2
 8016d6c:	009b      	lsls	r3, r3, #2
 8016d6e:	440b      	add	r3, r1
 8016d70:	3310      	adds	r3, #16
 8016d72:	7819      	ldrb	r1, [r3, #0]
 8016d74:	693a      	ldr	r2, [r7, #16]
 8016d76:	697b      	ldr	r3, [r7, #20]
 8016d78:	4413      	add	r3, r2
 8016d7a:	33e9      	adds	r3, #233	; 0xe9
 8016d7c:	460a      	mov	r2, r1
 8016d7e:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016d80:	697b      	ldr	r3, [r7, #20]
 8016d82:	3301      	adds	r3, #1
 8016d84:	617b      	str	r3, [r7, #20]
 8016d86:	693b      	ldr	r3, [r7, #16]
 8016d88:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8016d8c:	461a      	mov	r2, r3
 8016d8e:	697b      	ldr	r3, [r7, #20]
 8016d90:	4293      	cmp	r3, r2
 8016d92:	dbb9      	blt.n	8016d08 <_evtParsing+0x2f8>
                    }
                    // Update GPS SVIFO update rate table.
                    p_owner->_svinfo_rate[0] = p_owner->_svinfo_rate[1];
 8016d94:	693b      	ldr	r3, [r7, #16]
 8016d96:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8016d9a:	693b      	ldr	r3, [r7, #16]
 8016d9c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
                    p_owner->_svinfo_rate[1] = pif_cumulative_timer1ms;
 8016da0:	4b49      	ldr	r3, [pc, #292]	; (8016ec8 <_evtParsing+0x4b8>)
 8016da2:	681a      	ldr	r2, [r3, #0]
 8016da4:	693b      	ldr	r3, [r7, #16]
 8016da6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                    break;
 8016daa:	e05d      	b.n	8016e68 <_evtParsing+0x458>

                case GUMI_NAV_TIMEUTC:
                	if (p_packet->payload.time_utc.valid & 4) {
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	7ddb      	ldrb	r3, [r3, #23]
 8016db0:	f003 0304 	and.w	r3, r3, #4
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d056      	beq.n	8016e66 <_evtParsing+0x456>
						p_parent->_utc.year = p_packet->payload.time_utc.year - 2000;
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	8a1b      	ldrh	r3, [r3, #16]
 8016dbc:	b2db      	uxtb	r3, r3
 8016dbe:	3330      	adds	r3, #48	; 0x30
 8016dc0:	b2da      	uxtb	r2, r3
 8016dc2:	68bb      	ldr	r3, [r7, #8]
 8016dc4:	739a      	strb	r2, [r3, #14]
						p_parent->_utc.month = p_packet->payload.time_utc.month;
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	7c9a      	ldrb	r2, [r3, #18]
 8016dca:	68bb      	ldr	r3, [r7, #8]
 8016dcc:	73da      	strb	r2, [r3, #15]
						p_parent->_utc.day = p_packet->payload.time_utc.day;
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	7cda      	ldrb	r2, [r3, #19]
 8016dd2:	68bb      	ldr	r3, [r7, #8]
 8016dd4:	741a      	strb	r2, [r3, #16]
						p_parent->_utc.hour = p_packet->payload.time_utc.hour;
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	7d1a      	ldrb	r2, [r3, #20]
 8016dda:	68bb      	ldr	r3, [r7, #8]
 8016ddc:	745a      	strb	r2, [r3, #17]
						p_parent->_utc.minute = p_packet->payload.time_utc.min;
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	7d5a      	ldrb	r2, [r3, #21]
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	749a      	strb	r2, [r3, #18]
						p_parent->_utc.second = p_packet->payload.time_utc.sec;
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	7d9a      	ldrb	r2, [r3, #22]
 8016dea:	68bb      	ldr	r3, [r7, #8]
 8016dec:	74da      	strb	r2, [r3, #19]
						p_parent->_utc.millisecond = p_packet->payload.time_utc.nano / 1000000UL;
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	68db      	ldr	r3, [r3, #12]
 8016df2:	461a      	mov	r2, r3
 8016df4:	4b35      	ldr	r3, [pc, #212]	; (8016ecc <_evtParsing+0x4bc>)
 8016df6:	fba3 2302 	umull	r2, r3, r3, r2
 8016dfa:	0c9b      	lsrs	r3, r3, #18
 8016dfc:	b29a      	uxth	r2, r3
 8016dfe:	68bb      	ldr	r3, [r7, #8]
 8016e00:	829a      	strh	r2, [r3, #20]
                	}
                	break;
 8016e02:	e030      	b.n	8016e66 <_evtParsing+0x456>

                case GUMI_NAV_VELNED:
                	p_parent->_ground_speed = p_packet->payload.velned.speed;
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	695b      	ldr	r3, [r3, #20]
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f7e9 fb2f 	bl	800046c <__aeabi_ui2d>
 8016e0e:	4602      	mov	r2, r0
 8016e10:	460b      	mov	r3, r1
 8016e12:	68b9      	ldr	r1, [r7, #8]
 8016e14:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
                	p_parent->_ground_course = p_packet->payload.velned.heading / 100000.0;
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	69db      	ldr	r3, [r3, #28]
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	f7e9 fb35 	bl	800048c <__aeabi_i2d>
 8016e22:	a327      	add	r3, pc, #156	; (adr r3, 8016ec0 <_evtParsing+0x4b0>)
 8016e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e28:	f7e9 fcc4 	bl	80007b4 <__aeabi_ddiv>
 8016e2c:	4602      	mov	r2, r0
 8016e2e:	460b      	mov	r3, r1
 8016e30:	68b9      	ldr	r1, [r7, #8]
 8016e32:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
                    break;
 8016e36:	e017      	b.n	8016e68 <_evtParsing+0x458>

                default:
#ifndef __PIF_NO_LOG__
            		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 8016e38:	693b      	ldr	r3, [r7, #16]
 8016e3a:	8a9b      	ldrh	r3, [r3, #20]
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	4b24      	ldr	r3, [pc, #144]	; (8016ed0 <_evtParsing+0x4c0>)
 8016e40:	68db      	ldr	r3, [r3, #12]
 8016e42:	68fa      	ldr	r2, [r7, #12]
 8016e44:	7812      	ldrb	r2, [r2, #0]
 8016e46:	4611      	mov	r1, r2
 8016e48:	68fa      	ldr	r2, [r7, #12]
 8016e4a:	7852      	ldrb	r2, [r2, #1]
 8016e4c:	9202      	str	r2, [sp, #8]
 8016e4e:	9101      	str	r1, [sp, #4]
 8016e50:	9300      	str	r3, [sp, #0]
 8016e52:	4603      	mov	r3, r0
 8016e54:	f240 122f 	movw	r2, #303	; 0x12f
 8016e58:	491e      	ldr	r1, [pc, #120]	; (8016ed4 <_evtParsing+0x4c4>)
 8016e5a:	2004      	movs	r0, #4
 8016e5c:	f7fc faa2 	bl	80133a4 <pifLog_Printf>
#endif
                    break;
 8016e60:	e002      	b.n	8016e68 <_evtParsing+0x458>
                    break;
 8016e62:	bf00      	nop
 8016e64:	e012      	b.n	8016e8c <_evtParsing+0x47c>
                	break;
 8016e66:	bf00      	nop
            }
        	break;
 8016e68:	e010      	b.n	8016e8c <_evtParsing+0x47c>

		default:
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id);
 8016e6a:	693b      	ldr	r3, [r7, #16]
 8016e6c:	8a9b      	ldrh	r3, [r3, #20]
 8016e6e:	4619      	mov	r1, r3
 8016e70:	4b17      	ldr	r3, [pc, #92]	; (8016ed0 <_evtParsing+0x4c0>)
 8016e72:	68db      	ldr	r3, [r3, #12]
 8016e74:	68fa      	ldr	r2, [r7, #12]
 8016e76:	7812      	ldrb	r2, [r2, #0]
 8016e78:	9201      	str	r2, [sp, #4]
 8016e7a:	9300      	str	r3, [sp, #0]
 8016e7c:	460b      	mov	r3, r1
 8016e7e:	f240 1237 	movw	r2, #311	; 0x137
 8016e82:	4915      	ldr	r1, [pc, #84]	; (8016ed8 <_evtParsing+0x4c8>)
 8016e84:	2004      	movs	r0, #4
 8016e86:	f7fc fa8d 	bl	80133a4 <pifLog_Printf>
#endif
			break;
 8016e8a:	bf00      	nop
        }

		if (p_owner->evt_ubx_receive) {
 8016e8c:	693b      	ldr	r3, [r7, #16]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d00c      	beq.n	8016eae <_evtParsing+0x49e>
			if ((*p_owner->evt_ubx_receive)(p_owner, p_packet)) pifGps_SendEvent(&p_owner->_gps);
 8016e94:	693b      	ldr	r3, [r7, #16]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	68f9      	ldr	r1, [r7, #12]
 8016e9a:	6938      	ldr	r0, [r7, #16]
 8016e9c:	4798      	blx	r3
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d004      	beq.n	8016eae <_evtParsing+0x49e>
 8016ea4:	693b      	ldr	r3, [r7, #16]
 8016ea6:	3308      	adds	r3, #8
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f7fe fe8d 	bl	8015bc8 <pifGps_SendEvent>
		}

    	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8016eae:	693b      	ldr	r3, [r7, #16]
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8016eb6:	e000      	b.n	8016eba <_evtParsing+0x4aa>
    if (!p_owner->_gps.evt_receive) return;
 8016eb8:	bf00      	nop
    }
}
 8016eba:	3718      	adds	r7, #24
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	bd80      	pop	{r7, pc}
 8016ec0:	00000000 	.word	0x00000000
 8016ec4:	40f86a00 	.word	0x40f86a00
 8016ec8:	20001c24 	.word	0x20001c24
 8016ecc:	431bde83 	.word	0x431bde83
 8016ed0:	2000012c 	.word	0x2000012c
 8016ed4:	080276e8 	.word	0x080276e8
 8016ed8:	08027704 	.word	0x08027704

08016edc <_makeNmeaPacket>:

static BOOL _makeNmeaPacket(PifGpsUblox* p_owner, char* p_data, BOOL blocking)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b088      	sub	sp, #32
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	60f8      	str	r0, [r7, #12]
 8016ee4:	60b9      	str	r1, [r7, #8]
 8016ee6:	4613      	mov	r3, r2
 8016ee8:	71fb      	strb	r3, [r7, #7]
	uint8_t header[4];
	uint8_t parity = 0;
 8016eea:	2300      	movs	r3, #0
 8016eec:	77fb      	strb	r3, [r7, #31]
	int i;

	i = 1;
 8016eee:	2301      	movs	r3, #1
 8016ef0:	61bb      	str	r3, [r7, #24]
	while (TRUE) {
		if (p_data[i] == '*') {
 8016ef2:	69bb      	ldr	r3, [r7, #24]
 8016ef4:	68ba      	ldr	r2, [r7, #8]
 8016ef6:	4413      	add	r3, r2
 8016ef8:	781b      	ldrb	r3, [r3, #0]
 8016efa:	2b2a      	cmp	r3, #42	; 0x2a
 8016efc:	d13a      	bne.n	8016f74 <_makeNmeaPacket+0x98>
			i++;
 8016efe:	69bb      	ldr	r3, [r7, #24]
 8016f00:	3301      	adds	r3, #1
 8016f02:	61bb      	str	r3, [r7, #24]
			break;
 8016f04:	bf00      	nop
		else {
			parity ^= p_data[i];
			i++;
		}
	}
	p_data[i] = kPifHexUpperChar[(parity >> 4) & 0x0F]; i++;
 8016f06:	4b4b      	ldr	r3, [pc, #300]	; (8017034 <_makeNmeaPacket+0x158>)
 8016f08:	681a      	ldr	r2, [r3, #0]
 8016f0a:	7ffb      	ldrb	r3, [r7, #31]
 8016f0c:	091b      	lsrs	r3, r3, #4
 8016f0e:	b2db      	uxtb	r3, r3
 8016f10:	f003 030f 	and.w	r3, r3, #15
 8016f14:	441a      	add	r2, r3
 8016f16:	69bb      	ldr	r3, [r7, #24]
 8016f18:	68b9      	ldr	r1, [r7, #8]
 8016f1a:	440b      	add	r3, r1
 8016f1c:	7812      	ldrb	r2, [r2, #0]
 8016f1e:	701a      	strb	r2, [r3, #0]
 8016f20:	69bb      	ldr	r3, [r7, #24]
 8016f22:	3301      	adds	r3, #1
 8016f24:	61bb      	str	r3, [r7, #24]
	p_data[i] = kPifHexUpperChar[parity & 0x0F]; i++;
 8016f26:	4b43      	ldr	r3, [pc, #268]	; (8017034 <_makeNmeaPacket+0x158>)
 8016f28:	681a      	ldr	r2, [r3, #0]
 8016f2a:	7ffb      	ldrb	r3, [r7, #31]
 8016f2c:	f003 030f 	and.w	r3, r3, #15
 8016f30:	441a      	add	r2, r3
 8016f32:	69bb      	ldr	r3, [r7, #24]
 8016f34:	68b9      	ldr	r1, [r7, #8]
 8016f36:	440b      	add	r3, r1
 8016f38:	7812      	ldrb	r2, [r2, #0]
 8016f3a:	701a      	strb	r2, [r3, #0]
 8016f3c:	69bb      	ldr	r3, [r7, #24]
 8016f3e:	3301      	adds	r3, #1
 8016f40:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\r'; i++;
 8016f42:	69bb      	ldr	r3, [r7, #24]
 8016f44:	68ba      	ldr	r2, [r7, #8]
 8016f46:	4413      	add	r3, r2
 8016f48:	220d      	movs	r2, #13
 8016f4a:	701a      	strb	r2, [r3, #0]
 8016f4c:	69bb      	ldr	r3, [r7, #24]
 8016f4e:	3301      	adds	r3, #1
 8016f50:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\n'; i++;
 8016f52:	69bb      	ldr	r3, [r7, #24]
 8016f54:	68ba      	ldr	r2, [r7, #8]
 8016f56:	4413      	add	r3, r2
 8016f58:	220a      	movs	r2, #10
 8016f5a:	701a      	strb	r2, [r3, #0]
 8016f5c:	69bb      	ldr	r3, [r7, #24]
 8016f5e:	3301      	adds	r3, #1
 8016f60:	61bb      	str	r3, [r7, #24]
	p_data[i] = 0;
 8016f62:	69bb      	ldr	r3, [r7, #24]
 8016f64:	68ba      	ldr	r2, [r7, #8]
 8016f66:	4413      	add	r3, r2
 8016f68:	2200      	movs	r2, #0
 8016f6a:	701a      	strb	r2, [r3, #0]

	if (blocking) {
 8016f6c:	79fb      	ldrb	r3, [r7, #7]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d01b      	beq.n	8016faa <_makeNmeaPacket+0xce>
 8016f72:	e00f      	b.n	8016f94 <_makeNmeaPacket+0xb8>
			parity ^= p_data[i];
 8016f74:	69bb      	ldr	r3, [r7, #24]
 8016f76:	68ba      	ldr	r2, [r7, #8]
 8016f78:	4413      	add	r3, r2
 8016f7a:	781a      	ldrb	r2, [r3, #0]
 8016f7c:	7ffb      	ldrb	r3, [r7, #31]
 8016f7e:	4053      	eors	r3, r2
 8016f80:	77fb      	strb	r3, [r7, #31]
			i++;
 8016f82:	69bb      	ldr	r3, [r7, #24]
 8016f84:	3301      	adds	r3, #1
 8016f86:	61bb      	str	r3, [r7, #24]
		if (p_data[i] == '*') {
 8016f88:	e7b3      	b.n	8016ef2 <_makeNmeaPacket+0x16>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
			if (!pifTaskManager_Yield()) break;
 8016f8a:	f7fd fced 	bl	8014968 <pifTaskManager_Yield>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d009      	beq.n	8016fa8 <_makeNmeaPacket+0xcc>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f7fc fc43 	bl	8013826 <pifRingBuffer_IsEmpty>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d0f1      	beq.n	8016f8a <_makeNmeaPacket+0xae>
 8016fa6:	e000      	b.n	8016faa <_makeNmeaPacket+0xce>
			if (!pifTaskManager_Yield()) break;
 8016fa8:	bf00      	nop
		}
	}

	pifRingBuffer_BeginPutting(&p_owner->__tx.buffer);
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f7fc fcba 	bl	801392a <pifRingBuffer_BeginPutting>

	header[0] = i;
 8016fb6:	69bb      	ldr	r3, [r7, #24]
 8016fb8:	b2db      	uxtb	r3, r3
 8016fba:	753b      	strb	r3, [r7, #20]
	header[1] = 0;
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	757b      	strb	r3, [r7, #21]
	header[2] = 0;
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	75bb      	strb	r3, [r7, #22]
	header[3] = 0;
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	75fb      	strb	r3, [r7, #23]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8016fce:	f107 0114 	add.w	r1, r7, #20
 8016fd2:	2204      	movs	r2, #4
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	f7fc fd2f 	bl	8013a38 <pifRingBuffer_PutData>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d01a      	beq.n	8017016 <_makeNmeaPacket+0x13a>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8016fe6:	7d3a      	ldrb	r2, [r7, #20]
 8016fe8:	b292      	uxth	r2, r2
 8016fea:	68b9      	ldr	r1, [r7, #8]
 8016fec:	4618      	mov	r0, r3
 8016fee:	f7fc fd23 	bl	8013a38 <pifRingBuffer_PutData>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d010      	beq.n	801701a <_makeNmeaPacket+0x13e>

	pifRingBuffer_CommitPutting(&p_owner->__tx.buffer);
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8016ffe:	4618      	mov	r0, r3
 8017000:	f7fc fcab 	bl	801395a <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801700a:	69db      	ldr	r3, [r3, #28]
 801700c:	4618      	mov	r0, r3
 801700e:	f7fd fa63 	bl	80144d8 <pifTask_SetTrigger>
	return TRUE;
 8017012:	2301      	movs	r3, #1
 8017014:	e009      	b.n	801702a <_makeNmeaPacket+0x14e>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8017016:	bf00      	nop
 8017018:	e000      	b.n	801701c <_makeNmeaPacket+0x140>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 801701a:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.buffer);
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017022:	4618      	mov	r0, r3
 8017024:	f7fc fca7 	bl	8013976 <pifRingBuffer_RollbackPutting>
	return FALSE;
 8017028:	2300      	movs	r3, #0
}
 801702a:	4618      	mov	r0, r3
 801702c:	3720      	adds	r7, #32
 801702e:	46bd      	mov	sp, r7
 8017030:	bd80      	pop	{r7, pc}
 8017032:	bf00      	nop
 8017034:	20000120 	.word	0x20000120

08017038 <_makeUbxPacket>:

static BOOL _makeUbxPacket(PifGpsUblox* p_owner, uint8_t* p_header, uint16_t length, uint8_t* p_payload, BOOL blocking)
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b088      	sub	sp, #32
 801703c:	af00      	add	r7, sp, #0
 801703e:	60f8      	str	r0, [r7, #12]
 8017040:	60b9      	str	r1, [r7, #8]
 8017042:	603b      	str	r3, [r7, #0]
 8017044:	4613      	mov	r3, r2
 8017046:	80fb      	strh	r3, [r7, #6]
	uint8_t info[4];
	uint8_t tailer[2];
	uint16_t checksum;

	checksum = _checksumUbx(p_header + 2, p_payload, length);
 8017048:	68bb      	ldr	r3, [r7, #8]
 801704a:	3302      	adds	r3, #2
 801704c:	88fa      	ldrh	r2, [r7, #6]
 801704e:	6839      	ldr	r1, [r7, #0]
 8017050:	4618      	mov	r0, r3
 8017052:	f7ff fb59 	bl	8016708 <_checksumUbx>
 8017056:	4603      	mov	r3, r0
 8017058:	83fb      	strh	r3, [r7, #30]
	tailer[0] = checksum & 0xFF;
 801705a:	8bfb      	ldrh	r3, [r7, #30]
 801705c:	b2db      	uxtb	r3, r3
 801705e:	753b      	strb	r3, [r7, #20]
	tailer[1] = checksum >> 8;
 8017060:	8bfb      	ldrh	r3, [r7, #30]
 8017062:	0a1b      	lsrs	r3, r3, #8
 8017064:	b29b      	uxth	r3, r3
 8017066:	b2db      	uxtb	r3, r3
 8017068:	757b      	strb	r3, [r7, #21]

	if (blocking) {
 801706a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801706e:	2b00      	cmp	r3, #0
 8017070:	d010      	beq.n	8017094 <_makeUbxPacket+0x5c>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8017072:	e004      	b.n	801707e <_makeUbxPacket+0x46>
			if (!pifTaskManager_Yield()) break;
 8017074:	f7fd fc78 	bl	8014968 <pifTaskManager_Yield>
 8017078:	4603      	mov	r3, r0
 801707a:	2b00      	cmp	r3, #0
 801707c:	d009      	beq.n	8017092 <_makeUbxPacket+0x5a>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017084:	4618      	mov	r0, r3
 8017086:	f7fc fbce 	bl	8013826 <pifRingBuffer_IsEmpty>
 801708a:	4603      	mov	r3, r0
 801708c:	2b00      	cmp	r3, #0
 801708e:	d0f1      	beq.n	8017074 <_makeUbxPacket+0x3c>
 8017090:	e000      	b.n	8017094 <_makeUbxPacket+0x5c>
			if (!pifTaskManager_Yield()) break;
 8017092:	bf00      	nop
		}
	}

	pifRingBuffer_BeginPutting(&p_owner->__tx.buffer);
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801709a:	4618      	mov	r0, r3
 801709c:	f7fc fc45 	bl	801392a <pifRingBuffer_BeginPutting>

	info[0] = length + 8;
 80170a0:	88fb      	ldrh	r3, [r7, #6]
 80170a2:	b2db      	uxtb	r3, r3
 80170a4:	3308      	adds	r3, #8
 80170a6:	b2db      	uxtb	r3, r3
 80170a8:	763b      	strb	r3, [r7, #24]
	info[1] = 0;
 80170aa:	2300      	movs	r3, #0
 80170ac:	767b      	strb	r3, [r7, #25]
	info[2] = 0;
 80170ae:	2300      	movs	r3, #0
 80170b0:	76bb      	strb	r3, [r7, #26]
	info[3] = 0;
 80170b2:	2300      	movs	r3, #0
 80170b4:	76fb      	strb	r3, [r7, #27]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80170bc:	f107 0118 	add.w	r1, r7, #24
 80170c0:	2204      	movs	r2, #4
 80170c2:	4618      	mov	r0, r3
 80170c4:	f7fc fcb8 	bl	8013a38 <pifRingBuffer_PutData>
 80170c8:	4603      	mov	r3, r0
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d033      	beq.n	8017136 <_makeUbxPacket+0xfe>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80170d4:	2206      	movs	r2, #6
 80170d6:	68b9      	ldr	r1, [r7, #8]
 80170d8:	4618      	mov	r0, r3
 80170da:	f7fc fcad 	bl	8013a38 <pifRingBuffer_PutData>
 80170de:	4603      	mov	r3, r0
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d02a      	beq.n	801713a <_makeUbxPacket+0x102>
	if (length > 0) {
 80170e4:	88fb      	ldrh	r3, [r7, #6]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d00a      	beq.n	8017100 <_makeUbxPacket+0xc8>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80170f0:	88fa      	ldrh	r2, [r7, #6]
 80170f2:	6839      	ldr	r1, [r7, #0]
 80170f4:	4618      	mov	r0, r3
 80170f6:	f7fc fc9f 	bl	8013a38 <pifRingBuffer_PutData>
 80170fa:	4603      	mov	r3, r0
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d01e      	beq.n	801713e <_makeUbxPacket+0x106>
	}
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017106:	f107 0114 	add.w	r1, r7, #20
 801710a:	2202      	movs	r2, #2
 801710c:	4618      	mov	r0, r3
 801710e:	f7fc fc93 	bl	8013a38 <pifRingBuffer_PutData>
 8017112:	4603      	mov	r3, r0
 8017114:	2b00      	cmp	r3, #0
 8017116:	d014      	beq.n	8017142 <_makeUbxPacket+0x10a>

	pifRingBuffer_CommitPutting(&p_owner->__tx.buffer);
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801711e:	4618      	mov	r0, r3
 8017120:	f7fc fc1b 	bl	801395a <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801712a:	69db      	ldr	r3, [r3, #28]
 801712c:	4618      	mov	r0, r3
 801712e:	f7fd f9d3 	bl	80144d8 <pifTask_SetTrigger>
	return TRUE;
 8017132:	2301      	movs	r3, #1
 8017134:	e00d      	b.n	8017152 <_makeUbxPacket+0x11a>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 8017136:	bf00      	nop
 8017138:	e004      	b.n	8017144 <_makeUbxPacket+0x10c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 801713a:	bf00      	nop
 801713c:	e002      	b.n	8017144 <_makeUbxPacket+0x10c>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 801713e:	bf00      	nop
 8017140:	e000      	b.n	8017144 <_makeUbxPacket+0x10c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 8017142:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.buffer);
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801714a:	4618      	mov	r0, r3
 801714c:	f7fc fc13 	bl	8013976 <pifRingBuffer_RollbackPutting>
	return FALSE;
 8017150:	2300      	movs	r3, #0
}
 8017152:	4618      	mov	r0, r3
 8017154:	3720      	adds	r7, #32
 8017156:	46bd      	mov	sp, r7
 8017158:	bd80      	pop	{r7, pc}

0801715a <_evtSending>:

BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 801715a:	b5b0      	push	{r4, r5, r7, lr}
 801715c:	b084      	sub	sp, #16
 801715e:	af00      	add	r7, sp, #0
 8017160:	6078      	str	r0, [r7, #4]
 8017162:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	switch (p_owner->__tx.state) {
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 801716e:	2b02      	cmp	r3, #2
 8017170:	d05d      	beq.n	801722e <_evtSending+0xd4>
 8017172:	2b02      	cmp	r3, #2
 8017174:	dc72      	bgt.n	801725c <_evtSending+0x102>
 8017176:	2b00      	cmp	r3, #0
 8017178:	d002      	beq.n	8017180 <_evtSending+0x26>
 801717a:	2b01      	cmp	r3, #1
 801717c:	d01c      	beq.n	80171b8 <_evtSending+0x5e>
			p_owner->__tx.state = GUTS_IDLE;
		}
		break;

	default:
		break;
 801717e:	e06d      	b.n	801725c <_evtSending+0x102>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017186:	4618      	mov	r0, r3
 8017188:	f7fc fb4d 	bl	8013826 <pifRingBuffer_IsEmpty>
 801718c:	4603      	mov	r3, r0
 801718e:	2b00      	cmp	r3, #0
 8017190:	d166      	bne.n	8017260 <_evtSending+0x106>
			pifRingBuffer_CopyToArray(p_owner->__tx.ui.info, 4, &p_owner->__tx.buffer, 0);
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	f203 20ba 	addw	r0, r3, #698	; 0x2ba
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 801719e:	2300      	movs	r3, #0
 80171a0:	2104      	movs	r1, #4
 80171a2:	f7fc fd0c 	bl	8013bbe <pifRingBuffer_CopyToArray>
			p_owner->__tx.pos = 4;
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	2204      	movs	r2, #4
 80171aa:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
			p_owner->__tx.state = GUTS_SENDING;
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	2201      	movs	r2, #1
 80171b2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
		break;
 80171b6:	e053      	b.n	8017260 <_evtSending+0x106>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
 80171ca:	b29b      	uxth	r3, r3
 80171cc:	4619      	mov	r1, r3
 80171ce:	4610      	mov	r0, r2
 80171d0:	f7fc fafd 	bl	80137ce <pifRingBuffer_GetTailPointer>
 80171d4:	4605      	mov	r5, r0
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	f503 7227 	add.w	r2, r3, #668	; 0x29c
				pifRingBuffer_GetLinerSize(&p_owner->__tx.buffer, p_owner->__tx.pos));
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 80171e2:	b29b      	uxth	r3, r3
 80171e4:	4619      	mov	r1, r3
 80171e6:	4610      	mov	r0, r2
 80171e8:	f7fc fb52 	bl	8013890 <pifRingBuffer_GetLinerSize>
 80171ec:	4603      	mov	r3, r0
 80171ee:	461a      	mov	r2, r3
 80171f0:	683b      	ldr	r3, [r7, #0]
 80171f2:	4629      	mov	r1, r5
 80171f4:	4620      	mov	r0, r4
 80171f6:	4798      	blx	r3
 80171f8:	4603      	mov	r3, r0
 80171fa:	817b      	strh	r3, [r7, #10]
		p_owner->__tx.pos += length;
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	f893 22be 	ldrb.w	r2, [r3, #702]	; 0x2be
 8017202:	897b      	ldrh	r3, [r7, #10]
 8017204:	b2db      	uxtb	r3, r3
 8017206:	4413      	add	r3, r2
 8017208:	b2da      	uxtb	r2, r3
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
		if (p_owner->__tx.pos >= 4 + p_owner->__tx.ui.st.length) {
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8017216:	3303      	adds	r3, #3
 8017218:	68fa      	ldr	r2, [r7, #12]
 801721a:	f892 22be 	ldrb.w	r2, [r2, #702]	; 0x2be
 801721e:	4293      	cmp	r3, r2
 8017220:	da03      	bge.n	801722a <_evtSending+0xd0>
			p_owner->__tx.state = GUTS_WAIT_SENDED;
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	2202      	movs	r2, #2
 8017226:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
		return TRUE;
 801722a:	2301      	movs	r3, #1
 801722c:	e01c      	b.n	8017268 <_evtSending+0x10e>
		if (!p_owner->__tx.ui.st.response) {
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8017234:	2b00      	cmp	r3, #0
 8017236:	d115      	bne.n	8017264 <_evtSending+0x10a>
			pifRingBuffer_Remove(&p_owner->__tx.buffer, 4 + p_owner->__tx.ui.st.length);
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8017244:	b29b      	uxth	r3, r3
 8017246:	3304      	adds	r3, #4
 8017248:	b29b      	uxth	r3, r3
 801724a:	4619      	mov	r1, r3
 801724c:	4610      	mov	r0, r2
 801724e:	f7fc fcfc 	bl	8013c4a <pifRingBuffer_Remove>
			p_owner->__tx.state = GUTS_IDLE;
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	2200      	movs	r2, #0
 8017256:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
		break;
 801725a:	e003      	b.n	8017264 <_evtSending+0x10a>
		break;
 801725c:	bf00      	nop
 801725e:	e002      	b.n	8017266 <_evtSending+0x10c>
		break;
 8017260:	bf00      	nop
 8017262:	e000      	b.n	8017266 <_evtSending+0x10c>
		break;
 8017264:	bf00      	nop
	}
	return FALSE;
 8017266:	2300      	movs	r3, #0
}
 8017268:	4618      	mov	r0, r3
 801726a:	3710      	adds	r7, #16
 801726c:	46bd      	mov	sp, r7
 801726e:	bdb0      	pop	{r4, r5, r7, pc}

08017270 <pifGpsUblox_Init>:

BOOL pifGpsUblox_Init(PifGpsUblox* p_owner, PifId id)
{
 8017270:	b580      	push	{r7, lr}
 8017272:	b084      	sub	sp, #16
 8017274:	af02      	add	r7, sp, #8
 8017276:	6078      	str	r0, [r7, #4]
 8017278:	460b      	mov	r3, r1
 801727a:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d103      	bne.n	801728a <pifGpsUblox_Init+0x1a>
		pif_error = E_INVALID_PARAM;
 8017282:	4b1e      	ldr	r3, [pc, #120]	; (80172fc <pifGpsUblox_Init+0x8c>)
 8017284:	2201      	movs	r2, #1
 8017286:	701a      	strb	r2, [r3, #0]
		goto fail;
 8017288:	e026      	b.n	80172d8 <pifGpsUblox_Init+0x68>
	}

	memset(p_owner, 0, sizeof(PifGpsUblox));
 801728a:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 801728e:	2100      	movs	r1, #0
 8017290:	6878      	ldr	r0, [r7, #4]
 8017292:	f00b fc01 	bl	8022a98 <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	3308      	adds	r3, #8
 801729a:	887a      	ldrh	r2, [r7, #2]
 801729c:	4611      	mov	r1, r2
 801729e:	4618      	mov	r0, r3
 80172a0:	f7fe fc20 	bl	8015ae4 <pifGps_Init>
 80172a4:	4603      	mov	r3, r0
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d013      	beq.n	80172d2 <pifGpsUblox_Init+0x62>

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80172b0:	2240      	movs	r2, #64	; 0x40
 80172b2:	2100      	movs	r1, #0
 80172b4:	4618      	mov	r0, r3
 80172b6:	f7fc fa17 	bl	80136e8 <pifRingBuffer_InitHeap>
 80172ba:	4603      	mov	r3, r0
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d00a      	beq.n	80172d6 <pifGpsUblox_Init+0x66>
    pifRingBuffer_SetName(&p_owner->__tx.buffer, "TxB");
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80172c6:	490e      	ldr	r1, [pc, #56]	; (8017300 <pifGpsUblox_Init+0x90>)
 80172c8:	4618      	mov	r0, r3
 80172ca:	f7fc fa72 	bl	80137b2 <pifRingBuffer_SetName>
    return TRUE;
 80172ce:	2301      	movs	r3, #1
 80172d0:	e010      	b.n	80172f4 <pifGpsUblox_Init+0x84>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 80172d2:	bf00      	nop
 80172d4:	e000      	b.n	80172d8 <pifGpsUblox_Init+0x68>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 80172d6:	bf00      	nop

fail:
	pifGpsUblox_Clear(p_owner);
 80172d8:	6878      	ldr	r0, [r7, #4]
 80172da:	f000 f815 	bl	8017308 <pifGpsUblox_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 80172de:	887b      	ldrh	r3, [r7, #2]
 80172e0:	4a06      	ldr	r2, [pc, #24]	; (80172fc <pifGpsUblox_Init+0x8c>)
 80172e2:	7812      	ldrb	r2, [r2, #0]
 80172e4:	9200      	str	r2, [sp, #0]
 80172e6:	f240 12d1 	movw	r2, #465	; 0x1d1
 80172ea:	4906      	ldr	r1, [pc, #24]	; (8017304 <pifGpsUblox_Init+0x94>)
 80172ec:	2004      	movs	r0, #4
 80172ee:	f7fc f859 	bl	80133a4 <pifLog_Printf>
#endif
    return FALSE;
 80172f2:	2300      	movs	r3, #0
}
 80172f4:	4618      	mov	r0, r3
 80172f6:	3708      	adds	r7, #8
 80172f8:	46bd      	mov	sp, r7
 80172fa:	bd80      	pop	{r7, pc}
 80172fc:	20001c0d 	.word	0x20001c0d
 8017300:	08027718 	.word	0x08027718
 8017304:	0802771c 	.word	0x0802771c

08017308 <pifGpsUblox_Clear>:

void pifGpsUblox_Clear(PifGpsUblox* p_owner)
{
 8017308:	b580      	push	{r7, lr}
 801730a:	b082      	sub	sp, #8
 801730c:	af00      	add	r7, sp, #0
 801730e:	6078      	str	r0, [r7, #4]
	pifRingBuffer_Clear(&p_owner->__tx.buffer);
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8017316:	4618      	mov	r0, r3
 8017318:	f7fc fa30 	bl	801377c <pifRingBuffer_Clear>
}
 801731c:	bf00      	nop
 801731e:	3708      	adds	r7, #8
 8017320:	46bd      	mov	sp, r7
 8017322:	bd80      	pop	{r7, pc}

08017324 <pifGpsUblox_AttachComm>:

void pifGpsUblox_AttachComm(PifGpsUblox* p_owner, PifComm *p_comm)
{
 8017324:	b580      	push	{r7, lr}
 8017326:	b082      	sub	sp, #8
 8017328:	af00      	add	r7, sp, #0
 801732a:	6078      	str	r0, [r7, #4]
 801732c:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	683a      	ldr	r2, [r7, #0]
 8017332:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 8017336:	4b05      	ldr	r3, [pc, #20]	; (801734c <pifGpsUblox_AttachComm+0x28>)
 8017338:	4a05      	ldr	r2, [pc, #20]	; (8017350 <pifGpsUblox_AttachComm+0x2c>)
 801733a:	6879      	ldr	r1, [r7, #4]
 801733c:	6838      	ldr	r0, [r7, #0]
 801733e:	f7fa fcc9 	bl	8011cd4 <pifComm_AttachClient>
}
 8017342:	bf00      	nop
 8017344:	3708      	adds	r7, #8
 8017346:	46bd      	mov	sp, r7
 8017348:	bd80      	pop	{r7, pc}
 801734a:	bf00      	nop
 801734c:	0801715b 	.word	0x0801715b
 8017350:	08016a11 	.word	0x08016a11

08017354 <pifGpsUblox_SetPubxConfig>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SetPubxConfig(PifGpsUblox* p_owner, uint8_t port_id, uint16_t in_proto, uint16_t out_proto, uint32_t baudrate, BOOL blocking)
{
 8017354:	b590      	push	{r4, r7, lr}
 8017356:	b091      	sub	sp, #68	; 0x44
 8017358:	af02      	add	r7, sp, #8
 801735a:	60f8      	str	r0, [r7, #12]
 801735c:	4608      	mov	r0, r1
 801735e:	4611      	mov	r1, r2
 8017360:	461a      	mov	r2, r3
 8017362:	4603      	mov	r3, r0
 8017364:	72fb      	strb	r3, [r7, #11]
 8017366:	460b      	mov	r3, r1
 8017368:	813b      	strh	r3, [r7, #8]
 801736a:	4613      	mov	r3, r2
 801736c:	80fb      	strh	r3, [r7, #6]
	char data[40];

	if (p_owner->__tx.state != GUTS_IDLE) {
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8017374:	2b00      	cmp	r3, #0
 8017376:	d004      	beq.n	8017382 <pifGpsUblox_SetPubxConfig+0x2e>
		pif_error = E_INVALID_STATE;
 8017378:	4b0f      	ldr	r3, [pc, #60]	; (80173b8 <pifGpsUblox_SetPubxConfig+0x64>)
 801737a:	2202      	movs	r2, #2
 801737c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801737e:	2300      	movs	r3, #0
 8017380:	e015      	b.n	80173ae <pifGpsUblox_SetPubxConfig+0x5a>
	}

	pif_Printf(data, "$PUBX,41,%u,%4X,%4X,%lu,0*", port_id, in_proto, out_proto, baudrate);
 8017382:	7af9      	ldrb	r1, [r7, #11]
 8017384:	893c      	ldrh	r4, [r7, #8]
 8017386:	88fb      	ldrh	r3, [r7, #6]
 8017388:	f107 0010 	add.w	r0, r7, #16
 801738c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801738e:	9201      	str	r2, [sp, #4]
 8017390:	9300      	str	r3, [sp, #0]
 8017392:	4623      	mov	r3, r4
 8017394:	460a      	mov	r2, r1
 8017396:	4909      	ldr	r1, [pc, #36]	; (80173bc <pifGpsUblox_SetPubxConfig+0x68>)
 8017398:	f7fa fada 	bl	8011950 <pif_Printf>

	return _makeNmeaPacket(p_owner, data, blocking);
 801739c:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80173a0:	f107 0310 	add.w	r3, r7, #16
 80173a4:	4619      	mov	r1, r3
 80173a6:	68f8      	ldr	r0, [r7, #12]
 80173a8:	f7ff fd98 	bl	8016edc <_makeNmeaPacket>
 80173ac:	4603      	mov	r3, r0
}
 80173ae:	4618      	mov	r0, r3
 80173b0:	373c      	adds	r7, #60	; 0x3c
 80173b2:	46bd      	mov	sp, r7
 80173b4:	bd90      	pop	{r4, r7, pc}
 80173b6:	bf00      	nop
 80173b8:	20001c0d 	.word	0x20001c0d
 80173bc:	08027770 	.word	0x08027770

080173c0 <pifGpsUblox_SendUbxMsg>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SendUbxMsg(PifGpsUblox* p_owner, uint8_t class_id, uint8_t msg_id, uint16_t length, uint8_t* payload, BOOL blocking)
{
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b086      	sub	sp, #24
 80173c4:	af02      	add	r7, sp, #8
 80173c6:	6078      	str	r0, [r7, #4]
 80173c8:	4608      	mov	r0, r1
 80173ca:	4611      	mov	r1, r2
 80173cc:	461a      	mov	r2, r3
 80173ce:	4603      	mov	r3, r0
 80173d0:	70fb      	strb	r3, [r7, #3]
 80173d2:	460b      	mov	r3, r1
 80173d4:	70bb      	strb	r3, [r7, #2]
 80173d6:	4613      	mov	r3, r2
 80173d8:	803b      	strh	r3, [r7, #0]
	uint8_t header[6] = { 0xB5, 0x62 };
 80173da:	f246 23b5 	movw	r3, #25269	; 0x62b5
 80173de:	60bb      	str	r3, [r7, #8]
 80173e0:	2300      	movs	r3, #0
 80173e2:	81bb      	strh	r3, [r7, #12]

	if (p_owner->__tx.state != GUTS_IDLE) {
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d004      	beq.n	80173f8 <pifGpsUblox_SendUbxMsg+0x38>
		pif_error = E_INVALID_STATE;
 80173ee:	4b0f      	ldr	r3, [pc, #60]	; (801742c <pifGpsUblox_SendUbxMsg+0x6c>)
 80173f0:	2202      	movs	r2, #2
 80173f2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80173f4:	2300      	movs	r3, #0
 80173f6:	e015      	b.n	8017424 <pifGpsUblox_SendUbxMsg+0x64>
	}

	header[2] = class_id;
 80173f8:	78fb      	ldrb	r3, [r7, #3]
 80173fa:	72bb      	strb	r3, [r7, #10]
	header[3] = msg_id;
 80173fc:	78bb      	ldrb	r3, [r7, #2]
 80173fe:	72fb      	strb	r3, [r7, #11]
	header[4] = length & 0xFF;
 8017400:	883b      	ldrh	r3, [r7, #0]
 8017402:	b2db      	uxtb	r3, r3
 8017404:	733b      	strb	r3, [r7, #12]
	header[5] = length >> 8;
 8017406:	883b      	ldrh	r3, [r7, #0]
 8017408:	0a1b      	lsrs	r3, r3, #8
 801740a:	b29b      	uxth	r3, r3
 801740c:	b2db      	uxtb	r3, r3
 801740e:	737b      	strb	r3, [r7, #13]

	return _makeUbxPacket(p_owner, header, length, payload, blocking);
 8017410:	883a      	ldrh	r2, [r7, #0]
 8017412:	f107 0108 	add.w	r1, r7, #8
 8017416:	7f3b      	ldrb	r3, [r7, #28]
 8017418:	9300      	str	r3, [sp, #0]
 801741a:	69bb      	ldr	r3, [r7, #24]
 801741c:	6878      	ldr	r0, [r7, #4]
 801741e:	f7ff fe0b 	bl	8017038 <_makeUbxPacket>
 8017422:	4603      	mov	r3, r0
}
 8017424:	4618      	mov	r0, r3
 8017426:	3710      	adds	r7, #16
 8017428:	46bd      	mov	sp, r7
 801742a:	bd80      	pop	{r7, pc}
 801742c:	20001c0d 	.word	0x20001c0d

08017430 <_evtTimerRxTimeout>:

#if PIF_MSP_RECEIVE_TIMEOUT


static void _evtTimerRxTimeout(PifIssuerP p_issuer)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b086      	sub	sp, #24
 8017434:	af02      	add	r7, sp, #8
 8017436:	6078      	str	r0, [r7, #4]
	if (!p_issuer) {
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d103      	bne.n	8017446 <_evtTimerRxTimeout+0x16>
		pif_error = E_INVALID_PARAM;
 801743e:	4b0e      	ldr	r3, [pc, #56]	; (8017478 <_evtTimerRxTimeout+0x48>)
 8017440:	2201      	movs	r2, #1
 8017442:	701a      	strb	r2, [r3, #0]
		return;
 8017444:	e014      	b.n	8017470 <_evtTimerRxTimeout+0x40>
	}

	PifMsp* p_owner = (PifMsp *)p_issuer;
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	60fb      	str	r3, [r7, #12]

#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	881b      	ldrh	r3, [r3, #0]
 801744e:	4619      	mov	r1, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	7a1b      	ldrb	r3, [r3, #8]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 8017454:	461a      	mov	r2, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	7d5b      	ldrb	r3, [r3, #21]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 801745a:	9301      	str	r3, [sp, #4]
 801745c:	9200      	str	r2, [sp, #0]
 801745e:	460b      	mov	r3, r1
 8017460:	2216      	movs	r2, #22
 8017462:	4906      	ldr	r1, [pc, #24]	; (801747c <_evtTimerRxTimeout+0x4c>)
 8017464:	2004      	movs	r0, #4
 8017466:	f7fb ff9d 	bl	80133a4 <pifLog_Printf>
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1],
			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4], p_owner->__rx.p_packet[5],
			p_owner->__rx.p_packet[6], p_owner->__rx.p_packet[7]);
#endif
#endif
	p_owner->__rx.state = MRS_IDLE;
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	2200      	movs	r2, #0
 801746e:	721a      	strb	r2, [r3, #8]
}
 8017470:	3710      	adds	r7, #16
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}
 8017476:	bf00      	nop
 8017478:	20001c0d 	.word	0x20001c0d
 801747c:	080277ac 	.word	0x080277ac

08017480 <_parsingPacket>:
};

#endif

static void _parsingPacket(PifMsp *p_owner, PifActCommReceiveData act_receive_data)
{
 8017480:	b590      	push	{r4, r7, lr}
 8017482:	b08b      	sub	sp, #44	; 0x2c
 8017484:	af04      	add	r7, sp, #16
 8017486:	6078      	str	r0, [r7, #4]
 8017488:	6039      	str	r1, [r7, #0]
	PifMspPacket* p_packet = &p_owner->__rx.packet;
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	3314      	adds	r3, #20
 801748e:	60fb      	str	r3, [r7, #12]
#ifndef __PIF_NO_LOG__
	int line;
#endif
	static uint8_t pre_error = PKT_ERR_NONE;

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017490:	e0b1      	b.n	80175f6 <_parsingPacket+0x176>
		switch (p_owner->__rx.state) {
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	7a1b      	ldrb	r3, [r3, #8]
 8017496:	2b05      	cmp	r3, #5
 8017498:	f200 80ac 	bhi.w	80175f4 <_parsingPacket+0x174>
 801749c:	a201      	add	r2, pc, #4	; (adr r2, 80174a4 <_parsingPacket+0x24>)
 801749e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174a2:	bf00      	nop
 80174a4:	080174bd 	.word	0x080174bd
 80174a8:	08017503 	.word	0x08017503
 80174ac:	0801751b 	.word	0x0801751b
 80174b0:	08017533 	.word	0x08017533
 80174b4:	0801755f 	.word	0x0801755f
 80174b8:	08017587 	.word	0x08017587
		case MRS_IDLE:
			if (data == '$') {
 80174bc:	7afb      	ldrb	r3, [r7, #11]
 80174be:	2b24      	cmp	r3, #36	; 0x24
 80174c0:	d109      	bne.n	80174d6 <_parsingPacket+0x56>
				p_owner->__rx.state = MRS_HEADER_CHAR_1;
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	2201      	movs	r2, #1
 80174c6:	721a      	strb	r2, [r3, #8]
#if PIF_MSP_RECEIVE_TIMEOUT
				pifTimer_Start(p_owner->__rx.p_timer, PIF_MSP_RECEIVE_TIMEOUT);
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	6a1b      	ldr	r3, [r3, #32]
 80174cc:	21c8      	movs	r1, #200	; 0xc8
 80174ce:	4618      	mov	r0, r3
 80174d0:	f7fd fd44 	bl	8014f5c <pifTimer_Start>
 80174d4:	e08f      	b.n	80175f6 <_parsingPacket+0x176>
#endif
			}
			else if (pre_error == PKT_ERR_NONE && p_owner->__evt_other_packet) {
 80174d6:	4b65      	ldr	r3, [pc, #404]	; (801766c <_parsingPacket+0x1ec>)
 80174d8:	781b      	ldrb	r3, [r3, #0]
 80174da:	2b03      	cmp	r3, #3
 80174dc:	d10b      	bne.n	80174f6 <_parsingPacket+0x76>
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d007      	beq.n	80174f6 <_parsingPacket+0x76>
				(*p_owner->__evt_other_packet)(p_owner, data, p_owner->__p_issuer);
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80174ea:	7af9      	ldrb	r1, [r7, #11]
 80174ec:	687a      	ldr	r2, [r7, #4]
 80174ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80174f0:	6878      	ldr	r0, [r7, #4]
 80174f2:	4798      	blx	r3
 80174f4:	e004      	b.n	8017500 <_parsingPacket+0x80>
			}
			else {
				pkt_err = PKT_ERR_INVALID_DATA;
 80174f6:	2301      	movs	r3, #1
 80174f8:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
 80174fa:	234b      	movs	r3, #75	; 0x4b
 80174fc:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 80174fe:	e089      	b.n	8017614 <_parsingPacket+0x194>
			}
			break;
 8017500:	e079      	b.n	80175f6 <_parsingPacket+0x176>

		case MRS_HEADER_CHAR_1:
			if (data == 'M') {
 8017502:	7afb      	ldrb	r3, [r7, #11]
 8017504:	2b4d      	cmp	r3, #77	; 0x4d
 8017506:	d103      	bne.n	8017510 <_parsingPacket+0x90>
				p_owner->__rx.state = MRS_HEADER_CHAR_2;
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	2202      	movs	r2, #2
 801750c:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 801750e:	e072      	b.n	80175f6 <_parsingPacket+0x176>
				pkt_err = PKT_ERR_INVALID_DATA;
 8017510:	2301      	movs	r3, #1
 8017512:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8017514:	2358      	movs	r3, #88	; 0x58
 8017516:	613b      	str	r3, [r7, #16]
				goto fail;
 8017518:	e07c      	b.n	8017614 <_parsingPacket+0x194>

		case MRS_HEADER_CHAR_2:
			if (data == '<') {
 801751a:	7afb      	ldrb	r3, [r7, #11]
 801751c:	2b3c      	cmp	r3, #60	; 0x3c
 801751e:	d103      	bne.n	8017528 <_parsingPacket+0xa8>
				p_owner->__rx.state = MRS_DIRECTION;
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	2203      	movs	r2, #3
 8017524:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8017526:	e066      	b.n	80175f6 <_parsingPacket+0x176>
				pkt_err = PKT_ERR_INVALID_DATA;
 8017528:	2301      	movs	r3, #1
 801752a:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 801752c:	2365      	movs	r3, #101	; 0x65
 801752e:	613b      	str	r3, [r7, #16]
				goto fail;
 8017530:	e070      	b.n	8017614 <_parsingPacket+0x194>

		case MRS_DIRECTION:
			if (data < PIF_MSP_RX_PACKET_SIZE - 3) {
 8017532:	7afb      	ldrb	r3, [r7, #11]
 8017534:	2b7c      	cmp	r3, #124	; 0x7c
 8017536:	d80d      	bhi.n	8017554 <_parsingPacket+0xd4>
				p_packet->data_count = data;
 8017538:	7afa      	ldrb	r2, [r7, #11]
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	705a      	strb	r2, [r3, #1]
				p_owner->__rx.p_packet[0] = data;
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	68db      	ldr	r3, [r3, #12]
 8017542:	7afa      	ldrb	r2, [r7, #11]
 8017544:	701a      	strb	r2, [r3, #0]
				p_owner->__rx.packet_count = 1;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	2201      	movs	r2, #1
 801754a:	741a      	strb	r2, [r3, #16]
				p_owner->__rx.state = MRS_LENGTH;
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	2204      	movs	r2, #4
 8017550:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8017552:	e050      	b.n	80175f6 <_parsingPacket+0x176>
				pkt_err = PKT_ERR_BIG_LENGHT;
 8017554:	2300      	movs	r3, #0
 8017556:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8017558:	2375      	movs	r3, #117	; 0x75
 801755a:	613b      	str	r3, [r7, #16]
				goto fail;
 801755c:	e05a      	b.n	8017614 <_parsingPacket+0x194>

		case MRS_LENGTH:
			p_packet->command = data;
 801755e:	7afa      	ldrb	r2, [r7, #11]
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	68db      	ldr	r3, [r3, #12]
 8017568:	687a      	ldr	r2, [r7, #4]
 801756a:	7c12      	ldrb	r2, [r2, #16]
 801756c:	4413      	add	r3, r2
 801756e:	7afa      	ldrb	r2, [r7, #11]
 8017570:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	7c1b      	ldrb	r3, [r3, #16]
 8017576:	3301      	adds	r3, #1
 8017578:	b2da      	uxtb	r2, r3
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	741a      	strb	r2, [r3, #16]
			p_owner->__rx.state = MRS_MESSAGE_TYPE;
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	2205      	movs	r2, #5
 8017582:	721a      	strb	r2, [r3, #8]
			break;
 8017584:	e037      	b.n	80175f6 <_parsingPacket+0x176>

		case MRS_MESSAGE_TYPE:
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	68db      	ldr	r3, [r3, #12]
 801758a:	687a      	ldr	r2, [r7, #4]
 801758c:	7c12      	ldrb	r2, [r2, #16]
 801758e:	4413      	add	r3, r2
 8017590:	7afa      	ldrb	r2, [r7, #11]
 8017592:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	7c1b      	ldrb	r3, [r3, #16]
 8017598:	3301      	adds	r3, #1
 801759a:	b2da      	uxtb	r2, r3
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	741a      	strb	r2, [r3, #16]
			if (p_owner->__rx.packet_count >= 3 + p_packet->data_count) {
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	785b      	ldrb	r3, [r3, #1]
 80175a4:	3302      	adds	r3, #2
 80175a6:	687a      	ldr	r2, [r7, #4]
 80175a8:	7c12      	ldrb	r2, [r2, #16]
 80175aa:	4293      	cmp	r3, r2
 80175ac:	da23      	bge.n	80175f6 <_parsingPacket+0x176>
				if (data == pifCheckXor(p_owner->__rx.p_packet, 2 + p_packet->data_count)) {
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	68da      	ldr	r2, [r3, #12]
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	785b      	ldrb	r3, [r3, #1]
 80175b6:	b29b      	uxth	r3, r3
 80175b8:	3302      	adds	r3, #2
 80175ba:	b29b      	uxth	r3, r3
 80175bc:	4619      	mov	r1, r3
 80175be:	4610      	mov	r0, r2
 80175c0:	f7fa fa2f 	bl	8011a22 <pifCheckXor>
 80175c4:	4603      	mov	r3, r0
 80175c6:	461a      	mov	r2, r3
 80175c8:	7afb      	ldrb	r3, [r7, #11]
 80175ca:	429a      	cmp	r2, r3
 80175cc:	d10d      	bne.n	80175ea <_parsingPacket+0x16a>
#if PIF_MSP_RECEIVE_TIMEOUT
					pifTimer_Stop(p_owner->__rx.p_timer);
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	6a1b      	ldr	r3, [r3, #32]
 80175d2:	4618      	mov	r0, r3
 80175d4:	f7fd fcf0 	bl	8014fb8 <pifTimer_Stop>
#endif
					p_packet->p_data = p_owner->__rx.p_packet + 2;
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	68db      	ldr	r3, [r3, #12]
 80175dc:	1c9a      	adds	r2, r3, #2
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	605a      	str	r2, [r3, #4]
					p_owner->__rx.state = MRS_DONE;
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	2206      	movs	r2, #6
 80175e6:	721a      	strb	r2, [r3, #8]
					return;
 80175e8:	e03c      	b.n	8017664 <_parsingPacket+0x1e4>
				}
				else {
					pkt_err = PKT_ERR_WRONG_CRC;
 80175ea:	2302      	movs	r3, #2
 80175ec:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
					line = __LINE__;
 80175ee:	2391      	movs	r3, #145	; 0x91
 80175f0:	613b      	str	r3, [r7, #16]
#endif
					goto fail;
 80175f2:	e00f      	b.n	8017614 <_parsingPacket+0x194>
				}
			}
			break;

		default:
			break;
 80175f4:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	685a      	ldr	r2, [r3, #4]
 80175fa:	f107 010b 	add.w	r1, r7, #11
 80175fe:	683b      	ldr	r3, [r7, #0]
 8017600:	4610      	mov	r0, r2
 8017602:	4798      	blx	r3
 8017604:	4603      	mov	r3, r0
 8017606:	2b00      	cmp	r3, #0
 8017608:	f47f af43 	bne.w	8017492 <_parsingPacket+0x12>
		}
	}
	pre_error = PKT_ERR_NONE;
 801760c:	4b17      	ldr	r3, [pc, #92]	; (801766c <_parsingPacket+0x1ec>)
 801760e:	2203      	movs	r2, #3
 8017610:	701a      	strb	r2, [r3, #0]
	return;
 8017612:	e027      	b.n	8017664 <_parsingPacket+0x1e4>

fail:
	if (pkt_err != pre_error) {
 8017614:	4b15      	ldr	r3, [pc, #84]	; (801766c <_parsingPacket+0x1ec>)
 8017616:	781b      	ldrb	r3, [r3, #0]
 8017618:	7dfa      	ldrb	r2, [r7, #23]
 801761a:	429a      	cmp	r2, r3
 801761c:	d01a      	beq.n	8017654 <_parsingPacket+0x1d4>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	881b      	ldrh	r3, [r3, #0]
 8017622:	461c      	mov	r4, r3
 8017624:	7dfb      	ldrb	r3, [r7, #23]
 8017626:	4a12      	ldr	r2, [pc, #72]	; (8017670 <_parsingPacket+0x1f0>)
 8017628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801762c:	7afa      	ldrb	r2, [r7, #11]
 801762e:	4611      	mov	r1, r2
				p_owner->__rx.state, p_packet->data_count);
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	7a12      	ldrb	r2, [r2, #8]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 8017634:	4610      	mov	r0, r2
				p_owner->__rx.state, p_packet->data_count);
 8017636:	68fa      	ldr	r2, [r7, #12]
 8017638:	7852      	ldrb	r2, [r2, #1]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 801763a:	9203      	str	r2, [sp, #12]
 801763c:	9002      	str	r0, [sp, #8]
 801763e:	9101      	str	r1, [sp, #4]
 8017640:	9300      	str	r3, [sp, #0]
 8017642:	4623      	mov	r3, r4
 8017644:	693a      	ldr	r2, [r7, #16]
 8017646:	490b      	ldr	r1, [pc, #44]	; (8017674 <_parsingPacket+0x1f4>)
 8017648:	2004      	movs	r0, #4
 801764a:	f7fb feab 	bl	80133a4 <pifLog_Printf>
#endif
		pre_error = pkt_err;
 801764e:	4a07      	ldr	r2, [pc, #28]	; (801766c <_parsingPacket+0x1ec>)
 8017650:	7dfb      	ldrb	r3, [r7, #23]
 8017652:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1], p_owner->__rx.p_packet[2],
			p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif

#if PIF_MSP_RECEIVE_TIMEOUT
   	pifTimer_Stop(p_owner->__rx.p_timer);
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	6a1b      	ldr	r3, [r3, #32]
 8017658:	4618      	mov	r0, r3
 801765a:	f7fd fcad 	bl	8014fb8 <pifTimer_Stop>
#endif
	p_owner->__rx.state = MRS_IDLE;
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	2200      	movs	r2, #0
 8017662:	721a      	strb	r2, [r3, #8]
}
 8017664:	371c      	adds	r7, #28
 8017666:	46bd      	mov	sp, r7
 8017668:	bd90      	pop	{r4, r7, pc}
 801766a:	bf00      	nop
 801766c:	2000014c 	.word	0x2000014c
 8017670:	20000140 	.word	0x20000140
 8017674:	08027808 	.word	0x08027808

08017678 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b084      	sub	sp, #16
 801767c:	af00      	add	r7, sp, #0
 801767e:	6078      	str	r0, [r7, #4]
 8017680:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	60fb      	str	r3, [r7, #12]

    if (p_owner->__rx.state < MRS_DONE) {
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	7a1b      	ldrb	r3, [r3, #8]
 801768a:	2b05      	cmp	r3, #5
 801768c:	d803      	bhi.n	8017696 <_evtParsing+0x1e>
    	_parsingPacket(p_owner, act_receive_data);
 801768e:	6839      	ldr	r1, [r7, #0]
 8017690:	68f8      	ldr	r0, [r7, #12]
 8017692:	f7ff fef5 	bl	8017480 <_parsingPacket>
    }

    if (p_owner->__rx.state == MRS_DONE) {
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	7a1b      	ldrb	r3, [r3, #8]
 801769a:	2b06      	cmp	r3, #6
 801769c:	d119      	bne.n	80176d2 <_evtParsing+0x5a>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x", p_owner->_id, p_owner->__rx.p_packet[0],	p_owner->__rx.p_packet[1],
    			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif
#endif

		p_owner->__rx.packet.p_pointer = p_owner->__rx.packet.p_data;
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	699a      	ldr	r2, [r3, #24]
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	61da      	str	r2, [r3, #28]
    	if (p_owner->__evt_receive) (*p_owner->__evt_receive)(p_owner, &p_owner->__rx.packet, p_owner->__p_issuer);
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d008      	beq.n	80176c0 <_evtParsing+0x48>
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176b2:	68fa      	ldr	r2, [r7, #12]
 80176b4:	f102 0114 	add.w	r1, r2, #20
 80176b8:	68fa      	ldr	r2, [r7, #12]
 80176ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80176bc:	68f8      	ldr	r0, [r7, #12]
 80176be:	4798      	blx	r3
    	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	685b      	ldr	r3, [r3, #4]
 80176c4:	69db      	ldr	r3, [r3, #28]
 80176c6:	4618      	mov	r0, r3
 80176c8:	f7fc ff06 	bl	80144d8 <pifTask_SetTrigger>
    	p_owner->__rx.state = MRS_IDLE;
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	2200      	movs	r2, #0
 80176d0:	721a      	strb	r2, [r3, #8]
    }
}
 80176d2:	bf00      	nop
 80176d4:	3710      	adds	r7, #16
 80176d6:	46bd      	mov	sp, r7
 80176d8:	bd80      	pop	{r7, pc}

080176da <_evtSending>:

static BOOL _evtSending(void *p_client, PifActCommSendData act_send_data)
{
 80176da:	b5b0      	push	{r4, r5, r7, lr}
 80176dc:	b084      	sub	sp, #16
 80176de:	af00      	add	r7, sp, #0
 80176e0:	6078      	str	r0, [r7, #4]
 80176e2:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (p_owner->__rx.state != MRS_IDLE) return FALSE;
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	7a1b      	ldrb	r3, [r3, #8]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d001      	beq.n	80176f4 <_evtSending+0x1a>
 80176f0:	2300      	movs	r3, #0
 80176f2:	e06f      	b.n	80177d4 <_evtSending+0xfa>

	switch (p_owner->__tx.state) {
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d002      	beq.n	8017704 <_evtSending+0x2a>
 80176fe:	2b01      	cmp	r3, #1
 8017700:	d021      	beq.n	8017746 <_evtSending+0x6c>
			p_owner->__tx.state = MTS_IDLE;
		}
		return TRUE;

	default:
		break;
 8017702:	e066      	b.n	80177d2 <_evtSending+0xf8>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.answer_buffer)) {
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	3324      	adds	r3, #36	; 0x24
 8017708:	4618      	mov	r0, r3
 801770a:	f7fc f88c 	bl	8013826 <pifRingBuffer_IsEmpty>
 801770e:	4603      	mov	r3, r0
 8017710:	2b00      	cmp	r3, #0
 8017712:	d15d      	bne.n	80177d0 <_evtSending+0xf6>
			p_owner->__tx.length = pifRingBuffer_GetFillSize(&p_owner->__tx.answer_buffer);
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	3324      	adds	r3, #36	; 0x24
 8017718:	4618      	mov	r0, r3
 801771a:	f7fc f897 	bl	801384c <pifRingBuffer_GetFillSize>
 801771e:	4603      	mov	r3, r0
 8017720:	461a      	mov	r2, r3
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			p_owner->__tx.pos = 0;
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	2200      	movs	r2, #0
 801772c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			p_owner->__tx.state = MTS_SENDING;
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	2201      	movs	r2, #1
 8017734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	685b      	ldr	r3, [r3, #4]
 801773c:	69db      	ldr	r3, [r3, #28]
 801773e:	4618      	mov	r0, r3
 8017740:	f7fc feca 	bl	80144d8 <pifTask_SetTrigger>
		break;
 8017744:	e044      	b.n	80177d0 <_evtSending+0xf6>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.answer_buffer, p_owner->__tx.pos),
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	685c      	ldr	r4, [r3, #4]
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8017756:	4619      	mov	r1, r3
 8017758:	4610      	mov	r0, r2
 801775a:	f7fc f838 	bl	80137ce <pifRingBuffer_GetTailPointer>
 801775e:	4605      	mov	r5, r0
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801776c:	4619      	mov	r1, r3
 801776e:	4610      	mov	r0, r2
 8017770:	f7fc f88e 	bl	8013890 <pifRingBuffer_GetLinerSize>
 8017774:	4603      	mov	r3, r0
 8017776:	461a      	mov	r2, r3
 8017778:	683b      	ldr	r3, [r7, #0]
 801777a:	4629      	mov	r1, r5
 801777c:	4620      	mov	r0, r4
 801777e:	4798      	blx	r3
 8017780:	4603      	mov	r3, r0
 8017782:	817b      	strh	r3, [r7, #10]
		if (!length) return FALSE;
 8017784:	897b      	ldrh	r3, [r7, #10]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d101      	bne.n	801778e <_evtSending+0xb4>
 801778a:	2300      	movs	r3, #0
 801778c:	e022      	b.n	80177d4 <_evtSending+0xfa>
		p_owner->__tx.pos += length;
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8017794:	897b      	ldrh	r3, [r7, #10]
 8017796:	4413      	add	r3, r2
 8017798:	b29a      	uxth	r2, r3
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (p_owner->__tx.pos >= p_owner->__tx.length) {
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80177ac:	429a      	cmp	r2, r3
 80177ae:	d30d      	bcc.n	80177cc <_evtSending+0xf2>
			pifRingBuffer_Remove(&p_owner->__tx.answer_buffer, p_owner->__tx.pos);
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80177bc:	4619      	mov	r1, r3
 80177be:	4610      	mov	r0, r2
 80177c0:	f7fc fa43 	bl	8013c4a <pifRingBuffer_Remove>
			p_owner->__tx.state = MTS_IDLE;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	2200      	movs	r2, #0
 80177c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return TRUE;
 80177cc:	2301      	movs	r3, #1
 80177ce:	e001      	b.n	80177d4 <_evtSending+0xfa>
		break;
 80177d0:	bf00      	nop
	}
	return FALSE;
 80177d2:	2300      	movs	r3, #0
}
 80177d4:	4618      	mov	r0, r3
 80177d6:	3710      	adds	r7, #16
 80177d8:	46bd      	mov	sp, r7
 80177da:	bdb0      	pop	{r4, r5, r7, pc}

080177dc <pifMsp_Init>:

BOOL pifMsp_Init(PifMsp* p_owner, PifTimerManager* p_timer, PifId id)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b086      	sub	sp, #24
 80177e0:	af02      	add	r7, sp, #8
 80177e2:	60f8      	str	r0, [r7, #12]
 80177e4:	60b9      	str	r1, [r7, #8]
 80177e6:	4613      	mov	r3, r2
 80177e8:	80fb      	strh	r3, [r7, #6]
    if (!p_timer) {
 80177ea:	68bb      	ldr	r3, [r7, #8]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d103      	bne.n	80177f8 <pifMsp_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80177f0:	4b2c      	ldr	r3, [pc, #176]	; (80178a4 <pifMsp_Init+0xc8>)
 80177f2:	2201      	movs	r2, #1
 80177f4:	701a      	strb	r2, [r3, #0]
		goto fail;
 80177f6:	e042      	b.n	801787e <pifMsp_Init+0xa2>
	}

	memset(p_owner, 0, sizeof(PifMsp));
 80177f8:	2258      	movs	r2, #88	; 0x58
 80177fa:	2100      	movs	r1, #0
 80177fc:	68f8      	ldr	r0, [r7, #12]
 80177fe:	f00b f94b 	bl	8022a98 <memset>

    p_owner->__rx.p_packet = calloc(sizeof(uint8_t), PIF_MSP_RX_PACKET_SIZE);
 8017802:	2180      	movs	r1, #128	; 0x80
 8017804:	2001      	movs	r0, #1
 8017806:	f00b f8f7 	bl	80229f8 <calloc>
 801780a:	4603      	mov	r3, r0
 801780c:	461a      	mov	r2, r3
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	60da      	str	r2, [r3, #12]
    if (!p_owner->__rx.p_packet) {
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	68db      	ldr	r3, [r3, #12]
 8017816:	2b00      	cmp	r3, #0
 8017818:	d103      	bne.n	8017822 <pifMsp_Init+0x46>
        pif_error = E_OUT_OF_HEAP;
 801781a:	4b22      	ldr	r3, [pc, #136]	; (80178a4 <pifMsp_Init+0xc8>)
 801781c:	2203      	movs	r2, #3
 801781e:	701a      	strb	r2, [r3, #0]
        goto fail;
 8017820:	e02d      	b.n	801787e <pifMsp_Init+0xa2>
    }

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	3324      	adds	r3, #36	; 0x24
 8017826:	2280      	movs	r2, #128	; 0x80
 8017828:	2100      	movs	r1, #0
 801782a:	4618      	mov	r0, r3
 801782c:	f7fb ff5c 	bl	80136e8 <pifRingBuffer_InitHeap>
 8017830:	4603      	mov	r3, r0
 8017832:	2b00      	cmp	r3, #0
 8017834:	d020      	beq.n	8017878 <pifMsp_Init+0x9c>

#if PIF_MSP_RECEIVE_TIMEOUT
    p_owner->__rx.p_timer = pifTimerManager_Add(p_timer, TT_ONCE);
 8017836:	2100      	movs	r1, #0
 8017838:	68b8      	ldr	r0, [r7, #8]
 801783a:	f7fd fb57 	bl	8014eec <pifTimerManager_Add>
 801783e:	4602      	mov	r2, r0
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	621a      	str	r2, [r3, #32]
    if (!p_owner->__rx.p_timer) goto fail;
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	6a1b      	ldr	r3, [r3, #32]
 8017848:	2b00      	cmp	r3, #0
 801784a:	d017      	beq.n	801787c <pifMsp_Init+0xa0>
    pifTimer_AttachEvtFinish(p_owner->__rx.p_timer, _evtTimerRxTimeout, p_owner);
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	6a1b      	ldr	r3, [r3, #32]
 8017850:	68fa      	ldr	r2, [r7, #12]
 8017852:	4915      	ldr	r1, [pc, #84]	; (80178a8 <pifMsp_Init+0xcc>)
 8017854:	4618      	mov	r0, r3
 8017856:	f7fd fc76 	bl	8015146 <pifTimer_AttachEvtFinish>
#endif

    if (id == PIF_ID_AUTO) id = pif_id++;
 801785a:	88fb      	ldrh	r3, [r7, #6]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d106      	bne.n	801786e <pifMsp_Init+0x92>
 8017860:	4b12      	ldr	r3, [pc, #72]	; (80178ac <pifMsp_Init+0xd0>)
 8017862:	881b      	ldrh	r3, [r3, #0]
 8017864:	1c5a      	adds	r2, r3, #1
 8017866:	b291      	uxth	r1, r2
 8017868:	4a10      	ldr	r2, [pc, #64]	; (80178ac <pifMsp_Init+0xd0>)
 801786a:	8011      	strh	r1, [r2, #0]
 801786c:	80fb      	strh	r3, [r7, #6]
    p_owner->_id = id;
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	88fa      	ldrh	r2, [r7, #6]
 8017872:	801a      	strh	r2, [r3, #0]
    return TRUE;
 8017874:	2301      	movs	r3, #1
 8017876:	e010      	b.n	801789a <pifMsp_Init+0xbe>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 8017878:	bf00      	nop
 801787a:	e000      	b.n	801787e <pifMsp_Init+0xa2>
    if (!p_owner->__rx.p_timer) goto fail;
 801787c:	bf00      	nop

fail:
	pifMsp_Clear(p_owner);
 801787e:	68f8      	ldr	r0, [r7, #12]
 8017880:	f000 f818 	bl	80178b4 <pifMsp_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 8017884:	88fb      	ldrh	r3, [r7, #6]
 8017886:	4a07      	ldr	r2, [pc, #28]	; (80178a4 <pifMsp_Init+0xc8>)
 8017888:	7812      	ldrb	r2, [r2, #0]
 801788a:	9200      	str	r2, [sp, #0]
 801788c:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8017890:	4907      	ldr	r1, [pc, #28]	; (80178b0 <pifMsp_Init+0xd4>)
 8017892:	2004      	movs	r0, #4
 8017894:	f7fb fd86 	bl	80133a4 <pifLog_Printf>
#endif
    return FALSE;
 8017898:	2300      	movs	r3, #0
}
 801789a:	4618      	mov	r0, r3
 801789c:	3710      	adds	r7, #16
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}
 80178a2:	bf00      	nop
 80178a4:	20001c0d 	.word	0x20001c0d
 80178a8:	08017431 	.word	0x08017431
 80178ac:	2000011c 	.word	0x2000011c
 80178b0:	0802782c 	.word	0x0802782c

080178b4 <pifMsp_Clear>:

void pifMsp_Clear(PifMsp* p_owner)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b082      	sub	sp, #8
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
	if (p_owner->__rx.p_packet) {
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	68db      	ldr	r3, [r3, #12]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d007      	beq.n	80178d4 <pifMsp_Clear+0x20>
		free(p_owner->__rx.p_packet);
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	68db      	ldr	r3, [r3, #12]
 80178c8:	4618      	mov	r0, r3
 80178ca:	f00b f8cf 	bl	8022a6c <free>
		p_owner->__rx.p_packet = NULL;
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	2200      	movs	r2, #0
 80178d2:	60da      	str	r2, [r3, #12]
	}
	pifRingBuffer_Clear(&p_owner->__tx.answer_buffer);
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	3324      	adds	r3, #36	; 0x24
 80178d8:	4618      	mov	r0, r3
 80178da:	f7fb ff4f 	bl	801377c <pifRingBuffer_Clear>
#if PIF_MSP_RECEIVE_TIMEOUT
	if (p_owner->__rx.p_timer) {
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	6a1b      	ldr	r3, [r3, #32]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d004      	beq.n	80178f0 <pifMsp_Clear+0x3c>
		pifTimerManager_Remove(p_owner->__rx.p_timer);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	6a1b      	ldr	r3, [r3, #32]
 80178ea:	4618      	mov	r0, r3
 80178ec:	f7fd fb1a 	bl	8014f24 <pifTimerManager_Remove>
	}
#endif
}
 80178f0:	bf00      	nop
 80178f2:	3708      	adds	r7, #8
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bd80      	pop	{r7, pc}

080178f8 <pifMsp_AttachComm>:

void pifMsp_AttachComm(PifMsp* p_owner, PifComm *p_comm)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b082      	sub	sp, #8
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
 8017900:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	683a      	ldr	r2, [r7, #0]
 8017906:	605a      	str	r2, [r3, #4]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 8017908:	4b04      	ldr	r3, [pc, #16]	; (801791c <pifMsp_AttachComm+0x24>)
 801790a:	4a05      	ldr	r2, [pc, #20]	; (8017920 <pifMsp_AttachComm+0x28>)
 801790c:	6879      	ldr	r1, [r7, #4]
 801790e:	6838      	ldr	r0, [r7, #0]
 8017910:	f7fa f9e0 	bl	8011cd4 <pifComm_AttachClient>
}
 8017914:	bf00      	nop
 8017916:	3708      	adds	r7, #8
 8017918:	46bd      	mov	sp, r7
 801791a:	bd80      	pop	{r7, pc}
 801791c:	080176db 	.word	0x080176db
 8017920:	08017679 	.word	0x08017679

08017924 <pifMsp_DetachComm>:

void pifMsp_DetachComm(PifMsp* p_owner)
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b082      	sub	sp, #8
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
	pifComm_DetachClient(p_owner->__p_comm);
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	685b      	ldr	r3, [r3, #4]
 8017930:	4618      	mov	r0, r3
 8017932:	f7fa f9e5 	bl	8011d00 <pifComm_DetachClient>
	p_owner->__p_comm = NULL;
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	2200      	movs	r2, #0
 801793a:	605a      	str	r2, [r3, #4]
}
 801793c:	bf00      	nop
 801793e:	3708      	adds	r7, #8
 8017940:	46bd      	mov	sp, r7
 8017942:	bd80      	pop	{r7, pc}

08017944 <pifMsp_AttachEvtReceive>:

void pifMsp_AttachEvtReceive(PifMsp* p_owner, PifEvtMspReceive evt_receive, PifEvtMspOtherPacket evt_other_packet, PifIssuerP p_issuer)
{
 8017944:	b480      	push	{r7}
 8017946:	b085      	sub	sp, #20
 8017948:	af00      	add	r7, sp, #0
 801794a:	60f8      	str	r0, [r7, #12]
 801794c:	60b9      	str	r1, [r7, #8]
 801794e:	607a      	str	r2, [r7, #4]
 8017950:	603b      	str	r3, [r7, #0]
	p_owner->__evt_receive = evt_receive;
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	68ba      	ldr	r2, [r7, #8]
 8017956:	651a      	str	r2, [r3, #80]	; 0x50
	p_owner->__evt_other_packet = evt_other_packet;
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	687a      	ldr	r2, [r7, #4]
 801795c:	655a      	str	r2, [r3, #84]	; 0x54
	p_owner->__p_issuer = p_issuer;
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	683a      	ldr	r2, [r7, #0]
 8017962:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8017964:	bf00      	nop
 8017966:	3714      	adds	r7, #20
 8017968:	46bd      	mov	sp, r7
 801796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796e:	4770      	bx	lr

08017970 <pifMsp_ReadData8>:

uint8_t pifMsp_ReadData8(PifMspPacket* p_packet)
{
 8017970:	b480      	push	{r7}
 8017972:	b085      	sub	sp, #20
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
	uint8_t data;

	data = p_packet->p_pointer[0];
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	689b      	ldr	r3, [r3, #8]
 801797c:	781b      	ldrb	r3, [r3, #0]
 801797e:	73fb      	strb	r3, [r7, #15]
	p_packet->p_pointer++;
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	689b      	ldr	r3, [r3, #8]
 8017984:	1c5a      	adds	r2, r3, #1
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	609a      	str	r2, [r3, #8]
	return data;
 801798a:	7bfb      	ldrb	r3, [r7, #15]
}
 801798c:	4618      	mov	r0, r3
 801798e:	3714      	adds	r7, #20
 8017990:	46bd      	mov	sp, r7
 8017992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017996:	4770      	bx	lr

08017998 <pifMsp_ReadData16>:

uint16_t pifMsp_ReadData16(PifMspPacket* p_packet)
{
 8017998:	b480      	push	{r7}
 801799a:	b085      	sub	sp, #20
 801799c:	af00      	add	r7, sp, #0
 801799e:	6078      	str	r0, [r7, #4]
	uint16_t data;

	data = p_packet->p_pointer[0] | (p_packet->p_pointer[1] << 8);
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	689b      	ldr	r3, [r3, #8]
 80179a4:	781b      	ldrb	r3, [r3, #0]
 80179a6:	b21a      	sxth	r2, r3
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	689b      	ldr	r3, [r3, #8]
 80179ac:	3301      	adds	r3, #1
 80179ae:	781b      	ldrb	r3, [r3, #0]
 80179b0:	021b      	lsls	r3, r3, #8
 80179b2:	b21b      	sxth	r3, r3
 80179b4:	4313      	orrs	r3, r2
 80179b6:	b21b      	sxth	r3, r3
 80179b8:	81fb      	strh	r3, [r7, #14]
	p_packet->p_pointer += 2;
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	689b      	ldr	r3, [r3, #8]
 80179be:	1c9a      	adds	r2, r3, #2
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	609a      	str	r2, [r3, #8]
	return data;
 80179c4:	89fb      	ldrh	r3, [r7, #14]
}
 80179c6:	4618      	mov	r0, r3
 80179c8:	3714      	adds	r7, #20
 80179ca:	46bd      	mov	sp, r7
 80179cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d0:	4770      	bx	lr

080179d2 <pifMsp_ReadData32>:

uint32_t pifMsp_ReadData32(PifMspPacket* p_packet)
{
 80179d2:	b480      	push	{r7}
 80179d4:	b085      	sub	sp, #20
 80179d6:	af00      	add	r7, sp, #0
 80179d8:	6078      	str	r0, [r7, #4]
	uint32_t data;

	data = p_packet->p_pointer[0] | (p_packet->p_pointer[1] << 8) | (p_packet->p_pointer[2] << 16) | (p_packet->p_pointer[3] << 24);
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	689b      	ldr	r3, [r3, #8]
 80179de:	781b      	ldrb	r3, [r3, #0]
 80179e0:	461a      	mov	r2, r3
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	689b      	ldr	r3, [r3, #8]
 80179e6:	3301      	adds	r3, #1
 80179e8:	781b      	ldrb	r3, [r3, #0]
 80179ea:	021b      	lsls	r3, r3, #8
 80179ec:	431a      	orrs	r2, r3
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	689b      	ldr	r3, [r3, #8]
 80179f2:	3302      	adds	r3, #2
 80179f4:	781b      	ldrb	r3, [r3, #0]
 80179f6:	041b      	lsls	r3, r3, #16
 80179f8:	431a      	orrs	r2, r3
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	689b      	ldr	r3, [r3, #8]
 80179fe:	3303      	adds	r3, #3
 8017a00:	781b      	ldrb	r3, [r3, #0]
 8017a02:	061b      	lsls	r3, r3, #24
 8017a04:	4313      	orrs	r3, r2
 8017a06:	60fb      	str	r3, [r7, #12]
	p_packet->p_pointer += 4;
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	689b      	ldr	r3, [r3, #8]
 8017a0c:	1d1a      	adds	r2, r3, #4
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	609a      	str	r2, [r3, #8]
	return data;
 8017a12:	68fb      	ldr	r3, [r7, #12]
}
 8017a14:	4618      	mov	r0, r3
 8017a16:	3714      	adds	r7, #20
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1e:	4770      	bx	lr

08017a20 <pifMsp_MakeAnswer>:
	}
	p_packet->p_pointer += size;
}

BOOL pifMsp_MakeAnswer(PifMsp* p_owner, PifMspPacket* p_question)
{
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b086      	sub	sp, #24
 8017a24:	af02      	add	r7, sp, #8
 8017a26:	6078      	str	r0, [r7, #4]
 8017a28:	6039      	str	r1, [r7, #0]
	uint8_t header[5];

	pifRingBuffer_BeginPutting(&p_owner->__tx.answer_buffer);
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	3324      	adds	r3, #36	; 0x24
 8017a2e:	4618      	mov	r0, r3
 8017a30:	f7fb ff7b 	bl	801392a <pifRingBuffer_BeginPutting>

	header[0] = '$';
 8017a34:	2324      	movs	r3, #36	; 0x24
 8017a36:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 8017a38:	234d      	movs	r3, #77	; 0x4d
 8017a3a:	727b      	strb	r3, [r7, #9]
	header[2] = '>';
 8017a3c:	233e      	movs	r3, #62	; 0x3e
 8017a3e:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 8017a40:	2300      	movs	r3, #0
 8017a42:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 8017a44:	683b      	ldr	r3, [r7, #0]
 8017a46:	781b      	ldrb	r3, [r3, #0]
 8017a48:	733b      	strb	r3, [r7, #12]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	3324      	adds	r3, #36	; 0x24
 8017a4e:	f107 0108 	add.w	r1, r7, #8
 8017a52:	2205      	movs	r2, #5
 8017a54:	4618      	mov	r0, r3
 8017a56:	f7fb ffef 	bl	8013a38 <pifRingBuffer_PutData>
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d009      	beq.n	8017a74 <pifMsp_MakeAnswer+0x54>
	p_owner->__check_xor = header[4];
 8017a60:	7b3a      	ldrb	r2, [r7, #12]
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size = 0;
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017a70:	2301      	movs	r3, #1
 8017a72:	e01e      	b.n	8017ab2 <pifMsp_MakeAnswer+0x92>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017a74:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	3324      	adds	r3, #36	; 0x24
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	f7fb ff7b 	bl	8013976 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017a80:	4b0e      	ldr	r3, [pc, #56]	; (8017abc <pifMsp_MakeAnswer+0x9c>)
 8017a82:	781b      	ldrb	r3, [r3, #0]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d102      	bne.n	8017a8e <pifMsp_MakeAnswer+0x6e>
 8017a88:	4b0c      	ldr	r3, [pc, #48]	; (8017abc <pifMsp_MakeAnswer+0x9c>)
 8017a8a:	2204      	movs	r2, #4
 8017a8c:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	881b      	ldrh	r3, [r3, #0]
 8017a92:	4619      	mov	r1, r3
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	781b      	ldrb	r3, [r3, #0]
 8017a98:	461a      	mov	r2, r3
 8017a9a:	4b08      	ldr	r3, [pc, #32]	; (8017abc <pifMsp_MakeAnswer+0x9c>)
 8017a9c:	781b      	ldrb	r3, [r3, #0]
 8017a9e:	9301      	str	r3, [sp, #4]
 8017aa0:	9200      	str	r2, [sp, #0]
 8017aa2:	460b      	mov	r3, r1
 8017aa4:	f240 1269 	movw	r2, #361	; 0x169
 8017aa8:	4905      	ldr	r1, [pc, #20]	; (8017ac0 <pifMsp_MakeAnswer+0xa0>)
 8017aaa:	2004      	movs	r0, #4
 8017aac:	f7fb fc7a 	bl	80133a4 <pifLog_Printf>
#endif
	return FALSE;
 8017ab0:	2300      	movs	r3, #0
}
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	3710      	adds	r7, #16
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	bd80      	pop	{r7, pc}
 8017aba:	bf00      	nop
 8017abc:	20001c0d 	.word	0x20001c0d
 8017ac0:	08027840 	.word	0x08027840

08017ac4 <pifMsp_AddAnswer8>:

BOOL pifMsp_AddAnswer8(PifMsp* p_owner, uint8_t data)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b084      	sub	sp, #16
 8017ac8:	af02      	add	r7, sp, #8
 8017aca:	6078      	str	r0, [r7, #4]
 8017acc:	460b      	mov	r3, r1
 8017ace:	70fb      	strb	r3, [r7, #3]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, &data, 1)) goto fail;
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	3324      	adds	r3, #36	; 0x24
 8017ad4:	1cf9      	adds	r1, r7, #3
 8017ad6:	2201      	movs	r2, #1
 8017ad8:	4618      	mov	r0, r3
 8017ada:	f7fb ffad 	bl	8013a38 <pifRingBuffer_PutData>
 8017ade:	4603      	mov	r3, r0
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d012      	beq.n	8017b0a <pifMsp_AddAnswer8+0x46>
	p_owner->__check_xor ^= data;
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8017aea:	78fb      	ldrb	r3, [r7, #3]
 8017aec:	4053      	eors	r3, r2
 8017aee:	b2da      	uxtb	r2, r3
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 1;
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017afc:	3301      	adds	r3, #1
 8017afe:	b29a      	uxth	r2, r3
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017b06:	2301      	movs	r3, #1
 8017b08:	e01a      	b.n	8017b40 <pifMsp_AddAnswer8+0x7c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, &data, 1)) goto fail;
 8017b0a:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	3324      	adds	r3, #36	; 0x24
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7fb ff30 	bl	8013976 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017b16:	4b0c      	ldr	r3, [pc, #48]	; (8017b48 <pifMsp_AddAnswer8+0x84>)
 8017b18:	781b      	ldrb	r3, [r3, #0]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d102      	bne.n	8017b24 <pifMsp_AddAnswer8+0x60>
 8017b1e:	4b0a      	ldr	r3, [pc, #40]	; (8017b48 <pifMsp_AddAnswer8+0x84>)
 8017b20:	2204      	movs	r2, #4
 8017b22:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	881b      	ldrh	r3, [r3, #0]
 8017b28:	461a      	mov	r2, r3
 8017b2a:	4b07      	ldr	r3, [pc, #28]	; (8017b48 <pifMsp_AddAnswer8+0x84>)
 8017b2c:	781b      	ldrb	r3, [r3, #0]
 8017b2e:	9300      	str	r3, [sp, #0]
 8017b30:	4613      	mov	r3, r2
 8017b32:	f240 1279 	movw	r2, #377	; 0x179
 8017b36:	4905      	ldr	r1, [pc, #20]	; (8017b4c <pifMsp_AddAnswer8+0x88>)
 8017b38:	2004      	movs	r0, #4
 8017b3a:	f7fb fc33 	bl	80133a4 <pifLog_Printf>
#endif
	return FALSE;
 8017b3e:	2300      	movs	r3, #0
}
 8017b40:	4618      	mov	r0, r3
 8017b42:	3708      	adds	r7, #8
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}
 8017b48:	20001c0d 	.word	0x20001c0d
 8017b4c:	0802782c 	.word	0x0802782c

08017b50 <pifMsp_AddAnswer16>:

BOOL pifMsp_AddAnswer16(PifMsp* p_owner, uint16_t data)
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b084      	sub	sp, #16
 8017b54:	af02      	add	r7, sp, #8
 8017b56:	6078      	str	r0, [r7, #4]
 8017b58:	460b      	mov	r3, r1
 8017b5a:	807b      	strh	r3, [r7, #2]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 2)) goto fail;
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	3324      	adds	r3, #36	; 0x24
 8017b60:	1cb9      	adds	r1, r7, #2
 8017b62:	2202      	movs	r2, #2
 8017b64:	4618      	mov	r0, r3
 8017b66:	f7fb ff67 	bl	8013a38 <pifRingBuffer_PutData>
 8017b6a:	4603      	mov	r3, r0
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d018      	beq.n	8017ba2 <pifMsp_AddAnswer16+0x52>
	p_owner->__check_xor ^= pifCheckXor((uint8_t*)&data, 2);
 8017b70:	1cbb      	adds	r3, r7, #2
 8017b72:	2102      	movs	r1, #2
 8017b74:	4618      	mov	r0, r3
 8017b76:	f7f9 ff54 	bl	8011a22 <pifCheckXor>
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	461a      	mov	r2, r3
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017b84:	4053      	eors	r3, r2
 8017b86:	b2da      	uxtb	r2, r3
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 2;
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017b94:	3302      	adds	r3, #2
 8017b96:	b29a      	uxth	r2, r3
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017b9e:	2301      	movs	r3, #1
 8017ba0:	e01a      	b.n	8017bd8 <pifMsp_AddAnswer16+0x88>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 2)) goto fail;
 8017ba2:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	3324      	adds	r3, #36	; 0x24
 8017ba8:	4618      	mov	r0, r3
 8017baa:	f7fb fee4 	bl	8013976 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017bae:	4b0c      	ldr	r3, [pc, #48]	; (8017be0 <pifMsp_AddAnswer16+0x90>)
 8017bb0:	781b      	ldrb	r3, [r3, #0]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d102      	bne.n	8017bbc <pifMsp_AddAnswer16+0x6c>
 8017bb6:	4b0a      	ldr	r3, [pc, #40]	; (8017be0 <pifMsp_AddAnswer16+0x90>)
 8017bb8:	2204      	movs	r2, #4
 8017bba:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	881b      	ldrh	r3, [r3, #0]
 8017bc0:	461a      	mov	r2, r3
 8017bc2:	4b07      	ldr	r3, [pc, #28]	; (8017be0 <pifMsp_AddAnswer16+0x90>)
 8017bc4:	781b      	ldrb	r3, [r3, #0]
 8017bc6:	9300      	str	r3, [sp, #0]
 8017bc8:	4613      	mov	r3, r2
 8017bca:	f240 1289 	movw	r2, #393	; 0x189
 8017bce:	4905      	ldr	r1, [pc, #20]	; (8017be4 <pifMsp_AddAnswer16+0x94>)
 8017bd0:	2004      	movs	r0, #4
 8017bd2:	f7fb fbe7 	bl	80133a4 <pifLog_Printf>
#endif
	return FALSE;
 8017bd6:	2300      	movs	r3, #0
}
 8017bd8:	4618      	mov	r0, r3
 8017bda:	3708      	adds	r7, #8
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd80      	pop	{r7, pc}
 8017be0:	20001c0d 	.word	0x20001c0d
 8017be4:	0802782c 	.word	0x0802782c

08017be8 <pifMsp_AddAnswer32>:

BOOL pifMsp_AddAnswer32(PifMsp* p_owner, uint32_t data)
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b084      	sub	sp, #16
 8017bec:	af02      	add	r7, sp, #8
 8017bee:	6078      	str	r0, [r7, #4]
 8017bf0:	6039      	str	r1, [r7, #0]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 4)) goto fail;
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	3324      	adds	r3, #36	; 0x24
 8017bf6:	4639      	mov	r1, r7
 8017bf8:	2204      	movs	r2, #4
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f7fb ff1c 	bl	8013a38 <pifRingBuffer_PutData>
 8017c00:	4603      	mov	r3, r0
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d018      	beq.n	8017c38 <pifMsp_AddAnswer32+0x50>
	p_owner->__check_xor ^= pifCheckXor((uint8_t*)&data, 4);
 8017c06:	463b      	mov	r3, r7
 8017c08:	2104      	movs	r1, #4
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7f9 ff09 	bl	8011a22 <pifCheckXor>
 8017c10:	4603      	mov	r3, r0
 8017c12:	461a      	mov	r2, r3
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017c1a:	4053      	eors	r3, r2
 8017c1c:	b2da      	uxtb	r2, r3
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 4;
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017c2a:	3304      	adds	r3, #4
 8017c2c:	b29a      	uxth	r2, r3
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017c34:	2301      	movs	r3, #1
 8017c36:	e01a      	b.n	8017c6e <pifMsp_AddAnswer32+0x86>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 4)) goto fail;
 8017c38:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	3324      	adds	r3, #36	; 0x24
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f7fb fe99 	bl	8013976 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017c44:	4b0c      	ldr	r3, [pc, #48]	; (8017c78 <pifMsp_AddAnswer32+0x90>)
 8017c46:	781b      	ldrb	r3, [r3, #0]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d102      	bne.n	8017c52 <pifMsp_AddAnswer32+0x6a>
 8017c4c:	4b0a      	ldr	r3, [pc, #40]	; (8017c78 <pifMsp_AddAnswer32+0x90>)
 8017c4e:	2204      	movs	r2, #4
 8017c50:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	881b      	ldrh	r3, [r3, #0]
 8017c56:	461a      	mov	r2, r3
 8017c58:	4b07      	ldr	r3, [pc, #28]	; (8017c78 <pifMsp_AddAnswer32+0x90>)
 8017c5a:	781b      	ldrb	r3, [r3, #0]
 8017c5c:	9300      	str	r3, [sp, #0]
 8017c5e:	4613      	mov	r3, r2
 8017c60:	f240 1299 	movw	r2, #409	; 0x199
 8017c64:	4905      	ldr	r1, [pc, #20]	; (8017c7c <pifMsp_AddAnswer32+0x94>)
 8017c66:	2004      	movs	r0, #4
 8017c68:	f7fb fb9c 	bl	80133a4 <pifLog_Printf>
#endif
	return FALSE;
 8017c6c:	2300      	movs	r3, #0
}
 8017c6e:	4618      	mov	r0, r3
 8017c70:	3708      	adds	r7, #8
 8017c72:	46bd      	mov	sp, r7
 8017c74:	bd80      	pop	{r7, pc}
 8017c76:	bf00      	nop
 8017c78:	20001c0d 	.word	0x20001c0d
 8017c7c:	0802782c 	.word	0x0802782c

08017c80 <pifMsp_AddAnswer>:

BOOL pifMsp_AddAnswer(PifMsp* p_owner, uint8_t* p_data, uint16_t size)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b086      	sub	sp, #24
 8017c84:	af02      	add	r7, sp, #8
 8017c86:	60f8      	str	r0, [r7, #12]
 8017c88:	60b9      	str	r1, [r7, #8]
 8017c8a:	4613      	mov	r3, r2
 8017c8c:	80fb      	strh	r3, [r7, #6]
	if (size > 0) {
 8017c8e:	88fb      	ldrh	r3, [r7, #6]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d021      	beq.n	8017cd8 <pifMsp_AddAnswer+0x58>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, size)) goto fail;
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	3324      	adds	r3, #36	; 0x24
 8017c98:	88fa      	ldrh	r2, [r7, #6]
 8017c9a:	68b9      	ldr	r1, [r7, #8]
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	f7fb fecb 	bl	8013a38 <pifRingBuffer_PutData>
 8017ca2:	4603      	mov	r3, r0
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d019      	beq.n	8017cdc <pifMsp_AddAnswer+0x5c>
		p_owner->__check_xor ^= pifCheckXor(p_data, size);
 8017ca8:	88fb      	ldrh	r3, [r7, #6]
 8017caa:	4619      	mov	r1, r3
 8017cac:	68b8      	ldr	r0, [r7, #8]
 8017cae:	f7f9 feb8 	bl	8011a22 <pifCheckXor>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	461a      	mov	r2, r3
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017cbc:	4053      	eors	r3, r2
 8017cbe:	b2da      	uxtb	r2, r3
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		p_owner->__data_size += size;
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017ccc:	88fb      	ldrh	r3, [r7, #6]
 8017cce:	4413      	add	r3, r2
 8017cd0:	b29a      	uxth	r2, r3
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	}
	return TRUE;
 8017cd8:	2301      	movs	r3, #1
 8017cda:	e01a      	b.n	8017d12 <pifMsp_AddAnswer+0x92>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, size)) goto fail;
 8017cdc:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	3324      	adds	r3, #36	; 0x24
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	f7fb fe47 	bl	8013976 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017ce8:	4b0c      	ldr	r3, [pc, #48]	; (8017d1c <pifMsp_AddAnswer+0x9c>)
 8017cea:	781b      	ldrb	r3, [r3, #0]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d102      	bne.n	8017cf6 <pifMsp_AddAnswer+0x76>
 8017cf0:	4b0a      	ldr	r3, [pc, #40]	; (8017d1c <pifMsp_AddAnswer+0x9c>)
 8017cf2:	2204      	movs	r2, #4
 8017cf4:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	881b      	ldrh	r3, [r3, #0]
 8017cfa:	461a      	mov	r2, r3
 8017cfc:	4b07      	ldr	r3, [pc, #28]	; (8017d1c <pifMsp_AddAnswer+0x9c>)
 8017cfe:	781b      	ldrb	r3, [r3, #0]
 8017d00:	9300      	str	r3, [sp, #0]
 8017d02:	4613      	mov	r3, r2
 8017d04:	f240 12ab 	movw	r2, #427	; 0x1ab
 8017d08:	4905      	ldr	r1, [pc, #20]	; (8017d20 <pifMsp_AddAnswer+0xa0>)
 8017d0a:	2004      	movs	r0, #4
 8017d0c:	f7fb fb4a 	bl	80133a4 <pifLog_Printf>
#endif
	return FALSE;
 8017d10:	2300      	movs	r3, #0
}
 8017d12:	4618      	mov	r0, r3
 8017d14:	3710      	adds	r7, #16
 8017d16:	46bd      	mov	sp, r7
 8017d18:	bd80      	pop	{r7, pc}
 8017d1a:	bf00      	nop
 8017d1c:	20001c0d 	.word	0x20001c0d
 8017d20:	0802782c 	.word	0x0802782c

08017d24 <pifMsp_MakeError>:

BOOL pifMsp_MakeError(PifMsp* p_owner, PifMspPacket* p_question)
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b086      	sub	sp, #24
 8017d28:	af02      	add	r7, sp, #8
 8017d2a:	6078      	str	r0, [r7, #4]
 8017d2c:	6039      	str	r1, [r7, #0]
	uint8_t header[5];

	pifRingBuffer_BeginPutting(&p_owner->__tx.answer_buffer);
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	3324      	adds	r3, #36	; 0x24
 8017d32:	4618      	mov	r0, r3
 8017d34:	f7fb fdf9 	bl	801392a <pifRingBuffer_BeginPutting>

	header[0] = '$';
 8017d38:	2324      	movs	r3, #36	; 0x24
 8017d3a:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 8017d3c:	234d      	movs	r3, #77	; 0x4d
 8017d3e:	727b      	strb	r3, [r7, #9]
	header[2] = '!';
 8017d40:	2321      	movs	r3, #33	; 0x21
 8017d42:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 8017d44:	2300      	movs	r3, #0
 8017d46:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 8017d48:	683b      	ldr	r3, [r7, #0]
 8017d4a:	781b      	ldrb	r3, [r3, #0]
 8017d4c:	733b      	strb	r3, [r7, #12]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	3324      	adds	r3, #36	; 0x24
 8017d52:	f107 0108 	add.w	r1, r7, #8
 8017d56:	2205      	movs	r2, #5
 8017d58:	4618      	mov	r0, r3
 8017d5a:	f7fb fe6d 	bl	8013a38 <pifRingBuffer_PutData>
 8017d5e:	4603      	mov	r3, r0
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d009      	beq.n	8017d78 <pifMsp_MakeError+0x54>
	p_owner->__check_xor = header[4];
 8017d64:	7b3a      	ldrb	r2, [r7, #12]
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size = 0;
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	2200      	movs	r2, #0
 8017d70:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017d74:	2301      	movs	r3, #1
 8017d76:	e01e      	b.n	8017db6 <pifMsp_MakeError+0x92>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017d78:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	3324      	adds	r3, #36	; 0x24
 8017d7e:	4618      	mov	r0, r3
 8017d80:	f7fb fdf9 	bl	8013976 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017d84:	4b0e      	ldr	r3, [pc, #56]	; (8017dc0 <pifMsp_MakeError+0x9c>)
 8017d86:	781b      	ldrb	r3, [r3, #0]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d102      	bne.n	8017d92 <pifMsp_MakeError+0x6e>
 8017d8c:	4b0c      	ldr	r3, [pc, #48]	; (8017dc0 <pifMsp_MakeError+0x9c>)
 8017d8e:	2204      	movs	r2, #4
 8017d90:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	881b      	ldrh	r3, [r3, #0]
 8017d96:	4619      	mov	r1, r3
 8017d98:	683b      	ldr	r3, [r7, #0]
 8017d9a:	781b      	ldrb	r3, [r3, #0]
 8017d9c:	461a      	mov	r2, r3
 8017d9e:	4b08      	ldr	r3, [pc, #32]	; (8017dc0 <pifMsp_MakeError+0x9c>)
 8017da0:	781b      	ldrb	r3, [r3, #0]
 8017da2:	9301      	str	r3, [sp, #4]
 8017da4:	9200      	str	r2, [sp, #0]
 8017da6:	460b      	mov	r3, r1
 8017da8:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8017dac:	4905      	ldr	r1, [pc, #20]	; (8017dc4 <pifMsp_MakeError+0xa0>)
 8017dae:	2004      	movs	r0, #4
 8017db0:	f7fb faf8 	bl	80133a4 <pifLog_Printf>
#endif
	return FALSE;
 8017db4:	2300      	movs	r3, #0
}
 8017db6:	4618      	mov	r0, r3
 8017db8:	3710      	adds	r7, #16
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	bd80      	pop	{r7, pc}
 8017dbe:	bf00      	nop
 8017dc0:	20001c0d 	.word	0x20001c0d
 8017dc4:	08027840 	.word	0x08027840

08017dc8 <pifMsp_SendAnswer>:

BOOL pifMsp_SendAnswer(PifMsp* p_owner)
{
 8017dc8:	b590      	push	{r4, r7, lr}
 8017dca:	b085      	sub	sp, #20
 8017dcc:	af02      	add	r7, sp, #8
 8017dce:	6078      	str	r0, [r7, #4]
	*pifRingBuffer_GetPointerPutting(&p_owner->__tx.answer_buffer, 3) = p_owner->__data_size;
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	3324      	adds	r3, #36	; 0x24
 8017dda:	2103      	movs	r1, #3
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f7fb fddc 	bl	801399a <pifRingBuffer_GetPointerPutting>
 8017de2:	4603      	mov	r3, r0
 8017de4:	b2e2      	uxtb	r2, r4
 8017de6:	701a      	strb	r2, [r3, #0]
	p_owner->__check_xor ^= p_owner->__data_size;
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017df4:	b2db      	uxtb	r3, r3
 8017df6:	4053      	eors	r3, r2
 8017df8:	b2da      	uxtb	r2, r3
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, p_owner->__check_xor)) goto fail;
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017e0c:	4619      	mov	r1, r3
 8017e0e:	4610      	mov	r0, r2
 8017e10:	f7fb fdde 	bl	80139d0 <pifRingBuffer_PutByte>
 8017e14:	4603      	mov	r3, r0
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d00c      	beq.n	8017e34 <pifMsp_SendAnswer+0x6c>

	pifRingBuffer_CommitPutting(&p_owner->__tx.answer_buffer);
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	3324      	adds	r3, #36	; 0x24
 8017e1e:	4618      	mov	r0, r3
 8017e20:	f7fb fd9b 	bl	801395a <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	685b      	ldr	r3, [r3, #4]
 8017e28:	69db      	ldr	r3, [r3, #28]
 8017e2a:	4618      	mov	r0, r3
 8017e2c:	f7fc fb54 	bl	80144d8 <pifTask_SetTrigger>
	return TRUE;
 8017e30:	2301      	movs	r3, #1
 8017e32:	e01a      	b.n	8017e6a <pifMsp_SendAnswer+0xa2>
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, p_owner->__check_xor)) goto fail;
 8017e34:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	3324      	adds	r3, #36	; 0x24
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	f7fb fd9b 	bl	8013976 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017e40:	4b0c      	ldr	r3, [pc, #48]	; (8017e74 <pifMsp_SendAnswer+0xac>)
 8017e42:	781b      	ldrb	r3, [r3, #0]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d102      	bne.n	8017e4e <pifMsp_SendAnswer+0x86>
 8017e48:	4b0a      	ldr	r3, [pc, #40]	; (8017e74 <pifMsp_SendAnswer+0xac>)
 8017e4a:	2204      	movs	r2, #4
 8017e4c:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	881b      	ldrh	r3, [r3, #0]
 8017e52:	461a      	mov	r2, r3
 8017e54:	4b07      	ldr	r3, [pc, #28]	; (8017e74 <pifMsp_SendAnswer+0xac>)
 8017e56:	781b      	ldrb	r3, [r3, #0]
 8017e58:	9300      	str	r3, [sp, #0]
 8017e5a:	4613      	mov	r3, r2
 8017e5c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8017e60:	4905      	ldr	r1, [pc, #20]	; (8017e78 <pifMsp_SendAnswer+0xb0>)
 8017e62:	2004      	movs	r0, #4
 8017e64:	f7fb fa9e 	bl	80133a4 <pifLog_Printf>
#endif
	return FALSE;
 8017e68:	2300      	movs	r3, #0
}
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	370c      	adds	r7, #12
 8017e6e:	46bd      	mov	sp, r7
 8017e70:	bd90      	pop	{r4, r7, pc}
 8017e72:	bf00      	nop
 8017e74:	20001c0d 	.word	0x20001c0d
 8017e78:	0802782c 	.word	0x0802782c

08017e7c <pifRc_AttachEvtReceive>:
#include "rc/pif_rc.h"


void pifRc_AttachEvtReceive(PifRc* p_owner, PifEvtRcReceive evt_receive, PifIssuerP p_issuer)
{
 8017e7c:	b480      	push	{r7}
 8017e7e:	b085      	sub	sp, #20
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	60f8      	str	r0, [r7, #12]
 8017e84:	60b9      	str	r1, [r7, #8]
 8017e86:	607a      	str	r2, [r7, #4]
	p_owner->__evt_receive = evt_receive;
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	68ba      	ldr	r2, [r7, #8]
 8017e8c:	619a      	str	r2, [r3, #24]
	p_owner->__p_issuer = p_issuer;
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	687a      	ldr	r2, [r7, #4]
 8017e92:	61da      	str	r2, [r3, #28]
}
 8017e94:	bf00      	nop
 8017e96:	3714      	adds	r7, #20
 8017e98:	46bd      	mov	sp, r7
 8017e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e9e:	4770      	bx	lr

08017ea0 <_processRcPpm>:
#include "core/pif_list.h"
#include "rc/pif_rc_ppm.h"


static uint16_t _processRcPpm(PifRcPpm* p_owner, uint16_t diff)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b084      	sub	sp, #16
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	6078      	str	r0, [r7, #4]
 8017ea8:	460b      	mov	r3, r1
 8017eaa:	807b      	strh	r3, [r7, #2]
	uint16_t rtn = 0;
 8017eac:	2300      	movs	r3, #0
 8017eae:	81fb      	strh	r3, [r7, #14]

	switch (p_owner->__process_step) {
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8017eb6:	2b02      	cmp	r3, #2
 8017eb8:	d04f      	beq.n	8017f5a <_processRcPpm+0xba>
 8017eba:	2b02      	cmp	r3, #2
 8017ebc:	f300 80b5 	bgt.w	801802a <_processRcPpm+0x18a>
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d002      	beq.n	8017eca <_processRcPpm+0x2a>
 8017ec4:	2b01      	cmp	r3, #1
 8017ec6:	d010      	beq.n	8017eea <_processRcPpm+0x4a>
 8017ec8:	e0af      	b.n	801802a <_processRcPpm+0x18a>
	case 0:
		if (diff >= p_owner->__threshold_1us) p_owner->__process_step++;
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017ed0:	887a      	ldrh	r2, [r7, #2]
 8017ed2:	429a      	cmp	r2, r3
 8017ed4:	f0c0 80a4 	bcc.w	8018020 <_processRcPpm+0x180>
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8017ede:	3301      	adds	r3, #1
 8017ee0:	b2da      	uxtb	r2, r3
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8017ee8:	e09a      	b.n	8018020 <_processRcPpm+0x180>

	case 1:
		if (diff < p_owner->__threshold_1us) {
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017ef0:	887a      	ldrh	r2, [r7, #2]
 8017ef2:	429a      	cmp	r2, r3
 8017ef4:	d224      	bcs.n	8017f40 <_processRcPpm+0xa0>
			p_owner->_channel++;
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017efc:	b2db      	uxtb	r3, r3
 8017efe:	3301      	adds	r3, #1
 8017f00:	b2db      	uxtb	r3, r3
 8017f02:	b25a      	sxtb	r2, r3
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	f883 2020 	strb.w	r2, [r3, #32]
			if (p_owner->_channel < p_owner->__max_channel) {
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017f10:	461a      	mov	r2, r3
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8017f18:	429a      	cmp	r2, r3
 8017f1a:	f280 8083 	bge.w	8018024 <_processRcPpm+0x184>
				if (p_owner->_channel + 1 > p_owner->parent._channel_count) p_owner->parent._channel_count = p_owner->_channel + 1;
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017f24:	461a      	mov	r2, r3
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	789b      	ldrb	r3, [r3, #2]
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	db7a      	blt.n	8018024 <_processRcPpm+0x184>
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017f34:	b2db      	uxtb	r3, r3
 8017f36:	3301      	adds	r3, #1
 8017f38:	b2da      	uxtb	r2, r3
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	709a      	strb	r2, [r3, #2]
		}
		else {
			p_owner->_channel = -1;
			p_owner->__process_step++;
		}
		break;
 8017f3e:	e071      	b.n	8018024 <_processRcPpm+0x184>
			p_owner->_channel = -1;
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	22ff      	movs	r2, #255	; 0xff
 8017f44:	f883 2020 	strb.w	r2, [r3, #32]
			p_owner->__process_step++;
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8017f4e:	3301      	adds	r3, #1
 8017f50:	b2da      	uxtb	r2, r3
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8017f58:	e064      	b.n	8018024 <_processRcPpm+0x184>

	case 2:
		if (diff < p_owner->__threshold_1us) {
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017f60:	887a      	ldrh	r2, [r7, #2]
 8017f62:	429a      	cmp	r2, r3
 8017f64:	d257      	bcs.n	8018016 <_processRcPpm+0x176>
			p_owner->_channel++;
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017f6c:	b2db      	uxtb	r3, r3
 8017f6e:	3301      	adds	r3, #1
 8017f70:	b2db      	uxtb	r3, r3
 8017f72:	b25a      	sxtb	r2, r3
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	f883 2020 	strb.w	r2, [r3, #32]
			if (p_owner->_channel < p_owner->__max_channel) {
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017f80:	461a      	mov	r2, r3
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8017f88:	429a      	cmp	r2, r3
 8017f8a:	da4d      	bge.n	8018028 <_processRcPpm+0x188>
				if (p_owner->__valid_range.check) {
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8017f92:	f003 0301 	and.w	r3, r3, #1
 8017f96:	b2db      	uxtb	r3, r3
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d019      	beq.n	8017fd0 <_processRcPpm+0x130>
					if (diff >= p_owner->__valid_range.min && diff <= p_owner->__valid_range.max) {
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017fa0:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8017fa4:	b29b      	uxth	r3, r3
 8017fa6:	461a      	mov	r2, r3
 8017fa8:	887b      	ldrh	r3, [r7, #2]
 8017faa:	4293      	cmp	r3, r2
 8017fac:	d31b      	bcc.n	8017fe6 <_processRcPpm+0x146>
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017fb2:	887a      	ldrh	r2, [r7, #2]
 8017fb4:	429a      	cmp	r2, r3
 8017fb6:	d816      	bhi.n	8017fe6 <_processRcPpm+0x146>
						p_owner->__p_channel[p_owner->_channel] = diff;
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017fc2:	005b      	lsls	r3, r3, #1
 8017fc4:	4413      	add	r3, r2
 8017fc6:	887a      	ldrh	r2, [r7, #2]
 8017fc8:	801a      	strh	r2, [r3, #0]
						rtn = diff;
 8017fca:	887b      	ldrh	r3, [r7, #2]
 8017fcc:	81fb      	strh	r3, [r7, #14]
 8017fce:	e00a      	b.n	8017fe6 <_processRcPpm+0x146>
					}
				}
				else {
					p_owner->__p_channel[p_owner->_channel] = diff;
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017fda:	005b      	lsls	r3, r3, #1
 8017fdc:	4413      	add	r3, r2
 8017fde:	887a      	ldrh	r2, [r7, #2]
 8017fe0:	801a      	strh	r2, [r3, #0]
					rtn = diff;
 8017fe2:	887b      	ldrh	r3, [r7, #2]
 8017fe4:	81fb      	strh	r3, [r7, #14]
				}

				if (rtn && p_owner->_channel + 1 >= p_owner->parent._channel_count) {
 8017fe6:	89fb      	ldrh	r3, [r7, #14]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d01d      	beq.n	8018028 <_processRcPpm+0x188>
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017ff2:	3301      	adds	r3, #1
 8017ff4:	687a      	ldr	r2, [r7, #4]
 8017ff6:	7892      	ldrb	r2, [r2, #2]
 8017ff8:	4293      	cmp	r3, r2
 8017ffa:	db15      	blt.n	8018028 <_processRcPpm+0x188>
					if (p_owner->parent.__evt_receive) {
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	699b      	ldr	r3, [r3, #24]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d011      	beq.n	8018028 <_processRcPpm+0x188>
						(*p_owner->parent.__evt_receive)(&p_owner->parent, p_owner->__p_channel, p_owner->parent.__p_issuer);
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	699b      	ldr	r3, [r3, #24]
 8018008:	6878      	ldr	r0, [r7, #4]
 801800a:	687a      	ldr	r2, [r7, #4]
 801800c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 801800e:	687a      	ldr	r2, [r7, #4]
 8018010:	69d2      	ldr	r2, [r2, #28]
 8018012:	4798      	blx	r3
			}
		}
		else {
			p_owner->_channel = -1;
		}
		break;
 8018014:	e008      	b.n	8018028 <_processRcPpm+0x188>
			p_owner->_channel = -1;
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	22ff      	movs	r2, #255	; 0xff
 801801a:	f883 2020 	strb.w	r2, [r3, #32]
		break;
 801801e:	e003      	b.n	8018028 <_processRcPpm+0x188>
		break;
 8018020:	bf00      	nop
 8018022:	e002      	b.n	801802a <_processRcPpm+0x18a>
		break;
 8018024:	bf00      	nop
 8018026:	e000      	b.n	801802a <_processRcPpm+0x18a>
		break;
 8018028:	bf00      	nop
	}
	return rtn;
 801802a:	89fb      	ldrh	r3, [r7, #14]
}
 801802c:	4618      	mov	r0, r3
 801802e:	3710      	adds	r7, #16
 8018030:	46bd      	mov	sp, r7
 8018032:	bd80      	pop	{r7, pc}

08018034 <pifRcPpm_Init>:


BOOL pifRcPpm_Init(PifRcPpm* p_owner, PifId id, uint8_t channel_count, uint16_t threshold_1us)
{
 8018034:	b580      	push	{r7, lr}
 8018036:	b084      	sub	sp, #16
 8018038:	af00      	add	r7, sp, #0
 801803a:	60f8      	str	r0, [r7, #12]
 801803c:	4608      	mov	r0, r1
 801803e:	4611      	mov	r1, r2
 8018040:	461a      	mov	r2, r3
 8018042:	4603      	mov	r3, r0
 8018044:	817b      	strh	r3, [r7, #10]
 8018046:	460b      	mov	r3, r1
 8018048:	727b      	strb	r3, [r7, #9]
 801804a:	4613      	mov	r3, r2
 801804c:	80fb      	strh	r3, [r7, #6]
    if (!p_owner) {
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d104      	bne.n	801805e <pifRcPpm_Init+0x2a>
        pif_error = E_INVALID_PARAM;
 8018054:	4b1e      	ldr	r3, [pc, #120]	; (80180d0 <pifRcPpm_Init+0x9c>)
 8018056:	2201      	movs	r2, #1
 8018058:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801805a:	2300      	movs	r3, #0
 801805c:	e033      	b.n	80180c6 <pifRcPpm_Init+0x92>
    }

	memset(p_owner, 0, sizeof(PifRcPpm));
 801805e:	2254      	movs	r2, #84	; 0x54
 8018060:	2100      	movs	r1, #0
 8018062:	68f8      	ldr	r0, [r7, #12]
 8018064:	f00a fd18 	bl	8022a98 <memset>

    p_owner->__p_channel = calloc(sizeof(uint16_t), channel_count);
 8018068:	7a7b      	ldrb	r3, [r7, #9]
 801806a:	4619      	mov	r1, r3
 801806c:	2002      	movs	r0, #2
 801806e:	f00a fcc3 	bl	80229f8 <calloc>
 8018072:	4603      	mov	r3, r0
 8018074:	461a      	mov	r2, r3
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	651a      	str	r2, [r3, #80]	; 0x50
    if (!p_owner->__p_channel) {
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801807e:	2b00      	cmp	r3, #0
 8018080:	d104      	bne.n	801808c <pifRcPpm_Init+0x58>
		pif_error = E_OUT_OF_HEAP;
 8018082:	4b13      	ldr	r3, [pc, #76]	; (80180d0 <pifRcPpm_Init+0x9c>)
 8018084:	2203      	movs	r2, #3
 8018086:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018088:	2300      	movs	r3, #0
 801808a:	e01c      	b.n	80180c6 <pifRcPpm_Init+0x92>
	}

    if (id == PIF_ID_AUTO) id = pif_id++;
 801808c:	897b      	ldrh	r3, [r7, #10]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d106      	bne.n	80180a0 <pifRcPpm_Init+0x6c>
 8018092:	4b10      	ldr	r3, [pc, #64]	; (80180d4 <pifRcPpm_Init+0xa0>)
 8018094:	881b      	ldrh	r3, [r3, #0]
 8018096:	1c5a      	adds	r2, r3, #1
 8018098:	b291      	uxth	r1, r2
 801809a:	4a0e      	ldr	r2, [pc, #56]	; (80180d4 <pifRcPpm_Init+0xa0>)
 801809c:	8011      	strh	r1, [r2, #0]
 801809e:	817b      	strh	r3, [r7, #10]
    p_owner->parent._id = id;
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	897a      	ldrh	r2, [r7, #10]
 80180a4:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	2200      	movs	r2, #0
 80180aa:	70da      	strb	r2, [r3, #3]
	p_owner->_channel = -1;
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	22ff      	movs	r2, #255	; 0xff
 80180b0:	f883 2020 	strb.w	r2, [r3, #32]
	p_owner->__max_channel = channel_count;
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	7a7a      	ldrb	r2, [r7, #9]
 80180b8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    p_owner->__threshold_1us = threshold_1us;
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	88fa      	ldrh	r2, [r7, #6]
 80180c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    return TRUE;
 80180c4:	2301      	movs	r3, #1
}
 80180c6:	4618      	mov	r0, r3
 80180c8:	3710      	adds	r7, #16
 80180ca:	46bd      	mov	sp, r7
 80180cc:	bd80      	pop	{r7, pc}
 80180ce:	bf00      	nop
 80180d0:	20001c0d 	.word	0x20001c0d
 80180d4:	2000011c 	.word	0x2000011c

080180d8 <pifRcPpm_SetValidRange>:
		p_owner->__p_channel = NULL;
	}
}

BOOL pifRcPpm_SetValidRange(PifRcPpm* p_owner, uint32_t min, uint32_t max)
{
 80180d8:	b480      	push	{r7}
 80180da:	b085      	sub	sp, #20
 80180dc:	af00      	add	r7, sp, #0
 80180de:	60f8      	str	r0, [r7, #12]
 80180e0:	60b9      	str	r1, [r7, #8]
 80180e2:	607a      	str	r2, [r7, #4]
	p_owner->__valid_range.check = TRUE;
 80180e4:	68fa      	ldr	r2, [r7, #12]
 80180e6:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80180ea:	f043 0301 	orr.w	r3, r3, #1
 80180ee:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
	p_owner->__valid_range.min = min;
 80180f2:	68bb      	ldr	r3, [r7, #8]
 80180f4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80180f8:	b299      	uxth	r1, r3
 80180fa:	68fa      	ldr	r2, [r7, #12]
 80180fc:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 80180fe:	f361 034f 	bfi	r3, r1, #1, #15
 8018102:	8453      	strh	r3, [r2, #34]	; 0x22
	p_owner->__valid_range.max = max;
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	b29a      	uxth	r2, r3
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	849a      	strh	r2, [r3, #36]	; 0x24
	return TRUE;
 801810c:	2301      	movs	r3, #1
}
 801810e:	4618      	mov	r0, r3
 8018110:	3714      	adds	r7, #20
 8018112:	46bd      	mov	sp, r7
 8018114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018118:	4770      	bx	lr

0801811a <pifRcPpm_sigTick>:
	p_owner->__last_ptr = 0;
	p_owner->__count = 0;
}

uint16_t pifRcPpm_sigTick(PifRcPpm* p_owner, uint32_t time_us)
{
 801811a:	b580      	push	{r7, lr}
 801811c:	b084      	sub	sp, #16
 801811e:	af00      	add	r7, sp, #0
 8018120:	6078      	str	r0, [r7, #4]
 8018122:	6039      	str	r1, [r7, #0]
	uint16_t rtn = 0;
 8018124:	2300      	movs	r3, #0
 8018126:	81fb      	strh	r3, [r7, #14]

	p_owner->__pulse[p_owner->__ptr].falling = time_us;
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801812e:	687a      	ldr	r2, [r7, #4]
 8018130:	3305      	adds	r3, #5
 8018132:	00db      	lsls	r3, r3, #3
 8018134:	4413      	add	r3, r2
 8018136:	683a      	ldr	r2, [r7, #0]
 8018138:	605a      	str	r2, [r3, #4]
	rtn = _processRcPpm(p_owner, p_owner->__pulse[p_owner->__ptr].falling - p_owner->__pulse[p_owner->__last_ptr].falling);
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018140:	687a      	ldr	r2, [r7, #4]
 8018142:	3305      	adds	r3, #5
 8018144:	00db      	lsls	r3, r3, #3
 8018146:	4413      	add	r3, r2
 8018148:	685b      	ldr	r3, [r3, #4]
 801814a:	b29a      	uxth	r2, r3
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8018152:	6879      	ldr	r1, [r7, #4]
 8018154:	3305      	adds	r3, #5
 8018156:	00db      	lsls	r3, r3, #3
 8018158:	440b      	add	r3, r1
 801815a:	685b      	ldr	r3, [r3, #4]
 801815c:	b29b      	uxth	r3, r3
 801815e:	1ad3      	subs	r3, r2, r3
 8018160:	b29b      	uxth	r3, r3
 8018162:	4619      	mov	r1, r3
 8018164:	6878      	ldr	r0, [r7, #4]
 8018166:	f7ff fe9b 	bl	8017ea0 <_processRcPpm>
 801816a:	4603      	mov	r3, r0
 801816c:	81fb      	strh	r3, [r7, #14]
	p_owner->__last_ptr = p_owner->__ptr;
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	p_owner->__ptr = (p_owner->__ptr + 1) & PIF_RC_PPM_DATA_MASK;
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018180:	3301      	adds	r3, #1
 8018182:	b2db      	uxtb	r3, r3
 8018184:	f003 0303 	and.w	r3, r3, #3
 8018188:	b2da      	uxtb	r2, r3
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	if (p_owner->__count < PIF_RC_PPM_DATA_SIZE) p_owner->__count++;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8018196:	2b03      	cmp	r3, #3
 8018198:	d807      	bhi.n	80181aa <pifRcPpm_sigTick+0x90>
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80181a0:	3301      	adds	r3, #1
 80181a2:	b2da      	uxtb	r2, r3
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	return rtn;
 80181aa:	89fb      	ldrh	r3, [r7, #14]
}
 80181ac:	4618      	mov	r0, r3
 80181ae:	3710      	adds	r7, #16
 80181b0:	46bd      	mov	sp, r7
 80181b2:	bd80      	pop	{r7, pc}

080181b4 <pifRcPwm_Init>:
	return rtn;
}


BOOL pifRcPwm_Init(PifRcPwm* p_owner, PifId id, uint8_t channel_count)
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	b082      	sub	sp, #8
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	6078      	str	r0, [r7, #4]
 80181bc:	460b      	mov	r3, r1
 80181be:	807b      	strh	r3, [r7, #2]
 80181c0:	4613      	mov	r3, r2
 80181c2:	707b      	strb	r3, [r7, #1]
    if (!p_owner) {
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d104      	bne.n	80181d4 <pifRcPwm_Init+0x20>
        pif_error = E_INVALID_PARAM;
 80181ca:	4b25      	ldr	r3, [pc, #148]	; (8018260 <pifRcPwm_Init+0xac>)
 80181cc:	2201      	movs	r2, #1
 80181ce:	701a      	strb	r2, [r3, #0]
        return FALSE;
 80181d0:	2300      	movs	r3, #0
 80181d2:	e041      	b.n	8018258 <pifRcPwm_Init+0xa4>
    }

	memset(p_owner, 0, sizeof(PifRcPwm));
 80181d4:	2230      	movs	r2, #48	; 0x30
 80181d6:	2100      	movs	r1, #0
 80181d8:	6878      	ldr	r0, [r7, #4]
 80181da:	f00a fc5d 	bl	8022a98 <memset>

	p_owner->__p_data = calloc(sizeof(PifRcPwmData), channel_count);
 80181de:	787b      	ldrb	r3, [r7, #1]
 80181e0:	4619      	mov	r1, r3
 80181e2:	2024      	movs	r0, #36	; 0x24
 80181e4:	f00a fc08 	bl	80229f8 <calloc>
 80181e8:	4603      	mov	r3, r0
 80181ea:	461a      	mov	r2, r3
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	629a      	str	r2, [r3, #40]	; 0x28
    if (!p_owner->__p_data) {
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d108      	bne.n	801820a <pifRcPwm_Init+0x56>
		pif_error = E_OUT_OF_HEAP;
 80181f8:	4b19      	ldr	r3, [pc, #100]	; (8018260 <pifRcPwm_Init+0xac>)
 80181fa:	2203      	movs	r2, #3
 80181fc:	701a      	strb	r2, [r3, #0]
        goto fail;
 80181fe:	bf00      	nop
	p_owner->parent._failsafe = FALSE;
	p_owner->__max_channel = channel_count;
    return TRUE;

fail:
	pifRcPwm_Clear(p_owner);
 8018200:	6878      	ldr	r0, [r7, #4]
 8018202:	f000 f831 	bl	8018268 <pifRcPwm_Clear>
	return FALSE;
 8018206:	2300      	movs	r3, #0
 8018208:	e026      	b.n	8018258 <pifRcPwm_Init+0xa4>
    p_owner->__p_channel = calloc(sizeof(uint16_t), channel_count);
 801820a:	787b      	ldrb	r3, [r7, #1]
 801820c:	4619      	mov	r1, r3
 801820e:	2002      	movs	r0, #2
 8018210:	f00a fbf2 	bl	80229f8 <calloc>
 8018214:	4603      	mov	r3, r0
 8018216:	461a      	mov	r2, r3
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	62da      	str	r2, [r3, #44]	; 0x2c
    if (!p_owner->__p_channel) {
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018220:	2b00      	cmp	r3, #0
 8018222:	d104      	bne.n	801822e <pifRcPwm_Init+0x7a>
		pif_error = E_OUT_OF_HEAP;
 8018224:	4b0e      	ldr	r3, [pc, #56]	; (8018260 <pifRcPwm_Init+0xac>)
 8018226:	2203      	movs	r2, #3
 8018228:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801822a:	2300      	movs	r3, #0
 801822c:	e014      	b.n	8018258 <pifRcPwm_Init+0xa4>
    if (id == PIF_ID_AUTO) id = pif_id++;
 801822e:	887b      	ldrh	r3, [r7, #2]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d106      	bne.n	8018242 <pifRcPwm_Init+0x8e>
 8018234:	4b0b      	ldr	r3, [pc, #44]	; (8018264 <pifRcPwm_Init+0xb0>)
 8018236:	881b      	ldrh	r3, [r3, #0]
 8018238:	1c5a      	adds	r2, r3, #1
 801823a:	b291      	uxth	r1, r2
 801823c:	4a09      	ldr	r2, [pc, #36]	; (8018264 <pifRcPwm_Init+0xb0>)
 801823e:	8011      	strh	r1, [r2, #0]
 8018240:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	887a      	ldrh	r2, [r7, #2]
 8018246:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2200      	movs	r2, #0
 801824c:	70da      	strb	r2, [r3, #3]
	p_owner->__max_channel = channel_count;
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	787a      	ldrb	r2, [r7, #1]
 8018252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return TRUE;
 8018256:	2301      	movs	r3, #1
}
 8018258:	4618      	mov	r0, r3
 801825a:	3708      	adds	r7, #8
 801825c:	46bd      	mov	sp, r7
 801825e:	bd80      	pop	{r7, pc}
 8018260:	20001c0d 	.word	0x20001c0d
 8018264:	2000011c 	.word	0x2000011c

08018268 <pifRcPwm_Clear>:

void pifRcPwm_Clear(PifRcPwm* p_owner)
{
 8018268:	b580      	push	{r7, lr}
 801826a:	b082      	sub	sp, #8
 801826c:	af00      	add	r7, sp, #0
 801826e:	6078      	str	r0, [r7, #4]
	if (p_owner->__p_channel) {
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018274:	2b00      	cmp	r3, #0
 8018276:	d007      	beq.n	8018288 <pifRcPwm_Clear+0x20>
		free(p_owner->__p_channel);
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801827c:	4618      	mov	r0, r3
 801827e:	f00a fbf5 	bl	8022a6c <free>
		p_owner->__p_channel = NULL;
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	2200      	movs	r2, #0
 8018286:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	if (p_owner->__p_data) {
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801828c:	2b00      	cmp	r3, #0
 801828e:	d007      	beq.n	80182a0 <pifRcPwm_Clear+0x38>
		free(p_owner->__p_data);
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018294:	4618      	mov	r0, r3
 8018296:	f00a fbe9 	bl	8022a6c <free>
		p_owner->__p_data = NULL;
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	2200      	movs	r2, #0
 801829e:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 80182a0:	bf00      	nop
 80182a2:	3708      	adds	r7, #8
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd80      	pop	{r7, pc}

080182a8 <pifRcPwm_SetValidRange>:

BOOL pifRcPwm_SetValidRange(PifRcPwm* p_owner, uint32_t min, uint32_t max)
{
 80182a8:	b480      	push	{r7}
 80182aa:	b085      	sub	sp, #20
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	60f8      	str	r0, [r7, #12]
 80182b0:	60b9      	str	r1, [r7, #8]
 80182b2:	607a      	str	r2, [r7, #4]
	p_owner->__valid_range.check = TRUE;
 80182b4:	68fa      	ldr	r2, [r7, #12]
 80182b6:	f892 3020 	ldrb.w	r3, [r2, #32]
 80182ba:	f043 0301 	orr.w	r3, r3, #1
 80182be:	f882 3020 	strb.w	r3, [r2, #32]
	p_owner->__valid_range.min = min;
 80182c2:	68bb      	ldr	r3, [r7, #8]
 80182c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80182c8:	b299      	uxth	r1, r3
 80182ca:	68fa      	ldr	r2, [r7, #12]
 80182cc:	8c13      	ldrh	r3, [r2, #32]
 80182ce:	f361 034f 	bfi	r3, r1, #1, #15
 80182d2:	8413      	strh	r3, [r2, #32]
	p_owner->__valid_range.max = max;
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	b29a      	uxth	r2, r3
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	845a      	strh	r2, [r3, #34]	; 0x22
	return TRUE;
 80182dc:	2301      	movs	r3, #1
}
 80182de:	4618      	mov	r0, r3
 80182e0:	3714      	adds	r7, #20
 80182e2:	46bd      	mov	sp, r7
 80182e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e8:	4770      	bx	lr

080182ea <pifGy86_Detect>:
#include "core/pif_log.h"
#include "sensor/pif_gy86.h"


BOOL pifGy86_Detect(PifI2cPort* p_i2c)
{
 80182ea:	b580      	push	{r7, lr}
 80182ec:	b082      	sub	sp, #8
 80182ee:	af00      	add	r7, sp, #0
 80182f0:	6078      	str	r0, [r7, #4]
    if (!pifMpu60x0_Detect(p_i2c, MPU60X0_I2C_ADDR(0))) return FALSE;
 80182f2:	2168      	movs	r1, #104	; 0x68
 80182f4:	6878      	ldr	r0, [r7, #4]
 80182f6:	f001 f9b9 	bl	801966c <pifMpu60x0_Detect>
 80182fa:	4603      	mov	r3, r0
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d101      	bne.n	8018304 <pifGy86_Detect+0x1a>
 8018300:	2300      	movs	r3, #0
 8018302:	e000      	b.n	8018306 <pifGy86_Detect+0x1c>
//    if (!pifHmc5883_Detect(p_i2c)) return FALSE;
    return TRUE;
 8018304:	2301      	movs	r3, #1
}
 8018306:	4618      	mov	r0, r3
 8018308:	3708      	adds	r7, #8
 801830a:	46bd      	mov	sp, r7
 801830c:	bd80      	pop	{r7, pc}
	...

08018310 <pifGy86_Init>:

BOOL pifGy86_Init(PifGy86* p_owner, PifId id, PifI2cPort* p_i2c, PifGy86Param* p_param, PifImuSensor* p_imu_sensor)
{
 8018310:	b580      	push	{r7, lr}
 8018312:	b08c      	sub	sp, #48	; 0x30
 8018314:	af02      	add	r7, sp, #8
 8018316:	60f8      	str	r0, [r7, #12]
 8018318:	607a      	str	r2, [r7, #4]
 801831a:	603b      	str	r3, [r7, #0]
 801831c:	460b      	mov	r3, r1
 801831e:	817b      	strh	r3, [r7, #10]
	PifMpu60x0I2cSlvAddr i2c_slv_addr;
	PifMpu60x0I2cSlvCtrl i2c_slv_ctrl;
	PifMpu60x0IntEnable int_enable;
	PifMpu60x0IntPinCfg int_pin_cfg;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d005      	beq.n	8018332 <pifGy86_Init+0x22>
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d002      	beq.n	8018332 <pifGy86_Init+0x22>
 801832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801832e:	2b00      	cmp	r3, #0
 8018330:	d104      	bne.n	801833c <pifGy86_Init+0x2c>
		pif_error = E_INVALID_PARAM;
 8018332:	4b91      	ldr	r3, [pc, #580]	; (8018578 <pifGy86_Init+0x268>)
 8018334:	2201      	movs	r2, #1
 8018336:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018338:	2300      	movs	r3, #0
 801833a:	e119      	b.n	8018570 <pifGy86_Init+0x260>
	}

	memset(p_owner, 0, sizeof(PifGy86));
 801833c:	2264      	movs	r2, #100	; 0x64
 801833e:	2100      	movs	r1, #0
 8018340:	68f8      	ldr	r0, [r7, #12]
 8018342:	f00a fba9 	bl	8022a98 <memset>

    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), &p_param->mpu60x0, p_imu_sensor)) goto fail;
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	1d18      	adds	r0, r3, #4
 801834a:	683b      	ldr	r3, [r7, #0]
 801834c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801834e:	9201      	str	r2, [sp, #4]
 8018350:	9300      	str	r3, [sp, #0]
 8018352:	2368      	movs	r3, #104	; 0x68
 8018354:	687a      	ldr	r2, [r7, #4]
 8018356:	2100      	movs	r1, #0
 8018358:	f001 f9ce 	bl	80196f8 <pifMpu60x0_Init>
 801835c:	4603      	mov	r3, r0
 801835e:	2b00      	cmp	r3, #0
 8018360:	f000 80e9 	beq.w	8018536 <pifGy86_Init+0x226>

    i2c_mst_ctrl.byte = 0;
 8018364:	2300      	movs	r3, #0
 8018366:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_mst_ctrl.bit.i2c_mst_clk = p_param ? p_param->mpu60x0_i2c_mst_clk : MPU60X0_I2C_MST_CLK_400KHZ;
 801836a:	683b      	ldr	r3, [r7, #0]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d005      	beq.n	801837c <pifGy86_Init+0x6c>
 8018370:	683b      	ldr	r3, [r7, #0]
 8018372:	795b      	ldrb	r3, [r3, #5]
 8018374:	f003 030f 	and.w	r3, r3, #15
 8018378:	b2da      	uxtb	r2, r3
 801837a:	e000      	b.n	801837e <pifGy86_Init+0x6e>
 801837c:	220d      	movs	r2, #13
 801837e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018382:	f362 0303 	bfi	r3, r2, #0, #4
 8018386:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	68db      	ldr	r3, [r3, #12]
 801838e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8018392:	2124      	movs	r1, #36	; 0x24
 8018394:	4618      	mov	r0, r3
 8018396:	f7fa f843 	bl	8012420 <pifI2cDevice_WriteRegByte>
 801839a:	4603      	mov	r3, r0
 801839c:	2b00      	cmp	r3, #0
 801839e:	f000 80cc 	beq.w	801853a <pifGy86_Init+0x22a>

    int_pin_cfg.byte = 0;
 80183a2:	2300      	movs	r3, #0
 80183a4:	753b      	strb	r3, [r7, #20]
    int_pin_cfg.bit.int_rd_clear = TRUE;
 80183a6:	7d3b      	ldrb	r3, [r7, #20]
 80183a8:	f043 0310 	orr.w	r3, r3, #16
 80183ac:	753b      	strb	r3, [r7, #20]
    int_pin_cfg.bit.i2c_bypass_en = TRUE;
 80183ae:	7d3b      	ldrb	r3, [r7, #20]
 80183b0:	f043 0302 	orr.w	r3, r3, #2
 80183b4:	753b      	strb	r3, [r7, #20]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	68db      	ldr	r3, [r3, #12]
 80183ba:	7d3a      	ldrb	r2, [r7, #20]
 80183bc:	2137      	movs	r1, #55	; 0x37
 80183be:	4618      	mov	r0, r3
 80183c0:	f7fa f82e 	bl	8012420 <pifI2cDevice_WriteRegByte>
 80183c4:	4603      	mov	r3, r0
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	f000 80b9 	beq.w	801853e <pifGy86_Init+0x22e>

    int_enable.byte = 0;
 80183cc:	2300      	movs	r3, #0
 80183ce:	763b      	strb	r3, [r7, #24]
    int_enable.bit.data_rdy_en = TRUE;
 80183d0:	7e3b      	ldrb	r3, [r7, #24]
 80183d2:	f043 0301 	orr.w	r3, r3, #1
 80183d6:	763b      	strb	r3, [r7, #24]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	68db      	ldr	r3, [r3, #12]
 80183dc:	7e3a      	ldrb	r2, [r7, #24]
 80183de:	2138      	movs	r1, #56	; 0x38
 80183e0:	4618      	mov	r0, r3
 80183e2:	f7fa f81d 	bl	8012420 <pifI2cDevice_WriteRegByte>
 80183e6:	4603      	mov	r3, r0
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	f000 80aa 	beq.w	8018542 <pifGy86_Init+0x232>

    pif_Delay1ms(10);
 80183ee:	200a      	movs	r0, #10
 80183f0:	f7f8 fe2e 	bl	8011050 <pif_Delay1ms>

    if (!pifHmc5883_Detect(p_i2c)) goto fail;
 80183f4:	6878      	ldr	r0, [r7, #4]
 80183f6:	f000 fab5 	bl	8018964 <pifHmc5883_Detect>
 80183fa:	4603      	mov	r3, r0
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	f000 80a2 	beq.w	8018546 <pifGy86_Init+0x236>

    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, &p_param->hmc5883, p_imu_sensor)) goto fail;
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	f103 0014 	add.w	r0, r3, #20
 8018408:	683b      	ldr	r3, [r7, #0]
 801840a:	1d9a      	adds	r2, r3, #6
 801840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801840e:	9300      	str	r3, [sp, #0]
 8018410:	4613      	mov	r3, r2
 8018412:	687a      	ldr	r2, [r7, #4]
 8018414:	2100      	movs	r1, #0
 8018416:	f000 faf7 	bl	8018a08 <pifHmc5883_Init>
 801841a:	4603      	mov	r3, r0
 801841c:	2b00      	cmp	r3, #0
 801841e:	f000 8094 	beq.w	801854a <pifGy86_Init+0x23a>

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	68d8      	ldr	r0, [r3, #12]
 8018426:	2300      	movs	r3, #0
 8018428:	f240 1201 	movw	r2, #257	; 0x101
 801842c:	2137      	movs	r1, #55	; 0x37
 801842e:	f7fa f80d 	bl	801244c <pifI2cDevice_WriteRegBit8>
 8018432:	4603      	mov	r3, r0
 8018434:	2b00      	cmp	r3, #0
 8018436:	f000 808a 	beq.w	801854e <pifGy86_Init+0x23e>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, 0x01)) goto fail; // DATA_RDY_EN interrupt enable
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	68db      	ldr	r3, [r3, #12]
 801843e:	2201      	movs	r2, #1
 8018440:	2138      	movs	r1, #56	; 0x38
 8018442:	4618      	mov	r0, r3
 8018444:	f7f9 ffec 	bl	8012420 <pifI2cDevice_WriteRegByte>
 8018448:	4603      	mov	r3, r0
 801844a:	2b00      	cmp	r3, #0
 801844c:	f000 8081 	beq.w	8018552 <pifGy86_Init+0x242>

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	68d8      	ldr	r0, [r3, #12]
 8018454:	2301      	movs	r3, #1
 8018456:	f240 5201 	movw	r2, #1281	; 0x501
 801845a:	216a      	movs	r1, #106	; 0x6a
 801845c:	f7f9 fff6 	bl	801244c <pifI2cDevice_WriteRegBit8>
 8018460:	4603      	mov	r3, r0
 8018462:	2b00      	cmp	r3, #0
 8018464:	d077      	beq.n	8018556 <pifGy86_Init+0x246>

    i2c_slv_addr.byte = 0;
 8018466:	2300      	movs	r3, #0
 8018468:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_addr.bit.i2c_slv_addr = HMC5883_I2C_ADDR;
 801846c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018470:	221e      	movs	r2, #30
 8018472:	f362 0306 	bfi	r3, r2, #0, #7
 8018476:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_addr.bit.i2c_slv_rw = TRUE;
 801847a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801847e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018482:	f887 3020 	strb.w	r3, [r7, #32]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	68db      	ldr	r3, [r3, #12]
 801848a:	f897 2020 	ldrb.w	r2, [r7, #32]
 801848e:	2125      	movs	r1, #37	; 0x25
 8018490:	4618      	mov	r0, r3
 8018492:	f7f9 ffc5 	bl	8012420 <pifI2cDevice_WriteRegByte>
 8018496:	4603      	mov	r3, r0
 8018498:	2b00      	cmp	r3, #0
 801849a:	d05e      	beq.n	801855a <pifGy86_Init+0x24a>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	68db      	ldr	r3, [r3, #12]
 80184a0:	2203      	movs	r2, #3
 80184a2:	2126      	movs	r1, #38	; 0x26
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7f9 ffbb 	bl	8012420 <pifI2cDevice_WriteRegByte>
 80184aa:	4603      	mov	r3, r0
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d056      	beq.n	801855e <pifGy86_Init+0x24e>

    i2c_slv_ctrl.byte = 0;
 80184b0:	2300      	movs	r3, #0
 80184b2:	773b      	strb	r3, [r7, #28]
    i2c_slv_ctrl.bit.i2c_slv_len = 6;
 80184b4:	7f3b      	ldrb	r3, [r7, #28]
 80184b6:	2206      	movs	r2, #6
 80184b8:	f362 0303 	bfi	r3, r2, #0, #4
 80184bc:	773b      	strb	r3, [r7, #28]
    i2c_slv_ctrl.bit.i2c_slv_en = TRUE;
 80184be:	7f3b      	ldrb	r3, [r7, #28]
 80184c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80184c4:	773b      	strb	r3, [r7, #28]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	68db      	ldr	r3, [r3, #12]
 80184ca:	7f3a      	ldrb	r2, [r7, #28]
 80184cc:	2127      	movs	r1, #39	; 0x27
 80184ce:	4618      	mov	r0, r3
 80184d0:	f7f9 ffa6 	bl	8012420 <pifI2cDevice_WriteRegByte>
 80184d4:	4603      	mov	r3, r0
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d043      	beq.n	8018562 <pifGy86_Init+0x252>

    if (p_param && p_param->ms5611.evt_read) {
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d011      	beq.n	8018504 <pifGy86_Init+0x1f4>
 80184e0:	683b      	ldr	r3, [r7, #0]
 80184e2:	691b      	ldr	r3, [r3, #16]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d00d      	beq.n	8018504 <pifGy86_Init+0x1f4>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1), &p_param->ms5611)) goto fail;
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80184ee:	683b      	ldr	r3, [r7, #0]
 80184f0:	330c      	adds	r3, #12
 80184f2:	9300      	str	r3, [sp, #0]
 80184f4:	2377      	movs	r3, #119	; 0x77
 80184f6:	687a      	ldr	r2, [r7, #4]
 80184f8:	2100      	movs	r1, #0
 80184fa:	f001 ff59 	bl	801a3b0 <pifMs5611_Init>
 80184fe:	4603      	mov	r3, r0
 8018500:	2b00      	cmp	r3, #0
 8018502:	d030      	beq.n	8018566 <pifGy86_Init+0x256>
    }

	if (id == PIF_ID_AUTO) id = pif_id++;
 8018504:	897b      	ldrh	r3, [r7, #10]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d106      	bne.n	8018518 <pifGy86_Init+0x208>
 801850a:	4b1c      	ldr	r3, [pc, #112]	; (801857c <pifGy86_Init+0x26c>)
 801850c:	881b      	ldrh	r3, [r3, #0]
 801850e:	1c5a      	adds	r2, r3, #1
 8018510:	b291      	uxth	r1, r2
 8018512:	4a1a      	ldr	r2, [pc, #104]	; (801857c <pifGy86_Init+0x26c>)
 8018514:	8011      	strh	r1, [r2, #0]
 8018516:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	897a      	ldrh	r2, [r7, #10]
 801851c:	801a      	strh	r2, [r3, #0]
    p_owner->__mag_start_reg = 0;
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	2200      	movs	r2, #0
 8018522:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifGy86_ReadMag;
 8018526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018528:	4a15      	ldr	r2, [pc, #84]	; (8018580 <pifGy86_Init+0x270>)
 801852a:	62da      	str	r2, [r3, #44]	; 0x2c
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 801852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801852e:	68fa      	ldr	r2, [r7, #12]
 8018530:	631a      	str	r2, [r3, #48]	; 0x30
    return TRUE;
 8018532:	2301      	movs	r3, #1
 8018534:	e01c      	b.n	8018570 <pifGy86_Init+0x260>
    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), &p_param->mpu60x0, p_imu_sensor)) goto fail;
 8018536:	bf00      	nop
 8018538:	e016      	b.n	8018568 <pifGy86_Init+0x258>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 801853a:	bf00      	nop
 801853c:	e014      	b.n	8018568 <pifGy86_Init+0x258>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 801853e:	bf00      	nop
 8018540:	e012      	b.n	8018568 <pifGy86_Init+0x258>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 8018542:	bf00      	nop
 8018544:	e010      	b.n	8018568 <pifGy86_Init+0x258>
    if (!pifHmc5883_Detect(p_i2c)) goto fail;
 8018546:	bf00      	nop
 8018548:	e00e      	b.n	8018568 <pifGy86_Init+0x258>
    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, &p_param->hmc5883, p_imu_sensor)) goto fail;
 801854a:	bf00      	nop
 801854c:	e00c      	b.n	8018568 <pifGy86_Init+0x258>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 801854e:	bf00      	nop
 8018550:	e00a      	b.n	8018568 <pifGy86_Init+0x258>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, 0x01)) goto fail; // DATA_RDY_EN interrupt enable
 8018552:	bf00      	nop
 8018554:	e008      	b.n	8018568 <pifGy86_Init+0x258>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8018556:	bf00      	nop
 8018558:	e006      	b.n	8018568 <pifGy86_Init+0x258>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 801855a:	bf00      	nop
 801855c:	e004      	b.n	8018568 <pifGy86_Init+0x258>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 801855e:	bf00      	nop
 8018560:	e002      	b.n	8018568 <pifGy86_Init+0x258>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 8018562:	bf00      	nop
 8018564:	e000      	b.n	8018568 <pifGy86_Init+0x258>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1), &p_param->ms5611)) goto fail;
 8018566:	bf00      	nop

fail:
	pifGy86_Clear(p_owner);
 8018568:	68f8      	ldr	r0, [r7, #12]
 801856a:	f000 f80b 	bl	8018584 <pifGy86_Clear>
	return FALSE;
 801856e:	2300      	movs	r3, #0
}
 8018570:	4618      	mov	r0, r3
 8018572:	3728      	adds	r7, #40	; 0x28
 8018574:	46bd      	mov	sp, r7
 8018576:	bd80      	pop	{r7, pc}
 8018578:	20001c0d 	.word	0x20001c0d
 801857c:	2000011c 	.word	0x2000011c
 8018580:	080185b3 	.word	0x080185b3

08018584 <pifGy86_Clear>:

void pifGy86_Clear(PifGy86* p_owner)
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b082      	sub	sp, #8
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
    pifMs5611_Clear(&p_owner->_ms5611);
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	332c      	adds	r3, #44	; 0x2c
 8018590:	4618      	mov	r0, r3
 8018592:	f001 ffa5 	bl	801a4e0 <pifMs5611_Clear>
    pifHmc5883_Clear(&p_owner->_hmc5883);
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	3314      	adds	r3, #20
 801859a:	4618      	mov	r0, r3
 801859c:	f000 fc04 	bl	8018da8 <pifHmc5883_Clear>
    pifMpu60x0_Clear(&p_owner->_mpu6050);
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	3304      	adds	r3, #4
 80185a4:	4618      	mov	r0, r3
 80185a6:	f001 f9f1 	bl	801998c <pifMpu60x0_Clear>
}
 80185aa:	bf00      	nop
 80185ac:	3708      	adds	r7, #8
 80185ae:	46bd      	mov	sp, r7
 80185b0:	bd80      	pop	{r7, pc}

080185b2 <pifGy86_ReadMag>:

BOOL pifGy86_ReadMag(PifGy86* p_owner, int16_t* p_mag)
{
 80185b2:	b580      	push	{r7, lr}
 80185b4:	b084      	sub	sp, #16
 80185b6:	af00      	add	r7, sp, #0
 80185b8:	6078      	str	r0, [r7, #4]
 80185ba:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_mpu6050._p_i2c, MPU60X0_REG_EXT_SENS_DATA_00 + p_owner->__mag_start_reg, data, 6)) return FALSE;
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	68d8      	ldr	r0, [r3, #12]
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80185c6:	3349      	adds	r3, #73	; 0x49
 80185c8:	b2d9      	uxtb	r1, r3
 80185ca:	f107 0208 	add.w	r2, r7, #8
 80185ce:	2306      	movs	r3, #6
 80185d0:	f7f9 fe2e 	bl	8012230 <pifI2cDevice_ReadRegBytes>
 80185d4:	4603      	mov	r3, r0
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d101      	bne.n	80185de <pifGy86_ReadMag+0x2c>
 80185da:	2300      	movs	r3, #0
 80185dc:	e04d      	b.n	801867a <pifGy86_ReadMag+0xc8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->_hmc5883.scale[AXIS_X];
 80185de:	7a3b      	ldrb	r3, [r7, #8]
 80185e0:	b29b      	uxth	r3, r3
 80185e2:	021b      	lsls	r3, r3, #8
 80185e4:	b29a      	uxth	r2, r3
 80185e6:	7a7b      	ldrb	r3, [r7, #9]
 80185e8:	b29b      	uxth	r3, r3
 80185ea:	4413      	add	r3, r2
 80185ec:	b29b      	uxth	r3, r3
 80185ee:	b21b      	sxth	r3, r3
 80185f0:	ee07 3a90 	vmov	s15, r3
 80185f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80185fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018606:	ee17 3a90 	vmov	r3, s15
 801860a:	b21a      	sxth	r2, r3
 801860c:	683b      	ldr	r3, [r7, #0]
 801860e:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->_hmc5883.scale[AXIS_Z];
 8018610:	7abb      	ldrb	r3, [r7, #10]
 8018612:	b29b      	uxth	r3, r3
 8018614:	021b      	lsls	r3, r3, #8
 8018616:	b29a      	uxth	r2, r3
 8018618:	7afb      	ldrb	r3, [r7, #11]
 801861a:	b29b      	uxth	r3, r3
 801861c:	4413      	add	r3, r2
 801861e:	b29b      	uxth	r3, r3
 8018620:	b21b      	sxth	r3, r3
 8018622:	ee07 3a90 	vmov	s15, r3
 8018626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	edd3 7a07 	vldr	s15, [r3, #28]
 8018630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018634:	683b      	ldr	r3, [r7, #0]
 8018636:	3304      	adds	r3, #4
 8018638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801863c:	ee17 2a90 	vmov	r2, s15
 8018640:	b212      	sxth	r2, r2
 8018642:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->_hmc5883.scale[AXIS_Y];
 8018644:	7b3b      	ldrb	r3, [r7, #12]
 8018646:	b29b      	uxth	r3, r3
 8018648:	021b      	lsls	r3, r3, #8
 801864a:	b29a      	uxth	r2, r3
 801864c:	7b7b      	ldrb	r3, [r7, #13]
 801864e:	b29b      	uxth	r3, r3
 8018650:	4413      	add	r3, r2
 8018652:	b29b      	uxth	r3, r3
 8018654:	b21b      	sxth	r3, r3
 8018656:	ee07 3a90 	vmov	s15, r3
 801865a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	edd3 7a06 	vldr	s15, [r3, #24]
 8018664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018668:	683b      	ldr	r3, [r7, #0]
 801866a:	3302      	adds	r3, #2
 801866c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018670:	ee17 2a90 	vmov	r2, s15
 8018674:	b212      	sxth	r2, r2
 8018676:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8018678:	2301      	movs	r3, #1
}
 801867a:	4618      	mov	r0, r3
 801867c:	3710      	adds	r7, #16
 801867e:	46bd      	mov	sp, r7
 8018680:	bd80      	pop	{r7, pc}

08018682 <_doTask>:
#include "core/pif_task.h"
#include "sensor/pif_hc_sr04.h"


static uint16_t _doTask(PifTask* p_task)
{
 8018682:	b580      	push	{r7, lr}
 8018684:	b084      	sub	sp, #16
 8018686:	af00      	add	r7, sp, #0
 8018688:	6078      	str	r0, [r7, #4]
	PifHcSr04* p_owner = (PifHcSr04*)p_task->_p_client;
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	68db      	ldr	r3, [r3, #12]
 801868e:	60fb      	str	r3, [r7, #12]

	switch (p_owner->__state) {
 8018690:	68fb      	ldr	r3, [r7, #12]
 8018692:	7d1b      	ldrb	r3, [r3, #20]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d002      	beq.n	801869e <_doTask+0x1c>
 8018698:	2b03      	cmp	r3, #3
 801869a:	d004      	beq.n	80186a6 <_doTask+0x24>
		if (p_owner->evt_read) (*p_owner->evt_read)(p_owner->__distance);
		p_owner->__state = HSS_READY;
		break;

	default:
		break;
 801869c:	e011      	b.n	80186c2 <_doTask+0x40>
		pifHcSr04_Trigger(p_owner);
 801869e:	68f8      	ldr	r0, [r7, #12]
 80186a0:	f000 f866 	bl	8018770 <pifHcSr04_Trigger>
		break;
 80186a4:	e00d      	b.n	80186c2 <_doTask+0x40>
		if (p_owner->evt_read) (*p_owner->evt_read)(p_owner->__distance);
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	685b      	ldr	r3, [r3, #4]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d005      	beq.n	80186ba <_doTask+0x38>
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	685b      	ldr	r3, [r3, #4]
 80186b2:	68fa      	ldr	r2, [r7, #12]
 80186b4:	69d2      	ldr	r2, [r2, #28]
 80186b6:	4610      	mov	r0, r2
 80186b8:	4798      	blx	r3
		p_owner->__state = HSS_READY;
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	2200      	movs	r2, #0
 80186be:	751a      	strb	r2, [r3, #20]
		break;
 80186c0:	bf00      	nop
	}
	return 0;
 80186c2:	2300      	movs	r3, #0
}
 80186c4:	4618      	mov	r0, r3
 80186c6:	3710      	adds	r7, #16
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd80      	pop	{r7, pc}

080186cc <pifHcSr04_Init>:

BOOL pifHcSr04_Init(PifHcSr04* p_owner, PifId id)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b084      	sub	sp, #16
 80186d0:	af02      	add	r7, sp, #8
 80186d2:	6078      	str	r0, [r7, #4]
 80186d4:	460b      	mov	r3, r1
 80186d6:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d104      	bne.n	80186e8 <pifHcSr04_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80186de:	4b1f      	ldr	r3, [pc, #124]	; (801875c <pifHcSr04_Init+0x90>)
 80186e0:	2201      	movs	r2, #1
 80186e2:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 80186e4:	2300      	movs	r3, #0
 80186e6:	e035      	b.n	8018754 <pifHcSr04_Init+0x88>
	}

	if (!pif_act_timer1us) {
 80186e8:	4b1d      	ldr	r3, [pc, #116]	; (8018760 <pifHcSr04_Init+0x94>)
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d104      	bne.n	80186fa <pifHcSr04_Init+0x2e>
		pif_error = E_CANNOT_USE;
 80186f0:	4b1a      	ldr	r3, [pc, #104]	; (801875c <pifHcSr04_Init+0x90>)
 80186f2:	2209      	movs	r2, #9
 80186f4:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 80186f6:	2300      	movs	r3, #0
 80186f8:	e02c      	b.n	8018754 <pifHcSr04_Init+0x88>
	}

	memset(p_owner, 0, sizeof(PifHcSr04));
 80186fa:	2220      	movs	r2, #32
 80186fc:	2100      	movs	r1, #0
 80186fe:	6878      	ldr	r0, [r7, #4]
 8018700:	f00a f9ca 	bl	8022a98 <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_PERIOD_MS, 50, _doTask, p_owner, FALSE);
 8018704:	2300      	movs	r3, #0
 8018706:	9300      	str	r3, [sp, #0]
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	4a16      	ldr	r2, [pc, #88]	; (8018764 <pifHcSr04_Init+0x98>)
 801870c:	2132      	movs	r1, #50	; 0x32
 801870e:	2002      	movs	r0, #2
 8018710:	f7fb ff68 	bl	80145e4 <pifTaskManager_Add>
 8018714:	4602      	mov	r2, r0
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	60da      	str	r2, [r3, #12]
	if (!p_owner->_p_task) return FALSE;
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	68db      	ldr	r3, [r3, #12]
 801871e:	2b00      	cmp	r3, #0
 8018720:	d101      	bne.n	8018726 <pifHcSr04_Init+0x5a>
 8018722:	2300      	movs	r3, #0
 8018724:	e016      	b.n	8018754 <pifHcSr04_Init+0x88>
	p_owner->_p_task->name = "HC_SR04";
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	68db      	ldr	r3, [r3, #12]
 801872a:	4a0f      	ldr	r2, [pc, #60]	; (8018768 <pifHcSr04_Init+0x9c>)
 801872c:	601a      	str	r2, [r3, #0]

	if (id == PIF_ID_AUTO) id = pif_id++;
 801872e:	887b      	ldrh	r3, [r7, #2]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d106      	bne.n	8018742 <pifHcSr04_Init+0x76>
 8018734:	4b0d      	ldr	r3, [pc, #52]	; (801876c <pifHcSr04_Init+0xa0>)
 8018736:	881b      	ldrh	r3, [r3, #0]
 8018738:	1c5a      	adds	r2, r3, #1
 801873a:	b291      	uxth	r1, r2
 801873c:	4a0b      	ldr	r2, [pc, #44]	; (801876c <pifHcSr04_Init+0xa0>)
 801873e:	8011      	strh	r1, [r2, #0]
 8018740:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	887a      	ldrh	r2, [r7, #2]
 8018746:	811a      	strh	r2, [r3, #8]

    pifHcSr04_SetTemperature(p_owner, 20);
 8018748:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801874c:	6878      	ldr	r0, [r7, #4]
 801874e:	f000 f849 	bl	80187e4 <pifHcSr04_SetTemperature>

    return TRUE;
 8018752:	2301      	movs	r3, #1
}
 8018754:	4618      	mov	r0, r3
 8018756:	3708      	adds	r7, #8
 8018758:	46bd      	mov	sp, r7
 801875a:	bd80      	pop	{r7, pc}
 801875c:	20001c0d 	.word	0x20001c0d
 8018760:	20001c34 	.word	0x20001c34
 8018764:	08018683 	.word	0x08018683
 8018768:	08027858 	.word	0x08027858
 801876c:	2000011c 	.word	0x2000011c

08018770 <pifHcSr04_Trigger>:
		p_owner->_p_task = NULL;
	}
}

void pifHcSr04_Trigger(PifHcSr04* p_owner)
{
 8018770:	b580      	push	{r7, lr}
 8018772:	b082      	sub	sp, #8
 8018774:	af00      	add	r7, sp, #0
 8018776:	6078      	str	r0, [r7, #4]
	(*p_owner->act_trigger)(ON);
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	2001      	movs	r0, #1
 801877e:	4798      	blx	r3
	pif_Delay1us(11);
 8018780:	200b      	movs	r0, #11
 8018782:	f7f8 fc81 	bl	8011088 <pif_Delay1us>
	(*p_owner->act_trigger)(OFF);
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	2000      	movs	r0, #0
 801878c:	4798      	blx	r3
	p_owner->__state = HSS_TRIGGER;
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	2201      	movs	r2, #1
 8018792:	751a      	strb	r2, [r3, #20]
}
 8018794:	bf00      	nop
 8018796:	3708      	adds	r7, #8
 8018798:	46bd      	mov	sp, r7
 801879a:	bd80      	pop	{r7, pc}

0801879c <pifHcSr04_StartTrigger>:

BOOL pifHcSr04_StartTrigger(PifHcSr04* p_owner, uint16_t period)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b082      	sub	sp, #8
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	6078      	str	r0, [r7, #4]
 80187a4:	460b      	mov	r3, r1
 80187a6:	807b      	strh	r3, [r7, #2]
	if (!p_owner || !period) {
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d002      	beq.n	80187b4 <pifHcSr04_StartTrigger+0x18>
 80187ae:	887b      	ldrh	r3, [r7, #2]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d104      	bne.n	80187be <pifHcSr04_StartTrigger+0x22>
		pif_error = E_INVALID_PARAM;
 80187b4:	4b0a      	ldr	r3, [pc, #40]	; (80187e0 <pifHcSr04_StartTrigger+0x44>)
 80187b6:	2201      	movs	r2, #1
 80187b8:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 80187ba:	2300      	movs	r3, #0
 80187bc:	e00b      	b.n	80187d6 <pifHcSr04_StartTrigger+0x3a>
	}

	pifTask_ChangePeriod(p_owner->_p_task, period);
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	68db      	ldr	r3, [r3, #12]
 80187c2:	887a      	ldrh	r2, [r7, #2]
 80187c4:	4611      	mov	r1, r2
 80187c6:	4618      	mov	r0, r3
 80187c8:	f7fb fe64 	bl	8014494 <pifTask_ChangePeriod>
	p_owner->_p_task->pause = FALSE;
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	68db      	ldr	r3, [r3, #12]
 80187d0:	2200      	movs	r2, #0
 80187d2:	711a      	strb	r2, [r3, #4]
	return TRUE;
 80187d4:	2301      	movs	r3, #1
}
 80187d6:	4618      	mov	r0, r3
 80187d8:	3708      	adds	r7, #8
 80187da:	46bd      	mov	sp, r7
 80187dc:	bd80      	pop	{r7, pc}
 80187de:	bf00      	nop
 80187e0:	20001c0d 	.word	0x20001c0d

080187e4 <pifHcSr04_SetTemperature>:
{
	p_owner->_p_task->pause = TRUE;
}

void pifHcSr04_SetTemperature(PifHcSr04* p_owner, float temperature)
{
 80187e4:	b480      	push	{r7}
 80187e6:	b083      	sub	sp, #12
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
 80187ec:	ed87 0a00 	vstr	s0, [r7]
	p_owner->_transform_const = 2.0f / ((331.6f + 0.6f * temperature) / 10000.0f);		// 2 : 왕복, 10000 : m/s -> cm/ms
 80187f0:	edd7 7a00 	vldr	s15, [r7]
 80187f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8018828 <pifHcSr04_SetTemperature+0x44>
 80187f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80187fc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801882c <pifHcSr04_SetTemperature+0x48>
 8018800:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018804:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8018830 <pifHcSr04_SetTemperature+0x4c>
 8018808:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801880c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	edc3 7a04 	vstr	s15, [r3, #16]
}
 801881a:	bf00      	nop
 801881c:	370c      	adds	r7, #12
 801881e:	46bd      	mov	sp, r7
 8018820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018824:	4770      	bx	lr
 8018826:	bf00      	nop
 8018828:	3f19999a 	.word	0x3f19999a
 801882c:	43a5cccd 	.word	0x43a5cccd
 8018830:	461c4000 	.word	0x461c4000

08018834 <pifHcSr04_sigReceiveEcho>:

void pifHcSr04_sigReceiveEcho(PifHcSr04* p_owner, SWITCH state)
{
 8018834:	b580      	push	{r7, lr}
 8018836:	b082      	sub	sp, #8
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]
 801883c:	460b      	mov	r3, r1
 801883e:	70fb      	strb	r3, [r7, #3]
	switch (p_owner->__state) {
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	7d1b      	ldrb	r3, [r3, #20]
 8018844:	2b01      	cmp	r3, #1
 8018846:	d002      	beq.n	801884e <pifHcSr04_sigReceiveEcho+0x1a>
 8018848:	2b02      	cmp	r3, #2
 801884a:	d00d      	beq.n	8018868 <pifHcSr04_sigReceiveEcho+0x34>
			pifTask_SetTrigger(p_owner->_p_task);
		}
		break;

	default:
		break;
 801884c:	e031      	b.n	80188b2 <pifHcSr04_sigReceiveEcho+0x7e>
		if (state) {
 801884e:	78fb      	ldrb	r3, [r7, #3]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d02b      	beq.n	80188ac <pifHcSr04_sigReceiveEcho+0x78>
			p_owner->__tigger_time_us = (*pif_act_timer1us)();
 8018854:	4b19      	ldr	r3, [pc, #100]	; (80188bc <pifHcSr04_sigReceiveEcho+0x88>)
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	4798      	blx	r3
 801885a:	4602      	mov	r2, r0
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	619a      	str	r2, [r3, #24]
			p_owner->__state = HSS_HIGH;
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	2202      	movs	r2, #2
 8018864:	751a      	strb	r2, [r3, #20]
		break;
 8018866:	e021      	b.n	80188ac <pifHcSr04_sigReceiveEcho+0x78>
		if (!state) {
 8018868:	78fb      	ldrb	r3, [r7, #3]
 801886a:	2b00      	cmp	r3, #0
 801886c:	d120      	bne.n	80188b0 <pifHcSr04_sigReceiveEcho+0x7c>
			p_owner->__distance = ((*pif_act_timer1us)() - p_owner->__tigger_time_us) / p_owner->_transform_const;
 801886e:	4b13      	ldr	r3, [pc, #76]	; (80188bc <pifHcSr04_sigReceiveEcho+0x88>)
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	4798      	blx	r3
 8018874:	4602      	mov	r2, r0
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	699b      	ldr	r3, [r3, #24]
 801887a:	1ad3      	subs	r3, r2, r3
 801887c:	ee07 3a90 	vmov	s15, r3
 8018880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	ed93 7a04 	vldr	s14, [r3, #16]
 801888a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801888e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018892:	ee17 2a90 	vmov	r2, s15
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	61da      	str	r2, [r3, #28]
			p_owner->__state = HSS_LOW;
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	2203      	movs	r2, #3
 801889e:	751a      	strb	r2, [r3, #20]
			pifTask_SetTrigger(p_owner->_p_task);
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	68db      	ldr	r3, [r3, #12]
 80188a4:	4618      	mov	r0, r3
 80188a6:	f7fb fe17 	bl	80144d8 <pifTask_SetTrigger>
		break;
 80188aa:	e001      	b.n	80188b0 <pifHcSr04_sigReceiveEcho+0x7c>
		break;
 80188ac:	bf00      	nop
 80188ae:	e000      	b.n	80188b2 <pifHcSr04_sigReceiveEcho+0x7e>
		break;
 80188b0:	bf00      	nop
	}
}
 80188b2:	bf00      	nop
 80188b4:	3708      	adds	r7, #8
 80188b6:	46bd      	mov	sp, r7
 80188b8:	bd80      	pop	{r7, pc}
 80188ba:	bf00      	nop
 80188bc:	20001c34 	.word	0x20001c34

080188c0 <_changeGain>:
#define HMC58X3_Y_SELF_TEST_GAUSS (+1.16f)       // Y axis level when bias current is applied.
#define HMC58X3_Z_SELF_TEST_GAUSS (+1.08f)       // Z axis level when bias current is applied.


static void _changeGain(PifImuSensor* p_imu_sensor, PifHmc5883Gain gain)
{
 80188c0:	b480      	push	{r7}
 80188c2:	b083      	sub	sp, #12
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
 80188c8:	460b      	mov	r3, r1
 80188ca:	70fb      	strb	r3, [r7, #3]
	switch (gain) {
 80188cc:	78fb      	ldrb	r3, [r7, #3]
 80188ce:	2b07      	cmp	r3, #7
 80188d0:	d832      	bhi.n	8018938 <_changeGain+0x78>
 80188d2:	a201      	add	r2, pc, #4	; (adr r2, 80188d8 <_changeGain+0x18>)
 80188d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188d8:	080188f9 	.word	0x080188f9
 80188dc:	08018901 	.word	0x08018901
 80188e0:	08018909 	.word	0x08018909
 80188e4:	08018911 	.word	0x08018911
 80188e8:	08018919 	.word	0x08018919
 80188ec:	08018921 	.word	0x08018921
 80188f0:	08018929 	.word	0x08018929
 80188f4:	08018931 	.word	0x08018931
	case HMC5883_GAIN_0_88GA:	p_imu_sensor->_mag_gain = 1370; break;
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	4a12      	ldr	r2, [pc, #72]	; (8018944 <_changeGain+0x84>)
 80188fc:	60da      	str	r2, [r3, #12]
 80188fe:	e01b      	b.n	8018938 <_changeGain+0x78>
	case HMC5883_GAIN_1_3GA:	p_imu_sensor->_mag_gain = 1090; break;
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	4a11      	ldr	r2, [pc, #68]	; (8018948 <_changeGain+0x88>)
 8018904:	60da      	str	r2, [r3, #12]
 8018906:	e017      	b.n	8018938 <_changeGain+0x78>
	case HMC5883_GAIN_1_9GA:	p_imu_sensor->_mag_gain = 820; break;
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	4a10      	ldr	r2, [pc, #64]	; (801894c <_changeGain+0x8c>)
 801890c:	60da      	str	r2, [r3, #12]
 801890e:	e013      	b.n	8018938 <_changeGain+0x78>
	case HMC5883_GAIN_2_5GA:	p_imu_sensor->_mag_gain = 660; break;
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	4a0f      	ldr	r2, [pc, #60]	; (8018950 <_changeGain+0x90>)
 8018914:	60da      	str	r2, [r3, #12]
 8018916:	e00f      	b.n	8018938 <_changeGain+0x78>
	case HMC5883_GAIN_4GA:		p_imu_sensor->_mag_gain = 440; break;
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	4a0e      	ldr	r2, [pc, #56]	; (8018954 <_changeGain+0x94>)
 801891c:	60da      	str	r2, [r3, #12]
 801891e:	e00b      	b.n	8018938 <_changeGain+0x78>
	case HMC5883_GAIN_4_7GA:	p_imu_sensor->_mag_gain = 390; break;
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	4a0d      	ldr	r2, [pc, #52]	; (8018958 <_changeGain+0x98>)
 8018924:	60da      	str	r2, [r3, #12]
 8018926:	e007      	b.n	8018938 <_changeGain+0x78>
	case HMC5883_GAIN_5_6GA:	p_imu_sensor->_mag_gain = 330; break;
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	4a0c      	ldr	r2, [pc, #48]	; (801895c <_changeGain+0x9c>)
 801892c:	60da      	str	r2, [r3, #12]
 801892e:	e003      	b.n	8018938 <_changeGain+0x78>
	case HMC5883_GAIN_8_1GA:	p_imu_sensor->_mag_gain = 230; break;
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	4a0b      	ldr	r2, [pc, #44]	; (8018960 <_changeGain+0xa0>)
 8018934:	60da      	str	r2, [r3, #12]
 8018936:	bf00      	nop
	}
}
 8018938:	bf00      	nop
 801893a:	370c      	adds	r7, #12
 801893c:	46bd      	mov	sp, r7
 801893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018942:	4770      	bx	lr
 8018944:	44ab4000 	.word	0x44ab4000
 8018948:	44884000 	.word	0x44884000
 801894c:	444d0000 	.word	0x444d0000
 8018950:	44250000 	.word	0x44250000
 8018954:	43dc0000 	.word	0x43dc0000
 8018958:	43c30000 	.word	0x43c30000
 801895c:	43a50000 	.word	0x43a50000
 8018960:	43660000 	.word	0x43660000

08018964 <pifHmc5883_Detect>:

BOOL pifHmc5883_Detect(PifI2cPort* p_i2c)
{
 8018964:	b590      	push	{r4, r7, lr}
 8018966:	b08b      	sub	sp, #44	; 0x2c
 8018968:	af02      	add	r7, sp, #8
 801896a:	6078      	str	r0, [r7, #4]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "HMC5883 Ident: ";
 801896c:	4b23      	ldr	r3, [pc, #140]	; (80189fc <pifHmc5883_Detect+0x98>)
 801896e:	f107 040c 	add.w	r4, r7, #12
 8018972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data[3];
	PifI2cDevice* p_device;

    p_device = pifI2cPort_TemporaryDevice(p_i2c, HMC5883_I2C_ADDR);
 8018978:	211e      	movs	r1, #30
 801897a:	6878      	ldr	r0, [r7, #4]
 801897c:	f7f9 fb5c 	bl	8012038 <pifI2cPort_TemporaryDevice>
 8018980:	61f8      	str	r0, [r7, #28]

    if (!pifI2cDevice_ReadRegBytes(p_device, HMC5883_REG_IDENT_A, data, 3)) return FALSE;
 8018982:	f107 0208 	add.w	r2, r7, #8
 8018986:	2303      	movs	r3, #3
 8018988:	210a      	movs	r1, #10
 801898a:	69f8      	ldr	r0, [r7, #28]
 801898c:	f7f9 fc50 	bl	8012230 <pifI2cDevice_ReadRegBytes>
 8018990:	4603      	mov	r3, r0
 8018992:	2b00      	cmp	r3, #0
 8018994:	d101      	bne.n	801899a <pifHmc5883_Detect+0x36>
 8018996:	2300      	movs	r3, #0
 8018998:	e02b      	b.n	80189f2 <pifHmc5883_Detect+0x8e>
	if (data[0] != 'H') return FALSE;
 801899a:	7a3b      	ldrb	r3, [r7, #8]
 801899c:	2b48      	cmp	r3, #72	; 0x48
 801899e:	d001      	beq.n	80189a4 <pifHmc5883_Detect+0x40>
 80189a0:	2300      	movs	r3, #0
 80189a2:	e026      	b.n	80189f2 <pifHmc5883_Detect+0x8e>
#ifndef __PIF_NO_LOG__	
    if (data[0] < 32 || data[1] < 32 || data[2] < 32) {
 80189a4:	7a3b      	ldrb	r3, [r7, #8]
 80189a6:	2b1f      	cmp	r3, #31
 80189a8:	d905      	bls.n	80189b6 <pifHmc5883_Detect+0x52>
 80189aa:	7a7b      	ldrb	r3, [r7, #9]
 80189ac:	2b1f      	cmp	r3, #31
 80189ae:	d902      	bls.n	80189b6 <pifHmc5883_Detect+0x52>
 80189b0:	7abb      	ldrb	r3, [r7, #10]
 80189b2:	2b1f      	cmp	r3, #31
 80189b4:	d80e      	bhi.n	80189d4 <pifHmc5883_Detect+0x70>
    	pifLog_Printf(LT_INFO, "%s%2Xh %2Xh %2Xh", ident, data[0], data[1], data[2]);
 80189b6:	7a3b      	ldrb	r3, [r7, #8]
 80189b8:	4618      	mov	r0, r3
 80189ba:	7a7b      	ldrb	r3, [r7, #9]
 80189bc:	7aba      	ldrb	r2, [r7, #10]
 80189be:	4611      	mov	r1, r2
 80189c0:	f107 020c 	add.w	r2, r7, #12
 80189c4:	9101      	str	r1, [sp, #4]
 80189c6:	9300      	str	r3, [sp, #0]
 80189c8:	4603      	mov	r3, r0
 80189ca:	490d      	ldr	r1, [pc, #52]	; (8018a00 <pifHmc5883_Detect+0x9c>)
 80189cc:	2002      	movs	r0, #2
 80189ce:	f7fa fce9 	bl	80133a4 <pifLog_Printf>
 80189d2:	e00d      	b.n	80189f0 <pifHmc5883_Detect+0x8c>
    }
    else {
    	pifLog_Printf(LT_INFO, "%s%c%c%c", ident, data[0], data[1], data[2]);
 80189d4:	7a3b      	ldrb	r3, [r7, #8]
 80189d6:	4618      	mov	r0, r3
 80189d8:	7a7b      	ldrb	r3, [r7, #9]
 80189da:	7aba      	ldrb	r2, [r7, #10]
 80189dc:	4611      	mov	r1, r2
 80189de:	f107 020c 	add.w	r2, r7, #12
 80189e2:	9101      	str	r1, [sp, #4]
 80189e4:	9300      	str	r3, [sp, #0]
 80189e6:	4603      	mov	r3, r0
 80189e8:	4906      	ldr	r1, [pc, #24]	; (8018a04 <pifHmc5883_Detect+0xa0>)
 80189ea:	2002      	movs	r0, #2
 80189ec:	f7fa fcda 	bl	80133a4 <pifLog_Printf>
    }
#endif
    return TRUE;
 80189f0:	2301      	movs	r3, #1
}
 80189f2:	4618      	mov	r0, r3
 80189f4:	3724      	adds	r7, #36	; 0x24
 80189f6:	46bd      	mov	sp, r7
 80189f8:	bd90      	pop	{r4, r7, pc}
 80189fa:	bf00      	nop
 80189fc:	08027880 	.word	0x08027880
 8018a00:	08027860 	.word	0x08027860
 8018a04:	08027874 	.word	0x08027874

08018a08 <pifHmc5883_Init>:

BOOL pifHmc5883_Init(PifHmc5883* p_owner, PifId id, PifI2cPort* p_i2c, PifHmc5883Param* p_param, PifImuSensor* p_imu_sensor)
{
 8018a08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018a0c:	b092      	sub	sp, #72	; 0x48
 8018a0e:	af04      	add	r7, sp, #16
 8018a10:	60f8      	str	r0, [r7, #12]
 8018a12:	607a      	str	r2, [r7, #4]
 8018a14:	603b      	str	r3, [r7, #0]
 8018a16:	460b      	mov	r3, r1
 8018a18:	817b      	strh	r3, [r7, #10]
	uint8_t data[4];
	PifHmc5883ConfigA config_a;
    int16_t adc[3];
    int i;
    int32_t xyz_total[3] = { 0, 0, 0 }; // 32 bit totals so they won't overflow.
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	617b      	str	r3, [r7, #20]
 8018a1e:	2300      	movs	r3, #0
 8018a20:	61bb      	str	r3, [r7, #24]
 8018a22:	2300      	movs	r3, #0
 8018a24:	61fb      	str	r3, [r7, #28]
    BOOL bret = TRUE;           // Error indicator
 8018a26:	2301      	movs	r3, #1
 8018a28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d005      	beq.n	8018a3e <pifHmc5883_Init+0x36>
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d002      	beq.n	8018a3e <pifHmc5883_Init+0x36>
 8018a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d104      	bne.n	8018a48 <pifHmc5883_Init+0x40>
		pif_error = E_INVALID_PARAM;
 8018a3e:	4b77      	ldr	r3, [pc, #476]	; (8018c1c <pifHmc5883_Init+0x214>)
 8018a40:	2201      	movs	r2, #1
 8018a42:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018a44:	2300      	movs	r3, #0
 8018a46:	e1a5      	b.n	8018d94 <pifHmc5883_Init+0x38c>
	}

	memset(p_owner, 0, sizeof(PifHmc5883));
 8018a48:	2218      	movs	r2, #24
 8018a4a:	2100      	movs	r1, #0
 8018a4c:	68f8      	ldr	r0, [r7, #12]
 8018a4e:	f00a f823 	bl	8022a98 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c, HMC5883_I2C_ADDR);
 8018a52:	211e      	movs	r1, #30
 8018a54:	6878      	ldr	r0, [r7, #4]
 8018a56:	f7f9 fab1 	bl	8011fbc <pifI2cPort_AddDevice>
 8018a5a:	4602      	mov	r2, r0
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	611a      	str	r2, [r3, #16]
    if (!p_owner->_p_i2c) return FALSE;
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	691b      	ldr	r3, [r3, #16]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d101      	bne.n	8018a6c <pifHmc5883_Init+0x64>
 8018a68:	2300      	movs	r3, #0
 8018a6a:	e193      	b.n	8018d94 <pifHmc5883_Init+0x38c>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	6918      	ldr	r0, [r3, #16]
 8018a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018a74:	f240 5203 	movw	r2, #1283	; 0x503
 8018a78:	2101      	movs	r1, #1
 8018a7a:	f7f9 fbee 	bl	801225a <pifI2cDevice_ReadRegBit8>
 8018a7e:	4603      	mov	r3, r0
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	f000 817c 	beq.w	8018d7e <pifHmc5883_Init+0x376>
    _changeGain(p_imu_sensor, (PifHmc5883Gain)data[0]);
 8018a86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018a8a:	4619      	mov	r1, r3
 8018a8c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8018a8e:	f7ff ff17 	bl	80188c0 <_changeGain>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8018a92:	897b      	ldrh	r3, [r7, #10]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d106      	bne.n	8018aa6 <pifHmc5883_Init+0x9e>
 8018a98:	4b61      	ldr	r3, [pc, #388]	; (8018c20 <pifHmc5883_Init+0x218>)
 8018a9a:	881b      	ldrh	r3, [r3, #0]
 8018a9c:	1c5a      	adds	r2, r3, #1
 8018a9e:	b291      	uxth	r1, r2
 8018aa0:	4a5f      	ldr	r2, [pc, #380]	; (8018c20 <pifHmc5883_Init+0x218>)
 8018aa2:	8011      	strh	r1, [r2, #0]
 8018aa4:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	897a      	ldrh	r2, [r7, #10]
 8018aaa:	819a      	strh	r2, [r3, #12]
	p_owner->scale[AXIS_X] = 1.0f;
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018ab2:	601a      	str	r2, [r3, #0]
	p_owner->scale[AXIS_Y] = 1.0f;
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018aba:	605a      	str	r2, [r3, #4]
	p_owner->scale[AXIS_Z] = 1.0f;
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018ac2:	609a      	str	r2, [r3, #8]
	p_owner->__p_imu_sensor = p_imu_sensor;
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018ac8:	615a      	str	r2, [r3, #20]

    config_a.byte = 0;
 8018aca:	2300      	movs	r3, #0
 8018acc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_POS_BIAS;
 8018ad0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018ad4:	2201      	movs	r2, #1
 8018ad6:	f362 0301 	bfi	r3, r2, #0, #2
 8018ada:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    config_a.bit.data_rate = HMC5883_DATARATE_15HZ;
 8018ade:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018ae2:	2204      	movs	r2, #4
 8018ae4:	f362 0384 	bfi	r3, r2, #2, #3
 8018ae8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    pifI2cDevice_WriteRegByte(p_owner->_p_i2c, HMC5883_REG_CONFIG_A, config_a.byte);   // Reg A DOR = 0x010 + MS1, MS0 set to pos bias
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	691b      	ldr	r3, [r3, #16]
 8018af0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018af4:	2100      	movs	r1, #0
 8018af6:	4618      	mov	r0, r3
 8018af8:	f7f9 fc92 	bl	8012420 <pifI2cDevice_WriteRegByte>
    // Note that the  very first measurement after a gain change maintains the same gain as the previous setting.
    // The new gain setting is effective from the second measurement and on.
    pifHmc5883_SetGain(p_owner, HMC5883_GAIN_2_5GA); // Set the Gain to 2.5Ga (7:5->011)
 8018afc:	2103      	movs	r1, #3
 8018afe:	68f8      	ldr	r0, [r7, #12]
 8018b00:	f000 f96a 	bl	8018dd8 <pifHmc5883_SetGain>
    pif_Delay1ms(100);
 8018b04:	2064      	movs	r0, #100	; 0x64
 8018b06:	f7f8 faa3 	bl	8011050 <pif_Delay1ms>

    for (i = 0; i < 10;) {  // Collect 10 samples
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8018b0e:	e039      	b.n	8018b84 <pifHmc5883_Init+0x17c>
        pifI2cDevice_WriteRegByte(p_owner->_p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE);
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	691b      	ldr	r3, [r3, #16]
 8018b14:	2201      	movs	r2, #1
 8018b16:	2102      	movs	r1, #2
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7f9 fc81 	bl	8012420 <pifI2cDevice_WriteRegByte>
        pif_Delay1ms(50);
 8018b1e:	2032      	movs	r0, #50	; 0x32
 8018b20:	f7f8 fa96 	bl	8011050 <pif_Delay1ms>
        if (pifHmc5883_ReadMag(p_owner, adc)) {       // Get the raw values in case the scales have already been changed.
 8018b24:	f107 0320 	add.w	r3, r7, #32
 8018b28:	4619      	mov	r1, r3
 8018b2a:	68f8      	ldr	r0, [r7, #12]
 8018b2c:	f000 f973 	bl	8018e16 <pifHmc5883_ReadMag>
 8018b30:	4603      	mov	r3, r0
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d026      	beq.n	8018b84 <pifHmc5883_Init+0x17c>
			// Since the measurements are noisy, they should be averaged rather than taking the max.
			xyz_total[AXIS_X] += adc[AXIS_X];
 8018b36:	697b      	ldr	r3, [r7, #20]
 8018b38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b3c:	4413      	add	r3, r2
 8018b3e:	617b      	str	r3, [r7, #20]
			xyz_total[AXIS_Y] += adc[AXIS_Y];
 8018b40:	69bb      	ldr	r3, [r7, #24]
 8018b42:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8018b46:	4413      	add	r3, r2
 8018b48:	61bb      	str	r3, [r7, #24]
			xyz_total[AXIS_Z] += adc[AXIS_Z];
 8018b4a:	69fb      	ldr	r3, [r7, #28]
 8018b4c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8018b50:	4413      	add	r3, r2
 8018b52:	61fb      	str	r3, [r7, #28]

			// Detect saturation.
			if (-4096 >= MIN(adc[AXIS_X], MIN(adc[AXIS_Y], adc[AXIS_Z]))) {
 8018b54:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8018b58:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018b5c:	4293      	cmp	r3, r2
 8018b5e:	bfa8      	it	ge
 8018b60:	4613      	movge	r3, r2
 8018b62:	b21a      	sxth	r2, r3
 8018b64:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b68:	4293      	cmp	r3, r2
 8018b6a:	bfa8      	it	ge
 8018b6c:	4613      	movge	r3, r2
 8018b6e:	b21b      	sxth	r3, r3
 8018b70:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8018b74:	dc03      	bgt.n	8018b7e <pifHmc5883_Init+0x176>
				bret = FALSE;
 8018b76:	2300      	movs	r3, #0
 8018b78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 8018b7c:	e005      	b.n	8018b8a <pifHmc5883_Init+0x182>
			}
			i++;
 8018b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b80:	3301      	adds	r3, #1
 8018b82:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < 10;) {  // Collect 10 samples
 8018b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b86:	2b09      	cmp	r3, #9
 8018b88:	ddc2      	ble.n	8018b10 <pifHmc5883_Init+0x108>
        }
    }

    // Apply the negative bias. (Same gain)
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NEG_BIAS;
 8018b8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018b8e:	2202      	movs	r2, #2
 8018b90:	f362 0301 	bfi	r3, r2, #0, #2
 8018b94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    pifI2cDevice_WriteRegByte(p_owner->_p_i2c, HMC5883_REG_CONFIG_A, config_a.byte);   // Reg A DOR = 0x010 + MS1, MS0 set to negative bias.
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	691b      	ldr	r3, [r3, #16]
 8018b9c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018ba0:	2100      	movs	r1, #0
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	f7f9 fc3c 	bl	8012420 <pifI2cDevice_WriteRegByte>
    for (i = 0; i < 10;) {
 8018ba8:	2300      	movs	r3, #0
 8018baa:	637b      	str	r3, [r7, #52]	; 0x34
 8018bac:	e041      	b.n	8018c32 <pifHmc5883_Init+0x22a>
        pifI2cDevice_WriteRegByte(p_owner->_p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE);
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	691b      	ldr	r3, [r3, #16]
 8018bb2:	2201      	movs	r2, #1
 8018bb4:	2102      	movs	r1, #2
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	f7f9 fc32 	bl	8012420 <pifI2cDevice_WriteRegByte>
        pif_Delay1ms(50);
 8018bbc:	2032      	movs	r0, #50	; 0x32
 8018bbe:	f7f8 fa47 	bl	8011050 <pif_Delay1ms>
        if (pifHmc5883_ReadMag(p_owner, adc)) {                // Get the raw values in case the scales have already been changed.
 8018bc2:	f107 0320 	add.w	r3, r7, #32
 8018bc6:	4619      	mov	r1, r3
 8018bc8:	68f8      	ldr	r0, [r7, #12]
 8018bca:	f000 f924 	bl	8018e16 <pifHmc5883_ReadMag>
 8018bce:	4603      	mov	r3, r0
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d02e      	beq.n	8018c32 <pifHmc5883_Init+0x22a>
			// Since the measurements are noisy, they should be averaged.
			xyz_total[AXIS_X] -= adc[AXIS_X];
 8018bd4:	697b      	ldr	r3, [r7, #20]
 8018bd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bda:	1a9b      	subs	r3, r3, r2
 8018bdc:	617b      	str	r3, [r7, #20]
			xyz_total[AXIS_Y] -= adc[AXIS_Y];
 8018bde:	69bb      	ldr	r3, [r7, #24]
 8018be0:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8018be4:	1a9b      	subs	r3, r3, r2
 8018be6:	61bb      	str	r3, [r7, #24]
			xyz_total[AXIS_Z] -= adc[AXIS_Z];
 8018be8:	69fb      	ldr	r3, [r7, #28]
 8018bea:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8018bee:	1a9b      	subs	r3, r3, r2
 8018bf0:	61fb      	str	r3, [r7, #28]

			// Detect saturation.
			if (-4096 >= MIN(adc[AXIS_X], MIN(adc[AXIS_Y], adc[AXIS_Z]))) {
 8018bf2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8018bf6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018bfa:	4293      	cmp	r3, r2
 8018bfc:	bfa8      	it	ge
 8018bfe:	4613      	movge	r3, r2
 8018c00:	b21a      	sxth	r2, r3
 8018c02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c06:	4293      	cmp	r3, r2
 8018c08:	bfa8      	it	ge
 8018c0a:	4613      	movge	r3, r2
 8018c0c:	b21b      	sxth	r3, r3
 8018c0e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8018c12:	dc0b      	bgt.n	8018c2c <pifHmc5883_Init+0x224>
				bret = FALSE;
 8018c14:	2300      	movs	r3, #0
 8018c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 8018c1a:	e00d      	b.n	8018c38 <pifHmc5883_Init+0x230>
 8018c1c:	20001c0d 	.word	0x20001c0d
 8018c20:	2000011c 	.word	0x2000011c
 8018c24:	466f4000 	.word	0x466f4000
 8018c28:	465ec001 	.word	0x465ec001
			}
			i++;
 8018c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c2e:	3301      	adds	r3, #1
 8018c30:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < 10;) {
 8018c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c34:	2b09      	cmp	r3, #9
 8018c36:	ddba      	ble.n	8018bae <pifHmc5883_Init+0x1a6>
        }
    }

    if (bret) {                	// Something went wrong so get a best guess
 8018c38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d032      	beq.n	8018ca6 <pifHmc5883_Init+0x29e>
        if (xyz_total[AXIS_X]) p_owner->scale[AXIS_X] = fabsf(660.0f * HMC58X3_X_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[AXIS_X]);
 8018c40:	697b      	ldr	r3, [r7, #20]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d00d      	beq.n	8018c62 <pifHmc5883_Init+0x25a>
 8018c46:	697b      	ldr	r3, [r7, #20]
 8018c48:	ee07 3a90 	vmov	s15, r3
 8018c4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018c50:	ed5f 6a0c 	vldr	s13, [pc, #-48]	; 8018c24 <pifHmc5883_Init+0x21c>
 8018c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018c58:	eef0 7ae7 	vabs.f32	s15, s15
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	edc3 7a00 	vstr	s15, [r3]
        if (xyz_total[AXIS_Y]) p_owner->scale[AXIS_Y] = fabsf(660.0f * HMC58X3_Y_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[AXIS_Y]);
 8018c62:	69bb      	ldr	r3, [r7, #24]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d00d      	beq.n	8018c84 <pifHmc5883_Init+0x27c>
 8018c68:	69bb      	ldr	r3, [r7, #24]
 8018c6a:	ee07 3a90 	vmov	s15, r3
 8018c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018c72:	ed5f 6a14 	vldr	s13, [pc, #-80]	; 8018c24 <pifHmc5883_Init+0x21c>
 8018c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018c7a:	eef0 7ae7 	vabs.f32	s15, s15
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	edc3 7a01 	vstr	s15, [r3, #4]
        if (xyz_total[AXIS_Z]) p_owner->scale[AXIS_Z] = fabsf(660.0f * HMC58X3_Z_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[AXIS_Z]);
 8018c84:	69fb      	ldr	r3, [r7, #28]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d00d      	beq.n	8018ca6 <pifHmc5883_Init+0x29e>
 8018c8a:	69fb      	ldr	r3, [r7, #28]
 8018c8c:	ee07 3a90 	vmov	s15, r3
 8018c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018c94:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 8018c28 <pifHmc5883_Init+0x220>
 8018c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018c9c:	eef0 7ae7 	vabs.f32	s15, s15
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	edc3 7a02 	vstr	s15, [r3, #8]
    }

#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Mag scale: X=%f Y=%f Z=%f", p_owner->scale[AXIS_X], p_owner->scale[AXIS_Y], p_owner->scale[AXIS_Z]);
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	4618      	mov	r0, r3
 8018cac:	f7e7 fc00 	bl	80004b0 <__aeabi_f2d>
 8018cb0:	4680      	mov	r8, r0
 8018cb2:	4689      	mov	r9, r1
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	685b      	ldr	r3, [r3, #4]
 8018cb8:	4618      	mov	r0, r3
 8018cba:	f7e7 fbf9 	bl	80004b0 <__aeabi_f2d>
 8018cbe:	4604      	mov	r4, r0
 8018cc0:	460d      	mov	r5, r1
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	689b      	ldr	r3, [r3, #8]
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	f7e7 fbf2 	bl	80004b0 <__aeabi_f2d>
 8018ccc:	4602      	mov	r2, r0
 8018cce:	460b      	mov	r3, r1
 8018cd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018cd4:	e9cd 4500 	strd	r4, r5, [sp]
 8018cd8:	4642      	mov	r2, r8
 8018cda:	464b      	mov	r3, r9
 8018cdc:	4930      	ldr	r1, [pc, #192]	; (8018da0 <pifHmc5883_Init+0x398>)
 8018cde:	2002      	movs	r0, #2
 8018ce0:	f7fa fb60 	bl	80133a4 <pifLog_Printf>
#endif

    if (p_param) {
 8018ce4:	683b      	ldr	r3, [r7, #0]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d03a      	beq.n	8018d60 <pifHmc5883_Init+0x358>
        config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 8018cea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018cee:	f36f 0301 	bfc	r3, #0, #2
 8018cf2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   		config_a.bit.samples = p_param->samples;
 8018cf6:	683b      	ldr	r3, [r7, #0]
 8018cf8:	78db      	ldrb	r3, [r3, #3]
 8018cfa:	f003 0303 	and.w	r3, r3, #3
 8018cfe:	b2da      	uxtb	r2, r3
 8018d00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018d04:	f362 1346 	bfi	r3, r2, #5, #2
 8018d08:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   		config_a.bit.data_rate = p_param->data_rate;
 8018d0c:	683b      	ldr	r3, [r7, #0]
 8018d0e:	781b      	ldrb	r3, [r3, #0]
 8018d10:	f003 0307 	and.w	r3, r3, #7
 8018d14:	b2da      	uxtb	r2, r3
 8018d16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018d1a:	f362 0384 	bfi	r3, r2, #2, #3
 8018d1e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	691b      	ldr	r3, [r3, #16]
 8018d26:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018d2a:	2100      	movs	r1, #0
 8018d2c:	4618      	mov	r0, r3
 8018d2e:	f7f9 fb77 	bl	8012420 <pifI2cDevice_WriteRegByte>
 8018d32:	4603      	mov	r3, r0
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d024      	beq.n	8018d82 <pifHmc5883_Init+0x37a>

        if (!pifHmc5883_SetGain(p_owner, p_param->gain)) goto fail;
 8018d38:	683b      	ldr	r3, [r7, #0]
 8018d3a:	785b      	ldrb	r3, [r3, #1]
 8018d3c:	4619      	mov	r1, r3
 8018d3e:	68f8      	ldr	r0, [r7, #12]
 8018d40:	f000 f84a 	bl	8018dd8 <pifHmc5883_SetGain>
 8018d44:	4603      	mov	r3, r0
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d01d      	beq.n	8018d86 <pifHmc5883_Init+0x37e>

        if (!pifI2cDevice_WriteRegBit8(p_owner->_p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_param->mode)) goto fail;
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	6918      	ldr	r0, [r3, #16]
 8018d4e:	683b      	ldr	r3, [r7, #0]
 8018d50:	789b      	ldrb	r3, [r3, #2]
 8018d52:	2202      	movs	r2, #2
 8018d54:	2102      	movs	r1, #2
 8018d56:	f7f9 fb79 	bl	801244c <pifI2cDevice_WriteRegBit8>
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d014      	beq.n	8018d8a <pifHmc5883_Init+0x382>
    }

	p_imu_sensor->_measure |= IMU_MEASURE_MAGNETO;
 8018d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d62:	781b      	ldrb	r3, [r3, #0]
 8018d64:	f043 0304 	orr.w	r3, r3, #4
 8018d68:	b2da      	uxtb	r2, r3
 8018d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d6c:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifHmc5883_ReadMag;
 8018d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d70:	4a0c      	ldr	r2, [pc, #48]	; (8018da4 <pifHmc5883_Init+0x39c>)
 8018d72:	62da      	str	r2, [r3, #44]	; 0x2c
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 8018d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d76:	68fa      	ldr	r2, [r7, #12]
 8018d78:	631a      	str	r2, [r3, #48]	; 0x30
    return TRUE;
 8018d7a:	2301      	movs	r3, #1
 8018d7c:	e00a      	b.n	8018d94 <pifHmc5883_Init+0x38c>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 8018d7e:	bf00      	nop
 8018d80:	e004      	b.n	8018d8c <pifHmc5883_Init+0x384>
        if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8018d82:	bf00      	nop
 8018d84:	e002      	b.n	8018d8c <pifHmc5883_Init+0x384>
        if (!pifHmc5883_SetGain(p_owner, p_param->gain)) goto fail;
 8018d86:	bf00      	nop
 8018d88:	e000      	b.n	8018d8c <pifHmc5883_Init+0x384>
        if (!pifI2cDevice_WriteRegBit8(p_owner->_p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_param->mode)) goto fail;
 8018d8a:	bf00      	nop

fail:
	pifHmc5883_Clear(p_owner);
 8018d8c:	68f8      	ldr	r0, [r7, #12]
 8018d8e:	f000 f80b 	bl	8018da8 <pifHmc5883_Clear>
	return FALSE;
 8018d92:	2300      	movs	r3, #0
}
 8018d94:	4618      	mov	r0, r3
 8018d96:	3738      	adds	r7, #56	; 0x38
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018d9e:	bf00      	nop
 8018da0:	08027890 	.word	0x08027890
 8018da4:	08018e17 	.word	0x08018e17

08018da8 <pifHmc5883_Clear>:

void pifHmc5883_Clear(PifHmc5883* p_owner)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b082      	sub	sp, #8
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	691b      	ldr	r3, [r3, #16]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d00b      	beq.n	8018dd0 <pifHmc5883_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	691b      	ldr	r3, [r3, #16]
 8018dbc:	685a      	ldr	r2, [r3, #4]
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	691b      	ldr	r3, [r3, #16]
 8018dc2:	4619      	mov	r1, r3
 8018dc4:	4610      	mov	r0, r2
 8018dc6:	f7f9 f923 	bl	8012010 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	2200      	movs	r2, #0
 8018dce:	611a      	str	r2, [r3, #16]
	}
}
 8018dd0:	bf00      	nop
 8018dd2:	3708      	adds	r7, #8
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	bd80      	pop	{r7, pc}

08018dd8 <pifHmc5883_SetGain>:

BOOL pifHmc5883_SetGain(PifHmc5883* p_owner, PifHmc5883Gain gain)
{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b082      	sub	sp, #8
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	6078      	str	r0, [r7, #4]
 8018de0:	460b      	mov	r3, r1
 8018de2:	70fb      	strb	r3, [r7, #3]
    if (!pifI2cDevice_WriteRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, gain)) return FALSE;
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	6918      	ldr	r0, [r3, #16]
 8018de8:	78fb      	ldrb	r3, [r7, #3]
 8018dea:	f240 5203 	movw	r2, #1283	; 0x503
 8018dee:	2101      	movs	r1, #1
 8018df0:	f7f9 fb2c 	bl	801244c <pifI2cDevice_WriteRegBit8>
 8018df4:	4603      	mov	r3, r0
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d101      	bne.n	8018dfe <pifHmc5883_SetGain+0x26>
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	e007      	b.n	8018e0e <pifHmc5883_SetGain+0x36>
	_changeGain(p_owner->__p_imu_sensor, gain);
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	695b      	ldr	r3, [r3, #20]
 8018e02:	78fa      	ldrb	r2, [r7, #3]
 8018e04:	4611      	mov	r1, r2
 8018e06:	4618      	mov	r0, r3
 8018e08:	f7ff fd5a 	bl	80188c0 <_changeGain>
    return TRUE;
 8018e0c:	2301      	movs	r3, #1
}
 8018e0e:	4618      	mov	r0, r3
 8018e10:	3708      	adds	r7, #8
 8018e12:	46bd      	mov	sp, r7
 8018e14:	bd80      	pop	{r7, pc}

08018e16 <pifHmc5883_ReadMag>:

BOOL pifHmc5883_ReadMag(PifHmc5883* p_owner, int16_t* p_mag)
{
 8018e16:	b580      	push	{r7, lr}
 8018e18:	b084      	sub	sp, #16
 8018e1a:	af00      	add	r7, sp, #0
 8018e1c:	6078      	str	r0, [r7, #4]
 8018e1e:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, HMC5883_REG_STATUS, data)) return FALSE;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	691b      	ldr	r3, [r3, #16]
 8018e24:	f107 0208 	add.w	r2, r7, #8
 8018e28:	2109      	movs	r1, #9
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	f7f9 f9c8 	bl	80121c0 <pifI2cDevice_ReadRegByte>
 8018e30:	4603      	mov	r3, r0
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d101      	bne.n	8018e3a <pifHmc5883_ReadMag+0x24>
 8018e36:	2300      	movs	r3, #0
 8018e38:	e061      	b.n	8018efe <pifHmc5883_ReadMag+0xe8>
	if (!(data[0] & 1)) return FALSE;
 8018e3a:	7a3b      	ldrb	r3, [r7, #8]
 8018e3c:	f003 0301 	and.w	r3, r3, #1
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d101      	bne.n	8018e48 <pifHmc5883_ReadMag+0x32>
 8018e44:	2300      	movs	r3, #0
 8018e46:	e05a      	b.n	8018efe <pifHmc5883_ReadMag+0xe8>

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_OUT_X_M, data, 6)) return FALSE;
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	6918      	ldr	r0, [r3, #16]
 8018e4c:	f107 0208 	add.w	r2, r7, #8
 8018e50:	2306      	movs	r3, #6
 8018e52:	2103      	movs	r1, #3
 8018e54:	f7f9 f9ec 	bl	8012230 <pifI2cDevice_ReadRegBytes>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d101      	bne.n	8018e62 <pifHmc5883_ReadMag+0x4c>
 8018e5e:	2300      	movs	r3, #0
 8018e60:	e04d      	b.n	8018efe <pifHmc5883_ReadMag+0xe8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->scale[AXIS_X];
 8018e62:	7a3b      	ldrb	r3, [r7, #8]
 8018e64:	b29b      	uxth	r3, r3
 8018e66:	021b      	lsls	r3, r3, #8
 8018e68:	b29a      	uxth	r2, r3
 8018e6a:	7a7b      	ldrb	r3, [r7, #9]
 8018e6c:	b29b      	uxth	r3, r3
 8018e6e:	4413      	add	r3, r2
 8018e70:	b29b      	uxth	r3, r3
 8018e72:	b21b      	sxth	r3, r3
 8018e74:	ee07 3a90 	vmov	s15, r3
 8018e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	edd3 7a00 	vldr	s15, [r3]
 8018e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018e8a:	ee17 3a90 	vmov	r3, s15
 8018e8e:	b21a      	sxth	r2, r3
 8018e90:	683b      	ldr	r3, [r7, #0]
 8018e92:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->scale[AXIS_Z];
 8018e94:	7abb      	ldrb	r3, [r7, #10]
 8018e96:	b29b      	uxth	r3, r3
 8018e98:	021b      	lsls	r3, r3, #8
 8018e9a:	b29a      	uxth	r2, r3
 8018e9c:	7afb      	ldrb	r3, [r7, #11]
 8018e9e:	b29b      	uxth	r3, r3
 8018ea0:	4413      	add	r3, r2
 8018ea2:	b29b      	uxth	r3, r3
 8018ea4:	b21b      	sxth	r3, r3
 8018ea6:	ee07 3a90 	vmov	s15, r3
 8018eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8018eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018eb8:	683b      	ldr	r3, [r7, #0]
 8018eba:	3304      	adds	r3, #4
 8018ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018ec0:	ee17 2a90 	vmov	r2, s15
 8018ec4:	b212      	sxth	r2, r2
 8018ec6:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->scale[AXIS_Y];
 8018ec8:	7b3b      	ldrb	r3, [r7, #12]
 8018eca:	b29b      	uxth	r3, r3
 8018ecc:	021b      	lsls	r3, r3, #8
 8018ece:	b29a      	uxth	r2, r3
 8018ed0:	7b7b      	ldrb	r3, [r7, #13]
 8018ed2:	b29b      	uxth	r3, r3
 8018ed4:	4413      	add	r3, r2
 8018ed6:	b29b      	uxth	r3, r3
 8018ed8:	b21b      	sxth	r3, r3
 8018eda:	ee07 3a90 	vmov	s15, r3
 8018ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	edd3 7a01 	vldr	s15, [r3, #4]
 8018ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018eec:	683b      	ldr	r3, [r7, #0]
 8018eee:	3302      	adds	r3, #2
 8018ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018ef4:	ee17 2a90 	vmov	r2, s15
 8018ef8:	b212      	sxth	r2, r2
 8018efa:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8018efc:	2301      	movs	r3, #1
}
 8018efe:	4618      	mov	r0, r3
 8018f00:	3710      	adds	r7, #16
 8018f02:	46bd      	mov	sp, r7
 8018f04:	bd80      	pop	{r7, pc}

08018f06 <_alignBoard>:

#include <math.h>


static void _alignBoard(PifImuSensor* p_owner, float* vec)
{
 8018f06:	b580      	push	{r7, lr}
 8018f08:	b086      	sub	sp, #24
 8018f0a:	af00      	add	r7, sp, #0
 8018f0c:	6078      	str	r0, [r7, #4]
 8018f0e:	6039      	str	r1, [r7, #0]
    float x = vec[AXIS_X];
 8018f10:	683b      	ldr	r3, [r7, #0]
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	617b      	str	r3, [r7, #20]
    float y = vec[AXIS_Y];
 8018f16:	683b      	ldr	r3, [r7, #0]
 8018f18:	685b      	ldr	r3, [r3, #4]
 8018f1a:	613b      	str	r3, [r7, #16]
    float z = vec[AXIS_Z];
 8018f1c:	683b      	ldr	r3, [r7, #0]
 8018f1e:	689b      	ldr	r3, [r3, #8]
 8018f20:	60fb      	str	r3, [r7, #12]

    vec[AXIS_X] = lrintf(p_owner->__board_rotation[0][0] * x + p_owner->__board_rotation[1][0] * y + p_owner->__board_rotation[2][0] * z);
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8018f28:	edd7 7a05 	vldr	s15, [r7, #20]
 8018f2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8018f36:	edd7 7a04 	vldr	s15, [r7, #16]
 8018f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018f3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8018f48:	edd7 7a03 	vldr	s15, [r7, #12]
 8018f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f54:	eeb0 0a67 	vmov.f32	s0, s15
 8018f58:	f00a f8c2 	bl	80230e0 <lrintf>
 8018f5c:	ee07 0a90 	vmov	s15, r0
 8018f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f64:	683b      	ldr	r3, [r7, #0]
 8018f66:	edc3 7a00 	vstr	s15, [r3]
    vec[AXIS_Y] = lrintf(p_owner->__board_rotation[0][1] * x + p_owner->__board_rotation[1][1] * y + p_owner->__board_rotation[2][1] * z);
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8018f70:	edd7 7a05 	vldr	s15, [r7, #20]
 8018f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8018f7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8018f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018f86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8018f90:	edd7 7a03 	vldr	s15, [r7, #12]
 8018f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8018fa0:	f00a f89e 	bl	80230e0 <lrintf>
 8018fa4:	ee07 0a90 	vmov	s15, r0
 8018fa8:	683b      	ldr	r3, [r7, #0]
 8018faa:	3304      	adds	r3, #4
 8018fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018fb0:	edc3 7a00 	vstr	s15, [r3]
    vec[AXIS_Z] = lrintf(p_owner->__board_rotation[0][2] * x + p_owner->__board_rotation[1][2] * y + p_owner->__board_rotation[2][2] * z);
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8018fba:	edd7 7a05 	vldr	s15, [r7, #20]
 8018fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8018fc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8018fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8018fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8018fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8018fea:	f00a f879 	bl	80230e0 <lrintf>
 8018fee:	ee07 0a90 	vmov	s15, r0
 8018ff2:	683b      	ldr	r3, [r7, #0]
 8018ff4:	3308      	adds	r3, #8
 8018ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ffa:	edc3 7a00 	vstr	s15, [r3]
}
 8018ffe:	bf00      	nop
 8019000:	3718      	adds	r7, #24
 8019002:	46bd      	mov	sp, r7
 8019004:	bd80      	pop	{r7, pc}
	...

08019008 <_alignSensors>:

static void _alignSensors(PifImuSensor* p_owner, float* src, float* dest, uint8_t rotation)
{
 8019008:	b580      	push	{r7, lr}
 801900a:	b084      	sub	sp, #16
 801900c:	af00      	add	r7, sp, #0
 801900e:	60f8      	str	r0, [r7, #12]
 8019010:	60b9      	str	r1, [r7, #8]
 8019012:	607a      	str	r2, [r7, #4]
 8019014:	70fb      	strb	r3, [r7, #3]
    switch (rotation) {
 8019016:	78fb      	ldrb	r3, [r7, #3]
 8019018:	3b02      	subs	r3, #2
 801901a:	2b06      	cmp	r3, #6
 801901c:	f200 80b3 	bhi.w	8019186 <_alignSensors+0x17e>
 8019020:	a201      	add	r2, pc, #4	; (adr r2, 8019028 <_alignSensors+0x20>)
 8019022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019026:	bf00      	nop
 8019028:	08019045 	.word	0x08019045
 801902c:	0801906b 	.word	0x0801906b
 8019030:	0801909b 	.word	0x0801909b
 8019034:	080190c3 	.word	0x080190c3
 8019038:	080190f3 	.word	0x080190f3
 801903c:	0801911b 	.word	0x0801911b
 8019040:	0801914d 	.word	0x0801914d
        case IMUS_ALIGN_CW90_DEG:
            dest[AXIS_X] = src[AXIS_Y];
 8019044:	68bb      	ldr	r3, [r7, #8]
 8019046:	685a      	ldr	r2, [r3, #4]
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	601a      	str	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 801904c:	68bb      	ldr	r3, [r7, #8]
 801904e:	edd3 7a00 	vldr	s15, [r3]
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	3304      	adds	r3, #4
 8019056:	eef1 7a67 	vneg.f32	s15, s15
 801905a:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Z] = src[AXIS_Z];
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	3308      	adds	r3, #8
 8019062:	68ba      	ldr	r2, [r7, #8]
 8019064:	6892      	ldr	r2, [r2, #8]
 8019066:	601a      	str	r2, [r3, #0]
            break;
 8019068:	e09c      	b.n	80191a4 <_alignSensors+0x19c>
        case IMUS_ALIGN_CW180_DEG:
            dest[AXIS_X] = -src[AXIS_X];
 801906a:	68bb      	ldr	r3, [r7, #8]
 801906c:	edd3 7a00 	vldr	s15, [r3]
 8019070:	eef1 7a67 	vneg.f32	s15, s15
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Y] = -src[AXIS_Y];
 801907a:	68bb      	ldr	r3, [r7, #8]
 801907c:	3304      	adds	r3, #4
 801907e:	edd3 7a00 	vldr	s15, [r3]
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	3304      	adds	r3, #4
 8019086:	eef1 7a67 	vneg.f32	s15, s15
 801908a:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Z] = src[AXIS_Z];
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	3308      	adds	r3, #8
 8019092:	68ba      	ldr	r2, [r7, #8]
 8019094:	6892      	ldr	r2, [r2, #8]
 8019096:	601a      	str	r2, [r3, #0]
            break;
 8019098:	e084      	b.n	80191a4 <_alignSensors+0x19c>
        case IMUS_ALIGN_CW270_DEG:
            dest[AXIS_X] = -src[AXIS_Y];
 801909a:	68bb      	ldr	r3, [r7, #8]
 801909c:	3304      	adds	r3, #4
 801909e:	edd3 7a00 	vldr	s15, [r3]
 80190a2:	eef1 7a67 	vneg.f32	s15, s15
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Y] = src[AXIS_X];
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	3304      	adds	r3, #4
 80190b0:	68ba      	ldr	r2, [r7, #8]
 80190b2:	6812      	ldr	r2, [r2, #0]
 80190b4:	601a      	str	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	3308      	adds	r3, #8
 80190ba:	68ba      	ldr	r2, [r7, #8]
 80190bc:	6892      	ldr	r2, [r2, #8]
 80190be:	601a      	str	r2, [r3, #0]
            break;
 80190c0:	e070      	b.n	80191a4 <_alignSensors+0x19c>
        case IMUS_ALIGN_CW0_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_X];
 80190c2:	68bb      	ldr	r3, [r7, #8]
 80190c4:	edd3 7a00 	vldr	s15, [r3]
 80190c8:	eef1 7a67 	vneg.f32	s15, s15
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Y] = src[AXIS_Y];
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	3304      	adds	r3, #4
 80190d6:	68ba      	ldr	r2, [r7, #8]
 80190d8:	6852      	ldr	r2, [r2, #4]
 80190da:	601a      	str	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 80190dc:	68bb      	ldr	r3, [r7, #8]
 80190de:	3308      	adds	r3, #8
 80190e0:	edd3 7a00 	vldr	s15, [r3]
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	3308      	adds	r3, #8
 80190e8:	eef1 7a67 	vneg.f32	s15, s15
 80190ec:	edc3 7a00 	vstr	s15, [r3]
            break;
 80190f0:	e058      	b.n	80191a4 <_alignSensors+0x19c>
        case IMUS_ALIGN_CW90_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_Y];
 80190f2:	68bb      	ldr	r3, [r7, #8]
 80190f4:	685a      	ldr	r2, [r3, #4]
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	601a      	str	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	3304      	adds	r3, #4
 80190fe:	68ba      	ldr	r2, [r7, #8]
 8019100:	6812      	ldr	r2, [r2, #0]
 8019102:	601a      	str	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019104:	68bb      	ldr	r3, [r7, #8]
 8019106:	3308      	adds	r3, #8
 8019108:	edd3 7a00 	vldr	s15, [r3]
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	3308      	adds	r3, #8
 8019110:	eef1 7a67 	vneg.f32	s15, s15
 8019114:	edc3 7a00 	vstr	s15, [r3]
            break;
 8019118:	e044      	b.n	80191a4 <_alignSensors+0x19c>
        case IMUS_ALIGN_CW180_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_X];
 801911a:	68bb      	ldr	r3, [r7, #8]
 801911c:	681a      	ldr	r2, [r3, #0]
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	601a      	str	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 8019122:	68bb      	ldr	r3, [r7, #8]
 8019124:	3304      	adds	r3, #4
 8019126:	edd3 7a00 	vldr	s15, [r3]
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	3304      	adds	r3, #4
 801912e:	eef1 7a67 	vneg.f32	s15, s15
 8019132:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019136:	68bb      	ldr	r3, [r7, #8]
 8019138:	3308      	adds	r3, #8
 801913a:	edd3 7a00 	vldr	s15, [r3]
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	3308      	adds	r3, #8
 8019142:	eef1 7a67 	vneg.f32	s15, s15
 8019146:	edc3 7a00 	vstr	s15, [r3]
            break;
 801914a:	e02b      	b.n	80191a4 <_alignSensors+0x19c>
        case IMUS_ALIGN_CW270_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_Y];
 801914c:	68bb      	ldr	r3, [r7, #8]
 801914e:	3304      	adds	r3, #4
 8019150:	edd3 7a00 	vldr	s15, [r3]
 8019154:	eef1 7a67 	vneg.f32	s15, s15
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Y] = -src[AXIS_X];
 801915e:	68bb      	ldr	r3, [r7, #8]
 8019160:	edd3 7a00 	vldr	s15, [r3]
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	3304      	adds	r3, #4
 8019168:	eef1 7a67 	vneg.f32	s15, s15
 801916c:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019170:	68bb      	ldr	r3, [r7, #8]
 8019172:	3308      	adds	r3, #8
 8019174:	edd3 7a00 	vldr	s15, [r3]
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	3308      	adds	r3, #8
 801917c:	eef1 7a67 	vneg.f32	s15, s15
 8019180:	edc3 7a00 	vstr	s15, [r3]
            break;
 8019184:	e00e      	b.n	80191a4 <_alignSensors+0x19c>
        default:	// IMUS_ALIGN_CW0_DEG:
            dest[AXIS_X] = src[AXIS_X];
 8019186:	68bb      	ldr	r3, [r7, #8]
 8019188:	681a      	ldr	r2, [r3, #0]
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	601a      	str	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	3304      	adds	r3, #4
 8019192:	68ba      	ldr	r2, [r7, #8]
 8019194:	6852      	ldr	r2, [r2, #4]
 8019196:	601a      	str	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	3308      	adds	r3, #8
 801919c:	68ba      	ldr	r2, [r7, #8]
 801919e:	6892      	ldr	r2, [r2, #8]
 80191a0:	601a      	str	r2, [r3, #0]
            break;
 80191a2:	bf00      	nop
    }

    if (p_owner->__board_alignment)
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d003      	beq.n	80191b6 <_alignSensors+0x1ae>
        _alignBoard(p_owner, dest);
 80191ae:	6879      	ldr	r1, [r7, #4]
 80191b0:	68f8      	ldr	r0, [r7, #12]
 80191b2:	f7ff fea8 	bl	8018f06 <_alignBoard>
}
 80191b6:	bf00      	nop
 80191b8:	3710      	adds	r7, #16
 80191ba:	46bd      	mov	sp, r7
 80191bc:	bd80      	pop	{r7, pc}
 80191be:	bf00      	nop

080191c0 <pifImuSensor_Init>:

void pifImuSensor_Init(PifImuSensor* p_owner)
{
 80191c0:	b580      	push	{r7, lr}
 80191c2:	b082      	sub	sp, #8
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	6078      	str	r0, [r7, #4]
	memset(p_owner, 0, sizeof(PifImuSensor));
 80191c8:	2274      	movs	r2, #116	; 0x74
 80191ca:	2100      	movs	r1, #0
 80191cc:	6878      	ldr	r0, [r7, #4]
 80191ce:	f009 fc63 	bl	8022a98 <memset>

	p_owner->_gyro_gain = 1;
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80191d8:	605a      	str	r2, [r3, #4]
	p_owner->_accel_gain = 1;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80191e0:	609a      	str	r2, [r3, #8]
	p_owner->_mag_gain = 1;
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80191e8:	60da      	str	r2, [r3, #12]
}
 80191ea:	bf00      	nop
 80191ec:	3708      	adds	r7, #8
 80191ee:	46bd      	mov	sp, r7
 80191f0:	bd80      	pop	{r7, pc}
	...

080191f4 <pifImuSensor_InitBoardAlignment>:

void pifImuSensor_InitBoardAlignment(PifImuSensor* p_owner, int16_t board_align_roll, int16_t board_align_pitch, int16_t board_align_yaw)
{
 80191f4:	b580      	push	{r7, lr}
 80191f6:	b092      	sub	sp, #72	; 0x48
 80191f8:	af00      	add	r7, sp, #0
 80191fa:	60f8      	str	r0, [r7, #12]
 80191fc:	4608      	mov	r0, r1
 80191fe:	4611      	mov	r1, r2
 8019200:	461a      	mov	r2, r3
 8019202:	4603      	mov	r3, r0
 8019204:	817b      	strh	r3, [r7, #10]
 8019206:	460b      	mov	r3, r1
 8019208:	813b      	strh	r3, [r7, #8]
 801920a:	4613      	mov	r3, r2
 801920c:	80fb      	strh	r3, [r7, #6]
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 801920e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019212:	2b00      	cmp	r3, #0
 8019214:	d108      	bne.n	8019228 <pifImuSensor_InitBoardAlignment+0x34>
 8019216:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d104      	bne.n	8019228 <pifImuSensor_InitBoardAlignment+0x34>
 801921e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019222:	2b00      	cmp	r3, #0
 8019224:	f000 80da 	beq.w	80193dc <pifImuSensor_InitBoardAlignment+0x1e8>

    p_owner->__board_alignment = TRUE;
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	2201      	movs	r2, #1
 801922c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    // deg2rad
    roll = board_align_roll * PIF_PI / 180.0f;
 8019230:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019234:	ee07 3a90 	vmov	s15, r3
 8019238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801923c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80193e4 <pifImuSensor_InitBoardAlignment+0x1f0>
 8019240:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019244:	eddf 6a68 	vldr	s13, [pc, #416]	; 80193e8 <pifImuSensor_InitBoardAlignment+0x1f4>
 8019248:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801924c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    pitch = board_align_pitch * PIF_PI / 180.0f;
 8019250:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019254:	ee07 3a90 	vmov	s15, r3
 8019258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801925c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80193e4 <pifImuSensor_InitBoardAlignment+0x1f0>
 8019260:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019264:	eddf 6a60 	vldr	s13, [pc, #384]	; 80193e8 <pifImuSensor_InitBoardAlignment+0x1f4>
 8019268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801926c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    yaw = board_align_yaw * PIF_PI / 180.0f;
 8019270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019274:	ee07 3a90 	vmov	s15, r3
 8019278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801927c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80193e4 <pifImuSensor_InitBoardAlignment+0x1f0>
 8019280:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019284:	eddf 6a58 	vldr	s13, [pc, #352]	; 80193e8 <pifImuSensor_InitBoardAlignment+0x1f4>
 8019288:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801928c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    cosx = cosf(roll);
 8019290:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8019294:	f009 fee0 	bl	8023058 <cosf>
 8019298:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    sinx = sinf(roll);
 801929c:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80192a0:	f009 ff5e 	bl	8023160 <sinf>
 80192a4:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    cosy = cosf(pitch);
 80192a8:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80192ac:	f009 fed4 	bl	8023058 <cosf>
 80192b0:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    siny = sinf(pitch);
 80192b4:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80192b8:	f009 ff52 	bl	8023160 <sinf>
 80192bc:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    cosz = cosf(yaw);
 80192c0:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80192c4:	f009 fec8 	bl	8023058 <cosf>
 80192c8:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinz = sinf(yaw);
 80192cc:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80192d0:	f009 ff46 	bl	8023160 <sinf>
 80192d4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    coszcosx = cosz * cosx;
 80192d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80192dc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80192e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80192e4:	edc7 7a08 	vstr	s15, [r7, #32]
    coszcosy = cosz * cosy;
 80192e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80192ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80192f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80192f4:	edc7 7a07 	vstr	s15, [r7, #28]
    sinzcosx = sinz * cosx;
 80192f8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80192fc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019304:	edc7 7a06 	vstr	s15, [r7, #24]
    coszsinx = sinx * cosz;
 8019308:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801930c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8019310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019314:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzsinx = sinx * sinz;
 8019318:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801931c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019324:	edc7 7a04 	vstr	s15, [r7, #16]

    // define rotation matrix
    p_owner->__board_rotation[0][0] = coszcosy;
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	69fa      	ldr	r2, [r7, #28]
 801932c:	651a      	str	r2, [r3, #80]	; 0x50
    p_owner->__board_rotation[0][1] = -cosy * sinz;
 801932e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019332:	eeb1 7a67 	vneg.f32	s14, s15
 8019336:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801933a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    p_owner->__board_rotation[0][2] = siny;
 8019344:	68fb      	ldr	r3, [r7, #12]
 8019346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019348:	659a      	str	r2, [r3, #88]	; 0x58

    p_owner->__board_rotation[1][0] = sinzcosx + (coszsinx * siny);
 801934a:	ed97 7a05 	vldr	s14, [r7, #20]
 801934e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019352:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019356:	edd7 7a06 	vldr	s15, [r7, #24]
 801935a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    p_owner->__board_rotation[1][1] = coszcosx - (sinzsinx * siny);
 8019364:	ed97 7a04 	vldr	s14, [r7, #16]
 8019368:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801936c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019370:	ed97 7a08 	vldr	s14, [r7, #32]
 8019374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    p_owner->__board_rotation[1][2] = -sinx * cosy;
 801937e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019382:	eeb1 7a67 	vneg.f32	s14, s15
 8019386:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801938a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

    p_owner->__board_rotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8019394:	ed97 7a08 	vldr	s14, [r7, #32]
 8019398:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801939c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80193a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80193a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
    p_owner->__board_rotation[2][1] = (coszsinx) + (sinzcosx * siny);
 80193ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80193b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80193b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80193ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80193be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    p_owner->__board_rotation[2][2] = cosy * cosx;
 80193c8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80193cc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80193d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 80193da:	e000      	b.n	80193de <pifImuSensor_InitBoardAlignment+0x1ea>
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 80193dc:	bf00      	nop
}
 80193de:	3748      	adds	r7, #72	; 0x48
 80193e0:	46bd      	mov	sp, r7
 80193e2:	bd80      	pop	{r7, pc}
 80193e4:	40490fdb 	.word	0x40490fdb
 80193e8:	43340000 	.word	0x43340000

080193ec <pifImuSensor_SetGyroAlign>:

void pifImuSensor_SetGyroAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 80193ec:	b480      	push	{r7}
 80193ee:	b083      	sub	sp, #12
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
 80193f4:	460b      	mov	r3, r1
 80193f6:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 80193f8:	78fb      	ldrb	r3, [r7, #3]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d002      	beq.n	8019404 <pifImuSensor_SetGyroAlign+0x18>
        p_owner->__gyro_info.align = align;
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	78fa      	ldrb	r2, [r7, #3]
 8019402:	741a      	strb	r2, [r3, #16]
}
 8019404:	bf00      	nop
 8019406:	370c      	adds	r7, #12
 8019408:	46bd      	mov	sp, r7
 801940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801940e:	4770      	bx	lr

08019410 <pifImuSensor_ReadRawGyro>:

BOOL pifImuSensor_ReadRawGyro(PifImuSensor* p_owner, float* p_gyro)
{
 8019410:	b580      	push	{r7, lr}
 8019412:	b088      	sub	sp, #32
 8019414:	af00      	add	r7, sp, #0
 8019416:	6078      	str	r0, [r7, #4]
 8019418:	6039      	str	r1, [r7, #0]
	int16_t data[AXIS_COUNT];
    float gyro[AXIS_COUNT];

	if (!(p_owner->_measure & IMU_MEASURE_GYROSCOPE)) return FALSE;
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	781b      	ldrb	r3, [r3, #0]
 801941e:	f003 0301 	and.w	r3, r3, #1
 8019422:	2b00      	cmp	r3, #0
 8019424:	d101      	bne.n	801942a <pifImuSensor_ReadRawGyro+0x1a>
 8019426:	2300      	movs	r3, #0
 8019428:	e02d      	b.n	8019486 <pifImuSensor_ReadRawGyro+0x76>

	if (!(*p_owner->__gyro_info.read)(p_owner->__gyro_info.p_issuer, data)) return FALSE;
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	695b      	ldr	r3, [r3, #20]
 801942e:	687a      	ldr	r2, [r7, #4]
 8019430:	6992      	ldr	r2, [r2, #24]
 8019432:	f107 0118 	add.w	r1, r7, #24
 8019436:	4610      	mov	r0, r2
 8019438:	4798      	blx	r3
 801943a:	4603      	mov	r3, r0
 801943c:	2b00      	cmp	r3, #0
 801943e:	d101      	bne.n	8019444 <pifImuSensor_ReadRawGyro+0x34>
 8019440:	2300      	movs	r3, #0
 8019442:	e020      	b.n	8019486 <pifImuSensor_ReadRawGyro+0x76>

	gyro[AXIS_X] = data[AXIS_X];
 8019444:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019448:	ee07 3a90 	vmov	s15, r3
 801944c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019450:	edc7 7a03 	vstr	s15, [r7, #12]
	gyro[AXIS_Y] = data[AXIS_Y];
 8019454:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8019458:	ee07 3a90 	vmov	s15, r3
 801945c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019460:	edc7 7a04 	vstr	s15, [r7, #16]
	gyro[AXIS_Z] = data[AXIS_Z];
 8019464:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8019468:	ee07 3a90 	vmov	s15, r3
 801946c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019470:	edc7 7a05 	vstr	s15, [r7, #20]

	_alignSensors(p_owner, gyro, p_gyro, p_owner->__gyro_info.align);
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	7c1b      	ldrb	r3, [r3, #16]
 8019478:	f107 010c 	add.w	r1, r7, #12
 801947c:	683a      	ldr	r2, [r7, #0]
 801947e:	6878      	ldr	r0, [r7, #4]
 8019480:	f7ff fdc2 	bl	8019008 <_alignSensors>
	return TRUE;
 8019484:	2301      	movs	r3, #1
}
 8019486:	4618      	mov	r0, r3
 8019488:	3720      	adds	r7, #32
 801948a:	46bd      	mov	sp, r7
 801948c:	bd80      	pop	{r7, pc}

0801948e <pifImuSensor_SetAccelAlign>:
	_alignSensors(p_owner, gyro, p_gyro, p_owner->__gyro_info.align);
	return TRUE;
}

void pifImuSensor_SetAccelAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 801948e:	b480      	push	{r7}
 8019490:	b083      	sub	sp, #12
 8019492:	af00      	add	r7, sp, #0
 8019494:	6078      	str	r0, [r7, #4]
 8019496:	460b      	mov	r3, r1
 8019498:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 801949a:	78fb      	ldrb	r3, [r7, #3]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d002      	beq.n	80194a6 <pifImuSensor_SetAccelAlign+0x18>
        p_owner->__accel_info.align = align;
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	78fa      	ldrb	r2, [r7, #3]
 80194a4:	771a      	strb	r2, [r3, #28]
}
 80194a6:	bf00      	nop
 80194a8:	370c      	adds	r7, #12
 80194aa:	46bd      	mov	sp, r7
 80194ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b0:	4770      	bx	lr

080194b2 <pifImuSensor_ReadRawAccel>:

BOOL pifImuSensor_ReadRawAccel(PifImuSensor* p_owner, float* p_accel)
{
 80194b2:	b580      	push	{r7, lr}
 80194b4:	b088      	sub	sp, #32
 80194b6:	af00      	add	r7, sp, #0
 80194b8:	6078      	str	r0, [r7, #4]
 80194ba:	6039      	str	r1, [r7, #0]
	int16_t data[AXIS_COUNT];
    float accel[AXIS_COUNT];

	if (!(p_owner->_measure & IMU_MEASURE_ACCELERO)) return FALSE;
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	781b      	ldrb	r3, [r3, #0]
 80194c0:	f003 0302 	and.w	r3, r3, #2
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d101      	bne.n	80194cc <pifImuSensor_ReadRawAccel+0x1a>
 80194c8:	2300      	movs	r3, #0
 80194ca:	e02d      	b.n	8019528 <pifImuSensor_ReadRawAccel+0x76>

	if (!(*p_owner->__accel_info.read)(p_owner->__accel_info.p_issuer, data)) return FALSE;
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	6a1b      	ldr	r3, [r3, #32]
 80194d0:	687a      	ldr	r2, [r7, #4]
 80194d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80194d4:	f107 0118 	add.w	r1, r7, #24
 80194d8:	4610      	mov	r0, r2
 80194da:	4798      	blx	r3
 80194dc:	4603      	mov	r3, r0
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d101      	bne.n	80194e6 <pifImuSensor_ReadRawAccel+0x34>
 80194e2:	2300      	movs	r3, #0
 80194e4:	e020      	b.n	8019528 <pifImuSensor_ReadRawAccel+0x76>

	accel[AXIS_X] = data[AXIS_X];
 80194e6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80194ea:	ee07 3a90 	vmov	s15, r3
 80194ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80194f2:	edc7 7a03 	vstr	s15, [r7, #12]
	accel[AXIS_Y] = data[AXIS_Y];
 80194f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80194fa:	ee07 3a90 	vmov	s15, r3
 80194fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019502:	edc7 7a04 	vstr	s15, [r7, #16]
	accel[AXIS_Z] = data[AXIS_Z];
 8019506:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801950a:	ee07 3a90 	vmov	s15, r3
 801950e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019512:	edc7 7a05 	vstr	s15, [r7, #20]

	_alignSensors(p_owner, accel, p_accel, p_owner->__accel_info.align);
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	7f1b      	ldrb	r3, [r3, #28]
 801951a:	f107 010c 	add.w	r1, r7, #12
 801951e:	683a      	ldr	r2, [r7, #0]
 8019520:	6878      	ldr	r0, [r7, #4]
 8019522:	f7ff fd71 	bl	8019008 <_alignSensors>
	return TRUE;
 8019526:	2301      	movs	r3, #1
}
 8019528:	4618      	mov	r0, r3
 801952a:	3720      	adds	r7, #32
 801952c:	46bd      	mov	sp, r7
 801952e:	bd80      	pop	{r7, pc}

08019530 <pifImuSensor_SetMagAlign>:
	_alignSensors(p_owner, accel, p_accel, p_owner->__accel_info.align);
	return TRUE;
}

void pifImuSensor_SetMagAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8019530:	b480      	push	{r7}
 8019532:	b083      	sub	sp, #12
 8019534:	af00      	add	r7, sp, #0
 8019536:	6078      	str	r0, [r7, #4]
 8019538:	460b      	mov	r3, r1
 801953a:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 801953c:	78fb      	ldrb	r3, [r7, #3]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d003      	beq.n	801954a <pifImuSensor_SetMagAlign+0x1a>
        p_owner->__mag_info.align = align;
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	78fa      	ldrb	r2, [r7, #3]
 8019546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 801954a:	bf00      	nop
 801954c:	370c      	adds	r7, #12
 801954e:	46bd      	mov	sp, r7
 8019550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019554:	4770      	bx	lr

08019556 <pifImuSensor_ReadRawMag>:

BOOL pifImuSensor_ReadRawMag(PifImuSensor* p_owner, float* p_mag)
{
 8019556:	b580      	push	{r7, lr}
 8019558:	b088      	sub	sp, #32
 801955a:	af00      	add	r7, sp, #0
 801955c:	6078      	str	r0, [r7, #4]
 801955e:	6039      	str	r1, [r7, #0]
	int16_t data[AXIS_COUNT];
    float mag[AXIS_COUNT];

	if (!(p_owner->_measure & IMU_MEASURE_MAGNETO)) return FALSE;
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	781b      	ldrb	r3, [r3, #0]
 8019564:	f003 0304 	and.w	r3, r3, #4
 8019568:	2b00      	cmp	r3, #0
 801956a:	d101      	bne.n	8019570 <pifImuSensor_ReadRawMag+0x1a>
 801956c:	2300      	movs	r3, #0
 801956e:	e02e      	b.n	80195ce <pifImuSensor_ReadRawMag+0x78>

	if (!(*p_owner->__mag_info.read)(p_owner->__mag_info.p_issuer, data)) return FALSE;
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019574:	687a      	ldr	r2, [r7, #4]
 8019576:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8019578:	f107 0118 	add.w	r1, r7, #24
 801957c:	4610      	mov	r0, r2
 801957e:	4798      	blx	r3
 8019580:	4603      	mov	r3, r0
 8019582:	2b00      	cmp	r3, #0
 8019584:	d101      	bne.n	801958a <pifImuSensor_ReadRawMag+0x34>
 8019586:	2300      	movs	r3, #0
 8019588:	e021      	b.n	80195ce <pifImuSensor_ReadRawMag+0x78>

	mag[AXIS_X] = data[AXIS_X];
 801958a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801958e:	ee07 3a90 	vmov	s15, r3
 8019592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019596:	edc7 7a03 	vstr	s15, [r7, #12]
	mag[AXIS_Y] = data[AXIS_Y];
 801959a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801959e:	ee07 3a90 	vmov	s15, r3
 80195a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80195a6:	edc7 7a04 	vstr	s15, [r7, #16]
	mag[AXIS_Z] = data[AXIS_Z];
 80195aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80195ae:	ee07 3a90 	vmov	s15, r3
 80195b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80195b6:	edc7 7a05 	vstr	s15, [r7, #20]

	_alignSensors(p_owner, mag, p_mag, p_owner->__mag_info.align);
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80195c0:	f107 010c 	add.w	r1, r7, #12
 80195c4:	683a      	ldr	r2, [r7, #0]
 80195c6:	6878      	ldr	r0, [r7, #4]
 80195c8:	f7ff fd1e 	bl	8019008 <_alignSensors>
	return TRUE;
 80195cc:	2301      	movs	r3, #1
}
 80195ce:	4618      	mov	r0, r3
 80195d0:	3720      	adds	r7, #32
 80195d2:	46bd      	mov	sp, r7
 80195d4:	bd80      	pop	{r7, pc}
	...

080195d8 <_changeFsSel>:

#include <math.h>


static BOOL _changeFsSel(PifImuSensor* p_imu_sensor, PifMpu60x0FsSel fs_sel)
{
 80195d8:	b580      	push	{r7, lr}
 80195da:	b082      	sub	sp, #8
 80195dc:	af00      	add	r7, sp, #0
 80195de:	6078      	str	r0, [r7, #4]
 80195e0:	460b      	mov	r3, r1
 80195e2:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d101      	bne.n	80195ee <_changeFsSel+0x16>
 80195ea:	2300      	movs	r3, #0
 80195ec:	e017      	b.n	801961e <_changeFsSel+0x46>
	p_imu_sensor->_gyro_gain = 131.0 / (1 << fs_sel);
 80195ee:	78fb      	ldrb	r3, [r7, #3]
 80195f0:	2201      	movs	r2, #1
 80195f2:	fa02 f303 	lsl.w	r3, r2, r3
 80195f6:	4618      	mov	r0, r3
 80195f8:	f7e6 ff48 	bl	800048c <__aeabi_i2d>
 80195fc:	4602      	mov	r2, r0
 80195fe:	460b      	mov	r3, r1
 8019600:	a109      	add	r1, pc, #36	; (adr r1, 8019628 <_changeFsSel+0x50>)
 8019602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019606:	f7e7 f8d5 	bl	80007b4 <__aeabi_ddiv>
 801960a:	4602      	mov	r2, r0
 801960c:	460b      	mov	r3, r1
 801960e:	4610      	mov	r0, r2
 8019610:	4619      	mov	r1, r3
 8019612:	f7e7 fa87 	bl	8000b24 <__aeabi_d2f>
 8019616:	4602      	mov	r2, r0
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	605a      	str	r2, [r3, #4]
	return TRUE;
 801961c:	2301      	movs	r3, #1
}
 801961e:	4618      	mov	r0, r3
 8019620:	3708      	adds	r7, #8
 8019622:	46bd      	mov	sp, r7
 8019624:	bd80      	pop	{r7, pc}
 8019626:	bf00      	nop
 8019628:	00000000 	.word	0x00000000
 801962c:	40606000 	.word	0x40606000

08019630 <_changeAfsSel>:

static BOOL _changeAfsSel(PifImuSensor* p_imu_sensor, PifMpu60x0AfsSel afs_sel)
{
 8019630:	b480      	push	{r7}
 8019632:	b083      	sub	sp, #12
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
 8019638:	460b      	mov	r3, r1
 801963a:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d101      	bne.n	8019646 <_changeAfsSel+0x16>
 8019642:	2300      	movs	r3, #0
 8019644:	e00c      	b.n	8019660 <_changeAfsSel+0x30>
	p_imu_sensor->_accel_gain = 16384 >> afs_sel;
 8019646:	78fb      	ldrb	r3, [r7, #3]
 8019648:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801964c:	fa42 f303 	asr.w	r3, r2, r3
 8019650:	ee07 3a90 	vmov	s15, r3
 8019654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	edc3 7a02 	vstr	s15, [r3, #8]
	return TRUE;
 801965e:	2301      	movs	r3, #1
}
 8019660:	4618      	mov	r0, r3
 8019662:	370c      	adds	r7, #12
 8019664:	46bd      	mov	sp, r7
 8019666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801966a:	4770      	bx	lr

0801966c <pifMpu60x0_Detect>:

BOOL pifMpu60x0_Detect(PifI2cPort* p_i2c, uint8_t addr)
{
 801966c:	b590      	push	{r4, r7, lr}
 801966e:	b089      	sub	sp, #36	; 0x24
 8019670:	af00      	add	r7, sp, #0
 8019672:	6078      	str	r0, [r7, #4]
 8019674:	460b      	mov	r3, r1
 8019676:	70fb      	strb	r3, [r7, #3]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "MPU60X0 Ident: ";
 8019678:	4b1c      	ldr	r3, [pc, #112]	; (80196ec <pifMpu60x0_Detect+0x80>)
 801967a:	f107 040c 	add.w	r4, r7, #12
 801967e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data;
	PifI2cDevice* p_device;

    p_device = pifI2cPort_TemporaryDevice(p_i2c, addr);
 8019684:	78fb      	ldrb	r3, [r7, #3]
 8019686:	4619      	mov	r1, r3
 8019688:	6878      	ldr	r0, [r7, #4]
 801968a:	f7f8 fcd5 	bl	8012038 <pifI2cPort_TemporaryDevice>
 801968e:	61f8      	str	r0, [r7, #28]

	if (!pifI2cDevice_ReadRegByte(p_device, MPU60X0_REG_WHO_AM_I, &data)) return FALSE;
 8019690:	f107 030b 	add.w	r3, r7, #11
 8019694:	461a      	mov	r2, r3
 8019696:	2175      	movs	r1, #117	; 0x75
 8019698:	69f8      	ldr	r0, [r7, #28]
 801969a:	f7f8 fd91 	bl	80121c0 <pifI2cDevice_ReadRegByte>
 801969e:	4603      	mov	r3, r0
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d101      	bne.n	80196a8 <pifMpu60x0_Detect+0x3c>
 80196a4:	2300      	movs	r3, #0
 80196a6:	e01c      	b.n	80196e2 <pifMpu60x0_Detect+0x76>
	if (data != addr) return FALSE;
 80196a8:	7afb      	ldrb	r3, [r7, #11]
 80196aa:	78fa      	ldrb	r2, [r7, #3]
 80196ac:	429a      	cmp	r2, r3
 80196ae:	d001      	beq.n	80196b4 <pifMpu60x0_Detect+0x48>
 80196b0:	2300      	movs	r3, #0
 80196b2:	e016      	b.n	80196e2 <pifMpu60x0_Detect+0x76>
#ifndef __PIF_NO_LOG__	
	if (data < 32) {
 80196b4:	7afb      	ldrb	r3, [r7, #11]
 80196b6:	2b1f      	cmp	r3, #31
 80196b8:	d809      	bhi.n	80196ce <pifMpu60x0_Detect+0x62>
		pifLog_Printf(LT_INFO, "%s%Xh", ident, data >> 1);
 80196ba:	7afb      	ldrb	r3, [r7, #11]
 80196bc:	085b      	lsrs	r3, r3, #1
 80196be:	b2db      	uxtb	r3, r3
 80196c0:	f107 020c 	add.w	r2, r7, #12
 80196c4:	490a      	ldr	r1, [pc, #40]	; (80196f0 <pifMpu60x0_Detect+0x84>)
 80196c6:	2002      	movs	r0, #2
 80196c8:	f7f9 fe6c 	bl	80133a4 <pifLog_Printf>
 80196cc:	e008      	b.n	80196e0 <pifMpu60x0_Detect+0x74>
	}
	else {
		pifLog_Printf(LT_INFO, "%s%c", ident, data >> 1);
 80196ce:	7afb      	ldrb	r3, [r7, #11]
 80196d0:	085b      	lsrs	r3, r3, #1
 80196d2:	b2db      	uxtb	r3, r3
 80196d4:	f107 020c 	add.w	r2, r7, #12
 80196d8:	4906      	ldr	r1, [pc, #24]	; (80196f4 <pifMpu60x0_Detect+0x88>)
 80196da:	2002      	movs	r0, #2
 80196dc:	f7f9 fe62 	bl	80133a4 <pifLog_Printf>
	}
#endif
	return TRUE;
 80196e0:	2301      	movs	r3, #1
}
 80196e2:	4618      	mov	r0, r3
 80196e4:	3724      	adds	r7, #36	; 0x24
 80196e6:	46bd      	mov	sp, r7
 80196e8:	bd90      	pop	{r4, r7, pc}
 80196ea:	bf00      	nop
 80196ec:	080278bc 	.word	0x080278bc
 80196f0:	080278ac 	.word	0x080278ac
 80196f4:	080278b4 	.word	0x080278b4

080196f8 <pifMpu60x0_Init>:

BOOL pifMpu60x0_Init(PifMpu60x0* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr, PifMpu60x0Param* p_param, PifImuSensor* p_imu_sensor)
{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b088      	sub	sp, #32
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	60f8      	str	r0, [r7, #12]
 8019700:	607a      	str	r2, [r7, #4]
 8019702:	461a      	mov	r2, r3
 8019704:	460b      	mov	r3, r1
 8019706:	817b      	strh	r3, [r7, #10]
 8019708:	4613      	mov	r3, r2
 801970a:	727b      	strb	r3, [r7, #9]
    PifMpu60x0AccelConfig accel_config;
    PifMpu60x0Config config;
    PifMpu60x0GyroConfig gyro_config;
	PifMpu60x0PwrMgmt1 pwr_mgmt_1;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	2b00      	cmp	r3, #0
 8019710:	d005      	beq.n	801971e <pifMpu60x0_Init+0x26>
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d002      	beq.n	801971e <pifMpu60x0_Init+0x26>
 8019718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801971a:	2b00      	cmp	r3, #0
 801971c:	d104      	bne.n	8019728 <pifMpu60x0_Init+0x30>
		pif_error = E_INVALID_PARAM;
 801971e:	4b97      	ldr	r3, [pc, #604]	; (801997c <pifMpu60x0_Init+0x284>)
 8019720:	2201      	movs	r2, #1
 8019722:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8019724:	2300      	movs	r3, #0
 8019726:	e124      	b.n	8019972 <pifMpu60x0_Init+0x27a>
	}

	memset(p_owner, 0, sizeof(PifMpu60x0));
 8019728:	2210      	movs	r2, #16
 801972a:	2100      	movs	r1, #0
 801972c:	68f8      	ldr	r0, [r7, #12]
 801972e:	f009 f9b3 	bl	8022a98 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c, addr);
 8019732:	7a7b      	ldrb	r3, [r7, #9]
 8019734:	4619      	mov	r1, r3
 8019736:	6878      	ldr	r0, [r7, #4]
 8019738:	f7f8 fc40 	bl	8011fbc <pifI2cPort_AddDevice>
 801973c:	4602      	mov	r2, r0
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	609a      	str	r2, [r3, #8]
    if (!p_owner->_p_i2c) return FALSE;
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	689b      	ldr	r3, [r3, #8]
 8019746:	2b00      	cmp	r3, #0
 8019748:	d101      	bne.n	801974e <pifMpu60x0_Init+0x56>
 801974a:	2300      	movs	r3, #0
 801974c:	e111      	b.n	8019972 <pifMpu60x0_Init+0x27a>

   	pwr_mgmt_1.byte = 0;
 801974e:	2300      	movs	r3, #0
 8019750:	743b      	strb	r3, [r7, #16]
	pwr_mgmt_1.bit.device_reset = TRUE;
 8019752:	7c3b      	ldrb	r3, [r7, #16]
 8019754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019758:	743b      	strb	r3, [r7, #16]
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	689b      	ldr	r3, [r3, #8]
 801975e:	7c3a      	ldrb	r2, [r7, #16]
 8019760:	216b      	movs	r1, #107	; 0x6b
 8019762:	4618      	mov	r0, r3
 8019764:	f7f8 fe5c 	bl	8012420 <pifI2cDevice_WriteRegByte>
 8019768:	4603      	mov	r3, r0
 801976a:	2b00      	cmp	r3, #0
 801976c:	f000 80ea 	beq.w	8019944 <pifMpu60x0_Init+0x24c>
	pifTaskManager_YieldMs(100);
 8019770:	2064      	movs	r0, #100	; 0x64
 8019772:	f7fb fa5f 	bl	8014c34 <pifTaskManager_YieldMs>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 8019776:	68fb      	ldr	r3, [r7, #12]
 8019778:	6898      	ldr	r0, [r3, #8]
 801977a:	f107 031f 	add.w	r3, r7, #31
 801977e:	f240 3202 	movw	r2, #770	; 0x302
 8019782:	211b      	movs	r1, #27
 8019784:	f7f8 fd69 	bl	801225a <pifI2cDevice_ReadRegBit8>
 8019788:	4603      	mov	r3, r0
 801978a:	2b00      	cmp	r3, #0
 801978c:	f000 80dc 	beq.w	8019948 <pifMpu60x0_Init+0x250>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 8019790:	7ffb      	ldrb	r3, [r7, #31]
 8019792:	4619      	mov	r1, r3
 8019794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019796:	f7ff ff1f 	bl	80195d8 <_changeFsSel>
 801979a:	4603      	mov	r3, r0
 801979c:	2b00      	cmp	r3, #0
 801979e:	f000 80d5 	beq.w	801994c <pifMpu60x0_Init+0x254>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	6898      	ldr	r0, [r3, #8]
 80197a6:	f107 031f 	add.w	r3, r7, #31
 80197aa:	f240 3202 	movw	r2, #770	; 0x302
 80197ae:	211c      	movs	r1, #28
 80197b0:	f7f8 fd53 	bl	801225a <pifI2cDevice_ReadRegBit8>
 80197b4:	4603      	mov	r3, r0
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	f000 80ca 	beq.w	8019950 <pifMpu60x0_Init+0x258>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 80197bc:	7ffb      	ldrb	r3, [r7, #31]
 80197be:	4619      	mov	r1, r3
 80197c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80197c2:	f7ff ff35 	bl	8019630 <_changeAfsSel>
 80197c6:	4603      	mov	r3, r0
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	f000 80c3 	beq.w	8019954 <pifMpu60x0_Init+0x25c>

    pwr_mgmt_1.byte = 0;
 80197ce:	2300      	movs	r3, #0
 80197d0:	743b      	strb	r3, [r7, #16]
    if (p_param) {
 80197d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d054      	beq.n	8019882 <pifMpu60x0_Init+0x18a>
        if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_SMPLRT_DIV, p_param->smplrt_div)) goto fail;
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	6898      	ldr	r0, [r3, #8]
 80197dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197de:	781b      	ldrb	r3, [r3, #0]
 80197e0:	461a      	mov	r2, r3
 80197e2:	2119      	movs	r1, #25
 80197e4:	f7f8 fe1c 	bl	8012420 <pifI2cDevice_WriteRegByte>
 80197e8:	4603      	mov	r3, r0
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	f000 80b4 	beq.w	8019958 <pifMpu60x0_Init+0x260>

        pwr_mgmt_1.bit.clksel = p_param->clksel;
 80197f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197f2:	791b      	ldrb	r3, [r3, #4]
 80197f4:	f003 0307 	and.w	r3, r3, #7
 80197f8:	b2da      	uxtb	r2, r3
 80197fa:	7c3b      	ldrb	r3, [r7, #16]
 80197fc:	f362 0302 	bfi	r3, r2, #0, #3
 8019800:	743b      	strb	r3, [r7, #16]
        if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	689b      	ldr	r3, [r3, #8]
 8019806:	7c3a      	ldrb	r2, [r7, #16]
 8019808:	216b      	movs	r1, #107	; 0x6b
 801980a:	4618      	mov	r0, r3
 801980c:	f7f8 fe08 	bl	8012420 <pifI2cDevice_WriteRegByte>
 8019810:	4603      	mov	r3, r0
 8019812:	2b00      	cmp	r3, #0
 8019814:	f000 80a2 	beq.w	801995c <pifMpu60x0_Init+0x264>

    	config.byte = 0;
 8019818:	2300      	movs	r3, #0
 801981a:	763b      	strb	r3, [r7, #24]
    		config.bit.dlpf_cfg = p_param->dlpf_cfg;
 801981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801981e:	785b      	ldrb	r3, [r3, #1]
 8019820:	f003 0307 	and.w	r3, r3, #7
 8019824:	b2da      	uxtb	r2, r3
 8019826:	7e3b      	ldrb	r3, [r7, #24]
 8019828:	f362 0302 	bfi	r3, r2, #0, #3
 801982c:	763b      	strb	r3, [r7, #24]
    	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 801982e:	68fb      	ldr	r3, [r7, #12]
 8019830:	689b      	ldr	r3, [r3, #8]
 8019832:	7e3a      	ldrb	r2, [r7, #24]
 8019834:	211a      	movs	r1, #26
 8019836:	4618      	mov	r0, r3
 8019838:	f7f8 fdf2 	bl	8012420 <pifI2cDevice_WriteRegByte>
 801983c:	4603      	mov	r3, r0
 801983e:	2b00      	cmp	r3, #0
 8019840:	f000 808e 	beq.w	8019960 <pifMpu60x0_Init+0x268>

        gyro_config.byte = 0;
 8019844:	2300      	movs	r3, #0
 8019846:	753b      	strb	r3, [r7, #20]
        gyro_config.bit.fs_sel = p_param->fs_sel;
 8019848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801984a:	789b      	ldrb	r3, [r3, #2]
 801984c:	f003 0303 	and.w	r3, r3, #3
 8019850:	b2da      	uxtb	r2, r3
 8019852:	7d3b      	ldrb	r3, [r7, #20]
 8019854:	f362 03c4 	bfi	r3, r2, #3, #2
 8019858:	753b      	strb	r3, [r7, #20]
        pifMpu60x0_SetGyroConfig(p_owner, gyro_config);
 801985a:	7d39      	ldrb	r1, [r7, #20]
 801985c:	68f8      	ldr	r0, [r7, #12]
 801985e:	f000 f8ad 	bl	80199bc <pifMpu60x0_SetGyroConfig>

        accel_config.byte = 0;
 8019862:	2300      	movs	r3, #0
 8019864:	773b      	strb	r3, [r7, #28]
        accel_config.bit.afs_sel = p_param->afs_sel;
 8019866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019868:	78db      	ldrb	r3, [r3, #3]
 801986a:	f003 0303 	and.w	r3, r3, #3
 801986e:	b2da      	uxtb	r2, r3
 8019870:	7f3b      	ldrb	r3, [r7, #28]
 8019872:	f362 03c4 	bfi	r3, r2, #3, #2
 8019876:	773b      	strb	r3, [r7, #28]
        pifMpu60x0_SetAccelConfig(p_owner, accel_config);
 8019878:	7f39      	ldrb	r1, [r7, #28]
 801987a:	68f8      	ldr	r0, [r7, #12]
 801987c:	f000 f8be 	bl	80199fc <pifMpu60x0_SetAccelConfig>
 8019880:	e018      	b.n	80198b4 <pifMpu60x0_Init+0x1bc>
    }
    else {
        if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 8019882:	68fb      	ldr	r3, [r7, #12]
 8019884:	689b      	ldr	r3, [r3, #8]
 8019886:	2200      	movs	r2, #0
 8019888:	2119      	movs	r1, #25
 801988a:	4618      	mov	r0, r3
 801988c:	f7f8 fdc8 	bl	8012420 <pifI2cDevice_WriteRegByte>
 8019890:	4603      	mov	r3, r0
 8019892:	2b00      	cmp	r3, #0
 8019894:	d066      	beq.n	8019964 <pifMpu60x0_Init+0x26c>

        pwr_mgmt_1.bit.clksel = MPU60X0_CLKSEL_PLL_ZGYRO;
 8019896:	7c3b      	ldrb	r3, [r7, #16]
 8019898:	2203      	movs	r2, #3
 801989a:	f362 0302 	bfi	r3, r2, #0, #3
 801989e:	743b      	strb	r3, [r7, #16]
        if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	689b      	ldr	r3, [r3, #8]
 80198a4:	7c3a      	ldrb	r2, [r7, #16]
 80198a6:	216b      	movs	r1, #107	; 0x6b
 80198a8:	4618      	mov	r0, r3
 80198aa:	f7f8 fdb9 	bl	8012420 <pifI2cDevice_WriteRegByte>
 80198ae:	4603      	mov	r3, r0
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d059      	beq.n	8019968 <pifMpu60x0_Init+0x270>
    }

	if (id == PIF_ID_AUTO) id = pif_id++;
 80198b4:	897b      	ldrh	r3, [r7, #10]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d106      	bne.n	80198c8 <pifMpu60x0_Init+0x1d0>
 80198ba:	4b31      	ldr	r3, [pc, #196]	; (8019980 <pifMpu60x0_Init+0x288>)
 80198bc:	881b      	ldrh	r3, [r3, #0]
 80198be:	1c5a      	adds	r2, r3, #1
 80198c0:	b291      	uxth	r1, r2
 80198c2:	4a2f      	ldr	r2, [pc, #188]	; (8019980 <pifMpu60x0_Init+0x288>)
 80198c4:	8011      	strh	r1, [r2, #0]
 80198c6:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	897a      	ldrh	r2, [r7, #10]
 80198cc:	809a      	strh	r2, [r3, #4]
	p_owner->temp_scale = 1;
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	2201      	movs	r2, #1
 80198d2:	709a      	strb	r2, [r3, #2]
	p_owner->__p_imu_sensor = p_imu_sensor;
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80198d8:	60da      	str	r2, [r3, #12]

	p_imu_sensor->_measure |= IMU_MEASURE_GYROSCOPE | IMU_MEASURE_ACCELERO;
 80198da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198dc:	781b      	ldrb	r3, [r3, #0]
 80198de:	f043 0303 	orr.w	r3, r3, #3
 80198e2:	b2da      	uxtb	r2, r3
 80198e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198e6:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__gyro_info.align = IMUS_ALIGN_CW0_DEG;
 80198e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198ea:	2201      	movs	r2, #1
 80198ec:	741a      	strb	r2, [r3, #16]
	p_imu_sensor->__gyro_info.read = (PifImuSensorRead)pifMpu60x0_ReadGyro;
 80198ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198f0:	4a24      	ldr	r2, [pc, #144]	; (8019984 <pifMpu60x0_Init+0x28c>)
 80198f2:	615a      	str	r2, [r3, #20]
	p_imu_sensor->__gyro_info.p_issuer = p_owner;
 80198f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198f6:	68fa      	ldr	r2, [r7, #12]
 80198f8:	619a      	str	r2, [r3, #24]

	p_imu_sensor->__accel_info.align = IMUS_ALIGN_CW0_DEG;
 80198fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198fc:	2201      	movs	r2, #1
 80198fe:	771a      	strb	r2, [r3, #28]
	p_imu_sensor->__accel_info.read = (PifImuSensorRead)pifMpu60x0_ReadAccel;
 8019900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019902:	4a21      	ldr	r2, [pc, #132]	; (8019988 <pifMpu60x0_Init+0x290>)
 8019904:	621a      	str	r2, [r3, #32]
	p_imu_sensor->__accel_info.p_issuer = p_owner;
 8019906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019908:	68fa      	ldr	r2, [r7, #12]
 801990a:	625a      	str	r2, [r3, #36]	; 0x24

    // Reset calibrate values
    p_imu_sensor->__delta_gyro[AXIS_X] = 0;
 801990c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801990e:	2200      	movs	r2, #0
 8019910:	869a      	strh	r2, [r3, #52]	; 0x34
    p_imu_sensor->__delta_gyro[AXIS_Y] = 0;
 8019912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019914:	2200      	movs	r2, #0
 8019916:	86da      	strh	r2, [r3, #54]	; 0x36
    p_imu_sensor->__delta_gyro[AXIS_Z] = 0;
 8019918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801991a:	2200      	movs	r2, #0
 801991c:	871a      	strh	r2, [r3, #56]	; 0x38
    p_imu_sensor->__use_calibrate = FALSE;
 801991e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019920:	2200      	movs	r2, #0
 8019922:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

    // Reset threshold values
    p_imu_sensor->__threshold_gyro[AXIS_X] = 0;
 8019926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019928:	2200      	movs	r2, #0
 801992a:	875a      	strh	r2, [r3, #58]	; 0x3a
    p_imu_sensor->__threshold_gyro[AXIS_Y] = 0;
 801992c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801992e:	2200      	movs	r2, #0
 8019930:	879a      	strh	r2, [r3, #60]	; 0x3c
    p_imu_sensor->__threshold_gyro[AXIS_Z] = 0;
 8019932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019934:	2200      	movs	r2, #0
 8019936:	87da      	strh	r2, [r3, #62]	; 0x3e
    p_imu_sensor->__actual_threshold = 0;
 8019938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801993a:	f04f 0200 	mov.w	r2, #0
 801993e:	649a      	str	r2, [r3, #72]	; 0x48
    return TRUE;
 8019940:	2301      	movs	r3, #1
 8019942:	e016      	b.n	8019972 <pifMpu60x0_Init+0x27a>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8019944:	bf00      	nop
 8019946:	e010      	b.n	801996a <pifMpu60x0_Init+0x272>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 8019948:	bf00      	nop
 801994a:	e00e      	b.n	801996a <pifMpu60x0_Init+0x272>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 801994c:	bf00      	nop
 801994e:	e00c      	b.n	801996a <pifMpu60x0_Init+0x272>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 8019950:	bf00      	nop
 8019952:	e00a      	b.n	801996a <pifMpu60x0_Init+0x272>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 8019954:	bf00      	nop
 8019956:	e008      	b.n	801996a <pifMpu60x0_Init+0x272>
        if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_SMPLRT_DIV, p_param->smplrt_div)) goto fail;
 8019958:	bf00      	nop
 801995a:	e006      	b.n	801996a <pifMpu60x0_Init+0x272>
        if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 801995c:	bf00      	nop
 801995e:	e004      	b.n	801996a <pifMpu60x0_Init+0x272>
    	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 8019960:	bf00      	nop
 8019962:	e002      	b.n	801996a <pifMpu60x0_Init+0x272>
        if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 8019964:	bf00      	nop
 8019966:	e000      	b.n	801996a <pifMpu60x0_Init+0x272>
        if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8019968:	bf00      	nop

fail:
	pifMpu60x0_Clear(p_owner);
 801996a:	68f8      	ldr	r0, [r7, #12]
 801996c:	f000 f80e 	bl	801998c <pifMpu60x0_Clear>
	return FALSE;
 8019970:	2300      	movs	r3, #0
}
 8019972:	4618      	mov	r0, r3
 8019974:	3720      	adds	r7, #32
 8019976:	46bd      	mov	sp, r7
 8019978:	bd80      	pop	{r7, pc}
 801997a:	bf00      	nop
 801997c:	20001c0d 	.word	0x20001c0d
 8019980:	2000011c 	.word	0x2000011c
 8019984:	08019a3d 	.word	0x08019a3d
 8019988:	08019b03 	.word	0x08019b03

0801998c <pifMpu60x0_Clear>:

void pifMpu60x0_Clear(PifMpu60x0* p_owner)
{
 801998c:	b580      	push	{r7, lr}
 801998e:	b082      	sub	sp, #8
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
    if (p_owner->_p_i2c) {
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	689b      	ldr	r3, [r3, #8]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d00b      	beq.n	80199b4 <pifMpu60x0_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	689b      	ldr	r3, [r3, #8]
 80199a0:	685a      	ldr	r2, [r3, #4]
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	689b      	ldr	r3, [r3, #8]
 80199a6:	4619      	mov	r1, r3
 80199a8:	4610      	mov	r0, r2
 80199aa:	f7f8 fb31 	bl	8012010 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	2200      	movs	r2, #0
 80199b2:	609a      	str	r2, [r3, #8]
    }
}
 80199b4:	bf00      	nop
 80199b6:	3708      	adds	r7, #8
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bd80      	pop	{r7, pc}

080199bc <pifMpu60x0_SetGyroConfig>:

BOOL pifMpu60x0_SetGyroConfig(PifMpu60x0* p_owner, PifMpu60x0GyroConfig gyro_config)
{
 80199bc:	b580      	push	{r7, lr}
 80199be:	b082      	sub	sp, #8
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	6078      	str	r0, [r7, #4]
 80199c4:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, gyro_config.byte)) return FALSE;
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	689b      	ldr	r3, [r3, #8]
 80199ca:	783a      	ldrb	r2, [r7, #0]
 80199cc:	211b      	movs	r1, #27
 80199ce:	4618      	mov	r0, r3
 80199d0:	f7f8 fd26 	bl	8012420 <pifI2cDevice_WriteRegByte>
 80199d4:	4603      	mov	r3, r0
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d101      	bne.n	80199de <pifMpu60x0_SetGyroConfig+0x22>
 80199da:	2300      	movs	r3, #0
 80199dc:	e00a      	b.n	80199f4 <pifMpu60x0_SetGyroConfig+0x38>
    _changeFsSel(p_owner->__p_imu_sensor, gyro_config.bit.fs_sel);
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	68da      	ldr	r2, [r3, #12]
 80199e2:	783b      	ldrb	r3, [r7, #0]
 80199e4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80199e8:	b2db      	uxtb	r3, r3
 80199ea:	4619      	mov	r1, r3
 80199ec:	4610      	mov	r0, r2
 80199ee:	f7ff fdf3 	bl	80195d8 <_changeFsSel>
	return TRUE;
 80199f2:	2301      	movs	r3, #1
}
 80199f4:	4618      	mov	r0, r3
 80199f6:	3708      	adds	r7, #8
 80199f8:	46bd      	mov	sp, r7
 80199fa:	bd80      	pop	{r7, pc}

080199fc <pifMpu60x0_SetAccelConfig>:
    _changeFsSel(p_owner->__p_imu_sensor, fs_sel);
	return TRUE;
}

BOOL pifMpu60x0_SetAccelConfig(PifMpu60x0* p_owner, PifMpu60x0AccelConfig accel_config)
{
 80199fc:	b580      	push	{r7, lr}
 80199fe:	b082      	sub	sp, #8
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	6078      	str	r0, [r7, #4]
 8019a04:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, accel_config.byte)) return FALSE;
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	689b      	ldr	r3, [r3, #8]
 8019a0a:	783a      	ldrb	r2, [r7, #0]
 8019a0c:	211c      	movs	r1, #28
 8019a0e:	4618      	mov	r0, r3
 8019a10:	f7f8 fd06 	bl	8012420 <pifI2cDevice_WriteRegByte>
 8019a14:	4603      	mov	r3, r0
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d101      	bne.n	8019a1e <pifMpu60x0_SetAccelConfig+0x22>
 8019a1a:	2300      	movs	r3, #0
 8019a1c:	e00a      	b.n	8019a34 <pifMpu60x0_SetAccelConfig+0x38>
    _changeAfsSel(p_owner->__p_imu_sensor, accel_config.bit.afs_sel);
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	68da      	ldr	r2, [r3, #12]
 8019a22:	783b      	ldrb	r3, [r7, #0]
 8019a24:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8019a28:	b2db      	uxtb	r3, r3
 8019a2a:	4619      	mov	r1, r3
 8019a2c:	4610      	mov	r0, r2
 8019a2e:	f7ff fdff 	bl	8019630 <_changeAfsSel>
	return TRUE;
 8019a32:	2301      	movs	r3, #1
}
 8019a34:	4618      	mov	r0, r3
 8019a36:	3708      	adds	r7, #8
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	bd80      	pop	{r7, pc}

08019a3c <pifMpu60x0_ReadGyro>:
    _changeAfsSel(p_owner->__p_imu_sensor, afs_sel);
	return TRUE;
}

BOOL pifMpu60x0_ReadGyro(PifMpu60x0* p_owner, int16_t* p_gyro)
{
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b084      	sub	sp, #16
 8019a40:	af00      	add	r7, sp, #0
 8019a42:	6078      	str	r0, [r7, #4]
 8019a44:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_GYRO_XOUT_H, data, 6)) return FALSE;
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	6898      	ldr	r0, [r3, #8]
 8019a4a:	f107 0208 	add.w	r2, r7, #8
 8019a4e:	2306      	movs	r3, #6
 8019a50:	2143      	movs	r1, #67	; 0x43
 8019a52:	f7f8 fbed 	bl	8012230 <pifI2cDevice_ReadRegBytes>
 8019a56:	4603      	mov	r3, r0
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d101      	bne.n	8019a60 <pifMpu60x0_ReadGyro+0x24>
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	e04c      	b.n	8019afa <pifMpu60x0_ReadGyro+0xbe>

	p_gyro[AXIS_X] = (data[0] << 8) + data[1];
 8019a60:	7a3b      	ldrb	r3, [r7, #8]
 8019a62:	b29b      	uxth	r3, r3
 8019a64:	021b      	lsls	r3, r3, #8
 8019a66:	b29a      	uxth	r2, r3
 8019a68:	7a7b      	ldrb	r3, [r7, #9]
 8019a6a:	b29b      	uxth	r3, r3
 8019a6c:	4413      	add	r3, r2
 8019a6e:	b29b      	uxth	r3, r3
 8019a70:	b21a      	sxth	r2, r3
 8019a72:	683b      	ldr	r3, [r7, #0]
 8019a74:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Y] = (data[2] << 8) + data[3];
 8019a76:	7abb      	ldrb	r3, [r7, #10]
 8019a78:	b29b      	uxth	r3, r3
 8019a7a:	021b      	lsls	r3, r3, #8
 8019a7c:	b29a      	uxth	r2, r3
 8019a7e:	7afb      	ldrb	r3, [r7, #11]
 8019a80:	b29b      	uxth	r3, r3
 8019a82:	4413      	add	r3, r2
 8019a84:	b29a      	uxth	r2, r3
 8019a86:	683b      	ldr	r3, [r7, #0]
 8019a88:	3302      	adds	r3, #2
 8019a8a:	b212      	sxth	r2, r2
 8019a8c:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Z] = (data[4] << 8) + data[5];
 8019a8e:	7b3b      	ldrb	r3, [r7, #12]
 8019a90:	b29b      	uxth	r3, r3
 8019a92:	021b      	lsls	r3, r3, #8
 8019a94:	b29a      	uxth	r2, r3
 8019a96:	7b7b      	ldrb	r3, [r7, #13]
 8019a98:	b29b      	uxth	r3, r3
 8019a9a:	4413      	add	r3, r2
 8019a9c:	b29a      	uxth	r2, r3
 8019a9e:	683b      	ldr	r3, [r7, #0]
 8019aa0:	3304      	adds	r3, #4
 8019aa2:	b212      	sxth	r2, r2
 8019aa4:	801a      	strh	r2, [r3, #0]
	if (p_owner->gyro_scale > 0) {
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	781b      	ldrb	r3, [r3, #0]
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d024      	beq.n	8019af8 <pifMpu60x0_ReadGyro+0xbc>
		p_gyro[AXIS_X] /= p_owner->gyro_scale;
 8019aae:	683b      	ldr	r3, [r7, #0]
 8019ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ab4:	461a      	mov	r2, r3
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	781b      	ldrb	r3, [r3, #0]
 8019aba:	fb92 f3f3 	sdiv	r3, r2, r3
 8019abe:	b21a      	sxth	r2, r3
 8019ac0:	683b      	ldr	r3, [r7, #0]
 8019ac2:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Y] /= p_owner->gyro_scale;
 8019ac4:	683b      	ldr	r3, [r7, #0]
 8019ac6:	3302      	adds	r3, #2
 8019ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019acc:	461a      	mov	r2, r3
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	781b      	ldrb	r3, [r3, #0]
 8019ad2:	fb92 f2f3 	sdiv	r2, r2, r3
 8019ad6:	683b      	ldr	r3, [r7, #0]
 8019ad8:	3302      	adds	r3, #2
 8019ada:	b212      	sxth	r2, r2
 8019adc:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Z] /= p_owner->gyro_scale;
 8019ade:	683b      	ldr	r3, [r7, #0]
 8019ae0:	3304      	adds	r3, #4
 8019ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ae6:	461a      	mov	r2, r3
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	781b      	ldrb	r3, [r3, #0]
 8019aec:	fb92 f2f3 	sdiv	r2, r2, r3
 8019af0:	683b      	ldr	r3, [r7, #0]
 8019af2:	3304      	adds	r3, #4
 8019af4:	b212      	sxth	r2, r2
 8019af6:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 8019af8:	2301      	movs	r3, #1
}
 8019afa:	4618      	mov	r0, r3
 8019afc:	3710      	adds	r7, #16
 8019afe:	46bd      	mov	sp, r7
 8019b00:	bd80      	pop	{r7, pc}

08019b02 <pifMpu60x0_ReadAccel>:

BOOL pifMpu60x0_ReadAccel(PifMpu60x0* p_owner, int16_t* p_accel)
{
 8019b02:	b580      	push	{r7, lr}
 8019b04:	b084      	sub	sp, #16
 8019b06:	af00      	add	r7, sp, #0
 8019b08:	6078      	str	r0, [r7, #4]
 8019b0a:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_ACCEL_XOUT_H, data, 6)) return FALSE;
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	6898      	ldr	r0, [r3, #8]
 8019b10:	f107 0208 	add.w	r2, r7, #8
 8019b14:	2306      	movs	r3, #6
 8019b16:	213b      	movs	r1, #59	; 0x3b
 8019b18:	f7f8 fb8a 	bl	8012230 <pifI2cDevice_ReadRegBytes>
 8019b1c:	4603      	mov	r3, r0
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d101      	bne.n	8019b26 <pifMpu60x0_ReadAccel+0x24>
 8019b22:	2300      	movs	r3, #0
 8019b24:	e04c      	b.n	8019bc0 <pifMpu60x0_ReadAccel+0xbe>

	p_accel[AXIS_X] = (data[0] << 8) + data[1];
 8019b26:	7a3b      	ldrb	r3, [r7, #8]
 8019b28:	b29b      	uxth	r3, r3
 8019b2a:	021b      	lsls	r3, r3, #8
 8019b2c:	b29a      	uxth	r2, r3
 8019b2e:	7a7b      	ldrb	r3, [r7, #9]
 8019b30:	b29b      	uxth	r3, r3
 8019b32:	4413      	add	r3, r2
 8019b34:	b29b      	uxth	r3, r3
 8019b36:	b21a      	sxth	r2, r3
 8019b38:	683b      	ldr	r3, [r7, #0]
 8019b3a:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Y] = (data[2] << 8) + data[3];
 8019b3c:	7abb      	ldrb	r3, [r7, #10]
 8019b3e:	b29b      	uxth	r3, r3
 8019b40:	021b      	lsls	r3, r3, #8
 8019b42:	b29a      	uxth	r2, r3
 8019b44:	7afb      	ldrb	r3, [r7, #11]
 8019b46:	b29b      	uxth	r3, r3
 8019b48:	4413      	add	r3, r2
 8019b4a:	b29a      	uxth	r2, r3
 8019b4c:	683b      	ldr	r3, [r7, #0]
 8019b4e:	3302      	adds	r3, #2
 8019b50:	b212      	sxth	r2, r2
 8019b52:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Z] = (data[4] << 8) + data[5];
 8019b54:	7b3b      	ldrb	r3, [r7, #12]
 8019b56:	b29b      	uxth	r3, r3
 8019b58:	021b      	lsls	r3, r3, #8
 8019b5a:	b29a      	uxth	r2, r3
 8019b5c:	7b7b      	ldrb	r3, [r7, #13]
 8019b5e:	b29b      	uxth	r3, r3
 8019b60:	4413      	add	r3, r2
 8019b62:	b29a      	uxth	r2, r3
 8019b64:	683b      	ldr	r3, [r7, #0]
 8019b66:	3304      	adds	r3, #4
 8019b68:	b212      	sxth	r2, r2
 8019b6a:	801a      	strh	r2, [r3, #0]
	if (p_owner->accel_scale > 0) {
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	785b      	ldrb	r3, [r3, #1]
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d024      	beq.n	8019bbe <pifMpu60x0_ReadAccel+0xbc>
		p_accel[AXIS_X] /= p_owner->accel_scale;
 8019b74:	683b      	ldr	r3, [r7, #0]
 8019b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b7a:	461a      	mov	r2, r3
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	785b      	ldrb	r3, [r3, #1]
 8019b80:	fb92 f3f3 	sdiv	r3, r2, r3
 8019b84:	b21a      	sxth	r2, r3
 8019b86:	683b      	ldr	r3, [r7, #0]
 8019b88:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Y] /= p_owner->accel_scale;
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	3302      	adds	r3, #2
 8019b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b92:	461a      	mov	r2, r3
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	785b      	ldrb	r3, [r3, #1]
 8019b98:	fb92 f2f3 	sdiv	r2, r2, r3
 8019b9c:	683b      	ldr	r3, [r7, #0]
 8019b9e:	3302      	adds	r3, #2
 8019ba0:	b212      	sxth	r2, r2
 8019ba2:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Z] /= p_owner->accel_scale;
 8019ba4:	683b      	ldr	r3, [r7, #0]
 8019ba6:	3304      	adds	r3, #4
 8019ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bac:	461a      	mov	r2, r3
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	785b      	ldrb	r3, [r3, #1]
 8019bb2:	fb92 f2f3 	sdiv	r2, r2, r3
 8019bb6:	683b      	ldr	r3, [r7, #0]
 8019bb8:	3304      	adds	r3, #4
 8019bba:	b212      	sxth	r2, r2
 8019bbc:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 8019bbe:	2301      	movs	r3, #1
}
 8019bc0:	4618      	mov	r0, r3
 8019bc2:	3710      	adds	r7, #16
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	bd80      	pop	{r7, pc}

08019bc8 <_checkPromCrc>:

#include <math.h>


static BOOL _checkPromCrc(PifMs5611* p_owner)
{
 8019bc8:	b480      	push	{r7}
 8019bca:	b087      	sub	sp, #28
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	6078      	str	r0, [r7, #4]
    int32_t i, j;
    uint32_t res = 0;
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	60fb      	str	r3, [r7, #12]
    uint8_t zero = 1;
 8019bd4:	2301      	movs	r3, #1
 8019bd6:	72fb      	strb	r3, [r7, #11]
    uint8_t crc = p_owner->_prom[7] & 0xF;
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	8adb      	ldrh	r3, [r3, #22]
 8019bdc:	b2db      	uxtb	r3, r3
 8019bde:	f003 030f 	and.w	r3, r3, #15
 8019be2:	72bb      	strb	r3, [r7, #10]
    p_owner->_prom[7] &= 0xFF00;
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	8adb      	ldrh	r3, [r3, #22]
 8019be8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8019bec:	b29a      	uxth	r2, r3
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	82da      	strh	r2, [r3, #22]

    for (i = 0; i < 8; i++) {
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	617b      	str	r3, [r7, #20]
 8019bf6:	e00b      	b.n	8019c10 <_checkPromCrc+0x48>
        if (p_owner->_prom[i] != 0)
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	697a      	ldr	r2, [r7, #20]
 8019bfc:	3204      	adds	r2, #4
 8019bfe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d001      	beq.n	8019c0a <_checkPromCrc+0x42>
            zero = 0;
 8019c06:	2300      	movs	r3, #0
 8019c08:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < 8; i++) {
 8019c0a:	697b      	ldr	r3, [r7, #20]
 8019c0c:	3301      	adds	r3, #1
 8019c0e:	617b      	str	r3, [r7, #20]
 8019c10:	697b      	ldr	r3, [r7, #20]
 8019c12:	2b07      	cmp	r3, #7
 8019c14:	ddf0      	ble.n	8019bf8 <_checkPromCrc+0x30>
    }
    if (zero)
 8019c16:	7afb      	ldrb	r3, [r7, #11]
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d001      	beq.n	8019c20 <_checkPromCrc+0x58>
        return FALSE;
 8019c1c:	2300      	movs	r3, #0
 8019c1e:	e04b      	b.n	8019cb8 <_checkPromCrc+0xf0>

    for (i = 0; i < 16; i++) {
 8019c20:	2300      	movs	r3, #0
 8019c22:	617b      	str	r3, [r7, #20]
 8019c24:	e033      	b.n	8019c8e <_checkPromCrc+0xc6>
        if (i & 1)
 8019c26:	697b      	ldr	r3, [r7, #20]
 8019c28:	f003 0301 	and.w	r3, r3, #1
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d00a      	beq.n	8019c46 <_checkPromCrc+0x7e>
            res ^= ((p_owner->_prom[i >> 1]) & 0x00FF);
 8019c30:	697b      	ldr	r3, [r7, #20]
 8019c32:	105a      	asrs	r2, r3, #1
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	3204      	adds	r2, #4
 8019c38:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8019c3c:	b2db      	uxtb	r3, r3
 8019c3e:	68fa      	ldr	r2, [r7, #12]
 8019c40:	4053      	eors	r3, r2
 8019c42:	60fb      	str	r3, [r7, #12]
 8019c44:	e00b      	b.n	8019c5e <_checkPromCrc+0x96>
        else
            res ^= (p_owner->_prom[i >> 1] >> 8);
 8019c46:	697b      	ldr	r3, [r7, #20]
 8019c48:	105a      	asrs	r2, r3, #1
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	3204      	adds	r2, #4
 8019c4e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8019c52:	0a1b      	lsrs	r3, r3, #8
 8019c54:	b29b      	uxth	r3, r3
 8019c56:	461a      	mov	r2, r3
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	4053      	eors	r3, r2
 8019c5c:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 8019c5e:	2308      	movs	r3, #8
 8019c60:	613b      	str	r3, [r7, #16]
 8019c62:	e00e      	b.n	8019c82 <_checkPromCrc+0xba>
            if (res & 0x8000)
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d003      	beq.n	8019c76 <_checkPromCrc+0xae>
                res ^= 0x1800;
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	f483 53c0 	eor.w	r3, r3, #6144	; 0x1800
 8019c74:	60fb      	str	r3, [r7, #12]
            res <<= 1;
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	005b      	lsls	r3, r3, #1
 8019c7a:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 8019c7c:	693b      	ldr	r3, [r7, #16]
 8019c7e:	3b01      	subs	r3, #1
 8019c80:	613b      	str	r3, [r7, #16]
 8019c82:	693b      	ldr	r3, [r7, #16]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	dced      	bgt.n	8019c64 <_checkPromCrc+0x9c>
    for (i = 0; i < 16; i++) {
 8019c88:	697b      	ldr	r3, [r7, #20]
 8019c8a:	3301      	adds	r3, #1
 8019c8c:	617b      	str	r3, [r7, #20]
 8019c8e:	697b      	ldr	r3, [r7, #20]
 8019c90:	2b0f      	cmp	r3, #15
 8019c92:	ddc8      	ble.n	8019c26 <_checkPromCrc+0x5e>
        }
    }
    p_owner->_prom[7] |= crc;
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	8ada      	ldrh	r2, [r3, #22]
 8019c98:	7abb      	ldrb	r3, [r7, #10]
 8019c9a:	b29b      	uxth	r3, r3
 8019c9c:	4313      	orrs	r3, r2
 8019c9e:	b29a      	uxth	r2, r3
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	82da      	strh	r2, [r3, #22]
    if (crc == ((res >> 12) & 0xF))
 8019ca4:	7aba      	ldrb	r2, [r7, #10]
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	0b1b      	lsrs	r3, r3, #12
 8019caa:	f003 030f 	and.w	r3, r3, #15
 8019cae:	429a      	cmp	r2, r3
 8019cb0:	d101      	bne.n	8019cb6 <_checkPromCrc+0xee>
        return TRUE;
 8019cb2:	2301      	movs	r3, #1
 8019cb4:	e000      	b.n	8019cb8 <_checkPromCrc+0xf0>

    return FALSE;
 8019cb6:	2300      	movs	r3, #0
}
 8019cb8:	4618      	mov	r0, r3
 8019cba:	371c      	adds	r7, #28
 8019cbc:	46bd      	mov	sp, r7
 8019cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc2:	4770      	bx	lr

08019cc4 <_calcurateBarometric>:

static void _calcurateBarometric(PifMs5611* p_owner, float* p_pressure, float* p_temperature)
{
 8019cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019cc8:	b0d2      	sub	sp, #328	; 0x148
 8019cca:	af00      	add	r7, sp, #0
 8019ccc:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 8019cd0:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8019cd4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
	int32_t dT;
	int64_t temp;
	int64_t off, sens;
	int64_t delt;

	dT = (int64_t)p_owner->__D2 - ((int64_t)p_owner->_prom[5] * 256);
 8019cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019ce2:	8a5b      	ldrh	r3, [r3, #18]
 8019ce4:	021b      	lsls	r3, r3, #8
 8019ce6:	1ad3      	subs	r3, r2, r3
 8019ce8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	temp = 2000 + ((dT * (int64_t)p_owner->_prom[6]) >> 23);
 8019cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019cf0:	17da      	asrs	r2, r3, #31
 8019cf2:	469a      	mov	sl, r3
 8019cf4:	4693      	mov	fp, r2
 8019cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019cfa:	8a9b      	ldrh	r3, [r3, #20]
 8019cfc:	b29b      	uxth	r3, r3
 8019cfe:	2200      	movs	r2, #0
 8019d00:	4698      	mov	r8, r3
 8019d02:	4691      	mov	r9, r2
 8019d04:	fb08 f20b 	mul.w	r2, r8, fp
 8019d08:	fb0a f309 	mul.w	r3, sl, r9
 8019d0c:	4413      	add	r3, r2
 8019d0e:	fbaa 4508 	umull	r4, r5, sl, r8
 8019d12:	442b      	add	r3, r5
 8019d14:	461d      	mov	r5, r3
 8019d16:	f04f 0200 	mov.w	r2, #0
 8019d1a:	f04f 0300 	mov.w	r3, #0
 8019d1e:	0de2      	lsrs	r2, r4, #23
 8019d20:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8019d24:	15eb      	asrs	r3, r5, #23
 8019d26:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 8019d2a:	6739      	str	r1, [r7, #112]	; 0x70
 8019d2c:	f143 0300 	adc.w	r3, r3, #0
 8019d30:	677b      	str	r3, [r7, #116]	; 0x74
 8019d32:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8019d36:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

	off = ((int64_t)p_owner->_prom[2] << 16) + (((int64_t)p_owner->_prom[4] * dT) >> 7);
 8019d3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019d3e:	899b      	ldrh	r3, [r3, #12]
 8019d40:	b29b      	uxth	r3, r3
 8019d42:	2200      	movs	r2, #0
 8019d44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8019d48:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8019d4c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8019d50:	460b      	mov	r3, r1
 8019d52:	0c1b      	lsrs	r3, r3, #16
 8019d54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8019d58:	460b      	mov	r3, r1
 8019d5a:	041b      	lsls	r3, r3, #16
 8019d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8019d60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019d64:	8a1b      	ldrh	r3, [r3, #16]
 8019d66:	b29b      	uxth	r3, r3
 8019d68:	2200      	movs	r2, #0
 8019d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8019d6e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8019d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019d76:	17da      	asrs	r2, r3, #31
 8019d78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8019d7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8019d80:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8019d84:	462b      	mov	r3, r5
 8019d86:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8019d8a:	4642      	mov	r2, r8
 8019d8c:	fb02 f203 	mul.w	r2, r2, r3
 8019d90:	464b      	mov	r3, r9
 8019d92:	4621      	mov	r1, r4
 8019d94:	fb01 f303 	mul.w	r3, r1, r3
 8019d98:	4413      	add	r3, r2
 8019d9a:	4622      	mov	r2, r4
 8019d9c:	4641      	mov	r1, r8
 8019d9e:	fba2 1201 	umull	r1, r2, r2, r1
 8019da2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8019da6:	460a      	mov	r2, r1
 8019da8:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8019dac:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8019db0:	4413      	add	r3, r2
 8019db2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8019db6:	f04f 0200 	mov.w	r2, #0
 8019dba:	f04f 0300 	mov.w	r3, #0
 8019dbe:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8019dc2:	4621      	mov	r1, r4
 8019dc4:	09ca      	lsrs	r2, r1, #7
 8019dc6:	4629      	mov	r1, r5
 8019dc8:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8019dcc:	4629      	mov	r1, r5
 8019dce:	11cb      	asrs	r3, r1, #7
 8019dd0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8019dd4:	4621      	mov	r1, r4
 8019dd6:	1889      	adds	r1, r1, r2
 8019dd8:	66b9      	str	r1, [r7, #104]	; 0x68
 8019dda:	4629      	mov	r1, r5
 8019ddc:	eb43 0101 	adc.w	r1, r3, r1
 8019de0:	66f9      	str	r1, [r7, #108]	; 0x6c
 8019de2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8019de6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	sens = ((int64_t)p_owner->_prom[1] << 15) + (((int64_t)p_owner->_prom[3] * dT) >> 8);
 8019dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019dee:	895b      	ldrh	r3, [r3, #10]
 8019df0:	b29b      	uxth	r3, r3
 8019df2:	2200      	movs	r2, #0
 8019df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8019df8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8019dfc:	f04f 0000 	mov.w	r0, #0
 8019e00:	f04f 0100 	mov.w	r1, #0
 8019e04:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8019e08:	462b      	mov	r3, r5
 8019e0a:	03d9      	lsls	r1, r3, #15
 8019e0c:	4623      	mov	r3, r4
 8019e0e:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 8019e12:	4623      	mov	r3, r4
 8019e14:	03d8      	lsls	r0, r3, #15
 8019e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019e1a:	89db      	ldrh	r3, [r3, #14]
 8019e1c:	b29b      	uxth	r3, r3
 8019e1e:	2200      	movs	r2, #0
 8019e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8019e24:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8019e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019e2c:	17da      	asrs	r2, r3, #31
 8019e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8019e32:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8019e36:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 8019e3a:	464b      	mov	r3, r9
 8019e3c:	e9d7 ab2a 	ldrd	sl, fp, [r7, #168]	; 0xa8
 8019e40:	4652      	mov	r2, sl
 8019e42:	fb02 f203 	mul.w	r2, r2, r3
 8019e46:	465b      	mov	r3, fp
 8019e48:	4644      	mov	r4, r8
 8019e4a:	fb04 f303 	mul.w	r3, r4, r3
 8019e4e:	4413      	add	r3, r2
 8019e50:	4642      	mov	r2, r8
 8019e52:	4654      	mov	r4, sl
 8019e54:	fba2 4204 	umull	r4, r2, r2, r4
 8019e58:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8019e5c:	4622      	mov	r2, r4
 8019e5e:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8019e62:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8019e66:	4413      	add	r3, r2
 8019e68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8019e6c:	f04f 0200 	mov.w	r2, #0
 8019e70:	f04f 0300 	mov.w	r3, #0
 8019e74:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8019e78:	4644      	mov	r4, r8
 8019e7a:	0a22      	lsrs	r2, r4, #8
 8019e7c:	464c      	mov	r4, r9
 8019e7e:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8019e82:	464c      	mov	r4, r9
 8019e84:	1223      	asrs	r3, r4, #8
 8019e86:	1884      	adds	r4, r0, r2
 8019e88:	663c      	str	r4, [r7, #96]	; 0x60
 8019e8a:	eb41 0303 	adc.w	r3, r1, r3
 8019e8e:	667b      	str	r3, [r7, #100]	; 0x64
 8019e90:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8019e94:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

	if (temp < 2000) {
 8019e98:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8019e9c:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8019ea0:	f173 0300 	sbcs.w	r3, r3, #0
 8019ea4:	f280 8150 	bge.w	801a148 <_calcurateBarometric+0x484>
		temp -= ((int64_t)dT * dT) / 2147483648L;
 8019ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019eac:	17da      	asrs	r2, r3, #31
 8019eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8019eb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8019eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019eba:	17da      	asrs	r2, r3, #31
 8019ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8019ec0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8019ec4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8019ec8:	462b      	mov	r3, r5
 8019eca:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8019ece:	4642      	mov	r2, r8
 8019ed0:	fb02 f203 	mul.w	r2, r2, r3
 8019ed4:	464b      	mov	r3, r9
 8019ed6:	4621      	mov	r1, r4
 8019ed8:	fb01 f303 	mul.w	r3, r1, r3
 8019edc:	4413      	add	r3, r2
 8019ede:	4622      	mov	r2, r4
 8019ee0:	4641      	mov	r1, r8
 8019ee2:	fba2 1201 	umull	r1, r2, r2, r1
 8019ee6:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8019eea:	460a      	mov	r2, r1
 8019eec:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8019ef0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8019ef4:	4413      	add	r3, r2
 8019ef6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8019efa:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	da08      	bge.n	8019f14 <_calcurateBarometric+0x250>
 8019f02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019f06:	1851      	adds	r1, r2, r1
 8019f08:	65b9      	str	r1, [r7, #88]	; 0x58
 8019f0a:	f143 0300 	adc.w	r3, r3, #0
 8019f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019f10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8019f14:	f04f 0000 	mov.w	r0, #0
 8019f18:	f04f 0100 	mov.w	r1, #0
 8019f1c:	0fd0      	lsrs	r0, r2, #31
 8019f1e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8019f22:	17d9      	asrs	r1, r3, #31
 8019f24:	2300      	movs	r3, #0
 8019f26:	4242      	negs	r2, r0
 8019f28:	653a      	str	r2, [r7, #80]	; 0x50
 8019f2a:	eb63 0301 	sbc.w	r3, r3, r1
 8019f2e:	657b      	str	r3, [r7, #84]	; 0x54
 8019f30:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8019f34:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8019f38:	1814      	adds	r4, r2, r0
 8019f3a:	64bc      	str	r4, [r7, #72]	; 0x48
 8019f3c:	414b      	adcs	r3, r1
 8019f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019f40:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8019f44:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

		delt = temp - 2000;
 8019f48:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8019f4c:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8019f50:	6439      	str	r1, [r7, #64]	; 0x40
 8019f52:	f143 33ff 	adc.w	r3, r3, #4294967295
 8019f56:	647b      	str	r3, [r7, #68]	; 0x44
 8019f58:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8019f5c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		delt = 5 * delt * delt;
 8019f60:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019f64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019f68:	fb03 f102 	mul.w	r1, r3, r2
 8019f6c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019f70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019f74:	fb02 f303 	mul.w	r3, r2, r3
 8019f78:	18ca      	adds	r2, r1, r3
 8019f7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019f7e:	fba3 1303 	umull	r1, r3, r3, r3
 8019f82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8019f86:	460b      	mov	r3, r1
 8019f88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8019f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019f90:	18d3      	adds	r3, r2, r3
 8019f92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8019f96:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8019f9a:	4622      	mov	r2, r4
 8019f9c:	462b      	mov	r3, r5
 8019f9e:	f04f 0000 	mov.w	r0, #0
 8019fa2:	f04f 0100 	mov.w	r1, #0
 8019fa6:	0099      	lsls	r1, r3, #2
 8019fa8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8019fac:	0090      	lsls	r0, r2, #2
 8019fae:	4602      	mov	r2, r0
 8019fb0:	460b      	mov	r3, r1
 8019fb2:	4621      	mov	r1, r4
 8019fb4:	1851      	adds	r1, r2, r1
 8019fb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8019fb8:	4629      	mov	r1, r5
 8019fba:	eb43 0101 	adc.w	r1, r3, r1
 8019fbe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8019fc0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8019fc4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		off -= delt >> 1;
 8019fc8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8019fcc:	f04f 0000 	mov.w	r0, #0
 8019fd0:	f04f 0100 	mov.w	r1, #0
 8019fd4:	0850      	lsrs	r0, r2, #1
 8019fd6:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8019fda:	1059      	asrs	r1, r3, #1
 8019fdc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8019fe0:	1a14      	subs	r4, r2, r0
 8019fe2:	633c      	str	r4, [r7, #48]	; 0x30
 8019fe4:	eb63 0301 	sbc.w	r3, r3, r1
 8019fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8019fea:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8019fee:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		sens -= delt >> 2;
 8019ff2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8019ff6:	f04f 0000 	mov.w	r0, #0
 8019ffa:	f04f 0100 	mov.w	r1, #0
 8019ffe:	0890      	lsrs	r0, r2, #2
 801a000:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 801a004:	1099      	asrs	r1, r3, #2
 801a006:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 801a00a:	1a14      	subs	r4, r2, r0
 801a00c:	62bc      	str	r4, [r7, #40]	; 0x28
 801a00e:	eb63 0301 	sbc.w	r3, r3, r1
 801a012:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a014:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801a018:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

		if (temp < -1500) {
 801a01c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a020:	497c      	ldr	r1, [pc, #496]	; (801a214 <_calcurateBarometric+0x550>)
 801a022:	428a      	cmp	r2, r1
 801a024:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 801a028:	f280 808e 	bge.w	801a148 <_calcurateBarometric+0x484>
			delt = temp + 1500;
 801a02c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a030:	f240 51dc 	movw	r1, #1500	; 0x5dc
 801a034:	1851      	adds	r1, r2, r1
 801a036:	6239      	str	r1, [r7, #32]
 801a038:	f143 0300 	adc.w	r3, r3, #0
 801a03c:	627b      	str	r3, [r7, #36]	; 0x24
 801a03e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801a042:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			delt = delt * delt;
 801a046:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a04a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a04e:	fb03 f102 	mul.w	r1, r3, r2
 801a052:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a056:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a05a:	fb02 f303 	mul.w	r3, r2, r3
 801a05e:	18ca      	adds	r2, r1, r3
 801a060:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a064:	fba3 1303 	umull	r1, r3, r3, r3
 801a068:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801a06c:	460b      	mov	r3, r1
 801a06e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801a072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a076:	18d3      	adds	r3, r2, r3
 801a078:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801a07c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 801a080:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 801a084:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			off -= 7 * delt;
 801a088:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801a08c:	4614      	mov	r4, r2
 801a08e:	461d      	mov	r5, r3
 801a090:	f04f 0000 	mov.w	r0, #0
 801a094:	f04f 0100 	mov.w	r1, #0
 801a098:	00d9      	lsls	r1, r3, #3
 801a09a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801a09e:	00d0      	lsls	r0, r2, #3
 801a0a0:	1a23      	subs	r3, r4, r0
 801a0a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801a0a6:	eb65 0301 	sbc.w	r3, r5, r1
 801a0aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a0ae:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801a0b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801a0b6:	4621      	mov	r1, r4
 801a0b8:	1851      	adds	r1, r2, r1
 801a0ba:	61b9      	str	r1, [r7, #24]
 801a0bc:	4629      	mov	r1, r5
 801a0be:	eb43 0101 	adc.w	r1, r3, r1
 801a0c2:	61f9      	str	r1, [r7, #28]
 801a0c4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801a0c8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			sens -= (11 * delt) >> 1;
 801a0cc:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 801a0d0:	4602      	mov	r2, r0
 801a0d2:	460b      	mov	r3, r1
 801a0d4:	1894      	adds	r4, r2, r2
 801a0d6:	613c      	str	r4, [r7, #16]
 801a0d8:	415b      	adcs	r3, r3
 801a0da:	617b      	str	r3, [r7, #20]
 801a0dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a0e0:	1814      	adds	r4, r2, r0
 801a0e2:	60bc      	str	r4, [r7, #8]
 801a0e4:	414b      	adcs	r3, r1
 801a0e6:	60fb      	str	r3, [r7, #12]
 801a0e8:	f04f 0200 	mov.w	r2, #0
 801a0ec:	f04f 0300 	mov.w	r3, #0
 801a0f0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 801a0f4:	464c      	mov	r4, r9
 801a0f6:	00a3      	lsls	r3, r4, #2
 801a0f8:	4644      	mov	r4, r8
 801a0fa:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 801a0fe:	4644      	mov	r4, r8
 801a100:	00a2      	lsls	r2, r4, #2
 801a102:	4614      	mov	r4, r2
 801a104:	461d      	mov	r5, r3
 801a106:	4623      	mov	r3, r4
 801a108:	1a1b      	subs	r3, r3, r0
 801a10a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801a10e:	462b      	mov	r3, r5
 801a110:	eb63 0301 	sbc.w	r3, r3, r1
 801a114:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a118:	f04f 0200 	mov.w	r2, #0
 801a11c:	f04f 0300 	mov.w	r3, #0
 801a120:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 801a124:	4621      	mov	r1, r4
 801a126:	084a      	lsrs	r2, r1, #1
 801a128:	4629      	mov	r1, r5
 801a12a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801a12e:	4629      	mov	r1, r5
 801a130:	104b      	asrs	r3, r1, #1
 801a132:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 801a136:	1a84      	subs	r4, r0, r2
 801a138:	603c      	str	r4, [r7, #0]
 801a13a:	eb61 0303 	sbc.w	r3, r1, r3
 801a13e:	607b      	str	r3, [r7, #4]
 801a140:	e9d7 3400 	ldrd	r3, r4, [r7]
 801a144:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		}
	}

    *p_temperature = temp / 100.0;
 801a148:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801a14c:	f7e6 f9da 	bl	8000504 <__aeabi_l2d>
 801a150:	f04f 0200 	mov.w	r2, #0
 801a154:	4b30      	ldr	r3, [pc, #192]	; (801a218 <_calcurateBarometric+0x554>)
 801a156:	f7e6 fb2d 	bl	80007b4 <__aeabi_ddiv>
 801a15a:	4602      	mov	r2, r0
 801a15c:	460b      	mov	r3, r1
 801a15e:	4610      	mov	r0, r2
 801a160:	4619      	mov	r1, r3
 801a162:	f7e6 fcdf 	bl	8000b24 <__aeabi_d2f>
 801a166:	4602      	mov	r2, r0
 801a168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801a16c:	601a      	str	r2, [r3, #0]
	*p_pressure = (float)(((((int64_t)p_owner->__D1 * sens) >> 21) - off) >> 15);
 801a16e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a174:	2200      	movs	r2, #0
 801a176:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801a17a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801a17e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801a182:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801a186:	462a      	mov	r2, r5
 801a188:	fb02 f203 	mul.w	r2, r2, r3
 801a18c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801a190:	4621      	mov	r1, r4
 801a192:	fb01 f303 	mul.w	r3, r1, r3
 801a196:	4413      	add	r3, r2
 801a198:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801a19c:	4621      	mov	r1, r4
 801a19e:	fba2 1201 	umull	r1, r2, r2, r1
 801a1a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801a1a6:	460a      	mov	r2, r1
 801a1a8:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801a1ac:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801a1b0:	4413      	add	r3, r2
 801a1b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801a1b6:	f04f 0200 	mov.w	r2, #0
 801a1ba:	f04f 0300 	mov.w	r3, #0
 801a1be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801a1c2:	4621      	mov	r1, r4
 801a1c4:	0d4a      	lsrs	r2, r1, #21
 801a1c6:	4629      	mov	r1, r5
 801a1c8:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 801a1cc:	4629      	mov	r1, r5
 801a1ce:	154b      	asrs	r3, r1, #21
 801a1d0:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801a1d4:	1a14      	subs	r4, r2, r0
 801a1d6:	67bc      	str	r4, [r7, #120]	; 0x78
 801a1d8:	eb63 0301 	sbc.w	r3, r3, r1
 801a1dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 801a1de:	f04f 0200 	mov.w	r2, #0
 801a1e2:	f04f 0300 	mov.w	r3, #0
 801a1e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801a1ea:	4621      	mov	r1, r4
 801a1ec:	0bca      	lsrs	r2, r1, #15
 801a1ee:	4629      	mov	r1, r5
 801a1f0:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 801a1f4:	4629      	mov	r1, r5
 801a1f6:	13cb      	asrs	r3, r1, #15
 801a1f8:	4610      	mov	r0, r2
 801a1fa:	4619      	mov	r1, r3
 801a1fc:	f7e6 fdb2 	bl	8000d64 <__aeabi_l2f>
 801a200:	4602      	mov	r2, r0
 801a202:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801a206:	601a      	str	r2, [r3, #0]
}
 801a208:	bf00      	nop
 801a20a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 801a20e:	46bd      	mov	sp, r7
 801a210:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a214:	fffffa24 	.word	0xfffffa24
 801a218:	40590000 	.word	0x40590000

0801a21c <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b08a      	sub	sp, #40	; 0x28
 801a220:	af02      	add	r7, sp, #8
 801a222:	6078      	str	r0, [r7, #4]
	PifMs5611* p_owner = p_task->_p_client;
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	68db      	ldr	r3, [r3, #12]
 801a228:	61bb      	str	r3, [r7, #24]
	uint8_t value[3];
	uint16_t delay = 1;
 801a22a:	2301      	movs	r3, #1
 801a22c:	83fb      	strh	r3, [r7, #30]
	uint16_t gap;
	float pressure;
	float temperature;

	switch (p_owner->__state) {
 801a22e:	69bb      	ldr	r3, [r7, #24]
 801a230:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a234:	3b01      	subs	r3, #1
 801a236:	2b04      	cmp	r3, #4
 801a238:	f200 80a9 	bhi.w	801a38e <_doTask+0x172>
 801a23c:	a201      	add	r2, pc, #4	; (adr r2, 801a244 <_doTask+0x28>)
 801a23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a242:	bf00      	nop
 801a244:	0801a259 	.word	0x0801a259
 801a248:	0801a299 	.word	0x0801a299
 801a24c:	0801a2cb 	.word	0x0801a2cb
 801a250:	0801a301 	.word	0x0801a301
 801a254:	0801a333 	.word	0x0801a333
	case MS5611_STATE_TEMPERATURE_START:
		p_owner->__start_time = pif_cumulative_timer1ms;
 801a258:	4b54      	ldr	r3, [pc, #336]	; (801a3ac <_doTask+0x190>)
 801a25a:	681a      	ldr	r2, [r3, #0]
 801a25c:	69bb      	ldr	r3, [r7, #24]
 801a25e:	62da      	str	r2, [r3, #44]	; 0x2c
		value[0] = MS5611_REG_CONV_D2 + p_owner->_over_sampling_rate;
 801a260:	69bb      	ldr	r3, [r7, #24]
 801a262:	8b1b      	ldrh	r3, [r3, #24]
 801a264:	b2db      	uxtb	r3, r3
 801a266:	3350      	adds	r3, #80	; 0x50
 801a268:	b2db      	uxtb	r3, r3
 801a26a:	743b      	strb	r3, [r7, #16]
		if (pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) {
 801a26c:	69bb      	ldr	r3, [r7, #24]
 801a26e:	6858      	ldr	r0, [r3, #4]
 801a270:	f107 0310 	add.w	r3, r7, #16
 801a274:	2201      	movs	r2, #1
 801a276:	9200      	str	r2, [sp, #0]
 801a278:	2200      	movs	r2, #0
 801a27a:	2100      	movs	r1, #0
 801a27c:	f7f8 f822 	bl	80122c4 <pifI2cDevice_Write>
 801a280:	4603      	mov	r3, r0
 801a282:	2b00      	cmp	r3, #0
 801a284:	f000 8085 	beq.w	801a392 <_doTask+0x176>
			p_owner->__state = MS5611_STATE_TEMPERATURE_WAIT;
 801a288:	69bb      	ldr	r3, [r7, #24]
 801a28a:	2202      	movs	r2, #2
 801a28c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			delay = p_owner->_conversion_time;
 801a290:	69bb      	ldr	r3, [r7, #24]
 801a292:	7e9b      	ldrb	r3, [r3, #26]
 801a294:	83fb      	strh	r3, [r7, #30]
		}
		break;
 801a296:	e07c      	b.n	801a392 <_doTask+0x176>

	case MS5611_STATE_TEMPERATURE_WAIT:
		if (pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) {
 801a298:	69bb      	ldr	r3, [r7, #24]
 801a29a:	6858      	ldr	r0, [r3, #4]
 801a29c:	f107 0210 	add.w	r2, r7, #16
 801a2a0:	2303      	movs	r3, #3
 801a2a2:	2100      	movs	r1, #0
 801a2a4:	f7f7 ffc4 	bl	8012230 <pifI2cDevice_ReadRegBytes>
 801a2a8:	4603      	mov	r3, r0
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d073      	beq.n	801a396 <_doTask+0x17a>
			p_owner->__D2 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801a2ae:	7c3b      	ldrb	r3, [r7, #16]
 801a2b0:	041b      	lsls	r3, r3, #16
 801a2b2:	7c7a      	ldrb	r2, [r7, #17]
 801a2b4:	0212      	lsls	r2, r2, #8
 801a2b6:	4413      	add	r3, r2
 801a2b8:	7cba      	ldrb	r2, [r7, #18]
 801a2ba:	441a      	add	r2, r3
 801a2bc:	69bb      	ldr	r3, [r7, #24]
 801a2be:	629a      	str	r2, [r3, #40]	; 0x28
			p_owner->__state = MS5611_STATE_PRESSURE_START;
 801a2c0:	69bb      	ldr	r3, [r7, #24]
 801a2c2:	2203      	movs	r2, #3
 801a2c4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}
		break;
 801a2c8:	e065      	b.n	801a396 <_doTask+0x17a>

	case MS5611_STATE_PRESSURE_START:
		value[0] = MS5611_REG_CONV_D1 + p_owner->_over_sampling_rate;
 801a2ca:	69bb      	ldr	r3, [r7, #24]
 801a2cc:	8b1b      	ldrh	r3, [r3, #24]
 801a2ce:	b2db      	uxtb	r3, r3
 801a2d0:	3340      	adds	r3, #64	; 0x40
 801a2d2:	b2db      	uxtb	r3, r3
 801a2d4:	743b      	strb	r3, [r7, #16]
		if (pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) {
 801a2d6:	69bb      	ldr	r3, [r7, #24]
 801a2d8:	6858      	ldr	r0, [r3, #4]
 801a2da:	f107 0310 	add.w	r3, r7, #16
 801a2de:	2201      	movs	r2, #1
 801a2e0:	9200      	str	r2, [sp, #0]
 801a2e2:	2200      	movs	r2, #0
 801a2e4:	2100      	movs	r1, #0
 801a2e6:	f7f7 ffed 	bl	80122c4 <pifI2cDevice_Write>
 801a2ea:	4603      	mov	r3, r0
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d054      	beq.n	801a39a <_doTask+0x17e>
			p_owner->__state = MS5611_STATE_PRESSURE_WAIT;
 801a2f0:	69bb      	ldr	r3, [r7, #24]
 801a2f2:	2204      	movs	r2, #4
 801a2f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			delay = p_owner->_conversion_time;
 801a2f8:	69bb      	ldr	r3, [r7, #24]
 801a2fa:	7e9b      	ldrb	r3, [r3, #26]
 801a2fc:	83fb      	strh	r3, [r7, #30]
		}
		break;
 801a2fe:	e04c      	b.n	801a39a <_doTask+0x17e>

	case MS5611_STATE_PRESSURE_WAIT:
		if (pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) {
 801a300:	69bb      	ldr	r3, [r7, #24]
 801a302:	6858      	ldr	r0, [r3, #4]
 801a304:	f107 0210 	add.w	r2, r7, #16
 801a308:	2303      	movs	r3, #3
 801a30a:	2100      	movs	r1, #0
 801a30c:	f7f7 ff90 	bl	8012230 <pifI2cDevice_ReadRegBytes>
 801a310:	4603      	mov	r3, r0
 801a312:	2b00      	cmp	r3, #0
 801a314:	d043      	beq.n	801a39e <_doTask+0x182>
			p_owner->__D1 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801a316:	7c3b      	ldrb	r3, [r7, #16]
 801a318:	041b      	lsls	r3, r3, #16
 801a31a:	7c7a      	ldrb	r2, [r7, #17]
 801a31c:	0212      	lsls	r2, r2, #8
 801a31e:	4413      	add	r3, r2
 801a320:	7cba      	ldrb	r2, [r7, #18]
 801a322:	441a      	add	r2, r3
 801a324:	69bb      	ldr	r3, [r7, #24]
 801a326:	625a      	str	r2, [r3, #36]	; 0x24
			p_owner->__state = MS5611_STATE_CALCURATE;
 801a328:	69bb      	ldr	r3, [r7, #24]
 801a32a:	2205      	movs	r2, #5
 801a32c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}
		break;
 801a330:	e035      	b.n	801a39e <_doTask+0x182>

	case MS5611_STATE_CALCURATE:
		_calcurateBarometric(p_owner, &pressure, &temperature);
 801a332:	f107 0208 	add.w	r2, r7, #8
 801a336:	f107 030c 	add.w	r3, r7, #12
 801a33a:	4619      	mov	r1, r3
 801a33c:	69b8      	ldr	r0, [r7, #24]
 801a33e:	f7ff fcc1 	bl	8019cc4 <_calcurateBarometric>
		if (p_owner->__evt_read) (*p_owner->__evt_read)(pressure, temperature);
 801a342:	69bb      	ldr	r3, [r7, #24]
 801a344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a346:	2b00      	cmp	r3, #0
 801a348:	d00a      	beq.n	801a360 <_doTask+0x144>
 801a34a:	69bb      	ldr	r3, [r7, #24]
 801a34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a34e:	edd7 7a03 	vldr	s15, [r7, #12]
 801a352:	ed97 7a02 	vldr	s14, [r7, #8]
 801a356:	eef0 0a47 	vmov.f32	s1, s14
 801a35a:	eeb0 0a67 	vmov.f32	s0, s15
 801a35e:	4798      	blx	r3
		gap = pif_cumulative_timer1ms - p_owner->__start_time;
 801a360:	4b12      	ldr	r3, [pc, #72]	; (801a3ac <_doTask+0x190>)
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	b29a      	uxth	r2, r3
 801a366:	69bb      	ldr	r3, [r7, #24]
 801a368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a36a:	b29b      	uxth	r3, r3
 801a36c:	1ad3      	subs	r3, r2, r3
 801a36e:	82fb      	strh	r3, [r7, #22]
		if (gap < p_owner->__read_period) {
 801a370:	69bb      	ldr	r3, [r7, #24]
 801a372:	8c1b      	ldrh	r3, [r3, #32]
 801a374:	8afa      	ldrh	r2, [r7, #22]
 801a376:	429a      	cmp	r2, r3
 801a378:	d204      	bcs.n	801a384 <_doTask+0x168>
			delay = p_owner->__read_period - gap;
 801a37a:	69bb      	ldr	r3, [r7, #24]
 801a37c:	8c1a      	ldrh	r2, [r3, #32]
 801a37e:	8afb      	ldrh	r3, [r7, #22]
 801a380:	1ad3      	subs	r3, r2, r3
 801a382:	83fb      	strh	r3, [r7, #30]
		}
		p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801a384:	69bb      	ldr	r3, [r7, #24]
 801a386:	2201      	movs	r2, #1
 801a388:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 801a38c:	e008      	b.n	801a3a0 <_doTask+0x184>

	default:
		break;
 801a38e:	bf00      	nop
 801a390:	e006      	b.n	801a3a0 <_doTask+0x184>
		break;
 801a392:	bf00      	nop
 801a394:	e004      	b.n	801a3a0 <_doTask+0x184>
		break;
 801a396:	bf00      	nop
 801a398:	e002      	b.n	801a3a0 <_doTask+0x184>
		break;
 801a39a:	bf00      	nop
 801a39c:	e000      	b.n	801a3a0 <_doTask+0x184>
		break;
 801a39e:	bf00      	nop
	}
	return delay;
 801a3a0:	8bfb      	ldrh	r3, [r7, #30]
}
 801a3a2:	4618      	mov	r0, r3
 801a3a4:	3720      	adds	r7, #32
 801a3a6:	46bd      	mov	sp, r7
 801a3a8:	bd80      	pop	{r7, pc}
 801a3aa:	bf00      	nop
 801a3ac:	20001c24 	.word	0x20001c24

0801a3b0 <pifMs5611_Init>:

BOOL pifMs5611_Init(PifMs5611* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr, PifMs5611Param* p_param)
{
 801a3b0:	b580      	push	{r7, lr}
 801a3b2:	b086      	sub	sp, #24
 801a3b4:	af00      	add	r7, sp, #0
 801a3b6:	60f8      	str	r0, [r7, #12]
 801a3b8:	607a      	str	r2, [r7, #4]
 801a3ba:	461a      	mov	r2, r3
 801a3bc:	460b      	mov	r3, r1
 801a3be:	817b      	strh	r3, [r7, #10]
 801a3c0:	4613      	mov	r3, r2
 801a3c2:	727b      	strb	r3, [r7, #9]
	int i;

	if (!p_owner || !p_i2c) {
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d002      	beq.n	801a3d0 <pifMs5611_Init+0x20>
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d104      	bne.n	801a3da <pifMs5611_Init+0x2a>
		pif_error = E_INVALID_PARAM;
 801a3d0:	4b41      	ldr	r3, [pc, #260]	; (801a4d8 <pifMs5611_Init+0x128>)
 801a3d2:	2201      	movs	r2, #1
 801a3d4:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801a3d6:	2300      	movs	r3, #0
 801a3d8:	e079      	b.n	801a4ce <pifMs5611_Init+0x11e>
	}

	memset(p_owner, 0, sizeof(PifMs5611));
 801a3da:	2234      	movs	r2, #52	; 0x34
 801a3dc:	2100      	movs	r1, #0
 801a3de:	68f8      	ldr	r0, [r7, #12]
 801a3e0:	f008 fb5a 	bl	8022a98 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c, addr);
 801a3e4:	7a7b      	ldrb	r3, [r7, #9]
 801a3e6:	4619      	mov	r1, r3
 801a3e8:	6878      	ldr	r0, [r7, #4]
 801a3ea:	f7f7 fde7 	bl	8011fbc <pifI2cPort_AddDevice>
 801a3ee:	4602      	mov	r2, r0
 801a3f0:	68fb      	ldr	r3, [r7, #12]
 801a3f2:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	685b      	ldr	r3, [r3, #4]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d101      	bne.n	801a400 <pifMs5611_Init+0x50>
 801a3fc:	2300      	movs	r3, #0
 801a3fe:	e066      	b.n	801a4ce <pifMs5611_Init+0x11e>

	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801a400:	68fb      	ldr	r3, [r7, #12]
 801a402:	685b      	ldr	r3, [r3, #4]
 801a404:	2200      	movs	r2, #0
 801a406:	211e      	movs	r1, #30
 801a408:	4618      	mov	r0, r3
 801a40a:	f7f8 f809 	bl	8012420 <pifI2cDevice_WriteRegByte>
 801a40e:	4603      	mov	r3, r0
 801a410:	2b00      	cmp	r3, #0
 801a412:	d051      	beq.n	801a4b8 <pifMs5611_Init+0x108>
	pifTaskManager_YieldMs(100);
 801a414:	2064      	movs	r0, #100	; 0x64
 801a416:	f7fa fc0d 	bl	8014c34 <pifTaskManager_YieldMs>

	for (i = 0; i < 8; i++) {
 801a41a:	2300      	movs	r3, #0
 801a41c:	617b      	str	r3, [r7, #20]
 801a41e:	e014      	b.n	801a44a <pifMs5611_Init+0x9a>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	6858      	ldr	r0, [r3, #4]
 801a424:	697b      	ldr	r3, [r7, #20]
 801a426:	3350      	adds	r3, #80	; 0x50
 801a428:	b2db      	uxtb	r3, r3
 801a42a:	005b      	lsls	r3, r3, #1
 801a42c:	b2d9      	uxtb	r1, r3
 801a42e:	697b      	ldr	r3, [r7, #20]
 801a430:	3304      	adds	r3, #4
 801a432:	005b      	lsls	r3, r3, #1
 801a434:	68fa      	ldr	r2, [r7, #12]
 801a436:	4413      	add	r3, r2
 801a438:	461a      	mov	r2, r3
 801a43a:	f7f7 fed5 	bl	80121e8 <pifI2cDevice_ReadRegWord>
 801a43e:	4603      	mov	r3, r0
 801a440:	2b00      	cmp	r3, #0
 801a442:	d03b      	beq.n	801a4bc <pifMs5611_Init+0x10c>
	for (i = 0; i < 8; i++) {
 801a444:	697b      	ldr	r3, [r7, #20]
 801a446:	3301      	adds	r3, #1
 801a448:	617b      	str	r3, [r7, #20]
 801a44a:	697b      	ldr	r3, [r7, #20]
 801a44c:	2b07      	cmp	r3, #7
 801a44e:	dde7      	ble.n	801a420 <pifMs5611_Init+0x70>
	}
	if (!_checkPromCrc(p_owner)) goto fail;
 801a450:	68f8      	ldr	r0, [r7, #12]
 801a452:	f7ff fbb9 	bl	8019bc8 <_checkPromCrc>
 801a456:	4603      	mov	r3, r0
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d031      	beq.n	801a4c0 <pifMs5611_Init+0x110>

	if (p_param) {
 801a45c:	6a3b      	ldr	r3, [r7, #32]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d017      	beq.n	801a492 <pifMs5611_Init+0xe2>
		pifMs5611_SetOverSamplingRate(p_owner, p_param->osr);
 801a462:	6a3b      	ldr	r3, [r7, #32]
 801a464:	781b      	ldrb	r3, [r3, #0]
 801a466:	b29b      	uxth	r3, r3
 801a468:	4619      	mov	r1, r3
 801a46a:	68f8      	ldr	r0, [r7, #12]
 801a46c:	f000 f85c 	bl	801a528 <pifMs5611_SetOverSamplingRate>

		if (!pifMs5611_AddTaskForReading(p_owner, p_param->read_period, p_param->evt_read, FALSE)) goto fail;
 801a470:	6a3b      	ldr	r3, [r7, #32]
 801a472:	8859      	ldrh	r1, [r3, #2]
 801a474:	6a3b      	ldr	r3, [r7, #32]
 801a476:	685a      	ldr	r2, [r3, #4]
 801a478:	2300      	movs	r3, #0
 801a47a:	68f8      	ldr	r0, [r7, #12]
 801a47c:	f000 f890 	bl	801a5a0 <pifMs5611_AddTaskForReading>
 801a480:	4603      	mov	r3, r0
 801a482:	2b00      	cmp	r3, #0
 801a484:	d01e      	beq.n	801a4c4 <pifMs5611_Init+0x114>
		p_owner->_p_task->disallow_yield_id = p_param->disallow_yield_id;
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	69db      	ldr	r3, [r3, #28]
 801a48a:	6a3a      	ldr	r2, [r7, #32]
 801a48c:	7a12      	ldrb	r2, [r2, #8]
 801a48e:	715a      	strb	r2, [r3, #5]
 801a490:	e003      	b.n	801a49a <pifMs5611_Init+0xea>
	}
	else {
		pifMs5611_SetOverSamplingRate(p_owner, MS5611_OSR_1024);
 801a492:	2104      	movs	r1, #4
 801a494:	68f8      	ldr	r0, [r7, #12]
 801a496:	f000 f847 	bl	801a528 <pifMs5611_SetOverSamplingRate>
	}

	if (id == PIF_ID_AUTO) id = pif_id++;
 801a49a:	897b      	ldrh	r3, [r7, #10]
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d106      	bne.n	801a4ae <pifMs5611_Init+0xfe>
 801a4a0:	4b0e      	ldr	r3, [pc, #56]	; (801a4dc <pifMs5611_Init+0x12c>)
 801a4a2:	881b      	ldrh	r3, [r3, #0]
 801a4a4:	1c5a      	adds	r2, r3, #1
 801a4a6:	b291      	uxth	r1, r2
 801a4a8:	4a0c      	ldr	r2, [pc, #48]	; (801a4dc <pifMs5611_Init+0x12c>)
 801a4aa:	8011      	strh	r1, [r2, #0]
 801a4ac:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	897a      	ldrh	r2, [r7, #10]
 801a4b2:	801a      	strh	r2, [r3, #0]
    return TRUE;
 801a4b4:	2301      	movs	r3, #1
 801a4b6:	e00a      	b.n	801a4ce <pifMs5611_Init+0x11e>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801a4b8:	bf00      	nop
 801a4ba:	e004      	b.n	801a4c6 <pifMs5611_Init+0x116>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801a4bc:	bf00      	nop
 801a4be:	e002      	b.n	801a4c6 <pifMs5611_Init+0x116>
	if (!_checkPromCrc(p_owner)) goto fail;
 801a4c0:	bf00      	nop
 801a4c2:	e000      	b.n	801a4c6 <pifMs5611_Init+0x116>
		if (!pifMs5611_AddTaskForReading(p_owner, p_param->read_period, p_param->evt_read, FALSE)) goto fail;
 801a4c4:	bf00      	nop

fail:
	pifMs5611_Clear(p_owner);
 801a4c6:	68f8      	ldr	r0, [r7, #12]
 801a4c8:	f000 f80a 	bl	801a4e0 <pifMs5611_Clear>
	return FALSE;
 801a4cc:	2300      	movs	r3, #0
}
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	3718      	adds	r7, #24
 801a4d2:	46bd      	mov	sp, r7
 801a4d4:	bd80      	pop	{r7, pc}
 801a4d6:	bf00      	nop
 801a4d8:	20001c0d 	.word	0x20001c0d
 801a4dc:	2000011c 	.word	0x2000011c

0801a4e0 <pifMs5611_Clear>:

void pifMs5611_Clear(PifMs5611* p_owner)
{
 801a4e0:	b580      	push	{r7, lr}
 801a4e2:	b082      	sub	sp, #8
 801a4e4:	af00      	add	r7, sp, #0
 801a4e6:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	69db      	ldr	r3, [r3, #28]
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d007      	beq.n	801a500 <pifMs5611_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	69db      	ldr	r3, [r3, #28]
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	f7fa f8dd 	bl	80146b4 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	2200      	movs	r2, #0
 801a4fe:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_i2c) {
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	685b      	ldr	r3, [r3, #4]
 801a504:	2b00      	cmp	r3, #0
 801a506:	d00b      	beq.n	801a520 <pifMs5611_Clear+0x40>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	685b      	ldr	r3, [r3, #4]
 801a50c:	685a      	ldr	r2, [r3, #4]
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	685b      	ldr	r3, [r3, #4]
 801a512:	4619      	mov	r1, r3
 801a514:	4610      	mov	r0, r2
 801a516:	f7f7 fd7b 	bl	8012010 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	2200      	movs	r2, #0
 801a51e:	605a      	str	r2, [r3, #4]
	}
}
 801a520:	bf00      	nop
 801a522:	3708      	adds	r7, #8
 801a524:	46bd      	mov	sp, r7
 801a526:	bd80      	pop	{r7, pc}

0801a528 <pifMs5611_SetOverSamplingRate>:

void pifMs5611_SetOverSamplingRate(PifMs5611* p_owner, uint16_t osr)
{
 801a528:	b480      	push	{r7}
 801a52a:	b083      	sub	sp, #12
 801a52c:	af00      	add	r7, sp, #0
 801a52e:	6078      	str	r0, [r7, #4]
 801a530:	460b      	mov	r3, r1
 801a532:	807b      	strh	r3, [r7, #2]
	p_owner->_over_sampling_rate = osr;
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	887a      	ldrh	r2, [r7, #2]
 801a538:	831a      	strh	r2, [r3, #24]
	switch (osr) {
 801a53a:	887b      	ldrh	r3, [r7, #2]
 801a53c:	2b08      	cmp	r3, #8
 801a53e:	d829      	bhi.n	801a594 <pifMs5611_SetOverSamplingRate+0x6c>
 801a540:	a201      	add	r2, pc, #4	; (adr r2, 801a548 <pifMs5611_SetOverSamplingRate+0x20>)
 801a542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a546:	bf00      	nop
 801a548:	0801a56d 	.word	0x0801a56d
 801a54c:	0801a595 	.word	0x0801a595
 801a550:	0801a575 	.word	0x0801a575
 801a554:	0801a595 	.word	0x0801a595
 801a558:	0801a57d 	.word	0x0801a57d
 801a55c:	0801a595 	.word	0x0801a595
 801a560:	0801a585 	.word	0x0801a585
 801a564:	0801a595 	.word	0x0801a595
 801a568:	0801a58d 	.word	0x0801a58d
	case MS5611_OSR_256: p_owner->_conversion_time = 1 + 1; break;
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	2202      	movs	r2, #2
 801a570:	769a      	strb	r2, [r3, #26]
 801a572:	e00f      	b.n	801a594 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_512: p_owner->_conversion_time = 2 + 1; break;
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	2203      	movs	r2, #3
 801a578:	769a      	strb	r2, [r3, #26]
 801a57a:	e00b      	b.n	801a594 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_1024: p_owner->_conversion_time = 3 + 1; break;
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	2204      	movs	r2, #4
 801a580:	769a      	strb	r2, [r3, #26]
 801a582:	e007      	b.n	801a594 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_2048: p_owner->_conversion_time = 5 + 1; break;
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	2206      	movs	r2, #6
 801a588:	769a      	strb	r2, [r3, #26]
 801a58a:	e003      	b.n	801a594 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_4096: p_owner->_conversion_time = 10 + 1; break;
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	220b      	movs	r2, #11
 801a590:	769a      	strb	r2, [r3, #26]
 801a592:	bf00      	nop
	}
}
 801a594:	bf00      	nop
 801a596:	370c      	adds	r7, #12
 801a598:	46bd      	mov	sp, r7
 801a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a59e:	4770      	bx	lr

0801a5a0 <pifMs5611_AddTaskForReading>:
	_calcurateBarometric(p_owner, p_pressure, p_temperature);
	return TRUE;
}

BOOL pifMs5611_AddTaskForReading(PifMs5611* p_owner, uint16_t read_period, PifEvtBaroRead evt_read, BOOL start)
{
 801a5a0:	b580      	push	{r7, lr}
 801a5a2:	b086      	sub	sp, #24
 801a5a4:	af02      	add	r7, sp, #8
 801a5a6:	60f8      	str	r0, [r7, #12]
 801a5a8:	607a      	str	r2, [r7, #4]
 801a5aa:	461a      	mov	r2, r3
 801a5ac:	460b      	mov	r3, r1
 801a5ae:	817b      	strh	r3, [r7, #10]
 801a5b0:	4613      	mov	r3, r2
 801a5b2:	727b      	strb	r3, [r7, #9]
	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, read_period, _doTask, p_owner, start);
 801a5b4:	8979      	ldrh	r1, [r7, #10]
 801a5b6:	7a7b      	ldrb	r3, [r7, #9]
 801a5b8:	9300      	str	r3, [sp, #0]
 801a5ba:	68fb      	ldr	r3, [r7, #12]
 801a5bc:	4a0f      	ldr	r2, [pc, #60]	; (801a5fc <pifMs5611_AddTaskForReading+0x5c>)
 801a5be:	2004      	movs	r0, #4
 801a5c0:	f7fa f810 	bl	80145e4 <pifTaskManager_Add>
 801a5c4:	4602      	mov	r2, r0
 801a5c6:	68fb      	ldr	r3, [r7, #12]
 801a5c8:	61da      	str	r2, [r3, #28]
    if (!p_owner->_p_task) return FALSE;
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	69db      	ldr	r3, [r3, #28]
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d101      	bne.n	801a5d6 <pifMs5611_AddTaskForReading+0x36>
 801a5d2:	2300      	movs	r3, #0
 801a5d4:	e00e      	b.n	801a5f4 <pifMs5611_AddTaskForReading+0x54>
    p_owner->_p_task->name = "MS5611";
 801a5d6:	68fb      	ldr	r3, [r7, #12]
 801a5d8:	69db      	ldr	r3, [r3, #28]
 801a5da:	4a09      	ldr	r2, [pc, #36]	; (801a600 <pifMs5611_AddTaskForReading+0x60>)
 801a5dc:	601a      	str	r2, [r3, #0]

    p_owner->__read_period = read_period;
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	897a      	ldrh	r2, [r7, #10]
 801a5e2:	841a      	strh	r2, [r3, #32]
    p_owner->__evt_read = evt_read;
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	687a      	ldr	r2, [r7, #4]
 801a5e8:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	2201      	movs	r2, #1
 801a5ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    return TRUE;
 801a5f2:	2301      	movs	r3, #1
}
 801a5f4:	4618      	mov	r0, r3
 801a5f6:	3710      	adds	r7, #16
 801a5f8:	46bd      	mov	sp, r7
 801a5fa:	bd80      	pop	{r7, pc}
 801a5fc:	0801a21d 	.word	0x0801a21d
 801a600:	080278cc 	.word	0x080278cc

0801a604 <_doTask>:
#include "sound/pif_buzzer.h"


static uint16_t _doTask(PifTask* p_task)
{
 801a604:	b580      	push	{r7, lr}
 801a606:	b086      	sub	sp, #24
 801a608:	af00      	add	r7, sp, #0
 801a60a:	6078      	str	r0, [r7, #4]
	PifBuzzer* p_owner = (PifBuzzer*)p_task->_p_client;
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	68db      	ldr	r3, [r3, #12]
 801a610:	613b      	str	r3, [r7, #16]
	uint8_t repeat;
	uint16_t sound_10ms, delay = 0;
 801a612:	2300      	movs	r3, #0
 801a614:	82fb      	strh	r3, [r7, #22]

	sound_10ms = p_owner->__p_sound_10ms[p_owner->__pos];
 801a616:	693b      	ldr	r3, [r7, #16]
 801a618:	691b      	ldr	r3, [r3, #16]
 801a61a:	693a      	ldr	r2, [r7, #16]
 801a61c:	7d12      	ldrb	r2, [r2, #20]
 801a61e:	4413      	add	r3, r2
 801a620:	781b      	ldrb	r3, [r3, #0]
 801a622:	81fb      	strh	r3, [r7, #14]
	switch (p_owner->_state) {
 801a624:	693b      	ldr	r3, [r7, #16]
 801a626:	7b1b      	ldrb	r3, [r3, #12]
 801a628:	3b01      	subs	r3, #1
 801a62a:	2b03      	cmp	r3, #3
 801a62c:	d87f      	bhi.n	801a72e <_doTask+0x12a>
 801a62e:	a201      	add	r2, pc, #4	; (adr r2, 801a634 <_doTask+0x30>)
 801a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a634:	0801a645 	.word	0x0801a645
 801a638:	0801a667 	.word	0x0801a667
 801a63c:	0801a689 	.word	0x0801a689
 801a640:	0801a6fb 	.word	0x0801a6fb
	case BS_START:
		(*p_owner->__act_action)(p_owner->_id, ON);
 801a644:	693b      	ldr	r3, [r7, #16]
 801a646:	699b      	ldr	r3, [r3, #24]
 801a648:	693a      	ldr	r2, [r7, #16]
 801a64a:	8892      	ldrh	r2, [r2, #4]
 801a64c:	2101      	movs	r1, #1
 801a64e:	4610      	mov	r0, r2
 801a650:	4798      	blx	r3
		p_owner->__pos++;
 801a652:	693b      	ldr	r3, [r7, #16]
 801a654:	7d1b      	ldrb	r3, [r3, #20]
 801a656:	3301      	adds	r3, #1
 801a658:	b2da      	uxtb	r2, r3
 801a65a:	693b      	ldr	r3, [r7, #16]
 801a65c:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_ON;
 801a65e:	693b      	ldr	r3, [r7, #16]
 801a660:	2202      	movs	r2, #2
 801a662:	731a      	strb	r2, [r3, #12]
		break;
 801a664:	e064      	b.n	801a730 <_doTask+0x12c>

	case BS_ON:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801a666:	693b      	ldr	r3, [r7, #16]
 801a668:	699b      	ldr	r3, [r3, #24]
 801a66a:	693a      	ldr	r2, [r7, #16]
 801a66c:	8892      	ldrh	r2, [r2, #4]
 801a66e:	2100      	movs	r1, #0
 801a670:	4610      	mov	r0, r2
 801a672:	4798      	blx	r3
		p_owner->__pos++;
 801a674:	693b      	ldr	r3, [r7, #16]
 801a676:	7d1b      	ldrb	r3, [r3, #20]
 801a678:	3301      	adds	r3, #1
 801a67a:	b2da      	uxtb	r2, r3
 801a67c:	693b      	ldr	r3, [r7, #16]
 801a67e:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_OFF;
 801a680:	693b      	ldr	r3, [r7, #16]
 801a682:	2203      	movs	r2, #3
 801a684:	731a      	strb	r2, [r3, #12]
		break;
 801a686:	e053      	b.n	801a730 <_doTask+0x12c>

	case BS_OFF:
		if (sound_10ms < 0xF0) {
 801a688:	89fb      	ldrh	r3, [r7, #14]
 801a68a:	2bef      	cmp	r3, #239	; 0xef
 801a68c:	d810      	bhi.n	801a6b0 <_doTask+0xac>
			(*p_owner->__act_action)(p_owner->_id, ON);
 801a68e:	693b      	ldr	r3, [r7, #16]
 801a690:	699b      	ldr	r3, [r3, #24]
 801a692:	693a      	ldr	r2, [r7, #16]
 801a694:	8892      	ldrh	r2, [r2, #4]
 801a696:	2101      	movs	r1, #1
 801a698:	4610      	mov	r0, r2
 801a69a:	4798      	blx	r3
			p_owner->__pos++;
 801a69c:	693b      	ldr	r3, [r7, #16]
 801a69e:	7d1b      	ldrb	r3, [r3, #20]
 801a6a0:	3301      	adds	r3, #1
 801a6a2:	b2da      	uxtb	r2, r3
 801a6a4:	693b      	ldr	r3, [r7, #16]
 801a6a6:	751a      	strb	r2, [r3, #20]
			p_owner->_state = BS_ON;
 801a6a8:	693b      	ldr	r3, [r7, #16]
 801a6aa:	2202      	movs	r2, #2
 801a6ac:	731a      	strb	r2, [r3, #12]
			else {
				p_owner->_state = BS_STOP;
			}
			delay = 1;
		}
		break;
 801a6ae:	e03f      	b.n	801a730 <_doTask+0x12c>
		else if (sound_10ms == 0xF0) {
 801a6b0:	89fb      	ldrh	r3, [r7, #14]
 801a6b2:	2bf0      	cmp	r3, #240	; 0xf0
 801a6b4:	d105      	bne.n	801a6c2 <_doTask+0xbe>
			p_owner->_state = BS_STOP;
 801a6b6:	693b      	ldr	r3, [r7, #16]
 801a6b8:	2204      	movs	r2, #4
 801a6ba:	731a      	strb	r2, [r3, #12]
			delay = 1;
 801a6bc:	2301      	movs	r3, #1
 801a6be:	82fb      	strh	r3, [r7, #22]
		break;
 801a6c0:	e036      	b.n	801a730 <_doTask+0x12c>
			repeat = sound_10ms - 0xF0;
 801a6c2:	89fb      	ldrh	r3, [r7, #14]
 801a6c4:	b2db      	uxtb	r3, r3
 801a6c6:	3310      	adds	r3, #16
 801a6c8:	737b      	strb	r3, [r7, #13]
			if (p_owner->__repeat < repeat) {
 801a6ca:	693b      	ldr	r3, [r7, #16]
 801a6cc:	7d5b      	ldrb	r3, [r3, #21]
 801a6ce:	7b7a      	ldrb	r2, [r7, #13]
 801a6d0:	429a      	cmp	r2, r3
 801a6d2:	d90c      	bls.n	801a6ee <_doTask+0xea>
				p_owner->__pos = 0;
 801a6d4:	693b      	ldr	r3, [r7, #16]
 801a6d6:	2200      	movs	r2, #0
 801a6d8:	751a      	strb	r2, [r3, #20]
				p_owner->__repeat++;
 801a6da:	693b      	ldr	r3, [r7, #16]
 801a6dc:	7d5b      	ldrb	r3, [r3, #21]
 801a6de:	3301      	adds	r3, #1
 801a6e0:	b2da      	uxtb	r2, r3
 801a6e2:	693b      	ldr	r3, [r7, #16]
 801a6e4:	755a      	strb	r2, [r3, #21]
				p_owner->_state = BS_START;
 801a6e6:	693b      	ldr	r3, [r7, #16]
 801a6e8:	2201      	movs	r2, #1
 801a6ea:	731a      	strb	r2, [r3, #12]
 801a6ec:	e002      	b.n	801a6f4 <_doTask+0xf0>
				p_owner->_state = BS_STOP;
 801a6ee:	693b      	ldr	r3, [r7, #16]
 801a6f0:	2204      	movs	r2, #4
 801a6f2:	731a      	strb	r2, [r3, #12]
			delay = 1;
 801a6f4:	2301      	movs	r3, #1
 801a6f6:	82fb      	strh	r3, [r7, #22]
		break;
 801a6f8:	e01a      	b.n	801a730 <_doTask+0x12c>

	case BS_STOP:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801a6fa:	693b      	ldr	r3, [r7, #16]
 801a6fc:	699b      	ldr	r3, [r3, #24]
 801a6fe:	693a      	ldr	r2, [r7, #16]
 801a700:	8892      	ldrh	r2, [r2, #4]
 801a702:	2100      	movs	r1, #0
 801a704:	4610      	mov	r0, r2
 801a706:	4798      	blx	r3
		p_owner->_state = BS_IDLE;
 801a708:	693b      	ldr	r3, [r7, #16]
 801a70a:	2200      	movs	r2, #0
 801a70c:	731a      	strb	r2, [r3, #12]
		if (p_owner->evt_finish) (*p_owner->evt_finish)(p_owner->_id);
 801a70e:	693b      	ldr	r3, [r7, #16]
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	2b00      	cmp	r3, #0
 801a714:	d005      	beq.n	801a722 <_doTask+0x11e>
 801a716:	693b      	ldr	r3, [r7, #16]
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	693a      	ldr	r2, [r7, #16]
 801a71c:	8892      	ldrh	r2, [r2, #4]
 801a71e:	4610      	mov	r0, r2
 801a720:	4798      	blx	r3
		delay = 1;
 801a722:	2301      	movs	r3, #1
 801a724:	82fb      	strh	r3, [r7, #22]
		p_task->pause = TRUE;
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	2201      	movs	r2, #1
 801a72a:	711a      	strb	r2, [r3, #4]
		break;
 801a72c:	e000      	b.n	801a730 <_doTask+0x12c>

	default:
		break;
 801a72e:	bf00      	nop
	}
	return delay ? delay : sound_10ms * 10;
 801a730:	8afb      	ldrh	r3, [r7, #22]
 801a732:	2b00      	cmp	r3, #0
 801a734:	d106      	bne.n	801a744 <_doTask+0x140>
 801a736:	89fb      	ldrh	r3, [r7, #14]
 801a738:	461a      	mov	r2, r3
 801a73a:	0092      	lsls	r2, r2, #2
 801a73c:	4413      	add	r3, r2
 801a73e:	005b      	lsls	r3, r3, #1
 801a740:	b29b      	uxth	r3, r3
 801a742:	e000      	b.n	801a746 <_doTask+0x142>
 801a744:	8afb      	ldrh	r3, [r7, #22]
}
 801a746:	4618      	mov	r0, r3
 801a748:	3718      	adds	r7, #24
 801a74a:	46bd      	mov	sp, r7
 801a74c:	bd80      	pop	{r7, pc}
 801a74e:	bf00      	nop

0801a750 <pifBuzzer_Init>:

BOOL pifBuzzer_Init(PifBuzzer* p_owner, PifId id, PifActBuzzerAction act_action)
{
 801a750:	b580      	push	{r7, lr}
 801a752:	b086      	sub	sp, #24
 801a754:	af02      	add	r7, sp, #8
 801a756:	60f8      	str	r0, [r7, #12]
 801a758:	460b      	mov	r3, r1
 801a75a:	607a      	str	r2, [r7, #4]
 801a75c:	817b      	strh	r3, [r7, #10]
	if (!p_owner || !act_action) {
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	2b00      	cmp	r3, #0
 801a762:	d002      	beq.n	801a76a <pifBuzzer_Init+0x1a>
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	2b00      	cmp	r3, #0
 801a768:	d104      	bne.n	801a774 <pifBuzzer_Init+0x24>
		pif_error = E_INVALID_PARAM;
 801a76a:	4b1a      	ldr	r3, [pc, #104]	; (801a7d4 <pifBuzzer_Init+0x84>)
 801a76c:	2201      	movs	r2, #1
 801a76e:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801a770:	2300      	movs	r3, #0
 801a772:	e02a      	b.n	801a7ca <pifBuzzer_Init+0x7a>
	}

	memset(p_owner, 0, sizeof(PifBuzzer));
 801a774:	221c      	movs	r2, #28
 801a776:	2100      	movs	r1, #0
 801a778:	68f8      	ldr	r0, [r7, #12]
 801a77a:	f008 f98d 	bl	8022a98 <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, 1, _doTask, p_owner, FALSE);
 801a77e:	2300      	movs	r3, #0
 801a780:	9300      	str	r3, [sp, #0]
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	4a14      	ldr	r2, [pc, #80]	; (801a7d8 <pifBuzzer_Init+0x88>)
 801a786:	2101      	movs	r1, #1
 801a788:	2004      	movs	r0, #4
 801a78a:	f7f9 ff2b 	bl	80145e4 <pifTaskManager_Add>
 801a78e:	4602      	mov	r2, r0
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	609a      	str	r2, [r3, #8]
	if (!p_owner->_p_task) return FALSE;
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	689b      	ldr	r3, [r3, #8]
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d101      	bne.n	801a7a0 <pifBuzzer_Init+0x50>
 801a79c:	2300      	movs	r3, #0
 801a79e:	e014      	b.n	801a7ca <pifBuzzer_Init+0x7a>
	p_owner->_p_task->name = "Buzzer";
 801a7a0:	68fb      	ldr	r3, [r7, #12]
 801a7a2:	689b      	ldr	r3, [r3, #8]
 801a7a4:	4a0d      	ldr	r2, [pc, #52]	; (801a7dc <pifBuzzer_Init+0x8c>)
 801a7a6:	601a      	str	r2, [r3, #0]

    if (id == PIF_ID_AUTO) id = pif_id++;
 801a7a8:	897b      	ldrh	r3, [r7, #10]
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d106      	bne.n	801a7bc <pifBuzzer_Init+0x6c>
 801a7ae:	4b0c      	ldr	r3, [pc, #48]	; (801a7e0 <pifBuzzer_Init+0x90>)
 801a7b0:	881b      	ldrh	r3, [r3, #0]
 801a7b2:	1c5a      	adds	r2, r3, #1
 801a7b4:	b291      	uxth	r1, r2
 801a7b6:	4a0a      	ldr	r2, [pc, #40]	; (801a7e0 <pifBuzzer_Init+0x90>)
 801a7b8:	8011      	strh	r1, [r2, #0]
 801a7ba:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	897a      	ldrh	r2, [r7, #10]
 801a7c0:	809a      	strh	r2, [r3, #4]
    p_owner->__act_action = act_action;
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	687a      	ldr	r2, [r7, #4]
 801a7c6:	619a      	str	r2, [r3, #24]
    return TRUE;
 801a7c8:	2301      	movs	r3, #1
}
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	3710      	adds	r7, #16
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	bd80      	pop	{r7, pc}
 801a7d2:	bf00      	nop
 801a7d4:	20001c0d 	.word	0x20001c0d
 801a7d8:	0801a605 	.word	0x0801a605
 801a7dc:	080278d4 	.word	0x080278d4
 801a7e0:	2000011c 	.word	0x2000011c

0801a7e4 <pifBuzzer_Start>:
		p_owner->_p_task = NULL;
	}
}

BOOL pifBuzzer_Start(PifBuzzer* p_owner, const uint8_t* p_sound_10ms)
{
 801a7e4:	b480      	push	{r7}
 801a7e6:	b083      	sub	sp, #12
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	6078      	str	r0, [r7, #4]
 801a7ec:	6039      	str	r1, [r7, #0]
	if (!p_owner->_p_task) return FALSE;
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	689b      	ldr	r3, [r3, #8]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d101      	bne.n	801a7fa <pifBuzzer_Start+0x16>
 801a7f6:	2300      	movs	r3, #0
 801a7f8:	e010      	b.n	801a81c <pifBuzzer_Start+0x38>

	p_owner->__p_sound_10ms = p_sound_10ms;
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	683a      	ldr	r2, [r7, #0]
 801a7fe:	611a      	str	r2, [r3, #16]
	p_owner->__pos = 0;
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	2200      	movs	r2, #0
 801a804:	751a      	strb	r2, [r3, #20]
	p_owner->__repeat = 0;
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	2200      	movs	r2, #0
 801a80a:	755a      	strb	r2, [r3, #21]
	p_owner->_state = BS_START;
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	2201      	movs	r2, #1
 801a810:	731a      	strb	r2, [r3, #12]
	p_owner->_p_task->pause = FALSE;
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	689b      	ldr	r3, [r3, #8]
 801a816:	2200      	movs	r2, #0
 801a818:	711a      	strb	r2, [r3, #4]
	return TRUE;
 801a81a:	2301      	movs	r3, #1
}
 801a81c:	4618      	mov	r0, r3
 801a81e:	370c      	adds	r7, #12
 801a820:	46bd      	mov	sp, r7
 801a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a826:	4770      	bx	lr

0801a828 <pifBuzzer_Stop>:

void pifBuzzer_Stop(PifBuzzer* p_owner)
{
 801a828:	b480      	push	{r7}
 801a82a:	b083      	sub	sp, #12
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	6078      	str	r0, [r7, #4]
	p_owner->_state = BS_STOP;
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	2204      	movs	r2, #4
 801a834:	731a      	strb	r2, [r3, #12]
}
 801a836:	bf00      	nop
 801a838:	370c      	adds	r7, #12
 801a83a:	46bd      	mov	sp, r7
 801a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a840:	4770      	bx	lr

0801a842 <_actStorageI2c_Read_1>:
#include "core/pif_task.h"
#include "storage/pif_storage.h"


static BOOL _actStorageI2c_Read_1(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 801a842:	b580      	push	{r7, lr}
 801a844:	b086      	sub	sp, #24
 801a846:	af02      	add	r7, sp, #8
 801a848:	60f8      	str	r0, [r7, #12]
 801a84a:	60b9      	str	r1, [r7, #8]
 801a84c:	607a      	str	r2, [r7, #4]
 801a84e:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 8);
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	7a19      	ldrb	r1, [r3, #8]
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	0a1b      	lsrs	r3, r3, #8
 801a858:	b2da      	uxtb	r2, r3
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	685b      	ldr	r3, [r3, #4]
 801a85e:	430a      	orrs	r2, r1
 801a860:	b2d2      	uxtb	r2, r2
 801a862:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFF, 1, dst, size)) return FALSE;
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	6858      	ldr	r0, [r3, #4]
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	b2d9      	uxtb	r1, r3
 801a86c:	683b      	ldr	r3, [r7, #0]
 801a86e:	9300      	str	r3, [sp, #0]
 801a870:	68bb      	ldr	r3, [r7, #8]
 801a872:	2201      	movs	r2, #1
 801a874:	f7f7 fbf8 	bl	8012068 <pifI2cDevice_Read>
 801a878:	4603      	mov	r3, r0
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d101      	bne.n	801a882 <_actStorageI2c_Read_1+0x40>
 801a87e:	2300      	movs	r3, #0
 801a880:	e000      	b.n	801a884 <_actStorageI2c_Read_1+0x42>
	return TRUE;
 801a882:	2301      	movs	r3, #1
}
 801a884:	4618      	mov	r0, r3
 801a886:	3710      	adds	r7, #16
 801a888:	46bd      	mov	sp, r7
 801a88a:	bd80      	pop	{r7, pc}

0801a88c <_actStorageI2c_Write_1>:

static BOOL _actStorageI2c_Write_1(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801a88c:	b580      	push	{r7, lr}
 801a88e:	b086      	sub	sp, #24
 801a890:	af02      	add	r7, sp, #8
 801a892:	60f8      	str	r0, [r7, #12]
 801a894:	60b9      	str	r1, [r7, #8]
 801a896:	607a      	str	r2, [r7, #4]
 801a898:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 8);
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	7a19      	ldrb	r1, [r3, #8]
 801a89e:	68bb      	ldr	r3, [r7, #8]
 801a8a0:	0a1b      	lsrs	r3, r3, #8
 801a8a2:	b2da      	uxtb	r2, r3
 801a8a4:	68fb      	ldr	r3, [r7, #12]
 801a8a6:	685b      	ldr	r3, [r3, #4]
 801a8a8:	430a      	orrs	r2, r1
 801a8aa:	b2d2      	uxtb	r2, r2
 801a8ac:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFF, 1, src, size)) return FALSE;
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	6858      	ldr	r0, [r3, #4]
 801a8b2:	68bb      	ldr	r3, [r7, #8]
 801a8b4:	b2d9      	uxtb	r1, r3
 801a8b6:	683b      	ldr	r3, [r7, #0]
 801a8b8:	9300      	str	r3, [sp, #0]
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	2201      	movs	r2, #1
 801a8be:	f7f7 fd01 	bl	80122c4 <pifI2cDevice_Write>
 801a8c2:	4603      	mov	r3, r0
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d101      	bne.n	801a8cc <_actStorageI2c_Write_1+0x40>
 801a8c8:	2300      	movs	r3, #0
 801a8ca:	e009      	b.n	801a8e0 <_actStorageI2c_Write_1+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 801a8cc:	68fb      	ldr	r3, [r7, #12]
 801a8ce:	7a5b      	ldrb	r3, [r3, #9]
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d004      	beq.n	801a8de <_actStorageI2c_Write_1+0x52>
 801a8d4:	68fb      	ldr	r3, [r7, #12]
 801a8d6:	7a5b      	ldrb	r3, [r3, #9]
 801a8d8:	4618      	mov	r0, r3
 801a8da:	f7fa f9ab 	bl	8014c34 <pifTaskManager_YieldMs>
	return TRUE;
 801a8de:	2301      	movs	r3, #1
}
 801a8e0:	4618      	mov	r0, r3
 801a8e2:	3710      	adds	r7, #16
 801a8e4:	46bd      	mov	sp, r7
 801a8e6:	bd80      	pop	{r7, pc}

0801a8e8 <_actStorageI2c_Read_2>:

static BOOL _actStorageI2c_Read_2(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 801a8e8:	b580      	push	{r7, lr}
 801a8ea:	b086      	sub	sp, #24
 801a8ec:	af02      	add	r7, sp, #8
 801a8ee:	60f8      	str	r0, [r7, #12]
 801a8f0:	60b9      	str	r1, [r7, #8]
 801a8f2:	607a      	str	r2, [r7, #4]
 801a8f4:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 16);
 801a8f6:	68fb      	ldr	r3, [r7, #12]
 801a8f8:	7a19      	ldrb	r1, [r3, #8]
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	0c1b      	lsrs	r3, r3, #16
 801a8fe:	b2da      	uxtb	r2, r3
 801a900:	68fb      	ldr	r3, [r7, #12]
 801a902:	685b      	ldr	r3, [r3, #4]
 801a904:	430a      	orrs	r2, r1
 801a906:	b2d2      	uxtb	r2, r2
 801a908:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFFFF, 2, dst, size)) return FALSE;
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	6858      	ldr	r0, [r3, #4]
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	b299      	uxth	r1, r3
 801a912:	683b      	ldr	r3, [r7, #0]
 801a914:	9300      	str	r3, [sp, #0]
 801a916:	68bb      	ldr	r3, [r7, #8]
 801a918:	2202      	movs	r2, #2
 801a91a:	f7f7 fba5 	bl	8012068 <pifI2cDevice_Read>
 801a91e:	4603      	mov	r3, r0
 801a920:	2b00      	cmp	r3, #0
 801a922:	d101      	bne.n	801a928 <_actStorageI2c_Read_2+0x40>
 801a924:	2300      	movs	r3, #0
 801a926:	e000      	b.n	801a92a <_actStorageI2c_Read_2+0x42>
	return TRUE;
 801a928:	2301      	movs	r3, #1
}
 801a92a:	4618      	mov	r0, r3
 801a92c:	3710      	adds	r7, #16
 801a92e:	46bd      	mov	sp, r7
 801a930:	bd80      	pop	{r7, pc}

0801a932 <_actStorageI2c_Write_2>:

static BOOL _actStorageI2c_Write_2(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801a932:	b580      	push	{r7, lr}
 801a934:	b086      	sub	sp, #24
 801a936:	af02      	add	r7, sp, #8
 801a938:	60f8      	str	r0, [r7, #12]
 801a93a:	60b9      	str	r1, [r7, #8]
 801a93c:	607a      	str	r2, [r7, #4]
 801a93e:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 16);
 801a940:	68fb      	ldr	r3, [r7, #12]
 801a942:	7a19      	ldrb	r1, [r3, #8]
 801a944:	68bb      	ldr	r3, [r7, #8]
 801a946:	0c1b      	lsrs	r3, r3, #16
 801a948:	b2da      	uxtb	r2, r3
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	685b      	ldr	r3, [r3, #4]
 801a94e:	430a      	orrs	r2, r1
 801a950:	b2d2      	uxtb	r2, r2
 801a952:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFFFF, 2, src, size)) return FALSE;
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	6858      	ldr	r0, [r3, #4]
 801a958:	68bb      	ldr	r3, [r7, #8]
 801a95a:	b299      	uxth	r1, r3
 801a95c:	683b      	ldr	r3, [r7, #0]
 801a95e:	9300      	str	r3, [sp, #0]
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	2202      	movs	r2, #2
 801a964:	f7f7 fcae 	bl	80122c4 <pifI2cDevice_Write>
 801a968:	4603      	mov	r3, r0
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d101      	bne.n	801a972 <_actStorageI2c_Write_2+0x40>
 801a96e:	2300      	movs	r3, #0
 801a970:	e009      	b.n	801a986 <_actStorageI2c_Write_2+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	7a5b      	ldrb	r3, [r3, #9]
 801a976:	2b00      	cmp	r3, #0
 801a978:	d004      	beq.n	801a984 <_actStorageI2c_Write_2+0x52>
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	7a5b      	ldrb	r3, [r3, #9]
 801a97e:	4618      	mov	r0, r3
 801a980:	f7fa f958 	bl	8014c34 <pifTaskManager_YieldMs>
	return TRUE;
 801a984:	2301      	movs	r3, #1
}
 801a986:	4618      	mov	r0, r3
 801a988:	3710      	adds	r7, #16
 801a98a:	46bd      	mov	sp, r7
 801a98c:	bd80      	pop	{r7, pc}
	...

0801a990 <pifStorage_AttachI2c>:
	p_owner->__act_write = act_write;
	return TRUE;
}

BOOL pifStorage_AttachI2c(PifStorage* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801a990:	b580      	push	{r7, lr}
 801a992:	b084      	sub	sp, #16
 801a994:	af00      	add	r7, sp, #0
 801a996:	60f8      	str	r0, [r7, #12]
 801a998:	60b9      	str	r1, [r7, #8]
 801a99a:	4611      	mov	r1, r2
 801a99c:	461a      	mov	r2, r3
 801a99e:	460b      	mov	r3, r1
 801a9a0:	71fb      	strb	r3, [r7, #7]
 801a9a2:	4613      	mov	r3, r2
 801a9a4:	71bb      	strb	r3, [r7, #6]
    if (!p_owner || !p_port) {
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d002      	beq.n	801a9b2 <pifStorage_AttachI2c+0x22>
 801a9ac:	68bb      	ldr	r3, [r7, #8]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d104      	bne.n	801a9bc <pifStorage_AttachI2c+0x2c>
    	pif_error = E_INVALID_PARAM;
 801a9b2:	4b1b      	ldr	r3, [pc, #108]	; (801aa20 <pifStorage_AttachI2c+0x90>)
 801a9b4:	2201      	movs	r2, #1
 801a9b6:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	e02d      	b.n	801aa18 <pifStorage_AttachI2c+0x88>
    }

	p_owner->_p_i2c = pifI2cPort_AddDevice(p_port, addr);
 801a9bc:	79fb      	ldrb	r3, [r7, #7]
 801a9be:	4619      	mov	r1, r3
 801a9c0:	68b8      	ldr	r0, [r7, #8]
 801a9c2:	f7f7 fafb 	bl	8011fbc <pifI2cPort_AddDevice>
 801a9c6:	4602      	mov	r2, r0
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	685b      	ldr	r3, [r3, #4]
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d101      	bne.n	801a9d8 <pifStorage_AttachI2c+0x48>
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	e01f      	b.n	801aa18 <pifStorage_AttachI2c+0x88>

    p_owner->__addr = addr;
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	79fa      	ldrb	r2, [r7, #7]
 801a9dc:	721a      	strb	r2, [r3, #8]
    p_owner->__write_delay_ms = write_delay_ms;
 801a9de:	68fb      	ldr	r3, [r7, #12]
 801a9e0:	7e3a      	ldrb	r2, [r7, #24]
 801a9e2:	725a      	strb	r2, [r3, #9]

    switch (i_addr_size) {
 801a9e4:	79bb      	ldrb	r3, [r7, #6]
 801a9e6:	2b01      	cmp	r3, #1
 801a9e8:	d007      	beq.n	801a9fa <pifStorage_AttachI2c+0x6a>
 801a9ea:	2b02      	cmp	r3, #2
 801a9ec:	d00c      	beq.n	801aa08 <pifStorage_AttachI2c+0x78>
		p_owner->__act_read = _actStorageI2c_Read_2;
		p_owner->__act_write = _actStorageI2c_Write_2;
    	break;

    default:
    	goto fail;
 801a9ee:	bf00      	nop
    }
	return TRUE;

fail:
	pifStorage_DetachI2c(p_owner);
 801a9f0:	68f8      	ldr	r0, [r7, #12]
 801a9f2:	f000 f81f 	bl	801aa34 <pifStorage_DetachI2c>
	return FALSE;
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	e00e      	b.n	801aa18 <pifStorage_AttachI2c+0x88>
		p_owner->__act_read = _actStorageI2c_Read_1;
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	4a09      	ldr	r2, [pc, #36]	; (801aa24 <pifStorage_AttachI2c+0x94>)
 801a9fe:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_1;
 801aa00:	68fb      	ldr	r3, [r7, #12]
 801aa02:	4a09      	ldr	r2, [pc, #36]	; (801aa28 <pifStorage_AttachI2c+0x98>)
 801aa04:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 801aa06:	e006      	b.n	801aa16 <pifStorage_AttachI2c+0x86>
		p_owner->__act_read = _actStorageI2c_Read_2;
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	4a08      	ldr	r2, [pc, #32]	; (801aa2c <pifStorage_AttachI2c+0x9c>)
 801aa0c:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_2;
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	4a07      	ldr	r2, [pc, #28]	; (801aa30 <pifStorage_AttachI2c+0xa0>)
 801aa12:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 801aa14:	bf00      	nop
	return TRUE;
 801aa16:	2301      	movs	r3, #1
}
 801aa18:	4618      	mov	r0, r3
 801aa1a:	3710      	adds	r7, #16
 801aa1c:	46bd      	mov	sp, r7
 801aa1e:	bd80      	pop	{r7, pc}
 801aa20:	20001c0d 	.word	0x20001c0d
 801aa24:	0801a843 	.word	0x0801a843
 801aa28:	0801a88d 	.word	0x0801a88d
 801aa2c:	0801a8e9 	.word	0x0801a8e9
 801aa30:	0801a933 	.word	0x0801a933

0801aa34 <pifStorage_DetachI2c>:

void pifStorage_DetachI2c(PifStorage* p_owner)
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b082      	sub	sp, #8
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	685b      	ldr	r3, [r3, #4]
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d00b      	beq.n	801aa5c <pifStorage_DetachI2c+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	685b      	ldr	r3, [r3, #4]
 801aa48:	685a      	ldr	r2, [r3, #4]
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	685b      	ldr	r3, [r3, #4]
 801aa4e:	4619      	mov	r1, r3
 801aa50:	4610      	mov	r0, r2
 801aa52:	f7f7 fadd 	bl	8012010 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	2200      	movs	r2, #0
 801aa5a:	605a      	str	r2, [r3, #4]
	}
	p_owner->__act_read = NULL;
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	2200      	movs	r2, #0
 801aa60:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__act_write = NULL;
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	2200      	movs	r2, #0
 801aa66:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801aa68:	bf00      	nop
 801aa6a:	3708      	adds	r7, #8
 801aa6c:	46bd      	mov	sp, r7
 801aa6e:	bd80      	pop	{r7, pc}

0801aa70 <pifStorage_IsFormat>:

#ifdef __PIF_NO_USE_INLINE__

BOOL pifStorage_IsFormat(PifStorage* p_owner)
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b082      	sub	sp, #8
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_is_format)(p_owner);
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	68db      	ldr	r3, [r3, #12]
 801aa7c:	6878      	ldr	r0, [r7, #4]
 801aa7e:	4798      	blx	r3
 801aa80:	4603      	mov	r3, r0
}
 801aa82:	4618      	mov	r0, r3
 801aa84:	3708      	adds	r7, #8
 801aa86:	46bd      	mov	sp, r7
 801aa88:	bd80      	pop	{r7, pc}

0801aa8a <pifStorage_Format>:

BOOL pifStorage_Format(PifStorage* p_owner)
{
 801aa8a:	b580      	push	{r7, lr}
 801aa8c:	b082      	sub	sp, #8
 801aa8e:	af00      	add	r7, sp, #0
 801aa90:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_format)(p_owner);
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	691b      	ldr	r3, [r3, #16]
 801aa96:	6878      	ldr	r0, [r7, #4]
 801aa98:	4798      	blx	r3
 801aa9a:	4603      	mov	r3, r0
}
 801aa9c:	4618      	mov	r0, r3
 801aa9e:	3708      	adds	r7, #8
 801aaa0:	46bd      	mov	sp, r7
 801aaa2:	bd80      	pop	{r7, pc}

0801aaa4 <pifStorage_Create>:

PifStorageDataInfoP pifStorage_Create(PifStorage* p_owner, uint16_t id, uint16_t size)
{
 801aaa4:	b580      	push	{r7, lr}
 801aaa6:	b082      	sub	sp, #8
 801aaa8:	af00      	add	r7, sp, #0
 801aaaa:	6078      	str	r0, [r7, #4]
 801aaac:	460b      	mov	r3, r1
 801aaae:	807b      	strh	r3, [r7, #2]
 801aab0:	4613      	mov	r3, r2
 801aab2:	803b      	strh	r3, [r7, #0]
	return (*p_owner->__fn_create)(p_owner, id, size);
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	695b      	ldr	r3, [r3, #20]
 801aab8:	883a      	ldrh	r2, [r7, #0]
 801aaba:	8879      	ldrh	r1, [r7, #2]
 801aabc:	6878      	ldr	r0, [r7, #4]
 801aabe:	4798      	blx	r3
 801aac0:	4603      	mov	r3, r0
}
 801aac2:	4618      	mov	r0, r3
 801aac4:	3708      	adds	r7, #8
 801aac6:	46bd      	mov	sp, r7
 801aac8:	bd80      	pop	{r7, pc}

0801aaca <pifStorage_Open>:
{
	return (*p_owner->__fn_delete)(p_owner, id);
}

PifStorageDataInfoP pifStorage_Open(PifStorage* p_owner, uint16_t id)
{
 801aaca:	b580      	push	{r7, lr}
 801aacc:	b082      	sub	sp, #8
 801aace:	af00      	add	r7, sp, #0
 801aad0:	6078      	str	r0, [r7, #4]
 801aad2:	460b      	mov	r3, r1
 801aad4:	807b      	strh	r3, [r7, #2]
	return (*p_owner->__fn_open)(p_owner, id);
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	69db      	ldr	r3, [r3, #28]
 801aada:	887a      	ldrh	r2, [r7, #2]
 801aadc:	4611      	mov	r1, r2
 801aade:	6878      	ldr	r0, [r7, #4]
 801aae0:	4798      	blx	r3
 801aae2:	4603      	mov	r3, r0
}
 801aae4:	4618      	mov	r0, r3
 801aae6:	3708      	adds	r7, #8
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bd80      	pop	{r7, pc}

0801aaec <pifStorage_Read>:

BOOL pifStorage_Read(PifStorage* p_owner, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801aaec:	b590      	push	{r4, r7, lr}
 801aaee:	b085      	sub	sp, #20
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	60f8      	str	r0, [r7, #12]
 801aaf4:	60b9      	str	r1, [r7, #8]
 801aaf6:	607a      	str	r2, [r7, #4]
 801aaf8:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_read)(p_owner, p_dst, p_src, size);
 801aafa:	68fb      	ldr	r3, [r7, #12]
 801aafc:	6a1c      	ldr	r4, [r3, #32]
 801aafe:	683b      	ldr	r3, [r7, #0]
 801ab00:	687a      	ldr	r2, [r7, #4]
 801ab02:	68b9      	ldr	r1, [r7, #8]
 801ab04:	68f8      	ldr	r0, [r7, #12]
 801ab06:	47a0      	blx	r4
 801ab08:	4603      	mov	r3, r0
}
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	3714      	adds	r7, #20
 801ab0e:	46bd      	mov	sp, r7
 801ab10:	bd90      	pop	{r4, r7, pc}

0801ab12 <pifStorage_Write>:

BOOL pifStorage_Write(PifStorage* p_owner, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801ab12:	b590      	push	{r4, r7, lr}
 801ab14:	b085      	sub	sp, #20
 801ab16:	af00      	add	r7, sp, #0
 801ab18:	60f8      	str	r0, [r7, #12]
 801ab1a:	60b9      	str	r1, [r7, #8]
 801ab1c:	607a      	str	r2, [r7, #4]
 801ab1e:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_write)(p_owner, p_dst, p_src, size);
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801ab24:	683b      	ldr	r3, [r7, #0]
 801ab26:	687a      	ldr	r2, [r7, #4]
 801ab28:	68b9      	ldr	r1, [r7, #8]
 801ab2a:	68f8      	ldr	r0, [r7, #12]
 801ab2c:	47a0      	blx	r4
 801ab2e:	4603      	mov	r3, r0
}
 801ab30:	4618      	mov	r0, r3
 801ab32:	3714      	adds	r7, #20
 801ab34:	46bd      	mov	sp, r7
 801ab36:	bd90      	pop	{r4, r7, pc}

0801ab38 <_getNewDataNode>:

#define DATA_NODE_NULL	0xFFFF


static uint16_t _getNewDataNode(PifStorageVar* p_owner)
{
 801ab38:	b480      	push	{r7}
 801ab3a:	b085      	sub	sp, #20
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
	uint16_t node;

	node = p_owner->_p_info->free_node;
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab44:	899b      	ldrh	r3, [r3, #12]
 801ab46:	81fb      	strh	r3, [r7, #14]
	if (node == DATA_NODE_NULL) {
 801ab48:	89fb      	ldrh	r3, [r7, #14]
 801ab4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ab4e:	4293      	cmp	r3, r2
 801ab50:	d105      	bne.n	801ab5e <_getNewDataNode+0x26>
		pif_error = E_OVERFLOW_BUFFER;
 801ab52:	4b0c      	ldr	r3, [pc, #48]	; (801ab84 <_getNewDataNode+0x4c>)
 801ab54:	2204      	movs	r2, #4
 801ab56:	701a      	strb	r2, [r3, #0]
		return DATA_NODE_NULL;
 801ab58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ab5c:	e00c      	b.n	801ab78 <_getNewDataNode+0x40>
	}

	p_owner->_p_info->free_node = p_owner->__p_data_info[node].next_node;
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801ab62:	89fa      	ldrh	r2, [r7, #14]
 801ab64:	4613      	mov	r3, r2
 801ab66:	005b      	lsls	r3, r3, #1
 801ab68:	4413      	add	r3, r2
 801ab6a:	009b      	lsls	r3, r3, #2
 801ab6c:	18ca      	adds	r2, r1, r3
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab72:	88d2      	ldrh	r2, [r2, #6]
 801ab74:	819a      	strh	r2, [r3, #12]
	return node;
 801ab76:	89fb      	ldrh	r3, [r7, #14]
}
 801ab78:	4618      	mov	r0, r3
 801ab7a:	3714      	adds	r7, #20
 801ab7c:	46bd      	mov	sp, r7
 801ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab82:	4770      	bx	lr
 801ab84:	20001c0d 	.word	0x20001c0d

0801ab88 <_readData>:

static BOOL _readData(PifStorageVar* p_owner, uint8_t* dst, uint32_t src, size_t size, uint16_t sector_size)
{
 801ab88:	b590      	push	{r4, r7, lr}
 801ab8a:	b087      	sub	sp, #28
 801ab8c:	af00      	add	r7, sp, #0
 801ab8e:	60f8      	str	r0, [r7, #12]
 801ab90:	60b9      	str	r1, [r7, #8]
 801ab92:	607a      	str	r2, [r7, #4]
 801ab94:	603b      	str	r3, [r7, #0]
	uint32_t ptr, len;

	ptr = 0;
 801ab96:	2300      	movs	r3, #0
 801ab98:	617b      	str	r3, [r7, #20]
	while (size) {
 801ab9a:	e01d      	b.n	801abd8 <_readData+0x50>
		len = size > sector_size ? sector_size : size;
 801ab9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801ab9e:	683a      	ldr	r2, [r7, #0]
 801aba0:	4293      	cmp	r3, r2
 801aba2:	bf28      	it	cs
 801aba4:	4613      	movcs	r3, r2
 801aba6:	613b      	str	r3, [r7, #16]
		if (!(*p_owner->parent.__act_read)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801aba8:	68fb      	ldr	r3, [r7, #12]
 801abaa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801abac:	68f8      	ldr	r0, [r7, #12]
 801abae:	68ba      	ldr	r2, [r7, #8]
 801abb0:	697b      	ldr	r3, [r7, #20]
 801abb2:	18d1      	adds	r1, r2, r3
 801abb4:	687a      	ldr	r2, [r7, #4]
 801abb6:	697b      	ldr	r3, [r7, #20]
 801abb8:	441a      	add	r2, r3
 801abba:	693b      	ldr	r3, [r7, #16]
 801abbc:	47a0      	blx	r4
 801abbe:	4603      	mov	r3, r0
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d101      	bne.n	801abc8 <_readData+0x40>
 801abc4:	2300      	movs	r3, #0
 801abc6:	e00b      	b.n	801abe0 <_readData+0x58>

		ptr += len;
 801abc8:	697a      	ldr	r2, [r7, #20]
 801abca:	693b      	ldr	r3, [r7, #16]
 801abcc:	4413      	add	r3, r2
 801abce:	617b      	str	r3, [r7, #20]
		size -= len;
 801abd0:	683a      	ldr	r2, [r7, #0]
 801abd2:	693b      	ldr	r3, [r7, #16]
 801abd4:	1ad3      	subs	r3, r2, r3
 801abd6:	603b      	str	r3, [r7, #0]
	while (size) {
 801abd8:	683b      	ldr	r3, [r7, #0]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d1de      	bne.n	801ab9c <_readData+0x14>
	}
	return TRUE;
 801abde:	2301      	movs	r3, #1
}
 801abe0:	4618      	mov	r0, r3
 801abe2:	371c      	adds	r7, #28
 801abe4:	46bd      	mov	sp, r7
 801abe6:	bd90      	pop	{r4, r7, pc}

0801abe8 <_writeData>:

static BOOL _writeData(PifStorageVar* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801abe8:	b590      	push	{r4, r7, lr}
 801abea:	b089      	sub	sp, #36	; 0x24
 801abec:	af00      	add	r7, sp, #0
 801abee:	60f8      	str	r0, [r7, #12]
 801abf0:	60b9      	str	r1, [r7, #8]
 801abf2:	607a      	str	r2, [r7, #4]
 801abf4:	603b      	str	r3, [r7, #0]
	uint16_t sector_size = p_owner->_p_info->sector_size;
 801abf6:	68fb      	ldr	r3, [r7, #12]
 801abf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801abfa:	88db      	ldrh	r3, [r3, #6]
 801abfc:	837b      	strh	r3, [r7, #26]
	uint32_t ptr, len;

	ptr = 0;
 801abfe:	2300      	movs	r3, #0
 801ac00:	61fb      	str	r3, [r7, #28]
	while (size) {
 801ac02:	e01d      	b.n	801ac40 <_writeData+0x58>
		len = size > sector_size ? sector_size : size;
 801ac04:	8b7b      	ldrh	r3, [r7, #26]
 801ac06:	683a      	ldr	r2, [r7, #0]
 801ac08:	4293      	cmp	r3, r2
 801ac0a:	bf28      	it	cs
 801ac0c:	4613      	movcs	r3, r2
 801ac0e:	617b      	str	r3, [r7, #20]
		if (!(*p_owner->parent.__act_write)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801ac14:	68f8      	ldr	r0, [r7, #12]
 801ac16:	68ba      	ldr	r2, [r7, #8]
 801ac18:	69fb      	ldr	r3, [r7, #28]
 801ac1a:	18d1      	adds	r1, r2, r3
 801ac1c:	687a      	ldr	r2, [r7, #4]
 801ac1e:	69fb      	ldr	r3, [r7, #28]
 801ac20:	441a      	add	r2, r3
 801ac22:	697b      	ldr	r3, [r7, #20]
 801ac24:	47a0      	blx	r4
 801ac26:	4603      	mov	r3, r0
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	d101      	bne.n	801ac30 <_writeData+0x48>
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	e00b      	b.n	801ac48 <_writeData+0x60>

		ptr += len;
 801ac30:	69fa      	ldr	r2, [r7, #28]
 801ac32:	697b      	ldr	r3, [r7, #20]
 801ac34:	4413      	add	r3, r2
 801ac36:	61fb      	str	r3, [r7, #28]
		size -= len;
 801ac38:	683a      	ldr	r2, [r7, #0]
 801ac3a:	697b      	ldr	r3, [r7, #20]
 801ac3c:	1ad3      	subs	r3, r2, r3
 801ac3e:	603b      	str	r3, [r7, #0]
	while (size) {
 801ac40:	683b      	ldr	r3, [r7, #0]
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d1de      	bne.n	801ac04 <_writeData+0x1c>
	}
	return TRUE;
 801ac46:	2301      	movs	r3, #1
}
 801ac48:	4618      	mov	r0, r3
 801ac4a:	3724      	adds	r7, #36	; 0x24
 801ac4c:	46bd      	mov	sp, r7
 801ac4e:	bd90      	pop	{r4, r7, pc}

0801ac50 <pifStorageVar_Init>:

BOOL pifStorageVar_Init(PifStorageVar* p_owner, PifId id)
{
 801ac50:	b580      	push	{r7, lr}
 801ac52:	b082      	sub	sp, #8
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	6078      	str	r0, [r7, #4]
 801ac58:	460b      	mov	r3, r1
 801ac5a:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d104      	bne.n	801ac6c <pifStorageVar_Init+0x1c>
    	pif_error = E_INVALID_PARAM;
 801ac62:	4b18      	ldr	r3, [pc, #96]	; (801acc4 <pifStorageVar_Init+0x74>)
 801ac64:	2201      	movs	r2, #1
 801ac66:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801ac68:	2300      	movs	r3, #0
 801ac6a:	e027      	b.n	801acbc <pifStorageVar_Init+0x6c>
    }

	memset(p_owner, 0, sizeof(PifStorageVar));
 801ac6c:	2248      	movs	r2, #72	; 0x48
 801ac6e:	2100      	movs	r1, #0
 801ac70:	6878      	ldr	r0, [r7, #4]
 801ac72:	f007 ff11 	bl	8022a98 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801ac76:	887b      	ldrh	r3, [r7, #2]
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d106      	bne.n	801ac8a <pifStorageVar_Init+0x3a>
 801ac7c:	4b12      	ldr	r3, [pc, #72]	; (801acc8 <pifStorageVar_Init+0x78>)
 801ac7e:	881b      	ldrh	r3, [r3, #0]
 801ac80:	1c5a      	adds	r2, r3, #1
 801ac82:	b291      	uxth	r1, r2
 801ac84:	4a10      	ldr	r2, [pc, #64]	; (801acc8 <pifStorageVar_Init+0x78>)
 801ac86:	8011      	strh	r1, [r2, #0]
 801ac88:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	887a      	ldrh	r2, [r7, #2]
 801ac8e:	801a      	strh	r2, [r3, #0]

	p_owner->parent.__fn_is_format = pifStorageVar_IsFormat;
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	4a0e      	ldr	r2, [pc, #56]	; (801accc <pifStorageVar_Init+0x7c>)
 801ac94:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = pifStorageVar_Format;
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	4a0d      	ldr	r2, [pc, #52]	; (801acd0 <pifStorageVar_Init+0x80>)
 801ac9a:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = pifStorageVar_Create;
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	4a0d      	ldr	r2, [pc, #52]	; (801acd4 <pifStorageVar_Init+0x84>)
 801aca0:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = pifStorageVar_Delete;
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	4a0c      	ldr	r2, [pc, #48]	; (801acd8 <pifStorageVar_Init+0x88>)
 801aca6:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = pifStorageVar_Open;
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	4a0c      	ldr	r2, [pc, #48]	; (801acdc <pifStorageVar_Init+0x8c>)
 801acac:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = pifStorageVar_Read;
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	4a0b      	ldr	r2, [pc, #44]	; (801ace0 <pifStorageVar_Init+0x90>)
 801acb2:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = pifStorageVar_Write;
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	4a0b      	ldr	r2, [pc, #44]	; (801ace4 <pifStorageVar_Init+0x94>)
 801acb8:	625a      	str	r2, [r3, #36]	; 0x24
	return TRUE;
 801acba:	2301      	movs	r3, #1
}
 801acbc:	4618      	mov	r0, r3
 801acbe:	3708      	adds	r7, #8
 801acc0:	46bd      	mov	sp, r7
 801acc2:	bd80      	pop	{r7, pc}
 801acc4:	20001c0d 	.word	0x20001c0d
 801acc8:	2000011c 	.word	0x2000011c
 801accc:	0801af13 	.word	0x0801af13
 801acd0:	0801af2d 	.word	0x0801af2d
 801acd4:	0801b0cd 	.word	0x0801b0cd
 801acd8:	0801b379 	.word	0x0801b379
 801acdc:	0801b495 	.word	0x0801b495
 801ace0:	0801b529 	.word	0x0801b529
 801ace4:	0801b581 	.word	0x0801b581

0801ace8 <pifStorageVar_Clear>:

void pifStorageVar_Clear(PifStorageVar* p_owner)
{
 801ace8:	b580      	push	{r7, lr}
 801acea:	b082      	sub	sp, #8
 801acec:	af00      	add	r7, sp, #0
 801acee:	6078      	str	r0, [r7, #4]
    if (p_owner->__p_info_buffer) {
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d007      	beq.n	801ad08 <pifStorageVar_Clear+0x20>
        free(p_owner->__p_info_buffer);
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801acfc:	4618      	mov	r0, r3
 801acfe:	f007 feb5 	bl	8022a6c <free>
        p_owner->__p_info_buffer = NULL;
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	2200      	movs	r2, #0
 801ad06:	641a      	str	r2, [r3, #64]	; 0x40
    }
	p_owner->parent.__fn_is_format = NULL;
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	2200      	movs	r2, #0
 801ad0c:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = NULL;
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	2200      	movs	r2, #0
 801ad12:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = NULL;
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	2200      	movs	r2, #0
 801ad18:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = NULL;
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	2200      	movs	r2, #0
 801ad1e:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = NULL;
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	2200      	movs	r2, #0
 801ad24:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = NULL;
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	2200      	movs	r2, #0
 801ad2a:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = NULL;
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	2200      	movs	r2, #0
 801ad30:	625a      	str	r2, [r3, #36]	; 0x24
}
 801ad32:	bf00      	nop
 801ad34:	3708      	adds	r7, #8
 801ad36:	46bd      	mov	sp, r7
 801ad38:	bd80      	pop	{r7, pc}
	...

0801ad3c <pifStorageVar_SetMedia>:

BOOL pifStorageVar_SetMedia(PifStorageVar* p_owner, uint16_t sector_size, uint32_t storage_volume, uint8_t data_info_count)
{
 801ad3c:	b590      	push	{r4, r7, lr}
 801ad3e:	b089      	sub	sp, #36	; 0x24
 801ad40:	af02      	add	r7, sp, #8
 801ad42:	60f8      	str	r0, [r7, #12]
 801ad44:	607a      	str	r2, [r7, #4]
 801ad46:	461a      	mov	r2, r3
 801ad48:	460b      	mov	r3, r1
 801ad4a:	817b      	strh	r3, [r7, #10]
 801ad4c:	4613      	mov	r3, r2
 801ad4e:	727b      	strb	r3, [r7, #9]
    PifStorageVarInfo* p_info;

    if (!p_owner || sector_size < 16 || !storage_volume || !data_info_count) {
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d008      	beq.n	801ad68 <pifStorageVar_SetMedia+0x2c>
 801ad56:	897b      	ldrh	r3, [r7, #10]
 801ad58:	2b0f      	cmp	r3, #15
 801ad5a:	d905      	bls.n	801ad68 <pifStorageVar_SetMedia+0x2c>
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d002      	beq.n	801ad68 <pifStorageVar_SetMedia+0x2c>
 801ad62:	7a7b      	ldrb	r3, [r7, #9]
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d104      	bne.n	801ad72 <pifStorageVar_SetMedia+0x36>
    	pif_error = E_INVALID_PARAM;
 801ad68:	4b5c      	ldr	r3, [pc, #368]	; (801aedc <pifStorageVar_SetMedia+0x1a0>)
 801ad6a:	2201      	movs	r2, #1
 801ad6c:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801ad6e:	2300      	movs	r3, #0
 801ad70:	e0af      	b.n	801aed2 <pifStorageVar_SetMedia+0x196>
    }

    uint32_t max_sector_count = storage_volume / sector_size;
 801ad72:	897b      	ldrh	r3, [r7, #10]
 801ad74:	687a      	ldr	r2, [r7, #4]
 801ad76:	fbb2 f3f3 	udiv	r3, r2, r3
 801ad7a:	617b      	str	r3, [r7, #20]
    if (!max_sector_count || max_sector_count > 65535) {
 801ad7c:	697b      	ldr	r3, [r7, #20]
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d003      	beq.n	801ad8a <pifStorageVar_SetMedia+0x4e>
 801ad82:	697b      	ldr	r3, [r7, #20]
 801ad84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ad88:	d304      	bcc.n	801ad94 <pifStorageVar_SetMedia+0x58>
    	pif_error = E_INVALID_PARAM;
 801ad8a:	4b54      	ldr	r3, [pc, #336]	; (801aedc <pifStorageVar_SetMedia+0x1a0>)
 801ad8c:	2201      	movs	r2, #1
 801ad8e:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801ad90:	2300      	movs	r3, #0
 801ad92:	e09e      	b.n	801aed2 <pifStorageVar_SetMedia+0x196>
    }

	p_owner->__info_sectors = (sizeof(PifStorageVarInfo) + sizeof(PifStorageVarDataInfo) * data_info_count + sector_size - 1) / sector_size;
 801ad94:	7a7a      	ldrb	r2, [r7, #9]
 801ad96:	4613      	mov	r3, r2
 801ad98:	005b      	lsls	r3, r3, #1
 801ad9a:	4413      	add	r3, r2
 801ad9c:	009b      	lsls	r3, r3, #2
 801ad9e:	461a      	mov	r2, r3
 801ada0:	897b      	ldrh	r3, [r7, #10]
 801ada2:	4413      	add	r3, r2
 801ada4:	f103 020f 	add.w	r2, r3, #15
 801ada8:	897b      	ldrh	r3, [r7, #10]
 801adaa:	fbb2 f3f3 	udiv	r3, r2, r3
 801adae:	b29a      	uxth	r2, r3
 801adb0:	68fb      	ldr	r3, [r7, #12]
 801adb2:	879a      	strh	r2, [r3, #60]	; 0x3c
	p_owner->__info_bytes = p_owner->__info_sectors * sector_size;
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801adb8:	461a      	mov	r2, r3
 801adba:	897b      	ldrh	r3, [r7, #10]
 801adbc:	fb02 f303 	mul.w	r3, r2, r3
 801adc0:	461a      	mov	r2, r3
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	639a      	str	r2, [r3, #56]	; 0x38

    p_owner->__p_info_buffer = calloc(1, p_owner->__info_bytes);
 801adc6:	68fb      	ldr	r3, [r7, #12]
 801adc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801adca:	4619      	mov	r1, r3
 801adcc:	2001      	movs	r0, #1
 801adce:	f007 fe13 	bl	80229f8 <calloc>
 801add2:	4603      	mov	r3, r0
 801add4:	461a      	mov	r2, r3
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	641a      	str	r2, [r3, #64]	; 0x40
    if (!p_owner->__p_info_buffer) {
 801adda:	68fb      	ldr	r3, [r7, #12]
 801addc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d104      	bne.n	801adec <pifStorageVar_SetMedia+0xb0>
		pif_error = E_OUT_OF_HEAP;
 801ade2:	4b3e      	ldr	r3, [pc, #248]	; (801aedc <pifStorageVar_SetMedia+0x1a0>)
 801ade4:	2203      	movs	r2, #3
 801ade6:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801ade8:	2300      	movs	r3, #0
 801adea:	e072      	b.n	801aed2 <pifStorageVar_SetMedia+0x196>
	}

    if (!_readData(p_owner, p_owner->__p_info_buffer, 0, p_owner->__info_bytes, sector_size)) {
 801adec:	68fb      	ldr	r3, [r7, #12]
 801adee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801adf0:	68fb      	ldr	r3, [r7, #12]
 801adf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801adf4:	897b      	ldrh	r3, [r7, #10]
 801adf6:	9300      	str	r3, [sp, #0]
 801adf8:	4613      	mov	r3, r2
 801adfa:	2200      	movs	r2, #0
 801adfc:	68f8      	ldr	r0, [r7, #12]
 801adfe:	f7ff fec3 	bl	801ab88 <_readData>
 801ae02:	4603      	mov	r3, r0
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d108      	bne.n	801ae1a <pifStorageVar_SetMedia+0xde>
    	pif_error = E_ACCESS_FAILED;
 801ae08:	4b34      	ldr	r3, [pc, #208]	; (801aedc <pifStorageVar_SetMedia+0x1a0>)
 801ae0a:	220d      	movs	r2, #13
 801ae0c:	701a      	strb	r2, [r3, #0]
    	goto fail;
 801ae0e:	bf00      	nop
	p_info->sector_size = sector_size;
	p_info->max_sector_count = max_sector_count;
	return TRUE;

fail:
	if (p_owner->__p_info_buffer) {
 801ae10:	68fb      	ldr	r3, [r7, #12]
 801ae12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d05b      	beq.n	801aed0 <pifStorageVar_SetMedia+0x194>
 801ae18:	e052      	b.n	801aec0 <pifStorageVar_SetMedia+0x184>
    p_owner->_p_info = (PifStorageVarInfo*)p_owner->__p_info_buffer;
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ae1e:	68fb      	ldr	r3, [r7, #12]
 801ae20:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__p_data_info = (PifStorageVarDataInfo*)(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo));
 801ae22:	68fb      	ldr	r3, [r7, #12]
 801ae24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ae26:	f103 0210 	add.w	r2, r3, #16
 801ae2a:	68fb      	ldr	r3, [r7, #12]
 801ae2c:	645a      	str	r2, [r3, #68]	; 0x44
    p_info = p_owner->_p_info;
 801ae2e:	68fb      	ldr	r3, [r7, #12]
 801ae30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae32:	613b      	str	r3, [r7, #16]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801ae34:	693b      	ldr	r3, [r7, #16]
 801ae36:	781b      	ldrb	r3, [r3, #0]
 801ae38:	2b70      	cmp	r3, #112	; 0x70
 801ae3a:	d121      	bne.n	801ae80 <pifStorageVar_SetMedia+0x144>
 801ae3c:	693b      	ldr	r3, [r7, #16]
 801ae3e:	785b      	ldrb	r3, [r3, #1]
 801ae40:	2b69      	cmp	r3, #105	; 0x69
 801ae42:	d11d      	bne.n	801ae80 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801ae44:	693b      	ldr	r3, [r7, #16]
 801ae46:	789b      	ldrb	r3, [r3, #2]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801ae48:	2b66      	cmp	r3, #102	; 0x66
 801ae4a:	d119      	bne.n	801ae80 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801ae4c:	693b      	ldr	r3, [r7, #16]
 801ae4e:	78db      	ldrb	r3, [r3, #3]
 801ae50:	2b73      	cmp	r3, #115	; 0x73
 801ae52:	d115      	bne.n	801ae80 <pifStorageVar_SetMedia+0x144>
    if (p_info->data_info_count != data_info_count) {
 801ae54:	693b      	ldr	r3, [r7, #16]
 801ae56:	795b      	ldrb	r3, [r3, #5]
 801ae58:	7a7a      	ldrb	r2, [r7, #9]
 801ae5a:	429a      	cmp	r2, r3
 801ae5c:	d112      	bne.n	801ae84 <pifStorageVar_SetMedia+0x148>
    if (p_info->crc_16 != pifCrc16(p_owner->__p_info_buffer, sizeof(PifStorageVarInfo) - 6)) {
 801ae5e:	693b      	ldr	r3, [r7, #16]
 801ae60:	89dc      	ldrh	r4, [r3, #14]
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ae66:	210a      	movs	r1, #10
 801ae68:	4618      	mov	r0, r3
 801ae6a:	f7f6 fdb8 	bl	80119de <pifCrc16>
 801ae6e:	4603      	mov	r3, r0
 801ae70:	429c      	cmp	r4, r3
 801ae72:	d109      	bne.n	801ae88 <pifStorageVar_SetMedia+0x14c>
	p_owner->__is_format = TRUE;
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	2201      	movs	r2, #1
 801ae78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801ae7c:	2301      	movs	r3, #1
 801ae7e:	e028      	b.n	801aed2 <pifStorageVar_SetMedia+0x196>
        goto set;
 801ae80:	bf00      	nop
 801ae82:	e002      	b.n	801ae8a <pifStorageVar_SetMedia+0x14e>
        goto set;
 801ae84:	bf00      	nop
 801ae86:	e000      	b.n	801ae8a <pifStorageVar_SetMedia+0x14e>
        goto set;
 801ae88:	bf00      	nop
	p_info->magin_code[0] = 'p';
 801ae8a:	693b      	ldr	r3, [r7, #16]
 801ae8c:	2270      	movs	r2, #112	; 0x70
 801ae8e:	701a      	strb	r2, [r3, #0]
	p_info->magin_code[1] = 'i';
 801ae90:	693b      	ldr	r3, [r7, #16]
 801ae92:	2269      	movs	r2, #105	; 0x69
 801ae94:	705a      	strb	r2, [r3, #1]
	p_info->magin_code[2] = 'f';
 801ae96:	693b      	ldr	r3, [r7, #16]
 801ae98:	2266      	movs	r2, #102	; 0x66
 801ae9a:	709a      	strb	r2, [r3, #2]
	p_info->magin_code[3] = 's';
 801ae9c:	693b      	ldr	r3, [r7, #16]
 801ae9e:	2273      	movs	r2, #115	; 0x73
 801aea0:	70da      	strb	r2, [r3, #3]
	p_info->verion = 1;
 801aea2:	693b      	ldr	r3, [r7, #16]
 801aea4:	2201      	movs	r2, #1
 801aea6:	711a      	strb	r2, [r3, #4]
	p_info->data_info_count = data_info_count;
 801aea8:	693b      	ldr	r3, [r7, #16]
 801aeaa:	7a7a      	ldrb	r2, [r7, #9]
 801aeac:	715a      	strb	r2, [r3, #5]
	p_info->sector_size = sector_size;
 801aeae:	693b      	ldr	r3, [r7, #16]
 801aeb0:	897a      	ldrh	r2, [r7, #10]
 801aeb2:	80da      	strh	r2, [r3, #6]
	p_info->max_sector_count = max_sector_count;
 801aeb4:	697b      	ldr	r3, [r7, #20]
 801aeb6:	b29a      	uxth	r2, r3
 801aeb8:	693b      	ldr	r3, [r7, #16]
 801aeba:	811a      	strh	r2, [r3, #8]
	return TRUE;
 801aebc:	2301      	movs	r3, #1
 801aebe:	e008      	b.n	801aed2 <pifStorageVar_SetMedia+0x196>
		free(p_owner->__p_info_buffer);
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aec4:	4618      	mov	r0, r3
 801aec6:	f007 fdd1 	bl	8022a6c <free>
		p_owner->__p_info_buffer = NULL;
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	2200      	movs	r2, #0
 801aece:	641a      	str	r2, [r3, #64]	; 0x40
	}
    return FALSE;
 801aed0:	2300      	movs	r3, #0
}
 801aed2:	4618      	mov	r0, r3
 801aed4:	371c      	adds	r7, #28
 801aed6:	46bd      	mov	sp, r7
 801aed8:	bd90      	pop	{r4, r7, pc}
 801aeda:	bf00      	nop
 801aedc:	20001c0d 	.word	0x20001c0d

0801aee0 <pifStorageVar_AttachI2c>:
{
	return pifStorage_AttachActStorage(&p_owner->parent, act_read, act_write);
}

BOOL pifStorageVar_AttachI2c(PifStorageVar* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801aee0:	b580      	push	{r7, lr}
 801aee2:	b086      	sub	sp, #24
 801aee4:	af02      	add	r7, sp, #8
 801aee6:	60f8      	str	r0, [r7, #12]
 801aee8:	60b9      	str	r1, [r7, #8]
 801aeea:	4611      	mov	r1, r2
 801aeec:	461a      	mov	r2, r3
 801aeee:	460b      	mov	r3, r1
 801aef0:	71fb      	strb	r3, [r7, #7]
 801aef2:	4613      	mov	r3, r2
 801aef4:	71bb      	strb	r3, [r7, #6]
	return pifStorage_AttachI2c(&p_owner->parent, p_port, addr, i_addr_size, write_delay_ms);
 801aef6:	68f8      	ldr	r0, [r7, #12]
 801aef8:	79b9      	ldrb	r1, [r7, #6]
 801aefa:	79fa      	ldrb	r2, [r7, #7]
 801aefc:	7e3b      	ldrb	r3, [r7, #24]
 801aefe:	9300      	str	r3, [sp, #0]
 801af00:	460b      	mov	r3, r1
 801af02:	68b9      	ldr	r1, [r7, #8]
 801af04:	f7ff fd44 	bl	801a990 <pifStorage_AttachI2c>
 801af08:	4603      	mov	r3, r0
}
 801af0a:	4618      	mov	r0, r3
 801af0c:	3710      	adds	r7, #16
 801af0e:	46bd      	mov	sp, r7
 801af10:	bd80      	pop	{r7, pc}

0801af12 <pifStorageVar_IsFormat>:

#endif

BOOL pifStorageVar_IsFormat(PifStorage* p_parent)
{
 801af12:	b480      	push	{r7}
 801af14:	b083      	sub	sp, #12
 801af16:	af00      	add	r7, sp, #0
 801af18:	6078      	str	r0, [r7, #4]
	return ((PifStorageVar*)p_parent)->__is_format;
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801af20:	4618      	mov	r0, r3
 801af22:	370c      	adds	r7, #12
 801af24:	46bd      	mov	sp, r7
 801af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af2a:	4770      	bx	lr

0801af2c <pifStorageVar_Format>:

BOOL pifStorageVar_Format(PifStorage* p_parent)
{
 801af2c:	b590      	push	{r4, r7, lr}
 801af2e:	b08d      	sub	sp, #52	; 0x34
 801af30:	af00      	add	r7, sp, #0
 801af32:	6078      	str	r0, [r7, #4]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	627b      	str	r3, [r7, #36]	; 0x24
    PifStorageVarInfo* p_info = p_owner->_p_info;
 801af38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af3c:	623b      	str	r3, [r7, #32]
    PifStorageVarDataInfo* p_data_info;
    uint8_t ptr, remain, k, len, data[16];

    if (!p_owner) {
 801af3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af40:	2b00      	cmp	r3, #0
 801af42:	d104      	bne.n	801af4e <pifStorageVar_Format+0x22>
    	pif_error = E_INVALID_PARAM;
 801af44:	4b60      	ldr	r3, [pc, #384]	; (801b0c8 <pifStorageVar_Format+0x19c>)
 801af46:	2201      	movs	r2, #1
 801af48:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801af4a:	2300      	movs	r3, #0
 801af4c:	e0b8      	b.n	801b0c0 <pifStorageVar_Format+0x194>
    }

	p_info->first_node = DATA_NODE_NULL;
 801af4e:	6a3b      	ldr	r3, [r7, #32]
 801af50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af54:	815a      	strh	r2, [r3, #10]
	p_info->free_node = 0;
 801af56:	6a3b      	ldr	r3, [r7, #32]
 801af58:	2200      	movs	r2, #0
 801af5a:	819a      	strh	r2, [r3, #12]
    p_info->crc_16 = pifCrc16((uint8_t*)p_info, sizeof(PifStorageVarInfo) - 6);
 801af5c:	210a      	movs	r1, #10
 801af5e:	6a38      	ldr	r0, [r7, #32]
 801af60:	f7f6 fd3d 	bl	80119de <pifCrc16>
 801af64:	4603      	mov	r3, r0
 801af66:	461a      	mov	r2, r3
 801af68:	6a3b      	ldr	r3, [r7, #32]
 801af6a:	81da      	strh	r2, [r3, #14]

    memset(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo), 0xFF, p_owner->__info_bytes - sizeof(PifStorageVarInfo));
 801af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af70:	f103 0010 	add.w	r0, r3, #16
 801af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af78:	3b10      	subs	r3, #16
 801af7a:	461a      	mov	r2, r3
 801af7c:	21ff      	movs	r1, #255	; 0xff
 801af7e:	f007 fd8b 	bl	8022a98 <memset>

    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801af82:	2300      	movs	r3, #0
 801af84:	62bb      	str	r3, [r7, #40]	; 0x28
 801af86:	e019      	b.n	801afbc <pifStorageVar_Format+0x90>
    	p_data_info = &p_owner->__p_data_info[i];
 801af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af8a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801af8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801af8e:	4613      	mov	r3, r2
 801af90:	005b      	lsls	r3, r3, #1
 801af92:	4413      	add	r3, r2
 801af94:	009b      	lsls	r3, r3, #2
 801af96:	440b      	add	r3, r1
 801af98:	61fb      	str	r3, [r7, #28]
    	p_data_info->next_node = i + 1;
 801af9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af9c:	b29b      	uxth	r3, r3
 801af9e:	3301      	adds	r3, #1
 801afa0:	b29a      	uxth	r2, r3
 801afa2:	69fb      	ldr	r3, [r7, #28]
 801afa4:	80da      	strh	r2, [r3, #6]
    	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801afa6:	2106      	movs	r1, #6
 801afa8:	69f8      	ldr	r0, [r7, #28]
 801afaa:	f7f6 fd18 	bl	80119de <pifCrc16>
 801afae:	4603      	mov	r3, r0
 801afb0:	461a      	mov	r2, r3
 801afb2:	69fb      	ldr	r3, [r7, #28]
 801afb4:	815a      	strh	r2, [r3, #10]
    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afb8:	3301      	adds	r3, #1
 801afba:	62bb      	str	r3, [r7, #40]	; 0x28
 801afbc:	6a3b      	ldr	r3, [r7, #32]
 801afbe:	795b      	ldrb	r3, [r3, #5]
 801afc0:	3b01      	subs	r3, #1
 801afc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801afc4:	429a      	cmp	r2, r3
 801afc6:	dbdf      	blt.n	801af88 <pifStorageVar_Format+0x5c>
	}
	p_data_info = &p_owner->__p_data_info[p_info->data_info_count - 1];
 801afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801afcc:	6a3b      	ldr	r3, [r7, #32]
 801afce:	795b      	ldrb	r3, [r3, #5]
 801afd0:	4619      	mov	r1, r3
 801afd2:	460b      	mov	r3, r1
 801afd4:	005b      	lsls	r3, r3, #1
 801afd6:	440b      	add	r3, r1
 801afd8:	009b      	lsls	r3, r3, #2
 801afda:	3b0c      	subs	r3, #12
 801afdc:	4413      	add	r3, r2
 801afde:	61fb      	str	r3, [r7, #28]
	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801afe0:	2106      	movs	r1, #6
 801afe2:	69f8      	ldr	r0, [r7, #28]
 801afe4:	f7f6 fcfb 	bl	80119de <pifCrc16>
 801afe8:	4603      	mov	r3, r0
 801afea:	461a      	mov	r2, r3
 801afec:	69fb      	ldr	r3, [r7, #28]
 801afee:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aff8:	2100      	movs	r1, #0
 801affa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801affc:	f7ff fdf4 	bl	801abe8 <_writeData>
 801b000:	4603      	mov	r3, r0
 801b002:	2b00      	cmp	r3, #0
 801b004:	d104      	bne.n	801b010 <pifStorageVar_Format+0xe4>
    	pif_error = E_ACCESS_FAILED;
 801b006:	4b30      	ldr	r3, [pc, #192]	; (801b0c8 <pifStorageVar_Format+0x19c>)
 801b008:	220d      	movs	r2, #13
 801b00a:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801b00c:	2300      	movs	r3, #0
 801b00e:	e057      	b.n	801b0c0 <pifStorageVar_Format+0x194>
    }

    ptr = 0;
 801b010:	2300      	movs	r3, #0
 801b012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    remain = p_owner->__info_bytes;
 801b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b01a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801b01e:	e046      	b.n	801b0ae <pifStorageVar_Format+0x182>
    	len = remain > 16 ? 16 : remain;
 801b020:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b024:	2b10      	cmp	r3, #16
 801b026:	bf28      	it	cs
 801b028:	2310      	movcs	r3, #16
 801b02a:	76fb      	strb	r3, [r7, #27]
        if (!(*p_owner->parent.__act_read)(p_parent, data, ptr, len)) {
 801b02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b02e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801b030:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b034:	7efb      	ldrb	r3, [r7, #27]
 801b036:	f107 0108 	add.w	r1, r7, #8
 801b03a:	6878      	ldr	r0, [r7, #4]
 801b03c:	47a0      	blx	r4
 801b03e:	4603      	mov	r3, r0
 801b040:	2b00      	cmp	r3, #0
 801b042:	d104      	bne.n	801b04e <pifStorageVar_Format+0x122>
        	pif_error = E_ACCESS_FAILED;
 801b044:	4b20      	ldr	r3, [pc, #128]	; (801b0c8 <pifStorageVar_Format+0x19c>)
 801b046:	220d      	movs	r2, #13
 801b048:	701a      	strb	r2, [r3, #0]
            return FALSE;
 801b04a:	2300      	movs	r3, #0
 801b04c:	e038      	b.n	801b0c0 <pifStorageVar_Format+0x194>
        }
        for (k = 0; k < len; k++) {
 801b04e:	2300      	movs	r3, #0
 801b050:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801b054:	e01a      	b.n	801b08c <pifStorageVar_Format+0x160>
        	if (p_owner->__p_info_buffer[ptr + k] != data[k]) {
 801b056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b05a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 801b05e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801b062:	440a      	add	r2, r1
 801b064:	4413      	add	r3, r2
 801b066:	781a      	ldrb	r2, [r3, #0]
 801b068:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801b06c:	3330      	adds	r3, #48	; 0x30
 801b06e:	443b      	add	r3, r7
 801b070:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801b074:	429a      	cmp	r2, r3
 801b076:	d004      	beq.n	801b082 <pifStorageVar_Format+0x156>
            	pif_error = E_IS_NOT_FORMATED;
 801b078:	4b13      	ldr	r3, [pc, #76]	; (801b0c8 <pifStorageVar_Format+0x19c>)
 801b07a:	220f      	movs	r2, #15
 801b07c:	701a      	strb	r2, [r3, #0]
        		return FALSE;
 801b07e:	2300      	movs	r3, #0
 801b080:	e01e      	b.n	801b0c0 <pifStorageVar_Format+0x194>
        for (k = 0; k < len; k++) {
 801b082:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801b086:	3301      	adds	r3, #1
 801b088:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801b08c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801b090:	7efb      	ldrb	r3, [r7, #27]
 801b092:	429a      	cmp	r2, r3
 801b094:	d3df      	bcc.n	801b056 <pifStorageVar_Format+0x12a>
        	}
        }
        ptr += len;
 801b096:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b09a:	7efb      	ldrb	r3, [r7, #27]
 801b09c:	4413      	add	r3, r2
 801b09e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        remain -= len;
 801b0a2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801b0a6:	7efb      	ldrb	r3, [r7, #27]
 801b0a8:	1ad3      	subs	r3, r2, r3
 801b0aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801b0ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d1b4      	bne.n	801b020 <pifStorageVar_Format+0xf4>
    }

    p_owner->__is_format = TRUE;
 801b0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0b8:	2201      	movs	r2, #1
 801b0ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801b0be:	2301      	movs	r3, #1
}
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	3734      	adds	r7, #52	; 0x34
 801b0c4:	46bd      	mov	sp, r7
 801b0c6:	bd90      	pop	{r4, r7, pc}
 801b0c8:	20001c0d 	.word	0x20001c0d

0801b0cc <pifStorageVar_Create>:

PifStorageDataInfoP pifStorageVar_Create(PifStorage* p_parent, uint16_t id, uint16_t size)
{
 801b0cc:	b580      	push	{r7, lr}
 801b0ce:	b08a      	sub	sp, #40	; 0x28
 801b0d0:	af00      	add	r7, sp, #0
 801b0d2:	6078      	str	r0, [r7, #4]
 801b0d4:	460b      	mov	r3, r1
 801b0d6:	807b      	strh	r3, [r7, #2]
 801b0d8:	4613      	mov	r3, r2
 801b0da:	803b      	strh	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	61fb      	str	r3, [r7, #28]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801b0e0:	69fb      	ldr	r3, [r7, #28]
 801b0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b0e4:	61bb      	str	r3, [r7, #24]
	PifStorageVarDataInfo* p_cur_data;
	PifStorageVarDataInfo* p_new_data;
	uint16_t cur_node, new_node, last, sector_size = p_info->sector_size;
 801b0e6:	69bb      	ldr	r3, [r7, #24]
 801b0e8:	88db      	ldrh	r3, [r3, #6]
 801b0ea:	82fb      	strh	r3, [r7, #22]
	uint16_t sectors = (size + sector_size - 1) / sector_size;
 801b0ec:	883a      	ldrh	r2, [r7, #0]
 801b0ee:	8afb      	ldrh	r3, [r7, #22]
 801b0f0:	4413      	add	r3, r2
 801b0f2:	1e5a      	subs	r2, r3, #1
 801b0f4:	8afb      	ldrh	r3, [r7, #22]
 801b0f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0fa:	82bb      	strh	r3, [r7, #20]

    if (!p_owner || id == 0xFF) {
 801b0fc:	69fb      	ldr	r3, [r7, #28]
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d002      	beq.n	801b108 <pifStorageVar_Create+0x3c>
 801b102:	887b      	ldrh	r3, [r7, #2]
 801b104:	2bff      	cmp	r3, #255	; 0xff
 801b106:	d104      	bne.n	801b112 <pifStorageVar_Create+0x46>
    	pif_error = E_INVALID_PARAM;
 801b108:	4b9a      	ldr	r3, [pc, #616]	; (801b374 <pifStorageVar_Create+0x2a8>)
 801b10a:	2201      	movs	r2, #1
 801b10c:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801b10e:	2300      	movs	r3, #0
 801b110:	e12b      	b.n	801b36a <pifStorageVar_Create+0x29e>
    }

	if (!p_owner->__is_format) {
 801b112:	69fb      	ldr	r3, [r7, #28]
 801b114:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d104      	bne.n	801b126 <pifStorageVar_Create+0x5a>
		pif_error = E_IS_NOT_FORMATED;
 801b11c:	4b95      	ldr	r3, [pc, #596]	; (801b374 <pifStorageVar_Create+0x2a8>)
 801b11e:	220f      	movs	r2, #15
 801b120:	701a      	strb	r2, [r3, #0]
		return NULL;
 801b122:	2300      	movs	r3, #0
 801b124:	e121      	b.n	801b36a <pifStorageVar_Create+0x29e>
	}

	if (p_info->first_node == DATA_NODE_NULL) {
 801b126:	69bb      	ldr	r3, [r7, #24]
 801b128:	895b      	ldrh	r3, [r3, #10]
 801b12a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b12e:	4293      	cmp	r3, r2
 801b130:	d127      	bne.n	801b182 <pifStorageVar_Create+0xb6>
		if (sectors > p_owner->_p_info->max_sector_count) {
 801b132:	69fb      	ldr	r3, [r7, #28]
 801b134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b136:	891b      	ldrh	r3, [r3, #8]
 801b138:	8aba      	ldrh	r2, [r7, #20]
 801b13a:	429a      	cmp	r2, r3
 801b13c:	d904      	bls.n	801b148 <pifStorageVar_Create+0x7c>
			pif_error = E_OVERFLOW_BUFFER;
 801b13e:	4b8d      	ldr	r3, [pc, #564]	; (801b374 <pifStorageVar_Create+0x2a8>)
 801b140:	2204      	movs	r2, #4
 801b142:	701a      	strb	r2, [r3, #0]
			return NULL;
 801b144:	2300      	movs	r3, #0
 801b146:	e110      	b.n	801b36a <pifStorageVar_Create+0x29e>
		}

		last = p_owner->__info_sectors;
 801b148:	69fb      	ldr	r3, [r7, #28]
 801b14a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b14c:	843b      	strh	r3, [r7, #32]

		new_node = _getNewDataNode(p_owner);
 801b14e:	69f8      	ldr	r0, [r7, #28]
 801b150:	f7ff fcf2 	bl	801ab38 <_getNewDataNode>
 801b154:	4603      	mov	r3, r0
 801b156:	81fb      	strh	r3, [r7, #14]

		p_new_data = &p_owner->__p_data_info[new_node];
 801b158:	69fb      	ldr	r3, [r7, #28]
 801b15a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b15c:	89fa      	ldrh	r2, [r7, #14]
 801b15e:	4613      	mov	r3, r2
 801b160:	005b      	lsls	r3, r3, #1
 801b162:	4413      	add	r3, r2
 801b164:	009b      	lsls	r3, r3, #2
 801b166:	440b      	add	r3, r1
 801b168:	627b      	str	r3, [r7, #36]	; 0x24
		p_new_data->next_node = p_info->first_node;
 801b16a:	69bb      	ldr	r3, [r7, #24]
 801b16c:	895a      	ldrh	r2, [r3, #10]
 801b16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b170:	80da      	strh	r2, [r3, #6]
		p_new_data->prev_node = DATA_NODE_NULL;
 801b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b178:	811a      	strh	r2, [r3, #8]

		p_info->first_node = new_node;
 801b17a:	69bb      	ldr	r3, [r7, #24]
 801b17c:	89fa      	ldrh	r2, [r7, #14]
 801b17e:	815a      	strh	r2, [r3, #10]
		goto save;
 801b180:	e0d1      	b.n	801b326 <pifStorageVar_Create+0x25a>
	}
	else {
		cur_node = p_info->first_node;
 801b182:	69bb      	ldr	r3, [r7, #24]
 801b184:	895b      	ldrh	r3, [r3, #10]
 801b186:	847b      	strh	r3, [r7, #34]	; 0x22
		p_cur_data = &p_owner->__p_data_info[cur_node];
 801b188:	69fb      	ldr	r3, [r7, #28]
 801b18a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b18c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b18e:	4613      	mov	r3, r2
 801b190:	005b      	lsls	r3, r3, #1
 801b192:	4413      	add	r3, r2
 801b194:	009b      	lsls	r3, r3, #2
 801b196:	440b      	add	r3, r1
 801b198:	613b      	str	r3, [r7, #16]
		last = p_owner->__info_sectors;
 801b19a:	69fb      	ldr	r3, [r7, #28]
 801b19c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b19e:	843b      	strh	r3, [r7, #32]
		if (p_cur_data->first_sector != last) {
 801b1a0:	693b      	ldr	r3, [r7, #16]
 801b1a2:	889b      	ldrh	r3, [r3, #4]
 801b1a4:	8c3a      	ldrh	r2, [r7, #32]
 801b1a6:	429a      	cmp	r2, r3
 801b1a8:	f000 80b2 	beq.w	801b310 <pifStorageVar_Create+0x244>
			if (p_cur_data->first_sector - last >= sectors) {
 801b1ac:	693b      	ldr	r3, [r7, #16]
 801b1ae:	889b      	ldrh	r3, [r3, #4]
 801b1b0:	461a      	mov	r2, r3
 801b1b2:	8c3b      	ldrh	r3, [r7, #32]
 801b1b4:	1ad2      	subs	r2, r2, r3
 801b1b6:	8abb      	ldrh	r3, [r7, #20]
 801b1b8:	429a      	cmp	r2, r3
 801b1ba:	f2c0 80a9 	blt.w	801b310 <pifStorageVar_Create+0x244>
				new_node = _getNewDataNode(p_owner);
 801b1be:	69f8      	ldr	r0, [r7, #28]
 801b1c0:	f7ff fcba 	bl	801ab38 <_getNewDataNode>
 801b1c4:	4603      	mov	r3, r0
 801b1c6:	81fb      	strh	r3, [r7, #14]
				if (new_node == DATA_NODE_NULL) return NULL;
 801b1c8:	89fb      	ldrh	r3, [r7, #14]
 801b1ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b1ce:	4293      	cmp	r3, r2
 801b1d0:	d101      	bne.n	801b1d6 <pifStorageVar_Create+0x10a>
 801b1d2:	2300      	movs	r3, #0
 801b1d4:	e0c9      	b.n	801b36a <pifStorageVar_Create+0x29e>

				p_new_data = &p_owner->__p_data_info[new_node];
 801b1d6:	69fb      	ldr	r3, [r7, #28]
 801b1d8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b1da:	89fa      	ldrh	r2, [r7, #14]
 801b1dc:	4613      	mov	r3, r2
 801b1de:	005b      	lsls	r3, r3, #1
 801b1e0:	4413      	add	r3, r2
 801b1e2:	009b      	lsls	r3, r3, #2
 801b1e4:	440b      	add	r3, r1
 801b1e6:	627b      	str	r3, [r7, #36]	; 0x24
				p_new_data->next_node = p_info->first_node;
 801b1e8:	69bb      	ldr	r3, [r7, #24]
 801b1ea:	895a      	ldrh	r2, [r3, #10]
 801b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1ee:	80da      	strh	r2, [r3, #6]
				p_new_data->prev_node = DATA_NODE_NULL;
 801b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b1f6:	811a      	strh	r2, [r3, #8]

				p_info->first_node = new_node;
 801b1f8:	69bb      	ldr	r3, [r7, #24]
 801b1fa:	89fa      	ldrh	r2, [r7, #14]
 801b1fc:	815a      	strh	r2, [r3, #10]
				p_cur_data->prev_node = new_node;
 801b1fe:	693b      	ldr	r3, [r7, #16]
 801b200:	89fa      	ldrh	r2, [r7, #14]
 801b202:	811a      	strh	r2, [r3, #8]
				goto save;
 801b204:	e08f      	b.n	801b326 <pifStorageVar_Create+0x25a>
			}
		}
		while (cur_node != DATA_NODE_NULL) {
			p_cur_data = &p_owner->__p_data_info[cur_node];
 801b206:	69fb      	ldr	r3, [r7, #28]
 801b208:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b20a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b20c:	4613      	mov	r3, r2
 801b20e:	005b      	lsls	r3, r3, #1
 801b210:	4413      	add	r3, r2
 801b212:	009b      	lsls	r3, r3, #2
 801b214:	440b      	add	r3, r1
 801b216:	613b      	str	r3, [r7, #16]
			last = p_cur_data->first_sector + (p_cur_data->size + sector_size - 1) / sector_size;
 801b218:	693b      	ldr	r3, [r7, #16]
 801b21a:	889a      	ldrh	r2, [r3, #4]
 801b21c:	693b      	ldr	r3, [r7, #16]
 801b21e:	885b      	ldrh	r3, [r3, #2]
 801b220:	4619      	mov	r1, r3
 801b222:	8afb      	ldrh	r3, [r7, #22]
 801b224:	440b      	add	r3, r1
 801b226:	1e59      	subs	r1, r3, #1
 801b228:	8afb      	ldrh	r3, [r7, #22]
 801b22a:	fb91 f3f3 	sdiv	r3, r1, r3
 801b22e:	b29b      	uxth	r3, r3
 801b230:	4413      	add	r3, r2
 801b232:	843b      	strh	r3, [r7, #32]
			if (p_cur_data->next_node == DATA_NODE_NULL) {
 801b234:	693b      	ldr	r3, [r7, #16]
 801b236:	88db      	ldrh	r3, [r3, #6]
 801b238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b23c:	4293      	cmp	r3, r2
 801b23e:	d127      	bne.n	801b290 <pifStorageVar_Create+0x1c4>
				if (p_info->max_sector_count - last >= sectors) {
 801b240:	69bb      	ldr	r3, [r7, #24]
 801b242:	891b      	ldrh	r3, [r3, #8]
 801b244:	461a      	mov	r2, r3
 801b246:	8c3b      	ldrh	r3, [r7, #32]
 801b248:	1ad2      	subs	r2, r2, r3
 801b24a:	8abb      	ldrh	r3, [r7, #20]
 801b24c:	429a      	cmp	r2, r3
 801b24e:	db5c      	blt.n	801b30a <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801b250:	69f8      	ldr	r0, [r7, #28]
 801b252:	f7ff fc71 	bl	801ab38 <_getNewDataNode>
 801b256:	4603      	mov	r3, r0
 801b258:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801b25a:	89fb      	ldrh	r3, [r7, #14]
 801b25c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b260:	4293      	cmp	r3, r2
 801b262:	d101      	bne.n	801b268 <pifStorageVar_Create+0x19c>
 801b264:	2300      	movs	r3, #0
 801b266:	e080      	b.n	801b36a <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801b268:	69fb      	ldr	r3, [r7, #28]
 801b26a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b26c:	89fa      	ldrh	r2, [r7, #14]
 801b26e:	4613      	mov	r3, r2
 801b270:	005b      	lsls	r3, r3, #1
 801b272:	4413      	add	r3, r2
 801b274:	009b      	lsls	r3, r3, #2
 801b276:	440b      	add	r3, r1
 801b278:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801b27a:	693b      	ldr	r3, [r7, #16]
 801b27c:	88da      	ldrh	r2, [r3, #6]
 801b27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b280:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801b282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b284:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b286:	811a      	strh	r2, [r3, #8]

					p_cur_data->next_node = new_node;
 801b288:	693b      	ldr	r3, [r7, #16]
 801b28a:	89fa      	ldrh	r2, [r7, #14]
 801b28c:	80da      	strh	r2, [r3, #6]
					goto save;
 801b28e:	e04a      	b.n	801b326 <pifStorageVar_Create+0x25a>
				}
			}
			else {
				if (p_owner->__p_data_info[p_cur_data->next_node].first_sector - last >= sectors) {
 801b290:	69fb      	ldr	r3, [r7, #28]
 801b292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b294:	693b      	ldr	r3, [r7, #16]
 801b296:	88db      	ldrh	r3, [r3, #6]
 801b298:	4619      	mov	r1, r3
 801b29a:	460b      	mov	r3, r1
 801b29c:	005b      	lsls	r3, r3, #1
 801b29e:	440b      	add	r3, r1
 801b2a0:	009b      	lsls	r3, r3, #2
 801b2a2:	4413      	add	r3, r2
 801b2a4:	889b      	ldrh	r3, [r3, #4]
 801b2a6:	461a      	mov	r2, r3
 801b2a8:	8c3b      	ldrh	r3, [r7, #32]
 801b2aa:	1ad2      	subs	r2, r2, r3
 801b2ac:	8abb      	ldrh	r3, [r7, #20]
 801b2ae:	429a      	cmp	r2, r3
 801b2b0:	db2b      	blt.n	801b30a <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801b2b2:	69f8      	ldr	r0, [r7, #28]
 801b2b4:	f7ff fc40 	bl	801ab38 <_getNewDataNode>
 801b2b8:	4603      	mov	r3, r0
 801b2ba:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801b2bc:	89fb      	ldrh	r3, [r7, #14]
 801b2be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b2c2:	4293      	cmp	r3, r2
 801b2c4:	d101      	bne.n	801b2ca <pifStorageVar_Create+0x1fe>
 801b2c6:	2300      	movs	r3, #0
 801b2c8:	e04f      	b.n	801b36a <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801b2ca:	69fb      	ldr	r3, [r7, #28]
 801b2cc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b2ce:	89fa      	ldrh	r2, [r7, #14]
 801b2d0:	4613      	mov	r3, r2
 801b2d2:	005b      	lsls	r3, r3, #1
 801b2d4:	4413      	add	r3, r2
 801b2d6:	009b      	lsls	r3, r3, #2
 801b2d8:	440b      	add	r3, r1
 801b2da:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801b2dc:	693b      	ldr	r3, [r7, #16]
 801b2de:	88da      	ldrh	r2, [r3, #6]
 801b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2e2:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801b2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b2e8:	811a      	strh	r2, [r3, #8]

					p_owner->__p_data_info[p_cur_data->next_node].prev_node = new_node;
 801b2ea:	69fb      	ldr	r3, [r7, #28]
 801b2ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b2ee:	693b      	ldr	r3, [r7, #16]
 801b2f0:	88db      	ldrh	r3, [r3, #6]
 801b2f2:	4619      	mov	r1, r3
 801b2f4:	460b      	mov	r3, r1
 801b2f6:	005b      	lsls	r3, r3, #1
 801b2f8:	440b      	add	r3, r1
 801b2fa:	009b      	lsls	r3, r3, #2
 801b2fc:	4413      	add	r3, r2
 801b2fe:	89fa      	ldrh	r2, [r7, #14]
 801b300:	811a      	strh	r2, [r3, #8]
					p_cur_data->next_node = new_node;
 801b302:	693b      	ldr	r3, [r7, #16]
 801b304:	89fa      	ldrh	r2, [r7, #14]
 801b306:	80da      	strh	r2, [r3, #6]
					goto save;
 801b308:	e00d      	b.n	801b326 <pifStorageVar_Create+0x25a>
				}
			}
			cur_node = p_cur_data->next_node;
 801b30a:	693b      	ldr	r3, [r7, #16]
 801b30c:	88db      	ldrh	r3, [r3, #6]
 801b30e:	847b      	strh	r3, [r7, #34]	; 0x22
		while (cur_node != DATA_NODE_NULL) {
 801b310:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b316:	4293      	cmp	r3, r2
 801b318:	f47f af75 	bne.w	801b206 <pifStorageVar_Create+0x13a>
		}
	}
	pif_error = E_OVERFLOW_BUFFER;
 801b31c:	4b15      	ldr	r3, [pc, #84]	; (801b374 <pifStorageVar_Create+0x2a8>)
 801b31e:	2204      	movs	r2, #4
 801b320:	701a      	strb	r2, [r3, #0]
	return NULL;
 801b322:	2300      	movs	r3, #0
 801b324:	e021      	b.n	801b36a <pifStorageVar_Create+0x29e>

save:
	p_new_data->id = id;
 801b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b328:	887a      	ldrh	r2, [r7, #2]
 801b32a:	801a      	strh	r2, [r3, #0]
	p_new_data->size = size;
 801b32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b32e:	883a      	ldrh	r2, [r7, #0]
 801b330:	805a      	strh	r2, [r3, #2]
	p_new_data->first_sector = last;
 801b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b334:	8c3a      	ldrh	r2, [r7, #32]
 801b336:	809a      	strh	r2, [r3, #4]
	p_new_data->crc_16 = pifCrc16((uint8_t*)p_new_data, sizeof(PifStorageVarDataInfo) - 6);
 801b338:	2106      	movs	r1, #6
 801b33a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b33c:	f7f6 fb4f 	bl	80119de <pifCrc16>
 801b340:	4603      	mov	r3, r0
 801b342:	461a      	mov	r2, r3
 801b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b346:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801b348:	69fb      	ldr	r3, [r7, #28]
 801b34a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b34c:	69fb      	ldr	r3, [r7, #28]
 801b34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b350:	2100      	movs	r1, #0
 801b352:	69f8      	ldr	r0, [r7, #28]
 801b354:	f7ff fc48 	bl	801abe8 <_writeData>
 801b358:	4603      	mov	r3, r0
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d104      	bne.n	801b368 <pifStorageVar_Create+0x29c>
    	pif_error = E_ACCESS_FAILED;
 801b35e:	4b05      	ldr	r3, [pc, #20]	; (801b374 <pifStorageVar_Create+0x2a8>)
 801b360:	220d      	movs	r2, #13
 801b362:	701a      	strb	r2, [r3, #0]
        return NULL;
 801b364:	2300      	movs	r3, #0
 801b366:	e000      	b.n	801b36a <pifStorageVar_Create+0x29e>
    }
	return (PifStorageDataInfoP)p_new_data;
 801b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b36a:	4618      	mov	r0, r3
 801b36c:	3728      	adds	r7, #40	; 0x28
 801b36e:	46bd      	mov	sp, r7
 801b370:	bd80      	pop	{r7, pc}
 801b372:	bf00      	nop
 801b374:	20001c0d 	.word	0x20001c0d

0801b378 <pifStorageVar_Delete>:

BOOL pifStorageVar_Delete(PifStorage* p_parent, uint16_t id)
{
 801b378:	b580      	push	{r7, lr}
 801b37a:	b086      	sub	sp, #24
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	6078      	str	r0, [r7, #4]
 801b380:	460b      	mov	r3, r1
 801b382:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801b388:	693b      	ldr	r3, [r7, #16]
 801b38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b38c:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801b38e:	693b      	ldr	r3, [r7, #16]
 801b390:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b394:	2b00      	cmp	r3, #0
 801b396:	d104      	bne.n	801b3a2 <pifStorageVar_Delete+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801b398:	4b3d      	ldr	r3, [pc, #244]	; (801b490 <pifStorageVar_Delete+0x118>)
 801b39a:	220f      	movs	r2, #15
 801b39c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801b39e:	2300      	movs	r3, #0
 801b3a0:	e072      	b.n	801b488 <pifStorageVar_Delete+0x110>
	}

	node = p_info->first_node;
 801b3a2:	68fb      	ldr	r3, [r7, #12]
 801b3a4:	895b      	ldrh	r3, [r3, #10]
 801b3a6:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801b3a8:	e065      	b.n	801b476 <pifStorageVar_Delete+0xfe>
		p_data_info = &p_owner->__p_data_info[node];
 801b3aa:	693b      	ldr	r3, [r7, #16]
 801b3ac:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b3ae:	8afa      	ldrh	r2, [r7, #22]
 801b3b0:	4613      	mov	r3, r2
 801b3b2:	005b      	lsls	r3, r3, #1
 801b3b4:	4413      	add	r3, r2
 801b3b6:	009b      	lsls	r3, r3, #2
 801b3b8:	440b      	add	r3, r1
 801b3ba:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801b3bc:	68bb      	ldr	r3, [r7, #8]
 801b3be:	881b      	ldrh	r3, [r3, #0]
 801b3c0:	887a      	ldrh	r2, [r7, #2]
 801b3c2:	429a      	cmp	r2, r3
 801b3c4:	d154      	bne.n	801b470 <pifStorageVar_Delete+0xf8>
			memset(p_data_info, 0xFF, sizeof(PifStorageVarDataInfo) - 6);
 801b3c6:	2206      	movs	r2, #6
 801b3c8:	21ff      	movs	r1, #255	; 0xff
 801b3ca:	68b8      	ldr	r0, [r7, #8]
 801b3cc:	f007 fb64 	bl	8022a98 <memset>
			if (p_data_info->prev_node != DATA_NODE_NULL) {
 801b3d0:	68bb      	ldr	r3, [r7, #8]
 801b3d2:	891b      	ldrh	r3, [r3, #8]
 801b3d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b3d8:	4293      	cmp	r3, r2
 801b3da:	d00d      	beq.n	801b3f8 <pifStorageVar_Delete+0x80>
				p_owner->__p_data_info[p_data_info->prev_node].next_node = p_data_info->next_node;
 801b3dc:	693b      	ldr	r3, [r7, #16]
 801b3de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b3e0:	68bb      	ldr	r3, [r7, #8]
 801b3e2:	891b      	ldrh	r3, [r3, #8]
 801b3e4:	4619      	mov	r1, r3
 801b3e6:	460b      	mov	r3, r1
 801b3e8:	005b      	lsls	r3, r3, #1
 801b3ea:	440b      	add	r3, r1
 801b3ec:	009b      	lsls	r3, r3, #2
 801b3ee:	4413      	add	r3, r2
 801b3f0:	68ba      	ldr	r2, [r7, #8]
 801b3f2:	88d2      	ldrh	r2, [r2, #6]
 801b3f4:	80da      	strh	r2, [r3, #6]
 801b3f6:	e003      	b.n	801b400 <pifStorageVar_Delete+0x88>
			}
			else {
				p_info->first_node = p_data_info->next_node;
 801b3f8:	68bb      	ldr	r3, [r7, #8]
 801b3fa:	88da      	ldrh	r2, [r3, #6]
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	815a      	strh	r2, [r3, #10]
			}
			if (p_data_info->next_node != DATA_NODE_NULL) {
 801b400:	68bb      	ldr	r3, [r7, #8]
 801b402:	88db      	ldrh	r3, [r3, #6]
 801b404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b408:	4293      	cmp	r3, r2
 801b40a:	d00c      	beq.n	801b426 <pifStorageVar_Delete+0xae>
				p_owner->__p_data_info[p_data_info->next_node].prev_node = p_data_info->prev_node;
 801b40c:	693b      	ldr	r3, [r7, #16]
 801b40e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b410:	68bb      	ldr	r3, [r7, #8]
 801b412:	88db      	ldrh	r3, [r3, #6]
 801b414:	4619      	mov	r1, r3
 801b416:	460b      	mov	r3, r1
 801b418:	005b      	lsls	r3, r3, #1
 801b41a:	440b      	add	r3, r1
 801b41c:	009b      	lsls	r3, r3, #2
 801b41e:	4413      	add	r3, r2
 801b420:	68ba      	ldr	r2, [r7, #8]
 801b422:	8912      	ldrh	r2, [r2, #8]
 801b424:	811a      	strh	r2, [r3, #8]
			}
			p_data_info->next_node = p_info->free_node;
 801b426:	68fb      	ldr	r3, [r7, #12]
 801b428:	899a      	ldrh	r2, [r3, #12]
 801b42a:	68bb      	ldr	r3, [r7, #8]
 801b42c:	80da      	strh	r2, [r3, #6]
			p_data_info->prev_node = DATA_NODE_NULL;
 801b42e:	68bb      	ldr	r3, [r7, #8]
 801b430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b434:	811a      	strh	r2, [r3, #8]
			p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801b436:	2106      	movs	r1, #6
 801b438:	68b8      	ldr	r0, [r7, #8]
 801b43a:	f7f6 fad0 	bl	80119de <pifCrc16>
 801b43e:	4603      	mov	r3, r0
 801b440:	461a      	mov	r2, r3
 801b442:	68bb      	ldr	r3, [r7, #8]
 801b444:	815a      	strh	r2, [r3, #10]
			p_info->free_node = node;
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	8afa      	ldrh	r2, [r7, #22]
 801b44a:	819a      	strh	r2, [r3, #12]

			if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801b44c:	693b      	ldr	r3, [r7, #16]
 801b44e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b450:	693b      	ldr	r3, [r7, #16]
 801b452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b454:	2100      	movs	r1, #0
 801b456:	6938      	ldr	r0, [r7, #16]
 801b458:	f7ff fbc6 	bl	801abe8 <_writeData>
 801b45c:	4603      	mov	r3, r0
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d104      	bne.n	801b46c <pifStorageVar_Delete+0xf4>
		    	pif_error = E_ACCESS_FAILED;
 801b462:	4b0b      	ldr	r3, [pc, #44]	; (801b490 <pifStorageVar_Delete+0x118>)
 801b464:	220d      	movs	r2, #13
 801b466:	701a      	strb	r2, [r3, #0]
				return FALSE;
 801b468:	2300      	movs	r3, #0
 801b46a:	e00d      	b.n	801b488 <pifStorageVar_Delete+0x110>
			}
			return TRUE;
 801b46c:	2301      	movs	r3, #1
 801b46e:	e00b      	b.n	801b488 <pifStorageVar_Delete+0x110>
		}
		node = p_data_info->next_node;
 801b470:	68bb      	ldr	r3, [r7, #8]
 801b472:	88db      	ldrh	r3, [r3, #6]
 801b474:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801b476:	8afb      	ldrh	r3, [r7, #22]
 801b478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b47c:	4293      	cmp	r3, r2
 801b47e:	d194      	bne.n	801b3aa <pifStorageVar_Delete+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801b480:	4b03      	ldr	r3, [pc, #12]	; (801b490 <pifStorageVar_Delete+0x118>)
 801b482:	220e      	movs	r2, #14
 801b484:	701a      	strb	r2, [r3, #0]
	return FALSE;
 801b486:	2300      	movs	r3, #0
}
 801b488:	4618      	mov	r0, r3
 801b48a:	3718      	adds	r7, #24
 801b48c:	46bd      	mov	sp, r7
 801b48e:	bd80      	pop	{r7, pc}
 801b490:	20001c0d 	.word	0x20001c0d

0801b494 <pifStorageVar_Open>:

PifStorageDataInfoP pifStorageVar_Open(PifStorage* p_parent, uint16_t id)
{
 801b494:	b590      	push	{r4, r7, lr}
 801b496:	b087      	sub	sp, #28
 801b498:	af00      	add	r7, sp, #0
 801b49a:	6078      	str	r0, [r7, #4]
 801b49c:	460b      	mov	r3, r1
 801b49e:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801b4a4:	693b      	ldr	r3, [r7, #16]
 801b4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4a8:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801b4aa:	693b      	ldr	r3, [r7, #16]
 801b4ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d104      	bne.n	801b4be <pifStorageVar_Open+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801b4b4:	4b1b      	ldr	r3, [pc, #108]	; (801b524 <pifStorageVar_Open+0x90>)
 801b4b6:	220f      	movs	r2, #15
 801b4b8:	701a      	strb	r2, [r3, #0]
		return NULL;
 801b4ba:	2300      	movs	r3, #0
 801b4bc:	e02d      	b.n	801b51a <pifStorageVar_Open+0x86>
	}

	node = p_info->first_node;
 801b4be:	68fb      	ldr	r3, [r7, #12]
 801b4c0:	895b      	ldrh	r3, [r3, #10]
 801b4c2:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801b4c4:	e020      	b.n	801b508 <pifStorageVar_Open+0x74>
		p_data_info = &p_owner->__p_data_info[node];
 801b4c6:	693b      	ldr	r3, [r7, #16]
 801b4c8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b4ca:	8afa      	ldrh	r2, [r7, #22]
 801b4cc:	4613      	mov	r3, r2
 801b4ce:	005b      	lsls	r3, r3, #1
 801b4d0:	4413      	add	r3, r2
 801b4d2:	009b      	lsls	r3, r3, #2
 801b4d4:	440b      	add	r3, r1
 801b4d6:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801b4d8:	68bb      	ldr	r3, [r7, #8]
 801b4da:	881b      	ldrh	r3, [r3, #0]
 801b4dc:	887a      	ldrh	r2, [r7, #2]
 801b4de:	429a      	cmp	r2, r3
 801b4e0:	d10f      	bne.n	801b502 <pifStorageVar_Open+0x6e>
			if (p_data_info->crc_16 != pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6)) {
 801b4e2:	68bb      	ldr	r3, [r7, #8]
 801b4e4:	895c      	ldrh	r4, [r3, #10]
 801b4e6:	2106      	movs	r1, #6
 801b4e8:	68b8      	ldr	r0, [r7, #8]
 801b4ea:	f7f6 fa78 	bl	80119de <pifCrc16>
 801b4ee:	4603      	mov	r3, r0
 801b4f0:	429c      	cmp	r4, r3
 801b4f2:	d004      	beq.n	801b4fe <pifStorageVar_Open+0x6a>
		        pif_error = E_MISMATCH_CRC;
 801b4f4:	4b0b      	ldr	r3, [pc, #44]	; (801b524 <pifStorageVar_Open+0x90>)
 801b4f6:	220c      	movs	r2, #12
 801b4f8:	701a      	strb	r2, [r3, #0]
				return NULL;
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	e00d      	b.n	801b51a <pifStorageVar_Open+0x86>
			}
			return (PifStorageDataInfoP)p_data_info;
 801b4fe:	68bb      	ldr	r3, [r7, #8]
 801b500:	e00b      	b.n	801b51a <pifStorageVar_Open+0x86>
		}
		node = p_data_info->next_node;
 801b502:	68bb      	ldr	r3, [r7, #8]
 801b504:	88db      	ldrh	r3, [r3, #6]
 801b506:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801b508:	8afb      	ldrh	r3, [r7, #22]
 801b50a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b50e:	4293      	cmp	r3, r2
 801b510:	d1d9      	bne.n	801b4c6 <pifStorageVar_Open+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801b512:	4b04      	ldr	r3, [pc, #16]	; (801b524 <pifStorageVar_Open+0x90>)
 801b514:	220e      	movs	r2, #14
 801b516:	701a      	strb	r2, [r3, #0]
	return NULL;
 801b518:	2300      	movs	r3, #0
}
 801b51a:	4618      	mov	r0, r3
 801b51c:	371c      	adds	r7, #28
 801b51e:	46bd      	mov	sp, r7
 801b520:	bd90      	pop	{r4, r7, pc}
 801b522:	bf00      	nop
 801b524:	20001c0d 	.word	0x20001c0d

0801b528 <pifStorageVar_Read>:

BOOL pifStorageVar_Read(PifStorage* p_parent, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801b528:	b580      	push	{r7, lr}
 801b52a:	b088      	sub	sp, #32
 801b52c:	af02      	add	r7, sp, #8
 801b52e:	60f8      	str	r0, [r7, #12]
 801b530:	60b9      	str	r1, [r7, #8]
 801b532:	607a      	str	r2, [r7, #4]
 801b534:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801b53a:	697b      	ldr	r3, [r7, #20]
 801b53c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b540:	2b00      	cmp	r3, #0
 801b542:	d104      	bne.n	801b54e <pifStorageVar_Read+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801b544:	4b0d      	ldr	r3, [pc, #52]	; (801b57c <pifStorageVar_Read+0x54>)
 801b546:	220f      	movs	r2, #15
 801b548:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801b54a:	2300      	movs	r3, #0
 801b54c:	e012      	b.n	801b574 <pifStorageVar_Read+0x4c>
	}

	return _readData(p_owner, p_dst, ((PifStorageVarDataInfo*)p_src)->first_sector * p_owner->_p_info->sector_size, size, p_owner->_p_info->sector_size);
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	889b      	ldrh	r3, [r3, #4]
 801b552:	461a      	mov	r2, r3
 801b554:	697b      	ldr	r3, [r7, #20]
 801b556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b558:	88db      	ldrh	r3, [r3, #6]
 801b55a:	fb02 f303 	mul.w	r3, r2, r3
 801b55e:	461a      	mov	r2, r3
 801b560:	697b      	ldr	r3, [r7, #20]
 801b562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b564:	88db      	ldrh	r3, [r3, #6]
 801b566:	9300      	str	r3, [sp, #0]
 801b568:	683b      	ldr	r3, [r7, #0]
 801b56a:	68b9      	ldr	r1, [r7, #8]
 801b56c:	6978      	ldr	r0, [r7, #20]
 801b56e:	f7ff fb0b 	bl	801ab88 <_readData>
 801b572:	4603      	mov	r3, r0
}
 801b574:	4618      	mov	r0, r3
 801b576:	3718      	adds	r7, #24
 801b578:	46bd      	mov	sp, r7
 801b57a:	bd80      	pop	{r7, pc}
 801b57c:	20001c0d 	.word	0x20001c0d

0801b580 <pifStorageVar_Write>:

BOOL pifStorageVar_Write(PifStorage* p_parent, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801b580:	b580      	push	{r7, lr}
 801b582:	b086      	sub	sp, #24
 801b584:	af00      	add	r7, sp, #0
 801b586:	60f8      	str	r0, [r7, #12]
 801b588:	60b9      	str	r1, [r7, #8]
 801b58a:	607a      	str	r2, [r7, #4]
 801b58c:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b58e:	68fb      	ldr	r3, [r7, #12]
 801b590:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801b592:	697b      	ldr	r3, [r7, #20]
 801b594:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d104      	bne.n	801b5a6 <pifStorageVar_Write+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801b59c:	4b0b      	ldr	r3, [pc, #44]	; (801b5cc <pifStorageVar_Write+0x4c>)
 801b59e:	220f      	movs	r2, #15
 801b5a0:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801b5a2:	2300      	movs	r3, #0
 801b5a4:	e00e      	b.n	801b5c4 <pifStorageVar_Write+0x44>
	}

	return _writeData(p_owner, ((PifStorageVarDataInfo*)p_dst)->first_sector * p_owner->_p_info->sector_size, p_src, size);
 801b5a6:	68bb      	ldr	r3, [r7, #8]
 801b5a8:	889b      	ldrh	r3, [r3, #4]
 801b5aa:	461a      	mov	r2, r3
 801b5ac:	697b      	ldr	r3, [r7, #20]
 801b5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b5b0:	88db      	ldrh	r3, [r3, #6]
 801b5b2:	fb02 f303 	mul.w	r3, r2, r3
 801b5b6:	4619      	mov	r1, r3
 801b5b8:	683b      	ldr	r3, [r7, #0]
 801b5ba:	687a      	ldr	r2, [r7, #4]
 801b5bc:	6978      	ldr	r0, [r7, #20]
 801b5be:	f7ff fb13 	bl	801abe8 <_writeData>
 801b5c2:	4603      	mov	r3, r0
}
 801b5c4:	4618      	mov	r0, r3
 801b5c6:	3718      	adds	r7, #24
 801b5c8:	46bd      	mov	sp, r7
 801b5ca:	bd80      	pop	{r7, pc}
 801b5cc:	20001c0d 	.word	0x20001c0d

0801b5d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801b5d0:	b580      	push	{r7, lr}
 801b5d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801b5d4:	4b0e      	ldr	r3, [pc, #56]	; (801b610 <HAL_Init+0x40>)
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	4a0d      	ldr	r2, [pc, #52]	; (801b610 <HAL_Init+0x40>)
 801b5da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801b5de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801b5e0:	4b0b      	ldr	r3, [pc, #44]	; (801b610 <HAL_Init+0x40>)
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	4a0a      	ldr	r2, [pc, #40]	; (801b610 <HAL_Init+0x40>)
 801b5e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801b5ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801b5ec:	4b08      	ldr	r3, [pc, #32]	; (801b610 <HAL_Init+0x40>)
 801b5ee:	681b      	ldr	r3, [r3, #0]
 801b5f0:	4a07      	ldr	r2, [pc, #28]	; (801b610 <HAL_Init+0x40>)
 801b5f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b5f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801b5f8:	2003      	movs	r0, #3
 801b5fa:	f000 fd51 	bl	801c0a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801b5fe:	2000      	movs	r0, #0
 801b600:	f000 f808 	bl	801b614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801b604:	f7e7 fdee 	bl	80031e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801b608:	2300      	movs	r3, #0
}
 801b60a:	4618      	mov	r0, r3
 801b60c:	bd80      	pop	{r7, pc}
 801b60e:	bf00      	nop
 801b610:	40023c00 	.word	0x40023c00

0801b614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801b614:	b580      	push	{r7, lr}
 801b616:	b082      	sub	sp, #8
 801b618:	af00      	add	r7, sp, #0
 801b61a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801b61c:	4b12      	ldr	r3, [pc, #72]	; (801b668 <HAL_InitTick+0x54>)
 801b61e:	681a      	ldr	r2, [r3, #0]
 801b620:	4b12      	ldr	r3, [pc, #72]	; (801b66c <HAL_InitTick+0x58>)
 801b622:	781b      	ldrb	r3, [r3, #0]
 801b624:	4619      	mov	r1, r3
 801b626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801b62a:	fbb3 f3f1 	udiv	r3, r3, r1
 801b62e:	fbb2 f3f3 	udiv	r3, r2, r3
 801b632:	4618      	mov	r0, r3
 801b634:	f000 fd77 	bl	801c126 <HAL_SYSTICK_Config>
 801b638:	4603      	mov	r3, r0
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d001      	beq.n	801b642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801b63e:	2301      	movs	r3, #1
 801b640:	e00e      	b.n	801b660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	2b0f      	cmp	r3, #15
 801b646:	d80a      	bhi.n	801b65e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801b648:	2200      	movs	r2, #0
 801b64a:	6879      	ldr	r1, [r7, #4]
 801b64c:	f04f 30ff 	mov.w	r0, #4294967295
 801b650:	f000 fd31 	bl	801c0b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801b654:	4a06      	ldr	r2, [pc, #24]	; (801b670 <HAL_InitTick+0x5c>)
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801b65a:	2300      	movs	r3, #0
 801b65c:	e000      	b.n	801b660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801b65e:	2301      	movs	r3, #1
}
 801b660:	4618      	mov	r0, r3
 801b662:	3708      	adds	r7, #8
 801b664:	46bd      	mov	sp, r7
 801b666:	bd80      	pop	{r7, pc}
 801b668:	20000020 	.word	0x20000020
 801b66c:	20000154 	.word	0x20000154
 801b670:	20000150 	.word	0x20000150

0801b674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801b674:	b480      	push	{r7}
 801b676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801b678:	4b06      	ldr	r3, [pc, #24]	; (801b694 <HAL_IncTick+0x20>)
 801b67a:	781b      	ldrb	r3, [r3, #0]
 801b67c:	461a      	mov	r2, r3
 801b67e:	4b06      	ldr	r3, [pc, #24]	; (801b698 <HAL_IncTick+0x24>)
 801b680:	681b      	ldr	r3, [r3, #0]
 801b682:	4413      	add	r3, r2
 801b684:	4a04      	ldr	r2, [pc, #16]	; (801b698 <HAL_IncTick+0x24>)
 801b686:	6013      	str	r3, [r2, #0]
}
 801b688:	bf00      	nop
 801b68a:	46bd      	mov	sp, r7
 801b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b690:	4770      	bx	lr
 801b692:	bf00      	nop
 801b694:	20000154 	.word	0x20000154
 801b698:	20001dc8 	.word	0x20001dc8

0801b69c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801b69c:	b480      	push	{r7}
 801b69e:	af00      	add	r7, sp, #0
  return uwTick;
 801b6a0:	4b03      	ldr	r3, [pc, #12]	; (801b6b0 <HAL_GetTick+0x14>)
 801b6a2:	681b      	ldr	r3, [r3, #0]
}
 801b6a4:	4618      	mov	r0, r3
 801b6a6:	46bd      	mov	sp, r7
 801b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6ac:	4770      	bx	lr
 801b6ae:	bf00      	nop
 801b6b0:	20001dc8 	.word	0x20001dc8

0801b6b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801b6b4:	b580      	push	{r7, lr}
 801b6b6:	b084      	sub	sp, #16
 801b6b8:	af00      	add	r7, sp, #0
 801b6ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801b6bc:	2300      	movs	r3, #0
 801b6be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d101      	bne.n	801b6ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801b6c6:	2301      	movs	r3, #1
 801b6c8:	e033      	b.n	801b732 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d109      	bne.n	801b6e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801b6d2:	6878      	ldr	r0, [r7, #4]
 801b6d4:	f7e7 fdae 	bl	8003234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	2200      	movs	r2, #0
 801b6dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	2200      	movs	r2, #0
 801b6e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6ea:	f003 0310 	and.w	r3, r3, #16
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d118      	bne.n	801b724 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801b6fa:	f023 0302 	bic.w	r3, r3, #2
 801b6fe:	f043 0202 	orr.w	r2, r3, #2
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801b706:	6878      	ldr	r0, [r7, #4]
 801b708:	f000 fa58 	bl	801bbbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	2200      	movs	r2, #0
 801b710:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b716:	f023 0303 	bic.w	r3, r3, #3
 801b71a:	f043 0201 	orr.w	r2, r3, #1
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	641a      	str	r2, [r3, #64]	; 0x40
 801b722:	e001      	b.n	801b728 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801b724:	2301      	movs	r3, #1
 801b726:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	2200      	movs	r2, #0
 801b72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801b730:	7bfb      	ldrb	r3, [r7, #15]
}
 801b732:	4618      	mov	r0, r3
 801b734:	3710      	adds	r7, #16
 801b736:	46bd      	mov	sp, r7
 801b738:	bd80      	pop	{r7, pc}
	...

0801b73c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801b73c:	b580      	push	{r7, lr}
 801b73e:	b086      	sub	sp, #24
 801b740:	af00      	add	r7, sp, #0
 801b742:	60f8      	str	r0, [r7, #12]
 801b744:	60b9      	str	r1, [r7, #8]
 801b746:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801b748:	2300      	movs	r3, #0
 801b74a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801b74c:	68fb      	ldr	r3, [r7, #12]
 801b74e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b752:	2b01      	cmp	r3, #1
 801b754:	d101      	bne.n	801b75a <HAL_ADC_Start_DMA+0x1e>
 801b756:	2302      	movs	r3, #2
 801b758:	e0ce      	b.n	801b8f8 <HAL_ADC_Start_DMA+0x1bc>
 801b75a:	68fb      	ldr	r3, [r7, #12]
 801b75c:	2201      	movs	r2, #1
 801b75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	689b      	ldr	r3, [r3, #8]
 801b768:	f003 0301 	and.w	r3, r3, #1
 801b76c:	2b01      	cmp	r3, #1
 801b76e:	d018      	beq.n	801b7a2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801b770:	68fb      	ldr	r3, [r7, #12]
 801b772:	681b      	ldr	r3, [r3, #0]
 801b774:	689a      	ldr	r2, [r3, #8]
 801b776:	68fb      	ldr	r3, [r7, #12]
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	f042 0201 	orr.w	r2, r2, #1
 801b77e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801b780:	4b5f      	ldr	r3, [pc, #380]	; (801b900 <HAL_ADC_Start_DMA+0x1c4>)
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	4a5f      	ldr	r2, [pc, #380]	; (801b904 <HAL_ADC_Start_DMA+0x1c8>)
 801b786:	fba2 2303 	umull	r2, r3, r2, r3
 801b78a:	0c9a      	lsrs	r2, r3, #18
 801b78c:	4613      	mov	r3, r2
 801b78e:	005b      	lsls	r3, r3, #1
 801b790:	4413      	add	r3, r2
 801b792:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801b794:	e002      	b.n	801b79c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801b796:	693b      	ldr	r3, [r7, #16]
 801b798:	3b01      	subs	r3, #1
 801b79a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801b79c:	693b      	ldr	r3, [r7, #16]
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d1f9      	bne.n	801b796 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	689b      	ldr	r3, [r3, #8]
 801b7a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b7ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b7b0:	d107      	bne.n	801b7c2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801b7b2:	68fb      	ldr	r3, [r7, #12]
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	689a      	ldr	r2, [r3, #8]
 801b7b8:	68fb      	ldr	r3, [r7, #12]
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b7c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801b7c2:	68fb      	ldr	r3, [r7, #12]
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	689b      	ldr	r3, [r3, #8]
 801b7c8:	f003 0301 	and.w	r3, r3, #1
 801b7cc:	2b01      	cmp	r3, #1
 801b7ce:	f040 8086 	bne.w	801b8de <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801b7da:	f023 0301 	bic.w	r3, r3, #1
 801b7de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801b7e2:	68fb      	ldr	r3, [r7, #12]
 801b7e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801b7e6:	68fb      	ldr	r3, [r7, #12]
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	685b      	ldr	r3, [r3, #4]
 801b7ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d007      	beq.n	801b804 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801b7f4:	68fb      	ldr	r3, [r7, #12]
 801b7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801b7fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801b800:	68fb      	ldr	r3, [r7, #12]
 801b802:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b80c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b810:	d106      	bne.n	801b820 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801b812:	68fb      	ldr	r3, [r7, #12]
 801b814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b816:	f023 0206 	bic.w	r2, r3, #6
 801b81a:	68fb      	ldr	r3, [r7, #12]
 801b81c:	645a      	str	r2, [r3, #68]	; 0x44
 801b81e:	e002      	b.n	801b826 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801b820:	68fb      	ldr	r3, [r7, #12]
 801b822:	2200      	movs	r2, #0
 801b824:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801b826:	68fb      	ldr	r3, [r7, #12]
 801b828:	2200      	movs	r2, #0
 801b82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801b82e:	4b36      	ldr	r3, [pc, #216]	; (801b908 <HAL_ADC_Start_DMA+0x1cc>)
 801b830:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b836:	4a35      	ldr	r2, [pc, #212]	; (801b90c <HAL_ADC_Start_DMA+0x1d0>)
 801b838:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801b83a:	68fb      	ldr	r3, [r7, #12]
 801b83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b83e:	4a34      	ldr	r2, [pc, #208]	; (801b910 <HAL_ADC_Start_DMA+0x1d4>)
 801b840:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801b842:	68fb      	ldr	r3, [r7, #12]
 801b844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b846:	4a33      	ldr	r2, [pc, #204]	; (801b914 <HAL_ADC_Start_DMA+0x1d8>)
 801b848:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801b84a:	68fb      	ldr	r3, [r7, #12]
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801b852:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801b854:	68fb      	ldr	r3, [r7, #12]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	685a      	ldr	r2, [r3, #4]
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801b862:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801b864:	68fb      	ldr	r3, [r7, #12]
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	689a      	ldr	r2, [r3, #8]
 801b86a:	68fb      	ldr	r3, [r7, #12]
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b872:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801b874:	68fb      	ldr	r3, [r7, #12]
 801b876:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801b878:	68fb      	ldr	r3, [r7, #12]
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	334c      	adds	r3, #76	; 0x4c
 801b87e:	4619      	mov	r1, r3
 801b880:	68ba      	ldr	r2, [r7, #8]
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	f000 fd0a 	bl	801c29c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801b888:	697b      	ldr	r3, [r7, #20]
 801b88a:	685b      	ldr	r3, [r3, #4]
 801b88c:	f003 031f 	and.w	r3, r3, #31
 801b890:	2b00      	cmp	r3, #0
 801b892:	d10f      	bne.n	801b8b4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801b894:	68fb      	ldr	r3, [r7, #12]
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	689b      	ldr	r3, [r3, #8]
 801b89a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d129      	bne.n	801b8f6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801b8a2:	68fb      	ldr	r3, [r7, #12]
 801b8a4:	681b      	ldr	r3, [r3, #0]
 801b8a6:	689a      	ldr	r2, [r3, #8]
 801b8a8:	68fb      	ldr	r3, [r7, #12]
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801b8b0:	609a      	str	r2, [r3, #8]
 801b8b2:	e020      	b.n	801b8f6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801b8b4:	68fb      	ldr	r3, [r7, #12]
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	4a17      	ldr	r2, [pc, #92]	; (801b918 <HAL_ADC_Start_DMA+0x1dc>)
 801b8ba:	4293      	cmp	r3, r2
 801b8bc:	d11b      	bne.n	801b8f6 <HAL_ADC_Start_DMA+0x1ba>
 801b8be:	68fb      	ldr	r3, [r7, #12]
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	689b      	ldr	r3, [r3, #8]
 801b8c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d114      	bne.n	801b8f6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801b8cc:	68fb      	ldr	r3, [r7, #12]
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	689a      	ldr	r2, [r3, #8]
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801b8da:	609a      	str	r2, [r3, #8]
 801b8dc:	e00b      	b.n	801b8f6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b8de:	68fb      	ldr	r3, [r7, #12]
 801b8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b8e2:	f043 0210 	orr.w	r2, r3, #16
 801b8e6:	68fb      	ldr	r3, [r7, #12]
 801b8e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b8ea:	68fb      	ldr	r3, [r7, #12]
 801b8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b8ee:	f043 0201 	orr.w	r2, r3, #1
 801b8f2:	68fb      	ldr	r3, [r7, #12]
 801b8f4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 801b8f6:	2300      	movs	r3, #0
}
 801b8f8:	4618      	mov	r0, r3
 801b8fa:	3718      	adds	r7, #24
 801b8fc:	46bd      	mov	sp, r7
 801b8fe:	bd80      	pop	{r7, pc}
 801b900:	20000020 	.word	0x20000020
 801b904:	431bde83 	.word	0x431bde83
 801b908:	40012300 	.word	0x40012300
 801b90c:	0801bdb5 	.word	0x0801bdb5
 801b910:	0801be6f 	.word	0x0801be6f
 801b914:	0801be8b 	.word	0x0801be8b
 801b918:	40012000 	.word	0x40012000

0801b91c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801b91c:	b480      	push	{r7}
 801b91e:	b083      	sub	sp, #12
 801b920:	af00      	add	r7, sp, #0
 801b922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801b924:	bf00      	nop
 801b926:	370c      	adds	r7, #12
 801b928:	46bd      	mov	sp, r7
 801b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b92e:	4770      	bx	lr

0801b930 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801b930:	b480      	push	{r7}
 801b932:	b083      	sub	sp, #12
 801b934:	af00      	add	r7, sp, #0
 801b936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 801b938:	bf00      	nop
 801b93a:	370c      	adds	r7, #12
 801b93c:	46bd      	mov	sp, r7
 801b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b942:	4770      	bx	lr

0801b944 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801b944:	b480      	push	{r7}
 801b946:	b083      	sub	sp, #12
 801b948:	af00      	add	r7, sp, #0
 801b94a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 801b94c:	bf00      	nop
 801b94e:	370c      	adds	r7, #12
 801b950:	46bd      	mov	sp, r7
 801b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b956:	4770      	bx	lr

0801b958 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801b958:	b480      	push	{r7}
 801b95a:	b085      	sub	sp, #20
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	6078      	str	r0, [r7, #4]
 801b960:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801b962:	2300      	movs	r3, #0
 801b964:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b96c:	2b01      	cmp	r3, #1
 801b96e:	d101      	bne.n	801b974 <HAL_ADC_ConfigChannel+0x1c>
 801b970:	2302      	movs	r3, #2
 801b972:	e113      	b.n	801bb9c <HAL_ADC_ConfigChannel+0x244>
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	2201      	movs	r2, #1
 801b978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801b97c:	683b      	ldr	r3, [r7, #0]
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	2b09      	cmp	r3, #9
 801b982:	d925      	bls.n	801b9d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	681b      	ldr	r3, [r3, #0]
 801b988:	68d9      	ldr	r1, [r3, #12]
 801b98a:	683b      	ldr	r3, [r7, #0]
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	b29b      	uxth	r3, r3
 801b990:	461a      	mov	r2, r3
 801b992:	4613      	mov	r3, r2
 801b994:	005b      	lsls	r3, r3, #1
 801b996:	4413      	add	r3, r2
 801b998:	3b1e      	subs	r3, #30
 801b99a:	2207      	movs	r2, #7
 801b99c:	fa02 f303 	lsl.w	r3, r2, r3
 801b9a0:	43da      	mvns	r2, r3
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	400a      	ands	r2, r1
 801b9a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	68d9      	ldr	r1, [r3, #12]
 801b9b0:	683b      	ldr	r3, [r7, #0]
 801b9b2:	689a      	ldr	r2, [r3, #8]
 801b9b4:	683b      	ldr	r3, [r7, #0]
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	b29b      	uxth	r3, r3
 801b9ba:	4618      	mov	r0, r3
 801b9bc:	4603      	mov	r3, r0
 801b9be:	005b      	lsls	r3, r3, #1
 801b9c0:	4403      	add	r3, r0
 801b9c2:	3b1e      	subs	r3, #30
 801b9c4:	409a      	lsls	r2, r3
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	430a      	orrs	r2, r1
 801b9cc:	60da      	str	r2, [r3, #12]
 801b9ce:	e022      	b.n	801ba16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	6919      	ldr	r1, [r3, #16]
 801b9d6:	683b      	ldr	r3, [r7, #0]
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	b29b      	uxth	r3, r3
 801b9dc:	461a      	mov	r2, r3
 801b9de:	4613      	mov	r3, r2
 801b9e0:	005b      	lsls	r3, r3, #1
 801b9e2:	4413      	add	r3, r2
 801b9e4:	2207      	movs	r2, #7
 801b9e6:	fa02 f303 	lsl.w	r3, r2, r3
 801b9ea:	43da      	mvns	r2, r3
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	400a      	ands	r2, r1
 801b9f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	6919      	ldr	r1, [r3, #16]
 801b9fa:	683b      	ldr	r3, [r7, #0]
 801b9fc:	689a      	ldr	r2, [r3, #8]
 801b9fe:	683b      	ldr	r3, [r7, #0]
 801ba00:	681b      	ldr	r3, [r3, #0]
 801ba02:	b29b      	uxth	r3, r3
 801ba04:	4618      	mov	r0, r3
 801ba06:	4603      	mov	r3, r0
 801ba08:	005b      	lsls	r3, r3, #1
 801ba0a:	4403      	add	r3, r0
 801ba0c:	409a      	lsls	r2, r3
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	430a      	orrs	r2, r1
 801ba14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801ba16:	683b      	ldr	r3, [r7, #0]
 801ba18:	685b      	ldr	r3, [r3, #4]
 801ba1a:	2b06      	cmp	r3, #6
 801ba1c:	d824      	bhi.n	801ba68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801ba24:	683b      	ldr	r3, [r7, #0]
 801ba26:	685a      	ldr	r2, [r3, #4]
 801ba28:	4613      	mov	r3, r2
 801ba2a:	009b      	lsls	r3, r3, #2
 801ba2c:	4413      	add	r3, r2
 801ba2e:	3b05      	subs	r3, #5
 801ba30:	221f      	movs	r2, #31
 801ba32:	fa02 f303 	lsl.w	r3, r2, r3
 801ba36:	43da      	mvns	r2, r3
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	400a      	ands	r2, r1
 801ba3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801ba46:	683b      	ldr	r3, [r7, #0]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	b29b      	uxth	r3, r3
 801ba4c:	4618      	mov	r0, r3
 801ba4e:	683b      	ldr	r3, [r7, #0]
 801ba50:	685a      	ldr	r2, [r3, #4]
 801ba52:	4613      	mov	r3, r2
 801ba54:	009b      	lsls	r3, r3, #2
 801ba56:	4413      	add	r3, r2
 801ba58:	3b05      	subs	r3, #5
 801ba5a:	fa00 f203 	lsl.w	r2, r0, r3
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	681b      	ldr	r3, [r3, #0]
 801ba62:	430a      	orrs	r2, r1
 801ba64:	635a      	str	r2, [r3, #52]	; 0x34
 801ba66:	e04c      	b.n	801bb02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801ba68:	683b      	ldr	r3, [r7, #0]
 801ba6a:	685b      	ldr	r3, [r3, #4]
 801ba6c:	2b0c      	cmp	r3, #12
 801ba6e:	d824      	bhi.n	801baba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801ba76:	683b      	ldr	r3, [r7, #0]
 801ba78:	685a      	ldr	r2, [r3, #4]
 801ba7a:	4613      	mov	r3, r2
 801ba7c:	009b      	lsls	r3, r3, #2
 801ba7e:	4413      	add	r3, r2
 801ba80:	3b23      	subs	r3, #35	; 0x23
 801ba82:	221f      	movs	r2, #31
 801ba84:	fa02 f303 	lsl.w	r3, r2, r3
 801ba88:	43da      	mvns	r2, r3
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	681b      	ldr	r3, [r3, #0]
 801ba8e:	400a      	ands	r2, r1
 801ba90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801ba98:	683b      	ldr	r3, [r7, #0]
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	b29b      	uxth	r3, r3
 801ba9e:	4618      	mov	r0, r3
 801baa0:	683b      	ldr	r3, [r7, #0]
 801baa2:	685a      	ldr	r2, [r3, #4]
 801baa4:	4613      	mov	r3, r2
 801baa6:	009b      	lsls	r3, r3, #2
 801baa8:	4413      	add	r3, r2
 801baaa:	3b23      	subs	r3, #35	; 0x23
 801baac:	fa00 f203 	lsl.w	r2, r0, r3
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	681b      	ldr	r3, [r3, #0]
 801bab4:	430a      	orrs	r2, r1
 801bab6:	631a      	str	r2, [r3, #48]	; 0x30
 801bab8:	e023      	b.n	801bb02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801bac0:	683b      	ldr	r3, [r7, #0]
 801bac2:	685a      	ldr	r2, [r3, #4]
 801bac4:	4613      	mov	r3, r2
 801bac6:	009b      	lsls	r3, r3, #2
 801bac8:	4413      	add	r3, r2
 801baca:	3b41      	subs	r3, #65	; 0x41
 801bacc:	221f      	movs	r2, #31
 801bace:	fa02 f303 	lsl.w	r3, r2, r3
 801bad2:	43da      	mvns	r2, r3
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	400a      	ands	r2, r1
 801bada:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801bae2:	683b      	ldr	r3, [r7, #0]
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	b29b      	uxth	r3, r3
 801bae8:	4618      	mov	r0, r3
 801baea:	683b      	ldr	r3, [r7, #0]
 801baec:	685a      	ldr	r2, [r3, #4]
 801baee:	4613      	mov	r3, r2
 801baf0:	009b      	lsls	r3, r3, #2
 801baf2:	4413      	add	r3, r2
 801baf4:	3b41      	subs	r3, #65	; 0x41
 801baf6:	fa00 f203 	lsl.w	r2, r0, r3
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	430a      	orrs	r2, r1
 801bb00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801bb02:	4b29      	ldr	r3, [pc, #164]	; (801bba8 <HAL_ADC_ConfigChannel+0x250>)
 801bb04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	4a28      	ldr	r2, [pc, #160]	; (801bbac <HAL_ADC_ConfigChannel+0x254>)
 801bb0c:	4293      	cmp	r3, r2
 801bb0e:	d10f      	bne.n	801bb30 <HAL_ADC_ConfigChannel+0x1d8>
 801bb10:	683b      	ldr	r3, [r7, #0]
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	2b12      	cmp	r3, #18
 801bb16:	d10b      	bne.n	801bb30 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	685b      	ldr	r3, [r3, #4]
 801bb1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801bb20:	68fb      	ldr	r3, [r7, #12]
 801bb22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801bb24:	68fb      	ldr	r3, [r7, #12]
 801bb26:	685b      	ldr	r3, [r3, #4]
 801bb28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	4a1d      	ldr	r2, [pc, #116]	; (801bbac <HAL_ADC_ConfigChannel+0x254>)
 801bb36:	4293      	cmp	r3, r2
 801bb38:	d12b      	bne.n	801bb92 <HAL_ADC_ConfigChannel+0x23a>
 801bb3a:	683b      	ldr	r3, [r7, #0]
 801bb3c:	681b      	ldr	r3, [r3, #0]
 801bb3e:	4a1c      	ldr	r2, [pc, #112]	; (801bbb0 <HAL_ADC_ConfigChannel+0x258>)
 801bb40:	4293      	cmp	r3, r2
 801bb42:	d003      	beq.n	801bb4c <HAL_ADC_ConfigChannel+0x1f4>
 801bb44:	683b      	ldr	r3, [r7, #0]
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	2b11      	cmp	r3, #17
 801bb4a:	d122      	bne.n	801bb92 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801bb4c:	68fb      	ldr	r3, [r7, #12]
 801bb4e:	685b      	ldr	r3, [r3, #4]
 801bb50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 801bb54:	68fb      	ldr	r3, [r7, #12]
 801bb56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801bb58:	68fb      	ldr	r3, [r7, #12]
 801bb5a:	685b      	ldr	r3, [r3, #4]
 801bb5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801bb64:	683b      	ldr	r3, [r7, #0]
 801bb66:	681b      	ldr	r3, [r3, #0]
 801bb68:	4a11      	ldr	r2, [pc, #68]	; (801bbb0 <HAL_ADC_ConfigChannel+0x258>)
 801bb6a:	4293      	cmp	r3, r2
 801bb6c:	d111      	bne.n	801bb92 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801bb6e:	4b11      	ldr	r3, [pc, #68]	; (801bbb4 <HAL_ADC_ConfigChannel+0x25c>)
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	4a11      	ldr	r2, [pc, #68]	; (801bbb8 <HAL_ADC_ConfigChannel+0x260>)
 801bb74:	fba2 2303 	umull	r2, r3, r2, r3
 801bb78:	0c9a      	lsrs	r2, r3, #18
 801bb7a:	4613      	mov	r3, r2
 801bb7c:	009b      	lsls	r3, r3, #2
 801bb7e:	4413      	add	r3, r2
 801bb80:	005b      	lsls	r3, r3, #1
 801bb82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801bb84:	e002      	b.n	801bb8c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801bb86:	68bb      	ldr	r3, [r7, #8]
 801bb88:	3b01      	subs	r3, #1
 801bb8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801bb8c:	68bb      	ldr	r3, [r7, #8]
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d1f9      	bne.n	801bb86 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	2200      	movs	r2, #0
 801bb96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801bb9a:	2300      	movs	r3, #0
}
 801bb9c:	4618      	mov	r0, r3
 801bb9e:	3714      	adds	r7, #20
 801bba0:	46bd      	mov	sp, r7
 801bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bba6:	4770      	bx	lr
 801bba8:	40012300 	.word	0x40012300
 801bbac:	40012000 	.word	0x40012000
 801bbb0:	10000012 	.word	0x10000012
 801bbb4:	20000020 	.word	0x20000020
 801bbb8:	431bde83 	.word	0x431bde83

0801bbbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801bbbc:	b480      	push	{r7}
 801bbbe:	b085      	sub	sp, #20
 801bbc0:	af00      	add	r7, sp, #0
 801bbc2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801bbc4:	4b79      	ldr	r3, [pc, #484]	; (801bdac <ADC_Init+0x1f0>)
 801bbc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	685b      	ldr	r3, [r3, #4]
 801bbcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801bbd0:	68fb      	ldr	r3, [r7, #12]
 801bbd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	685a      	ldr	r2, [r3, #4]
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	685b      	ldr	r3, [r3, #4]
 801bbdc:	431a      	orrs	r2, r3
 801bbde:	68fb      	ldr	r3, [r7, #12]
 801bbe0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	681b      	ldr	r3, [r3, #0]
 801bbe6:	685a      	ldr	r2, [r3, #4]
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	681b      	ldr	r3, [r3, #0]
 801bbec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801bbf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	6859      	ldr	r1, [r3, #4]
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	691b      	ldr	r3, [r3, #16]
 801bbfc:	021a      	lsls	r2, r3, #8
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	430a      	orrs	r2, r1
 801bc04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	685a      	ldr	r2, [r3, #4]
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	681b      	ldr	r3, [r3, #0]
 801bc10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801bc14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	6859      	ldr	r1, [r3, #4]
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	689a      	ldr	r2, [r3, #8]
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	430a      	orrs	r2, r1
 801bc26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	689a      	ldr	r2, [r3, #8]
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801bc36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	681b      	ldr	r3, [r3, #0]
 801bc3c:	6899      	ldr	r1, [r3, #8]
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	68da      	ldr	r2, [r3, #12]
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	430a      	orrs	r2, r1
 801bc48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc4e:	4a58      	ldr	r2, [pc, #352]	; (801bdb0 <ADC_Init+0x1f4>)
 801bc50:	4293      	cmp	r3, r2
 801bc52:	d022      	beq.n	801bc9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	689a      	ldr	r2, [r3, #8]
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801bc62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	6899      	ldr	r1, [r3, #8]
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	430a      	orrs	r2, r1
 801bc74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	681b      	ldr	r3, [r3, #0]
 801bc7a:	689a      	ldr	r2, [r3, #8]
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	681b      	ldr	r3, [r3, #0]
 801bc80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801bc84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	6899      	ldr	r1, [r3, #8]
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	430a      	orrs	r2, r1
 801bc96:	609a      	str	r2, [r3, #8]
 801bc98:	e00f      	b.n	801bcba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	689a      	ldr	r2, [r3, #8]
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801bca8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	689a      	ldr	r2, [r3, #8]
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	681b      	ldr	r3, [r3, #0]
 801bcb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801bcb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	689a      	ldr	r2, [r3, #8]
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	f022 0202 	bic.w	r2, r2, #2
 801bcc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	681b      	ldr	r3, [r3, #0]
 801bcce:	6899      	ldr	r1, [r3, #8]
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	7e1b      	ldrb	r3, [r3, #24]
 801bcd4:	005a      	lsls	r2, r3, #1
 801bcd6:	687b      	ldr	r3, [r7, #4]
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	430a      	orrs	r2, r1
 801bcdc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d01b      	beq.n	801bd20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	685a      	ldr	r2, [r3, #4]
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801bcf6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	685a      	ldr	r2, [r3, #4]
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801bd06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	6859      	ldr	r1, [r3, #4]
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd12:	3b01      	subs	r3, #1
 801bd14:	035a      	lsls	r2, r3, #13
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	681b      	ldr	r3, [r3, #0]
 801bd1a:	430a      	orrs	r2, r1
 801bd1c:	605a      	str	r2, [r3, #4]
 801bd1e:	e007      	b.n	801bd30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	685a      	ldr	r2, [r3, #4]
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	681b      	ldr	r3, [r3, #0]
 801bd2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801bd2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801bd3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	69db      	ldr	r3, [r3, #28]
 801bd4a:	3b01      	subs	r3, #1
 801bd4c:	051a      	lsls	r2, r3, #20
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	430a      	orrs	r2, r1
 801bd54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	689a      	ldr	r2, [r3, #8]
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801bd64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	6899      	ldr	r1, [r3, #8]
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bd72:	025a      	lsls	r2, r3, #9
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	430a      	orrs	r2, r1
 801bd7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	681b      	ldr	r3, [r3, #0]
 801bd80:	689a      	ldr	r2, [r3, #8]
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	681b      	ldr	r3, [r3, #0]
 801bd86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801bd8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	6899      	ldr	r1, [r3, #8]
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	695b      	ldr	r3, [r3, #20]
 801bd96:	029a      	lsls	r2, r3, #10
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	430a      	orrs	r2, r1
 801bd9e:	609a      	str	r2, [r3, #8]
}
 801bda0:	bf00      	nop
 801bda2:	3714      	adds	r7, #20
 801bda4:	46bd      	mov	sp, r7
 801bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdaa:	4770      	bx	lr
 801bdac:	40012300 	.word	0x40012300
 801bdb0:	0f000001 	.word	0x0f000001

0801bdb4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b084      	sub	sp, #16
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bdc0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801bdc2:	68fb      	ldr	r3, [r7, #12]
 801bdc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdc6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d13c      	bne.n	801be48 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801bdce:	68fb      	ldr	r3, [r7, #12]
 801bdd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801bdd6:	68fb      	ldr	r3, [r7, #12]
 801bdd8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801bdda:	68fb      	ldr	r3, [r7, #12]
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	689b      	ldr	r3, [r3, #8]
 801bde0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d12b      	bne.n	801be40 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801bde8:	68fb      	ldr	r3, [r7, #12]
 801bdea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d127      	bne.n	801be40 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801bdf0:	68fb      	ldr	r3, [r7, #12]
 801bdf2:	681b      	ldr	r3, [r3, #0]
 801bdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bdf6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	d006      	beq.n	801be0c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801bdfe:	68fb      	ldr	r3, [r7, #12]
 801be00:	681b      	ldr	r3, [r3, #0]
 801be02:	689b      	ldr	r3, [r3, #8]
 801be04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d119      	bne.n	801be40 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801be0c:	68fb      	ldr	r3, [r7, #12]
 801be0e:	681b      	ldr	r3, [r3, #0]
 801be10:	685a      	ldr	r2, [r3, #4]
 801be12:	68fb      	ldr	r3, [r7, #12]
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	f022 0220 	bic.w	r2, r2, #32
 801be1a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801be1c:	68fb      	ldr	r3, [r7, #12]
 801be1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801be24:	68fb      	ldr	r3, [r7, #12]
 801be26:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801be30:	2b00      	cmp	r3, #0
 801be32:	d105      	bne.n	801be40 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801be34:	68fb      	ldr	r3, [r7, #12]
 801be36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be38:	f043 0201 	orr.w	r2, r3, #1
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801be40:	68f8      	ldr	r0, [r7, #12]
 801be42:	f7ff fd6b 	bl	801b91c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801be46:	e00e      	b.n	801be66 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801be48:	68fb      	ldr	r3, [r7, #12]
 801be4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be4c:	f003 0310 	and.w	r3, r3, #16
 801be50:	2b00      	cmp	r3, #0
 801be52:	d003      	beq.n	801be5c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801be54:	68f8      	ldr	r0, [r7, #12]
 801be56:	f7ff fd75 	bl	801b944 <HAL_ADC_ErrorCallback>
}
 801be5a:	e004      	b.n	801be66 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801be5c:	68fb      	ldr	r3, [r7, #12]
 801be5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801be60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801be62:	6878      	ldr	r0, [r7, #4]
 801be64:	4798      	blx	r3
}
 801be66:	bf00      	nop
 801be68:	3710      	adds	r7, #16
 801be6a:	46bd      	mov	sp, r7
 801be6c:	bd80      	pop	{r7, pc}

0801be6e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801be6e:	b580      	push	{r7, lr}
 801be70:	b084      	sub	sp, #16
 801be72:	af00      	add	r7, sp, #0
 801be74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801be7a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801be7c:	68f8      	ldr	r0, [r7, #12]
 801be7e:	f7ff fd57 	bl	801b930 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801be82:	bf00      	nop
 801be84:	3710      	adds	r7, #16
 801be86:	46bd      	mov	sp, r7
 801be88:	bd80      	pop	{r7, pc}

0801be8a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801be8a:	b580      	push	{r7, lr}
 801be8c:	b084      	sub	sp, #16
 801be8e:	af00      	add	r7, sp, #0
 801be90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801be96:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 801be98:	68fb      	ldr	r3, [r7, #12]
 801be9a:	2240      	movs	r2, #64	; 0x40
 801be9c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bea2:	f043 0204 	orr.w	r2, r3, #4
 801bea6:	68fb      	ldr	r3, [r7, #12]
 801bea8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801beaa:	68f8      	ldr	r0, [r7, #12]
 801beac:	f7ff fd4a 	bl	801b944 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801beb0:	bf00      	nop
 801beb2:	3710      	adds	r7, #16
 801beb4:	46bd      	mov	sp, r7
 801beb6:	bd80      	pop	{r7, pc}

0801beb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801beb8:	b480      	push	{r7}
 801beba:	b085      	sub	sp, #20
 801bebc:	af00      	add	r7, sp, #0
 801bebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	f003 0307 	and.w	r3, r3, #7
 801bec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801bec8:	4b0c      	ldr	r3, [pc, #48]	; (801befc <__NVIC_SetPriorityGrouping+0x44>)
 801beca:	68db      	ldr	r3, [r3, #12]
 801becc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801bece:	68ba      	ldr	r2, [r7, #8]
 801bed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801bed4:	4013      	ands	r3, r2
 801bed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801bedc:	68bb      	ldr	r3, [r7, #8]
 801bede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801bee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801bee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801beea:	4a04      	ldr	r2, [pc, #16]	; (801befc <__NVIC_SetPriorityGrouping+0x44>)
 801beec:	68bb      	ldr	r3, [r7, #8]
 801beee:	60d3      	str	r3, [r2, #12]
}
 801bef0:	bf00      	nop
 801bef2:	3714      	adds	r7, #20
 801bef4:	46bd      	mov	sp, r7
 801bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801befa:	4770      	bx	lr
 801befc:	e000ed00 	.word	0xe000ed00

0801bf00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801bf00:	b480      	push	{r7}
 801bf02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801bf04:	4b04      	ldr	r3, [pc, #16]	; (801bf18 <__NVIC_GetPriorityGrouping+0x18>)
 801bf06:	68db      	ldr	r3, [r3, #12]
 801bf08:	0a1b      	lsrs	r3, r3, #8
 801bf0a:	f003 0307 	and.w	r3, r3, #7
}
 801bf0e:	4618      	mov	r0, r3
 801bf10:	46bd      	mov	sp, r7
 801bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf16:	4770      	bx	lr
 801bf18:	e000ed00 	.word	0xe000ed00

0801bf1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801bf1c:	b480      	push	{r7}
 801bf1e:	b083      	sub	sp, #12
 801bf20:	af00      	add	r7, sp, #0
 801bf22:	4603      	mov	r3, r0
 801bf24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801bf26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	db0b      	blt.n	801bf46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801bf2e:	79fb      	ldrb	r3, [r7, #7]
 801bf30:	f003 021f 	and.w	r2, r3, #31
 801bf34:	4907      	ldr	r1, [pc, #28]	; (801bf54 <__NVIC_EnableIRQ+0x38>)
 801bf36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bf3a:	095b      	lsrs	r3, r3, #5
 801bf3c:	2001      	movs	r0, #1
 801bf3e:	fa00 f202 	lsl.w	r2, r0, r2
 801bf42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801bf46:	bf00      	nop
 801bf48:	370c      	adds	r7, #12
 801bf4a:	46bd      	mov	sp, r7
 801bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf50:	4770      	bx	lr
 801bf52:	bf00      	nop
 801bf54:	e000e100 	.word	0xe000e100

0801bf58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801bf58:	b480      	push	{r7}
 801bf5a:	b083      	sub	sp, #12
 801bf5c:	af00      	add	r7, sp, #0
 801bf5e:	4603      	mov	r3, r0
 801bf60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801bf62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	db12      	blt.n	801bf90 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801bf6a:	79fb      	ldrb	r3, [r7, #7]
 801bf6c:	f003 021f 	and.w	r2, r3, #31
 801bf70:	490a      	ldr	r1, [pc, #40]	; (801bf9c <__NVIC_DisableIRQ+0x44>)
 801bf72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bf76:	095b      	lsrs	r3, r3, #5
 801bf78:	2001      	movs	r0, #1
 801bf7a:	fa00 f202 	lsl.w	r2, r0, r2
 801bf7e:	3320      	adds	r3, #32
 801bf80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801bf84:	f3bf 8f4f 	dsb	sy
}
 801bf88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801bf8a:	f3bf 8f6f 	isb	sy
}
 801bf8e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 801bf90:	bf00      	nop
 801bf92:	370c      	adds	r7, #12
 801bf94:	46bd      	mov	sp, r7
 801bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf9a:	4770      	bx	lr
 801bf9c:	e000e100 	.word	0xe000e100

0801bfa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801bfa0:	b480      	push	{r7}
 801bfa2:	b083      	sub	sp, #12
 801bfa4:	af00      	add	r7, sp, #0
 801bfa6:	4603      	mov	r3, r0
 801bfa8:	6039      	str	r1, [r7, #0]
 801bfaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801bfac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	db0a      	blt.n	801bfca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bfb4:	683b      	ldr	r3, [r7, #0]
 801bfb6:	b2da      	uxtb	r2, r3
 801bfb8:	490c      	ldr	r1, [pc, #48]	; (801bfec <__NVIC_SetPriority+0x4c>)
 801bfba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bfbe:	0112      	lsls	r2, r2, #4
 801bfc0:	b2d2      	uxtb	r2, r2
 801bfc2:	440b      	add	r3, r1
 801bfc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801bfc8:	e00a      	b.n	801bfe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bfca:	683b      	ldr	r3, [r7, #0]
 801bfcc:	b2da      	uxtb	r2, r3
 801bfce:	4908      	ldr	r1, [pc, #32]	; (801bff0 <__NVIC_SetPriority+0x50>)
 801bfd0:	79fb      	ldrb	r3, [r7, #7]
 801bfd2:	f003 030f 	and.w	r3, r3, #15
 801bfd6:	3b04      	subs	r3, #4
 801bfd8:	0112      	lsls	r2, r2, #4
 801bfda:	b2d2      	uxtb	r2, r2
 801bfdc:	440b      	add	r3, r1
 801bfde:	761a      	strb	r2, [r3, #24]
}
 801bfe0:	bf00      	nop
 801bfe2:	370c      	adds	r7, #12
 801bfe4:	46bd      	mov	sp, r7
 801bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfea:	4770      	bx	lr
 801bfec:	e000e100 	.word	0xe000e100
 801bff0:	e000ed00 	.word	0xe000ed00

0801bff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801bff4:	b480      	push	{r7}
 801bff6:	b089      	sub	sp, #36	; 0x24
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	60f8      	str	r0, [r7, #12]
 801bffc:	60b9      	str	r1, [r7, #8]
 801bffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801c000:	68fb      	ldr	r3, [r7, #12]
 801c002:	f003 0307 	and.w	r3, r3, #7
 801c006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801c008:	69fb      	ldr	r3, [r7, #28]
 801c00a:	f1c3 0307 	rsb	r3, r3, #7
 801c00e:	2b04      	cmp	r3, #4
 801c010:	bf28      	it	cs
 801c012:	2304      	movcs	r3, #4
 801c014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801c016:	69fb      	ldr	r3, [r7, #28]
 801c018:	3304      	adds	r3, #4
 801c01a:	2b06      	cmp	r3, #6
 801c01c:	d902      	bls.n	801c024 <NVIC_EncodePriority+0x30>
 801c01e:	69fb      	ldr	r3, [r7, #28]
 801c020:	3b03      	subs	r3, #3
 801c022:	e000      	b.n	801c026 <NVIC_EncodePriority+0x32>
 801c024:	2300      	movs	r3, #0
 801c026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c028:	f04f 32ff 	mov.w	r2, #4294967295
 801c02c:	69bb      	ldr	r3, [r7, #24]
 801c02e:	fa02 f303 	lsl.w	r3, r2, r3
 801c032:	43da      	mvns	r2, r3
 801c034:	68bb      	ldr	r3, [r7, #8]
 801c036:	401a      	ands	r2, r3
 801c038:	697b      	ldr	r3, [r7, #20]
 801c03a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801c03c:	f04f 31ff 	mov.w	r1, #4294967295
 801c040:	697b      	ldr	r3, [r7, #20]
 801c042:	fa01 f303 	lsl.w	r3, r1, r3
 801c046:	43d9      	mvns	r1, r3
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c04c:	4313      	orrs	r3, r2
         );
}
 801c04e:	4618      	mov	r0, r3
 801c050:	3724      	adds	r7, #36	; 0x24
 801c052:	46bd      	mov	sp, r7
 801c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c058:	4770      	bx	lr
	...

0801c05c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801c05c:	b580      	push	{r7, lr}
 801c05e:	b082      	sub	sp, #8
 801c060:	af00      	add	r7, sp, #0
 801c062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	3b01      	subs	r3, #1
 801c068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801c06c:	d301      	bcc.n	801c072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801c06e:	2301      	movs	r3, #1
 801c070:	e00f      	b.n	801c092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801c072:	4a0a      	ldr	r2, [pc, #40]	; (801c09c <SysTick_Config+0x40>)
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	3b01      	subs	r3, #1
 801c078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801c07a:	210f      	movs	r1, #15
 801c07c:	f04f 30ff 	mov.w	r0, #4294967295
 801c080:	f7ff ff8e 	bl	801bfa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801c084:	4b05      	ldr	r3, [pc, #20]	; (801c09c <SysTick_Config+0x40>)
 801c086:	2200      	movs	r2, #0
 801c088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801c08a:	4b04      	ldr	r3, [pc, #16]	; (801c09c <SysTick_Config+0x40>)
 801c08c:	2207      	movs	r2, #7
 801c08e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801c090:	2300      	movs	r3, #0
}
 801c092:	4618      	mov	r0, r3
 801c094:	3708      	adds	r7, #8
 801c096:	46bd      	mov	sp, r7
 801c098:	bd80      	pop	{r7, pc}
 801c09a:	bf00      	nop
 801c09c:	e000e010 	.word	0xe000e010

0801c0a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801c0a0:	b580      	push	{r7, lr}
 801c0a2:	b082      	sub	sp, #8
 801c0a4:	af00      	add	r7, sp, #0
 801c0a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801c0a8:	6878      	ldr	r0, [r7, #4]
 801c0aa:	f7ff ff05 	bl	801beb8 <__NVIC_SetPriorityGrouping>
}
 801c0ae:	bf00      	nop
 801c0b0:	3708      	adds	r7, #8
 801c0b2:	46bd      	mov	sp, r7
 801c0b4:	bd80      	pop	{r7, pc}

0801c0b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801c0b6:	b580      	push	{r7, lr}
 801c0b8:	b086      	sub	sp, #24
 801c0ba:	af00      	add	r7, sp, #0
 801c0bc:	4603      	mov	r3, r0
 801c0be:	60b9      	str	r1, [r7, #8]
 801c0c0:	607a      	str	r2, [r7, #4]
 801c0c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801c0c4:	2300      	movs	r3, #0
 801c0c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801c0c8:	f7ff ff1a 	bl	801bf00 <__NVIC_GetPriorityGrouping>
 801c0cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801c0ce:	687a      	ldr	r2, [r7, #4]
 801c0d0:	68b9      	ldr	r1, [r7, #8]
 801c0d2:	6978      	ldr	r0, [r7, #20]
 801c0d4:	f7ff ff8e 	bl	801bff4 <NVIC_EncodePriority>
 801c0d8:	4602      	mov	r2, r0
 801c0da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c0de:	4611      	mov	r1, r2
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	f7ff ff5d 	bl	801bfa0 <__NVIC_SetPriority>
}
 801c0e6:	bf00      	nop
 801c0e8:	3718      	adds	r7, #24
 801c0ea:	46bd      	mov	sp, r7
 801c0ec:	bd80      	pop	{r7, pc}

0801c0ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801c0ee:	b580      	push	{r7, lr}
 801c0f0:	b082      	sub	sp, #8
 801c0f2:	af00      	add	r7, sp, #0
 801c0f4:	4603      	mov	r3, r0
 801c0f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801c0f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c0fc:	4618      	mov	r0, r3
 801c0fe:	f7ff ff0d 	bl	801bf1c <__NVIC_EnableIRQ>
}
 801c102:	bf00      	nop
 801c104:	3708      	adds	r7, #8
 801c106:	46bd      	mov	sp, r7
 801c108:	bd80      	pop	{r7, pc}

0801c10a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801c10a:	b580      	push	{r7, lr}
 801c10c:	b082      	sub	sp, #8
 801c10e:	af00      	add	r7, sp, #0
 801c110:	4603      	mov	r3, r0
 801c112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801c114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c118:	4618      	mov	r0, r3
 801c11a:	f7ff ff1d 	bl	801bf58 <__NVIC_DisableIRQ>
}
 801c11e:	bf00      	nop
 801c120:	3708      	adds	r7, #8
 801c122:	46bd      	mov	sp, r7
 801c124:	bd80      	pop	{r7, pc}

0801c126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801c126:	b580      	push	{r7, lr}
 801c128:	b082      	sub	sp, #8
 801c12a:	af00      	add	r7, sp, #0
 801c12c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801c12e:	6878      	ldr	r0, [r7, #4]
 801c130:	f7ff ff94 	bl	801c05c <SysTick_Config>
 801c134:	4603      	mov	r3, r0
}
 801c136:	4618      	mov	r0, r3
 801c138:	3708      	adds	r7, #8
 801c13a:	46bd      	mov	sp, r7
 801c13c:	bd80      	pop	{r7, pc}
	...

0801c140 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801c140:	b580      	push	{r7, lr}
 801c142:	b086      	sub	sp, #24
 801c144:	af00      	add	r7, sp, #0
 801c146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801c148:	2300      	movs	r3, #0
 801c14a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801c14c:	f7ff faa6 	bl	801b69c <HAL_GetTick>
 801c150:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	2b00      	cmp	r3, #0
 801c156:	d101      	bne.n	801c15c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801c158:	2301      	movs	r3, #1
 801c15a:	e099      	b.n	801c290 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	2202      	movs	r2, #2
 801c160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	2200      	movs	r2, #0
 801c168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	681a      	ldr	r2, [r3, #0]
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	f022 0201 	bic.w	r2, r2, #1
 801c17a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c17c:	e00f      	b.n	801c19e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801c17e:	f7ff fa8d 	bl	801b69c <HAL_GetTick>
 801c182:	4602      	mov	r2, r0
 801c184:	693b      	ldr	r3, [r7, #16]
 801c186:	1ad3      	subs	r3, r2, r3
 801c188:	2b05      	cmp	r3, #5
 801c18a:	d908      	bls.n	801c19e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	2220      	movs	r2, #32
 801c190:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	2203      	movs	r2, #3
 801c196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801c19a:	2303      	movs	r3, #3
 801c19c:	e078      	b.n	801c290 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	681b      	ldr	r3, [r3, #0]
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	f003 0301 	and.w	r3, r3, #1
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	d1e8      	bne.n	801c17e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801c1b4:	697a      	ldr	r2, [r7, #20]
 801c1b6:	4b38      	ldr	r3, [pc, #224]	; (801c298 <HAL_DMA_Init+0x158>)
 801c1b8:	4013      	ands	r3, r2
 801c1ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	685a      	ldr	r2, [r3, #4]
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	689b      	ldr	r3, [r3, #8]
 801c1c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c1ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	691b      	ldr	r3, [r3, #16]
 801c1d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c1d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	699b      	ldr	r3, [r3, #24]
 801c1dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c1e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	6a1b      	ldr	r3, [r3, #32]
 801c1e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c1ea:	697a      	ldr	r2, [r7, #20]
 801c1ec:	4313      	orrs	r3, r2
 801c1ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1f4:	2b04      	cmp	r3, #4
 801c1f6:	d107      	bne.n	801c208 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c200:	4313      	orrs	r3, r2
 801c202:	697a      	ldr	r2, [r7, #20]
 801c204:	4313      	orrs	r3, r2
 801c206:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	681b      	ldr	r3, [r3, #0]
 801c20c:	697a      	ldr	r2, [r7, #20]
 801c20e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	695b      	ldr	r3, [r3, #20]
 801c216:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801c218:	697b      	ldr	r3, [r7, #20]
 801c21a:	f023 0307 	bic.w	r3, r3, #7
 801c21e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c224:	697a      	ldr	r2, [r7, #20]
 801c226:	4313      	orrs	r3, r2
 801c228:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c22e:	2b04      	cmp	r3, #4
 801c230:	d117      	bne.n	801c262 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c236:	697a      	ldr	r2, [r7, #20]
 801c238:	4313      	orrs	r3, r2
 801c23a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c240:	2b00      	cmp	r3, #0
 801c242:	d00e      	beq.n	801c262 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801c244:	6878      	ldr	r0, [r7, #4]
 801c246:	f000 fb1b 	bl	801c880 <DMA_CheckFifoParam>
 801c24a:	4603      	mov	r3, r0
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d008      	beq.n	801c262 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	2240      	movs	r2, #64	; 0x40
 801c254:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	2201      	movs	r2, #1
 801c25a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801c25e:	2301      	movs	r3, #1
 801c260:	e016      	b.n	801c290 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	697a      	ldr	r2, [r7, #20]
 801c268:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801c26a:	6878      	ldr	r0, [r7, #4]
 801c26c:	f000 fad2 	bl	801c814 <DMA_CalcBaseAndBitshift>
 801c270:	4603      	mov	r3, r0
 801c272:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c278:	223f      	movs	r2, #63	; 0x3f
 801c27a:	409a      	lsls	r2, r3
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	2200      	movs	r2, #0
 801c284:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	2201      	movs	r2, #1
 801c28a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801c28e:	2300      	movs	r3, #0
}
 801c290:	4618      	mov	r0, r3
 801c292:	3718      	adds	r7, #24
 801c294:	46bd      	mov	sp, r7
 801c296:	bd80      	pop	{r7, pc}
 801c298:	f010803f 	.word	0xf010803f

0801c29c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c29c:	b580      	push	{r7, lr}
 801c29e:	b086      	sub	sp, #24
 801c2a0:	af00      	add	r7, sp, #0
 801c2a2:	60f8      	str	r0, [r7, #12]
 801c2a4:	60b9      	str	r1, [r7, #8]
 801c2a6:	607a      	str	r2, [r7, #4]
 801c2a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801c2ae:	68fb      	ldr	r3, [r7, #12]
 801c2b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c2b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c2ba:	2b01      	cmp	r3, #1
 801c2bc:	d101      	bne.n	801c2c2 <HAL_DMA_Start_IT+0x26>
 801c2be:	2302      	movs	r3, #2
 801c2c0:	e040      	b.n	801c344 <HAL_DMA_Start_IT+0xa8>
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	2201      	movs	r2, #1
 801c2c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801c2ca:	68fb      	ldr	r3, [r7, #12]
 801c2cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c2d0:	b2db      	uxtb	r3, r3
 801c2d2:	2b01      	cmp	r3, #1
 801c2d4:	d12f      	bne.n	801c336 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801c2d6:	68fb      	ldr	r3, [r7, #12]
 801c2d8:	2202      	movs	r2, #2
 801c2da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c2de:	68fb      	ldr	r3, [r7, #12]
 801c2e0:	2200      	movs	r2, #0
 801c2e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801c2e4:	683b      	ldr	r3, [r7, #0]
 801c2e6:	687a      	ldr	r2, [r7, #4]
 801c2e8:	68b9      	ldr	r1, [r7, #8]
 801c2ea:	68f8      	ldr	r0, [r7, #12]
 801c2ec:	f000 fa64 	bl	801c7b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c2f0:	68fb      	ldr	r3, [r7, #12]
 801c2f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c2f4:	223f      	movs	r2, #63	; 0x3f
 801c2f6:	409a      	lsls	r2, r3
 801c2f8:	693b      	ldr	r3, [r7, #16]
 801c2fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801c2fc:	68fb      	ldr	r3, [r7, #12]
 801c2fe:	681b      	ldr	r3, [r3, #0]
 801c300:	681a      	ldr	r2, [r3, #0]
 801c302:	68fb      	ldr	r3, [r7, #12]
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	f042 0216 	orr.w	r2, r2, #22
 801c30a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801c30c:	68fb      	ldr	r3, [r7, #12]
 801c30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c310:	2b00      	cmp	r3, #0
 801c312:	d007      	beq.n	801c324 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	681a      	ldr	r2, [r3, #0]
 801c31a:	68fb      	ldr	r3, [r7, #12]
 801c31c:	681b      	ldr	r3, [r3, #0]
 801c31e:	f042 0208 	orr.w	r2, r2, #8
 801c322:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801c324:	68fb      	ldr	r3, [r7, #12]
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	681a      	ldr	r2, [r3, #0]
 801c32a:	68fb      	ldr	r3, [r7, #12]
 801c32c:	681b      	ldr	r3, [r3, #0]
 801c32e:	f042 0201 	orr.w	r2, r2, #1
 801c332:	601a      	str	r2, [r3, #0]
 801c334:	e005      	b.n	801c342 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801c336:	68fb      	ldr	r3, [r7, #12]
 801c338:	2200      	movs	r2, #0
 801c33a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801c33e:	2302      	movs	r3, #2
 801c340:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801c342:	7dfb      	ldrb	r3, [r7, #23]
}
 801c344:	4618      	mov	r0, r3
 801c346:	3718      	adds	r7, #24
 801c348:	46bd      	mov	sp, r7
 801c34a:	bd80      	pop	{r7, pc}

0801c34c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801c34c:	b580      	push	{r7, lr}
 801c34e:	b084      	sub	sp, #16
 801c350:	af00      	add	r7, sp, #0
 801c352:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c358:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801c35a:	f7ff f99f 	bl	801b69c <HAL_GetTick>
 801c35e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c366:	b2db      	uxtb	r3, r3
 801c368:	2b02      	cmp	r3, #2
 801c36a:	d008      	beq.n	801c37e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	2280      	movs	r2, #128	; 0x80
 801c370:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	2200      	movs	r2, #0
 801c376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801c37a:	2301      	movs	r3, #1
 801c37c:	e052      	b.n	801c424 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	681a      	ldr	r2, [r3, #0]
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	f022 0216 	bic.w	r2, r2, #22
 801c38c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	695a      	ldr	r2, [r3, #20]
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	681b      	ldr	r3, [r3, #0]
 801c398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c39c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d103      	bne.n	801c3ae <HAL_DMA_Abort+0x62>
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d007      	beq.n	801c3be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	681a      	ldr	r2, [r3, #0]
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	f022 0208 	bic.w	r2, r2, #8
 801c3bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	681a      	ldr	r2, [r3, #0]
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	f022 0201 	bic.w	r2, r2, #1
 801c3cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c3ce:	e013      	b.n	801c3f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801c3d0:	f7ff f964 	bl	801b69c <HAL_GetTick>
 801c3d4:	4602      	mov	r2, r0
 801c3d6:	68bb      	ldr	r3, [r7, #8]
 801c3d8:	1ad3      	subs	r3, r2, r3
 801c3da:	2b05      	cmp	r3, #5
 801c3dc:	d90c      	bls.n	801c3f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	2220      	movs	r2, #32
 801c3e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	2203      	movs	r2, #3
 801c3e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	2200      	movs	r2, #0
 801c3f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801c3f4:	2303      	movs	r3, #3
 801c3f6:	e015      	b.n	801c424 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	f003 0301 	and.w	r3, r3, #1
 801c402:	2b00      	cmp	r3, #0
 801c404:	d1e4      	bne.n	801c3d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c406:	687b      	ldr	r3, [r7, #4]
 801c408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c40a:	223f      	movs	r2, #63	; 0x3f
 801c40c:	409a      	lsls	r2, r3
 801c40e:	68fb      	ldr	r3, [r7, #12]
 801c410:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	2201      	movs	r2, #1
 801c416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	2200      	movs	r2, #0
 801c41e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801c422:	2300      	movs	r3, #0
}
 801c424:	4618      	mov	r0, r3
 801c426:	3710      	adds	r7, #16
 801c428:	46bd      	mov	sp, r7
 801c42a:	bd80      	pop	{r7, pc}

0801c42c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801c42c:	b480      	push	{r7}
 801c42e:	b083      	sub	sp, #12
 801c430:	af00      	add	r7, sp, #0
 801c432:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c43a:	b2db      	uxtb	r3, r3
 801c43c:	2b02      	cmp	r3, #2
 801c43e:	d004      	beq.n	801c44a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	2280      	movs	r2, #128	; 0x80
 801c444:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801c446:	2301      	movs	r3, #1
 801c448:	e00c      	b.n	801c464 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	2205      	movs	r2, #5
 801c44e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	681a      	ldr	r2, [r3, #0]
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	f022 0201 	bic.w	r2, r2, #1
 801c460:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801c462:	2300      	movs	r3, #0
}
 801c464:	4618      	mov	r0, r3
 801c466:	370c      	adds	r7, #12
 801c468:	46bd      	mov	sp, r7
 801c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c46e:	4770      	bx	lr

0801c470 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801c470:	b580      	push	{r7, lr}
 801c472:	b086      	sub	sp, #24
 801c474:	af00      	add	r7, sp, #0
 801c476:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801c478:	2300      	movs	r3, #0
 801c47a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801c47c:	4b8e      	ldr	r3, [pc, #568]	; (801c6b8 <HAL_DMA_IRQHandler+0x248>)
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	4a8e      	ldr	r2, [pc, #568]	; (801c6bc <HAL_DMA_IRQHandler+0x24c>)
 801c482:	fba2 2303 	umull	r2, r3, r2, r3
 801c486:	0a9b      	lsrs	r3, r3, #10
 801c488:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c48e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801c490:	693b      	ldr	r3, [r7, #16]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c49a:	2208      	movs	r2, #8
 801c49c:	409a      	lsls	r2, r3
 801c49e:	68fb      	ldr	r3, [r7, #12]
 801c4a0:	4013      	ands	r3, r2
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d01a      	beq.n	801c4dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	f003 0304 	and.w	r3, r3, #4
 801c4b0:	2b00      	cmp	r3, #0
 801c4b2:	d013      	beq.n	801c4dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	681a      	ldr	r2, [r3, #0]
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	681b      	ldr	r3, [r3, #0]
 801c4be:	f022 0204 	bic.w	r2, r2, #4
 801c4c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c4c8:	2208      	movs	r2, #8
 801c4ca:	409a      	lsls	r2, r3
 801c4cc:	693b      	ldr	r3, [r7, #16]
 801c4ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c4d4:	f043 0201 	orr.w	r2, r3, #1
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c4e0:	2201      	movs	r2, #1
 801c4e2:	409a      	lsls	r2, r3
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	4013      	ands	r3, r2
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	d012      	beq.n	801c512 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	695b      	ldr	r3, [r3, #20]
 801c4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d00b      	beq.n	801c512 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c4fe:	2201      	movs	r2, #1
 801c500:	409a      	lsls	r2, r3
 801c502:	693b      	ldr	r3, [r7, #16]
 801c504:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c50a:	f043 0202 	orr.w	r2, r3, #2
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c516:	2204      	movs	r2, #4
 801c518:	409a      	lsls	r2, r3
 801c51a:	68fb      	ldr	r3, [r7, #12]
 801c51c:	4013      	ands	r3, r2
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d012      	beq.n	801c548 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	f003 0302 	and.w	r3, r3, #2
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d00b      	beq.n	801c548 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c534:	2204      	movs	r2, #4
 801c536:	409a      	lsls	r2, r3
 801c538:	693b      	ldr	r3, [r7, #16]
 801c53a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c540:	f043 0204 	orr.w	r2, r3, #4
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c54c:	2210      	movs	r2, #16
 801c54e:	409a      	lsls	r2, r3
 801c550:	68fb      	ldr	r3, [r7, #12]
 801c552:	4013      	ands	r3, r2
 801c554:	2b00      	cmp	r3, #0
 801c556:	d043      	beq.n	801c5e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	f003 0308 	and.w	r3, r3, #8
 801c562:	2b00      	cmp	r3, #0
 801c564:	d03c      	beq.n	801c5e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c56a:	2210      	movs	r2, #16
 801c56c:	409a      	lsls	r2, r3
 801c56e:	693b      	ldr	r3, [r7, #16]
 801c570:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	681b      	ldr	r3, [r3, #0]
 801c576:	681b      	ldr	r3, [r3, #0]
 801c578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d018      	beq.n	801c5b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d108      	bne.n	801c5a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c592:	2b00      	cmp	r3, #0
 801c594:	d024      	beq.n	801c5e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c59a:	6878      	ldr	r0, [r7, #4]
 801c59c:	4798      	blx	r3
 801c59e:	e01f      	b.n	801c5e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c5a4:	2b00      	cmp	r3, #0
 801c5a6:	d01b      	beq.n	801c5e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c5ac:	6878      	ldr	r0, [r7, #4]
 801c5ae:	4798      	blx	r3
 801c5b0:	e016      	b.n	801c5e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d107      	bne.n	801c5d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	681b      	ldr	r3, [r3, #0]
 801c5c4:	681a      	ldr	r2, [r3, #0]
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	681b      	ldr	r3, [r3, #0]
 801c5ca:	f022 0208 	bic.w	r2, r2, #8
 801c5ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d003      	beq.n	801c5e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5dc:	6878      	ldr	r0, [r7, #4]
 801c5de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c5e4:	2220      	movs	r2, #32
 801c5e6:	409a      	lsls	r2, r3
 801c5e8:	68fb      	ldr	r3, [r7, #12]
 801c5ea:	4013      	ands	r3, r2
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	f000 808f 	beq.w	801c710 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	f003 0310 	and.w	r3, r3, #16
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	f000 8087 	beq.w	801c710 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c606:	2220      	movs	r2, #32
 801c608:	409a      	lsls	r2, r3
 801c60a:	693b      	ldr	r3, [r7, #16]
 801c60c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c614:	b2db      	uxtb	r3, r3
 801c616:	2b05      	cmp	r3, #5
 801c618:	d136      	bne.n	801c688 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	681b      	ldr	r3, [r3, #0]
 801c61e:	681a      	ldr	r2, [r3, #0]
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	f022 0216 	bic.w	r2, r2, #22
 801c628:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	695a      	ldr	r2, [r3, #20]
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c638:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d103      	bne.n	801c64a <HAL_DMA_IRQHandler+0x1da>
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c646:	2b00      	cmp	r3, #0
 801c648:	d007      	beq.n	801c65a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	681a      	ldr	r2, [r3, #0]
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	f022 0208 	bic.w	r2, r2, #8
 801c658:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c65e:	223f      	movs	r2, #63	; 0x3f
 801c660:	409a      	lsls	r2, r3
 801c662:	693b      	ldr	r3, [r7, #16]
 801c664:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	2201      	movs	r2, #1
 801c66a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	2200      	movs	r2, #0
 801c672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	d07e      	beq.n	801c77c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c682:	6878      	ldr	r0, [r7, #4]
 801c684:	4798      	blx	r3
        }
        return;
 801c686:	e079      	b.n	801c77c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	681b      	ldr	r3, [r3, #0]
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801c692:	2b00      	cmp	r3, #0
 801c694:	d01d      	beq.n	801c6d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d10d      	bne.n	801c6c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d031      	beq.n	801c710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c6b0:	6878      	ldr	r0, [r7, #4]
 801c6b2:	4798      	blx	r3
 801c6b4:	e02c      	b.n	801c710 <HAL_DMA_IRQHandler+0x2a0>
 801c6b6:	bf00      	nop
 801c6b8:	20000020 	.word	0x20000020
 801c6bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d023      	beq.n	801c710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c6cc:	6878      	ldr	r0, [r7, #4]
 801c6ce:	4798      	blx	r3
 801c6d0:	e01e      	b.n	801c710 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d10f      	bne.n	801c700 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	681a      	ldr	r2, [r3, #0]
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	f022 0210 	bic.w	r2, r2, #16
 801c6ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	2201      	movs	r2, #1
 801c6f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	2200      	movs	r2, #0
 801c6fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c704:	2b00      	cmp	r3, #0
 801c706:	d003      	beq.n	801c710 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c70c:	6878      	ldr	r0, [r7, #4]
 801c70e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c714:	2b00      	cmp	r3, #0
 801c716:	d032      	beq.n	801c77e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801c718:	687b      	ldr	r3, [r7, #4]
 801c71a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c71c:	f003 0301 	and.w	r3, r3, #1
 801c720:	2b00      	cmp	r3, #0
 801c722:	d022      	beq.n	801c76a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	2205      	movs	r2, #5
 801c728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	681b      	ldr	r3, [r3, #0]
 801c730:	681a      	ldr	r2, [r3, #0]
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	681b      	ldr	r3, [r3, #0]
 801c736:	f022 0201 	bic.w	r2, r2, #1
 801c73a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801c73c:	68bb      	ldr	r3, [r7, #8]
 801c73e:	3301      	adds	r3, #1
 801c740:	60bb      	str	r3, [r7, #8]
 801c742:	697a      	ldr	r2, [r7, #20]
 801c744:	429a      	cmp	r2, r3
 801c746:	d307      	bcc.n	801c758 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	681b      	ldr	r3, [r3, #0]
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	f003 0301 	and.w	r3, r3, #1
 801c752:	2b00      	cmp	r3, #0
 801c754:	d1f2      	bne.n	801c73c <HAL_DMA_IRQHandler+0x2cc>
 801c756:	e000      	b.n	801c75a <HAL_DMA_IRQHandler+0x2ea>
          break;
 801c758:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	2201      	movs	r2, #1
 801c75e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	2200      	movs	r2, #0
 801c766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c76e:	2b00      	cmp	r3, #0
 801c770:	d005      	beq.n	801c77e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c776:	6878      	ldr	r0, [r7, #4]
 801c778:	4798      	blx	r3
 801c77a:	e000      	b.n	801c77e <HAL_DMA_IRQHandler+0x30e>
        return;
 801c77c:	bf00      	nop
    }
  }
}
 801c77e:	3718      	adds	r7, #24
 801c780:	46bd      	mov	sp, r7
 801c782:	bd80      	pop	{r7, pc}

0801c784 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801c784:	b480      	push	{r7}
 801c786:	b083      	sub	sp, #12
 801c788:	af00      	add	r7, sp, #0
 801c78a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c792:	b2db      	uxtb	r3, r3
}
 801c794:	4618      	mov	r0, r3
 801c796:	370c      	adds	r7, #12
 801c798:	46bd      	mov	sp, r7
 801c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c79e:	4770      	bx	lr

0801c7a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801c7a0:	b480      	push	{r7}
 801c7a2:	b083      	sub	sp, #12
 801c7a4:	af00      	add	r7, sp, #0
 801c7a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801c7ac:	4618      	mov	r0, r3
 801c7ae:	370c      	adds	r7, #12
 801c7b0:	46bd      	mov	sp, r7
 801c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7b6:	4770      	bx	lr

0801c7b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c7b8:	b480      	push	{r7}
 801c7ba:	b085      	sub	sp, #20
 801c7bc:	af00      	add	r7, sp, #0
 801c7be:	60f8      	str	r0, [r7, #12]
 801c7c0:	60b9      	str	r1, [r7, #8]
 801c7c2:	607a      	str	r2, [r7, #4]
 801c7c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	681b      	ldr	r3, [r3, #0]
 801c7ca:	681a      	ldr	r2, [r3, #0]
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	681b      	ldr	r3, [r3, #0]
 801c7d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801c7d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	681b      	ldr	r3, [r3, #0]
 801c7da:	683a      	ldr	r2, [r7, #0]
 801c7dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	689b      	ldr	r3, [r3, #8]
 801c7e2:	2b40      	cmp	r3, #64	; 0x40
 801c7e4:	d108      	bne.n	801c7f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	681b      	ldr	r3, [r3, #0]
 801c7ea:	687a      	ldr	r2, [r7, #4]
 801c7ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801c7ee:	68fb      	ldr	r3, [r7, #12]
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	68ba      	ldr	r2, [r7, #8]
 801c7f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801c7f6:	e007      	b.n	801c808 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801c7f8:	68fb      	ldr	r3, [r7, #12]
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	68ba      	ldr	r2, [r7, #8]
 801c7fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	687a      	ldr	r2, [r7, #4]
 801c806:	60da      	str	r2, [r3, #12]
}
 801c808:	bf00      	nop
 801c80a:	3714      	adds	r7, #20
 801c80c:	46bd      	mov	sp, r7
 801c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c812:	4770      	bx	lr

0801c814 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801c814:	b480      	push	{r7}
 801c816:	b085      	sub	sp, #20
 801c818:	af00      	add	r7, sp, #0
 801c81a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801c81c:	687b      	ldr	r3, [r7, #4]
 801c81e:	681b      	ldr	r3, [r3, #0]
 801c820:	b2db      	uxtb	r3, r3
 801c822:	3b10      	subs	r3, #16
 801c824:	4a14      	ldr	r2, [pc, #80]	; (801c878 <DMA_CalcBaseAndBitshift+0x64>)
 801c826:	fba2 2303 	umull	r2, r3, r2, r3
 801c82a:	091b      	lsrs	r3, r3, #4
 801c82c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801c82e:	4a13      	ldr	r2, [pc, #76]	; (801c87c <DMA_CalcBaseAndBitshift+0x68>)
 801c830:	68fb      	ldr	r3, [r7, #12]
 801c832:	4413      	add	r3, r2
 801c834:	781b      	ldrb	r3, [r3, #0]
 801c836:	461a      	mov	r2, r3
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	2b03      	cmp	r3, #3
 801c840:	d909      	bls.n	801c856 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801c84a:	f023 0303 	bic.w	r3, r3, #3
 801c84e:	1d1a      	adds	r2, r3, #4
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	659a      	str	r2, [r3, #88]	; 0x58
 801c854:	e007      	b.n	801c866 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	681b      	ldr	r3, [r3, #0]
 801c85a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801c85e:	f023 0303 	bic.w	r3, r3, #3
 801c862:	687a      	ldr	r2, [r7, #4]
 801c864:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801c86a:	4618      	mov	r0, r3
 801c86c:	3714      	adds	r7, #20
 801c86e:	46bd      	mov	sp, r7
 801c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c874:	4770      	bx	lr
 801c876:	bf00      	nop
 801c878:	aaaaaaab 	.word	0xaaaaaaab
 801c87c:	080290bc 	.word	0x080290bc

0801c880 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801c880:	b480      	push	{r7}
 801c882:	b085      	sub	sp, #20
 801c884:	af00      	add	r7, sp, #0
 801c886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c888:	2300      	movs	r3, #0
 801c88a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c890:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	699b      	ldr	r3, [r3, #24]
 801c896:	2b00      	cmp	r3, #0
 801c898:	d11f      	bne.n	801c8da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801c89a:	68bb      	ldr	r3, [r7, #8]
 801c89c:	2b03      	cmp	r3, #3
 801c89e:	d856      	bhi.n	801c94e <DMA_CheckFifoParam+0xce>
 801c8a0:	a201      	add	r2, pc, #4	; (adr r2, 801c8a8 <DMA_CheckFifoParam+0x28>)
 801c8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c8a6:	bf00      	nop
 801c8a8:	0801c8b9 	.word	0x0801c8b9
 801c8ac:	0801c8cb 	.word	0x0801c8cb
 801c8b0:	0801c8b9 	.word	0x0801c8b9
 801c8b4:	0801c94f 	.word	0x0801c94f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d046      	beq.n	801c952 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801c8c4:	2301      	movs	r3, #1
 801c8c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801c8c8:	e043      	b.n	801c952 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801c8d2:	d140      	bne.n	801c956 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801c8d4:	2301      	movs	r3, #1
 801c8d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801c8d8:	e03d      	b.n	801c956 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801c8da:	687b      	ldr	r3, [r7, #4]
 801c8dc:	699b      	ldr	r3, [r3, #24]
 801c8de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c8e2:	d121      	bne.n	801c928 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801c8e4:	68bb      	ldr	r3, [r7, #8]
 801c8e6:	2b03      	cmp	r3, #3
 801c8e8:	d837      	bhi.n	801c95a <DMA_CheckFifoParam+0xda>
 801c8ea:	a201      	add	r2, pc, #4	; (adr r2, 801c8f0 <DMA_CheckFifoParam+0x70>)
 801c8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c8f0:	0801c901 	.word	0x0801c901
 801c8f4:	0801c907 	.word	0x0801c907
 801c8f8:	0801c901 	.word	0x0801c901
 801c8fc:	0801c919 	.word	0x0801c919
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801c900:	2301      	movs	r3, #1
 801c902:	73fb      	strb	r3, [r7, #15]
      break;
 801c904:	e030      	b.n	801c968 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c90a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d025      	beq.n	801c95e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801c912:	2301      	movs	r3, #1
 801c914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801c916:	e022      	b.n	801c95e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c91c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801c920:	d11f      	bne.n	801c962 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801c922:	2301      	movs	r3, #1
 801c924:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801c926:	e01c      	b.n	801c962 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801c928:	68bb      	ldr	r3, [r7, #8]
 801c92a:	2b02      	cmp	r3, #2
 801c92c:	d903      	bls.n	801c936 <DMA_CheckFifoParam+0xb6>
 801c92e:	68bb      	ldr	r3, [r7, #8]
 801c930:	2b03      	cmp	r3, #3
 801c932:	d003      	beq.n	801c93c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801c934:	e018      	b.n	801c968 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801c936:	2301      	movs	r3, #1
 801c938:	73fb      	strb	r3, [r7, #15]
      break;
 801c93a:	e015      	b.n	801c968 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c944:	2b00      	cmp	r3, #0
 801c946:	d00e      	beq.n	801c966 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801c948:	2301      	movs	r3, #1
 801c94a:	73fb      	strb	r3, [r7, #15]
      break;
 801c94c:	e00b      	b.n	801c966 <DMA_CheckFifoParam+0xe6>
      break;
 801c94e:	bf00      	nop
 801c950:	e00a      	b.n	801c968 <DMA_CheckFifoParam+0xe8>
      break;
 801c952:	bf00      	nop
 801c954:	e008      	b.n	801c968 <DMA_CheckFifoParam+0xe8>
      break;
 801c956:	bf00      	nop
 801c958:	e006      	b.n	801c968 <DMA_CheckFifoParam+0xe8>
      break;
 801c95a:	bf00      	nop
 801c95c:	e004      	b.n	801c968 <DMA_CheckFifoParam+0xe8>
      break;
 801c95e:	bf00      	nop
 801c960:	e002      	b.n	801c968 <DMA_CheckFifoParam+0xe8>
      break;   
 801c962:	bf00      	nop
 801c964:	e000      	b.n	801c968 <DMA_CheckFifoParam+0xe8>
      break;
 801c966:	bf00      	nop
    }
  } 
  
  return status; 
 801c968:	7bfb      	ldrb	r3, [r7, #15]
}
 801c96a:	4618      	mov	r0, r3
 801c96c:	3714      	adds	r7, #20
 801c96e:	46bd      	mov	sp, r7
 801c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c974:	4770      	bx	lr
 801c976:	bf00      	nop

0801c978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c978:	b480      	push	{r7}
 801c97a:	b089      	sub	sp, #36	; 0x24
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	6078      	str	r0, [r7, #4]
 801c980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801c982:	2300      	movs	r3, #0
 801c984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801c986:	2300      	movs	r3, #0
 801c988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801c98a:	2300      	movs	r3, #0
 801c98c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801c98e:	2300      	movs	r3, #0
 801c990:	61fb      	str	r3, [r7, #28]
 801c992:	e159      	b.n	801cc48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801c994:	2201      	movs	r2, #1
 801c996:	69fb      	ldr	r3, [r7, #28]
 801c998:	fa02 f303 	lsl.w	r3, r2, r3
 801c99c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801c99e:	683b      	ldr	r3, [r7, #0]
 801c9a0:	681b      	ldr	r3, [r3, #0]
 801c9a2:	697a      	ldr	r2, [r7, #20]
 801c9a4:	4013      	ands	r3, r2
 801c9a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801c9a8:	693a      	ldr	r2, [r7, #16]
 801c9aa:	697b      	ldr	r3, [r7, #20]
 801c9ac:	429a      	cmp	r2, r3
 801c9ae:	f040 8148 	bne.w	801cc42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801c9b2:	683b      	ldr	r3, [r7, #0]
 801c9b4:	685b      	ldr	r3, [r3, #4]
 801c9b6:	f003 0303 	and.w	r3, r3, #3
 801c9ba:	2b01      	cmp	r3, #1
 801c9bc:	d005      	beq.n	801c9ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c9be:	683b      	ldr	r3, [r7, #0]
 801c9c0:	685b      	ldr	r3, [r3, #4]
 801c9c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801c9c6:	2b02      	cmp	r3, #2
 801c9c8:	d130      	bne.n	801ca2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801c9ca:	687b      	ldr	r3, [r7, #4]
 801c9cc:	689b      	ldr	r3, [r3, #8]
 801c9ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801c9d0:	69fb      	ldr	r3, [r7, #28]
 801c9d2:	005b      	lsls	r3, r3, #1
 801c9d4:	2203      	movs	r2, #3
 801c9d6:	fa02 f303 	lsl.w	r3, r2, r3
 801c9da:	43db      	mvns	r3, r3
 801c9dc:	69ba      	ldr	r2, [r7, #24]
 801c9de:	4013      	ands	r3, r2
 801c9e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c9e2:	683b      	ldr	r3, [r7, #0]
 801c9e4:	68da      	ldr	r2, [r3, #12]
 801c9e6:	69fb      	ldr	r3, [r7, #28]
 801c9e8:	005b      	lsls	r3, r3, #1
 801c9ea:	fa02 f303 	lsl.w	r3, r2, r3
 801c9ee:	69ba      	ldr	r2, [r7, #24]
 801c9f0:	4313      	orrs	r3, r2
 801c9f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	69ba      	ldr	r2, [r7, #24]
 801c9f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	685b      	ldr	r3, [r3, #4]
 801c9fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801ca00:	2201      	movs	r2, #1
 801ca02:	69fb      	ldr	r3, [r7, #28]
 801ca04:	fa02 f303 	lsl.w	r3, r2, r3
 801ca08:	43db      	mvns	r3, r3
 801ca0a:	69ba      	ldr	r2, [r7, #24]
 801ca0c:	4013      	ands	r3, r2
 801ca0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801ca10:	683b      	ldr	r3, [r7, #0]
 801ca12:	685b      	ldr	r3, [r3, #4]
 801ca14:	091b      	lsrs	r3, r3, #4
 801ca16:	f003 0201 	and.w	r2, r3, #1
 801ca1a:	69fb      	ldr	r3, [r7, #28]
 801ca1c:	fa02 f303 	lsl.w	r3, r2, r3
 801ca20:	69ba      	ldr	r2, [r7, #24]
 801ca22:	4313      	orrs	r3, r2
 801ca24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	69ba      	ldr	r2, [r7, #24]
 801ca2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801ca2c:	683b      	ldr	r3, [r7, #0]
 801ca2e:	685b      	ldr	r3, [r3, #4]
 801ca30:	f003 0303 	and.w	r3, r3, #3
 801ca34:	2b03      	cmp	r3, #3
 801ca36:	d017      	beq.n	801ca68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	68db      	ldr	r3, [r3, #12]
 801ca3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801ca3e:	69fb      	ldr	r3, [r7, #28]
 801ca40:	005b      	lsls	r3, r3, #1
 801ca42:	2203      	movs	r2, #3
 801ca44:	fa02 f303 	lsl.w	r3, r2, r3
 801ca48:	43db      	mvns	r3, r3
 801ca4a:	69ba      	ldr	r2, [r7, #24]
 801ca4c:	4013      	ands	r3, r2
 801ca4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801ca50:	683b      	ldr	r3, [r7, #0]
 801ca52:	689a      	ldr	r2, [r3, #8]
 801ca54:	69fb      	ldr	r3, [r7, #28]
 801ca56:	005b      	lsls	r3, r3, #1
 801ca58:	fa02 f303 	lsl.w	r3, r2, r3
 801ca5c:	69ba      	ldr	r2, [r7, #24]
 801ca5e:	4313      	orrs	r3, r2
 801ca60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801ca62:	687b      	ldr	r3, [r7, #4]
 801ca64:	69ba      	ldr	r2, [r7, #24]
 801ca66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801ca68:	683b      	ldr	r3, [r7, #0]
 801ca6a:	685b      	ldr	r3, [r3, #4]
 801ca6c:	f003 0303 	and.w	r3, r3, #3
 801ca70:	2b02      	cmp	r3, #2
 801ca72:	d123      	bne.n	801cabc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801ca74:	69fb      	ldr	r3, [r7, #28]
 801ca76:	08da      	lsrs	r2, r3, #3
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	3208      	adds	r2, #8
 801ca7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ca80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801ca82:	69fb      	ldr	r3, [r7, #28]
 801ca84:	f003 0307 	and.w	r3, r3, #7
 801ca88:	009b      	lsls	r3, r3, #2
 801ca8a:	220f      	movs	r2, #15
 801ca8c:	fa02 f303 	lsl.w	r3, r2, r3
 801ca90:	43db      	mvns	r3, r3
 801ca92:	69ba      	ldr	r2, [r7, #24]
 801ca94:	4013      	ands	r3, r2
 801ca96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801ca98:	683b      	ldr	r3, [r7, #0]
 801ca9a:	691a      	ldr	r2, [r3, #16]
 801ca9c:	69fb      	ldr	r3, [r7, #28]
 801ca9e:	f003 0307 	and.w	r3, r3, #7
 801caa2:	009b      	lsls	r3, r3, #2
 801caa4:	fa02 f303 	lsl.w	r3, r2, r3
 801caa8:	69ba      	ldr	r2, [r7, #24]
 801caaa:	4313      	orrs	r3, r2
 801caac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801caae:	69fb      	ldr	r3, [r7, #28]
 801cab0:	08da      	lsrs	r2, r3, #3
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	3208      	adds	r2, #8
 801cab6:	69b9      	ldr	r1, [r7, #24]
 801cab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	681b      	ldr	r3, [r3, #0]
 801cac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801cac2:	69fb      	ldr	r3, [r7, #28]
 801cac4:	005b      	lsls	r3, r3, #1
 801cac6:	2203      	movs	r2, #3
 801cac8:	fa02 f303 	lsl.w	r3, r2, r3
 801cacc:	43db      	mvns	r3, r3
 801cace:	69ba      	ldr	r2, [r7, #24]
 801cad0:	4013      	ands	r3, r2
 801cad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801cad4:	683b      	ldr	r3, [r7, #0]
 801cad6:	685b      	ldr	r3, [r3, #4]
 801cad8:	f003 0203 	and.w	r2, r3, #3
 801cadc:	69fb      	ldr	r3, [r7, #28]
 801cade:	005b      	lsls	r3, r3, #1
 801cae0:	fa02 f303 	lsl.w	r3, r2, r3
 801cae4:	69ba      	ldr	r2, [r7, #24]
 801cae6:	4313      	orrs	r3, r2
 801cae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	69ba      	ldr	r2, [r7, #24]
 801caee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801caf0:	683b      	ldr	r3, [r7, #0]
 801caf2:	685b      	ldr	r3, [r3, #4]
 801caf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	f000 80a2 	beq.w	801cc42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801cafe:	2300      	movs	r3, #0
 801cb00:	60fb      	str	r3, [r7, #12]
 801cb02:	4b57      	ldr	r3, [pc, #348]	; (801cc60 <HAL_GPIO_Init+0x2e8>)
 801cb04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cb06:	4a56      	ldr	r2, [pc, #344]	; (801cc60 <HAL_GPIO_Init+0x2e8>)
 801cb08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801cb0c:	6453      	str	r3, [r2, #68]	; 0x44
 801cb0e:	4b54      	ldr	r3, [pc, #336]	; (801cc60 <HAL_GPIO_Init+0x2e8>)
 801cb10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cb12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801cb16:	60fb      	str	r3, [r7, #12]
 801cb18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801cb1a:	4a52      	ldr	r2, [pc, #328]	; (801cc64 <HAL_GPIO_Init+0x2ec>)
 801cb1c:	69fb      	ldr	r3, [r7, #28]
 801cb1e:	089b      	lsrs	r3, r3, #2
 801cb20:	3302      	adds	r3, #2
 801cb22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cb26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801cb28:	69fb      	ldr	r3, [r7, #28]
 801cb2a:	f003 0303 	and.w	r3, r3, #3
 801cb2e:	009b      	lsls	r3, r3, #2
 801cb30:	220f      	movs	r2, #15
 801cb32:	fa02 f303 	lsl.w	r3, r2, r3
 801cb36:	43db      	mvns	r3, r3
 801cb38:	69ba      	ldr	r2, [r7, #24]
 801cb3a:	4013      	ands	r3, r2
 801cb3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	4a49      	ldr	r2, [pc, #292]	; (801cc68 <HAL_GPIO_Init+0x2f0>)
 801cb42:	4293      	cmp	r3, r2
 801cb44:	d019      	beq.n	801cb7a <HAL_GPIO_Init+0x202>
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	4a48      	ldr	r2, [pc, #288]	; (801cc6c <HAL_GPIO_Init+0x2f4>)
 801cb4a:	4293      	cmp	r3, r2
 801cb4c:	d013      	beq.n	801cb76 <HAL_GPIO_Init+0x1fe>
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	4a47      	ldr	r2, [pc, #284]	; (801cc70 <HAL_GPIO_Init+0x2f8>)
 801cb52:	4293      	cmp	r3, r2
 801cb54:	d00d      	beq.n	801cb72 <HAL_GPIO_Init+0x1fa>
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	4a46      	ldr	r2, [pc, #280]	; (801cc74 <HAL_GPIO_Init+0x2fc>)
 801cb5a:	4293      	cmp	r3, r2
 801cb5c:	d007      	beq.n	801cb6e <HAL_GPIO_Init+0x1f6>
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	4a45      	ldr	r2, [pc, #276]	; (801cc78 <HAL_GPIO_Init+0x300>)
 801cb62:	4293      	cmp	r3, r2
 801cb64:	d101      	bne.n	801cb6a <HAL_GPIO_Init+0x1f2>
 801cb66:	2304      	movs	r3, #4
 801cb68:	e008      	b.n	801cb7c <HAL_GPIO_Init+0x204>
 801cb6a:	2307      	movs	r3, #7
 801cb6c:	e006      	b.n	801cb7c <HAL_GPIO_Init+0x204>
 801cb6e:	2303      	movs	r3, #3
 801cb70:	e004      	b.n	801cb7c <HAL_GPIO_Init+0x204>
 801cb72:	2302      	movs	r3, #2
 801cb74:	e002      	b.n	801cb7c <HAL_GPIO_Init+0x204>
 801cb76:	2301      	movs	r3, #1
 801cb78:	e000      	b.n	801cb7c <HAL_GPIO_Init+0x204>
 801cb7a:	2300      	movs	r3, #0
 801cb7c:	69fa      	ldr	r2, [r7, #28]
 801cb7e:	f002 0203 	and.w	r2, r2, #3
 801cb82:	0092      	lsls	r2, r2, #2
 801cb84:	4093      	lsls	r3, r2
 801cb86:	69ba      	ldr	r2, [r7, #24]
 801cb88:	4313      	orrs	r3, r2
 801cb8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801cb8c:	4935      	ldr	r1, [pc, #212]	; (801cc64 <HAL_GPIO_Init+0x2ec>)
 801cb8e:	69fb      	ldr	r3, [r7, #28]
 801cb90:	089b      	lsrs	r3, r3, #2
 801cb92:	3302      	adds	r3, #2
 801cb94:	69ba      	ldr	r2, [r7, #24]
 801cb96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801cb9a:	4b38      	ldr	r3, [pc, #224]	; (801cc7c <HAL_GPIO_Init+0x304>)
 801cb9c:	689b      	ldr	r3, [r3, #8]
 801cb9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801cba0:	693b      	ldr	r3, [r7, #16]
 801cba2:	43db      	mvns	r3, r3
 801cba4:	69ba      	ldr	r2, [r7, #24]
 801cba6:	4013      	ands	r3, r2
 801cba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801cbaa:	683b      	ldr	r3, [r7, #0]
 801cbac:	685b      	ldr	r3, [r3, #4]
 801cbae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d003      	beq.n	801cbbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801cbb6:	69ba      	ldr	r2, [r7, #24]
 801cbb8:	693b      	ldr	r3, [r7, #16]
 801cbba:	4313      	orrs	r3, r2
 801cbbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801cbbe:	4a2f      	ldr	r2, [pc, #188]	; (801cc7c <HAL_GPIO_Init+0x304>)
 801cbc0:	69bb      	ldr	r3, [r7, #24]
 801cbc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801cbc4:	4b2d      	ldr	r3, [pc, #180]	; (801cc7c <HAL_GPIO_Init+0x304>)
 801cbc6:	68db      	ldr	r3, [r3, #12]
 801cbc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801cbca:	693b      	ldr	r3, [r7, #16]
 801cbcc:	43db      	mvns	r3, r3
 801cbce:	69ba      	ldr	r2, [r7, #24]
 801cbd0:	4013      	ands	r3, r2
 801cbd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801cbd4:	683b      	ldr	r3, [r7, #0]
 801cbd6:	685b      	ldr	r3, [r3, #4]
 801cbd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d003      	beq.n	801cbe8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801cbe0:	69ba      	ldr	r2, [r7, #24]
 801cbe2:	693b      	ldr	r3, [r7, #16]
 801cbe4:	4313      	orrs	r3, r2
 801cbe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801cbe8:	4a24      	ldr	r2, [pc, #144]	; (801cc7c <HAL_GPIO_Init+0x304>)
 801cbea:	69bb      	ldr	r3, [r7, #24]
 801cbec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801cbee:	4b23      	ldr	r3, [pc, #140]	; (801cc7c <HAL_GPIO_Init+0x304>)
 801cbf0:	685b      	ldr	r3, [r3, #4]
 801cbf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801cbf4:	693b      	ldr	r3, [r7, #16]
 801cbf6:	43db      	mvns	r3, r3
 801cbf8:	69ba      	ldr	r2, [r7, #24]
 801cbfa:	4013      	ands	r3, r2
 801cbfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801cbfe:	683b      	ldr	r3, [r7, #0]
 801cc00:	685b      	ldr	r3, [r3, #4]
 801cc02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	d003      	beq.n	801cc12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801cc0a:	69ba      	ldr	r2, [r7, #24]
 801cc0c:	693b      	ldr	r3, [r7, #16]
 801cc0e:	4313      	orrs	r3, r2
 801cc10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801cc12:	4a1a      	ldr	r2, [pc, #104]	; (801cc7c <HAL_GPIO_Init+0x304>)
 801cc14:	69bb      	ldr	r3, [r7, #24]
 801cc16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801cc18:	4b18      	ldr	r3, [pc, #96]	; (801cc7c <HAL_GPIO_Init+0x304>)
 801cc1a:	681b      	ldr	r3, [r3, #0]
 801cc1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801cc1e:	693b      	ldr	r3, [r7, #16]
 801cc20:	43db      	mvns	r3, r3
 801cc22:	69ba      	ldr	r2, [r7, #24]
 801cc24:	4013      	ands	r3, r2
 801cc26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801cc28:	683b      	ldr	r3, [r7, #0]
 801cc2a:	685b      	ldr	r3, [r3, #4]
 801cc2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801cc30:	2b00      	cmp	r3, #0
 801cc32:	d003      	beq.n	801cc3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801cc34:	69ba      	ldr	r2, [r7, #24]
 801cc36:	693b      	ldr	r3, [r7, #16]
 801cc38:	4313      	orrs	r3, r2
 801cc3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801cc3c:	4a0f      	ldr	r2, [pc, #60]	; (801cc7c <HAL_GPIO_Init+0x304>)
 801cc3e:	69bb      	ldr	r3, [r7, #24]
 801cc40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801cc42:	69fb      	ldr	r3, [r7, #28]
 801cc44:	3301      	adds	r3, #1
 801cc46:	61fb      	str	r3, [r7, #28]
 801cc48:	69fb      	ldr	r3, [r7, #28]
 801cc4a:	2b0f      	cmp	r3, #15
 801cc4c:	f67f aea2 	bls.w	801c994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801cc50:	bf00      	nop
 801cc52:	bf00      	nop
 801cc54:	3724      	adds	r7, #36	; 0x24
 801cc56:	46bd      	mov	sp, r7
 801cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc5c:	4770      	bx	lr
 801cc5e:	bf00      	nop
 801cc60:	40023800 	.word	0x40023800
 801cc64:	40013800 	.word	0x40013800
 801cc68:	40020000 	.word	0x40020000
 801cc6c:	40020400 	.word	0x40020400
 801cc70:	40020800 	.word	0x40020800
 801cc74:	40020c00 	.word	0x40020c00
 801cc78:	40021000 	.word	0x40021000
 801cc7c:	40013c00 	.word	0x40013c00

0801cc80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801cc80:	b480      	push	{r7}
 801cc82:	b087      	sub	sp, #28
 801cc84:	af00      	add	r7, sp, #0
 801cc86:	6078      	str	r0, [r7, #4]
 801cc88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801cc8e:	2300      	movs	r3, #0
 801cc90:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801cc92:	2300      	movs	r3, #0
 801cc94:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801cc96:	2300      	movs	r3, #0
 801cc98:	617b      	str	r3, [r7, #20]
 801cc9a:	e0bb      	b.n	801ce14 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801cc9c:	2201      	movs	r2, #1
 801cc9e:	697b      	ldr	r3, [r7, #20]
 801cca0:	fa02 f303 	lsl.w	r3, r2, r3
 801cca4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801cca6:	683a      	ldr	r2, [r7, #0]
 801cca8:	693b      	ldr	r3, [r7, #16]
 801ccaa:	4013      	ands	r3, r2
 801ccac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801ccae:	68fa      	ldr	r2, [r7, #12]
 801ccb0:	693b      	ldr	r3, [r7, #16]
 801ccb2:	429a      	cmp	r2, r3
 801ccb4:	f040 80ab 	bne.w	801ce0e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801ccb8:	4a5c      	ldr	r2, [pc, #368]	; (801ce2c <HAL_GPIO_DeInit+0x1ac>)
 801ccba:	697b      	ldr	r3, [r7, #20]
 801ccbc:	089b      	lsrs	r3, r3, #2
 801ccbe:	3302      	adds	r3, #2
 801ccc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ccc4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801ccc6:	697b      	ldr	r3, [r7, #20]
 801ccc8:	f003 0303 	and.w	r3, r3, #3
 801cccc:	009b      	lsls	r3, r3, #2
 801ccce:	220f      	movs	r2, #15
 801ccd0:	fa02 f303 	lsl.w	r3, r2, r3
 801ccd4:	68ba      	ldr	r2, [r7, #8]
 801ccd6:	4013      	ands	r3, r2
 801ccd8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	4a54      	ldr	r2, [pc, #336]	; (801ce30 <HAL_GPIO_DeInit+0x1b0>)
 801ccde:	4293      	cmp	r3, r2
 801cce0:	d019      	beq.n	801cd16 <HAL_GPIO_DeInit+0x96>
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	4a53      	ldr	r2, [pc, #332]	; (801ce34 <HAL_GPIO_DeInit+0x1b4>)
 801cce6:	4293      	cmp	r3, r2
 801cce8:	d013      	beq.n	801cd12 <HAL_GPIO_DeInit+0x92>
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	4a52      	ldr	r2, [pc, #328]	; (801ce38 <HAL_GPIO_DeInit+0x1b8>)
 801ccee:	4293      	cmp	r3, r2
 801ccf0:	d00d      	beq.n	801cd0e <HAL_GPIO_DeInit+0x8e>
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	4a51      	ldr	r2, [pc, #324]	; (801ce3c <HAL_GPIO_DeInit+0x1bc>)
 801ccf6:	4293      	cmp	r3, r2
 801ccf8:	d007      	beq.n	801cd0a <HAL_GPIO_DeInit+0x8a>
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	4a50      	ldr	r2, [pc, #320]	; (801ce40 <HAL_GPIO_DeInit+0x1c0>)
 801ccfe:	4293      	cmp	r3, r2
 801cd00:	d101      	bne.n	801cd06 <HAL_GPIO_DeInit+0x86>
 801cd02:	2304      	movs	r3, #4
 801cd04:	e008      	b.n	801cd18 <HAL_GPIO_DeInit+0x98>
 801cd06:	2307      	movs	r3, #7
 801cd08:	e006      	b.n	801cd18 <HAL_GPIO_DeInit+0x98>
 801cd0a:	2303      	movs	r3, #3
 801cd0c:	e004      	b.n	801cd18 <HAL_GPIO_DeInit+0x98>
 801cd0e:	2302      	movs	r3, #2
 801cd10:	e002      	b.n	801cd18 <HAL_GPIO_DeInit+0x98>
 801cd12:	2301      	movs	r3, #1
 801cd14:	e000      	b.n	801cd18 <HAL_GPIO_DeInit+0x98>
 801cd16:	2300      	movs	r3, #0
 801cd18:	697a      	ldr	r2, [r7, #20]
 801cd1a:	f002 0203 	and.w	r2, r2, #3
 801cd1e:	0092      	lsls	r2, r2, #2
 801cd20:	4093      	lsls	r3, r2
 801cd22:	68ba      	ldr	r2, [r7, #8]
 801cd24:	429a      	cmp	r2, r3
 801cd26:	d132      	bne.n	801cd8e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801cd28:	4b46      	ldr	r3, [pc, #280]	; (801ce44 <HAL_GPIO_DeInit+0x1c4>)
 801cd2a:	681a      	ldr	r2, [r3, #0]
 801cd2c:	68fb      	ldr	r3, [r7, #12]
 801cd2e:	43db      	mvns	r3, r3
 801cd30:	4944      	ldr	r1, [pc, #272]	; (801ce44 <HAL_GPIO_DeInit+0x1c4>)
 801cd32:	4013      	ands	r3, r2
 801cd34:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801cd36:	4b43      	ldr	r3, [pc, #268]	; (801ce44 <HAL_GPIO_DeInit+0x1c4>)
 801cd38:	685a      	ldr	r2, [r3, #4]
 801cd3a:	68fb      	ldr	r3, [r7, #12]
 801cd3c:	43db      	mvns	r3, r3
 801cd3e:	4941      	ldr	r1, [pc, #260]	; (801ce44 <HAL_GPIO_DeInit+0x1c4>)
 801cd40:	4013      	ands	r3, r2
 801cd42:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801cd44:	4b3f      	ldr	r3, [pc, #252]	; (801ce44 <HAL_GPIO_DeInit+0x1c4>)
 801cd46:	68da      	ldr	r2, [r3, #12]
 801cd48:	68fb      	ldr	r3, [r7, #12]
 801cd4a:	43db      	mvns	r3, r3
 801cd4c:	493d      	ldr	r1, [pc, #244]	; (801ce44 <HAL_GPIO_DeInit+0x1c4>)
 801cd4e:	4013      	ands	r3, r2
 801cd50:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801cd52:	4b3c      	ldr	r3, [pc, #240]	; (801ce44 <HAL_GPIO_DeInit+0x1c4>)
 801cd54:	689a      	ldr	r2, [r3, #8]
 801cd56:	68fb      	ldr	r3, [r7, #12]
 801cd58:	43db      	mvns	r3, r3
 801cd5a:	493a      	ldr	r1, [pc, #232]	; (801ce44 <HAL_GPIO_DeInit+0x1c4>)
 801cd5c:	4013      	ands	r3, r2
 801cd5e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801cd60:	697b      	ldr	r3, [r7, #20]
 801cd62:	f003 0303 	and.w	r3, r3, #3
 801cd66:	009b      	lsls	r3, r3, #2
 801cd68:	220f      	movs	r2, #15
 801cd6a:	fa02 f303 	lsl.w	r3, r2, r3
 801cd6e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801cd70:	4a2e      	ldr	r2, [pc, #184]	; (801ce2c <HAL_GPIO_DeInit+0x1ac>)
 801cd72:	697b      	ldr	r3, [r7, #20]
 801cd74:	089b      	lsrs	r3, r3, #2
 801cd76:	3302      	adds	r3, #2
 801cd78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801cd7c:	68bb      	ldr	r3, [r7, #8]
 801cd7e:	43da      	mvns	r2, r3
 801cd80:	482a      	ldr	r0, [pc, #168]	; (801ce2c <HAL_GPIO_DeInit+0x1ac>)
 801cd82:	697b      	ldr	r3, [r7, #20]
 801cd84:	089b      	lsrs	r3, r3, #2
 801cd86:	400a      	ands	r2, r1
 801cd88:	3302      	adds	r3, #2
 801cd8a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801cd8e:	687b      	ldr	r3, [r7, #4]
 801cd90:	681a      	ldr	r2, [r3, #0]
 801cd92:	697b      	ldr	r3, [r7, #20]
 801cd94:	005b      	lsls	r3, r3, #1
 801cd96:	2103      	movs	r1, #3
 801cd98:	fa01 f303 	lsl.w	r3, r1, r3
 801cd9c:	43db      	mvns	r3, r3
 801cd9e:	401a      	ands	r2, r3
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801cda4:	697b      	ldr	r3, [r7, #20]
 801cda6:	08da      	lsrs	r2, r3, #3
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	3208      	adds	r2, #8
 801cdac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cdb0:	697b      	ldr	r3, [r7, #20]
 801cdb2:	f003 0307 	and.w	r3, r3, #7
 801cdb6:	009b      	lsls	r3, r3, #2
 801cdb8:	220f      	movs	r2, #15
 801cdba:	fa02 f303 	lsl.w	r3, r2, r3
 801cdbe:	43db      	mvns	r3, r3
 801cdc0:	697a      	ldr	r2, [r7, #20]
 801cdc2:	08d2      	lsrs	r2, r2, #3
 801cdc4:	4019      	ands	r1, r3
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	3208      	adds	r2, #8
 801cdca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	68da      	ldr	r2, [r3, #12]
 801cdd2:	697b      	ldr	r3, [r7, #20]
 801cdd4:	005b      	lsls	r3, r3, #1
 801cdd6:	2103      	movs	r1, #3
 801cdd8:	fa01 f303 	lsl.w	r3, r1, r3
 801cddc:	43db      	mvns	r3, r3
 801cdde:	401a      	ands	r2, r3
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	685a      	ldr	r2, [r3, #4]
 801cde8:	2101      	movs	r1, #1
 801cdea:	697b      	ldr	r3, [r7, #20]
 801cdec:	fa01 f303 	lsl.w	r3, r1, r3
 801cdf0:	43db      	mvns	r3, r3
 801cdf2:	401a      	ands	r2, r3
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801cdf8:	687b      	ldr	r3, [r7, #4]
 801cdfa:	689a      	ldr	r2, [r3, #8]
 801cdfc:	697b      	ldr	r3, [r7, #20]
 801cdfe:	005b      	lsls	r3, r3, #1
 801ce00:	2103      	movs	r1, #3
 801ce02:	fa01 f303 	lsl.w	r3, r1, r3
 801ce06:	43db      	mvns	r3, r3
 801ce08:	401a      	ands	r2, r3
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801ce0e:	697b      	ldr	r3, [r7, #20]
 801ce10:	3301      	adds	r3, #1
 801ce12:	617b      	str	r3, [r7, #20]
 801ce14:	697b      	ldr	r3, [r7, #20]
 801ce16:	2b0f      	cmp	r3, #15
 801ce18:	f67f af40 	bls.w	801cc9c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801ce1c:	bf00      	nop
 801ce1e:	bf00      	nop
 801ce20:	371c      	adds	r7, #28
 801ce22:	46bd      	mov	sp, r7
 801ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce28:	4770      	bx	lr
 801ce2a:	bf00      	nop
 801ce2c:	40013800 	.word	0x40013800
 801ce30:	40020000 	.word	0x40020000
 801ce34:	40020400 	.word	0x40020400
 801ce38:	40020800 	.word	0x40020800
 801ce3c:	40020c00 	.word	0x40020c00
 801ce40:	40021000 	.word	0x40021000
 801ce44:	40013c00 	.word	0x40013c00

0801ce48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ce48:	b480      	push	{r7}
 801ce4a:	b083      	sub	sp, #12
 801ce4c:	af00      	add	r7, sp, #0
 801ce4e:	6078      	str	r0, [r7, #4]
 801ce50:	460b      	mov	r3, r1
 801ce52:	807b      	strh	r3, [r7, #2]
 801ce54:	4613      	mov	r3, r2
 801ce56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801ce58:	787b      	ldrb	r3, [r7, #1]
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d003      	beq.n	801ce66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ce5e:	887a      	ldrh	r2, [r7, #2]
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801ce64:	e003      	b.n	801ce6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801ce66:	887b      	ldrh	r3, [r7, #2]
 801ce68:	041a      	lsls	r2, r3, #16
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	619a      	str	r2, [r3, #24]
}
 801ce6e:	bf00      	nop
 801ce70:	370c      	adds	r7, #12
 801ce72:	46bd      	mov	sp, r7
 801ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce78:	4770      	bx	lr
	...

0801ce7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801ce7c:	b580      	push	{r7, lr}
 801ce7e:	b082      	sub	sp, #8
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	4603      	mov	r3, r0
 801ce84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801ce86:	4b08      	ldr	r3, [pc, #32]	; (801cea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801ce88:	695a      	ldr	r2, [r3, #20]
 801ce8a:	88fb      	ldrh	r3, [r7, #6]
 801ce8c:	4013      	ands	r3, r2
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d006      	beq.n	801cea0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801ce92:	4a05      	ldr	r2, [pc, #20]	; (801cea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801ce94:	88fb      	ldrh	r3, [r7, #6]
 801ce96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801ce98:	88fb      	ldrh	r3, [r7, #6]
 801ce9a:	4618      	mov	r0, r3
 801ce9c:	f7e4 ff9a 	bl	8001dd4 <HAL_GPIO_EXTI_Callback>
  }
}
 801cea0:	bf00      	nop
 801cea2:	3708      	adds	r7, #8
 801cea4:	46bd      	mov	sp, r7
 801cea6:	bd80      	pop	{r7, pc}
 801cea8:	40013c00 	.word	0x40013c00

0801ceac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801ceac:	b580      	push	{r7, lr}
 801ceae:	b084      	sub	sp, #16
 801ceb0:	af00      	add	r7, sp, #0
 801ceb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	d101      	bne.n	801cebe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801ceba:	2301      	movs	r3, #1
 801cebc:	e12b      	b.n	801d116 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cec4:	b2db      	uxtb	r3, r3
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d106      	bne.n	801ced8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	2200      	movs	r2, #0
 801cece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801ced2:	6878      	ldr	r0, [r7, #4]
 801ced4:	f7e6 fa5e 	bl	8003394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	2224      	movs	r2, #36	; 0x24
 801cedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	681b      	ldr	r3, [r3, #0]
 801cee4:	681a      	ldr	r2, [r3, #0]
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	f022 0201 	bic.w	r2, r2, #1
 801ceee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	681b      	ldr	r3, [r3, #0]
 801cef4:	681a      	ldr	r2, [r3, #0]
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801cefe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	681a      	ldr	r2, [r3, #0]
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	681b      	ldr	r3, [r3, #0]
 801cf0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801cf0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801cf10:	f003 fb62 	bl	80205d8 <HAL_RCC_GetPCLK1Freq>
 801cf14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	685b      	ldr	r3, [r3, #4]
 801cf1a:	4a81      	ldr	r2, [pc, #516]	; (801d120 <HAL_I2C_Init+0x274>)
 801cf1c:	4293      	cmp	r3, r2
 801cf1e:	d807      	bhi.n	801cf30 <HAL_I2C_Init+0x84>
 801cf20:	68fb      	ldr	r3, [r7, #12]
 801cf22:	4a80      	ldr	r2, [pc, #512]	; (801d124 <HAL_I2C_Init+0x278>)
 801cf24:	4293      	cmp	r3, r2
 801cf26:	bf94      	ite	ls
 801cf28:	2301      	movls	r3, #1
 801cf2a:	2300      	movhi	r3, #0
 801cf2c:	b2db      	uxtb	r3, r3
 801cf2e:	e006      	b.n	801cf3e <HAL_I2C_Init+0x92>
 801cf30:	68fb      	ldr	r3, [r7, #12]
 801cf32:	4a7d      	ldr	r2, [pc, #500]	; (801d128 <HAL_I2C_Init+0x27c>)
 801cf34:	4293      	cmp	r3, r2
 801cf36:	bf94      	ite	ls
 801cf38:	2301      	movls	r3, #1
 801cf3a:	2300      	movhi	r3, #0
 801cf3c:	b2db      	uxtb	r3, r3
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	d001      	beq.n	801cf46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801cf42:	2301      	movs	r3, #1
 801cf44:	e0e7      	b.n	801d116 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801cf46:	68fb      	ldr	r3, [r7, #12]
 801cf48:	4a78      	ldr	r2, [pc, #480]	; (801d12c <HAL_I2C_Init+0x280>)
 801cf4a:	fba2 2303 	umull	r2, r3, r2, r3
 801cf4e:	0c9b      	lsrs	r3, r3, #18
 801cf50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	685b      	ldr	r3, [r3, #4]
 801cf58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	68ba      	ldr	r2, [r7, #8]
 801cf62:	430a      	orrs	r2, r1
 801cf64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	681b      	ldr	r3, [r3, #0]
 801cf6a:	6a1b      	ldr	r3, [r3, #32]
 801cf6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	685b      	ldr	r3, [r3, #4]
 801cf74:	4a6a      	ldr	r2, [pc, #424]	; (801d120 <HAL_I2C_Init+0x274>)
 801cf76:	4293      	cmp	r3, r2
 801cf78:	d802      	bhi.n	801cf80 <HAL_I2C_Init+0xd4>
 801cf7a:	68bb      	ldr	r3, [r7, #8]
 801cf7c:	3301      	adds	r3, #1
 801cf7e:	e009      	b.n	801cf94 <HAL_I2C_Init+0xe8>
 801cf80:	68bb      	ldr	r3, [r7, #8]
 801cf82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801cf86:	fb02 f303 	mul.w	r3, r2, r3
 801cf8a:	4a69      	ldr	r2, [pc, #420]	; (801d130 <HAL_I2C_Init+0x284>)
 801cf8c:	fba2 2303 	umull	r2, r3, r2, r3
 801cf90:	099b      	lsrs	r3, r3, #6
 801cf92:	3301      	adds	r3, #1
 801cf94:	687a      	ldr	r2, [r7, #4]
 801cf96:	6812      	ldr	r2, [r2, #0]
 801cf98:	430b      	orrs	r3, r1
 801cf9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	69db      	ldr	r3, [r3, #28]
 801cfa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801cfa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	685b      	ldr	r3, [r3, #4]
 801cfae:	495c      	ldr	r1, [pc, #368]	; (801d120 <HAL_I2C_Init+0x274>)
 801cfb0:	428b      	cmp	r3, r1
 801cfb2:	d819      	bhi.n	801cfe8 <HAL_I2C_Init+0x13c>
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	1e59      	subs	r1, r3, #1
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	685b      	ldr	r3, [r3, #4]
 801cfbc:	005b      	lsls	r3, r3, #1
 801cfbe:	fbb1 f3f3 	udiv	r3, r1, r3
 801cfc2:	1c59      	adds	r1, r3, #1
 801cfc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 801cfc8:	400b      	ands	r3, r1
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	d00a      	beq.n	801cfe4 <HAL_I2C_Init+0x138>
 801cfce:	68fb      	ldr	r3, [r7, #12]
 801cfd0:	1e59      	subs	r1, r3, #1
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	685b      	ldr	r3, [r3, #4]
 801cfd6:	005b      	lsls	r3, r3, #1
 801cfd8:	fbb1 f3f3 	udiv	r3, r1, r3
 801cfdc:	3301      	adds	r3, #1
 801cfde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801cfe2:	e051      	b.n	801d088 <HAL_I2C_Init+0x1dc>
 801cfe4:	2304      	movs	r3, #4
 801cfe6:	e04f      	b.n	801d088 <HAL_I2C_Init+0x1dc>
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	689b      	ldr	r3, [r3, #8]
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d111      	bne.n	801d014 <HAL_I2C_Init+0x168>
 801cff0:	68fb      	ldr	r3, [r7, #12]
 801cff2:	1e58      	subs	r0, r3, #1
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	6859      	ldr	r1, [r3, #4]
 801cff8:	460b      	mov	r3, r1
 801cffa:	005b      	lsls	r3, r3, #1
 801cffc:	440b      	add	r3, r1
 801cffe:	fbb0 f3f3 	udiv	r3, r0, r3
 801d002:	3301      	adds	r3, #1
 801d004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d008:	2b00      	cmp	r3, #0
 801d00a:	bf0c      	ite	eq
 801d00c:	2301      	moveq	r3, #1
 801d00e:	2300      	movne	r3, #0
 801d010:	b2db      	uxtb	r3, r3
 801d012:	e012      	b.n	801d03a <HAL_I2C_Init+0x18e>
 801d014:	68fb      	ldr	r3, [r7, #12]
 801d016:	1e58      	subs	r0, r3, #1
 801d018:	687b      	ldr	r3, [r7, #4]
 801d01a:	6859      	ldr	r1, [r3, #4]
 801d01c:	460b      	mov	r3, r1
 801d01e:	009b      	lsls	r3, r3, #2
 801d020:	440b      	add	r3, r1
 801d022:	0099      	lsls	r1, r3, #2
 801d024:	440b      	add	r3, r1
 801d026:	fbb0 f3f3 	udiv	r3, r0, r3
 801d02a:	3301      	adds	r3, #1
 801d02c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d030:	2b00      	cmp	r3, #0
 801d032:	bf0c      	ite	eq
 801d034:	2301      	moveq	r3, #1
 801d036:	2300      	movne	r3, #0
 801d038:	b2db      	uxtb	r3, r3
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	d001      	beq.n	801d042 <HAL_I2C_Init+0x196>
 801d03e:	2301      	movs	r3, #1
 801d040:	e022      	b.n	801d088 <HAL_I2C_Init+0x1dc>
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	689b      	ldr	r3, [r3, #8]
 801d046:	2b00      	cmp	r3, #0
 801d048:	d10e      	bne.n	801d068 <HAL_I2C_Init+0x1bc>
 801d04a:	68fb      	ldr	r3, [r7, #12]
 801d04c:	1e58      	subs	r0, r3, #1
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	6859      	ldr	r1, [r3, #4]
 801d052:	460b      	mov	r3, r1
 801d054:	005b      	lsls	r3, r3, #1
 801d056:	440b      	add	r3, r1
 801d058:	fbb0 f3f3 	udiv	r3, r0, r3
 801d05c:	3301      	adds	r3, #1
 801d05e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801d066:	e00f      	b.n	801d088 <HAL_I2C_Init+0x1dc>
 801d068:	68fb      	ldr	r3, [r7, #12]
 801d06a:	1e58      	subs	r0, r3, #1
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	6859      	ldr	r1, [r3, #4]
 801d070:	460b      	mov	r3, r1
 801d072:	009b      	lsls	r3, r3, #2
 801d074:	440b      	add	r3, r1
 801d076:	0099      	lsls	r1, r3, #2
 801d078:	440b      	add	r3, r1
 801d07a:	fbb0 f3f3 	udiv	r3, r0, r3
 801d07e:	3301      	adds	r3, #1
 801d080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801d088:	6879      	ldr	r1, [r7, #4]
 801d08a:	6809      	ldr	r1, [r1, #0]
 801d08c:	4313      	orrs	r3, r2
 801d08e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	681b      	ldr	r3, [r3, #0]
 801d094:	681b      	ldr	r3, [r3, #0]
 801d096:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	69da      	ldr	r2, [r3, #28]
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	6a1b      	ldr	r3, [r3, #32]
 801d0a2:	431a      	orrs	r2, r3
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	681b      	ldr	r3, [r3, #0]
 801d0a8:	430a      	orrs	r2, r1
 801d0aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	689b      	ldr	r3, [r3, #8]
 801d0b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801d0b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801d0ba:	687a      	ldr	r2, [r7, #4]
 801d0bc:	6911      	ldr	r1, [r2, #16]
 801d0be:	687a      	ldr	r2, [r7, #4]
 801d0c0:	68d2      	ldr	r2, [r2, #12]
 801d0c2:	4311      	orrs	r1, r2
 801d0c4:	687a      	ldr	r2, [r7, #4]
 801d0c6:	6812      	ldr	r2, [r2, #0]
 801d0c8:	430b      	orrs	r3, r1
 801d0ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	68db      	ldr	r3, [r3, #12]
 801d0d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	695a      	ldr	r2, [r3, #20]
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	699b      	ldr	r3, [r3, #24]
 801d0de:	431a      	orrs	r2, r3
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	430a      	orrs	r2, r1
 801d0e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	681a      	ldr	r2, [r3, #0]
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	f042 0201 	orr.w	r2, r2, #1
 801d0f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	2200      	movs	r2, #0
 801d0fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	2220      	movs	r2, #32
 801d102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	2200      	movs	r2, #0
 801d10a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	2200      	movs	r2, #0
 801d110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801d114:	2300      	movs	r3, #0
}
 801d116:	4618      	mov	r0, r3
 801d118:	3710      	adds	r7, #16
 801d11a:	46bd      	mov	sp, r7
 801d11c:	bd80      	pop	{r7, pc}
 801d11e:	bf00      	nop
 801d120:	000186a0 	.word	0x000186a0
 801d124:	001e847f 	.word	0x001e847f
 801d128:	003d08ff 	.word	0x003d08ff
 801d12c:	431bde83 	.word	0x431bde83
 801d130:	10624dd3 	.word	0x10624dd3

0801d134 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801d134:	b580      	push	{r7, lr}
 801d136:	b086      	sub	sp, #24
 801d138:	af00      	add	r7, sp, #0
 801d13a:	60f8      	str	r0, [r7, #12]
 801d13c:	607a      	str	r2, [r7, #4]
 801d13e:	461a      	mov	r2, r3
 801d140:	460b      	mov	r3, r1
 801d142:	817b      	strh	r3, [r7, #10]
 801d144:	4613      	mov	r3, r2
 801d146:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801d148:	2300      	movs	r3, #0
 801d14a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d14c:	68fb      	ldr	r3, [r7, #12]
 801d14e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d152:	b2db      	uxtb	r3, r3
 801d154:	2b20      	cmp	r3, #32
 801d156:	f040 810d 	bne.w	801d374 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801d15a:	4b89      	ldr	r3, [pc, #548]	; (801d380 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 801d15c:	681b      	ldr	r3, [r3, #0]
 801d15e:	08db      	lsrs	r3, r3, #3
 801d160:	4a88      	ldr	r2, [pc, #544]	; (801d384 <HAL_I2C_Master_Transmit_DMA+0x250>)
 801d162:	fba2 2303 	umull	r2, r3, r2, r3
 801d166:	0a1a      	lsrs	r2, r3, #8
 801d168:	4613      	mov	r3, r2
 801d16a:	009b      	lsls	r3, r3, #2
 801d16c:	4413      	add	r3, r2
 801d16e:	009a      	lsls	r2, r3, #2
 801d170:	4413      	add	r3, r2
 801d172:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801d174:	693b      	ldr	r3, [r7, #16]
 801d176:	3b01      	subs	r3, #1
 801d178:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801d17a:	693b      	ldr	r3, [r7, #16]
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	d116      	bne.n	801d1ae <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801d180:	68fb      	ldr	r3, [r7, #12]
 801d182:	2200      	movs	r2, #0
 801d184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	2220      	movs	r2, #32
 801d18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	2200      	movs	r2, #0
 801d192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d19a:	f043 0220 	orr.w	r2, r3, #32
 801d19e:	68fb      	ldr	r3, [r7, #12]
 801d1a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d1a2:	68fb      	ldr	r3, [r7, #12]
 801d1a4:	2200      	movs	r2, #0
 801d1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d1aa:	2301      	movs	r3, #1
 801d1ac:	e0e3      	b.n	801d376 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801d1ae:	68fb      	ldr	r3, [r7, #12]
 801d1b0:	681b      	ldr	r3, [r3, #0]
 801d1b2:	699b      	ldr	r3, [r3, #24]
 801d1b4:	f003 0302 	and.w	r3, r3, #2
 801d1b8:	2b02      	cmp	r3, #2
 801d1ba:	d0db      	beq.n	801d174 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d1c2:	2b01      	cmp	r3, #1
 801d1c4:	d101      	bne.n	801d1ca <HAL_I2C_Master_Transmit_DMA+0x96>
 801d1c6:	2302      	movs	r3, #2
 801d1c8:	e0d5      	b.n	801d376 <HAL_I2C_Master_Transmit_DMA+0x242>
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	2201      	movs	r2, #1
 801d1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801d1d2:	68fb      	ldr	r3, [r7, #12]
 801d1d4:	681b      	ldr	r3, [r3, #0]
 801d1d6:	681b      	ldr	r3, [r3, #0]
 801d1d8:	f003 0301 	and.w	r3, r3, #1
 801d1dc:	2b01      	cmp	r3, #1
 801d1de:	d007      	beq.n	801d1f0 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801d1e0:	68fb      	ldr	r3, [r7, #12]
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	681a      	ldr	r2, [r3, #0]
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	681b      	ldr	r3, [r3, #0]
 801d1ea:	f042 0201 	orr.w	r2, r2, #1
 801d1ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801d1f0:	68fb      	ldr	r3, [r7, #12]
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	681a      	ldr	r2, [r3, #0]
 801d1f6:	68fb      	ldr	r3, [r7, #12]
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d1fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801d200:	68fb      	ldr	r3, [r7, #12]
 801d202:	2221      	movs	r2, #33	; 0x21
 801d204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801d208:	68fb      	ldr	r3, [r7, #12]
 801d20a:	2210      	movs	r2, #16
 801d20c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d210:	68fb      	ldr	r3, [r7, #12]
 801d212:	2200      	movs	r2, #0
 801d214:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801d216:	68fb      	ldr	r3, [r7, #12]
 801d218:	687a      	ldr	r2, [r7, #4]
 801d21a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801d21c:	68fb      	ldr	r3, [r7, #12]
 801d21e:	893a      	ldrh	r2, [r7, #8]
 801d220:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801d222:	68fb      	ldr	r3, [r7, #12]
 801d224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d226:	b29a      	uxth	r2, r3
 801d228:	68fb      	ldr	r3, [r7, #12]
 801d22a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801d22c:	68fb      	ldr	r3, [r7, #12]
 801d22e:	4a56      	ldr	r2, [pc, #344]	; (801d388 <HAL_I2C_Master_Transmit_DMA+0x254>)
 801d230:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801d232:	897a      	ldrh	r2, [r7, #10]
 801d234:	68fb      	ldr	r3, [r7, #12]
 801d236:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801d238:	68fb      	ldr	r3, [r7, #12]
 801d23a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d23c:	2b00      	cmp	r3, #0
 801d23e:	d07b      	beq.n	801d338 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 801d240:	68fb      	ldr	r3, [r7, #12]
 801d242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d244:	2b00      	cmp	r3, #0
 801d246:	d02a      	beq.n	801d29e <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801d248:	68fb      	ldr	r3, [r7, #12]
 801d24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d24c:	4a4f      	ldr	r2, [pc, #316]	; (801d38c <HAL_I2C_Master_Transmit_DMA+0x258>)
 801d24e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801d250:	68fb      	ldr	r3, [r7, #12]
 801d252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d254:	4a4e      	ldr	r2, [pc, #312]	; (801d390 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 801d256:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d25c:	2200      	movs	r2, #0
 801d25e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801d260:	68fb      	ldr	r3, [r7, #12]
 801d262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d264:	2200      	movs	r2, #0
 801d266:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801d268:	68fb      	ldr	r3, [r7, #12]
 801d26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d26c:	2200      	movs	r2, #0
 801d26e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801d270:	68fb      	ldr	r3, [r7, #12]
 801d272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d274:	2200      	movs	r2, #0
 801d276:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801d27c:	68fb      	ldr	r3, [r7, #12]
 801d27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d280:	4619      	mov	r1, r3
 801d282:	68fb      	ldr	r3, [r7, #12]
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	3310      	adds	r3, #16
 801d288:	461a      	mov	r2, r3
 801d28a:	68fb      	ldr	r3, [r7, #12]
 801d28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d28e:	f7ff f805 	bl	801c29c <HAL_DMA_Start_IT>
 801d292:	4603      	mov	r3, r0
 801d294:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801d296:	7dfb      	ldrb	r3, [r7, #23]
 801d298:	2b00      	cmp	r3, #0
 801d29a:	d139      	bne.n	801d310 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 801d29c:	e013      	b.n	801d2c6 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801d29e:	68fb      	ldr	r3, [r7, #12]
 801d2a0:	2220      	movs	r2, #32
 801d2a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d2a6:	68fb      	ldr	r3, [r7, #12]
 801d2a8:	2200      	movs	r2, #0
 801d2aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801d2ae:	68fb      	ldr	r3, [r7, #12]
 801d2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d2b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801d2b6:	68fb      	ldr	r3, [r7, #12]
 801d2b8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	2200      	movs	r2, #0
 801d2be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801d2c2:	2301      	movs	r3, #1
 801d2c4:	e057      	b.n	801d376 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d2c6:	68fb      	ldr	r3, [r7, #12]
 801d2c8:	2200      	movs	r2, #0
 801d2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	681b      	ldr	r3, [r3, #0]
 801d2d2:	685a      	ldr	r2, [r3, #4]
 801d2d4:	68fb      	ldr	r3, [r7, #12]
 801d2d6:	681b      	ldr	r3, [r3, #0]
 801d2d8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801d2dc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	681b      	ldr	r3, [r3, #0]
 801d2e2:	685a      	ldr	r2, [r3, #4]
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d2ec:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d2ee:	68fb      	ldr	r3, [r7, #12]
 801d2f0:	681b      	ldr	r3, [r3, #0]
 801d2f2:	681a      	ldr	r2, [r3, #0]
 801d2f4:	68fb      	ldr	r3, [r7, #12]
 801d2f6:	681b      	ldr	r3, [r3, #0]
 801d2f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d2fc:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	681a      	ldr	r2, [r3, #0]
 801d304:	68fb      	ldr	r3, [r7, #12]
 801d306:	681b      	ldr	r3, [r3, #0]
 801d308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d30c:	601a      	str	r2, [r3, #0]
 801d30e:	e02f      	b.n	801d370 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801d310:	68fb      	ldr	r3, [r7, #12]
 801d312:	2220      	movs	r2, #32
 801d314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d318:	68fb      	ldr	r3, [r7, #12]
 801d31a:	2200      	movs	r2, #0
 801d31c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801d320:	68fb      	ldr	r3, [r7, #12]
 801d322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d324:	f043 0210 	orr.w	r2, r3, #16
 801d328:	68fb      	ldr	r3, [r7, #12]
 801d32a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	2200      	movs	r2, #0
 801d330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d334:	2301      	movs	r3, #1
 801d336:	e01e      	b.n	801d376 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d338:	68fb      	ldr	r3, [r7, #12]
 801d33a:	681b      	ldr	r3, [r3, #0]
 801d33c:	681a      	ldr	r2, [r3, #0]
 801d33e:	68fb      	ldr	r3, [r7, #12]
 801d340:	681b      	ldr	r3, [r3, #0]
 801d342:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d346:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801d348:	68fb      	ldr	r3, [r7, #12]
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	681a      	ldr	r2, [r3, #0]
 801d34e:	68fb      	ldr	r3, [r7, #12]
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d356:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801d358:	68fb      	ldr	r3, [r7, #12]
 801d35a:	2200      	movs	r2, #0
 801d35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d360:	68fb      	ldr	r3, [r7, #12]
 801d362:	681b      	ldr	r3, [r3, #0]
 801d364:	685a      	ldr	r2, [r3, #4]
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	681b      	ldr	r3, [r3, #0]
 801d36a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801d36e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 801d370:	2300      	movs	r3, #0
 801d372:	e000      	b.n	801d376 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801d374:	2302      	movs	r3, #2
  }
}
 801d376:	4618      	mov	r0, r3
 801d378:	3718      	adds	r7, #24
 801d37a:	46bd      	mov	sp, r7
 801d37c:	bd80      	pop	{r7, pc}
 801d37e:	bf00      	nop
 801d380:	20000020 	.word	0x20000020
 801d384:	14f8b589 	.word	0x14f8b589
 801d388:	ffff0000 	.word	0xffff0000
 801d38c:	0801f65d 	.word	0x0801f65d
 801d390:	0801f807 	.word	0x0801f807

0801d394 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801d394:	b580      	push	{r7, lr}
 801d396:	b086      	sub	sp, #24
 801d398:	af00      	add	r7, sp, #0
 801d39a:	60f8      	str	r0, [r7, #12]
 801d39c:	607a      	str	r2, [r7, #4]
 801d39e:	461a      	mov	r2, r3
 801d3a0:	460b      	mov	r3, r1
 801d3a2:	817b      	strh	r3, [r7, #10]
 801d3a4:	4613      	mov	r3, r2
 801d3a6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d3ac:	68fb      	ldr	r3, [r7, #12]
 801d3ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d3b2:	b2db      	uxtb	r3, r3
 801d3b4:	2b20      	cmp	r3, #32
 801d3b6:	f040 810d 	bne.w	801d5d4 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801d3ba:	4b89      	ldr	r3, [pc, #548]	; (801d5e0 <HAL_I2C_Master_Receive_DMA+0x24c>)
 801d3bc:	681b      	ldr	r3, [r3, #0]
 801d3be:	08db      	lsrs	r3, r3, #3
 801d3c0:	4a88      	ldr	r2, [pc, #544]	; (801d5e4 <HAL_I2C_Master_Receive_DMA+0x250>)
 801d3c2:	fba2 2303 	umull	r2, r3, r2, r3
 801d3c6:	0a1a      	lsrs	r2, r3, #8
 801d3c8:	4613      	mov	r3, r2
 801d3ca:	009b      	lsls	r3, r3, #2
 801d3cc:	4413      	add	r3, r2
 801d3ce:	009a      	lsls	r2, r3, #2
 801d3d0:	4413      	add	r3, r2
 801d3d2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801d3d4:	693b      	ldr	r3, [r7, #16]
 801d3d6:	3b01      	subs	r3, #1
 801d3d8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801d3da:	693b      	ldr	r3, [r7, #16]
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	d116      	bne.n	801d40e <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801d3e0:	68fb      	ldr	r3, [r7, #12]
 801d3e2:	2200      	movs	r2, #0
 801d3e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801d3e6:	68fb      	ldr	r3, [r7, #12]
 801d3e8:	2220      	movs	r2, #32
 801d3ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	2200      	movs	r2, #0
 801d3f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d3fa:	f043 0220 	orr.w	r2, r3, #32
 801d3fe:	68fb      	ldr	r3, [r7, #12]
 801d400:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	2200      	movs	r2, #0
 801d406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d40a:	2301      	movs	r3, #1
 801d40c:	e0e3      	b.n	801d5d6 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	681b      	ldr	r3, [r3, #0]
 801d412:	699b      	ldr	r3, [r3, #24]
 801d414:	f003 0302 	and.w	r3, r3, #2
 801d418:	2b02      	cmp	r3, #2
 801d41a:	d0db      	beq.n	801d3d4 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d41c:	68fb      	ldr	r3, [r7, #12]
 801d41e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d422:	2b01      	cmp	r3, #1
 801d424:	d101      	bne.n	801d42a <HAL_I2C_Master_Receive_DMA+0x96>
 801d426:	2302      	movs	r3, #2
 801d428:	e0d5      	b.n	801d5d6 <HAL_I2C_Master_Receive_DMA+0x242>
 801d42a:	68fb      	ldr	r3, [r7, #12]
 801d42c:	2201      	movs	r2, #1
 801d42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801d432:	68fb      	ldr	r3, [r7, #12]
 801d434:	681b      	ldr	r3, [r3, #0]
 801d436:	681b      	ldr	r3, [r3, #0]
 801d438:	f003 0301 	and.w	r3, r3, #1
 801d43c:	2b01      	cmp	r3, #1
 801d43e:	d007      	beq.n	801d450 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801d440:	68fb      	ldr	r3, [r7, #12]
 801d442:	681b      	ldr	r3, [r3, #0]
 801d444:	681a      	ldr	r2, [r3, #0]
 801d446:	68fb      	ldr	r3, [r7, #12]
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	f042 0201 	orr.w	r2, r2, #1
 801d44e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801d450:	68fb      	ldr	r3, [r7, #12]
 801d452:	681b      	ldr	r3, [r3, #0]
 801d454:	681a      	ldr	r2, [r3, #0]
 801d456:	68fb      	ldr	r3, [r7, #12]
 801d458:	681b      	ldr	r3, [r3, #0]
 801d45a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d45e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801d460:	68fb      	ldr	r3, [r7, #12]
 801d462:	2222      	movs	r2, #34	; 0x22
 801d464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801d468:	68fb      	ldr	r3, [r7, #12]
 801d46a:	2210      	movs	r2, #16
 801d46c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	2200      	movs	r2, #0
 801d474:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801d476:	68fb      	ldr	r3, [r7, #12]
 801d478:	687a      	ldr	r2, [r7, #4]
 801d47a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801d47c:	68fb      	ldr	r3, [r7, #12]
 801d47e:	893a      	ldrh	r2, [r7, #8]
 801d480:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d486:	b29a      	uxth	r2, r3
 801d488:	68fb      	ldr	r3, [r7, #12]
 801d48a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801d48c:	68fb      	ldr	r3, [r7, #12]
 801d48e:	4a56      	ldr	r2, [pc, #344]	; (801d5e8 <HAL_I2C_Master_Receive_DMA+0x254>)
 801d490:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801d492:	897a      	ldrh	r2, [r7, #10]
 801d494:	68fb      	ldr	r3, [r7, #12]
 801d496:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d07b      	beq.n	801d598 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 801d4a0:	68fb      	ldr	r3, [r7, #12]
 801d4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d02a      	beq.n	801d4fe <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4ac:	4a4f      	ldr	r2, [pc, #316]	; (801d5ec <HAL_I2C_Master_Receive_DMA+0x258>)
 801d4ae:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801d4b0:	68fb      	ldr	r3, [r7, #12]
 801d4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4b4:	4a4e      	ldr	r2, [pc, #312]	; (801d5f0 <HAL_I2C_Master_Receive_DMA+0x25c>)
 801d4b6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4bc:	2200      	movs	r2, #0
 801d4be:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4c4:	2200      	movs	r2, #0
 801d4c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801d4c8:	68fb      	ldr	r3, [r7, #12]
 801d4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4cc:	2200      	movs	r2, #0
 801d4ce:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801d4d0:	68fb      	ldr	r3, [r7, #12]
 801d4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4d4:	2200      	movs	r2, #0
 801d4d6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801d4d8:	68fb      	ldr	r3, [r7, #12]
 801d4da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801d4dc:	68fb      	ldr	r3, [r7, #12]
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	3310      	adds	r3, #16
 801d4e2:	4619      	mov	r1, r3
 801d4e4:	68fb      	ldr	r3, [r7, #12]
 801d4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4e8:	461a      	mov	r2, r3
 801d4ea:	68fb      	ldr	r3, [r7, #12]
 801d4ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d4ee:	f7fe fed5 	bl	801c29c <HAL_DMA_Start_IT>
 801d4f2:	4603      	mov	r3, r0
 801d4f4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801d4f6:	7dfb      	ldrb	r3, [r7, #23]
 801d4f8:	2b00      	cmp	r3, #0
 801d4fa:	d139      	bne.n	801d570 <HAL_I2C_Master_Receive_DMA+0x1dc>
 801d4fc:	e013      	b.n	801d526 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801d4fe:	68fb      	ldr	r3, [r7, #12]
 801d500:	2220      	movs	r2, #32
 801d502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d506:	68fb      	ldr	r3, [r7, #12]
 801d508:	2200      	movs	r2, #0
 801d50a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801d50e:	68fb      	ldr	r3, [r7, #12]
 801d510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d512:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801d516:	68fb      	ldr	r3, [r7, #12]
 801d518:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801d51a:	68fb      	ldr	r3, [r7, #12]
 801d51c:	2200      	movs	r2, #0
 801d51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801d522:	2301      	movs	r3, #1
 801d524:	e057      	b.n	801d5d6 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d526:	68fb      	ldr	r3, [r7, #12]
 801d528:	681b      	ldr	r3, [r3, #0]
 801d52a:	681a      	ldr	r2, [r3, #0]
 801d52c:	68fb      	ldr	r3, [r7, #12]
 801d52e:	681b      	ldr	r3, [r3, #0]
 801d530:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d534:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801d536:	68fb      	ldr	r3, [r7, #12]
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	681a      	ldr	r2, [r3, #0]
 801d53c:	68fb      	ldr	r3, [r7, #12]
 801d53e:	681b      	ldr	r3, [r3, #0]
 801d540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d544:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d546:	68fb      	ldr	r3, [r7, #12]
 801d548:	2200      	movs	r2, #0
 801d54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	681b      	ldr	r3, [r3, #0]
 801d552:	685a      	ldr	r2, [r3, #4]
 801d554:	68fb      	ldr	r3, [r7, #12]
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801d55c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	681b      	ldr	r3, [r3, #0]
 801d562:	685a      	ldr	r2, [r3, #4]
 801d564:	68fb      	ldr	r3, [r7, #12]
 801d566:	681b      	ldr	r3, [r3, #0]
 801d568:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d56c:	605a      	str	r2, [r3, #4]
 801d56e:	e02f      	b.n	801d5d0 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801d570:	68fb      	ldr	r3, [r7, #12]
 801d572:	2220      	movs	r2, #32
 801d574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d578:	68fb      	ldr	r3, [r7, #12]
 801d57a:	2200      	movs	r2, #0
 801d57c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801d580:	68fb      	ldr	r3, [r7, #12]
 801d582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d584:	f043 0210 	orr.w	r2, r3, #16
 801d588:	68fb      	ldr	r3, [r7, #12]
 801d58a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d58c:	68fb      	ldr	r3, [r7, #12]
 801d58e:	2200      	movs	r2, #0
 801d590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d594:	2301      	movs	r3, #1
 801d596:	e01e      	b.n	801d5d6 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801d598:	68fb      	ldr	r3, [r7, #12]
 801d59a:	2200      	movs	r2, #0
 801d59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d5a0:	68fb      	ldr	r3, [r7, #12]
 801d5a2:	681b      	ldr	r3, [r3, #0]
 801d5a4:	685a      	ldr	r2, [r3, #4]
 801d5a6:	68fb      	ldr	r3, [r7, #12]
 801d5a8:	681b      	ldr	r3, [r3, #0]
 801d5aa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801d5ae:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d5b0:	68fb      	ldr	r3, [r7, #12]
 801d5b2:	681b      	ldr	r3, [r3, #0]
 801d5b4:	681a      	ldr	r2, [r3, #0]
 801d5b6:	68fb      	ldr	r3, [r7, #12]
 801d5b8:	681b      	ldr	r3, [r3, #0]
 801d5ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d5be:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801d5c0:	68fb      	ldr	r3, [r7, #12]
 801d5c2:	681b      	ldr	r3, [r3, #0]
 801d5c4:	681a      	ldr	r2, [r3, #0]
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	681b      	ldr	r3, [r3, #0]
 801d5ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d5ce:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 801d5d0:	2300      	movs	r3, #0
 801d5d2:	e000      	b.n	801d5d6 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801d5d4:	2302      	movs	r3, #2
  }
}
 801d5d6:	4618      	mov	r0, r3
 801d5d8:	3718      	adds	r7, #24
 801d5da:	46bd      	mov	sp, r7
 801d5dc:	bd80      	pop	{r7, pc}
 801d5de:	bf00      	nop
 801d5e0:	20000020 	.word	0x20000020
 801d5e4:	14f8b589 	.word	0x14f8b589
 801d5e8:	ffff0000 	.word	0xffff0000
 801d5ec:	0801f65d 	.word	0x0801f65d
 801d5f0:	0801f807 	.word	0x0801f807

0801d5f4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801d5f4:	b580      	push	{r7, lr}
 801d5f6:	b08a      	sub	sp, #40	; 0x28
 801d5f8:	af02      	add	r7, sp, #8
 801d5fa:	60f8      	str	r0, [r7, #12]
 801d5fc:	4608      	mov	r0, r1
 801d5fe:	4611      	mov	r1, r2
 801d600:	461a      	mov	r2, r3
 801d602:	4603      	mov	r3, r0
 801d604:	817b      	strh	r3, [r7, #10]
 801d606:	460b      	mov	r3, r1
 801d608:	813b      	strh	r3, [r7, #8]
 801d60a:	4613      	mov	r3, r2
 801d60c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 801d60e:	2300      	movs	r3, #0
 801d610:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801d612:	f7fe f843 	bl	801b69c <HAL_GetTick>
 801d616:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d618:	68fb      	ldr	r3, [r7, #12]
 801d61a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d61e:	b2db      	uxtb	r3, r3
 801d620:	2b20      	cmp	r3, #32
 801d622:	f040 8145 	bne.w	801d8b0 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801d626:	4b9d      	ldr	r3, [pc, #628]	; (801d89c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 801d628:	681b      	ldr	r3, [r3, #0]
 801d62a:	08db      	lsrs	r3, r3, #3
 801d62c:	4a9c      	ldr	r2, [pc, #624]	; (801d8a0 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 801d62e:	fba2 2303 	umull	r2, r3, r2, r3
 801d632:	0a1a      	lsrs	r2, r3, #8
 801d634:	4613      	mov	r3, r2
 801d636:	009b      	lsls	r3, r3, #2
 801d638:	4413      	add	r3, r2
 801d63a:	009a      	lsls	r2, r3, #2
 801d63c:	4413      	add	r3, r2
 801d63e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 801d640:	697b      	ldr	r3, [r7, #20]
 801d642:	3b01      	subs	r3, #1
 801d644:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801d646:	697b      	ldr	r3, [r7, #20]
 801d648:	2b00      	cmp	r3, #0
 801d64a:	d116      	bne.n	801d67a <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801d64c:	68fb      	ldr	r3, [r7, #12]
 801d64e:	2200      	movs	r2, #0
 801d650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	2220      	movs	r2, #32
 801d656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d65a:	68fb      	ldr	r3, [r7, #12]
 801d65c:	2200      	movs	r2, #0
 801d65e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801d662:	68fb      	ldr	r3, [r7, #12]
 801d664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d666:	f043 0220 	orr.w	r2, r3, #32
 801d66a:	68fb      	ldr	r3, [r7, #12]
 801d66c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	2200      	movs	r2, #0
 801d672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d676:	2301      	movs	r3, #1
 801d678:	e11b      	b.n	801d8b2 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801d67a:	68fb      	ldr	r3, [r7, #12]
 801d67c:	681b      	ldr	r3, [r3, #0]
 801d67e:	699b      	ldr	r3, [r3, #24]
 801d680:	f003 0302 	and.w	r3, r3, #2
 801d684:	2b02      	cmp	r3, #2
 801d686:	d0db      	beq.n	801d640 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d688:	68fb      	ldr	r3, [r7, #12]
 801d68a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d68e:	2b01      	cmp	r3, #1
 801d690:	d101      	bne.n	801d696 <HAL_I2C_Mem_Write_DMA+0xa2>
 801d692:	2302      	movs	r3, #2
 801d694:	e10d      	b.n	801d8b2 <HAL_I2C_Mem_Write_DMA+0x2be>
 801d696:	68fb      	ldr	r3, [r7, #12]
 801d698:	2201      	movs	r2, #1
 801d69a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	681b      	ldr	r3, [r3, #0]
 801d6a4:	f003 0301 	and.w	r3, r3, #1
 801d6a8:	2b01      	cmp	r3, #1
 801d6aa:	d007      	beq.n	801d6bc <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801d6ac:	68fb      	ldr	r3, [r7, #12]
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	681a      	ldr	r2, [r3, #0]
 801d6b2:	68fb      	ldr	r3, [r7, #12]
 801d6b4:	681b      	ldr	r3, [r3, #0]
 801d6b6:	f042 0201 	orr.w	r2, r2, #1
 801d6ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801d6bc:	68fb      	ldr	r3, [r7, #12]
 801d6be:	681b      	ldr	r3, [r3, #0]
 801d6c0:	681a      	ldr	r2, [r3, #0]
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	681b      	ldr	r3, [r3, #0]
 801d6c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d6ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801d6cc:	68fb      	ldr	r3, [r7, #12]
 801d6ce:	2221      	movs	r2, #33	; 0x21
 801d6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801d6d4:	68fb      	ldr	r3, [r7, #12]
 801d6d6:	2240      	movs	r2, #64	; 0x40
 801d6d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d6dc:	68fb      	ldr	r3, [r7, #12]
 801d6de:	2200      	movs	r2, #0
 801d6e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801d6e2:	68fb      	ldr	r3, [r7, #12]
 801d6e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d6e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801d6e8:	68fb      	ldr	r3, [r7, #12]
 801d6ea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801d6ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d6f2:	b29a      	uxth	r2, r3
 801d6f4:	68fb      	ldr	r3, [r7, #12]
 801d6f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801d6f8:	68fb      	ldr	r3, [r7, #12]
 801d6fa:	4a6a      	ldr	r2, [pc, #424]	; (801d8a4 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 801d6fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801d6fe:	897a      	ldrh	r2, [r7, #10]
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801d704:	893a      	ldrh	r2, [r7, #8]
 801d706:	68fb      	ldr	r3, [r7, #12]
 801d708:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801d70a:	88fa      	ldrh	r2, [r7, #6]
 801d70c:	68fb      	ldr	r3, [r7, #12]
 801d70e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	2200      	movs	r2, #0
 801d714:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801d716:	68fb      	ldr	r3, [r7, #12]
 801d718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	f000 80a9 	beq.w	801d872 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 801d720:	68fb      	ldr	r3, [r7, #12]
 801d722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d724:	2b00      	cmp	r3, #0
 801d726:	d02a      	beq.n	801d77e <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801d728:	68fb      	ldr	r3, [r7, #12]
 801d72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d72c:	4a5e      	ldr	r2, [pc, #376]	; (801d8a8 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 801d72e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801d730:	68fb      	ldr	r3, [r7, #12]
 801d732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d734:	4a5d      	ldr	r2, [pc, #372]	; (801d8ac <HAL_I2C_Mem_Write_DMA+0x2b8>)
 801d736:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801d738:	68fb      	ldr	r3, [r7, #12]
 801d73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d73c:	2200      	movs	r2, #0
 801d73e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d744:	2200      	movs	r2, #0
 801d746:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801d748:	68fb      	ldr	r3, [r7, #12]
 801d74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d74c:	2200      	movs	r2, #0
 801d74e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d754:	2200      	movs	r2, #0
 801d756:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801d758:	68fb      	ldr	r3, [r7, #12]
 801d75a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801d75c:	68fb      	ldr	r3, [r7, #12]
 801d75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d760:	4619      	mov	r1, r3
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	681b      	ldr	r3, [r3, #0]
 801d766:	3310      	adds	r3, #16
 801d768:	461a      	mov	r2, r3
 801d76a:	68fb      	ldr	r3, [r7, #12]
 801d76c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d76e:	f7fe fd95 	bl	801c29c <HAL_DMA_Start_IT>
 801d772:	4603      	mov	r3, r0
 801d774:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801d776:	7efb      	ldrb	r3, [r7, #27]
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d166      	bne.n	801d84a <HAL_I2C_Mem_Write_DMA+0x256>
 801d77c:	e013      	b.n	801d7a6 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 801d77e:	68fb      	ldr	r3, [r7, #12]
 801d780:	2220      	movs	r2, #32
 801d782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d786:	68fb      	ldr	r3, [r7, #12]
 801d788:	2200      	movs	r2, #0
 801d78a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801d78e:	68fb      	ldr	r3, [r7, #12]
 801d790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d792:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801d796:	68fb      	ldr	r3, [r7, #12]
 801d798:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801d79a:	68fb      	ldr	r3, [r7, #12]
 801d79c:	2200      	movs	r2, #0
 801d79e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801d7a2:	2301      	movs	r3, #1
 801d7a4:	e085      	b.n	801d8b2 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801d7a6:	88f8      	ldrh	r0, [r7, #6]
 801d7a8:	893a      	ldrh	r2, [r7, #8]
 801d7aa:	8979      	ldrh	r1, [r7, #10]
 801d7ac:	69fb      	ldr	r3, [r7, #28]
 801d7ae:	9301      	str	r3, [sp, #4]
 801d7b0:	2323      	movs	r3, #35	; 0x23
 801d7b2:	9300      	str	r3, [sp, #0]
 801d7b4:	4603      	mov	r3, r0
 801d7b6:	68f8      	ldr	r0, [r7, #12]
 801d7b8:	f001 fdd2 	bl	801f360 <I2C_RequestMemoryWrite>
 801d7bc:	4603      	mov	r3, r0
 801d7be:	2b00      	cmp	r3, #0
 801d7c0:	d022      	beq.n	801d808 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d7c6:	4618      	mov	r0, r3
 801d7c8:	f7fe fe30 	bl	801c42c <HAL_DMA_Abort_IT>
 801d7cc:	4603      	mov	r3, r0
 801d7ce:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 801d7d0:	68fb      	ldr	r3, [r7, #12]
 801d7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d7d4:	2200      	movs	r2, #0
 801d7d6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d7d8:	68fb      	ldr	r3, [r7, #12]
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	681a      	ldr	r2, [r3, #0]
 801d7de:	68fb      	ldr	r3, [r7, #12]
 801d7e0:	681b      	ldr	r3, [r3, #0]
 801d7e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d7e6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801d7e8:	68fb      	ldr	r3, [r7, #12]
 801d7ea:	2200      	movs	r2, #0
 801d7ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801d7ee:	68fb      	ldr	r3, [r7, #12]
 801d7f0:	2200      	movs	r2, #0
 801d7f2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801d7f4:	68fb      	ldr	r3, [r7, #12]
 801d7f6:	681b      	ldr	r3, [r3, #0]
 801d7f8:	681a      	ldr	r2, [r3, #0]
 801d7fa:	68fb      	ldr	r3, [r7, #12]
 801d7fc:	681b      	ldr	r3, [r3, #0]
 801d7fe:	f022 0201 	bic.w	r2, r2, #1
 801d802:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801d804:	2301      	movs	r3, #1
 801d806:	e054      	b.n	801d8b2 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801d808:	2300      	movs	r3, #0
 801d80a:	613b      	str	r3, [r7, #16]
 801d80c:	68fb      	ldr	r3, [r7, #12]
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	695b      	ldr	r3, [r3, #20]
 801d812:	613b      	str	r3, [r7, #16]
 801d814:	68fb      	ldr	r3, [r7, #12]
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	699b      	ldr	r3, [r3, #24]
 801d81a:	613b      	str	r3, [r7, #16]
 801d81c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d81e:	68fb      	ldr	r3, [r7, #12]
 801d820:	2200      	movs	r2, #0
 801d822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801d826:	68fb      	ldr	r3, [r7, #12]
 801d828:	681b      	ldr	r3, [r3, #0]
 801d82a:	685a      	ldr	r2, [r3, #4]
 801d82c:	68fb      	ldr	r3, [r7, #12]
 801d82e:	681b      	ldr	r3, [r3, #0]
 801d830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d834:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801d836:	68fb      	ldr	r3, [r7, #12]
 801d838:	681b      	ldr	r3, [r3, #0]
 801d83a:	685a      	ldr	r2, [r3, #4]
 801d83c:	68fb      	ldr	r3, [r7, #12]
 801d83e:	681b      	ldr	r3, [r3, #0]
 801d840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d844:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 801d846:	2300      	movs	r3, #0
 801d848:	e033      	b.n	801d8b2 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	2220      	movs	r2, #32
 801d84e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d852:	68fb      	ldr	r3, [r7, #12]
 801d854:	2200      	movs	r2, #0
 801d856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d85e:	f043 0210 	orr.w	r2, r3, #16
 801d862:	68fb      	ldr	r3, [r7, #12]
 801d864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d866:	68fb      	ldr	r3, [r7, #12]
 801d868:	2200      	movs	r2, #0
 801d86a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d86e:	2301      	movs	r3, #1
 801d870:	e01f      	b.n	801d8b2 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 801d872:	68fb      	ldr	r3, [r7, #12]
 801d874:	2220      	movs	r2, #32
 801d876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d87a:	68fb      	ldr	r3, [r7, #12]
 801d87c:	2200      	movs	r2, #0
 801d87e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 801d882:	68fb      	ldr	r3, [r7, #12]
 801d884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d886:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801d88a:	68fb      	ldr	r3, [r7, #12]
 801d88c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801d88e:	68fb      	ldr	r3, [r7, #12]
 801d890:	2200      	movs	r2, #0
 801d892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801d896:	2301      	movs	r3, #1
 801d898:	e00b      	b.n	801d8b2 <HAL_I2C_Mem_Write_DMA+0x2be>
 801d89a:	bf00      	nop
 801d89c:	20000020 	.word	0x20000020
 801d8a0:	14f8b589 	.word	0x14f8b589
 801d8a4:	ffff0000 	.word	0xffff0000
 801d8a8:	0801f65d 	.word	0x0801f65d
 801d8ac:	0801f807 	.word	0x0801f807
    }
  }
  else
  {
    return HAL_BUSY;
 801d8b0:	2302      	movs	r3, #2
  }
}
 801d8b2:	4618      	mov	r0, r3
 801d8b4:	3720      	adds	r7, #32
 801d8b6:	46bd      	mov	sp, r7
 801d8b8:	bd80      	pop	{r7, pc}
 801d8ba:	bf00      	nop

0801d8bc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801d8bc:	b580      	push	{r7, lr}
 801d8be:	b08c      	sub	sp, #48	; 0x30
 801d8c0:	af02      	add	r7, sp, #8
 801d8c2:	60f8      	str	r0, [r7, #12]
 801d8c4:	4608      	mov	r0, r1
 801d8c6:	4611      	mov	r1, r2
 801d8c8:	461a      	mov	r2, r3
 801d8ca:	4603      	mov	r3, r0
 801d8cc:	817b      	strh	r3, [r7, #10]
 801d8ce:	460b      	mov	r3, r1
 801d8d0:	813b      	strh	r3, [r7, #8]
 801d8d2:	4613      	mov	r3, r2
 801d8d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801d8d6:	f7fd fee1 	bl	801b69c <HAL_GetTick>
 801d8da:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 801d8dc:	2300      	movs	r3, #0
 801d8de:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d8e0:	68fb      	ldr	r3, [r7, #12]
 801d8e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d8e6:	b2db      	uxtb	r3, r3
 801d8e8:	2b20      	cmp	r3, #32
 801d8ea:	f040 8176 	bne.w	801dbda <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801d8ee:	4b95      	ldr	r3, [pc, #596]	; (801db44 <HAL_I2C_Mem_Read_DMA+0x288>)
 801d8f0:	681b      	ldr	r3, [r3, #0]
 801d8f2:	08db      	lsrs	r3, r3, #3
 801d8f4:	4a94      	ldr	r2, [pc, #592]	; (801db48 <HAL_I2C_Mem_Read_DMA+0x28c>)
 801d8f6:	fba2 2303 	umull	r2, r3, r2, r3
 801d8fa:	0a1a      	lsrs	r2, r3, #8
 801d8fc:	4613      	mov	r3, r2
 801d8fe:	009b      	lsls	r3, r3, #2
 801d900:	4413      	add	r3, r2
 801d902:	009a      	lsls	r2, r3, #2
 801d904:	4413      	add	r3, r2
 801d906:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 801d908:	69fb      	ldr	r3, [r7, #28]
 801d90a:	3b01      	subs	r3, #1
 801d90c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 801d90e:	69fb      	ldr	r3, [r7, #28]
 801d910:	2b00      	cmp	r3, #0
 801d912:	d116      	bne.n	801d942 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801d914:	68fb      	ldr	r3, [r7, #12]
 801d916:	2200      	movs	r2, #0
 801d918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	2220      	movs	r2, #32
 801d91e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	2200      	movs	r2, #0
 801d926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801d92a:	68fb      	ldr	r3, [r7, #12]
 801d92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d92e:	f043 0220 	orr.w	r2, r3, #32
 801d932:	68fb      	ldr	r3, [r7, #12]
 801d934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	2200      	movs	r2, #0
 801d93a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d93e:	2301      	movs	r3, #1
 801d940:	e14c      	b.n	801dbdc <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801d942:	68fb      	ldr	r3, [r7, #12]
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	699b      	ldr	r3, [r3, #24]
 801d948:	f003 0302 	and.w	r3, r3, #2
 801d94c:	2b02      	cmp	r3, #2
 801d94e:	d0db      	beq.n	801d908 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d950:	68fb      	ldr	r3, [r7, #12]
 801d952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d956:	2b01      	cmp	r3, #1
 801d958:	d101      	bne.n	801d95e <HAL_I2C_Mem_Read_DMA+0xa2>
 801d95a:	2302      	movs	r3, #2
 801d95c:	e13e      	b.n	801dbdc <HAL_I2C_Mem_Read_DMA+0x320>
 801d95e:	68fb      	ldr	r3, [r7, #12]
 801d960:	2201      	movs	r2, #1
 801d962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	681b      	ldr	r3, [r3, #0]
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	f003 0301 	and.w	r3, r3, #1
 801d970:	2b01      	cmp	r3, #1
 801d972:	d007      	beq.n	801d984 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801d974:	68fb      	ldr	r3, [r7, #12]
 801d976:	681b      	ldr	r3, [r3, #0]
 801d978:	681a      	ldr	r2, [r3, #0]
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	681b      	ldr	r3, [r3, #0]
 801d97e:	f042 0201 	orr.w	r2, r2, #1
 801d982:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801d984:	68fb      	ldr	r3, [r7, #12]
 801d986:	681b      	ldr	r3, [r3, #0]
 801d988:	681a      	ldr	r2, [r3, #0]
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	681b      	ldr	r3, [r3, #0]
 801d98e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d992:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801d994:	68fb      	ldr	r3, [r7, #12]
 801d996:	2222      	movs	r2, #34	; 0x22
 801d998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801d99c:	68fb      	ldr	r3, [r7, #12]
 801d99e:	2240      	movs	r2, #64	; 0x40
 801d9a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d9a4:	68fb      	ldr	r3, [r7, #12]
 801d9a6:	2200      	movs	r2, #0
 801d9a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801d9aa:	68fb      	ldr	r3, [r7, #12]
 801d9ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d9ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801d9b0:	68fb      	ldr	r3, [r7, #12]
 801d9b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801d9b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801d9b6:	68fb      	ldr	r3, [r7, #12]
 801d9b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d9ba:	b29a      	uxth	r2, r3
 801d9bc:	68fb      	ldr	r3, [r7, #12]
 801d9be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801d9c0:	68fb      	ldr	r3, [r7, #12]
 801d9c2:	4a62      	ldr	r2, [pc, #392]	; (801db4c <HAL_I2C_Mem_Read_DMA+0x290>)
 801d9c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801d9c6:	897a      	ldrh	r2, [r7, #10]
 801d9c8:	68fb      	ldr	r3, [r7, #12]
 801d9ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801d9cc:	893a      	ldrh	r2, [r7, #8]
 801d9ce:	68fb      	ldr	r3, [r7, #12]
 801d9d0:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801d9d2:	88fa      	ldrh	r2, [r7, #6]
 801d9d4:	68fb      	ldr	r3, [r7, #12]
 801d9d6:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	2200      	movs	r2, #0
 801d9dc:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801d9de:	68fb      	ldr	r3, [r7, #12]
 801d9e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	f000 80cc 	beq.w	801db80 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	d02d      	beq.n	801da4c <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9f4:	4a56      	ldr	r2, [pc, #344]	; (801db50 <HAL_I2C_Mem_Read_DMA+0x294>)
 801d9f6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801d9f8:	68fb      	ldr	r3, [r7, #12]
 801d9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9fc:	4a55      	ldr	r2, [pc, #340]	; (801db54 <HAL_I2C_Mem_Read_DMA+0x298>)
 801d9fe:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801da00:	68fb      	ldr	r3, [r7, #12]
 801da02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da04:	2200      	movs	r2, #0
 801da06:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801da08:	68fb      	ldr	r3, [r7, #12]
 801da0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da0c:	2200      	movs	r2, #0
 801da0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801da10:	68fb      	ldr	r3, [r7, #12]
 801da12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da14:	2200      	movs	r2, #0
 801da16:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801da18:	68fb      	ldr	r3, [r7, #12]
 801da1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da1c:	2200      	movs	r2, #0
 801da1e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801da20:	68fb      	ldr	r3, [r7, #12]
 801da22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801da24:	68fb      	ldr	r3, [r7, #12]
 801da26:	681b      	ldr	r3, [r3, #0]
 801da28:	3310      	adds	r3, #16
 801da2a:	4619      	mov	r1, r3
 801da2c:	68fb      	ldr	r3, [r7, #12]
 801da2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da30:	461a      	mov	r2, r3
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801da36:	f7fe fc31 	bl	801c29c <HAL_DMA_Start_IT>
 801da3a:	4603      	mov	r3, r0
 801da3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801da40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801da44:	2b00      	cmp	r3, #0
 801da46:	f040 8087 	bne.w	801db58 <HAL_I2C_Mem_Read_DMA+0x29c>
 801da4a:	e013      	b.n	801da74 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 801da4c:	68fb      	ldr	r3, [r7, #12]
 801da4e:	2220      	movs	r2, #32
 801da50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801da54:	68fb      	ldr	r3, [r7, #12]
 801da56:	2200      	movs	r2, #0
 801da58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801da5c:	68fb      	ldr	r3, [r7, #12]
 801da5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801da64:	68fb      	ldr	r3, [r7, #12]
 801da66:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801da68:	68fb      	ldr	r3, [r7, #12]
 801da6a:	2200      	movs	r2, #0
 801da6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801da70:	2301      	movs	r3, #1
 801da72:	e0b3      	b.n	801dbdc <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801da74:	88f8      	ldrh	r0, [r7, #6]
 801da76:	893a      	ldrh	r2, [r7, #8]
 801da78:	8979      	ldrh	r1, [r7, #10]
 801da7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da7c:	9301      	str	r3, [sp, #4]
 801da7e:	2323      	movs	r3, #35	; 0x23
 801da80:	9300      	str	r3, [sp, #0]
 801da82:	4603      	mov	r3, r0
 801da84:	68f8      	ldr	r0, [r7, #12]
 801da86:	f001 fd01 	bl	801f48c <I2C_RequestMemoryRead>
 801da8a:	4603      	mov	r3, r0
 801da8c:	2b00      	cmp	r3, #0
 801da8e:	d023      	beq.n	801dad8 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 801da90:	68fb      	ldr	r3, [r7, #12]
 801da92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da94:	4618      	mov	r0, r3
 801da96:	f7fe fcc9 	bl	801c42c <HAL_DMA_Abort_IT>
 801da9a:	4603      	mov	r3, r0
 801da9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 801daa0:	68fb      	ldr	r3, [r7, #12]
 801daa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801daa4:	2200      	movs	r2, #0
 801daa6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801daa8:	68fb      	ldr	r3, [r7, #12]
 801daaa:	681b      	ldr	r3, [r3, #0]
 801daac:	681a      	ldr	r2, [r3, #0]
 801daae:	68fb      	ldr	r3, [r7, #12]
 801dab0:	681b      	ldr	r3, [r3, #0]
 801dab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801dab6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801dab8:	68fb      	ldr	r3, [r7, #12]
 801daba:	2200      	movs	r2, #0
 801dabc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801dabe:	68fb      	ldr	r3, [r7, #12]
 801dac0:	2200      	movs	r2, #0
 801dac2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801dac4:	68fb      	ldr	r3, [r7, #12]
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	681a      	ldr	r2, [r3, #0]
 801daca:	68fb      	ldr	r3, [r7, #12]
 801dacc:	681b      	ldr	r3, [r3, #0]
 801dace:	f022 0201 	bic.w	r2, r2, #1
 801dad2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801dad4:	2301      	movs	r3, #1
 801dad6:	e081      	b.n	801dbdc <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dadc:	2b01      	cmp	r3, #1
 801dade:	d108      	bne.n	801daf2 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dae0:	68fb      	ldr	r3, [r7, #12]
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	681a      	ldr	r2, [r3, #0]
 801dae6:	68fb      	ldr	r3, [r7, #12]
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801daee:	601a      	str	r2, [r3, #0]
 801daf0:	e007      	b.n	801db02 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801daf2:	68fb      	ldr	r3, [r7, #12]
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	685a      	ldr	r2, [r3, #4]
 801daf8:	68fb      	ldr	r3, [r7, #12]
 801dafa:	681b      	ldr	r3, [r3, #0]
 801dafc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801db00:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801db02:	2300      	movs	r3, #0
 801db04:	61bb      	str	r3, [r7, #24]
 801db06:	68fb      	ldr	r3, [r7, #12]
 801db08:	681b      	ldr	r3, [r3, #0]
 801db0a:	695b      	ldr	r3, [r3, #20]
 801db0c:	61bb      	str	r3, [r7, #24]
 801db0e:	68fb      	ldr	r3, [r7, #12]
 801db10:	681b      	ldr	r3, [r3, #0]
 801db12:	699b      	ldr	r3, [r3, #24]
 801db14:	61bb      	str	r3, [r7, #24]
 801db16:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801db18:	68fb      	ldr	r3, [r7, #12]
 801db1a:	2200      	movs	r2, #0
 801db1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	685a      	ldr	r2, [r3, #4]
 801db26:	68fb      	ldr	r3, [r7, #12]
 801db28:	681b      	ldr	r3, [r3, #0]
 801db2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801db2e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	685a      	ldr	r2, [r3, #4]
 801db36:	68fb      	ldr	r3, [r7, #12]
 801db38:	681b      	ldr	r3, [r3, #0]
 801db3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801db3e:	605a      	str	r2, [r3, #4]
 801db40:	e049      	b.n	801dbd6 <HAL_I2C_Mem_Read_DMA+0x31a>
 801db42:	bf00      	nop
 801db44:	20000020 	.word	0x20000020
 801db48:	14f8b589 	.word	0x14f8b589
 801db4c:	ffff0000 	.word	0xffff0000
 801db50:	0801f65d 	.word	0x0801f65d
 801db54:	0801f807 	.word	0x0801f807
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801db58:	68fb      	ldr	r3, [r7, #12]
 801db5a:	2220      	movs	r2, #32
 801db5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	2200      	movs	r2, #0
 801db64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801db68:	68fb      	ldr	r3, [r7, #12]
 801db6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db6c:	f043 0210 	orr.w	r2, r3, #16
 801db70:	68fb      	ldr	r3, [r7, #12]
 801db72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801db74:	68fb      	ldr	r3, [r7, #12]
 801db76:	2200      	movs	r2, #0
 801db78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801db7c:	2301      	movs	r3, #1
 801db7e:	e02d      	b.n	801dbdc <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801db80:	88f8      	ldrh	r0, [r7, #6]
 801db82:	893a      	ldrh	r2, [r7, #8]
 801db84:	8979      	ldrh	r1, [r7, #10]
 801db86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db88:	9301      	str	r3, [sp, #4]
 801db8a:	2323      	movs	r3, #35	; 0x23
 801db8c:	9300      	str	r3, [sp, #0]
 801db8e:	4603      	mov	r3, r0
 801db90:	68f8      	ldr	r0, [r7, #12]
 801db92:	f001 fc7b 	bl	801f48c <I2C_RequestMemoryRead>
 801db96:	4603      	mov	r3, r0
 801db98:	2b00      	cmp	r3, #0
 801db9a:	d001      	beq.n	801dba0 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 801db9c:	2301      	movs	r3, #1
 801db9e:	e01d      	b.n	801dbdc <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dba0:	2300      	movs	r3, #0
 801dba2:	617b      	str	r3, [r7, #20]
 801dba4:	68fb      	ldr	r3, [r7, #12]
 801dba6:	681b      	ldr	r3, [r3, #0]
 801dba8:	695b      	ldr	r3, [r3, #20]
 801dbaa:	617b      	str	r3, [r7, #20]
 801dbac:	68fb      	ldr	r3, [r7, #12]
 801dbae:	681b      	ldr	r3, [r3, #0]
 801dbb0:	699b      	ldr	r3, [r3, #24]
 801dbb2:	617b      	str	r3, [r7, #20]
 801dbb4:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801dbb6:	68fb      	ldr	r3, [r7, #12]
 801dbb8:	681b      	ldr	r3, [r3, #0]
 801dbba:	681a      	ldr	r2, [r3, #0]
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	681b      	ldr	r3, [r3, #0]
 801dbc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801dbc4:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 801dbc6:	68fb      	ldr	r3, [r7, #12]
 801dbc8:	2220      	movs	r2, #32
 801dbca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801dbce:	68fb      	ldr	r3, [r7, #12]
 801dbd0:	2200      	movs	r2, #0
 801dbd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 801dbd6:	2300      	movs	r3, #0
 801dbd8:	e000      	b.n	801dbdc <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 801dbda:	2302      	movs	r3, #2
  }
}
 801dbdc:	4618      	mov	r0, r3
 801dbde:	3728      	adds	r7, #40	; 0x28
 801dbe0:	46bd      	mov	sp, r7
 801dbe2:	bd80      	pop	{r7, pc}

0801dbe4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801dbe4:	b580      	push	{r7, lr}
 801dbe6:	b088      	sub	sp, #32
 801dbe8:	af00      	add	r7, sp, #0
 801dbea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 801dbec:	2300      	movs	r3, #0
 801dbee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	681b      	ldr	r3, [r3, #0]
 801dbf4:	685b      	ldr	r3, [r3, #4]
 801dbf6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dbfc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801dbfe:	687b      	ldr	r3, [r7, #4]
 801dc00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801dc04:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dc0c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801dc0e:	7bfb      	ldrb	r3, [r7, #15]
 801dc10:	2b10      	cmp	r3, #16
 801dc12:	d003      	beq.n	801dc1c <HAL_I2C_EV_IRQHandler+0x38>
 801dc14:	7bfb      	ldrb	r3, [r7, #15]
 801dc16:	2b40      	cmp	r3, #64	; 0x40
 801dc18:	f040 80c1 	bne.w	801dd9e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801dc1c:	687b      	ldr	r3, [r7, #4]
 801dc1e:	681b      	ldr	r3, [r3, #0]
 801dc20:	699b      	ldr	r3, [r3, #24]
 801dc22:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	681b      	ldr	r3, [r3, #0]
 801dc28:	695b      	ldr	r3, [r3, #20]
 801dc2a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801dc2c:	69fb      	ldr	r3, [r7, #28]
 801dc2e:	f003 0301 	and.w	r3, r3, #1
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	d10d      	bne.n	801dc52 <HAL_I2C_EV_IRQHandler+0x6e>
 801dc36:	693b      	ldr	r3, [r7, #16]
 801dc38:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801dc3c:	d003      	beq.n	801dc46 <HAL_I2C_EV_IRQHandler+0x62>
 801dc3e:	693b      	ldr	r3, [r7, #16]
 801dc40:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801dc44:	d101      	bne.n	801dc4a <HAL_I2C_EV_IRQHandler+0x66>
 801dc46:	2301      	movs	r3, #1
 801dc48:	e000      	b.n	801dc4c <HAL_I2C_EV_IRQHandler+0x68>
 801dc4a:	2300      	movs	r3, #0
 801dc4c:	2b01      	cmp	r3, #1
 801dc4e:	f000 8132 	beq.w	801deb6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dc52:	69fb      	ldr	r3, [r7, #28]
 801dc54:	f003 0301 	and.w	r3, r3, #1
 801dc58:	2b00      	cmp	r3, #0
 801dc5a:	d00c      	beq.n	801dc76 <HAL_I2C_EV_IRQHandler+0x92>
 801dc5c:	697b      	ldr	r3, [r7, #20]
 801dc5e:	0a5b      	lsrs	r3, r3, #9
 801dc60:	f003 0301 	and.w	r3, r3, #1
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	d006      	beq.n	801dc76 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801dc68:	6878      	ldr	r0, [r7, #4]
 801dc6a:	f002 f82a 	bl	801fcc2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801dc6e:	6878      	ldr	r0, [r7, #4]
 801dc70:	f000 fd5b 	bl	801e72a <I2C_Master_SB>
 801dc74:	e092      	b.n	801dd9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dc76:	69fb      	ldr	r3, [r7, #28]
 801dc78:	08db      	lsrs	r3, r3, #3
 801dc7a:	f003 0301 	and.w	r3, r3, #1
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d009      	beq.n	801dc96 <HAL_I2C_EV_IRQHandler+0xb2>
 801dc82:	697b      	ldr	r3, [r7, #20]
 801dc84:	0a5b      	lsrs	r3, r3, #9
 801dc86:	f003 0301 	and.w	r3, r3, #1
 801dc8a:	2b00      	cmp	r3, #0
 801dc8c:	d003      	beq.n	801dc96 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801dc8e:	6878      	ldr	r0, [r7, #4]
 801dc90:	f000 fdd1 	bl	801e836 <I2C_Master_ADD10>
 801dc94:	e082      	b.n	801dd9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dc96:	69fb      	ldr	r3, [r7, #28]
 801dc98:	085b      	lsrs	r3, r3, #1
 801dc9a:	f003 0301 	and.w	r3, r3, #1
 801dc9e:	2b00      	cmp	r3, #0
 801dca0:	d009      	beq.n	801dcb6 <HAL_I2C_EV_IRQHandler+0xd2>
 801dca2:	697b      	ldr	r3, [r7, #20]
 801dca4:	0a5b      	lsrs	r3, r3, #9
 801dca6:	f003 0301 	and.w	r3, r3, #1
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d003      	beq.n	801dcb6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801dcae:	6878      	ldr	r0, [r7, #4]
 801dcb0:	f000 fdeb 	bl	801e88a <I2C_Master_ADDR>
 801dcb4:	e072      	b.n	801dd9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801dcb6:	69bb      	ldr	r3, [r7, #24]
 801dcb8:	089b      	lsrs	r3, r3, #2
 801dcba:	f003 0301 	and.w	r3, r3, #1
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	d03b      	beq.n	801dd3a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	681b      	ldr	r3, [r3, #0]
 801dcc6:	685b      	ldr	r3, [r3, #4]
 801dcc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801dccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801dcd0:	f000 80f3 	beq.w	801deba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801dcd4:	69fb      	ldr	r3, [r7, #28]
 801dcd6:	09db      	lsrs	r3, r3, #7
 801dcd8:	f003 0301 	and.w	r3, r3, #1
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d00f      	beq.n	801dd00 <HAL_I2C_EV_IRQHandler+0x11c>
 801dce0:	697b      	ldr	r3, [r7, #20]
 801dce2:	0a9b      	lsrs	r3, r3, #10
 801dce4:	f003 0301 	and.w	r3, r3, #1
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	d009      	beq.n	801dd00 <HAL_I2C_EV_IRQHandler+0x11c>
 801dcec:	69fb      	ldr	r3, [r7, #28]
 801dcee:	089b      	lsrs	r3, r3, #2
 801dcf0:	f003 0301 	and.w	r3, r3, #1
 801dcf4:	2b00      	cmp	r3, #0
 801dcf6:	d103      	bne.n	801dd00 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 801dcf8:	6878      	ldr	r0, [r7, #4]
 801dcfa:	f000 f9cb 	bl	801e094 <I2C_MasterTransmit_TXE>
 801dcfe:	e04d      	b.n	801dd9c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dd00:	69fb      	ldr	r3, [r7, #28]
 801dd02:	089b      	lsrs	r3, r3, #2
 801dd04:	f003 0301 	and.w	r3, r3, #1
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	f000 80d6 	beq.w	801deba <HAL_I2C_EV_IRQHandler+0x2d6>
 801dd0e:	697b      	ldr	r3, [r7, #20]
 801dd10:	0a5b      	lsrs	r3, r3, #9
 801dd12:	f003 0301 	and.w	r3, r3, #1
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	f000 80cf 	beq.w	801deba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801dd1c:	7bbb      	ldrb	r3, [r7, #14]
 801dd1e:	2b21      	cmp	r3, #33	; 0x21
 801dd20:	d103      	bne.n	801dd2a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801dd22:	6878      	ldr	r0, [r7, #4]
 801dd24:	f000 fa52 	bl	801e1cc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dd28:	e0c7      	b.n	801deba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 801dd2a:	7bfb      	ldrb	r3, [r7, #15]
 801dd2c:	2b40      	cmp	r3, #64	; 0x40
 801dd2e:	f040 80c4 	bne.w	801deba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 801dd32:	6878      	ldr	r0, [r7, #4]
 801dd34:	f000 fac0 	bl	801e2b8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dd38:	e0bf      	b.n	801deba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	681b      	ldr	r3, [r3, #0]
 801dd3e:	685b      	ldr	r3, [r3, #4]
 801dd40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801dd44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801dd48:	f000 80b7 	beq.w	801deba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801dd4c:	69fb      	ldr	r3, [r7, #28]
 801dd4e:	099b      	lsrs	r3, r3, #6
 801dd50:	f003 0301 	and.w	r3, r3, #1
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	d00f      	beq.n	801dd78 <HAL_I2C_EV_IRQHandler+0x194>
 801dd58:	697b      	ldr	r3, [r7, #20]
 801dd5a:	0a9b      	lsrs	r3, r3, #10
 801dd5c:	f003 0301 	and.w	r3, r3, #1
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	d009      	beq.n	801dd78 <HAL_I2C_EV_IRQHandler+0x194>
 801dd64:	69fb      	ldr	r3, [r7, #28]
 801dd66:	089b      	lsrs	r3, r3, #2
 801dd68:	f003 0301 	and.w	r3, r3, #1
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	d103      	bne.n	801dd78 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 801dd70:	6878      	ldr	r0, [r7, #4]
 801dd72:	f000 fb35 	bl	801e3e0 <I2C_MasterReceive_RXNE>
 801dd76:	e011      	b.n	801dd9c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dd78:	69fb      	ldr	r3, [r7, #28]
 801dd7a:	089b      	lsrs	r3, r3, #2
 801dd7c:	f003 0301 	and.w	r3, r3, #1
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	f000 809a 	beq.w	801deba <HAL_I2C_EV_IRQHandler+0x2d6>
 801dd86:	697b      	ldr	r3, [r7, #20]
 801dd88:	0a5b      	lsrs	r3, r3, #9
 801dd8a:	f003 0301 	and.w	r3, r3, #1
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	f000 8093 	beq.w	801deba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 801dd94:	6878      	ldr	r0, [r7, #4]
 801dd96:	f000 fbde 	bl	801e556 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801dd9a:	e08e      	b.n	801deba <HAL_I2C_EV_IRQHandler+0x2d6>
 801dd9c:	e08d      	b.n	801deba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801dd9e:	687b      	ldr	r3, [r7, #4]
 801dda0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	d004      	beq.n	801ddb0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	695b      	ldr	r3, [r3, #20]
 801ddac:	61fb      	str	r3, [r7, #28]
 801ddae:	e007      	b.n	801ddc0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801ddb0:	687b      	ldr	r3, [r7, #4]
 801ddb2:	681b      	ldr	r3, [r3, #0]
 801ddb4:	699b      	ldr	r3, [r3, #24]
 801ddb6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	695b      	ldr	r3, [r3, #20]
 801ddbe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801ddc0:	69fb      	ldr	r3, [r7, #28]
 801ddc2:	085b      	lsrs	r3, r3, #1
 801ddc4:	f003 0301 	and.w	r3, r3, #1
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d012      	beq.n	801ddf2 <HAL_I2C_EV_IRQHandler+0x20e>
 801ddcc:	697b      	ldr	r3, [r7, #20]
 801ddce:	0a5b      	lsrs	r3, r3, #9
 801ddd0:	f003 0301 	and.w	r3, r3, #1
 801ddd4:	2b00      	cmp	r3, #0
 801ddd6:	d00c      	beq.n	801ddf2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dddc:	2b00      	cmp	r3, #0
 801ddde:	d003      	beq.n	801dde8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801dde0:	687b      	ldr	r3, [r7, #4]
 801dde2:	681b      	ldr	r3, [r3, #0]
 801dde4:	699b      	ldr	r3, [r3, #24]
 801dde6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 801dde8:	69b9      	ldr	r1, [r7, #24]
 801ddea:	6878      	ldr	r0, [r7, #4]
 801ddec:	f000 ff9c 	bl	801ed28 <I2C_Slave_ADDR>
 801ddf0:	e066      	b.n	801dec0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801ddf2:	69fb      	ldr	r3, [r7, #28]
 801ddf4:	091b      	lsrs	r3, r3, #4
 801ddf6:	f003 0301 	and.w	r3, r3, #1
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	d009      	beq.n	801de12 <HAL_I2C_EV_IRQHandler+0x22e>
 801ddfe:	697b      	ldr	r3, [r7, #20]
 801de00:	0a5b      	lsrs	r3, r3, #9
 801de02:	f003 0301 	and.w	r3, r3, #1
 801de06:	2b00      	cmp	r3, #0
 801de08:	d003      	beq.n	801de12 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 801de0a:	6878      	ldr	r0, [r7, #4]
 801de0c:	f000 ffd6 	bl	801edbc <I2C_Slave_STOPF>
 801de10:	e056      	b.n	801dec0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801de12:	7bbb      	ldrb	r3, [r7, #14]
 801de14:	2b21      	cmp	r3, #33	; 0x21
 801de16:	d002      	beq.n	801de1e <HAL_I2C_EV_IRQHandler+0x23a>
 801de18:	7bbb      	ldrb	r3, [r7, #14]
 801de1a:	2b29      	cmp	r3, #41	; 0x29
 801de1c:	d125      	bne.n	801de6a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801de1e:	69fb      	ldr	r3, [r7, #28]
 801de20:	09db      	lsrs	r3, r3, #7
 801de22:	f003 0301 	and.w	r3, r3, #1
 801de26:	2b00      	cmp	r3, #0
 801de28:	d00f      	beq.n	801de4a <HAL_I2C_EV_IRQHandler+0x266>
 801de2a:	697b      	ldr	r3, [r7, #20]
 801de2c:	0a9b      	lsrs	r3, r3, #10
 801de2e:	f003 0301 	and.w	r3, r3, #1
 801de32:	2b00      	cmp	r3, #0
 801de34:	d009      	beq.n	801de4a <HAL_I2C_EV_IRQHandler+0x266>
 801de36:	69fb      	ldr	r3, [r7, #28]
 801de38:	089b      	lsrs	r3, r3, #2
 801de3a:	f003 0301 	and.w	r3, r3, #1
 801de3e:	2b00      	cmp	r3, #0
 801de40:	d103      	bne.n	801de4a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801de42:	6878      	ldr	r0, [r7, #4]
 801de44:	f000 feb2 	bl	801ebac <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801de48:	e039      	b.n	801debe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801de4a:	69fb      	ldr	r3, [r7, #28]
 801de4c:	089b      	lsrs	r3, r3, #2
 801de4e:	f003 0301 	and.w	r3, r3, #1
 801de52:	2b00      	cmp	r3, #0
 801de54:	d033      	beq.n	801debe <HAL_I2C_EV_IRQHandler+0x2da>
 801de56:	697b      	ldr	r3, [r7, #20]
 801de58:	0a5b      	lsrs	r3, r3, #9
 801de5a:	f003 0301 	and.w	r3, r3, #1
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d02d      	beq.n	801debe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801de62:	6878      	ldr	r0, [r7, #4]
 801de64:	f000 fedf 	bl	801ec26 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801de68:	e029      	b.n	801debe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801de6a:	69fb      	ldr	r3, [r7, #28]
 801de6c:	099b      	lsrs	r3, r3, #6
 801de6e:	f003 0301 	and.w	r3, r3, #1
 801de72:	2b00      	cmp	r3, #0
 801de74:	d00f      	beq.n	801de96 <HAL_I2C_EV_IRQHandler+0x2b2>
 801de76:	697b      	ldr	r3, [r7, #20]
 801de78:	0a9b      	lsrs	r3, r3, #10
 801de7a:	f003 0301 	and.w	r3, r3, #1
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d009      	beq.n	801de96 <HAL_I2C_EV_IRQHandler+0x2b2>
 801de82:	69fb      	ldr	r3, [r7, #28]
 801de84:	089b      	lsrs	r3, r3, #2
 801de86:	f003 0301 	and.w	r3, r3, #1
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d103      	bne.n	801de96 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801de8e:	6878      	ldr	r0, [r7, #4]
 801de90:	f000 feea 	bl	801ec68 <I2C_SlaveReceive_RXNE>
 801de94:	e014      	b.n	801dec0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801de96:	69fb      	ldr	r3, [r7, #28]
 801de98:	089b      	lsrs	r3, r3, #2
 801de9a:	f003 0301 	and.w	r3, r3, #1
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d00e      	beq.n	801dec0 <HAL_I2C_EV_IRQHandler+0x2dc>
 801dea2:	697b      	ldr	r3, [r7, #20]
 801dea4:	0a5b      	lsrs	r3, r3, #9
 801dea6:	f003 0301 	and.w	r3, r3, #1
 801deaa:	2b00      	cmp	r3, #0
 801deac:	d008      	beq.n	801dec0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801deae:	6878      	ldr	r0, [r7, #4]
 801deb0:	f000 ff18 	bl	801ece4 <I2C_SlaveReceive_BTF>
 801deb4:	e004      	b.n	801dec0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 801deb6:	bf00      	nop
 801deb8:	e002      	b.n	801dec0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801deba:	bf00      	nop
 801debc:	e000      	b.n	801dec0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801debe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801dec0:	3720      	adds	r7, #32
 801dec2:	46bd      	mov	sp, r7
 801dec4:	bd80      	pop	{r7, pc}

0801dec6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801dec6:	b580      	push	{r7, lr}
 801dec8:	b08a      	sub	sp, #40	; 0x28
 801deca:	af00      	add	r7, sp, #0
 801decc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801dece:	687b      	ldr	r3, [r7, #4]
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	695b      	ldr	r3, [r3, #20]
 801ded4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	681b      	ldr	r3, [r3, #0]
 801deda:	685b      	ldr	r3, [r3, #4]
 801dedc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801dede:	2300      	movs	r3, #0
 801dee0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801dee2:	687b      	ldr	r3, [r7, #4]
 801dee4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801dee8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801deea:	6a3b      	ldr	r3, [r7, #32]
 801deec:	0a1b      	lsrs	r3, r3, #8
 801deee:	f003 0301 	and.w	r3, r3, #1
 801def2:	2b00      	cmp	r3, #0
 801def4:	d00e      	beq.n	801df14 <HAL_I2C_ER_IRQHandler+0x4e>
 801def6:	69fb      	ldr	r3, [r7, #28]
 801def8:	0a1b      	lsrs	r3, r3, #8
 801defa:	f003 0301 	and.w	r3, r3, #1
 801defe:	2b00      	cmp	r3, #0
 801df00:	d008      	beq.n	801df14 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801df02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df04:	f043 0301 	orr.w	r3, r3, #1
 801df08:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	681b      	ldr	r3, [r3, #0]
 801df0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801df12:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801df14:	6a3b      	ldr	r3, [r7, #32]
 801df16:	0a5b      	lsrs	r3, r3, #9
 801df18:	f003 0301 	and.w	r3, r3, #1
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	d00e      	beq.n	801df3e <HAL_I2C_ER_IRQHandler+0x78>
 801df20:	69fb      	ldr	r3, [r7, #28]
 801df22:	0a1b      	lsrs	r3, r3, #8
 801df24:	f003 0301 	and.w	r3, r3, #1
 801df28:	2b00      	cmp	r3, #0
 801df2a:	d008      	beq.n	801df3e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 801df2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df2e:	f043 0302 	orr.w	r3, r3, #2
 801df32:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801df34:	687b      	ldr	r3, [r7, #4]
 801df36:	681b      	ldr	r3, [r3, #0]
 801df38:	f46f 7200 	mvn.w	r2, #512	; 0x200
 801df3c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801df3e:	6a3b      	ldr	r3, [r7, #32]
 801df40:	0a9b      	lsrs	r3, r3, #10
 801df42:	f003 0301 	and.w	r3, r3, #1
 801df46:	2b00      	cmp	r3, #0
 801df48:	d03f      	beq.n	801dfca <HAL_I2C_ER_IRQHandler+0x104>
 801df4a:	69fb      	ldr	r3, [r7, #28]
 801df4c:	0a1b      	lsrs	r3, r3, #8
 801df4e:	f003 0301 	and.w	r3, r3, #1
 801df52:	2b00      	cmp	r3, #0
 801df54:	d039      	beq.n	801dfca <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801df56:	7efb      	ldrb	r3, [r7, #27]
 801df58:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801df5e:	b29b      	uxth	r3, r3
 801df60:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801df68:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801df6e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801df70:	7ebb      	ldrb	r3, [r7, #26]
 801df72:	2b20      	cmp	r3, #32
 801df74:	d112      	bne.n	801df9c <HAL_I2C_ER_IRQHandler+0xd6>
 801df76:	697b      	ldr	r3, [r7, #20]
 801df78:	2b00      	cmp	r3, #0
 801df7a:	d10f      	bne.n	801df9c <HAL_I2C_ER_IRQHandler+0xd6>
 801df7c:	7cfb      	ldrb	r3, [r7, #19]
 801df7e:	2b21      	cmp	r3, #33	; 0x21
 801df80:	d008      	beq.n	801df94 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801df82:	7cfb      	ldrb	r3, [r7, #19]
 801df84:	2b29      	cmp	r3, #41	; 0x29
 801df86:	d005      	beq.n	801df94 <HAL_I2C_ER_IRQHandler+0xce>
 801df88:	7cfb      	ldrb	r3, [r7, #19]
 801df8a:	2b28      	cmp	r3, #40	; 0x28
 801df8c:	d106      	bne.n	801df9c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	2b21      	cmp	r3, #33	; 0x21
 801df92:	d103      	bne.n	801df9c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 801df94:	6878      	ldr	r0, [r7, #4]
 801df96:	f001 f841 	bl	801f01c <I2C_Slave_AF>
 801df9a:	e016      	b.n	801dfca <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	681b      	ldr	r3, [r3, #0]
 801dfa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801dfa4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801dfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfa8:	f043 0304 	orr.w	r3, r3, #4
 801dfac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801dfae:	7efb      	ldrb	r3, [r7, #27]
 801dfb0:	2b10      	cmp	r3, #16
 801dfb2:	d002      	beq.n	801dfba <HAL_I2C_ER_IRQHandler+0xf4>
 801dfb4:	7efb      	ldrb	r3, [r7, #27]
 801dfb6:	2b40      	cmp	r3, #64	; 0x40
 801dfb8:	d107      	bne.n	801dfca <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	681b      	ldr	r3, [r3, #0]
 801dfbe:	681a      	ldr	r2, [r3, #0]
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	681b      	ldr	r3, [r3, #0]
 801dfc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801dfc8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801dfca:	6a3b      	ldr	r3, [r7, #32]
 801dfcc:	0adb      	lsrs	r3, r3, #11
 801dfce:	f003 0301 	and.w	r3, r3, #1
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d00e      	beq.n	801dff4 <HAL_I2C_ER_IRQHandler+0x12e>
 801dfd6:	69fb      	ldr	r3, [r7, #28]
 801dfd8:	0a1b      	lsrs	r3, r3, #8
 801dfda:	f003 0301 	and.w	r3, r3, #1
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	d008      	beq.n	801dff4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801dfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfe4:	f043 0308 	orr.w	r3, r3, #8
 801dfe8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801dfea:	687b      	ldr	r3, [r7, #4]
 801dfec:	681b      	ldr	r3, [r3, #0]
 801dfee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 801dff2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 801dff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dff6:	2b00      	cmp	r3, #0
 801dff8:	d008      	beq.n	801e00c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 801dffa:	687b      	ldr	r3, [r7, #4]
 801dffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801dffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e000:	431a      	orrs	r2, r3
 801e002:	687b      	ldr	r3, [r7, #4]
 801e004:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801e006:	6878      	ldr	r0, [r7, #4]
 801e008:	f001 f878 	bl	801f0fc <I2C_ITError>
  }
}
 801e00c:	bf00      	nop
 801e00e:	3728      	adds	r7, #40	; 0x28
 801e010:	46bd      	mov	sp, r7
 801e012:	bd80      	pop	{r7, pc}

0801e014 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e014:	b480      	push	{r7}
 801e016:	b083      	sub	sp, #12
 801e018:	af00      	add	r7, sp, #0
 801e01a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801e01c:	bf00      	nop
 801e01e:	370c      	adds	r7, #12
 801e020:	46bd      	mov	sp, r7
 801e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e026:	4770      	bx	lr

0801e028 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e028:	b480      	push	{r7}
 801e02a:	b083      	sub	sp, #12
 801e02c:	af00      	add	r7, sp, #0
 801e02e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801e030:	bf00      	nop
 801e032:	370c      	adds	r7, #12
 801e034:	46bd      	mov	sp, r7
 801e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e03a:	4770      	bx	lr

0801e03c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801e03c:	b480      	push	{r7}
 801e03e:	b083      	sub	sp, #12
 801e040:	af00      	add	r7, sp, #0
 801e042:	6078      	str	r0, [r7, #4]
 801e044:	460b      	mov	r3, r1
 801e046:	70fb      	strb	r3, [r7, #3]
 801e048:	4613      	mov	r3, r2
 801e04a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801e04c:	bf00      	nop
 801e04e:	370c      	adds	r7, #12
 801e050:	46bd      	mov	sp, r7
 801e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e056:	4770      	bx	lr

0801e058 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e058:	b480      	push	{r7}
 801e05a:	b083      	sub	sp, #12
 801e05c:	af00      	add	r7, sp, #0
 801e05e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801e060:	bf00      	nop
 801e062:	370c      	adds	r7, #12
 801e064:	46bd      	mov	sp, r7
 801e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e06a:	4770      	bx	lr

0801e06c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801e06c:	b480      	push	{r7}
 801e06e:	b083      	sub	sp, #12
 801e070:	af00      	add	r7, sp, #0
 801e072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801e074:	bf00      	nop
 801e076:	370c      	adds	r7, #12
 801e078:	46bd      	mov	sp, r7
 801e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e07e:	4770      	bx	lr

0801e080 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e080:	b480      	push	{r7}
 801e082:	b083      	sub	sp, #12
 801e084:	af00      	add	r7, sp, #0
 801e086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801e088:	bf00      	nop
 801e08a:	370c      	adds	r7, #12
 801e08c:	46bd      	mov	sp, r7
 801e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e092:	4770      	bx	lr

0801e094 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801e094:	b580      	push	{r7, lr}
 801e096:	b084      	sub	sp, #16
 801e098:	af00      	add	r7, sp, #0
 801e09a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e0a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e0aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e0b0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	d150      	bne.n	801e15c <I2C_MasterTransmit_TXE+0xc8>
 801e0ba:	7bfb      	ldrb	r3, [r7, #15]
 801e0bc:	2b21      	cmp	r3, #33	; 0x21
 801e0be:	d14d      	bne.n	801e15c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e0c0:	68bb      	ldr	r3, [r7, #8]
 801e0c2:	2b08      	cmp	r3, #8
 801e0c4:	d01d      	beq.n	801e102 <I2C_MasterTransmit_TXE+0x6e>
 801e0c6:	68bb      	ldr	r3, [r7, #8]
 801e0c8:	2b20      	cmp	r3, #32
 801e0ca:	d01a      	beq.n	801e102 <I2C_MasterTransmit_TXE+0x6e>
 801e0cc:	68bb      	ldr	r3, [r7, #8]
 801e0ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801e0d2:	d016      	beq.n	801e102 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	685a      	ldr	r2, [r3, #4]
 801e0da:	687b      	ldr	r3, [r7, #4]
 801e0dc:	681b      	ldr	r3, [r3, #0]
 801e0de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e0e2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	2211      	movs	r2, #17
 801e0e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	2200      	movs	r2, #0
 801e0ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	2220      	movs	r2, #32
 801e0f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801e0fa:	6878      	ldr	r0, [r7, #4]
 801e0fc:	f7e3 fb1a 	bl	8001734 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e100:	e060      	b.n	801e1c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	681b      	ldr	r3, [r3, #0]
 801e106:	685a      	ldr	r2, [r3, #4]
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	681b      	ldr	r3, [r3, #0]
 801e10c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e110:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e112:	687b      	ldr	r3, [r7, #4]
 801e114:	681b      	ldr	r3, [r3, #0]
 801e116:	681a      	ldr	r2, [r3, #0]
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	681b      	ldr	r3, [r3, #0]
 801e11c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e120:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	2200      	movs	r2, #0
 801e126:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	2220      	movs	r2, #32
 801e12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e136:	b2db      	uxtb	r3, r3
 801e138:	2b40      	cmp	r3, #64	; 0x40
 801e13a:	d107      	bne.n	801e14c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	2200      	movs	r2, #0
 801e140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 801e144:	6878      	ldr	r0, [r7, #4]
 801e146:	f7e3 fadf 	bl	8001708 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e14a:	e03b      	b.n	801e1c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	2200      	movs	r2, #0
 801e150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801e154:	6878      	ldr	r0, [r7, #4]
 801e156:	f7e3 faed 	bl	8001734 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e15a:	e033      	b.n	801e1c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801e15c:	7bfb      	ldrb	r3, [r7, #15]
 801e15e:	2b21      	cmp	r3, #33	; 0x21
 801e160:	d005      	beq.n	801e16e <I2C_MasterTransmit_TXE+0xda>
 801e162:	7bbb      	ldrb	r3, [r7, #14]
 801e164:	2b40      	cmp	r3, #64	; 0x40
 801e166:	d12d      	bne.n	801e1c4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 801e168:	7bfb      	ldrb	r3, [r7, #15]
 801e16a:	2b22      	cmp	r3, #34	; 0x22
 801e16c:	d12a      	bne.n	801e1c4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e172:	b29b      	uxth	r3, r3
 801e174:	2b00      	cmp	r3, #0
 801e176:	d108      	bne.n	801e18a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e178:	687b      	ldr	r3, [r7, #4]
 801e17a:	681b      	ldr	r3, [r3, #0]
 801e17c:	685a      	ldr	r2, [r3, #4]
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	681b      	ldr	r3, [r3, #0]
 801e182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e186:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801e188:	e01c      	b.n	801e1c4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e18a:	687b      	ldr	r3, [r7, #4]
 801e18c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e190:	b2db      	uxtb	r3, r3
 801e192:	2b40      	cmp	r3, #64	; 0x40
 801e194:	d103      	bne.n	801e19e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801e196:	6878      	ldr	r0, [r7, #4]
 801e198:	f000 f88e 	bl	801e2b8 <I2C_MemoryTransmit_TXE_BTF>
}
 801e19c:	e012      	b.n	801e1c4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1a2:	781a      	ldrb	r2, [r3, #0]
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801e1aa:	687b      	ldr	r3, [r7, #4]
 801e1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1ae:	1c5a      	adds	r2, r3, #1
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e1b8:	b29b      	uxth	r3, r3
 801e1ba:	3b01      	subs	r3, #1
 801e1bc:	b29a      	uxth	r2, r3
 801e1be:	687b      	ldr	r3, [r7, #4]
 801e1c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801e1c2:	e7ff      	b.n	801e1c4 <I2C_MasterTransmit_TXE+0x130>
 801e1c4:	bf00      	nop
 801e1c6:	3710      	adds	r7, #16
 801e1c8:	46bd      	mov	sp, r7
 801e1ca:	bd80      	pop	{r7, pc}

0801e1cc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801e1cc:	b580      	push	{r7, lr}
 801e1ce:	b084      	sub	sp, #16
 801e1d0:	af00      	add	r7, sp, #0
 801e1d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e1d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e1e0:	b2db      	uxtb	r3, r3
 801e1e2:	2b21      	cmp	r3, #33	; 0x21
 801e1e4:	d164      	bne.n	801e2b0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801e1e6:	687b      	ldr	r3, [r7, #4]
 801e1e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e1ea:	b29b      	uxth	r3, r3
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d012      	beq.n	801e216 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1f4:	781a      	ldrb	r2, [r3, #0]
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	681b      	ldr	r3, [r3, #0]
 801e1fa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e200:	1c5a      	adds	r2, r3, #1
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e20a:	b29b      	uxth	r3, r3
 801e20c:	3b01      	subs	r3, #1
 801e20e:	b29a      	uxth	r2, r3
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801e214:	e04c      	b.n	801e2b0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	2b08      	cmp	r3, #8
 801e21a:	d01d      	beq.n	801e258 <I2C_MasterTransmit_BTF+0x8c>
 801e21c:	68fb      	ldr	r3, [r7, #12]
 801e21e:	2b20      	cmp	r3, #32
 801e220:	d01a      	beq.n	801e258 <I2C_MasterTransmit_BTF+0x8c>
 801e222:	68fb      	ldr	r3, [r7, #12]
 801e224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801e228:	d016      	beq.n	801e258 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e22a:	687b      	ldr	r3, [r7, #4]
 801e22c:	681b      	ldr	r3, [r3, #0]
 801e22e:	685a      	ldr	r2, [r3, #4]
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e238:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801e23a:	687b      	ldr	r3, [r7, #4]
 801e23c:	2211      	movs	r2, #17
 801e23e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e240:	687b      	ldr	r3, [r7, #4]
 801e242:	2200      	movs	r2, #0
 801e244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 801e248:	687b      	ldr	r3, [r7, #4]
 801e24a:	2220      	movs	r2, #32
 801e24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801e250:	6878      	ldr	r0, [r7, #4]
 801e252:	f7e3 fa6f 	bl	8001734 <HAL_I2C_MasterTxCpltCallback>
}
 801e256:	e02b      	b.n	801e2b0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	681b      	ldr	r3, [r3, #0]
 801e25c:	685a      	ldr	r2, [r3, #4]
 801e25e:	687b      	ldr	r3, [r7, #4]
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e266:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	681b      	ldr	r3, [r3, #0]
 801e26c:	681a      	ldr	r2, [r3, #0]
 801e26e:	687b      	ldr	r3, [r7, #4]
 801e270:	681b      	ldr	r3, [r3, #0]
 801e272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e276:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 801e278:	687b      	ldr	r3, [r7, #4]
 801e27a:	2200      	movs	r2, #0
 801e27c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	2220      	movs	r2, #32
 801e282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e28c:	b2db      	uxtb	r3, r3
 801e28e:	2b40      	cmp	r3, #64	; 0x40
 801e290:	d107      	bne.n	801e2a2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801e292:	687b      	ldr	r3, [r7, #4]
 801e294:	2200      	movs	r2, #0
 801e296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801e29a:	6878      	ldr	r0, [r7, #4]
 801e29c:	f7e3 fa34 	bl	8001708 <HAL_I2C_MemTxCpltCallback>
}
 801e2a0:	e006      	b.n	801e2b0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801e2a2:	687b      	ldr	r3, [r7, #4]
 801e2a4:	2200      	movs	r2, #0
 801e2a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801e2aa:	6878      	ldr	r0, [r7, #4]
 801e2ac:	f7e3 fa42 	bl	8001734 <HAL_I2C_MasterTxCpltCallback>
}
 801e2b0:	bf00      	nop
 801e2b2:	3710      	adds	r7, #16
 801e2b4:	46bd      	mov	sp, r7
 801e2b6:	bd80      	pop	{r7, pc}

0801e2b8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 801e2b8:	b580      	push	{r7, lr}
 801e2ba:	b084      	sub	sp, #16
 801e2bc:	af00      	add	r7, sp, #0
 801e2be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e2c0:	687b      	ldr	r3, [r7, #4]
 801e2c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e2c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801e2c8:	687b      	ldr	r3, [r7, #4]
 801e2ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e2cc:	2b00      	cmp	r3, #0
 801e2ce:	d11d      	bne.n	801e30c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e2d4:	2b01      	cmp	r3, #1
 801e2d6:	d10b      	bne.n	801e2f0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e2dc:	b2da      	uxtb	r2, r3
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e2e8:	1c9a      	adds	r2, r3, #2
 801e2ea:	687b      	ldr	r3, [r7, #4]
 801e2ec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801e2ee:	e073      	b.n	801e3d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e2f4:	b29b      	uxth	r3, r3
 801e2f6:	121b      	asrs	r3, r3, #8
 801e2f8:	b2da      	uxtb	r2, r3
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	681b      	ldr	r3, [r3, #0]
 801e2fe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e304:	1c5a      	adds	r2, r3, #1
 801e306:	687b      	ldr	r3, [r7, #4]
 801e308:	651a      	str	r2, [r3, #80]	; 0x50
}
 801e30a:	e065      	b.n	801e3d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e310:	2b01      	cmp	r3, #1
 801e312:	d10b      	bne.n	801e32c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801e314:	687b      	ldr	r3, [r7, #4]
 801e316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e318:	b2da      	uxtb	r2, r3
 801e31a:	687b      	ldr	r3, [r7, #4]
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e324:	1c5a      	adds	r2, r3, #1
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	651a      	str	r2, [r3, #80]	; 0x50
}
 801e32a:	e055      	b.n	801e3d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e330:	2b02      	cmp	r3, #2
 801e332:	d151      	bne.n	801e3d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 801e334:	7bfb      	ldrb	r3, [r7, #15]
 801e336:	2b22      	cmp	r3, #34	; 0x22
 801e338:	d10d      	bne.n	801e356 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	681b      	ldr	r3, [r3, #0]
 801e33e:	681a      	ldr	r2, [r3, #0]
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	681b      	ldr	r3, [r3, #0]
 801e344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e348:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e34e:	1c5a      	adds	r2, r3, #1
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	651a      	str	r2, [r3, #80]	; 0x50
}
 801e354:	e040      	b.n	801e3d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801e356:	687b      	ldr	r3, [r7, #4]
 801e358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e35a:	b29b      	uxth	r3, r3
 801e35c:	2b00      	cmp	r3, #0
 801e35e:	d015      	beq.n	801e38c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 801e360:	7bfb      	ldrb	r3, [r7, #15]
 801e362:	2b21      	cmp	r3, #33	; 0x21
 801e364:	d112      	bne.n	801e38c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e36a:	781a      	ldrb	r2, [r3, #0]
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	681b      	ldr	r3, [r3, #0]
 801e370:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e376:	1c5a      	adds	r2, r3, #1
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e380:	b29b      	uxth	r3, r3
 801e382:	3b01      	subs	r3, #1
 801e384:	b29a      	uxth	r2, r3
 801e386:	687b      	ldr	r3, [r7, #4]
 801e388:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801e38a:	e025      	b.n	801e3d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801e38c:	687b      	ldr	r3, [r7, #4]
 801e38e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e390:	b29b      	uxth	r3, r3
 801e392:	2b00      	cmp	r3, #0
 801e394:	d120      	bne.n	801e3d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 801e396:	7bfb      	ldrb	r3, [r7, #15]
 801e398:	2b21      	cmp	r3, #33	; 0x21
 801e39a:	d11d      	bne.n	801e3d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	681b      	ldr	r3, [r3, #0]
 801e3a0:	685a      	ldr	r2, [r3, #4]
 801e3a2:	687b      	ldr	r3, [r7, #4]
 801e3a4:	681b      	ldr	r3, [r3, #0]
 801e3a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e3aa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	681b      	ldr	r3, [r3, #0]
 801e3b0:	681a      	ldr	r2, [r3, #0]
 801e3b2:	687b      	ldr	r3, [r7, #4]
 801e3b4:	681b      	ldr	r3, [r3, #0]
 801e3b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e3ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	2200      	movs	r2, #0
 801e3c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801e3c2:	687b      	ldr	r3, [r7, #4]
 801e3c4:	2220      	movs	r2, #32
 801e3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e3ca:	687b      	ldr	r3, [r7, #4]
 801e3cc:	2200      	movs	r2, #0
 801e3ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 801e3d2:	6878      	ldr	r0, [r7, #4]
 801e3d4:	f7e3 f998 	bl	8001708 <HAL_I2C_MemTxCpltCallback>
}
 801e3d8:	bf00      	nop
 801e3da:	3710      	adds	r7, #16
 801e3dc:	46bd      	mov	sp, r7
 801e3de:	bd80      	pop	{r7, pc}

0801e3e0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801e3e0:	b580      	push	{r7, lr}
 801e3e2:	b084      	sub	sp, #16
 801e3e4:	af00      	add	r7, sp, #0
 801e3e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801e3e8:	687b      	ldr	r3, [r7, #4]
 801e3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e3ee:	b2db      	uxtb	r3, r3
 801e3f0:	2b22      	cmp	r3, #34	; 0x22
 801e3f2:	f040 80ac 	bne.w	801e54e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e3fa:	b29b      	uxth	r3, r3
 801e3fc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	2b03      	cmp	r3, #3
 801e402:	d921      	bls.n	801e448 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	691a      	ldr	r2, [r3, #16]
 801e40a:	687b      	ldr	r3, [r7, #4]
 801e40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e40e:	b2d2      	uxtb	r2, r2
 801e410:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e416:	1c5a      	adds	r2, r3, #1
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801e41c:	687b      	ldr	r3, [r7, #4]
 801e41e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e420:	b29b      	uxth	r3, r3
 801e422:	3b01      	subs	r3, #1
 801e424:	b29a      	uxth	r2, r3
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e42e:	b29b      	uxth	r3, r3
 801e430:	2b03      	cmp	r3, #3
 801e432:	f040 808c 	bne.w	801e54e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	685a      	ldr	r2, [r3, #4]
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e444:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 801e446:	e082      	b.n	801e54e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e44c:	2b02      	cmp	r3, #2
 801e44e:	d075      	beq.n	801e53c <I2C_MasterReceive_RXNE+0x15c>
 801e450:	68fb      	ldr	r3, [r7, #12]
 801e452:	2b01      	cmp	r3, #1
 801e454:	d002      	beq.n	801e45c <I2C_MasterReceive_RXNE+0x7c>
 801e456:	68fb      	ldr	r3, [r7, #12]
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d16f      	bne.n	801e53c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801e45c:	6878      	ldr	r0, [r7, #4]
 801e45e:	f001 fbcf 	bl	801fc00 <I2C_WaitOnSTOPRequestThroughIT>
 801e462:	4603      	mov	r3, r0
 801e464:	2b00      	cmp	r3, #0
 801e466:	d142      	bne.n	801e4ee <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	681b      	ldr	r3, [r3, #0]
 801e46c:	681a      	ldr	r2, [r3, #0]
 801e46e:	687b      	ldr	r3, [r7, #4]
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e476:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e478:	687b      	ldr	r3, [r7, #4]
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	685a      	ldr	r2, [r3, #4]
 801e47e:	687b      	ldr	r3, [r7, #4]
 801e480:	681b      	ldr	r3, [r3, #0]
 801e482:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e486:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	681b      	ldr	r3, [r3, #0]
 801e48c:	691a      	ldr	r2, [r3, #16]
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e492:	b2d2      	uxtb	r2, r2
 801e494:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e49a:	1c5a      	adds	r2, r3, #1
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e4a4:	b29b      	uxth	r3, r3
 801e4a6:	3b01      	subs	r3, #1
 801e4a8:	b29a      	uxth	r2, r3
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801e4ae:	687b      	ldr	r3, [r7, #4]
 801e4b0:	2220      	movs	r2, #32
 801e4b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e4bc:	b2db      	uxtb	r3, r3
 801e4be:	2b40      	cmp	r3, #64	; 0x40
 801e4c0:	d10a      	bne.n	801e4d8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801e4c2:	687b      	ldr	r3, [r7, #4]
 801e4c4:	2200      	movs	r2, #0
 801e4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	2200      	movs	r2, #0
 801e4ce:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801e4d0:	6878      	ldr	r0, [r7, #4]
 801e4d2:	f7e3 f8ed 	bl	80016b0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801e4d6:	e03a      	b.n	801e54e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	2200      	movs	r2, #0
 801e4dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	2212      	movs	r2, #18
 801e4e4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801e4e6:	6878      	ldr	r0, [r7, #4]
 801e4e8:	f7e3 f8f8 	bl	80016dc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801e4ec:	e02f      	b.n	801e54e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	681b      	ldr	r3, [r3, #0]
 801e4f2:	685a      	ldr	r2, [r3, #4]
 801e4f4:	687b      	ldr	r3, [r7, #4]
 801e4f6:	681b      	ldr	r3, [r3, #0]
 801e4f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e4fc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e4fe:	687b      	ldr	r3, [r7, #4]
 801e500:	681b      	ldr	r3, [r3, #0]
 801e502:	691a      	ldr	r2, [r3, #16]
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e508:	b2d2      	uxtb	r2, r2
 801e50a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e510:	1c5a      	adds	r2, r3, #1
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e51a:	b29b      	uxth	r3, r3
 801e51c:	3b01      	subs	r3, #1
 801e51e:	b29a      	uxth	r2, r3
 801e520:	687b      	ldr	r3, [r7, #4]
 801e522:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	2220      	movs	r2, #32
 801e528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e52c:	687b      	ldr	r3, [r7, #4]
 801e52e:	2200      	movs	r2, #0
 801e530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801e534:	6878      	ldr	r0, [r7, #4]
 801e536:	f7ff fd99 	bl	801e06c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801e53a:	e008      	b.n	801e54e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	681b      	ldr	r3, [r3, #0]
 801e540:	685a      	ldr	r2, [r3, #4]
 801e542:	687b      	ldr	r3, [r7, #4]
 801e544:	681b      	ldr	r3, [r3, #0]
 801e546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e54a:	605a      	str	r2, [r3, #4]
}
 801e54c:	e7ff      	b.n	801e54e <I2C_MasterReceive_RXNE+0x16e>
 801e54e:	bf00      	nop
 801e550:	3710      	adds	r7, #16
 801e552:	46bd      	mov	sp, r7
 801e554:	bd80      	pop	{r7, pc}

0801e556 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801e556:	b580      	push	{r7, lr}
 801e558:	b084      	sub	sp, #16
 801e55a:	af00      	add	r7, sp, #0
 801e55c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801e55e:	687b      	ldr	r3, [r7, #4]
 801e560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e562:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801e564:	687b      	ldr	r3, [r7, #4]
 801e566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e568:	b29b      	uxth	r3, r3
 801e56a:	2b04      	cmp	r3, #4
 801e56c:	d11b      	bne.n	801e5a6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e56e:	687b      	ldr	r3, [r7, #4]
 801e570:	681b      	ldr	r3, [r3, #0]
 801e572:	685a      	ldr	r2, [r3, #4]
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	681b      	ldr	r3, [r3, #0]
 801e578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e57c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	681b      	ldr	r3, [r3, #0]
 801e582:	691a      	ldr	r2, [r3, #16]
 801e584:	687b      	ldr	r3, [r7, #4]
 801e586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e588:	b2d2      	uxtb	r2, r2
 801e58a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e590:	1c5a      	adds	r2, r3, #1
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801e596:	687b      	ldr	r3, [r7, #4]
 801e598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e59a:	b29b      	uxth	r3, r3
 801e59c:	3b01      	subs	r3, #1
 801e59e:	b29a      	uxth	r2, r3
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801e5a4:	e0bd      	b.n	801e722 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801e5a6:	687b      	ldr	r3, [r7, #4]
 801e5a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e5aa:	b29b      	uxth	r3, r3
 801e5ac:	2b03      	cmp	r3, #3
 801e5ae:	d129      	bne.n	801e604 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	685a      	ldr	r2, [r3, #4]
 801e5b6:	687b      	ldr	r3, [r7, #4]
 801e5b8:	681b      	ldr	r3, [r3, #0]
 801e5ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e5be:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801e5c0:	68fb      	ldr	r3, [r7, #12]
 801e5c2:	2b04      	cmp	r3, #4
 801e5c4:	d00a      	beq.n	801e5dc <I2C_MasterReceive_BTF+0x86>
 801e5c6:	68fb      	ldr	r3, [r7, #12]
 801e5c8:	2b02      	cmp	r3, #2
 801e5ca:	d007      	beq.n	801e5dc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e5cc:	687b      	ldr	r3, [r7, #4]
 801e5ce:	681b      	ldr	r3, [r3, #0]
 801e5d0:	681a      	ldr	r2, [r3, #0]
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e5da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e5dc:	687b      	ldr	r3, [r7, #4]
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	691a      	ldr	r2, [r3, #16]
 801e5e2:	687b      	ldr	r3, [r7, #4]
 801e5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5e6:	b2d2      	uxtb	r2, r2
 801e5e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801e5ea:	687b      	ldr	r3, [r7, #4]
 801e5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5ee:	1c5a      	adds	r2, r3, #1
 801e5f0:	687b      	ldr	r3, [r7, #4]
 801e5f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e5f8:	b29b      	uxth	r3, r3
 801e5fa:	3b01      	subs	r3, #1
 801e5fc:	b29a      	uxth	r2, r3
 801e5fe:	687b      	ldr	r3, [r7, #4]
 801e600:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801e602:	e08e      	b.n	801e722 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e608:	b29b      	uxth	r3, r3
 801e60a:	2b02      	cmp	r3, #2
 801e60c:	d176      	bne.n	801e6fc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801e60e:	68fb      	ldr	r3, [r7, #12]
 801e610:	2b01      	cmp	r3, #1
 801e612:	d002      	beq.n	801e61a <I2C_MasterReceive_BTF+0xc4>
 801e614:	68fb      	ldr	r3, [r7, #12]
 801e616:	2b10      	cmp	r3, #16
 801e618:	d108      	bne.n	801e62c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e61a:	687b      	ldr	r3, [r7, #4]
 801e61c:	681b      	ldr	r3, [r3, #0]
 801e61e:	681a      	ldr	r2, [r3, #0]
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	681b      	ldr	r3, [r3, #0]
 801e624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e628:	601a      	str	r2, [r3, #0]
 801e62a:	e019      	b.n	801e660 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801e62c:	68fb      	ldr	r3, [r7, #12]
 801e62e:	2b04      	cmp	r3, #4
 801e630:	d002      	beq.n	801e638 <I2C_MasterReceive_BTF+0xe2>
 801e632:	68fb      	ldr	r3, [r7, #12]
 801e634:	2b02      	cmp	r3, #2
 801e636:	d108      	bne.n	801e64a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	681b      	ldr	r3, [r3, #0]
 801e63c:	681a      	ldr	r2, [r3, #0]
 801e63e:	687b      	ldr	r3, [r7, #4]
 801e640:	681b      	ldr	r3, [r3, #0]
 801e642:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e646:	601a      	str	r2, [r3, #0]
 801e648:	e00a      	b.n	801e660 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801e64a:	68fb      	ldr	r3, [r7, #12]
 801e64c:	2b10      	cmp	r3, #16
 801e64e:	d007      	beq.n	801e660 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	681b      	ldr	r3, [r3, #0]
 801e654:	681a      	ldr	r2, [r3, #0]
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	681b      	ldr	r3, [r3, #0]
 801e65a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e65e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	681b      	ldr	r3, [r3, #0]
 801e664:	691a      	ldr	r2, [r3, #16]
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e66a:	b2d2      	uxtb	r2, r2
 801e66c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801e66e:	687b      	ldr	r3, [r7, #4]
 801e670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e672:	1c5a      	adds	r2, r3, #1
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e67c:	b29b      	uxth	r3, r3
 801e67e:	3b01      	subs	r3, #1
 801e680:	b29a      	uxth	r2, r3
 801e682:	687b      	ldr	r3, [r7, #4]
 801e684:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	681b      	ldr	r3, [r3, #0]
 801e68a:	691a      	ldr	r2, [r3, #16]
 801e68c:	687b      	ldr	r3, [r7, #4]
 801e68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e690:	b2d2      	uxtb	r2, r2
 801e692:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e698:	1c5a      	adds	r2, r3, #1
 801e69a:	687b      	ldr	r3, [r7, #4]
 801e69c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801e69e:	687b      	ldr	r3, [r7, #4]
 801e6a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e6a2:	b29b      	uxth	r3, r3
 801e6a4:	3b01      	subs	r3, #1
 801e6a6:	b29a      	uxth	r2, r3
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	681b      	ldr	r3, [r3, #0]
 801e6b0:	685a      	ldr	r2, [r3, #4]
 801e6b2:	687b      	ldr	r3, [r7, #4]
 801e6b4:	681b      	ldr	r3, [r3, #0]
 801e6b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801e6ba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	2220      	movs	r2, #32
 801e6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e6c4:	687b      	ldr	r3, [r7, #4]
 801e6c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e6ca:	b2db      	uxtb	r3, r3
 801e6cc:	2b40      	cmp	r3, #64	; 0x40
 801e6ce:	d10a      	bne.n	801e6e6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e6d0:	687b      	ldr	r3, [r7, #4]
 801e6d2:	2200      	movs	r2, #0
 801e6d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	2200      	movs	r2, #0
 801e6dc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 801e6de:	6878      	ldr	r0, [r7, #4]
 801e6e0:	f7e2 ffe6 	bl	80016b0 <HAL_I2C_MemRxCpltCallback>
}
 801e6e4:	e01d      	b.n	801e722 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e6e6:	687b      	ldr	r3, [r7, #4]
 801e6e8:	2200      	movs	r2, #0
 801e6ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	2212      	movs	r2, #18
 801e6f2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801e6f4:	6878      	ldr	r0, [r7, #4]
 801e6f6:	f7e2 fff1 	bl	80016dc <HAL_I2C_MasterRxCpltCallback>
}
 801e6fa:	e012      	b.n	801e722 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	681b      	ldr	r3, [r3, #0]
 801e700:	691a      	ldr	r2, [r3, #16]
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e706:	b2d2      	uxtb	r2, r2
 801e708:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801e70a:	687b      	ldr	r3, [r7, #4]
 801e70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e70e:	1c5a      	adds	r2, r3, #1
 801e710:	687b      	ldr	r3, [r7, #4]
 801e712:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e718:	b29b      	uxth	r3, r3
 801e71a:	3b01      	subs	r3, #1
 801e71c:	b29a      	uxth	r2, r3
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801e722:	bf00      	nop
 801e724:	3710      	adds	r7, #16
 801e726:	46bd      	mov	sp, r7
 801e728:	bd80      	pop	{r7, pc}

0801e72a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801e72a:	b480      	push	{r7}
 801e72c:	b083      	sub	sp, #12
 801e72e:	af00      	add	r7, sp, #0
 801e730:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e738:	b2db      	uxtb	r3, r3
 801e73a:	2b40      	cmp	r3, #64	; 0x40
 801e73c:	d117      	bne.n	801e76e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801e73e:	687b      	ldr	r3, [r7, #4]
 801e740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e742:	2b00      	cmp	r3, #0
 801e744:	d109      	bne.n	801e75a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e74a:	b2db      	uxtb	r3, r3
 801e74c:	461a      	mov	r2, r3
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	681b      	ldr	r3, [r3, #0]
 801e752:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801e756:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801e758:	e067      	b.n	801e82a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801e75a:	687b      	ldr	r3, [r7, #4]
 801e75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e75e:	b2db      	uxtb	r3, r3
 801e760:	f043 0301 	orr.w	r3, r3, #1
 801e764:	b2da      	uxtb	r2, r3
 801e766:	687b      	ldr	r3, [r7, #4]
 801e768:	681b      	ldr	r3, [r3, #0]
 801e76a:	611a      	str	r2, [r3, #16]
}
 801e76c:	e05d      	b.n	801e82a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	691b      	ldr	r3, [r3, #16]
 801e772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801e776:	d133      	bne.n	801e7e0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801e778:	687b      	ldr	r3, [r7, #4]
 801e77a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e77e:	b2db      	uxtb	r3, r3
 801e780:	2b21      	cmp	r3, #33	; 0x21
 801e782:	d109      	bne.n	801e798 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801e784:	687b      	ldr	r3, [r7, #4]
 801e786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e788:	b2db      	uxtb	r3, r3
 801e78a:	461a      	mov	r2, r3
 801e78c:	687b      	ldr	r3, [r7, #4]
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801e794:	611a      	str	r2, [r3, #16]
 801e796:	e008      	b.n	801e7aa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e79c:	b2db      	uxtb	r3, r3
 801e79e:	f043 0301 	orr.w	r3, r3, #1
 801e7a2:	b2da      	uxtb	r2, r3
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	681b      	ldr	r3, [r3, #0]
 801e7a8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	d004      	beq.n	801e7bc <I2C_Master_SB+0x92>
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e7b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e7b8:	2b00      	cmp	r3, #0
 801e7ba:	d108      	bne.n	801e7ce <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801e7bc:	687b      	ldr	r3, [r7, #4]
 801e7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7c0:	2b00      	cmp	r3, #0
 801e7c2:	d032      	beq.n	801e82a <I2C_Master_SB+0x100>
 801e7c4:	687b      	ldr	r3, [r7, #4]
 801e7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	d02d      	beq.n	801e82a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	681b      	ldr	r3, [r3, #0]
 801e7d2:	685a      	ldr	r2, [r3, #4]
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	681b      	ldr	r3, [r3, #0]
 801e7d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e7dc:	605a      	str	r2, [r3, #4]
}
 801e7de:	e024      	b.n	801e82a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801e7e0:	687b      	ldr	r3, [r7, #4]
 801e7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e7e4:	2b00      	cmp	r3, #0
 801e7e6:	d10e      	bne.n	801e806 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801e7e8:	687b      	ldr	r3, [r7, #4]
 801e7ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e7ec:	b29b      	uxth	r3, r3
 801e7ee:	11db      	asrs	r3, r3, #7
 801e7f0:	b2db      	uxtb	r3, r3
 801e7f2:	f003 0306 	and.w	r3, r3, #6
 801e7f6:	b2db      	uxtb	r3, r3
 801e7f8:	f063 030f 	orn	r3, r3, #15
 801e7fc:	b2da      	uxtb	r2, r3
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	681b      	ldr	r3, [r3, #0]
 801e802:	611a      	str	r2, [r3, #16]
}
 801e804:	e011      	b.n	801e82a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e80a:	2b01      	cmp	r3, #1
 801e80c:	d10d      	bne.n	801e82a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e812:	b29b      	uxth	r3, r3
 801e814:	11db      	asrs	r3, r3, #7
 801e816:	b2db      	uxtb	r3, r3
 801e818:	f003 0306 	and.w	r3, r3, #6
 801e81c:	b2db      	uxtb	r3, r3
 801e81e:	f063 030e 	orn	r3, r3, #14
 801e822:	b2da      	uxtb	r2, r3
 801e824:	687b      	ldr	r3, [r7, #4]
 801e826:	681b      	ldr	r3, [r3, #0]
 801e828:	611a      	str	r2, [r3, #16]
}
 801e82a:	bf00      	nop
 801e82c:	370c      	adds	r7, #12
 801e82e:	46bd      	mov	sp, r7
 801e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e834:	4770      	bx	lr

0801e836 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801e836:	b480      	push	{r7}
 801e838:	b083      	sub	sp, #12
 801e83a:	af00      	add	r7, sp, #0
 801e83c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801e83e:	687b      	ldr	r3, [r7, #4]
 801e840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e842:	b2da      	uxtb	r2, r3
 801e844:	687b      	ldr	r3, [r7, #4]
 801e846:	681b      	ldr	r3, [r3, #0]
 801e848:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801e84a:	687b      	ldr	r3, [r7, #4]
 801e84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e84e:	2b00      	cmp	r3, #0
 801e850:	d004      	beq.n	801e85c <I2C_Master_ADD10+0x26>
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e858:	2b00      	cmp	r3, #0
 801e85a:	d108      	bne.n	801e86e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e860:	2b00      	cmp	r3, #0
 801e862:	d00c      	beq.n	801e87e <I2C_Master_ADD10+0x48>
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d007      	beq.n	801e87e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	681b      	ldr	r3, [r3, #0]
 801e872:	685a      	ldr	r2, [r3, #4]
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	681b      	ldr	r3, [r3, #0]
 801e878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e87c:	605a      	str	r2, [r3, #4]
  }
}
 801e87e:	bf00      	nop
 801e880:	370c      	adds	r7, #12
 801e882:	46bd      	mov	sp, r7
 801e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e888:	4770      	bx	lr

0801e88a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 801e88a:	b480      	push	{r7}
 801e88c:	b091      	sub	sp, #68	; 0x44
 801e88e:	af00      	add	r7, sp, #0
 801e890:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801e892:	687b      	ldr	r3, [r7, #4]
 801e894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e898:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e8a0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801e8a2:	687b      	ldr	r3, [r7, #4]
 801e8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e8a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801e8a8:	687b      	ldr	r3, [r7, #4]
 801e8aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e8ae:	b2db      	uxtb	r3, r3
 801e8b0:	2b22      	cmp	r3, #34	; 0x22
 801e8b2:	f040 8169 	bne.w	801eb88 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 801e8b6:	687b      	ldr	r3, [r7, #4]
 801e8b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	d10f      	bne.n	801e8de <I2C_Master_ADDR+0x54>
 801e8be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801e8c2:	2b40      	cmp	r3, #64	; 0x40
 801e8c4:	d10b      	bne.n	801e8de <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e8c6:	2300      	movs	r3, #0
 801e8c8:	633b      	str	r3, [r7, #48]	; 0x30
 801e8ca:	687b      	ldr	r3, [r7, #4]
 801e8cc:	681b      	ldr	r3, [r3, #0]
 801e8ce:	695b      	ldr	r3, [r3, #20]
 801e8d0:	633b      	str	r3, [r7, #48]	; 0x30
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	681b      	ldr	r3, [r3, #0]
 801e8d6:	699b      	ldr	r3, [r3, #24]
 801e8d8:	633b      	str	r3, [r7, #48]	; 0x30
 801e8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8dc:	e160      	b.n	801eba0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801e8de:	687b      	ldr	r3, [r7, #4]
 801e8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e8e2:	2b00      	cmp	r3, #0
 801e8e4:	d11d      	bne.n	801e922 <I2C_Master_ADDR+0x98>
 801e8e6:	687b      	ldr	r3, [r7, #4]
 801e8e8:	691b      	ldr	r3, [r3, #16]
 801e8ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801e8ee:	d118      	bne.n	801e922 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e8f0:	2300      	movs	r3, #0
 801e8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	695b      	ldr	r3, [r3, #20]
 801e8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e8fc:	687b      	ldr	r3, [r7, #4]
 801e8fe:	681b      	ldr	r3, [r3, #0]
 801e900:	699b      	ldr	r3, [r3, #24]
 801e902:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e904:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801e906:	687b      	ldr	r3, [r7, #4]
 801e908:	681b      	ldr	r3, [r3, #0]
 801e90a:	681a      	ldr	r2, [r3, #0]
 801e90c:	687b      	ldr	r3, [r7, #4]
 801e90e:	681b      	ldr	r3, [r3, #0]
 801e910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e914:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801e916:	687b      	ldr	r3, [r7, #4]
 801e918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e91a:	1c5a      	adds	r2, r3, #1
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	651a      	str	r2, [r3, #80]	; 0x50
 801e920:	e13e      	b.n	801eba0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801e922:	687b      	ldr	r3, [r7, #4]
 801e924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e926:	b29b      	uxth	r3, r3
 801e928:	2b00      	cmp	r3, #0
 801e92a:	d113      	bne.n	801e954 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e92c:	2300      	movs	r3, #0
 801e92e:	62bb      	str	r3, [r7, #40]	; 0x28
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	695b      	ldr	r3, [r3, #20]
 801e936:	62bb      	str	r3, [r7, #40]	; 0x28
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	681b      	ldr	r3, [r3, #0]
 801e93c:	699b      	ldr	r3, [r3, #24]
 801e93e:	62bb      	str	r3, [r7, #40]	; 0x28
 801e940:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	681b      	ldr	r3, [r3, #0]
 801e946:	681a      	ldr	r2, [r3, #0]
 801e948:	687b      	ldr	r3, [r7, #4]
 801e94a:	681b      	ldr	r3, [r3, #0]
 801e94c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e950:	601a      	str	r2, [r3, #0]
 801e952:	e115      	b.n	801eb80 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801e954:	687b      	ldr	r3, [r7, #4]
 801e956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e958:	b29b      	uxth	r3, r3
 801e95a:	2b01      	cmp	r3, #1
 801e95c:	f040 808a 	bne.w	801ea74 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801e960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e962:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801e966:	d137      	bne.n	801e9d8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e968:	687b      	ldr	r3, [r7, #4]
 801e96a:	681b      	ldr	r3, [r3, #0]
 801e96c:	681a      	ldr	r2, [r3, #0]
 801e96e:	687b      	ldr	r3, [r7, #4]
 801e970:	681b      	ldr	r3, [r3, #0]
 801e972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e976:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801e978:	687b      	ldr	r3, [r7, #4]
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	685b      	ldr	r3, [r3, #4]
 801e97e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e986:	d113      	bne.n	801e9b0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	681b      	ldr	r3, [r3, #0]
 801e98c:	681a      	ldr	r2, [r3, #0]
 801e98e:	687b      	ldr	r3, [r7, #4]
 801e990:	681b      	ldr	r3, [r3, #0]
 801e992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e996:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e998:	2300      	movs	r3, #0
 801e99a:	627b      	str	r3, [r7, #36]	; 0x24
 801e99c:	687b      	ldr	r3, [r7, #4]
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	695b      	ldr	r3, [r3, #20]
 801e9a2:	627b      	str	r3, [r7, #36]	; 0x24
 801e9a4:	687b      	ldr	r3, [r7, #4]
 801e9a6:	681b      	ldr	r3, [r3, #0]
 801e9a8:	699b      	ldr	r3, [r3, #24]
 801e9aa:	627b      	str	r3, [r7, #36]	; 0x24
 801e9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9ae:	e0e7      	b.n	801eb80 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e9b0:	2300      	movs	r3, #0
 801e9b2:	623b      	str	r3, [r7, #32]
 801e9b4:	687b      	ldr	r3, [r7, #4]
 801e9b6:	681b      	ldr	r3, [r3, #0]
 801e9b8:	695b      	ldr	r3, [r3, #20]
 801e9ba:	623b      	str	r3, [r7, #32]
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	681b      	ldr	r3, [r3, #0]
 801e9c0:	699b      	ldr	r3, [r3, #24]
 801e9c2:	623b      	str	r3, [r7, #32]
 801e9c4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e9c6:	687b      	ldr	r3, [r7, #4]
 801e9c8:	681b      	ldr	r3, [r3, #0]
 801e9ca:	681a      	ldr	r2, [r3, #0]
 801e9cc:	687b      	ldr	r3, [r7, #4]
 801e9ce:	681b      	ldr	r3, [r3, #0]
 801e9d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e9d4:	601a      	str	r2, [r3, #0]
 801e9d6:	e0d3      	b.n	801eb80 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801e9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e9da:	2b08      	cmp	r3, #8
 801e9dc:	d02e      	beq.n	801ea3c <I2C_Master_ADDR+0x1b2>
 801e9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e9e0:	2b20      	cmp	r3, #32
 801e9e2:	d02b      	beq.n	801ea3c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 801e9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e9e6:	2b12      	cmp	r3, #18
 801e9e8:	d102      	bne.n	801e9f0 <I2C_Master_ADDR+0x166>
 801e9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e9ec:	2b01      	cmp	r3, #1
 801e9ee:	d125      	bne.n	801ea3c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801e9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e9f2:	2b04      	cmp	r3, #4
 801e9f4:	d00e      	beq.n	801ea14 <I2C_Master_ADDR+0x18a>
 801e9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e9f8:	2b02      	cmp	r3, #2
 801e9fa:	d00b      	beq.n	801ea14 <I2C_Master_ADDR+0x18a>
 801e9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e9fe:	2b10      	cmp	r3, #16
 801ea00:	d008      	beq.n	801ea14 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	681b      	ldr	r3, [r3, #0]
 801ea06:	681a      	ldr	r2, [r3, #0]
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	681b      	ldr	r3, [r3, #0]
 801ea0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ea10:	601a      	str	r2, [r3, #0]
 801ea12:	e007      	b.n	801ea24 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ea14:	687b      	ldr	r3, [r7, #4]
 801ea16:	681b      	ldr	r3, [r3, #0]
 801ea18:	681a      	ldr	r2, [r3, #0]
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	681b      	ldr	r3, [r3, #0]
 801ea1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ea22:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ea24:	2300      	movs	r3, #0
 801ea26:	61fb      	str	r3, [r7, #28]
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	681b      	ldr	r3, [r3, #0]
 801ea2c:	695b      	ldr	r3, [r3, #20]
 801ea2e:	61fb      	str	r3, [r7, #28]
 801ea30:	687b      	ldr	r3, [r7, #4]
 801ea32:	681b      	ldr	r3, [r3, #0]
 801ea34:	699b      	ldr	r3, [r3, #24]
 801ea36:	61fb      	str	r3, [r7, #28]
 801ea38:	69fb      	ldr	r3, [r7, #28]
 801ea3a:	e0a1      	b.n	801eb80 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	681b      	ldr	r3, [r3, #0]
 801ea40:	681a      	ldr	r2, [r3, #0]
 801ea42:	687b      	ldr	r3, [r7, #4]
 801ea44:	681b      	ldr	r3, [r3, #0]
 801ea46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ea4a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ea4c:	2300      	movs	r3, #0
 801ea4e:	61bb      	str	r3, [r7, #24]
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	681b      	ldr	r3, [r3, #0]
 801ea54:	695b      	ldr	r3, [r3, #20]
 801ea56:	61bb      	str	r3, [r7, #24]
 801ea58:	687b      	ldr	r3, [r7, #4]
 801ea5a:	681b      	ldr	r3, [r3, #0]
 801ea5c:	699b      	ldr	r3, [r3, #24]
 801ea5e:	61bb      	str	r3, [r7, #24]
 801ea60:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	681b      	ldr	r3, [r3, #0]
 801ea66:	681a      	ldr	r2, [r3, #0]
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ea70:	601a      	str	r2, [r3, #0]
 801ea72:	e085      	b.n	801eb80 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ea78:	b29b      	uxth	r3, r3
 801ea7a:	2b02      	cmp	r3, #2
 801ea7c:	d14d      	bne.n	801eb1a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801ea7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ea80:	2b04      	cmp	r3, #4
 801ea82:	d016      	beq.n	801eab2 <I2C_Master_ADDR+0x228>
 801ea84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ea86:	2b02      	cmp	r3, #2
 801ea88:	d013      	beq.n	801eab2 <I2C_Master_ADDR+0x228>
 801ea8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ea8c:	2b10      	cmp	r3, #16
 801ea8e:	d010      	beq.n	801eab2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	681b      	ldr	r3, [r3, #0]
 801ea94:	681a      	ldr	r2, [r3, #0]
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ea9e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	681b      	ldr	r3, [r3, #0]
 801eaa4:	681a      	ldr	r2, [r3, #0]
 801eaa6:	687b      	ldr	r3, [r7, #4]
 801eaa8:	681b      	ldr	r3, [r3, #0]
 801eaaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801eaae:	601a      	str	r2, [r3, #0]
 801eab0:	e007      	b.n	801eac2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	681b      	ldr	r3, [r3, #0]
 801eab6:	681a      	ldr	r2, [r3, #0]
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	681b      	ldr	r3, [r3, #0]
 801eabc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801eac0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801eac2:	687b      	ldr	r3, [r7, #4]
 801eac4:	681b      	ldr	r3, [r3, #0]
 801eac6:	685b      	ldr	r3, [r3, #4]
 801eac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801eacc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ead0:	d117      	bne.n	801eb02 <I2C_Master_ADDR+0x278>
 801ead2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ead4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801ead8:	d00b      	beq.n	801eaf2 <I2C_Master_ADDR+0x268>
 801eada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eadc:	2b01      	cmp	r3, #1
 801eade:	d008      	beq.n	801eaf2 <I2C_Master_ADDR+0x268>
 801eae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eae2:	2b08      	cmp	r3, #8
 801eae4:	d005      	beq.n	801eaf2 <I2C_Master_ADDR+0x268>
 801eae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eae8:	2b10      	cmp	r3, #16
 801eaea:	d002      	beq.n	801eaf2 <I2C_Master_ADDR+0x268>
 801eaec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eaee:	2b20      	cmp	r3, #32
 801eaf0:	d107      	bne.n	801eb02 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801eaf2:	687b      	ldr	r3, [r7, #4]
 801eaf4:	681b      	ldr	r3, [r3, #0]
 801eaf6:	685a      	ldr	r2, [r3, #4]
 801eaf8:	687b      	ldr	r3, [r7, #4]
 801eafa:	681b      	ldr	r3, [r3, #0]
 801eafc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801eb00:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801eb02:	2300      	movs	r3, #0
 801eb04:	617b      	str	r3, [r7, #20]
 801eb06:	687b      	ldr	r3, [r7, #4]
 801eb08:	681b      	ldr	r3, [r3, #0]
 801eb0a:	695b      	ldr	r3, [r3, #20]
 801eb0c:	617b      	str	r3, [r7, #20]
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	699b      	ldr	r3, [r3, #24]
 801eb14:	617b      	str	r3, [r7, #20]
 801eb16:	697b      	ldr	r3, [r7, #20]
 801eb18:	e032      	b.n	801eb80 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801eb1a:	687b      	ldr	r3, [r7, #4]
 801eb1c:	681b      	ldr	r3, [r3, #0]
 801eb1e:	681a      	ldr	r2, [r3, #0]
 801eb20:	687b      	ldr	r3, [r7, #4]
 801eb22:	681b      	ldr	r3, [r3, #0]
 801eb24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801eb28:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801eb2a:	687b      	ldr	r3, [r7, #4]
 801eb2c:	681b      	ldr	r3, [r3, #0]
 801eb2e:	685b      	ldr	r3, [r3, #4]
 801eb30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801eb34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801eb38:	d117      	bne.n	801eb6a <I2C_Master_ADDR+0x2e0>
 801eb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801eb40:	d00b      	beq.n	801eb5a <I2C_Master_ADDR+0x2d0>
 801eb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb44:	2b01      	cmp	r3, #1
 801eb46:	d008      	beq.n	801eb5a <I2C_Master_ADDR+0x2d0>
 801eb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb4a:	2b08      	cmp	r3, #8
 801eb4c:	d005      	beq.n	801eb5a <I2C_Master_ADDR+0x2d0>
 801eb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb50:	2b10      	cmp	r3, #16
 801eb52:	d002      	beq.n	801eb5a <I2C_Master_ADDR+0x2d0>
 801eb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb56:	2b20      	cmp	r3, #32
 801eb58:	d107      	bne.n	801eb6a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	681b      	ldr	r3, [r3, #0]
 801eb5e:	685a      	ldr	r2, [r3, #4]
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	681b      	ldr	r3, [r3, #0]
 801eb64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801eb68:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801eb6a:	2300      	movs	r3, #0
 801eb6c:	613b      	str	r3, [r7, #16]
 801eb6e:	687b      	ldr	r3, [r7, #4]
 801eb70:	681b      	ldr	r3, [r3, #0]
 801eb72:	695b      	ldr	r3, [r3, #20]
 801eb74:	613b      	str	r3, [r7, #16]
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	681b      	ldr	r3, [r3, #0]
 801eb7a:	699b      	ldr	r3, [r3, #24]
 801eb7c:	613b      	str	r3, [r7, #16]
 801eb7e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801eb80:	687b      	ldr	r3, [r7, #4]
 801eb82:	2200      	movs	r2, #0
 801eb84:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801eb86:	e00b      	b.n	801eba0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801eb88:	2300      	movs	r3, #0
 801eb8a:	60fb      	str	r3, [r7, #12]
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	681b      	ldr	r3, [r3, #0]
 801eb90:	695b      	ldr	r3, [r3, #20]
 801eb92:	60fb      	str	r3, [r7, #12]
 801eb94:	687b      	ldr	r3, [r7, #4]
 801eb96:	681b      	ldr	r3, [r3, #0]
 801eb98:	699b      	ldr	r3, [r3, #24]
 801eb9a:	60fb      	str	r3, [r7, #12]
 801eb9c:	68fb      	ldr	r3, [r7, #12]
}
 801eb9e:	e7ff      	b.n	801eba0 <I2C_Master_ADDR+0x316>
 801eba0:	bf00      	nop
 801eba2:	3744      	adds	r7, #68	; 0x44
 801eba4:	46bd      	mov	sp, r7
 801eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebaa:	4770      	bx	lr

0801ebac <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801ebac:	b580      	push	{r7, lr}
 801ebae:	b084      	sub	sp, #16
 801ebb0:	af00      	add	r7, sp, #0
 801ebb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ebba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801ebbc:	687b      	ldr	r3, [r7, #4]
 801ebbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ebc0:	b29b      	uxth	r3, r3
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d02b      	beq.n	801ec1e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ebc6:	687b      	ldr	r3, [r7, #4]
 801ebc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ebca:	781a      	ldrb	r2, [r3, #0]
 801ebcc:	687b      	ldr	r3, [r7, #4]
 801ebce:	681b      	ldr	r3, [r3, #0]
 801ebd0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801ebd2:	687b      	ldr	r3, [r7, #4]
 801ebd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ebd6:	1c5a      	adds	r2, r3, #1
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ebe0:	b29b      	uxth	r3, r3
 801ebe2:	3b01      	subs	r3, #1
 801ebe4:	b29a      	uxth	r2, r3
 801ebe6:	687b      	ldr	r3, [r7, #4]
 801ebe8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801ebea:	687b      	ldr	r3, [r7, #4]
 801ebec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ebee:	b29b      	uxth	r3, r3
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d114      	bne.n	801ec1e <I2C_SlaveTransmit_TXE+0x72>
 801ebf4:	7bfb      	ldrb	r3, [r7, #15]
 801ebf6:	2b29      	cmp	r3, #41	; 0x29
 801ebf8:	d111      	bne.n	801ec1e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	681b      	ldr	r3, [r3, #0]
 801ebfe:	685a      	ldr	r2, [r3, #4]
 801ec00:	687b      	ldr	r3, [r7, #4]
 801ec02:	681b      	ldr	r3, [r3, #0]
 801ec04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ec08:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801ec0a:	687b      	ldr	r3, [r7, #4]
 801ec0c:	2221      	movs	r2, #33	; 0x21
 801ec0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801ec10:	687b      	ldr	r3, [r7, #4]
 801ec12:	2228      	movs	r2, #40	; 0x28
 801ec14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801ec18:	6878      	ldr	r0, [r7, #4]
 801ec1a:	f7ff f9fb 	bl	801e014 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801ec1e:	bf00      	nop
 801ec20:	3710      	adds	r7, #16
 801ec22:	46bd      	mov	sp, r7
 801ec24:	bd80      	pop	{r7, pc}

0801ec26 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801ec26:	b480      	push	{r7}
 801ec28:	b083      	sub	sp, #12
 801ec2a:	af00      	add	r7, sp, #0
 801ec2c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801ec2e:	687b      	ldr	r3, [r7, #4]
 801ec30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ec32:	b29b      	uxth	r3, r3
 801ec34:	2b00      	cmp	r3, #0
 801ec36:	d011      	beq.n	801ec5c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec3c:	781a      	ldrb	r2, [r3, #0]
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	681b      	ldr	r3, [r3, #0]
 801ec42:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801ec44:	687b      	ldr	r3, [r7, #4]
 801ec46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec48:	1c5a      	adds	r2, r3, #1
 801ec4a:	687b      	ldr	r3, [r7, #4]
 801ec4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801ec4e:	687b      	ldr	r3, [r7, #4]
 801ec50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ec52:	b29b      	uxth	r3, r3
 801ec54:	3b01      	subs	r3, #1
 801ec56:	b29a      	uxth	r2, r3
 801ec58:	687b      	ldr	r3, [r7, #4]
 801ec5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801ec5c:	bf00      	nop
 801ec5e:	370c      	adds	r7, #12
 801ec60:	46bd      	mov	sp, r7
 801ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec66:	4770      	bx	lr

0801ec68 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801ec68:	b580      	push	{r7, lr}
 801ec6a:	b084      	sub	sp, #16
 801ec6c:	af00      	add	r7, sp, #0
 801ec6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ec70:	687b      	ldr	r3, [r7, #4]
 801ec72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ec76:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801ec78:	687b      	ldr	r3, [r7, #4]
 801ec7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ec7c:	b29b      	uxth	r3, r3
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	d02c      	beq.n	801ecdc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	681b      	ldr	r3, [r3, #0]
 801ec86:	691a      	ldr	r2, [r3, #16]
 801ec88:	687b      	ldr	r3, [r7, #4]
 801ec8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec8c:	b2d2      	uxtb	r2, r2
 801ec8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec94:	1c5a      	adds	r2, r3, #1
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801ec9a:	687b      	ldr	r3, [r7, #4]
 801ec9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ec9e:	b29b      	uxth	r3, r3
 801eca0:	3b01      	subs	r3, #1
 801eca2:	b29a      	uxth	r2, r3
 801eca4:	687b      	ldr	r3, [r7, #4]
 801eca6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ecac:	b29b      	uxth	r3, r3
 801ecae:	2b00      	cmp	r3, #0
 801ecb0:	d114      	bne.n	801ecdc <I2C_SlaveReceive_RXNE+0x74>
 801ecb2:	7bfb      	ldrb	r3, [r7, #15]
 801ecb4:	2b2a      	cmp	r3, #42	; 0x2a
 801ecb6:	d111      	bne.n	801ecdc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	681b      	ldr	r3, [r3, #0]
 801ecbc:	685a      	ldr	r2, [r3, #4]
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	681b      	ldr	r3, [r3, #0]
 801ecc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ecc6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801ecc8:	687b      	ldr	r3, [r7, #4]
 801ecca:	2222      	movs	r2, #34	; 0x22
 801eccc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801ecce:	687b      	ldr	r3, [r7, #4]
 801ecd0:	2228      	movs	r2, #40	; 0x28
 801ecd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801ecd6:	6878      	ldr	r0, [r7, #4]
 801ecd8:	f7ff f9a6 	bl	801e028 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801ecdc:	bf00      	nop
 801ecde:	3710      	adds	r7, #16
 801ece0:	46bd      	mov	sp, r7
 801ece2:	bd80      	pop	{r7, pc}

0801ece4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801ece4:	b480      	push	{r7}
 801ece6:	b083      	sub	sp, #12
 801ece8:	af00      	add	r7, sp, #0
 801ecea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801ecec:	687b      	ldr	r3, [r7, #4]
 801ecee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ecf0:	b29b      	uxth	r3, r3
 801ecf2:	2b00      	cmp	r3, #0
 801ecf4:	d012      	beq.n	801ed1c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ecf6:	687b      	ldr	r3, [r7, #4]
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	691a      	ldr	r2, [r3, #16]
 801ecfc:	687b      	ldr	r3, [r7, #4]
 801ecfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed00:	b2d2      	uxtb	r2, r2
 801ed02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801ed04:	687b      	ldr	r3, [r7, #4]
 801ed06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed08:	1c5a      	adds	r2, r3, #1
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed12:	b29b      	uxth	r3, r3
 801ed14:	3b01      	subs	r3, #1
 801ed16:	b29a      	uxth	r2, r3
 801ed18:	687b      	ldr	r3, [r7, #4]
 801ed1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801ed1c:	bf00      	nop
 801ed1e:	370c      	adds	r7, #12
 801ed20:	46bd      	mov	sp, r7
 801ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed26:	4770      	bx	lr

0801ed28 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801ed28:	b580      	push	{r7, lr}
 801ed2a:	b084      	sub	sp, #16
 801ed2c:	af00      	add	r7, sp, #0
 801ed2e:	6078      	str	r0, [r7, #4]
 801ed30:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801ed32:	2300      	movs	r3, #0
 801ed34:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801ed36:	687b      	ldr	r3, [r7, #4]
 801ed38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ed3c:	b2db      	uxtb	r3, r3
 801ed3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801ed42:	2b28      	cmp	r3, #40	; 0x28
 801ed44:	d127      	bne.n	801ed96 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801ed46:	687b      	ldr	r3, [r7, #4]
 801ed48:	681b      	ldr	r3, [r3, #0]
 801ed4a:	685a      	ldr	r2, [r3, #4]
 801ed4c:	687b      	ldr	r3, [r7, #4]
 801ed4e:	681b      	ldr	r3, [r3, #0]
 801ed50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ed54:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801ed56:	683b      	ldr	r3, [r7, #0]
 801ed58:	089b      	lsrs	r3, r3, #2
 801ed5a:	f003 0301 	and.w	r3, r3, #1
 801ed5e:	2b00      	cmp	r3, #0
 801ed60:	d101      	bne.n	801ed66 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801ed62:	2301      	movs	r3, #1
 801ed64:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801ed66:	683b      	ldr	r3, [r7, #0]
 801ed68:	09db      	lsrs	r3, r3, #7
 801ed6a:	f003 0301 	and.w	r3, r3, #1
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	d103      	bne.n	801ed7a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	68db      	ldr	r3, [r3, #12]
 801ed76:	81bb      	strh	r3, [r7, #12]
 801ed78:	e002      	b.n	801ed80 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801ed7a:	687b      	ldr	r3, [r7, #4]
 801ed7c:	699b      	ldr	r3, [r3, #24]
 801ed7e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ed80:	687b      	ldr	r3, [r7, #4]
 801ed82:	2200      	movs	r2, #0
 801ed84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801ed88:	89ba      	ldrh	r2, [r7, #12]
 801ed8a:	7bfb      	ldrb	r3, [r7, #15]
 801ed8c:	4619      	mov	r1, r3
 801ed8e:	6878      	ldr	r0, [r7, #4]
 801ed90:	f7ff f954 	bl	801e03c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801ed94:	e00e      	b.n	801edb4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ed96:	2300      	movs	r3, #0
 801ed98:	60bb      	str	r3, [r7, #8]
 801ed9a:	687b      	ldr	r3, [r7, #4]
 801ed9c:	681b      	ldr	r3, [r3, #0]
 801ed9e:	695b      	ldr	r3, [r3, #20]
 801eda0:	60bb      	str	r3, [r7, #8]
 801eda2:	687b      	ldr	r3, [r7, #4]
 801eda4:	681b      	ldr	r3, [r3, #0]
 801eda6:	699b      	ldr	r3, [r3, #24]
 801eda8:	60bb      	str	r3, [r7, #8]
 801edaa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	2200      	movs	r2, #0
 801edb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801edb4:	bf00      	nop
 801edb6:	3710      	adds	r7, #16
 801edb8:	46bd      	mov	sp, r7
 801edba:	bd80      	pop	{r7, pc}

0801edbc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 801edbc:	b580      	push	{r7, lr}
 801edbe:	b084      	sub	sp, #16
 801edc0:	af00      	add	r7, sp, #0
 801edc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801edca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801edcc:	687b      	ldr	r3, [r7, #4]
 801edce:	681b      	ldr	r3, [r3, #0]
 801edd0:	685a      	ldr	r2, [r3, #4]
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801edda:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 801eddc:	2300      	movs	r3, #0
 801edde:	60bb      	str	r3, [r7, #8]
 801ede0:	687b      	ldr	r3, [r7, #4]
 801ede2:	681b      	ldr	r3, [r3, #0]
 801ede4:	695b      	ldr	r3, [r3, #20]
 801ede6:	60bb      	str	r3, [r7, #8]
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	681b      	ldr	r3, [r3, #0]
 801edec:	681a      	ldr	r2, [r3, #0]
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	681b      	ldr	r3, [r3, #0]
 801edf2:	f042 0201 	orr.w	r2, r2, #1
 801edf6:	601a      	str	r2, [r3, #0]
 801edf8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	681b      	ldr	r3, [r3, #0]
 801edfe:	681a      	ldr	r2, [r3, #0]
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	681b      	ldr	r3, [r3, #0]
 801ee04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ee08:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	681b      	ldr	r3, [r3, #0]
 801ee0e:	685b      	ldr	r3, [r3, #4]
 801ee10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ee14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ee18:	d172      	bne.n	801ef00 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801ee1a:	7bfb      	ldrb	r3, [r7, #15]
 801ee1c:	2b22      	cmp	r3, #34	; 0x22
 801ee1e:	d002      	beq.n	801ee26 <I2C_Slave_STOPF+0x6a>
 801ee20:	7bfb      	ldrb	r3, [r7, #15]
 801ee22:	2b2a      	cmp	r3, #42	; 0x2a
 801ee24:	d135      	bne.n	801ee92 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee2a:	681b      	ldr	r3, [r3, #0]
 801ee2c:	685b      	ldr	r3, [r3, #4]
 801ee2e:	b29a      	uxth	r2, r3
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801ee34:	687b      	ldr	r3, [r7, #4]
 801ee36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ee38:	b29b      	uxth	r3, r3
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	d005      	beq.n	801ee4a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ee42:	f043 0204 	orr.w	r2, r3, #4
 801ee46:	687b      	ldr	r3, [r7, #4]
 801ee48:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	681b      	ldr	r3, [r3, #0]
 801ee4e:	685a      	ldr	r2, [r3, #4]
 801ee50:	687b      	ldr	r3, [r7, #4]
 801ee52:	681b      	ldr	r3, [r3, #0]
 801ee54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ee58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801ee5a:	687b      	ldr	r3, [r7, #4]
 801ee5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee5e:	4618      	mov	r0, r3
 801ee60:	f7fd fc90 	bl	801c784 <HAL_DMA_GetState>
 801ee64:	4603      	mov	r3, r0
 801ee66:	2b01      	cmp	r3, #1
 801ee68:	d049      	beq.n	801eefe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee6e:	4a69      	ldr	r2, [pc, #420]	; (801f014 <I2C_Slave_STOPF+0x258>)
 801ee70:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801ee72:	687b      	ldr	r3, [r7, #4]
 801ee74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee76:	4618      	mov	r0, r3
 801ee78:	f7fd fad8 	bl	801c42c <HAL_DMA_Abort_IT>
 801ee7c:	4603      	mov	r3, r0
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	d03d      	beq.n	801eefe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ee88:	687a      	ldr	r2, [r7, #4]
 801ee8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801ee8c:	4610      	mov	r0, r2
 801ee8e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801ee90:	e035      	b.n	801eefe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801ee92:	687b      	ldr	r3, [r7, #4]
 801ee94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ee96:	681b      	ldr	r3, [r3, #0]
 801ee98:	685b      	ldr	r3, [r3, #4]
 801ee9a:	b29a      	uxth	r2, r3
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eea4:	b29b      	uxth	r3, r3
 801eea6:	2b00      	cmp	r3, #0
 801eea8:	d005      	beq.n	801eeb6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eeae:	f043 0204 	orr.w	r2, r3, #4
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801eeb6:	687b      	ldr	r3, [r7, #4]
 801eeb8:	681b      	ldr	r3, [r3, #0]
 801eeba:	685a      	ldr	r2, [r3, #4]
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	681b      	ldr	r3, [r3, #0]
 801eec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801eec4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eeca:	4618      	mov	r0, r3
 801eecc:	f7fd fc5a 	bl	801c784 <HAL_DMA_GetState>
 801eed0:	4603      	mov	r3, r0
 801eed2:	2b01      	cmp	r3, #1
 801eed4:	d014      	beq.n	801ef00 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eeda:	4a4e      	ldr	r2, [pc, #312]	; (801f014 <I2C_Slave_STOPF+0x258>)
 801eedc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eee2:	4618      	mov	r0, r3
 801eee4:	f7fd faa2 	bl	801c42c <HAL_DMA_Abort_IT>
 801eee8:	4603      	mov	r3, r0
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d008      	beq.n	801ef00 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eef4:	687a      	ldr	r2, [r7, #4]
 801eef6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801eef8:	4610      	mov	r0, r2
 801eefa:	4798      	blx	r3
 801eefc:	e000      	b.n	801ef00 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801eefe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ef04:	b29b      	uxth	r3, r3
 801ef06:	2b00      	cmp	r3, #0
 801ef08:	d03e      	beq.n	801ef88 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801ef0a:	687b      	ldr	r3, [r7, #4]
 801ef0c:	681b      	ldr	r3, [r3, #0]
 801ef0e:	695b      	ldr	r3, [r3, #20]
 801ef10:	f003 0304 	and.w	r3, r3, #4
 801ef14:	2b04      	cmp	r3, #4
 801ef16:	d112      	bne.n	801ef3e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ef18:	687b      	ldr	r3, [r7, #4]
 801ef1a:	681b      	ldr	r3, [r3, #0]
 801ef1c:	691a      	ldr	r2, [r3, #16]
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef22:	b2d2      	uxtb	r2, r2
 801ef24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801ef26:	687b      	ldr	r3, [r7, #4]
 801ef28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef2a:	1c5a      	adds	r2, r3, #1
 801ef2c:	687b      	ldr	r3, [r7, #4]
 801ef2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ef34:	b29b      	uxth	r3, r3
 801ef36:	3b01      	subs	r3, #1
 801ef38:	b29a      	uxth	r2, r3
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801ef3e:	687b      	ldr	r3, [r7, #4]
 801ef40:	681b      	ldr	r3, [r3, #0]
 801ef42:	695b      	ldr	r3, [r3, #20]
 801ef44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ef48:	2b40      	cmp	r3, #64	; 0x40
 801ef4a:	d112      	bne.n	801ef72 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	681b      	ldr	r3, [r3, #0]
 801ef50:	691a      	ldr	r2, [r3, #16]
 801ef52:	687b      	ldr	r3, [r7, #4]
 801ef54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef56:	b2d2      	uxtb	r2, r2
 801ef58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef5e:	1c5a      	adds	r2, r3, #1
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ef68:	b29b      	uxth	r3, r3
 801ef6a:	3b01      	subs	r3, #1
 801ef6c:	b29a      	uxth	r2, r3
 801ef6e:	687b      	ldr	r3, [r7, #4]
 801ef70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ef76:	b29b      	uxth	r3, r3
 801ef78:	2b00      	cmp	r3, #0
 801ef7a:	d005      	beq.n	801ef88 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801ef7c:	687b      	ldr	r3, [r7, #4]
 801ef7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef80:	f043 0204 	orr.w	r2, r3, #4
 801ef84:	687b      	ldr	r3, [r7, #4]
 801ef86:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	d003      	beq.n	801ef98 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801ef90:	6878      	ldr	r0, [r7, #4]
 801ef92:	f000 f8b3 	bl	801f0fc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801ef96:	e039      	b.n	801f00c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801ef98:	7bfb      	ldrb	r3, [r7, #15]
 801ef9a:	2b2a      	cmp	r3, #42	; 0x2a
 801ef9c:	d109      	bne.n	801efb2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801ef9e:	687b      	ldr	r3, [r7, #4]
 801efa0:	2200      	movs	r2, #0
 801efa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	2228      	movs	r2, #40	; 0x28
 801efa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801efac:	6878      	ldr	r0, [r7, #4]
 801efae:	f7ff f83b 	bl	801e028 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801efb8:	b2db      	uxtb	r3, r3
 801efba:	2b28      	cmp	r3, #40	; 0x28
 801efbc:	d111      	bne.n	801efe2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	4a15      	ldr	r2, [pc, #84]	; (801f018 <I2C_Slave_STOPF+0x25c>)
 801efc2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	2200      	movs	r2, #0
 801efc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801efca:	687b      	ldr	r3, [r7, #4]
 801efcc:	2220      	movs	r2, #32
 801efce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801efd2:	687b      	ldr	r3, [r7, #4]
 801efd4:	2200      	movs	r2, #0
 801efd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801efda:	6878      	ldr	r0, [r7, #4]
 801efdc:	f7ff f83c 	bl	801e058 <HAL_I2C_ListenCpltCallback>
}
 801efe0:	e014      	b.n	801f00c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801efe2:	687b      	ldr	r3, [r7, #4]
 801efe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801efe6:	2b22      	cmp	r3, #34	; 0x22
 801efe8:	d002      	beq.n	801eff0 <I2C_Slave_STOPF+0x234>
 801efea:	7bfb      	ldrb	r3, [r7, #15]
 801efec:	2b22      	cmp	r3, #34	; 0x22
 801efee:	d10d      	bne.n	801f00c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 801eff0:	687b      	ldr	r3, [r7, #4]
 801eff2:	2200      	movs	r2, #0
 801eff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801eff6:	687b      	ldr	r3, [r7, #4]
 801eff8:	2220      	movs	r2, #32
 801effa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801effe:	687b      	ldr	r3, [r7, #4]
 801f000:	2200      	movs	r2, #0
 801f002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f006:	6878      	ldr	r0, [r7, #4]
 801f008:	f7ff f80e 	bl	801e028 <HAL_I2C_SlaveRxCpltCallback>
}
 801f00c:	bf00      	nop
 801f00e:	3710      	adds	r7, #16
 801f010:	46bd      	mov	sp, r7
 801f012:	bd80      	pop	{r7, pc}
 801f014:	0801f881 	.word	0x0801f881
 801f018:	ffff0000 	.word	0xffff0000

0801f01c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 801f01c:	b580      	push	{r7, lr}
 801f01e:	b084      	sub	sp, #16
 801f020:	af00      	add	r7, sp, #0
 801f022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f02a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f030:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801f032:	68bb      	ldr	r3, [r7, #8]
 801f034:	2b08      	cmp	r3, #8
 801f036:	d002      	beq.n	801f03e <I2C_Slave_AF+0x22>
 801f038:	68bb      	ldr	r3, [r7, #8]
 801f03a:	2b20      	cmp	r3, #32
 801f03c:	d129      	bne.n	801f092 <I2C_Slave_AF+0x76>
 801f03e:	7bfb      	ldrb	r3, [r7, #15]
 801f040:	2b28      	cmp	r3, #40	; 0x28
 801f042:	d126      	bne.n	801f092 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	4a2c      	ldr	r2, [pc, #176]	; (801f0f8 <I2C_Slave_AF+0xdc>)
 801f048:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f04a:	687b      	ldr	r3, [r7, #4]
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	685a      	ldr	r2, [r3, #4]
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f058:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f05a:	687b      	ldr	r3, [r7, #4]
 801f05c:	681b      	ldr	r3, [r3, #0]
 801f05e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f062:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	681b      	ldr	r3, [r3, #0]
 801f068:	681a      	ldr	r2, [r3, #0]
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	681b      	ldr	r3, [r3, #0]
 801f06e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f072:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 801f074:	687b      	ldr	r3, [r7, #4]
 801f076:	2200      	movs	r2, #0
 801f078:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	2220      	movs	r2, #32
 801f07e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	2200      	movs	r2, #0
 801f086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801f08a:	6878      	ldr	r0, [r7, #4]
 801f08c:	f7fe ffe4 	bl	801e058 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 801f090:	e02e      	b.n	801f0f0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801f092:	7bfb      	ldrb	r3, [r7, #15]
 801f094:	2b21      	cmp	r3, #33	; 0x21
 801f096:	d126      	bne.n	801f0e6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801f098:	687b      	ldr	r3, [r7, #4]
 801f09a:	4a17      	ldr	r2, [pc, #92]	; (801f0f8 <I2C_Slave_AF+0xdc>)
 801f09c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801f09e:	687b      	ldr	r3, [r7, #4]
 801f0a0:	2221      	movs	r2, #33	; 0x21
 801f0a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	2220      	movs	r2, #32
 801f0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f0ac:	687b      	ldr	r3, [r7, #4]
 801f0ae:	2200      	movs	r2, #0
 801f0b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	681b      	ldr	r3, [r3, #0]
 801f0b8:	685a      	ldr	r2, [r3, #4]
 801f0ba:	687b      	ldr	r3, [r7, #4]
 801f0bc:	681b      	ldr	r3, [r3, #0]
 801f0be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f0c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f0cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	681b      	ldr	r3, [r3, #0]
 801f0d2:	681a      	ldr	r2, [r3, #0]
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	681b      	ldr	r3, [r3, #0]
 801f0d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f0dc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801f0de:	6878      	ldr	r0, [r7, #4]
 801f0e0:	f7fe ff98 	bl	801e014 <HAL_I2C_SlaveTxCpltCallback>
}
 801f0e4:	e004      	b.n	801f0f0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f0e6:	687b      	ldr	r3, [r7, #4]
 801f0e8:	681b      	ldr	r3, [r3, #0]
 801f0ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f0ee:	615a      	str	r2, [r3, #20]
}
 801f0f0:	bf00      	nop
 801f0f2:	3710      	adds	r7, #16
 801f0f4:	46bd      	mov	sp, r7
 801f0f6:	bd80      	pop	{r7, pc}
 801f0f8:	ffff0000 	.word	0xffff0000

0801f0fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 801f0fc:	b580      	push	{r7, lr}
 801f0fe:	b084      	sub	sp, #16
 801f100:	af00      	add	r7, sp, #0
 801f102:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f10a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 801f10c:	687b      	ldr	r3, [r7, #4]
 801f10e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f112:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801f114:	7bbb      	ldrb	r3, [r7, #14]
 801f116:	2b10      	cmp	r3, #16
 801f118:	d002      	beq.n	801f120 <I2C_ITError+0x24>
 801f11a:	7bbb      	ldrb	r3, [r7, #14]
 801f11c:	2b40      	cmp	r3, #64	; 0x40
 801f11e:	d10a      	bne.n	801f136 <I2C_ITError+0x3a>
 801f120:	7bfb      	ldrb	r3, [r7, #15]
 801f122:	2b22      	cmp	r3, #34	; 0x22
 801f124:	d107      	bne.n	801f136 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	681b      	ldr	r3, [r3, #0]
 801f12a:	681a      	ldr	r2, [r3, #0]
 801f12c:	687b      	ldr	r3, [r7, #4]
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f134:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801f136:	7bfb      	ldrb	r3, [r7, #15]
 801f138:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801f13c:	2b28      	cmp	r3, #40	; 0x28
 801f13e:	d107      	bne.n	801f150 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801f140:	687b      	ldr	r3, [r7, #4]
 801f142:	2200      	movs	r2, #0
 801f144:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801f146:	687b      	ldr	r3, [r7, #4]
 801f148:	2228      	movs	r2, #40	; 0x28
 801f14a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801f14e:	e015      	b.n	801f17c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	681b      	ldr	r3, [r3, #0]
 801f154:	685b      	ldr	r3, [r3, #4]
 801f156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f15a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f15e:	d00a      	beq.n	801f176 <I2C_ITError+0x7a>
 801f160:	7bfb      	ldrb	r3, [r7, #15]
 801f162:	2b60      	cmp	r3, #96	; 0x60
 801f164:	d007      	beq.n	801f176 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	2220      	movs	r2, #32
 801f16a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801f16e:	687b      	ldr	r3, [r7, #4]
 801f170:	2200      	movs	r2, #0
 801f172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	2200      	movs	r2, #0
 801f17a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	681b      	ldr	r3, [r3, #0]
 801f180:	685b      	ldr	r3, [r3, #4]
 801f182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f18a:	d162      	bne.n	801f252 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	681b      	ldr	r3, [r3, #0]
 801f190:	685a      	ldr	r2, [r3, #4]
 801f192:	687b      	ldr	r3, [r7, #4]
 801f194:	681b      	ldr	r3, [r3, #0]
 801f196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f19a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f1a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f1a4:	b2db      	uxtb	r3, r3
 801f1a6:	2b01      	cmp	r3, #1
 801f1a8:	d020      	beq.n	801f1ec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f1ae:	4a6a      	ldr	r2, [pc, #424]	; (801f358 <I2C_ITError+0x25c>)
 801f1b0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801f1b2:	687b      	ldr	r3, [r7, #4]
 801f1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f1b6:	4618      	mov	r0, r3
 801f1b8:	f7fd f938 	bl	801c42c <HAL_DMA_Abort_IT>
 801f1bc:	4603      	mov	r3, r0
 801f1be:	2b00      	cmp	r3, #0
 801f1c0:	f000 8089 	beq.w	801f2d6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	681b      	ldr	r3, [r3, #0]
 801f1c8:	681a      	ldr	r2, [r3, #0]
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	681b      	ldr	r3, [r3, #0]
 801f1ce:	f022 0201 	bic.w	r2, r2, #1
 801f1d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	2220      	movs	r2, #32
 801f1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f1e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f1e2:	687a      	ldr	r2, [r7, #4]
 801f1e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801f1e6:	4610      	mov	r0, r2
 801f1e8:	4798      	blx	r3
 801f1ea:	e074      	b.n	801f2d6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f1f0:	4a59      	ldr	r2, [pc, #356]	; (801f358 <I2C_ITError+0x25c>)
 801f1f2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f1f8:	4618      	mov	r0, r3
 801f1fa:	f7fd f917 	bl	801c42c <HAL_DMA_Abort_IT>
 801f1fe:	4603      	mov	r3, r0
 801f200:	2b00      	cmp	r3, #0
 801f202:	d068      	beq.n	801f2d6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	681b      	ldr	r3, [r3, #0]
 801f208:	695b      	ldr	r3, [r3, #20]
 801f20a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f20e:	2b40      	cmp	r3, #64	; 0x40
 801f210:	d10b      	bne.n	801f22a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f212:	687b      	ldr	r3, [r7, #4]
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	691a      	ldr	r2, [r3, #16]
 801f218:	687b      	ldr	r3, [r7, #4]
 801f21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f21c:	b2d2      	uxtb	r2, r2
 801f21e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f224:	1c5a      	adds	r2, r3, #1
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801f22a:	687b      	ldr	r3, [r7, #4]
 801f22c:	681b      	ldr	r3, [r3, #0]
 801f22e:	681a      	ldr	r2, [r3, #0]
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	681b      	ldr	r3, [r3, #0]
 801f234:	f022 0201 	bic.w	r2, r2, #1
 801f238:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801f23a:	687b      	ldr	r3, [r7, #4]
 801f23c:	2220      	movs	r2, #32
 801f23e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f248:	687a      	ldr	r2, [r7, #4]
 801f24a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801f24c:	4610      	mov	r0, r2
 801f24e:	4798      	blx	r3
 801f250:	e041      	b.n	801f2d6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f258:	b2db      	uxtb	r3, r3
 801f25a:	2b60      	cmp	r3, #96	; 0x60
 801f25c:	d125      	bne.n	801f2aa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801f25e:	687b      	ldr	r3, [r7, #4]
 801f260:	2220      	movs	r2, #32
 801f262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801f266:	687b      	ldr	r3, [r7, #4]
 801f268:	2200      	movs	r2, #0
 801f26a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	681b      	ldr	r3, [r3, #0]
 801f270:	695b      	ldr	r3, [r3, #20]
 801f272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f276:	2b40      	cmp	r3, #64	; 0x40
 801f278:	d10b      	bne.n	801f292 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	681b      	ldr	r3, [r3, #0]
 801f27e:	691a      	ldr	r2, [r3, #16]
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f284:	b2d2      	uxtb	r2, r2
 801f286:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f288:	687b      	ldr	r3, [r7, #4]
 801f28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f28c:	1c5a      	adds	r2, r3, #1
 801f28e:	687b      	ldr	r3, [r7, #4]
 801f290:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801f292:	687b      	ldr	r3, [r7, #4]
 801f294:	681b      	ldr	r3, [r3, #0]
 801f296:	681a      	ldr	r2, [r3, #0]
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	681b      	ldr	r3, [r3, #0]
 801f29c:	f022 0201 	bic.w	r2, r2, #1
 801f2a0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801f2a2:	6878      	ldr	r0, [r7, #4]
 801f2a4:	f7fe feec 	bl	801e080 <HAL_I2C_AbortCpltCallback>
 801f2a8:	e015      	b.n	801f2d6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	681b      	ldr	r3, [r3, #0]
 801f2ae:	695b      	ldr	r3, [r3, #20]
 801f2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f2b4:	2b40      	cmp	r3, #64	; 0x40
 801f2b6:	d10b      	bne.n	801f2d0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f2b8:	687b      	ldr	r3, [r7, #4]
 801f2ba:	681b      	ldr	r3, [r3, #0]
 801f2bc:	691a      	ldr	r2, [r3, #16]
 801f2be:	687b      	ldr	r3, [r7, #4]
 801f2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2c2:	b2d2      	uxtb	r2, r2
 801f2c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f2c6:	687b      	ldr	r3, [r7, #4]
 801f2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2ca:	1c5a      	adds	r2, r3, #1
 801f2cc:	687b      	ldr	r3, [r7, #4]
 801f2ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801f2d0:	6878      	ldr	r0, [r7, #4]
 801f2d2:	f7fe fecb 	bl	801e06c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801f2d6:	687b      	ldr	r3, [r7, #4]
 801f2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f2da:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801f2dc:	68bb      	ldr	r3, [r7, #8]
 801f2de:	f003 0301 	and.w	r3, r3, #1
 801f2e2:	2b00      	cmp	r3, #0
 801f2e4:	d10e      	bne.n	801f304 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801f2e6:	68bb      	ldr	r3, [r7, #8]
 801f2e8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801f2ec:	2b00      	cmp	r3, #0
 801f2ee:	d109      	bne.n	801f304 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801f2f0:	68bb      	ldr	r3, [r7, #8]
 801f2f2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801f2f6:	2b00      	cmp	r3, #0
 801f2f8:	d104      	bne.n	801f304 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801f2fa:	68bb      	ldr	r3, [r7, #8]
 801f2fc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801f300:	2b00      	cmp	r3, #0
 801f302:	d007      	beq.n	801f314 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	681b      	ldr	r3, [r3, #0]
 801f308:	685a      	ldr	r2, [r3, #4]
 801f30a:	687b      	ldr	r3, [r7, #4]
 801f30c:	681b      	ldr	r3, [r3, #0]
 801f30e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f312:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801f314:	687b      	ldr	r3, [r7, #4]
 801f316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f31a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f320:	f003 0304 	and.w	r3, r3, #4
 801f324:	2b04      	cmp	r3, #4
 801f326:	d113      	bne.n	801f350 <I2C_ITError+0x254>
 801f328:	7bfb      	ldrb	r3, [r7, #15]
 801f32a:	2b28      	cmp	r3, #40	; 0x28
 801f32c:	d110      	bne.n	801f350 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801f32e:	687b      	ldr	r3, [r7, #4]
 801f330:	4a0a      	ldr	r2, [pc, #40]	; (801f35c <I2C_ITError+0x260>)
 801f332:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 801f334:	687b      	ldr	r3, [r7, #4]
 801f336:	2200      	movs	r2, #0
 801f338:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801f33a:	687b      	ldr	r3, [r7, #4]
 801f33c:	2220      	movs	r2, #32
 801f33e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f342:	687b      	ldr	r3, [r7, #4]
 801f344:	2200      	movs	r2, #0
 801f346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801f34a:	6878      	ldr	r0, [r7, #4]
 801f34c:	f7fe fe84 	bl	801e058 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801f350:	bf00      	nop
 801f352:	3710      	adds	r7, #16
 801f354:	46bd      	mov	sp, r7
 801f356:	bd80      	pop	{r7, pc}
 801f358:	0801f881 	.word	0x0801f881
 801f35c:	ffff0000 	.word	0xffff0000

0801f360 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801f360:	b580      	push	{r7, lr}
 801f362:	b088      	sub	sp, #32
 801f364:	af02      	add	r7, sp, #8
 801f366:	60f8      	str	r0, [r7, #12]
 801f368:	4608      	mov	r0, r1
 801f36a:	4611      	mov	r1, r2
 801f36c:	461a      	mov	r2, r3
 801f36e:	4603      	mov	r3, r0
 801f370:	817b      	strh	r3, [r7, #10]
 801f372:	460b      	mov	r3, r1
 801f374:	813b      	strh	r3, [r7, #8]
 801f376:	4613      	mov	r3, r2
 801f378:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f37a:	68fb      	ldr	r3, [r7, #12]
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	681a      	ldr	r2, [r3, #0]
 801f380:	68fb      	ldr	r3, [r7, #12]
 801f382:	681b      	ldr	r3, [r3, #0]
 801f384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f388:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801f38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f38c:	9300      	str	r3, [sp, #0]
 801f38e:	6a3b      	ldr	r3, [r7, #32]
 801f390:	2200      	movs	r2, #0
 801f392:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801f396:	68f8      	ldr	r0, [r7, #12]
 801f398:	f000 fb1a 	bl	801f9d0 <I2C_WaitOnFlagUntilTimeout>
 801f39c:	4603      	mov	r3, r0
 801f39e:	2b00      	cmp	r3, #0
 801f3a0:	d00d      	beq.n	801f3be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	681b      	ldr	r3, [r3, #0]
 801f3a6:	681b      	ldr	r3, [r3, #0]
 801f3a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f3ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f3b0:	d103      	bne.n	801f3ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801f3b2:	68fb      	ldr	r3, [r7, #12]
 801f3b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f3b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801f3ba:	2303      	movs	r3, #3
 801f3bc:	e05f      	b.n	801f47e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801f3be:	897b      	ldrh	r3, [r7, #10]
 801f3c0:	b2db      	uxtb	r3, r3
 801f3c2:	461a      	mov	r2, r3
 801f3c4:	68fb      	ldr	r3, [r7, #12]
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801f3cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801f3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f3d0:	6a3a      	ldr	r2, [r7, #32]
 801f3d2:	492d      	ldr	r1, [pc, #180]	; (801f488 <I2C_RequestMemoryWrite+0x128>)
 801f3d4:	68f8      	ldr	r0, [r7, #12]
 801f3d6:	f000 fb52 	bl	801fa7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f3da:	4603      	mov	r3, r0
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	d001      	beq.n	801f3e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801f3e0:	2301      	movs	r3, #1
 801f3e2:	e04c      	b.n	801f47e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f3e4:	2300      	movs	r3, #0
 801f3e6:	617b      	str	r3, [r7, #20]
 801f3e8:	68fb      	ldr	r3, [r7, #12]
 801f3ea:	681b      	ldr	r3, [r3, #0]
 801f3ec:	695b      	ldr	r3, [r3, #20]
 801f3ee:	617b      	str	r3, [r7, #20]
 801f3f0:	68fb      	ldr	r3, [r7, #12]
 801f3f2:	681b      	ldr	r3, [r3, #0]
 801f3f4:	699b      	ldr	r3, [r3, #24]
 801f3f6:	617b      	str	r3, [r7, #20]
 801f3f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801f3fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f3fc:	6a39      	ldr	r1, [r7, #32]
 801f3fe:	68f8      	ldr	r0, [r7, #12]
 801f400:	f000 fbbc 	bl	801fb7c <I2C_WaitOnTXEFlagUntilTimeout>
 801f404:	4603      	mov	r3, r0
 801f406:	2b00      	cmp	r3, #0
 801f408:	d00d      	beq.n	801f426 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801f40a:	68fb      	ldr	r3, [r7, #12]
 801f40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f40e:	2b04      	cmp	r3, #4
 801f410:	d107      	bne.n	801f422 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f412:	68fb      	ldr	r3, [r7, #12]
 801f414:	681b      	ldr	r3, [r3, #0]
 801f416:	681a      	ldr	r2, [r3, #0]
 801f418:	68fb      	ldr	r3, [r7, #12]
 801f41a:	681b      	ldr	r3, [r3, #0]
 801f41c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f420:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801f422:	2301      	movs	r3, #1
 801f424:	e02b      	b.n	801f47e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801f426:	88fb      	ldrh	r3, [r7, #6]
 801f428:	2b01      	cmp	r3, #1
 801f42a:	d105      	bne.n	801f438 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801f42c:	893b      	ldrh	r3, [r7, #8]
 801f42e:	b2da      	uxtb	r2, r3
 801f430:	68fb      	ldr	r3, [r7, #12]
 801f432:	681b      	ldr	r3, [r3, #0]
 801f434:	611a      	str	r2, [r3, #16]
 801f436:	e021      	b.n	801f47c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801f438:	893b      	ldrh	r3, [r7, #8]
 801f43a:	0a1b      	lsrs	r3, r3, #8
 801f43c:	b29b      	uxth	r3, r3
 801f43e:	b2da      	uxtb	r2, r3
 801f440:	68fb      	ldr	r3, [r7, #12]
 801f442:	681b      	ldr	r3, [r3, #0]
 801f444:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801f446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f448:	6a39      	ldr	r1, [r7, #32]
 801f44a:	68f8      	ldr	r0, [r7, #12]
 801f44c:	f000 fb96 	bl	801fb7c <I2C_WaitOnTXEFlagUntilTimeout>
 801f450:	4603      	mov	r3, r0
 801f452:	2b00      	cmp	r3, #0
 801f454:	d00d      	beq.n	801f472 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801f456:	68fb      	ldr	r3, [r7, #12]
 801f458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f45a:	2b04      	cmp	r3, #4
 801f45c:	d107      	bne.n	801f46e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f45e:	68fb      	ldr	r3, [r7, #12]
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	681a      	ldr	r2, [r3, #0]
 801f464:	68fb      	ldr	r3, [r7, #12]
 801f466:	681b      	ldr	r3, [r3, #0]
 801f468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f46c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801f46e:	2301      	movs	r3, #1
 801f470:	e005      	b.n	801f47e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801f472:	893b      	ldrh	r3, [r7, #8]
 801f474:	b2da      	uxtb	r2, r3
 801f476:	68fb      	ldr	r3, [r7, #12]
 801f478:	681b      	ldr	r3, [r3, #0]
 801f47a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801f47c:	2300      	movs	r3, #0
}
 801f47e:	4618      	mov	r0, r3
 801f480:	3718      	adds	r7, #24
 801f482:	46bd      	mov	sp, r7
 801f484:	bd80      	pop	{r7, pc}
 801f486:	bf00      	nop
 801f488:	00010002 	.word	0x00010002

0801f48c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801f48c:	b580      	push	{r7, lr}
 801f48e:	b088      	sub	sp, #32
 801f490:	af02      	add	r7, sp, #8
 801f492:	60f8      	str	r0, [r7, #12]
 801f494:	4608      	mov	r0, r1
 801f496:	4611      	mov	r1, r2
 801f498:	461a      	mov	r2, r3
 801f49a:	4603      	mov	r3, r0
 801f49c:	817b      	strh	r3, [r7, #10]
 801f49e:	460b      	mov	r3, r1
 801f4a0:	813b      	strh	r3, [r7, #8]
 801f4a2:	4613      	mov	r3, r2
 801f4a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f4a6:	68fb      	ldr	r3, [r7, #12]
 801f4a8:	681b      	ldr	r3, [r3, #0]
 801f4aa:	681a      	ldr	r2, [r3, #0]
 801f4ac:	68fb      	ldr	r3, [r7, #12]
 801f4ae:	681b      	ldr	r3, [r3, #0]
 801f4b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f4b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f4b6:	68fb      	ldr	r3, [r7, #12]
 801f4b8:	681b      	ldr	r3, [r3, #0]
 801f4ba:	681a      	ldr	r2, [r3, #0]
 801f4bc:	68fb      	ldr	r3, [r7, #12]
 801f4be:	681b      	ldr	r3, [r3, #0]
 801f4c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f4c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801f4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4c8:	9300      	str	r3, [sp, #0]
 801f4ca:	6a3b      	ldr	r3, [r7, #32]
 801f4cc:	2200      	movs	r2, #0
 801f4ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801f4d2:	68f8      	ldr	r0, [r7, #12]
 801f4d4:	f000 fa7c 	bl	801f9d0 <I2C_WaitOnFlagUntilTimeout>
 801f4d8:	4603      	mov	r3, r0
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d00d      	beq.n	801f4fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801f4de:	68fb      	ldr	r3, [r7, #12]
 801f4e0:	681b      	ldr	r3, [r3, #0]
 801f4e2:	681b      	ldr	r3, [r3, #0]
 801f4e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f4e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f4ec:	d103      	bne.n	801f4f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801f4ee:	68fb      	ldr	r3, [r7, #12]
 801f4f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f4f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801f4f6:	2303      	movs	r3, #3
 801f4f8:	e0aa      	b.n	801f650 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801f4fa:	897b      	ldrh	r3, [r7, #10]
 801f4fc:	b2db      	uxtb	r3, r3
 801f4fe:	461a      	mov	r2, r3
 801f500:	68fb      	ldr	r3, [r7, #12]
 801f502:	681b      	ldr	r3, [r3, #0]
 801f504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801f508:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801f50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f50c:	6a3a      	ldr	r2, [r7, #32]
 801f50e:	4952      	ldr	r1, [pc, #328]	; (801f658 <I2C_RequestMemoryRead+0x1cc>)
 801f510:	68f8      	ldr	r0, [r7, #12]
 801f512:	f000 fab4 	bl	801fa7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f516:	4603      	mov	r3, r0
 801f518:	2b00      	cmp	r3, #0
 801f51a:	d001      	beq.n	801f520 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 801f51c:	2301      	movs	r3, #1
 801f51e:	e097      	b.n	801f650 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f520:	2300      	movs	r3, #0
 801f522:	617b      	str	r3, [r7, #20]
 801f524:	68fb      	ldr	r3, [r7, #12]
 801f526:	681b      	ldr	r3, [r3, #0]
 801f528:	695b      	ldr	r3, [r3, #20]
 801f52a:	617b      	str	r3, [r7, #20]
 801f52c:	68fb      	ldr	r3, [r7, #12]
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	699b      	ldr	r3, [r3, #24]
 801f532:	617b      	str	r3, [r7, #20]
 801f534:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801f536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f538:	6a39      	ldr	r1, [r7, #32]
 801f53a:	68f8      	ldr	r0, [r7, #12]
 801f53c:	f000 fb1e 	bl	801fb7c <I2C_WaitOnTXEFlagUntilTimeout>
 801f540:	4603      	mov	r3, r0
 801f542:	2b00      	cmp	r3, #0
 801f544:	d00d      	beq.n	801f562 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801f546:	68fb      	ldr	r3, [r7, #12]
 801f548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f54a:	2b04      	cmp	r3, #4
 801f54c:	d107      	bne.n	801f55e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f54e:	68fb      	ldr	r3, [r7, #12]
 801f550:	681b      	ldr	r3, [r3, #0]
 801f552:	681a      	ldr	r2, [r3, #0]
 801f554:	68fb      	ldr	r3, [r7, #12]
 801f556:	681b      	ldr	r3, [r3, #0]
 801f558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f55c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801f55e:	2301      	movs	r3, #1
 801f560:	e076      	b.n	801f650 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801f562:	88fb      	ldrh	r3, [r7, #6]
 801f564:	2b01      	cmp	r3, #1
 801f566:	d105      	bne.n	801f574 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801f568:	893b      	ldrh	r3, [r7, #8]
 801f56a:	b2da      	uxtb	r2, r3
 801f56c:	68fb      	ldr	r3, [r7, #12]
 801f56e:	681b      	ldr	r3, [r3, #0]
 801f570:	611a      	str	r2, [r3, #16]
 801f572:	e021      	b.n	801f5b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801f574:	893b      	ldrh	r3, [r7, #8]
 801f576:	0a1b      	lsrs	r3, r3, #8
 801f578:	b29b      	uxth	r3, r3
 801f57a:	b2da      	uxtb	r2, r3
 801f57c:	68fb      	ldr	r3, [r7, #12]
 801f57e:	681b      	ldr	r3, [r3, #0]
 801f580:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801f582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f584:	6a39      	ldr	r1, [r7, #32]
 801f586:	68f8      	ldr	r0, [r7, #12]
 801f588:	f000 faf8 	bl	801fb7c <I2C_WaitOnTXEFlagUntilTimeout>
 801f58c:	4603      	mov	r3, r0
 801f58e:	2b00      	cmp	r3, #0
 801f590:	d00d      	beq.n	801f5ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801f592:	68fb      	ldr	r3, [r7, #12]
 801f594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f596:	2b04      	cmp	r3, #4
 801f598:	d107      	bne.n	801f5aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f59a:	68fb      	ldr	r3, [r7, #12]
 801f59c:	681b      	ldr	r3, [r3, #0]
 801f59e:	681a      	ldr	r2, [r3, #0]
 801f5a0:	68fb      	ldr	r3, [r7, #12]
 801f5a2:	681b      	ldr	r3, [r3, #0]
 801f5a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f5a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801f5aa:	2301      	movs	r3, #1
 801f5ac:	e050      	b.n	801f650 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801f5ae:	893b      	ldrh	r3, [r7, #8]
 801f5b0:	b2da      	uxtb	r2, r3
 801f5b2:	68fb      	ldr	r3, [r7, #12]
 801f5b4:	681b      	ldr	r3, [r3, #0]
 801f5b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801f5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f5ba:	6a39      	ldr	r1, [r7, #32]
 801f5bc:	68f8      	ldr	r0, [r7, #12]
 801f5be:	f000 fadd 	bl	801fb7c <I2C_WaitOnTXEFlagUntilTimeout>
 801f5c2:	4603      	mov	r3, r0
 801f5c4:	2b00      	cmp	r3, #0
 801f5c6:	d00d      	beq.n	801f5e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801f5c8:	68fb      	ldr	r3, [r7, #12]
 801f5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f5cc:	2b04      	cmp	r3, #4
 801f5ce:	d107      	bne.n	801f5e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f5d0:	68fb      	ldr	r3, [r7, #12]
 801f5d2:	681b      	ldr	r3, [r3, #0]
 801f5d4:	681a      	ldr	r2, [r3, #0]
 801f5d6:	68fb      	ldr	r3, [r7, #12]
 801f5d8:	681b      	ldr	r3, [r3, #0]
 801f5da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f5de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801f5e0:	2301      	movs	r3, #1
 801f5e2:	e035      	b.n	801f650 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f5e4:	68fb      	ldr	r3, [r7, #12]
 801f5e6:	681b      	ldr	r3, [r3, #0]
 801f5e8:	681a      	ldr	r2, [r3, #0]
 801f5ea:	68fb      	ldr	r3, [r7, #12]
 801f5ec:	681b      	ldr	r3, [r3, #0]
 801f5ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f5f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801f5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5f6:	9300      	str	r3, [sp, #0]
 801f5f8:	6a3b      	ldr	r3, [r7, #32]
 801f5fa:	2200      	movs	r2, #0
 801f5fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801f600:	68f8      	ldr	r0, [r7, #12]
 801f602:	f000 f9e5 	bl	801f9d0 <I2C_WaitOnFlagUntilTimeout>
 801f606:	4603      	mov	r3, r0
 801f608:	2b00      	cmp	r3, #0
 801f60a:	d00d      	beq.n	801f628 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801f60c:	68fb      	ldr	r3, [r7, #12]
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	681b      	ldr	r3, [r3, #0]
 801f612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f61a:	d103      	bne.n	801f624 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801f61c:	68fb      	ldr	r3, [r7, #12]
 801f61e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f622:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801f624:	2303      	movs	r3, #3
 801f626:	e013      	b.n	801f650 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801f628:	897b      	ldrh	r3, [r7, #10]
 801f62a:	b2db      	uxtb	r3, r3
 801f62c:	f043 0301 	orr.w	r3, r3, #1
 801f630:	b2da      	uxtb	r2, r3
 801f632:	68fb      	ldr	r3, [r7, #12]
 801f634:	681b      	ldr	r3, [r3, #0]
 801f636:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801f638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f63a:	6a3a      	ldr	r2, [r7, #32]
 801f63c:	4906      	ldr	r1, [pc, #24]	; (801f658 <I2C_RequestMemoryRead+0x1cc>)
 801f63e:	68f8      	ldr	r0, [r7, #12]
 801f640:	f000 fa1d 	bl	801fa7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f644:	4603      	mov	r3, r0
 801f646:	2b00      	cmp	r3, #0
 801f648:	d001      	beq.n	801f64e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 801f64a:	2301      	movs	r3, #1
 801f64c:	e000      	b.n	801f650 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801f64e:	2300      	movs	r3, #0
}
 801f650:	4618      	mov	r0, r3
 801f652:	3718      	adds	r7, #24
 801f654:	46bd      	mov	sp, r7
 801f656:	bd80      	pop	{r7, pc}
 801f658:	00010002 	.word	0x00010002

0801f65c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 801f65c:	b580      	push	{r7, lr}
 801f65e:	b086      	sub	sp, #24
 801f660:	af00      	add	r7, sp, #0
 801f662:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801f664:	687b      	ldr	r3, [r7, #4]
 801f666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f668:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f66a:	697b      	ldr	r3, [r7, #20]
 801f66c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f670:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801f672:	697b      	ldr	r3, [r7, #20]
 801f674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f678:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801f67a:	697b      	ldr	r3, [r7, #20]
 801f67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f67e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801f680:	697b      	ldr	r3, [r7, #20]
 801f682:	681b      	ldr	r3, [r3, #0]
 801f684:	685a      	ldr	r2, [r3, #4]
 801f686:	697b      	ldr	r3, [r7, #20]
 801f688:	681b      	ldr	r3, [r3, #0]
 801f68a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801f68e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801f690:	697b      	ldr	r3, [r7, #20]
 801f692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f694:	2b00      	cmp	r3, #0
 801f696:	d003      	beq.n	801f6a0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801f698:	697b      	ldr	r3, [r7, #20]
 801f69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f69c:	2200      	movs	r2, #0
 801f69e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801f6a0:	697b      	ldr	r3, [r7, #20]
 801f6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f6a4:	2b00      	cmp	r3, #0
 801f6a6:	d003      	beq.n	801f6b0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801f6a8:	697b      	ldr	r3, [r7, #20]
 801f6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f6ac:	2200      	movs	r2, #0
 801f6ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 801f6b0:	7cfb      	ldrb	r3, [r7, #19]
 801f6b2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801f6b6:	2b21      	cmp	r3, #33	; 0x21
 801f6b8:	d007      	beq.n	801f6ca <I2C_DMAXferCplt+0x6e>
 801f6ba:	7cfb      	ldrb	r3, [r7, #19]
 801f6bc:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801f6c0:	2b22      	cmp	r3, #34	; 0x22
 801f6c2:	d131      	bne.n	801f728 <I2C_DMAXferCplt+0xcc>
 801f6c4:	7cbb      	ldrb	r3, [r7, #18]
 801f6c6:	2b20      	cmp	r3, #32
 801f6c8:	d12e      	bne.n	801f728 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f6ca:	697b      	ldr	r3, [r7, #20]
 801f6cc:	681b      	ldr	r3, [r3, #0]
 801f6ce:	685a      	ldr	r2, [r3, #4]
 801f6d0:	697b      	ldr	r3, [r7, #20]
 801f6d2:	681b      	ldr	r3, [r3, #0]
 801f6d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f6d8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 801f6da:	697b      	ldr	r3, [r7, #20]
 801f6dc:	2200      	movs	r2, #0
 801f6de:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801f6e0:	7cfb      	ldrb	r3, [r7, #19]
 801f6e2:	2b29      	cmp	r3, #41	; 0x29
 801f6e4:	d10a      	bne.n	801f6fc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801f6e6:	697b      	ldr	r3, [r7, #20]
 801f6e8:	2221      	movs	r2, #33	; 0x21
 801f6ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f6ec:	697b      	ldr	r3, [r7, #20]
 801f6ee:	2228      	movs	r2, #40	; 0x28
 801f6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801f6f4:	6978      	ldr	r0, [r7, #20]
 801f6f6:	f7fe fc8d 	bl	801e014 <HAL_I2C_SlaveTxCpltCallback>
 801f6fa:	e00c      	b.n	801f716 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801f6fc:	7cfb      	ldrb	r3, [r7, #19]
 801f6fe:	2b2a      	cmp	r3, #42	; 0x2a
 801f700:	d109      	bne.n	801f716 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801f702:	697b      	ldr	r3, [r7, #20]
 801f704:	2222      	movs	r2, #34	; 0x22
 801f706:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f708:	697b      	ldr	r3, [r7, #20]
 801f70a:	2228      	movs	r2, #40	; 0x28
 801f70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f710:	6978      	ldr	r0, [r7, #20]
 801f712:	f7fe fc89 	bl	801e028 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801f716:	697b      	ldr	r3, [r7, #20]
 801f718:	681b      	ldr	r3, [r3, #0]
 801f71a:	685a      	ldr	r2, [r3, #4]
 801f71c:	697b      	ldr	r3, [r7, #20]
 801f71e:	681b      	ldr	r3, [r3, #0]
 801f720:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801f724:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801f726:	e06a      	b.n	801f7fe <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 801f728:	697b      	ldr	r3, [r7, #20]
 801f72a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f72e:	b2db      	uxtb	r3, r3
 801f730:	2b00      	cmp	r3, #0
 801f732:	d064      	beq.n	801f7fe <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 801f734:	697b      	ldr	r3, [r7, #20]
 801f736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f738:	b29b      	uxth	r3, r3
 801f73a:	2b01      	cmp	r3, #1
 801f73c:	d107      	bne.n	801f74e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f73e:	697b      	ldr	r3, [r7, #20]
 801f740:	681b      	ldr	r3, [r3, #0]
 801f742:	681a      	ldr	r2, [r3, #0]
 801f744:	697b      	ldr	r3, [r7, #20]
 801f746:	681b      	ldr	r3, [r3, #0]
 801f748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f74c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801f74e:	697b      	ldr	r3, [r7, #20]
 801f750:	681b      	ldr	r3, [r3, #0]
 801f752:	685a      	ldr	r2, [r3, #4]
 801f754:	697b      	ldr	r3, [r7, #20]
 801f756:	681b      	ldr	r3, [r3, #0]
 801f758:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801f75c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801f75e:	68fb      	ldr	r3, [r7, #12]
 801f760:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f764:	d009      	beq.n	801f77a <I2C_DMAXferCplt+0x11e>
 801f766:	68fb      	ldr	r3, [r7, #12]
 801f768:	2b08      	cmp	r3, #8
 801f76a:	d006      	beq.n	801f77a <I2C_DMAXferCplt+0x11e>
 801f76c:	68fb      	ldr	r3, [r7, #12]
 801f76e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801f772:	d002      	beq.n	801f77a <I2C_DMAXferCplt+0x11e>
 801f774:	68fb      	ldr	r3, [r7, #12]
 801f776:	2b20      	cmp	r3, #32
 801f778:	d107      	bne.n	801f78a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f77a:	697b      	ldr	r3, [r7, #20]
 801f77c:	681b      	ldr	r3, [r3, #0]
 801f77e:	681a      	ldr	r2, [r3, #0]
 801f780:	697b      	ldr	r3, [r7, #20]
 801f782:	681b      	ldr	r3, [r3, #0]
 801f784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f788:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801f78a:	697b      	ldr	r3, [r7, #20]
 801f78c:	681b      	ldr	r3, [r3, #0]
 801f78e:	685a      	ldr	r2, [r3, #4]
 801f790:	697b      	ldr	r3, [r7, #20]
 801f792:	681b      	ldr	r3, [r3, #0]
 801f794:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801f798:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f79a:	697b      	ldr	r3, [r7, #20]
 801f79c:	681b      	ldr	r3, [r3, #0]
 801f79e:	685a      	ldr	r2, [r3, #4]
 801f7a0:	697b      	ldr	r3, [r7, #20]
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f7a8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 801f7aa:	697b      	ldr	r3, [r7, #20]
 801f7ac:	2200      	movs	r2, #0
 801f7ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801f7b0:	697b      	ldr	r3, [r7, #20]
 801f7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f7b4:	2b00      	cmp	r3, #0
 801f7b6:	d003      	beq.n	801f7c0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 801f7b8:	6978      	ldr	r0, [r7, #20]
 801f7ba:	f7fe fc57 	bl	801e06c <HAL_I2C_ErrorCallback>
}
 801f7be:	e01e      	b.n	801f7fe <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 801f7c0:	697b      	ldr	r3, [r7, #20]
 801f7c2:	2220      	movs	r2, #32
 801f7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801f7c8:	697b      	ldr	r3, [r7, #20]
 801f7ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f7ce:	b2db      	uxtb	r3, r3
 801f7d0:	2b40      	cmp	r3, #64	; 0x40
 801f7d2:	d10a      	bne.n	801f7ea <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801f7d4:	697b      	ldr	r3, [r7, #20]
 801f7d6:	2200      	movs	r2, #0
 801f7d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 801f7dc:	697b      	ldr	r3, [r7, #20]
 801f7de:	2200      	movs	r2, #0
 801f7e0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 801f7e2:	6978      	ldr	r0, [r7, #20]
 801f7e4:	f7e1 ff64 	bl	80016b0 <HAL_I2C_MemRxCpltCallback>
}
 801f7e8:	e009      	b.n	801f7fe <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801f7ea:	697b      	ldr	r3, [r7, #20]
 801f7ec:	2200      	movs	r2, #0
 801f7ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801f7f2:	697b      	ldr	r3, [r7, #20]
 801f7f4:	2212      	movs	r2, #18
 801f7f6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 801f7f8:	6978      	ldr	r0, [r7, #20]
 801f7fa:	f7e1 ff6f 	bl	80016dc <HAL_I2C_MasterRxCpltCallback>
}
 801f7fe:	bf00      	nop
 801f800:	3718      	adds	r7, #24
 801f802:	46bd      	mov	sp, r7
 801f804:	bd80      	pop	{r7, pc}

0801f806 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801f806:	b580      	push	{r7, lr}
 801f808:	b084      	sub	sp, #16
 801f80a:	af00      	add	r7, sp, #0
 801f80c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801f80e:	687b      	ldr	r3, [r7, #4]
 801f810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f812:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801f814:	68fb      	ldr	r3, [r7, #12]
 801f816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f818:	2b00      	cmp	r3, #0
 801f81a:	d003      	beq.n	801f824 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801f81c:	68fb      	ldr	r3, [r7, #12]
 801f81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f820:	2200      	movs	r2, #0
 801f822:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801f824:	68fb      	ldr	r3, [r7, #12]
 801f826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f828:	2b00      	cmp	r3, #0
 801f82a:	d003      	beq.n	801f834 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801f82c:	68fb      	ldr	r3, [r7, #12]
 801f82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f830:	2200      	movs	r2, #0
 801f832:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801f834:	6878      	ldr	r0, [r7, #4]
 801f836:	f7fc ffb3 	bl	801c7a0 <HAL_DMA_GetError>
 801f83a:	4603      	mov	r3, r0
 801f83c:	2b02      	cmp	r3, #2
 801f83e:	d01b      	beq.n	801f878 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 801f840:	68fb      	ldr	r3, [r7, #12]
 801f842:	681b      	ldr	r3, [r3, #0]
 801f844:	681a      	ldr	r2, [r3, #0]
 801f846:	68fb      	ldr	r3, [r7, #12]
 801f848:	681b      	ldr	r3, [r3, #0]
 801f84a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f84e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 801f850:	68fb      	ldr	r3, [r7, #12]
 801f852:	2200      	movs	r2, #0
 801f854:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801f856:	68fb      	ldr	r3, [r7, #12]
 801f858:	2220      	movs	r2, #32
 801f85a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801f85e:	68fb      	ldr	r3, [r7, #12]
 801f860:	2200      	movs	r2, #0
 801f862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801f866:	68fb      	ldr	r3, [r7, #12]
 801f868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f86a:	f043 0210 	orr.w	r2, r3, #16
 801f86e:	68fb      	ldr	r3, [r7, #12]
 801f870:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801f872:	68f8      	ldr	r0, [r7, #12]
 801f874:	f7fe fbfa 	bl	801e06c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801f878:	bf00      	nop
 801f87a:	3710      	adds	r7, #16
 801f87c:	46bd      	mov	sp, r7
 801f87e:	bd80      	pop	{r7, pc}

0801f880 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801f880:	b580      	push	{r7, lr}
 801f882:	b086      	sub	sp, #24
 801f884:	af00      	add	r7, sp, #0
 801f886:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801f888:	2300      	movs	r3, #0
 801f88a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f890:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f892:	697b      	ldr	r3, [r7, #20]
 801f894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f898:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 801f89a:	4b4b      	ldr	r3, [pc, #300]	; (801f9c8 <I2C_DMAAbort+0x148>)
 801f89c:	681b      	ldr	r3, [r3, #0]
 801f89e:	08db      	lsrs	r3, r3, #3
 801f8a0:	4a4a      	ldr	r2, [pc, #296]	; (801f9cc <I2C_DMAAbort+0x14c>)
 801f8a2:	fba2 2303 	umull	r2, r3, r2, r3
 801f8a6:	0a1a      	lsrs	r2, r3, #8
 801f8a8:	4613      	mov	r3, r2
 801f8aa:	009b      	lsls	r3, r3, #2
 801f8ac:	4413      	add	r3, r2
 801f8ae:	00da      	lsls	r2, r3, #3
 801f8b0:	1ad3      	subs	r3, r2, r3
 801f8b2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 801f8b4:	68fb      	ldr	r3, [r7, #12]
 801f8b6:	2b00      	cmp	r3, #0
 801f8b8:	d106      	bne.n	801f8c8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801f8ba:	697b      	ldr	r3, [r7, #20]
 801f8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f8be:	f043 0220 	orr.w	r2, r3, #32
 801f8c2:	697b      	ldr	r3, [r7, #20]
 801f8c4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 801f8c6:	e00a      	b.n	801f8de <I2C_DMAAbort+0x5e>
    }
    count--;
 801f8c8:	68fb      	ldr	r3, [r7, #12]
 801f8ca:	3b01      	subs	r3, #1
 801f8cc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801f8ce:	697b      	ldr	r3, [r7, #20]
 801f8d0:	681b      	ldr	r3, [r3, #0]
 801f8d2:	681b      	ldr	r3, [r3, #0]
 801f8d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801f8d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f8dc:	d0ea      	beq.n	801f8b4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801f8de:	697b      	ldr	r3, [r7, #20]
 801f8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	d003      	beq.n	801f8ee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801f8e6:	697b      	ldr	r3, [r7, #20]
 801f8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f8ea:	2200      	movs	r2, #0
 801f8ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801f8ee:	697b      	ldr	r3, [r7, #20]
 801f8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d003      	beq.n	801f8fe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801f8f6:	697b      	ldr	r3, [r7, #20]
 801f8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f8fa:	2200      	movs	r2, #0
 801f8fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f8fe:	697b      	ldr	r3, [r7, #20]
 801f900:	681b      	ldr	r3, [r3, #0]
 801f902:	681a      	ldr	r2, [r3, #0]
 801f904:	697b      	ldr	r3, [r7, #20]
 801f906:	681b      	ldr	r3, [r3, #0]
 801f908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f90c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801f90e:	697b      	ldr	r3, [r7, #20]
 801f910:	2200      	movs	r2, #0
 801f912:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 801f914:	697b      	ldr	r3, [r7, #20]
 801f916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f918:	2b00      	cmp	r3, #0
 801f91a:	d003      	beq.n	801f924 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801f91c:	697b      	ldr	r3, [r7, #20]
 801f91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f920:	2200      	movs	r2, #0
 801f922:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801f924:	697b      	ldr	r3, [r7, #20]
 801f926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f928:	2b00      	cmp	r3, #0
 801f92a:	d003      	beq.n	801f934 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801f92c:	697b      	ldr	r3, [r7, #20]
 801f92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f930:	2200      	movs	r2, #0
 801f932:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 801f934:	697b      	ldr	r3, [r7, #20]
 801f936:	681b      	ldr	r3, [r3, #0]
 801f938:	681a      	ldr	r2, [r3, #0]
 801f93a:	697b      	ldr	r3, [r7, #20]
 801f93c:	681b      	ldr	r3, [r3, #0]
 801f93e:	f022 0201 	bic.w	r2, r2, #1
 801f942:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801f944:	697b      	ldr	r3, [r7, #20]
 801f946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f94a:	b2db      	uxtb	r3, r3
 801f94c:	2b60      	cmp	r3, #96	; 0x60
 801f94e:	d10e      	bne.n	801f96e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801f950:	697b      	ldr	r3, [r7, #20]
 801f952:	2220      	movs	r2, #32
 801f954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f958:	697b      	ldr	r3, [r7, #20]
 801f95a:	2200      	movs	r2, #0
 801f95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801f960:	697b      	ldr	r3, [r7, #20]
 801f962:	2200      	movs	r2, #0
 801f964:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801f966:	6978      	ldr	r0, [r7, #20]
 801f968:	f7fe fb8a 	bl	801e080 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801f96c:	e027      	b.n	801f9be <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801f96e:	7cfb      	ldrb	r3, [r7, #19]
 801f970:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801f974:	2b28      	cmp	r3, #40	; 0x28
 801f976:	d117      	bne.n	801f9a8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 801f978:	697b      	ldr	r3, [r7, #20]
 801f97a:	681b      	ldr	r3, [r3, #0]
 801f97c:	681a      	ldr	r2, [r3, #0]
 801f97e:	697b      	ldr	r3, [r7, #20]
 801f980:	681b      	ldr	r3, [r3, #0]
 801f982:	f042 0201 	orr.w	r2, r2, #1
 801f986:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f988:	697b      	ldr	r3, [r7, #20]
 801f98a:	681b      	ldr	r3, [r3, #0]
 801f98c:	681a      	ldr	r2, [r3, #0]
 801f98e:	697b      	ldr	r3, [r7, #20]
 801f990:	681b      	ldr	r3, [r3, #0]
 801f992:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f996:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801f998:	697b      	ldr	r3, [r7, #20]
 801f99a:	2200      	movs	r2, #0
 801f99c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f99e:	697b      	ldr	r3, [r7, #20]
 801f9a0:	2228      	movs	r2, #40	; 0x28
 801f9a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801f9a6:	e007      	b.n	801f9b8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 801f9a8:	697b      	ldr	r3, [r7, #20]
 801f9aa:	2220      	movs	r2, #32
 801f9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801f9b0:	697b      	ldr	r3, [r7, #20]
 801f9b2:	2200      	movs	r2, #0
 801f9b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 801f9b8:	6978      	ldr	r0, [r7, #20]
 801f9ba:	f7fe fb57 	bl	801e06c <HAL_I2C_ErrorCallback>
}
 801f9be:	bf00      	nop
 801f9c0:	3718      	adds	r7, #24
 801f9c2:	46bd      	mov	sp, r7
 801f9c4:	bd80      	pop	{r7, pc}
 801f9c6:	bf00      	nop
 801f9c8:	20000020 	.word	0x20000020
 801f9cc:	14f8b589 	.word	0x14f8b589

0801f9d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801f9d0:	b580      	push	{r7, lr}
 801f9d2:	b084      	sub	sp, #16
 801f9d4:	af00      	add	r7, sp, #0
 801f9d6:	60f8      	str	r0, [r7, #12]
 801f9d8:	60b9      	str	r1, [r7, #8]
 801f9da:	603b      	str	r3, [r7, #0]
 801f9dc:	4613      	mov	r3, r2
 801f9de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801f9e0:	e025      	b.n	801fa2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f9e2:	683b      	ldr	r3, [r7, #0]
 801f9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f9e8:	d021      	beq.n	801fa2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f9ea:	f7fb fe57 	bl	801b69c <HAL_GetTick>
 801f9ee:	4602      	mov	r2, r0
 801f9f0:	69bb      	ldr	r3, [r7, #24]
 801f9f2:	1ad3      	subs	r3, r2, r3
 801f9f4:	683a      	ldr	r2, [r7, #0]
 801f9f6:	429a      	cmp	r2, r3
 801f9f8:	d302      	bcc.n	801fa00 <I2C_WaitOnFlagUntilTimeout+0x30>
 801f9fa:	683b      	ldr	r3, [r7, #0]
 801f9fc:	2b00      	cmp	r3, #0
 801f9fe:	d116      	bne.n	801fa2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801fa00:	68fb      	ldr	r3, [r7, #12]
 801fa02:	2200      	movs	r2, #0
 801fa04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801fa06:	68fb      	ldr	r3, [r7, #12]
 801fa08:	2220      	movs	r2, #32
 801fa0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801fa0e:	68fb      	ldr	r3, [r7, #12]
 801fa10:	2200      	movs	r2, #0
 801fa12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801fa16:	68fb      	ldr	r3, [r7, #12]
 801fa18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fa1a:	f043 0220 	orr.w	r2, r3, #32
 801fa1e:	68fb      	ldr	r3, [r7, #12]
 801fa20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801fa22:	68fb      	ldr	r3, [r7, #12]
 801fa24:	2200      	movs	r2, #0
 801fa26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801fa2a:	2301      	movs	r3, #1
 801fa2c:	e023      	b.n	801fa76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801fa2e:	68bb      	ldr	r3, [r7, #8]
 801fa30:	0c1b      	lsrs	r3, r3, #16
 801fa32:	b2db      	uxtb	r3, r3
 801fa34:	2b01      	cmp	r3, #1
 801fa36:	d10d      	bne.n	801fa54 <I2C_WaitOnFlagUntilTimeout+0x84>
 801fa38:	68fb      	ldr	r3, [r7, #12]
 801fa3a:	681b      	ldr	r3, [r3, #0]
 801fa3c:	695b      	ldr	r3, [r3, #20]
 801fa3e:	43da      	mvns	r2, r3
 801fa40:	68bb      	ldr	r3, [r7, #8]
 801fa42:	4013      	ands	r3, r2
 801fa44:	b29b      	uxth	r3, r3
 801fa46:	2b00      	cmp	r3, #0
 801fa48:	bf0c      	ite	eq
 801fa4a:	2301      	moveq	r3, #1
 801fa4c:	2300      	movne	r3, #0
 801fa4e:	b2db      	uxtb	r3, r3
 801fa50:	461a      	mov	r2, r3
 801fa52:	e00c      	b.n	801fa6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 801fa54:	68fb      	ldr	r3, [r7, #12]
 801fa56:	681b      	ldr	r3, [r3, #0]
 801fa58:	699b      	ldr	r3, [r3, #24]
 801fa5a:	43da      	mvns	r2, r3
 801fa5c:	68bb      	ldr	r3, [r7, #8]
 801fa5e:	4013      	ands	r3, r2
 801fa60:	b29b      	uxth	r3, r3
 801fa62:	2b00      	cmp	r3, #0
 801fa64:	bf0c      	ite	eq
 801fa66:	2301      	moveq	r3, #1
 801fa68:	2300      	movne	r3, #0
 801fa6a:	b2db      	uxtb	r3, r3
 801fa6c:	461a      	mov	r2, r3
 801fa6e:	79fb      	ldrb	r3, [r7, #7]
 801fa70:	429a      	cmp	r2, r3
 801fa72:	d0b6      	beq.n	801f9e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801fa74:	2300      	movs	r3, #0
}
 801fa76:	4618      	mov	r0, r3
 801fa78:	3710      	adds	r7, #16
 801fa7a:	46bd      	mov	sp, r7
 801fa7c:	bd80      	pop	{r7, pc}

0801fa7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801fa7e:	b580      	push	{r7, lr}
 801fa80:	b084      	sub	sp, #16
 801fa82:	af00      	add	r7, sp, #0
 801fa84:	60f8      	str	r0, [r7, #12]
 801fa86:	60b9      	str	r1, [r7, #8]
 801fa88:	607a      	str	r2, [r7, #4]
 801fa8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801fa8c:	e051      	b.n	801fb32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801fa8e:	68fb      	ldr	r3, [r7, #12]
 801fa90:	681b      	ldr	r3, [r3, #0]
 801fa92:	695b      	ldr	r3, [r3, #20]
 801fa94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801fa98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fa9c:	d123      	bne.n	801fae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fa9e:	68fb      	ldr	r3, [r7, #12]
 801faa0:	681b      	ldr	r3, [r3, #0]
 801faa2:	681a      	ldr	r2, [r3, #0]
 801faa4:	68fb      	ldr	r3, [r7, #12]
 801faa6:	681b      	ldr	r3, [r3, #0]
 801faa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801faac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801faae:	68fb      	ldr	r3, [r7, #12]
 801fab0:	681b      	ldr	r3, [r3, #0]
 801fab2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801fab6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801fab8:	68fb      	ldr	r3, [r7, #12]
 801faba:	2200      	movs	r2, #0
 801fabc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801fabe:	68fb      	ldr	r3, [r7, #12]
 801fac0:	2220      	movs	r2, #32
 801fac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801fac6:	68fb      	ldr	r3, [r7, #12]
 801fac8:	2200      	movs	r2, #0
 801faca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801face:	68fb      	ldr	r3, [r7, #12]
 801fad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fad2:	f043 0204 	orr.w	r2, r3, #4
 801fad6:	68fb      	ldr	r3, [r7, #12]
 801fad8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801fada:	68fb      	ldr	r3, [r7, #12]
 801fadc:	2200      	movs	r2, #0
 801fade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801fae2:	2301      	movs	r3, #1
 801fae4:	e046      	b.n	801fb74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801fae6:	687b      	ldr	r3, [r7, #4]
 801fae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801faec:	d021      	beq.n	801fb32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801faee:	f7fb fdd5 	bl	801b69c <HAL_GetTick>
 801faf2:	4602      	mov	r2, r0
 801faf4:	683b      	ldr	r3, [r7, #0]
 801faf6:	1ad3      	subs	r3, r2, r3
 801faf8:	687a      	ldr	r2, [r7, #4]
 801fafa:	429a      	cmp	r2, r3
 801fafc:	d302      	bcc.n	801fb04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801fafe:	687b      	ldr	r3, [r7, #4]
 801fb00:	2b00      	cmp	r3, #0
 801fb02:	d116      	bne.n	801fb32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801fb04:	68fb      	ldr	r3, [r7, #12]
 801fb06:	2200      	movs	r2, #0
 801fb08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801fb0a:	68fb      	ldr	r3, [r7, #12]
 801fb0c:	2220      	movs	r2, #32
 801fb0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801fb12:	68fb      	ldr	r3, [r7, #12]
 801fb14:	2200      	movs	r2, #0
 801fb16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801fb1a:	68fb      	ldr	r3, [r7, #12]
 801fb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fb1e:	f043 0220 	orr.w	r2, r3, #32
 801fb22:	68fb      	ldr	r3, [r7, #12]
 801fb24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801fb26:	68fb      	ldr	r3, [r7, #12]
 801fb28:	2200      	movs	r2, #0
 801fb2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801fb2e:	2301      	movs	r3, #1
 801fb30:	e020      	b.n	801fb74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801fb32:	68bb      	ldr	r3, [r7, #8]
 801fb34:	0c1b      	lsrs	r3, r3, #16
 801fb36:	b2db      	uxtb	r3, r3
 801fb38:	2b01      	cmp	r3, #1
 801fb3a:	d10c      	bne.n	801fb56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 801fb3c:	68fb      	ldr	r3, [r7, #12]
 801fb3e:	681b      	ldr	r3, [r3, #0]
 801fb40:	695b      	ldr	r3, [r3, #20]
 801fb42:	43da      	mvns	r2, r3
 801fb44:	68bb      	ldr	r3, [r7, #8]
 801fb46:	4013      	ands	r3, r2
 801fb48:	b29b      	uxth	r3, r3
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	bf14      	ite	ne
 801fb4e:	2301      	movne	r3, #1
 801fb50:	2300      	moveq	r3, #0
 801fb52:	b2db      	uxtb	r3, r3
 801fb54:	e00b      	b.n	801fb6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801fb56:	68fb      	ldr	r3, [r7, #12]
 801fb58:	681b      	ldr	r3, [r3, #0]
 801fb5a:	699b      	ldr	r3, [r3, #24]
 801fb5c:	43da      	mvns	r2, r3
 801fb5e:	68bb      	ldr	r3, [r7, #8]
 801fb60:	4013      	ands	r3, r2
 801fb62:	b29b      	uxth	r3, r3
 801fb64:	2b00      	cmp	r3, #0
 801fb66:	bf14      	ite	ne
 801fb68:	2301      	movne	r3, #1
 801fb6a:	2300      	moveq	r3, #0
 801fb6c:	b2db      	uxtb	r3, r3
 801fb6e:	2b00      	cmp	r3, #0
 801fb70:	d18d      	bne.n	801fa8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801fb72:	2300      	movs	r3, #0
}
 801fb74:	4618      	mov	r0, r3
 801fb76:	3710      	adds	r7, #16
 801fb78:	46bd      	mov	sp, r7
 801fb7a:	bd80      	pop	{r7, pc}

0801fb7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801fb7c:	b580      	push	{r7, lr}
 801fb7e:	b084      	sub	sp, #16
 801fb80:	af00      	add	r7, sp, #0
 801fb82:	60f8      	str	r0, [r7, #12]
 801fb84:	60b9      	str	r1, [r7, #8]
 801fb86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801fb88:	e02d      	b.n	801fbe6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801fb8a:	68f8      	ldr	r0, [r7, #12]
 801fb8c:	f000 f86a 	bl	801fc64 <I2C_IsAcknowledgeFailed>
 801fb90:	4603      	mov	r3, r0
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	d001      	beq.n	801fb9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801fb96:	2301      	movs	r3, #1
 801fb98:	e02d      	b.n	801fbf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801fb9a:	68bb      	ldr	r3, [r7, #8]
 801fb9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fba0:	d021      	beq.n	801fbe6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801fba2:	f7fb fd7b 	bl	801b69c <HAL_GetTick>
 801fba6:	4602      	mov	r2, r0
 801fba8:	687b      	ldr	r3, [r7, #4]
 801fbaa:	1ad3      	subs	r3, r2, r3
 801fbac:	68ba      	ldr	r2, [r7, #8]
 801fbae:	429a      	cmp	r2, r3
 801fbb0:	d302      	bcc.n	801fbb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801fbb2:	68bb      	ldr	r3, [r7, #8]
 801fbb4:	2b00      	cmp	r3, #0
 801fbb6:	d116      	bne.n	801fbe6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801fbb8:	68fb      	ldr	r3, [r7, #12]
 801fbba:	2200      	movs	r2, #0
 801fbbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801fbbe:	68fb      	ldr	r3, [r7, #12]
 801fbc0:	2220      	movs	r2, #32
 801fbc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801fbc6:	68fb      	ldr	r3, [r7, #12]
 801fbc8:	2200      	movs	r2, #0
 801fbca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801fbce:	68fb      	ldr	r3, [r7, #12]
 801fbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fbd2:	f043 0220 	orr.w	r2, r3, #32
 801fbd6:	68fb      	ldr	r3, [r7, #12]
 801fbd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801fbda:	68fb      	ldr	r3, [r7, #12]
 801fbdc:	2200      	movs	r2, #0
 801fbde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801fbe2:	2301      	movs	r3, #1
 801fbe4:	e007      	b.n	801fbf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801fbe6:	68fb      	ldr	r3, [r7, #12]
 801fbe8:	681b      	ldr	r3, [r3, #0]
 801fbea:	695b      	ldr	r3, [r3, #20]
 801fbec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fbf0:	2b80      	cmp	r3, #128	; 0x80
 801fbf2:	d1ca      	bne.n	801fb8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801fbf4:	2300      	movs	r3, #0
}
 801fbf6:	4618      	mov	r0, r3
 801fbf8:	3710      	adds	r7, #16
 801fbfa:	46bd      	mov	sp, r7
 801fbfc:	bd80      	pop	{r7, pc}
	...

0801fc00 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 801fc00:	b480      	push	{r7}
 801fc02:	b085      	sub	sp, #20
 801fc04:	af00      	add	r7, sp, #0
 801fc06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801fc08:	2300      	movs	r3, #0
 801fc0a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 801fc0c:	4b13      	ldr	r3, [pc, #76]	; (801fc5c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 801fc0e:	681b      	ldr	r3, [r3, #0]
 801fc10:	08db      	lsrs	r3, r3, #3
 801fc12:	4a13      	ldr	r2, [pc, #76]	; (801fc60 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 801fc14:	fba2 2303 	umull	r2, r3, r2, r3
 801fc18:	0a1a      	lsrs	r2, r3, #8
 801fc1a:	4613      	mov	r3, r2
 801fc1c:	009b      	lsls	r3, r3, #2
 801fc1e:	4413      	add	r3, r2
 801fc20:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801fc22:	68fb      	ldr	r3, [r7, #12]
 801fc24:	3b01      	subs	r3, #1
 801fc26:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 801fc28:	68fb      	ldr	r3, [r7, #12]
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	d107      	bne.n	801fc3e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801fc2e:	687b      	ldr	r3, [r7, #4]
 801fc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fc32:	f043 0220 	orr.w	r2, r3, #32
 801fc36:	687b      	ldr	r3, [r7, #4]
 801fc38:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801fc3a:	2301      	movs	r3, #1
 801fc3c:	e008      	b.n	801fc50 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801fc3e:	687b      	ldr	r3, [r7, #4]
 801fc40:	681b      	ldr	r3, [r3, #0]
 801fc42:	681b      	ldr	r3, [r3, #0]
 801fc44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801fc48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fc4c:	d0e9      	beq.n	801fc22 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801fc4e:	2300      	movs	r3, #0
}
 801fc50:	4618      	mov	r0, r3
 801fc52:	3714      	adds	r7, #20
 801fc54:	46bd      	mov	sp, r7
 801fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc5a:	4770      	bx	lr
 801fc5c:	20000020 	.word	0x20000020
 801fc60:	14f8b589 	.word	0x14f8b589

0801fc64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801fc64:	b480      	push	{r7}
 801fc66:	b083      	sub	sp, #12
 801fc68:	af00      	add	r7, sp, #0
 801fc6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801fc6c:	687b      	ldr	r3, [r7, #4]
 801fc6e:	681b      	ldr	r3, [r3, #0]
 801fc70:	695b      	ldr	r3, [r3, #20]
 801fc72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801fc76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fc7a:	d11b      	bne.n	801fcb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801fc7c:	687b      	ldr	r3, [r7, #4]
 801fc7e:	681b      	ldr	r3, [r3, #0]
 801fc80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801fc84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801fc86:	687b      	ldr	r3, [r7, #4]
 801fc88:	2200      	movs	r2, #0
 801fc8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801fc8c:	687b      	ldr	r3, [r7, #4]
 801fc8e:	2220      	movs	r2, #32
 801fc90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	2200      	movs	r2, #0
 801fc98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801fc9c:	687b      	ldr	r3, [r7, #4]
 801fc9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fca0:	f043 0204 	orr.w	r2, r3, #4
 801fca4:	687b      	ldr	r3, [r7, #4]
 801fca6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801fca8:	687b      	ldr	r3, [r7, #4]
 801fcaa:	2200      	movs	r2, #0
 801fcac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801fcb0:	2301      	movs	r3, #1
 801fcb2:	e000      	b.n	801fcb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801fcb4:	2300      	movs	r3, #0
}
 801fcb6:	4618      	mov	r0, r3
 801fcb8:	370c      	adds	r7, #12
 801fcba:	46bd      	mov	sp, r7
 801fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcc0:	4770      	bx	lr

0801fcc2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801fcc2:	b480      	push	{r7}
 801fcc4:	b083      	sub	sp, #12
 801fcc6:	af00      	add	r7, sp, #0
 801fcc8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801fcca:	687b      	ldr	r3, [r7, #4]
 801fccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fcce:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801fcd2:	d103      	bne.n	801fcdc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801fcd4:	687b      	ldr	r3, [r7, #4]
 801fcd6:	2201      	movs	r2, #1
 801fcd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801fcda:	e007      	b.n	801fcec <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fce0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801fce4:	d102      	bne.n	801fcec <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801fce6:	687b      	ldr	r3, [r7, #4]
 801fce8:	2208      	movs	r2, #8
 801fcea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801fcec:	bf00      	nop
 801fcee:	370c      	adds	r7, #12
 801fcf0:	46bd      	mov	sp, r7
 801fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcf6:	4770      	bx	lr

0801fcf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801fcf8:	b580      	push	{r7, lr}
 801fcfa:	b086      	sub	sp, #24
 801fcfc:	af00      	add	r7, sp, #0
 801fcfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801fd00:	687b      	ldr	r3, [r7, #4]
 801fd02:	2b00      	cmp	r3, #0
 801fd04:	d101      	bne.n	801fd0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801fd06:	2301      	movs	r3, #1
 801fd08:	e267      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801fd0a:	687b      	ldr	r3, [r7, #4]
 801fd0c:	681b      	ldr	r3, [r3, #0]
 801fd0e:	f003 0301 	and.w	r3, r3, #1
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	d075      	beq.n	801fe02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801fd16:	4b88      	ldr	r3, [pc, #544]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fd18:	689b      	ldr	r3, [r3, #8]
 801fd1a:	f003 030c 	and.w	r3, r3, #12
 801fd1e:	2b04      	cmp	r3, #4
 801fd20:	d00c      	beq.n	801fd3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801fd22:	4b85      	ldr	r3, [pc, #532]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fd24:	689b      	ldr	r3, [r3, #8]
 801fd26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801fd2a:	2b08      	cmp	r3, #8
 801fd2c:	d112      	bne.n	801fd54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801fd2e:	4b82      	ldr	r3, [pc, #520]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fd30:	685b      	ldr	r3, [r3, #4]
 801fd32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fd36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801fd3a:	d10b      	bne.n	801fd54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801fd3c:	4b7e      	ldr	r3, [pc, #504]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fd3e:	681b      	ldr	r3, [r3, #0]
 801fd40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801fd44:	2b00      	cmp	r3, #0
 801fd46:	d05b      	beq.n	801fe00 <HAL_RCC_OscConfig+0x108>
 801fd48:	687b      	ldr	r3, [r7, #4]
 801fd4a:	685b      	ldr	r3, [r3, #4]
 801fd4c:	2b00      	cmp	r3, #0
 801fd4e:	d157      	bne.n	801fe00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801fd50:	2301      	movs	r3, #1
 801fd52:	e242      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801fd54:	687b      	ldr	r3, [r7, #4]
 801fd56:	685b      	ldr	r3, [r3, #4]
 801fd58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fd5c:	d106      	bne.n	801fd6c <HAL_RCC_OscConfig+0x74>
 801fd5e:	4b76      	ldr	r3, [pc, #472]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fd60:	681b      	ldr	r3, [r3, #0]
 801fd62:	4a75      	ldr	r2, [pc, #468]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fd64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801fd68:	6013      	str	r3, [r2, #0]
 801fd6a:	e01d      	b.n	801fda8 <HAL_RCC_OscConfig+0xb0>
 801fd6c:	687b      	ldr	r3, [r7, #4]
 801fd6e:	685b      	ldr	r3, [r3, #4]
 801fd70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801fd74:	d10c      	bne.n	801fd90 <HAL_RCC_OscConfig+0x98>
 801fd76:	4b70      	ldr	r3, [pc, #448]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fd78:	681b      	ldr	r3, [r3, #0]
 801fd7a:	4a6f      	ldr	r2, [pc, #444]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fd7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801fd80:	6013      	str	r3, [r2, #0]
 801fd82:	4b6d      	ldr	r3, [pc, #436]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fd84:	681b      	ldr	r3, [r3, #0]
 801fd86:	4a6c      	ldr	r2, [pc, #432]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fd88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801fd8c:	6013      	str	r3, [r2, #0]
 801fd8e:	e00b      	b.n	801fda8 <HAL_RCC_OscConfig+0xb0>
 801fd90:	4b69      	ldr	r3, [pc, #420]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fd92:	681b      	ldr	r3, [r3, #0]
 801fd94:	4a68      	ldr	r2, [pc, #416]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fd96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801fd9a:	6013      	str	r3, [r2, #0]
 801fd9c:	4b66      	ldr	r3, [pc, #408]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fd9e:	681b      	ldr	r3, [r3, #0]
 801fda0:	4a65      	ldr	r2, [pc, #404]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fda2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801fda6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	685b      	ldr	r3, [r3, #4]
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	d013      	beq.n	801fdd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801fdb0:	f7fb fc74 	bl	801b69c <HAL_GetTick>
 801fdb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801fdb6:	e008      	b.n	801fdca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801fdb8:	f7fb fc70 	bl	801b69c <HAL_GetTick>
 801fdbc:	4602      	mov	r2, r0
 801fdbe:	693b      	ldr	r3, [r7, #16]
 801fdc0:	1ad3      	subs	r3, r2, r3
 801fdc2:	2b64      	cmp	r3, #100	; 0x64
 801fdc4:	d901      	bls.n	801fdca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801fdc6:	2303      	movs	r3, #3
 801fdc8:	e207      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801fdca:	4b5b      	ldr	r3, [pc, #364]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fdcc:	681b      	ldr	r3, [r3, #0]
 801fdce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801fdd2:	2b00      	cmp	r3, #0
 801fdd4:	d0f0      	beq.n	801fdb8 <HAL_RCC_OscConfig+0xc0>
 801fdd6:	e014      	b.n	801fe02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801fdd8:	f7fb fc60 	bl	801b69c <HAL_GetTick>
 801fddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801fdde:	e008      	b.n	801fdf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801fde0:	f7fb fc5c 	bl	801b69c <HAL_GetTick>
 801fde4:	4602      	mov	r2, r0
 801fde6:	693b      	ldr	r3, [r7, #16]
 801fde8:	1ad3      	subs	r3, r2, r3
 801fdea:	2b64      	cmp	r3, #100	; 0x64
 801fdec:	d901      	bls.n	801fdf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801fdee:	2303      	movs	r3, #3
 801fdf0:	e1f3      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801fdf2:	4b51      	ldr	r3, [pc, #324]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fdf4:	681b      	ldr	r3, [r3, #0]
 801fdf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801fdfa:	2b00      	cmp	r3, #0
 801fdfc:	d1f0      	bne.n	801fde0 <HAL_RCC_OscConfig+0xe8>
 801fdfe:	e000      	b.n	801fe02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801fe00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	f003 0302 	and.w	r3, r3, #2
 801fe0a:	2b00      	cmp	r3, #0
 801fe0c:	d063      	beq.n	801fed6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801fe0e:	4b4a      	ldr	r3, [pc, #296]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fe10:	689b      	ldr	r3, [r3, #8]
 801fe12:	f003 030c 	and.w	r3, r3, #12
 801fe16:	2b00      	cmp	r3, #0
 801fe18:	d00b      	beq.n	801fe32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801fe1a:	4b47      	ldr	r3, [pc, #284]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fe1c:	689b      	ldr	r3, [r3, #8]
 801fe1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801fe22:	2b08      	cmp	r3, #8
 801fe24:	d11c      	bne.n	801fe60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801fe26:	4b44      	ldr	r3, [pc, #272]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fe28:	685b      	ldr	r3, [r3, #4]
 801fe2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fe2e:	2b00      	cmp	r3, #0
 801fe30:	d116      	bne.n	801fe60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801fe32:	4b41      	ldr	r3, [pc, #260]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fe34:	681b      	ldr	r3, [r3, #0]
 801fe36:	f003 0302 	and.w	r3, r3, #2
 801fe3a:	2b00      	cmp	r3, #0
 801fe3c:	d005      	beq.n	801fe4a <HAL_RCC_OscConfig+0x152>
 801fe3e:	687b      	ldr	r3, [r7, #4]
 801fe40:	68db      	ldr	r3, [r3, #12]
 801fe42:	2b01      	cmp	r3, #1
 801fe44:	d001      	beq.n	801fe4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801fe46:	2301      	movs	r3, #1
 801fe48:	e1c7      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801fe4a:	4b3b      	ldr	r3, [pc, #236]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fe4c:	681b      	ldr	r3, [r3, #0]
 801fe4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801fe52:	687b      	ldr	r3, [r7, #4]
 801fe54:	691b      	ldr	r3, [r3, #16]
 801fe56:	00db      	lsls	r3, r3, #3
 801fe58:	4937      	ldr	r1, [pc, #220]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fe5a:	4313      	orrs	r3, r2
 801fe5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801fe5e:	e03a      	b.n	801fed6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801fe60:	687b      	ldr	r3, [r7, #4]
 801fe62:	68db      	ldr	r3, [r3, #12]
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	d020      	beq.n	801feaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801fe68:	4b34      	ldr	r3, [pc, #208]	; (801ff3c <HAL_RCC_OscConfig+0x244>)
 801fe6a:	2201      	movs	r2, #1
 801fe6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801fe6e:	f7fb fc15 	bl	801b69c <HAL_GetTick>
 801fe72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801fe74:	e008      	b.n	801fe88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801fe76:	f7fb fc11 	bl	801b69c <HAL_GetTick>
 801fe7a:	4602      	mov	r2, r0
 801fe7c:	693b      	ldr	r3, [r7, #16]
 801fe7e:	1ad3      	subs	r3, r2, r3
 801fe80:	2b02      	cmp	r3, #2
 801fe82:	d901      	bls.n	801fe88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801fe84:	2303      	movs	r3, #3
 801fe86:	e1a8      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801fe88:	4b2b      	ldr	r3, [pc, #172]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fe8a:	681b      	ldr	r3, [r3, #0]
 801fe8c:	f003 0302 	and.w	r3, r3, #2
 801fe90:	2b00      	cmp	r3, #0
 801fe92:	d0f0      	beq.n	801fe76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801fe94:	4b28      	ldr	r3, [pc, #160]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fe96:	681b      	ldr	r3, [r3, #0]
 801fe98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801fe9c:	687b      	ldr	r3, [r7, #4]
 801fe9e:	691b      	ldr	r3, [r3, #16]
 801fea0:	00db      	lsls	r3, r3, #3
 801fea2:	4925      	ldr	r1, [pc, #148]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fea4:	4313      	orrs	r3, r2
 801fea6:	600b      	str	r3, [r1, #0]
 801fea8:	e015      	b.n	801fed6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801feaa:	4b24      	ldr	r3, [pc, #144]	; (801ff3c <HAL_RCC_OscConfig+0x244>)
 801feac:	2200      	movs	r2, #0
 801feae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801feb0:	f7fb fbf4 	bl	801b69c <HAL_GetTick>
 801feb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801feb6:	e008      	b.n	801feca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801feb8:	f7fb fbf0 	bl	801b69c <HAL_GetTick>
 801febc:	4602      	mov	r2, r0
 801febe:	693b      	ldr	r3, [r7, #16]
 801fec0:	1ad3      	subs	r3, r2, r3
 801fec2:	2b02      	cmp	r3, #2
 801fec4:	d901      	bls.n	801feca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801fec6:	2303      	movs	r3, #3
 801fec8:	e187      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801feca:	4b1b      	ldr	r3, [pc, #108]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	f003 0302 	and.w	r3, r3, #2
 801fed2:	2b00      	cmp	r3, #0
 801fed4:	d1f0      	bne.n	801feb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801fed6:	687b      	ldr	r3, [r7, #4]
 801fed8:	681b      	ldr	r3, [r3, #0]
 801feda:	f003 0308 	and.w	r3, r3, #8
 801fede:	2b00      	cmp	r3, #0
 801fee0:	d036      	beq.n	801ff50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	695b      	ldr	r3, [r3, #20]
 801fee6:	2b00      	cmp	r3, #0
 801fee8:	d016      	beq.n	801ff18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801feea:	4b15      	ldr	r3, [pc, #84]	; (801ff40 <HAL_RCC_OscConfig+0x248>)
 801feec:	2201      	movs	r2, #1
 801feee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801fef0:	f7fb fbd4 	bl	801b69c <HAL_GetTick>
 801fef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801fef6:	e008      	b.n	801ff0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801fef8:	f7fb fbd0 	bl	801b69c <HAL_GetTick>
 801fefc:	4602      	mov	r2, r0
 801fefe:	693b      	ldr	r3, [r7, #16]
 801ff00:	1ad3      	subs	r3, r2, r3
 801ff02:	2b02      	cmp	r3, #2
 801ff04:	d901      	bls.n	801ff0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801ff06:	2303      	movs	r3, #3
 801ff08:	e167      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801ff0a:	4b0b      	ldr	r3, [pc, #44]	; (801ff38 <HAL_RCC_OscConfig+0x240>)
 801ff0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ff0e:	f003 0302 	and.w	r3, r3, #2
 801ff12:	2b00      	cmp	r3, #0
 801ff14:	d0f0      	beq.n	801fef8 <HAL_RCC_OscConfig+0x200>
 801ff16:	e01b      	b.n	801ff50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801ff18:	4b09      	ldr	r3, [pc, #36]	; (801ff40 <HAL_RCC_OscConfig+0x248>)
 801ff1a:	2200      	movs	r2, #0
 801ff1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801ff1e:	f7fb fbbd 	bl	801b69c <HAL_GetTick>
 801ff22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801ff24:	e00e      	b.n	801ff44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801ff26:	f7fb fbb9 	bl	801b69c <HAL_GetTick>
 801ff2a:	4602      	mov	r2, r0
 801ff2c:	693b      	ldr	r3, [r7, #16]
 801ff2e:	1ad3      	subs	r3, r2, r3
 801ff30:	2b02      	cmp	r3, #2
 801ff32:	d907      	bls.n	801ff44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801ff34:	2303      	movs	r3, #3
 801ff36:	e150      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
 801ff38:	40023800 	.word	0x40023800
 801ff3c:	42470000 	.word	0x42470000
 801ff40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801ff44:	4b88      	ldr	r3, [pc, #544]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 801ff46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ff48:	f003 0302 	and.w	r3, r3, #2
 801ff4c:	2b00      	cmp	r3, #0
 801ff4e:	d1ea      	bne.n	801ff26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801ff50:	687b      	ldr	r3, [r7, #4]
 801ff52:	681b      	ldr	r3, [r3, #0]
 801ff54:	f003 0304 	and.w	r3, r3, #4
 801ff58:	2b00      	cmp	r3, #0
 801ff5a:	f000 8097 	beq.w	802008c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801ff5e:	2300      	movs	r3, #0
 801ff60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801ff62:	4b81      	ldr	r3, [pc, #516]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 801ff64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ff66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ff6a:	2b00      	cmp	r3, #0
 801ff6c:	d10f      	bne.n	801ff8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801ff6e:	2300      	movs	r3, #0
 801ff70:	60bb      	str	r3, [r7, #8]
 801ff72:	4b7d      	ldr	r3, [pc, #500]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 801ff74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ff76:	4a7c      	ldr	r2, [pc, #496]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 801ff78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ff7c:	6413      	str	r3, [r2, #64]	; 0x40
 801ff7e:	4b7a      	ldr	r3, [pc, #488]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 801ff80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ff82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ff86:	60bb      	str	r3, [r7, #8]
 801ff88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801ff8a:	2301      	movs	r3, #1
 801ff8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801ff8e:	4b77      	ldr	r3, [pc, #476]	; (802016c <HAL_RCC_OscConfig+0x474>)
 801ff90:	681b      	ldr	r3, [r3, #0]
 801ff92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ff96:	2b00      	cmp	r3, #0
 801ff98:	d118      	bne.n	801ffcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801ff9a:	4b74      	ldr	r3, [pc, #464]	; (802016c <HAL_RCC_OscConfig+0x474>)
 801ff9c:	681b      	ldr	r3, [r3, #0]
 801ff9e:	4a73      	ldr	r2, [pc, #460]	; (802016c <HAL_RCC_OscConfig+0x474>)
 801ffa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ffa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801ffa6:	f7fb fb79 	bl	801b69c <HAL_GetTick>
 801ffaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801ffac:	e008      	b.n	801ffc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ffae:	f7fb fb75 	bl	801b69c <HAL_GetTick>
 801ffb2:	4602      	mov	r2, r0
 801ffb4:	693b      	ldr	r3, [r7, #16]
 801ffb6:	1ad3      	subs	r3, r2, r3
 801ffb8:	2b02      	cmp	r3, #2
 801ffba:	d901      	bls.n	801ffc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801ffbc:	2303      	movs	r3, #3
 801ffbe:	e10c      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801ffc0:	4b6a      	ldr	r3, [pc, #424]	; (802016c <HAL_RCC_OscConfig+0x474>)
 801ffc2:	681b      	ldr	r3, [r3, #0]
 801ffc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d0f0      	beq.n	801ffae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801ffcc:	687b      	ldr	r3, [r7, #4]
 801ffce:	689b      	ldr	r3, [r3, #8]
 801ffd0:	2b01      	cmp	r3, #1
 801ffd2:	d106      	bne.n	801ffe2 <HAL_RCC_OscConfig+0x2ea>
 801ffd4:	4b64      	ldr	r3, [pc, #400]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 801ffd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ffd8:	4a63      	ldr	r2, [pc, #396]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 801ffda:	f043 0301 	orr.w	r3, r3, #1
 801ffde:	6713      	str	r3, [r2, #112]	; 0x70
 801ffe0:	e01c      	b.n	802001c <HAL_RCC_OscConfig+0x324>
 801ffe2:	687b      	ldr	r3, [r7, #4]
 801ffe4:	689b      	ldr	r3, [r3, #8]
 801ffe6:	2b05      	cmp	r3, #5
 801ffe8:	d10c      	bne.n	8020004 <HAL_RCC_OscConfig+0x30c>
 801ffea:	4b5f      	ldr	r3, [pc, #380]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 801ffec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ffee:	4a5e      	ldr	r2, [pc, #376]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 801fff0:	f043 0304 	orr.w	r3, r3, #4
 801fff4:	6713      	str	r3, [r2, #112]	; 0x70
 801fff6:	4b5c      	ldr	r3, [pc, #368]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 801fff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fffa:	4a5b      	ldr	r2, [pc, #364]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 801fffc:	f043 0301 	orr.w	r3, r3, #1
 8020000:	6713      	str	r3, [r2, #112]	; 0x70
 8020002:	e00b      	b.n	802001c <HAL_RCC_OscConfig+0x324>
 8020004:	4b58      	ldr	r3, [pc, #352]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 8020006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020008:	4a57      	ldr	r2, [pc, #348]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 802000a:	f023 0301 	bic.w	r3, r3, #1
 802000e:	6713      	str	r3, [r2, #112]	; 0x70
 8020010:	4b55      	ldr	r3, [pc, #340]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 8020012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020014:	4a54      	ldr	r2, [pc, #336]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 8020016:	f023 0304 	bic.w	r3, r3, #4
 802001a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802001c:	687b      	ldr	r3, [r7, #4]
 802001e:	689b      	ldr	r3, [r3, #8]
 8020020:	2b00      	cmp	r3, #0
 8020022:	d015      	beq.n	8020050 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020024:	f7fb fb3a 	bl	801b69c <HAL_GetTick>
 8020028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802002a:	e00a      	b.n	8020042 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802002c:	f7fb fb36 	bl	801b69c <HAL_GetTick>
 8020030:	4602      	mov	r2, r0
 8020032:	693b      	ldr	r3, [r7, #16]
 8020034:	1ad3      	subs	r3, r2, r3
 8020036:	f241 3288 	movw	r2, #5000	; 0x1388
 802003a:	4293      	cmp	r3, r2
 802003c:	d901      	bls.n	8020042 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 802003e:	2303      	movs	r3, #3
 8020040:	e0cb      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8020042:	4b49      	ldr	r3, [pc, #292]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 8020044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020046:	f003 0302 	and.w	r3, r3, #2
 802004a:	2b00      	cmp	r3, #0
 802004c:	d0ee      	beq.n	802002c <HAL_RCC_OscConfig+0x334>
 802004e:	e014      	b.n	802007a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8020050:	f7fb fb24 	bl	801b69c <HAL_GetTick>
 8020054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8020056:	e00a      	b.n	802006e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8020058:	f7fb fb20 	bl	801b69c <HAL_GetTick>
 802005c:	4602      	mov	r2, r0
 802005e:	693b      	ldr	r3, [r7, #16]
 8020060:	1ad3      	subs	r3, r2, r3
 8020062:	f241 3288 	movw	r2, #5000	; 0x1388
 8020066:	4293      	cmp	r3, r2
 8020068:	d901      	bls.n	802006e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 802006a:	2303      	movs	r3, #3
 802006c:	e0b5      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802006e:	4b3e      	ldr	r3, [pc, #248]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 8020070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020072:	f003 0302 	and.w	r3, r3, #2
 8020076:	2b00      	cmp	r3, #0
 8020078:	d1ee      	bne.n	8020058 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802007a:	7dfb      	ldrb	r3, [r7, #23]
 802007c:	2b01      	cmp	r3, #1
 802007e:	d105      	bne.n	802008c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8020080:	4b39      	ldr	r3, [pc, #228]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 8020082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020084:	4a38      	ldr	r2, [pc, #224]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 8020086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802008a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802008c:	687b      	ldr	r3, [r7, #4]
 802008e:	699b      	ldr	r3, [r3, #24]
 8020090:	2b00      	cmp	r3, #0
 8020092:	f000 80a1 	beq.w	80201d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8020096:	4b34      	ldr	r3, [pc, #208]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 8020098:	689b      	ldr	r3, [r3, #8]
 802009a:	f003 030c 	and.w	r3, r3, #12
 802009e:	2b08      	cmp	r3, #8
 80200a0:	d05c      	beq.n	802015c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80200a2:	687b      	ldr	r3, [r7, #4]
 80200a4:	699b      	ldr	r3, [r3, #24]
 80200a6:	2b02      	cmp	r3, #2
 80200a8:	d141      	bne.n	802012e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80200aa:	4b31      	ldr	r3, [pc, #196]	; (8020170 <HAL_RCC_OscConfig+0x478>)
 80200ac:	2200      	movs	r2, #0
 80200ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80200b0:	f7fb faf4 	bl	801b69c <HAL_GetTick>
 80200b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80200b6:	e008      	b.n	80200ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80200b8:	f7fb faf0 	bl	801b69c <HAL_GetTick>
 80200bc:	4602      	mov	r2, r0
 80200be:	693b      	ldr	r3, [r7, #16]
 80200c0:	1ad3      	subs	r3, r2, r3
 80200c2:	2b02      	cmp	r3, #2
 80200c4:	d901      	bls.n	80200ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80200c6:	2303      	movs	r3, #3
 80200c8:	e087      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80200ca:	4b27      	ldr	r3, [pc, #156]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 80200cc:	681b      	ldr	r3, [r3, #0]
 80200ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	d1f0      	bne.n	80200b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80200d6:	687b      	ldr	r3, [r7, #4]
 80200d8:	69da      	ldr	r2, [r3, #28]
 80200da:	687b      	ldr	r3, [r7, #4]
 80200dc:	6a1b      	ldr	r3, [r3, #32]
 80200de:	431a      	orrs	r2, r3
 80200e0:	687b      	ldr	r3, [r7, #4]
 80200e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80200e4:	019b      	lsls	r3, r3, #6
 80200e6:	431a      	orrs	r2, r3
 80200e8:	687b      	ldr	r3, [r7, #4]
 80200ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80200ec:	085b      	lsrs	r3, r3, #1
 80200ee:	3b01      	subs	r3, #1
 80200f0:	041b      	lsls	r3, r3, #16
 80200f2:	431a      	orrs	r2, r3
 80200f4:	687b      	ldr	r3, [r7, #4]
 80200f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80200f8:	061b      	lsls	r3, r3, #24
 80200fa:	491b      	ldr	r1, [pc, #108]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 80200fc:	4313      	orrs	r3, r2
 80200fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8020100:	4b1b      	ldr	r3, [pc, #108]	; (8020170 <HAL_RCC_OscConfig+0x478>)
 8020102:	2201      	movs	r2, #1
 8020104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020106:	f7fb fac9 	bl	801b69c <HAL_GetTick>
 802010a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802010c:	e008      	b.n	8020120 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802010e:	f7fb fac5 	bl	801b69c <HAL_GetTick>
 8020112:	4602      	mov	r2, r0
 8020114:	693b      	ldr	r3, [r7, #16]
 8020116:	1ad3      	subs	r3, r2, r3
 8020118:	2b02      	cmp	r3, #2
 802011a:	d901      	bls.n	8020120 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802011c:	2303      	movs	r3, #3
 802011e:	e05c      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8020120:	4b11      	ldr	r3, [pc, #68]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 8020122:	681b      	ldr	r3, [r3, #0]
 8020124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020128:	2b00      	cmp	r3, #0
 802012a:	d0f0      	beq.n	802010e <HAL_RCC_OscConfig+0x416>
 802012c:	e054      	b.n	80201d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802012e:	4b10      	ldr	r3, [pc, #64]	; (8020170 <HAL_RCC_OscConfig+0x478>)
 8020130:	2200      	movs	r2, #0
 8020132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020134:	f7fb fab2 	bl	801b69c <HAL_GetTick>
 8020138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802013a:	e008      	b.n	802014e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802013c:	f7fb faae 	bl	801b69c <HAL_GetTick>
 8020140:	4602      	mov	r2, r0
 8020142:	693b      	ldr	r3, [r7, #16]
 8020144:	1ad3      	subs	r3, r2, r3
 8020146:	2b02      	cmp	r3, #2
 8020148:	d901      	bls.n	802014e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 802014a:	2303      	movs	r3, #3
 802014c:	e045      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802014e:	4b06      	ldr	r3, [pc, #24]	; (8020168 <HAL_RCC_OscConfig+0x470>)
 8020150:	681b      	ldr	r3, [r3, #0]
 8020152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020156:	2b00      	cmp	r3, #0
 8020158:	d1f0      	bne.n	802013c <HAL_RCC_OscConfig+0x444>
 802015a:	e03d      	b.n	80201d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802015c:	687b      	ldr	r3, [r7, #4]
 802015e:	699b      	ldr	r3, [r3, #24]
 8020160:	2b01      	cmp	r3, #1
 8020162:	d107      	bne.n	8020174 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8020164:	2301      	movs	r3, #1
 8020166:	e038      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
 8020168:	40023800 	.word	0x40023800
 802016c:	40007000 	.word	0x40007000
 8020170:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8020174:	4b1b      	ldr	r3, [pc, #108]	; (80201e4 <HAL_RCC_OscConfig+0x4ec>)
 8020176:	685b      	ldr	r3, [r3, #4]
 8020178:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802017a:	687b      	ldr	r3, [r7, #4]
 802017c:	699b      	ldr	r3, [r3, #24]
 802017e:	2b01      	cmp	r3, #1
 8020180:	d028      	beq.n	80201d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8020182:	68fb      	ldr	r3, [r7, #12]
 8020184:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8020188:	687b      	ldr	r3, [r7, #4]
 802018a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802018c:	429a      	cmp	r2, r3
 802018e:	d121      	bne.n	80201d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8020190:	68fb      	ldr	r3, [r7, #12]
 8020192:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8020196:	687b      	ldr	r3, [r7, #4]
 8020198:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802019a:	429a      	cmp	r2, r3
 802019c:	d11a      	bne.n	80201d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802019e:	68fa      	ldr	r2, [r7, #12]
 80201a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80201a4:	4013      	ands	r3, r2
 80201a6:	687a      	ldr	r2, [r7, #4]
 80201a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80201aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80201ac:	4293      	cmp	r3, r2
 80201ae:	d111      	bne.n	80201d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80201b0:	68fb      	ldr	r3, [r7, #12]
 80201b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80201b6:	687b      	ldr	r3, [r7, #4]
 80201b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80201ba:	085b      	lsrs	r3, r3, #1
 80201bc:	3b01      	subs	r3, #1
 80201be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80201c0:	429a      	cmp	r2, r3
 80201c2:	d107      	bne.n	80201d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80201c4:	68fb      	ldr	r3, [r7, #12]
 80201c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80201ca:	687b      	ldr	r3, [r7, #4]
 80201cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80201ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80201d0:	429a      	cmp	r2, r3
 80201d2:	d001      	beq.n	80201d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80201d4:	2301      	movs	r3, #1
 80201d6:	e000      	b.n	80201da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80201d8:	2300      	movs	r3, #0
}
 80201da:	4618      	mov	r0, r3
 80201dc:	3718      	adds	r7, #24
 80201de:	46bd      	mov	sp, r7
 80201e0:	bd80      	pop	{r7, pc}
 80201e2:	bf00      	nop
 80201e4:	40023800 	.word	0x40023800

080201e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80201e8:	b580      	push	{r7, lr}
 80201ea:	b084      	sub	sp, #16
 80201ec:	af00      	add	r7, sp, #0
 80201ee:	6078      	str	r0, [r7, #4]
 80201f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	d101      	bne.n	80201fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80201f8:	2301      	movs	r3, #1
 80201fa:	e0cc      	b.n	8020396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80201fc:	4b68      	ldr	r3, [pc, #416]	; (80203a0 <HAL_RCC_ClockConfig+0x1b8>)
 80201fe:	681b      	ldr	r3, [r3, #0]
 8020200:	f003 0307 	and.w	r3, r3, #7
 8020204:	683a      	ldr	r2, [r7, #0]
 8020206:	429a      	cmp	r2, r3
 8020208:	d90c      	bls.n	8020224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802020a:	4b65      	ldr	r3, [pc, #404]	; (80203a0 <HAL_RCC_ClockConfig+0x1b8>)
 802020c:	683a      	ldr	r2, [r7, #0]
 802020e:	b2d2      	uxtb	r2, r2
 8020210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8020212:	4b63      	ldr	r3, [pc, #396]	; (80203a0 <HAL_RCC_ClockConfig+0x1b8>)
 8020214:	681b      	ldr	r3, [r3, #0]
 8020216:	f003 0307 	and.w	r3, r3, #7
 802021a:	683a      	ldr	r2, [r7, #0]
 802021c:	429a      	cmp	r2, r3
 802021e:	d001      	beq.n	8020224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8020220:	2301      	movs	r3, #1
 8020222:	e0b8      	b.n	8020396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	681b      	ldr	r3, [r3, #0]
 8020228:	f003 0302 	and.w	r3, r3, #2
 802022c:	2b00      	cmp	r3, #0
 802022e:	d020      	beq.n	8020272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8020230:	687b      	ldr	r3, [r7, #4]
 8020232:	681b      	ldr	r3, [r3, #0]
 8020234:	f003 0304 	and.w	r3, r3, #4
 8020238:	2b00      	cmp	r3, #0
 802023a:	d005      	beq.n	8020248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802023c:	4b59      	ldr	r3, [pc, #356]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 802023e:	689b      	ldr	r3, [r3, #8]
 8020240:	4a58      	ldr	r2, [pc, #352]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 8020242:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8020246:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8020248:	687b      	ldr	r3, [r7, #4]
 802024a:	681b      	ldr	r3, [r3, #0]
 802024c:	f003 0308 	and.w	r3, r3, #8
 8020250:	2b00      	cmp	r3, #0
 8020252:	d005      	beq.n	8020260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8020254:	4b53      	ldr	r3, [pc, #332]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 8020256:	689b      	ldr	r3, [r3, #8]
 8020258:	4a52      	ldr	r2, [pc, #328]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 802025a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802025e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8020260:	4b50      	ldr	r3, [pc, #320]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 8020262:	689b      	ldr	r3, [r3, #8]
 8020264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8020268:	687b      	ldr	r3, [r7, #4]
 802026a:	689b      	ldr	r3, [r3, #8]
 802026c:	494d      	ldr	r1, [pc, #308]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 802026e:	4313      	orrs	r3, r2
 8020270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8020272:	687b      	ldr	r3, [r7, #4]
 8020274:	681b      	ldr	r3, [r3, #0]
 8020276:	f003 0301 	and.w	r3, r3, #1
 802027a:	2b00      	cmp	r3, #0
 802027c:	d044      	beq.n	8020308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802027e:	687b      	ldr	r3, [r7, #4]
 8020280:	685b      	ldr	r3, [r3, #4]
 8020282:	2b01      	cmp	r3, #1
 8020284:	d107      	bne.n	8020296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8020286:	4b47      	ldr	r3, [pc, #284]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 8020288:	681b      	ldr	r3, [r3, #0]
 802028a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802028e:	2b00      	cmp	r3, #0
 8020290:	d119      	bne.n	80202c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8020292:	2301      	movs	r3, #1
 8020294:	e07f      	b.n	8020396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8020296:	687b      	ldr	r3, [r7, #4]
 8020298:	685b      	ldr	r3, [r3, #4]
 802029a:	2b02      	cmp	r3, #2
 802029c:	d003      	beq.n	80202a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802029e:	687b      	ldr	r3, [r7, #4]
 80202a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80202a2:	2b03      	cmp	r3, #3
 80202a4:	d107      	bne.n	80202b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80202a6:	4b3f      	ldr	r3, [pc, #252]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 80202a8:	681b      	ldr	r3, [r3, #0]
 80202aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80202ae:	2b00      	cmp	r3, #0
 80202b0:	d109      	bne.n	80202c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80202b2:	2301      	movs	r3, #1
 80202b4:	e06f      	b.n	8020396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80202b6:	4b3b      	ldr	r3, [pc, #236]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 80202b8:	681b      	ldr	r3, [r3, #0]
 80202ba:	f003 0302 	and.w	r3, r3, #2
 80202be:	2b00      	cmp	r3, #0
 80202c0:	d101      	bne.n	80202c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80202c2:	2301      	movs	r3, #1
 80202c4:	e067      	b.n	8020396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80202c6:	4b37      	ldr	r3, [pc, #220]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 80202c8:	689b      	ldr	r3, [r3, #8]
 80202ca:	f023 0203 	bic.w	r2, r3, #3
 80202ce:	687b      	ldr	r3, [r7, #4]
 80202d0:	685b      	ldr	r3, [r3, #4]
 80202d2:	4934      	ldr	r1, [pc, #208]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 80202d4:	4313      	orrs	r3, r2
 80202d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80202d8:	f7fb f9e0 	bl	801b69c <HAL_GetTick>
 80202dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80202de:	e00a      	b.n	80202f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80202e0:	f7fb f9dc 	bl	801b69c <HAL_GetTick>
 80202e4:	4602      	mov	r2, r0
 80202e6:	68fb      	ldr	r3, [r7, #12]
 80202e8:	1ad3      	subs	r3, r2, r3
 80202ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80202ee:	4293      	cmp	r3, r2
 80202f0:	d901      	bls.n	80202f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80202f2:	2303      	movs	r3, #3
 80202f4:	e04f      	b.n	8020396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80202f6:	4b2b      	ldr	r3, [pc, #172]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 80202f8:	689b      	ldr	r3, [r3, #8]
 80202fa:	f003 020c 	and.w	r2, r3, #12
 80202fe:	687b      	ldr	r3, [r7, #4]
 8020300:	685b      	ldr	r3, [r3, #4]
 8020302:	009b      	lsls	r3, r3, #2
 8020304:	429a      	cmp	r2, r3
 8020306:	d1eb      	bne.n	80202e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8020308:	4b25      	ldr	r3, [pc, #148]	; (80203a0 <HAL_RCC_ClockConfig+0x1b8>)
 802030a:	681b      	ldr	r3, [r3, #0]
 802030c:	f003 0307 	and.w	r3, r3, #7
 8020310:	683a      	ldr	r2, [r7, #0]
 8020312:	429a      	cmp	r2, r3
 8020314:	d20c      	bcs.n	8020330 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8020316:	4b22      	ldr	r3, [pc, #136]	; (80203a0 <HAL_RCC_ClockConfig+0x1b8>)
 8020318:	683a      	ldr	r2, [r7, #0]
 802031a:	b2d2      	uxtb	r2, r2
 802031c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802031e:	4b20      	ldr	r3, [pc, #128]	; (80203a0 <HAL_RCC_ClockConfig+0x1b8>)
 8020320:	681b      	ldr	r3, [r3, #0]
 8020322:	f003 0307 	and.w	r3, r3, #7
 8020326:	683a      	ldr	r2, [r7, #0]
 8020328:	429a      	cmp	r2, r3
 802032a:	d001      	beq.n	8020330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802032c:	2301      	movs	r3, #1
 802032e:	e032      	b.n	8020396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8020330:	687b      	ldr	r3, [r7, #4]
 8020332:	681b      	ldr	r3, [r3, #0]
 8020334:	f003 0304 	and.w	r3, r3, #4
 8020338:	2b00      	cmp	r3, #0
 802033a:	d008      	beq.n	802034e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802033c:	4b19      	ldr	r3, [pc, #100]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 802033e:	689b      	ldr	r3, [r3, #8]
 8020340:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8020344:	687b      	ldr	r3, [r7, #4]
 8020346:	68db      	ldr	r3, [r3, #12]
 8020348:	4916      	ldr	r1, [pc, #88]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 802034a:	4313      	orrs	r3, r2
 802034c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802034e:	687b      	ldr	r3, [r7, #4]
 8020350:	681b      	ldr	r3, [r3, #0]
 8020352:	f003 0308 	and.w	r3, r3, #8
 8020356:	2b00      	cmp	r3, #0
 8020358:	d009      	beq.n	802036e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802035a:	4b12      	ldr	r3, [pc, #72]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 802035c:	689b      	ldr	r3, [r3, #8]
 802035e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8020362:	687b      	ldr	r3, [r7, #4]
 8020364:	691b      	ldr	r3, [r3, #16]
 8020366:	00db      	lsls	r3, r3, #3
 8020368:	490e      	ldr	r1, [pc, #56]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 802036a:	4313      	orrs	r3, r2
 802036c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802036e:	f000 f821 	bl	80203b4 <HAL_RCC_GetSysClockFreq>
 8020372:	4602      	mov	r2, r0
 8020374:	4b0b      	ldr	r3, [pc, #44]	; (80203a4 <HAL_RCC_ClockConfig+0x1bc>)
 8020376:	689b      	ldr	r3, [r3, #8]
 8020378:	091b      	lsrs	r3, r3, #4
 802037a:	f003 030f 	and.w	r3, r3, #15
 802037e:	490a      	ldr	r1, [pc, #40]	; (80203a8 <HAL_RCC_ClockConfig+0x1c0>)
 8020380:	5ccb      	ldrb	r3, [r1, r3]
 8020382:	fa22 f303 	lsr.w	r3, r2, r3
 8020386:	4a09      	ldr	r2, [pc, #36]	; (80203ac <HAL_RCC_ClockConfig+0x1c4>)
 8020388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802038a:	4b09      	ldr	r3, [pc, #36]	; (80203b0 <HAL_RCC_ClockConfig+0x1c8>)
 802038c:	681b      	ldr	r3, [r3, #0]
 802038e:	4618      	mov	r0, r3
 8020390:	f7fb f940 	bl	801b614 <HAL_InitTick>

  return HAL_OK;
 8020394:	2300      	movs	r3, #0
}
 8020396:	4618      	mov	r0, r3
 8020398:	3710      	adds	r7, #16
 802039a:	46bd      	mov	sp, r7
 802039c:	bd80      	pop	{r7, pc}
 802039e:	bf00      	nop
 80203a0:	40023c00 	.word	0x40023c00
 80203a4:	40023800 	.word	0x40023800
 80203a8:	0802798c 	.word	0x0802798c
 80203ac:	20000020 	.word	0x20000020
 80203b0:	20000150 	.word	0x20000150

080203b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80203b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80203b8:	b094      	sub	sp, #80	; 0x50
 80203ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80203bc:	2300      	movs	r3, #0
 80203be:	647b      	str	r3, [r7, #68]	; 0x44
 80203c0:	2300      	movs	r3, #0
 80203c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80203c4:	2300      	movs	r3, #0
 80203c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80203c8:	2300      	movs	r3, #0
 80203ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80203cc:	4b79      	ldr	r3, [pc, #484]	; (80205b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80203ce:	689b      	ldr	r3, [r3, #8]
 80203d0:	f003 030c 	and.w	r3, r3, #12
 80203d4:	2b08      	cmp	r3, #8
 80203d6:	d00d      	beq.n	80203f4 <HAL_RCC_GetSysClockFreq+0x40>
 80203d8:	2b08      	cmp	r3, #8
 80203da:	f200 80e1 	bhi.w	80205a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80203de:	2b00      	cmp	r3, #0
 80203e0:	d002      	beq.n	80203e8 <HAL_RCC_GetSysClockFreq+0x34>
 80203e2:	2b04      	cmp	r3, #4
 80203e4:	d003      	beq.n	80203ee <HAL_RCC_GetSysClockFreq+0x3a>
 80203e6:	e0db      	b.n	80205a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80203e8:	4b73      	ldr	r3, [pc, #460]	; (80205b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80203ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80203ec:	e0db      	b.n	80205a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80203ee:	4b73      	ldr	r3, [pc, #460]	; (80205bc <HAL_RCC_GetSysClockFreq+0x208>)
 80203f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80203f2:	e0d8      	b.n	80205a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80203f4:	4b6f      	ldr	r3, [pc, #444]	; (80205b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80203f6:	685b      	ldr	r3, [r3, #4]
 80203f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80203fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80203fe:	4b6d      	ldr	r3, [pc, #436]	; (80205b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8020400:	685b      	ldr	r3, [r3, #4]
 8020402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020406:	2b00      	cmp	r3, #0
 8020408:	d063      	beq.n	80204d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802040a:	4b6a      	ldr	r3, [pc, #424]	; (80205b4 <HAL_RCC_GetSysClockFreq+0x200>)
 802040c:	685b      	ldr	r3, [r3, #4]
 802040e:	099b      	lsrs	r3, r3, #6
 8020410:	2200      	movs	r2, #0
 8020412:	63bb      	str	r3, [r7, #56]	; 0x38
 8020414:	63fa      	str	r2, [r7, #60]	; 0x3c
 8020416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802041c:	633b      	str	r3, [r7, #48]	; 0x30
 802041e:	2300      	movs	r3, #0
 8020420:	637b      	str	r3, [r7, #52]	; 0x34
 8020422:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8020426:	4622      	mov	r2, r4
 8020428:	462b      	mov	r3, r5
 802042a:	f04f 0000 	mov.w	r0, #0
 802042e:	f04f 0100 	mov.w	r1, #0
 8020432:	0159      	lsls	r1, r3, #5
 8020434:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8020438:	0150      	lsls	r0, r2, #5
 802043a:	4602      	mov	r2, r0
 802043c:	460b      	mov	r3, r1
 802043e:	4621      	mov	r1, r4
 8020440:	1a51      	subs	r1, r2, r1
 8020442:	6139      	str	r1, [r7, #16]
 8020444:	4629      	mov	r1, r5
 8020446:	eb63 0301 	sbc.w	r3, r3, r1
 802044a:	617b      	str	r3, [r7, #20]
 802044c:	f04f 0200 	mov.w	r2, #0
 8020450:	f04f 0300 	mov.w	r3, #0
 8020454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8020458:	4659      	mov	r1, fp
 802045a:	018b      	lsls	r3, r1, #6
 802045c:	4651      	mov	r1, sl
 802045e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8020462:	4651      	mov	r1, sl
 8020464:	018a      	lsls	r2, r1, #6
 8020466:	4651      	mov	r1, sl
 8020468:	ebb2 0801 	subs.w	r8, r2, r1
 802046c:	4659      	mov	r1, fp
 802046e:	eb63 0901 	sbc.w	r9, r3, r1
 8020472:	f04f 0200 	mov.w	r2, #0
 8020476:	f04f 0300 	mov.w	r3, #0
 802047a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802047e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8020482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8020486:	4690      	mov	r8, r2
 8020488:	4699      	mov	r9, r3
 802048a:	4623      	mov	r3, r4
 802048c:	eb18 0303 	adds.w	r3, r8, r3
 8020490:	60bb      	str	r3, [r7, #8]
 8020492:	462b      	mov	r3, r5
 8020494:	eb49 0303 	adc.w	r3, r9, r3
 8020498:	60fb      	str	r3, [r7, #12]
 802049a:	f04f 0200 	mov.w	r2, #0
 802049e:	f04f 0300 	mov.w	r3, #0
 80204a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80204a6:	4629      	mov	r1, r5
 80204a8:	024b      	lsls	r3, r1, #9
 80204aa:	4621      	mov	r1, r4
 80204ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80204b0:	4621      	mov	r1, r4
 80204b2:	024a      	lsls	r2, r1, #9
 80204b4:	4610      	mov	r0, r2
 80204b6:	4619      	mov	r1, r3
 80204b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80204ba:	2200      	movs	r2, #0
 80204bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80204be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80204c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80204c4:	f7e0 fcdc 	bl	8000e80 <__aeabi_uldivmod>
 80204c8:	4602      	mov	r2, r0
 80204ca:	460b      	mov	r3, r1
 80204cc:	4613      	mov	r3, r2
 80204ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80204d0:	e058      	b.n	8020584 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80204d2:	4b38      	ldr	r3, [pc, #224]	; (80205b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80204d4:	685b      	ldr	r3, [r3, #4]
 80204d6:	099b      	lsrs	r3, r3, #6
 80204d8:	2200      	movs	r2, #0
 80204da:	4618      	mov	r0, r3
 80204dc:	4611      	mov	r1, r2
 80204de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80204e2:	623b      	str	r3, [r7, #32]
 80204e4:	2300      	movs	r3, #0
 80204e6:	627b      	str	r3, [r7, #36]	; 0x24
 80204e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80204ec:	4642      	mov	r2, r8
 80204ee:	464b      	mov	r3, r9
 80204f0:	f04f 0000 	mov.w	r0, #0
 80204f4:	f04f 0100 	mov.w	r1, #0
 80204f8:	0159      	lsls	r1, r3, #5
 80204fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80204fe:	0150      	lsls	r0, r2, #5
 8020500:	4602      	mov	r2, r0
 8020502:	460b      	mov	r3, r1
 8020504:	4641      	mov	r1, r8
 8020506:	ebb2 0a01 	subs.w	sl, r2, r1
 802050a:	4649      	mov	r1, r9
 802050c:	eb63 0b01 	sbc.w	fp, r3, r1
 8020510:	f04f 0200 	mov.w	r2, #0
 8020514:	f04f 0300 	mov.w	r3, #0
 8020518:	ea4f 138b 	mov.w	r3, fp, lsl #6
 802051c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8020520:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8020524:	ebb2 040a 	subs.w	r4, r2, sl
 8020528:	eb63 050b 	sbc.w	r5, r3, fp
 802052c:	f04f 0200 	mov.w	r2, #0
 8020530:	f04f 0300 	mov.w	r3, #0
 8020534:	00eb      	lsls	r3, r5, #3
 8020536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802053a:	00e2      	lsls	r2, r4, #3
 802053c:	4614      	mov	r4, r2
 802053e:	461d      	mov	r5, r3
 8020540:	4643      	mov	r3, r8
 8020542:	18e3      	adds	r3, r4, r3
 8020544:	603b      	str	r3, [r7, #0]
 8020546:	464b      	mov	r3, r9
 8020548:	eb45 0303 	adc.w	r3, r5, r3
 802054c:	607b      	str	r3, [r7, #4]
 802054e:	f04f 0200 	mov.w	r2, #0
 8020552:	f04f 0300 	mov.w	r3, #0
 8020556:	e9d7 4500 	ldrd	r4, r5, [r7]
 802055a:	4629      	mov	r1, r5
 802055c:	028b      	lsls	r3, r1, #10
 802055e:	4621      	mov	r1, r4
 8020560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8020564:	4621      	mov	r1, r4
 8020566:	028a      	lsls	r2, r1, #10
 8020568:	4610      	mov	r0, r2
 802056a:	4619      	mov	r1, r3
 802056c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802056e:	2200      	movs	r2, #0
 8020570:	61bb      	str	r3, [r7, #24]
 8020572:	61fa      	str	r2, [r7, #28]
 8020574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020578:	f7e0 fc82 	bl	8000e80 <__aeabi_uldivmod>
 802057c:	4602      	mov	r2, r0
 802057e:	460b      	mov	r3, r1
 8020580:	4613      	mov	r3, r2
 8020582:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8020584:	4b0b      	ldr	r3, [pc, #44]	; (80205b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8020586:	685b      	ldr	r3, [r3, #4]
 8020588:	0c1b      	lsrs	r3, r3, #16
 802058a:	f003 0303 	and.w	r3, r3, #3
 802058e:	3301      	adds	r3, #1
 8020590:	005b      	lsls	r3, r3, #1
 8020592:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8020594:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8020596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020598:	fbb2 f3f3 	udiv	r3, r2, r3
 802059c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 802059e:	e002      	b.n	80205a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80205a0:	4b05      	ldr	r3, [pc, #20]	; (80205b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80205a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80205a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80205a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80205a8:	4618      	mov	r0, r3
 80205aa:	3750      	adds	r7, #80	; 0x50
 80205ac:	46bd      	mov	sp, r7
 80205ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80205b2:	bf00      	nop
 80205b4:	40023800 	.word	0x40023800
 80205b8:	00f42400 	.word	0x00f42400
 80205bc:	007a1200 	.word	0x007a1200

080205c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80205c0:	b480      	push	{r7}
 80205c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80205c4:	4b03      	ldr	r3, [pc, #12]	; (80205d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80205c6:	681b      	ldr	r3, [r3, #0]
}
 80205c8:	4618      	mov	r0, r3
 80205ca:	46bd      	mov	sp, r7
 80205cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205d0:	4770      	bx	lr
 80205d2:	bf00      	nop
 80205d4:	20000020 	.word	0x20000020

080205d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80205d8:	b580      	push	{r7, lr}
 80205da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80205dc:	f7ff fff0 	bl	80205c0 <HAL_RCC_GetHCLKFreq>
 80205e0:	4602      	mov	r2, r0
 80205e2:	4b05      	ldr	r3, [pc, #20]	; (80205f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80205e4:	689b      	ldr	r3, [r3, #8]
 80205e6:	0a9b      	lsrs	r3, r3, #10
 80205e8:	f003 0307 	and.w	r3, r3, #7
 80205ec:	4903      	ldr	r1, [pc, #12]	; (80205fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80205ee:	5ccb      	ldrb	r3, [r1, r3]
 80205f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80205f4:	4618      	mov	r0, r3
 80205f6:	bd80      	pop	{r7, pc}
 80205f8:	40023800 	.word	0x40023800
 80205fc:	0802799c 	.word	0x0802799c

08020600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8020600:	b580      	push	{r7, lr}
 8020602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8020604:	f7ff ffdc 	bl	80205c0 <HAL_RCC_GetHCLKFreq>
 8020608:	4602      	mov	r2, r0
 802060a:	4b05      	ldr	r3, [pc, #20]	; (8020620 <HAL_RCC_GetPCLK2Freq+0x20>)
 802060c:	689b      	ldr	r3, [r3, #8]
 802060e:	0b5b      	lsrs	r3, r3, #13
 8020610:	f003 0307 	and.w	r3, r3, #7
 8020614:	4903      	ldr	r1, [pc, #12]	; (8020624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8020616:	5ccb      	ldrb	r3, [r1, r3]
 8020618:	fa22 f303 	lsr.w	r3, r2, r3
}
 802061c:	4618      	mov	r0, r3
 802061e:	bd80      	pop	{r7, pc}
 8020620:	40023800 	.word	0x40023800
 8020624:	0802799c 	.word	0x0802799c

08020628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8020628:	b580      	push	{r7, lr}
 802062a:	b082      	sub	sp, #8
 802062c:	af00      	add	r7, sp, #0
 802062e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020630:	687b      	ldr	r3, [r7, #4]
 8020632:	2b00      	cmp	r3, #0
 8020634:	d101      	bne.n	802063a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8020636:	2301      	movs	r3, #1
 8020638:	e041      	b.n	80206be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802063a:	687b      	ldr	r3, [r7, #4]
 802063c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020640:	b2db      	uxtb	r3, r3
 8020642:	2b00      	cmp	r3, #0
 8020644:	d106      	bne.n	8020654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020646:	687b      	ldr	r3, [r7, #4]
 8020648:	2200      	movs	r2, #0
 802064a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802064e:	6878      	ldr	r0, [r7, #4]
 8020650:	f7e2 ffa2 	bl	8003598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020654:	687b      	ldr	r3, [r7, #4]
 8020656:	2202      	movs	r2, #2
 8020658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802065c:	687b      	ldr	r3, [r7, #4]
 802065e:	681a      	ldr	r2, [r3, #0]
 8020660:	687b      	ldr	r3, [r7, #4]
 8020662:	3304      	adds	r3, #4
 8020664:	4619      	mov	r1, r3
 8020666:	4610      	mov	r0, r2
 8020668:	f000 fd14 	bl	8021094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802066c:	687b      	ldr	r3, [r7, #4]
 802066e:	2201      	movs	r2, #1
 8020670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020674:	687b      	ldr	r3, [r7, #4]
 8020676:	2201      	movs	r2, #1
 8020678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802067c:	687b      	ldr	r3, [r7, #4]
 802067e:	2201      	movs	r2, #1
 8020680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020684:	687b      	ldr	r3, [r7, #4]
 8020686:	2201      	movs	r2, #1
 8020688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802068c:	687b      	ldr	r3, [r7, #4]
 802068e:	2201      	movs	r2, #1
 8020690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020694:	687b      	ldr	r3, [r7, #4]
 8020696:	2201      	movs	r2, #1
 8020698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802069c:	687b      	ldr	r3, [r7, #4]
 802069e:	2201      	movs	r2, #1
 80206a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80206a4:	687b      	ldr	r3, [r7, #4]
 80206a6:	2201      	movs	r2, #1
 80206a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80206ac:	687b      	ldr	r3, [r7, #4]
 80206ae:	2201      	movs	r2, #1
 80206b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	2201      	movs	r2, #1
 80206b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80206bc:	2300      	movs	r3, #0
}
 80206be:	4618      	mov	r0, r3
 80206c0:	3708      	adds	r7, #8
 80206c2:	46bd      	mov	sp, r7
 80206c4:	bd80      	pop	{r7, pc}

080206c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80206c6:	b580      	push	{r7, lr}
 80206c8:	b082      	sub	sp, #8
 80206ca:	af00      	add	r7, sp, #0
 80206cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80206ce:	687b      	ldr	r3, [r7, #4]
 80206d0:	2b00      	cmp	r3, #0
 80206d2:	d101      	bne.n	80206d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80206d4:	2301      	movs	r3, #1
 80206d6:	e041      	b.n	802075c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80206d8:	687b      	ldr	r3, [r7, #4]
 80206da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80206de:	b2db      	uxtb	r3, r3
 80206e0:	2b00      	cmp	r3, #0
 80206e2:	d106      	bne.n	80206f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80206e4:	687b      	ldr	r3, [r7, #4]
 80206e6:	2200      	movs	r2, #0
 80206e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80206ec:	6878      	ldr	r0, [r7, #4]
 80206ee:	f000 f839 	bl	8020764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	2202      	movs	r2, #2
 80206f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80206fa:	687b      	ldr	r3, [r7, #4]
 80206fc:	681a      	ldr	r2, [r3, #0]
 80206fe:	687b      	ldr	r3, [r7, #4]
 8020700:	3304      	adds	r3, #4
 8020702:	4619      	mov	r1, r3
 8020704:	4610      	mov	r0, r2
 8020706:	f000 fcc5 	bl	8021094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802070a:	687b      	ldr	r3, [r7, #4]
 802070c:	2201      	movs	r2, #1
 802070e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020712:	687b      	ldr	r3, [r7, #4]
 8020714:	2201      	movs	r2, #1
 8020716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802071a:	687b      	ldr	r3, [r7, #4]
 802071c:	2201      	movs	r2, #1
 802071e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020722:	687b      	ldr	r3, [r7, #4]
 8020724:	2201      	movs	r2, #1
 8020726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802072a:	687b      	ldr	r3, [r7, #4]
 802072c:	2201      	movs	r2, #1
 802072e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020732:	687b      	ldr	r3, [r7, #4]
 8020734:	2201      	movs	r2, #1
 8020736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802073a:	687b      	ldr	r3, [r7, #4]
 802073c:	2201      	movs	r2, #1
 802073e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8020742:	687b      	ldr	r3, [r7, #4]
 8020744:	2201      	movs	r2, #1
 8020746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802074a:	687b      	ldr	r3, [r7, #4]
 802074c:	2201      	movs	r2, #1
 802074e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020752:	687b      	ldr	r3, [r7, #4]
 8020754:	2201      	movs	r2, #1
 8020756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802075a:	2300      	movs	r3, #0
}
 802075c:	4618      	mov	r0, r3
 802075e:	3708      	adds	r7, #8
 8020760:	46bd      	mov	sp, r7
 8020762:	bd80      	pop	{r7, pc}

08020764 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8020764:	b480      	push	{r7}
 8020766:	b083      	sub	sp, #12
 8020768:	af00      	add	r7, sp, #0
 802076a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 802076c:	bf00      	nop
 802076e:	370c      	adds	r7, #12
 8020770:	46bd      	mov	sp, r7
 8020772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020776:	4770      	bx	lr

08020778 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8020778:	b580      	push	{r7, lr}
 802077a:	b084      	sub	sp, #16
 802077c:	af00      	add	r7, sp, #0
 802077e:	6078      	str	r0, [r7, #4]
 8020780:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8020782:	683b      	ldr	r3, [r7, #0]
 8020784:	2b00      	cmp	r3, #0
 8020786:	d109      	bne.n	802079c <HAL_TIM_PWM_Start+0x24>
 8020788:	687b      	ldr	r3, [r7, #4]
 802078a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802078e:	b2db      	uxtb	r3, r3
 8020790:	2b01      	cmp	r3, #1
 8020792:	bf14      	ite	ne
 8020794:	2301      	movne	r3, #1
 8020796:	2300      	moveq	r3, #0
 8020798:	b2db      	uxtb	r3, r3
 802079a:	e022      	b.n	80207e2 <HAL_TIM_PWM_Start+0x6a>
 802079c:	683b      	ldr	r3, [r7, #0]
 802079e:	2b04      	cmp	r3, #4
 80207a0:	d109      	bne.n	80207b6 <HAL_TIM_PWM_Start+0x3e>
 80207a2:	687b      	ldr	r3, [r7, #4]
 80207a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80207a8:	b2db      	uxtb	r3, r3
 80207aa:	2b01      	cmp	r3, #1
 80207ac:	bf14      	ite	ne
 80207ae:	2301      	movne	r3, #1
 80207b0:	2300      	moveq	r3, #0
 80207b2:	b2db      	uxtb	r3, r3
 80207b4:	e015      	b.n	80207e2 <HAL_TIM_PWM_Start+0x6a>
 80207b6:	683b      	ldr	r3, [r7, #0]
 80207b8:	2b08      	cmp	r3, #8
 80207ba:	d109      	bne.n	80207d0 <HAL_TIM_PWM_Start+0x58>
 80207bc:	687b      	ldr	r3, [r7, #4]
 80207be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80207c2:	b2db      	uxtb	r3, r3
 80207c4:	2b01      	cmp	r3, #1
 80207c6:	bf14      	ite	ne
 80207c8:	2301      	movne	r3, #1
 80207ca:	2300      	moveq	r3, #0
 80207cc:	b2db      	uxtb	r3, r3
 80207ce:	e008      	b.n	80207e2 <HAL_TIM_PWM_Start+0x6a>
 80207d0:	687b      	ldr	r3, [r7, #4]
 80207d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80207d6:	b2db      	uxtb	r3, r3
 80207d8:	2b01      	cmp	r3, #1
 80207da:	bf14      	ite	ne
 80207dc:	2301      	movne	r3, #1
 80207de:	2300      	moveq	r3, #0
 80207e0:	b2db      	uxtb	r3, r3
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d001      	beq.n	80207ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80207e6:	2301      	movs	r3, #1
 80207e8:	e068      	b.n	80208bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80207ea:	683b      	ldr	r3, [r7, #0]
 80207ec:	2b00      	cmp	r3, #0
 80207ee:	d104      	bne.n	80207fa <HAL_TIM_PWM_Start+0x82>
 80207f0:	687b      	ldr	r3, [r7, #4]
 80207f2:	2202      	movs	r2, #2
 80207f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80207f8:	e013      	b.n	8020822 <HAL_TIM_PWM_Start+0xaa>
 80207fa:	683b      	ldr	r3, [r7, #0]
 80207fc:	2b04      	cmp	r3, #4
 80207fe:	d104      	bne.n	802080a <HAL_TIM_PWM_Start+0x92>
 8020800:	687b      	ldr	r3, [r7, #4]
 8020802:	2202      	movs	r2, #2
 8020804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020808:	e00b      	b.n	8020822 <HAL_TIM_PWM_Start+0xaa>
 802080a:	683b      	ldr	r3, [r7, #0]
 802080c:	2b08      	cmp	r3, #8
 802080e:	d104      	bne.n	802081a <HAL_TIM_PWM_Start+0xa2>
 8020810:	687b      	ldr	r3, [r7, #4]
 8020812:	2202      	movs	r2, #2
 8020814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020818:	e003      	b.n	8020822 <HAL_TIM_PWM_Start+0xaa>
 802081a:	687b      	ldr	r3, [r7, #4]
 802081c:	2202      	movs	r2, #2
 802081e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8020822:	687b      	ldr	r3, [r7, #4]
 8020824:	681b      	ldr	r3, [r3, #0]
 8020826:	2201      	movs	r2, #1
 8020828:	6839      	ldr	r1, [r7, #0]
 802082a:	4618      	mov	r0, r3
 802082c:	f000 fed8 	bl	80215e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8020830:	687b      	ldr	r3, [r7, #4]
 8020832:	681b      	ldr	r3, [r3, #0]
 8020834:	4a23      	ldr	r2, [pc, #140]	; (80208c4 <HAL_TIM_PWM_Start+0x14c>)
 8020836:	4293      	cmp	r3, r2
 8020838:	d107      	bne.n	802084a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 802083a:	687b      	ldr	r3, [r7, #4]
 802083c:	681b      	ldr	r3, [r3, #0]
 802083e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020840:	687b      	ldr	r3, [r7, #4]
 8020842:	681b      	ldr	r3, [r3, #0]
 8020844:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8020848:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	681b      	ldr	r3, [r3, #0]
 802084e:	4a1d      	ldr	r2, [pc, #116]	; (80208c4 <HAL_TIM_PWM_Start+0x14c>)
 8020850:	4293      	cmp	r3, r2
 8020852:	d018      	beq.n	8020886 <HAL_TIM_PWM_Start+0x10e>
 8020854:	687b      	ldr	r3, [r7, #4]
 8020856:	681b      	ldr	r3, [r3, #0]
 8020858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802085c:	d013      	beq.n	8020886 <HAL_TIM_PWM_Start+0x10e>
 802085e:	687b      	ldr	r3, [r7, #4]
 8020860:	681b      	ldr	r3, [r3, #0]
 8020862:	4a19      	ldr	r2, [pc, #100]	; (80208c8 <HAL_TIM_PWM_Start+0x150>)
 8020864:	4293      	cmp	r3, r2
 8020866:	d00e      	beq.n	8020886 <HAL_TIM_PWM_Start+0x10e>
 8020868:	687b      	ldr	r3, [r7, #4]
 802086a:	681b      	ldr	r3, [r3, #0]
 802086c:	4a17      	ldr	r2, [pc, #92]	; (80208cc <HAL_TIM_PWM_Start+0x154>)
 802086e:	4293      	cmp	r3, r2
 8020870:	d009      	beq.n	8020886 <HAL_TIM_PWM_Start+0x10e>
 8020872:	687b      	ldr	r3, [r7, #4]
 8020874:	681b      	ldr	r3, [r3, #0]
 8020876:	4a16      	ldr	r2, [pc, #88]	; (80208d0 <HAL_TIM_PWM_Start+0x158>)
 8020878:	4293      	cmp	r3, r2
 802087a:	d004      	beq.n	8020886 <HAL_TIM_PWM_Start+0x10e>
 802087c:	687b      	ldr	r3, [r7, #4]
 802087e:	681b      	ldr	r3, [r3, #0]
 8020880:	4a14      	ldr	r2, [pc, #80]	; (80208d4 <HAL_TIM_PWM_Start+0x15c>)
 8020882:	4293      	cmp	r3, r2
 8020884:	d111      	bne.n	80208aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8020886:	687b      	ldr	r3, [r7, #4]
 8020888:	681b      	ldr	r3, [r3, #0]
 802088a:	689b      	ldr	r3, [r3, #8]
 802088c:	f003 0307 	and.w	r3, r3, #7
 8020890:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020892:	68fb      	ldr	r3, [r7, #12]
 8020894:	2b06      	cmp	r3, #6
 8020896:	d010      	beq.n	80208ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8020898:	687b      	ldr	r3, [r7, #4]
 802089a:	681b      	ldr	r3, [r3, #0]
 802089c:	681a      	ldr	r2, [r3, #0]
 802089e:	687b      	ldr	r3, [r7, #4]
 80208a0:	681b      	ldr	r3, [r3, #0]
 80208a2:	f042 0201 	orr.w	r2, r2, #1
 80208a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80208a8:	e007      	b.n	80208ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80208aa:	687b      	ldr	r3, [r7, #4]
 80208ac:	681b      	ldr	r3, [r3, #0]
 80208ae:	681a      	ldr	r2, [r3, #0]
 80208b0:	687b      	ldr	r3, [r7, #4]
 80208b2:	681b      	ldr	r3, [r3, #0]
 80208b4:	f042 0201 	orr.w	r2, r2, #1
 80208b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80208ba:	2300      	movs	r3, #0
}
 80208bc:	4618      	mov	r0, r3
 80208be:	3710      	adds	r7, #16
 80208c0:	46bd      	mov	sp, r7
 80208c2:	bd80      	pop	{r7, pc}
 80208c4:	40010000 	.word	0x40010000
 80208c8:	40000400 	.word	0x40000400
 80208cc:	40000800 	.word	0x40000800
 80208d0:	40000c00 	.word	0x40000c00
 80208d4:	40014000 	.word	0x40014000

080208d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80208d8:	b580      	push	{r7, lr}
 80208da:	b084      	sub	sp, #16
 80208dc:	af00      	add	r7, sp, #0
 80208de:	6078      	str	r0, [r7, #4]
 80208e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80208e2:	2300      	movs	r3, #0
 80208e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80208e6:	683b      	ldr	r3, [r7, #0]
 80208e8:	2b00      	cmp	r3, #0
 80208ea:	d104      	bne.n	80208f6 <HAL_TIM_IC_Start_IT+0x1e>
 80208ec:	687b      	ldr	r3, [r7, #4]
 80208ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80208f2:	b2db      	uxtb	r3, r3
 80208f4:	e013      	b.n	802091e <HAL_TIM_IC_Start_IT+0x46>
 80208f6:	683b      	ldr	r3, [r7, #0]
 80208f8:	2b04      	cmp	r3, #4
 80208fa:	d104      	bne.n	8020906 <HAL_TIM_IC_Start_IT+0x2e>
 80208fc:	687b      	ldr	r3, [r7, #4]
 80208fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8020902:	b2db      	uxtb	r3, r3
 8020904:	e00b      	b.n	802091e <HAL_TIM_IC_Start_IT+0x46>
 8020906:	683b      	ldr	r3, [r7, #0]
 8020908:	2b08      	cmp	r3, #8
 802090a:	d104      	bne.n	8020916 <HAL_TIM_IC_Start_IT+0x3e>
 802090c:	687b      	ldr	r3, [r7, #4]
 802090e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8020912:	b2db      	uxtb	r3, r3
 8020914:	e003      	b.n	802091e <HAL_TIM_IC_Start_IT+0x46>
 8020916:	687b      	ldr	r3, [r7, #4]
 8020918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802091c:	b2db      	uxtb	r3, r3
 802091e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8020920:	683b      	ldr	r3, [r7, #0]
 8020922:	2b00      	cmp	r3, #0
 8020924:	d104      	bne.n	8020930 <HAL_TIM_IC_Start_IT+0x58>
 8020926:	687b      	ldr	r3, [r7, #4]
 8020928:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802092c:	b2db      	uxtb	r3, r3
 802092e:	e013      	b.n	8020958 <HAL_TIM_IC_Start_IT+0x80>
 8020930:	683b      	ldr	r3, [r7, #0]
 8020932:	2b04      	cmp	r3, #4
 8020934:	d104      	bne.n	8020940 <HAL_TIM_IC_Start_IT+0x68>
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802093c:	b2db      	uxtb	r3, r3
 802093e:	e00b      	b.n	8020958 <HAL_TIM_IC_Start_IT+0x80>
 8020940:	683b      	ldr	r3, [r7, #0]
 8020942:	2b08      	cmp	r3, #8
 8020944:	d104      	bne.n	8020950 <HAL_TIM_IC_Start_IT+0x78>
 8020946:	687b      	ldr	r3, [r7, #4]
 8020948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802094c:	b2db      	uxtb	r3, r3
 802094e:	e003      	b.n	8020958 <HAL_TIM_IC_Start_IT+0x80>
 8020950:	687b      	ldr	r3, [r7, #4]
 8020952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020956:	b2db      	uxtb	r3, r3
 8020958:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 802095a:	7bbb      	ldrb	r3, [r7, #14]
 802095c:	2b01      	cmp	r3, #1
 802095e:	d102      	bne.n	8020966 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8020960:	7b7b      	ldrb	r3, [r7, #13]
 8020962:	2b01      	cmp	r3, #1
 8020964:	d001      	beq.n	802096a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8020966:	2301      	movs	r3, #1
 8020968:	e0c2      	b.n	8020af0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 802096a:	683b      	ldr	r3, [r7, #0]
 802096c:	2b00      	cmp	r3, #0
 802096e:	d104      	bne.n	802097a <HAL_TIM_IC_Start_IT+0xa2>
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	2202      	movs	r2, #2
 8020974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020978:	e013      	b.n	80209a2 <HAL_TIM_IC_Start_IT+0xca>
 802097a:	683b      	ldr	r3, [r7, #0]
 802097c:	2b04      	cmp	r3, #4
 802097e:	d104      	bne.n	802098a <HAL_TIM_IC_Start_IT+0xb2>
 8020980:	687b      	ldr	r3, [r7, #4]
 8020982:	2202      	movs	r2, #2
 8020984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020988:	e00b      	b.n	80209a2 <HAL_TIM_IC_Start_IT+0xca>
 802098a:	683b      	ldr	r3, [r7, #0]
 802098c:	2b08      	cmp	r3, #8
 802098e:	d104      	bne.n	802099a <HAL_TIM_IC_Start_IT+0xc2>
 8020990:	687b      	ldr	r3, [r7, #4]
 8020992:	2202      	movs	r2, #2
 8020994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020998:	e003      	b.n	80209a2 <HAL_TIM_IC_Start_IT+0xca>
 802099a:	687b      	ldr	r3, [r7, #4]
 802099c:	2202      	movs	r2, #2
 802099e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80209a2:	683b      	ldr	r3, [r7, #0]
 80209a4:	2b00      	cmp	r3, #0
 80209a6:	d104      	bne.n	80209b2 <HAL_TIM_IC_Start_IT+0xda>
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	2202      	movs	r2, #2
 80209ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80209b0:	e013      	b.n	80209da <HAL_TIM_IC_Start_IT+0x102>
 80209b2:	683b      	ldr	r3, [r7, #0]
 80209b4:	2b04      	cmp	r3, #4
 80209b6:	d104      	bne.n	80209c2 <HAL_TIM_IC_Start_IT+0xea>
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	2202      	movs	r2, #2
 80209bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80209c0:	e00b      	b.n	80209da <HAL_TIM_IC_Start_IT+0x102>
 80209c2:	683b      	ldr	r3, [r7, #0]
 80209c4:	2b08      	cmp	r3, #8
 80209c6:	d104      	bne.n	80209d2 <HAL_TIM_IC_Start_IT+0xfa>
 80209c8:	687b      	ldr	r3, [r7, #4]
 80209ca:	2202      	movs	r2, #2
 80209cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80209d0:	e003      	b.n	80209da <HAL_TIM_IC_Start_IT+0x102>
 80209d2:	687b      	ldr	r3, [r7, #4]
 80209d4:	2202      	movs	r2, #2
 80209d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80209da:	683b      	ldr	r3, [r7, #0]
 80209dc:	2b0c      	cmp	r3, #12
 80209de:	d841      	bhi.n	8020a64 <HAL_TIM_IC_Start_IT+0x18c>
 80209e0:	a201      	add	r2, pc, #4	; (adr r2, 80209e8 <HAL_TIM_IC_Start_IT+0x110>)
 80209e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80209e6:	bf00      	nop
 80209e8:	08020a1d 	.word	0x08020a1d
 80209ec:	08020a65 	.word	0x08020a65
 80209f0:	08020a65 	.word	0x08020a65
 80209f4:	08020a65 	.word	0x08020a65
 80209f8:	08020a2f 	.word	0x08020a2f
 80209fc:	08020a65 	.word	0x08020a65
 8020a00:	08020a65 	.word	0x08020a65
 8020a04:	08020a65 	.word	0x08020a65
 8020a08:	08020a41 	.word	0x08020a41
 8020a0c:	08020a65 	.word	0x08020a65
 8020a10:	08020a65 	.word	0x08020a65
 8020a14:	08020a65 	.word	0x08020a65
 8020a18:	08020a53 	.word	0x08020a53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8020a1c:	687b      	ldr	r3, [r7, #4]
 8020a1e:	681b      	ldr	r3, [r3, #0]
 8020a20:	68da      	ldr	r2, [r3, #12]
 8020a22:	687b      	ldr	r3, [r7, #4]
 8020a24:	681b      	ldr	r3, [r3, #0]
 8020a26:	f042 0202 	orr.w	r2, r2, #2
 8020a2a:	60da      	str	r2, [r3, #12]
      break;
 8020a2c:	e01d      	b.n	8020a6a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8020a2e:	687b      	ldr	r3, [r7, #4]
 8020a30:	681b      	ldr	r3, [r3, #0]
 8020a32:	68da      	ldr	r2, [r3, #12]
 8020a34:	687b      	ldr	r3, [r7, #4]
 8020a36:	681b      	ldr	r3, [r3, #0]
 8020a38:	f042 0204 	orr.w	r2, r2, #4
 8020a3c:	60da      	str	r2, [r3, #12]
      break;
 8020a3e:	e014      	b.n	8020a6a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8020a40:	687b      	ldr	r3, [r7, #4]
 8020a42:	681b      	ldr	r3, [r3, #0]
 8020a44:	68da      	ldr	r2, [r3, #12]
 8020a46:	687b      	ldr	r3, [r7, #4]
 8020a48:	681b      	ldr	r3, [r3, #0]
 8020a4a:	f042 0208 	orr.w	r2, r2, #8
 8020a4e:	60da      	str	r2, [r3, #12]
      break;
 8020a50:	e00b      	b.n	8020a6a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8020a52:	687b      	ldr	r3, [r7, #4]
 8020a54:	681b      	ldr	r3, [r3, #0]
 8020a56:	68da      	ldr	r2, [r3, #12]
 8020a58:	687b      	ldr	r3, [r7, #4]
 8020a5a:	681b      	ldr	r3, [r3, #0]
 8020a5c:	f042 0210 	orr.w	r2, r2, #16
 8020a60:	60da      	str	r2, [r3, #12]
      break;
 8020a62:	e002      	b.n	8020a6a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8020a64:	2301      	movs	r3, #1
 8020a66:	73fb      	strb	r3, [r7, #15]
      break;
 8020a68:	bf00      	nop
  }

  if (status == HAL_OK)
 8020a6a:	7bfb      	ldrb	r3, [r7, #15]
 8020a6c:	2b00      	cmp	r3, #0
 8020a6e:	d13e      	bne.n	8020aee <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8020a70:	687b      	ldr	r3, [r7, #4]
 8020a72:	681b      	ldr	r3, [r3, #0]
 8020a74:	2201      	movs	r2, #1
 8020a76:	6839      	ldr	r1, [r7, #0]
 8020a78:	4618      	mov	r0, r3
 8020a7a:	f000 fdb1 	bl	80215e0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020a7e:	687b      	ldr	r3, [r7, #4]
 8020a80:	681b      	ldr	r3, [r3, #0]
 8020a82:	4a1d      	ldr	r2, [pc, #116]	; (8020af8 <HAL_TIM_IC_Start_IT+0x220>)
 8020a84:	4293      	cmp	r3, r2
 8020a86:	d018      	beq.n	8020aba <HAL_TIM_IC_Start_IT+0x1e2>
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	681b      	ldr	r3, [r3, #0]
 8020a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020a90:	d013      	beq.n	8020aba <HAL_TIM_IC_Start_IT+0x1e2>
 8020a92:	687b      	ldr	r3, [r7, #4]
 8020a94:	681b      	ldr	r3, [r3, #0]
 8020a96:	4a19      	ldr	r2, [pc, #100]	; (8020afc <HAL_TIM_IC_Start_IT+0x224>)
 8020a98:	4293      	cmp	r3, r2
 8020a9a:	d00e      	beq.n	8020aba <HAL_TIM_IC_Start_IT+0x1e2>
 8020a9c:	687b      	ldr	r3, [r7, #4]
 8020a9e:	681b      	ldr	r3, [r3, #0]
 8020aa0:	4a17      	ldr	r2, [pc, #92]	; (8020b00 <HAL_TIM_IC_Start_IT+0x228>)
 8020aa2:	4293      	cmp	r3, r2
 8020aa4:	d009      	beq.n	8020aba <HAL_TIM_IC_Start_IT+0x1e2>
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	681b      	ldr	r3, [r3, #0]
 8020aaa:	4a16      	ldr	r2, [pc, #88]	; (8020b04 <HAL_TIM_IC_Start_IT+0x22c>)
 8020aac:	4293      	cmp	r3, r2
 8020aae:	d004      	beq.n	8020aba <HAL_TIM_IC_Start_IT+0x1e2>
 8020ab0:	687b      	ldr	r3, [r7, #4]
 8020ab2:	681b      	ldr	r3, [r3, #0]
 8020ab4:	4a14      	ldr	r2, [pc, #80]	; (8020b08 <HAL_TIM_IC_Start_IT+0x230>)
 8020ab6:	4293      	cmp	r3, r2
 8020ab8:	d111      	bne.n	8020ade <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	681b      	ldr	r3, [r3, #0]
 8020abe:	689b      	ldr	r3, [r3, #8]
 8020ac0:	f003 0307 	and.w	r3, r3, #7
 8020ac4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020ac6:	68bb      	ldr	r3, [r7, #8]
 8020ac8:	2b06      	cmp	r3, #6
 8020aca:	d010      	beq.n	8020aee <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8020acc:	687b      	ldr	r3, [r7, #4]
 8020ace:	681b      	ldr	r3, [r3, #0]
 8020ad0:	681a      	ldr	r2, [r3, #0]
 8020ad2:	687b      	ldr	r3, [r7, #4]
 8020ad4:	681b      	ldr	r3, [r3, #0]
 8020ad6:	f042 0201 	orr.w	r2, r2, #1
 8020ada:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020adc:	e007      	b.n	8020aee <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8020ade:	687b      	ldr	r3, [r7, #4]
 8020ae0:	681b      	ldr	r3, [r3, #0]
 8020ae2:	681a      	ldr	r2, [r3, #0]
 8020ae4:	687b      	ldr	r3, [r7, #4]
 8020ae6:	681b      	ldr	r3, [r3, #0]
 8020ae8:	f042 0201 	orr.w	r2, r2, #1
 8020aec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8020aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8020af0:	4618      	mov	r0, r3
 8020af2:	3710      	adds	r7, #16
 8020af4:	46bd      	mov	sp, r7
 8020af6:	bd80      	pop	{r7, pc}
 8020af8:	40010000 	.word	0x40010000
 8020afc:	40000400 	.word	0x40000400
 8020b00:	40000800 	.word	0x40000800
 8020b04:	40000c00 	.word	0x40000c00
 8020b08:	40014000 	.word	0x40014000

08020b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8020b0c:	b580      	push	{r7, lr}
 8020b0e:	b082      	sub	sp, #8
 8020b10:	af00      	add	r7, sp, #0
 8020b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8020b14:	687b      	ldr	r3, [r7, #4]
 8020b16:	681b      	ldr	r3, [r3, #0]
 8020b18:	691b      	ldr	r3, [r3, #16]
 8020b1a:	f003 0302 	and.w	r3, r3, #2
 8020b1e:	2b02      	cmp	r3, #2
 8020b20:	d122      	bne.n	8020b68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8020b22:	687b      	ldr	r3, [r7, #4]
 8020b24:	681b      	ldr	r3, [r3, #0]
 8020b26:	68db      	ldr	r3, [r3, #12]
 8020b28:	f003 0302 	and.w	r3, r3, #2
 8020b2c:	2b02      	cmp	r3, #2
 8020b2e:	d11b      	bne.n	8020b68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8020b30:	687b      	ldr	r3, [r7, #4]
 8020b32:	681b      	ldr	r3, [r3, #0]
 8020b34:	f06f 0202 	mvn.w	r2, #2
 8020b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8020b3a:	687b      	ldr	r3, [r7, #4]
 8020b3c:	2201      	movs	r2, #1
 8020b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8020b40:	687b      	ldr	r3, [r7, #4]
 8020b42:	681b      	ldr	r3, [r3, #0]
 8020b44:	699b      	ldr	r3, [r3, #24]
 8020b46:	f003 0303 	and.w	r3, r3, #3
 8020b4a:	2b00      	cmp	r3, #0
 8020b4c:	d003      	beq.n	8020b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8020b4e:	6878      	ldr	r0, [r7, #4]
 8020b50:	f000 fa81 	bl	8021056 <HAL_TIM_IC_CaptureCallback>
 8020b54:	e005      	b.n	8020b62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8020b56:	6878      	ldr	r0, [r7, #4]
 8020b58:	f000 fa73 	bl	8021042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020b5c:	6878      	ldr	r0, [r7, #4]
 8020b5e:	f000 fa84 	bl	802106a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020b62:	687b      	ldr	r3, [r7, #4]
 8020b64:	2200      	movs	r2, #0
 8020b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8020b68:	687b      	ldr	r3, [r7, #4]
 8020b6a:	681b      	ldr	r3, [r3, #0]
 8020b6c:	691b      	ldr	r3, [r3, #16]
 8020b6e:	f003 0304 	and.w	r3, r3, #4
 8020b72:	2b04      	cmp	r3, #4
 8020b74:	d122      	bne.n	8020bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	681b      	ldr	r3, [r3, #0]
 8020b7a:	68db      	ldr	r3, [r3, #12]
 8020b7c:	f003 0304 	and.w	r3, r3, #4
 8020b80:	2b04      	cmp	r3, #4
 8020b82:	d11b      	bne.n	8020bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	681b      	ldr	r3, [r3, #0]
 8020b88:	f06f 0204 	mvn.w	r2, #4
 8020b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8020b8e:	687b      	ldr	r3, [r7, #4]
 8020b90:	2202      	movs	r2, #2
 8020b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8020b94:	687b      	ldr	r3, [r7, #4]
 8020b96:	681b      	ldr	r3, [r3, #0]
 8020b98:	699b      	ldr	r3, [r3, #24]
 8020b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8020b9e:	2b00      	cmp	r3, #0
 8020ba0:	d003      	beq.n	8020baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8020ba2:	6878      	ldr	r0, [r7, #4]
 8020ba4:	f000 fa57 	bl	8021056 <HAL_TIM_IC_CaptureCallback>
 8020ba8:	e005      	b.n	8020bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8020baa:	6878      	ldr	r0, [r7, #4]
 8020bac:	f000 fa49 	bl	8021042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020bb0:	6878      	ldr	r0, [r7, #4]
 8020bb2:	f000 fa5a 	bl	802106a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020bb6:	687b      	ldr	r3, [r7, #4]
 8020bb8:	2200      	movs	r2, #0
 8020bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8020bbc:	687b      	ldr	r3, [r7, #4]
 8020bbe:	681b      	ldr	r3, [r3, #0]
 8020bc0:	691b      	ldr	r3, [r3, #16]
 8020bc2:	f003 0308 	and.w	r3, r3, #8
 8020bc6:	2b08      	cmp	r3, #8
 8020bc8:	d122      	bne.n	8020c10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8020bca:	687b      	ldr	r3, [r7, #4]
 8020bcc:	681b      	ldr	r3, [r3, #0]
 8020bce:	68db      	ldr	r3, [r3, #12]
 8020bd0:	f003 0308 	and.w	r3, r3, #8
 8020bd4:	2b08      	cmp	r3, #8
 8020bd6:	d11b      	bne.n	8020c10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8020bd8:	687b      	ldr	r3, [r7, #4]
 8020bda:	681b      	ldr	r3, [r3, #0]
 8020bdc:	f06f 0208 	mvn.w	r2, #8
 8020be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8020be2:	687b      	ldr	r3, [r7, #4]
 8020be4:	2204      	movs	r2, #4
 8020be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8020be8:	687b      	ldr	r3, [r7, #4]
 8020bea:	681b      	ldr	r3, [r3, #0]
 8020bec:	69db      	ldr	r3, [r3, #28]
 8020bee:	f003 0303 	and.w	r3, r3, #3
 8020bf2:	2b00      	cmp	r3, #0
 8020bf4:	d003      	beq.n	8020bfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8020bf6:	6878      	ldr	r0, [r7, #4]
 8020bf8:	f000 fa2d 	bl	8021056 <HAL_TIM_IC_CaptureCallback>
 8020bfc:	e005      	b.n	8020c0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8020bfe:	6878      	ldr	r0, [r7, #4]
 8020c00:	f000 fa1f 	bl	8021042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020c04:	6878      	ldr	r0, [r7, #4]
 8020c06:	f000 fa30 	bl	802106a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020c0a:	687b      	ldr	r3, [r7, #4]
 8020c0c:	2200      	movs	r2, #0
 8020c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8020c10:	687b      	ldr	r3, [r7, #4]
 8020c12:	681b      	ldr	r3, [r3, #0]
 8020c14:	691b      	ldr	r3, [r3, #16]
 8020c16:	f003 0310 	and.w	r3, r3, #16
 8020c1a:	2b10      	cmp	r3, #16
 8020c1c:	d122      	bne.n	8020c64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8020c1e:	687b      	ldr	r3, [r7, #4]
 8020c20:	681b      	ldr	r3, [r3, #0]
 8020c22:	68db      	ldr	r3, [r3, #12]
 8020c24:	f003 0310 	and.w	r3, r3, #16
 8020c28:	2b10      	cmp	r3, #16
 8020c2a:	d11b      	bne.n	8020c64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8020c2c:	687b      	ldr	r3, [r7, #4]
 8020c2e:	681b      	ldr	r3, [r3, #0]
 8020c30:	f06f 0210 	mvn.w	r2, #16
 8020c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8020c36:	687b      	ldr	r3, [r7, #4]
 8020c38:	2208      	movs	r2, #8
 8020c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8020c3c:	687b      	ldr	r3, [r7, #4]
 8020c3e:	681b      	ldr	r3, [r3, #0]
 8020c40:	69db      	ldr	r3, [r3, #28]
 8020c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8020c46:	2b00      	cmp	r3, #0
 8020c48:	d003      	beq.n	8020c52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8020c4a:	6878      	ldr	r0, [r7, #4]
 8020c4c:	f000 fa03 	bl	8021056 <HAL_TIM_IC_CaptureCallback>
 8020c50:	e005      	b.n	8020c5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8020c52:	6878      	ldr	r0, [r7, #4]
 8020c54:	f000 f9f5 	bl	8021042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020c58:	6878      	ldr	r0, [r7, #4]
 8020c5a:	f000 fa06 	bl	802106a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020c5e:	687b      	ldr	r3, [r7, #4]
 8020c60:	2200      	movs	r2, #0
 8020c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8020c64:	687b      	ldr	r3, [r7, #4]
 8020c66:	681b      	ldr	r3, [r3, #0]
 8020c68:	691b      	ldr	r3, [r3, #16]
 8020c6a:	f003 0301 	and.w	r3, r3, #1
 8020c6e:	2b01      	cmp	r3, #1
 8020c70:	d10e      	bne.n	8020c90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8020c72:	687b      	ldr	r3, [r7, #4]
 8020c74:	681b      	ldr	r3, [r3, #0]
 8020c76:	68db      	ldr	r3, [r3, #12]
 8020c78:	f003 0301 	and.w	r3, r3, #1
 8020c7c:	2b01      	cmp	r3, #1
 8020c7e:	d107      	bne.n	8020c90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8020c80:	687b      	ldr	r3, [r7, #4]
 8020c82:	681b      	ldr	r3, [r3, #0]
 8020c84:	f06f 0201 	mvn.w	r2, #1
 8020c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8020c8a:	6878      	ldr	r0, [r7, #4]
 8020c8c:	f000 f9cf 	bl	802102e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8020c90:	687b      	ldr	r3, [r7, #4]
 8020c92:	681b      	ldr	r3, [r3, #0]
 8020c94:	691b      	ldr	r3, [r3, #16]
 8020c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020c9a:	2b80      	cmp	r3, #128	; 0x80
 8020c9c:	d10e      	bne.n	8020cbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8020c9e:	687b      	ldr	r3, [r7, #4]
 8020ca0:	681b      	ldr	r3, [r3, #0]
 8020ca2:	68db      	ldr	r3, [r3, #12]
 8020ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020ca8:	2b80      	cmp	r3, #128	; 0x80
 8020caa:	d107      	bne.n	8020cbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	681b      	ldr	r3, [r3, #0]
 8020cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8020cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8020cb6:	6878      	ldr	r0, [r7, #4]
 8020cb8:	f000 fd30 	bl	802171c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8020cbc:	687b      	ldr	r3, [r7, #4]
 8020cbe:	681b      	ldr	r3, [r3, #0]
 8020cc0:	691b      	ldr	r3, [r3, #16]
 8020cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020cc6:	2b40      	cmp	r3, #64	; 0x40
 8020cc8:	d10e      	bne.n	8020ce8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	681b      	ldr	r3, [r3, #0]
 8020cce:	68db      	ldr	r3, [r3, #12]
 8020cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020cd4:	2b40      	cmp	r3, #64	; 0x40
 8020cd6:	d107      	bne.n	8020ce8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8020cd8:	687b      	ldr	r3, [r7, #4]
 8020cda:	681b      	ldr	r3, [r3, #0]
 8020cdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8020ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8020ce2:	6878      	ldr	r0, [r7, #4]
 8020ce4:	f000 f9cb 	bl	802107e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8020ce8:	687b      	ldr	r3, [r7, #4]
 8020cea:	681b      	ldr	r3, [r3, #0]
 8020cec:	691b      	ldr	r3, [r3, #16]
 8020cee:	f003 0320 	and.w	r3, r3, #32
 8020cf2:	2b20      	cmp	r3, #32
 8020cf4:	d10e      	bne.n	8020d14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	681b      	ldr	r3, [r3, #0]
 8020cfa:	68db      	ldr	r3, [r3, #12]
 8020cfc:	f003 0320 	and.w	r3, r3, #32
 8020d00:	2b20      	cmp	r3, #32
 8020d02:	d107      	bne.n	8020d14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8020d04:	687b      	ldr	r3, [r7, #4]
 8020d06:	681b      	ldr	r3, [r3, #0]
 8020d08:	f06f 0220 	mvn.w	r2, #32
 8020d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8020d0e:	6878      	ldr	r0, [r7, #4]
 8020d10:	f000 fcfa 	bl	8021708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8020d14:	bf00      	nop
 8020d16:	3708      	adds	r7, #8
 8020d18:	46bd      	mov	sp, r7
 8020d1a:	bd80      	pop	{r7, pc}

08020d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8020d1c:	b580      	push	{r7, lr}
 8020d1e:	b086      	sub	sp, #24
 8020d20:	af00      	add	r7, sp, #0
 8020d22:	60f8      	str	r0, [r7, #12]
 8020d24:	60b9      	str	r1, [r7, #8]
 8020d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8020d28:	2300      	movs	r3, #0
 8020d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8020d2c:	68fb      	ldr	r3, [r7, #12]
 8020d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020d32:	2b01      	cmp	r3, #1
 8020d34:	d101      	bne.n	8020d3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8020d36:	2302      	movs	r3, #2
 8020d38:	e0ae      	b.n	8020e98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8020d3a:	68fb      	ldr	r3, [r7, #12]
 8020d3c:	2201      	movs	r2, #1
 8020d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8020d42:	687b      	ldr	r3, [r7, #4]
 8020d44:	2b0c      	cmp	r3, #12
 8020d46:	f200 809f 	bhi.w	8020e88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8020d4a:	a201      	add	r2, pc, #4	; (adr r2, 8020d50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8020d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020d50:	08020d85 	.word	0x08020d85
 8020d54:	08020e89 	.word	0x08020e89
 8020d58:	08020e89 	.word	0x08020e89
 8020d5c:	08020e89 	.word	0x08020e89
 8020d60:	08020dc5 	.word	0x08020dc5
 8020d64:	08020e89 	.word	0x08020e89
 8020d68:	08020e89 	.word	0x08020e89
 8020d6c:	08020e89 	.word	0x08020e89
 8020d70:	08020e07 	.word	0x08020e07
 8020d74:	08020e89 	.word	0x08020e89
 8020d78:	08020e89 	.word	0x08020e89
 8020d7c:	08020e89 	.word	0x08020e89
 8020d80:	08020e47 	.word	0x08020e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8020d84:	68fb      	ldr	r3, [r7, #12]
 8020d86:	681b      	ldr	r3, [r3, #0]
 8020d88:	68b9      	ldr	r1, [r7, #8]
 8020d8a:	4618      	mov	r0, r3
 8020d8c:	f000 fa02 	bl	8021194 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8020d90:	68fb      	ldr	r3, [r7, #12]
 8020d92:	681b      	ldr	r3, [r3, #0]
 8020d94:	699a      	ldr	r2, [r3, #24]
 8020d96:	68fb      	ldr	r3, [r7, #12]
 8020d98:	681b      	ldr	r3, [r3, #0]
 8020d9a:	f042 0208 	orr.w	r2, r2, #8
 8020d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8020da0:	68fb      	ldr	r3, [r7, #12]
 8020da2:	681b      	ldr	r3, [r3, #0]
 8020da4:	699a      	ldr	r2, [r3, #24]
 8020da6:	68fb      	ldr	r3, [r7, #12]
 8020da8:	681b      	ldr	r3, [r3, #0]
 8020daa:	f022 0204 	bic.w	r2, r2, #4
 8020dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8020db0:	68fb      	ldr	r3, [r7, #12]
 8020db2:	681b      	ldr	r3, [r3, #0]
 8020db4:	6999      	ldr	r1, [r3, #24]
 8020db6:	68bb      	ldr	r3, [r7, #8]
 8020db8:	691a      	ldr	r2, [r3, #16]
 8020dba:	68fb      	ldr	r3, [r7, #12]
 8020dbc:	681b      	ldr	r3, [r3, #0]
 8020dbe:	430a      	orrs	r2, r1
 8020dc0:	619a      	str	r2, [r3, #24]
      break;
 8020dc2:	e064      	b.n	8020e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8020dc4:	68fb      	ldr	r3, [r7, #12]
 8020dc6:	681b      	ldr	r3, [r3, #0]
 8020dc8:	68b9      	ldr	r1, [r7, #8]
 8020dca:	4618      	mov	r0, r3
 8020dcc:	f000 fa48 	bl	8021260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8020dd0:	68fb      	ldr	r3, [r7, #12]
 8020dd2:	681b      	ldr	r3, [r3, #0]
 8020dd4:	699a      	ldr	r2, [r3, #24]
 8020dd6:	68fb      	ldr	r3, [r7, #12]
 8020dd8:	681b      	ldr	r3, [r3, #0]
 8020dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8020de0:	68fb      	ldr	r3, [r7, #12]
 8020de2:	681b      	ldr	r3, [r3, #0]
 8020de4:	699a      	ldr	r2, [r3, #24]
 8020de6:	68fb      	ldr	r3, [r7, #12]
 8020de8:	681b      	ldr	r3, [r3, #0]
 8020dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8020df0:	68fb      	ldr	r3, [r7, #12]
 8020df2:	681b      	ldr	r3, [r3, #0]
 8020df4:	6999      	ldr	r1, [r3, #24]
 8020df6:	68bb      	ldr	r3, [r7, #8]
 8020df8:	691b      	ldr	r3, [r3, #16]
 8020dfa:	021a      	lsls	r2, r3, #8
 8020dfc:	68fb      	ldr	r3, [r7, #12]
 8020dfe:	681b      	ldr	r3, [r3, #0]
 8020e00:	430a      	orrs	r2, r1
 8020e02:	619a      	str	r2, [r3, #24]
      break;
 8020e04:	e043      	b.n	8020e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8020e06:	68fb      	ldr	r3, [r7, #12]
 8020e08:	681b      	ldr	r3, [r3, #0]
 8020e0a:	68b9      	ldr	r1, [r7, #8]
 8020e0c:	4618      	mov	r0, r3
 8020e0e:	f000 fa93 	bl	8021338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8020e12:	68fb      	ldr	r3, [r7, #12]
 8020e14:	681b      	ldr	r3, [r3, #0]
 8020e16:	69da      	ldr	r2, [r3, #28]
 8020e18:	68fb      	ldr	r3, [r7, #12]
 8020e1a:	681b      	ldr	r3, [r3, #0]
 8020e1c:	f042 0208 	orr.w	r2, r2, #8
 8020e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8020e22:	68fb      	ldr	r3, [r7, #12]
 8020e24:	681b      	ldr	r3, [r3, #0]
 8020e26:	69da      	ldr	r2, [r3, #28]
 8020e28:	68fb      	ldr	r3, [r7, #12]
 8020e2a:	681b      	ldr	r3, [r3, #0]
 8020e2c:	f022 0204 	bic.w	r2, r2, #4
 8020e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8020e32:	68fb      	ldr	r3, [r7, #12]
 8020e34:	681b      	ldr	r3, [r3, #0]
 8020e36:	69d9      	ldr	r1, [r3, #28]
 8020e38:	68bb      	ldr	r3, [r7, #8]
 8020e3a:	691a      	ldr	r2, [r3, #16]
 8020e3c:	68fb      	ldr	r3, [r7, #12]
 8020e3e:	681b      	ldr	r3, [r3, #0]
 8020e40:	430a      	orrs	r2, r1
 8020e42:	61da      	str	r2, [r3, #28]
      break;
 8020e44:	e023      	b.n	8020e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8020e46:	68fb      	ldr	r3, [r7, #12]
 8020e48:	681b      	ldr	r3, [r3, #0]
 8020e4a:	68b9      	ldr	r1, [r7, #8]
 8020e4c:	4618      	mov	r0, r3
 8020e4e:	f000 fadd 	bl	802140c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8020e52:	68fb      	ldr	r3, [r7, #12]
 8020e54:	681b      	ldr	r3, [r3, #0]
 8020e56:	69da      	ldr	r2, [r3, #28]
 8020e58:	68fb      	ldr	r3, [r7, #12]
 8020e5a:	681b      	ldr	r3, [r3, #0]
 8020e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8020e62:	68fb      	ldr	r3, [r7, #12]
 8020e64:	681b      	ldr	r3, [r3, #0]
 8020e66:	69da      	ldr	r2, [r3, #28]
 8020e68:	68fb      	ldr	r3, [r7, #12]
 8020e6a:	681b      	ldr	r3, [r3, #0]
 8020e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8020e72:	68fb      	ldr	r3, [r7, #12]
 8020e74:	681b      	ldr	r3, [r3, #0]
 8020e76:	69d9      	ldr	r1, [r3, #28]
 8020e78:	68bb      	ldr	r3, [r7, #8]
 8020e7a:	691b      	ldr	r3, [r3, #16]
 8020e7c:	021a      	lsls	r2, r3, #8
 8020e7e:	68fb      	ldr	r3, [r7, #12]
 8020e80:	681b      	ldr	r3, [r3, #0]
 8020e82:	430a      	orrs	r2, r1
 8020e84:	61da      	str	r2, [r3, #28]
      break;
 8020e86:	e002      	b.n	8020e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8020e88:	2301      	movs	r3, #1
 8020e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8020e8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8020e8e:	68fb      	ldr	r3, [r7, #12]
 8020e90:	2200      	movs	r2, #0
 8020e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8020e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8020e98:	4618      	mov	r0, r3
 8020e9a:	3718      	adds	r7, #24
 8020e9c:	46bd      	mov	sp, r7
 8020e9e:	bd80      	pop	{r7, pc}

08020ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8020ea0:	b580      	push	{r7, lr}
 8020ea2:	b084      	sub	sp, #16
 8020ea4:	af00      	add	r7, sp, #0
 8020ea6:	6078      	str	r0, [r7, #4]
 8020ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8020eaa:	2300      	movs	r3, #0
 8020eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8020eae:	687b      	ldr	r3, [r7, #4]
 8020eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020eb4:	2b01      	cmp	r3, #1
 8020eb6:	d101      	bne.n	8020ebc <HAL_TIM_ConfigClockSource+0x1c>
 8020eb8:	2302      	movs	r3, #2
 8020eba:	e0b4      	b.n	8021026 <HAL_TIM_ConfigClockSource+0x186>
 8020ebc:	687b      	ldr	r3, [r7, #4]
 8020ebe:	2201      	movs	r2, #1
 8020ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8020ec4:	687b      	ldr	r3, [r7, #4]
 8020ec6:	2202      	movs	r2, #2
 8020ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8020ecc:	687b      	ldr	r3, [r7, #4]
 8020ece:	681b      	ldr	r3, [r3, #0]
 8020ed0:	689b      	ldr	r3, [r3, #8]
 8020ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8020ed4:	68bb      	ldr	r3, [r7, #8]
 8020ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8020eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020edc:	68bb      	ldr	r3, [r7, #8]
 8020ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8020ee4:	687b      	ldr	r3, [r7, #4]
 8020ee6:	681b      	ldr	r3, [r3, #0]
 8020ee8:	68ba      	ldr	r2, [r7, #8]
 8020eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8020eec:	683b      	ldr	r3, [r7, #0]
 8020eee:	681b      	ldr	r3, [r3, #0]
 8020ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020ef4:	d03e      	beq.n	8020f74 <HAL_TIM_ConfigClockSource+0xd4>
 8020ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020efa:	f200 8087 	bhi.w	802100c <HAL_TIM_ConfigClockSource+0x16c>
 8020efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020f02:	f000 8086 	beq.w	8021012 <HAL_TIM_ConfigClockSource+0x172>
 8020f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020f0a:	d87f      	bhi.n	802100c <HAL_TIM_ConfigClockSource+0x16c>
 8020f0c:	2b70      	cmp	r3, #112	; 0x70
 8020f0e:	d01a      	beq.n	8020f46 <HAL_TIM_ConfigClockSource+0xa6>
 8020f10:	2b70      	cmp	r3, #112	; 0x70
 8020f12:	d87b      	bhi.n	802100c <HAL_TIM_ConfigClockSource+0x16c>
 8020f14:	2b60      	cmp	r3, #96	; 0x60
 8020f16:	d050      	beq.n	8020fba <HAL_TIM_ConfigClockSource+0x11a>
 8020f18:	2b60      	cmp	r3, #96	; 0x60
 8020f1a:	d877      	bhi.n	802100c <HAL_TIM_ConfigClockSource+0x16c>
 8020f1c:	2b50      	cmp	r3, #80	; 0x50
 8020f1e:	d03c      	beq.n	8020f9a <HAL_TIM_ConfigClockSource+0xfa>
 8020f20:	2b50      	cmp	r3, #80	; 0x50
 8020f22:	d873      	bhi.n	802100c <HAL_TIM_ConfigClockSource+0x16c>
 8020f24:	2b40      	cmp	r3, #64	; 0x40
 8020f26:	d058      	beq.n	8020fda <HAL_TIM_ConfigClockSource+0x13a>
 8020f28:	2b40      	cmp	r3, #64	; 0x40
 8020f2a:	d86f      	bhi.n	802100c <HAL_TIM_ConfigClockSource+0x16c>
 8020f2c:	2b30      	cmp	r3, #48	; 0x30
 8020f2e:	d064      	beq.n	8020ffa <HAL_TIM_ConfigClockSource+0x15a>
 8020f30:	2b30      	cmp	r3, #48	; 0x30
 8020f32:	d86b      	bhi.n	802100c <HAL_TIM_ConfigClockSource+0x16c>
 8020f34:	2b20      	cmp	r3, #32
 8020f36:	d060      	beq.n	8020ffa <HAL_TIM_ConfigClockSource+0x15a>
 8020f38:	2b20      	cmp	r3, #32
 8020f3a:	d867      	bhi.n	802100c <HAL_TIM_ConfigClockSource+0x16c>
 8020f3c:	2b00      	cmp	r3, #0
 8020f3e:	d05c      	beq.n	8020ffa <HAL_TIM_ConfigClockSource+0x15a>
 8020f40:	2b10      	cmp	r3, #16
 8020f42:	d05a      	beq.n	8020ffa <HAL_TIM_ConfigClockSource+0x15a>
 8020f44:	e062      	b.n	802100c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8020f46:	687b      	ldr	r3, [r7, #4]
 8020f48:	6818      	ldr	r0, [r3, #0]
 8020f4a:	683b      	ldr	r3, [r7, #0]
 8020f4c:	6899      	ldr	r1, [r3, #8]
 8020f4e:	683b      	ldr	r3, [r7, #0]
 8020f50:	685a      	ldr	r2, [r3, #4]
 8020f52:	683b      	ldr	r3, [r7, #0]
 8020f54:	68db      	ldr	r3, [r3, #12]
 8020f56:	f000 fb23 	bl	80215a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8020f5a:	687b      	ldr	r3, [r7, #4]
 8020f5c:	681b      	ldr	r3, [r3, #0]
 8020f5e:	689b      	ldr	r3, [r3, #8]
 8020f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8020f62:	68bb      	ldr	r3, [r7, #8]
 8020f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8020f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8020f6a:	687b      	ldr	r3, [r7, #4]
 8020f6c:	681b      	ldr	r3, [r3, #0]
 8020f6e:	68ba      	ldr	r2, [r7, #8]
 8020f70:	609a      	str	r2, [r3, #8]
      break;
 8020f72:	e04f      	b.n	8021014 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	6818      	ldr	r0, [r3, #0]
 8020f78:	683b      	ldr	r3, [r7, #0]
 8020f7a:	6899      	ldr	r1, [r3, #8]
 8020f7c:	683b      	ldr	r3, [r7, #0]
 8020f7e:	685a      	ldr	r2, [r3, #4]
 8020f80:	683b      	ldr	r3, [r7, #0]
 8020f82:	68db      	ldr	r3, [r3, #12]
 8020f84:	f000 fb0c 	bl	80215a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8020f88:	687b      	ldr	r3, [r7, #4]
 8020f8a:	681b      	ldr	r3, [r3, #0]
 8020f8c:	689a      	ldr	r2, [r3, #8]
 8020f8e:	687b      	ldr	r3, [r7, #4]
 8020f90:	681b      	ldr	r3, [r3, #0]
 8020f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8020f96:	609a      	str	r2, [r3, #8]
      break;
 8020f98:	e03c      	b.n	8021014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8020f9a:	687b      	ldr	r3, [r7, #4]
 8020f9c:	6818      	ldr	r0, [r3, #0]
 8020f9e:	683b      	ldr	r3, [r7, #0]
 8020fa0:	6859      	ldr	r1, [r3, #4]
 8020fa2:	683b      	ldr	r3, [r7, #0]
 8020fa4:	68db      	ldr	r3, [r3, #12]
 8020fa6:	461a      	mov	r2, r3
 8020fa8:	f000 fa80 	bl	80214ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	681b      	ldr	r3, [r3, #0]
 8020fb0:	2150      	movs	r1, #80	; 0x50
 8020fb2:	4618      	mov	r0, r3
 8020fb4:	f000 fad9 	bl	802156a <TIM_ITRx_SetConfig>
      break;
 8020fb8:	e02c      	b.n	8021014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8020fba:	687b      	ldr	r3, [r7, #4]
 8020fbc:	6818      	ldr	r0, [r3, #0]
 8020fbe:	683b      	ldr	r3, [r7, #0]
 8020fc0:	6859      	ldr	r1, [r3, #4]
 8020fc2:	683b      	ldr	r3, [r7, #0]
 8020fc4:	68db      	ldr	r3, [r3, #12]
 8020fc6:	461a      	mov	r2, r3
 8020fc8:	f000 fa9f 	bl	802150a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8020fcc:	687b      	ldr	r3, [r7, #4]
 8020fce:	681b      	ldr	r3, [r3, #0]
 8020fd0:	2160      	movs	r1, #96	; 0x60
 8020fd2:	4618      	mov	r0, r3
 8020fd4:	f000 fac9 	bl	802156a <TIM_ITRx_SetConfig>
      break;
 8020fd8:	e01c      	b.n	8021014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8020fda:	687b      	ldr	r3, [r7, #4]
 8020fdc:	6818      	ldr	r0, [r3, #0]
 8020fde:	683b      	ldr	r3, [r7, #0]
 8020fe0:	6859      	ldr	r1, [r3, #4]
 8020fe2:	683b      	ldr	r3, [r7, #0]
 8020fe4:	68db      	ldr	r3, [r3, #12]
 8020fe6:	461a      	mov	r2, r3
 8020fe8:	f000 fa60 	bl	80214ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	681b      	ldr	r3, [r3, #0]
 8020ff0:	2140      	movs	r1, #64	; 0x40
 8020ff2:	4618      	mov	r0, r3
 8020ff4:	f000 fab9 	bl	802156a <TIM_ITRx_SetConfig>
      break;
 8020ff8:	e00c      	b.n	8021014 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8020ffa:	687b      	ldr	r3, [r7, #4]
 8020ffc:	681a      	ldr	r2, [r3, #0]
 8020ffe:	683b      	ldr	r3, [r7, #0]
 8021000:	681b      	ldr	r3, [r3, #0]
 8021002:	4619      	mov	r1, r3
 8021004:	4610      	mov	r0, r2
 8021006:	f000 fab0 	bl	802156a <TIM_ITRx_SetConfig>
      break;
 802100a:	e003      	b.n	8021014 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 802100c:	2301      	movs	r3, #1
 802100e:	73fb      	strb	r3, [r7, #15]
      break;
 8021010:	e000      	b.n	8021014 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8021012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8021014:	687b      	ldr	r3, [r7, #4]
 8021016:	2201      	movs	r2, #1
 8021018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802101c:	687b      	ldr	r3, [r7, #4]
 802101e:	2200      	movs	r2, #0
 8021020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8021024:	7bfb      	ldrb	r3, [r7, #15]
}
 8021026:	4618      	mov	r0, r3
 8021028:	3710      	adds	r7, #16
 802102a:	46bd      	mov	sp, r7
 802102c:	bd80      	pop	{r7, pc}

0802102e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 802102e:	b480      	push	{r7}
 8021030:	b083      	sub	sp, #12
 8021032:	af00      	add	r7, sp, #0
 8021034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8021036:	bf00      	nop
 8021038:	370c      	adds	r7, #12
 802103a:	46bd      	mov	sp, r7
 802103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021040:	4770      	bx	lr

08021042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021042:	b480      	push	{r7}
 8021044:	b083      	sub	sp, #12
 8021046:	af00      	add	r7, sp, #0
 8021048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802104a:	bf00      	nop
 802104c:	370c      	adds	r7, #12
 802104e:	46bd      	mov	sp, r7
 8021050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021054:	4770      	bx	lr

08021056 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8021056:	b480      	push	{r7}
 8021058:	b083      	sub	sp, #12
 802105a:	af00      	add	r7, sp, #0
 802105c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802105e:	bf00      	nop
 8021060:	370c      	adds	r7, #12
 8021062:	46bd      	mov	sp, r7
 8021064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021068:	4770      	bx	lr

0802106a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802106a:	b480      	push	{r7}
 802106c:	b083      	sub	sp, #12
 802106e:	af00      	add	r7, sp, #0
 8021070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8021072:	bf00      	nop
 8021074:	370c      	adds	r7, #12
 8021076:	46bd      	mov	sp, r7
 8021078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802107c:	4770      	bx	lr

0802107e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802107e:	b480      	push	{r7}
 8021080:	b083      	sub	sp, #12
 8021082:	af00      	add	r7, sp, #0
 8021084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8021086:	bf00      	nop
 8021088:	370c      	adds	r7, #12
 802108a:	46bd      	mov	sp, r7
 802108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021090:	4770      	bx	lr
	...

08021094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8021094:	b480      	push	{r7}
 8021096:	b085      	sub	sp, #20
 8021098:	af00      	add	r7, sp, #0
 802109a:	6078      	str	r0, [r7, #4]
 802109c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802109e:	687b      	ldr	r3, [r7, #4]
 80210a0:	681b      	ldr	r3, [r3, #0]
 80210a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80210a4:	687b      	ldr	r3, [r7, #4]
 80210a6:	4a34      	ldr	r2, [pc, #208]	; (8021178 <TIM_Base_SetConfig+0xe4>)
 80210a8:	4293      	cmp	r3, r2
 80210aa:	d00f      	beq.n	80210cc <TIM_Base_SetConfig+0x38>
 80210ac:	687b      	ldr	r3, [r7, #4]
 80210ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80210b2:	d00b      	beq.n	80210cc <TIM_Base_SetConfig+0x38>
 80210b4:	687b      	ldr	r3, [r7, #4]
 80210b6:	4a31      	ldr	r2, [pc, #196]	; (802117c <TIM_Base_SetConfig+0xe8>)
 80210b8:	4293      	cmp	r3, r2
 80210ba:	d007      	beq.n	80210cc <TIM_Base_SetConfig+0x38>
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	4a30      	ldr	r2, [pc, #192]	; (8021180 <TIM_Base_SetConfig+0xec>)
 80210c0:	4293      	cmp	r3, r2
 80210c2:	d003      	beq.n	80210cc <TIM_Base_SetConfig+0x38>
 80210c4:	687b      	ldr	r3, [r7, #4]
 80210c6:	4a2f      	ldr	r2, [pc, #188]	; (8021184 <TIM_Base_SetConfig+0xf0>)
 80210c8:	4293      	cmp	r3, r2
 80210ca:	d108      	bne.n	80210de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80210cc:	68fb      	ldr	r3, [r7, #12]
 80210ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80210d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80210d4:	683b      	ldr	r3, [r7, #0]
 80210d6:	685b      	ldr	r3, [r3, #4]
 80210d8:	68fa      	ldr	r2, [r7, #12]
 80210da:	4313      	orrs	r3, r2
 80210dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80210de:	687b      	ldr	r3, [r7, #4]
 80210e0:	4a25      	ldr	r2, [pc, #148]	; (8021178 <TIM_Base_SetConfig+0xe4>)
 80210e2:	4293      	cmp	r3, r2
 80210e4:	d01b      	beq.n	802111e <TIM_Base_SetConfig+0x8a>
 80210e6:	687b      	ldr	r3, [r7, #4]
 80210e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80210ec:	d017      	beq.n	802111e <TIM_Base_SetConfig+0x8a>
 80210ee:	687b      	ldr	r3, [r7, #4]
 80210f0:	4a22      	ldr	r2, [pc, #136]	; (802117c <TIM_Base_SetConfig+0xe8>)
 80210f2:	4293      	cmp	r3, r2
 80210f4:	d013      	beq.n	802111e <TIM_Base_SetConfig+0x8a>
 80210f6:	687b      	ldr	r3, [r7, #4]
 80210f8:	4a21      	ldr	r2, [pc, #132]	; (8021180 <TIM_Base_SetConfig+0xec>)
 80210fa:	4293      	cmp	r3, r2
 80210fc:	d00f      	beq.n	802111e <TIM_Base_SetConfig+0x8a>
 80210fe:	687b      	ldr	r3, [r7, #4]
 8021100:	4a20      	ldr	r2, [pc, #128]	; (8021184 <TIM_Base_SetConfig+0xf0>)
 8021102:	4293      	cmp	r3, r2
 8021104:	d00b      	beq.n	802111e <TIM_Base_SetConfig+0x8a>
 8021106:	687b      	ldr	r3, [r7, #4]
 8021108:	4a1f      	ldr	r2, [pc, #124]	; (8021188 <TIM_Base_SetConfig+0xf4>)
 802110a:	4293      	cmp	r3, r2
 802110c:	d007      	beq.n	802111e <TIM_Base_SetConfig+0x8a>
 802110e:	687b      	ldr	r3, [r7, #4]
 8021110:	4a1e      	ldr	r2, [pc, #120]	; (802118c <TIM_Base_SetConfig+0xf8>)
 8021112:	4293      	cmp	r3, r2
 8021114:	d003      	beq.n	802111e <TIM_Base_SetConfig+0x8a>
 8021116:	687b      	ldr	r3, [r7, #4]
 8021118:	4a1d      	ldr	r2, [pc, #116]	; (8021190 <TIM_Base_SetConfig+0xfc>)
 802111a:	4293      	cmp	r3, r2
 802111c:	d108      	bne.n	8021130 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802111e:	68fb      	ldr	r3, [r7, #12]
 8021120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8021124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8021126:	683b      	ldr	r3, [r7, #0]
 8021128:	68db      	ldr	r3, [r3, #12]
 802112a:	68fa      	ldr	r2, [r7, #12]
 802112c:	4313      	orrs	r3, r2
 802112e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8021130:	68fb      	ldr	r3, [r7, #12]
 8021132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8021136:	683b      	ldr	r3, [r7, #0]
 8021138:	695b      	ldr	r3, [r3, #20]
 802113a:	4313      	orrs	r3, r2
 802113c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802113e:	687b      	ldr	r3, [r7, #4]
 8021140:	68fa      	ldr	r2, [r7, #12]
 8021142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8021144:	683b      	ldr	r3, [r7, #0]
 8021146:	689a      	ldr	r2, [r3, #8]
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802114c:	683b      	ldr	r3, [r7, #0]
 802114e:	681a      	ldr	r2, [r3, #0]
 8021150:	687b      	ldr	r3, [r7, #4]
 8021152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	4a08      	ldr	r2, [pc, #32]	; (8021178 <TIM_Base_SetConfig+0xe4>)
 8021158:	4293      	cmp	r3, r2
 802115a:	d103      	bne.n	8021164 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802115c:	683b      	ldr	r3, [r7, #0]
 802115e:	691a      	ldr	r2, [r3, #16]
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8021164:	687b      	ldr	r3, [r7, #4]
 8021166:	2201      	movs	r2, #1
 8021168:	615a      	str	r2, [r3, #20]
}
 802116a:	bf00      	nop
 802116c:	3714      	adds	r7, #20
 802116e:	46bd      	mov	sp, r7
 8021170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021174:	4770      	bx	lr
 8021176:	bf00      	nop
 8021178:	40010000 	.word	0x40010000
 802117c:	40000400 	.word	0x40000400
 8021180:	40000800 	.word	0x40000800
 8021184:	40000c00 	.word	0x40000c00
 8021188:	40014000 	.word	0x40014000
 802118c:	40014400 	.word	0x40014400
 8021190:	40014800 	.word	0x40014800

08021194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021194:	b480      	push	{r7}
 8021196:	b087      	sub	sp, #28
 8021198:	af00      	add	r7, sp, #0
 802119a:	6078      	str	r0, [r7, #4]
 802119c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802119e:	687b      	ldr	r3, [r7, #4]
 80211a0:	6a1b      	ldr	r3, [r3, #32]
 80211a2:	f023 0201 	bic.w	r2, r3, #1
 80211a6:	687b      	ldr	r3, [r7, #4]
 80211a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80211aa:	687b      	ldr	r3, [r7, #4]
 80211ac:	6a1b      	ldr	r3, [r3, #32]
 80211ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80211b0:	687b      	ldr	r3, [r7, #4]
 80211b2:	685b      	ldr	r3, [r3, #4]
 80211b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	699b      	ldr	r3, [r3, #24]
 80211ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80211bc:	68fb      	ldr	r3, [r7, #12]
 80211be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80211c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80211c4:	68fb      	ldr	r3, [r7, #12]
 80211c6:	f023 0303 	bic.w	r3, r3, #3
 80211ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80211cc:	683b      	ldr	r3, [r7, #0]
 80211ce:	681b      	ldr	r3, [r3, #0]
 80211d0:	68fa      	ldr	r2, [r7, #12]
 80211d2:	4313      	orrs	r3, r2
 80211d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80211d6:	697b      	ldr	r3, [r7, #20]
 80211d8:	f023 0302 	bic.w	r3, r3, #2
 80211dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80211de:	683b      	ldr	r3, [r7, #0]
 80211e0:	689b      	ldr	r3, [r3, #8]
 80211e2:	697a      	ldr	r2, [r7, #20]
 80211e4:	4313      	orrs	r3, r2
 80211e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80211e8:	687b      	ldr	r3, [r7, #4]
 80211ea:	4a1c      	ldr	r2, [pc, #112]	; (802125c <TIM_OC1_SetConfig+0xc8>)
 80211ec:	4293      	cmp	r3, r2
 80211ee:	d10c      	bne.n	802120a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80211f0:	697b      	ldr	r3, [r7, #20]
 80211f2:	f023 0308 	bic.w	r3, r3, #8
 80211f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80211f8:	683b      	ldr	r3, [r7, #0]
 80211fa:	68db      	ldr	r3, [r3, #12]
 80211fc:	697a      	ldr	r2, [r7, #20]
 80211fe:	4313      	orrs	r3, r2
 8021200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8021202:	697b      	ldr	r3, [r7, #20]
 8021204:	f023 0304 	bic.w	r3, r3, #4
 8021208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802120a:	687b      	ldr	r3, [r7, #4]
 802120c:	4a13      	ldr	r2, [pc, #76]	; (802125c <TIM_OC1_SetConfig+0xc8>)
 802120e:	4293      	cmp	r3, r2
 8021210:	d111      	bne.n	8021236 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8021212:	693b      	ldr	r3, [r7, #16]
 8021214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802121a:	693b      	ldr	r3, [r7, #16]
 802121c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8021220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8021222:	683b      	ldr	r3, [r7, #0]
 8021224:	695b      	ldr	r3, [r3, #20]
 8021226:	693a      	ldr	r2, [r7, #16]
 8021228:	4313      	orrs	r3, r2
 802122a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 802122c:	683b      	ldr	r3, [r7, #0]
 802122e:	699b      	ldr	r3, [r3, #24]
 8021230:	693a      	ldr	r2, [r7, #16]
 8021232:	4313      	orrs	r3, r2
 8021234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021236:	687b      	ldr	r3, [r7, #4]
 8021238:	693a      	ldr	r2, [r7, #16]
 802123a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802123c:	687b      	ldr	r3, [r7, #4]
 802123e:	68fa      	ldr	r2, [r7, #12]
 8021240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8021242:	683b      	ldr	r3, [r7, #0]
 8021244:	685a      	ldr	r2, [r3, #4]
 8021246:	687b      	ldr	r3, [r7, #4]
 8021248:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	697a      	ldr	r2, [r7, #20]
 802124e:	621a      	str	r2, [r3, #32]
}
 8021250:	bf00      	nop
 8021252:	371c      	adds	r7, #28
 8021254:	46bd      	mov	sp, r7
 8021256:	f85d 7b04 	ldr.w	r7, [sp], #4
 802125a:	4770      	bx	lr
 802125c:	40010000 	.word	0x40010000

08021260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021260:	b480      	push	{r7}
 8021262:	b087      	sub	sp, #28
 8021264:	af00      	add	r7, sp, #0
 8021266:	6078      	str	r0, [r7, #4]
 8021268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802126a:	687b      	ldr	r3, [r7, #4]
 802126c:	6a1b      	ldr	r3, [r3, #32]
 802126e:	f023 0210 	bic.w	r2, r3, #16
 8021272:	687b      	ldr	r3, [r7, #4]
 8021274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8021276:	687b      	ldr	r3, [r7, #4]
 8021278:	6a1b      	ldr	r3, [r3, #32]
 802127a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	685b      	ldr	r3, [r3, #4]
 8021280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	699b      	ldr	r3, [r3, #24]
 8021286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8021288:	68fb      	ldr	r3, [r7, #12]
 802128a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802128e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8021290:	68fb      	ldr	r3, [r7, #12]
 8021292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8021296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8021298:	683b      	ldr	r3, [r7, #0]
 802129a:	681b      	ldr	r3, [r3, #0]
 802129c:	021b      	lsls	r3, r3, #8
 802129e:	68fa      	ldr	r2, [r7, #12]
 80212a0:	4313      	orrs	r3, r2
 80212a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80212a4:	697b      	ldr	r3, [r7, #20]
 80212a6:	f023 0320 	bic.w	r3, r3, #32
 80212aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80212ac:	683b      	ldr	r3, [r7, #0]
 80212ae:	689b      	ldr	r3, [r3, #8]
 80212b0:	011b      	lsls	r3, r3, #4
 80212b2:	697a      	ldr	r2, [r7, #20]
 80212b4:	4313      	orrs	r3, r2
 80212b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80212b8:	687b      	ldr	r3, [r7, #4]
 80212ba:	4a1e      	ldr	r2, [pc, #120]	; (8021334 <TIM_OC2_SetConfig+0xd4>)
 80212bc:	4293      	cmp	r3, r2
 80212be:	d10d      	bne.n	80212dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80212c0:	697b      	ldr	r3, [r7, #20]
 80212c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80212c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80212c8:	683b      	ldr	r3, [r7, #0]
 80212ca:	68db      	ldr	r3, [r3, #12]
 80212cc:	011b      	lsls	r3, r3, #4
 80212ce:	697a      	ldr	r2, [r7, #20]
 80212d0:	4313      	orrs	r3, r2
 80212d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80212d4:	697b      	ldr	r3, [r7, #20]
 80212d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80212da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80212dc:	687b      	ldr	r3, [r7, #4]
 80212de:	4a15      	ldr	r2, [pc, #84]	; (8021334 <TIM_OC2_SetConfig+0xd4>)
 80212e0:	4293      	cmp	r3, r2
 80212e2:	d113      	bne.n	802130c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80212e4:	693b      	ldr	r3, [r7, #16]
 80212e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80212ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80212ec:	693b      	ldr	r3, [r7, #16]
 80212ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80212f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80212f4:	683b      	ldr	r3, [r7, #0]
 80212f6:	695b      	ldr	r3, [r3, #20]
 80212f8:	009b      	lsls	r3, r3, #2
 80212fa:	693a      	ldr	r2, [r7, #16]
 80212fc:	4313      	orrs	r3, r2
 80212fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8021300:	683b      	ldr	r3, [r7, #0]
 8021302:	699b      	ldr	r3, [r3, #24]
 8021304:	009b      	lsls	r3, r3, #2
 8021306:	693a      	ldr	r2, [r7, #16]
 8021308:	4313      	orrs	r3, r2
 802130a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802130c:	687b      	ldr	r3, [r7, #4]
 802130e:	693a      	ldr	r2, [r7, #16]
 8021310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8021312:	687b      	ldr	r3, [r7, #4]
 8021314:	68fa      	ldr	r2, [r7, #12]
 8021316:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8021318:	683b      	ldr	r3, [r7, #0]
 802131a:	685a      	ldr	r2, [r3, #4]
 802131c:	687b      	ldr	r3, [r7, #4]
 802131e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021320:	687b      	ldr	r3, [r7, #4]
 8021322:	697a      	ldr	r2, [r7, #20]
 8021324:	621a      	str	r2, [r3, #32]
}
 8021326:	bf00      	nop
 8021328:	371c      	adds	r7, #28
 802132a:	46bd      	mov	sp, r7
 802132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021330:	4770      	bx	lr
 8021332:	bf00      	nop
 8021334:	40010000 	.word	0x40010000

08021338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021338:	b480      	push	{r7}
 802133a:	b087      	sub	sp, #28
 802133c:	af00      	add	r7, sp, #0
 802133e:	6078      	str	r0, [r7, #4]
 8021340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8021342:	687b      	ldr	r3, [r7, #4]
 8021344:	6a1b      	ldr	r3, [r3, #32]
 8021346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802134a:	687b      	ldr	r3, [r7, #4]
 802134c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802134e:	687b      	ldr	r3, [r7, #4]
 8021350:	6a1b      	ldr	r3, [r3, #32]
 8021352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021354:	687b      	ldr	r3, [r7, #4]
 8021356:	685b      	ldr	r3, [r3, #4]
 8021358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802135a:	687b      	ldr	r3, [r7, #4]
 802135c:	69db      	ldr	r3, [r3, #28]
 802135e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8021360:	68fb      	ldr	r3, [r7, #12]
 8021362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8021368:	68fb      	ldr	r3, [r7, #12]
 802136a:	f023 0303 	bic.w	r3, r3, #3
 802136e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8021370:	683b      	ldr	r3, [r7, #0]
 8021372:	681b      	ldr	r3, [r3, #0]
 8021374:	68fa      	ldr	r2, [r7, #12]
 8021376:	4313      	orrs	r3, r2
 8021378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802137a:	697b      	ldr	r3, [r7, #20]
 802137c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8021380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8021382:	683b      	ldr	r3, [r7, #0]
 8021384:	689b      	ldr	r3, [r3, #8]
 8021386:	021b      	lsls	r3, r3, #8
 8021388:	697a      	ldr	r2, [r7, #20]
 802138a:	4313      	orrs	r3, r2
 802138c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802138e:	687b      	ldr	r3, [r7, #4]
 8021390:	4a1d      	ldr	r2, [pc, #116]	; (8021408 <TIM_OC3_SetConfig+0xd0>)
 8021392:	4293      	cmp	r3, r2
 8021394:	d10d      	bne.n	80213b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8021396:	697b      	ldr	r3, [r7, #20]
 8021398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802139c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 802139e:	683b      	ldr	r3, [r7, #0]
 80213a0:	68db      	ldr	r3, [r3, #12]
 80213a2:	021b      	lsls	r3, r3, #8
 80213a4:	697a      	ldr	r2, [r7, #20]
 80213a6:	4313      	orrs	r3, r2
 80213a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80213aa:	697b      	ldr	r3, [r7, #20]
 80213ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80213b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80213b2:	687b      	ldr	r3, [r7, #4]
 80213b4:	4a14      	ldr	r2, [pc, #80]	; (8021408 <TIM_OC3_SetConfig+0xd0>)
 80213b6:	4293      	cmp	r3, r2
 80213b8:	d113      	bne.n	80213e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80213ba:	693b      	ldr	r3, [r7, #16]
 80213bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80213c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80213c2:	693b      	ldr	r3, [r7, #16]
 80213c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80213c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80213ca:	683b      	ldr	r3, [r7, #0]
 80213cc:	695b      	ldr	r3, [r3, #20]
 80213ce:	011b      	lsls	r3, r3, #4
 80213d0:	693a      	ldr	r2, [r7, #16]
 80213d2:	4313      	orrs	r3, r2
 80213d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80213d6:	683b      	ldr	r3, [r7, #0]
 80213d8:	699b      	ldr	r3, [r3, #24]
 80213da:	011b      	lsls	r3, r3, #4
 80213dc:	693a      	ldr	r2, [r7, #16]
 80213de:	4313      	orrs	r3, r2
 80213e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80213e2:	687b      	ldr	r3, [r7, #4]
 80213e4:	693a      	ldr	r2, [r7, #16]
 80213e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80213e8:	687b      	ldr	r3, [r7, #4]
 80213ea:	68fa      	ldr	r2, [r7, #12]
 80213ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80213ee:	683b      	ldr	r3, [r7, #0]
 80213f0:	685a      	ldr	r2, [r3, #4]
 80213f2:	687b      	ldr	r3, [r7, #4]
 80213f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80213f6:	687b      	ldr	r3, [r7, #4]
 80213f8:	697a      	ldr	r2, [r7, #20]
 80213fa:	621a      	str	r2, [r3, #32]
}
 80213fc:	bf00      	nop
 80213fe:	371c      	adds	r7, #28
 8021400:	46bd      	mov	sp, r7
 8021402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021406:	4770      	bx	lr
 8021408:	40010000 	.word	0x40010000

0802140c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802140c:	b480      	push	{r7}
 802140e:	b087      	sub	sp, #28
 8021410:	af00      	add	r7, sp, #0
 8021412:	6078      	str	r0, [r7, #4]
 8021414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8021416:	687b      	ldr	r3, [r7, #4]
 8021418:	6a1b      	ldr	r3, [r3, #32]
 802141a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802141e:	687b      	ldr	r3, [r7, #4]
 8021420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8021422:	687b      	ldr	r3, [r7, #4]
 8021424:	6a1b      	ldr	r3, [r3, #32]
 8021426:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021428:	687b      	ldr	r3, [r7, #4]
 802142a:	685b      	ldr	r3, [r3, #4]
 802142c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802142e:	687b      	ldr	r3, [r7, #4]
 8021430:	69db      	ldr	r3, [r3, #28]
 8021432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8021434:	68fb      	ldr	r3, [r7, #12]
 8021436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802143a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802143c:	68fb      	ldr	r3, [r7, #12]
 802143e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8021442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8021444:	683b      	ldr	r3, [r7, #0]
 8021446:	681b      	ldr	r3, [r3, #0]
 8021448:	021b      	lsls	r3, r3, #8
 802144a:	68fa      	ldr	r2, [r7, #12]
 802144c:	4313      	orrs	r3, r2
 802144e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8021450:	693b      	ldr	r3, [r7, #16]
 8021452:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8021458:	683b      	ldr	r3, [r7, #0]
 802145a:	689b      	ldr	r3, [r3, #8]
 802145c:	031b      	lsls	r3, r3, #12
 802145e:	693a      	ldr	r2, [r7, #16]
 8021460:	4313      	orrs	r3, r2
 8021462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021464:	687b      	ldr	r3, [r7, #4]
 8021466:	4a10      	ldr	r2, [pc, #64]	; (80214a8 <TIM_OC4_SetConfig+0x9c>)
 8021468:	4293      	cmp	r3, r2
 802146a:	d109      	bne.n	8021480 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 802146c:	697b      	ldr	r3, [r7, #20]
 802146e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8021472:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8021474:	683b      	ldr	r3, [r7, #0]
 8021476:	695b      	ldr	r3, [r3, #20]
 8021478:	019b      	lsls	r3, r3, #6
 802147a:	697a      	ldr	r2, [r7, #20]
 802147c:	4313      	orrs	r3, r2
 802147e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021480:	687b      	ldr	r3, [r7, #4]
 8021482:	697a      	ldr	r2, [r7, #20]
 8021484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8021486:	687b      	ldr	r3, [r7, #4]
 8021488:	68fa      	ldr	r2, [r7, #12]
 802148a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 802148c:	683b      	ldr	r3, [r7, #0]
 802148e:	685a      	ldr	r2, [r3, #4]
 8021490:	687b      	ldr	r3, [r7, #4]
 8021492:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021494:	687b      	ldr	r3, [r7, #4]
 8021496:	693a      	ldr	r2, [r7, #16]
 8021498:	621a      	str	r2, [r3, #32]
}
 802149a:	bf00      	nop
 802149c:	371c      	adds	r7, #28
 802149e:	46bd      	mov	sp, r7
 80214a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214a4:	4770      	bx	lr
 80214a6:	bf00      	nop
 80214a8:	40010000 	.word	0x40010000

080214ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80214ac:	b480      	push	{r7}
 80214ae:	b087      	sub	sp, #28
 80214b0:	af00      	add	r7, sp, #0
 80214b2:	60f8      	str	r0, [r7, #12]
 80214b4:	60b9      	str	r1, [r7, #8]
 80214b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80214b8:	68fb      	ldr	r3, [r7, #12]
 80214ba:	6a1b      	ldr	r3, [r3, #32]
 80214bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80214be:	68fb      	ldr	r3, [r7, #12]
 80214c0:	6a1b      	ldr	r3, [r3, #32]
 80214c2:	f023 0201 	bic.w	r2, r3, #1
 80214c6:	68fb      	ldr	r3, [r7, #12]
 80214c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80214ca:	68fb      	ldr	r3, [r7, #12]
 80214cc:	699b      	ldr	r3, [r3, #24]
 80214ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80214d0:	693b      	ldr	r3, [r7, #16]
 80214d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80214d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80214d8:	687b      	ldr	r3, [r7, #4]
 80214da:	011b      	lsls	r3, r3, #4
 80214dc:	693a      	ldr	r2, [r7, #16]
 80214de:	4313      	orrs	r3, r2
 80214e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80214e2:	697b      	ldr	r3, [r7, #20]
 80214e4:	f023 030a 	bic.w	r3, r3, #10
 80214e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80214ea:	697a      	ldr	r2, [r7, #20]
 80214ec:	68bb      	ldr	r3, [r7, #8]
 80214ee:	4313      	orrs	r3, r2
 80214f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80214f2:	68fb      	ldr	r3, [r7, #12]
 80214f4:	693a      	ldr	r2, [r7, #16]
 80214f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80214f8:	68fb      	ldr	r3, [r7, #12]
 80214fa:	697a      	ldr	r2, [r7, #20]
 80214fc:	621a      	str	r2, [r3, #32]
}
 80214fe:	bf00      	nop
 8021500:	371c      	adds	r7, #28
 8021502:	46bd      	mov	sp, r7
 8021504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021508:	4770      	bx	lr

0802150a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802150a:	b480      	push	{r7}
 802150c:	b087      	sub	sp, #28
 802150e:	af00      	add	r7, sp, #0
 8021510:	60f8      	str	r0, [r7, #12]
 8021512:	60b9      	str	r1, [r7, #8]
 8021514:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8021516:	68fb      	ldr	r3, [r7, #12]
 8021518:	6a1b      	ldr	r3, [r3, #32]
 802151a:	f023 0210 	bic.w	r2, r3, #16
 802151e:	68fb      	ldr	r3, [r7, #12]
 8021520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8021522:	68fb      	ldr	r3, [r7, #12]
 8021524:	699b      	ldr	r3, [r3, #24]
 8021526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8021528:	68fb      	ldr	r3, [r7, #12]
 802152a:	6a1b      	ldr	r3, [r3, #32]
 802152c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802152e:	697b      	ldr	r3, [r7, #20]
 8021530:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8021534:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8021536:	687b      	ldr	r3, [r7, #4]
 8021538:	031b      	lsls	r3, r3, #12
 802153a:	697a      	ldr	r2, [r7, #20]
 802153c:	4313      	orrs	r3, r2
 802153e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8021540:	693b      	ldr	r3, [r7, #16]
 8021542:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8021546:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8021548:	68bb      	ldr	r3, [r7, #8]
 802154a:	011b      	lsls	r3, r3, #4
 802154c:	693a      	ldr	r2, [r7, #16]
 802154e:	4313      	orrs	r3, r2
 8021550:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8021552:	68fb      	ldr	r3, [r7, #12]
 8021554:	697a      	ldr	r2, [r7, #20]
 8021556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021558:	68fb      	ldr	r3, [r7, #12]
 802155a:	693a      	ldr	r2, [r7, #16]
 802155c:	621a      	str	r2, [r3, #32]
}
 802155e:	bf00      	nop
 8021560:	371c      	adds	r7, #28
 8021562:	46bd      	mov	sp, r7
 8021564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021568:	4770      	bx	lr

0802156a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802156a:	b480      	push	{r7}
 802156c:	b085      	sub	sp, #20
 802156e:	af00      	add	r7, sp, #0
 8021570:	6078      	str	r0, [r7, #4]
 8021572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8021574:	687b      	ldr	r3, [r7, #4]
 8021576:	689b      	ldr	r3, [r3, #8]
 8021578:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802157a:	68fb      	ldr	r3, [r7, #12]
 802157c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021580:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8021582:	683a      	ldr	r2, [r7, #0]
 8021584:	68fb      	ldr	r3, [r7, #12]
 8021586:	4313      	orrs	r3, r2
 8021588:	f043 0307 	orr.w	r3, r3, #7
 802158c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802158e:	687b      	ldr	r3, [r7, #4]
 8021590:	68fa      	ldr	r2, [r7, #12]
 8021592:	609a      	str	r2, [r3, #8]
}
 8021594:	bf00      	nop
 8021596:	3714      	adds	r7, #20
 8021598:	46bd      	mov	sp, r7
 802159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802159e:	4770      	bx	lr

080215a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80215a0:	b480      	push	{r7}
 80215a2:	b087      	sub	sp, #28
 80215a4:	af00      	add	r7, sp, #0
 80215a6:	60f8      	str	r0, [r7, #12]
 80215a8:	60b9      	str	r1, [r7, #8]
 80215aa:	607a      	str	r2, [r7, #4]
 80215ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80215ae:	68fb      	ldr	r3, [r7, #12]
 80215b0:	689b      	ldr	r3, [r3, #8]
 80215b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80215b4:	697b      	ldr	r3, [r7, #20]
 80215b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80215ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80215bc:	683b      	ldr	r3, [r7, #0]
 80215be:	021a      	lsls	r2, r3, #8
 80215c0:	687b      	ldr	r3, [r7, #4]
 80215c2:	431a      	orrs	r2, r3
 80215c4:	68bb      	ldr	r3, [r7, #8]
 80215c6:	4313      	orrs	r3, r2
 80215c8:	697a      	ldr	r2, [r7, #20]
 80215ca:	4313      	orrs	r3, r2
 80215cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80215ce:	68fb      	ldr	r3, [r7, #12]
 80215d0:	697a      	ldr	r2, [r7, #20]
 80215d2:	609a      	str	r2, [r3, #8]
}
 80215d4:	bf00      	nop
 80215d6:	371c      	adds	r7, #28
 80215d8:	46bd      	mov	sp, r7
 80215da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215de:	4770      	bx	lr

080215e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80215e0:	b480      	push	{r7}
 80215e2:	b087      	sub	sp, #28
 80215e4:	af00      	add	r7, sp, #0
 80215e6:	60f8      	str	r0, [r7, #12]
 80215e8:	60b9      	str	r1, [r7, #8]
 80215ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80215ec:	68bb      	ldr	r3, [r7, #8]
 80215ee:	f003 031f 	and.w	r3, r3, #31
 80215f2:	2201      	movs	r2, #1
 80215f4:	fa02 f303 	lsl.w	r3, r2, r3
 80215f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80215fa:	68fb      	ldr	r3, [r7, #12]
 80215fc:	6a1a      	ldr	r2, [r3, #32]
 80215fe:	697b      	ldr	r3, [r7, #20]
 8021600:	43db      	mvns	r3, r3
 8021602:	401a      	ands	r2, r3
 8021604:	68fb      	ldr	r3, [r7, #12]
 8021606:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8021608:	68fb      	ldr	r3, [r7, #12]
 802160a:	6a1a      	ldr	r2, [r3, #32]
 802160c:	68bb      	ldr	r3, [r7, #8]
 802160e:	f003 031f 	and.w	r3, r3, #31
 8021612:	6879      	ldr	r1, [r7, #4]
 8021614:	fa01 f303 	lsl.w	r3, r1, r3
 8021618:	431a      	orrs	r2, r3
 802161a:	68fb      	ldr	r3, [r7, #12]
 802161c:	621a      	str	r2, [r3, #32]
}
 802161e:	bf00      	nop
 8021620:	371c      	adds	r7, #28
 8021622:	46bd      	mov	sp, r7
 8021624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021628:	4770      	bx	lr
	...

0802162c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802162c:	b480      	push	{r7}
 802162e:	b085      	sub	sp, #20
 8021630:	af00      	add	r7, sp, #0
 8021632:	6078      	str	r0, [r7, #4]
 8021634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8021636:	687b      	ldr	r3, [r7, #4]
 8021638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802163c:	2b01      	cmp	r3, #1
 802163e:	d101      	bne.n	8021644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8021640:	2302      	movs	r3, #2
 8021642:	e050      	b.n	80216e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8021644:	687b      	ldr	r3, [r7, #4]
 8021646:	2201      	movs	r2, #1
 8021648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802164c:	687b      	ldr	r3, [r7, #4]
 802164e:	2202      	movs	r2, #2
 8021650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8021654:	687b      	ldr	r3, [r7, #4]
 8021656:	681b      	ldr	r3, [r3, #0]
 8021658:	685b      	ldr	r3, [r3, #4]
 802165a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802165c:	687b      	ldr	r3, [r7, #4]
 802165e:	681b      	ldr	r3, [r3, #0]
 8021660:	689b      	ldr	r3, [r3, #8]
 8021662:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8021664:	68fb      	ldr	r3, [r7, #12]
 8021666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802166a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802166c:	683b      	ldr	r3, [r7, #0]
 802166e:	681b      	ldr	r3, [r3, #0]
 8021670:	68fa      	ldr	r2, [r7, #12]
 8021672:	4313      	orrs	r3, r2
 8021674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8021676:	687b      	ldr	r3, [r7, #4]
 8021678:	681b      	ldr	r3, [r3, #0]
 802167a:	68fa      	ldr	r2, [r7, #12]
 802167c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802167e:	687b      	ldr	r3, [r7, #4]
 8021680:	681b      	ldr	r3, [r3, #0]
 8021682:	4a1c      	ldr	r2, [pc, #112]	; (80216f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8021684:	4293      	cmp	r3, r2
 8021686:	d018      	beq.n	80216ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021688:	687b      	ldr	r3, [r7, #4]
 802168a:	681b      	ldr	r3, [r3, #0]
 802168c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021690:	d013      	beq.n	80216ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021692:	687b      	ldr	r3, [r7, #4]
 8021694:	681b      	ldr	r3, [r3, #0]
 8021696:	4a18      	ldr	r2, [pc, #96]	; (80216f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8021698:	4293      	cmp	r3, r2
 802169a:	d00e      	beq.n	80216ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 802169c:	687b      	ldr	r3, [r7, #4]
 802169e:	681b      	ldr	r3, [r3, #0]
 80216a0:	4a16      	ldr	r2, [pc, #88]	; (80216fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80216a2:	4293      	cmp	r3, r2
 80216a4:	d009      	beq.n	80216ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80216a6:	687b      	ldr	r3, [r7, #4]
 80216a8:	681b      	ldr	r3, [r3, #0]
 80216aa:	4a15      	ldr	r2, [pc, #84]	; (8021700 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80216ac:	4293      	cmp	r3, r2
 80216ae:	d004      	beq.n	80216ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	681b      	ldr	r3, [r3, #0]
 80216b4:	4a13      	ldr	r2, [pc, #76]	; (8021704 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80216b6:	4293      	cmp	r3, r2
 80216b8:	d10c      	bne.n	80216d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80216ba:	68bb      	ldr	r3, [r7, #8]
 80216bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80216c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80216c2:	683b      	ldr	r3, [r7, #0]
 80216c4:	685b      	ldr	r3, [r3, #4]
 80216c6:	68ba      	ldr	r2, [r7, #8]
 80216c8:	4313      	orrs	r3, r2
 80216ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80216cc:	687b      	ldr	r3, [r7, #4]
 80216ce:	681b      	ldr	r3, [r3, #0]
 80216d0:	68ba      	ldr	r2, [r7, #8]
 80216d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80216d4:	687b      	ldr	r3, [r7, #4]
 80216d6:	2201      	movs	r2, #1
 80216d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80216dc:	687b      	ldr	r3, [r7, #4]
 80216de:	2200      	movs	r2, #0
 80216e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80216e4:	2300      	movs	r3, #0
}
 80216e6:	4618      	mov	r0, r3
 80216e8:	3714      	adds	r7, #20
 80216ea:	46bd      	mov	sp, r7
 80216ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216f0:	4770      	bx	lr
 80216f2:	bf00      	nop
 80216f4:	40010000 	.word	0x40010000
 80216f8:	40000400 	.word	0x40000400
 80216fc:	40000800 	.word	0x40000800
 8021700:	40000c00 	.word	0x40000c00
 8021704:	40014000 	.word	0x40014000

08021708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8021708:	b480      	push	{r7}
 802170a:	b083      	sub	sp, #12
 802170c:	af00      	add	r7, sp, #0
 802170e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8021710:	bf00      	nop
 8021712:	370c      	adds	r7, #12
 8021714:	46bd      	mov	sp, r7
 8021716:	f85d 7b04 	ldr.w	r7, [sp], #4
 802171a:	4770      	bx	lr

0802171c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802171c:	b480      	push	{r7}
 802171e:	b083      	sub	sp, #12
 8021720:	af00      	add	r7, sp, #0
 8021722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8021724:	bf00      	nop
 8021726:	370c      	adds	r7, #12
 8021728:	46bd      	mov	sp, r7
 802172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802172e:	4770      	bx	lr

08021730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021730:	b580      	push	{r7, lr}
 8021732:	b082      	sub	sp, #8
 8021734:	af00      	add	r7, sp, #0
 8021736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021738:	687b      	ldr	r3, [r7, #4]
 802173a:	2b00      	cmp	r3, #0
 802173c:	d101      	bne.n	8021742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802173e:	2301      	movs	r3, #1
 8021740:	e03f      	b.n	80217c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8021742:	687b      	ldr	r3, [r7, #4]
 8021744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021748:	b2db      	uxtb	r3, r3
 802174a:	2b00      	cmp	r3, #0
 802174c:	d106      	bne.n	802175c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802174e:	687b      	ldr	r3, [r7, #4]
 8021750:	2200      	movs	r2, #0
 8021752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8021756:	6878      	ldr	r0, [r7, #4]
 8021758:	f7e1 ffb4 	bl	80036c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802175c:	687b      	ldr	r3, [r7, #4]
 802175e:	2224      	movs	r2, #36	; 0x24
 8021760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8021764:	687b      	ldr	r3, [r7, #4]
 8021766:	681b      	ldr	r3, [r3, #0]
 8021768:	68da      	ldr	r2, [r3, #12]
 802176a:	687b      	ldr	r3, [r7, #4]
 802176c:	681b      	ldr	r3, [r3, #0]
 802176e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8021772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8021774:	6878      	ldr	r0, [r7, #4]
 8021776:	f000 fec7 	bl	8022508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802177a:	687b      	ldr	r3, [r7, #4]
 802177c:	681b      	ldr	r3, [r3, #0]
 802177e:	691a      	ldr	r2, [r3, #16]
 8021780:	687b      	ldr	r3, [r7, #4]
 8021782:	681b      	ldr	r3, [r3, #0]
 8021784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8021788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802178a:	687b      	ldr	r3, [r7, #4]
 802178c:	681b      	ldr	r3, [r3, #0]
 802178e:	695a      	ldr	r2, [r3, #20]
 8021790:	687b      	ldr	r3, [r7, #4]
 8021792:	681b      	ldr	r3, [r3, #0]
 8021794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8021798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802179a:	687b      	ldr	r3, [r7, #4]
 802179c:	681b      	ldr	r3, [r3, #0]
 802179e:	68da      	ldr	r2, [r3, #12]
 80217a0:	687b      	ldr	r3, [r7, #4]
 80217a2:	681b      	ldr	r3, [r3, #0]
 80217a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80217a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80217aa:	687b      	ldr	r3, [r7, #4]
 80217ac:	2200      	movs	r2, #0
 80217ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80217b0:	687b      	ldr	r3, [r7, #4]
 80217b2:	2220      	movs	r2, #32
 80217b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80217b8:	687b      	ldr	r3, [r7, #4]
 80217ba:	2220      	movs	r2, #32
 80217bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80217c0:	2300      	movs	r3, #0
}
 80217c2:	4618      	mov	r0, r3
 80217c4:	3708      	adds	r7, #8
 80217c6:	46bd      	mov	sp, r7
 80217c8:	bd80      	pop	{r7, pc}

080217ca <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80217ca:	b580      	push	{r7, lr}
 80217cc:	b082      	sub	sp, #8
 80217ce:	af00      	add	r7, sp, #0
 80217d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80217d2:	687b      	ldr	r3, [r7, #4]
 80217d4:	2b00      	cmp	r3, #0
 80217d6:	d101      	bne.n	80217dc <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80217d8:	2301      	movs	r3, #1
 80217da:	e021      	b.n	8021820 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80217dc:	687b      	ldr	r3, [r7, #4]
 80217de:	2224      	movs	r2, #36	; 0x24
 80217e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80217e4:	687b      	ldr	r3, [r7, #4]
 80217e6:	681b      	ldr	r3, [r3, #0]
 80217e8:	68da      	ldr	r2, [r3, #12]
 80217ea:	687b      	ldr	r3, [r7, #4]
 80217ec:	681b      	ldr	r3, [r3, #0]
 80217ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80217f2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80217f4:	6878      	ldr	r0, [r7, #4]
 80217f6:	f7e2 f82f 	bl	8003858 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80217fa:	687b      	ldr	r3, [r7, #4]
 80217fc:	2200      	movs	r2, #0
 80217fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8021800:	687b      	ldr	r3, [r7, #4]
 8021802:	2200      	movs	r2, #0
 8021804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8021808:	687b      	ldr	r3, [r7, #4]
 802180a:	2200      	movs	r2, #0
 802180c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021810:	687b      	ldr	r3, [r7, #4]
 8021812:	2200      	movs	r2, #0
 8021814:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8021816:	687b      	ldr	r3, [r7, #4]
 8021818:	2200      	movs	r2, #0
 802181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802181e:	2300      	movs	r3, #0
}
 8021820:	4618      	mov	r0, r3
 8021822:	3708      	adds	r7, #8
 8021824:	46bd      	mov	sp, r7
 8021826:	bd80      	pop	{r7, pc}

08021828 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8021828:	b480      	push	{r7}
 802182a:	b085      	sub	sp, #20
 802182c:	af00      	add	r7, sp, #0
 802182e:	60f8      	str	r0, [r7, #12]
 8021830:	60b9      	str	r1, [r7, #8]
 8021832:	4613      	mov	r3, r2
 8021834:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8021836:	68fb      	ldr	r3, [r7, #12]
 8021838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802183c:	b2db      	uxtb	r3, r3
 802183e:	2b20      	cmp	r3, #32
 8021840:	d130      	bne.n	80218a4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8021842:	68bb      	ldr	r3, [r7, #8]
 8021844:	2b00      	cmp	r3, #0
 8021846:	d002      	beq.n	802184e <HAL_UART_Transmit_IT+0x26>
 8021848:	88fb      	ldrh	r3, [r7, #6]
 802184a:	2b00      	cmp	r3, #0
 802184c:	d101      	bne.n	8021852 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 802184e:	2301      	movs	r3, #1
 8021850:	e029      	b.n	80218a6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8021852:	68fb      	ldr	r3, [r7, #12]
 8021854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021858:	2b01      	cmp	r3, #1
 802185a:	d101      	bne.n	8021860 <HAL_UART_Transmit_IT+0x38>
 802185c:	2302      	movs	r3, #2
 802185e:	e022      	b.n	80218a6 <HAL_UART_Transmit_IT+0x7e>
 8021860:	68fb      	ldr	r3, [r7, #12]
 8021862:	2201      	movs	r2, #1
 8021864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8021868:	68fb      	ldr	r3, [r7, #12]
 802186a:	68ba      	ldr	r2, [r7, #8]
 802186c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 802186e:	68fb      	ldr	r3, [r7, #12]
 8021870:	88fa      	ldrh	r2, [r7, #6]
 8021872:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8021874:	68fb      	ldr	r3, [r7, #12]
 8021876:	88fa      	ldrh	r2, [r7, #6]
 8021878:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802187a:	68fb      	ldr	r3, [r7, #12]
 802187c:	2200      	movs	r2, #0
 802187e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8021880:	68fb      	ldr	r3, [r7, #12]
 8021882:	2221      	movs	r2, #33	; 0x21
 8021884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8021888:	68fb      	ldr	r3, [r7, #12]
 802188a:	2200      	movs	r2, #0
 802188c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8021890:	68fb      	ldr	r3, [r7, #12]
 8021892:	681b      	ldr	r3, [r3, #0]
 8021894:	68da      	ldr	r2, [r3, #12]
 8021896:	68fb      	ldr	r3, [r7, #12]
 8021898:	681b      	ldr	r3, [r3, #0]
 802189a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802189e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80218a0:	2300      	movs	r3, #0
 80218a2:	e000      	b.n	80218a6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80218a4:	2302      	movs	r3, #2
  }
}
 80218a6:	4618      	mov	r0, r3
 80218a8:	3714      	adds	r7, #20
 80218aa:	46bd      	mov	sp, r7
 80218ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218b0:	4770      	bx	lr

080218b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80218b2:	b580      	push	{r7, lr}
 80218b4:	b084      	sub	sp, #16
 80218b6:	af00      	add	r7, sp, #0
 80218b8:	60f8      	str	r0, [r7, #12]
 80218ba:	60b9      	str	r1, [r7, #8]
 80218bc:	4613      	mov	r3, r2
 80218be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80218c0:	68fb      	ldr	r3, [r7, #12]
 80218c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80218c6:	b2db      	uxtb	r3, r3
 80218c8:	2b20      	cmp	r3, #32
 80218ca:	d11d      	bne.n	8021908 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80218cc:	68bb      	ldr	r3, [r7, #8]
 80218ce:	2b00      	cmp	r3, #0
 80218d0:	d002      	beq.n	80218d8 <HAL_UART_Receive_IT+0x26>
 80218d2:	88fb      	ldrh	r3, [r7, #6]
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	d101      	bne.n	80218dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80218d8:	2301      	movs	r3, #1
 80218da:	e016      	b.n	802190a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80218dc:	68fb      	ldr	r3, [r7, #12]
 80218de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80218e2:	2b01      	cmp	r3, #1
 80218e4:	d101      	bne.n	80218ea <HAL_UART_Receive_IT+0x38>
 80218e6:	2302      	movs	r3, #2
 80218e8:	e00f      	b.n	802190a <HAL_UART_Receive_IT+0x58>
 80218ea:	68fb      	ldr	r3, [r7, #12]
 80218ec:	2201      	movs	r2, #1
 80218ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80218f2:	68fb      	ldr	r3, [r7, #12]
 80218f4:	2200      	movs	r2, #0
 80218f6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80218f8:	88fb      	ldrh	r3, [r7, #6]
 80218fa:	461a      	mov	r2, r3
 80218fc:	68b9      	ldr	r1, [r7, #8]
 80218fe:	68f8      	ldr	r0, [r7, #12]
 8021900:	f000 fbca 	bl	8022098 <UART_Start_Receive_IT>
 8021904:	4603      	mov	r3, r0
 8021906:	e000      	b.n	802190a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8021908:	2302      	movs	r3, #2
  }
}
 802190a:	4618      	mov	r0, r3
 802190c:	3710      	adds	r7, #16
 802190e:	46bd      	mov	sp, r7
 8021910:	bd80      	pop	{r7, pc}
	...

08021914 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8021914:	b580      	push	{r7, lr}
 8021916:	b0a2      	sub	sp, #136	; 0x88
 8021918:	af00      	add	r7, sp, #0
 802191a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 802191c:	2301      	movs	r3, #1
 802191e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8021922:	687b      	ldr	r3, [r7, #4]
 8021924:	681b      	ldr	r3, [r3, #0]
 8021926:	330c      	adds	r3, #12
 8021928:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802192a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802192c:	e853 3f00 	ldrex	r3, [r3]
 8021930:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8021932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021934:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8021938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802193c:	687b      	ldr	r3, [r7, #4]
 802193e:	681b      	ldr	r3, [r3, #0]
 8021940:	330c      	adds	r3, #12
 8021942:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8021946:	66fa      	str	r2, [r7, #108]	; 0x6c
 8021948:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802194a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 802194c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802194e:	e841 2300 	strex	r3, r2, [r1]
 8021952:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8021954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021956:	2b00      	cmp	r3, #0
 8021958:	d1e3      	bne.n	8021922 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802195a:	687b      	ldr	r3, [r7, #4]
 802195c:	681b      	ldr	r3, [r3, #0]
 802195e:	3314      	adds	r3, #20
 8021960:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021964:	e853 3f00 	ldrex	r3, [r3]
 8021968:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802196a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802196c:	f023 0301 	bic.w	r3, r3, #1
 8021970:	67fb      	str	r3, [r7, #124]	; 0x7c
 8021972:	687b      	ldr	r3, [r7, #4]
 8021974:	681b      	ldr	r3, [r3, #0]
 8021976:	3314      	adds	r3, #20
 8021978:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 802197a:	65ba      	str	r2, [r7, #88]	; 0x58
 802197c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802197e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8021980:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8021982:	e841 2300 	strex	r3, r2, [r1]
 8021986:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8021988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802198a:	2b00      	cmp	r3, #0
 802198c:	d1e5      	bne.n	802195a <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802198e:	687b      	ldr	r3, [r7, #4]
 8021990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021992:	2b01      	cmp	r3, #1
 8021994:	d119      	bne.n	80219ca <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8021996:	687b      	ldr	r3, [r7, #4]
 8021998:	681b      	ldr	r3, [r3, #0]
 802199a:	330c      	adds	r3, #12
 802199c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802199e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80219a0:	e853 3f00 	ldrex	r3, [r3]
 80219a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80219a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80219a8:	f023 0310 	bic.w	r3, r3, #16
 80219ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80219ae:	687b      	ldr	r3, [r7, #4]
 80219b0:	681b      	ldr	r3, [r3, #0]
 80219b2:	330c      	adds	r3, #12
 80219b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80219b6:	647a      	str	r2, [r7, #68]	; 0x44
 80219b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80219ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80219bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80219be:	e841 2300 	strex	r3, r2, [r1]
 80219c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80219c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80219c6:	2b00      	cmp	r3, #0
 80219c8:	d1e5      	bne.n	8021996 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80219ca:	687b      	ldr	r3, [r7, #4]
 80219cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80219ce:	2b00      	cmp	r3, #0
 80219d0:	d00f      	beq.n	80219f2 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80219d2:	687b      	ldr	r3, [r7, #4]
 80219d4:	681b      	ldr	r3, [r3, #0]
 80219d6:	695b      	ldr	r3, [r3, #20]
 80219d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80219dc:	2b80      	cmp	r3, #128	; 0x80
 80219de:	d104      	bne.n	80219ea <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80219e0:	687b      	ldr	r3, [r7, #4]
 80219e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80219e4:	4a53      	ldr	r2, [pc, #332]	; (8021b34 <HAL_UART_Abort_IT+0x220>)
 80219e6:	651a      	str	r2, [r3, #80]	; 0x50
 80219e8:	e003      	b.n	80219f2 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80219ea:	687b      	ldr	r3, [r7, #4]
 80219ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80219ee:	2200      	movs	r2, #0
 80219f0:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80219f2:	687b      	ldr	r3, [r7, #4]
 80219f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80219f6:	2b00      	cmp	r3, #0
 80219f8:	d00f      	beq.n	8021a1a <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80219fa:	687b      	ldr	r3, [r7, #4]
 80219fc:	681b      	ldr	r3, [r3, #0]
 80219fe:	695b      	ldr	r3, [r3, #20]
 8021a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021a04:	2b40      	cmp	r3, #64	; 0x40
 8021a06:	d104      	bne.n	8021a12 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8021a08:	687b      	ldr	r3, [r7, #4]
 8021a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021a0c:	4a4a      	ldr	r2, [pc, #296]	; (8021b38 <HAL_UART_Abort_IT+0x224>)
 8021a0e:	651a      	str	r2, [r3, #80]	; 0x50
 8021a10:	e003      	b.n	8021a1a <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8021a12:	687b      	ldr	r3, [r7, #4]
 8021a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021a16:	2200      	movs	r2, #0
 8021a18:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8021a1a:	687b      	ldr	r3, [r7, #4]
 8021a1c:	681b      	ldr	r3, [r3, #0]
 8021a1e:	695b      	ldr	r3, [r3, #20]
 8021a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021a24:	2b80      	cmp	r3, #128	; 0x80
 8021a26:	d12d      	bne.n	8021a84 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8021a28:	687b      	ldr	r3, [r7, #4]
 8021a2a:	681b      	ldr	r3, [r3, #0]
 8021a2c:	3314      	adds	r3, #20
 8021a2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a32:	e853 3f00 	ldrex	r3, [r3]
 8021a36:	623b      	str	r3, [r7, #32]
   return(result);
 8021a38:	6a3b      	ldr	r3, [r7, #32]
 8021a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021a3e:	677b      	str	r3, [r7, #116]	; 0x74
 8021a40:	687b      	ldr	r3, [r7, #4]
 8021a42:	681b      	ldr	r3, [r3, #0]
 8021a44:	3314      	adds	r3, #20
 8021a46:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8021a48:	633a      	str	r2, [r7, #48]	; 0x30
 8021a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021a4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021a50:	e841 2300 	strex	r3, r2, [r1]
 8021a54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8021a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d1e5      	bne.n	8021a28 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8021a5c:	687b      	ldr	r3, [r7, #4]
 8021a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021a60:	2b00      	cmp	r3, #0
 8021a62:	d00f      	beq.n	8021a84 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8021a64:	687b      	ldr	r3, [r7, #4]
 8021a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021a68:	4618      	mov	r0, r3
 8021a6a:	f7fa fcdf 	bl	801c42c <HAL_DMA_Abort_IT>
 8021a6e:	4603      	mov	r3, r0
 8021a70:	2b00      	cmp	r3, #0
 8021a72:	d004      	beq.n	8021a7e <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8021a74:	687b      	ldr	r3, [r7, #4]
 8021a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021a78:	2200      	movs	r2, #0
 8021a7a:	651a      	str	r2, [r3, #80]	; 0x50
 8021a7c:	e002      	b.n	8021a84 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8021a7e:	2300      	movs	r3, #0
 8021a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021a84:	687b      	ldr	r3, [r7, #4]
 8021a86:	681b      	ldr	r3, [r3, #0]
 8021a88:	695b      	ldr	r3, [r3, #20]
 8021a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021a8e:	2b40      	cmp	r3, #64	; 0x40
 8021a90:	d130      	bne.n	8021af4 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8021a92:	687b      	ldr	r3, [r7, #4]
 8021a94:	681b      	ldr	r3, [r3, #0]
 8021a96:	3314      	adds	r3, #20
 8021a98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021a9a:	693b      	ldr	r3, [r7, #16]
 8021a9c:	e853 3f00 	ldrex	r3, [r3]
 8021aa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8021aa2:	68fb      	ldr	r3, [r7, #12]
 8021aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021aa8:	673b      	str	r3, [r7, #112]	; 0x70
 8021aaa:	687b      	ldr	r3, [r7, #4]
 8021aac:	681b      	ldr	r3, [r3, #0]
 8021aae:	3314      	adds	r3, #20
 8021ab0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8021ab2:	61fa      	str	r2, [r7, #28]
 8021ab4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021ab6:	69b9      	ldr	r1, [r7, #24]
 8021ab8:	69fa      	ldr	r2, [r7, #28]
 8021aba:	e841 2300 	strex	r3, r2, [r1]
 8021abe:	617b      	str	r3, [r7, #20]
   return(result);
 8021ac0:	697b      	ldr	r3, [r7, #20]
 8021ac2:	2b00      	cmp	r3, #0
 8021ac4:	d1e5      	bne.n	8021a92 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8021ac6:	687b      	ldr	r3, [r7, #4]
 8021ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021aca:	2b00      	cmp	r3, #0
 8021acc:	d012      	beq.n	8021af4 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8021ace:	687b      	ldr	r3, [r7, #4]
 8021ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021ad2:	4618      	mov	r0, r3
 8021ad4:	f7fa fcaa 	bl	801c42c <HAL_DMA_Abort_IT>
 8021ad8:	4603      	mov	r3, r0
 8021ada:	2b00      	cmp	r3, #0
 8021adc:	d007      	beq.n	8021aee <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8021ade:	687b      	ldr	r3, [r7, #4]
 8021ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021ae2:	2200      	movs	r2, #0
 8021ae4:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8021ae6:	2301      	movs	r3, #1
 8021ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8021aec:	e002      	b.n	8021af4 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8021aee:	2300      	movs	r3, #0
 8021af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8021af4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021af8:	2b01      	cmp	r3, #1
 8021afa:	d116      	bne.n	8021b2a <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8021afc:	687b      	ldr	r3, [r7, #4]
 8021afe:	2200      	movs	r2, #0
 8021b00:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8021b02:	687b      	ldr	r3, [r7, #4]
 8021b04:	2200      	movs	r2, #0
 8021b06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021b08:	687b      	ldr	r3, [r7, #4]
 8021b0a:	2200      	movs	r2, #0
 8021b0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8021b0e:	687b      	ldr	r3, [r7, #4]
 8021b10:	2220      	movs	r2, #32
 8021b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8021b16:	687b      	ldr	r3, [r7, #4]
 8021b18:	2220      	movs	r2, #32
 8021b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021b1e:	687b      	ldr	r3, [r7, #4]
 8021b20:	2200      	movs	r2, #0
 8021b22:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8021b24:	6878      	ldr	r0, [r7, #4]
 8021b26:	f000 faa1 	bl	802206c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8021b2a:	2300      	movs	r3, #0
}
 8021b2c:	4618      	mov	r0, r3
 8021b2e:	3788      	adds	r7, #136	; 0x88
 8021b30:	46bd      	mov	sp, r7
 8021b32:	bd80      	pop	{r7, pc}
 8021b34:	08022203 	.word	0x08022203
 8021b38:	08022263 	.word	0x08022263

08021b3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8021b3c:	b580      	push	{r7, lr}
 8021b3e:	b0ba      	sub	sp, #232	; 0xe8
 8021b40:	af00      	add	r7, sp, #0
 8021b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8021b44:	687b      	ldr	r3, [r7, #4]
 8021b46:	681b      	ldr	r3, [r3, #0]
 8021b48:	681b      	ldr	r3, [r3, #0]
 8021b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8021b4e:	687b      	ldr	r3, [r7, #4]
 8021b50:	681b      	ldr	r3, [r3, #0]
 8021b52:	68db      	ldr	r3, [r3, #12]
 8021b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8021b58:	687b      	ldr	r3, [r7, #4]
 8021b5a:	681b      	ldr	r3, [r3, #0]
 8021b5c:	695b      	ldr	r3, [r3, #20]
 8021b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8021b62:	2300      	movs	r3, #0
 8021b64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8021b68:	2300      	movs	r3, #0
 8021b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8021b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021b72:	f003 030f 	and.w	r3, r3, #15
 8021b76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8021b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8021b7e:	2b00      	cmp	r3, #0
 8021b80:	d10f      	bne.n	8021ba2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8021b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021b86:	f003 0320 	and.w	r3, r3, #32
 8021b8a:	2b00      	cmp	r3, #0
 8021b8c:	d009      	beq.n	8021ba2 <HAL_UART_IRQHandler+0x66>
 8021b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021b92:	f003 0320 	and.w	r3, r3, #32
 8021b96:	2b00      	cmp	r3, #0
 8021b98:	d003      	beq.n	8021ba2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8021b9a:	6878      	ldr	r0, [r7, #4]
 8021b9c:	f000 fbf9 	bl	8022392 <UART_Receive_IT>
      return;
 8021ba0:	e256      	b.n	8022050 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8021ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8021ba6:	2b00      	cmp	r3, #0
 8021ba8:	f000 80de 	beq.w	8021d68 <HAL_UART_IRQHandler+0x22c>
 8021bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8021bb0:	f003 0301 	and.w	r3, r3, #1
 8021bb4:	2b00      	cmp	r3, #0
 8021bb6:	d106      	bne.n	8021bc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8021bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021bbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8021bc0:	2b00      	cmp	r3, #0
 8021bc2:	f000 80d1 	beq.w	8021d68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8021bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021bca:	f003 0301 	and.w	r3, r3, #1
 8021bce:	2b00      	cmp	r3, #0
 8021bd0:	d00b      	beq.n	8021bea <HAL_UART_IRQHandler+0xae>
 8021bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021bda:	2b00      	cmp	r3, #0
 8021bdc:	d005      	beq.n	8021bea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8021bde:	687b      	ldr	r3, [r7, #4]
 8021be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021be2:	f043 0201 	orr.w	r2, r3, #1
 8021be6:	687b      	ldr	r3, [r7, #4]
 8021be8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021bee:	f003 0304 	and.w	r3, r3, #4
 8021bf2:	2b00      	cmp	r3, #0
 8021bf4:	d00b      	beq.n	8021c0e <HAL_UART_IRQHandler+0xd2>
 8021bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8021bfa:	f003 0301 	and.w	r3, r3, #1
 8021bfe:	2b00      	cmp	r3, #0
 8021c00:	d005      	beq.n	8021c0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8021c02:	687b      	ldr	r3, [r7, #4]
 8021c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c06:	f043 0202 	orr.w	r2, r3, #2
 8021c0a:	687b      	ldr	r3, [r7, #4]
 8021c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021c12:	f003 0302 	and.w	r3, r3, #2
 8021c16:	2b00      	cmp	r3, #0
 8021c18:	d00b      	beq.n	8021c32 <HAL_UART_IRQHandler+0xf6>
 8021c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8021c1e:	f003 0301 	and.w	r3, r3, #1
 8021c22:	2b00      	cmp	r3, #0
 8021c24:	d005      	beq.n	8021c32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8021c26:	687b      	ldr	r3, [r7, #4]
 8021c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c2a:	f043 0204 	orr.w	r2, r3, #4
 8021c2e:	687b      	ldr	r3, [r7, #4]
 8021c30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8021c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021c36:	f003 0308 	and.w	r3, r3, #8
 8021c3a:	2b00      	cmp	r3, #0
 8021c3c:	d011      	beq.n	8021c62 <HAL_UART_IRQHandler+0x126>
 8021c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021c42:	f003 0320 	and.w	r3, r3, #32
 8021c46:	2b00      	cmp	r3, #0
 8021c48:	d105      	bne.n	8021c56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8021c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8021c4e:	f003 0301 	and.w	r3, r3, #1
 8021c52:	2b00      	cmp	r3, #0
 8021c54:	d005      	beq.n	8021c62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c5a:	f043 0208 	orr.w	r2, r3, #8
 8021c5e:	687b      	ldr	r3, [r7, #4]
 8021c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8021c62:	687b      	ldr	r3, [r7, #4]
 8021c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c66:	2b00      	cmp	r3, #0
 8021c68:	f000 81ed 	beq.w	8022046 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8021c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021c70:	f003 0320 	and.w	r3, r3, #32
 8021c74:	2b00      	cmp	r3, #0
 8021c76:	d008      	beq.n	8021c8a <HAL_UART_IRQHandler+0x14e>
 8021c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021c7c:	f003 0320 	and.w	r3, r3, #32
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	d002      	beq.n	8021c8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8021c84:	6878      	ldr	r0, [r7, #4]
 8021c86:	f000 fb84 	bl	8022392 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8021c8a:	687b      	ldr	r3, [r7, #4]
 8021c8c:	681b      	ldr	r3, [r3, #0]
 8021c8e:	695b      	ldr	r3, [r3, #20]
 8021c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021c94:	2b40      	cmp	r3, #64	; 0x40
 8021c96:	bf0c      	ite	eq
 8021c98:	2301      	moveq	r3, #1
 8021c9a:	2300      	movne	r3, #0
 8021c9c:	b2db      	uxtb	r3, r3
 8021c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8021ca2:	687b      	ldr	r3, [r7, #4]
 8021ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ca6:	f003 0308 	and.w	r3, r3, #8
 8021caa:	2b00      	cmp	r3, #0
 8021cac:	d103      	bne.n	8021cb6 <HAL_UART_IRQHandler+0x17a>
 8021cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8021cb2:	2b00      	cmp	r3, #0
 8021cb4:	d04f      	beq.n	8021d56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8021cb6:	6878      	ldr	r0, [r7, #4]
 8021cb8:	f000 fa2c 	bl	8022114 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021cbc:	687b      	ldr	r3, [r7, #4]
 8021cbe:	681b      	ldr	r3, [r3, #0]
 8021cc0:	695b      	ldr	r3, [r3, #20]
 8021cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021cc6:	2b40      	cmp	r3, #64	; 0x40
 8021cc8:	d141      	bne.n	8021d4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8021cca:	687b      	ldr	r3, [r7, #4]
 8021ccc:	681b      	ldr	r3, [r3, #0]
 8021cce:	3314      	adds	r3, #20
 8021cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021cd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8021cd8:	e853 3f00 	ldrex	r3, [r3]
 8021cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8021ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8021ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8021cec:	687b      	ldr	r3, [r7, #4]
 8021cee:	681b      	ldr	r3, [r3, #0]
 8021cf0:	3314      	adds	r3, #20
 8021cf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8021cf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8021cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021cfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8021d02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8021d06:	e841 2300 	strex	r3, r2, [r1]
 8021d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8021d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8021d12:	2b00      	cmp	r3, #0
 8021d14:	d1d9      	bne.n	8021cca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8021d16:	687b      	ldr	r3, [r7, #4]
 8021d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021d1a:	2b00      	cmp	r3, #0
 8021d1c:	d013      	beq.n	8021d46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8021d1e:	687b      	ldr	r3, [r7, #4]
 8021d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021d22:	4a7d      	ldr	r2, [pc, #500]	; (8021f18 <HAL_UART_IRQHandler+0x3dc>)
 8021d24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8021d26:	687b      	ldr	r3, [r7, #4]
 8021d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021d2a:	4618      	mov	r0, r3
 8021d2c:	f7fa fb7e 	bl	801c42c <HAL_DMA_Abort_IT>
 8021d30:	4603      	mov	r3, r0
 8021d32:	2b00      	cmp	r3, #0
 8021d34:	d016      	beq.n	8021d64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8021d36:	687b      	ldr	r3, [r7, #4]
 8021d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021d3c:	687a      	ldr	r2, [r7, #4]
 8021d3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8021d40:	4610      	mov	r0, r2
 8021d42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021d44:	e00e      	b.n	8021d64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8021d46:	6878      	ldr	r0, [r7, #4]
 8021d48:	f000 f986 	bl	8022058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021d4c:	e00a      	b.n	8021d64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8021d4e:	6878      	ldr	r0, [r7, #4]
 8021d50:	f000 f982 	bl	8022058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021d54:	e006      	b.n	8021d64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8021d56:	6878      	ldr	r0, [r7, #4]
 8021d58:	f000 f97e 	bl	8022058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021d5c:	687b      	ldr	r3, [r7, #4]
 8021d5e:	2200      	movs	r2, #0
 8021d60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8021d62:	e170      	b.n	8022046 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021d64:	bf00      	nop
    return;
 8021d66:	e16e      	b.n	8022046 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021d68:	687b      	ldr	r3, [r7, #4]
 8021d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d6c:	2b01      	cmp	r3, #1
 8021d6e:	f040 814a 	bne.w	8022006 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8021d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021d76:	f003 0310 	and.w	r3, r3, #16
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	f000 8143 	beq.w	8022006 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8021d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021d84:	f003 0310 	and.w	r3, r3, #16
 8021d88:	2b00      	cmp	r3, #0
 8021d8a:	f000 813c 	beq.w	8022006 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8021d8e:	2300      	movs	r3, #0
 8021d90:	60bb      	str	r3, [r7, #8]
 8021d92:	687b      	ldr	r3, [r7, #4]
 8021d94:	681b      	ldr	r3, [r3, #0]
 8021d96:	681b      	ldr	r3, [r3, #0]
 8021d98:	60bb      	str	r3, [r7, #8]
 8021d9a:	687b      	ldr	r3, [r7, #4]
 8021d9c:	681b      	ldr	r3, [r3, #0]
 8021d9e:	685b      	ldr	r3, [r3, #4]
 8021da0:	60bb      	str	r3, [r7, #8]
 8021da2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	681b      	ldr	r3, [r3, #0]
 8021da8:	695b      	ldr	r3, [r3, #20]
 8021daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021dae:	2b40      	cmp	r3, #64	; 0x40
 8021db0:	f040 80b4 	bne.w	8021f1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021db8:	681b      	ldr	r3, [r3, #0]
 8021dba:	685b      	ldr	r3, [r3, #4]
 8021dbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8021dc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8021dc4:	2b00      	cmp	r3, #0
 8021dc6:	f000 8140 	beq.w	802204a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8021dca:	687b      	ldr	r3, [r7, #4]
 8021dcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8021dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8021dd2:	429a      	cmp	r2, r3
 8021dd4:	f080 8139 	bcs.w	802204a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8021dd8:	687b      	ldr	r3, [r7, #4]
 8021dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8021dde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8021de0:	687b      	ldr	r3, [r7, #4]
 8021de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021de4:	69db      	ldr	r3, [r3, #28]
 8021de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021dea:	f000 8088 	beq.w	8021efe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8021dee:	687b      	ldr	r3, [r7, #4]
 8021df0:	681b      	ldr	r3, [r3, #0]
 8021df2:	330c      	adds	r3, #12
 8021df4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021df8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021dfc:	e853 3f00 	ldrex	r3, [r3]
 8021e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8021e04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8021e10:	687b      	ldr	r3, [r7, #4]
 8021e12:	681b      	ldr	r3, [r3, #0]
 8021e14:	330c      	adds	r3, #12
 8021e16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8021e1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8021e1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021e22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8021e26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8021e2a:	e841 2300 	strex	r3, r2, [r1]
 8021e2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8021e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021e36:	2b00      	cmp	r3, #0
 8021e38:	d1d9      	bne.n	8021dee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021e3a:	687b      	ldr	r3, [r7, #4]
 8021e3c:	681b      	ldr	r3, [r3, #0]
 8021e3e:	3314      	adds	r3, #20
 8021e40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021e44:	e853 3f00 	ldrex	r3, [r3]
 8021e48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8021e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021e4c:	f023 0301 	bic.w	r3, r3, #1
 8021e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8021e54:	687b      	ldr	r3, [r7, #4]
 8021e56:	681b      	ldr	r3, [r3, #0]
 8021e58:	3314      	adds	r3, #20
 8021e5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8021e5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8021e62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021e64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8021e66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8021e6a:	e841 2300 	strex	r3, r2, [r1]
 8021e6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8021e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d1e1      	bne.n	8021e3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	681b      	ldr	r3, [r3, #0]
 8021e7a:	3314      	adds	r3, #20
 8021e7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021e80:	e853 3f00 	ldrex	r3, [r3]
 8021e84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8021e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8021e90:	687b      	ldr	r3, [r7, #4]
 8021e92:	681b      	ldr	r3, [r3, #0]
 8021e94:	3314      	adds	r3, #20
 8021e96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8021e9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8021e9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021e9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8021ea0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8021ea2:	e841 2300 	strex	r3, r2, [r1]
 8021ea6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8021ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021eaa:	2b00      	cmp	r3, #0
 8021eac:	d1e3      	bne.n	8021e76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8021eae:	687b      	ldr	r3, [r7, #4]
 8021eb0:	2220      	movs	r2, #32
 8021eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	2200      	movs	r2, #0
 8021eba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021ebc:	687b      	ldr	r3, [r7, #4]
 8021ebe:	681b      	ldr	r3, [r3, #0]
 8021ec0:	330c      	adds	r3, #12
 8021ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021ec6:	e853 3f00 	ldrex	r3, [r3]
 8021eca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8021ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021ece:	f023 0310 	bic.w	r3, r3, #16
 8021ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8021ed6:	687b      	ldr	r3, [r7, #4]
 8021ed8:	681b      	ldr	r3, [r3, #0]
 8021eda:	330c      	adds	r3, #12
 8021edc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8021ee0:	65ba      	str	r2, [r7, #88]	; 0x58
 8021ee2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021ee4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8021ee6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8021ee8:	e841 2300 	strex	r3, r2, [r1]
 8021eec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8021eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021ef0:	2b00      	cmp	r3, #0
 8021ef2:	d1e3      	bne.n	8021ebc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8021ef4:	687b      	ldr	r3, [r7, #4]
 8021ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021ef8:	4618      	mov	r0, r3
 8021efa:	f7fa fa27 	bl	801c34c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8021efe:	687b      	ldr	r3, [r7, #4]
 8021f00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8021f02:	687b      	ldr	r3, [r7, #4]
 8021f04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021f06:	b29b      	uxth	r3, r3
 8021f08:	1ad3      	subs	r3, r2, r3
 8021f0a:	b29b      	uxth	r3, r3
 8021f0c:	4619      	mov	r1, r3
 8021f0e:	6878      	ldr	r0, [r7, #4]
 8021f10:	f000 f8b6 	bl	8022080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8021f14:	e099      	b.n	802204a <HAL_UART_IRQHandler+0x50e>
 8021f16:	bf00      	nop
 8021f18:	080221db 	.word	0x080221db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8021f1c:	687b      	ldr	r3, [r7, #4]
 8021f1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8021f20:	687b      	ldr	r3, [r7, #4]
 8021f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021f24:	b29b      	uxth	r3, r3
 8021f26:	1ad3      	subs	r3, r2, r3
 8021f28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8021f2c:	687b      	ldr	r3, [r7, #4]
 8021f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021f30:	b29b      	uxth	r3, r3
 8021f32:	2b00      	cmp	r3, #0
 8021f34:	f000 808b 	beq.w	802204e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8021f38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8021f3c:	2b00      	cmp	r3, #0
 8021f3e:	f000 8086 	beq.w	802204e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8021f42:	687b      	ldr	r3, [r7, #4]
 8021f44:	681b      	ldr	r3, [r3, #0]
 8021f46:	330c      	adds	r3, #12
 8021f48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021f4c:	e853 3f00 	ldrex	r3, [r3]
 8021f50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8021f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021f54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8021f58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8021f5c:	687b      	ldr	r3, [r7, #4]
 8021f5e:	681b      	ldr	r3, [r3, #0]
 8021f60:	330c      	adds	r3, #12
 8021f62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8021f66:	647a      	str	r2, [r7, #68]	; 0x44
 8021f68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021f6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8021f6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021f6e:	e841 2300 	strex	r3, r2, [r1]
 8021f72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8021f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021f76:	2b00      	cmp	r3, #0
 8021f78:	d1e3      	bne.n	8021f42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	681b      	ldr	r3, [r3, #0]
 8021f7e:	3314      	adds	r3, #20
 8021f80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f84:	e853 3f00 	ldrex	r3, [r3]
 8021f88:	623b      	str	r3, [r7, #32]
   return(result);
 8021f8a:	6a3b      	ldr	r3, [r7, #32]
 8021f8c:	f023 0301 	bic.w	r3, r3, #1
 8021f90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	681b      	ldr	r3, [r3, #0]
 8021f98:	3314      	adds	r3, #20
 8021f9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8021f9e:	633a      	str	r2, [r7, #48]	; 0x30
 8021fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021fa6:	e841 2300 	strex	r3, r2, [r1]
 8021faa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8021fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021fae:	2b00      	cmp	r3, #0
 8021fb0:	d1e3      	bne.n	8021f7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8021fb2:	687b      	ldr	r3, [r7, #4]
 8021fb4:	2220      	movs	r2, #32
 8021fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021fba:	687b      	ldr	r3, [r7, #4]
 8021fbc:	2200      	movs	r2, #0
 8021fbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021fc0:	687b      	ldr	r3, [r7, #4]
 8021fc2:	681b      	ldr	r3, [r3, #0]
 8021fc4:	330c      	adds	r3, #12
 8021fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021fc8:	693b      	ldr	r3, [r7, #16]
 8021fca:	e853 3f00 	ldrex	r3, [r3]
 8021fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8021fd0:	68fb      	ldr	r3, [r7, #12]
 8021fd2:	f023 0310 	bic.w	r3, r3, #16
 8021fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8021fda:	687b      	ldr	r3, [r7, #4]
 8021fdc:	681b      	ldr	r3, [r3, #0]
 8021fde:	330c      	adds	r3, #12
 8021fe0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8021fe4:	61fa      	str	r2, [r7, #28]
 8021fe6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021fe8:	69b9      	ldr	r1, [r7, #24]
 8021fea:	69fa      	ldr	r2, [r7, #28]
 8021fec:	e841 2300 	strex	r3, r2, [r1]
 8021ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8021ff2:	697b      	ldr	r3, [r7, #20]
 8021ff4:	2b00      	cmp	r3, #0
 8021ff6:	d1e3      	bne.n	8021fc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8021ff8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8021ffc:	4619      	mov	r1, r3
 8021ffe:	6878      	ldr	r0, [r7, #4]
 8022000:	f000 f83e 	bl	8022080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8022004:	e023      	b.n	802204e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8022006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802200a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802200e:	2b00      	cmp	r3, #0
 8022010:	d009      	beq.n	8022026 <HAL_UART_IRQHandler+0x4ea>
 8022012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802201a:	2b00      	cmp	r3, #0
 802201c:	d003      	beq.n	8022026 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 802201e:	6878      	ldr	r0, [r7, #4]
 8022020:	f000 f94f 	bl	80222c2 <UART_Transmit_IT>
    return;
 8022024:	e014      	b.n	8022050 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8022026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802202a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802202e:	2b00      	cmp	r3, #0
 8022030:	d00e      	beq.n	8022050 <HAL_UART_IRQHandler+0x514>
 8022032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802203a:	2b00      	cmp	r3, #0
 802203c:	d008      	beq.n	8022050 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 802203e:	6878      	ldr	r0, [r7, #4]
 8022040:	f000 f98f 	bl	8022362 <UART_EndTransmit_IT>
    return;
 8022044:	e004      	b.n	8022050 <HAL_UART_IRQHandler+0x514>
    return;
 8022046:	bf00      	nop
 8022048:	e002      	b.n	8022050 <HAL_UART_IRQHandler+0x514>
      return;
 802204a:	bf00      	nop
 802204c:	e000      	b.n	8022050 <HAL_UART_IRQHandler+0x514>
      return;
 802204e:	bf00      	nop
  }
}
 8022050:	37e8      	adds	r7, #232	; 0xe8
 8022052:	46bd      	mov	sp, r7
 8022054:	bd80      	pop	{r7, pc}
 8022056:	bf00      	nop

08022058 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8022058:	b480      	push	{r7}
 802205a:	b083      	sub	sp, #12
 802205c:	af00      	add	r7, sp, #0
 802205e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8022060:	bf00      	nop
 8022062:	370c      	adds	r7, #12
 8022064:	46bd      	mov	sp, r7
 8022066:	f85d 7b04 	ldr.w	r7, [sp], #4
 802206a:	4770      	bx	lr

0802206c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 802206c:	b480      	push	{r7}
 802206e:	b083      	sub	sp, #12
 8022070:	af00      	add	r7, sp, #0
 8022072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8022074:	bf00      	nop
 8022076:	370c      	adds	r7, #12
 8022078:	46bd      	mov	sp, r7
 802207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802207e:	4770      	bx	lr

08022080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8022080:	b480      	push	{r7}
 8022082:	b083      	sub	sp, #12
 8022084:	af00      	add	r7, sp, #0
 8022086:	6078      	str	r0, [r7, #4]
 8022088:	460b      	mov	r3, r1
 802208a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 802208c:	bf00      	nop
 802208e:	370c      	adds	r7, #12
 8022090:	46bd      	mov	sp, r7
 8022092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022096:	4770      	bx	lr

08022098 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8022098:	b480      	push	{r7}
 802209a:	b085      	sub	sp, #20
 802209c:	af00      	add	r7, sp, #0
 802209e:	60f8      	str	r0, [r7, #12]
 80220a0:	60b9      	str	r1, [r7, #8]
 80220a2:	4613      	mov	r3, r2
 80220a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80220a6:	68fb      	ldr	r3, [r7, #12]
 80220a8:	68ba      	ldr	r2, [r7, #8]
 80220aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80220ac:	68fb      	ldr	r3, [r7, #12]
 80220ae:	88fa      	ldrh	r2, [r7, #6]
 80220b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80220b2:	68fb      	ldr	r3, [r7, #12]
 80220b4:	88fa      	ldrh	r2, [r7, #6]
 80220b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80220b8:	68fb      	ldr	r3, [r7, #12]
 80220ba:	2200      	movs	r2, #0
 80220bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80220be:	68fb      	ldr	r3, [r7, #12]
 80220c0:	2222      	movs	r2, #34	; 0x22
 80220c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80220c6:	68fb      	ldr	r3, [r7, #12]
 80220c8:	2200      	movs	r2, #0
 80220ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80220ce:	68fb      	ldr	r3, [r7, #12]
 80220d0:	691b      	ldr	r3, [r3, #16]
 80220d2:	2b00      	cmp	r3, #0
 80220d4:	d007      	beq.n	80220e6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80220d6:	68fb      	ldr	r3, [r7, #12]
 80220d8:	681b      	ldr	r3, [r3, #0]
 80220da:	68da      	ldr	r2, [r3, #12]
 80220dc:	68fb      	ldr	r3, [r7, #12]
 80220de:	681b      	ldr	r3, [r3, #0]
 80220e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80220e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80220e6:	68fb      	ldr	r3, [r7, #12]
 80220e8:	681b      	ldr	r3, [r3, #0]
 80220ea:	695a      	ldr	r2, [r3, #20]
 80220ec:	68fb      	ldr	r3, [r7, #12]
 80220ee:	681b      	ldr	r3, [r3, #0]
 80220f0:	f042 0201 	orr.w	r2, r2, #1
 80220f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80220f6:	68fb      	ldr	r3, [r7, #12]
 80220f8:	681b      	ldr	r3, [r3, #0]
 80220fa:	68da      	ldr	r2, [r3, #12]
 80220fc:	68fb      	ldr	r3, [r7, #12]
 80220fe:	681b      	ldr	r3, [r3, #0]
 8022100:	f042 0220 	orr.w	r2, r2, #32
 8022104:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8022106:	2300      	movs	r3, #0
}
 8022108:	4618      	mov	r0, r3
 802210a:	3714      	adds	r7, #20
 802210c:	46bd      	mov	sp, r7
 802210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022112:	4770      	bx	lr

08022114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8022114:	b480      	push	{r7}
 8022116:	b095      	sub	sp, #84	; 0x54
 8022118:	af00      	add	r7, sp, #0
 802211a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802211c:	687b      	ldr	r3, [r7, #4]
 802211e:	681b      	ldr	r3, [r3, #0]
 8022120:	330c      	adds	r3, #12
 8022122:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022126:	e853 3f00 	ldrex	r3, [r3]
 802212a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802212e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8022132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022134:	687b      	ldr	r3, [r7, #4]
 8022136:	681b      	ldr	r3, [r3, #0]
 8022138:	330c      	adds	r3, #12
 802213a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802213c:	643a      	str	r2, [r7, #64]	; 0x40
 802213e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022140:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8022142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8022144:	e841 2300 	strex	r3, r2, [r1]
 8022148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802214a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802214c:	2b00      	cmp	r3, #0
 802214e:	d1e5      	bne.n	802211c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022150:	687b      	ldr	r3, [r7, #4]
 8022152:	681b      	ldr	r3, [r3, #0]
 8022154:	3314      	adds	r3, #20
 8022156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022158:	6a3b      	ldr	r3, [r7, #32]
 802215a:	e853 3f00 	ldrex	r3, [r3]
 802215e:	61fb      	str	r3, [r7, #28]
   return(result);
 8022160:	69fb      	ldr	r3, [r7, #28]
 8022162:	f023 0301 	bic.w	r3, r3, #1
 8022166:	64bb      	str	r3, [r7, #72]	; 0x48
 8022168:	687b      	ldr	r3, [r7, #4]
 802216a:	681b      	ldr	r3, [r3, #0]
 802216c:	3314      	adds	r3, #20
 802216e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8022170:	62fa      	str	r2, [r7, #44]	; 0x2c
 8022172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8022176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022178:	e841 2300 	strex	r3, r2, [r1]
 802217c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022180:	2b00      	cmp	r3, #0
 8022182:	d1e5      	bne.n	8022150 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022184:	687b      	ldr	r3, [r7, #4]
 8022186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022188:	2b01      	cmp	r3, #1
 802218a:	d119      	bne.n	80221c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802218c:	687b      	ldr	r3, [r7, #4]
 802218e:	681b      	ldr	r3, [r3, #0]
 8022190:	330c      	adds	r3, #12
 8022192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022194:	68fb      	ldr	r3, [r7, #12]
 8022196:	e853 3f00 	ldrex	r3, [r3]
 802219a:	60bb      	str	r3, [r7, #8]
   return(result);
 802219c:	68bb      	ldr	r3, [r7, #8]
 802219e:	f023 0310 	bic.w	r3, r3, #16
 80221a2:	647b      	str	r3, [r7, #68]	; 0x44
 80221a4:	687b      	ldr	r3, [r7, #4]
 80221a6:	681b      	ldr	r3, [r3, #0]
 80221a8:	330c      	adds	r3, #12
 80221aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80221ac:	61ba      	str	r2, [r7, #24]
 80221ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80221b0:	6979      	ldr	r1, [r7, #20]
 80221b2:	69ba      	ldr	r2, [r7, #24]
 80221b4:	e841 2300 	strex	r3, r2, [r1]
 80221b8:	613b      	str	r3, [r7, #16]
   return(result);
 80221ba:	693b      	ldr	r3, [r7, #16]
 80221bc:	2b00      	cmp	r3, #0
 80221be:	d1e5      	bne.n	802218c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80221c0:	687b      	ldr	r3, [r7, #4]
 80221c2:	2220      	movs	r2, #32
 80221c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80221c8:	687b      	ldr	r3, [r7, #4]
 80221ca:	2200      	movs	r2, #0
 80221cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80221ce:	bf00      	nop
 80221d0:	3754      	adds	r7, #84	; 0x54
 80221d2:	46bd      	mov	sp, r7
 80221d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221d8:	4770      	bx	lr

080221da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80221da:	b580      	push	{r7, lr}
 80221dc:	b084      	sub	sp, #16
 80221de:	af00      	add	r7, sp, #0
 80221e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80221e2:	687b      	ldr	r3, [r7, #4]
 80221e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80221e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80221e8:	68fb      	ldr	r3, [r7, #12]
 80221ea:	2200      	movs	r2, #0
 80221ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80221ee:	68fb      	ldr	r3, [r7, #12]
 80221f0:	2200      	movs	r2, #0
 80221f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80221f4:	68f8      	ldr	r0, [r7, #12]
 80221f6:	f7ff ff2f 	bl	8022058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80221fa:	bf00      	nop
 80221fc:	3710      	adds	r7, #16
 80221fe:	46bd      	mov	sp, r7
 8022200:	bd80      	pop	{r7, pc}

08022202 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8022202:	b580      	push	{r7, lr}
 8022204:	b084      	sub	sp, #16
 8022206:	af00      	add	r7, sp, #0
 8022208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802220a:	687b      	ldr	r3, [r7, #4]
 802220c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802220e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8022210:	68fb      	ldr	r3, [r7, #12]
 8022212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022214:	2200      	movs	r2, #0
 8022216:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8022218:	68fb      	ldr	r3, [r7, #12]
 802221a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802221c:	2b00      	cmp	r3, #0
 802221e:	d004      	beq.n	802222a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8022220:	68fb      	ldr	r3, [r7, #12]
 8022222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022226:	2b00      	cmp	r3, #0
 8022228:	d117      	bne.n	802225a <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 802222a:	68fb      	ldr	r3, [r7, #12]
 802222c:	2200      	movs	r2, #0
 802222e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8022230:	68fb      	ldr	r3, [r7, #12]
 8022232:	2200      	movs	r2, #0
 8022234:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022236:	68fb      	ldr	r3, [r7, #12]
 8022238:	2200      	movs	r2, #0
 802223a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 802223c:	68fb      	ldr	r3, [r7, #12]
 802223e:	2220      	movs	r2, #32
 8022240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8022244:	68fb      	ldr	r3, [r7, #12]
 8022246:	2220      	movs	r2, #32
 8022248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802224c:	68fb      	ldr	r3, [r7, #12]
 802224e:	2200      	movs	r2, #0
 8022250:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8022252:	68f8      	ldr	r0, [r7, #12]
 8022254:	f7ff ff0a 	bl	802206c <HAL_UART_AbortCpltCallback>
 8022258:	e000      	b.n	802225c <UART_DMATxAbortCallback+0x5a>
      return;
 802225a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802225c:	3710      	adds	r7, #16
 802225e:	46bd      	mov	sp, r7
 8022260:	bd80      	pop	{r7, pc}

08022262 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8022262:	b580      	push	{r7, lr}
 8022264:	b084      	sub	sp, #16
 8022266:	af00      	add	r7, sp, #0
 8022268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802226a:	687b      	ldr	r3, [r7, #4]
 802226c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802226e:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8022270:	68fb      	ldr	r3, [r7, #12]
 8022272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022274:	2200      	movs	r2, #0
 8022276:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8022278:	68fb      	ldr	r3, [r7, #12]
 802227a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802227c:	2b00      	cmp	r3, #0
 802227e:	d004      	beq.n	802228a <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8022280:	68fb      	ldr	r3, [r7, #12]
 8022282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022286:	2b00      	cmp	r3, #0
 8022288:	d117      	bne.n	80222ba <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 802228a:	68fb      	ldr	r3, [r7, #12]
 802228c:	2200      	movs	r2, #0
 802228e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8022290:	68fb      	ldr	r3, [r7, #12]
 8022292:	2200      	movs	r2, #0
 8022294:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022296:	68fb      	ldr	r3, [r7, #12]
 8022298:	2200      	movs	r2, #0
 802229a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 802229c:	68fb      	ldr	r3, [r7, #12]
 802229e:	2220      	movs	r2, #32
 80222a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80222a4:	68fb      	ldr	r3, [r7, #12]
 80222a6:	2220      	movs	r2, #32
 80222a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80222ac:	68fb      	ldr	r3, [r7, #12]
 80222ae:	2200      	movs	r2, #0
 80222b0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80222b2:	68f8      	ldr	r0, [r7, #12]
 80222b4:	f7ff feda 	bl	802206c <HAL_UART_AbortCpltCallback>
 80222b8:	e000      	b.n	80222bc <UART_DMARxAbortCallback+0x5a>
      return;
 80222ba:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80222bc:	3710      	adds	r7, #16
 80222be:	46bd      	mov	sp, r7
 80222c0:	bd80      	pop	{r7, pc}

080222c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80222c2:	b480      	push	{r7}
 80222c4:	b085      	sub	sp, #20
 80222c6:	af00      	add	r7, sp, #0
 80222c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80222ca:	687b      	ldr	r3, [r7, #4]
 80222cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80222d0:	b2db      	uxtb	r3, r3
 80222d2:	2b21      	cmp	r3, #33	; 0x21
 80222d4:	d13e      	bne.n	8022354 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80222d6:	687b      	ldr	r3, [r7, #4]
 80222d8:	689b      	ldr	r3, [r3, #8]
 80222da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80222de:	d114      	bne.n	802230a <UART_Transmit_IT+0x48>
 80222e0:	687b      	ldr	r3, [r7, #4]
 80222e2:	691b      	ldr	r3, [r3, #16]
 80222e4:	2b00      	cmp	r3, #0
 80222e6:	d110      	bne.n	802230a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80222e8:	687b      	ldr	r3, [r7, #4]
 80222ea:	6a1b      	ldr	r3, [r3, #32]
 80222ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80222ee:	68fb      	ldr	r3, [r7, #12]
 80222f0:	881b      	ldrh	r3, [r3, #0]
 80222f2:	461a      	mov	r2, r3
 80222f4:	687b      	ldr	r3, [r7, #4]
 80222f6:	681b      	ldr	r3, [r3, #0]
 80222f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80222fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80222fe:	687b      	ldr	r3, [r7, #4]
 8022300:	6a1b      	ldr	r3, [r3, #32]
 8022302:	1c9a      	adds	r2, r3, #2
 8022304:	687b      	ldr	r3, [r7, #4]
 8022306:	621a      	str	r2, [r3, #32]
 8022308:	e008      	b.n	802231c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802230a:	687b      	ldr	r3, [r7, #4]
 802230c:	6a1b      	ldr	r3, [r3, #32]
 802230e:	1c59      	adds	r1, r3, #1
 8022310:	687a      	ldr	r2, [r7, #4]
 8022312:	6211      	str	r1, [r2, #32]
 8022314:	781a      	ldrb	r2, [r3, #0]
 8022316:	687b      	ldr	r3, [r7, #4]
 8022318:	681b      	ldr	r3, [r3, #0]
 802231a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802231c:	687b      	ldr	r3, [r7, #4]
 802231e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8022320:	b29b      	uxth	r3, r3
 8022322:	3b01      	subs	r3, #1
 8022324:	b29b      	uxth	r3, r3
 8022326:	687a      	ldr	r2, [r7, #4]
 8022328:	4619      	mov	r1, r3
 802232a:	84d1      	strh	r1, [r2, #38]	; 0x26
 802232c:	2b00      	cmp	r3, #0
 802232e:	d10f      	bne.n	8022350 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8022330:	687b      	ldr	r3, [r7, #4]
 8022332:	681b      	ldr	r3, [r3, #0]
 8022334:	68da      	ldr	r2, [r3, #12]
 8022336:	687b      	ldr	r3, [r7, #4]
 8022338:	681b      	ldr	r3, [r3, #0]
 802233a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802233e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8022340:	687b      	ldr	r3, [r7, #4]
 8022342:	681b      	ldr	r3, [r3, #0]
 8022344:	68da      	ldr	r2, [r3, #12]
 8022346:	687b      	ldr	r3, [r7, #4]
 8022348:	681b      	ldr	r3, [r3, #0]
 802234a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802234e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8022350:	2300      	movs	r3, #0
 8022352:	e000      	b.n	8022356 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8022354:	2302      	movs	r3, #2
  }
}
 8022356:	4618      	mov	r0, r3
 8022358:	3714      	adds	r7, #20
 802235a:	46bd      	mov	sp, r7
 802235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022360:	4770      	bx	lr

08022362 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8022362:	b580      	push	{r7, lr}
 8022364:	b082      	sub	sp, #8
 8022366:	af00      	add	r7, sp, #0
 8022368:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802236a:	687b      	ldr	r3, [r7, #4]
 802236c:	681b      	ldr	r3, [r3, #0]
 802236e:	68da      	ldr	r2, [r3, #12]
 8022370:	687b      	ldr	r3, [r7, #4]
 8022372:	681b      	ldr	r3, [r3, #0]
 8022374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022378:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802237a:	687b      	ldr	r3, [r7, #4]
 802237c:	2220      	movs	r2, #32
 802237e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8022382:	6878      	ldr	r0, [r7, #4]
 8022384:	f7df ff02 	bl	800218c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8022388:	2300      	movs	r3, #0
}
 802238a:	4618      	mov	r0, r3
 802238c:	3708      	adds	r7, #8
 802238e:	46bd      	mov	sp, r7
 8022390:	bd80      	pop	{r7, pc}

08022392 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8022392:	b580      	push	{r7, lr}
 8022394:	b08c      	sub	sp, #48	; 0x30
 8022396:	af00      	add	r7, sp, #0
 8022398:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802239a:	687b      	ldr	r3, [r7, #4]
 802239c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80223a0:	b2db      	uxtb	r3, r3
 80223a2:	2b22      	cmp	r3, #34	; 0x22
 80223a4:	f040 80ab 	bne.w	80224fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80223a8:	687b      	ldr	r3, [r7, #4]
 80223aa:	689b      	ldr	r3, [r3, #8]
 80223ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80223b0:	d117      	bne.n	80223e2 <UART_Receive_IT+0x50>
 80223b2:	687b      	ldr	r3, [r7, #4]
 80223b4:	691b      	ldr	r3, [r3, #16]
 80223b6:	2b00      	cmp	r3, #0
 80223b8:	d113      	bne.n	80223e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80223ba:	2300      	movs	r3, #0
 80223bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80223be:	687b      	ldr	r3, [r7, #4]
 80223c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80223c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80223c4:	687b      	ldr	r3, [r7, #4]
 80223c6:	681b      	ldr	r3, [r3, #0]
 80223c8:	685b      	ldr	r3, [r3, #4]
 80223ca:	b29b      	uxth	r3, r3
 80223cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80223d0:	b29a      	uxth	r2, r3
 80223d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80223d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80223d6:	687b      	ldr	r3, [r7, #4]
 80223d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80223da:	1c9a      	adds	r2, r3, #2
 80223dc:	687b      	ldr	r3, [r7, #4]
 80223de:	629a      	str	r2, [r3, #40]	; 0x28
 80223e0:	e026      	b.n	8022430 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80223e2:	687b      	ldr	r3, [r7, #4]
 80223e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80223e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80223e8:	2300      	movs	r3, #0
 80223ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80223ec:	687b      	ldr	r3, [r7, #4]
 80223ee:	689b      	ldr	r3, [r3, #8]
 80223f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80223f4:	d007      	beq.n	8022406 <UART_Receive_IT+0x74>
 80223f6:	687b      	ldr	r3, [r7, #4]
 80223f8:	689b      	ldr	r3, [r3, #8]
 80223fa:	2b00      	cmp	r3, #0
 80223fc:	d10a      	bne.n	8022414 <UART_Receive_IT+0x82>
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	691b      	ldr	r3, [r3, #16]
 8022402:	2b00      	cmp	r3, #0
 8022404:	d106      	bne.n	8022414 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8022406:	687b      	ldr	r3, [r7, #4]
 8022408:	681b      	ldr	r3, [r3, #0]
 802240a:	685b      	ldr	r3, [r3, #4]
 802240c:	b2da      	uxtb	r2, r3
 802240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022410:	701a      	strb	r2, [r3, #0]
 8022412:	e008      	b.n	8022426 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8022414:	687b      	ldr	r3, [r7, #4]
 8022416:	681b      	ldr	r3, [r3, #0]
 8022418:	685b      	ldr	r3, [r3, #4]
 802241a:	b2db      	uxtb	r3, r3
 802241c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022420:	b2da      	uxtb	r2, r3
 8022422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022424:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8022426:	687b      	ldr	r3, [r7, #4]
 8022428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802242a:	1c5a      	adds	r2, r3, #1
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8022430:	687b      	ldr	r3, [r7, #4]
 8022432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022434:	b29b      	uxth	r3, r3
 8022436:	3b01      	subs	r3, #1
 8022438:	b29b      	uxth	r3, r3
 802243a:	687a      	ldr	r2, [r7, #4]
 802243c:	4619      	mov	r1, r3
 802243e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8022440:	2b00      	cmp	r3, #0
 8022442:	d15a      	bne.n	80224fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8022444:	687b      	ldr	r3, [r7, #4]
 8022446:	681b      	ldr	r3, [r3, #0]
 8022448:	68da      	ldr	r2, [r3, #12]
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	681b      	ldr	r3, [r3, #0]
 802244e:	f022 0220 	bic.w	r2, r2, #32
 8022452:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8022454:	687b      	ldr	r3, [r7, #4]
 8022456:	681b      	ldr	r3, [r3, #0]
 8022458:	68da      	ldr	r2, [r3, #12]
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	681b      	ldr	r3, [r3, #0]
 802245e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8022462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8022464:	687b      	ldr	r3, [r7, #4]
 8022466:	681b      	ldr	r3, [r3, #0]
 8022468:	695a      	ldr	r2, [r3, #20]
 802246a:	687b      	ldr	r3, [r7, #4]
 802246c:	681b      	ldr	r3, [r3, #0]
 802246e:	f022 0201 	bic.w	r2, r2, #1
 8022472:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8022474:	687b      	ldr	r3, [r7, #4]
 8022476:	2220      	movs	r2, #32
 8022478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802247c:	687b      	ldr	r3, [r7, #4]
 802247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022480:	2b01      	cmp	r3, #1
 8022482:	d135      	bne.n	80224f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022484:	687b      	ldr	r3, [r7, #4]
 8022486:	2200      	movs	r2, #0
 8022488:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	681b      	ldr	r3, [r3, #0]
 802248e:	330c      	adds	r3, #12
 8022490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022492:	697b      	ldr	r3, [r7, #20]
 8022494:	e853 3f00 	ldrex	r3, [r3]
 8022498:	613b      	str	r3, [r7, #16]
   return(result);
 802249a:	693b      	ldr	r3, [r7, #16]
 802249c:	f023 0310 	bic.w	r3, r3, #16
 80224a0:	627b      	str	r3, [r7, #36]	; 0x24
 80224a2:	687b      	ldr	r3, [r7, #4]
 80224a4:	681b      	ldr	r3, [r3, #0]
 80224a6:	330c      	adds	r3, #12
 80224a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80224aa:	623a      	str	r2, [r7, #32]
 80224ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80224ae:	69f9      	ldr	r1, [r7, #28]
 80224b0:	6a3a      	ldr	r2, [r7, #32]
 80224b2:	e841 2300 	strex	r3, r2, [r1]
 80224b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80224b8:	69bb      	ldr	r3, [r7, #24]
 80224ba:	2b00      	cmp	r3, #0
 80224bc:	d1e5      	bne.n	802248a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80224be:	687b      	ldr	r3, [r7, #4]
 80224c0:	681b      	ldr	r3, [r3, #0]
 80224c2:	681b      	ldr	r3, [r3, #0]
 80224c4:	f003 0310 	and.w	r3, r3, #16
 80224c8:	2b10      	cmp	r3, #16
 80224ca:	d10a      	bne.n	80224e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80224cc:	2300      	movs	r3, #0
 80224ce:	60fb      	str	r3, [r7, #12]
 80224d0:	687b      	ldr	r3, [r7, #4]
 80224d2:	681b      	ldr	r3, [r3, #0]
 80224d4:	681b      	ldr	r3, [r3, #0]
 80224d6:	60fb      	str	r3, [r7, #12]
 80224d8:	687b      	ldr	r3, [r7, #4]
 80224da:	681b      	ldr	r3, [r3, #0]
 80224dc:	685b      	ldr	r3, [r3, #4]
 80224de:	60fb      	str	r3, [r7, #12]
 80224e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80224e2:	687b      	ldr	r3, [r7, #4]
 80224e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80224e6:	4619      	mov	r1, r3
 80224e8:	6878      	ldr	r0, [r7, #4]
 80224ea:	f7ff fdc9 	bl	8022080 <HAL_UARTEx_RxEventCallback>
 80224ee:	e002      	b.n	80224f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80224f0:	6878      	ldr	r0, [r7, #4]
 80224f2:	f7df fed3 	bl	800229c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80224f6:	2300      	movs	r3, #0
 80224f8:	e002      	b.n	8022500 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80224fa:	2300      	movs	r3, #0
 80224fc:	e000      	b.n	8022500 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80224fe:	2302      	movs	r3, #2
  }
}
 8022500:	4618      	mov	r0, r3
 8022502:	3730      	adds	r7, #48	; 0x30
 8022504:	46bd      	mov	sp, r7
 8022506:	bd80      	pop	{r7, pc}

08022508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802250c:	b0c0      	sub	sp, #256	; 0x100
 802250e:	af00      	add	r7, sp, #0
 8022510:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022518:	681b      	ldr	r3, [r3, #0]
 802251a:	691b      	ldr	r3, [r3, #16]
 802251c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8022520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022524:	68d9      	ldr	r1, [r3, #12]
 8022526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802252a:	681a      	ldr	r2, [r3, #0]
 802252c:	ea40 0301 	orr.w	r3, r0, r1
 8022530:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022536:	689a      	ldr	r2, [r3, #8]
 8022538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802253c:	691b      	ldr	r3, [r3, #16]
 802253e:	431a      	orrs	r2, r3
 8022540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022544:	695b      	ldr	r3, [r3, #20]
 8022546:	431a      	orrs	r2, r3
 8022548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802254c:	69db      	ldr	r3, [r3, #28]
 802254e:	4313      	orrs	r3, r2
 8022550:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8022554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022558:	681b      	ldr	r3, [r3, #0]
 802255a:	68db      	ldr	r3, [r3, #12]
 802255c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8022560:	f021 010c 	bic.w	r1, r1, #12
 8022564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022568:	681a      	ldr	r2, [r3, #0]
 802256a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802256e:	430b      	orrs	r3, r1
 8022570:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8022572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022576:	681b      	ldr	r3, [r3, #0]
 8022578:	695b      	ldr	r3, [r3, #20]
 802257a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 802257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022582:	6999      	ldr	r1, [r3, #24]
 8022584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022588:	681a      	ldr	r2, [r3, #0]
 802258a:	ea40 0301 	orr.w	r3, r0, r1
 802258e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8022590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022594:	681a      	ldr	r2, [r3, #0]
 8022596:	4b8f      	ldr	r3, [pc, #572]	; (80227d4 <UART_SetConfig+0x2cc>)
 8022598:	429a      	cmp	r2, r3
 802259a:	d005      	beq.n	80225a8 <UART_SetConfig+0xa0>
 802259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80225a0:	681a      	ldr	r2, [r3, #0]
 80225a2:	4b8d      	ldr	r3, [pc, #564]	; (80227d8 <UART_SetConfig+0x2d0>)
 80225a4:	429a      	cmp	r2, r3
 80225a6:	d104      	bne.n	80225b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80225a8:	f7fe f82a 	bl	8020600 <HAL_RCC_GetPCLK2Freq>
 80225ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80225b0:	e003      	b.n	80225ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80225b2:	f7fe f811 	bl	80205d8 <HAL_RCC_GetPCLK1Freq>
 80225b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80225ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80225be:	69db      	ldr	r3, [r3, #28]
 80225c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80225c4:	f040 810c 	bne.w	80227e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80225c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80225cc:	2200      	movs	r2, #0
 80225ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80225d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80225d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80225da:	4622      	mov	r2, r4
 80225dc:	462b      	mov	r3, r5
 80225de:	1891      	adds	r1, r2, r2
 80225e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80225e2:	415b      	adcs	r3, r3
 80225e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80225e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80225ea:	4621      	mov	r1, r4
 80225ec:	eb12 0801 	adds.w	r8, r2, r1
 80225f0:	4629      	mov	r1, r5
 80225f2:	eb43 0901 	adc.w	r9, r3, r1
 80225f6:	f04f 0200 	mov.w	r2, #0
 80225fa:	f04f 0300 	mov.w	r3, #0
 80225fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8022602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8022606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802260a:	4690      	mov	r8, r2
 802260c:	4699      	mov	r9, r3
 802260e:	4623      	mov	r3, r4
 8022610:	eb18 0303 	adds.w	r3, r8, r3
 8022614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8022618:	462b      	mov	r3, r5
 802261a:	eb49 0303 	adc.w	r3, r9, r3
 802261e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8022622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022626:	685b      	ldr	r3, [r3, #4]
 8022628:	2200      	movs	r2, #0
 802262a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802262e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8022632:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8022636:	460b      	mov	r3, r1
 8022638:	18db      	adds	r3, r3, r3
 802263a:	653b      	str	r3, [r7, #80]	; 0x50
 802263c:	4613      	mov	r3, r2
 802263e:	eb42 0303 	adc.w	r3, r2, r3
 8022642:	657b      	str	r3, [r7, #84]	; 0x54
 8022644:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8022648:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 802264c:	f7de fc18 	bl	8000e80 <__aeabi_uldivmod>
 8022650:	4602      	mov	r2, r0
 8022652:	460b      	mov	r3, r1
 8022654:	4b61      	ldr	r3, [pc, #388]	; (80227dc <UART_SetConfig+0x2d4>)
 8022656:	fba3 2302 	umull	r2, r3, r3, r2
 802265a:	095b      	lsrs	r3, r3, #5
 802265c:	011c      	lsls	r4, r3, #4
 802265e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022662:	2200      	movs	r2, #0
 8022664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8022668:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 802266c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8022670:	4642      	mov	r2, r8
 8022672:	464b      	mov	r3, r9
 8022674:	1891      	adds	r1, r2, r2
 8022676:	64b9      	str	r1, [r7, #72]	; 0x48
 8022678:	415b      	adcs	r3, r3
 802267a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802267c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8022680:	4641      	mov	r1, r8
 8022682:	eb12 0a01 	adds.w	sl, r2, r1
 8022686:	4649      	mov	r1, r9
 8022688:	eb43 0b01 	adc.w	fp, r3, r1
 802268c:	f04f 0200 	mov.w	r2, #0
 8022690:	f04f 0300 	mov.w	r3, #0
 8022694:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8022698:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802269c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80226a0:	4692      	mov	sl, r2
 80226a2:	469b      	mov	fp, r3
 80226a4:	4643      	mov	r3, r8
 80226a6:	eb1a 0303 	adds.w	r3, sl, r3
 80226aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80226ae:	464b      	mov	r3, r9
 80226b0:	eb4b 0303 	adc.w	r3, fp, r3
 80226b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80226b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80226bc:	685b      	ldr	r3, [r3, #4]
 80226be:	2200      	movs	r2, #0
 80226c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80226c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80226c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80226cc:	460b      	mov	r3, r1
 80226ce:	18db      	adds	r3, r3, r3
 80226d0:	643b      	str	r3, [r7, #64]	; 0x40
 80226d2:	4613      	mov	r3, r2
 80226d4:	eb42 0303 	adc.w	r3, r2, r3
 80226d8:	647b      	str	r3, [r7, #68]	; 0x44
 80226da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80226de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80226e2:	f7de fbcd 	bl	8000e80 <__aeabi_uldivmod>
 80226e6:	4602      	mov	r2, r0
 80226e8:	460b      	mov	r3, r1
 80226ea:	4611      	mov	r1, r2
 80226ec:	4b3b      	ldr	r3, [pc, #236]	; (80227dc <UART_SetConfig+0x2d4>)
 80226ee:	fba3 2301 	umull	r2, r3, r3, r1
 80226f2:	095b      	lsrs	r3, r3, #5
 80226f4:	2264      	movs	r2, #100	; 0x64
 80226f6:	fb02 f303 	mul.w	r3, r2, r3
 80226fa:	1acb      	subs	r3, r1, r3
 80226fc:	00db      	lsls	r3, r3, #3
 80226fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8022702:	4b36      	ldr	r3, [pc, #216]	; (80227dc <UART_SetConfig+0x2d4>)
 8022704:	fba3 2302 	umull	r2, r3, r3, r2
 8022708:	095b      	lsrs	r3, r3, #5
 802270a:	005b      	lsls	r3, r3, #1
 802270c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8022710:	441c      	add	r4, r3
 8022712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022716:	2200      	movs	r2, #0
 8022718:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802271c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8022720:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8022724:	4642      	mov	r2, r8
 8022726:	464b      	mov	r3, r9
 8022728:	1891      	adds	r1, r2, r2
 802272a:	63b9      	str	r1, [r7, #56]	; 0x38
 802272c:	415b      	adcs	r3, r3
 802272e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022730:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8022734:	4641      	mov	r1, r8
 8022736:	1851      	adds	r1, r2, r1
 8022738:	6339      	str	r1, [r7, #48]	; 0x30
 802273a:	4649      	mov	r1, r9
 802273c:	414b      	adcs	r3, r1
 802273e:	637b      	str	r3, [r7, #52]	; 0x34
 8022740:	f04f 0200 	mov.w	r2, #0
 8022744:	f04f 0300 	mov.w	r3, #0
 8022748:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 802274c:	4659      	mov	r1, fp
 802274e:	00cb      	lsls	r3, r1, #3
 8022750:	4651      	mov	r1, sl
 8022752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8022756:	4651      	mov	r1, sl
 8022758:	00ca      	lsls	r2, r1, #3
 802275a:	4610      	mov	r0, r2
 802275c:	4619      	mov	r1, r3
 802275e:	4603      	mov	r3, r0
 8022760:	4642      	mov	r2, r8
 8022762:	189b      	adds	r3, r3, r2
 8022764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8022768:	464b      	mov	r3, r9
 802276a:	460a      	mov	r2, r1
 802276c:	eb42 0303 	adc.w	r3, r2, r3
 8022770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8022774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022778:	685b      	ldr	r3, [r3, #4]
 802277a:	2200      	movs	r2, #0
 802277c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8022780:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8022784:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8022788:	460b      	mov	r3, r1
 802278a:	18db      	adds	r3, r3, r3
 802278c:	62bb      	str	r3, [r7, #40]	; 0x28
 802278e:	4613      	mov	r3, r2
 8022790:	eb42 0303 	adc.w	r3, r2, r3
 8022794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022796:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802279a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 802279e:	f7de fb6f 	bl	8000e80 <__aeabi_uldivmod>
 80227a2:	4602      	mov	r2, r0
 80227a4:	460b      	mov	r3, r1
 80227a6:	4b0d      	ldr	r3, [pc, #52]	; (80227dc <UART_SetConfig+0x2d4>)
 80227a8:	fba3 1302 	umull	r1, r3, r3, r2
 80227ac:	095b      	lsrs	r3, r3, #5
 80227ae:	2164      	movs	r1, #100	; 0x64
 80227b0:	fb01 f303 	mul.w	r3, r1, r3
 80227b4:	1ad3      	subs	r3, r2, r3
 80227b6:	00db      	lsls	r3, r3, #3
 80227b8:	3332      	adds	r3, #50	; 0x32
 80227ba:	4a08      	ldr	r2, [pc, #32]	; (80227dc <UART_SetConfig+0x2d4>)
 80227bc:	fba2 2303 	umull	r2, r3, r2, r3
 80227c0:	095b      	lsrs	r3, r3, #5
 80227c2:	f003 0207 	and.w	r2, r3, #7
 80227c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80227ca:	681b      	ldr	r3, [r3, #0]
 80227cc:	4422      	add	r2, r4
 80227ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80227d0:	e105      	b.n	80229de <UART_SetConfig+0x4d6>
 80227d2:	bf00      	nop
 80227d4:	40011000 	.word	0x40011000
 80227d8:	40011400 	.word	0x40011400
 80227dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80227e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80227e4:	2200      	movs	r2, #0
 80227e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80227ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80227ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80227f2:	4642      	mov	r2, r8
 80227f4:	464b      	mov	r3, r9
 80227f6:	1891      	adds	r1, r2, r2
 80227f8:	6239      	str	r1, [r7, #32]
 80227fa:	415b      	adcs	r3, r3
 80227fc:	627b      	str	r3, [r7, #36]	; 0x24
 80227fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022802:	4641      	mov	r1, r8
 8022804:	1854      	adds	r4, r2, r1
 8022806:	4649      	mov	r1, r9
 8022808:	eb43 0501 	adc.w	r5, r3, r1
 802280c:	f04f 0200 	mov.w	r2, #0
 8022810:	f04f 0300 	mov.w	r3, #0
 8022814:	00eb      	lsls	r3, r5, #3
 8022816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802281a:	00e2      	lsls	r2, r4, #3
 802281c:	4614      	mov	r4, r2
 802281e:	461d      	mov	r5, r3
 8022820:	4643      	mov	r3, r8
 8022822:	18e3      	adds	r3, r4, r3
 8022824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8022828:	464b      	mov	r3, r9
 802282a:	eb45 0303 	adc.w	r3, r5, r3
 802282e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8022832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022836:	685b      	ldr	r3, [r3, #4]
 8022838:	2200      	movs	r2, #0
 802283a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802283e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8022842:	f04f 0200 	mov.w	r2, #0
 8022846:	f04f 0300 	mov.w	r3, #0
 802284a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802284e:	4629      	mov	r1, r5
 8022850:	008b      	lsls	r3, r1, #2
 8022852:	4621      	mov	r1, r4
 8022854:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8022858:	4621      	mov	r1, r4
 802285a:	008a      	lsls	r2, r1, #2
 802285c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8022860:	f7de fb0e 	bl	8000e80 <__aeabi_uldivmod>
 8022864:	4602      	mov	r2, r0
 8022866:	460b      	mov	r3, r1
 8022868:	4b60      	ldr	r3, [pc, #384]	; (80229ec <UART_SetConfig+0x4e4>)
 802286a:	fba3 2302 	umull	r2, r3, r3, r2
 802286e:	095b      	lsrs	r3, r3, #5
 8022870:	011c      	lsls	r4, r3, #4
 8022872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022876:	2200      	movs	r2, #0
 8022878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802287c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8022880:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8022884:	4642      	mov	r2, r8
 8022886:	464b      	mov	r3, r9
 8022888:	1891      	adds	r1, r2, r2
 802288a:	61b9      	str	r1, [r7, #24]
 802288c:	415b      	adcs	r3, r3
 802288e:	61fb      	str	r3, [r7, #28]
 8022890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022894:	4641      	mov	r1, r8
 8022896:	1851      	adds	r1, r2, r1
 8022898:	6139      	str	r1, [r7, #16]
 802289a:	4649      	mov	r1, r9
 802289c:	414b      	adcs	r3, r1
 802289e:	617b      	str	r3, [r7, #20]
 80228a0:	f04f 0200 	mov.w	r2, #0
 80228a4:	f04f 0300 	mov.w	r3, #0
 80228a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80228ac:	4659      	mov	r1, fp
 80228ae:	00cb      	lsls	r3, r1, #3
 80228b0:	4651      	mov	r1, sl
 80228b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80228b6:	4651      	mov	r1, sl
 80228b8:	00ca      	lsls	r2, r1, #3
 80228ba:	4610      	mov	r0, r2
 80228bc:	4619      	mov	r1, r3
 80228be:	4603      	mov	r3, r0
 80228c0:	4642      	mov	r2, r8
 80228c2:	189b      	adds	r3, r3, r2
 80228c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80228c8:	464b      	mov	r3, r9
 80228ca:	460a      	mov	r2, r1
 80228cc:	eb42 0303 	adc.w	r3, r2, r3
 80228d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80228d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80228d8:	685b      	ldr	r3, [r3, #4]
 80228da:	2200      	movs	r2, #0
 80228dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80228de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80228e0:	f04f 0200 	mov.w	r2, #0
 80228e4:	f04f 0300 	mov.w	r3, #0
 80228e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80228ec:	4649      	mov	r1, r9
 80228ee:	008b      	lsls	r3, r1, #2
 80228f0:	4641      	mov	r1, r8
 80228f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80228f6:	4641      	mov	r1, r8
 80228f8:	008a      	lsls	r2, r1, #2
 80228fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80228fe:	f7de fabf 	bl	8000e80 <__aeabi_uldivmod>
 8022902:	4602      	mov	r2, r0
 8022904:	460b      	mov	r3, r1
 8022906:	4b39      	ldr	r3, [pc, #228]	; (80229ec <UART_SetConfig+0x4e4>)
 8022908:	fba3 1302 	umull	r1, r3, r3, r2
 802290c:	095b      	lsrs	r3, r3, #5
 802290e:	2164      	movs	r1, #100	; 0x64
 8022910:	fb01 f303 	mul.w	r3, r1, r3
 8022914:	1ad3      	subs	r3, r2, r3
 8022916:	011b      	lsls	r3, r3, #4
 8022918:	3332      	adds	r3, #50	; 0x32
 802291a:	4a34      	ldr	r2, [pc, #208]	; (80229ec <UART_SetConfig+0x4e4>)
 802291c:	fba2 2303 	umull	r2, r3, r2, r3
 8022920:	095b      	lsrs	r3, r3, #5
 8022922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022926:	441c      	add	r4, r3
 8022928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802292c:	2200      	movs	r2, #0
 802292e:	673b      	str	r3, [r7, #112]	; 0x70
 8022930:	677a      	str	r2, [r7, #116]	; 0x74
 8022932:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8022936:	4642      	mov	r2, r8
 8022938:	464b      	mov	r3, r9
 802293a:	1891      	adds	r1, r2, r2
 802293c:	60b9      	str	r1, [r7, #8]
 802293e:	415b      	adcs	r3, r3
 8022940:	60fb      	str	r3, [r7, #12]
 8022942:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022946:	4641      	mov	r1, r8
 8022948:	1851      	adds	r1, r2, r1
 802294a:	6039      	str	r1, [r7, #0]
 802294c:	4649      	mov	r1, r9
 802294e:	414b      	adcs	r3, r1
 8022950:	607b      	str	r3, [r7, #4]
 8022952:	f04f 0200 	mov.w	r2, #0
 8022956:	f04f 0300 	mov.w	r3, #0
 802295a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802295e:	4659      	mov	r1, fp
 8022960:	00cb      	lsls	r3, r1, #3
 8022962:	4651      	mov	r1, sl
 8022964:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8022968:	4651      	mov	r1, sl
 802296a:	00ca      	lsls	r2, r1, #3
 802296c:	4610      	mov	r0, r2
 802296e:	4619      	mov	r1, r3
 8022970:	4603      	mov	r3, r0
 8022972:	4642      	mov	r2, r8
 8022974:	189b      	adds	r3, r3, r2
 8022976:	66bb      	str	r3, [r7, #104]	; 0x68
 8022978:	464b      	mov	r3, r9
 802297a:	460a      	mov	r2, r1
 802297c:	eb42 0303 	adc.w	r3, r2, r3
 8022980:	66fb      	str	r3, [r7, #108]	; 0x6c
 8022982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022986:	685b      	ldr	r3, [r3, #4]
 8022988:	2200      	movs	r2, #0
 802298a:	663b      	str	r3, [r7, #96]	; 0x60
 802298c:	667a      	str	r2, [r7, #100]	; 0x64
 802298e:	f04f 0200 	mov.w	r2, #0
 8022992:	f04f 0300 	mov.w	r3, #0
 8022996:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 802299a:	4649      	mov	r1, r9
 802299c:	008b      	lsls	r3, r1, #2
 802299e:	4641      	mov	r1, r8
 80229a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80229a4:	4641      	mov	r1, r8
 80229a6:	008a      	lsls	r2, r1, #2
 80229a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80229ac:	f7de fa68 	bl	8000e80 <__aeabi_uldivmod>
 80229b0:	4602      	mov	r2, r0
 80229b2:	460b      	mov	r3, r1
 80229b4:	4b0d      	ldr	r3, [pc, #52]	; (80229ec <UART_SetConfig+0x4e4>)
 80229b6:	fba3 1302 	umull	r1, r3, r3, r2
 80229ba:	095b      	lsrs	r3, r3, #5
 80229bc:	2164      	movs	r1, #100	; 0x64
 80229be:	fb01 f303 	mul.w	r3, r1, r3
 80229c2:	1ad3      	subs	r3, r2, r3
 80229c4:	011b      	lsls	r3, r3, #4
 80229c6:	3332      	adds	r3, #50	; 0x32
 80229c8:	4a08      	ldr	r2, [pc, #32]	; (80229ec <UART_SetConfig+0x4e4>)
 80229ca:	fba2 2303 	umull	r2, r3, r2, r3
 80229ce:	095b      	lsrs	r3, r3, #5
 80229d0:	f003 020f 	and.w	r2, r3, #15
 80229d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80229d8:	681b      	ldr	r3, [r3, #0]
 80229da:	4422      	add	r2, r4
 80229dc:	609a      	str	r2, [r3, #8]
}
 80229de:	bf00      	nop
 80229e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80229e4:	46bd      	mov	sp, r7
 80229e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80229ea:	bf00      	nop
 80229ec:	51eb851f 	.word	0x51eb851f

080229f0 <atoi>:
 80229f0:	220a      	movs	r2, #10
 80229f2:	2100      	movs	r1, #0
 80229f4:	f000 ba6a 	b.w	8022ecc <strtol>

080229f8 <calloc>:
 80229f8:	4b02      	ldr	r3, [pc, #8]	; (8022a04 <calloc+0xc>)
 80229fa:	460a      	mov	r2, r1
 80229fc:	4601      	mov	r1, r0
 80229fe:	6818      	ldr	r0, [r3, #0]
 8022a00:	f000 b852 	b.w	8022aa8 <_calloc_r>
 8022a04:	20000158 	.word	0x20000158

08022a08 <__errno>:
 8022a08:	4b01      	ldr	r3, [pc, #4]	; (8022a10 <__errno+0x8>)
 8022a0a:	6818      	ldr	r0, [r3, #0]
 8022a0c:	4770      	bx	lr
 8022a0e:	bf00      	nop
 8022a10:	20000158 	.word	0x20000158

08022a14 <__libc_init_array>:
 8022a14:	b570      	push	{r4, r5, r6, lr}
 8022a16:	4d0d      	ldr	r5, [pc, #52]	; (8022a4c <__libc_init_array+0x38>)
 8022a18:	4c0d      	ldr	r4, [pc, #52]	; (8022a50 <__libc_init_array+0x3c>)
 8022a1a:	1b64      	subs	r4, r4, r5
 8022a1c:	10a4      	asrs	r4, r4, #2
 8022a1e:	2600      	movs	r6, #0
 8022a20:	42a6      	cmp	r6, r4
 8022a22:	d109      	bne.n	8022a38 <__libc_init_array+0x24>
 8022a24:	4d0b      	ldr	r5, [pc, #44]	; (8022a54 <__libc_init_array+0x40>)
 8022a26:	4c0c      	ldr	r4, [pc, #48]	; (8022a58 <__libc_init_array+0x44>)
 8022a28:	f002 ff02 	bl	8025830 <_init>
 8022a2c:	1b64      	subs	r4, r4, r5
 8022a2e:	10a4      	asrs	r4, r4, #2
 8022a30:	2600      	movs	r6, #0
 8022a32:	42a6      	cmp	r6, r4
 8022a34:	d105      	bne.n	8022a42 <__libc_init_array+0x2e>
 8022a36:	bd70      	pop	{r4, r5, r6, pc}
 8022a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8022a3c:	4798      	blx	r3
 8022a3e:	3601      	adds	r6, #1
 8022a40:	e7ee      	b.n	8022a20 <__libc_init_array+0xc>
 8022a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8022a46:	4798      	blx	r3
 8022a48:	3601      	adds	r6, #1
 8022a4a:	e7f2      	b.n	8022a32 <__libc_init_array+0x1e>
 8022a4c:	080297d8 	.word	0x080297d8
 8022a50:	080297d8 	.word	0x080297d8
 8022a54:	080297d8 	.word	0x080297d8
 8022a58:	080297dc 	.word	0x080297dc

08022a5c <malloc>:
 8022a5c:	4b02      	ldr	r3, [pc, #8]	; (8022a68 <malloc+0xc>)
 8022a5e:	4601      	mov	r1, r0
 8022a60:	6818      	ldr	r0, [r3, #0]
 8022a62:	f000 b8a3 	b.w	8022bac <_malloc_r>
 8022a66:	bf00      	nop
 8022a68:	20000158 	.word	0x20000158

08022a6c <free>:
 8022a6c:	4b02      	ldr	r3, [pc, #8]	; (8022a78 <free+0xc>)
 8022a6e:	4601      	mov	r1, r0
 8022a70:	6818      	ldr	r0, [r3, #0]
 8022a72:	f000 b82f 	b.w	8022ad4 <_free_r>
 8022a76:	bf00      	nop
 8022a78:	20000158 	.word	0x20000158

08022a7c <memcpy>:
 8022a7c:	440a      	add	r2, r1
 8022a7e:	4291      	cmp	r1, r2
 8022a80:	f100 33ff 	add.w	r3, r0, #4294967295
 8022a84:	d100      	bne.n	8022a88 <memcpy+0xc>
 8022a86:	4770      	bx	lr
 8022a88:	b510      	push	{r4, lr}
 8022a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022a8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022a92:	4291      	cmp	r1, r2
 8022a94:	d1f9      	bne.n	8022a8a <memcpy+0xe>
 8022a96:	bd10      	pop	{r4, pc}

08022a98 <memset>:
 8022a98:	4402      	add	r2, r0
 8022a9a:	4603      	mov	r3, r0
 8022a9c:	4293      	cmp	r3, r2
 8022a9e:	d100      	bne.n	8022aa2 <memset+0xa>
 8022aa0:	4770      	bx	lr
 8022aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8022aa6:	e7f9      	b.n	8022a9c <memset+0x4>

08022aa8 <_calloc_r>:
 8022aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022aaa:	fba1 2402 	umull	r2, r4, r1, r2
 8022aae:	b94c      	cbnz	r4, 8022ac4 <_calloc_r+0x1c>
 8022ab0:	4611      	mov	r1, r2
 8022ab2:	9201      	str	r2, [sp, #4]
 8022ab4:	f000 f87a 	bl	8022bac <_malloc_r>
 8022ab8:	9a01      	ldr	r2, [sp, #4]
 8022aba:	4605      	mov	r5, r0
 8022abc:	b930      	cbnz	r0, 8022acc <_calloc_r+0x24>
 8022abe:	4628      	mov	r0, r5
 8022ac0:	b003      	add	sp, #12
 8022ac2:	bd30      	pop	{r4, r5, pc}
 8022ac4:	220c      	movs	r2, #12
 8022ac6:	6002      	str	r2, [r0, #0]
 8022ac8:	2500      	movs	r5, #0
 8022aca:	e7f8      	b.n	8022abe <_calloc_r+0x16>
 8022acc:	4621      	mov	r1, r4
 8022ace:	f7ff ffe3 	bl	8022a98 <memset>
 8022ad2:	e7f4      	b.n	8022abe <_calloc_r+0x16>

08022ad4 <_free_r>:
 8022ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022ad6:	2900      	cmp	r1, #0
 8022ad8:	d044      	beq.n	8022b64 <_free_r+0x90>
 8022ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022ade:	9001      	str	r0, [sp, #4]
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	f1a1 0404 	sub.w	r4, r1, #4
 8022ae6:	bfb8      	it	lt
 8022ae8:	18e4      	addlt	r4, r4, r3
 8022aea:	f000 f9f9 	bl	8022ee0 <__malloc_lock>
 8022aee:	4a1e      	ldr	r2, [pc, #120]	; (8022b68 <_free_r+0x94>)
 8022af0:	9801      	ldr	r0, [sp, #4]
 8022af2:	6813      	ldr	r3, [r2, #0]
 8022af4:	b933      	cbnz	r3, 8022b04 <_free_r+0x30>
 8022af6:	6063      	str	r3, [r4, #4]
 8022af8:	6014      	str	r4, [r2, #0]
 8022afa:	b003      	add	sp, #12
 8022afc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022b00:	f000 b9f4 	b.w	8022eec <__malloc_unlock>
 8022b04:	42a3      	cmp	r3, r4
 8022b06:	d908      	bls.n	8022b1a <_free_r+0x46>
 8022b08:	6825      	ldr	r5, [r4, #0]
 8022b0a:	1961      	adds	r1, r4, r5
 8022b0c:	428b      	cmp	r3, r1
 8022b0e:	bf01      	itttt	eq
 8022b10:	6819      	ldreq	r1, [r3, #0]
 8022b12:	685b      	ldreq	r3, [r3, #4]
 8022b14:	1949      	addeq	r1, r1, r5
 8022b16:	6021      	streq	r1, [r4, #0]
 8022b18:	e7ed      	b.n	8022af6 <_free_r+0x22>
 8022b1a:	461a      	mov	r2, r3
 8022b1c:	685b      	ldr	r3, [r3, #4]
 8022b1e:	b10b      	cbz	r3, 8022b24 <_free_r+0x50>
 8022b20:	42a3      	cmp	r3, r4
 8022b22:	d9fa      	bls.n	8022b1a <_free_r+0x46>
 8022b24:	6811      	ldr	r1, [r2, #0]
 8022b26:	1855      	adds	r5, r2, r1
 8022b28:	42a5      	cmp	r5, r4
 8022b2a:	d10b      	bne.n	8022b44 <_free_r+0x70>
 8022b2c:	6824      	ldr	r4, [r4, #0]
 8022b2e:	4421      	add	r1, r4
 8022b30:	1854      	adds	r4, r2, r1
 8022b32:	42a3      	cmp	r3, r4
 8022b34:	6011      	str	r1, [r2, #0]
 8022b36:	d1e0      	bne.n	8022afa <_free_r+0x26>
 8022b38:	681c      	ldr	r4, [r3, #0]
 8022b3a:	685b      	ldr	r3, [r3, #4]
 8022b3c:	6053      	str	r3, [r2, #4]
 8022b3e:	4421      	add	r1, r4
 8022b40:	6011      	str	r1, [r2, #0]
 8022b42:	e7da      	b.n	8022afa <_free_r+0x26>
 8022b44:	d902      	bls.n	8022b4c <_free_r+0x78>
 8022b46:	230c      	movs	r3, #12
 8022b48:	6003      	str	r3, [r0, #0]
 8022b4a:	e7d6      	b.n	8022afa <_free_r+0x26>
 8022b4c:	6825      	ldr	r5, [r4, #0]
 8022b4e:	1961      	adds	r1, r4, r5
 8022b50:	428b      	cmp	r3, r1
 8022b52:	bf04      	itt	eq
 8022b54:	6819      	ldreq	r1, [r3, #0]
 8022b56:	685b      	ldreq	r3, [r3, #4]
 8022b58:	6063      	str	r3, [r4, #4]
 8022b5a:	bf04      	itt	eq
 8022b5c:	1949      	addeq	r1, r1, r5
 8022b5e:	6021      	streq	r1, [r4, #0]
 8022b60:	6054      	str	r4, [r2, #4]
 8022b62:	e7ca      	b.n	8022afa <_free_r+0x26>
 8022b64:	b003      	add	sp, #12
 8022b66:	bd30      	pop	{r4, r5, pc}
 8022b68:	20001dcc 	.word	0x20001dcc

08022b6c <sbrk_aligned>:
 8022b6c:	b570      	push	{r4, r5, r6, lr}
 8022b6e:	4e0e      	ldr	r6, [pc, #56]	; (8022ba8 <sbrk_aligned+0x3c>)
 8022b70:	460c      	mov	r4, r1
 8022b72:	6831      	ldr	r1, [r6, #0]
 8022b74:	4605      	mov	r5, r0
 8022b76:	b911      	cbnz	r1, 8022b7e <sbrk_aligned+0x12>
 8022b78:	f000 f88c 	bl	8022c94 <_sbrk_r>
 8022b7c:	6030      	str	r0, [r6, #0]
 8022b7e:	4621      	mov	r1, r4
 8022b80:	4628      	mov	r0, r5
 8022b82:	f000 f887 	bl	8022c94 <_sbrk_r>
 8022b86:	1c43      	adds	r3, r0, #1
 8022b88:	d00a      	beq.n	8022ba0 <sbrk_aligned+0x34>
 8022b8a:	1cc4      	adds	r4, r0, #3
 8022b8c:	f024 0403 	bic.w	r4, r4, #3
 8022b90:	42a0      	cmp	r0, r4
 8022b92:	d007      	beq.n	8022ba4 <sbrk_aligned+0x38>
 8022b94:	1a21      	subs	r1, r4, r0
 8022b96:	4628      	mov	r0, r5
 8022b98:	f000 f87c 	bl	8022c94 <_sbrk_r>
 8022b9c:	3001      	adds	r0, #1
 8022b9e:	d101      	bne.n	8022ba4 <sbrk_aligned+0x38>
 8022ba0:	f04f 34ff 	mov.w	r4, #4294967295
 8022ba4:	4620      	mov	r0, r4
 8022ba6:	bd70      	pop	{r4, r5, r6, pc}
 8022ba8:	20001dd0 	.word	0x20001dd0

08022bac <_malloc_r>:
 8022bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022bb0:	1ccd      	adds	r5, r1, #3
 8022bb2:	f025 0503 	bic.w	r5, r5, #3
 8022bb6:	3508      	adds	r5, #8
 8022bb8:	2d0c      	cmp	r5, #12
 8022bba:	bf38      	it	cc
 8022bbc:	250c      	movcc	r5, #12
 8022bbe:	2d00      	cmp	r5, #0
 8022bc0:	4607      	mov	r7, r0
 8022bc2:	db01      	blt.n	8022bc8 <_malloc_r+0x1c>
 8022bc4:	42a9      	cmp	r1, r5
 8022bc6:	d905      	bls.n	8022bd4 <_malloc_r+0x28>
 8022bc8:	230c      	movs	r3, #12
 8022bca:	603b      	str	r3, [r7, #0]
 8022bcc:	2600      	movs	r6, #0
 8022bce:	4630      	mov	r0, r6
 8022bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022bd4:	4e2e      	ldr	r6, [pc, #184]	; (8022c90 <_malloc_r+0xe4>)
 8022bd6:	f000 f983 	bl	8022ee0 <__malloc_lock>
 8022bda:	6833      	ldr	r3, [r6, #0]
 8022bdc:	461c      	mov	r4, r3
 8022bde:	bb34      	cbnz	r4, 8022c2e <_malloc_r+0x82>
 8022be0:	4629      	mov	r1, r5
 8022be2:	4638      	mov	r0, r7
 8022be4:	f7ff ffc2 	bl	8022b6c <sbrk_aligned>
 8022be8:	1c43      	adds	r3, r0, #1
 8022bea:	4604      	mov	r4, r0
 8022bec:	d14d      	bne.n	8022c8a <_malloc_r+0xde>
 8022bee:	6834      	ldr	r4, [r6, #0]
 8022bf0:	4626      	mov	r6, r4
 8022bf2:	2e00      	cmp	r6, #0
 8022bf4:	d140      	bne.n	8022c78 <_malloc_r+0xcc>
 8022bf6:	6823      	ldr	r3, [r4, #0]
 8022bf8:	4631      	mov	r1, r6
 8022bfa:	4638      	mov	r0, r7
 8022bfc:	eb04 0803 	add.w	r8, r4, r3
 8022c00:	f000 f848 	bl	8022c94 <_sbrk_r>
 8022c04:	4580      	cmp	r8, r0
 8022c06:	d13a      	bne.n	8022c7e <_malloc_r+0xd2>
 8022c08:	6821      	ldr	r1, [r4, #0]
 8022c0a:	3503      	adds	r5, #3
 8022c0c:	1a6d      	subs	r5, r5, r1
 8022c0e:	f025 0503 	bic.w	r5, r5, #3
 8022c12:	3508      	adds	r5, #8
 8022c14:	2d0c      	cmp	r5, #12
 8022c16:	bf38      	it	cc
 8022c18:	250c      	movcc	r5, #12
 8022c1a:	4629      	mov	r1, r5
 8022c1c:	4638      	mov	r0, r7
 8022c1e:	f7ff ffa5 	bl	8022b6c <sbrk_aligned>
 8022c22:	3001      	adds	r0, #1
 8022c24:	d02b      	beq.n	8022c7e <_malloc_r+0xd2>
 8022c26:	6823      	ldr	r3, [r4, #0]
 8022c28:	442b      	add	r3, r5
 8022c2a:	6023      	str	r3, [r4, #0]
 8022c2c:	e00e      	b.n	8022c4c <_malloc_r+0xa0>
 8022c2e:	6822      	ldr	r2, [r4, #0]
 8022c30:	1b52      	subs	r2, r2, r5
 8022c32:	d41e      	bmi.n	8022c72 <_malloc_r+0xc6>
 8022c34:	2a0b      	cmp	r2, #11
 8022c36:	d916      	bls.n	8022c66 <_malloc_r+0xba>
 8022c38:	1961      	adds	r1, r4, r5
 8022c3a:	42a3      	cmp	r3, r4
 8022c3c:	6025      	str	r5, [r4, #0]
 8022c3e:	bf18      	it	ne
 8022c40:	6059      	strne	r1, [r3, #4]
 8022c42:	6863      	ldr	r3, [r4, #4]
 8022c44:	bf08      	it	eq
 8022c46:	6031      	streq	r1, [r6, #0]
 8022c48:	5162      	str	r2, [r4, r5]
 8022c4a:	604b      	str	r3, [r1, #4]
 8022c4c:	4638      	mov	r0, r7
 8022c4e:	f104 060b 	add.w	r6, r4, #11
 8022c52:	f000 f94b 	bl	8022eec <__malloc_unlock>
 8022c56:	f026 0607 	bic.w	r6, r6, #7
 8022c5a:	1d23      	adds	r3, r4, #4
 8022c5c:	1af2      	subs	r2, r6, r3
 8022c5e:	d0b6      	beq.n	8022bce <_malloc_r+0x22>
 8022c60:	1b9b      	subs	r3, r3, r6
 8022c62:	50a3      	str	r3, [r4, r2]
 8022c64:	e7b3      	b.n	8022bce <_malloc_r+0x22>
 8022c66:	6862      	ldr	r2, [r4, #4]
 8022c68:	42a3      	cmp	r3, r4
 8022c6a:	bf0c      	ite	eq
 8022c6c:	6032      	streq	r2, [r6, #0]
 8022c6e:	605a      	strne	r2, [r3, #4]
 8022c70:	e7ec      	b.n	8022c4c <_malloc_r+0xa0>
 8022c72:	4623      	mov	r3, r4
 8022c74:	6864      	ldr	r4, [r4, #4]
 8022c76:	e7b2      	b.n	8022bde <_malloc_r+0x32>
 8022c78:	4634      	mov	r4, r6
 8022c7a:	6876      	ldr	r6, [r6, #4]
 8022c7c:	e7b9      	b.n	8022bf2 <_malloc_r+0x46>
 8022c7e:	230c      	movs	r3, #12
 8022c80:	603b      	str	r3, [r7, #0]
 8022c82:	4638      	mov	r0, r7
 8022c84:	f000 f932 	bl	8022eec <__malloc_unlock>
 8022c88:	e7a1      	b.n	8022bce <_malloc_r+0x22>
 8022c8a:	6025      	str	r5, [r4, #0]
 8022c8c:	e7de      	b.n	8022c4c <_malloc_r+0xa0>
 8022c8e:	bf00      	nop
 8022c90:	20001dcc 	.word	0x20001dcc

08022c94 <_sbrk_r>:
 8022c94:	b538      	push	{r3, r4, r5, lr}
 8022c96:	4d06      	ldr	r5, [pc, #24]	; (8022cb0 <_sbrk_r+0x1c>)
 8022c98:	2300      	movs	r3, #0
 8022c9a:	4604      	mov	r4, r0
 8022c9c:	4608      	mov	r0, r1
 8022c9e:	602b      	str	r3, [r5, #0]
 8022ca0:	f7e0 fec6 	bl	8003a30 <_sbrk>
 8022ca4:	1c43      	adds	r3, r0, #1
 8022ca6:	d102      	bne.n	8022cae <_sbrk_r+0x1a>
 8022ca8:	682b      	ldr	r3, [r5, #0]
 8022caa:	b103      	cbz	r3, 8022cae <_sbrk_r+0x1a>
 8022cac:	6023      	str	r3, [r4, #0]
 8022cae:	bd38      	pop	{r3, r4, r5, pc}
 8022cb0:	20001dd4 	.word	0x20001dd4

08022cb4 <strcasecmp>:
 8022cb4:	b530      	push	{r4, r5, lr}
 8022cb6:	4d0b      	ldr	r5, [pc, #44]	; (8022ce4 <strcasecmp+0x30>)
 8022cb8:	4604      	mov	r4, r0
 8022cba:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022cbe:	5d5a      	ldrb	r2, [r3, r5]
 8022cc0:	f002 0203 	and.w	r2, r2, #3
 8022cc4:	2a01      	cmp	r2, #1
 8022cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022cca:	5ca8      	ldrb	r0, [r5, r2]
 8022ccc:	f000 0003 	and.w	r0, r0, #3
 8022cd0:	bf08      	it	eq
 8022cd2:	3320      	addeq	r3, #32
 8022cd4:	2801      	cmp	r0, #1
 8022cd6:	bf08      	it	eq
 8022cd8:	3220      	addeq	r2, #32
 8022cda:	1a98      	subs	r0, r3, r2
 8022cdc:	d101      	bne.n	8022ce2 <strcasecmp+0x2e>
 8022cde:	2a00      	cmp	r2, #0
 8022ce0:	d1eb      	bne.n	8022cba <strcasecmp+0x6>
 8022ce2:	bd30      	pop	{r4, r5, pc}
 8022ce4:	080290c5 	.word	0x080290c5

08022ce8 <strcat>:
 8022ce8:	b510      	push	{r4, lr}
 8022cea:	4602      	mov	r2, r0
 8022cec:	7814      	ldrb	r4, [r2, #0]
 8022cee:	4613      	mov	r3, r2
 8022cf0:	3201      	adds	r2, #1
 8022cf2:	2c00      	cmp	r4, #0
 8022cf4:	d1fa      	bne.n	8022cec <strcat+0x4>
 8022cf6:	3b01      	subs	r3, #1
 8022cf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022cfc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022d00:	2a00      	cmp	r2, #0
 8022d02:	d1f9      	bne.n	8022cf8 <strcat+0x10>
 8022d04:	bd10      	pop	{r4, pc}

08022d06 <strchr>:
 8022d06:	b2c9      	uxtb	r1, r1
 8022d08:	4603      	mov	r3, r0
 8022d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022d0e:	b11a      	cbz	r2, 8022d18 <strchr+0x12>
 8022d10:	428a      	cmp	r2, r1
 8022d12:	d1f9      	bne.n	8022d08 <strchr+0x2>
 8022d14:	4618      	mov	r0, r3
 8022d16:	4770      	bx	lr
 8022d18:	2900      	cmp	r1, #0
 8022d1a:	bf18      	it	ne
 8022d1c:	2300      	movne	r3, #0
 8022d1e:	e7f9      	b.n	8022d14 <strchr+0xe>

08022d20 <strcpy>:
 8022d20:	4603      	mov	r3, r0
 8022d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022d26:	f803 2b01 	strb.w	r2, [r3], #1
 8022d2a:	2a00      	cmp	r2, #0
 8022d2c:	d1f9      	bne.n	8022d22 <strcpy+0x2>
 8022d2e:	4770      	bx	lr

08022d30 <strncasecmp>:
 8022d30:	b570      	push	{r4, r5, r6, lr}
 8022d32:	4e0f      	ldr	r6, [pc, #60]	; (8022d70 <strncasecmp+0x40>)
 8022d34:	4604      	mov	r4, r0
 8022d36:	440a      	add	r2, r1
 8022d38:	428a      	cmp	r2, r1
 8022d3a:	d101      	bne.n	8022d40 <strncasecmp+0x10>
 8022d3c:	2000      	movs	r0, #0
 8022d3e:	e013      	b.n	8022d68 <strncasecmp+0x38>
 8022d40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022d44:	5d98      	ldrb	r0, [r3, r6]
 8022d46:	f000 0003 	and.w	r0, r0, #3
 8022d4a:	2801      	cmp	r0, #1
 8022d4c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8022d50:	5c35      	ldrb	r5, [r6, r0]
 8022d52:	f005 0503 	and.w	r5, r5, #3
 8022d56:	bf08      	it	eq
 8022d58:	3320      	addeq	r3, #32
 8022d5a:	2d01      	cmp	r5, #1
 8022d5c:	bf08      	it	eq
 8022d5e:	3020      	addeq	r0, #32
 8022d60:	1a1b      	subs	r3, r3, r0
 8022d62:	d102      	bne.n	8022d6a <strncasecmp+0x3a>
 8022d64:	2800      	cmp	r0, #0
 8022d66:	d1e7      	bne.n	8022d38 <strncasecmp+0x8>
 8022d68:	bd70      	pop	{r4, r5, r6, pc}
 8022d6a:	4618      	mov	r0, r3
 8022d6c:	e7fc      	b.n	8022d68 <strncasecmp+0x38>
 8022d6e:	bf00      	nop
 8022d70:	080290c5 	.word	0x080290c5

08022d74 <strncpy>:
 8022d74:	b510      	push	{r4, lr}
 8022d76:	3901      	subs	r1, #1
 8022d78:	4603      	mov	r3, r0
 8022d7a:	b132      	cbz	r2, 8022d8a <strncpy+0x16>
 8022d7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022d80:	f803 4b01 	strb.w	r4, [r3], #1
 8022d84:	3a01      	subs	r2, #1
 8022d86:	2c00      	cmp	r4, #0
 8022d88:	d1f7      	bne.n	8022d7a <strncpy+0x6>
 8022d8a:	441a      	add	r2, r3
 8022d8c:	2100      	movs	r1, #0
 8022d8e:	4293      	cmp	r3, r2
 8022d90:	d100      	bne.n	8022d94 <strncpy+0x20>
 8022d92:	bd10      	pop	{r4, pc}
 8022d94:	f803 1b01 	strb.w	r1, [r3], #1
 8022d98:	e7f9      	b.n	8022d8e <strncpy+0x1a>

08022d9a <strstr>:
 8022d9a:	780a      	ldrb	r2, [r1, #0]
 8022d9c:	b570      	push	{r4, r5, r6, lr}
 8022d9e:	b96a      	cbnz	r2, 8022dbc <strstr+0x22>
 8022da0:	bd70      	pop	{r4, r5, r6, pc}
 8022da2:	429a      	cmp	r2, r3
 8022da4:	d109      	bne.n	8022dba <strstr+0x20>
 8022da6:	460c      	mov	r4, r1
 8022da8:	4605      	mov	r5, r0
 8022daa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8022dae:	2b00      	cmp	r3, #0
 8022db0:	d0f6      	beq.n	8022da0 <strstr+0x6>
 8022db2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8022db6:	429e      	cmp	r6, r3
 8022db8:	d0f7      	beq.n	8022daa <strstr+0x10>
 8022dba:	3001      	adds	r0, #1
 8022dbc:	7803      	ldrb	r3, [r0, #0]
 8022dbe:	2b00      	cmp	r3, #0
 8022dc0:	d1ef      	bne.n	8022da2 <strstr+0x8>
 8022dc2:	4618      	mov	r0, r3
 8022dc4:	e7ec      	b.n	8022da0 <strstr+0x6>
	...

08022dc8 <_strtol_l.constprop.0>:
 8022dc8:	2b01      	cmp	r3, #1
 8022dca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022dce:	d001      	beq.n	8022dd4 <_strtol_l.constprop.0+0xc>
 8022dd0:	2b24      	cmp	r3, #36	; 0x24
 8022dd2:	d906      	bls.n	8022de2 <_strtol_l.constprop.0+0x1a>
 8022dd4:	f7ff fe18 	bl	8022a08 <__errno>
 8022dd8:	2316      	movs	r3, #22
 8022dda:	6003      	str	r3, [r0, #0]
 8022ddc:	2000      	movs	r0, #0
 8022dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022de2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8022ec8 <_strtol_l.constprop.0+0x100>
 8022de6:	460d      	mov	r5, r1
 8022de8:	462e      	mov	r6, r5
 8022dea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022dee:	f814 700c 	ldrb.w	r7, [r4, ip]
 8022df2:	f017 0708 	ands.w	r7, r7, #8
 8022df6:	d1f7      	bne.n	8022de8 <_strtol_l.constprop.0+0x20>
 8022df8:	2c2d      	cmp	r4, #45	; 0x2d
 8022dfa:	d132      	bne.n	8022e62 <_strtol_l.constprop.0+0x9a>
 8022dfc:	782c      	ldrb	r4, [r5, #0]
 8022dfe:	2701      	movs	r7, #1
 8022e00:	1cb5      	adds	r5, r6, #2
 8022e02:	2b00      	cmp	r3, #0
 8022e04:	d05b      	beq.n	8022ebe <_strtol_l.constprop.0+0xf6>
 8022e06:	2b10      	cmp	r3, #16
 8022e08:	d109      	bne.n	8022e1e <_strtol_l.constprop.0+0x56>
 8022e0a:	2c30      	cmp	r4, #48	; 0x30
 8022e0c:	d107      	bne.n	8022e1e <_strtol_l.constprop.0+0x56>
 8022e0e:	782c      	ldrb	r4, [r5, #0]
 8022e10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8022e14:	2c58      	cmp	r4, #88	; 0x58
 8022e16:	d14d      	bne.n	8022eb4 <_strtol_l.constprop.0+0xec>
 8022e18:	786c      	ldrb	r4, [r5, #1]
 8022e1a:	2310      	movs	r3, #16
 8022e1c:	3502      	adds	r5, #2
 8022e1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8022e22:	f108 38ff 	add.w	r8, r8, #4294967295
 8022e26:	f04f 0c00 	mov.w	ip, #0
 8022e2a:	fbb8 f9f3 	udiv	r9, r8, r3
 8022e2e:	4666      	mov	r6, ip
 8022e30:	fb03 8a19 	mls	sl, r3, r9, r8
 8022e34:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8022e38:	f1be 0f09 	cmp.w	lr, #9
 8022e3c:	d816      	bhi.n	8022e6c <_strtol_l.constprop.0+0xa4>
 8022e3e:	4674      	mov	r4, lr
 8022e40:	42a3      	cmp	r3, r4
 8022e42:	dd24      	ble.n	8022e8e <_strtol_l.constprop.0+0xc6>
 8022e44:	f1bc 0f00 	cmp.w	ip, #0
 8022e48:	db1e      	blt.n	8022e88 <_strtol_l.constprop.0+0xc0>
 8022e4a:	45b1      	cmp	r9, r6
 8022e4c:	d31c      	bcc.n	8022e88 <_strtol_l.constprop.0+0xc0>
 8022e4e:	d101      	bne.n	8022e54 <_strtol_l.constprop.0+0x8c>
 8022e50:	45a2      	cmp	sl, r4
 8022e52:	db19      	blt.n	8022e88 <_strtol_l.constprop.0+0xc0>
 8022e54:	fb06 4603 	mla	r6, r6, r3, r4
 8022e58:	f04f 0c01 	mov.w	ip, #1
 8022e5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022e60:	e7e8      	b.n	8022e34 <_strtol_l.constprop.0+0x6c>
 8022e62:	2c2b      	cmp	r4, #43	; 0x2b
 8022e64:	bf04      	itt	eq
 8022e66:	782c      	ldrbeq	r4, [r5, #0]
 8022e68:	1cb5      	addeq	r5, r6, #2
 8022e6a:	e7ca      	b.n	8022e02 <_strtol_l.constprop.0+0x3a>
 8022e6c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8022e70:	f1be 0f19 	cmp.w	lr, #25
 8022e74:	d801      	bhi.n	8022e7a <_strtol_l.constprop.0+0xb2>
 8022e76:	3c37      	subs	r4, #55	; 0x37
 8022e78:	e7e2      	b.n	8022e40 <_strtol_l.constprop.0+0x78>
 8022e7a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8022e7e:	f1be 0f19 	cmp.w	lr, #25
 8022e82:	d804      	bhi.n	8022e8e <_strtol_l.constprop.0+0xc6>
 8022e84:	3c57      	subs	r4, #87	; 0x57
 8022e86:	e7db      	b.n	8022e40 <_strtol_l.constprop.0+0x78>
 8022e88:	f04f 3cff 	mov.w	ip, #4294967295
 8022e8c:	e7e6      	b.n	8022e5c <_strtol_l.constprop.0+0x94>
 8022e8e:	f1bc 0f00 	cmp.w	ip, #0
 8022e92:	da05      	bge.n	8022ea0 <_strtol_l.constprop.0+0xd8>
 8022e94:	2322      	movs	r3, #34	; 0x22
 8022e96:	6003      	str	r3, [r0, #0]
 8022e98:	4646      	mov	r6, r8
 8022e9a:	b942      	cbnz	r2, 8022eae <_strtol_l.constprop.0+0xe6>
 8022e9c:	4630      	mov	r0, r6
 8022e9e:	e79e      	b.n	8022dde <_strtol_l.constprop.0+0x16>
 8022ea0:	b107      	cbz	r7, 8022ea4 <_strtol_l.constprop.0+0xdc>
 8022ea2:	4276      	negs	r6, r6
 8022ea4:	2a00      	cmp	r2, #0
 8022ea6:	d0f9      	beq.n	8022e9c <_strtol_l.constprop.0+0xd4>
 8022ea8:	f1bc 0f00 	cmp.w	ip, #0
 8022eac:	d000      	beq.n	8022eb0 <_strtol_l.constprop.0+0xe8>
 8022eae:	1e69      	subs	r1, r5, #1
 8022eb0:	6011      	str	r1, [r2, #0]
 8022eb2:	e7f3      	b.n	8022e9c <_strtol_l.constprop.0+0xd4>
 8022eb4:	2430      	movs	r4, #48	; 0x30
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	d1b1      	bne.n	8022e1e <_strtol_l.constprop.0+0x56>
 8022eba:	2308      	movs	r3, #8
 8022ebc:	e7af      	b.n	8022e1e <_strtol_l.constprop.0+0x56>
 8022ebe:	2c30      	cmp	r4, #48	; 0x30
 8022ec0:	d0a5      	beq.n	8022e0e <_strtol_l.constprop.0+0x46>
 8022ec2:	230a      	movs	r3, #10
 8022ec4:	e7ab      	b.n	8022e1e <_strtol_l.constprop.0+0x56>
 8022ec6:	bf00      	nop
 8022ec8:	080290c5 	.word	0x080290c5

08022ecc <strtol>:
 8022ecc:	4613      	mov	r3, r2
 8022ece:	460a      	mov	r2, r1
 8022ed0:	4601      	mov	r1, r0
 8022ed2:	4802      	ldr	r0, [pc, #8]	; (8022edc <strtol+0x10>)
 8022ed4:	6800      	ldr	r0, [r0, #0]
 8022ed6:	f7ff bf77 	b.w	8022dc8 <_strtol_l.constprop.0>
 8022eda:	bf00      	nop
 8022edc:	20000158 	.word	0x20000158

08022ee0 <__malloc_lock>:
 8022ee0:	4801      	ldr	r0, [pc, #4]	; (8022ee8 <__malloc_lock+0x8>)
 8022ee2:	f000 b809 	b.w	8022ef8 <__retarget_lock_acquire_recursive>
 8022ee6:	bf00      	nop
 8022ee8:	20001dd8 	.word	0x20001dd8

08022eec <__malloc_unlock>:
 8022eec:	4801      	ldr	r0, [pc, #4]	; (8022ef4 <__malloc_unlock+0x8>)
 8022eee:	f000 b804 	b.w	8022efa <__retarget_lock_release_recursive>
 8022ef2:	bf00      	nop
 8022ef4:	20001dd8 	.word	0x20001dd8

08022ef8 <__retarget_lock_acquire_recursive>:
 8022ef8:	4770      	bx	lr

08022efa <__retarget_lock_release_recursive>:
 8022efa:	4770      	bx	lr
 8022efc:	0000      	movs	r0, r0
	...

08022f00 <cos>:
 8022f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022f02:	ec53 2b10 	vmov	r2, r3, d0
 8022f06:	4826      	ldr	r0, [pc, #152]	; (8022fa0 <cos+0xa0>)
 8022f08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8022f0c:	4281      	cmp	r1, r0
 8022f0e:	dc06      	bgt.n	8022f1e <cos+0x1e>
 8022f10:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8022f98 <cos+0x98>
 8022f14:	b005      	add	sp, #20
 8022f16:	f85d eb04 	ldr.w	lr, [sp], #4
 8022f1a:	f001 b9c1 	b.w	80242a0 <__kernel_cos>
 8022f1e:	4821      	ldr	r0, [pc, #132]	; (8022fa4 <cos+0xa4>)
 8022f20:	4281      	cmp	r1, r0
 8022f22:	dd09      	ble.n	8022f38 <cos+0x38>
 8022f24:	ee10 0a10 	vmov	r0, s0
 8022f28:	4619      	mov	r1, r3
 8022f2a:	f7dd f961 	bl	80001f0 <__aeabi_dsub>
 8022f2e:	ec41 0b10 	vmov	d0, r0, r1
 8022f32:	b005      	add	sp, #20
 8022f34:	f85d fb04 	ldr.w	pc, [sp], #4
 8022f38:	4668      	mov	r0, sp
 8022f3a:	f000 f9fd 	bl	8023338 <__ieee754_rem_pio2>
 8022f3e:	f000 0003 	and.w	r0, r0, #3
 8022f42:	2801      	cmp	r0, #1
 8022f44:	d00b      	beq.n	8022f5e <cos+0x5e>
 8022f46:	2802      	cmp	r0, #2
 8022f48:	d016      	beq.n	8022f78 <cos+0x78>
 8022f4a:	b9e0      	cbnz	r0, 8022f86 <cos+0x86>
 8022f4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022f50:	ed9d 0b00 	vldr	d0, [sp]
 8022f54:	f001 f9a4 	bl	80242a0 <__kernel_cos>
 8022f58:	ec51 0b10 	vmov	r0, r1, d0
 8022f5c:	e7e7      	b.n	8022f2e <cos+0x2e>
 8022f5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022f62:	ed9d 0b00 	vldr	d0, [sp]
 8022f66:	f001 fdb3 	bl	8024ad0 <__kernel_sin>
 8022f6a:	ec53 2b10 	vmov	r2, r3, d0
 8022f6e:	ee10 0a10 	vmov	r0, s0
 8022f72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022f76:	e7da      	b.n	8022f2e <cos+0x2e>
 8022f78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022f7c:	ed9d 0b00 	vldr	d0, [sp]
 8022f80:	f001 f98e 	bl	80242a0 <__kernel_cos>
 8022f84:	e7f1      	b.n	8022f6a <cos+0x6a>
 8022f86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022f8a:	ed9d 0b00 	vldr	d0, [sp]
 8022f8e:	2001      	movs	r0, #1
 8022f90:	f001 fd9e 	bl	8024ad0 <__kernel_sin>
 8022f94:	e7e0      	b.n	8022f58 <cos+0x58>
 8022f96:	bf00      	nop
	...
 8022fa0:	3fe921fb 	.word	0x3fe921fb
 8022fa4:	7fefffff 	.word	0x7fefffff

08022fa8 <sin>:
 8022fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022faa:	ec53 2b10 	vmov	r2, r3, d0
 8022fae:	4828      	ldr	r0, [pc, #160]	; (8023050 <sin+0xa8>)
 8022fb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8022fb4:	4281      	cmp	r1, r0
 8022fb6:	dc07      	bgt.n	8022fc8 <sin+0x20>
 8022fb8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8023048 <sin+0xa0>
 8022fbc:	2000      	movs	r0, #0
 8022fbe:	b005      	add	sp, #20
 8022fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8022fc4:	f001 bd84 	b.w	8024ad0 <__kernel_sin>
 8022fc8:	4822      	ldr	r0, [pc, #136]	; (8023054 <sin+0xac>)
 8022fca:	4281      	cmp	r1, r0
 8022fcc:	dd09      	ble.n	8022fe2 <sin+0x3a>
 8022fce:	ee10 0a10 	vmov	r0, s0
 8022fd2:	4619      	mov	r1, r3
 8022fd4:	f7dd f90c 	bl	80001f0 <__aeabi_dsub>
 8022fd8:	ec41 0b10 	vmov	d0, r0, r1
 8022fdc:	b005      	add	sp, #20
 8022fde:	f85d fb04 	ldr.w	pc, [sp], #4
 8022fe2:	4668      	mov	r0, sp
 8022fe4:	f000 f9a8 	bl	8023338 <__ieee754_rem_pio2>
 8022fe8:	f000 0003 	and.w	r0, r0, #3
 8022fec:	2801      	cmp	r0, #1
 8022fee:	d00c      	beq.n	802300a <sin+0x62>
 8022ff0:	2802      	cmp	r0, #2
 8022ff2:	d011      	beq.n	8023018 <sin+0x70>
 8022ff4:	b9f0      	cbnz	r0, 8023034 <sin+0x8c>
 8022ff6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022ffa:	ed9d 0b00 	vldr	d0, [sp]
 8022ffe:	2001      	movs	r0, #1
 8023000:	f001 fd66 	bl	8024ad0 <__kernel_sin>
 8023004:	ec51 0b10 	vmov	r0, r1, d0
 8023008:	e7e6      	b.n	8022fd8 <sin+0x30>
 802300a:	ed9d 1b02 	vldr	d1, [sp, #8]
 802300e:	ed9d 0b00 	vldr	d0, [sp]
 8023012:	f001 f945 	bl	80242a0 <__kernel_cos>
 8023016:	e7f5      	b.n	8023004 <sin+0x5c>
 8023018:	ed9d 1b02 	vldr	d1, [sp, #8]
 802301c:	ed9d 0b00 	vldr	d0, [sp]
 8023020:	2001      	movs	r0, #1
 8023022:	f001 fd55 	bl	8024ad0 <__kernel_sin>
 8023026:	ec53 2b10 	vmov	r2, r3, d0
 802302a:	ee10 0a10 	vmov	r0, s0
 802302e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023032:	e7d1      	b.n	8022fd8 <sin+0x30>
 8023034:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023038:	ed9d 0b00 	vldr	d0, [sp]
 802303c:	f001 f930 	bl	80242a0 <__kernel_cos>
 8023040:	e7f1      	b.n	8023026 <sin+0x7e>
 8023042:	bf00      	nop
 8023044:	f3af 8000 	nop.w
	...
 8023050:	3fe921fb 	.word	0x3fe921fb
 8023054:	7fefffff 	.word	0x7fefffff

08023058 <cosf>:
 8023058:	ee10 3a10 	vmov	r3, s0
 802305c:	b507      	push	{r0, r1, r2, lr}
 802305e:	4a1e      	ldr	r2, [pc, #120]	; (80230d8 <cosf+0x80>)
 8023060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023064:	4293      	cmp	r3, r2
 8023066:	dc06      	bgt.n	8023076 <cosf+0x1e>
 8023068:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80230dc <cosf+0x84>
 802306c:	b003      	add	sp, #12
 802306e:	f85d eb04 	ldr.w	lr, [sp], #4
 8023072:	f001 bdeb 	b.w	8024c4c <__kernel_cosf>
 8023076:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802307a:	db04      	blt.n	8023086 <cosf+0x2e>
 802307c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8023080:	b003      	add	sp, #12
 8023082:	f85d fb04 	ldr.w	pc, [sp], #4
 8023086:	4668      	mov	r0, sp
 8023088:	f000 ffc8 	bl	802401c <__ieee754_rem_pio2f>
 802308c:	f000 0003 	and.w	r0, r0, #3
 8023090:	2801      	cmp	r0, #1
 8023092:	d009      	beq.n	80230a8 <cosf+0x50>
 8023094:	2802      	cmp	r0, #2
 8023096:	d010      	beq.n	80230ba <cosf+0x62>
 8023098:	b9b0      	cbnz	r0, 80230c8 <cosf+0x70>
 802309a:	eddd 0a01 	vldr	s1, [sp, #4]
 802309e:	ed9d 0a00 	vldr	s0, [sp]
 80230a2:	f001 fdd3 	bl	8024c4c <__kernel_cosf>
 80230a6:	e7eb      	b.n	8023080 <cosf+0x28>
 80230a8:	eddd 0a01 	vldr	s1, [sp, #4]
 80230ac:	ed9d 0a00 	vldr	s0, [sp]
 80230b0:	f002 f8a2 	bl	80251f8 <__kernel_sinf>
 80230b4:	eeb1 0a40 	vneg.f32	s0, s0
 80230b8:	e7e2      	b.n	8023080 <cosf+0x28>
 80230ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80230be:	ed9d 0a00 	vldr	s0, [sp]
 80230c2:	f001 fdc3 	bl	8024c4c <__kernel_cosf>
 80230c6:	e7f5      	b.n	80230b4 <cosf+0x5c>
 80230c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80230cc:	ed9d 0a00 	vldr	s0, [sp]
 80230d0:	2001      	movs	r0, #1
 80230d2:	f002 f891 	bl	80251f8 <__kernel_sinf>
 80230d6:	e7d3      	b.n	8023080 <cosf+0x28>
 80230d8:	3f490fd8 	.word	0x3f490fd8
 80230dc:	00000000 	.word	0x00000000

080230e0 <lrintf>:
 80230e0:	ee10 3a10 	vmov	r3, s0
 80230e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80230e8:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 80230ec:	281e      	cmp	r0, #30
 80230ee:	b082      	sub	sp, #8
 80230f0:	dc2e      	bgt.n	8023150 <lrintf+0x70>
 80230f2:	1c41      	adds	r1, r0, #1
 80230f4:	da02      	bge.n	80230fc <lrintf+0x1c>
 80230f6:	2000      	movs	r0, #0
 80230f8:	b002      	add	sp, #8
 80230fa:	4770      	bx	lr
 80230fc:	2816      	cmp	r0, #22
 80230fe:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8023102:	dd09      	ble.n	8023118 <lrintf+0x38>
 8023104:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8023108:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 802310c:	3a96      	subs	r2, #150	; 0x96
 802310e:	4090      	lsls	r0, r2
 8023110:	2900      	cmp	r1, #0
 8023112:	d0f1      	beq.n	80230f8 <lrintf+0x18>
 8023114:	4240      	negs	r0, r0
 8023116:	e7ef      	b.n	80230f8 <lrintf+0x18>
 8023118:	4b10      	ldr	r3, [pc, #64]	; (802315c <lrintf+0x7c>)
 802311a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802311e:	ed93 7a00 	vldr	s14, [r3]
 8023122:	ee37 0a00 	vadd.f32	s0, s14, s0
 8023126:	ed8d 0a01 	vstr	s0, [sp, #4]
 802312a:	eddd 7a01 	vldr	s15, [sp, #4]
 802312e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023132:	ee17 3a90 	vmov	r3, s15
 8023136:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802313a:	d0dc      	beq.n	80230f6 <lrintf+0x16>
 802313c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8023140:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8023144:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8023148:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 802314c:	40d8      	lsrs	r0, r3
 802314e:	e7df      	b.n	8023110 <lrintf+0x30>
 8023150:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8023154:	ee17 0a90 	vmov	r0, s15
 8023158:	e7ce      	b.n	80230f8 <lrintf+0x18>
 802315a:	bf00      	nop
 802315c:	080291c8 	.word	0x080291c8

08023160 <sinf>:
 8023160:	ee10 3a10 	vmov	r3, s0
 8023164:	b507      	push	{r0, r1, r2, lr}
 8023166:	4a1f      	ldr	r2, [pc, #124]	; (80231e4 <sinf+0x84>)
 8023168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802316c:	4293      	cmp	r3, r2
 802316e:	dc07      	bgt.n	8023180 <sinf+0x20>
 8023170:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80231e8 <sinf+0x88>
 8023174:	2000      	movs	r0, #0
 8023176:	b003      	add	sp, #12
 8023178:	f85d eb04 	ldr.w	lr, [sp], #4
 802317c:	f002 b83c 	b.w	80251f8 <__kernel_sinf>
 8023180:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023184:	db04      	blt.n	8023190 <sinf+0x30>
 8023186:	ee30 0a40 	vsub.f32	s0, s0, s0
 802318a:	b003      	add	sp, #12
 802318c:	f85d fb04 	ldr.w	pc, [sp], #4
 8023190:	4668      	mov	r0, sp
 8023192:	f000 ff43 	bl	802401c <__ieee754_rem_pio2f>
 8023196:	f000 0003 	and.w	r0, r0, #3
 802319a:	2801      	cmp	r0, #1
 802319c:	d00a      	beq.n	80231b4 <sinf+0x54>
 802319e:	2802      	cmp	r0, #2
 80231a0:	d00f      	beq.n	80231c2 <sinf+0x62>
 80231a2:	b9c0      	cbnz	r0, 80231d6 <sinf+0x76>
 80231a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80231a8:	ed9d 0a00 	vldr	s0, [sp]
 80231ac:	2001      	movs	r0, #1
 80231ae:	f002 f823 	bl	80251f8 <__kernel_sinf>
 80231b2:	e7ea      	b.n	802318a <sinf+0x2a>
 80231b4:	eddd 0a01 	vldr	s1, [sp, #4]
 80231b8:	ed9d 0a00 	vldr	s0, [sp]
 80231bc:	f001 fd46 	bl	8024c4c <__kernel_cosf>
 80231c0:	e7e3      	b.n	802318a <sinf+0x2a>
 80231c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80231c6:	ed9d 0a00 	vldr	s0, [sp]
 80231ca:	2001      	movs	r0, #1
 80231cc:	f002 f814 	bl	80251f8 <__kernel_sinf>
 80231d0:	eeb1 0a40 	vneg.f32	s0, s0
 80231d4:	e7d9      	b.n	802318a <sinf+0x2a>
 80231d6:	eddd 0a01 	vldr	s1, [sp, #4]
 80231da:	ed9d 0a00 	vldr	s0, [sp]
 80231de:	f001 fd35 	bl	8024c4c <__kernel_cosf>
 80231e2:	e7f5      	b.n	80231d0 <sinf+0x70>
 80231e4:	3f490fd8 	.word	0x3f490fd8
 80231e8:	00000000 	.word	0x00000000

080231ec <acosf>:
 80231ec:	b508      	push	{r3, lr}
 80231ee:	ed2d 8b02 	vpush	{d8}
 80231f2:	eeb0 8a40 	vmov.f32	s16, s0
 80231f6:	f000 faab 	bl	8023750 <__ieee754_acosf>
 80231fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80231fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023202:	eef0 8a40 	vmov.f32	s17, s0
 8023206:	d615      	bvs.n	8023234 <acosf+0x48>
 8023208:	eeb0 0a48 	vmov.f32	s0, s16
 802320c:	f002 fa42 	bl	8025694 <fabsf>
 8023210:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023214:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802321c:	dd0a      	ble.n	8023234 <acosf+0x48>
 802321e:	f7ff fbf3 	bl	8022a08 <__errno>
 8023222:	ecbd 8b02 	vpop	{d8}
 8023226:	2321      	movs	r3, #33	; 0x21
 8023228:	6003      	str	r3, [r0, #0]
 802322a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802322e:	4804      	ldr	r0, [pc, #16]	; (8023240 <acosf+0x54>)
 8023230:	f002 ba86 	b.w	8025740 <nanf>
 8023234:	eeb0 0a68 	vmov.f32	s0, s17
 8023238:	ecbd 8b02 	vpop	{d8}
 802323c:	bd08      	pop	{r3, pc}
 802323e:	bf00      	nop
 8023240:	080291d0 	.word	0x080291d0

08023244 <atan2f>:
 8023244:	f000 bb7c 	b.w	8023940 <__ieee754_atan2f>

08023248 <powf>:
 8023248:	b508      	push	{r3, lr}
 802324a:	ed2d 8b04 	vpush	{d8-d9}
 802324e:	eeb0 8a60 	vmov.f32	s16, s1
 8023252:	eeb0 9a40 	vmov.f32	s18, s0
 8023256:	f000 fc13 	bl	8023a80 <__ieee754_powf>
 802325a:	eeb4 8a48 	vcmp.f32	s16, s16
 802325e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023262:	eef0 8a40 	vmov.f32	s17, s0
 8023266:	d63e      	bvs.n	80232e6 <powf+0x9e>
 8023268:	eeb5 9a40 	vcmp.f32	s18, #0.0
 802326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023270:	d112      	bne.n	8023298 <powf+0x50>
 8023272:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8023276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802327a:	d039      	beq.n	80232f0 <powf+0xa8>
 802327c:	eeb0 0a48 	vmov.f32	s0, s16
 8023280:	f002 fa0f 	bl	80256a2 <finitef>
 8023284:	b378      	cbz	r0, 80232e6 <powf+0x9e>
 8023286:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802328a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802328e:	d52a      	bpl.n	80232e6 <powf+0x9e>
 8023290:	f7ff fbba 	bl	8022a08 <__errno>
 8023294:	2322      	movs	r3, #34	; 0x22
 8023296:	e014      	b.n	80232c2 <powf+0x7a>
 8023298:	f002 fa03 	bl	80256a2 <finitef>
 802329c:	b998      	cbnz	r0, 80232c6 <powf+0x7e>
 802329e:	eeb0 0a49 	vmov.f32	s0, s18
 80232a2:	f002 f9fe 	bl	80256a2 <finitef>
 80232a6:	b170      	cbz	r0, 80232c6 <powf+0x7e>
 80232a8:	eeb0 0a48 	vmov.f32	s0, s16
 80232ac:	f002 f9f9 	bl	80256a2 <finitef>
 80232b0:	b148      	cbz	r0, 80232c6 <powf+0x7e>
 80232b2:	eef4 8a68 	vcmp.f32	s17, s17
 80232b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232ba:	d7e9      	bvc.n	8023290 <powf+0x48>
 80232bc:	f7ff fba4 	bl	8022a08 <__errno>
 80232c0:	2321      	movs	r3, #33	; 0x21
 80232c2:	6003      	str	r3, [r0, #0]
 80232c4:	e00f      	b.n	80232e6 <powf+0x9e>
 80232c6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80232ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232ce:	d10a      	bne.n	80232e6 <powf+0x9e>
 80232d0:	eeb0 0a49 	vmov.f32	s0, s18
 80232d4:	f002 f9e5 	bl	80256a2 <finitef>
 80232d8:	b128      	cbz	r0, 80232e6 <powf+0x9e>
 80232da:	eeb0 0a48 	vmov.f32	s0, s16
 80232de:	f002 f9e0 	bl	80256a2 <finitef>
 80232e2:	2800      	cmp	r0, #0
 80232e4:	d1d4      	bne.n	8023290 <powf+0x48>
 80232e6:	eeb0 0a68 	vmov.f32	s0, s17
 80232ea:	ecbd 8b04 	vpop	{d8-d9}
 80232ee:	bd08      	pop	{r3, pc}
 80232f0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80232f4:	e7f7      	b.n	80232e6 <powf+0x9e>
	...

080232f8 <sqrtf>:
 80232f8:	b508      	push	{r3, lr}
 80232fa:	ed2d 8b02 	vpush	{d8}
 80232fe:	eeb0 8a40 	vmov.f32	s16, s0
 8023302:	f000 ffc7 	bl	8024294 <__ieee754_sqrtf>
 8023306:	eeb4 8a48 	vcmp.f32	s16, s16
 802330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802330e:	d60c      	bvs.n	802332a <sqrtf+0x32>
 8023310:	eddf 8a07 	vldr	s17, [pc, #28]	; 8023330 <sqrtf+0x38>
 8023314:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8023318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802331c:	d505      	bpl.n	802332a <sqrtf+0x32>
 802331e:	f7ff fb73 	bl	8022a08 <__errno>
 8023322:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8023326:	2321      	movs	r3, #33	; 0x21
 8023328:	6003      	str	r3, [r0, #0]
 802332a:	ecbd 8b02 	vpop	{d8}
 802332e:	bd08      	pop	{r3, pc}
	...

08023338 <__ieee754_rem_pio2>:
 8023338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802333c:	ed2d 8b02 	vpush	{d8}
 8023340:	ec55 4b10 	vmov	r4, r5, d0
 8023344:	4bca      	ldr	r3, [pc, #808]	; (8023670 <__ieee754_rem_pio2+0x338>)
 8023346:	b08b      	sub	sp, #44	; 0x2c
 8023348:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 802334c:	4598      	cmp	r8, r3
 802334e:	4682      	mov	sl, r0
 8023350:	9502      	str	r5, [sp, #8]
 8023352:	dc08      	bgt.n	8023366 <__ieee754_rem_pio2+0x2e>
 8023354:	2200      	movs	r2, #0
 8023356:	2300      	movs	r3, #0
 8023358:	ed80 0b00 	vstr	d0, [r0]
 802335c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8023360:	f04f 0b00 	mov.w	fp, #0
 8023364:	e028      	b.n	80233b8 <__ieee754_rem_pio2+0x80>
 8023366:	4bc3      	ldr	r3, [pc, #780]	; (8023674 <__ieee754_rem_pio2+0x33c>)
 8023368:	4598      	cmp	r8, r3
 802336a:	dc78      	bgt.n	802345e <__ieee754_rem_pio2+0x126>
 802336c:	9b02      	ldr	r3, [sp, #8]
 802336e:	4ec2      	ldr	r6, [pc, #776]	; (8023678 <__ieee754_rem_pio2+0x340>)
 8023370:	2b00      	cmp	r3, #0
 8023372:	ee10 0a10 	vmov	r0, s0
 8023376:	a3b0      	add	r3, pc, #704	; (adr r3, 8023638 <__ieee754_rem_pio2+0x300>)
 8023378:	e9d3 2300 	ldrd	r2, r3, [r3]
 802337c:	4629      	mov	r1, r5
 802337e:	dd39      	ble.n	80233f4 <__ieee754_rem_pio2+0xbc>
 8023380:	f7dc ff36 	bl	80001f0 <__aeabi_dsub>
 8023384:	45b0      	cmp	r8, r6
 8023386:	4604      	mov	r4, r0
 8023388:	460d      	mov	r5, r1
 802338a:	d01b      	beq.n	80233c4 <__ieee754_rem_pio2+0x8c>
 802338c:	a3ac      	add	r3, pc, #688	; (adr r3, 8023640 <__ieee754_rem_pio2+0x308>)
 802338e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023392:	f7dc ff2d 	bl	80001f0 <__aeabi_dsub>
 8023396:	4602      	mov	r2, r0
 8023398:	460b      	mov	r3, r1
 802339a:	e9ca 2300 	strd	r2, r3, [sl]
 802339e:	4620      	mov	r0, r4
 80233a0:	4629      	mov	r1, r5
 80233a2:	f7dc ff25 	bl	80001f0 <__aeabi_dsub>
 80233a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8023640 <__ieee754_rem_pio2+0x308>)
 80233a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233ac:	f7dc ff20 	bl	80001f0 <__aeabi_dsub>
 80233b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80233b4:	f04f 0b01 	mov.w	fp, #1
 80233b8:	4658      	mov	r0, fp
 80233ba:	b00b      	add	sp, #44	; 0x2c
 80233bc:	ecbd 8b02 	vpop	{d8}
 80233c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233c4:	a3a0      	add	r3, pc, #640	; (adr r3, 8023648 <__ieee754_rem_pio2+0x310>)
 80233c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233ca:	f7dc ff11 	bl	80001f0 <__aeabi_dsub>
 80233ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8023650 <__ieee754_rem_pio2+0x318>)
 80233d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233d4:	4604      	mov	r4, r0
 80233d6:	460d      	mov	r5, r1
 80233d8:	f7dc ff0a 	bl	80001f0 <__aeabi_dsub>
 80233dc:	4602      	mov	r2, r0
 80233de:	460b      	mov	r3, r1
 80233e0:	e9ca 2300 	strd	r2, r3, [sl]
 80233e4:	4620      	mov	r0, r4
 80233e6:	4629      	mov	r1, r5
 80233e8:	f7dc ff02 	bl	80001f0 <__aeabi_dsub>
 80233ec:	a398      	add	r3, pc, #608	; (adr r3, 8023650 <__ieee754_rem_pio2+0x318>)
 80233ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233f2:	e7db      	b.n	80233ac <__ieee754_rem_pio2+0x74>
 80233f4:	f7dc fefe 	bl	80001f4 <__adddf3>
 80233f8:	45b0      	cmp	r8, r6
 80233fa:	4604      	mov	r4, r0
 80233fc:	460d      	mov	r5, r1
 80233fe:	d016      	beq.n	802342e <__ieee754_rem_pio2+0xf6>
 8023400:	a38f      	add	r3, pc, #572	; (adr r3, 8023640 <__ieee754_rem_pio2+0x308>)
 8023402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023406:	f7dc fef5 	bl	80001f4 <__adddf3>
 802340a:	4602      	mov	r2, r0
 802340c:	460b      	mov	r3, r1
 802340e:	e9ca 2300 	strd	r2, r3, [sl]
 8023412:	4620      	mov	r0, r4
 8023414:	4629      	mov	r1, r5
 8023416:	f7dc feeb 	bl	80001f0 <__aeabi_dsub>
 802341a:	a389      	add	r3, pc, #548	; (adr r3, 8023640 <__ieee754_rem_pio2+0x308>)
 802341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023420:	f7dc fee8 	bl	80001f4 <__adddf3>
 8023424:	f04f 3bff 	mov.w	fp, #4294967295
 8023428:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802342c:	e7c4      	b.n	80233b8 <__ieee754_rem_pio2+0x80>
 802342e:	a386      	add	r3, pc, #536	; (adr r3, 8023648 <__ieee754_rem_pio2+0x310>)
 8023430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023434:	f7dc fede 	bl	80001f4 <__adddf3>
 8023438:	a385      	add	r3, pc, #532	; (adr r3, 8023650 <__ieee754_rem_pio2+0x318>)
 802343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802343e:	4604      	mov	r4, r0
 8023440:	460d      	mov	r5, r1
 8023442:	f7dc fed7 	bl	80001f4 <__adddf3>
 8023446:	4602      	mov	r2, r0
 8023448:	460b      	mov	r3, r1
 802344a:	e9ca 2300 	strd	r2, r3, [sl]
 802344e:	4620      	mov	r0, r4
 8023450:	4629      	mov	r1, r5
 8023452:	f7dc fecd 	bl	80001f0 <__aeabi_dsub>
 8023456:	a37e      	add	r3, pc, #504	; (adr r3, 8023650 <__ieee754_rem_pio2+0x318>)
 8023458:	e9d3 2300 	ldrd	r2, r3, [r3]
 802345c:	e7e0      	b.n	8023420 <__ieee754_rem_pio2+0xe8>
 802345e:	4b87      	ldr	r3, [pc, #540]	; (802367c <__ieee754_rem_pio2+0x344>)
 8023460:	4598      	cmp	r8, r3
 8023462:	f300 80d9 	bgt.w	8023618 <__ieee754_rem_pio2+0x2e0>
 8023466:	f001 ff31 	bl	80252cc <fabs>
 802346a:	ec55 4b10 	vmov	r4, r5, d0
 802346e:	ee10 0a10 	vmov	r0, s0
 8023472:	a379      	add	r3, pc, #484	; (adr r3, 8023658 <__ieee754_rem_pio2+0x320>)
 8023474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023478:	4629      	mov	r1, r5
 802347a:	f7dd f871 	bl	8000560 <__aeabi_dmul>
 802347e:	4b80      	ldr	r3, [pc, #512]	; (8023680 <__ieee754_rem_pio2+0x348>)
 8023480:	2200      	movs	r2, #0
 8023482:	f7dc feb7 	bl	80001f4 <__adddf3>
 8023486:	f7dd fb05 	bl	8000a94 <__aeabi_d2iz>
 802348a:	4683      	mov	fp, r0
 802348c:	f7dc fffe 	bl	800048c <__aeabi_i2d>
 8023490:	4602      	mov	r2, r0
 8023492:	460b      	mov	r3, r1
 8023494:	ec43 2b18 	vmov	d8, r2, r3
 8023498:	a367      	add	r3, pc, #412	; (adr r3, 8023638 <__ieee754_rem_pio2+0x300>)
 802349a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802349e:	f7dd f85f 	bl	8000560 <__aeabi_dmul>
 80234a2:	4602      	mov	r2, r0
 80234a4:	460b      	mov	r3, r1
 80234a6:	4620      	mov	r0, r4
 80234a8:	4629      	mov	r1, r5
 80234aa:	f7dc fea1 	bl	80001f0 <__aeabi_dsub>
 80234ae:	a364      	add	r3, pc, #400	; (adr r3, 8023640 <__ieee754_rem_pio2+0x308>)
 80234b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234b4:	4606      	mov	r6, r0
 80234b6:	460f      	mov	r7, r1
 80234b8:	ec51 0b18 	vmov	r0, r1, d8
 80234bc:	f7dd f850 	bl	8000560 <__aeabi_dmul>
 80234c0:	f1bb 0f1f 	cmp.w	fp, #31
 80234c4:	4604      	mov	r4, r0
 80234c6:	460d      	mov	r5, r1
 80234c8:	dc0d      	bgt.n	80234e6 <__ieee754_rem_pio2+0x1ae>
 80234ca:	4b6e      	ldr	r3, [pc, #440]	; (8023684 <__ieee754_rem_pio2+0x34c>)
 80234cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80234d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80234d4:	4543      	cmp	r3, r8
 80234d6:	d006      	beq.n	80234e6 <__ieee754_rem_pio2+0x1ae>
 80234d8:	4622      	mov	r2, r4
 80234da:	462b      	mov	r3, r5
 80234dc:	4630      	mov	r0, r6
 80234de:	4639      	mov	r1, r7
 80234e0:	f7dc fe86 	bl	80001f0 <__aeabi_dsub>
 80234e4:	e00f      	b.n	8023506 <__ieee754_rem_pio2+0x1ce>
 80234e6:	462b      	mov	r3, r5
 80234e8:	4622      	mov	r2, r4
 80234ea:	4630      	mov	r0, r6
 80234ec:	4639      	mov	r1, r7
 80234ee:	f7dc fe7f 	bl	80001f0 <__aeabi_dsub>
 80234f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80234f6:	9303      	str	r3, [sp, #12]
 80234f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80234fc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8023500:	f1b8 0f10 	cmp.w	r8, #16
 8023504:	dc02      	bgt.n	802350c <__ieee754_rem_pio2+0x1d4>
 8023506:	e9ca 0100 	strd	r0, r1, [sl]
 802350a:	e039      	b.n	8023580 <__ieee754_rem_pio2+0x248>
 802350c:	a34e      	add	r3, pc, #312	; (adr r3, 8023648 <__ieee754_rem_pio2+0x310>)
 802350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023512:	ec51 0b18 	vmov	r0, r1, d8
 8023516:	f7dd f823 	bl	8000560 <__aeabi_dmul>
 802351a:	4604      	mov	r4, r0
 802351c:	460d      	mov	r5, r1
 802351e:	4602      	mov	r2, r0
 8023520:	460b      	mov	r3, r1
 8023522:	4630      	mov	r0, r6
 8023524:	4639      	mov	r1, r7
 8023526:	f7dc fe63 	bl	80001f0 <__aeabi_dsub>
 802352a:	4602      	mov	r2, r0
 802352c:	460b      	mov	r3, r1
 802352e:	4680      	mov	r8, r0
 8023530:	4689      	mov	r9, r1
 8023532:	4630      	mov	r0, r6
 8023534:	4639      	mov	r1, r7
 8023536:	f7dc fe5b 	bl	80001f0 <__aeabi_dsub>
 802353a:	4622      	mov	r2, r4
 802353c:	462b      	mov	r3, r5
 802353e:	f7dc fe57 	bl	80001f0 <__aeabi_dsub>
 8023542:	a343      	add	r3, pc, #268	; (adr r3, 8023650 <__ieee754_rem_pio2+0x318>)
 8023544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023548:	4604      	mov	r4, r0
 802354a:	460d      	mov	r5, r1
 802354c:	ec51 0b18 	vmov	r0, r1, d8
 8023550:	f7dd f806 	bl	8000560 <__aeabi_dmul>
 8023554:	4622      	mov	r2, r4
 8023556:	462b      	mov	r3, r5
 8023558:	f7dc fe4a 	bl	80001f0 <__aeabi_dsub>
 802355c:	4602      	mov	r2, r0
 802355e:	460b      	mov	r3, r1
 8023560:	4604      	mov	r4, r0
 8023562:	460d      	mov	r5, r1
 8023564:	4640      	mov	r0, r8
 8023566:	4649      	mov	r1, r9
 8023568:	f7dc fe42 	bl	80001f0 <__aeabi_dsub>
 802356c:	9a03      	ldr	r2, [sp, #12]
 802356e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023572:	1ad3      	subs	r3, r2, r3
 8023574:	2b31      	cmp	r3, #49	; 0x31
 8023576:	dc24      	bgt.n	80235c2 <__ieee754_rem_pio2+0x28a>
 8023578:	e9ca 0100 	strd	r0, r1, [sl]
 802357c:	4646      	mov	r6, r8
 802357e:	464f      	mov	r7, r9
 8023580:	e9da 8900 	ldrd	r8, r9, [sl]
 8023584:	4630      	mov	r0, r6
 8023586:	4642      	mov	r2, r8
 8023588:	464b      	mov	r3, r9
 802358a:	4639      	mov	r1, r7
 802358c:	f7dc fe30 	bl	80001f0 <__aeabi_dsub>
 8023590:	462b      	mov	r3, r5
 8023592:	4622      	mov	r2, r4
 8023594:	f7dc fe2c 	bl	80001f0 <__aeabi_dsub>
 8023598:	9b02      	ldr	r3, [sp, #8]
 802359a:	2b00      	cmp	r3, #0
 802359c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80235a0:	f6bf af0a 	bge.w	80233b8 <__ieee754_rem_pio2+0x80>
 80235a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80235a8:	f8ca 3004 	str.w	r3, [sl, #4]
 80235ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80235b0:	f8ca 8000 	str.w	r8, [sl]
 80235b4:	f8ca 0008 	str.w	r0, [sl, #8]
 80235b8:	f8ca 300c 	str.w	r3, [sl, #12]
 80235bc:	f1cb 0b00 	rsb	fp, fp, #0
 80235c0:	e6fa      	b.n	80233b8 <__ieee754_rem_pio2+0x80>
 80235c2:	a327      	add	r3, pc, #156	; (adr r3, 8023660 <__ieee754_rem_pio2+0x328>)
 80235c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235c8:	ec51 0b18 	vmov	r0, r1, d8
 80235cc:	f7dc ffc8 	bl	8000560 <__aeabi_dmul>
 80235d0:	4604      	mov	r4, r0
 80235d2:	460d      	mov	r5, r1
 80235d4:	4602      	mov	r2, r0
 80235d6:	460b      	mov	r3, r1
 80235d8:	4640      	mov	r0, r8
 80235da:	4649      	mov	r1, r9
 80235dc:	f7dc fe08 	bl	80001f0 <__aeabi_dsub>
 80235e0:	4602      	mov	r2, r0
 80235e2:	460b      	mov	r3, r1
 80235e4:	4606      	mov	r6, r0
 80235e6:	460f      	mov	r7, r1
 80235e8:	4640      	mov	r0, r8
 80235ea:	4649      	mov	r1, r9
 80235ec:	f7dc fe00 	bl	80001f0 <__aeabi_dsub>
 80235f0:	4622      	mov	r2, r4
 80235f2:	462b      	mov	r3, r5
 80235f4:	f7dc fdfc 	bl	80001f0 <__aeabi_dsub>
 80235f8:	a31b      	add	r3, pc, #108	; (adr r3, 8023668 <__ieee754_rem_pio2+0x330>)
 80235fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235fe:	4604      	mov	r4, r0
 8023600:	460d      	mov	r5, r1
 8023602:	ec51 0b18 	vmov	r0, r1, d8
 8023606:	f7dc ffab 	bl	8000560 <__aeabi_dmul>
 802360a:	4622      	mov	r2, r4
 802360c:	462b      	mov	r3, r5
 802360e:	f7dc fdef 	bl	80001f0 <__aeabi_dsub>
 8023612:	4604      	mov	r4, r0
 8023614:	460d      	mov	r5, r1
 8023616:	e75f      	b.n	80234d8 <__ieee754_rem_pio2+0x1a0>
 8023618:	4b1b      	ldr	r3, [pc, #108]	; (8023688 <__ieee754_rem_pio2+0x350>)
 802361a:	4598      	cmp	r8, r3
 802361c:	dd36      	ble.n	802368c <__ieee754_rem_pio2+0x354>
 802361e:	ee10 2a10 	vmov	r2, s0
 8023622:	462b      	mov	r3, r5
 8023624:	4620      	mov	r0, r4
 8023626:	4629      	mov	r1, r5
 8023628:	f7dc fde2 	bl	80001f0 <__aeabi_dsub>
 802362c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023630:	e9ca 0100 	strd	r0, r1, [sl]
 8023634:	e694      	b.n	8023360 <__ieee754_rem_pio2+0x28>
 8023636:	bf00      	nop
 8023638:	54400000 	.word	0x54400000
 802363c:	3ff921fb 	.word	0x3ff921fb
 8023640:	1a626331 	.word	0x1a626331
 8023644:	3dd0b461 	.word	0x3dd0b461
 8023648:	1a600000 	.word	0x1a600000
 802364c:	3dd0b461 	.word	0x3dd0b461
 8023650:	2e037073 	.word	0x2e037073
 8023654:	3ba3198a 	.word	0x3ba3198a
 8023658:	6dc9c883 	.word	0x6dc9c883
 802365c:	3fe45f30 	.word	0x3fe45f30
 8023660:	2e000000 	.word	0x2e000000
 8023664:	3ba3198a 	.word	0x3ba3198a
 8023668:	252049c1 	.word	0x252049c1
 802366c:	397b839a 	.word	0x397b839a
 8023670:	3fe921fb 	.word	0x3fe921fb
 8023674:	4002d97b 	.word	0x4002d97b
 8023678:	3ff921fb 	.word	0x3ff921fb
 802367c:	413921fb 	.word	0x413921fb
 8023680:	3fe00000 	.word	0x3fe00000
 8023684:	080291d4 	.word	0x080291d4
 8023688:	7fefffff 	.word	0x7fefffff
 802368c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8023690:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8023694:	ee10 0a10 	vmov	r0, s0
 8023698:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 802369c:	ee10 6a10 	vmov	r6, s0
 80236a0:	460f      	mov	r7, r1
 80236a2:	f7dd f9f7 	bl	8000a94 <__aeabi_d2iz>
 80236a6:	f7dc fef1 	bl	800048c <__aeabi_i2d>
 80236aa:	4602      	mov	r2, r0
 80236ac:	460b      	mov	r3, r1
 80236ae:	4630      	mov	r0, r6
 80236b0:	4639      	mov	r1, r7
 80236b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80236b6:	f7dc fd9b 	bl	80001f0 <__aeabi_dsub>
 80236ba:	4b23      	ldr	r3, [pc, #140]	; (8023748 <__ieee754_rem_pio2+0x410>)
 80236bc:	2200      	movs	r2, #0
 80236be:	f7dc ff4f 	bl	8000560 <__aeabi_dmul>
 80236c2:	460f      	mov	r7, r1
 80236c4:	4606      	mov	r6, r0
 80236c6:	f7dd f9e5 	bl	8000a94 <__aeabi_d2iz>
 80236ca:	f7dc fedf 	bl	800048c <__aeabi_i2d>
 80236ce:	4602      	mov	r2, r0
 80236d0:	460b      	mov	r3, r1
 80236d2:	4630      	mov	r0, r6
 80236d4:	4639      	mov	r1, r7
 80236d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80236da:	f7dc fd89 	bl	80001f0 <__aeabi_dsub>
 80236de:	4b1a      	ldr	r3, [pc, #104]	; (8023748 <__ieee754_rem_pio2+0x410>)
 80236e0:	2200      	movs	r2, #0
 80236e2:	f7dc ff3d 	bl	8000560 <__aeabi_dmul>
 80236e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80236ea:	ad04      	add	r5, sp, #16
 80236ec:	f04f 0803 	mov.w	r8, #3
 80236f0:	46a9      	mov	r9, r5
 80236f2:	2600      	movs	r6, #0
 80236f4:	2700      	movs	r7, #0
 80236f6:	4632      	mov	r2, r6
 80236f8:	463b      	mov	r3, r7
 80236fa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80236fe:	46c3      	mov	fp, r8
 8023700:	3d08      	subs	r5, #8
 8023702:	f108 38ff 	add.w	r8, r8, #4294967295
 8023706:	f7dd f993 	bl	8000a30 <__aeabi_dcmpeq>
 802370a:	2800      	cmp	r0, #0
 802370c:	d1f3      	bne.n	80236f6 <__ieee754_rem_pio2+0x3be>
 802370e:	4b0f      	ldr	r3, [pc, #60]	; (802374c <__ieee754_rem_pio2+0x414>)
 8023710:	9301      	str	r3, [sp, #4]
 8023712:	2302      	movs	r3, #2
 8023714:	9300      	str	r3, [sp, #0]
 8023716:	4622      	mov	r2, r4
 8023718:	465b      	mov	r3, fp
 802371a:	4651      	mov	r1, sl
 802371c:	4648      	mov	r0, r9
 802371e:	f000 fe87 	bl	8024430 <__kernel_rem_pio2>
 8023722:	9b02      	ldr	r3, [sp, #8]
 8023724:	2b00      	cmp	r3, #0
 8023726:	4683      	mov	fp, r0
 8023728:	f6bf ae46 	bge.w	80233b8 <__ieee754_rem_pio2+0x80>
 802372c:	e9da 2100 	ldrd	r2, r1, [sl]
 8023730:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023734:	e9ca 2300 	strd	r2, r3, [sl]
 8023738:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 802373c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023740:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8023744:	e73a      	b.n	80235bc <__ieee754_rem_pio2+0x284>
 8023746:	bf00      	nop
 8023748:	41700000 	.word	0x41700000
 802374c:	08029254 	.word	0x08029254

08023750 <__ieee754_acosf>:
 8023750:	b508      	push	{r3, lr}
 8023752:	ee10 3a10 	vmov	r3, s0
 8023756:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802375a:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 802375e:	ed2d 8b0c 	vpush	{d8-d13}
 8023762:	d10a      	bne.n	802377a <__ieee754_acosf+0x2a>
 8023764:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80238fc <__ieee754_acosf+0x1ac>
 8023768:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8023900 <__ieee754_acosf+0x1b0>
 802376c:	2b00      	cmp	r3, #0
 802376e:	bfd8      	it	le
 8023770:	eeb0 0a48 	vmovle.f32	s0, s16
 8023774:	ecbd 8b0c 	vpop	{d8-d13}
 8023778:	bd08      	pop	{r3, pc}
 802377a:	dd04      	ble.n	8023786 <__ieee754_acosf+0x36>
 802377c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8023780:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8023784:	e7f6      	b.n	8023774 <__ieee754_acosf+0x24>
 8023786:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 802378a:	da3c      	bge.n	8023806 <__ieee754_acosf+0xb6>
 802378c:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8023790:	f340 80b1 	ble.w	80238f6 <__ieee754_acosf+0x1a6>
 8023794:	ee60 7a00 	vmul.f32	s15, s0, s0
 8023798:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8023904 <__ieee754_acosf+0x1b4>
 802379c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8023908 <__ieee754_acosf+0x1b8>
 80237a0:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 802390c <__ieee754_acosf+0x1bc>
 80237a4:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8023910 <__ieee754_acosf+0x1c0>
 80237a8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80237ac:	eddf 6a59 	vldr	s13, [pc, #356]	; 8023914 <__ieee754_acosf+0x1c4>
 80237b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80237b4:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8023918 <__ieee754_acosf+0x1c8>
 80237b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80237bc:	eddf 6a57 	vldr	s13, [pc, #348]	; 802391c <__ieee754_acosf+0x1cc>
 80237c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80237c4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8023920 <__ieee754_acosf+0x1d0>
 80237c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80237cc:	eddf 6a55 	vldr	s13, [pc, #340]	; 8023924 <__ieee754_acosf+0x1d4>
 80237d0:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80237d4:	eddf 6a54 	vldr	s13, [pc, #336]	; 8023928 <__ieee754_acosf+0x1d8>
 80237d8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80237dc:	ed9f 6a53 	vldr	s12, [pc, #332]	; 802392c <__ieee754_acosf+0x1dc>
 80237e0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80237e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80237e8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80237ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80237f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80237f4:	eea0 8a67 	vfms.f32	s16, s0, s15
 80237f8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8023930 <__ieee754_acosf+0x1e0>
 80237fc:	ee30 0a48 	vsub.f32	s0, s0, s16
 8023800:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8023804:	e7b6      	b.n	8023774 <__ieee754_acosf+0x24>
 8023806:	2b00      	cmp	r3, #0
 8023808:	eddf da3e 	vldr	s27, [pc, #248]	; 8023904 <__ieee754_acosf+0x1b4>
 802380c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8023908 <__ieee754_acosf+0x1b8>
 8023810:	ed9f ca40 	vldr	s24, [pc, #256]	; 8023914 <__ieee754_acosf+0x1c4>
 8023814:	eddf ba40 	vldr	s23, [pc, #256]	; 8023918 <__ieee754_acosf+0x1c8>
 8023818:	ed9f ba40 	vldr	s22, [pc, #256]	; 802391c <__ieee754_acosf+0x1cc>
 802381c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8023920 <__ieee754_acosf+0x1d0>
 8023820:	ed9f da40 	vldr	s26, [pc, #256]	; 8023924 <__ieee754_acosf+0x1d4>
 8023824:	eddf aa39 	vldr	s21, [pc, #228]	; 802390c <__ieee754_acosf+0x1bc>
 8023828:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8023928 <__ieee754_acosf+0x1d8>
 802382c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 802392c <__ieee754_acosf+0x1dc>
 8023830:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8023834:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8023838:	da28      	bge.n	802388c <__ieee754_acosf+0x13c>
 802383a:	ee30 0a09 	vadd.f32	s0, s0, s18
 802383e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023842:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8023846:	eee0 aa0d 	vfma.f32	s21, s0, s26
 802384a:	eeac ca80 	vfma.f32	s24, s25, s0
 802384e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8023852:	eeec ba00 	vfma.f32	s23, s24, s0
 8023856:	eeea 9a00 	vfma.f32	s19, s20, s0
 802385a:	eeab ba80 	vfma.f32	s22, s23, s0
 802385e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8023862:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8023866:	ee68 8a80 	vmul.f32	s17, s17, s0
 802386a:	f000 fd13 	bl	8024294 <__ieee754_sqrtf>
 802386e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8023872:	eddf 7a30 	vldr	s15, [pc, #192]	; 8023934 <__ieee754_acosf+0x1e4>
 8023876:	eee0 7a07 	vfma.f32	s15, s0, s14
 802387a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802387e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023882:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8023938 <__ieee754_acosf+0x1e8>
 8023886:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802388a:	e773      	b.n	8023774 <__ieee754_acosf+0x24>
 802388c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8023890:	ee28 8a27 	vmul.f32	s16, s16, s15
 8023894:	eeb0 0a48 	vmov.f32	s0, s16
 8023898:	f000 fcfc 	bl	8024294 <__ieee754_sqrtf>
 802389c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80238a0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80238a4:	eeac ca88 	vfma.f32	s24, s25, s16
 80238a8:	eeaa aa88 	vfma.f32	s20, s21, s16
 80238ac:	eeec ba08 	vfma.f32	s23, s24, s16
 80238b0:	ee10 3a10 	vmov	r3, s0
 80238b4:	eeab ba88 	vfma.f32	s22, s23, s16
 80238b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80238bc:	f023 030f 	bic.w	r3, r3, #15
 80238c0:	eeea 9a08 	vfma.f32	s19, s20, s16
 80238c4:	ee07 3a90 	vmov	s15, r3
 80238c8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80238cc:	eeb0 6a48 	vmov.f32	s12, s16
 80238d0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80238d4:	eea9 9a88 	vfma.f32	s18, s19, s16
 80238d8:	ee70 6a27 	vadd.f32	s13, s0, s15
 80238dc:	ee68 8a88 	vmul.f32	s17, s17, s16
 80238e0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80238e4:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80238e8:	eea0 7a26 	vfma.f32	s14, s0, s13
 80238ec:	ee37 0a87 	vadd.f32	s0, s15, s14
 80238f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80238f4:	e73e      	b.n	8023774 <__ieee754_acosf+0x24>
 80238f6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 802393c <__ieee754_acosf+0x1ec>
 80238fa:	e73b      	b.n	8023774 <__ieee754_acosf+0x24>
 80238fc:	00000000 	.word	0x00000000
 8023900:	40490fdb 	.word	0x40490fdb
 8023904:	3811ef08 	.word	0x3811ef08
 8023908:	3a4f7f04 	.word	0x3a4f7f04
 802390c:	bf303361 	.word	0xbf303361
 8023910:	33a22168 	.word	0x33a22168
 8023914:	bd241146 	.word	0xbd241146
 8023918:	3e4e0aa8 	.word	0x3e4e0aa8
 802391c:	bea6b090 	.word	0xbea6b090
 8023920:	3e2aaaab 	.word	0x3e2aaaab
 8023924:	3d9dc62e 	.word	0x3d9dc62e
 8023928:	4001572d 	.word	0x4001572d
 802392c:	c019d139 	.word	0xc019d139
 8023930:	3fc90fda 	.word	0x3fc90fda
 8023934:	b3a22168 	.word	0xb3a22168
 8023938:	40490fda 	.word	0x40490fda
 802393c:	3fc90fdb 	.word	0x3fc90fdb

08023940 <__ieee754_atan2f>:
 8023940:	ee10 2a90 	vmov	r2, s1
 8023944:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8023948:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802394c:	b510      	push	{r4, lr}
 802394e:	eef0 7a40 	vmov.f32	s15, s0
 8023952:	dc06      	bgt.n	8023962 <__ieee754_atan2f+0x22>
 8023954:	ee10 0a10 	vmov	r0, s0
 8023958:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 802395c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023960:	dd04      	ble.n	802396c <__ieee754_atan2f+0x2c>
 8023962:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8023966:	eeb0 0a67 	vmov.f32	s0, s15
 802396a:	bd10      	pop	{r4, pc}
 802396c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8023970:	d103      	bne.n	802397a <__ieee754_atan2f+0x3a>
 8023972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023976:	f001 bdb9 	b.w	80254ec <atanf>
 802397a:	1794      	asrs	r4, r2, #30
 802397c:	f004 0402 	and.w	r4, r4, #2
 8023980:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8023984:	b943      	cbnz	r3, 8023998 <__ieee754_atan2f+0x58>
 8023986:	2c02      	cmp	r4, #2
 8023988:	d05e      	beq.n	8023a48 <__ieee754_atan2f+0x108>
 802398a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8023a5c <__ieee754_atan2f+0x11c>
 802398e:	2c03      	cmp	r4, #3
 8023990:	bf08      	it	eq
 8023992:	eef0 7a47 	vmoveq.f32	s15, s14
 8023996:	e7e6      	b.n	8023966 <__ieee754_atan2f+0x26>
 8023998:	b941      	cbnz	r1, 80239ac <__ieee754_atan2f+0x6c>
 802399a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8023a60 <__ieee754_atan2f+0x120>
 802399e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8023a64 <__ieee754_atan2f+0x124>
 80239a2:	2800      	cmp	r0, #0
 80239a4:	bfb8      	it	lt
 80239a6:	eef0 7a40 	vmovlt.f32	s15, s0
 80239aa:	e7dc      	b.n	8023966 <__ieee754_atan2f+0x26>
 80239ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80239b0:	d110      	bne.n	80239d4 <__ieee754_atan2f+0x94>
 80239b2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80239b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80239ba:	d107      	bne.n	80239cc <__ieee754_atan2f+0x8c>
 80239bc:	2c02      	cmp	r4, #2
 80239be:	d846      	bhi.n	8023a4e <__ieee754_atan2f+0x10e>
 80239c0:	4b29      	ldr	r3, [pc, #164]	; (8023a68 <__ieee754_atan2f+0x128>)
 80239c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80239c6:	edd4 7a00 	vldr	s15, [r4]
 80239ca:	e7cc      	b.n	8023966 <__ieee754_atan2f+0x26>
 80239cc:	2c02      	cmp	r4, #2
 80239ce:	d841      	bhi.n	8023a54 <__ieee754_atan2f+0x114>
 80239d0:	4b26      	ldr	r3, [pc, #152]	; (8023a6c <__ieee754_atan2f+0x12c>)
 80239d2:	e7f6      	b.n	80239c2 <__ieee754_atan2f+0x82>
 80239d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80239d8:	d0df      	beq.n	802399a <__ieee754_atan2f+0x5a>
 80239da:	1a5b      	subs	r3, r3, r1
 80239dc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80239e0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80239e4:	da1a      	bge.n	8023a1c <__ieee754_atan2f+0xdc>
 80239e6:	2a00      	cmp	r2, #0
 80239e8:	da01      	bge.n	80239ee <__ieee754_atan2f+0xae>
 80239ea:	313c      	adds	r1, #60	; 0x3c
 80239ec:	db19      	blt.n	8023a22 <__ieee754_atan2f+0xe2>
 80239ee:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80239f2:	f001 fe4f 	bl	8025694 <fabsf>
 80239f6:	f001 fd79 	bl	80254ec <atanf>
 80239fa:	eef0 7a40 	vmov.f32	s15, s0
 80239fe:	2c01      	cmp	r4, #1
 8023a00:	d012      	beq.n	8023a28 <__ieee754_atan2f+0xe8>
 8023a02:	2c02      	cmp	r4, #2
 8023a04:	d017      	beq.n	8023a36 <__ieee754_atan2f+0xf6>
 8023a06:	2c00      	cmp	r4, #0
 8023a08:	d0ad      	beq.n	8023966 <__ieee754_atan2f+0x26>
 8023a0a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8023a70 <__ieee754_atan2f+0x130>
 8023a0e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023a12:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8023a74 <__ieee754_atan2f+0x134>
 8023a16:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023a1a:	e7a4      	b.n	8023966 <__ieee754_atan2f+0x26>
 8023a1c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8023a60 <__ieee754_atan2f+0x120>
 8023a20:	e7ed      	b.n	80239fe <__ieee754_atan2f+0xbe>
 8023a22:	eddf 7a15 	vldr	s15, [pc, #84]	; 8023a78 <__ieee754_atan2f+0x138>
 8023a26:	e7ea      	b.n	80239fe <__ieee754_atan2f+0xbe>
 8023a28:	ee17 3a90 	vmov	r3, s15
 8023a2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023a30:	ee07 3a90 	vmov	s15, r3
 8023a34:	e797      	b.n	8023966 <__ieee754_atan2f+0x26>
 8023a36:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8023a70 <__ieee754_atan2f+0x130>
 8023a3a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023a3e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8023a74 <__ieee754_atan2f+0x134>
 8023a42:	ee70 7a67 	vsub.f32	s15, s0, s15
 8023a46:	e78e      	b.n	8023966 <__ieee754_atan2f+0x26>
 8023a48:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8023a74 <__ieee754_atan2f+0x134>
 8023a4c:	e78b      	b.n	8023966 <__ieee754_atan2f+0x26>
 8023a4e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8023a7c <__ieee754_atan2f+0x13c>
 8023a52:	e788      	b.n	8023966 <__ieee754_atan2f+0x26>
 8023a54:	eddf 7a08 	vldr	s15, [pc, #32]	; 8023a78 <__ieee754_atan2f+0x138>
 8023a58:	e785      	b.n	8023966 <__ieee754_atan2f+0x26>
 8023a5a:	bf00      	nop
 8023a5c:	c0490fdb 	.word	0xc0490fdb
 8023a60:	3fc90fdb 	.word	0x3fc90fdb
 8023a64:	bfc90fdb 	.word	0xbfc90fdb
 8023a68:	0802935c 	.word	0x0802935c
 8023a6c:	08029368 	.word	0x08029368
 8023a70:	33bbbd2e 	.word	0x33bbbd2e
 8023a74:	40490fdb 	.word	0x40490fdb
 8023a78:	00000000 	.word	0x00000000
 8023a7c:	3f490fdb 	.word	0x3f490fdb

08023a80 <__ieee754_powf>:
 8023a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a84:	ee10 4a90 	vmov	r4, s1
 8023a88:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8023a8c:	ed2d 8b02 	vpush	{d8}
 8023a90:	ee10 6a10 	vmov	r6, s0
 8023a94:	eeb0 8a40 	vmov.f32	s16, s0
 8023a98:	eef0 8a60 	vmov.f32	s17, s1
 8023a9c:	d10c      	bne.n	8023ab8 <__ieee754_powf+0x38>
 8023a9e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8023aa2:	0076      	lsls	r6, r6, #1
 8023aa4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8023aa8:	f240 8296 	bls.w	8023fd8 <__ieee754_powf+0x558>
 8023aac:	ee38 0a28 	vadd.f32	s0, s16, s17
 8023ab0:	ecbd 8b02 	vpop	{d8}
 8023ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ab8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8023abc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8023ac0:	dcf4      	bgt.n	8023aac <__ieee754_powf+0x2c>
 8023ac2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8023ac6:	dd08      	ble.n	8023ada <__ieee754_powf+0x5a>
 8023ac8:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8023acc:	d1ee      	bne.n	8023aac <__ieee754_powf+0x2c>
 8023ace:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8023ad2:	0064      	lsls	r4, r4, #1
 8023ad4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8023ad8:	e7e6      	b.n	8023aa8 <__ieee754_powf+0x28>
 8023ada:	2e00      	cmp	r6, #0
 8023adc:	da20      	bge.n	8023b20 <__ieee754_powf+0xa0>
 8023ade:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8023ae2:	da2d      	bge.n	8023b40 <__ieee754_powf+0xc0>
 8023ae4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8023ae8:	f2c0 827f 	blt.w	8023fea <__ieee754_powf+0x56a>
 8023aec:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8023af0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8023af4:	fa48 f703 	asr.w	r7, r8, r3
 8023af8:	fa07 f303 	lsl.w	r3, r7, r3
 8023afc:	4543      	cmp	r3, r8
 8023afe:	f040 8274 	bne.w	8023fea <__ieee754_powf+0x56a>
 8023b02:	f007 0701 	and.w	r7, r7, #1
 8023b06:	f1c7 0702 	rsb	r7, r7, #2
 8023b0a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8023b0e:	d11f      	bne.n	8023b50 <__ieee754_powf+0xd0>
 8023b10:	2c00      	cmp	r4, #0
 8023b12:	f280 8267 	bge.w	8023fe4 <__ieee754_powf+0x564>
 8023b16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023b1a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8023b1e:	e7c7      	b.n	8023ab0 <__ieee754_powf+0x30>
 8023b20:	2700      	movs	r7, #0
 8023b22:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8023b26:	d1f0      	bne.n	8023b0a <__ieee754_powf+0x8a>
 8023b28:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8023b2c:	f000 8254 	beq.w	8023fd8 <__ieee754_powf+0x558>
 8023b30:	dd08      	ble.n	8023b44 <__ieee754_powf+0xc4>
 8023b32:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8023e3c <__ieee754_powf+0x3bc>
 8023b36:	2c00      	cmp	r4, #0
 8023b38:	bfa8      	it	ge
 8023b3a:	eeb0 0a68 	vmovge.f32	s0, s17
 8023b3e:	e7b7      	b.n	8023ab0 <__ieee754_powf+0x30>
 8023b40:	2702      	movs	r7, #2
 8023b42:	e7ee      	b.n	8023b22 <__ieee754_powf+0xa2>
 8023b44:	2c00      	cmp	r4, #0
 8023b46:	f280 824a 	bge.w	8023fde <__ieee754_powf+0x55e>
 8023b4a:	eeb1 0a68 	vneg.f32	s0, s17
 8023b4e:	e7af      	b.n	8023ab0 <__ieee754_powf+0x30>
 8023b50:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8023b54:	d102      	bne.n	8023b5c <__ieee754_powf+0xdc>
 8023b56:	ee28 0a08 	vmul.f32	s0, s16, s16
 8023b5a:	e7a9      	b.n	8023ab0 <__ieee754_powf+0x30>
 8023b5c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8023b60:	eeb0 0a48 	vmov.f32	s0, s16
 8023b64:	d107      	bne.n	8023b76 <__ieee754_powf+0xf6>
 8023b66:	2e00      	cmp	r6, #0
 8023b68:	db05      	blt.n	8023b76 <__ieee754_powf+0xf6>
 8023b6a:	ecbd 8b02 	vpop	{d8}
 8023b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023b72:	f000 bb8f 	b.w	8024294 <__ieee754_sqrtf>
 8023b76:	f001 fd8d 	bl	8025694 <fabsf>
 8023b7a:	b125      	cbz	r5, 8023b86 <__ieee754_powf+0x106>
 8023b7c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8023b80:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8023b84:	d116      	bne.n	8023bb4 <__ieee754_powf+0x134>
 8023b86:	2c00      	cmp	r4, #0
 8023b88:	bfbc      	itt	lt
 8023b8a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8023b8e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8023b92:	2e00      	cmp	r6, #0
 8023b94:	da8c      	bge.n	8023ab0 <__ieee754_powf+0x30>
 8023b96:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8023b9a:	ea55 0307 	orrs.w	r3, r5, r7
 8023b9e:	d104      	bne.n	8023baa <__ieee754_powf+0x12a>
 8023ba0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8023ba4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8023ba8:	e782      	b.n	8023ab0 <__ieee754_powf+0x30>
 8023baa:	2f01      	cmp	r7, #1
 8023bac:	d180      	bne.n	8023ab0 <__ieee754_powf+0x30>
 8023bae:	eeb1 0a40 	vneg.f32	s0, s0
 8023bb2:	e77d      	b.n	8023ab0 <__ieee754_powf+0x30>
 8023bb4:	0ff0      	lsrs	r0, r6, #31
 8023bb6:	3801      	subs	r0, #1
 8023bb8:	ea57 0300 	orrs.w	r3, r7, r0
 8023bbc:	d104      	bne.n	8023bc8 <__ieee754_powf+0x148>
 8023bbe:	ee38 8a48 	vsub.f32	s16, s16, s16
 8023bc2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8023bc6:	e773      	b.n	8023ab0 <__ieee754_powf+0x30>
 8023bc8:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8023bcc:	dd74      	ble.n	8023cb8 <__ieee754_powf+0x238>
 8023bce:	4b9c      	ldr	r3, [pc, #624]	; (8023e40 <__ieee754_powf+0x3c0>)
 8023bd0:	429d      	cmp	r5, r3
 8023bd2:	dc08      	bgt.n	8023be6 <__ieee754_powf+0x166>
 8023bd4:	2c00      	cmp	r4, #0
 8023bd6:	da0b      	bge.n	8023bf0 <__ieee754_powf+0x170>
 8023bd8:	2000      	movs	r0, #0
 8023bda:	ecbd 8b02 	vpop	{d8}
 8023bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023be2:	f001 bb6d 	b.w	80252c0 <__math_oflowf>
 8023be6:	4b97      	ldr	r3, [pc, #604]	; (8023e44 <__ieee754_powf+0x3c4>)
 8023be8:	429d      	cmp	r5, r3
 8023bea:	dd08      	ble.n	8023bfe <__ieee754_powf+0x17e>
 8023bec:	2c00      	cmp	r4, #0
 8023bee:	dcf3      	bgt.n	8023bd8 <__ieee754_powf+0x158>
 8023bf0:	2000      	movs	r0, #0
 8023bf2:	ecbd 8b02 	vpop	{d8}
 8023bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023bfa:	f001 bb5b 	b.w	80252b4 <__math_uflowf>
 8023bfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023c02:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023c06:	eddf 6a90 	vldr	s13, [pc, #576]	; 8023e48 <__ieee754_powf+0x3c8>
 8023c0a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8023c0e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8023c12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8023c16:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8023c1a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8023c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023c22:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8023e4c <__ieee754_powf+0x3cc>
 8023c26:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8023c2a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8023e50 <__ieee754_powf+0x3d0>
 8023c2e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8023c32:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8023e54 <__ieee754_powf+0x3d4>
 8023c36:	eef0 6a67 	vmov.f32	s13, s15
 8023c3a:	eee0 6a07 	vfma.f32	s13, s0, s14
 8023c3e:	ee16 3a90 	vmov	r3, s13
 8023c42:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8023c46:	f023 030f 	bic.w	r3, r3, #15
 8023c4a:	ee00 3a90 	vmov	s1, r3
 8023c4e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8023c52:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8023c56:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8023c5a:	f024 040f 	bic.w	r4, r4, #15
 8023c5e:	ee07 4a10 	vmov	s14, r4
 8023c62:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8023c66:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8023c6a:	ee07 3a90 	vmov	s15, r3
 8023c6e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8023c72:	3f01      	subs	r7, #1
 8023c74:	ea57 0200 	orrs.w	r2, r7, r0
 8023c78:	ee07 4a10 	vmov	s14, r4
 8023c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023c80:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8023c84:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8023c88:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8023c8c:	ee17 4a10 	vmov	r4, s14
 8023c90:	bf08      	it	eq
 8023c92:	eeb0 8a40 	vmoveq.f32	s16, s0
 8023c96:	2c00      	cmp	r4, #0
 8023c98:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8023c9c:	f340 817e 	ble.w	8023f9c <__ieee754_powf+0x51c>
 8023ca0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8023ca4:	f340 80f8 	ble.w	8023e98 <__ieee754_powf+0x418>
 8023ca8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8023cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023cb0:	bf4c      	ite	mi
 8023cb2:	2001      	movmi	r0, #1
 8023cb4:	2000      	movpl	r0, #0
 8023cb6:	e790      	b.n	8023bda <__ieee754_powf+0x15a>
 8023cb8:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8023cbc:	bf01      	itttt	eq
 8023cbe:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8023e58 <__ieee754_powf+0x3d8>
 8023cc2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8023cc6:	f06f 0217 	mvneq.w	r2, #23
 8023cca:	ee17 5a90 	vmoveq	r5, s15
 8023cce:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8023cd2:	bf18      	it	ne
 8023cd4:	2200      	movne	r2, #0
 8023cd6:	3b7f      	subs	r3, #127	; 0x7f
 8023cd8:	4413      	add	r3, r2
 8023cda:	4a60      	ldr	r2, [pc, #384]	; (8023e5c <__ieee754_powf+0x3dc>)
 8023cdc:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8023ce0:	4295      	cmp	r5, r2
 8023ce2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8023ce6:	dd06      	ble.n	8023cf6 <__ieee754_powf+0x276>
 8023ce8:	4a5d      	ldr	r2, [pc, #372]	; (8023e60 <__ieee754_powf+0x3e0>)
 8023cea:	4295      	cmp	r5, r2
 8023cec:	f340 80a4 	ble.w	8023e38 <__ieee754_powf+0x3b8>
 8023cf0:	3301      	adds	r3, #1
 8023cf2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8023cf6:	2500      	movs	r5, #0
 8023cf8:	4a5a      	ldr	r2, [pc, #360]	; (8023e64 <__ieee754_powf+0x3e4>)
 8023cfa:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8023cfe:	ee07 1a90 	vmov	s15, r1
 8023d02:	ed92 7a00 	vldr	s14, [r2]
 8023d06:	4a58      	ldr	r2, [pc, #352]	; (8023e68 <__ieee754_powf+0x3e8>)
 8023d08:	ee37 6a27 	vadd.f32	s12, s14, s15
 8023d0c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8023d10:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8023d14:	1049      	asrs	r1, r1, #1
 8023d16:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8023d1a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8023d1e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8023d22:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8023d26:	ee06 1a10 	vmov	s12, r1
 8023d2a:	ee65 4a26 	vmul.f32	s9, s10, s13
 8023d2e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8023d32:	ee14 6a90 	vmov	r6, s9
 8023d36:	4016      	ands	r6, r2
 8023d38:	ee05 6a90 	vmov	s11, r6
 8023d3c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8023d40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023d44:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8023e6c <__ieee754_powf+0x3ec>
 8023d48:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8023d4c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8023d50:	ee25 6a26 	vmul.f32	s12, s10, s13
 8023d54:	eddf 6a46 	vldr	s13, [pc, #280]	; 8023e70 <__ieee754_powf+0x3f0>
 8023d58:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8023d5c:	eddf 6a45 	vldr	s13, [pc, #276]	; 8023e74 <__ieee754_powf+0x3f4>
 8023d60:	eee7 6a27 	vfma.f32	s13, s14, s15
 8023d64:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8023e48 <__ieee754_powf+0x3c8>
 8023d68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8023d6c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8023e78 <__ieee754_powf+0x3f8>
 8023d70:	eee7 6a27 	vfma.f32	s13, s14, s15
 8023d74:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8023e7c <__ieee754_powf+0x3fc>
 8023d78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8023d7c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8023d80:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8023d84:	ee66 6a86 	vmul.f32	s13, s13, s12
 8023d88:	eee5 6a07 	vfma.f32	s13, s10, s14
 8023d8c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8023d90:	eef0 7a45 	vmov.f32	s15, s10
 8023d94:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8023d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023d9c:	ee17 1a90 	vmov	r1, s15
 8023da0:	4011      	ands	r1, r2
 8023da2:	ee07 1a90 	vmov	s15, r1
 8023da6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8023daa:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8023dae:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8023db2:	ee27 7a24 	vmul.f32	s14, s14, s9
 8023db6:	eea6 7a27 	vfma.f32	s14, s12, s15
 8023dba:	eeb0 6a47 	vmov.f32	s12, s14
 8023dbe:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8023dc2:	ee16 1a10 	vmov	r1, s12
 8023dc6:	4011      	ands	r1, r2
 8023dc8:	ee06 1a90 	vmov	s13, r1
 8023dcc:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8023dd0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8023e80 <__ieee754_powf+0x400>
 8023dd4:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8023e84 <__ieee754_powf+0x404>
 8023dd8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8023ddc:	ee06 1a10 	vmov	s12, r1
 8023de0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023de4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8023e88 <__ieee754_powf+0x408>
 8023de8:	4928      	ldr	r1, [pc, #160]	; (8023e8c <__ieee754_powf+0x40c>)
 8023dea:	eea6 7a27 	vfma.f32	s14, s12, s15
 8023dee:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8023df2:	edd1 7a00 	vldr	s15, [r1]
 8023df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8023dfa:	ee07 3a90 	vmov	s15, r3
 8023dfe:	4b24      	ldr	r3, [pc, #144]	; (8023e90 <__ieee754_powf+0x410>)
 8023e00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8023e04:	eef0 7a47 	vmov.f32	s15, s14
 8023e08:	eee6 7a25 	vfma.f32	s15, s12, s11
 8023e0c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8023e10:	edd5 0a00 	vldr	s1, [r5]
 8023e14:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8023e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023e1c:	ee17 3a90 	vmov	r3, s15
 8023e20:	4013      	ands	r3, r2
 8023e22:	ee07 3a90 	vmov	s15, r3
 8023e26:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8023e2a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8023e2e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8023e32:	ee77 7a66 	vsub.f32	s15, s14, s13
 8023e36:	e70e      	b.n	8023c56 <__ieee754_powf+0x1d6>
 8023e38:	2501      	movs	r5, #1
 8023e3a:	e75d      	b.n	8023cf8 <__ieee754_powf+0x278>
 8023e3c:	00000000 	.word	0x00000000
 8023e40:	3f7ffff3 	.word	0x3f7ffff3
 8023e44:	3f800007 	.word	0x3f800007
 8023e48:	3eaaaaab 	.word	0x3eaaaaab
 8023e4c:	3fb8aa3b 	.word	0x3fb8aa3b
 8023e50:	36eca570 	.word	0x36eca570
 8023e54:	3fb8aa00 	.word	0x3fb8aa00
 8023e58:	4b800000 	.word	0x4b800000
 8023e5c:	001cc471 	.word	0x001cc471
 8023e60:	005db3d6 	.word	0x005db3d6
 8023e64:	08029374 	.word	0x08029374
 8023e68:	fffff000 	.word	0xfffff000
 8023e6c:	3e6c3255 	.word	0x3e6c3255
 8023e70:	3e53f142 	.word	0x3e53f142
 8023e74:	3e8ba305 	.word	0x3e8ba305
 8023e78:	3edb6db7 	.word	0x3edb6db7
 8023e7c:	3f19999a 	.word	0x3f19999a
 8023e80:	3f76384f 	.word	0x3f76384f
 8023e84:	3f763800 	.word	0x3f763800
 8023e88:	369dc3a0 	.word	0x369dc3a0
 8023e8c:	08029384 	.word	0x08029384
 8023e90:	0802937c 	.word	0x0802937c
 8023e94:	3338aa3c 	.word	0x3338aa3c
 8023e98:	f040 8095 	bne.w	8023fc6 <__ieee754_powf+0x546>
 8023e9c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8023e94 <__ieee754_powf+0x414>
 8023ea0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8023ea4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8023ea8:	eef4 6ac7 	vcmpe.f32	s13, s14
 8023eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023eb0:	f73f aefa 	bgt.w	8023ca8 <__ieee754_powf+0x228>
 8023eb4:	15db      	asrs	r3, r3, #23
 8023eb6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8023eba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8023ebe:	4103      	asrs	r3, r0
 8023ec0:	4423      	add	r3, r4
 8023ec2:	494b      	ldr	r1, [pc, #300]	; (8023ff0 <__ieee754_powf+0x570>)
 8023ec4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8023ec8:	3a7f      	subs	r2, #127	; 0x7f
 8023eca:	4111      	asrs	r1, r2
 8023ecc:	ea23 0101 	bic.w	r1, r3, r1
 8023ed0:	ee07 1a10 	vmov	s14, r1
 8023ed4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8023ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8023edc:	f1c2 0217 	rsb	r2, r2, #23
 8023ee0:	4110      	asrs	r0, r2
 8023ee2:	2c00      	cmp	r4, #0
 8023ee4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023ee8:	bfb8      	it	lt
 8023eea:	4240      	neglt	r0, r0
 8023eec:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8023ef0:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8023ff4 <__ieee754_powf+0x574>
 8023ef4:	eddf 6a40 	vldr	s13, [pc, #256]	; 8023ff8 <__ieee754_powf+0x578>
 8023ef8:	ee17 3a10 	vmov	r3, s14
 8023efc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8023f00:	f023 030f 	bic.w	r3, r3, #15
 8023f04:	ee07 3a10 	vmov	s14, r3
 8023f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023f0c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8023f10:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8023f14:	eddf 7a39 	vldr	s15, [pc, #228]	; 8023ffc <__ieee754_powf+0x57c>
 8023f18:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8023f1c:	eef0 7a40 	vmov.f32	s15, s0
 8023f20:	eee7 7a26 	vfma.f32	s15, s14, s13
 8023f24:	eeb0 6a67 	vmov.f32	s12, s15
 8023f28:	eea7 6a66 	vfms.f32	s12, s14, s13
 8023f2c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8023f30:	ee30 0a46 	vsub.f32	s0, s0, s12
 8023f34:	eddf 6a32 	vldr	s13, [pc, #200]	; 8024000 <__ieee754_powf+0x580>
 8023f38:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8024004 <__ieee754_powf+0x584>
 8023f3c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8023f40:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8024008 <__ieee754_powf+0x588>
 8023f44:	eea6 6a87 	vfma.f32	s12, s13, s14
 8023f48:	eddf 6a30 	vldr	s13, [pc, #192]	; 802400c <__ieee754_powf+0x58c>
 8023f4c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8023f50:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8024010 <__ieee754_powf+0x590>
 8023f54:	eea6 6a87 	vfma.f32	s12, s13, s14
 8023f58:	eef0 6a67 	vmov.f32	s13, s15
 8023f5c:	eee6 6a47 	vfms.f32	s13, s12, s14
 8023f60:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023f64:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8023f68:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8023f6c:	eea7 0a80 	vfma.f32	s0, s15, s0
 8023f70:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8023f74:	ee37 0a40 	vsub.f32	s0, s14, s0
 8023f78:	ee70 7a67 	vsub.f32	s15, s0, s15
 8023f7c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023f80:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023f84:	ee10 3a10 	vmov	r3, s0
 8023f88:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8023f8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8023f90:	da1f      	bge.n	8023fd2 <__ieee754_powf+0x552>
 8023f92:	f001 fbdb 	bl	802574c <scalbnf>
 8023f96:	ee20 0a08 	vmul.f32	s0, s0, s16
 8023f9a:	e589      	b.n	8023ab0 <__ieee754_powf+0x30>
 8023f9c:	4a1d      	ldr	r2, [pc, #116]	; (8024014 <__ieee754_powf+0x594>)
 8023f9e:	4293      	cmp	r3, r2
 8023fa0:	dd07      	ble.n	8023fb2 <__ieee754_powf+0x532>
 8023fa2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8023fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023faa:	bf4c      	ite	mi
 8023fac:	2001      	movmi	r0, #1
 8023fae:	2000      	movpl	r0, #0
 8023fb0:	e61f      	b.n	8023bf2 <__ieee754_powf+0x172>
 8023fb2:	d108      	bne.n	8023fc6 <__ieee754_powf+0x546>
 8023fb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8023fb8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8023fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023fc0:	f6ff af78 	blt.w	8023eb4 <__ieee754_powf+0x434>
 8023fc4:	e7ed      	b.n	8023fa2 <__ieee754_powf+0x522>
 8023fc6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8023fca:	f73f af73 	bgt.w	8023eb4 <__ieee754_powf+0x434>
 8023fce:	2000      	movs	r0, #0
 8023fd0:	e78c      	b.n	8023eec <__ieee754_powf+0x46c>
 8023fd2:	ee00 3a10 	vmov	s0, r3
 8023fd6:	e7de      	b.n	8023f96 <__ieee754_powf+0x516>
 8023fd8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023fdc:	e568      	b.n	8023ab0 <__ieee754_powf+0x30>
 8023fde:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8024018 <__ieee754_powf+0x598>
 8023fe2:	e565      	b.n	8023ab0 <__ieee754_powf+0x30>
 8023fe4:	eeb0 0a48 	vmov.f32	s0, s16
 8023fe8:	e562      	b.n	8023ab0 <__ieee754_powf+0x30>
 8023fea:	2700      	movs	r7, #0
 8023fec:	e58d      	b.n	8023b0a <__ieee754_powf+0x8a>
 8023fee:	bf00      	nop
 8023ff0:	007fffff 	.word	0x007fffff
 8023ff4:	35bfbe8c 	.word	0x35bfbe8c
 8023ff8:	3f317200 	.word	0x3f317200
 8023ffc:	3f317218 	.word	0x3f317218
 8024000:	b5ddea0e 	.word	0xb5ddea0e
 8024004:	3331bb4c 	.word	0x3331bb4c
 8024008:	388ab355 	.word	0x388ab355
 802400c:	bb360b61 	.word	0xbb360b61
 8024010:	3e2aaaab 	.word	0x3e2aaaab
 8024014:	43160000 	.word	0x43160000
 8024018:	00000000 	.word	0x00000000

0802401c <__ieee754_rem_pio2f>:
 802401c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802401e:	ee10 6a10 	vmov	r6, s0
 8024022:	4b8e      	ldr	r3, [pc, #568]	; (802425c <__ieee754_rem_pio2f+0x240>)
 8024024:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8024028:	429d      	cmp	r5, r3
 802402a:	b087      	sub	sp, #28
 802402c:	eef0 7a40 	vmov.f32	s15, s0
 8024030:	4604      	mov	r4, r0
 8024032:	dc05      	bgt.n	8024040 <__ieee754_rem_pio2f+0x24>
 8024034:	2300      	movs	r3, #0
 8024036:	ed80 0a00 	vstr	s0, [r0]
 802403a:	6043      	str	r3, [r0, #4]
 802403c:	2000      	movs	r0, #0
 802403e:	e01a      	b.n	8024076 <__ieee754_rem_pio2f+0x5a>
 8024040:	4b87      	ldr	r3, [pc, #540]	; (8024260 <__ieee754_rem_pio2f+0x244>)
 8024042:	429d      	cmp	r5, r3
 8024044:	dc46      	bgt.n	80240d4 <__ieee754_rem_pio2f+0xb8>
 8024046:	2e00      	cmp	r6, #0
 8024048:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8024264 <__ieee754_rem_pio2f+0x248>
 802404c:	4b86      	ldr	r3, [pc, #536]	; (8024268 <__ieee754_rem_pio2f+0x24c>)
 802404e:	f025 050f 	bic.w	r5, r5, #15
 8024052:	dd1f      	ble.n	8024094 <__ieee754_rem_pio2f+0x78>
 8024054:	429d      	cmp	r5, r3
 8024056:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802405a:	d00e      	beq.n	802407a <__ieee754_rem_pio2f+0x5e>
 802405c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 802426c <__ieee754_rem_pio2f+0x250>
 8024060:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8024064:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8024068:	ed80 0a00 	vstr	s0, [r0]
 802406c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024070:	2001      	movs	r0, #1
 8024072:	edc4 7a01 	vstr	s15, [r4, #4]
 8024076:	b007      	add	sp, #28
 8024078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802407a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8024270 <__ieee754_rem_pio2f+0x254>
 802407e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8024274 <__ieee754_rem_pio2f+0x258>
 8024082:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8024086:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802408a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802408e:	edc0 6a00 	vstr	s13, [r0]
 8024092:	e7eb      	b.n	802406c <__ieee754_rem_pio2f+0x50>
 8024094:	429d      	cmp	r5, r3
 8024096:	ee77 7a80 	vadd.f32	s15, s15, s0
 802409a:	d00e      	beq.n	80240ba <__ieee754_rem_pio2f+0x9e>
 802409c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 802426c <__ieee754_rem_pio2f+0x250>
 80240a0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80240a4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80240a8:	ed80 0a00 	vstr	s0, [r0]
 80240ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80240b0:	f04f 30ff 	mov.w	r0, #4294967295
 80240b4:	edc4 7a01 	vstr	s15, [r4, #4]
 80240b8:	e7dd      	b.n	8024076 <__ieee754_rem_pio2f+0x5a>
 80240ba:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8024270 <__ieee754_rem_pio2f+0x254>
 80240be:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8024274 <__ieee754_rem_pio2f+0x258>
 80240c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80240c6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80240ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80240ce:	edc0 6a00 	vstr	s13, [r0]
 80240d2:	e7eb      	b.n	80240ac <__ieee754_rem_pio2f+0x90>
 80240d4:	4b68      	ldr	r3, [pc, #416]	; (8024278 <__ieee754_rem_pio2f+0x25c>)
 80240d6:	429d      	cmp	r5, r3
 80240d8:	dc72      	bgt.n	80241c0 <__ieee754_rem_pio2f+0x1a4>
 80240da:	f001 fadb 	bl	8025694 <fabsf>
 80240de:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802427c <__ieee754_rem_pio2f+0x260>
 80240e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80240e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80240ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80240ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80240f2:	ee17 0a90 	vmov	r0, s15
 80240f6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8024264 <__ieee754_rem_pio2f+0x248>
 80240fa:	eea7 0a67 	vfms.f32	s0, s14, s15
 80240fe:	281f      	cmp	r0, #31
 8024100:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802426c <__ieee754_rem_pio2f+0x250>
 8024104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024108:	eeb1 6a47 	vneg.f32	s12, s14
 802410c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8024110:	ee16 2a90 	vmov	r2, s13
 8024114:	dc1c      	bgt.n	8024150 <__ieee754_rem_pio2f+0x134>
 8024116:	495a      	ldr	r1, [pc, #360]	; (8024280 <__ieee754_rem_pio2f+0x264>)
 8024118:	1e47      	subs	r7, r0, #1
 802411a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802411e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024122:	428b      	cmp	r3, r1
 8024124:	d014      	beq.n	8024150 <__ieee754_rem_pio2f+0x134>
 8024126:	6022      	str	r2, [r4, #0]
 8024128:	ed94 7a00 	vldr	s14, [r4]
 802412c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8024130:	2e00      	cmp	r6, #0
 8024132:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024136:	ed84 0a01 	vstr	s0, [r4, #4]
 802413a:	da9c      	bge.n	8024076 <__ieee754_rem_pio2f+0x5a>
 802413c:	eeb1 7a47 	vneg.f32	s14, s14
 8024140:	eeb1 0a40 	vneg.f32	s0, s0
 8024144:	ed84 7a00 	vstr	s14, [r4]
 8024148:	ed84 0a01 	vstr	s0, [r4, #4]
 802414c:	4240      	negs	r0, r0
 802414e:	e792      	b.n	8024076 <__ieee754_rem_pio2f+0x5a>
 8024150:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8024154:	15eb      	asrs	r3, r5, #23
 8024156:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 802415a:	2d08      	cmp	r5, #8
 802415c:	dde3      	ble.n	8024126 <__ieee754_rem_pio2f+0x10a>
 802415e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8024270 <__ieee754_rem_pio2f+0x254>
 8024162:	eddf 5a44 	vldr	s11, [pc, #272]	; 8024274 <__ieee754_rem_pio2f+0x258>
 8024166:	eef0 6a40 	vmov.f32	s13, s0
 802416a:	eee6 6a27 	vfma.f32	s13, s12, s15
 802416e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8024172:	eea6 0a27 	vfma.f32	s0, s12, s15
 8024176:	eef0 7a40 	vmov.f32	s15, s0
 802417a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802417e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8024182:	ee15 2a90 	vmov	r2, s11
 8024186:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802418a:	1a5b      	subs	r3, r3, r1
 802418c:	2b19      	cmp	r3, #25
 802418e:	dc04      	bgt.n	802419a <__ieee754_rem_pio2f+0x17e>
 8024190:	edc4 5a00 	vstr	s11, [r4]
 8024194:	eeb0 0a66 	vmov.f32	s0, s13
 8024198:	e7c6      	b.n	8024128 <__ieee754_rem_pio2f+0x10c>
 802419a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8024284 <__ieee754_rem_pio2f+0x268>
 802419e:	eeb0 0a66 	vmov.f32	s0, s13
 80241a2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80241a6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80241aa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8024288 <__ieee754_rem_pio2f+0x26c>
 80241ae:	eee6 7a25 	vfma.f32	s15, s12, s11
 80241b2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80241b6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80241ba:	ed84 7a00 	vstr	s14, [r4]
 80241be:	e7b3      	b.n	8024128 <__ieee754_rem_pio2f+0x10c>
 80241c0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80241c4:	db06      	blt.n	80241d4 <__ieee754_rem_pio2f+0x1b8>
 80241c6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80241ca:	edc0 7a01 	vstr	s15, [r0, #4]
 80241ce:	edc0 7a00 	vstr	s15, [r0]
 80241d2:	e733      	b.n	802403c <__ieee754_rem_pio2f+0x20>
 80241d4:	15ea      	asrs	r2, r5, #23
 80241d6:	3a86      	subs	r2, #134	; 0x86
 80241d8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80241dc:	ee07 3a90 	vmov	s15, r3
 80241e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80241e4:	eddf 6a29 	vldr	s13, [pc, #164]	; 802428c <__ieee754_rem_pio2f+0x270>
 80241e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80241ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80241f0:	ed8d 7a03 	vstr	s14, [sp, #12]
 80241f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80241f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80241fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024200:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024204:	ed8d 7a04 	vstr	s14, [sp, #16]
 8024208:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802420c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8024210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024214:	edcd 7a05 	vstr	s15, [sp, #20]
 8024218:	d11e      	bne.n	8024258 <__ieee754_rem_pio2f+0x23c>
 802421a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802421e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024222:	bf14      	ite	ne
 8024224:	2302      	movne	r3, #2
 8024226:	2301      	moveq	r3, #1
 8024228:	4919      	ldr	r1, [pc, #100]	; (8024290 <__ieee754_rem_pio2f+0x274>)
 802422a:	9101      	str	r1, [sp, #4]
 802422c:	2102      	movs	r1, #2
 802422e:	9100      	str	r1, [sp, #0]
 8024230:	a803      	add	r0, sp, #12
 8024232:	4621      	mov	r1, r4
 8024234:	f000 fd6a 	bl	8024d0c <__kernel_rem_pio2f>
 8024238:	2e00      	cmp	r6, #0
 802423a:	f6bf af1c 	bge.w	8024076 <__ieee754_rem_pio2f+0x5a>
 802423e:	edd4 7a00 	vldr	s15, [r4]
 8024242:	eef1 7a67 	vneg.f32	s15, s15
 8024246:	edc4 7a00 	vstr	s15, [r4]
 802424a:	edd4 7a01 	vldr	s15, [r4, #4]
 802424e:	eef1 7a67 	vneg.f32	s15, s15
 8024252:	edc4 7a01 	vstr	s15, [r4, #4]
 8024256:	e779      	b.n	802414c <__ieee754_rem_pio2f+0x130>
 8024258:	2303      	movs	r3, #3
 802425a:	e7e5      	b.n	8024228 <__ieee754_rem_pio2f+0x20c>
 802425c:	3f490fd8 	.word	0x3f490fd8
 8024260:	4016cbe3 	.word	0x4016cbe3
 8024264:	3fc90f80 	.word	0x3fc90f80
 8024268:	3fc90fd0 	.word	0x3fc90fd0
 802426c:	37354443 	.word	0x37354443
 8024270:	37354400 	.word	0x37354400
 8024274:	2e85a308 	.word	0x2e85a308
 8024278:	43490f80 	.word	0x43490f80
 802427c:	3f22f984 	.word	0x3f22f984
 8024280:	0802938c 	.word	0x0802938c
 8024284:	2e85a300 	.word	0x2e85a300
 8024288:	248d3132 	.word	0x248d3132
 802428c:	43800000 	.word	0x43800000
 8024290:	0802940c 	.word	0x0802940c

08024294 <__ieee754_sqrtf>:
 8024294:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8024298:	4770      	bx	lr
 802429a:	0000      	movs	r0, r0
 802429c:	0000      	movs	r0, r0
	...

080242a0 <__kernel_cos>:
 80242a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242a4:	ec57 6b10 	vmov	r6, r7, d0
 80242a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80242ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80242b0:	ed8d 1b00 	vstr	d1, [sp]
 80242b4:	da07      	bge.n	80242c6 <__kernel_cos+0x26>
 80242b6:	ee10 0a10 	vmov	r0, s0
 80242ba:	4639      	mov	r1, r7
 80242bc:	f7dc fbea 	bl	8000a94 <__aeabi_d2iz>
 80242c0:	2800      	cmp	r0, #0
 80242c2:	f000 8088 	beq.w	80243d6 <__kernel_cos+0x136>
 80242c6:	4632      	mov	r2, r6
 80242c8:	463b      	mov	r3, r7
 80242ca:	4630      	mov	r0, r6
 80242cc:	4639      	mov	r1, r7
 80242ce:	f7dc f947 	bl	8000560 <__aeabi_dmul>
 80242d2:	4b51      	ldr	r3, [pc, #324]	; (8024418 <__kernel_cos+0x178>)
 80242d4:	2200      	movs	r2, #0
 80242d6:	4604      	mov	r4, r0
 80242d8:	460d      	mov	r5, r1
 80242da:	f7dc f941 	bl	8000560 <__aeabi_dmul>
 80242de:	a340      	add	r3, pc, #256	; (adr r3, 80243e0 <__kernel_cos+0x140>)
 80242e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242e4:	4682      	mov	sl, r0
 80242e6:	468b      	mov	fp, r1
 80242e8:	4620      	mov	r0, r4
 80242ea:	4629      	mov	r1, r5
 80242ec:	f7dc f938 	bl	8000560 <__aeabi_dmul>
 80242f0:	a33d      	add	r3, pc, #244	; (adr r3, 80243e8 <__kernel_cos+0x148>)
 80242f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242f6:	f7db ff7d 	bl	80001f4 <__adddf3>
 80242fa:	4622      	mov	r2, r4
 80242fc:	462b      	mov	r3, r5
 80242fe:	f7dc f92f 	bl	8000560 <__aeabi_dmul>
 8024302:	a33b      	add	r3, pc, #236	; (adr r3, 80243f0 <__kernel_cos+0x150>)
 8024304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024308:	f7db ff72 	bl	80001f0 <__aeabi_dsub>
 802430c:	4622      	mov	r2, r4
 802430e:	462b      	mov	r3, r5
 8024310:	f7dc f926 	bl	8000560 <__aeabi_dmul>
 8024314:	a338      	add	r3, pc, #224	; (adr r3, 80243f8 <__kernel_cos+0x158>)
 8024316:	e9d3 2300 	ldrd	r2, r3, [r3]
 802431a:	f7db ff6b 	bl	80001f4 <__adddf3>
 802431e:	4622      	mov	r2, r4
 8024320:	462b      	mov	r3, r5
 8024322:	f7dc f91d 	bl	8000560 <__aeabi_dmul>
 8024326:	a336      	add	r3, pc, #216	; (adr r3, 8024400 <__kernel_cos+0x160>)
 8024328:	e9d3 2300 	ldrd	r2, r3, [r3]
 802432c:	f7db ff60 	bl	80001f0 <__aeabi_dsub>
 8024330:	4622      	mov	r2, r4
 8024332:	462b      	mov	r3, r5
 8024334:	f7dc f914 	bl	8000560 <__aeabi_dmul>
 8024338:	a333      	add	r3, pc, #204	; (adr r3, 8024408 <__kernel_cos+0x168>)
 802433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802433e:	f7db ff59 	bl	80001f4 <__adddf3>
 8024342:	4622      	mov	r2, r4
 8024344:	462b      	mov	r3, r5
 8024346:	f7dc f90b 	bl	8000560 <__aeabi_dmul>
 802434a:	4622      	mov	r2, r4
 802434c:	462b      	mov	r3, r5
 802434e:	f7dc f907 	bl	8000560 <__aeabi_dmul>
 8024352:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024356:	4604      	mov	r4, r0
 8024358:	460d      	mov	r5, r1
 802435a:	4630      	mov	r0, r6
 802435c:	4639      	mov	r1, r7
 802435e:	f7dc f8ff 	bl	8000560 <__aeabi_dmul>
 8024362:	460b      	mov	r3, r1
 8024364:	4602      	mov	r2, r0
 8024366:	4629      	mov	r1, r5
 8024368:	4620      	mov	r0, r4
 802436a:	f7db ff41 	bl	80001f0 <__aeabi_dsub>
 802436e:	4b2b      	ldr	r3, [pc, #172]	; (802441c <__kernel_cos+0x17c>)
 8024370:	4598      	cmp	r8, r3
 8024372:	4606      	mov	r6, r0
 8024374:	460f      	mov	r7, r1
 8024376:	dc10      	bgt.n	802439a <__kernel_cos+0xfa>
 8024378:	4602      	mov	r2, r0
 802437a:	460b      	mov	r3, r1
 802437c:	4650      	mov	r0, sl
 802437e:	4659      	mov	r1, fp
 8024380:	f7db ff36 	bl	80001f0 <__aeabi_dsub>
 8024384:	460b      	mov	r3, r1
 8024386:	4926      	ldr	r1, [pc, #152]	; (8024420 <__kernel_cos+0x180>)
 8024388:	4602      	mov	r2, r0
 802438a:	2000      	movs	r0, #0
 802438c:	f7db ff30 	bl	80001f0 <__aeabi_dsub>
 8024390:	ec41 0b10 	vmov	d0, r0, r1
 8024394:	b003      	add	sp, #12
 8024396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802439a:	4b22      	ldr	r3, [pc, #136]	; (8024424 <__kernel_cos+0x184>)
 802439c:	4920      	ldr	r1, [pc, #128]	; (8024420 <__kernel_cos+0x180>)
 802439e:	4598      	cmp	r8, r3
 80243a0:	bfcc      	ite	gt
 80243a2:	4d21      	ldrgt	r5, [pc, #132]	; (8024428 <__kernel_cos+0x188>)
 80243a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80243a8:	2400      	movs	r4, #0
 80243aa:	4622      	mov	r2, r4
 80243ac:	462b      	mov	r3, r5
 80243ae:	2000      	movs	r0, #0
 80243b0:	f7db ff1e 	bl	80001f0 <__aeabi_dsub>
 80243b4:	4622      	mov	r2, r4
 80243b6:	4680      	mov	r8, r0
 80243b8:	4689      	mov	r9, r1
 80243ba:	462b      	mov	r3, r5
 80243bc:	4650      	mov	r0, sl
 80243be:	4659      	mov	r1, fp
 80243c0:	f7db ff16 	bl	80001f0 <__aeabi_dsub>
 80243c4:	4632      	mov	r2, r6
 80243c6:	463b      	mov	r3, r7
 80243c8:	f7db ff12 	bl	80001f0 <__aeabi_dsub>
 80243cc:	4602      	mov	r2, r0
 80243ce:	460b      	mov	r3, r1
 80243d0:	4640      	mov	r0, r8
 80243d2:	4649      	mov	r1, r9
 80243d4:	e7da      	b.n	802438c <__kernel_cos+0xec>
 80243d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8024410 <__kernel_cos+0x170>
 80243da:	e7db      	b.n	8024394 <__kernel_cos+0xf4>
 80243dc:	f3af 8000 	nop.w
 80243e0:	be8838d4 	.word	0xbe8838d4
 80243e4:	bda8fae9 	.word	0xbda8fae9
 80243e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80243ec:	3e21ee9e 	.word	0x3e21ee9e
 80243f0:	809c52ad 	.word	0x809c52ad
 80243f4:	3e927e4f 	.word	0x3e927e4f
 80243f8:	19cb1590 	.word	0x19cb1590
 80243fc:	3efa01a0 	.word	0x3efa01a0
 8024400:	16c15177 	.word	0x16c15177
 8024404:	3f56c16c 	.word	0x3f56c16c
 8024408:	5555554c 	.word	0x5555554c
 802440c:	3fa55555 	.word	0x3fa55555
 8024410:	00000000 	.word	0x00000000
 8024414:	3ff00000 	.word	0x3ff00000
 8024418:	3fe00000 	.word	0x3fe00000
 802441c:	3fd33332 	.word	0x3fd33332
 8024420:	3ff00000 	.word	0x3ff00000
 8024424:	3fe90000 	.word	0x3fe90000
 8024428:	3fd20000 	.word	0x3fd20000
 802442c:	00000000 	.word	0x00000000

08024430 <__kernel_rem_pio2>:
 8024430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024434:	ed2d 8b02 	vpush	{d8}
 8024438:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 802443c:	f112 0f14 	cmn.w	r2, #20
 8024440:	9308      	str	r3, [sp, #32]
 8024442:	9101      	str	r1, [sp, #4]
 8024444:	4bc4      	ldr	r3, [pc, #784]	; (8024758 <__kernel_rem_pio2+0x328>)
 8024446:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8024448:	900b      	str	r0, [sp, #44]	; 0x2c
 802444a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802444e:	9302      	str	r3, [sp, #8]
 8024450:	9b08      	ldr	r3, [sp, #32]
 8024452:	f103 33ff 	add.w	r3, r3, #4294967295
 8024456:	bfa8      	it	ge
 8024458:	1ed4      	subge	r4, r2, #3
 802445a:	9306      	str	r3, [sp, #24]
 802445c:	bfb2      	itee	lt
 802445e:	2400      	movlt	r4, #0
 8024460:	2318      	movge	r3, #24
 8024462:	fb94 f4f3 	sdivge	r4, r4, r3
 8024466:	f06f 0317 	mvn.w	r3, #23
 802446a:	fb04 3303 	mla	r3, r4, r3, r3
 802446e:	eb03 0a02 	add.w	sl, r3, r2
 8024472:	9b02      	ldr	r3, [sp, #8]
 8024474:	9a06      	ldr	r2, [sp, #24]
 8024476:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8024748 <__kernel_rem_pio2+0x318>
 802447a:	eb03 0802 	add.w	r8, r3, r2
 802447e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024480:	1aa7      	subs	r7, r4, r2
 8024482:	ae22      	add	r6, sp, #136	; 0x88
 8024484:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8024488:	2500      	movs	r5, #0
 802448a:	4545      	cmp	r5, r8
 802448c:	dd13      	ble.n	80244b6 <__kernel_rem_pio2+0x86>
 802448e:	9b08      	ldr	r3, [sp, #32]
 8024490:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8024748 <__kernel_rem_pio2+0x318>
 8024494:	aa22      	add	r2, sp, #136	; 0x88
 8024496:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 802449a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 802449e:	f04f 0800 	mov.w	r8, #0
 80244a2:	9b02      	ldr	r3, [sp, #8]
 80244a4:	4598      	cmp	r8, r3
 80244a6:	dc2f      	bgt.n	8024508 <__kernel_rem_pio2+0xd8>
 80244a8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80244ac:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80244b0:	462f      	mov	r7, r5
 80244b2:	2600      	movs	r6, #0
 80244b4:	e01b      	b.n	80244ee <__kernel_rem_pio2+0xbe>
 80244b6:	42ef      	cmn	r7, r5
 80244b8:	d407      	bmi.n	80244ca <__kernel_rem_pio2+0x9a>
 80244ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80244be:	f7db ffe5 	bl	800048c <__aeabi_i2d>
 80244c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80244c6:	3501      	adds	r5, #1
 80244c8:	e7df      	b.n	802448a <__kernel_rem_pio2+0x5a>
 80244ca:	ec51 0b18 	vmov	r0, r1, d8
 80244ce:	e7f8      	b.n	80244c2 <__kernel_rem_pio2+0x92>
 80244d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80244d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80244d8:	f7dc f842 	bl	8000560 <__aeabi_dmul>
 80244dc:	4602      	mov	r2, r0
 80244de:	460b      	mov	r3, r1
 80244e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80244e4:	f7db fe86 	bl	80001f4 <__adddf3>
 80244e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80244ec:	3601      	adds	r6, #1
 80244ee:	9b06      	ldr	r3, [sp, #24]
 80244f0:	429e      	cmp	r6, r3
 80244f2:	f1a7 0708 	sub.w	r7, r7, #8
 80244f6:	ddeb      	ble.n	80244d0 <__kernel_rem_pio2+0xa0>
 80244f8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80244fc:	f108 0801 	add.w	r8, r8, #1
 8024500:	ecab 7b02 	vstmia	fp!, {d7}
 8024504:	3508      	adds	r5, #8
 8024506:	e7cc      	b.n	80244a2 <__kernel_rem_pio2+0x72>
 8024508:	9b02      	ldr	r3, [sp, #8]
 802450a:	aa0e      	add	r2, sp, #56	; 0x38
 802450c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024510:	930d      	str	r3, [sp, #52]	; 0x34
 8024512:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024514:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024518:	9c02      	ldr	r4, [sp, #8]
 802451a:	930c      	str	r3, [sp, #48]	; 0x30
 802451c:	00e3      	lsls	r3, r4, #3
 802451e:	930a      	str	r3, [sp, #40]	; 0x28
 8024520:	ab9a      	add	r3, sp, #616	; 0x268
 8024522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8024526:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 802452a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 802452e:	ab72      	add	r3, sp, #456	; 0x1c8
 8024530:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8024534:	46c3      	mov	fp, r8
 8024536:	46a1      	mov	r9, r4
 8024538:	f1b9 0f00 	cmp.w	r9, #0
 802453c:	f1a5 0508 	sub.w	r5, r5, #8
 8024540:	dc77      	bgt.n	8024632 <__kernel_rem_pio2+0x202>
 8024542:	ec47 6b10 	vmov	d0, r6, r7
 8024546:	4650      	mov	r0, sl
 8024548:	f000 ff4a 	bl	80253e0 <scalbn>
 802454c:	ec57 6b10 	vmov	r6, r7, d0
 8024550:	2200      	movs	r2, #0
 8024552:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8024556:	ee10 0a10 	vmov	r0, s0
 802455a:	4639      	mov	r1, r7
 802455c:	f7dc f800 	bl	8000560 <__aeabi_dmul>
 8024560:	ec41 0b10 	vmov	d0, r0, r1
 8024564:	f000 febc 	bl	80252e0 <floor>
 8024568:	4b7c      	ldr	r3, [pc, #496]	; (802475c <__kernel_rem_pio2+0x32c>)
 802456a:	ec51 0b10 	vmov	r0, r1, d0
 802456e:	2200      	movs	r2, #0
 8024570:	f7db fff6 	bl	8000560 <__aeabi_dmul>
 8024574:	4602      	mov	r2, r0
 8024576:	460b      	mov	r3, r1
 8024578:	4630      	mov	r0, r6
 802457a:	4639      	mov	r1, r7
 802457c:	f7db fe38 	bl	80001f0 <__aeabi_dsub>
 8024580:	460f      	mov	r7, r1
 8024582:	4606      	mov	r6, r0
 8024584:	f7dc fa86 	bl	8000a94 <__aeabi_d2iz>
 8024588:	9004      	str	r0, [sp, #16]
 802458a:	f7db ff7f 	bl	800048c <__aeabi_i2d>
 802458e:	4602      	mov	r2, r0
 8024590:	460b      	mov	r3, r1
 8024592:	4630      	mov	r0, r6
 8024594:	4639      	mov	r1, r7
 8024596:	f7db fe2b 	bl	80001f0 <__aeabi_dsub>
 802459a:	f1ba 0f00 	cmp.w	sl, #0
 802459e:	4606      	mov	r6, r0
 80245a0:	460f      	mov	r7, r1
 80245a2:	dd6d      	ble.n	8024680 <__kernel_rem_pio2+0x250>
 80245a4:	1e62      	subs	r2, r4, #1
 80245a6:	ab0e      	add	r3, sp, #56	; 0x38
 80245a8:	9d04      	ldr	r5, [sp, #16]
 80245aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80245ae:	f1ca 0118 	rsb	r1, sl, #24
 80245b2:	fa40 f301 	asr.w	r3, r0, r1
 80245b6:	441d      	add	r5, r3
 80245b8:	408b      	lsls	r3, r1
 80245ba:	1ac0      	subs	r0, r0, r3
 80245bc:	ab0e      	add	r3, sp, #56	; 0x38
 80245be:	9504      	str	r5, [sp, #16]
 80245c0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80245c4:	f1ca 0317 	rsb	r3, sl, #23
 80245c8:	fa40 fb03 	asr.w	fp, r0, r3
 80245cc:	f1bb 0f00 	cmp.w	fp, #0
 80245d0:	dd65      	ble.n	802469e <__kernel_rem_pio2+0x26e>
 80245d2:	9b04      	ldr	r3, [sp, #16]
 80245d4:	2200      	movs	r2, #0
 80245d6:	3301      	adds	r3, #1
 80245d8:	9304      	str	r3, [sp, #16]
 80245da:	4615      	mov	r5, r2
 80245dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80245e0:	4294      	cmp	r4, r2
 80245e2:	f300 809c 	bgt.w	802471e <__kernel_rem_pio2+0x2ee>
 80245e6:	f1ba 0f00 	cmp.w	sl, #0
 80245ea:	dd07      	ble.n	80245fc <__kernel_rem_pio2+0x1cc>
 80245ec:	f1ba 0f01 	cmp.w	sl, #1
 80245f0:	f000 80c0 	beq.w	8024774 <__kernel_rem_pio2+0x344>
 80245f4:	f1ba 0f02 	cmp.w	sl, #2
 80245f8:	f000 80c6 	beq.w	8024788 <__kernel_rem_pio2+0x358>
 80245fc:	f1bb 0f02 	cmp.w	fp, #2
 8024600:	d14d      	bne.n	802469e <__kernel_rem_pio2+0x26e>
 8024602:	4632      	mov	r2, r6
 8024604:	463b      	mov	r3, r7
 8024606:	4956      	ldr	r1, [pc, #344]	; (8024760 <__kernel_rem_pio2+0x330>)
 8024608:	2000      	movs	r0, #0
 802460a:	f7db fdf1 	bl	80001f0 <__aeabi_dsub>
 802460e:	4606      	mov	r6, r0
 8024610:	460f      	mov	r7, r1
 8024612:	2d00      	cmp	r5, #0
 8024614:	d043      	beq.n	802469e <__kernel_rem_pio2+0x26e>
 8024616:	4650      	mov	r0, sl
 8024618:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8024750 <__kernel_rem_pio2+0x320>
 802461c:	f000 fee0 	bl	80253e0 <scalbn>
 8024620:	4630      	mov	r0, r6
 8024622:	4639      	mov	r1, r7
 8024624:	ec53 2b10 	vmov	r2, r3, d0
 8024628:	f7db fde2 	bl	80001f0 <__aeabi_dsub>
 802462c:	4606      	mov	r6, r0
 802462e:	460f      	mov	r7, r1
 8024630:	e035      	b.n	802469e <__kernel_rem_pio2+0x26e>
 8024632:	4b4c      	ldr	r3, [pc, #304]	; (8024764 <__kernel_rem_pio2+0x334>)
 8024634:	2200      	movs	r2, #0
 8024636:	4630      	mov	r0, r6
 8024638:	4639      	mov	r1, r7
 802463a:	f7db ff91 	bl	8000560 <__aeabi_dmul>
 802463e:	f7dc fa29 	bl	8000a94 <__aeabi_d2iz>
 8024642:	f7db ff23 	bl	800048c <__aeabi_i2d>
 8024646:	4602      	mov	r2, r0
 8024648:	460b      	mov	r3, r1
 802464a:	ec43 2b18 	vmov	d8, r2, r3
 802464e:	4b46      	ldr	r3, [pc, #280]	; (8024768 <__kernel_rem_pio2+0x338>)
 8024650:	2200      	movs	r2, #0
 8024652:	f7db ff85 	bl	8000560 <__aeabi_dmul>
 8024656:	4602      	mov	r2, r0
 8024658:	460b      	mov	r3, r1
 802465a:	4630      	mov	r0, r6
 802465c:	4639      	mov	r1, r7
 802465e:	f7db fdc7 	bl	80001f0 <__aeabi_dsub>
 8024662:	f7dc fa17 	bl	8000a94 <__aeabi_d2iz>
 8024666:	e9d5 2300 	ldrd	r2, r3, [r5]
 802466a:	f84b 0b04 	str.w	r0, [fp], #4
 802466e:	ec51 0b18 	vmov	r0, r1, d8
 8024672:	f7db fdbf 	bl	80001f4 <__adddf3>
 8024676:	f109 39ff 	add.w	r9, r9, #4294967295
 802467a:	4606      	mov	r6, r0
 802467c:	460f      	mov	r7, r1
 802467e:	e75b      	b.n	8024538 <__kernel_rem_pio2+0x108>
 8024680:	d106      	bne.n	8024690 <__kernel_rem_pio2+0x260>
 8024682:	1e63      	subs	r3, r4, #1
 8024684:	aa0e      	add	r2, sp, #56	; 0x38
 8024686:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 802468a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 802468e:	e79d      	b.n	80245cc <__kernel_rem_pio2+0x19c>
 8024690:	4b36      	ldr	r3, [pc, #216]	; (802476c <__kernel_rem_pio2+0x33c>)
 8024692:	2200      	movs	r2, #0
 8024694:	f7dc f9ea 	bl	8000a6c <__aeabi_dcmpge>
 8024698:	2800      	cmp	r0, #0
 802469a:	d13d      	bne.n	8024718 <__kernel_rem_pio2+0x2e8>
 802469c:	4683      	mov	fp, r0
 802469e:	2200      	movs	r2, #0
 80246a0:	2300      	movs	r3, #0
 80246a2:	4630      	mov	r0, r6
 80246a4:	4639      	mov	r1, r7
 80246a6:	f7dc f9c3 	bl	8000a30 <__aeabi_dcmpeq>
 80246aa:	2800      	cmp	r0, #0
 80246ac:	f000 80c0 	beq.w	8024830 <__kernel_rem_pio2+0x400>
 80246b0:	1e65      	subs	r5, r4, #1
 80246b2:	462b      	mov	r3, r5
 80246b4:	2200      	movs	r2, #0
 80246b6:	9902      	ldr	r1, [sp, #8]
 80246b8:	428b      	cmp	r3, r1
 80246ba:	da6c      	bge.n	8024796 <__kernel_rem_pio2+0x366>
 80246bc:	2a00      	cmp	r2, #0
 80246be:	f000 8089 	beq.w	80247d4 <__kernel_rem_pio2+0x3a4>
 80246c2:	ab0e      	add	r3, sp, #56	; 0x38
 80246c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80246c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80246cc:	2b00      	cmp	r3, #0
 80246ce:	f000 80ad 	beq.w	802482c <__kernel_rem_pio2+0x3fc>
 80246d2:	4650      	mov	r0, sl
 80246d4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8024750 <__kernel_rem_pio2+0x320>
 80246d8:	f000 fe82 	bl	80253e0 <scalbn>
 80246dc:	ab9a      	add	r3, sp, #616	; 0x268
 80246de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80246e2:	ec57 6b10 	vmov	r6, r7, d0
 80246e6:	00ec      	lsls	r4, r5, #3
 80246e8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80246ec:	46aa      	mov	sl, r5
 80246ee:	f1ba 0f00 	cmp.w	sl, #0
 80246f2:	f280 80d6 	bge.w	80248a2 <__kernel_rem_pio2+0x472>
 80246f6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8024748 <__kernel_rem_pio2+0x318>
 80246fa:	462e      	mov	r6, r5
 80246fc:	2e00      	cmp	r6, #0
 80246fe:	f2c0 8104 	blt.w	802490a <__kernel_rem_pio2+0x4da>
 8024702:	ab72      	add	r3, sp, #456	; 0x1c8
 8024704:	ed8d 8b06 	vstr	d8, [sp, #24]
 8024708:	f8df a064 	ldr.w	sl, [pc, #100]	; 8024770 <__kernel_rem_pio2+0x340>
 802470c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8024710:	f04f 0800 	mov.w	r8, #0
 8024714:	1baf      	subs	r7, r5, r6
 8024716:	e0ea      	b.n	80248ee <__kernel_rem_pio2+0x4be>
 8024718:	f04f 0b02 	mov.w	fp, #2
 802471c:	e759      	b.n	80245d2 <__kernel_rem_pio2+0x1a2>
 802471e:	f8d8 3000 	ldr.w	r3, [r8]
 8024722:	b955      	cbnz	r5, 802473a <__kernel_rem_pio2+0x30a>
 8024724:	b123      	cbz	r3, 8024730 <__kernel_rem_pio2+0x300>
 8024726:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 802472a:	f8c8 3000 	str.w	r3, [r8]
 802472e:	2301      	movs	r3, #1
 8024730:	3201      	adds	r2, #1
 8024732:	f108 0804 	add.w	r8, r8, #4
 8024736:	461d      	mov	r5, r3
 8024738:	e752      	b.n	80245e0 <__kernel_rem_pio2+0x1b0>
 802473a:	1acb      	subs	r3, r1, r3
 802473c:	f8c8 3000 	str.w	r3, [r8]
 8024740:	462b      	mov	r3, r5
 8024742:	e7f5      	b.n	8024730 <__kernel_rem_pio2+0x300>
 8024744:	f3af 8000 	nop.w
	...
 8024754:	3ff00000 	.word	0x3ff00000
 8024758:	08029768 	.word	0x08029768
 802475c:	40200000 	.word	0x40200000
 8024760:	3ff00000 	.word	0x3ff00000
 8024764:	3e700000 	.word	0x3e700000
 8024768:	41700000 	.word	0x41700000
 802476c:	3fe00000 	.word	0x3fe00000
 8024770:	08029728 	.word	0x08029728
 8024774:	1e62      	subs	r2, r4, #1
 8024776:	ab0e      	add	r3, sp, #56	; 0x38
 8024778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802477c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8024780:	a90e      	add	r1, sp, #56	; 0x38
 8024782:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8024786:	e739      	b.n	80245fc <__kernel_rem_pio2+0x1cc>
 8024788:	1e62      	subs	r2, r4, #1
 802478a:	ab0e      	add	r3, sp, #56	; 0x38
 802478c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024790:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8024794:	e7f4      	b.n	8024780 <__kernel_rem_pio2+0x350>
 8024796:	a90e      	add	r1, sp, #56	; 0x38
 8024798:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 802479c:	3b01      	subs	r3, #1
 802479e:	430a      	orrs	r2, r1
 80247a0:	e789      	b.n	80246b6 <__kernel_rem_pio2+0x286>
 80247a2:	3301      	adds	r3, #1
 80247a4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80247a8:	2900      	cmp	r1, #0
 80247aa:	d0fa      	beq.n	80247a2 <__kernel_rem_pio2+0x372>
 80247ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80247ae:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80247b2:	446a      	add	r2, sp
 80247b4:	3a98      	subs	r2, #152	; 0x98
 80247b6:	920a      	str	r2, [sp, #40]	; 0x28
 80247b8:	9a08      	ldr	r2, [sp, #32]
 80247ba:	18e3      	adds	r3, r4, r3
 80247bc:	18a5      	adds	r5, r4, r2
 80247be:	aa22      	add	r2, sp, #136	; 0x88
 80247c0:	f104 0801 	add.w	r8, r4, #1
 80247c4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80247c8:	9304      	str	r3, [sp, #16]
 80247ca:	9b04      	ldr	r3, [sp, #16]
 80247cc:	4543      	cmp	r3, r8
 80247ce:	da04      	bge.n	80247da <__kernel_rem_pio2+0x3aa>
 80247d0:	461c      	mov	r4, r3
 80247d2:	e6a3      	b.n	802451c <__kernel_rem_pio2+0xec>
 80247d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80247d6:	2301      	movs	r3, #1
 80247d8:	e7e4      	b.n	80247a4 <__kernel_rem_pio2+0x374>
 80247da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80247dc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80247e0:	f7db fe54 	bl	800048c <__aeabi_i2d>
 80247e4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80247e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80247ea:	46ab      	mov	fp, r5
 80247ec:	461c      	mov	r4, r3
 80247ee:	f04f 0900 	mov.w	r9, #0
 80247f2:	2600      	movs	r6, #0
 80247f4:	2700      	movs	r7, #0
 80247f6:	9b06      	ldr	r3, [sp, #24]
 80247f8:	4599      	cmp	r9, r3
 80247fa:	dd06      	ble.n	802480a <__kernel_rem_pio2+0x3da>
 80247fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80247fe:	e8e3 6702 	strd	r6, r7, [r3], #8
 8024802:	f108 0801 	add.w	r8, r8, #1
 8024806:	930a      	str	r3, [sp, #40]	; 0x28
 8024808:	e7df      	b.n	80247ca <__kernel_rem_pio2+0x39a>
 802480a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 802480e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8024812:	f7db fea5 	bl	8000560 <__aeabi_dmul>
 8024816:	4602      	mov	r2, r0
 8024818:	460b      	mov	r3, r1
 802481a:	4630      	mov	r0, r6
 802481c:	4639      	mov	r1, r7
 802481e:	f7db fce9 	bl	80001f4 <__adddf3>
 8024822:	f109 0901 	add.w	r9, r9, #1
 8024826:	4606      	mov	r6, r0
 8024828:	460f      	mov	r7, r1
 802482a:	e7e4      	b.n	80247f6 <__kernel_rem_pio2+0x3c6>
 802482c:	3d01      	subs	r5, #1
 802482e:	e748      	b.n	80246c2 <__kernel_rem_pio2+0x292>
 8024830:	ec47 6b10 	vmov	d0, r6, r7
 8024834:	f1ca 0000 	rsb	r0, sl, #0
 8024838:	f000 fdd2 	bl	80253e0 <scalbn>
 802483c:	ec57 6b10 	vmov	r6, r7, d0
 8024840:	4ba0      	ldr	r3, [pc, #640]	; (8024ac4 <__kernel_rem_pio2+0x694>)
 8024842:	ee10 0a10 	vmov	r0, s0
 8024846:	2200      	movs	r2, #0
 8024848:	4639      	mov	r1, r7
 802484a:	f7dc f90f 	bl	8000a6c <__aeabi_dcmpge>
 802484e:	b1f8      	cbz	r0, 8024890 <__kernel_rem_pio2+0x460>
 8024850:	4b9d      	ldr	r3, [pc, #628]	; (8024ac8 <__kernel_rem_pio2+0x698>)
 8024852:	2200      	movs	r2, #0
 8024854:	4630      	mov	r0, r6
 8024856:	4639      	mov	r1, r7
 8024858:	f7db fe82 	bl	8000560 <__aeabi_dmul>
 802485c:	f7dc f91a 	bl	8000a94 <__aeabi_d2iz>
 8024860:	4680      	mov	r8, r0
 8024862:	f7db fe13 	bl	800048c <__aeabi_i2d>
 8024866:	4b97      	ldr	r3, [pc, #604]	; (8024ac4 <__kernel_rem_pio2+0x694>)
 8024868:	2200      	movs	r2, #0
 802486a:	f7db fe79 	bl	8000560 <__aeabi_dmul>
 802486e:	460b      	mov	r3, r1
 8024870:	4602      	mov	r2, r0
 8024872:	4639      	mov	r1, r7
 8024874:	4630      	mov	r0, r6
 8024876:	f7db fcbb 	bl	80001f0 <__aeabi_dsub>
 802487a:	f7dc f90b 	bl	8000a94 <__aeabi_d2iz>
 802487e:	1c65      	adds	r5, r4, #1
 8024880:	ab0e      	add	r3, sp, #56	; 0x38
 8024882:	f10a 0a18 	add.w	sl, sl, #24
 8024886:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 802488a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 802488e:	e720      	b.n	80246d2 <__kernel_rem_pio2+0x2a2>
 8024890:	4630      	mov	r0, r6
 8024892:	4639      	mov	r1, r7
 8024894:	f7dc f8fe 	bl	8000a94 <__aeabi_d2iz>
 8024898:	ab0e      	add	r3, sp, #56	; 0x38
 802489a:	4625      	mov	r5, r4
 802489c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80248a0:	e717      	b.n	80246d2 <__kernel_rem_pio2+0x2a2>
 80248a2:	ab0e      	add	r3, sp, #56	; 0x38
 80248a4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80248a8:	f7db fdf0 	bl	800048c <__aeabi_i2d>
 80248ac:	4632      	mov	r2, r6
 80248ae:	463b      	mov	r3, r7
 80248b0:	f7db fe56 	bl	8000560 <__aeabi_dmul>
 80248b4:	4b84      	ldr	r3, [pc, #528]	; (8024ac8 <__kernel_rem_pio2+0x698>)
 80248b6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80248ba:	2200      	movs	r2, #0
 80248bc:	4630      	mov	r0, r6
 80248be:	4639      	mov	r1, r7
 80248c0:	f7db fe4e 	bl	8000560 <__aeabi_dmul>
 80248c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80248c8:	4606      	mov	r6, r0
 80248ca:	460f      	mov	r7, r1
 80248cc:	e70f      	b.n	80246ee <__kernel_rem_pio2+0x2be>
 80248ce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80248d2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80248d6:	f7db fe43 	bl	8000560 <__aeabi_dmul>
 80248da:	4602      	mov	r2, r0
 80248dc:	460b      	mov	r3, r1
 80248de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80248e2:	f7db fc87 	bl	80001f4 <__adddf3>
 80248e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80248ea:	f108 0801 	add.w	r8, r8, #1
 80248ee:	9b02      	ldr	r3, [sp, #8]
 80248f0:	4598      	cmp	r8, r3
 80248f2:	dc01      	bgt.n	80248f8 <__kernel_rem_pio2+0x4c8>
 80248f4:	45b8      	cmp	r8, r7
 80248f6:	ddea      	ble.n	80248ce <__kernel_rem_pio2+0x49e>
 80248f8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80248fc:	ab4a      	add	r3, sp, #296	; 0x128
 80248fe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8024902:	ed87 7b00 	vstr	d7, [r7]
 8024906:	3e01      	subs	r6, #1
 8024908:	e6f8      	b.n	80246fc <__kernel_rem_pio2+0x2cc>
 802490a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 802490c:	2b02      	cmp	r3, #2
 802490e:	dc0b      	bgt.n	8024928 <__kernel_rem_pio2+0x4f8>
 8024910:	2b00      	cmp	r3, #0
 8024912:	dc35      	bgt.n	8024980 <__kernel_rem_pio2+0x550>
 8024914:	d059      	beq.n	80249ca <__kernel_rem_pio2+0x59a>
 8024916:	9b04      	ldr	r3, [sp, #16]
 8024918:	f003 0007 	and.w	r0, r3, #7
 802491c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8024920:	ecbd 8b02 	vpop	{d8}
 8024924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024928:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 802492a:	2b03      	cmp	r3, #3
 802492c:	d1f3      	bne.n	8024916 <__kernel_rem_pio2+0x4e6>
 802492e:	ab4a      	add	r3, sp, #296	; 0x128
 8024930:	4423      	add	r3, r4
 8024932:	9306      	str	r3, [sp, #24]
 8024934:	461c      	mov	r4, r3
 8024936:	469a      	mov	sl, r3
 8024938:	9502      	str	r5, [sp, #8]
 802493a:	9b02      	ldr	r3, [sp, #8]
 802493c:	2b00      	cmp	r3, #0
 802493e:	f1aa 0a08 	sub.w	sl, sl, #8
 8024942:	dc6b      	bgt.n	8024a1c <__kernel_rem_pio2+0x5ec>
 8024944:	46aa      	mov	sl, r5
 8024946:	f1ba 0f01 	cmp.w	sl, #1
 802494a:	f1a4 0408 	sub.w	r4, r4, #8
 802494e:	f300 8085 	bgt.w	8024a5c <__kernel_rem_pio2+0x62c>
 8024952:	9c06      	ldr	r4, [sp, #24]
 8024954:	2000      	movs	r0, #0
 8024956:	3408      	adds	r4, #8
 8024958:	2100      	movs	r1, #0
 802495a:	2d01      	cmp	r5, #1
 802495c:	f300 809d 	bgt.w	8024a9a <__kernel_rem_pio2+0x66a>
 8024960:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8024964:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8024968:	f1bb 0f00 	cmp.w	fp, #0
 802496c:	f040 809b 	bne.w	8024aa6 <__kernel_rem_pio2+0x676>
 8024970:	9b01      	ldr	r3, [sp, #4]
 8024972:	e9c3 5600 	strd	r5, r6, [r3]
 8024976:	e9c3 7802 	strd	r7, r8, [r3, #8]
 802497a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 802497e:	e7ca      	b.n	8024916 <__kernel_rem_pio2+0x4e6>
 8024980:	3408      	adds	r4, #8
 8024982:	ab4a      	add	r3, sp, #296	; 0x128
 8024984:	441c      	add	r4, r3
 8024986:	462e      	mov	r6, r5
 8024988:	2000      	movs	r0, #0
 802498a:	2100      	movs	r1, #0
 802498c:	2e00      	cmp	r6, #0
 802498e:	da36      	bge.n	80249fe <__kernel_rem_pio2+0x5ce>
 8024990:	f1bb 0f00 	cmp.w	fp, #0
 8024994:	d039      	beq.n	8024a0a <__kernel_rem_pio2+0x5da>
 8024996:	4602      	mov	r2, r0
 8024998:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802499c:	9c01      	ldr	r4, [sp, #4]
 802499e:	e9c4 2300 	strd	r2, r3, [r4]
 80249a2:	4602      	mov	r2, r0
 80249a4:	460b      	mov	r3, r1
 80249a6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80249aa:	f7db fc21 	bl	80001f0 <__aeabi_dsub>
 80249ae:	ae4c      	add	r6, sp, #304	; 0x130
 80249b0:	2401      	movs	r4, #1
 80249b2:	42a5      	cmp	r5, r4
 80249b4:	da2c      	bge.n	8024a10 <__kernel_rem_pio2+0x5e0>
 80249b6:	f1bb 0f00 	cmp.w	fp, #0
 80249ba:	d002      	beq.n	80249c2 <__kernel_rem_pio2+0x592>
 80249bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80249c0:	4619      	mov	r1, r3
 80249c2:	9b01      	ldr	r3, [sp, #4]
 80249c4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80249c8:	e7a5      	b.n	8024916 <__kernel_rem_pio2+0x4e6>
 80249ca:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80249ce:	eb0d 0403 	add.w	r4, sp, r3
 80249d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80249d6:	2000      	movs	r0, #0
 80249d8:	2100      	movs	r1, #0
 80249da:	2d00      	cmp	r5, #0
 80249dc:	da09      	bge.n	80249f2 <__kernel_rem_pio2+0x5c2>
 80249de:	f1bb 0f00 	cmp.w	fp, #0
 80249e2:	d002      	beq.n	80249ea <__kernel_rem_pio2+0x5ba>
 80249e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80249e8:	4619      	mov	r1, r3
 80249ea:	9b01      	ldr	r3, [sp, #4]
 80249ec:	e9c3 0100 	strd	r0, r1, [r3]
 80249f0:	e791      	b.n	8024916 <__kernel_rem_pio2+0x4e6>
 80249f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80249f6:	f7db fbfd 	bl	80001f4 <__adddf3>
 80249fa:	3d01      	subs	r5, #1
 80249fc:	e7ed      	b.n	80249da <__kernel_rem_pio2+0x5aa>
 80249fe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8024a02:	f7db fbf7 	bl	80001f4 <__adddf3>
 8024a06:	3e01      	subs	r6, #1
 8024a08:	e7c0      	b.n	802498c <__kernel_rem_pio2+0x55c>
 8024a0a:	4602      	mov	r2, r0
 8024a0c:	460b      	mov	r3, r1
 8024a0e:	e7c5      	b.n	802499c <__kernel_rem_pio2+0x56c>
 8024a10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8024a14:	f7db fbee 	bl	80001f4 <__adddf3>
 8024a18:	3401      	adds	r4, #1
 8024a1a:	e7ca      	b.n	80249b2 <__kernel_rem_pio2+0x582>
 8024a1c:	e9da 8900 	ldrd	r8, r9, [sl]
 8024a20:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8024a24:	9b02      	ldr	r3, [sp, #8]
 8024a26:	3b01      	subs	r3, #1
 8024a28:	9302      	str	r3, [sp, #8]
 8024a2a:	4632      	mov	r2, r6
 8024a2c:	463b      	mov	r3, r7
 8024a2e:	4640      	mov	r0, r8
 8024a30:	4649      	mov	r1, r9
 8024a32:	f7db fbdf 	bl	80001f4 <__adddf3>
 8024a36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024a3a:	4602      	mov	r2, r0
 8024a3c:	460b      	mov	r3, r1
 8024a3e:	4640      	mov	r0, r8
 8024a40:	4649      	mov	r1, r9
 8024a42:	f7db fbd5 	bl	80001f0 <__aeabi_dsub>
 8024a46:	4632      	mov	r2, r6
 8024a48:	463b      	mov	r3, r7
 8024a4a:	f7db fbd3 	bl	80001f4 <__adddf3>
 8024a4e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8024a52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8024a56:	ed8a 7b00 	vstr	d7, [sl]
 8024a5a:	e76e      	b.n	802493a <__kernel_rem_pio2+0x50a>
 8024a5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8024a60:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8024a64:	4640      	mov	r0, r8
 8024a66:	4632      	mov	r2, r6
 8024a68:	463b      	mov	r3, r7
 8024a6a:	4649      	mov	r1, r9
 8024a6c:	f7db fbc2 	bl	80001f4 <__adddf3>
 8024a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024a74:	4602      	mov	r2, r0
 8024a76:	460b      	mov	r3, r1
 8024a78:	4640      	mov	r0, r8
 8024a7a:	4649      	mov	r1, r9
 8024a7c:	f7db fbb8 	bl	80001f0 <__aeabi_dsub>
 8024a80:	4632      	mov	r2, r6
 8024a82:	463b      	mov	r3, r7
 8024a84:	f7db fbb6 	bl	80001f4 <__adddf3>
 8024a88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024a8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8024a90:	ed84 7b00 	vstr	d7, [r4]
 8024a94:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024a98:	e755      	b.n	8024946 <__kernel_rem_pio2+0x516>
 8024a9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8024a9e:	f7db fba9 	bl	80001f4 <__adddf3>
 8024aa2:	3d01      	subs	r5, #1
 8024aa4:	e759      	b.n	802495a <__kernel_rem_pio2+0x52a>
 8024aa6:	9b01      	ldr	r3, [sp, #4]
 8024aa8:	9a01      	ldr	r2, [sp, #4]
 8024aaa:	601d      	str	r5, [r3, #0]
 8024aac:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8024ab0:	605c      	str	r4, [r3, #4]
 8024ab2:	609f      	str	r7, [r3, #8]
 8024ab4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8024ab8:	60d3      	str	r3, [r2, #12]
 8024aba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024abe:	6110      	str	r0, [r2, #16]
 8024ac0:	6153      	str	r3, [r2, #20]
 8024ac2:	e728      	b.n	8024916 <__kernel_rem_pio2+0x4e6>
 8024ac4:	41700000 	.word	0x41700000
 8024ac8:	3e700000 	.word	0x3e700000
 8024acc:	00000000 	.word	0x00000000

08024ad0 <__kernel_sin>:
 8024ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ad4:	ed2d 8b04 	vpush	{d8-d9}
 8024ad8:	eeb0 8a41 	vmov.f32	s16, s2
 8024adc:	eef0 8a61 	vmov.f32	s17, s3
 8024ae0:	ec55 4b10 	vmov	r4, r5, d0
 8024ae4:	b083      	sub	sp, #12
 8024ae6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024aea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8024aee:	9001      	str	r0, [sp, #4]
 8024af0:	da06      	bge.n	8024b00 <__kernel_sin+0x30>
 8024af2:	ee10 0a10 	vmov	r0, s0
 8024af6:	4629      	mov	r1, r5
 8024af8:	f7db ffcc 	bl	8000a94 <__aeabi_d2iz>
 8024afc:	2800      	cmp	r0, #0
 8024afe:	d051      	beq.n	8024ba4 <__kernel_sin+0xd4>
 8024b00:	4622      	mov	r2, r4
 8024b02:	462b      	mov	r3, r5
 8024b04:	4620      	mov	r0, r4
 8024b06:	4629      	mov	r1, r5
 8024b08:	f7db fd2a 	bl	8000560 <__aeabi_dmul>
 8024b0c:	4682      	mov	sl, r0
 8024b0e:	468b      	mov	fp, r1
 8024b10:	4602      	mov	r2, r0
 8024b12:	460b      	mov	r3, r1
 8024b14:	4620      	mov	r0, r4
 8024b16:	4629      	mov	r1, r5
 8024b18:	f7db fd22 	bl	8000560 <__aeabi_dmul>
 8024b1c:	a341      	add	r3, pc, #260	; (adr r3, 8024c24 <__kernel_sin+0x154>)
 8024b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b22:	4680      	mov	r8, r0
 8024b24:	4689      	mov	r9, r1
 8024b26:	4650      	mov	r0, sl
 8024b28:	4659      	mov	r1, fp
 8024b2a:	f7db fd19 	bl	8000560 <__aeabi_dmul>
 8024b2e:	a33f      	add	r3, pc, #252	; (adr r3, 8024c2c <__kernel_sin+0x15c>)
 8024b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b34:	f7db fb5c 	bl	80001f0 <__aeabi_dsub>
 8024b38:	4652      	mov	r2, sl
 8024b3a:	465b      	mov	r3, fp
 8024b3c:	f7db fd10 	bl	8000560 <__aeabi_dmul>
 8024b40:	a33c      	add	r3, pc, #240	; (adr r3, 8024c34 <__kernel_sin+0x164>)
 8024b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b46:	f7db fb55 	bl	80001f4 <__adddf3>
 8024b4a:	4652      	mov	r2, sl
 8024b4c:	465b      	mov	r3, fp
 8024b4e:	f7db fd07 	bl	8000560 <__aeabi_dmul>
 8024b52:	a33a      	add	r3, pc, #232	; (adr r3, 8024c3c <__kernel_sin+0x16c>)
 8024b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b58:	f7db fb4a 	bl	80001f0 <__aeabi_dsub>
 8024b5c:	4652      	mov	r2, sl
 8024b5e:	465b      	mov	r3, fp
 8024b60:	f7db fcfe 	bl	8000560 <__aeabi_dmul>
 8024b64:	a337      	add	r3, pc, #220	; (adr r3, 8024c44 <__kernel_sin+0x174>)
 8024b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b6a:	f7db fb43 	bl	80001f4 <__adddf3>
 8024b6e:	9b01      	ldr	r3, [sp, #4]
 8024b70:	4606      	mov	r6, r0
 8024b72:	460f      	mov	r7, r1
 8024b74:	b9eb      	cbnz	r3, 8024bb2 <__kernel_sin+0xe2>
 8024b76:	4602      	mov	r2, r0
 8024b78:	460b      	mov	r3, r1
 8024b7a:	4650      	mov	r0, sl
 8024b7c:	4659      	mov	r1, fp
 8024b7e:	f7db fcef 	bl	8000560 <__aeabi_dmul>
 8024b82:	a325      	add	r3, pc, #148	; (adr r3, 8024c18 <__kernel_sin+0x148>)
 8024b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b88:	f7db fb32 	bl	80001f0 <__aeabi_dsub>
 8024b8c:	4642      	mov	r2, r8
 8024b8e:	464b      	mov	r3, r9
 8024b90:	f7db fce6 	bl	8000560 <__aeabi_dmul>
 8024b94:	4602      	mov	r2, r0
 8024b96:	460b      	mov	r3, r1
 8024b98:	4620      	mov	r0, r4
 8024b9a:	4629      	mov	r1, r5
 8024b9c:	f7db fb2a 	bl	80001f4 <__adddf3>
 8024ba0:	4604      	mov	r4, r0
 8024ba2:	460d      	mov	r5, r1
 8024ba4:	ec45 4b10 	vmov	d0, r4, r5
 8024ba8:	b003      	add	sp, #12
 8024baa:	ecbd 8b04 	vpop	{d8-d9}
 8024bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024bb2:	4b1b      	ldr	r3, [pc, #108]	; (8024c20 <__kernel_sin+0x150>)
 8024bb4:	ec51 0b18 	vmov	r0, r1, d8
 8024bb8:	2200      	movs	r2, #0
 8024bba:	f7db fcd1 	bl	8000560 <__aeabi_dmul>
 8024bbe:	4632      	mov	r2, r6
 8024bc0:	ec41 0b19 	vmov	d9, r0, r1
 8024bc4:	463b      	mov	r3, r7
 8024bc6:	4640      	mov	r0, r8
 8024bc8:	4649      	mov	r1, r9
 8024bca:	f7db fcc9 	bl	8000560 <__aeabi_dmul>
 8024bce:	4602      	mov	r2, r0
 8024bd0:	460b      	mov	r3, r1
 8024bd2:	ec51 0b19 	vmov	r0, r1, d9
 8024bd6:	f7db fb0b 	bl	80001f0 <__aeabi_dsub>
 8024bda:	4652      	mov	r2, sl
 8024bdc:	465b      	mov	r3, fp
 8024bde:	f7db fcbf 	bl	8000560 <__aeabi_dmul>
 8024be2:	ec53 2b18 	vmov	r2, r3, d8
 8024be6:	f7db fb03 	bl	80001f0 <__aeabi_dsub>
 8024bea:	a30b      	add	r3, pc, #44	; (adr r3, 8024c18 <__kernel_sin+0x148>)
 8024bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bf0:	4606      	mov	r6, r0
 8024bf2:	460f      	mov	r7, r1
 8024bf4:	4640      	mov	r0, r8
 8024bf6:	4649      	mov	r1, r9
 8024bf8:	f7db fcb2 	bl	8000560 <__aeabi_dmul>
 8024bfc:	4602      	mov	r2, r0
 8024bfe:	460b      	mov	r3, r1
 8024c00:	4630      	mov	r0, r6
 8024c02:	4639      	mov	r1, r7
 8024c04:	f7db faf6 	bl	80001f4 <__adddf3>
 8024c08:	4602      	mov	r2, r0
 8024c0a:	460b      	mov	r3, r1
 8024c0c:	4620      	mov	r0, r4
 8024c0e:	4629      	mov	r1, r5
 8024c10:	f7db faee 	bl	80001f0 <__aeabi_dsub>
 8024c14:	e7c4      	b.n	8024ba0 <__kernel_sin+0xd0>
 8024c16:	bf00      	nop
 8024c18:	55555549 	.word	0x55555549
 8024c1c:	3fc55555 	.word	0x3fc55555
 8024c20:	3fe00000 	.word	0x3fe00000
 8024c24:	5acfd57c 	.word	0x5acfd57c
 8024c28:	3de5d93a 	.word	0x3de5d93a
 8024c2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8024c30:	3e5ae5e6 	.word	0x3e5ae5e6
 8024c34:	57b1fe7d 	.word	0x57b1fe7d
 8024c38:	3ec71de3 	.word	0x3ec71de3
 8024c3c:	19c161d5 	.word	0x19c161d5
 8024c40:	3f2a01a0 	.word	0x3f2a01a0
 8024c44:	1110f8a6 	.word	0x1110f8a6
 8024c48:	3f811111 	.word	0x3f811111

08024c4c <__kernel_cosf>:
 8024c4c:	ee10 3a10 	vmov	r3, s0
 8024c50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024c54:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8024c58:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8024c5c:	da05      	bge.n	8024c6a <__kernel_cosf+0x1e>
 8024c5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8024c62:	ee17 2a90 	vmov	r2, s15
 8024c66:	2a00      	cmp	r2, #0
 8024c68:	d03d      	beq.n	8024ce6 <__kernel_cosf+0x9a>
 8024c6a:	ee60 5a00 	vmul.f32	s11, s0, s0
 8024c6e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8024cec <__kernel_cosf+0xa0>
 8024c72:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8024cf0 <__kernel_cosf+0xa4>
 8024c76:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8024cf4 <__kernel_cosf+0xa8>
 8024c7a:	4a1f      	ldr	r2, [pc, #124]	; (8024cf8 <__kernel_cosf+0xac>)
 8024c7c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8024c80:	4293      	cmp	r3, r2
 8024c82:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8024cfc <__kernel_cosf+0xb0>
 8024c86:	eee7 7a25 	vfma.f32	s15, s14, s11
 8024c8a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8024d00 <__kernel_cosf+0xb4>
 8024c8e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8024c92:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8024d04 <__kernel_cosf+0xb8>
 8024c96:	eee7 7a25 	vfma.f32	s15, s14, s11
 8024c9a:	eeb0 7a66 	vmov.f32	s14, s13
 8024c9e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8024ca2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8024ca6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8024caa:	ee67 6a25 	vmul.f32	s13, s14, s11
 8024cae:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8024cb2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8024cb6:	dc04      	bgt.n	8024cc2 <__kernel_cosf+0x76>
 8024cb8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8024cbc:	ee36 0a47 	vsub.f32	s0, s12, s14
 8024cc0:	4770      	bx	lr
 8024cc2:	4a11      	ldr	r2, [pc, #68]	; (8024d08 <__kernel_cosf+0xbc>)
 8024cc4:	4293      	cmp	r3, r2
 8024cc6:	bfda      	itte	le
 8024cc8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8024ccc:	ee06 3a90 	vmovle	s13, r3
 8024cd0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8024cd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8024cd8:	ee36 0a66 	vsub.f32	s0, s12, s13
 8024cdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024ce0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024ce4:	4770      	bx	lr
 8024ce6:	eeb0 0a46 	vmov.f32	s0, s12
 8024cea:	4770      	bx	lr
 8024cec:	ad47d74e 	.word	0xad47d74e
 8024cf0:	310f74f6 	.word	0x310f74f6
 8024cf4:	3d2aaaab 	.word	0x3d2aaaab
 8024cf8:	3e999999 	.word	0x3e999999
 8024cfc:	b493f27c 	.word	0xb493f27c
 8024d00:	37d00d01 	.word	0x37d00d01
 8024d04:	bab60b61 	.word	0xbab60b61
 8024d08:	3f480000 	.word	0x3f480000

08024d0c <__kernel_rem_pio2f>:
 8024d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d10:	ed2d 8b04 	vpush	{d8-d9}
 8024d14:	b0d9      	sub	sp, #356	; 0x164
 8024d16:	4688      	mov	r8, r1
 8024d18:	9002      	str	r0, [sp, #8]
 8024d1a:	49bb      	ldr	r1, [pc, #748]	; (8025008 <__kernel_rem_pio2f+0x2fc>)
 8024d1c:	9866      	ldr	r0, [sp, #408]	; 0x198
 8024d1e:	9301      	str	r3, [sp, #4]
 8024d20:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8024d24:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8024d28:	1e59      	subs	r1, r3, #1
 8024d2a:	1d13      	adds	r3, r2, #4
 8024d2c:	db27      	blt.n	8024d7e <__kernel_rem_pio2f+0x72>
 8024d2e:	f1b2 0b03 	subs.w	fp, r2, #3
 8024d32:	bf48      	it	mi
 8024d34:	f102 0b04 	addmi.w	fp, r2, #4
 8024d38:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8024d3c:	1c45      	adds	r5, r0, #1
 8024d3e:	00ec      	lsls	r4, r5, #3
 8024d40:	1a47      	subs	r7, r0, r1
 8024d42:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8025018 <__kernel_rem_pio2f+0x30c>
 8024d46:	9403      	str	r4, [sp, #12]
 8024d48:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8024d4c:	eb0a 0c01 	add.w	ip, sl, r1
 8024d50:	ae1c      	add	r6, sp, #112	; 0x70
 8024d52:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8024d56:	2400      	movs	r4, #0
 8024d58:	4564      	cmp	r4, ip
 8024d5a:	dd12      	ble.n	8024d82 <__kernel_rem_pio2f+0x76>
 8024d5c:	9b01      	ldr	r3, [sp, #4]
 8024d5e:	ac1c      	add	r4, sp, #112	; 0x70
 8024d60:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8024d64:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8024d68:	f04f 0c00 	mov.w	ip, #0
 8024d6c:	45d4      	cmp	ip, sl
 8024d6e:	dc27      	bgt.n	8024dc0 <__kernel_rem_pio2f+0xb4>
 8024d70:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8024d74:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8025018 <__kernel_rem_pio2f+0x30c>
 8024d78:	4627      	mov	r7, r4
 8024d7a:	2600      	movs	r6, #0
 8024d7c:	e016      	b.n	8024dac <__kernel_rem_pio2f+0xa0>
 8024d7e:	2000      	movs	r0, #0
 8024d80:	e7dc      	b.n	8024d3c <__kernel_rem_pio2f+0x30>
 8024d82:	42e7      	cmn	r7, r4
 8024d84:	bf5d      	ittte	pl
 8024d86:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8024d8a:	ee07 3a90 	vmovpl	s15, r3
 8024d8e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8024d92:	eef0 7a47 	vmovmi.f32	s15, s14
 8024d96:	ece6 7a01 	vstmia	r6!, {s15}
 8024d9a:	3401      	adds	r4, #1
 8024d9c:	e7dc      	b.n	8024d58 <__kernel_rem_pio2f+0x4c>
 8024d9e:	ecf9 6a01 	vldmia	r9!, {s13}
 8024da2:	ed97 7a00 	vldr	s14, [r7]
 8024da6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8024daa:	3601      	adds	r6, #1
 8024dac:	428e      	cmp	r6, r1
 8024dae:	f1a7 0704 	sub.w	r7, r7, #4
 8024db2:	ddf4      	ble.n	8024d9e <__kernel_rem_pio2f+0x92>
 8024db4:	eceb 7a01 	vstmia	fp!, {s15}
 8024db8:	f10c 0c01 	add.w	ip, ip, #1
 8024dbc:	3404      	adds	r4, #4
 8024dbe:	e7d5      	b.n	8024d6c <__kernel_rem_pio2f+0x60>
 8024dc0:	ab08      	add	r3, sp, #32
 8024dc2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8024dc6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8025014 <__kernel_rem_pio2f+0x308>
 8024dca:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8025010 <__kernel_rem_pio2f+0x304>
 8024dce:	9304      	str	r3, [sp, #16]
 8024dd0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8024dd4:	4656      	mov	r6, sl
 8024dd6:	00b3      	lsls	r3, r6, #2
 8024dd8:	9305      	str	r3, [sp, #20]
 8024dda:	ab58      	add	r3, sp, #352	; 0x160
 8024ddc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8024de0:	ac08      	add	r4, sp, #32
 8024de2:	ab44      	add	r3, sp, #272	; 0x110
 8024de4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8024de8:	46a4      	mov	ip, r4
 8024dea:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8024dee:	4637      	mov	r7, r6
 8024df0:	2f00      	cmp	r7, #0
 8024df2:	f1a0 0004 	sub.w	r0, r0, #4
 8024df6:	dc4f      	bgt.n	8024e98 <__kernel_rem_pio2f+0x18c>
 8024df8:	4628      	mov	r0, r5
 8024dfa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8024dfe:	f000 fca5 	bl	802574c <scalbnf>
 8024e02:	eeb0 8a40 	vmov.f32	s16, s0
 8024e06:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8024e0a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8024e0e:	f000 fc55 	bl	80256bc <floorf>
 8024e12:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8024e16:	eea0 8a67 	vfms.f32	s16, s0, s15
 8024e1a:	2d00      	cmp	r5, #0
 8024e1c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8024e20:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8024e24:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8024e28:	ee17 9a90 	vmov	r9, s15
 8024e2c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8024e30:	dd44      	ble.n	8024ebc <__kernel_rem_pio2f+0x1b0>
 8024e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8024e36:	ab08      	add	r3, sp, #32
 8024e38:	f1c5 0e08 	rsb	lr, r5, #8
 8024e3c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8024e40:	fa47 f00e 	asr.w	r0, r7, lr
 8024e44:	4481      	add	r9, r0
 8024e46:	fa00 f00e 	lsl.w	r0, r0, lr
 8024e4a:	1a3f      	subs	r7, r7, r0
 8024e4c:	f1c5 0007 	rsb	r0, r5, #7
 8024e50:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8024e54:	4107      	asrs	r7, r0
 8024e56:	2f00      	cmp	r7, #0
 8024e58:	dd3f      	ble.n	8024eda <__kernel_rem_pio2f+0x1ce>
 8024e5a:	f04f 0e00 	mov.w	lr, #0
 8024e5e:	f109 0901 	add.w	r9, r9, #1
 8024e62:	4673      	mov	r3, lr
 8024e64:	4576      	cmp	r6, lr
 8024e66:	dc6b      	bgt.n	8024f40 <__kernel_rem_pio2f+0x234>
 8024e68:	2d00      	cmp	r5, #0
 8024e6a:	dd04      	ble.n	8024e76 <__kernel_rem_pio2f+0x16a>
 8024e6c:	2d01      	cmp	r5, #1
 8024e6e:	d078      	beq.n	8024f62 <__kernel_rem_pio2f+0x256>
 8024e70:	2d02      	cmp	r5, #2
 8024e72:	f000 8081 	beq.w	8024f78 <__kernel_rem_pio2f+0x26c>
 8024e76:	2f02      	cmp	r7, #2
 8024e78:	d12f      	bne.n	8024eda <__kernel_rem_pio2f+0x1ce>
 8024e7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024e7e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8024e82:	b353      	cbz	r3, 8024eda <__kernel_rem_pio2f+0x1ce>
 8024e84:	4628      	mov	r0, r5
 8024e86:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8024e8a:	f000 fc5f 	bl	802574c <scalbnf>
 8024e8e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8024e92:	ee38 8a40 	vsub.f32	s16, s16, s0
 8024e96:	e020      	b.n	8024eda <__kernel_rem_pio2f+0x1ce>
 8024e98:	ee60 7a28 	vmul.f32	s15, s0, s17
 8024e9c:	3f01      	subs	r7, #1
 8024e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024ea6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8024eaa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8024eae:	ecac 0a01 	vstmia	ip!, {s0}
 8024eb2:	ed90 0a00 	vldr	s0, [r0]
 8024eb6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8024eba:	e799      	b.n	8024df0 <__kernel_rem_pio2f+0xe4>
 8024ebc:	d105      	bne.n	8024eca <__kernel_rem_pio2f+0x1be>
 8024ebe:	1e70      	subs	r0, r6, #1
 8024ec0:	ab08      	add	r3, sp, #32
 8024ec2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8024ec6:	11ff      	asrs	r7, r7, #7
 8024ec8:	e7c5      	b.n	8024e56 <__kernel_rem_pio2f+0x14a>
 8024eca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8024ece:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8024ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024ed6:	da31      	bge.n	8024f3c <__kernel_rem_pio2f+0x230>
 8024ed8:	2700      	movs	r7, #0
 8024eda:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8024ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024ee2:	f040 809b 	bne.w	802501c <__kernel_rem_pio2f+0x310>
 8024ee6:	1e74      	subs	r4, r6, #1
 8024ee8:	46a4      	mov	ip, r4
 8024eea:	2000      	movs	r0, #0
 8024eec:	45d4      	cmp	ip, sl
 8024eee:	da4a      	bge.n	8024f86 <__kernel_rem_pio2f+0x27a>
 8024ef0:	2800      	cmp	r0, #0
 8024ef2:	d07a      	beq.n	8024fea <__kernel_rem_pio2f+0x2de>
 8024ef4:	ab08      	add	r3, sp, #32
 8024ef6:	3d08      	subs	r5, #8
 8024ef8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8024efc:	2b00      	cmp	r3, #0
 8024efe:	f000 8081 	beq.w	8025004 <__kernel_rem_pio2f+0x2f8>
 8024f02:	4628      	mov	r0, r5
 8024f04:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024f08:	00a5      	lsls	r5, r4, #2
 8024f0a:	f000 fc1f 	bl	802574c <scalbnf>
 8024f0e:	aa44      	add	r2, sp, #272	; 0x110
 8024f10:	1d2b      	adds	r3, r5, #4
 8024f12:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8025014 <__kernel_rem_pio2f+0x308>
 8024f16:	18d1      	adds	r1, r2, r3
 8024f18:	4622      	mov	r2, r4
 8024f1a:	2a00      	cmp	r2, #0
 8024f1c:	f280 80ae 	bge.w	802507c <__kernel_rem_pio2f+0x370>
 8024f20:	4622      	mov	r2, r4
 8024f22:	2a00      	cmp	r2, #0
 8024f24:	f2c0 80cc 	blt.w	80250c0 <__kernel_rem_pio2f+0x3b4>
 8024f28:	a944      	add	r1, sp, #272	; 0x110
 8024f2a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8024f2e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 802500c <__kernel_rem_pio2f+0x300>
 8024f32:	eddf 7a39 	vldr	s15, [pc, #228]	; 8025018 <__kernel_rem_pio2f+0x30c>
 8024f36:	2000      	movs	r0, #0
 8024f38:	1aa1      	subs	r1, r4, r2
 8024f3a:	e0b6      	b.n	80250aa <__kernel_rem_pio2f+0x39e>
 8024f3c:	2702      	movs	r7, #2
 8024f3e:	e78c      	b.n	8024e5a <__kernel_rem_pio2f+0x14e>
 8024f40:	6820      	ldr	r0, [r4, #0]
 8024f42:	b94b      	cbnz	r3, 8024f58 <__kernel_rem_pio2f+0x24c>
 8024f44:	b118      	cbz	r0, 8024f4e <__kernel_rem_pio2f+0x242>
 8024f46:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8024f4a:	6020      	str	r0, [r4, #0]
 8024f4c:	2001      	movs	r0, #1
 8024f4e:	f10e 0e01 	add.w	lr, lr, #1
 8024f52:	3404      	adds	r4, #4
 8024f54:	4603      	mov	r3, r0
 8024f56:	e785      	b.n	8024e64 <__kernel_rem_pio2f+0x158>
 8024f58:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8024f5c:	6020      	str	r0, [r4, #0]
 8024f5e:	4618      	mov	r0, r3
 8024f60:	e7f5      	b.n	8024f4e <__kernel_rem_pio2f+0x242>
 8024f62:	1e74      	subs	r4, r6, #1
 8024f64:	a808      	add	r0, sp, #32
 8024f66:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8024f6a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8024f6e:	f10d 0c20 	add.w	ip, sp, #32
 8024f72:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8024f76:	e77e      	b.n	8024e76 <__kernel_rem_pio2f+0x16a>
 8024f78:	1e74      	subs	r4, r6, #1
 8024f7a:	a808      	add	r0, sp, #32
 8024f7c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8024f80:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8024f84:	e7f3      	b.n	8024f6e <__kernel_rem_pio2f+0x262>
 8024f86:	ab08      	add	r3, sp, #32
 8024f88:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8024f8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8024f90:	4318      	orrs	r0, r3
 8024f92:	e7ab      	b.n	8024eec <__kernel_rem_pio2f+0x1e0>
 8024f94:	f10c 0c01 	add.w	ip, ip, #1
 8024f98:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8024f9c:	2c00      	cmp	r4, #0
 8024f9e:	d0f9      	beq.n	8024f94 <__kernel_rem_pio2f+0x288>
 8024fa0:	9b05      	ldr	r3, [sp, #20]
 8024fa2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8024fa6:	eb0d 0003 	add.w	r0, sp, r3
 8024faa:	9b01      	ldr	r3, [sp, #4]
 8024fac:	18f4      	adds	r4, r6, r3
 8024fae:	ab1c      	add	r3, sp, #112	; 0x70
 8024fb0:	1c77      	adds	r7, r6, #1
 8024fb2:	384c      	subs	r0, #76	; 0x4c
 8024fb4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024fb8:	4466      	add	r6, ip
 8024fba:	42be      	cmp	r6, r7
 8024fbc:	f6ff af0b 	blt.w	8024dd6 <__kernel_rem_pio2f+0xca>
 8024fc0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8024fc4:	f8dd e008 	ldr.w	lr, [sp, #8]
 8024fc8:	ee07 3a90 	vmov	s15, r3
 8024fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024fd0:	f04f 0c00 	mov.w	ip, #0
 8024fd4:	ece4 7a01 	vstmia	r4!, {s15}
 8024fd8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8025018 <__kernel_rem_pio2f+0x30c>
 8024fdc:	46a1      	mov	r9, r4
 8024fde:	458c      	cmp	ip, r1
 8024fe0:	dd07      	ble.n	8024ff2 <__kernel_rem_pio2f+0x2e6>
 8024fe2:	ece0 7a01 	vstmia	r0!, {s15}
 8024fe6:	3701      	adds	r7, #1
 8024fe8:	e7e7      	b.n	8024fba <__kernel_rem_pio2f+0x2ae>
 8024fea:	9804      	ldr	r0, [sp, #16]
 8024fec:	f04f 0c01 	mov.w	ip, #1
 8024ff0:	e7d2      	b.n	8024f98 <__kernel_rem_pio2f+0x28c>
 8024ff2:	ecfe 6a01 	vldmia	lr!, {s13}
 8024ff6:	ed39 7a01 	vldmdb	r9!, {s14}
 8024ffa:	f10c 0c01 	add.w	ip, ip, #1
 8024ffe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8025002:	e7ec      	b.n	8024fde <__kernel_rem_pio2f+0x2d2>
 8025004:	3c01      	subs	r4, #1
 8025006:	e775      	b.n	8024ef4 <__kernel_rem_pio2f+0x1e8>
 8025008:	080297a4 	.word	0x080297a4
 802500c:	08029778 	.word	0x08029778
 8025010:	43800000 	.word	0x43800000
 8025014:	3b800000 	.word	0x3b800000
 8025018:	00000000 	.word	0x00000000
 802501c:	9b03      	ldr	r3, [sp, #12]
 802501e:	eeb0 0a48 	vmov.f32	s0, s16
 8025022:	1a98      	subs	r0, r3, r2
 8025024:	f000 fb92 	bl	802574c <scalbnf>
 8025028:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8025010 <__kernel_rem_pio2f+0x304>
 802502c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8025030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025034:	db19      	blt.n	802506a <__kernel_rem_pio2f+0x35e>
 8025036:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8025014 <__kernel_rem_pio2f+0x308>
 802503a:	ee60 7a27 	vmul.f32	s15, s0, s15
 802503e:	aa08      	add	r2, sp, #32
 8025040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025044:	1c74      	adds	r4, r6, #1
 8025046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802504a:	3508      	adds	r5, #8
 802504c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8025050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025054:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8025058:	ee10 3a10 	vmov	r3, s0
 802505c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8025060:	ee17 3a90 	vmov	r3, s15
 8025064:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8025068:	e74b      	b.n	8024f02 <__kernel_rem_pio2f+0x1f6>
 802506a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802506e:	aa08      	add	r2, sp, #32
 8025070:	ee10 3a10 	vmov	r3, s0
 8025074:	4634      	mov	r4, r6
 8025076:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802507a:	e742      	b.n	8024f02 <__kernel_rem_pio2f+0x1f6>
 802507c:	a808      	add	r0, sp, #32
 802507e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8025082:	9001      	str	r0, [sp, #4]
 8025084:	ee07 0a90 	vmov	s15, r0
 8025088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802508c:	3a01      	subs	r2, #1
 802508e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8025092:	ee20 0a07 	vmul.f32	s0, s0, s14
 8025096:	ed61 7a01 	vstmdb	r1!, {s15}
 802509a:	e73e      	b.n	8024f1a <__kernel_rem_pio2f+0x20e>
 802509c:	ecfc 6a01 	vldmia	ip!, {s13}
 80250a0:	ecb6 7a01 	vldmia	r6!, {s14}
 80250a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80250a8:	3001      	adds	r0, #1
 80250aa:	4550      	cmp	r0, sl
 80250ac:	dc01      	bgt.n	80250b2 <__kernel_rem_pio2f+0x3a6>
 80250ae:	4288      	cmp	r0, r1
 80250b0:	ddf4      	ble.n	802509c <__kernel_rem_pio2f+0x390>
 80250b2:	a858      	add	r0, sp, #352	; 0x160
 80250b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80250b8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80250bc:	3a01      	subs	r2, #1
 80250be:	e730      	b.n	8024f22 <__kernel_rem_pio2f+0x216>
 80250c0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80250c2:	2a02      	cmp	r2, #2
 80250c4:	dc09      	bgt.n	80250da <__kernel_rem_pio2f+0x3ce>
 80250c6:	2a00      	cmp	r2, #0
 80250c8:	dc2a      	bgt.n	8025120 <__kernel_rem_pio2f+0x414>
 80250ca:	d043      	beq.n	8025154 <__kernel_rem_pio2f+0x448>
 80250cc:	f009 0007 	and.w	r0, r9, #7
 80250d0:	b059      	add	sp, #356	; 0x164
 80250d2:	ecbd 8b04 	vpop	{d8-d9}
 80250d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250da:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80250dc:	2b03      	cmp	r3, #3
 80250de:	d1f5      	bne.n	80250cc <__kernel_rem_pio2f+0x3c0>
 80250e0:	ab30      	add	r3, sp, #192	; 0xc0
 80250e2:	442b      	add	r3, r5
 80250e4:	461a      	mov	r2, r3
 80250e6:	4619      	mov	r1, r3
 80250e8:	4620      	mov	r0, r4
 80250ea:	2800      	cmp	r0, #0
 80250ec:	f1a1 0104 	sub.w	r1, r1, #4
 80250f0:	dc51      	bgt.n	8025196 <__kernel_rem_pio2f+0x48a>
 80250f2:	4621      	mov	r1, r4
 80250f4:	2901      	cmp	r1, #1
 80250f6:	f1a2 0204 	sub.w	r2, r2, #4
 80250fa:	dc5c      	bgt.n	80251b6 <__kernel_rem_pio2f+0x4aa>
 80250fc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8025018 <__kernel_rem_pio2f+0x30c>
 8025100:	3304      	adds	r3, #4
 8025102:	2c01      	cmp	r4, #1
 8025104:	dc67      	bgt.n	80251d6 <__kernel_rem_pio2f+0x4ca>
 8025106:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 802510a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 802510e:	2f00      	cmp	r7, #0
 8025110:	d167      	bne.n	80251e2 <__kernel_rem_pio2f+0x4d6>
 8025112:	edc8 6a00 	vstr	s13, [r8]
 8025116:	ed88 7a01 	vstr	s14, [r8, #4]
 802511a:	edc8 7a02 	vstr	s15, [r8, #8]
 802511e:	e7d5      	b.n	80250cc <__kernel_rem_pio2f+0x3c0>
 8025120:	aa30      	add	r2, sp, #192	; 0xc0
 8025122:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8025018 <__kernel_rem_pio2f+0x30c>
 8025126:	4413      	add	r3, r2
 8025128:	4622      	mov	r2, r4
 802512a:	2a00      	cmp	r2, #0
 802512c:	da24      	bge.n	8025178 <__kernel_rem_pio2f+0x46c>
 802512e:	b34f      	cbz	r7, 8025184 <__kernel_rem_pio2f+0x478>
 8025130:	eef1 7a47 	vneg.f32	s15, s14
 8025134:	edc8 7a00 	vstr	s15, [r8]
 8025138:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 802513c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025140:	aa31      	add	r2, sp, #196	; 0xc4
 8025142:	2301      	movs	r3, #1
 8025144:	429c      	cmp	r4, r3
 8025146:	da20      	bge.n	802518a <__kernel_rem_pio2f+0x47e>
 8025148:	b10f      	cbz	r7, 802514e <__kernel_rem_pio2f+0x442>
 802514a:	eef1 7a67 	vneg.f32	s15, s15
 802514e:	edc8 7a01 	vstr	s15, [r8, #4]
 8025152:	e7bb      	b.n	80250cc <__kernel_rem_pio2f+0x3c0>
 8025154:	aa30      	add	r2, sp, #192	; 0xc0
 8025156:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8025018 <__kernel_rem_pio2f+0x30c>
 802515a:	4413      	add	r3, r2
 802515c:	2c00      	cmp	r4, #0
 802515e:	da05      	bge.n	802516c <__kernel_rem_pio2f+0x460>
 8025160:	b10f      	cbz	r7, 8025166 <__kernel_rem_pio2f+0x45a>
 8025162:	eef1 7a67 	vneg.f32	s15, s15
 8025166:	edc8 7a00 	vstr	s15, [r8]
 802516a:	e7af      	b.n	80250cc <__kernel_rem_pio2f+0x3c0>
 802516c:	ed33 7a01 	vldmdb	r3!, {s14}
 8025170:	3c01      	subs	r4, #1
 8025172:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025176:	e7f1      	b.n	802515c <__kernel_rem_pio2f+0x450>
 8025178:	ed73 7a01 	vldmdb	r3!, {s15}
 802517c:	3a01      	subs	r2, #1
 802517e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8025182:	e7d2      	b.n	802512a <__kernel_rem_pio2f+0x41e>
 8025184:	eef0 7a47 	vmov.f32	s15, s14
 8025188:	e7d4      	b.n	8025134 <__kernel_rem_pio2f+0x428>
 802518a:	ecb2 7a01 	vldmia	r2!, {s14}
 802518e:	3301      	adds	r3, #1
 8025190:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025194:	e7d6      	b.n	8025144 <__kernel_rem_pio2f+0x438>
 8025196:	edd1 7a00 	vldr	s15, [r1]
 802519a:	edd1 6a01 	vldr	s13, [r1, #4]
 802519e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80251a2:	3801      	subs	r0, #1
 80251a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80251a8:	ed81 7a00 	vstr	s14, [r1]
 80251ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80251b0:	edc1 7a01 	vstr	s15, [r1, #4]
 80251b4:	e799      	b.n	80250ea <__kernel_rem_pio2f+0x3de>
 80251b6:	edd2 7a00 	vldr	s15, [r2]
 80251ba:	edd2 6a01 	vldr	s13, [r2, #4]
 80251be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80251c2:	3901      	subs	r1, #1
 80251c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80251c8:	ed82 7a00 	vstr	s14, [r2]
 80251cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80251d0:	edc2 7a01 	vstr	s15, [r2, #4]
 80251d4:	e78e      	b.n	80250f4 <__kernel_rem_pio2f+0x3e8>
 80251d6:	ed33 7a01 	vldmdb	r3!, {s14}
 80251da:	3c01      	subs	r4, #1
 80251dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80251e0:	e78f      	b.n	8025102 <__kernel_rem_pio2f+0x3f6>
 80251e2:	eef1 6a66 	vneg.f32	s13, s13
 80251e6:	eeb1 7a47 	vneg.f32	s14, s14
 80251ea:	edc8 6a00 	vstr	s13, [r8]
 80251ee:	ed88 7a01 	vstr	s14, [r8, #4]
 80251f2:	eef1 7a67 	vneg.f32	s15, s15
 80251f6:	e790      	b.n	802511a <__kernel_rem_pio2f+0x40e>

080251f8 <__kernel_sinf>:
 80251f8:	ee10 3a10 	vmov	r3, s0
 80251fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025200:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8025204:	da04      	bge.n	8025210 <__kernel_sinf+0x18>
 8025206:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802520a:	ee17 3a90 	vmov	r3, s15
 802520e:	b35b      	cbz	r3, 8025268 <__kernel_sinf+0x70>
 8025210:	ee20 7a00 	vmul.f32	s14, s0, s0
 8025214:	eddf 7a15 	vldr	s15, [pc, #84]	; 802526c <__kernel_sinf+0x74>
 8025218:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8025270 <__kernel_sinf+0x78>
 802521c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8025220:	eddf 7a14 	vldr	s15, [pc, #80]	; 8025274 <__kernel_sinf+0x7c>
 8025224:	eee6 7a07 	vfma.f32	s15, s12, s14
 8025228:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8025278 <__kernel_sinf+0x80>
 802522c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8025230:	eddf 7a12 	vldr	s15, [pc, #72]	; 802527c <__kernel_sinf+0x84>
 8025234:	ee60 6a07 	vmul.f32	s13, s0, s14
 8025238:	eee6 7a07 	vfma.f32	s15, s12, s14
 802523c:	b930      	cbnz	r0, 802524c <__kernel_sinf+0x54>
 802523e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8025280 <__kernel_sinf+0x88>
 8025242:	eea7 6a27 	vfma.f32	s12, s14, s15
 8025246:	eea6 0a26 	vfma.f32	s0, s12, s13
 802524a:	4770      	bx	lr
 802524c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8025250:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8025254:	eee0 7a86 	vfma.f32	s15, s1, s12
 8025258:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802525c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8025284 <__kernel_sinf+0x8c>
 8025260:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8025264:	ee30 0a60 	vsub.f32	s0, s0, s1
 8025268:	4770      	bx	lr
 802526a:	bf00      	nop
 802526c:	2f2ec9d3 	.word	0x2f2ec9d3
 8025270:	b2d72f34 	.word	0xb2d72f34
 8025274:	3638ef1b 	.word	0x3638ef1b
 8025278:	b9500d01 	.word	0xb9500d01
 802527c:	3c088889 	.word	0x3c088889
 8025280:	be2aaaab 	.word	0xbe2aaaab
 8025284:	3e2aaaab 	.word	0x3e2aaaab

08025288 <with_errnof>:
 8025288:	b513      	push	{r0, r1, r4, lr}
 802528a:	4604      	mov	r4, r0
 802528c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8025290:	f7fd fbba 	bl	8022a08 <__errno>
 8025294:	ed9d 0a01 	vldr	s0, [sp, #4]
 8025298:	6004      	str	r4, [r0, #0]
 802529a:	b002      	add	sp, #8
 802529c:	bd10      	pop	{r4, pc}

0802529e <xflowf>:
 802529e:	b130      	cbz	r0, 80252ae <xflowf+0x10>
 80252a0:	eef1 7a40 	vneg.f32	s15, s0
 80252a4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80252a8:	2022      	movs	r0, #34	; 0x22
 80252aa:	f7ff bfed 	b.w	8025288 <with_errnof>
 80252ae:	eef0 7a40 	vmov.f32	s15, s0
 80252b2:	e7f7      	b.n	80252a4 <xflowf+0x6>

080252b4 <__math_uflowf>:
 80252b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80252bc <__math_uflowf+0x8>
 80252b8:	f7ff bff1 	b.w	802529e <xflowf>
 80252bc:	10000000 	.word	0x10000000

080252c0 <__math_oflowf>:
 80252c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80252c8 <__math_oflowf+0x8>
 80252c4:	f7ff bfeb 	b.w	802529e <xflowf>
 80252c8:	70000000 	.word	0x70000000

080252cc <fabs>:
 80252cc:	ec51 0b10 	vmov	r0, r1, d0
 80252d0:	ee10 2a10 	vmov	r2, s0
 80252d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80252d8:	ec43 2b10 	vmov	d0, r2, r3
 80252dc:	4770      	bx	lr
	...

080252e0 <floor>:
 80252e0:	ec51 0b10 	vmov	r0, r1, d0
 80252e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80252e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80252ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80252f0:	2e13      	cmp	r6, #19
 80252f2:	ee10 5a10 	vmov	r5, s0
 80252f6:	ee10 8a10 	vmov	r8, s0
 80252fa:	460c      	mov	r4, r1
 80252fc:	dc32      	bgt.n	8025364 <floor+0x84>
 80252fe:	2e00      	cmp	r6, #0
 8025300:	da14      	bge.n	802532c <floor+0x4c>
 8025302:	a333      	add	r3, pc, #204	; (adr r3, 80253d0 <floor+0xf0>)
 8025304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025308:	f7da ff74 	bl	80001f4 <__adddf3>
 802530c:	2200      	movs	r2, #0
 802530e:	2300      	movs	r3, #0
 8025310:	f7db fbb6 	bl	8000a80 <__aeabi_dcmpgt>
 8025314:	b138      	cbz	r0, 8025326 <floor+0x46>
 8025316:	2c00      	cmp	r4, #0
 8025318:	da57      	bge.n	80253ca <floor+0xea>
 802531a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802531e:	431d      	orrs	r5, r3
 8025320:	d001      	beq.n	8025326 <floor+0x46>
 8025322:	4c2d      	ldr	r4, [pc, #180]	; (80253d8 <floor+0xf8>)
 8025324:	2500      	movs	r5, #0
 8025326:	4621      	mov	r1, r4
 8025328:	4628      	mov	r0, r5
 802532a:	e025      	b.n	8025378 <floor+0x98>
 802532c:	4f2b      	ldr	r7, [pc, #172]	; (80253dc <floor+0xfc>)
 802532e:	4137      	asrs	r7, r6
 8025330:	ea01 0307 	and.w	r3, r1, r7
 8025334:	4303      	orrs	r3, r0
 8025336:	d01f      	beq.n	8025378 <floor+0x98>
 8025338:	a325      	add	r3, pc, #148	; (adr r3, 80253d0 <floor+0xf0>)
 802533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802533e:	f7da ff59 	bl	80001f4 <__adddf3>
 8025342:	2200      	movs	r2, #0
 8025344:	2300      	movs	r3, #0
 8025346:	f7db fb9b 	bl	8000a80 <__aeabi_dcmpgt>
 802534a:	2800      	cmp	r0, #0
 802534c:	d0eb      	beq.n	8025326 <floor+0x46>
 802534e:	2c00      	cmp	r4, #0
 8025350:	bfbe      	ittt	lt
 8025352:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8025356:	fa43 f606 	asrlt.w	r6, r3, r6
 802535a:	19a4      	addlt	r4, r4, r6
 802535c:	ea24 0407 	bic.w	r4, r4, r7
 8025360:	2500      	movs	r5, #0
 8025362:	e7e0      	b.n	8025326 <floor+0x46>
 8025364:	2e33      	cmp	r6, #51	; 0x33
 8025366:	dd0b      	ble.n	8025380 <floor+0xa0>
 8025368:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802536c:	d104      	bne.n	8025378 <floor+0x98>
 802536e:	ee10 2a10 	vmov	r2, s0
 8025372:	460b      	mov	r3, r1
 8025374:	f7da ff3e 	bl	80001f4 <__adddf3>
 8025378:	ec41 0b10 	vmov	d0, r0, r1
 802537c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025380:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8025384:	f04f 33ff 	mov.w	r3, #4294967295
 8025388:	fa23 f707 	lsr.w	r7, r3, r7
 802538c:	4207      	tst	r7, r0
 802538e:	d0f3      	beq.n	8025378 <floor+0x98>
 8025390:	a30f      	add	r3, pc, #60	; (adr r3, 80253d0 <floor+0xf0>)
 8025392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025396:	f7da ff2d 	bl	80001f4 <__adddf3>
 802539a:	2200      	movs	r2, #0
 802539c:	2300      	movs	r3, #0
 802539e:	f7db fb6f 	bl	8000a80 <__aeabi_dcmpgt>
 80253a2:	2800      	cmp	r0, #0
 80253a4:	d0bf      	beq.n	8025326 <floor+0x46>
 80253a6:	2c00      	cmp	r4, #0
 80253a8:	da02      	bge.n	80253b0 <floor+0xd0>
 80253aa:	2e14      	cmp	r6, #20
 80253ac:	d103      	bne.n	80253b6 <floor+0xd6>
 80253ae:	3401      	adds	r4, #1
 80253b0:	ea25 0507 	bic.w	r5, r5, r7
 80253b4:	e7b7      	b.n	8025326 <floor+0x46>
 80253b6:	2301      	movs	r3, #1
 80253b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80253bc:	fa03 f606 	lsl.w	r6, r3, r6
 80253c0:	4435      	add	r5, r6
 80253c2:	4545      	cmp	r5, r8
 80253c4:	bf38      	it	cc
 80253c6:	18e4      	addcc	r4, r4, r3
 80253c8:	e7f2      	b.n	80253b0 <floor+0xd0>
 80253ca:	2500      	movs	r5, #0
 80253cc:	462c      	mov	r4, r5
 80253ce:	e7aa      	b.n	8025326 <floor+0x46>
 80253d0:	8800759c 	.word	0x8800759c
 80253d4:	7e37e43c 	.word	0x7e37e43c
 80253d8:	bff00000 	.word	0xbff00000
 80253dc:	000fffff 	.word	0x000fffff

080253e0 <scalbn>:
 80253e0:	b570      	push	{r4, r5, r6, lr}
 80253e2:	ec55 4b10 	vmov	r4, r5, d0
 80253e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80253ea:	4606      	mov	r6, r0
 80253ec:	462b      	mov	r3, r5
 80253ee:	b99a      	cbnz	r2, 8025418 <scalbn+0x38>
 80253f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80253f4:	4323      	orrs	r3, r4
 80253f6:	d036      	beq.n	8025466 <scalbn+0x86>
 80253f8:	4b39      	ldr	r3, [pc, #228]	; (80254e0 <scalbn+0x100>)
 80253fa:	4629      	mov	r1, r5
 80253fc:	ee10 0a10 	vmov	r0, s0
 8025400:	2200      	movs	r2, #0
 8025402:	f7db f8ad 	bl	8000560 <__aeabi_dmul>
 8025406:	4b37      	ldr	r3, [pc, #220]	; (80254e4 <scalbn+0x104>)
 8025408:	429e      	cmp	r6, r3
 802540a:	4604      	mov	r4, r0
 802540c:	460d      	mov	r5, r1
 802540e:	da10      	bge.n	8025432 <scalbn+0x52>
 8025410:	a32b      	add	r3, pc, #172	; (adr r3, 80254c0 <scalbn+0xe0>)
 8025412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025416:	e03a      	b.n	802548e <scalbn+0xae>
 8025418:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802541c:	428a      	cmp	r2, r1
 802541e:	d10c      	bne.n	802543a <scalbn+0x5a>
 8025420:	ee10 2a10 	vmov	r2, s0
 8025424:	4620      	mov	r0, r4
 8025426:	4629      	mov	r1, r5
 8025428:	f7da fee4 	bl	80001f4 <__adddf3>
 802542c:	4604      	mov	r4, r0
 802542e:	460d      	mov	r5, r1
 8025430:	e019      	b.n	8025466 <scalbn+0x86>
 8025432:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8025436:	460b      	mov	r3, r1
 8025438:	3a36      	subs	r2, #54	; 0x36
 802543a:	4432      	add	r2, r6
 802543c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8025440:	428a      	cmp	r2, r1
 8025442:	dd08      	ble.n	8025456 <scalbn+0x76>
 8025444:	2d00      	cmp	r5, #0
 8025446:	a120      	add	r1, pc, #128	; (adr r1, 80254c8 <scalbn+0xe8>)
 8025448:	e9d1 0100 	ldrd	r0, r1, [r1]
 802544c:	da1c      	bge.n	8025488 <scalbn+0xa8>
 802544e:	a120      	add	r1, pc, #128	; (adr r1, 80254d0 <scalbn+0xf0>)
 8025450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025454:	e018      	b.n	8025488 <scalbn+0xa8>
 8025456:	2a00      	cmp	r2, #0
 8025458:	dd08      	ble.n	802546c <scalbn+0x8c>
 802545a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802545e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025462:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025466:	ec45 4b10 	vmov	d0, r4, r5
 802546a:	bd70      	pop	{r4, r5, r6, pc}
 802546c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8025470:	da19      	bge.n	80254a6 <scalbn+0xc6>
 8025472:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025476:	429e      	cmp	r6, r3
 8025478:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802547c:	dd0a      	ble.n	8025494 <scalbn+0xb4>
 802547e:	a112      	add	r1, pc, #72	; (adr r1, 80254c8 <scalbn+0xe8>)
 8025480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025484:	2b00      	cmp	r3, #0
 8025486:	d1e2      	bne.n	802544e <scalbn+0x6e>
 8025488:	a30f      	add	r3, pc, #60	; (adr r3, 80254c8 <scalbn+0xe8>)
 802548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802548e:	f7db f867 	bl	8000560 <__aeabi_dmul>
 8025492:	e7cb      	b.n	802542c <scalbn+0x4c>
 8025494:	a10a      	add	r1, pc, #40	; (adr r1, 80254c0 <scalbn+0xe0>)
 8025496:	e9d1 0100 	ldrd	r0, r1, [r1]
 802549a:	2b00      	cmp	r3, #0
 802549c:	d0b8      	beq.n	8025410 <scalbn+0x30>
 802549e:	a10e      	add	r1, pc, #56	; (adr r1, 80254d8 <scalbn+0xf8>)
 80254a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80254a4:	e7b4      	b.n	8025410 <scalbn+0x30>
 80254a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80254aa:	3236      	adds	r2, #54	; 0x36
 80254ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80254b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80254b4:	4620      	mov	r0, r4
 80254b6:	4b0c      	ldr	r3, [pc, #48]	; (80254e8 <scalbn+0x108>)
 80254b8:	2200      	movs	r2, #0
 80254ba:	e7e8      	b.n	802548e <scalbn+0xae>
 80254bc:	f3af 8000 	nop.w
 80254c0:	c2f8f359 	.word	0xc2f8f359
 80254c4:	01a56e1f 	.word	0x01a56e1f
 80254c8:	8800759c 	.word	0x8800759c
 80254cc:	7e37e43c 	.word	0x7e37e43c
 80254d0:	8800759c 	.word	0x8800759c
 80254d4:	fe37e43c 	.word	0xfe37e43c
 80254d8:	c2f8f359 	.word	0xc2f8f359
 80254dc:	81a56e1f 	.word	0x81a56e1f
 80254e0:	43500000 	.word	0x43500000
 80254e4:	ffff3cb0 	.word	0xffff3cb0
 80254e8:	3c900000 	.word	0x3c900000

080254ec <atanf>:
 80254ec:	b538      	push	{r3, r4, r5, lr}
 80254ee:	ee10 5a10 	vmov	r5, s0
 80254f2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80254f6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80254fa:	eef0 7a40 	vmov.f32	s15, s0
 80254fe:	db10      	blt.n	8025522 <atanf+0x36>
 8025500:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8025504:	dd04      	ble.n	8025510 <atanf+0x24>
 8025506:	ee70 7a00 	vadd.f32	s15, s0, s0
 802550a:	eeb0 0a67 	vmov.f32	s0, s15
 802550e:	bd38      	pop	{r3, r4, r5, pc}
 8025510:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8025648 <atanf+0x15c>
 8025514:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 802564c <atanf+0x160>
 8025518:	2d00      	cmp	r5, #0
 802551a:	bfd8      	it	le
 802551c:	eef0 7a40 	vmovle.f32	s15, s0
 8025520:	e7f3      	b.n	802550a <atanf+0x1e>
 8025522:	4b4b      	ldr	r3, [pc, #300]	; (8025650 <atanf+0x164>)
 8025524:	429c      	cmp	r4, r3
 8025526:	dc10      	bgt.n	802554a <atanf+0x5e>
 8025528:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 802552c:	da0a      	bge.n	8025544 <atanf+0x58>
 802552e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8025654 <atanf+0x168>
 8025532:	ee30 7a07 	vadd.f32	s14, s0, s14
 8025536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802553a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802553e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025542:	dce2      	bgt.n	802550a <atanf+0x1e>
 8025544:	f04f 33ff 	mov.w	r3, #4294967295
 8025548:	e013      	b.n	8025572 <atanf+0x86>
 802554a:	f000 f8a3 	bl	8025694 <fabsf>
 802554e:	4b42      	ldr	r3, [pc, #264]	; (8025658 <atanf+0x16c>)
 8025550:	429c      	cmp	r4, r3
 8025552:	dc4f      	bgt.n	80255f4 <atanf+0x108>
 8025554:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8025558:	429c      	cmp	r4, r3
 802555a:	dc41      	bgt.n	80255e0 <atanf+0xf4>
 802555c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8025560:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8025564:	eea0 7a27 	vfma.f32	s14, s0, s15
 8025568:	2300      	movs	r3, #0
 802556a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802556e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025572:	1c5a      	adds	r2, r3, #1
 8025574:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8025578:	ed9f 7a38 	vldr	s14, [pc, #224]	; 802565c <atanf+0x170>
 802557c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8025660 <atanf+0x174>
 8025580:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8025664 <atanf+0x178>
 8025584:	ee66 6a06 	vmul.f32	s13, s12, s12
 8025588:	eee6 5a87 	vfma.f32	s11, s13, s14
 802558c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8025668 <atanf+0x17c>
 8025590:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025594:	eddf 5a35 	vldr	s11, [pc, #212]	; 802566c <atanf+0x180>
 8025598:	eee7 5a26 	vfma.f32	s11, s14, s13
 802559c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8025670 <atanf+0x184>
 80255a0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80255a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8025674 <atanf+0x188>
 80255a8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80255ac:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8025678 <atanf+0x18c>
 80255b0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80255b4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 802567c <atanf+0x190>
 80255b8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80255bc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8025680 <atanf+0x194>
 80255c0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80255c4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8025684 <atanf+0x198>
 80255c8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80255cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80255d0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80255d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80255d8:	d121      	bne.n	802561e <atanf+0x132>
 80255da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80255de:	e794      	b.n	802550a <atanf+0x1e>
 80255e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80255e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80255e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80255ec:	2301      	movs	r3, #1
 80255ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80255f2:	e7be      	b.n	8025572 <atanf+0x86>
 80255f4:	4b24      	ldr	r3, [pc, #144]	; (8025688 <atanf+0x19c>)
 80255f6:	429c      	cmp	r4, r3
 80255f8:	dc0b      	bgt.n	8025612 <atanf+0x126>
 80255fa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80255fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025602:	eea0 7a27 	vfma.f32	s14, s0, s15
 8025606:	2302      	movs	r3, #2
 8025608:	ee70 6a67 	vsub.f32	s13, s0, s15
 802560c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025610:	e7af      	b.n	8025572 <atanf+0x86>
 8025612:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8025616:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802561a:	2303      	movs	r3, #3
 802561c:	e7a9      	b.n	8025572 <atanf+0x86>
 802561e:	4a1b      	ldr	r2, [pc, #108]	; (802568c <atanf+0x1a0>)
 8025620:	491b      	ldr	r1, [pc, #108]	; (8025690 <atanf+0x1a4>)
 8025622:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8025626:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802562a:	ed93 0a00 	vldr	s0, [r3]
 802562e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8025632:	ed92 0a00 	vldr	s0, [r2]
 8025636:	ee77 7a67 	vsub.f32	s15, s14, s15
 802563a:	2d00      	cmp	r5, #0
 802563c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8025640:	bfb8      	it	lt
 8025642:	eef1 7a67 	vneglt.f32	s15, s15
 8025646:	e760      	b.n	802550a <atanf+0x1e>
 8025648:	3fc90fdb 	.word	0x3fc90fdb
 802564c:	bfc90fdb 	.word	0xbfc90fdb
 8025650:	3edfffff 	.word	0x3edfffff
 8025654:	7149f2ca 	.word	0x7149f2ca
 8025658:	3f97ffff 	.word	0x3f97ffff
 802565c:	3c8569d7 	.word	0x3c8569d7
 8025660:	3d4bda59 	.word	0x3d4bda59
 8025664:	bd6ef16b 	.word	0xbd6ef16b
 8025668:	3d886b35 	.word	0x3d886b35
 802566c:	3dba2e6e 	.word	0x3dba2e6e
 8025670:	3e124925 	.word	0x3e124925
 8025674:	3eaaaaab 	.word	0x3eaaaaab
 8025678:	bd15a221 	.word	0xbd15a221
 802567c:	bd9d8795 	.word	0xbd9d8795
 8025680:	bde38e38 	.word	0xbde38e38
 8025684:	be4ccccd 	.word	0xbe4ccccd
 8025688:	401bffff 	.word	0x401bffff
 802568c:	080297b0 	.word	0x080297b0
 8025690:	080297c0 	.word	0x080297c0

08025694 <fabsf>:
 8025694:	ee10 3a10 	vmov	r3, s0
 8025698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802569c:	ee00 3a10 	vmov	s0, r3
 80256a0:	4770      	bx	lr

080256a2 <finitef>:
 80256a2:	b082      	sub	sp, #8
 80256a4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80256a8:	9801      	ldr	r0, [sp, #4]
 80256aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80256ae:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80256b2:	bfac      	ite	ge
 80256b4:	2000      	movge	r0, #0
 80256b6:	2001      	movlt	r0, #1
 80256b8:	b002      	add	sp, #8
 80256ba:	4770      	bx	lr

080256bc <floorf>:
 80256bc:	ee10 3a10 	vmov	r3, s0
 80256c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80256c4:	3a7f      	subs	r2, #127	; 0x7f
 80256c6:	2a16      	cmp	r2, #22
 80256c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80256cc:	dc2a      	bgt.n	8025724 <floorf+0x68>
 80256ce:	2a00      	cmp	r2, #0
 80256d0:	da11      	bge.n	80256f6 <floorf+0x3a>
 80256d2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8025734 <floorf+0x78>
 80256d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80256da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80256de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80256e2:	dd05      	ble.n	80256f0 <floorf+0x34>
 80256e4:	2b00      	cmp	r3, #0
 80256e6:	da23      	bge.n	8025730 <floorf+0x74>
 80256e8:	4a13      	ldr	r2, [pc, #76]	; (8025738 <floorf+0x7c>)
 80256ea:	2900      	cmp	r1, #0
 80256ec:	bf18      	it	ne
 80256ee:	4613      	movne	r3, r2
 80256f0:	ee00 3a10 	vmov	s0, r3
 80256f4:	4770      	bx	lr
 80256f6:	4911      	ldr	r1, [pc, #68]	; (802573c <floorf+0x80>)
 80256f8:	4111      	asrs	r1, r2
 80256fa:	420b      	tst	r3, r1
 80256fc:	d0fa      	beq.n	80256f4 <floorf+0x38>
 80256fe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8025734 <floorf+0x78>
 8025702:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025706:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802570a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802570e:	ddef      	ble.n	80256f0 <floorf+0x34>
 8025710:	2b00      	cmp	r3, #0
 8025712:	bfbe      	ittt	lt
 8025714:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8025718:	fa40 f202 	asrlt.w	r2, r0, r2
 802571c:	189b      	addlt	r3, r3, r2
 802571e:	ea23 0301 	bic.w	r3, r3, r1
 8025722:	e7e5      	b.n	80256f0 <floorf+0x34>
 8025724:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8025728:	d3e4      	bcc.n	80256f4 <floorf+0x38>
 802572a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802572e:	4770      	bx	lr
 8025730:	2300      	movs	r3, #0
 8025732:	e7dd      	b.n	80256f0 <floorf+0x34>
 8025734:	7149f2ca 	.word	0x7149f2ca
 8025738:	bf800000 	.word	0xbf800000
 802573c:	007fffff 	.word	0x007fffff

08025740 <nanf>:
 8025740:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025748 <nanf+0x8>
 8025744:	4770      	bx	lr
 8025746:	bf00      	nop
 8025748:	7fc00000 	.word	0x7fc00000

0802574c <scalbnf>:
 802574c:	ee10 3a10 	vmov	r3, s0
 8025750:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8025754:	d025      	beq.n	80257a2 <scalbnf+0x56>
 8025756:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802575a:	d302      	bcc.n	8025762 <scalbnf+0x16>
 802575c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025760:	4770      	bx	lr
 8025762:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8025766:	d122      	bne.n	80257ae <scalbnf+0x62>
 8025768:	4b2a      	ldr	r3, [pc, #168]	; (8025814 <scalbnf+0xc8>)
 802576a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8025818 <scalbnf+0xcc>
 802576e:	4298      	cmp	r0, r3
 8025770:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025774:	db16      	blt.n	80257a4 <scalbnf+0x58>
 8025776:	ee10 3a10 	vmov	r3, s0
 802577a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802577e:	3a19      	subs	r2, #25
 8025780:	4402      	add	r2, r0
 8025782:	2afe      	cmp	r2, #254	; 0xfe
 8025784:	dd15      	ble.n	80257b2 <scalbnf+0x66>
 8025786:	ee10 3a10 	vmov	r3, s0
 802578a:	eddf 7a24 	vldr	s15, [pc, #144]	; 802581c <scalbnf+0xd0>
 802578e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8025820 <scalbnf+0xd4>
 8025792:	2b00      	cmp	r3, #0
 8025794:	eeb0 7a67 	vmov.f32	s14, s15
 8025798:	bfb8      	it	lt
 802579a:	eef0 7a66 	vmovlt.f32	s15, s13
 802579e:	ee27 0a27 	vmul.f32	s0, s14, s15
 80257a2:	4770      	bx	lr
 80257a4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8025824 <scalbnf+0xd8>
 80257a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80257ac:	4770      	bx	lr
 80257ae:	0dd2      	lsrs	r2, r2, #23
 80257b0:	e7e6      	b.n	8025780 <scalbnf+0x34>
 80257b2:	2a00      	cmp	r2, #0
 80257b4:	dd06      	ble.n	80257c4 <scalbnf+0x78>
 80257b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80257ba:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80257be:	ee00 3a10 	vmov	s0, r3
 80257c2:	4770      	bx	lr
 80257c4:	f112 0f16 	cmn.w	r2, #22
 80257c8:	da1a      	bge.n	8025800 <scalbnf+0xb4>
 80257ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80257ce:	4298      	cmp	r0, r3
 80257d0:	ee10 3a10 	vmov	r3, s0
 80257d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80257d8:	dd0a      	ble.n	80257f0 <scalbnf+0xa4>
 80257da:	ed9f 0a10 	vldr	s0, [pc, #64]	; 802581c <scalbnf+0xd0>
 80257de:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8025820 <scalbnf+0xd4>
 80257e2:	eef0 7a40 	vmov.f32	s15, s0
 80257e6:	2b00      	cmp	r3, #0
 80257e8:	bf18      	it	ne
 80257ea:	eeb0 0a47 	vmovne.f32	s0, s14
 80257ee:	e7db      	b.n	80257a8 <scalbnf+0x5c>
 80257f0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8025824 <scalbnf+0xd8>
 80257f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8025828 <scalbnf+0xdc>
 80257f8:	eef0 7a40 	vmov.f32	s15, s0
 80257fc:	2b00      	cmp	r3, #0
 80257fe:	e7f3      	b.n	80257e8 <scalbnf+0x9c>
 8025800:	3219      	adds	r2, #25
 8025802:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025806:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802580a:	eddf 7a08 	vldr	s15, [pc, #32]	; 802582c <scalbnf+0xe0>
 802580e:	ee07 3a10 	vmov	s14, r3
 8025812:	e7c4      	b.n	802579e <scalbnf+0x52>
 8025814:	ffff3cb0 	.word	0xffff3cb0
 8025818:	4c000000 	.word	0x4c000000
 802581c:	7149f2ca 	.word	0x7149f2ca
 8025820:	f149f2ca 	.word	0xf149f2ca
 8025824:	0da24260 	.word	0x0da24260
 8025828:	8da24260 	.word	0x8da24260
 802582c:	33000000 	.word	0x33000000

08025830 <_init>:
 8025830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025832:	bf00      	nop
 8025834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025836:	bc08      	pop	{r3}
 8025838:	469e      	mov	lr, r3
 802583a:	4770      	bx	lr

0802583c <_fini>:
 802583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802583e:	bf00      	nop
 8025840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025842:	bc08      	pop	{r3}
 8025844:	469e      	mov	lr, r3
 8025846:	4770      	bx	lr
